
normal_mice_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001120c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  080113a0  080113a0  000213a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011974  08011974  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08011974  08011974  00021974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801197c  0801197c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801197c  0801197c  0002197c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011980  08011980  00021980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08011984  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001270  200001dc  08011b60  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000144c  08011b60  0003144c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b68d  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a54  00000000  00000000  0004b899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001970  00000000  00000000  000502f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001708  00000000  00000000  00051c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027670  00000000  00000000  00053368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000237dd  00000000  00000000  0007a9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df95d  00000000  00000000  0009e1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017db12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ac4  00000000  00000000  0017db64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011384 	.word	0x08011384

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08011384 	.word	0x08011384

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <control_test_motor>:

char modeacc;
volatile char g_acc_flag;

void control_test_motor(uint8_t WallMode)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
//	mode.WallControlMode=0;
	mode.WallControlMode=WallMode;
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	72bb      	strb	r3, [r7, #10]
	pl_motor_standby(1);
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f001 fb22 	bl	80025f0 <pl_motor_standby>
	pl_motor_start();
 8000fac:	f001 fb8a 	bl	80026c4 <pl_motor_start>

//	float v_e=straight_table(-180, -100, -100, -500, 7000, mode);
	float v_e=straight_table(540, 200, 200, 600, 7000, mode);
 8000fb0:	68b8      	ldr	r0, [r7, #8]
 8000fb2:	ed9f 2a18 	vldr	s4, [pc, #96]	; 8001014 <control_test_motor+0x88>
 8000fb6:	eddf 1a18 	vldr	s3, [pc, #96]	; 8001018 <control_test_motor+0x8c>
 8000fba:	ed9f 1a18 	vldr	s2, [pc, #96]	; 800101c <control_test_motor+0x90>
 8000fbe:	eddf 0a17 	vldr	s1, [pc, #92]	; 800101c <control_test_motor+0x90>
 8000fc2:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8001020 <control_test_motor+0x94>
 8000fc6:	f000 fdb7 	bl	8001b38 <straight_table>
 8000fca:	ed87 0a03 	vstr	s0, [r7, #12]

//	float v_e=straight_table(180, 150, 600, 600, 7000);
//	slalom_table(v_e,90, 0, 0, 400, 7000);
//	v_e=straight_table(180, v_e, 150, 600, 7000);
	pl_motor_stop();
 8000fce:	f001 fb8d 	bl	80026ec <pl_motor_stop>
	HAL_Delay(500);
 8000fd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fd6:	f007 fe2d 	bl	8008c34 <HAL_Delay>

	pl_motor_start();
 8000fda:	f001 fb73 	bl	80026c4 <pl_motor_start>
	v_e=turning_table(360, 240, 240, 600, 7000);
 8000fde:	ed9f 2a0d 	vldr	s4, [pc, #52]	; 8001014 <control_test_motor+0x88>
 8000fe2:	eddf 1a0d 	vldr	s3, [pc, #52]	; 8001018 <control_test_motor+0x8c>
 8000fe6:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 8001024 <control_test_motor+0x98>
 8000fea:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8001024 <control_test_motor+0x98>
 8000fee:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001028 <control_test_motor+0x9c>
 8000ff2:	f000 fe9b 	bl	8001d2c <turning_table>
 8000ff6:	ed87 0a03 	vstr	s0, [r7, #12]

	pl_motor_stop();
 8000ffa:	f001 fb77 	bl	80026ec <pl_motor_stop>
	HAL_Delay(500);
 8000ffe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001002:	f007 fe17 	bl	8008c34 <HAL_Delay>
	pl_motor_standby(0);
 8001006:	2000      	movs	r0, #0
 8001008:	f001 faf2 	bl	80025f0 <pl_motor_standby>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	45dac000 	.word	0x45dac000
 8001018:	44160000 	.word	0x44160000
 800101c:	43480000 	.word	0x43480000
 8001020:	44070000 	.word	0x44070000
 8001024:	43700000 	.word	0x43700000
 8001028:	43b40000 	.word	0x43b40000

0800102c <control_test_motor2>:

void control_test_motor2(uint8_t turn_mode,uint8_t WallMode)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	460a      	mov	r2, r1
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	4613      	mov	r3, r2
 800103a:	71bb      	strb	r3, [r7, #6]
	MOTOR_MODE mode;
//	mode.WallControlMode=0;
	mode.WallControlMode=WallMode;
 800103c:	79bb      	ldrb	r3, [r7, #6]
 800103e:	733b      	strb	r3, [r7, #12]
	mode.WallControlStatus=0;
 8001040:	2300      	movs	r3, #0
 8001042:	737b      	strb	r3, [r7, #13]
	mode.WallCutMode=0;
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]
	mode.calMazeMode=0;
 8001048:	2300      	movs	r3, #0
 800104a:	73bb      	strb	r3, [r7, #14]
	pl_motor_standby(1);
 800104c:	2001      	movs	r0, #1
 800104e:	f001 facf 	bl	80025f0 <pl_motor_standby>
	pl_motor_start();
 8001052:	f001 fb37 	bl	80026c4 <pl_motor_start>

if(turn_mode==0){
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d10d      	bne.n	8001078 <control_test_motor2+0x4c>
	straight_table(540, 100, 100, 600, 7000, mode);
 800105c:	68f8      	ldr	r0, [r7, #12]
 800105e:	ed9f 2a13 	vldr	s4, [pc, #76]	; 80010ac <control_test_motor2+0x80>
 8001062:	eddf 1a13 	vldr	s3, [pc, #76]	; 80010b0 <control_test_motor2+0x84>
 8001066:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80010b4 <control_test_motor2+0x88>
 800106a:	eddf 0a12 	vldr	s1, [pc, #72]	; 80010b4 <control_test_motor2+0x88>
 800106e:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80010b8 <control_test_motor2+0x8c>
 8001072:	f000 fd61 	bl	8001b38 <straight_table>
 8001076:	e00b      	b.n	8001090 <control_test_motor2+0x64>
}else{
	turning_table(360*5, 120, 120, 600, 7000);
 8001078:	ed9f 2a0c 	vldr	s4, [pc, #48]	; 80010ac <control_test_motor2+0x80>
 800107c:	eddf 1a0c 	vldr	s3, [pc, #48]	; 80010b0 <control_test_motor2+0x84>
 8001080:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 80010bc <control_test_motor2+0x90>
 8001084:	eddf 0a0d 	vldr	s1, [pc, #52]	; 80010bc <control_test_motor2+0x90>
 8001088:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80010c0 <control_test_motor2+0x94>
 800108c:	f000 fe4e 	bl	8001d2c <turning_table>
}

	pl_motor_stop();
 8001090:	f001 fb2c 	bl	80026ec <pl_motor_stop>
	HAL_Delay(500);
 8001094:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001098:	f007 fdcc 	bl	8008c34 <HAL_Delay>
	pl_motor_standby(0);
 800109c:	2000      	movs	r0, #0
 800109e:	f001 faa7 	bl	80025f0 <pl_motor_standby>
}
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	45dac000 	.word	0x45dac000
 80010b0:	44160000 	.word	0x44160000
 80010b4:	42c80000 	.word	0x42c80000
 80010b8:	44070000 	.word	0x44070000
 80010bc:	42f00000 	.word	0x42f00000
 80010c0:	44e10000 	.word	0x44e10000

080010c4 <motor_init>:
/*	モータの初期化					(pl_speaker_init)	*/
/*******************************************************************/
/*	モータの初期化する。						*/
/*******************************************************************/
void motor_init(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

	modeacc=0;
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <motor_init+0x1c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
	g_acc_flag=0;
 80010ce:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <motor_init+0x20>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]


}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000238 	.word	0x20000238
 80010e4:	20000239 	.word	0x20000239

080010e8 <interrupt_Motor>:



void interrupt_Motor(void){
 80010e8:	b5b0      	push	{r4, r5, r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af02      	add	r7, sp, #8

	if (modeacc == 0) {
		//g_WallControl_mode=0;
		//g_acc_flag=0;
	}
	if (modeacc == 1) {
 80010ee:	4bc4      	ldr	r3, [pc, #784]	; (8001400 <interrupt_Motor+0x318>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	f040 8088 	bne.w	8001208 <interrupt_Motor+0x120>
		g_TargetStraight.displacement += g_TargetStraight.velocity*INTERRUPT_TIME;// + g_TargetStraight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80010f8:	4bc2      	ldr	r3, [pc, #776]	; (8001404 <interrupt_Motor+0x31c>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fa23 	bl	8000548 <__aeabi_f2d>
 8001102:	4604      	mov	r4, r0
 8001104:	460d      	mov	r5, r1
 8001106:	4bbf      	ldr	r3, [pc, #764]	; (8001404 <interrupt_Motor+0x31c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fa1c 	bl	8000548 <__aeabi_f2d>
 8001110:	a3b7      	add	r3, pc, #732	; (adr r3, 80013f0 <interrupt_Motor+0x308>)
 8001112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001116:	f7ff fa6f 	bl	80005f8 <__aeabi_dmul>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4620      	mov	r0, r4
 8001120:	4629      	mov	r1, r5
 8001122:	f7ff f8b3 	bl	800028c <__adddf3>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff fd5b 	bl	8000be8 <__aeabi_d2f>
 8001132:	4603      	mov	r3, r0
 8001134:	4ab3      	ldr	r2, [pc, #716]	; (8001404 <interrupt_Motor+0x31c>)
 8001136:	6093      	str	r3, [r2, #8]
		g_TargetStraight.velocity += g_TargetStraight.acceleration*INTERRUPT_TIME;
 8001138:	4bb2      	ldr	r3, [pc, #712]	; (8001404 <interrupt_Motor+0x31c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fa03 	bl	8000548 <__aeabi_f2d>
 8001142:	4604      	mov	r4, r0
 8001144:	460d      	mov	r5, r1
 8001146:	4baf      	ldr	r3, [pc, #700]	; (8001404 <interrupt_Motor+0x31c>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f9fc 	bl	8000548 <__aeabi_f2d>
 8001150:	a3a7      	add	r3, pc, #668	; (adr r3, 80013f0 <interrupt_Motor+0x308>)
 8001152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001156:	f7ff fa4f 	bl	80005f8 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4620      	mov	r0, r4
 8001160:	4629      	mov	r1, r5
 8001162:	f7ff f893 	bl	800028c <__adddf3>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	f7ff fd3b 	bl	8000be8 <__aeabi_d2f>
 8001172:	4603      	mov	r3, r0
 8001174:	4aa3      	ldr	r2, [pc, #652]	; (8001404 <interrupt_Motor+0x31c>)
 8001176:	6013      	str	r3, [r2, #0]
		g_TargetTurning.displacement += g_TargetTurning.velocity*INTERRUPT_TIME;// + g_TargetTurning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8001178:	4ba3      	ldr	r3, [pc, #652]	; (8001408 <interrupt_Motor+0x320>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f9e3 	bl	8000548 <__aeabi_f2d>
 8001182:	4604      	mov	r4, r0
 8001184:	460d      	mov	r5, r1
 8001186:	4ba0      	ldr	r3, [pc, #640]	; (8001408 <interrupt_Motor+0x320>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f9dc 	bl	8000548 <__aeabi_f2d>
 8001190:	a397      	add	r3, pc, #604	; (adr r3, 80013f0 <interrupt_Motor+0x308>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff fa2f 	bl	80005f8 <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4620      	mov	r0, r4
 80011a0:	4629      	mov	r1, r5
 80011a2:	f7ff f873 	bl	800028c <__adddf3>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fd1b 	bl	8000be8 <__aeabi_d2f>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4a94      	ldr	r2, [pc, #592]	; (8001408 <interrupt_Motor+0x320>)
 80011b6:	6093      	str	r3, [r2, #8]
		g_TargetTurning.velocity += g_TargetTurning.acceleration*INTERRUPT_TIME;
 80011b8:	4b93      	ldr	r3, [pc, #588]	; (8001408 <interrupt_Motor+0x320>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f9c3 	bl	8000548 <__aeabi_f2d>
 80011c2:	4604      	mov	r4, r0
 80011c4:	460d      	mov	r5, r1
 80011c6:	4b90      	ldr	r3, [pc, #576]	; (8001408 <interrupt_Motor+0x320>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f9bc 	bl	8000548 <__aeabi_f2d>
 80011d0:	a387      	add	r3, pc, #540	; (adr r3, 80013f0 <interrupt_Motor+0x308>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	f7ff fa0f 	bl	80005f8 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4620      	mov	r0, r4
 80011e0:	4629      	mov	r1, r5
 80011e2:	f7ff f853 	bl	800028c <__adddf3>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fcfb 	bl	8000be8 <__aeabi_d2f>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a84      	ldr	r2, [pc, #528]	; (8001408 <interrupt_Motor+0x320>)
 80011f6:	6013      	str	r3, [r2, #0]
		cal_table(g_TrapezoidStraight,&g_TargetStraight);
 80011f8:	4b84      	ldr	r3, [pc, #528]	; (800140c <interrupt_Motor+0x324>)
 80011fa:	4a82      	ldr	r2, [pc, #520]	; (8001404 <interrupt_Motor+0x31c>)
 80011fc:	9201      	str	r2, [sp, #4]
 80011fe:	691a      	ldr	r2, [r3, #16]
 8001200:	9200      	str	r2, [sp, #0]
 8001202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001204:	f000 f94a 	bl	800149c <cal_table>
	}
	if (modeacc == 2){
 8001208:	4b7d      	ldr	r3, [pc, #500]	; (8001400 <interrupt_Motor+0x318>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b02      	cmp	r3, #2
 800120e:	f040 808b 	bne.w	8001328 <interrupt_Motor+0x240>
		g_WallControl_mode=0;
 8001212:	4b7f      	ldr	r3, [pc, #508]	; (8001410 <interrupt_Motor+0x328>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
		g_TargetStraight.displacement += g_TargetStraight.velocity*INTERRUPT_TIME;// + g_TargetStraight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8001218:	4b7a      	ldr	r3, [pc, #488]	; (8001404 <interrupt_Motor+0x31c>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f993 	bl	8000548 <__aeabi_f2d>
 8001222:	4604      	mov	r4, r0
 8001224:	460d      	mov	r5, r1
 8001226:	4b77      	ldr	r3, [pc, #476]	; (8001404 <interrupt_Motor+0x31c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f98c 	bl	8000548 <__aeabi_f2d>
 8001230:	a36f      	add	r3, pc, #444	; (adr r3, 80013f0 <interrupt_Motor+0x308>)
 8001232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001236:	f7ff f9df 	bl	80005f8 <__aeabi_dmul>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4620      	mov	r0, r4
 8001240:	4629      	mov	r1, r5
 8001242:	f7ff f823 	bl	800028c <__adddf3>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff fccb 	bl	8000be8 <__aeabi_d2f>
 8001252:	4603      	mov	r3, r0
 8001254:	4a6b      	ldr	r2, [pc, #428]	; (8001404 <interrupt_Motor+0x31c>)
 8001256:	6093      	str	r3, [r2, #8]
		g_TargetStraight.velocity += g_TargetStraight.acceleration*INTERRUPT_TIME;
 8001258:	4b6a      	ldr	r3, [pc, #424]	; (8001404 <interrupt_Motor+0x31c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f973 	bl	8000548 <__aeabi_f2d>
 8001262:	4604      	mov	r4, r0
 8001264:	460d      	mov	r5, r1
 8001266:	4b67      	ldr	r3, [pc, #412]	; (8001404 <interrupt_Motor+0x31c>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f96c 	bl	8000548 <__aeabi_f2d>
 8001270:	a35f      	add	r3, pc, #380	; (adr r3, 80013f0 <interrupt_Motor+0x308>)
 8001272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001276:	f7ff f9bf 	bl	80005f8 <__aeabi_dmul>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4620      	mov	r0, r4
 8001280:	4629      	mov	r1, r5
 8001282:	f7ff f803 	bl	800028c <__adddf3>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4610      	mov	r0, r2
 800128c:	4619      	mov	r1, r3
 800128e:	f7ff fcab 	bl	8000be8 <__aeabi_d2f>
 8001292:	4603      	mov	r3, r0
 8001294:	4a5b      	ldr	r2, [pc, #364]	; (8001404 <interrupt_Motor+0x31c>)
 8001296:	6013      	str	r3, [r2, #0]
		g_TargetTurning.displacement += g_TargetTurning.velocity*INTERRUPT_TIME;// + g_TargetTurning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8001298:	4b5b      	ldr	r3, [pc, #364]	; (8001408 <interrupt_Motor+0x320>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f953 	bl	8000548 <__aeabi_f2d>
 80012a2:	4604      	mov	r4, r0
 80012a4:	460d      	mov	r5, r1
 80012a6:	4b58      	ldr	r3, [pc, #352]	; (8001408 <interrupt_Motor+0x320>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f94c 	bl	8000548 <__aeabi_f2d>
 80012b0:	a34f      	add	r3, pc, #316	; (adr r3, 80013f0 <interrupt_Motor+0x308>)
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	f7ff f99f 	bl	80005f8 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4620      	mov	r0, r4
 80012c0:	4629      	mov	r1, r5
 80012c2:	f7fe ffe3 	bl	800028c <__adddf3>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fc8b 	bl	8000be8 <__aeabi_d2f>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4a4c      	ldr	r2, [pc, #304]	; (8001408 <interrupt_Motor+0x320>)
 80012d6:	6093      	str	r3, [r2, #8]
		g_TargetTurning.velocity += g_TargetTurning.acceleration*INTERRUPT_TIME;
 80012d8:	4b4b      	ldr	r3, [pc, #300]	; (8001408 <interrupt_Motor+0x320>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f933 	bl	8000548 <__aeabi_f2d>
 80012e2:	4604      	mov	r4, r0
 80012e4:	460d      	mov	r5, r1
 80012e6:	4b48      	ldr	r3, [pc, #288]	; (8001408 <interrupt_Motor+0x320>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f92c 	bl	8000548 <__aeabi_f2d>
 80012f0:	a33f      	add	r3, pc, #252	; (adr r3, 80013f0 <interrupt_Motor+0x308>)
 80012f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f6:	f7ff f97f 	bl	80005f8 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4620      	mov	r0, r4
 8001300:	4629      	mov	r1, r5
 8001302:	f7fe ffc3 	bl	800028c <__adddf3>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	f7ff fc6b 	bl	8000be8 <__aeabi_d2f>
 8001312:	4603      	mov	r3, r0
 8001314:	4a3c      	ldr	r2, [pc, #240]	; (8001408 <interrupt_Motor+0x320>)
 8001316:	6013      	str	r3, [r2, #0]
		cal_table(g_TrapezoidTurning,&g_TargetTurning);
 8001318:	4b3e      	ldr	r3, [pc, #248]	; (8001414 <interrupt_Motor+0x32c>)
 800131a:	4a3b      	ldr	r2, [pc, #236]	; (8001408 <interrupt_Motor+0x320>)
 800131c:	9201      	str	r2, [sp, #4]
 800131e:	691a      	ldr	r2, [r3, #16]
 8001320:	9200      	str	r2, [sp, #0]
 8001322:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001324:	f000 f8ba 	bl	800149c <cal_table>
	}
	float PID_wall = calWallConrol();
 8001328:	f000 ffa2 	bl	8002270 <calWallConrol>
 800132c:	ed87 0a03 	vstr	s0, [r7, #12]
	float velocity_l = g_TargetStraight.velocity + g_TargetTurning.velocity * TREAD_WIDTH / 2 * M_PI / 180 + PID_wall;
 8001330:	4b34      	ldr	r3, [pc, #208]	; (8001404 <interrupt_Motor+0x31c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff f907 	bl	8000548 <__aeabi_f2d>
 800133a:	4604      	mov	r4, r0
 800133c:	460d      	mov	r5, r1
 800133e:	4b32      	ldr	r3, [pc, #200]	; (8001408 <interrupt_Motor+0x320>)
 8001340:	edd3 7a00 	vldr	s15, [r3]
 8001344:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001418 <interrupt_Motor+0x330>
 8001348:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001350:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001354:	ee16 0a90 	vmov	r0, s13
 8001358:	f7ff f8f6 	bl	8000548 <__aeabi_f2d>
 800135c:	a326      	add	r3, pc, #152	; (adr r3, 80013f8 <interrupt_Motor+0x310>)
 800135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001362:	f7ff f949 	bl	80005f8 <__aeabi_dmul>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	4b2a      	ldr	r3, [pc, #168]	; (800141c <interrupt_Motor+0x334>)
 8001374:	f7ff fa6a 	bl	800084c <__aeabi_ddiv>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4620      	mov	r0, r4
 800137e:	4629      	mov	r1, r5
 8001380:	f7fe ff84 	bl	800028c <__adddf3>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4614      	mov	r4, r2
 800138a:	461d      	mov	r5, r3
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f7ff f8db 	bl	8000548 <__aeabi_f2d>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4620      	mov	r0, r4
 8001398:	4629      	mov	r1, r5
 800139a:	f7fe ff77 	bl	800028c <__adddf3>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	f7ff fc1f 	bl	8000be8 <__aeabi_d2f>
 80013aa:	4603      	mov	r3, r0
 80013ac:	60bb      	str	r3, [r7, #8]
		pl_motor_mode_L(velocity_l);
 80013ae:	ed97 0a02 	vldr	s0, [r7, #8]
 80013b2:	f001 f949 	bl	8002648 <pl_motor_mode_L>
		pl_motor_count_L(velocity_l);
 80013b6:	ed97 0a02 	vldr	s0, [r7, #8]
 80013ba:	f001 f9a7 	bl	800270c <pl_motor_count_L>
	float velocity_r = g_TargetStraight.velocity - g_TargetTurning.velocity * TREAD_WIDTH / 2 * M_PI / 180 - PID_wall;
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <interrupt_Motor+0x31c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f8c0 	bl	8000548 <__aeabi_f2d>
 80013c8:	4604      	mov	r4, r0
 80013ca:	460d      	mov	r5, r1
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <interrupt_Motor+0x320>)
 80013ce:	edd3 7a00 	vldr	s15, [r3]
 80013d2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001418 <interrupt_Motor+0x330>
 80013d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013da:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80013de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013e2:	ee16 0a90 	vmov	r0, s13
 80013e6:	f7ff f8af 	bl	8000548 <__aeabi_f2d>
 80013ea:	e019      	b.n	8001420 <interrupt_Motor+0x338>
 80013ec:	f3af 8000 	nop.w
 80013f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80013f4:	3f50624d 	.word	0x3f50624d
 80013f8:	54442d18 	.word	0x54442d18
 80013fc:	400921fb 	.word	0x400921fb
 8001400:	20000238 	.word	0x20000238
 8001404:	200001f8 	.word	0x200001f8
 8001408:	20000204 	.word	0x20000204
 800140c:	20000210 	.word	0x20000210
 8001410:	2000039c 	.word	0x2000039c
 8001414:	20000224 	.word	0x20000224
 8001418:	42a20000 	.word	0x42a20000
 800141c:	40668000 	.word	0x40668000
 8001420:	a31c      	add	r3, pc, #112	; (adr r3, 8001494 <interrupt_Motor+0x3ac>)
 8001422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001426:	f7ff f8e7 	bl	80005f8 <__aeabi_dmul>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <interrupt_Motor+0x3a8>)
 8001438:	f7ff fa08 	bl	800084c <__aeabi_ddiv>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4620      	mov	r0, r4
 8001442:	4629      	mov	r1, r5
 8001444:	f7fe ff20 	bl	8000288 <__aeabi_dsub>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4614      	mov	r4, r2
 800144e:	461d      	mov	r5, r3
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f7ff f879 	bl	8000548 <__aeabi_f2d>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4620      	mov	r0, r4
 800145c:	4629      	mov	r1, r5
 800145e:	f7fe ff13 	bl	8000288 <__aeabi_dsub>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	f7ff fbbd 	bl	8000be8 <__aeabi_d2f>
 800146e:	4603      	mov	r3, r0
 8001470:	607b      	str	r3, [r7, #4]
	    pl_motor_mode_R(velocity_r);
 8001472:	ed97 0a01 	vldr	s0, [r7, #4]
 8001476:	f001 f907 	bl	8002688 <pl_motor_mode_R>
	    pl_motor_count_R(velocity_r);
 800147a:	ed97 0a01 	vldr	s0, [r7, #4]
 800147e:	f001 f959 	bl	8002734 <pl_motor_count_R>



}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bdb0      	pop	{r4, r5, r7, pc}
 800148a:	bf00      	nop
 800148c:	f3af 8000 	nop.w
 8001490:	40668000 	.word	0x40668000
 8001494:	54442d18 	.word	0x54442d18
 8001498:	400921fb 	.word	0x400921fb

0800149c <cal_table>:

void cal_table(TRAPEZOID input,TARGET *target){
 800149c:	b084      	sub	sp, #16
 800149e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	f107 0420 	add.w	r4, r7, #32
 80014aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 80014ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80014b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ba:	f2c0 819b 	blt.w	80017f4 <cal_table+0x358>
	switch (g_acc_flag) {
 80014be:	4bcc      	ldr	r3, [pc, #816]	; (80017f0 <cal_table+0x354>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b06      	cmp	r3, #6
 80014c6:	f200 832e 	bhi.w	8001b26 <cal_table+0x68a>
 80014ca:	a201      	add	r2, pc, #4	; (adr r2, 80014d0 <cal_table+0x34>)
 80014cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d0:	08001b21 	.word	0x08001b21
 80014d4:	080014ed 	.word	0x080014ed
 80014d8:	0800165f 	.word	0x0800165f
 80014dc:	0800177d 	.word	0x0800177d
 80014e0:	08001b21 	.word	0x08001b21
 80014e4:	080017a9 	.word	0x080017a9
 80014e8:	080017cb 	.word	0x080017cb
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 80014ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ee:	ed93 7a00 	vldr	s14, [r3]
 80014f2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80014f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fe:	db0a      	blt.n	8001516 <cal_table+0x7a>
				target->velocity = input.count_velocity;
 8001500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001504:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 8001506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 800150e:	4bb8      	ldr	r3, [pc, #736]	; (80017f0 <cal_table+0x354>)
 8001510:	2202      	movs	r2, #2
 8001512:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 8001514:	e307      	b.n	8001b26 <cal_table+0x68a>
			else if((input.displacement <= (2*target->velocity*target->velocity
 8001516:	ed97 7a08 	vldr	s14, [r7, #32]
 800151a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 800152e:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8001532:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001536:	ee66 7a27 	vmul.f32	s15, s12, s15
 800153a:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 800153e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001542:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001546:	ee66 7a27 	vmul.f32	s15, s12, s15
 800154a:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 800154e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001552:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8001556:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800155a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 800155e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001566:	d900      	bls.n	800156a <cal_table+0xce>
		break;
 8001568:	e2dd      	b.n	8001b26 <cal_table+0x68a>
				time_over=((2*target->velocity*target->velocity
 800156a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800156c:	edd3 7a00 	vldr	s15, [r3]
 8001570:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001576:	edd3 7a00 	vldr	s15, [r3]
 800157a:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 800157e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001582:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800158a:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 800158e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001592:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800159a:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 800159e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80015a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015a6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80015aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80015b2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b8:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 80015bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015c0:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 80015c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ffbd 	bl	8000548 <__aeabi_f2d>
 80015ce:	4604      	mov	r4, r0
 80015d0:	460d      	mov	r5, r1
 80015d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ffb7 	bl	8000548 <__aeabi_f2d>
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	f04f 0300 	mov.w	r3, #0
 80015e2:	f7ff f809 	bl	80005f8 <__aeabi_dmul>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4690      	mov	r8, r2
 80015ec:	4699      	mov	r9, r3
 80015ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80015f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015f6:	ee17 0a90 	vmov	r0, s15
 80015fa:	f7fe ffa5 	bl	8000548 <__aeabi_f2d>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4640      	mov	r0, r8
 8001604:	4649      	mov	r1, r9
 8001606:	f7fe fff7 	bl	80005f8 <__aeabi_dmul>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4620      	mov	r0, r4
 8001610:	4629      	mov	r1, r5
 8001612:	f7fe fe39 	bl	8000288 <__aeabi_dsub>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	f7ff fae3 	bl	8000be8 <__aeabi_d2f>
 8001622:	4602      	mov	r2, r0
 8001624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001626:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 8001628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800162a:	ed93 7a00 	vldr	s14, [r3]
 800162e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001632:	edd7 7a01 	vldr	s15, [r7, #4]
 8001636:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800163a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800163e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001644:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 8001648:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800164c:	eef1 7a67 	vneg.f32	s15, s15
 8001650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001652:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 8001656:	4b66      	ldr	r3, [pc, #408]	; (80017f0 <cal_table+0x354>)
 8001658:	2203      	movs	r2, #3
 800165a:	701a      	strb	r2, [r3, #0]
		break;
 800165c:	e263      	b.n	8001b26 <cal_table+0x68a>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 800165e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001664:	edd3 7a02 	vldr	s15, [r3, #8]
 8001668:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 800166c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001670:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001674:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8001678:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800167c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001680:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001684:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001688:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800168c:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8001690:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001694:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 8001698:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800169c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a0:	d900      	bls.n	80016a4 <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 80016a2:	e240      	b.n	8001b26 <cal_table+0x68a>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80016a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80016aa:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80016ae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80016b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 80016b6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80016ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80016be:	ee66 7a27 	vmul.f32	s15, s12, s15
 80016c2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016c6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80016ca:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 80016ce:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80016d2:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80016d6:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 80016da:	edd7 7a08 	vldr	s15, [r7, #32]
 80016de:	ee77 6a67 	vsub.f32	s13, s14, s15
 80016e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e4:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80016e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ec:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 80016f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe ff27 	bl	8000548 <__aeabi_f2d>
 80016fa:	4604      	mov	r4, r0
 80016fc:	460d      	mov	r5, r1
 80016fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe ff21 	bl	8000548 <__aeabi_f2d>
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	f7fe ff73 	bl	80005f8 <__aeabi_dmul>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4690      	mov	r8, r2
 8001718:	4699      	mov	r9, r3
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7fe ff14 	bl	8000548 <__aeabi_f2d>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4640      	mov	r0, r8
 8001726:	4649      	mov	r1, r9
 8001728:	f7fe ff66 	bl	80005f8 <__aeabi_dmul>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4620      	mov	r0, r4
 8001732:	4629      	mov	r1, r5
 8001734:	f7fe fda8 	bl	8000288 <__aeabi_dsub>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4610      	mov	r0, r2
 800173e:	4619      	mov	r1, r3
 8001740:	f7ff fa52 	bl	8000be8 <__aeabi_d2f>
 8001744:	4602      	mov	r2, r0
 8001746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001748:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 800174a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174c:	ed93 7a00 	vldr	s14, [r3]
 8001750:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001754:	edd7 7a01 	vldr	s15, [r7, #4]
 8001758:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800175c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001762:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 8001766:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800176a:	eef1 7a67 	vneg.f32	s15, s15
 800176e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001770:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 8001774:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <cal_table+0x354>)
 8001776:	2203      	movs	r2, #3
 8001778:	701a      	strb	r2, [r3, #0]
		break;
 800177a:	e1d4      	b.n	8001b26 <cal_table+0x68a>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 800177c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800177e:	ed93 7a00 	vldr	s14, [r3]
 8001782:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001786:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800178a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178e:	d900      	bls.n	8001792 <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8001790:	e1c9      	b.n	8001b26 <cal_table+0x68a>
			target->velocity = input.end_velocity;
 8001792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001796:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8001798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <cal_table+0x354>)
 80017a2:	2204      	movs	r2, #4
 80017a4:	701a      	strb	r2, [r3, #0]
		break;
 80017a6:	e1be      	b.n	8001b26 <cal_table+0x68a>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 80017a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80017ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80017b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ba:	db06      	blt.n	80017ca <cal_table+0x32e>
			target->acceleration = 0;
 80017bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <cal_table+0x354>)
 80017c6:	2204      	movs	r2, #4
 80017c8:	701a      	strb	r2, [r3, #0]
		}
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 80017ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80017d0:	edd7 7a08 	vldr	s15, [r7, #32]
 80017d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017dc:	da00      	bge.n	80017e0 <cal_table+0x344>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80017de:	e1a2      	b.n	8001b26 <cal_table+0x68a>
			target->acceleration = 0;
 80017e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80017e8:	4b01      	ldr	r3, [pc, #4]	; (80017f0 <cal_table+0x354>)
 80017ea:	2204      	movs	r2, #4
 80017ec:	701a      	strb	r2, [r3, #0]
		break;
 80017ee:	e19a      	b.n	8001b26 <cal_table+0x68a>
 80017f0:	20000239 	.word	0x20000239
	}
}else{
	switch (g_acc_flag) {
 80017f4:	4bcf      	ldr	r3, [pc, #828]	; (8001b34 <cal_table+0x698>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b06      	cmp	r3, #6
 80017fc:	f200 8193 	bhi.w	8001b26 <cal_table+0x68a>
 8001800:	a201      	add	r2, pc, #4	; (adr r2, 8001808 <cal_table+0x36c>)
 8001802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001806:	bf00      	nop
 8001808:	08001b25 	.word	0x08001b25
 800180c:	08001825 	.word	0x08001825
 8001810:	08001997 	.word	0x08001997
 8001814:	08001aad 	.word	0x08001aad
 8001818:	08001ad9 	.word	0x08001ad9
 800181c:	08001ad9 	.word	0x08001ad9
 8001820:	08001afb 	.word	0x08001afb
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 8001824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001826:	ed93 7a00 	vldr	s14, [r3]
 800182a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800182e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001836:	d80a      	bhi.n	800184e <cal_table+0x3b2>
				target->velocity = input.count_velocity;
 8001838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800183a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183c:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 800183e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 8001846:	4bbb      	ldr	r3, [pc, #748]	; (8001b34 <cal_table+0x698>)
 8001848:	2202      	movs	r2, #2
 800184a:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 800184c:	e16b      	b.n	8001b26 <cal_table+0x68a>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 800184e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001852:	eeb1 7a67 	vneg.f32	s14, s15
 8001856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001858:	edd3 7a00 	vldr	s15, [r3]
 800185c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001862:	edd3 7a00 	vldr	s15, [r3]
 8001866:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 800186a:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 800186e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001872:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001876:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 800187a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800187e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001882:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001886:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 800188a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800188e:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8001892:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001896:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 800189a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800189e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a2:	d900      	bls.n	80018a6 <cal_table+0x40a>
		break;
 80018a4:	e13f      	b.n	8001b26 <cal_table+0x68a>
				time_over=(-(2*target->velocity*target->velocity
 80018a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a8:	edd3 7a00 	vldr	s15, [r3]
 80018ac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80018b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018b2:	edd3 7a00 	vldr	s15, [r3]
 80018b6:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 80018ba:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80018be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c6:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 80018ca:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80018ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80018d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d6:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 80018da:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 80018de:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80018e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018e6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80018ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018ee:	edd7 7a08 	vldr	s15, [r7, #32]
 80018f2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80018f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f8:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 80018fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001900:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8001904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fe1d 	bl	8000548 <__aeabi_f2d>
 800190e:	4604      	mov	r4, r0
 8001910:	460d      	mov	r5, r1
 8001912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fe17 	bl	8000548 <__aeabi_f2d>
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	f7fe fe69 	bl	80005f8 <__aeabi_dmul>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4690      	mov	r8, r2
 800192c:	4699      	mov	r9, r3
 800192e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001932:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001936:	ee17 0a90 	vmov	r0, s15
 800193a:	f7fe fe05 	bl	8000548 <__aeabi_f2d>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4640      	mov	r0, r8
 8001944:	4649      	mov	r1, r9
 8001946:	f7fe fe57 	bl	80005f8 <__aeabi_dmul>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4620      	mov	r0, r4
 8001950:	4629      	mov	r1, r5
 8001952:	f7fe fc9b 	bl	800028c <__adddf3>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	f7ff f943 	bl	8000be8 <__aeabi_d2f>
 8001962:	4602      	mov	r2, r0
 8001964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001966:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 8001968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196a:	ed93 7a00 	vldr	s14, [r3]
 800196e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001972:	edd7 7a01 	vldr	s15, [r7, #4]
 8001976:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800197a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800197e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001984:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 8001988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800198a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198c:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 800198e:	4b69      	ldr	r3, [pc, #420]	; (8001b34 <cal_table+0x698>)
 8001990:	2203      	movs	r2, #3
 8001992:	701a      	strb	r2, [r3, #0]
		break;
 8001994:	e0c7      	b.n	8001b26 <cal_table+0x68a>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 8001996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001998:	ed93 7a02 	vldr	s14, [r3, #8]
 800199c:	edd7 7a08 	vldr	s15, [r7, #32]
 80019a0:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 80019a4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80019a8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 80019b0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80019b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80019b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019c0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80019c4:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80019c8:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80019cc:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 80019d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d8:	d900      	bls.n	80019dc <cal_table+0x540>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 80019da:	e0a4      	b.n	8001b26 <cal_table+0x68a>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 80019dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019de:	ed93 7a02 	vldr	s14, [r3, #8]
 80019e2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80019e6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 80019ee:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80019f2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80019f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019fa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019fe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a02:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 8001a06:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001a0a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8001a0e:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 8001a12:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a16:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a1c:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8001a20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a24:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8001a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fd8b 	bl	8000548 <__aeabi_f2d>
 8001a32:	4604      	mov	r4, r0
 8001a34:	460d      	mov	r5, r1
 8001a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fd85 	bl	8000548 <__aeabi_f2d>
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	f7fe fdd7 	bl	80005f8 <__aeabi_dmul>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4690      	mov	r8, r2
 8001a50:	4699      	mov	r9, r3
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7fe fd78 	bl	8000548 <__aeabi_f2d>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4640      	mov	r0, r8
 8001a5e:	4649      	mov	r1, r9
 8001a60:	f7fe fdca 	bl	80005f8 <__aeabi_dmul>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4620      	mov	r0, r4
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	f7fe fc0e 	bl	800028c <__adddf3>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	f7ff f8b6 	bl	8000be8 <__aeabi_d2f>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a80:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 8001a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a84:	ed93 7a00 	vldr	s14, [r3]
 8001a88:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001a8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9a:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 8001a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa2:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 8001aa4:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <cal_table+0x698>)
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	701a      	strb	r2, [r3, #0]
		break;
 8001aaa:	e03c      	b.n	8001b26 <cal_table+0x68a>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 8001aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aae:	ed93 7a00 	vldr	s14, [r3]
 8001ab2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001ab6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abe:	da00      	bge.n	8001ac2 <cal_table+0x626>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8001ac0:	e031      	b.n	8001b26 <cal_table+0x68a>
			target->velocity = input.end_velocity;
 8001ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac6:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8001ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <cal_table+0x698>)
 8001ad2:	2204      	movs	r2, #4
 8001ad4:	701a      	strb	r2, [r3, #0]
		break;
 8001ad6:	e026      	b.n	8001b26 <cal_table+0x68a>
	case 4:
		//終了(0でもいいかも)
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 8001ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ada:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ade:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ae2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aea:	d806      	bhi.n	8001afa <cal_table+0x65e>
			target->acceleration = 0;
 8001aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <cal_table+0x698>)
 8001af6:	2204      	movs	r2, #4
 8001af8:	701a      	strb	r2, [r3, #0]
		}
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 8001afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afc:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b00:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0c:	d900      	bls.n	8001b10 <cal_table+0x674>
		}
	}

}

}
 8001b0e:	e00a      	b.n	8001b26 <cal_table+0x68a>
			target->acceleration = 0;
 8001b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <cal_table+0x698>)
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	701a      	strb	r2, [r3, #0]
}
 8001b1e:	e002      	b.n	8001b26 <cal_table+0x68a>
		break;
 8001b20:	bf00      	nop
 8001b22:	e000      	b.n	8001b26 <cal_table+0x68a>
		break;
 8001b24:	bf00      	nop
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8001b30:	b004      	add	sp, #16
 8001b32:	4770      	bx	lr
 8001b34:	20000239 	.word	0x20000239

08001b38 <straight_table>:


float straight_table(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration,MOTOR_MODE mode) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001b42:	edc7 0a04 	vstr	s1, [r7, #16]
 8001b46:	ed87 1a03 	vstr	s2, [r7, #12]
 8001b4a:	edc7 1a02 	vstr	s3, [r7, #8]
 8001b4e:	ed87 2a01 	vstr	s4, [r7, #4]
 8001b52:	6038      	str	r0, [r7, #0]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8001b54:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b58:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8001b5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b60:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b64:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8001b68:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001b6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8001b70:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b78:	edc7 7a07 	vstr	s15, [r7, #28]

	g_WallControl_mode=mode.WallControlMode;
 8001b7c:	783a      	ldrb	r2, [r7, #0]
 8001b7e:	4b65      	ldr	r3, [pc, #404]	; (8001d14 <straight_table+0x1dc>)
 8001b80:	701a      	strb	r2, [r3, #0]
	//g_WallControlStatus=mode.WallControlStatus;
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8001b82:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8e:	d505      	bpl.n	8001b9c <straight_table+0x64>
 8001b90:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b94:	eef1 7a67 	vneg.f32	s15, s15
 8001b98:	edc7 7a01 	vstr	s15, [r7, #4]

	g_TrapezoidStraight.displacement = input_displacement;
 8001b9c:	4a5e      	ldr	r2, [pc, #376]	; (8001d18 <straight_table+0x1e0>)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	6013      	str	r3, [r2, #0]
	g_TrapezoidStraight.start_velocity = input_start_velocity;
 8001ba2:	4a5d      	ldr	r2, [pc, #372]	; (8001d18 <straight_table+0x1e0>)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	6053      	str	r3, [r2, #4]
	g_TrapezoidStraight.end_velocity = input_end_velocity;
 8001ba8:	4a5b      	ldr	r2, [pc, #364]	; (8001d18 <straight_table+0x1e0>)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6093      	str	r3, [r2, #8]
	g_TrapezoidStraight.count_velocity = input_count_velocity;
 8001bae:	4a5a      	ldr	r2, [pc, #360]	; (8001d18 <straight_table+0x1e0>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
	g_TrapezoidStraight.acceleration = input_acceleration;
 8001bb4:	4a58      	ldr	r2, [pc, #352]	; (8001d18 <straight_table+0x1e0>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){g_TargetStraight.acceleration = input_acceleration;
 8001bba:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc6:	db03      	blt.n	8001bd0 <straight_table+0x98>
 8001bc8:	4a54      	ldr	r2, [pc, #336]	; (8001d1c <straight_table+0x1e4>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6053      	str	r3, [r2, #4]
 8001bce:	e006      	b.n	8001bde <straight_table+0xa6>
	}else{g_TargetStraight.acceleration = -input_acceleration;}
 8001bd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bd4:	eef1 7a67 	vneg.f32	s15, s15
 8001bd8:	4b50      	ldr	r3, [pc, #320]	; (8001d1c <straight_table+0x1e4>)
 8001bda:	edc3 7a01 	vstr	s15, [r3, #4]
	g_TargetStraight.velocity = input_start_velocity;
 8001bde:	4a4f      	ldr	r2, [pc, #316]	; (8001d1c <straight_table+0x1e4>)
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	6013      	str	r3, [r2, #0]
	g_TargetStraight.displacement = 0;
 8001be4:	4b4d      	ldr	r3, [pc, #308]	; (8001d1c <straight_table+0x1e4>)
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
	g_TargetTurning.velocity = 0;
 8001bec:	4b4c      	ldr	r3, [pc, #304]	; (8001d20 <straight_table+0x1e8>)
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
	g_TargetTurning.acceleration = 0;
 8001bf4:	4b4a      	ldr	r3, [pc, #296]	; (8001d20 <straight_table+0x1e8>)
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	605a      	str	r2, [r3, #4]
	g_TargetTurning.displacement = 0;
 8001bfc:	4b48      	ldr	r3, [pc, #288]	; (8001d20 <straight_table+0x1e8>)
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]

	g_acc_flag=1;
 8001c04:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <straight_table+0x1ec>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;g_TargetStraight.acceleration = input_acceleration;}
 8001c0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c16:	dd0e      	ble.n	8001c36 <straight_table+0xfe>
 8001c18:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c28:	dd05      	ble.n	8001c36 <straight_table+0xfe>
 8001c2a:	4b3e      	ldr	r3, [pc, #248]	; (8001d24 <straight_table+0x1ec>)
 8001c2c:	2205      	movs	r2, #5
 8001c2e:	701a      	strb	r2, [r3, #0]
 8001c30:	4a3a      	ldr	r2, [pc, #232]	; (8001d1c <straight_table+0x1e4>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;g_TargetStraight.acceleration = -input_acceleration;}
 8001c36:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c42:	dd14      	ble.n	8001c6e <straight_table+0x136>
 8001c44:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c48:	eef1 7a67 	vneg.f32	s15, s15
 8001c4c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c58:	d509      	bpl.n	8001c6e <straight_table+0x136>
 8001c5a:	4b32      	ldr	r3, [pc, #200]	; (8001d24 <straight_table+0x1ec>)
 8001c5c:	2206      	movs	r2, #6
 8001c5e:	701a      	strb	r2, [r3, #0]
 8001c60:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c64:	eef1 7a67 	vneg.f32	s15, s15
 8001c68:	4b2c      	ldr	r3, [pc, #176]	; (8001d1c <straight_table+0x1e4>)
 8001c6a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;g_TargetStraight.acceleration = -input_acceleration;}
 8001c6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7a:	d514      	bpl.n	8001ca6 <straight_table+0x16e>
 8001c7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c80:	eef1 7a67 	vneg.f32	s15, s15
 8001c84:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c90:	dd09      	ble.n	8001ca6 <straight_table+0x16e>
 8001c92:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <straight_table+0x1ec>)
 8001c94:	2205      	movs	r2, #5
 8001c96:	701a      	strb	r2, [r3, #0]
 8001c98:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c9c:	eef1 7a67 	vneg.f32	s15, s15
 8001ca0:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <straight_table+0x1e4>)
 8001ca2:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;g_TargetStraight.acceleration = input_acceleration;}
 8001ca6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001caa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb2:	d50e      	bpl.n	8001cd2 <straight_table+0x19a>
 8001cb4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cb8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc4:	d505      	bpl.n	8001cd2 <straight_table+0x19a>
 8001cc6:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <straight_table+0x1ec>)
 8001cc8:	2206      	movs	r2, #6
 8001cca:	701a      	strb	r2, [r3, #0]
 8001ccc:	4a13      	ldr	r2, [pc, #76]	; (8001d1c <straight_table+0x1e4>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <straight_table+0x1f0>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	701a      	strb	r2, [r3, #0]



	//pl_motor_start();
	while (g_acc_flag!=4){
 8001cd8:	e00a      	b.n	8001cf0 <straight_table+0x1b8>
//		printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d\n", g_motorCount_l,g_motorCount_r,g_motorCount_l,g_motorCount_l);
		if(mode.calMazeMode==1){
 8001cda:	78bb      	ldrb	r3, [r7, #2]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d102      	bne.n	8001ce6 <straight_table+0x1ae>
			maze_maker();
 8001ce0:	f004 fc22 	bl	8006528 <maze_maker>
 8001ce4:	e004      	b.n	8001cf0 <straight_table+0x1b8>
		}else if(mode.calMazeMode==2){
 8001ce6:	78bb      	ldrb	r3, [r7, #2]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d101      	bne.n	8001cf0 <straight_table+0x1b8>
			maze_makerBack();
 8001cec:	f004 fde4 	bl	80068b8 <maze_makerBack>
	while (g_acc_flag!=4){
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <straight_table+0x1ec>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d1ef      	bne.n	8001cda <straight_table+0x1a2>
		}
	}
	modeacc = 0;
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <straight_table+0x1f0>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]

	//pl_motor_stop();

	return g_TargetStraight.velocity;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <straight_table+0x1e4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	ee07 3a90 	vmov	s15, r3
}
 8001d08:	eeb0 0a67 	vmov.f32	s0, s15
 8001d0c:	3720      	adds	r7, #32
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000039c 	.word	0x2000039c
 8001d18:	20000210 	.word	0x20000210
 8001d1c:	200001f8 	.word	0x200001f8
 8001d20:	20000204 	.word	0x20000204
 8001d24:	20000239 	.word	0x20000239
 8001d28:	20000238 	.word	0x20000238

08001d2c <turning_table>:


float turning_table(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	; 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	ed87 0a05 	vstr	s0, [r7, #20]
 8001d36:	edc7 0a04 	vstr	s1, [r7, #16]
 8001d3a:	ed87 1a03 	vstr	s2, [r7, #12]
 8001d3e:	edc7 1a02 	vstr	s3, [r7, #8]
 8001d42:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8001d46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d4a:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8001d4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d56:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8001d5a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001d5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8001d62:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d6a:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8001d6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7a:	d505      	bpl.n	8001d88 <turning_table+0x5c>
 8001d7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d80:	eef1 7a67 	vneg.f32	s15, s15
 8001d84:	edc7 7a01 	vstr	s15, [r7, #4]

	g_TrapezoidTurning.displacement = input_displacement;
 8001d88:	4a58      	ldr	r2, [pc, #352]	; (8001eec <turning_table+0x1c0>)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	6013      	str	r3, [r2, #0]
	g_TrapezoidTurning.start_velocity = input_start_velocity;
 8001d8e:	4a57      	ldr	r2, [pc, #348]	; (8001eec <turning_table+0x1c0>)
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	6053      	str	r3, [r2, #4]
	g_TrapezoidTurning.end_velocity = input_end_velocity;
 8001d94:	4a55      	ldr	r2, [pc, #340]	; (8001eec <turning_table+0x1c0>)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6093      	str	r3, [r2, #8]
	g_TrapezoidTurning.count_velocity = input_count_velocity;
 8001d9a:	4a54      	ldr	r2, [pc, #336]	; (8001eec <turning_table+0x1c0>)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	60d3      	str	r3, [r2, #12]
	g_TrapezoidTurning.acceleration = input_acceleration;
 8001da0:	4a52      	ldr	r2, [pc, #328]	; (8001eec <turning_table+0x1c0>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){g_TargetTurning.acceleration = input_acceleration;
 8001da6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001daa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db2:	db03      	blt.n	8001dbc <turning_table+0x90>
 8001db4:	4a4e      	ldr	r2, [pc, #312]	; (8001ef0 <turning_table+0x1c4>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6053      	str	r3, [r2, #4]
 8001dba:	e006      	b.n	8001dca <turning_table+0x9e>
	}else{g_TargetTurning.acceleration = -input_acceleration;}
 8001dbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dc0:	eef1 7a67 	vneg.f32	s15, s15
 8001dc4:	4b4a      	ldr	r3, [pc, #296]	; (8001ef0 <turning_table+0x1c4>)
 8001dc6:	edc3 7a01 	vstr	s15, [r3, #4]
	g_TargetTurning.velocity = input_start_velocity;
 8001dca:	4a49      	ldr	r2, [pc, #292]	; (8001ef0 <turning_table+0x1c4>)
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	6013      	str	r3, [r2, #0]
	g_TargetTurning.displacement = 0;
 8001dd0:	4b47      	ldr	r3, [pc, #284]	; (8001ef0 <turning_table+0x1c4>)
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
	g_TargetStraight.velocity = 0;
 8001dd8:	4b46      	ldr	r3, [pc, #280]	; (8001ef4 <turning_table+0x1c8>)
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
	g_TargetStraight.acceleration = 0;
 8001de0:	4b44      	ldr	r3, [pc, #272]	; (8001ef4 <turning_table+0x1c8>)
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	605a      	str	r2, [r3, #4]
	g_TargetStraight.displacement = 0;
 8001de8:	4b42      	ldr	r3, [pc, #264]	; (8001ef4 <turning_table+0x1c8>)
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]

	g_acc_flag=1;
 8001df0:	4b41      	ldr	r3, [pc, #260]	; (8001ef8 <turning_table+0x1cc>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;g_TargetTurning.acceleration = input_acceleration;}
 8001df6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e02:	dd0e      	ble.n	8001e22 <turning_table+0xf6>
 8001e04:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e08:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e14:	dd05      	ble.n	8001e22 <turning_table+0xf6>
 8001e16:	4b38      	ldr	r3, [pc, #224]	; (8001ef8 <turning_table+0x1cc>)
 8001e18:	2205      	movs	r2, #5
 8001e1a:	701a      	strb	r2, [r3, #0]
 8001e1c:	4a34      	ldr	r2, [pc, #208]	; (8001ef0 <turning_table+0x1c4>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;g_TargetTurning.acceleration = -input_acceleration;}
 8001e22:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2e:	dd14      	ble.n	8001e5a <turning_table+0x12e>
 8001e30:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e34:	eef1 7a67 	vneg.f32	s15, s15
 8001e38:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e44:	d509      	bpl.n	8001e5a <turning_table+0x12e>
 8001e46:	4b2c      	ldr	r3, [pc, #176]	; (8001ef8 <turning_table+0x1cc>)
 8001e48:	2206      	movs	r2, #6
 8001e4a:	701a      	strb	r2, [r3, #0]
 8001e4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e50:	eef1 7a67 	vneg.f32	s15, s15
 8001e54:	4b26      	ldr	r3, [pc, #152]	; (8001ef0 <turning_table+0x1c4>)
 8001e56:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;g_TargetTurning.acceleration = -input_acceleration;}
 8001e5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e66:	d514      	bpl.n	8001e92 <turning_table+0x166>
 8001e68:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e6c:	eef1 7a67 	vneg.f32	s15, s15
 8001e70:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7c:	dd09      	ble.n	8001e92 <turning_table+0x166>
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <turning_table+0x1cc>)
 8001e80:	2205      	movs	r2, #5
 8001e82:	701a      	strb	r2, [r3, #0]
 8001e84:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e88:	eef1 7a67 	vneg.f32	s15, s15
 8001e8c:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <turning_table+0x1c4>)
 8001e8e:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;g_TargetTurning.acceleration = input_acceleration;}
 8001e92:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9e:	d50e      	bpl.n	8001ebe <turning_table+0x192>
 8001ea0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ea4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ea8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb0:	d505      	bpl.n	8001ebe <turning_table+0x192>
 8001eb2:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <turning_table+0x1cc>)
 8001eb4:	2206      	movs	r2, #6
 8001eb6:	701a      	strb	r2, [r3, #0]
 8001eb8:	4a0d      	ldr	r2, [pc, #52]	; (8001ef0 <turning_table+0x1c4>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <turning_table+0x1d0>)
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	701a      	strb	r2, [r3, #0]


	//pl_motor_start();
	while (g_acc_flag!=4){
 8001ec4:	bf00      	nop
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <turning_table+0x1cc>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d1fa      	bne.n	8001ec6 <turning_table+0x19a>

	}
	modeacc = 0;
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <turning_table+0x1d0>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]

	//pl_motor_stop();

	return g_TargetTurning.velocity;
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <turning_table+0x1c4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	ee07 3a90 	vmov	s15, r3
}
 8001ede:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee2:	3724      	adds	r7, #36	; 0x24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	20000224 	.word	0x20000224
 8001ef0:	20000204 	.word	0x20000204
 8001ef4:	200001f8 	.word	0x200001f8
 8001ef8:	20000239 	.word	0x20000239
 8001efc:	20000238 	.word	0x20000238

08001f00 <slalom_table>:


float slalom_table(float input_center_velocity,float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8001f00:	b480      	push	{r7}
 8001f02:	b089      	sub	sp, #36	; 0x24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	ed87 0a05 	vstr	s0, [r7, #20]
 8001f0a:	edc7 0a04 	vstr	s1, [r7, #16]
 8001f0e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001f12:	edc7 1a02 	vstr	s3, [r7, #8]
 8001f16:	ed87 2a01 	vstr	s4, [r7, #4]
 8001f1a:	edc7 2a00 	vstr	s5, [r7]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8001f1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f22:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8001f26:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f2a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f2e:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8001f32:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001f36:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8001f3a:	ed97 7a00 	vldr	s14, [r7]
 8001f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f42:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8001f46:	edd7 7a00 	vldr	s15, [r7]
 8001f4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f52:	d505      	bpl.n	8001f60 <slalom_table+0x60>
 8001f54:	edd7 7a00 	vldr	s15, [r7]
 8001f58:	eef1 7a67 	vneg.f32	s15, s15
 8001f5c:	edc7 7a00 	vstr	s15, [r7]

	g_TrapezoidTurning.displacement = input_displacement;
 8001f60:	4a58      	ldr	r2, [pc, #352]	; (80020c4 <slalom_table+0x1c4>)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	6013      	str	r3, [r2, #0]
	g_TrapezoidTurning.start_velocity = input_start_velocity;
 8001f66:	4a57      	ldr	r2, [pc, #348]	; (80020c4 <slalom_table+0x1c4>)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6053      	str	r3, [r2, #4]
	g_TrapezoidTurning.end_velocity = input_end_velocity;
 8001f6c:	4a55      	ldr	r2, [pc, #340]	; (80020c4 <slalom_table+0x1c4>)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	6093      	str	r3, [r2, #8]
	g_TrapezoidTurning.count_velocity = input_count_velocity;
 8001f72:	4a54      	ldr	r2, [pc, #336]	; (80020c4 <slalom_table+0x1c4>)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	60d3      	str	r3, [r2, #12]
	g_TrapezoidTurning.acceleration = input_acceleration;
 8001f78:	4a52      	ldr	r2, [pc, #328]	; (80020c4 <slalom_table+0x1c4>)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){g_TargetTurning.acceleration = input_acceleration;
 8001f7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8a:	db03      	blt.n	8001f94 <slalom_table+0x94>
 8001f8c:	4a4e      	ldr	r2, [pc, #312]	; (80020c8 <slalom_table+0x1c8>)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	6053      	str	r3, [r2, #4]
 8001f92:	e006      	b.n	8001fa2 <slalom_table+0xa2>
	}else{g_TargetTurning.acceleration = -input_acceleration;}
 8001f94:	edd7 7a00 	vldr	s15, [r7]
 8001f98:	eef1 7a67 	vneg.f32	s15, s15
 8001f9c:	4b4a      	ldr	r3, [pc, #296]	; (80020c8 <slalom_table+0x1c8>)
 8001f9e:	edc3 7a01 	vstr	s15, [r3, #4]
	g_TargetTurning.velocity = input_start_velocity;
 8001fa2:	4a49      	ldr	r2, [pc, #292]	; (80020c8 <slalom_table+0x1c8>)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6013      	str	r3, [r2, #0]
	g_TargetTurning.displacement = 0;
 8001fa8:	4b47      	ldr	r3, [pc, #284]	; (80020c8 <slalom_table+0x1c8>)
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
	g_TargetStraight.velocity = input_center_velocity;
 8001fb0:	4a46      	ldr	r2, [pc, #280]	; (80020cc <slalom_table+0x1cc>)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	6013      	str	r3, [r2, #0]
	g_TargetStraight.acceleration = 0;
 8001fb6:	4b45      	ldr	r3, [pc, #276]	; (80020cc <slalom_table+0x1cc>)
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	605a      	str	r2, [r3, #4]
	g_TargetStraight.displacement = 0;
 8001fbe:	4b43      	ldr	r3, [pc, #268]	; (80020cc <slalom_table+0x1cc>)
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]

	g_acc_flag=1;
 8001fc6:	4b42      	ldr	r3, [pc, #264]	; (80020d0 <slalom_table+0x1d0>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;g_TargetTurning.acceleration = input_acceleration;}
 8001fcc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd8:	dd0e      	ble.n	8001ff8 <slalom_table+0xf8>
 8001fda:	ed97 7a07 	vldr	s14, [r7, #28]
 8001fde:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fe2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fea:	dd05      	ble.n	8001ff8 <slalom_table+0xf8>
 8001fec:	4b38      	ldr	r3, [pc, #224]	; (80020d0 <slalom_table+0x1d0>)
 8001fee:	2205      	movs	r2, #5
 8001ff0:	701a      	strb	r2, [r3, #0]
 8001ff2:	4a35      	ldr	r2, [pc, #212]	; (80020c8 <slalom_table+0x1c8>)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;g_TargetTurning.acceleration = -input_acceleration;}
 8001ff8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ffc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002004:	dd14      	ble.n	8002030 <slalom_table+0x130>
 8002006:	edd7 7a04 	vldr	s15, [r7, #16]
 800200a:	eef1 7a67 	vneg.f32	s15, s15
 800200e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002012:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201a:	d509      	bpl.n	8002030 <slalom_table+0x130>
 800201c:	4b2c      	ldr	r3, [pc, #176]	; (80020d0 <slalom_table+0x1d0>)
 800201e:	2206      	movs	r2, #6
 8002020:	701a      	strb	r2, [r3, #0]
 8002022:	edd7 7a00 	vldr	s15, [r7]
 8002026:	eef1 7a67 	vneg.f32	s15, s15
 800202a:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <slalom_table+0x1c8>)
 800202c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;g_TargetTurning.acceleration = -input_acceleration;}
 8002030:	edd7 7a04 	vldr	s15, [r7, #16]
 8002034:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203c:	d514      	bpl.n	8002068 <slalom_table+0x168>
 800203e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002042:	eef1 7a67 	vneg.f32	s15, s15
 8002046:	ed97 7a07 	vldr	s14, [r7, #28]
 800204a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800204e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002052:	dd09      	ble.n	8002068 <slalom_table+0x168>
 8002054:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <slalom_table+0x1d0>)
 8002056:	2205      	movs	r2, #5
 8002058:	701a      	strb	r2, [r3, #0]
 800205a:	edd7 7a00 	vldr	s15, [r7]
 800205e:	eef1 7a67 	vneg.f32	s15, s15
 8002062:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <slalom_table+0x1c8>)
 8002064:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;g_TargetTurning.acceleration = input_acceleration;}
 8002068:	edd7 7a04 	vldr	s15, [r7, #16]
 800206c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002074:	d50e      	bpl.n	8002094 <slalom_table+0x194>
 8002076:	ed97 7a07 	vldr	s14, [r7, #28]
 800207a:	edd7 7a04 	vldr	s15, [r7, #16]
 800207e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002086:	d505      	bpl.n	8002094 <slalom_table+0x194>
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <slalom_table+0x1d0>)
 800208a:	2206      	movs	r2, #6
 800208c:	701a      	strb	r2, [r3, #0]
 800208e:	4a0e      	ldr	r2, [pc, #56]	; (80020c8 <slalom_table+0x1c8>)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8002094:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <slalom_table+0x1d4>)
 8002096:	2202      	movs	r2, #2
 8002098:	701a      	strb	r2, [r3, #0]


	//pl_motor_start();
	while (g_acc_flag!=4){
 800209a:	bf00      	nop
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <slalom_table+0x1d0>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d1fa      	bne.n	800209c <slalom_table+0x19c>

	}
	modeacc = 0;
 80020a6:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <slalom_table+0x1d4>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]

	//pl_motor_stop();

	return g_TargetTurning.velocity;
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <slalom_table+0x1c8>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	ee07 3a90 	vmov	s15, r3
}
 80020b4:	eeb0 0a67 	vmov.f32	s0, s15
 80020b8:	3724      	adds	r7, #36	; 0x24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	20000224 	.word	0x20000224
 80020c8:	20000204 	.word	0x20000204
 80020cc:	200001f8 	.word	0x200001f8
 80020d0:	20000239 	.word	0x20000239
 80020d4:	20000238 	.word	0x20000238

080020d8 <interrupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interrupt_calSensor(void){
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
	int j;

//	if (sensor_mode == 1) {
	for (j = 19; j >= 1; j--) {
 80020de:	2313      	movs	r3, #19
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	e02c      	b.n	800213e <interrupt_calSensor+0x66>
		g_sensor[0][j] = g_sensor[0][j - 1];
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	4a4d      	ldr	r2, [pc, #308]	; (8002220 <interrupt_calSensor+0x148>)
 80020ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80020ee:	494c      	ldr	r1, [pc, #304]	; (8002220 <interrupt_calSensor+0x148>)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3b01      	subs	r3, #1
 80020fa:	4a49      	ldr	r2, [pc, #292]	; (8002220 <interrupt_calSensor+0x148>)
 80020fc:	3314      	adds	r3, #20
 80020fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002102:	4947      	ldr	r1, [pc, #284]	; (8002220 <interrupt_calSensor+0x148>)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3314      	adds	r3, #20
 8002108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	4a43      	ldr	r2, [pc, #268]	; (8002220 <interrupt_calSensor+0x148>)
 8002112:	3328      	adds	r3, #40	; 0x28
 8002114:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002118:	4941      	ldr	r1, [pc, #260]	; (8002220 <interrupt_calSensor+0x148>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3328      	adds	r3, #40	; 0x28
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3b01      	subs	r3, #1
 8002126:	4a3e      	ldr	r2, [pc, #248]	; (8002220 <interrupt_calSensor+0x148>)
 8002128:	333c      	adds	r3, #60	; 0x3c
 800212a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800212e:	493c      	ldr	r1, [pc, #240]	; (8002220 <interrupt_calSensor+0x148>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	333c      	adds	r3, #60	; 0x3c
 8002134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3b01      	subs	r3, #1
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	dccf      	bgt.n	80020e4 <interrupt_calSensor+0xc>
	}
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 8002144:	4b37      	ldr	r3, [pc, #220]	; (8002224 <interrupt_calSensor+0x14c>)
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	4b37      	ldr	r3, [pc, #220]	; (8002228 <interrupt_calSensor+0x150>)
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	4a33      	ldr	r2, [pc, #204]	; (8002220 <interrupt_calSensor+0x148>)
 8002152:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 8002154:	4b33      	ldr	r3, [pc, #204]	; (8002224 <interrupt_calSensor+0x14c>)
 8002156:	885b      	ldrh	r3, [r3, #2]
 8002158:	461a      	mov	r2, r3
 800215a:	4b33      	ldr	r3, [pc, #204]	; (8002228 <interrupt_calSensor+0x150>)
 800215c:	885b      	ldrh	r3, [r3, #2]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	4a2f      	ldr	r2, [pc, #188]	; (8002220 <interrupt_calSensor+0x148>)
 8002162:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 8002164:	4b2f      	ldr	r3, [pc, #188]	; (8002224 <interrupt_calSensor+0x14c>)
 8002166:	889b      	ldrh	r3, [r3, #4]
 8002168:	461a      	mov	r2, r3
 800216a:	4b2f      	ldr	r3, [pc, #188]	; (8002228 <interrupt_calSensor+0x150>)
 800216c:	889b      	ldrh	r3, [r3, #4]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	4a2b      	ldr	r2, [pc, #172]	; (8002220 <interrupt_calSensor+0x148>)
 8002172:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 8002176:	4b2b      	ldr	r3, [pc, #172]	; (8002224 <interrupt_calSensor+0x14c>)
 8002178:	88db      	ldrh	r3, [r3, #6]
 800217a:	461a      	mov	r2, r3
 800217c:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <interrupt_calSensor+0x150>)
 800217e:	88db      	ldrh	r3, [r3, #6]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	4a27      	ldr	r2, [pc, #156]	; (8002220 <interrupt_calSensor+0x148>)
 8002184:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	for (j = 0; j <= 3; j++) {
 8002188:	2300      	movs	r3, #0
 800218a:	607b      	str	r3, [r7, #4]
 800218c:	e03d      	b.n	800220a <interrupt_calSensor+0x132>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 800218e:	4924      	ldr	r1, [pc, #144]	; (8002220 <interrupt_calSensor+0x148>)
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	440b      	add	r3, r1
 800219c:	6819      	ldr	r1, [r3, #0]
 800219e:	4820      	ldr	r0, [pc, #128]	; (8002220 <interrupt_calSensor+0x148>)
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	4403      	add	r3, r0
 80021ac:	332c      	adds	r3, #44	; 0x2c
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	1aca      	subs	r2, r1, r3
 80021b2:	491e      	ldr	r1, [pc, #120]	; (800222c <interrupt_calSensor+0x154>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 80021ba:	4919      	ldr	r1, [pc, #100]	; (8002220 <interrupt_calSensor+0x148>)
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	440b      	add	r3, r1
 80021c8:	6819      	ldr	r1, [r3, #0]
 80021ca:	4815      	ldr	r0, [pc, #84]	; (8002220 <interrupt_calSensor+0x148>)
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	4403      	add	r3, r0
 80021d8:	3304      	adds	r3, #4
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4419      	add	r1, r3
 80021de:	4810      	ldr	r0, [pc, #64]	; (8002220 <interrupt_calSensor+0x148>)
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	4403      	add	r3, r0
 80021ec:	3308      	adds	r3, #8
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	440b      	add	r3, r1
 80021f2:	4a0f      	ldr	r2, [pc, #60]	; (8002230 <interrupt_calSensor+0x158>)
 80021f4:	fb82 1203 	smull	r1, r2, r2, r3
 80021f8:	17db      	asrs	r3, r3, #31
 80021fa:	1ad2      	subs	r2, r2, r3
 80021fc:	490d      	ldr	r1, [pc, #52]	; (8002234 <interrupt_calSensor+0x15c>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 3; j++) {
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3301      	adds	r3, #1
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b03      	cmp	r3, #3
 800220e:	ddbe      	ble.n	800218e <interrupt_calSensor+0xb6>
	}


//	}

}
 8002210:	bf00      	nop
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	2000023c 	.word	0x2000023c
 8002224:	200003b0 	.word	0x200003b0
 8002228:	200003b8 	.word	0x200003b8
 800222c:	2000037c 	.word	0x2000037c
 8002230:	55555556 	.word	0x55555556
 8002234:	2000038c 	.word	0x2000038c

08002238 <init_WallControl>:

uint8_t g_WallControl_mode;//0で壁制御なし、1で通常の壁制御、2で斜めの制御
uint8_t g_WallControlStatus;
uint8_t StabilityCount_L,StabilityCount_R;

void init_WallControl(void){
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
	g_WallControl_mode=0;
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <init_WallControl+0x28>)
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
	g_WallControlStatus=0;
 8002242:	4b08      	ldr	r3, [pc, #32]	; (8002264 <init_WallControl+0x2c>)
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
	StabilityCount_L=0;
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <init_WallControl+0x30>)
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]
	StabilityCount_R=0;
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <init_WallControl+0x34>)
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	2000039c 	.word	0x2000039c
 8002264:	2000039d 	.word	0x2000039d
 8002268:	2000039e 	.word	0x2000039e
 800226c:	2000039f 	.word	0x2000039f

08002270 <calWallConrol>:

float calWallConrol(void){
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
//	SensorDistanceR = -0.0000001684 * g_sensor[2][0] * g_sensor[2][0] * g_sensor[2][0]
//				+ 0.0004061427 * g_sensor[2][0] * g_sensor[2][0] - 0.3784837856 * g_sensor[2][0]
//				+ 197.1162;


    if(g_WallControl_mode == 0){
 8002276:	4b6c      	ldr	r3, [pc, #432]	; (8002428 <calWallConrol+0x1b8>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10c      	bne.n	8002298 <calWallConrol+0x28>
    	g_WallControlStatus=0;
 800227e:	4b6b      	ldr	r3, [pc, #428]	; (800242c <calWallConrol+0x1bc>)
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
    	StabilityCount_L=0;
 8002284:	4b6a      	ldr	r3, [pc, #424]	; (8002430 <calWallConrol+0x1c0>)
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
    	StabilityCount_R=0;
 800228a:	4b6a      	ldr	r3, [pc, #424]	; (8002434 <calWallConrol+0x1c4>)
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
    	PID_wall=0;
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	e0bd      	b.n	8002414 <calWallConrol+0x1a4>

    }else if (g_WallControl_mode == 1) {
 8002298:	4b63      	ldr	r3, [pc, #396]	; (8002428 <calWallConrol+0x1b8>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b01      	cmp	r3, #1
 800229e:	f040 80b8 	bne.w	8002412 <calWallConrol+0x1a2>

		// 左壁の有無の判定
		if ((g_WallControlStatus >> 0) & 1 == 1){
 80022a2:	4b62      	ldr	r3, [pc, #392]	; (800242c <calWallConrol+0x1bc>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00e      	beq.n	80022cc <calWallConrol+0x5c>
			//前回左壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_L || g_sensor_diff[SENSOR_LEFT] > CONTROLWALLCUT_THRESHOLD_L){
 80022ae:	4b62      	ldr	r3, [pc, #392]	; (8002438 <calWallConrol+0x1c8>)
 80022b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b2:	2b77      	cmp	r3, #119	; 0x77
 80022b4:	dd03      	ble.n	80022be <calWallConrol+0x4e>
 80022b6:	4b61      	ldr	r3, [pc, #388]	; (800243c <calWallConrol+0x1cc>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b28      	cmp	r3, #40	; 0x28
 80022bc:	dd22      	ble.n	8002304 <calWallConrol+0x94>
				g_WallControlStatus=g_WallControlStatus - 1;
 80022be:	4b5b      	ldr	r3, [pc, #364]	; (800242c <calWallConrol+0x1bc>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4b59      	ldr	r3, [pc, #356]	; (800242c <calWallConrol+0x1bc>)
 80022c8:	701a      	strb	r2, [r3, #0]
 80022ca:	e01b      	b.n	8002304 <calWallConrol+0x94>
			}
		}else{
			//前回左壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_L && g_sensor_diff[SENSOR_LEFT] < CONTROLWALLCUT_THRESHOLD_L){
 80022cc:	4b5a      	ldr	r3, [pc, #360]	; (8002438 <calWallConrol+0x1c8>)
 80022ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022d0:	2b78      	cmp	r3, #120	; 0x78
 80022d2:	dd0a      	ble.n	80022ea <calWallConrol+0x7a>
 80022d4:	4b59      	ldr	r3, [pc, #356]	; (800243c <calWallConrol+0x1cc>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b27      	cmp	r3, #39	; 0x27
 80022da:	dc06      	bgt.n	80022ea <calWallConrol+0x7a>
				StabilityCount_L++;
 80022dc:	4b54      	ldr	r3, [pc, #336]	; (8002430 <calWallConrol+0x1c0>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	3301      	adds	r3, #1
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	4b52      	ldr	r3, [pc, #328]	; (8002430 <calWallConrol+0x1c0>)
 80022e6:	701a      	strb	r2, [r3, #0]
 80022e8:	e002      	b.n	80022f0 <calWallConrol+0x80>
			}else{
				StabilityCount_L=0;
 80022ea:	4b51      	ldr	r3, [pc, #324]	; (8002430 <calWallConrol+0x1c0>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
			}
			if(StabilityCount_L>=10){
 80022f0:	4b4f      	ldr	r3, [pc, #316]	; (8002430 <calWallConrol+0x1c0>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b09      	cmp	r3, #9
 80022f6:	d905      	bls.n	8002304 <calWallConrol+0x94>
				g_WallControlStatus=g_WallControlStatus + 1;
 80022f8:	4b4c      	ldr	r3, [pc, #304]	; (800242c <calWallConrol+0x1bc>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	3301      	adds	r3, #1
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	4b4a      	ldr	r3, [pc, #296]	; (800242c <calWallConrol+0x1bc>)
 8002302:	701a      	strb	r2, [r3, #0]
			}
		}
		// 右壁の有無の判定
		if ((g_WallControlStatus >> 1)&1 == 1){
 8002304:	4b49      	ldr	r3, [pc, #292]	; (800242c <calWallConrol+0x1bc>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	085b      	lsrs	r3, r3, #1
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00f      	beq.n	8002334 <calWallConrol+0xc4>
			//前回右壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_R || g_sensor_diff[SENSOR_RIGHT] > CONTROLWALLCUT_THRESHOLD_R){
 8002314:	4b48      	ldr	r3, [pc, #288]	; (8002438 <calWallConrol+0x1c8>)
 8002316:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800231a:	2b77      	cmp	r3, #119	; 0x77
 800231c:	dd03      	ble.n	8002326 <calWallConrol+0xb6>
 800231e:	4b47      	ldr	r3, [pc, #284]	; (800243c <calWallConrol+0x1cc>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b28      	cmp	r3, #40	; 0x28
 8002324:	dd23      	ble.n	800236e <calWallConrol+0xfe>
				g_WallControlStatus=g_WallControlStatus - 2;
 8002326:	4b41      	ldr	r3, [pc, #260]	; (800242c <calWallConrol+0x1bc>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	3b02      	subs	r3, #2
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4b3f      	ldr	r3, [pc, #252]	; (800242c <calWallConrol+0x1bc>)
 8002330:	701a      	strb	r2, [r3, #0]
 8002332:	e01c      	b.n	800236e <calWallConrol+0xfe>
			}
		}else{
			//前回右壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_R && g_sensor_diff[SENSOR_RIGHT] < CONTROLWALLCUT_THRESHOLD_R){
 8002334:	4b40      	ldr	r3, [pc, #256]	; (8002438 <calWallConrol+0x1c8>)
 8002336:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800233a:	2b78      	cmp	r3, #120	; 0x78
 800233c:	dd0a      	ble.n	8002354 <calWallConrol+0xe4>
 800233e:	4b3f      	ldr	r3, [pc, #252]	; (800243c <calWallConrol+0x1cc>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b27      	cmp	r3, #39	; 0x27
 8002344:	dc06      	bgt.n	8002354 <calWallConrol+0xe4>
				StabilityCount_R++;
 8002346:	4b3b      	ldr	r3, [pc, #236]	; (8002434 <calWallConrol+0x1c4>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	3301      	adds	r3, #1
 800234c:	b2da      	uxtb	r2, r3
 800234e:	4b39      	ldr	r3, [pc, #228]	; (8002434 <calWallConrol+0x1c4>)
 8002350:	701a      	strb	r2, [r3, #0]
 8002352:	e002      	b.n	800235a <calWallConrol+0xea>
			}else{
				StabilityCount_R=0;
 8002354:	4b37      	ldr	r3, [pc, #220]	; (8002434 <calWallConrol+0x1c4>)
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
			}
			if(StabilityCount_R>=10){
 800235a:	4b36      	ldr	r3, [pc, #216]	; (8002434 <calWallConrol+0x1c4>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b09      	cmp	r3, #9
 8002360:	d905      	bls.n	800236e <calWallConrol+0xfe>
				g_WallControlStatus=g_WallControlStatus + 2;
 8002362:	4b32      	ldr	r3, [pc, #200]	; (800242c <calWallConrol+0x1bc>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	3302      	adds	r3, #2
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4b30      	ldr	r3, [pc, #192]	; (800242c <calWallConrol+0x1bc>)
 800236c:	701a      	strb	r2, [r3, #0]
			}
		}
		switch (g_WallControlStatus){
 800236e:	4b2f      	ldr	r3, [pc, #188]	; (800242c <calWallConrol+0x1bc>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b03      	cmp	r3, #3
 8002374:	d84e      	bhi.n	8002414 <calWallConrol+0x1a4>
 8002376:	a201      	add	r2, pc, #4	; (adr r2, 800237c <calWallConrol+0x10c>)
 8002378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237c:	0800238d 	.word	0x0800238d
 8002380:	08002395 	.word	0x08002395
 8002384:	080023b7 	.word	0x080023b7
 8002388:	080023df 	.word	0x080023df
		case 0://両壁なし
			PID_wall= 0;
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
		break;
 8002392:	e03f      	b.n	8002414 <calWallConrol+0x1a4>
		case 1://左壁のみ
			PID_wall= SENSOR_GAIN*(2*(float)(g_sensor[SENSOR_LEFT][0] - CENTER_L));
 8002394:	4b28      	ldr	r3, [pc, #160]	; (8002438 <calWallConrol+0x1c8>)
 8002396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002398:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800239c:	ee07 3a90 	vmov	s15, r3
 80023a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023b0:	edc7 7a01 	vstr	s15, [r7, #4]
		break;
 80023b4:	e02e      	b.n	8002414 <calWallConrol+0x1a4>
		case 2://右壁のみ
			PID_wall= SENSOR_GAIN * (-2 * (float)(g_sensor[SENSOR_RIGHT][0] - CENTER_R));
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <calWallConrol+0x1c8>)
 80023b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80023bc:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 80023c0:	ee07 3a90 	vmov	s15, r3
 80023c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023c8:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80023cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d8:	edc7 7a01 	vstr	s15, [r7, #4]
		break;
 80023dc:	e01a      	b.n	8002414 <calWallConrol+0x1a4>
		case 3://両壁あり
			PID_wall= SENSOR_GAIN * ((float)(g_sensor[SENSOR_LEFT][0] - CENTER_L)-(float)(g_sensor[SENSOR_RIGHT][0] - CENTER_R));
 80023de:	4b16      	ldr	r3, [pc, #88]	; (8002438 <calWallConrol+0x1c8>)
 80023e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80023e6:	ee07 3a90 	vmov	s15, r3
 80023ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023ee:	4b12      	ldr	r3, [pc, #72]	; (8002438 <calWallConrol+0x1c8>)
 80023f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80023f4:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 80023f8:	ee07 3a90 	vmov	s15, r3
 80023fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002400:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002404:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800240c:	edc7 7a01 	vstr	s15, [r7, #4]
		break;
 8002410:	e000      	b.n	8002414 <calWallConrol+0x1a4>
		}


	}
 8002412:	bf00      	nop




	return PID_wall;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	ee07 3a90 	vmov	s15, r3
}
 800241a:	eeb0 0a67 	vmov.f32	s0, s15
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	2000039c 	.word	0x2000039c
 800242c:	2000039d 	.word	0x2000039d
 8002430:	2000039e 	.word	0x2000039e
 8002434:	2000039f 	.word	0x2000039f
 8002438:	2000023c 	.word	0x2000023c
 800243c:	2000037c 	.word	0x2000037c

08002440 <lcd_cmd>:
#include "PL_lcd.h"
#include "i2c.h"


void lcd_cmd(uint8_t x)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af02      	add	r7, sp, #8
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
  uint8_t aTxBuffer[2] = { 0x00, x };
 800244a:	2300      	movs	r3, #0
 800244c:	733b      	strb	r3, [r7, #12]
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 8002452:	e007      	b.n	8002464 <lcd_cmd+0x24>
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8002454:	480c      	ldr	r0, [pc, #48]	; (8002488 <lcd_cmd+0x48>)
 8002456:	f008 fdf3 	bl	800b040 <HAL_I2C_GetError>
 800245a:	4603      	mov	r3, r0
 800245c:	2b04      	cmp	r3, #4
 800245e:	d001      	beq.n	8002464 <lcd_cmd+0x24>
    {
      Error_Handler();
 8002460:	f001 fed9 	bl	8004216 <Error_Handler>
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 8002464:	f107 020c 	add.w	r2, r7, #12
 8002468:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	2302      	movs	r3, #2
 8002470:	217c      	movs	r1, #124	; 0x7c
 8002472:	4805      	ldr	r0, [pc, #20]	; (8002488 <lcd_cmd+0x48>)
 8002474:	f008 fcf0 	bl	800ae58 <HAL_I2C_Master_Transmit>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1ea      	bne.n	8002454 <lcd_cmd+0x14>
    }
  }
}
 800247e:	bf00      	nop
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000a04 	.word	0x20000a04

0800248c <lcd_data>:

void lcd_data(uint8_t x)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af02      	add	r7, sp, #8
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
  uint8_t aTxBuffer[2] = { 0x40, x };
 8002496:	2340      	movs	r3, #64	; 0x40
 8002498:	733b      	strb	r3, [r7, #12]
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 800249e:	e007      	b.n	80024b0 <lcd_data+0x24>
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80024a0:	480c      	ldr	r0, [pc, #48]	; (80024d4 <lcd_data+0x48>)
 80024a2:	f008 fdcd 	bl	800b040 <HAL_I2C_GetError>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d001      	beq.n	80024b0 <lcd_data+0x24>
    {
      Error_Handler();
 80024ac:	f001 feb3 	bl	8004216 <Error_Handler>
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 80024b0:	f107 020c 	add.w	r2, r7, #12
 80024b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	2302      	movs	r3, #2
 80024bc:	217c      	movs	r1, #124	; 0x7c
 80024be:	4805      	ldr	r0, [pc, #20]	; (80024d4 <lcd_data+0x48>)
 80024c0:	f008 fcca 	bl	800ae58 <HAL_I2C_Master_Transmit>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1ea      	bne.n	80024a0 <lcd_data+0x14>
    }
  }
}
 80024ca:	bf00      	nop
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20000a04 	.word	0x20000a04

080024d8 <pl_lcd_puts>:

void pl_lcd_puts(const char *s)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  while(*s) {
 80024e0:	e006      	b.n	80024f0 <pl_lcd_puts+0x18>
	  lcd_data(*s++);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff ffce 	bl	800248c <lcd_data>
  while(*s) {
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f4      	bne.n	80024e2 <pl_lcd_puts+0xa>
  }
}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <pl_lcd_init>:

// param:
//  contrast: 0 ~ 63 (最初は大きくして調整)
void pl_lcd_init(void)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	af00      	add	r7, sp, #0
  // LCD initialize(裏面に記載)
  lcd_cmd(0x38); // function set
 8002506:	2038      	movs	r0, #56	; 0x38
 8002508:	f7ff ff9a 	bl	8002440 <lcd_cmd>
  lcd_cmd(0x39); // function set
 800250c:	2039      	movs	r0, #57	; 0x39
 800250e:	f7ff ff97 	bl	8002440 <lcd_cmd>
  lcd_cmd(0x14); // interval osc
 8002512:	2014      	movs	r0, #20
 8002514:	f7ff ff94 	bl	8002440 <lcd_cmd>
  lcd_cmd(0x70); // contrast low
 8002518:	2070      	movs	r0, #112	; 0x70
 800251a:	f7ff ff91 	bl	8002440 <lcd_cmd>
  lcd_cmd(0x56); // contrast high / icon / power
 800251e:	2056      	movs	r0, #86	; 0x56
 8002520:	f7ff ff8e 	bl	8002440 <lcd_cmd>
  lcd_cmd(0x6c); // follower control
 8002524:	206c      	movs	r0, #108	; 0x6c
 8002526:	f7ff ff8b 	bl	8002440 <lcd_cmd>
  HAL_Delay(300);
 800252a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800252e:	f006 fb81 	bl	8008c34 <HAL_Delay>
  lcd_cmd(0x38); // function set
 8002532:	2038      	movs	r0, #56	; 0x38
 8002534:	f7ff ff84 	bl	8002440 <lcd_cmd>
  lcd_cmd(0x0c); // display on
 8002538:	200c      	movs	r0, #12
 800253a:	f7ff ff81 	bl	8002440 <lcd_cmd>
  lcd_cmd(0x01); // clear display
 800253e:	2001      	movs	r0, #1
 8002540:	f7ff ff7e 	bl	8002440 <lcd_cmd>
  HAL_Delay(2);
 8002544:	2002      	movs	r0, #2
 8002546:	f006 fb75 	bl	8008c34 <HAL_Delay>
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}

0800254e <pl_lcd_pos>:

void pl_lcd_move(uint8_t pos){
  lcd_cmd(0x80 | pos);
}

void pl_lcd_pos(uint8_t raw, uint8_t col) {
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	460a      	mov	r2, r1
 8002558:	71fb      	strb	r3, [r7, #7]
 800255a:	4613      	mov	r3, r2
 800255c:	71bb      	strb	r3, [r7, #6]
  lcd_cmd(0x80 | (raw << 6) | col);
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	019b      	lsls	r3, r3, #6
 8002562:	b2da      	uxtb	r2, r3
 8002564:	79bb      	ldrb	r3, [r7, #6]
 8002566:	4313      	orrs	r3, r2
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800256e:	b2db      	uxtb	r3, r3
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff65 	bl	8002440 <lcd_cmd>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <pl_lcd_clear>:

void pl_lcd_clear() {
 800257e:	b580      	push	{r7, lr}
 8002580:	af00      	add	r7, sp, #0
  lcd_cmd(0x01);
 8002582:	2001      	movs	r0, #1
 8002584:	f7ff ff5c 	bl	8002440 <lcd_cmd>
  HAL_Delay(2);
 8002588:	2002      	movs	r0, #2
 800258a:	f006 fb53 	bl	8008c34 <HAL_Delay>
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <write_LED>:


#include "PL_led.h"
#include "gpio.h"

void write_LED(char pin){
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(INTERFACELED_GPIO_Port,INTERFACELED_Pin,pin);
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	461a      	mov	r2, r3
 80025a2:	2108      	movs	r1, #8
 80025a4:	4803      	ldr	r0, [pc, #12]	; (80025b4 <write_LED+0x20>)
 80025a6:	f008 fbaf 	bl	800ad08 <HAL_GPIO_WritePin>

}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	48000400 	.word	0x48000400

080025b8 <pl_motor_init>:
/*	モータの初期化					(pl_speaker_init)	*/
/*******************************************************************/
/*	モータの初期化する。						*/
/*******************************************************************/
void pl_motor_init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0

	  HAL_TIM_Base_Start_IT(&htim1);//motor
 80025bc:	480a      	ldr	r0, [pc, #40]	; (80025e8 <pl_motor_init+0x30>)
 80025be:	f00a f921 	bl	800c804 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim1);//motor
 80025c2:	4809      	ldr	r0, [pc, #36]	; (80025e8 <pl_motor_init+0x30>)
 80025c4:	f005 fb9c 	bl	8007d00 <HAL_TIM_PWM_MspInit>

	  HAL_TIM_Base_Start_IT(&htim2);//motor
 80025c8:	4808      	ldr	r0, [pc, #32]	; (80025ec <pl_motor_init+0x34>)
 80025ca:	f00a f91b 	bl	800c804 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim2);//motor
 80025ce:	4807      	ldr	r0, [pc, #28]	; (80025ec <pl_motor_init+0x34>)
 80025d0:	f005 fb96 	bl	8007d00 <HAL_TIM_PWM_MspInit>

	  pl_motor_mode_L(1);
 80025d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80025d8:	f000 f836 	bl	8002648 <pl_motor_mode_L>
	  pl_motor_mode_R(1);
 80025dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80025e0:	f000 f852 	bl	8002688 <pl_motor_mode_R>



}
 80025e4:	bf00      	nop
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20001284 	.word	0x20001284
 80025ec:	200012d0 	.word	0x200012d0

080025f0 <pl_motor_standby>:

void pl_motor_standby(int pin){
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MOTOR_ENABLE_GPIO_Port, MOTOR_ENABLE_Pin, pin);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002606:	f008 fb7f 	bl	800ad08 <HAL_GPIO_WritePin>
	pl_motor_mode_L(1);
 800260a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800260e:	f000 f81b 	bl	8002648 <pl_motor_mode_L>
	pl_motor_mode_R(1);
 8002612:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002616:	f000 f837 	bl	8002688 <pl_motor_mode_R>
	HAL_GPIO_WritePin(MD_RESET_GPIO_Port,MD_RESET_Pin,GPIO_PIN_SET);
 800261a:	2201      	movs	r2, #1
 800261c:	2120      	movs	r1, #32
 800261e:	4809      	ldr	r0, [pc, #36]	; (8002644 <pl_motor_standby+0x54>)
 8002620:	f008 fb72 	bl	800ad08 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 8002624:	2003      	movs	r0, #3
 8002626:	f006 fb05 	bl	8008c34 <HAL_Delay>
	HAL_GPIO_WritePin(MD_RESET_GPIO_Port,MD_RESET_Pin,GPIO_PIN_RESET);
 800262a:	2200      	movs	r2, #0
 800262c:	2120      	movs	r1, #32
 800262e:	4805      	ldr	r0, [pc, #20]	; (8002644 <pl_motor_standby+0x54>)
 8002630:	f008 fb6a 	bl	800ad08 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002634:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002638:	f006 fafc 	bl	8008c34 <HAL_Delay>
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	48000400 	.word	0x48000400

08002648 <pl_motor_mode_L>:

void pl_motor_mode_L(float velocity_l){
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (velocity_l>=0){
 8002652:	edd7 7a01 	vldr	s15, [r7, #4]
 8002656:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800265a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265e:	db07      	blt.n	8002670 <pl_motor_mode_L+0x28>
		HAL_GPIO_WritePin(MOTOR_CW_CCW_L_GPIO_Port,MOTOR_CW_CCW_L_Pin,L_MOTOR_FRONT);
 8002660:	2200      	movs	r2, #0
 8002662:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800266a:	f008 fb4d 	bl	800ad08 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(MOTOR_CW_CCW_L_GPIO_Port,MOTOR_CW_CCW_L_Pin,L_MOTOR_BACK);
	}
}
 800266e:	e006      	b.n	800267e <pl_motor_mode_L+0x36>
		HAL_GPIO_WritePin(MOTOR_CW_CCW_L_GPIO_Port,MOTOR_CW_CCW_L_Pin,L_MOTOR_BACK);
 8002670:	2201      	movs	r2, #1
 8002672:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800267a:	f008 fb45 	bl	800ad08 <HAL_GPIO_WritePin>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <pl_motor_mode_R>:

void pl_motor_mode_R(float velocity_r){
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (velocity_r>=0){
 8002692:	edd7 7a01 	vldr	s15, [r7, #4]
 8002696:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800269a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269e:	db05      	blt.n	80026ac <pl_motor_mode_R+0x24>
		HAL_GPIO_WritePin(MOTOR_CW_CCW_R_GPIO_Port,MOTOR_CW_CCW_R_Pin,R_MOTOR_FRONT);
 80026a0:	2201      	movs	r2, #1
 80026a2:	2110      	movs	r1, #16
 80026a4:	4806      	ldr	r0, [pc, #24]	; (80026c0 <pl_motor_mode_R+0x38>)
 80026a6:	f008 fb2f 	bl	800ad08 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(MOTOR_CW_CCW_R_GPIO_Port,MOTOR_CW_CCW_R_Pin,R_MOTOR_BACK);
	}
}
 80026aa:	e004      	b.n	80026b6 <pl_motor_mode_R+0x2e>
		HAL_GPIO_WritePin(MOTOR_CW_CCW_R_GPIO_Port,MOTOR_CW_CCW_R_Pin,R_MOTOR_BACK);
 80026ac:	2200      	movs	r2, #0
 80026ae:	2110      	movs	r1, #16
 80026b0:	4803      	ldr	r0, [pc, #12]	; (80026c0 <pl_motor_mode_R+0x38>)
 80026b2:	f008 fb29 	bl	800ad08 <HAL_GPIO_WritePin>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	48000400 	.word	0x48000400

080026c4 <pl_motor_start>:

void pl_motor_start(void){
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
	pl_interrupt_motor_count_L();
 80026c8:	f000 f848 	bl	800275c <pl_interrupt_motor_count_L>
	pl_interrupt_motor_count_R();
 80026cc:	f000 f872 	bl	80027b4 <pl_interrupt_motor_count_R>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80026d0:	2100      	movs	r1, #0
 80026d2:	4804      	ldr	r0, [pc, #16]	; (80026e4 <pl_motor_start+0x20>)
 80026d4:	f00a f942 	bl	800c95c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80026d8:	2104      	movs	r1, #4
 80026da:	4803      	ldr	r0, [pc, #12]	; (80026e8 <pl_motor_start+0x24>)
 80026dc:	f00a f93e 	bl	800c95c <HAL_TIM_PWM_Start>
}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20001284 	.word	0x20001284
 80026e8:	200012d0 	.word	0x200012d0

080026ec <pl_motor_stop>:

void pl_motor_stop(void){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80026f0:	2100      	movs	r1, #0
 80026f2:	4804      	ldr	r0, [pc, #16]	; (8002704 <pl_motor_stop+0x18>)
 80026f4:	f00a fa10 	bl	800cb18 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80026f8:	2104      	movs	r1, #4
 80026fa:	4803      	ldr	r0, [pc, #12]	; (8002708 <pl_motor_stop+0x1c>)
 80026fc:	f00a fa0c 	bl	800cb18 <HAL_TIM_PWM_Stop>
}
 8002700:	bf00      	nop
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20001284 	.word	0x20001284
 8002708:	200012d0 	.word	0x200012d0

0800270c <pl_motor_count_L>:

void pl_motor_count_L(float velocity_l){
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	ed87 0a01 	vstr	s0, [r7, #4]
//	uint16_t motorCount_l;
	g_motorCount_l = calMotorVelocityCount(velocity_l);
 8002716:	ed97 0a01 	vldr	s0, [r7, #4]
 800271a:	f000 f879 	bl	8002810 <calMotorVelocityCount>
 800271e:	4603      	mov	r3, r0
 8002720:	461a      	mov	r2, r3
 8002722:	4b03      	ldr	r3, [pc, #12]	; (8002730 <pl_motor_count_L+0x24>)
 8002724:	801a      	strh	r2, [r3, #0]
//	__HAL_TIM_SET_AUTORELOAD(&htim1, g_motorCount_l);
//	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,(uint16_t)((float)(g_motorCount_l)/2));
//	__HAL_TIM_SET_COUNTER(&htim1, 0);
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	200003a0 	.word	0x200003a0

08002734 <pl_motor_count_R>:

void pl_motor_count_R(float velocity_r){
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	ed87 0a01 	vstr	s0, [r7, #4]
//	uint16_t motorCount_r;
	g_motorCount_r = calMotorVelocityCount(velocity_r);
 800273e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002742:	f000 f865 	bl	8002810 <calMotorVelocityCount>
 8002746:	4603      	mov	r3, r0
 8002748:	461a      	mov	r2, r3
 800274a:	4b03      	ldr	r3, [pc, #12]	; (8002758 <pl_motor_count_R+0x24>)
 800274c:	801a      	strh	r2, [r3, #0]
//	__HAL_TIM_SET_AUTORELOAD(&htim2, g_motorCount_r);
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,(uint16_t)((float)(g_motorCount_r)/2));
//	__HAL_TIM_SET_COUNTER(&htim2, 0);

}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	200003a2 	.word	0x200003a2

0800275c <pl_interrupt_motor_count_L>:

void pl_interrupt_motor_count_L(void){
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim1, g_motorCount_l);
 8002760:	4b12      	ldr	r3, [pc, #72]	; (80027ac <pl_interrupt_motor_count_L+0x50>)
 8002762:	881a      	ldrh	r2, [r3, #0]
 8002764:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <pl_interrupt_motor_count_L+0x54>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	62da      	str	r2, [r3, #44]	; 0x2c
 800276a:	4b10      	ldr	r3, [pc, #64]	; (80027ac <pl_interrupt_motor_count_L+0x50>)
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <pl_interrupt_motor_count_L+0x54>)
 8002772:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,(uint16_t)((float)(g_motorCount_l)/2));
 8002774:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <pl_interrupt_motor_count_L+0x50>)
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	ee07 3a90 	vmov	s15, r3
 800277c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002780:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002784:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800278c:	ee17 3a90 	vmov	r3, s15
 8002790:	b29a      	uxth	r2, r3
 8002792:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <pl_interrupt_motor_count_L+0x54>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002798:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <pl_interrupt_motor_count_L+0x54>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2200      	movs	r2, #0
 800279e:	625a      	str	r2, [r3, #36]	; 0x24
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	200003a0 	.word	0x200003a0
 80027b0:	20001284 	.word	0x20001284

080027b4 <pl_interrupt_motor_count_R>:

void pl_interrupt_motor_count_R(void){
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim2, g_motorCount_r);
 80027b8:	4b12      	ldr	r3, [pc, #72]	; (8002804 <pl_interrupt_motor_count_R+0x50>)
 80027ba:	881a      	ldrh	r2, [r3, #0]
 80027bc:	4b12      	ldr	r3, [pc, #72]	; (8002808 <pl_interrupt_motor_count_R+0x54>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80027c2:	4b10      	ldr	r3, [pc, #64]	; (8002804 <pl_interrupt_motor_count_R+0x50>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <pl_interrupt_motor_count_R+0x54>)
 80027ca:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,(uint16_t)((float)(g_motorCount_r)/2));
 80027cc:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <pl_interrupt_motor_count_R+0x50>)
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	ee07 3a90 	vmov	s15, r3
 80027d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027d8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80027dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027e4:	ee17 3a90 	vmov	r3, s15
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	4b07      	ldr	r3, [pc, #28]	; (8002808 <pl_interrupt_motor_count_R+0x54>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <pl_interrupt_motor_count_R+0x54>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2200      	movs	r2, #0
 80027f6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	200003a2 	.word	0x200003a2
 8002808:	200012d0 	.word	0x200012d0
 800280c:	00000000 	.word	0x00000000

08002810 <calMotorVelocityCount>:
/*******************************************************************/
/*	速度からcycleCountへの変換					(calFrequencyCount)	*/
/*******************************************************************/
/*	速度からPWMに送るcycleCountを計算する．。						*/
/*******************************************************************/
uint16_t calMotorVelocityCount(float Velocity) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	ed87 0a01 	vstr	s0, [r7, #4]
	float f_MotorCount;
	uint16_t MotorCount;

	f_MotorCount=(10000000 * STEP_DEGREE * M_PI / 180 * TIRE_DIAMETER / 2 / fabs(Velocity));
 800281a:	edd7 7a01 	vldr	s15, [r7, #4]
 800281e:	eef0 7ae7 	vabs.f32	s15, s15
 8002822:	ee17 0a90 	vmov	r0, s15
 8002826:	f7fd fe8f 	bl	8000548 <__aeabi_f2d>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	a11d      	add	r1, pc, #116	; (adr r1, 80028a4 <calMotorVelocityCount+0x94>)
 8002830:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002834:	f7fe f80a 	bl	800084c <__aeabi_ddiv>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4610      	mov	r0, r2
 800283e:	4619      	mov	r1, r3
 8002840:	f7fe f9d2 	bl	8000be8 <__aeabi_d2f>
 8002844:	4603      	mov	r3, r0
 8002846:	60bb      	str	r3, [r7, #8]
	if (Velocity == 0 || f_MotorCount > 65535 || f_MotorCount < 0) {
 8002848:	edd7 7a01 	vldr	s15, [r7, #4]
 800284c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002854:	d00f      	beq.n	8002876 <calMotorVelocityCount+0x66>
 8002856:	edd7 7a02 	vldr	s15, [r7, #8]
 800285a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80028a0 <calMotorVelocityCount+0x90>
 800285e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002866:	dc06      	bgt.n	8002876 <calMotorVelocityCount+0x66>
 8002868:	edd7 7a02 	vldr	s15, [r7, #8]
 800286c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002874:	d503      	bpl.n	800287e <calMotorVelocityCount+0x6e>
		MotorCount = 30535 - 1;
 8002876:	f247 7346 	movw	r3, #30534	; 0x7746
 800287a:	81fb      	strh	r3, [r7, #14]
 800287c:	e008      	b.n	8002890 <calMotorVelocityCount+0x80>
	} else {
		MotorCount = (uint16_t) (f_MotorCount)-1;
 800287e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002886:	ee17 3a90 	vmov	r3, s15
 800288a:	b29b      	uxth	r3, r3
 800288c:	3b01      	subs	r3, #1
 800288e:	81fb      	strh	r3, [r7, #14]
	}

	return MotorCount;
 8002890:	89fb      	ldrh	r3, [r7, #14]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	f3af 8000 	nop.w
 80028a0:	477fff00 	.word	0x477fff00
 80028a4:	398eadef 	.word	0x398eadef
 80028a8:	414f28b3 	.word	0x414f28b3
 80028ac:	00000000 	.word	0x00000000

080028b0 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 80028b6:	4828      	ldr	r0, [pc, #160]	; (8002958 <pl_getbatt+0xa8>)
 80028b8:	f006 fd3e 	bl	8009338 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 80028bc:	2132      	movs	r1, #50	; 0x32
 80028be:	4826      	ldr	r0, [pc, #152]	; (8002958 <pl_getbatt+0xa8>)
 80028c0:	f006 fdd0 	bl	8009464 <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 80028c4:	4824      	ldr	r0, [pc, #144]	; (8002958 <pl_getbatt+0xa8>)
 80028c6:	f006 ff42 	bl	800974e <HAL_ADC_GetValue>
 80028ca:	4603      	mov	r3, r0
 80028cc:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 80028ce:	4822      	ldr	r0, [pc, #136]	; (8002958 <pl_getbatt+0xa8>)
 80028d0:	f006 fd95 	bl	80093fe <HAL_ADC_Stop>
	batt = 3.3  * (float) battAD / 1023.0 * (100.0 + 22.0) / 22.0;
 80028d4:	88fb      	ldrh	r3, [r7, #6]
 80028d6:	ee07 3a90 	vmov	s15, r3
 80028da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028de:	ee17 0a90 	vmov	r0, s15
 80028e2:	f7fd fe31 	bl	8000548 <__aeabi_f2d>
 80028e6:	a318      	add	r3, pc, #96	; (adr r3, 8002948 <pl_getbatt+0x98>)
 80028e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ec:	f7fd fe84 	bl	80005f8 <__aeabi_dmul>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4610      	mov	r0, r2
 80028f6:	4619      	mov	r1, r3
 80028f8:	a315      	add	r3, pc, #84	; (adr r3, 8002950 <pl_getbatt+0xa0>)
 80028fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fe:	f7fd ffa5 	bl	800084c <__aeabi_ddiv>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	4b13      	ldr	r3, [pc, #76]	; (800295c <pl_getbatt+0xac>)
 8002910:	f7fd fe72 	bl	80005f8 <__aeabi_dmul>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4610      	mov	r0, r2
 800291a:	4619      	mov	r1, r3
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <pl_getbatt+0xb0>)
 8002922:	f7fd ff93 	bl	800084c <__aeabi_ddiv>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4610      	mov	r0, r2
 800292c:	4619      	mov	r1, r3
 800292e:	f7fe f95b 	bl	8000be8 <__aeabi_d2f>
 8002932:	4603      	mov	r3, r0
 8002934:	603b      	str	r3, [r7, #0]


return batt;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	ee07 3a90 	vmov	s15, r3
}
 800293c:	eeb0 0a67 	vmov.f32	s0, s15
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	66666666 	.word	0x66666666
 800294c:	400a6666 	.word	0x400a6666
 8002950:	00000000 	.word	0x00000000
 8002954:	408ff800 	.word	0x408ff800
 8002958:	20000958 	.word	0x20000958
 800295c:	405e8000 	.word	0x405e8000
 8002960:	40360000 	.word	0x40360000
 8002964:	00000000 	.word	0x00000000

08002968 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 800296e:	4862      	ldr	r0, [pc, #392]	; (8002af8 <pl_callback_getSensor+0x190>)
 8002970:	f006 fe8c 	bl	800968c <HAL_ADC_Stop_DMA>
	switch (AD_step) {
 8002974:	4b61      	ldr	r3, [pc, #388]	; (8002afc <pl_callback_getSensor+0x194>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d042      	beq.n	8002a02 <pl_callback_getSensor+0x9a>
 800297c:	2b02      	cmp	r3, #2
 800297e:	dc66      	bgt.n	8002a4e <pl_callback_getSensor+0xe6>
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <pl_callback_getSensor+0x22>
 8002984:	2b01      	cmp	r3, #1
 8002986:	d016      	beq.n	80029b6 <pl_callback_getSensor+0x4e>
 8002988:	e061      	b.n	8002a4e <pl_callback_getSensor+0xe6>
		case 0:
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_SET);
 800298a:	2201      	movs	r2, #1
 800298c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002990:	485b      	ldr	r0, [pc, #364]	; (8002b00 <pl_callback_getSensor+0x198>)
 8002992:	f008 f9b9 	bl	800ad08 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_RESET);
 8002996:	2200      	movs	r2, #0
 8002998:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800299c:	4858      	ldr	r0, [pc, #352]	; (8002b00 <pl_callback_getSensor+0x198>)
 800299e:	f008 f9b3 	bl	800ad08 <HAL_GPIO_WritePin>
					for (j = 0; j <= 100; j++) {
 80029a2:	2300      	movs	r3, #0
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	e002      	b.n	80029ae <pl_callback_getSensor+0x46>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3301      	adds	r3, #1
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b64      	cmp	r3, #100	; 0x64
 80029b2:	ddf9      	ble.n	80029a8 <pl_callback_getSensor+0x40>
					}
			break;
 80029b4:	e04b      	b.n	8002a4e <pl_callback_getSensor+0xe6>
		case 1:
			g_sensor_on[0] = g_ADCBuffer[1];
 80029b6:	4b53      	ldr	r3, [pc, #332]	; (8002b04 <pl_callback_getSensor+0x19c>)
 80029b8:	885a      	ldrh	r2, [r3, #2]
 80029ba:	4b53      	ldr	r3, [pc, #332]	; (8002b08 <pl_callback_getSensor+0x1a0>)
 80029bc:	801a      	strh	r2, [r3, #0]
			g_sensor_on[1] = g_ADCBuffer[2];
 80029be:	4b51      	ldr	r3, [pc, #324]	; (8002b04 <pl_callback_getSensor+0x19c>)
 80029c0:	889a      	ldrh	r2, [r3, #4]
 80029c2:	4b51      	ldr	r3, [pc, #324]	; (8002b08 <pl_callback_getSensor+0x1a0>)
 80029c4:	805a      	strh	r2, [r3, #2]
			g_sensor_off[2] = g_ADCBuffer[3];
 80029c6:	4b4f      	ldr	r3, [pc, #316]	; (8002b04 <pl_callback_getSensor+0x19c>)
 80029c8:	88da      	ldrh	r2, [r3, #6]
 80029ca:	4b50      	ldr	r3, [pc, #320]	; (8002b0c <pl_callback_getSensor+0x1a4>)
 80029cc:	809a      	strh	r2, [r3, #4]
			g_sensor_off[3] = g_ADCBuffer[4];
 80029ce:	4b4d      	ldr	r3, [pc, #308]	; (8002b04 <pl_callback_getSensor+0x19c>)
 80029d0:	891a      	ldrh	r2, [r3, #8]
 80029d2:	4b4e      	ldr	r3, [pc, #312]	; (8002b0c <pl_callback_getSensor+0x1a4>)
 80029d4:	80da      	strh	r2, [r3, #6]
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_RESET);
 80029d6:	2200      	movs	r2, #0
 80029d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029dc:	4848      	ldr	r0, [pc, #288]	; (8002b00 <pl_callback_getSensor+0x198>)
 80029de:	f008 f993 	bl	800ad08 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_SET);
 80029e2:	2201      	movs	r2, #1
 80029e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029e8:	4845      	ldr	r0, [pc, #276]	; (8002b00 <pl_callback_getSensor+0x198>)
 80029ea:	f008 f98d 	bl	800ad08 <HAL_GPIO_WritePin>
					for (j = 0; j <= 100; j++) {
 80029ee:	2300      	movs	r3, #0
 80029f0:	607b      	str	r3, [r7, #4]
 80029f2:	e002      	b.n	80029fa <pl_callback_getSensor+0x92>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3301      	adds	r3, #1
 80029f8:	607b      	str	r3, [r7, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b64      	cmp	r3, #100	; 0x64
 80029fe:	ddf9      	ble.n	80029f4 <pl_callback_getSensor+0x8c>
					}
			break;
 8002a00:	e025      	b.n	8002a4e <pl_callback_getSensor+0xe6>
		case 2:
			g_sensor_off[0] = g_ADCBuffer[1];
 8002a02:	4b40      	ldr	r3, [pc, #256]	; (8002b04 <pl_callback_getSensor+0x19c>)
 8002a04:	885a      	ldrh	r2, [r3, #2]
 8002a06:	4b41      	ldr	r3, [pc, #260]	; (8002b0c <pl_callback_getSensor+0x1a4>)
 8002a08:	801a      	strh	r2, [r3, #0]
			g_sensor_off[1] = g_ADCBuffer[2];
 8002a0a:	4b3e      	ldr	r3, [pc, #248]	; (8002b04 <pl_callback_getSensor+0x19c>)
 8002a0c:	889a      	ldrh	r2, [r3, #4]
 8002a0e:	4b3f      	ldr	r3, [pc, #252]	; (8002b0c <pl_callback_getSensor+0x1a4>)
 8002a10:	805a      	strh	r2, [r3, #2]
			g_sensor_on[2] = g_ADCBuffer[3];
 8002a12:	4b3c      	ldr	r3, [pc, #240]	; (8002b04 <pl_callback_getSensor+0x19c>)
 8002a14:	88da      	ldrh	r2, [r3, #6]
 8002a16:	4b3c      	ldr	r3, [pc, #240]	; (8002b08 <pl_callback_getSensor+0x1a0>)
 8002a18:	809a      	strh	r2, [r3, #4]
			g_sensor_on[3] = g_ADCBuffer[4];
 8002a1a:	4b3a      	ldr	r3, [pc, #232]	; (8002b04 <pl_callback_getSensor+0x19c>)
 8002a1c:	891a      	ldrh	r2, [r3, #8]
 8002a1e:	4b3a      	ldr	r3, [pc, #232]	; (8002b08 <pl_callback_getSensor+0x1a0>)
 8002a20:	80da      	strh	r2, [r3, #6]
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_RESET);
 8002a22:	2200      	movs	r2, #0
 8002a24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a28:	4835      	ldr	r0, [pc, #212]	; (8002b00 <pl_callback_getSensor+0x198>)
 8002a2a:	f008 f96d 	bl	800ad08 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_RESET);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a34:	4832      	ldr	r0, [pc, #200]	; (8002b00 <pl_callback_getSensor+0x198>)
 8002a36:	f008 f967 	bl	800ad08 <HAL_GPIO_WritePin>
					for (j = 0; j <= 10; j++) {
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	607b      	str	r3, [r7, #4]
 8002a3e:	e002      	b.n	8002a46 <pl_callback_getSensor+0xde>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3301      	adds	r3, #1
 8002a44:	607b      	str	r3, [r7, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b0a      	cmp	r3, #10
 8002a4a:	ddf9      	ble.n	8002a40 <pl_callback_getSensor+0xd8>
					}
			break;
 8002a4c:	bf00      	nop
	}
	V_battAD = g_ADCBuffer[0];
 8002a4e:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <pl_callback_getSensor+0x19c>)
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 1023.0 * (100.0 + 22.0) / 22.0;
 8002a54:	887b      	ldrh	r3, [r7, #2]
 8002a56:	ee07 3a90 	vmov	s15, r3
 8002a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a5e:	ee17 0a90 	vmov	r0, s15
 8002a62:	f7fd fd71 	bl	8000548 <__aeabi_f2d>
 8002a66:	a320      	add	r3, pc, #128	; (adr r3, 8002ae8 <pl_callback_getSensor+0x180>)
 8002a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6c:	f7fd fdc4 	bl	80005f8 <__aeabi_dmul>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4610      	mov	r0, r2
 8002a76:	4619      	mov	r1, r3
 8002a78:	a31d      	add	r3, pc, #116	; (adr r3, 8002af0 <pl_callback_getSensor+0x188>)
 8002a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7e:	f7fd fee5 	bl	800084c <__aeabi_ddiv>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4610      	mov	r0, r2
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <pl_callback_getSensor+0x1a8>)
 8002a90:	f7fd fdb2 	bl	80005f8 <__aeabi_dmul>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4610      	mov	r0, r2
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <pl_callback_getSensor+0x1ac>)
 8002aa2:	f7fd fed3 	bl	800084c <__aeabi_ddiv>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	f7fe f89b 	bl	8000be8 <__aeabi_d2f>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4a18      	ldr	r2, [pc, #96]	; (8002b18 <pl_callback_getSensor+0x1b0>)
 8002ab6:	6013      	str	r3, [r2, #0]
		AD_step++;
 8002ab8:	4b10      	ldr	r3, [pc, #64]	; (8002afc <pl_callback_getSensor+0x194>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	3301      	adds	r3, #1
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <pl_callback_getSensor+0x194>)
 8002ac2:	701a      	strb	r2, [r3, #0]

		if (AD_step != 3) {
 8002ac4:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <pl_callback_getSensor+0x194>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d005      	beq.n	8002ad8 <pl_callback_getSensor+0x170>
			HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
 8002acc:	2205      	movs	r2, #5
 8002ace:	490d      	ldr	r1, [pc, #52]	; (8002b04 <pl_callback_getSensor+0x19c>)
 8002ad0:	4809      	ldr	r0, [pc, #36]	; (8002af8 <pl_callback_getSensor+0x190>)
 8002ad2:	f006 fd57 	bl	8009584 <HAL_ADC_Start_DMA>

			AD_step = 0;

		}

}
 8002ad6:	e002      	b.n	8002ade <pl_callback_getSensor+0x176>
			AD_step = 0;
 8002ad8:	4b08      	ldr	r3, [pc, #32]	; (8002afc <pl_callback_getSensor+0x194>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	701a      	strb	r2, [r3, #0]
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	66666666 	.word	0x66666666
 8002aec:	400a6666 	.word	0x400a6666
 8002af0:	00000000 	.word	0x00000000
 8002af4:	408ff800 	.word	0x408ff800
 8002af8:	20000958 	.word	0x20000958
 8002afc:	200003ae 	.word	0x200003ae
 8002b00:	48000800 	.word	0x48000800
 8002b04:	200003a4 	.word	0x200003a4
 8002b08:	200003b0 	.word	0x200003b0
 8002b0c:	200003b8 	.word	0x200003b8
 8002b10:	405e8000 	.word	0x405e8000
 8002b14:	40360000 	.word	0x40360000
 8002b18:	200003c0 	.word	0x200003c0

08002b1c <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
 8002b20:	2205      	movs	r2, #5
 8002b22:	4903      	ldr	r1, [pc, #12]	; (8002b30 <pl_interupt_getSensor+0x14>)
 8002b24:	4803      	ldr	r0, [pc, #12]	; (8002b34 <pl_interupt_getSensor+0x18>)
 8002b26:	f006 fd2d 	bl	8009584 <HAL_ADC_Start_DMA>
				sizeof(g_ADCBuffer) / sizeof(uint16_t));


}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	200003a4 	.word	0x200003a4
 8002b34:	20000958 	.word	0x20000958

08002b38 <pl_test_speaker>:

soundData seria[seriaNUM];
soundData Zelda_nazo[Zelda_nazoNUM];

void pl_test_speaker(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
	for(int count=1;count<15;count++){
 8002b3e:	2301      	movs	r3, #1
 8002b40:	607b      	str	r3, [r7, #4]
 8002b42:	e007      	b.n	8002b54 <pl_test_speaker+0x1c>
		pl_play_oneSound(count);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 f861 	bl	8002c10 <pl_play_oneSound>
	for(int count=1;count<15;count++){
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3301      	adds	r3, #1
 8002b52:	607b      	str	r3, [r7, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b0e      	cmp	r3, #14
 8002b58:	ddf4      	ble.n	8002b44 <pl_test_speaker+0xc>
		}

	pl_play_Music(8, Zelda_nazo);
 8002b5a:	4906      	ldr	r1, [pc, #24]	; (8002b74 <pl_test_speaker+0x3c>)
 8002b5c:	2008      	movs	r0, #8
 8002b5e:	f000 f8c3 	bl	8002ce8 <pl_play_Music>
	pl_play_Music(169, seria);
 8002b62:	4905      	ldr	r1, [pc, #20]	; (8002b78 <pl_test_speaker+0x40>)
 8002b64:	20a9      	movs	r0, #169	; 0xa9
 8002b66:	f000 f8bf 	bl	8002ce8 <pl_play_Music>


}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000914 	.word	0x20000914
 8002b78:	200003c4 	.word	0x200003c4

08002b7c <pl_speaker_init>:
/*	スピーカーの初期化					(pl_speaker_init)	*/
/*******************************************************************/
/*	スピーカーの初期化する。						*/
/*******************************************************************/
void pl_speaker_init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0

	  HAL_TIM_Base_Start_IT(&htim15);//speaker
 8002b80:	4805      	ldr	r0, [pc, #20]	; (8002b98 <pl_speaker_init+0x1c>)
 8002b82:	f009 fe3f 	bl	800c804 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim15);//speaker
 8002b86:	4804      	ldr	r0, [pc, #16]	; (8002b98 <pl_speaker_init+0x1c>)
 8002b88:	f005 f8ba 	bl	8007d00 <HAL_TIM_PWM_MspInit>

	  inputseria();
 8002b8c:	f000 f95a 	bl	8002e44 <inputseria>
	  inputZelda_nazo();
 8002b90:	f000 f90e 	bl	8002db0 <inputZelda_nazo>


}
 8002b94:	bf00      	nop
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	20001368 	.word	0x20001368
 8002b9c:	00000000 	.word	0x00000000

08002ba0 <calFrequencyCount>:
/*******************************************************************/
/*	周波数からcycleCountへの変換					(calFrequencyCount)	*/
/*******************************************************************/
/*	周波数からPWMに送るcycleCountを計算する．。						*/
/*******************************************************************/
uint16_t calFrequencyCount(float tarHz) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t tarCount;
	if (tarHz == 0) {
 8002baa:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bae:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb6:	d102      	bne.n	8002bbe <calFrequencyCount+0x1e>
		tarCount = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	81fb      	strh	r3, [r7, #14]
 8002bbc:	e01a      	b.n	8002bf4 <calFrequencyCount+0x54>
	} else {
		tarCount = (uint16_t) (1000000.0 / tarHz - 1.0);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fd fcc2 	bl	8000548 <__aeabi_f2d>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	a10e      	add	r1, pc, #56	; (adr r1, 8002c04 <calFrequencyCount+0x64>)
 8002bca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bce:	f7fd fe3d 	bl	800084c <__aeabi_ddiv>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <calFrequencyCount+0x60>)
 8002be0:	f7fd fb52 	bl	8000288 <__aeabi_dsub>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	f7fd ffdc 	bl	8000ba8 <__aeabi_d2uiz>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	81fb      	strh	r3, [r7, #14]
	}
	return tarCount;
 8002bf4:	89fb      	ldrh	r3, [r7, #14]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	3ff00000 	.word	0x3ff00000
 8002c04:	00000000 	.word	0x00000000
 8002c08:	412e8480 	.word	0x412e8480
 8002c0c:	00000000 	.word	0x00000000

08002c10 <pl_play_oneSound>:
/*******************************************************************/
/*	任意の周波数の一音を出力					(pl_play_oneSound)	*/
/*******************************************************************/
/*	scaleにあわせた周波数での一音を出力する．．						*/
/*******************************************************************/
void pl_play_oneSound(char scale) {
 8002c10:	b590      	push	{r4, r7, lr}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	71fb      	strb	r3, [r7, #7]
	uint16_t cycleCount, j;
	float Hz;
	Hz = 1.0;
 8002c1a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c1e:	613b      	str	r3, [r7, #16]
	for (j = 0; j < scale; j++) {
 8002c20:	2300      	movs	r3, #0
 8002c22:	82fb      	strh	r3, [r7, #22]
 8002c24:	e012      	b.n	8002c4c <pl_play_oneSound+0x3c>
		Hz = Hz * 1.0595;
 8002c26:	6938      	ldr	r0, [r7, #16]
 8002c28:	f7fd fc8e 	bl	8000548 <__aeabi_f2d>
 8002c2c:	a32c      	add	r3, pc, #176	; (adr r3, 8002ce0 <pl_play_oneSound+0xd0>)
 8002c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c32:	f7fd fce1 	bl	80005f8 <__aeabi_dmul>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f7fd ffd3 	bl	8000be8 <__aeabi_d2f>
 8002c42:	4603      	mov	r3, r0
 8002c44:	613b      	str	r3, [r7, #16]
	for (j = 0; j < scale; j++) {
 8002c46:	8afb      	ldrh	r3, [r7, #22]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	82fb      	strh	r3, [r7, #22]
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	8afa      	ldrh	r2, [r7, #22]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d3e7      	bcc.n	8002c26 <pl_play_oneSound+0x16>
	}
	cycleCount = calFrequencyCount(440 * 0.6 * Hz);
 8002c56:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c5a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002cd8 <pl_play_oneSound+0xc8>
 8002c5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c62:	eeb0 0a67 	vmov.f32	s0, s15
 8002c66:	f7ff ff9b 	bl	8002ba0 <calFrequencyCount>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_AUTORELOAD(&htim15, cycleCount);
 8002c6e:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <pl_play_oneSound+0xcc>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	89fa      	ldrh	r2, [r7, #14]
 8002c74:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c76:	89fb      	ldrh	r3, [r7, #14]
 8002c78:	4a18      	ldr	r2, [pc, #96]	; (8002cdc <pl_play_oneSound+0xcc>)
 8002c7a:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2,cycleCount * SPEAKER_LOUDNESS);
 8002c7c:	89fb      	ldrh	r3, [r7, #14]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fd fc50 	bl	8000524 <__aeabi_i2d>
 8002c84:	a312      	add	r3, pc, #72	; (adr r3, 8002cd0 <pl_play_oneSound+0xc0>)
 8002c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8a:	f7fd fcb5 	bl	80005f8 <__aeabi_dmul>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4912      	ldr	r1, [pc, #72]	; (8002cdc <pl_play_oneSound+0xcc>)
 8002c94:	680c      	ldr	r4, [r1, #0]
 8002c96:	4610      	mov	r0, r2
 8002c98:	4619      	mov	r1, r3
 8002c9a:	f7fd ff85 	bl	8000ba8 <__aeabi_d2uiz>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	63a3      	str	r3, [r4, #56]	; 0x38

	__HAL_TIM_SET_COUNTER(&htim15, 0);
 8002ca2:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <pl_play_oneSound+0xcc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8002caa:	2104      	movs	r1, #4
 8002cac:	480b      	ldr	r0, [pc, #44]	; (8002cdc <pl_play_oneSound+0xcc>)
 8002cae:	f009 fe55 	bl	800c95c <HAL_TIM_PWM_Start>
	HAL_Delay(600);
 8002cb2:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002cb6:	f005 ffbd 	bl	8008c34 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 8002cba:	2104      	movs	r1, #4
 8002cbc:	4807      	ldr	r0, [pc, #28]	; (8002cdc <pl_play_oneSound+0xcc>)
 8002cbe:	f009 ff2b 	bl	800cb18 <HAL_TIM_PWM_Stop>

}
 8002cc2:	bf00      	nop
 8002cc4:	371c      	adds	r7, #28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd90      	pop	{r4, r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	f3af 8000 	nop.w
 8002cd0:	47ae147b 	.word	0x47ae147b
 8002cd4:	3f747ae1 	.word	0x3f747ae1
 8002cd8:	43840000 	.word	0x43840000
 8002cdc:	20001368 	.word	0x20001368
 8002ce0:	45a1cac1 	.word	0x45a1cac1
 8002ce4:	3ff0f3b6 	.word	0x3ff0f3b6

08002ce8 <pl_play_Music>:
/*******************************************************************/
/*	任意の音楽を出力					(pl_play_Music)	*/
/*******************************************************************/
/*	playDataの音楽を出力する．						*/
/*******************************************************************/
void pl_play_Music(uint16_t dataMaxNum, soundData *playData) {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	6039      	str	r1, [r7, #0]
 8002cf2:	80fb      	strh	r3, [r7, #6]

	uint16_t i;
	uint16_t cycleCount, cycleCount_f;

	for (i = 0; i < dataMaxNum; i++) {
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	81fb      	strh	r3, [r7, #14]
 8002cf8:	e043      	b.n	8002d82 <pl_play_Music+0x9a>
		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 8002cfa:	2104      	movs	r1, #4
 8002cfc:	482a      	ldr	r0, [pc, #168]	; (8002da8 <pl_play_Music+0xc0>)
 8002cfe:	f009 ff0b 	bl	800cb18 <HAL_TIM_PWM_Stop>

		cycleCount = calFrequencyCount(playData[i].interval);
 8002d02:	89fb      	ldrh	r3, [r7, #14]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	4413      	add	r3, r2
 8002d0a:	edd3 7a00 	vldr	s15, [r3]
 8002d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d12:	f7ff ff45 	bl	8002ba0 <calFrequencyCount>
 8002d16:	4603      	mov	r3, r0
 8002d18:	81bb      	strh	r3, [r7, #12]
		cycleCount_f = (int) ((float) (cycleCount) * SPEAKER_LOUDNESS);
 8002d1a:	89bb      	ldrh	r3, [r7, #12]
 8002d1c:	ee07 3a90 	vmov	s15, r3
 8002d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d24:	ee17 0a90 	vmov	r0, s15
 8002d28:	f7fd fc0e 	bl	8000548 <__aeabi_f2d>
 8002d2c:	a31c      	add	r3, pc, #112	; (adr r3, 8002da0 <pl_play_Music+0xb8>)
 8002d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d32:	f7fd fc61 	bl	80005f8 <__aeabi_dmul>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	f7fd ff0b 	bl	8000b58 <__aeabi_d2iz>
 8002d42:	4603      	mov	r3, r0
 8002d44:	817b      	strh	r3, [r7, #10]
		__HAL_TIM_SET_AUTORELOAD(&htim15, cycleCount);
 8002d46:	4b18      	ldr	r3, [pc, #96]	; (8002da8 <pl_play_Music+0xc0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	89ba      	ldrh	r2, [r7, #12]
 8002d4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d4e:	89bb      	ldrh	r3, [r7, #12]
 8002d50:	4a15      	ldr	r2, [pc, #84]	; (8002da8 <pl_play_Music+0xc0>)
 8002d52:	60d3      	str	r3, [r2, #12]

		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2,cycleCount_f);
 8002d54:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <pl_play_Music+0xc0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	897a      	ldrh	r2, [r7, #10]
 8002d5a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002d5c:	4b13      	ldr	r3, [pc, #76]	; (8002dac <pl_play_Music+0xc4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2200      	movs	r2, #0
 8002d62:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8002d64:	2104      	movs	r1, #4
 8002d66:	4810      	ldr	r0, [pc, #64]	; (8002da8 <pl_play_Music+0xc0>)
 8002d68:	f009 fdf8 	bl	800c95c <HAL_TIM_PWM_Start>
		HAL_Delay(playData[i].waittime);
 8002d6c:	89fb      	ldrh	r3, [r7, #14]
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	4413      	add	r3, r2
 8002d74:	889b      	ldrh	r3, [r3, #4]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f005 ff5c 	bl	8008c34 <HAL_Delay>
	for (i = 0; i < dataMaxNum; i++) {
 8002d7c:	89fb      	ldrh	r3, [r7, #14]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	81fb      	strh	r3, [r7, #14]
 8002d82:	89fa      	ldrh	r2, [r7, #14]
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d3b7      	bcc.n	8002cfa <pl_play_Music+0x12>
	}
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 8002d8a:	2104      	movs	r1, #4
 8002d8c:	4806      	ldr	r0, [pc, #24]	; (8002da8 <pl_play_Music+0xc0>)
 8002d8e:	f009 fec3 	bl	800cb18 <HAL_TIM_PWM_Stop>
}
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	f3af 8000 	nop.w
 8002da0:	47ae147b 	.word	0x47ae147b
 8002da4:	3f747ae1 	.word	0x3f747ae1
 8002da8:	20001368 	.word	0x20001368
 8002dac:	200012d0 	.word	0x200012d0

08002db0 <inputZelda_nazo>:
/*******************************************************************/
/*	音楽用構造体配列の入力					(input)	*/
/*******************************************************************/
/*	音楽用の構造体を定義してる．						*/
/*******************************************************************/
void inputZelda_nazo(void) {
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
	Zelda_nazo[0].interval = 1480;
 8002db4:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <inputZelda_nazo+0x70>)
 8002db6:	4a1b      	ldr	r2, [pc, #108]	; (8002e24 <inputZelda_nazo+0x74>)
 8002db8:	601a      	str	r2, [r3, #0]
	Zelda_nazo[0].waittime = 19 * 7;
 8002dba:	4b19      	ldr	r3, [pc, #100]	; (8002e20 <inputZelda_nazo+0x70>)
 8002dbc:	2285      	movs	r2, #133	; 0x85
 8002dbe:	809a      	strh	r2, [r3, #4]
	Zelda_nazo[1].interval = 1397;
 8002dc0:	4b17      	ldr	r3, [pc, #92]	; (8002e20 <inputZelda_nazo+0x70>)
 8002dc2:	4a19      	ldr	r2, [pc, #100]	; (8002e28 <inputZelda_nazo+0x78>)
 8002dc4:	609a      	str	r2, [r3, #8]
	Zelda_nazo[1].waittime = 19 * 7;
 8002dc6:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <inputZelda_nazo+0x70>)
 8002dc8:	2285      	movs	r2, #133	; 0x85
 8002dca:	819a      	strh	r2, [r3, #12]
	Zelda_nazo[2].interval = 1175;
 8002dcc:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <inputZelda_nazo+0x70>)
 8002dce:	4a17      	ldr	r2, [pc, #92]	; (8002e2c <inputZelda_nazo+0x7c>)
 8002dd0:	611a      	str	r2, [r3, #16]
	Zelda_nazo[2].waittime = 19 * 7;
 8002dd2:	4b13      	ldr	r3, [pc, #76]	; (8002e20 <inputZelda_nazo+0x70>)
 8002dd4:	2285      	movs	r2, #133	; 0x85
 8002dd6:	829a      	strh	r2, [r3, #20]
	Zelda_nazo[3].interval = 831;
 8002dd8:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <inputZelda_nazo+0x70>)
 8002dda:	4a15      	ldr	r2, [pc, #84]	; (8002e30 <inputZelda_nazo+0x80>)
 8002ddc:	619a      	str	r2, [r3, #24]
	Zelda_nazo[3].waittime = 19 * 7;
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <inputZelda_nazo+0x70>)
 8002de0:	2285      	movs	r2, #133	; 0x85
 8002de2:	839a      	strh	r2, [r3, #28]
	Zelda_nazo[4].interval = 784;
 8002de4:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <inputZelda_nazo+0x70>)
 8002de6:	4a13      	ldr	r2, [pc, #76]	; (8002e34 <inputZelda_nazo+0x84>)
 8002de8:	621a      	str	r2, [r3, #32]
	Zelda_nazo[4].waittime = 19 * 7;
 8002dea:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <inputZelda_nazo+0x70>)
 8002dec:	2285      	movs	r2, #133	; 0x85
 8002dee:	849a      	strh	r2, [r3, #36]	; 0x24
	Zelda_nazo[5].interval = 1245;
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <inputZelda_nazo+0x70>)
 8002df2:	4a11      	ldr	r2, [pc, #68]	; (8002e38 <inputZelda_nazo+0x88>)
 8002df4:	629a      	str	r2, [r3, #40]	; 0x28
	Zelda_nazo[5].waittime = 19 * 7;
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <inputZelda_nazo+0x70>)
 8002df8:	2285      	movs	r2, #133	; 0x85
 8002dfa:	859a      	strh	r2, [r3, #44]	; 0x2c
	Zelda_nazo[6].interval = 1568;
 8002dfc:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <inputZelda_nazo+0x70>)
 8002dfe:	4a0f      	ldr	r2, [pc, #60]	; (8002e3c <inputZelda_nazo+0x8c>)
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
	Zelda_nazo[6].waittime = 19 * 7;
 8002e02:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <inputZelda_nazo+0x70>)
 8002e04:	2285      	movs	r2, #133	; 0x85
 8002e06:	869a      	strh	r2, [r3, #52]	; 0x34
	Zelda_nazo[7].interval = 1976;
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <inputZelda_nazo+0x70>)
 8002e0a:	4a0d      	ldr	r2, [pc, #52]	; (8002e40 <inputZelda_nazo+0x90>)
 8002e0c:	639a      	str	r2, [r3, #56]	; 0x38
	Zelda_nazo[7].waittime = 99 * 7;
 8002e0e:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <inputZelda_nazo+0x70>)
 8002e10:	f240 22b5 	movw	r2, #693	; 0x2b5
 8002e14:	879a      	strh	r2, [r3, #60]	; 0x3c

}
 8002e16:	bf00      	nop
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	20000914 	.word	0x20000914
 8002e24:	44b90000 	.word	0x44b90000
 8002e28:	44aea000 	.word	0x44aea000
 8002e2c:	4492e000 	.word	0x4492e000
 8002e30:	444fc000 	.word	0x444fc000
 8002e34:	44440000 	.word	0x44440000
 8002e38:	449ba000 	.word	0x449ba000
 8002e3c:	44c40000 	.word	0x44c40000
 8002e40:	44f70000 	.word	0x44f70000

08002e44 <inputseria>:


void inputseria(void) {
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
	seria[0].interval = 698;
 8002e48:	4bad      	ldr	r3, [pc, #692]	; (8003100 <inputseria+0x2bc>)
 8002e4a:	4aae      	ldr	r2, [pc, #696]	; (8003104 <inputseria+0x2c0>)
 8002e4c:	601a      	str	r2, [r3, #0]
	seria[0].waittime = 224;
 8002e4e:	4bac      	ldr	r3, [pc, #688]	; (8003100 <inputseria+0x2bc>)
 8002e50:	22e0      	movs	r2, #224	; 0xe0
 8002e52:	809a      	strh	r2, [r3, #4]
	seria[1].interval = 880;
 8002e54:	4baa      	ldr	r3, [pc, #680]	; (8003100 <inputseria+0x2bc>)
 8002e56:	4aac      	ldr	r2, [pc, #688]	; (8003108 <inputseria+0x2c4>)
 8002e58:	609a      	str	r2, [r3, #8]
	seria[1].waittime = 224;
 8002e5a:	4ba9      	ldr	r3, [pc, #676]	; (8003100 <inputseria+0x2bc>)
 8002e5c:	22e0      	movs	r2, #224	; 0xe0
 8002e5e:	819a      	strh	r2, [r3, #12]
	seria[2].interval = 988;
 8002e60:	4ba7      	ldr	r3, [pc, #668]	; (8003100 <inputseria+0x2bc>)
 8002e62:	4aaa      	ldr	r2, [pc, #680]	; (800310c <inputseria+0x2c8>)
 8002e64:	611a      	str	r2, [r3, #16]
	seria[2].waittime = 462;
 8002e66:	4ba6      	ldr	r3, [pc, #664]	; (8003100 <inputseria+0x2bc>)
 8002e68:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002e6c:	829a      	strh	r2, [r3, #20]
	seria[3].interval = 698;
 8002e6e:	4ba4      	ldr	r3, [pc, #656]	; (8003100 <inputseria+0x2bc>)
 8002e70:	4aa4      	ldr	r2, [pc, #656]	; (8003104 <inputseria+0x2c0>)
 8002e72:	619a      	str	r2, [r3, #24]
	seria[3].waittime = 224;
 8002e74:	4ba2      	ldr	r3, [pc, #648]	; (8003100 <inputseria+0x2bc>)
 8002e76:	22e0      	movs	r2, #224	; 0xe0
 8002e78:	839a      	strh	r2, [r3, #28]
	seria[4].interval = 880;
 8002e7a:	4ba1      	ldr	r3, [pc, #644]	; (8003100 <inputseria+0x2bc>)
 8002e7c:	4aa2      	ldr	r2, [pc, #648]	; (8003108 <inputseria+0x2c4>)
 8002e7e:	621a      	str	r2, [r3, #32]
	seria[4].waittime = 224;
 8002e80:	4b9f      	ldr	r3, [pc, #636]	; (8003100 <inputseria+0x2bc>)
 8002e82:	22e0      	movs	r2, #224	; 0xe0
 8002e84:	849a      	strh	r2, [r3, #36]	; 0x24
	seria[5].interval = 988;
 8002e86:	4b9e      	ldr	r3, [pc, #632]	; (8003100 <inputseria+0x2bc>)
 8002e88:	4aa0      	ldr	r2, [pc, #640]	; (800310c <inputseria+0x2c8>)
 8002e8a:	629a      	str	r2, [r3, #40]	; 0x28
	seria[5].waittime = 462;
 8002e8c:	4b9c      	ldr	r3, [pc, #624]	; (8003100 <inputseria+0x2bc>)
 8002e8e:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002e92:	859a      	strh	r2, [r3, #44]	; 0x2c
	seria[6].interval = 698;
 8002e94:	4b9a      	ldr	r3, [pc, #616]	; (8003100 <inputseria+0x2bc>)
 8002e96:	4a9b      	ldr	r2, [pc, #620]	; (8003104 <inputseria+0x2c0>)
 8002e98:	631a      	str	r2, [r3, #48]	; 0x30
	seria[6].waittime = 224;
 8002e9a:	4b99      	ldr	r3, [pc, #612]	; (8003100 <inputseria+0x2bc>)
 8002e9c:	22e0      	movs	r2, #224	; 0xe0
 8002e9e:	869a      	strh	r2, [r3, #52]	; 0x34
	seria[7].interval = 880;
 8002ea0:	4b97      	ldr	r3, [pc, #604]	; (8003100 <inputseria+0x2bc>)
 8002ea2:	4a99      	ldr	r2, [pc, #612]	; (8003108 <inputseria+0x2c4>)
 8002ea4:	639a      	str	r2, [r3, #56]	; 0x38
	seria[7].waittime = 224;
 8002ea6:	4b96      	ldr	r3, [pc, #600]	; (8003100 <inputseria+0x2bc>)
 8002ea8:	22e0      	movs	r2, #224	; 0xe0
 8002eaa:	879a      	strh	r2, [r3, #60]	; 0x3c
	seria[8].interval = 988;
 8002eac:	4b94      	ldr	r3, [pc, #592]	; (8003100 <inputseria+0x2bc>)
 8002eae:	4a97      	ldr	r2, [pc, #604]	; (800310c <inputseria+0x2c8>)
 8002eb0:	641a      	str	r2, [r3, #64]	; 0x40
	seria[8].waittime = 224;
 8002eb2:	4b93      	ldr	r3, [pc, #588]	; (8003100 <inputseria+0x2bc>)
 8002eb4:	22e0      	movs	r2, #224	; 0xe0
 8002eb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	seria[9].interval = 1319;
 8002eba:	4b91      	ldr	r3, [pc, #580]	; (8003100 <inputseria+0x2bc>)
 8002ebc:	4a94      	ldr	r2, [pc, #592]	; (8003110 <inputseria+0x2cc>)
 8002ebe:	649a      	str	r2, [r3, #72]	; 0x48
	seria[9].waittime = 224;
 8002ec0:	4b8f      	ldr	r3, [pc, #572]	; (8003100 <inputseria+0x2bc>)
 8002ec2:	22e0      	movs	r2, #224	; 0xe0
 8002ec4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	seria[10].interval = 1175;
 8002ec8:	4b8d      	ldr	r3, [pc, #564]	; (8003100 <inputseria+0x2bc>)
 8002eca:	4a92      	ldr	r2, [pc, #584]	; (8003114 <inputseria+0x2d0>)
 8002ecc:	651a      	str	r2, [r3, #80]	; 0x50
	seria[10].waittime = 462;
 8002ece:	4b8c      	ldr	r3, [pc, #560]	; (8003100 <inputseria+0x2bc>)
 8002ed0:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002ed4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	seria[11].interval = 988;
 8002ed8:	4b89      	ldr	r3, [pc, #548]	; (8003100 <inputseria+0x2bc>)
 8002eda:	4a8c      	ldr	r2, [pc, #560]	; (800310c <inputseria+0x2c8>)
 8002edc:	659a      	str	r2, [r3, #88]	; 0x58
	seria[11].waittime = 224;
 8002ede:	4b88      	ldr	r3, [pc, #544]	; (8003100 <inputseria+0x2bc>)
 8002ee0:	22e0      	movs	r2, #224	; 0xe0
 8002ee2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	seria[12].interval = 1047;
 8002ee6:	4b86      	ldr	r3, [pc, #536]	; (8003100 <inputseria+0x2bc>)
 8002ee8:	4a8b      	ldr	r2, [pc, #556]	; (8003118 <inputseria+0x2d4>)
 8002eea:	661a      	str	r2, [r3, #96]	; 0x60
	seria[12].waittime = 224;
 8002eec:	4b84      	ldr	r3, [pc, #528]	; (8003100 <inputseria+0x2bc>)
 8002eee:	22e0      	movs	r2, #224	; 0xe0
 8002ef0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	seria[13].interval = 988;
 8002ef4:	4b82      	ldr	r3, [pc, #520]	; (8003100 <inputseria+0x2bc>)
 8002ef6:	4a85      	ldr	r2, [pc, #532]	; (800310c <inputseria+0x2c8>)
 8002ef8:	669a      	str	r2, [r3, #104]	; 0x68
	seria[13].waittime = 224;
 8002efa:	4b81      	ldr	r3, [pc, #516]	; (8003100 <inputseria+0x2bc>)
 8002efc:	22e0      	movs	r2, #224	; 0xe0
 8002efe:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	seria[14].interval = 784;
 8002f02:	4b7f      	ldr	r3, [pc, #508]	; (8003100 <inputseria+0x2bc>)
 8002f04:	4a85      	ldr	r2, [pc, #532]	; (800311c <inputseria+0x2d8>)
 8002f06:	671a      	str	r2, [r3, #112]	; 0x70
	seria[14].waittime = 224;
 8002f08:	4b7d      	ldr	r3, [pc, #500]	; (8003100 <inputseria+0x2bc>)
 8002f0a:	22e0      	movs	r2, #224	; 0xe0
 8002f0c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	seria[15].interval = 659;
 8002f10:	4b7b      	ldr	r3, [pc, #492]	; (8003100 <inputseria+0x2bc>)
 8002f12:	4a83      	ldr	r2, [pc, #524]	; (8003120 <inputseria+0x2dc>)
 8002f14:	679a      	str	r2, [r3, #120]	; 0x78
	seria[15].waittime = 1169;
 8002f16:	4b7a      	ldr	r3, [pc, #488]	; (8003100 <inputseria+0x2bc>)
 8002f18:	f240 4291 	movw	r2, #1169	; 0x491
 8002f1c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	seria[16].interval = 587;
 8002f20:	4b77      	ldr	r3, [pc, #476]	; (8003100 <inputseria+0x2bc>)
 8002f22:	4a80      	ldr	r2, [pc, #512]	; (8003124 <inputseria+0x2e0>)
 8002f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	seria[16].waittime = 224;
 8002f28:	4b75      	ldr	r3, [pc, #468]	; (8003100 <inputseria+0x2bc>)
 8002f2a:	22e0      	movs	r2, #224	; 0xe0
 8002f2c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	seria[17].interval = 659;
 8002f30:	4b73      	ldr	r3, [pc, #460]	; (8003100 <inputseria+0x2bc>)
 8002f32:	4a7b      	ldr	r2, [pc, #492]	; (8003120 <inputseria+0x2dc>)
 8002f34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	seria[17].waittime = 224;
 8002f38:	4b71      	ldr	r3, [pc, #452]	; (8003100 <inputseria+0x2bc>)
 8002f3a:	22e0      	movs	r2, #224	; 0xe0
 8002f3c:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	seria[18].interval = 784;
 8002f40:	4b6f      	ldr	r3, [pc, #444]	; (8003100 <inputseria+0x2bc>)
 8002f42:	4a76      	ldr	r2, [pc, #472]	; (800311c <inputseria+0x2d8>)
 8002f44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	seria[18].waittime = 224;
 8002f48:	4b6d      	ldr	r3, [pc, #436]	; (8003100 <inputseria+0x2bc>)
 8002f4a:	22e0      	movs	r2, #224	; 0xe0
 8002f4c:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	seria[19].interval = 659;
 8002f50:	4b6b      	ldr	r3, [pc, #428]	; (8003100 <inputseria+0x2bc>)
 8002f52:	4a73      	ldr	r2, [pc, #460]	; (8003120 <inputseria+0x2dc>)
 8002f54:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	seria[19].waittime = 1400;
 8002f58:	4b69      	ldr	r3, [pc, #420]	; (8003100 <inputseria+0x2bc>)
 8002f5a:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8002f5e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	seria[20].interval = 698;
 8002f62:	4b67      	ldr	r3, [pc, #412]	; (8003100 <inputseria+0x2bc>)
 8002f64:	4a67      	ldr	r2, [pc, #412]	; (8003104 <inputseria+0x2c0>)
 8002f66:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	seria[20].waittime = 224;
 8002f6a:	4b65      	ldr	r3, [pc, #404]	; (8003100 <inputseria+0x2bc>)
 8002f6c:	22e0      	movs	r2, #224	; 0xe0
 8002f6e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	seria[21].interval = 880;
 8002f72:	4b63      	ldr	r3, [pc, #396]	; (8003100 <inputseria+0x2bc>)
 8002f74:	4a64      	ldr	r2, [pc, #400]	; (8003108 <inputseria+0x2c4>)
 8002f76:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	seria[21].waittime = 224;
 8002f7a:	4b61      	ldr	r3, [pc, #388]	; (8003100 <inputseria+0x2bc>)
 8002f7c:	22e0      	movs	r2, #224	; 0xe0
 8002f7e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	seria[22].interval = 988;
 8002f82:	4b5f      	ldr	r3, [pc, #380]	; (8003100 <inputseria+0x2bc>)
 8002f84:	4a61      	ldr	r2, [pc, #388]	; (800310c <inputseria+0x2c8>)
 8002f86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	seria[22].waittime = 462;
 8002f8a:	4b5d      	ldr	r3, [pc, #372]	; (8003100 <inputseria+0x2bc>)
 8002f8c:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002f90:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	seria[23].interval = 698;
 8002f94:	4b5a      	ldr	r3, [pc, #360]	; (8003100 <inputseria+0x2bc>)
 8002f96:	4a5b      	ldr	r2, [pc, #364]	; (8003104 <inputseria+0x2c0>)
 8002f98:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	seria[23].waittime = 224;
 8002f9c:	4b58      	ldr	r3, [pc, #352]	; (8003100 <inputseria+0x2bc>)
 8002f9e:	22e0      	movs	r2, #224	; 0xe0
 8002fa0:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
	seria[24].interval = 880;
 8002fa4:	4b56      	ldr	r3, [pc, #344]	; (8003100 <inputseria+0x2bc>)
 8002fa6:	4a58      	ldr	r2, [pc, #352]	; (8003108 <inputseria+0x2c4>)
 8002fa8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	seria[24].waittime = 224;
 8002fac:	4b54      	ldr	r3, [pc, #336]	; (8003100 <inputseria+0x2bc>)
 8002fae:	22e0      	movs	r2, #224	; 0xe0
 8002fb0:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	seria[25].interval = 988;
 8002fb4:	4b52      	ldr	r3, [pc, #328]	; (8003100 <inputseria+0x2bc>)
 8002fb6:	4a55      	ldr	r2, [pc, #340]	; (800310c <inputseria+0x2c8>)
 8002fb8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	seria[25].waittime = 462;
 8002fbc:	4b50      	ldr	r3, [pc, #320]	; (8003100 <inputseria+0x2bc>)
 8002fbe:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002fc2:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
	seria[26].interval = 698;
 8002fc6:	4b4e      	ldr	r3, [pc, #312]	; (8003100 <inputseria+0x2bc>)
 8002fc8:	4a4e      	ldr	r2, [pc, #312]	; (8003104 <inputseria+0x2c0>)
 8002fca:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	seria[26].waittime = 224;
 8002fce:	4b4c      	ldr	r3, [pc, #304]	; (8003100 <inputseria+0x2bc>)
 8002fd0:	22e0      	movs	r2, #224	; 0xe0
 8002fd2:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
	seria[27].interval = 880;
 8002fd6:	4b4a      	ldr	r3, [pc, #296]	; (8003100 <inputseria+0x2bc>)
 8002fd8:	4a4b      	ldr	r2, [pc, #300]	; (8003108 <inputseria+0x2c4>)
 8002fda:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	seria[27].waittime = 224;
 8002fde:	4b48      	ldr	r3, [pc, #288]	; (8003100 <inputseria+0x2bc>)
 8002fe0:	22e0      	movs	r2, #224	; 0xe0
 8002fe2:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	seria[28].interval = 988;
 8002fe6:	4b46      	ldr	r3, [pc, #280]	; (8003100 <inputseria+0x2bc>)
 8002fe8:	4a48      	ldr	r2, [pc, #288]	; (800310c <inputseria+0x2c8>)
 8002fea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	seria[28].waittime = 224;
 8002fee:	4b44      	ldr	r3, [pc, #272]	; (8003100 <inputseria+0x2bc>)
 8002ff0:	22e0      	movs	r2, #224	; 0xe0
 8002ff2:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	seria[29].interval = 1319;
 8002ff6:	4b42      	ldr	r3, [pc, #264]	; (8003100 <inputseria+0x2bc>)
 8002ff8:	4a45      	ldr	r2, [pc, #276]	; (8003110 <inputseria+0x2cc>)
 8002ffa:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	seria[29].waittime = 224;
 8002ffe:	4b40      	ldr	r3, [pc, #256]	; (8003100 <inputseria+0x2bc>)
 8003000:	22e0      	movs	r2, #224	; 0xe0
 8003002:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
	seria[30].interval = 1175;
 8003006:	4b3e      	ldr	r3, [pc, #248]	; (8003100 <inputseria+0x2bc>)
 8003008:	4a42      	ldr	r2, [pc, #264]	; (8003114 <inputseria+0x2d0>)
 800300a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	seria[30].waittime = 462;
 800300e:	4b3c      	ldr	r3, [pc, #240]	; (8003100 <inputseria+0x2bc>)
 8003010:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003014:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
	seria[31].interval = 988;
 8003018:	4b39      	ldr	r3, [pc, #228]	; (8003100 <inputseria+0x2bc>)
 800301a:	4a3c      	ldr	r2, [pc, #240]	; (800310c <inputseria+0x2c8>)
 800301c:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	seria[31].waittime = 224;
 8003020:	4b37      	ldr	r3, [pc, #220]	; (8003100 <inputseria+0x2bc>)
 8003022:	22e0      	movs	r2, #224	; 0xe0
 8003024:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
	seria[32].interval = 1047;
 8003028:	4b35      	ldr	r3, [pc, #212]	; (8003100 <inputseria+0x2bc>)
 800302a:	4a3b      	ldr	r2, [pc, #236]	; (8003118 <inputseria+0x2d4>)
 800302c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	seria[32].waittime = 224;
 8003030:	4b33      	ldr	r3, [pc, #204]	; (8003100 <inputseria+0x2bc>)
 8003032:	22e0      	movs	r2, #224	; 0xe0
 8003034:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	seria[33].interval = 1319;
 8003038:	4b31      	ldr	r3, [pc, #196]	; (8003100 <inputseria+0x2bc>)
 800303a:	4a35      	ldr	r2, [pc, #212]	; (8003110 <inputseria+0x2cc>)
 800303c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	seria[33].waittime = 224;
 8003040:	4b2f      	ldr	r3, [pc, #188]	; (8003100 <inputseria+0x2bc>)
 8003042:	22e0      	movs	r2, #224	; 0xe0
 8003044:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	seria[34].interval = 988;
 8003048:	4b2d      	ldr	r3, [pc, #180]	; (8003100 <inputseria+0x2bc>)
 800304a:	4a30      	ldr	r2, [pc, #192]	; (800310c <inputseria+0x2c8>)
 800304c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	seria[34].waittime = 224;
 8003050:	4b2b      	ldr	r3, [pc, #172]	; (8003100 <inputseria+0x2bc>)
 8003052:	22e0      	movs	r2, #224	; 0xe0
 8003054:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
	seria[35].interval = 784;
 8003058:	4b29      	ldr	r3, [pc, #164]	; (8003100 <inputseria+0x2bc>)
 800305a:	4a30      	ldr	r2, [pc, #192]	; (800311c <inputseria+0x2d8>)
 800305c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	seria[35].waittime = 1169;
 8003060:	4b27      	ldr	r3, [pc, #156]	; (8003100 <inputseria+0x2bc>)
 8003062:	f240 4291 	movw	r2, #1169	; 0x491
 8003066:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
	seria[36].interval = 988;
 800306a:	4b25      	ldr	r3, [pc, #148]	; (8003100 <inputseria+0x2bc>)
 800306c:	4a27      	ldr	r2, [pc, #156]	; (800310c <inputseria+0x2c8>)
 800306e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	seria[36].waittime = 224;
 8003072:	4b23      	ldr	r3, [pc, #140]	; (8003100 <inputseria+0x2bc>)
 8003074:	22e0      	movs	r2, #224	; 0xe0
 8003076:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
	seria[37].interval = 784;
 800307a:	4b21      	ldr	r3, [pc, #132]	; (8003100 <inputseria+0x2bc>)
 800307c:	4a27      	ldr	r2, [pc, #156]	; (800311c <inputseria+0x2d8>)
 800307e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	seria[37].waittime = 224;
 8003082:	4b1f      	ldr	r3, [pc, #124]	; (8003100 <inputseria+0x2bc>)
 8003084:	22e0      	movs	r2, #224	; 0xe0
 8003086:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
	seria[38].interval = 587;
 800308a:	4b1d      	ldr	r3, [pc, #116]	; (8003100 <inputseria+0x2bc>)
 800308c:	4a25      	ldr	r2, [pc, #148]	; (8003124 <inputseria+0x2e0>)
 800308e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	seria[38].waittime = 224;
 8003092:	4b1b      	ldr	r3, [pc, #108]	; (8003100 <inputseria+0x2bc>)
 8003094:	22e0      	movs	r2, #224	; 0xe0
 8003096:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	seria[39].interval = 659;
 800309a:	4b19      	ldr	r3, [pc, #100]	; (8003100 <inputseria+0x2bc>)
 800309c:	4a20      	ldr	r2, [pc, #128]	; (8003120 <inputseria+0x2dc>)
 800309e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	seria[39].waittime = 1400;
 80030a2:	4b17      	ldr	r3, [pc, #92]	; (8003100 <inputseria+0x2bc>)
 80030a4:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80030a8:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
	seria[40].interval = 294;
 80030ac:	4b14      	ldr	r3, [pc, #80]	; (8003100 <inputseria+0x2bc>)
 80030ae:	4a1e      	ldr	r2, [pc, #120]	; (8003128 <inputseria+0x2e4>)
 80030b0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	seria[40].waittime = 224;
 80030b4:	4b12      	ldr	r3, [pc, #72]	; (8003100 <inputseria+0x2bc>)
 80030b6:	22e0      	movs	r2, #224	; 0xe0
 80030b8:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
	seria[41].interval = 330;
 80030bc:	4b10      	ldr	r3, [pc, #64]	; (8003100 <inputseria+0x2bc>)
 80030be:	4a1b      	ldr	r2, [pc, #108]	; (800312c <inputseria+0x2e8>)
 80030c0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	seria[41].waittime = 224;
 80030c4:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <inputseria+0x2bc>)
 80030c6:	22e0      	movs	r2, #224	; 0xe0
 80030c8:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
	seria[42].interval = 349;
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <inputseria+0x2bc>)
 80030ce:	4a18      	ldr	r2, [pc, #96]	; (8003130 <inputseria+0x2ec>)
 80030d0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	seria[42].waittime = 462;
 80030d4:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <inputseria+0x2bc>)
 80030d6:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80030da:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	seria[43].interval = 392;
 80030de:	4b08      	ldr	r3, [pc, #32]	; (8003100 <inputseria+0x2bc>)
 80030e0:	4a14      	ldr	r2, [pc, #80]	; (8003134 <inputseria+0x2f0>)
 80030e2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	seria[43].waittime = 224;
 80030e6:	4b06      	ldr	r3, [pc, #24]	; (8003100 <inputseria+0x2bc>)
 80030e8:	22e0      	movs	r2, #224	; 0xe0
 80030ea:	f8a3 215c 	strh.w	r2, [r3, #348]	; 0x15c
	seria[44].interval = 440;
 80030ee:	4b04      	ldr	r3, [pc, #16]	; (8003100 <inputseria+0x2bc>)
 80030f0:	4a11      	ldr	r2, [pc, #68]	; (8003138 <inputseria+0x2f4>)
 80030f2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	seria[44].waittime = 224;
 80030f6:	4b02      	ldr	r3, [pc, #8]	; (8003100 <inputseria+0x2bc>)
 80030f8:	22e0      	movs	r2, #224	; 0xe0
 80030fa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 80030fe:	e01d      	b.n	800313c <inputseria+0x2f8>
 8003100:	200003c4 	.word	0x200003c4
 8003104:	442e8000 	.word	0x442e8000
 8003108:	445c0000 	.word	0x445c0000
 800310c:	44770000 	.word	0x44770000
 8003110:	44a4e000 	.word	0x44a4e000
 8003114:	4492e000 	.word	0x4492e000
 8003118:	4482e000 	.word	0x4482e000
 800311c:	44440000 	.word	0x44440000
 8003120:	4424c000 	.word	0x4424c000
 8003124:	4412c000 	.word	0x4412c000
 8003128:	43930000 	.word	0x43930000
 800312c:	43a50000 	.word	0x43a50000
 8003130:	43ae8000 	.word	0x43ae8000
 8003134:	43c40000 	.word	0x43c40000
 8003138:	43dc0000 	.word	0x43dc0000
	seria[45].interval = 494;
 800313c:	4bb9      	ldr	r3, [pc, #740]	; (8003424 <inputseria+0x5e0>)
 800313e:	4aba      	ldr	r2, [pc, #744]	; (8003428 <inputseria+0x5e4>)
 8003140:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	seria[45].waittime = 462;
 8003144:	4bb7      	ldr	r3, [pc, #732]	; (8003424 <inputseria+0x5e0>)
 8003146:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800314a:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
	seria[46].interval = 523;
 800314e:	4bb5      	ldr	r3, [pc, #724]	; (8003424 <inputseria+0x5e0>)
 8003150:	4ab6      	ldr	r2, [pc, #728]	; (800342c <inputseria+0x5e8>)
 8003152:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	seria[46].waittime = 224;
 8003156:	4bb3      	ldr	r3, [pc, #716]	; (8003424 <inputseria+0x5e0>)
 8003158:	22e0      	movs	r2, #224	; 0xe0
 800315a:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	seria[47].interval = 494;
 800315e:	4bb1      	ldr	r3, [pc, #708]	; (8003424 <inputseria+0x5e0>)
 8003160:	4ab1      	ldr	r2, [pc, #708]	; (8003428 <inputseria+0x5e4>)
 8003162:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	seria[47].waittime = 224;
 8003166:	4baf      	ldr	r3, [pc, #700]	; (8003424 <inputseria+0x5e0>)
 8003168:	22e0      	movs	r2, #224	; 0xe0
 800316a:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	seria[48].interval = 330;
 800316e:	4bad      	ldr	r3, [pc, #692]	; (8003424 <inputseria+0x5e0>)
 8003170:	4aaf      	ldr	r2, [pc, #700]	; (8003430 <inputseria+0x5ec>)
 8003172:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	seria[48].waittime = 1400;
 8003176:	4bab      	ldr	r3, [pc, #684]	; (8003424 <inputseria+0x5e0>)
 8003178:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800317c:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184
	seria[49].interval = 698;
 8003180:	4ba8      	ldr	r3, [pc, #672]	; (8003424 <inputseria+0x5e0>)
 8003182:	4aac      	ldr	r2, [pc, #688]	; (8003434 <inputseria+0x5f0>)
 8003184:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	seria[49].waittime = 224;
 8003188:	4ba6      	ldr	r3, [pc, #664]	; (8003424 <inputseria+0x5e0>)
 800318a:	22e0      	movs	r2, #224	; 0xe0
 800318c:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
	seria[50].interval = 784;
 8003190:	4ba4      	ldr	r3, [pc, #656]	; (8003424 <inputseria+0x5e0>)
 8003192:	4aa9      	ldr	r2, [pc, #676]	; (8003438 <inputseria+0x5f4>)
 8003194:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	seria[50].waittime = 224;
 8003198:	4ba2      	ldr	r3, [pc, #648]	; (8003424 <inputseria+0x5e0>)
 800319a:	22e0      	movs	r2, #224	; 0xe0
 800319c:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
	seria[51].interval = 880;
 80031a0:	4ba0      	ldr	r3, [pc, #640]	; (8003424 <inputseria+0x5e0>)
 80031a2:	4aa6      	ldr	r2, [pc, #664]	; (800343c <inputseria+0x5f8>)
 80031a4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	seria[51].waittime = 462;
 80031a8:	4b9e      	ldr	r3, [pc, #632]	; (8003424 <inputseria+0x5e0>)
 80031aa:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80031ae:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
	seria[52].interval = 988;
 80031b2:	4b9c      	ldr	r3, [pc, #624]	; (8003424 <inputseria+0x5e0>)
 80031b4:	4aa2      	ldr	r2, [pc, #648]	; (8003440 <inputseria+0x5fc>)
 80031b6:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	seria[52].waittime = 224;
 80031ba:	4b9a      	ldr	r3, [pc, #616]	; (8003424 <inputseria+0x5e0>)
 80031bc:	22e0      	movs	r2, #224	; 0xe0
 80031be:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
	seria[53].interval = 1047;
 80031c2:	4b98      	ldr	r3, [pc, #608]	; (8003424 <inputseria+0x5e0>)
 80031c4:	4a9f      	ldr	r2, [pc, #636]	; (8003444 <inputseria+0x600>)
 80031c6:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	seria[53].waittime = 224;
 80031ca:	4b96      	ldr	r3, [pc, #600]	; (8003424 <inputseria+0x5e0>)
 80031cc:	22e0      	movs	r2, #224	; 0xe0
 80031ce:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
	seria[54].interval = 1175;
 80031d2:	4b94      	ldr	r3, [pc, #592]	; (8003424 <inputseria+0x5e0>)
 80031d4:	4a9c      	ldr	r2, [pc, #624]	; (8003448 <inputseria+0x604>)
 80031d6:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	seria[54].waittime = 462;
 80031da:	4b92      	ldr	r3, [pc, #584]	; (8003424 <inputseria+0x5e0>)
 80031dc:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80031e0:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
	seria[55].interval = 1319;
 80031e4:	4b8f      	ldr	r3, [pc, #572]	; (8003424 <inputseria+0x5e0>)
 80031e6:	4a99      	ldr	r2, [pc, #612]	; (800344c <inputseria+0x608>)
 80031e8:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	seria[55].waittime = 224;
 80031ec:	4b8d      	ldr	r3, [pc, #564]	; (8003424 <inputseria+0x5e0>)
 80031ee:	22e0      	movs	r2, #224	; 0xe0
 80031f0:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
	seria[56].interval = 1397;
 80031f4:	4b8b      	ldr	r3, [pc, #556]	; (8003424 <inputseria+0x5e0>)
 80031f6:	4a96      	ldr	r2, [pc, #600]	; (8003450 <inputseria+0x60c>)
 80031f8:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
	seria[56].waittime = 224;
 80031fc:	4b89      	ldr	r3, [pc, #548]	; (8003424 <inputseria+0x5e0>)
 80031fe:	22e0      	movs	r2, #224	; 0xe0
 8003200:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
	seria[57].interval = 1568;
 8003204:	4b87      	ldr	r3, [pc, #540]	; (8003424 <inputseria+0x5e0>)
 8003206:	4a93      	ldr	r2, [pc, #588]	; (8003454 <inputseria+0x610>)
 8003208:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
	seria[57].waittime = 1400;
 800320c:	4b85      	ldr	r3, [pc, #532]	; (8003424 <inputseria+0x5e0>)
 800320e:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003212:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
	seria[58].interval = 294;
 8003216:	4b83      	ldr	r3, [pc, #524]	; (8003424 <inputseria+0x5e0>)
 8003218:	4a8f      	ldr	r2, [pc, #572]	; (8003458 <inputseria+0x614>)
 800321a:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	seria[58].waittime = 224;
 800321e:	4b81      	ldr	r3, [pc, #516]	; (8003424 <inputseria+0x5e0>)
 8003220:	22e0      	movs	r2, #224	; 0xe0
 8003222:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
	seria[59].interval = 330;
 8003226:	4b7f      	ldr	r3, [pc, #508]	; (8003424 <inputseria+0x5e0>)
 8003228:	4a81      	ldr	r2, [pc, #516]	; (8003430 <inputseria+0x5ec>)
 800322a:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	seria[59].waittime = 224;
 800322e:	4b7d      	ldr	r3, [pc, #500]	; (8003424 <inputseria+0x5e0>)
 8003230:	22e0      	movs	r2, #224	; 0xe0
 8003232:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
	seria[60].interval = 349;
 8003236:	4b7b      	ldr	r3, [pc, #492]	; (8003424 <inputseria+0x5e0>)
 8003238:	4a88      	ldr	r2, [pc, #544]	; (800345c <inputseria+0x618>)
 800323a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	seria[60].waittime = 462;
 800323e:	4b79      	ldr	r3, [pc, #484]	; (8003424 <inputseria+0x5e0>)
 8003240:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003244:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
	seria[61].interval = 392;
 8003248:	4b76      	ldr	r3, [pc, #472]	; (8003424 <inputseria+0x5e0>)
 800324a:	4a85      	ldr	r2, [pc, #532]	; (8003460 <inputseria+0x61c>)
 800324c:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	seria[61].waittime = 224;
 8003250:	4b74      	ldr	r3, [pc, #464]	; (8003424 <inputseria+0x5e0>)
 8003252:	22e0      	movs	r2, #224	; 0xe0
 8003254:	f8a3 21ec 	strh.w	r2, [r3, #492]	; 0x1ec
	seria[62].interval = 440;
 8003258:	4b72      	ldr	r3, [pc, #456]	; (8003424 <inputseria+0x5e0>)
 800325a:	4a82      	ldr	r2, [pc, #520]	; (8003464 <inputseria+0x620>)
 800325c:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	seria[62].waittime = 224;
 8003260:	4b70      	ldr	r3, [pc, #448]	; (8003424 <inputseria+0x5e0>)
 8003262:	22e0      	movs	r2, #224	; 0xe0
 8003264:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
	seria[63].interval = 494;
 8003268:	4b6e      	ldr	r3, [pc, #440]	; (8003424 <inputseria+0x5e0>)
 800326a:	4a6f      	ldr	r2, [pc, #444]	; (8003428 <inputseria+0x5e4>)
 800326c:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	seria[63].waittime = 462;
 8003270:	4b6c      	ldr	r3, [pc, #432]	; (8003424 <inputseria+0x5e0>)
 8003272:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003276:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	seria[64].interval = 523;
 800327a:	4b6a      	ldr	r3, [pc, #424]	; (8003424 <inputseria+0x5e0>)
 800327c:	4a6b      	ldr	r2, [pc, #428]	; (800342c <inputseria+0x5e8>)
 800327e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	seria[64].waittime = 224;
 8003282:	4b68      	ldr	r3, [pc, #416]	; (8003424 <inputseria+0x5e0>)
 8003284:	22e0      	movs	r2, #224	; 0xe0
 8003286:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	seria[65].interval = 494;
 800328a:	4b66      	ldr	r3, [pc, #408]	; (8003424 <inputseria+0x5e0>)
 800328c:	4a66      	ldr	r2, [pc, #408]	; (8003428 <inputseria+0x5e4>)
 800328e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	seria[65].waittime = 224;
 8003292:	4b64      	ldr	r3, [pc, #400]	; (8003424 <inputseria+0x5e0>)
 8003294:	22e0      	movs	r2, #224	; 0xe0
 8003296:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
	seria[66].interval = 330;
 800329a:	4b62      	ldr	r3, [pc, #392]	; (8003424 <inputseria+0x5e0>)
 800329c:	4a64      	ldr	r2, [pc, #400]	; (8003430 <inputseria+0x5ec>)
 800329e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	seria[66].waittime = 1400;
 80032a2:	4b60      	ldr	r3, [pc, #384]	; (8003424 <inputseria+0x5e0>)
 80032a4:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80032a8:	f8a3 2214 	strh.w	r2, [r3, #532]	; 0x214
	seria[67].interval = 698;
 80032ac:	4b5d      	ldr	r3, [pc, #372]	; (8003424 <inputseria+0x5e0>)
 80032ae:	4a61      	ldr	r2, [pc, #388]	; (8003434 <inputseria+0x5f0>)
 80032b0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	seria[67].waittime = 224;
 80032b4:	4b5b      	ldr	r3, [pc, #364]	; (8003424 <inputseria+0x5e0>)
 80032b6:	22e0      	movs	r2, #224	; 0xe0
 80032b8:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
	seria[68].interval = 659;
 80032bc:	4b59      	ldr	r3, [pc, #356]	; (8003424 <inputseria+0x5e0>)
 80032be:	4a6a      	ldr	r2, [pc, #424]	; (8003468 <inputseria+0x624>)
 80032c0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	seria[68].waittime = 105;
 80032c4:	4b57      	ldr	r3, [pc, #348]	; (8003424 <inputseria+0x5e0>)
 80032c6:	2269      	movs	r2, #105	; 0x69
 80032c8:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
	seria[69].interval = 880;
 80032cc:	4b55      	ldr	r3, [pc, #340]	; (8003424 <inputseria+0x5e0>)
 80032ce:	4a5b      	ldr	r2, [pc, #364]	; (800343c <inputseria+0x5f8>)
 80032d0:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	seria[69].waittime = 224;
 80032d4:	4b53      	ldr	r3, [pc, #332]	; (8003424 <inputseria+0x5e0>)
 80032d6:	22e0      	movs	r2, #224	; 0xe0
 80032d8:	f8a3 222c 	strh.w	r2, [r3, #556]	; 0x22c
	seria[70].interval = 784;
 80032dc:	4b51      	ldr	r3, [pc, #324]	; (8003424 <inputseria+0x5e0>)
 80032de:	4a56      	ldr	r2, [pc, #344]	; (8003438 <inputseria+0x5f4>)
 80032e0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	seria[70].waittime = 105;
 80032e4:	4b4f      	ldr	r3, [pc, #316]	; (8003424 <inputseria+0x5e0>)
 80032e6:	2269      	movs	r2, #105	; 0x69
 80032e8:	f8a3 2234 	strh.w	r2, [r3, #564]	; 0x234
	seria[71].interval = 988;
 80032ec:	4b4d      	ldr	r3, [pc, #308]	; (8003424 <inputseria+0x5e0>)
 80032ee:	4a54      	ldr	r2, [pc, #336]	; (8003440 <inputseria+0x5fc>)
 80032f0:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	seria[71].waittime = 224;
 80032f4:	4b4b      	ldr	r3, [pc, #300]	; (8003424 <inputseria+0x5e0>)
 80032f6:	22e0      	movs	r2, #224	; 0xe0
 80032f8:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
	seria[72].interval = 880;
 80032fc:	4b49      	ldr	r3, [pc, #292]	; (8003424 <inputseria+0x5e0>)
 80032fe:	4a4f      	ldr	r2, [pc, #316]	; (800343c <inputseria+0x5f8>)
 8003300:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	seria[72].waittime = 105;
 8003304:	4b47      	ldr	r3, [pc, #284]	; (8003424 <inputseria+0x5e0>)
 8003306:	2269      	movs	r2, #105	; 0x69
 8003308:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
	seria[73].interval = 1047;
 800330c:	4b45      	ldr	r3, [pc, #276]	; (8003424 <inputseria+0x5e0>)
 800330e:	4a4d      	ldr	r2, [pc, #308]	; (8003444 <inputseria+0x600>)
 8003310:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	seria[73].waittime = 224;
 8003314:	4b43      	ldr	r3, [pc, #268]	; (8003424 <inputseria+0x5e0>)
 8003316:	22e0      	movs	r2, #224	; 0xe0
 8003318:	f8a3 224c 	strh.w	r2, [r3, #588]	; 0x24c
	seria[74].interval = 988;
 800331c:	4b41      	ldr	r3, [pc, #260]	; (8003424 <inputseria+0x5e0>)
 800331e:	4a48      	ldr	r2, [pc, #288]	; (8003440 <inputseria+0x5fc>)
 8003320:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	seria[74].waittime = 105;
 8003324:	4b3f      	ldr	r3, [pc, #252]	; (8003424 <inputseria+0x5e0>)
 8003326:	2269      	movs	r2, #105	; 0x69
 8003328:	f8a3 2254 	strh.w	r2, [r3, #596]	; 0x254
	seria[75].interval = 1175;
 800332c:	4b3d      	ldr	r3, [pc, #244]	; (8003424 <inputseria+0x5e0>)
 800332e:	4a46      	ldr	r2, [pc, #280]	; (8003448 <inputseria+0x604>)
 8003330:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	seria[75].waittime = 224;
 8003334:	4b3b      	ldr	r3, [pc, #236]	; (8003424 <inputseria+0x5e0>)
 8003336:	22e0      	movs	r2, #224	; 0xe0
 8003338:	f8a3 225c 	strh.w	r2, [r3, #604]	; 0x25c
	seria[76].interval = 1047;
 800333c:	4b39      	ldr	r3, [pc, #228]	; (8003424 <inputseria+0x5e0>)
 800333e:	4a41      	ldr	r2, [pc, #260]	; (8003444 <inputseria+0x600>)
 8003340:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	seria[76].waittime = 105;
 8003344:	4b37      	ldr	r3, [pc, #220]	; (8003424 <inputseria+0x5e0>)
 8003346:	2269      	movs	r2, #105	; 0x69
 8003348:	f8a3 2264 	strh.w	r2, [r3, #612]	; 0x264
	seria[77].interval = 1319;
 800334c:	4b35      	ldr	r3, [pc, #212]	; (8003424 <inputseria+0x5e0>)
 800334e:	4a3f      	ldr	r2, [pc, #252]	; (800344c <inputseria+0x608>)
 8003350:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	seria[77].waittime = 224;
 8003354:	4b33      	ldr	r3, [pc, #204]	; (8003424 <inputseria+0x5e0>)
 8003356:	22e0      	movs	r2, #224	; 0xe0
 8003358:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
	seria[78].interval = 1175;
 800335c:	4b31      	ldr	r3, [pc, #196]	; (8003424 <inputseria+0x5e0>)
 800335e:	4a3a      	ldr	r2, [pc, #232]	; (8003448 <inputseria+0x604>)
 8003360:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	seria[78].waittime = 105;
 8003364:	4b2f      	ldr	r3, [pc, #188]	; (8003424 <inputseria+0x5e0>)
 8003366:	2269      	movs	r2, #105	; 0x69
 8003368:	f8a3 2274 	strh.w	r2, [r3, #628]	; 0x274
	seria[79].interval = 1397;
 800336c:	4b2d      	ldr	r3, [pc, #180]	; (8003424 <inputseria+0x5e0>)
 800336e:	4a38      	ldr	r2, [pc, #224]	; (8003450 <inputseria+0x60c>)
 8003370:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	seria[79].waittime = 224;
 8003374:	4b2b      	ldr	r3, [pc, #172]	; (8003424 <inputseria+0x5e0>)
 8003376:	22e0      	movs	r2, #224	; 0xe0
 8003378:	f8a3 227c 	strh.w	r2, [r3, #636]	; 0x27c
	seria[80].interval = 1319;
 800337c:	4b29      	ldr	r3, [pc, #164]	; (8003424 <inputseria+0x5e0>)
 800337e:	4a33      	ldr	r2, [pc, #204]	; (800344c <inputseria+0x608>)
 8003380:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	seria[80].waittime = 105;
 8003384:	4b27      	ldr	r3, [pc, #156]	; (8003424 <inputseria+0x5e0>)
 8003386:	2269      	movs	r2, #105	; 0x69
 8003388:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	seria[81].interval = 988;
 800338c:	4b25      	ldr	r3, [pc, #148]	; (8003424 <inputseria+0x5e0>)
 800338e:	4a2c      	ldr	r2, [pc, #176]	; (8003440 <inputseria+0x5fc>)
 8003390:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	seria[81].waittime = 105;
 8003394:	4b23      	ldr	r3, [pc, #140]	; (8003424 <inputseria+0x5e0>)
 8003396:	2269      	movs	r2, #105	; 0x69
 8003398:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
	seria[82].interval = 1047;
 800339c:	4b21      	ldr	r3, [pc, #132]	; (8003424 <inputseria+0x5e0>)
 800339e:	4a29      	ldr	r2, [pc, #164]	; (8003444 <inputseria+0x600>)
 80033a0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	seria[82].waittime = 105;
 80033a4:	4b1f      	ldr	r3, [pc, #124]	; (8003424 <inputseria+0x5e0>)
 80033a6:	2269      	movs	r2, #105	; 0x69
 80033a8:	f8a3 2294 	strh.w	r2, [r3, #660]	; 0x294
	seria[83].interval = 880;
 80033ac:	4b1d      	ldr	r3, [pc, #116]	; (8003424 <inputseria+0x5e0>)
 80033ae:	4a23      	ldr	r2, [pc, #140]	; (800343c <inputseria+0x5f8>)
 80033b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	seria[83].waittime = 105;
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <inputseria+0x5e0>)
 80033b6:	2269      	movs	r2, #105	; 0x69
 80033b8:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
	seria[84].interval = 988;
 80033bc:	4b19      	ldr	r3, [pc, #100]	; (8003424 <inputseria+0x5e0>)
 80033be:	4a20      	ldr	r2, [pc, #128]	; (8003440 <inputseria+0x5fc>)
 80033c0:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	seria[84].waittime = 2576;
 80033c4:	4b17      	ldr	r3, [pc, #92]	; (8003424 <inputseria+0x5e0>)
 80033c6:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 80033ca:	f8a3 22a4 	strh.w	r2, [r3, #676]	; 0x2a4
	seria[85].interval = 698;
 80033ce:	4b15      	ldr	r3, [pc, #84]	; (8003424 <inputseria+0x5e0>)
 80033d0:	4a18      	ldr	r2, [pc, #96]	; (8003434 <inputseria+0x5f0>)
 80033d2:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	seria[85].waittime = 224;
 80033d6:	4b13      	ldr	r3, [pc, #76]	; (8003424 <inputseria+0x5e0>)
 80033d8:	22e0      	movs	r2, #224	; 0xe0
 80033da:	f8a3 22ac 	strh.w	r2, [r3, #684]	; 0x2ac
	seria[86].interval = 880;
 80033de:	4b11      	ldr	r3, [pc, #68]	; (8003424 <inputseria+0x5e0>)
 80033e0:	4a16      	ldr	r2, [pc, #88]	; (800343c <inputseria+0x5f8>)
 80033e2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
	seria[86].waittime = 224;
 80033e6:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <inputseria+0x5e0>)
 80033e8:	22e0      	movs	r2, #224	; 0xe0
 80033ea:	f8a3 22b4 	strh.w	r2, [r3, #692]	; 0x2b4
	seria[87].interval = 988;
 80033ee:	4b0d      	ldr	r3, [pc, #52]	; (8003424 <inputseria+0x5e0>)
 80033f0:	4a13      	ldr	r2, [pc, #76]	; (8003440 <inputseria+0x5fc>)
 80033f2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
	seria[87].waittime = 462;
 80033f6:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <inputseria+0x5e0>)
 80033f8:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80033fc:	f8a3 22bc 	strh.w	r2, [r3, #700]	; 0x2bc
	seria[88].interval = 698;
 8003400:	4b08      	ldr	r3, [pc, #32]	; (8003424 <inputseria+0x5e0>)
 8003402:	4a0c      	ldr	r2, [pc, #48]	; (8003434 <inputseria+0x5f0>)
 8003404:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
	seria[88].waittime = 224;
 8003408:	4b06      	ldr	r3, [pc, #24]	; (8003424 <inputseria+0x5e0>)
 800340a:	22e0      	movs	r2, #224	; 0xe0
 800340c:	f8a3 22c4 	strh.w	r2, [r3, #708]	; 0x2c4
	seria[89].interval = 880;
 8003410:	4b04      	ldr	r3, [pc, #16]	; (8003424 <inputseria+0x5e0>)
 8003412:	4a0a      	ldr	r2, [pc, #40]	; (800343c <inputseria+0x5f8>)
 8003414:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
	seria[89].waittime = 224;
 8003418:	4b02      	ldr	r3, [pc, #8]	; (8003424 <inputseria+0x5e0>)
 800341a:	22e0      	movs	r2, #224	; 0xe0
 800341c:	f8a3 22cc 	strh.w	r2, [r3, #716]	; 0x2cc
 8003420:	e024      	b.n	800346c <inputseria+0x628>
 8003422:	bf00      	nop
 8003424:	200003c4 	.word	0x200003c4
 8003428:	43f70000 	.word	0x43f70000
 800342c:	4402c000 	.word	0x4402c000
 8003430:	43a50000 	.word	0x43a50000
 8003434:	442e8000 	.word	0x442e8000
 8003438:	44440000 	.word	0x44440000
 800343c:	445c0000 	.word	0x445c0000
 8003440:	44770000 	.word	0x44770000
 8003444:	4482e000 	.word	0x4482e000
 8003448:	4492e000 	.word	0x4492e000
 800344c:	44a4e000 	.word	0x44a4e000
 8003450:	44aea000 	.word	0x44aea000
 8003454:	44c40000 	.word	0x44c40000
 8003458:	43930000 	.word	0x43930000
 800345c:	43ae8000 	.word	0x43ae8000
 8003460:	43c40000 	.word	0x43c40000
 8003464:	43dc0000 	.word	0x43dc0000
 8003468:	4424c000 	.word	0x4424c000
	seria[90].interval = 988;
 800346c:	4bb9      	ldr	r3, [pc, #740]	; (8003754 <inputseria+0x910>)
 800346e:	4aba      	ldr	r2, [pc, #744]	; (8003758 <inputseria+0x914>)
 8003470:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
	seria[90].waittime = 462;
 8003474:	4bb7      	ldr	r3, [pc, #732]	; (8003754 <inputseria+0x910>)
 8003476:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800347a:	f8a3 22d4 	strh.w	r2, [r3, #724]	; 0x2d4
	seria[91].interval = 698;
 800347e:	4bb5      	ldr	r3, [pc, #724]	; (8003754 <inputseria+0x910>)
 8003480:	4ab6      	ldr	r2, [pc, #728]	; (800375c <inputseria+0x918>)
 8003482:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
	seria[91].waittime = 224;
 8003486:	4bb3      	ldr	r3, [pc, #716]	; (8003754 <inputseria+0x910>)
 8003488:	22e0      	movs	r2, #224	; 0xe0
 800348a:	f8a3 22dc 	strh.w	r2, [r3, #732]	; 0x2dc
	seria[92].interval = 880;
 800348e:	4bb1      	ldr	r3, [pc, #708]	; (8003754 <inputseria+0x910>)
 8003490:	4ab3      	ldr	r2, [pc, #716]	; (8003760 <inputseria+0x91c>)
 8003492:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
	seria[92].waittime = 224;
 8003496:	4baf      	ldr	r3, [pc, #700]	; (8003754 <inputseria+0x910>)
 8003498:	22e0      	movs	r2, #224	; 0xe0
 800349a:	f8a3 22e4 	strh.w	r2, [r3, #740]	; 0x2e4
	seria[93].interval = 988;
 800349e:	4bad      	ldr	r3, [pc, #692]	; (8003754 <inputseria+0x910>)
 80034a0:	4aad      	ldr	r2, [pc, #692]	; (8003758 <inputseria+0x914>)
 80034a2:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
	seria[93].waittime = 224;
 80034a6:	4bab      	ldr	r3, [pc, #684]	; (8003754 <inputseria+0x910>)
 80034a8:	22e0      	movs	r2, #224	; 0xe0
 80034aa:	f8a3 22ec 	strh.w	r2, [r3, #748]	; 0x2ec
	seria[94].interval = 1319;
 80034ae:	4ba9      	ldr	r3, [pc, #676]	; (8003754 <inputseria+0x910>)
 80034b0:	4aac      	ldr	r2, [pc, #688]	; (8003764 <inputseria+0x920>)
 80034b2:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
	seria[94].waittime = 224;
 80034b6:	4ba7      	ldr	r3, [pc, #668]	; (8003754 <inputseria+0x910>)
 80034b8:	22e0      	movs	r2, #224	; 0xe0
 80034ba:	f8a3 22f4 	strh.w	r2, [r3, #756]	; 0x2f4
	seria[95].interval = 1175;
 80034be:	4ba5      	ldr	r3, [pc, #660]	; (8003754 <inputseria+0x910>)
 80034c0:	4aa9      	ldr	r2, [pc, #676]	; (8003768 <inputseria+0x924>)
 80034c2:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	seria[95].waittime = 462;
 80034c6:	4ba3      	ldr	r3, [pc, #652]	; (8003754 <inputseria+0x910>)
 80034c8:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80034cc:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
	seria[96].interval = 988;
 80034d0:	4ba0      	ldr	r3, [pc, #640]	; (8003754 <inputseria+0x910>)
 80034d2:	4aa1      	ldr	r2, [pc, #644]	; (8003758 <inputseria+0x914>)
 80034d4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
	seria[96].waittime = 224;
 80034d8:	4b9e      	ldr	r3, [pc, #632]	; (8003754 <inputseria+0x910>)
 80034da:	22e0      	movs	r2, #224	; 0xe0
 80034dc:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
	seria[97].interval = 1047;
 80034e0:	4b9c      	ldr	r3, [pc, #624]	; (8003754 <inputseria+0x910>)
 80034e2:	4aa2      	ldr	r2, [pc, #648]	; (800376c <inputseria+0x928>)
 80034e4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	seria[97].waittime = 224;
 80034e8:	4b9a      	ldr	r3, [pc, #616]	; (8003754 <inputseria+0x910>)
 80034ea:	22e0      	movs	r2, #224	; 0xe0
 80034ec:	f8a3 230c 	strh.w	r2, [r3, #780]	; 0x30c
	seria[98].interval = 988;
 80034f0:	4b98      	ldr	r3, [pc, #608]	; (8003754 <inputseria+0x910>)
 80034f2:	4a99      	ldr	r2, [pc, #612]	; (8003758 <inputseria+0x914>)
 80034f4:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
	seria[98].waittime = 224;
 80034f8:	4b96      	ldr	r3, [pc, #600]	; (8003754 <inputseria+0x910>)
 80034fa:	22e0      	movs	r2, #224	; 0xe0
 80034fc:	f8a3 2314 	strh.w	r2, [r3, #788]	; 0x314
	seria[99].interval = 784;
 8003500:	4b94      	ldr	r3, [pc, #592]	; (8003754 <inputseria+0x910>)
 8003502:	4a9b      	ldr	r2, [pc, #620]	; (8003770 <inputseria+0x92c>)
 8003504:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
	seria[99].waittime = 224;
 8003508:	4b92      	ldr	r3, [pc, #584]	; (8003754 <inputseria+0x910>)
 800350a:	22e0      	movs	r2, #224	; 0xe0
 800350c:	f8a3 231c 	strh.w	r2, [r3, #796]	; 0x31c
	seria[100].interval = 659;
 8003510:	4b90      	ldr	r3, [pc, #576]	; (8003754 <inputseria+0x910>)
 8003512:	4a98      	ldr	r2, [pc, #608]	; (8003774 <inputseria+0x930>)
 8003514:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
	seria[100].waittime = 1169;
 8003518:	4b8e      	ldr	r3, [pc, #568]	; (8003754 <inputseria+0x910>)
 800351a:	f240 4291 	movw	r2, #1169	; 0x491
 800351e:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324
	seria[101].interval = 587;
 8003522:	4b8c      	ldr	r3, [pc, #560]	; (8003754 <inputseria+0x910>)
 8003524:	4a94      	ldr	r2, [pc, #592]	; (8003778 <inputseria+0x934>)
 8003526:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	seria[101].waittime = 224;
 800352a:	4b8a      	ldr	r3, [pc, #552]	; (8003754 <inputseria+0x910>)
 800352c:	22e0      	movs	r2, #224	; 0xe0
 800352e:	f8a3 232c 	strh.w	r2, [r3, #812]	; 0x32c
	seria[102].interval = 659;
 8003532:	4b88      	ldr	r3, [pc, #544]	; (8003754 <inputseria+0x910>)
 8003534:	4a8f      	ldr	r2, [pc, #572]	; (8003774 <inputseria+0x930>)
 8003536:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
	seria[102].waittime = 224;
 800353a:	4b86      	ldr	r3, [pc, #536]	; (8003754 <inputseria+0x910>)
 800353c:	22e0      	movs	r2, #224	; 0xe0
 800353e:	f8a3 2334 	strh.w	r2, [r3, #820]	; 0x334
	seria[103].interval = 784;
 8003542:	4b84      	ldr	r3, [pc, #528]	; (8003754 <inputseria+0x910>)
 8003544:	4a8a      	ldr	r2, [pc, #552]	; (8003770 <inputseria+0x92c>)
 8003546:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
	seria[103].waittime = 224;
 800354a:	4b82      	ldr	r3, [pc, #520]	; (8003754 <inputseria+0x910>)
 800354c:	22e0      	movs	r2, #224	; 0xe0
 800354e:	f8a3 233c 	strh.w	r2, [r3, #828]	; 0x33c
	seria[104].interval = 659;
 8003552:	4b80      	ldr	r3, [pc, #512]	; (8003754 <inputseria+0x910>)
 8003554:	4a87      	ldr	r2, [pc, #540]	; (8003774 <inputseria+0x930>)
 8003556:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
	seria[104].waittime = 1400;
 800355a:	4b7e      	ldr	r3, [pc, #504]	; (8003754 <inputseria+0x910>)
 800355c:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003560:	f8a3 2344 	strh.w	r2, [r3, #836]	; 0x344
	seria[105].interval = 698;
 8003564:	4b7b      	ldr	r3, [pc, #492]	; (8003754 <inputseria+0x910>)
 8003566:	4a7d      	ldr	r2, [pc, #500]	; (800375c <inputseria+0x918>)
 8003568:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	seria[105].waittime = 224;
 800356c:	4b79      	ldr	r3, [pc, #484]	; (8003754 <inputseria+0x910>)
 800356e:	22e0      	movs	r2, #224	; 0xe0
 8003570:	f8a3 234c 	strh.w	r2, [r3, #844]	; 0x34c
	seria[106].interval = 880;
 8003574:	4b77      	ldr	r3, [pc, #476]	; (8003754 <inputseria+0x910>)
 8003576:	4a7a      	ldr	r2, [pc, #488]	; (8003760 <inputseria+0x91c>)
 8003578:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
	seria[106].waittime = 224;
 800357c:	4b75      	ldr	r3, [pc, #468]	; (8003754 <inputseria+0x910>)
 800357e:	22e0      	movs	r2, #224	; 0xe0
 8003580:	f8a3 2354 	strh.w	r2, [r3, #852]	; 0x354
	seria[107].interval = 988;
 8003584:	4b73      	ldr	r3, [pc, #460]	; (8003754 <inputseria+0x910>)
 8003586:	4a74      	ldr	r2, [pc, #464]	; (8003758 <inputseria+0x914>)
 8003588:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
	seria[107].waittime = 462;
 800358c:	4b71      	ldr	r3, [pc, #452]	; (8003754 <inputseria+0x910>)
 800358e:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003592:	f8a3 235c 	strh.w	r2, [r3, #860]	; 0x35c
	seria[108].interval = 698;
 8003596:	4b6f      	ldr	r3, [pc, #444]	; (8003754 <inputseria+0x910>)
 8003598:	4a70      	ldr	r2, [pc, #448]	; (800375c <inputseria+0x918>)
 800359a:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
	seria[108].waittime = 224;
 800359e:	4b6d      	ldr	r3, [pc, #436]	; (8003754 <inputseria+0x910>)
 80035a0:	22e0      	movs	r2, #224	; 0xe0
 80035a2:	f8a3 2364 	strh.w	r2, [r3, #868]	; 0x364
	seria[109].interval = 880;
 80035a6:	4b6b      	ldr	r3, [pc, #428]	; (8003754 <inputseria+0x910>)
 80035a8:	4a6d      	ldr	r2, [pc, #436]	; (8003760 <inputseria+0x91c>)
 80035aa:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
	seria[109].waittime = 224;
 80035ae:	4b69      	ldr	r3, [pc, #420]	; (8003754 <inputseria+0x910>)
 80035b0:	22e0      	movs	r2, #224	; 0xe0
 80035b2:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
	seria[110].interval = 988;
 80035b6:	4b67      	ldr	r3, [pc, #412]	; (8003754 <inputseria+0x910>)
 80035b8:	4a67      	ldr	r2, [pc, #412]	; (8003758 <inputseria+0x914>)
 80035ba:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
	seria[110].waittime = 462;
 80035be:	4b65      	ldr	r3, [pc, #404]	; (8003754 <inputseria+0x910>)
 80035c0:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80035c4:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
	seria[111].interval = 698;
 80035c8:	4b62      	ldr	r3, [pc, #392]	; (8003754 <inputseria+0x910>)
 80035ca:	4a64      	ldr	r2, [pc, #400]	; (800375c <inputseria+0x918>)
 80035cc:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
	seria[111].waittime = 224;
 80035d0:	4b60      	ldr	r3, [pc, #384]	; (8003754 <inputseria+0x910>)
 80035d2:	22e0      	movs	r2, #224	; 0xe0
 80035d4:	f8a3 237c 	strh.w	r2, [r3, #892]	; 0x37c
	seria[112].interval = 880;
 80035d8:	4b5e      	ldr	r3, [pc, #376]	; (8003754 <inputseria+0x910>)
 80035da:	4a61      	ldr	r2, [pc, #388]	; (8003760 <inputseria+0x91c>)
 80035dc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
	seria[112].waittime = 224;
 80035e0:	4b5c      	ldr	r3, [pc, #368]	; (8003754 <inputseria+0x910>)
 80035e2:	22e0      	movs	r2, #224	; 0xe0
 80035e4:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
	seria[113].interval = 988;
 80035e8:	4b5a      	ldr	r3, [pc, #360]	; (8003754 <inputseria+0x910>)
 80035ea:	4a5b      	ldr	r2, [pc, #364]	; (8003758 <inputseria+0x914>)
 80035ec:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	seria[113].waittime = 224;
 80035f0:	4b58      	ldr	r3, [pc, #352]	; (8003754 <inputseria+0x910>)
 80035f2:	22e0      	movs	r2, #224	; 0xe0
 80035f4:	f8a3 238c 	strh.w	r2, [r3, #908]	; 0x38c
	seria[114].interval = 1319;
 80035f8:	4b56      	ldr	r3, [pc, #344]	; (8003754 <inputseria+0x910>)
 80035fa:	4a5a      	ldr	r2, [pc, #360]	; (8003764 <inputseria+0x920>)
 80035fc:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
	seria[114].waittime = 224;
 8003600:	4b54      	ldr	r3, [pc, #336]	; (8003754 <inputseria+0x910>)
 8003602:	22e0      	movs	r2, #224	; 0xe0
 8003604:	f8a3 2394 	strh.w	r2, [r3, #916]	; 0x394
	seria[115].interval = 1175;
 8003608:	4b52      	ldr	r3, [pc, #328]	; (8003754 <inputseria+0x910>)
 800360a:	4a57      	ldr	r2, [pc, #348]	; (8003768 <inputseria+0x924>)
 800360c:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
	seria[115].waittime = 462;
 8003610:	4b50      	ldr	r3, [pc, #320]	; (8003754 <inputseria+0x910>)
 8003612:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003616:	f8a3 239c 	strh.w	r2, [r3, #924]	; 0x39c
	seria[116].interval = 988;
 800361a:	4b4e      	ldr	r3, [pc, #312]	; (8003754 <inputseria+0x910>)
 800361c:	4a4e      	ldr	r2, [pc, #312]	; (8003758 <inputseria+0x914>)
 800361e:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	seria[116].waittime = 224;
 8003622:	4b4c      	ldr	r3, [pc, #304]	; (8003754 <inputseria+0x910>)
 8003624:	22e0      	movs	r2, #224	; 0xe0
 8003626:	f8a3 23a4 	strh.w	r2, [r3, #932]	; 0x3a4
	seria[117].interval = 1047;
 800362a:	4b4a      	ldr	r3, [pc, #296]	; (8003754 <inputseria+0x910>)
 800362c:	4a4f      	ldr	r2, [pc, #316]	; (800376c <inputseria+0x928>)
 800362e:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
	seria[117].waittime = 224;
 8003632:	4b48      	ldr	r3, [pc, #288]	; (8003754 <inputseria+0x910>)
 8003634:	22e0      	movs	r2, #224	; 0xe0
 8003636:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
	seria[118].interval = 1319;
 800363a:	4b46      	ldr	r3, [pc, #280]	; (8003754 <inputseria+0x910>)
 800363c:	4a49      	ldr	r2, [pc, #292]	; (8003764 <inputseria+0x920>)
 800363e:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
	seria[118].waittime = 224;
 8003642:	4b44      	ldr	r3, [pc, #272]	; (8003754 <inputseria+0x910>)
 8003644:	22e0      	movs	r2, #224	; 0xe0
 8003646:	f8a3 23b4 	strh.w	r2, [r3, #948]	; 0x3b4
	seria[119].interval = 988;
 800364a:	4b42      	ldr	r3, [pc, #264]	; (8003754 <inputseria+0x910>)
 800364c:	4a42      	ldr	r2, [pc, #264]	; (8003758 <inputseria+0x914>)
 800364e:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
	seria[119].waittime = 224;
 8003652:	4b40      	ldr	r3, [pc, #256]	; (8003754 <inputseria+0x910>)
 8003654:	22e0      	movs	r2, #224	; 0xe0
 8003656:	f8a3 23bc 	strh.w	r2, [r3, #956]	; 0x3bc
	seria[120].interval = 784;
 800365a:	4b3e      	ldr	r3, [pc, #248]	; (8003754 <inputseria+0x910>)
 800365c:	4a44      	ldr	r2, [pc, #272]	; (8003770 <inputseria+0x92c>)
 800365e:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
	seria[120].waittime = 1169;
 8003662:	4b3c      	ldr	r3, [pc, #240]	; (8003754 <inputseria+0x910>)
 8003664:	f240 4291 	movw	r2, #1169	; 0x491
 8003668:	f8a3 23c4 	strh.w	r2, [r3, #964]	; 0x3c4
	seria[121].interval = 988;
 800366c:	4b39      	ldr	r3, [pc, #228]	; (8003754 <inputseria+0x910>)
 800366e:	4a3a      	ldr	r2, [pc, #232]	; (8003758 <inputseria+0x914>)
 8003670:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
	seria[121].waittime = 224;
 8003674:	4b37      	ldr	r3, [pc, #220]	; (8003754 <inputseria+0x910>)
 8003676:	22e0      	movs	r2, #224	; 0xe0
 8003678:	f8a3 23cc 	strh.w	r2, [r3, #972]	; 0x3cc
	seria[122].interval = 784;
 800367c:	4b35      	ldr	r3, [pc, #212]	; (8003754 <inputseria+0x910>)
 800367e:	4a3c      	ldr	r2, [pc, #240]	; (8003770 <inputseria+0x92c>)
 8003680:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
	seria[122].waittime = 224;
 8003684:	4b33      	ldr	r3, [pc, #204]	; (8003754 <inputseria+0x910>)
 8003686:	22e0      	movs	r2, #224	; 0xe0
 8003688:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4
	seria[123].interval = 587;
 800368c:	4b31      	ldr	r3, [pc, #196]	; (8003754 <inputseria+0x910>)
 800368e:	4a3a      	ldr	r2, [pc, #232]	; (8003778 <inputseria+0x934>)
 8003690:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
	seria[123].waittime = 224;
 8003694:	4b2f      	ldr	r3, [pc, #188]	; (8003754 <inputseria+0x910>)
 8003696:	22e0      	movs	r2, #224	; 0xe0
 8003698:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
	seria[124].interval = 659;
 800369c:	4b2d      	ldr	r3, [pc, #180]	; (8003754 <inputseria+0x910>)
 800369e:	4a35      	ldr	r2, [pc, #212]	; (8003774 <inputseria+0x930>)
 80036a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
	seria[124].waittime = 1400;
 80036a4:	4b2b      	ldr	r3, [pc, #172]	; (8003754 <inputseria+0x910>)
 80036a6:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80036aa:	f8a3 23e4 	strh.w	r2, [r3, #996]	; 0x3e4
	seria[125].interval = 294;
 80036ae:	4b29      	ldr	r3, [pc, #164]	; (8003754 <inputseria+0x910>)
 80036b0:	4a32      	ldr	r2, [pc, #200]	; (800377c <inputseria+0x938>)
 80036b2:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
	seria[125].waittime = 224;
 80036b6:	4b27      	ldr	r3, [pc, #156]	; (8003754 <inputseria+0x910>)
 80036b8:	22e0      	movs	r2, #224	; 0xe0
 80036ba:	f8a3 23ec 	strh.w	r2, [r3, #1004]	; 0x3ec
	seria[126].interval = 330;
 80036be:	4b25      	ldr	r3, [pc, #148]	; (8003754 <inputseria+0x910>)
 80036c0:	4a2f      	ldr	r2, [pc, #188]	; (8003780 <inputseria+0x93c>)
 80036c2:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
	seria[126].waittime = 224;
 80036c6:	4b23      	ldr	r3, [pc, #140]	; (8003754 <inputseria+0x910>)
 80036c8:	22e0      	movs	r2, #224	; 0xe0
 80036ca:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4
	seria[127].interval = 349;
 80036ce:	4b21      	ldr	r3, [pc, #132]	; (8003754 <inputseria+0x910>)
 80036d0:	4a2c      	ldr	r2, [pc, #176]	; (8003784 <inputseria+0x940>)
 80036d2:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
	seria[127].waittime = 462;
 80036d6:	4b1f      	ldr	r3, [pc, #124]	; (8003754 <inputseria+0x910>)
 80036d8:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80036dc:	f8a3 23fc 	strh.w	r2, [r3, #1020]	; 0x3fc
	seria[128].interval = 392;
 80036e0:	4b1c      	ldr	r3, [pc, #112]	; (8003754 <inputseria+0x910>)
 80036e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036e6:	4a28      	ldr	r2, [pc, #160]	; (8003788 <inputseria+0x944>)
 80036e8:	601a      	str	r2, [r3, #0]
	seria[128].waittime = 224;
 80036ea:	4b1a      	ldr	r3, [pc, #104]	; (8003754 <inputseria+0x910>)
 80036ec:	22e0      	movs	r2, #224	; 0xe0
 80036ee:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	seria[129].interval = 440;
 80036f2:	4b18      	ldr	r3, [pc, #96]	; (8003754 <inputseria+0x910>)
 80036f4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80036f8:	4a24      	ldr	r2, [pc, #144]	; (800378c <inputseria+0x948>)
 80036fa:	601a      	str	r2, [r3, #0]
	seria[129].waittime = 224;
 80036fc:	4b15      	ldr	r3, [pc, #84]	; (8003754 <inputseria+0x910>)
 80036fe:	22e0      	movs	r2, #224	; 0xe0
 8003700:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
	seria[130].interval = 494;
 8003704:	4b13      	ldr	r3, [pc, #76]	; (8003754 <inputseria+0x910>)
 8003706:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800370a:	4a21      	ldr	r2, [pc, #132]	; (8003790 <inputseria+0x94c>)
 800370c:	601a      	str	r2, [r3, #0]
	seria[130].waittime = 462;
 800370e:	4b11      	ldr	r3, [pc, #68]	; (8003754 <inputseria+0x910>)
 8003710:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003714:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
	seria[131].interval = 523;
 8003718:	4b0e      	ldr	r3, [pc, #56]	; (8003754 <inputseria+0x910>)
 800371a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800371e:	4a1d      	ldr	r2, [pc, #116]	; (8003794 <inputseria+0x950>)
 8003720:	601a      	str	r2, [r3, #0]
	seria[131].waittime = 224;
 8003722:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <inputseria+0x910>)
 8003724:	22e0      	movs	r2, #224	; 0xe0
 8003726:	f8a3 241c 	strh.w	r2, [r3, #1052]	; 0x41c
	seria[132].interval = 494;
 800372a:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <inputseria+0x910>)
 800372c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8003730:	4a17      	ldr	r2, [pc, #92]	; (8003790 <inputseria+0x94c>)
 8003732:	601a      	str	r2, [r3, #0]
	seria[132].waittime = 224;
 8003734:	4b07      	ldr	r3, [pc, #28]	; (8003754 <inputseria+0x910>)
 8003736:	22e0      	movs	r2, #224	; 0xe0
 8003738:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
	seria[133].interval = 330;
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <inputseria+0x910>)
 800373e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8003742:	4a0f      	ldr	r2, [pc, #60]	; (8003780 <inputseria+0x93c>)
 8003744:	601a      	str	r2, [r3, #0]
	seria[133].waittime = 1400;
 8003746:	4b03      	ldr	r3, [pc, #12]	; (8003754 <inputseria+0x910>)
 8003748:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800374c:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
 8003750:	e022      	b.n	8003798 <inputseria+0x954>
 8003752:	bf00      	nop
 8003754:	200003c4 	.word	0x200003c4
 8003758:	44770000 	.word	0x44770000
 800375c:	442e8000 	.word	0x442e8000
 8003760:	445c0000 	.word	0x445c0000
 8003764:	44a4e000 	.word	0x44a4e000
 8003768:	4492e000 	.word	0x4492e000
 800376c:	4482e000 	.word	0x4482e000
 8003770:	44440000 	.word	0x44440000
 8003774:	4424c000 	.word	0x4424c000
 8003778:	4412c000 	.word	0x4412c000
 800377c:	43930000 	.word	0x43930000
 8003780:	43a50000 	.word	0x43a50000
 8003784:	43ae8000 	.word	0x43ae8000
 8003788:	43c40000 	.word	0x43c40000
 800378c:	43dc0000 	.word	0x43dc0000
 8003790:	43f70000 	.word	0x43f70000
 8003794:	4402c000 	.word	0x4402c000
	seria[134].interval = 698;
 8003798:	4ba7      	ldr	r3, [pc, #668]	; (8003a38 <inputseria+0xbf4>)
 800379a:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800379e:	4aa7      	ldr	r2, [pc, #668]	; (8003a3c <inputseria+0xbf8>)
 80037a0:	601a      	str	r2, [r3, #0]
	seria[134].waittime = 224;
 80037a2:	4ba5      	ldr	r3, [pc, #660]	; (8003a38 <inputseria+0xbf4>)
 80037a4:	22e0      	movs	r2, #224	; 0xe0
 80037a6:	f8a3 2434 	strh.w	r2, [r3, #1076]	; 0x434
	seria[135].interval = 784;
 80037aa:	4ba3      	ldr	r3, [pc, #652]	; (8003a38 <inputseria+0xbf4>)
 80037ac:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80037b0:	4aa3      	ldr	r2, [pc, #652]	; (8003a40 <inputseria+0xbfc>)
 80037b2:	601a      	str	r2, [r3, #0]
	seria[135].waittime = 224;
 80037b4:	4ba0      	ldr	r3, [pc, #640]	; (8003a38 <inputseria+0xbf4>)
 80037b6:	22e0      	movs	r2, #224	; 0xe0
 80037b8:	f8a3 243c 	strh.w	r2, [r3, #1084]	; 0x43c
	seria[136].interval = 880;
 80037bc:	4b9e      	ldr	r3, [pc, #632]	; (8003a38 <inputseria+0xbf4>)
 80037be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037c2:	4aa0      	ldr	r2, [pc, #640]	; (8003a44 <inputseria+0xc00>)
 80037c4:	601a      	str	r2, [r3, #0]
	seria[136].waittime = 462;
 80037c6:	4b9c      	ldr	r3, [pc, #624]	; (8003a38 <inputseria+0xbf4>)
 80037c8:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80037cc:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444
	seria[137].interval = 988;
 80037d0:	4b99      	ldr	r3, [pc, #612]	; (8003a38 <inputseria+0xbf4>)
 80037d2:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80037d6:	4a9c      	ldr	r2, [pc, #624]	; (8003a48 <inputseria+0xc04>)
 80037d8:	601a      	str	r2, [r3, #0]
	seria[137].waittime = 224;
 80037da:	4b97      	ldr	r3, [pc, #604]	; (8003a38 <inputseria+0xbf4>)
 80037dc:	22e0      	movs	r2, #224	; 0xe0
 80037de:	f8a3 244c 	strh.w	r2, [r3, #1100]	; 0x44c
	seria[138].interval = 1047;
 80037e2:	4b95      	ldr	r3, [pc, #596]	; (8003a38 <inputseria+0xbf4>)
 80037e4:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80037e8:	4a98      	ldr	r2, [pc, #608]	; (8003a4c <inputseria+0xc08>)
 80037ea:	601a      	str	r2, [r3, #0]
	seria[138].waittime = 224;
 80037ec:	4b92      	ldr	r3, [pc, #584]	; (8003a38 <inputseria+0xbf4>)
 80037ee:	22e0      	movs	r2, #224	; 0xe0
 80037f0:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
	seria[139].interval = 1175;
 80037f4:	4b90      	ldr	r3, [pc, #576]	; (8003a38 <inputseria+0xbf4>)
 80037f6:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 80037fa:	4a95      	ldr	r2, [pc, #596]	; (8003a50 <inputseria+0xc0c>)
 80037fc:	601a      	str	r2, [r3, #0]
	seria[139].waittime = 462;
 80037fe:	4b8e      	ldr	r3, [pc, #568]	; (8003a38 <inputseria+0xbf4>)
 8003800:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003804:	f8a3 245c 	strh.w	r2, [r3, #1116]	; 0x45c
	seria[140].interval = 1319;
 8003808:	4b8b      	ldr	r3, [pc, #556]	; (8003a38 <inputseria+0xbf4>)
 800380a:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 800380e:	4a91      	ldr	r2, [pc, #580]	; (8003a54 <inputseria+0xc10>)
 8003810:	601a      	str	r2, [r3, #0]
	seria[140].waittime = 224;
 8003812:	4b89      	ldr	r3, [pc, #548]	; (8003a38 <inputseria+0xbf4>)
 8003814:	22e0      	movs	r2, #224	; 0xe0
 8003816:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464
	seria[141].interval = 1397;
 800381a:	4b87      	ldr	r3, [pc, #540]	; (8003a38 <inputseria+0xbf4>)
 800381c:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 8003820:	4a8d      	ldr	r2, [pc, #564]	; (8003a58 <inputseria+0xc14>)
 8003822:	601a      	str	r2, [r3, #0]
	seria[141].waittime = 224;
 8003824:	4b84      	ldr	r3, [pc, #528]	; (8003a38 <inputseria+0xbf4>)
 8003826:	22e0      	movs	r2, #224	; 0xe0
 8003828:	f8a3 246c 	strh.w	r2, [r3, #1132]	; 0x46c
	seria[142].interval = 1568;
 800382c:	4b82      	ldr	r3, [pc, #520]	; (8003a38 <inputseria+0xbf4>)
 800382e:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8003832:	4a8a      	ldr	r2, [pc, #552]	; (8003a5c <inputseria+0xc18>)
 8003834:	601a      	str	r2, [r3, #0]
	seria[142].waittime = 1400;
 8003836:	4b80      	ldr	r3, [pc, #512]	; (8003a38 <inputseria+0xbf4>)
 8003838:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800383c:	f8a3 2474 	strh.w	r2, [r3, #1140]	; 0x474
	seria[143].interval = 294;
 8003840:	4b7d      	ldr	r3, [pc, #500]	; (8003a38 <inputseria+0xbf4>)
 8003842:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8003846:	4a86      	ldr	r2, [pc, #536]	; (8003a60 <inputseria+0xc1c>)
 8003848:	601a      	str	r2, [r3, #0]
	seria[143].waittime = 224;
 800384a:	4b7b      	ldr	r3, [pc, #492]	; (8003a38 <inputseria+0xbf4>)
 800384c:	22e0      	movs	r2, #224	; 0xe0
 800384e:	f8a3 247c 	strh.w	r2, [r3, #1148]	; 0x47c
	seria[144].interval = 330;
 8003852:	4b79      	ldr	r3, [pc, #484]	; (8003a38 <inputseria+0xbf4>)
 8003854:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8003858:	4a82      	ldr	r2, [pc, #520]	; (8003a64 <inputseria+0xc20>)
 800385a:	601a      	str	r2, [r3, #0]
	seria[144].waittime = 224;
 800385c:	4b76      	ldr	r3, [pc, #472]	; (8003a38 <inputseria+0xbf4>)
 800385e:	22e0      	movs	r2, #224	; 0xe0
 8003860:	f8a3 2484 	strh.w	r2, [r3, #1156]	; 0x484
	seria[145].interval = 349;
 8003864:	4b74      	ldr	r3, [pc, #464]	; (8003a38 <inputseria+0xbf4>)
 8003866:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 800386a:	4a7f      	ldr	r2, [pc, #508]	; (8003a68 <inputseria+0xc24>)
 800386c:	601a      	str	r2, [r3, #0]
	seria[145].waittime = 462;
 800386e:	4b72      	ldr	r3, [pc, #456]	; (8003a38 <inputseria+0xbf4>)
 8003870:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003874:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
	seria[146].interval = 392;
 8003878:	4b6f      	ldr	r3, [pc, #444]	; (8003a38 <inputseria+0xbf4>)
 800387a:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 800387e:	4a7b      	ldr	r2, [pc, #492]	; (8003a6c <inputseria+0xc28>)
 8003880:	601a      	str	r2, [r3, #0]
	seria[146].waittime = 224;
 8003882:	4b6d      	ldr	r3, [pc, #436]	; (8003a38 <inputseria+0xbf4>)
 8003884:	22e0      	movs	r2, #224	; 0xe0
 8003886:	f8a3 2494 	strh.w	r2, [r3, #1172]	; 0x494
	seria[147].interval = 440;
 800388a:	4b6b      	ldr	r3, [pc, #428]	; (8003a38 <inputseria+0xbf4>)
 800388c:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8003890:	4a77      	ldr	r2, [pc, #476]	; (8003a70 <inputseria+0xc2c>)
 8003892:	601a      	str	r2, [r3, #0]
	seria[147].waittime = 224;
 8003894:	4b68      	ldr	r3, [pc, #416]	; (8003a38 <inputseria+0xbf4>)
 8003896:	22e0      	movs	r2, #224	; 0xe0
 8003898:	f8a3 249c 	strh.w	r2, [r3, #1180]	; 0x49c
	seria[148].interval = 494;
 800389c:	4b66      	ldr	r3, [pc, #408]	; (8003a38 <inputseria+0xbf4>)
 800389e:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80038a2:	4a74      	ldr	r2, [pc, #464]	; (8003a74 <inputseria+0xc30>)
 80038a4:	601a      	str	r2, [r3, #0]
	seria[148].waittime = 462;
 80038a6:	4b64      	ldr	r3, [pc, #400]	; (8003a38 <inputseria+0xbf4>)
 80038a8:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80038ac:	f8a3 24a4 	strh.w	r2, [r3, #1188]	; 0x4a4
	seria[149].interval = 523;
 80038b0:	4b61      	ldr	r3, [pc, #388]	; (8003a38 <inputseria+0xbf4>)
 80038b2:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 80038b6:	4a70      	ldr	r2, [pc, #448]	; (8003a78 <inputseria+0xc34>)
 80038b8:	601a      	str	r2, [r3, #0]
	seria[149].waittime = 224;
 80038ba:	4b5f      	ldr	r3, [pc, #380]	; (8003a38 <inputseria+0xbf4>)
 80038bc:	22e0      	movs	r2, #224	; 0xe0
 80038be:	f8a3 24ac 	strh.w	r2, [r3, #1196]	; 0x4ac
	seria[150].interval = 494;
 80038c2:	4b5d      	ldr	r3, [pc, #372]	; (8003a38 <inputseria+0xbf4>)
 80038c4:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80038c8:	4a6a      	ldr	r2, [pc, #424]	; (8003a74 <inputseria+0xc30>)
 80038ca:	601a      	str	r2, [r3, #0]
	seria[150].waittime = 224;
 80038cc:	4b5a      	ldr	r3, [pc, #360]	; (8003a38 <inputseria+0xbf4>)
 80038ce:	22e0      	movs	r2, #224	; 0xe0
 80038d0:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
	seria[151].interval = 330;
 80038d4:	4b58      	ldr	r3, [pc, #352]	; (8003a38 <inputseria+0xbf4>)
 80038d6:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 80038da:	4a62      	ldr	r2, [pc, #392]	; (8003a64 <inputseria+0xc20>)
 80038dc:	601a      	str	r2, [r3, #0]
	seria[151].waittime = 1400;
 80038de:	4b56      	ldr	r3, [pc, #344]	; (8003a38 <inputseria+0xbf4>)
 80038e0:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80038e4:	f8a3 24bc 	strh.w	r2, [r3, #1212]	; 0x4bc
	seria[152].interval = 698;
 80038e8:	4b53      	ldr	r3, [pc, #332]	; (8003a38 <inputseria+0xbf4>)
 80038ea:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80038ee:	4a53      	ldr	r2, [pc, #332]	; (8003a3c <inputseria+0xbf8>)
 80038f0:	601a      	str	r2, [r3, #0]
	seria[152].waittime = 224;
 80038f2:	4b51      	ldr	r3, [pc, #324]	; (8003a38 <inputseria+0xbf4>)
 80038f4:	22e0      	movs	r2, #224	; 0xe0
 80038f6:	f8a3 24c4 	strh.w	r2, [r3, #1220]	; 0x4c4
	seria[153].interval = 659;
 80038fa:	4b4f      	ldr	r3, [pc, #316]	; (8003a38 <inputseria+0xbf4>)
 80038fc:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8003900:	4a5e      	ldr	r2, [pc, #376]	; (8003a7c <inputseria+0xc38>)
 8003902:	601a      	str	r2, [r3, #0]
	seria[153].waittime = 105;
 8003904:	4b4c      	ldr	r3, [pc, #304]	; (8003a38 <inputseria+0xbf4>)
 8003906:	2269      	movs	r2, #105	; 0x69
 8003908:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
	seria[154].interval = 880;
 800390c:	4b4a      	ldr	r3, [pc, #296]	; (8003a38 <inputseria+0xbf4>)
 800390e:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8003912:	4a4c      	ldr	r2, [pc, #304]	; (8003a44 <inputseria+0xc00>)
 8003914:	601a      	str	r2, [r3, #0]
	seria[154].waittime = 224;
 8003916:	4b48      	ldr	r3, [pc, #288]	; (8003a38 <inputseria+0xbf4>)
 8003918:	22e0      	movs	r2, #224	; 0xe0
 800391a:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4
	seria[155].interval = 784;
 800391e:	4b46      	ldr	r3, [pc, #280]	; (8003a38 <inputseria+0xbf4>)
 8003920:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8003924:	4a46      	ldr	r2, [pc, #280]	; (8003a40 <inputseria+0xbfc>)
 8003926:	601a      	str	r2, [r3, #0]
	seria[155].waittime = 105;
 8003928:	4b43      	ldr	r3, [pc, #268]	; (8003a38 <inputseria+0xbf4>)
 800392a:	2269      	movs	r2, #105	; 0x69
 800392c:	f8a3 24dc 	strh.w	r2, [r3, #1244]	; 0x4dc
	seria[156].interval = 988;
 8003930:	4b41      	ldr	r3, [pc, #260]	; (8003a38 <inputseria+0xbf4>)
 8003932:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8003936:	4a44      	ldr	r2, [pc, #272]	; (8003a48 <inputseria+0xc04>)
 8003938:	601a      	str	r2, [r3, #0]
	seria[156].waittime = 224;
 800393a:	4b3f      	ldr	r3, [pc, #252]	; (8003a38 <inputseria+0xbf4>)
 800393c:	22e0      	movs	r2, #224	; 0xe0
 800393e:	f8a3 24e4 	strh.w	r2, [r3, #1252]	; 0x4e4
	seria[157].interval = 880;
 8003942:	4b3d      	ldr	r3, [pc, #244]	; (8003a38 <inputseria+0xbf4>)
 8003944:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 8003948:	4a3e      	ldr	r2, [pc, #248]	; (8003a44 <inputseria+0xc00>)
 800394a:	601a      	str	r2, [r3, #0]
	seria[157].waittime = 105;
 800394c:	4b3a      	ldr	r3, [pc, #232]	; (8003a38 <inputseria+0xbf4>)
 800394e:	2269      	movs	r2, #105	; 0x69
 8003950:	f8a3 24ec 	strh.w	r2, [r3, #1260]	; 0x4ec
	seria[158].interval = 1047;
 8003954:	4b38      	ldr	r3, [pc, #224]	; (8003a38 <inputseria+0xbf4>)
 8003956:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 800395a:	4a3c      	ldr	r2, [pc, #240]	; (8003a4c <inputseria+0xc08>)
 800395c:	601a      	str	r2, [r3, #0]
	seria[158].waittime = 224;
 800395e:	4b36      	ldr	r3, [pc, #216]	; (8003a38 <inputseria+0xbf4>)
 8003960:	22e0      	movs	r2, #224	; 0xe0
 8003962:	f8a3 24f4 	strh.w	r2, [r3, #1268]	; 0x4f4
	seria[159].interval = 988;
 8003966:	4b34      	ldr	r3, [pc, #208]	; (8003a38 <inputseria+0xbf4>)
 8003968:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
 800396c:	4a36      	ldr	r2, [pc, #216]	; (8003a48 <inputseria+0xc04>)
 800396e:	601a      	str	r2, [r3, #0]
	seria[159].waittime = 105;
 8003970:	4b31      	ldr	r3, [pc, #196]	; (8003a38 <inputseria+0xbf4>)
 8003972:	2269      	movs	r2, #105	; 0x69
 8003974:	f8a3 24fc 	strh.w	r2, [r3, #1276]	; 0x4fc
	seria[160].interval = 1175;
 8003978:	4b2f      	ldr	r3, [pc, #188]	; (8003a38 <inputseria+0xbf4>)
 800397a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397e:	4a34      	ldr	r2, [pc, #208]	; (8003a50 <inputseria+0xc0c>)
 8003980:	601a      	str	r2, [r3, #0]
	seria[160].waittime = 224;
 8003982:	4b2d      	ldr	r3, [pc, #180]	; (8003a38 <inputseria+0xbf4>)
 8003984:	22e0      	movs	r2, #224	; 0xe0
 8003986:	f8a3 2504 	strh.w	r2, [r3, #1284]	; 0x504
	seria[161].interval = 1047;
 800398a:	4b2b      	ldr	r3, [pc, #172]	; (8003a38 <inputseria+0xbf4>)
 800398c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003990:	4a2e      	ldr	r2, [pc, #184]	; (8003a4c <inputseria+0xc08>)
 8003992:	601a      	str	r2, [r3, #0]
	seria[161].waittime = 105;
 8003994:	4b28      	ldr	r3, [pc, #160]	; (8003a38 <inputseria+0xbf4>)
 8003996:	2269      	movs	r2, #105	; 0x69
 8003998:	f8a3 250c 	strh.w	r2, [r3, #1292]	; 0x50c
	seria[162].interval = 1319;
 800399c:	4b26      	ldr	r3, [pc, #152]	; (8003a38 <inputseria+0xbf4>)
 800399e:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80039a2:	4a2c      	ldr	r2, [pc, #176]	; (8003a54 <inputseria+0xc10>)
 80039a4:	601a      	str	r2, [r3, #0]
	seria[162].waittime = 224;
 80039a6:	4b24      	ldr	r3, [pc, #144]	; (8003a38 <inputseria+0xbf4>)
 80039a8:	22e0      	movs	r2, #224	; 0xe0
 80039aa:	f8a3 2514 	strh.w	r2, [r3, #1300]	; 0x514
	seria[163].interval = 1175;
 80039ae:	4b22      	ldr	r3, [pc, #136]	; (8003a38 <inputseria+0xbf4>)
 80039b0:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80039b4:	4a26      	ldr	r2, [pc, #152]	; (8003a50 <inputseria+0xc0c>)
 80039b6:	601a      	str	r2, [r3, #0]
	seria[163].waittime = 105;
 80039b8:	4b1f      	ldr	r3, [pc, #124]	; (8003a38 <inputseria+0xbf4>)
 80039ba:	2269      	movs	r2, #105	; 0x69
 80039bc:	f8a3 251c 	strh.w	r2, [r3, #1308]	; 0x51c
	seria[164].interval = 1397;
 80039c0:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <inputseria+0xbf4>)
 80039c2:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80039c6:	4a24      	ldr	r2, [pc, #144]	; (8003a58 <inputseria+0xc14>)
 80039c8:	601a      	str	r2, [r3, #0]
	seria[164].waittime = 224;
 80039ca:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <inputseria+0xbf4>)
 80039cc:	22e0      	movs	r2, #224	; 0xe0
 80039ce:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
	seria[165].interval = 1319;
 80039d2:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <inputseria+0xbf4>)
 80039d4:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 80039d8:	4a1e      	ldr	r2, [pc, #120]	; (8003a54 <inputseria+0xc10>)
 80039da:	601a      	str	r2, [r3, #0]
	seria[165].waittime = 105;
 80039dc:	4b16      	ldr	r3, [pc, #88]	; (8003a38 <inputseria+0xbf4>)
 80039de:	2269      	movs	r2, #105	; 0x69
 80039e0:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
	seria[166].interval = 988;
 80039e4:	4b14      	ldr	r3, [pc, #80]	; (8003a38 <inputseria+0xbf4>)
 80039e6:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 80039ea:	4a17      	ldr	r2, [pc, #92]	; (8003a48 <inputseria+0xc04>)
 80039ec:	601a      	str	r2, [r3, #0]
	seria[166].waittime = 105;
 80039ee:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <inputseria+0xbf4>)
 80039f0:	2269      	movs	r2, #105	; 0x69
 80039f2:	f8a3 2534 	strh.w	r2, [r3, #1332]	; 0x534
	seria[167].interval = 1047;
 80039f6:	4b10      	ldr	r3, [pc, #64]	; (8003a38 <inputseria+0xbf4>)
 80039f8:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 80039fc:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <inputseria+0xc08>)
 80039fe:	601a      	str	r2, [r3, #0]
	seria[167].waittime = 105;
 8003a00:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <inputseria+0xbf4>)
 8003a02:	2269      	movs	r2, #105	; 0x69
 8003a04:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
	seria[168].interval = 880;
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <inputseria+0xbf4>)
 8003a0a:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 8003a0e:	4a0d      	ldr	r2, [pc, #52]	; (8003a44 <inputseria+0xc00>)
 8003a10:	601a      	str	r2, [r3, #0]
	seria[168].waittime = 105;
 8003a12:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <inputseria+0xbf4>)
 8003a14:	2269      	movs	r2, #105	; 0x69
 8003a16:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
	seria[169].interval = 988;
 8003a1a:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <inputseria+0xbf4>)
 8003a1c:	f503 63a9 	add.w	r3, r3, #1352	; 0x548
 8003a20:	4a09      	ldr	r2, [pc, #36]	; (8003a48 <inputseria+0xc04>)
 8003a22:	601a      	str	r2, [r3, #0]
	seria[169].waittime = 2576;
 8003a24:	4b04      	ldr	r3, [pc, #16]	; (8003a38 <inputseria+0xbf4>)
 8003a26:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 8003a2a:	f8a3 254c 	strh.w	r2, [r3, #1356]	; 0x54c

}
 8003a2e:	bf00      	nop
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	200003c4 	.word	0x200003c4
 8003a3c:	442e8000 	.word	0x442e8000
 8003a40:	44440000 	.word	0x44440000
 8003a44:	445c0000 	.word	0x445c0000
 8003a48:	44770000 	.word	0x44770000
 8003a4c:	4482e000 	.word	0x4482e000
 8003a50:	4492e000 	.word	0x4492e000
 8003a54:	44a4e000 	.word	0x44a4e000
 8003a58:	44aea000 	.word	0x44aea000
 8003a5c:	44c40000 	.word	0x44c40000
 8003a60:	43930000 	.word	0x43930000
 8003a64:	43a50000 	.word	0x43a50000
 8003a68:	43ae8000 	.word	0x43ae8000
 8003a6c:	43c40000 	.word	0x43c40000
 8003a70:	43dc0000 	.word	0x43dc0000
 8003a74:	43f70000 	.word	0x43f70000
 8003a78:	4402c000 	.word	0x4402c000
 8003a7c:	4424c000 	.word	0x4424c000

08003a80 <read_switch1>:


#include "PL_switch.h"
#include "gpio.h"

char read_switch1(void){
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0

	char check=(HAL_GPIO_ReadPin(SWITCH_1_GPIO_Port,SWITCH_1_Pin)==0);
 8003a86:	2140      	movs	r1, #64	; 0x40
 8003a88:	4807      	ldr	r0, [pc, #28]	; (8003aa8 <read_switch1+0x28>)
 8003a8a:	f007 f925 	bl	800acd8 <HAL_GPIO_ReadPin>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	bf0c      	ite	eq
 8003a94:	2301      	moveq	r3, #1
 8003a96:	2300      	movne	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	71fb      	strb	r3, [r7, #7]


return check;
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	48000400 	.word	0x48000400

08003aac <read_switch2>:

char read_switch2(void){
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0

	char check=(HAL_GPIO_ReadPin(SWITCH_2_GPIO_Port,SWITCH_2_Pin)==0);
 8003ab2:	2180      	movs	r1, #128	; 0x80
 8003ab4:	4807      	ldr	r0, [pc, #28]	; (8003ad4 <read_switch2+0x28>)
 8003ab6:	f007 f90f 	bl	800acd8 <HAL_GPIO_ReadPin>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bf0c      	ite	eq
 8003ac0:	2301      	moveq	r3, #1
 8003ac2:	2300      	movne	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	71fb      	strb	r3, [r7, #7]


return check;
 8003ac8:	79fb      	ldrb	r3, [r7, #7]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	48000400 	.word	0x48000400

08003ad8 <pl_timer_init>:
#include "tim.h"

volatile uint32_t g_timCount;


void pl_timer_init(void){
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8003adc:	4802      	ldr	r0, [pc, #8]	; (8003ae8 <pl_timer_init+0x10>)
 8003ade:	f008 fe91 	bl	800c804 <HAL_TIM_Base_Start_IT>
}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	2000131c 	.word	0x2000131c

08003aec <pl_timer_count>:

void pl_timer_count(void){
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
	 g_timCount++;
 8003af0:	4b04      	ldr	r3, [pc, #16]	; (8003b04 <pl_timer_count+0x18>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3301      	adds	r3, #1
 8003af6:	4a03      	ldr	r2, [pc, #12]	; (8003b04 <pl_timer_count+0x18>)
 8003af8:	6013      	str	r3, [r2, #0]
}
 8003afa:	bf00      	nop
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	20000954 	.word	0x20000954

08003b08 <wait_ms>:


void wait_ms(uint32_t wait_time) {
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8003b10:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <wait_ms+0x30>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 8003b16:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <wait_ms+0x34>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	625a      	str	r2, [r3, #36]	; 0x24
        while (g_timCount < wait_time) {
 8003b1e:	bf00      	nop
 8003b20:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <wait_ms+0x30>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d8fa      	bhi.n	8003b20 <wait_ms+0x18>
        }

}
 8003b2a:	bf00      	nop
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	20000954 	.word	0x20000954
 8003b3c:	2000131c 	.word	0x2000131c

08003b40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003b46:	463b      	mov	r3, r7
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	605a      	str	r2, [r3, #4]
 8003b4e:	609a      	str	r2, [r3, #8]
 8003b50:	60da      	str	r2, [r3, #12]
 8003b52:	611a      	str	r2, [r3, #16]
 8003b54:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003b56:	4b46      	ldr	r3, [pc, #280]	; (8003c70 <MX_ADC1_Init+0x130>)
 8003b58:	4a46      	ldr	r2, [pc, #280]	; (8003c74 <MX_ADC1_Init+0x134>)
 8003b5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8003b5c:	4b44      	ldr	r3, [pc, #272]	; (8003c70 <MX_ADC1_Init+0x130>)
 8003b5e:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8003b62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8003b64:	4b42      	ldr	r3, [pc, #264]	; (8003c70 <MX_ADC1_Init+0x130>)
 8003b66:	2208      	movs	r2, #8
 8003b68:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b6a:	4b41      	ldr	r3, [pc, #260]	; (8003c70 <MX_ADC1_Init+0x130>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003b70:	4b3f      	ldr	r3, [pc, #252]	; (8003c70 <MX_ADC1_Init+0x130>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003b76:	4b3e      	ldr	r3, [pc, #248]	; (8003c70 <MX_ADC1_Init+0x130>)
 8003b78:	2204      	movs	r2, #4
 8003b7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003b7c:	4b3c      	ldr	r3, [pc, #240]	; (8003c70 <MX_ADC1_Init+0x130>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003b82:	4b3b      	ldr	r3, [pc, #236]	; (8003c70 <MX_ADC1_Init+0x130>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8003b88:	4b39      	ldr	r3, [pc, #228]	; (8003c70 <MX_ADC1_Init+0x130>)
 8003b8a:	2205      	movs	r2, #5
 8003b8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003b8e:	4b38      	ldr	r3, [pc, #224]	; (8003c70 <MX_ADC1_Init+0x130>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b96:	4b36      	ldr	r3, [pc, #216]	; (8003c70 <MX_ADC1_Init+0x130>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003b9c:	4b34      	ldr	r3, [pc, #208]	; (8003c70 <MX_ADC1_Init+0x130>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003ba2:	4b33      	ldr	r3, [pc, #204]	; (8003c70 <MX_ADC1_Init+0x130>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003baa:	4b31      	ldr	r3, [pc, #196]	; (8003c70 <MX_ADC1_Init+0x130>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003bb0:	4b2f      	ldr	r3, [pc, #188]	; (8003c70 <MX_ADC1_Init+0x130>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003bb8:	482d      	ldr	r0, [pc, #180]	; (8003c70 <MX_ADC1_Init+0x130>)
 8003bba:	f005 fa75 	bl	80090a8 <HAL_ADC_Init>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8003bc4:	f000 fb27 	bl	8004216 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8003bc8:	4b2b      	ldr	r3, [pc, #172]	; (8003c78 <MX_ADC1_Init+0x138>)
 8003bca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003bcc:	2306      	movs	r3, #6
 8003bce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003bd4:	237f      	movs	r3, #127	; 0x7f
 8003bd6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003bd8:	2304      	movs	r3, #4
 8003bda:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003be0:	463b      	mov	r3, r7
 8003be2:	4619      	mov	r1, r3
 8003be4:	4822      	ldr	r0, [pc, #136]	; (8003c70 <MX_ADC1_Init+0x130>)
 8003be6:	f005 fdd3 	bl	8009790 <HAL_ADC_ConfigChannel>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8003bf0:	f000 fb11 	bl	8004216 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003bf4:	4b21      	ldr	r3, [pc, #132]	; (8003c7c <MX_ADC1_Init+0x13c>)
 8003bf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003bf8:	230c      	movs	r3, #12
 8003bfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003bfc:	463b      	mov	r3, r7
 8003bfe:	4619      	mov	r1, r3
 8003c00:	481b      	ldr	r0, [pc, #108]	; (8003c70 <MX_ADC1_Init+0x130>)
 8003c02:	f005 fdc5 	bl	8009790 <HAL_ADC_ConfigChannel>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8003c0c:	f000 fb03 	bl	8004216 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003c10:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <MX_ADC1_Init+0x140>)
 8003c12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003c14:	2312      	movs	r3, #18
 8003c16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c18:	463b      	mov	r3, r7
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4814      	ldr	r0, [pc, #80]	; (8003c70 <MX_ADC1_Init+0x130>)
 8003c1e:	f005 fdb7 	bl	8009790 <HAL_ADC_ConfigChannel>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8003c28:	f000 faf5 	bl	8004216 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003c2c:	4b15      	ldr	r3, [pc, #84]	; (8003c84 <MX_ADC1_Init+0x144>)
 8003c2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003c30:	2318      	movs	r3, #24
 8003c32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c34:	463b      	mov	r3, r7
 8003c36:	4619      	mov	r1, r3
 8003c38:	480d      	ldr	r0, [pc, #52]	; (8003c70 <MX_ADC1_Init+0x130>)
 8003c3a:	f005 fda9 	bl	8009790 <HAL_ADC_ConfigChannel>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8003c44:	f000 fae7 	bl	8004216 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003c48:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <MX_ADC1_Init+0x148>)
 8003c4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8003c4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c50:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c52:	463b      	mov	r3, r7
 8003c54:	4619      	mov	r1, r3
 8003c56:	4806      	ldr	r0, [pc, #24]	; (8003c70 <MX_ADC1_Init+0x130>)
 8003c58:	f005 fd9a 	bl	8009790 <HAL_ADC_ConfigChannel>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8003c62:	f000 fad8 	bl	8004216 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003c66:	bf00      	nop
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000958 	.word	0x20000958
 8003c74:	50040000 	.word	0x50040000
 8003c78:	43210000 	.word	0x43210000
 8003c7c:	3ef08000 	.word	0x3ef08000
 8003c80:	32601000 	.word	0x32601000
 8003c84:	2e300800 	.word	0x2e300800
 8003c88:	2a000400 	.word	0x2a000400

08003c8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b0a0      	sub	sp, #128	; 0x80
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	605a      	str	r2, [r3, #4]
 8003c9e:	609a      	str	r2, [r3, #8]
 8003ca0:	60da      	str	r2, [r3, #12]
 8003ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ca4:	f107 0318 	add.w	r3, r7, #24
 8003ca8:	2254      	movs	r2, #84	; 0x54
 8003caa:	2100      	movs	r1, #0
 8003cac:	4618      	mov	r0, r3
 8003cae:	f00a fad1 	bl	800e254 <memset>
  if(adcHandle->Instance==ADC1)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a47      	ldr	r2, [pc, #284]	; (8003dd4 <HAL_ADC_MspInit+0x148>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	f040 8087 	bne.w	8003dcc <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003cbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003cc2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003cc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003cc8:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 3;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8003cd2:	2310      	movs	r3, #16
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003cd6:	2307      	movs	r3, #7
 8003cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003cde:	2302      	movs	r3, #2
 8003ce0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003ce2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ce6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ce8:	f107 0318 	add.w	r3, r7, #24
 8003cec:	4618      	mov	r0, r3
 8003cee:	f008 fa49 	bl	800c184 <HAL_RCCEx_PeriphCLKConfig>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8003cf8:	f000 fa8d 	bl	8004216 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003cfc:	4b36      	ldr	r3, [pc, #216]	; (8003dd8 <HAL_ADC_MspInit+0x14c>)
 8003cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d00:	4a35      	ldr	r2, [pc, #212]	; (8003dd8 <HAL_ADC_MspInit+0x14c>)
 8003d02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d08:	4b33      	ldr	r3, [pc, #204]	; (8003dd8 <HAL_ADC_MspInit+0x14c>)
 8003d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d14:	4b30      	ldr	r3, [pc, #192]	; (8003dd8 <HAL_ADC_MspInit+0x14c>)
 8003d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d18:	4a2f      	ldr	r2, [pc, #188]	; (8003dd8 <HAL_ADC_MspInit+0x14c>)
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d20:	4b2d      	ldr	r3, [pc, #180]	; (8003dd8 <HAL_ADC_MspInit+0x14c>)
 8003d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	613b      	str	r3, [r7, #16]
 8003d2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d2c:	4b2a      	ldr	r3, [pc, #168]	; (8003dd8 <HAL_ADC_MspInit+0x14c>)
 8003d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d30:	4a29      	ldr	r2, [pc, #164]	; (8003dd8 <HAL_ADC_MspInit+0x14c>)
 8003d32:	f043 0302 	orr.w	r3, r3, #2
 8003d36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d38:	4b27      	ldr	r3, [pc, #156]	; (8003dd8 <HAL_ADC_MspInit+0x14c>)
 8003d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = SENSOR_4_Pin|SENSOR_3_Pin|SENSOR_2_Pin;
 8003d44:	23e0      	movs	r3, #224	; 0xe0
 8003d46:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003d48:	230b      	movs	r3, #11
 8003d4a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003d54:	4619      	mov	r1, r3
 8003d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d5a:	f006 fe53 	bl	800aa04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR_1_Pin|BATTERY_Pin;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003d62:	230b      	movs	r3, #11
 8003d64:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d6a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003d6e:	4619      	mov	r1, r3
 8003d70:	481a      	ldr	r0, [pc, #104]	; (8003ddc <HAL_ADC_MspInit+0x150>)
 8003d72:	f006 fe47 	bl	800aa04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003d76:	4b1a      	ldr	r3, [pc, #104]	; (8003de0 <HAL_ADC_MspInit+0x154>)
 8003d78:	4a1a      	ldr	r2, [pc, #104]	; (8003de4 <HAL_ADC_MspInit+0x158>)
 8003d7a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003d7c:	4b18      	ldr	r3, [pc, #96]	; (8003de0 <HAL_ADC_MspInit+0x154>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d82:	4b17      	ldr	r3, [pc, #92]	; (8003de0 <HAL_ADC_MspInit+0x154>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d88:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <HAL_ADC_MspInit+0x154>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003d8e:	4b14      	ldr	r3, [pc, #80]	; (8003de0 <HAL_ADC_MspInit+0x154>)
 8003d90:	2280      	movs	r2, #128	; 0x80
 8003d92:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d94:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <HAL_ADC_MspInit+0x154>)
 8003d96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d9a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d9c:	4b10      	ldr	r3, [pc, #64]	; (8003de0 <HAL_ADC_MspInit+0x154>)
 8003d9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003da2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003da4:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <HAL_ADC_MspInit+0x154>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003daa:	4b0d      	ldr	r3, [pc, #52]	; (8003de0 <HAL_ADC_MspInit+0x154>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003db0:	480b      	ldr	r0, [pc, #44]	; (8003de0 <HAL_ADC_MspInit+0x154>)
 8003db2:	f006 fbf1 	bl	800a598 <HAL_DMA_Init>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8003dbc:	f000 fa2b 	bl	8004216 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a07      	ldr	r2, [pc, #28]	; (8003de0 <HAL_ADC_MspInit+0x154>)
 8003dc4:	64da      	str	r2, [r3, #76]	; 0x4c
 8003dc6:	4a06      	ldr	r2, [pc, #24]	; (8003de0 <HAL_ADC_MspInit+0x154>)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003dcc:	bf00      	nop
 8003dce:	3780      	adds	r7, #128	; 0x80
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	50040000 	.word	0x50040000
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	48000400 	.word	0x48000400
 8003de0:	200009bc 	.word	0x200009bc
 8003de4:	40020008 	.word	0x40020008

08003de8 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 8003df0:	f7fe fdba 	bl	8002968 <pl_callback_getSensor>

}
 8003df4:	bf00      	nop
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e02:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <MX_DMA_Init+0x38>)
 8003e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e06:	4a0b      	ldr	r2, [pc, #44]	; (8003e34 <MX_DMA_Init+0x38>)
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	6493      	str	r3, [r2, #72]	; 0x48
 8003e0e:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <MX_DMA_Init+0x38>)
 8003e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	607b      	str	r3, [r7, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	200b      	movs	r0, #11
 8003e20:	f006 fb83 	bl	800a52a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003e24:	200b      	movs	r0, #11
 8003e26:	f006 fb9c 	bl	800a562 <HAL_NVIC_EnableIRQ>

}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40021000 	.word	0x40021000

08003e38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e3e:	f107 030c 	add.w	r3, r7, #12
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	605a      	str	r2, [r3, #4]
 8003e48:	609a      	str	r2, [r3, #8]
 8003e4a:	60da      	str	r2, [r3, #12]
 8003e4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e4e:	4b39      	ldr	r3, [pc, #228]	; (8003f34 <MX_GPIO_Init+0xfc>)
 8003e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e52:	4a38      	ldr	r2, [pc, #224]	; (8003f34 <MX_GPIO_Init+0xfc>)
 8003e54:	f043 0304 	orr.w	r3, r3, #4
 8003e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e5a:	4b36      	ldr	r3, [pc, #216]	; (8003f34 <MX_GPIO_Init+0xfc>)
 8003e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5e:	f003 0304 	and.w	r3, r3, #4
 8003e62:	60bb      	str	r3, [r7, #8]
 8003e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e66:	4b33      	ldr	r3, [pc, #204]	; (8003f34 <MX_GPIO_Init+0xfc>)
 8003e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6a:	4a32      	ldr	r2, [pc, #200]	; (8003f34 <MX_GPIO_Init+0xfc>)
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e72:	4b30      	ldr	r3, [pc, #192]	; (8003f34 <MX_GPIO_Init+0xfc>)
 8003e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	607b      	str	r3, [r7, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e7e:	4b2d      	ldr	r3, [pc, #180]	; (8003f34 <MX_GPIO_Init+0xfc>)
 8003e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e82:	4a2c      	ldr	r2, [pc, #176]	; (8003f34 <MX_GPIO_Init+0xfc>)
 8003e84:	f043 0302 	orr.w	r3, r3, #2
 8003e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e8a:	4b2a      	ldr	r3, [pc, #168]	; (8003f34 <MX_GPIO_Init+0xfc>)
 8003e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSORLED_1_Pin|SENSORLED_2_Pin, GPIO_PIN_RESET);
 8003e96:	2200      	movs	r2, #0
 8003e98:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003e9c:	4826      	ldr	r0, [pc, #152]	; (8003f38 <MX_GPIO_Init+0x100>)
 8003e9e:	f006 ff33 	bl	800ad08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_ENABLE_Pin|MOTOR_CW_CCW_L_Pin, GPIO_PIN_RESET);
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eac:	f006 ff2c 	bl	800ad08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INTERFACELED_Pin|MOTOR_CW_CCW_R_Pin|MD_RESET_Pin, GPIO_PIN_RESET);
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	2138      	movs	r1, #56	; 0x38
 8003eb4:	4821      	ldr	r0, [pc, #132]	; (8003f3c <MX_GPIO_Init+0x104>)
 8003eb6:	f006 ff27 	bl	800ad08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SENSORLED_1_Pin|SENSORLED_2_Pin;
 8003eba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003ebe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ecc:	f107 030c 	add.w	r3, r7, #12
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4819      	ldr	r0, [pc, #100]	; (8003f38 <MX_GPIO_Init+0x100>)
 8003ed4:	f006 fd96 	bl	800aa04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_ENABLE_Pin|MOTOR_CW_CCW_L_Pin;
 8003ed8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003edc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eea:	f107 030c 	add.w	r3, r7, #12
 8003eee:	4619      	mov	r1, r3
 8003ef0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ef4:	f006 fd86 	bl	800aa04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = INTERFACELED_Pin|MOTOR_CW_CCW_R_Pin|MD_RESET_Pin;
 8003ef8:	2338      	movs	r3, #56	; 0x38
 8003efa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003efc:	2301      	movs	r3, #1
 8003efe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f04:	2300      	movs	r3, #0
 8003f06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f08:	f107 030c 	add.w	r3, r7, #12
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	480b      	ldr	r0, [pc, #44]	; (8003f3c <MX_GPIO_Init+0x104>)
 8003f10:	f006 fd78 	bl	800aa04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SWITCH_1_Pin|SWITCH_2_Pin;
 8003f14:	23c0      	movs	r3, #192	; 0xc0
 8003f16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f20:	f107 030c 	add.w	r3, r7, #12
 8003f24:	4619      	mov	r1, r3
 8003f26:	4805      	ldr	r0, [pc, #20]	; (8003f3c <MX_GPIO_Init+0x104>)
 8003f28:	f006 fd6c 	bl	800aa04 <HAL_GPIO_Init>

}
 8003f2c:	bf00      	nop
 8003f2e:	3720      	adds	r7, #32
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40021000 	.word	0x40021000
 8003f38:	48000800 	.word	0x48000800
 8003f3c:	48000400 	.word	0x48000400

08003f40 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003f44:	4b1b      	ldr	r3, [pc, #108]	; (8003fb4 <MX_I2C1_Init+0x74>)
 8003f46:	4a1c      	ldr	r2, [pc, #112]	; (8003fb8 <MX_I2C1_Init+0x78>)
 8003f48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8003f4a:	4b1a      	ldr	r3, [pc, #104]	; (8003fb4 <MX_I2C1_Init+0x74>)
 8003f4c:	4a1b      	ldr	r2, [pc, #108]	; (8003fbc <MX_I2C1_Init+0x7c>)
 8003f4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003f50:	4b18      	ldr	r3, [pc, #96]	; (8003fb4 <MX_I2C1_Init+0x74>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f56:	4b17      	ldr	r3, [pc, #92]	; (8003fb4 <MX_I2C1_Init+0x74>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f5c:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <MX_I2C1_Init+0x74>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003f62:	4b14      	ldr	r3, [pc, #80]	; (8003fb4 <MX_I2C1_Init+0x74>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003f68:	4b12      	ldr	r3, [pc, #72]	; (8003fb4 <MX_I2C1_Init+0x74>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f6e:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <MX_I2C1_Init+0x74>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f74:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <MX_I2C1_Init+0x74>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003f7a:	480e      	ldr	r0, [pc, #56]	; (8003fb4 <MX_I2C1_Init+0x74>)
 8003f7c:	f006 fedc 	bl	800ad38 <HAL_I2C_Init>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003f86:	f000 f946 	bl	8004216 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	4809      	ldr	r0, [pc, #36]	; (8003fb4 <MX_I2C1_Init+0x74>)
 8003f8e:	f007 f9d7 	bl	800b340 <HAL_I2CEx_ConfigAnalogFilter>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003f98:	f000 f93d 	bl	8004216 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4805      	ldr	r0, [pc, #20]	; (8003fb4 <MX_I2C1_Init+0x74>)
 8003fa0:	f007 fa19 	bl	800b3d6 <HAL_I2CEx_ConfigDigitalFilter>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003faa:	f000 f934 	bl	8004216 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003fae:	bf00      	nop
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000a04 	.word	0x20000a04
 8003fb8:	40005400 	.word	0x40005400
 8003fbc:	10909cec 	.word	0x10909cec

08003fc0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b09e      	sub	sp, #120	; 0x78
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	605a      	str	r2, [r3, #4]
 8003fd2:	609a      	str	r2, [r3, #8]
 8003fd4:	60da      	str	r2, [r3, #12]
 8003fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fd8:	f107 0310 	add.w	r3, r7, #16
 8003fdc:	2254      	movs	r2, #84	; 0x54
 8003fde:	2100      	movs	r1, #0
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f00a f937 	bl	800e254 <memset>
  if(i2cHandle->Instance==I2C1)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a1f      	ldr	r2, [pc, #124]	; (8004068 <HAL_I2C_MspInit+0xa8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d137      	bne.n	8004060 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003ff0:	2340      	movs	r3, #64	; 0x40
 8003ff2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ff8:	f107 0310 	add.w	r3, r7, #16
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f008 f8c1 	bl	800c184 <HAL_RCCEx_PeriphCLKConfig>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004008:	f000 f905 	bl	8004216 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800400c:	4b17      	ldr	r3, [pc, #92]	; (800406c <HAL_I2C_MspInit+0xac>)
 800400e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004010:	4a16      	ldr	r2, [pc, #88]	; (800406c <HAL_I2C_MspInit+0xac>)
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004018:	4b14      	ldr	r3, [pc, #80]	; (800406c <HAL_I2C_MspInit+0xac>)
 800401a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004024:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004028:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800402a:	2312      	movs	r3, #18
 800402c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800402e:	2301      	movs	r3, #1
 8004030:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004032:	2303      	movs	r3, #3
 8004034:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004036:	2304      	movs	r3, #4
 8004038:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800403a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800403e:	4619      	mov	r1, r3
 8004040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004044:	f006 fcde 	bl	800aa04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004048:	4b08      	ldr	r3, [pc, #32]	; (800406c <HAL_I2C_MspInit+0xac>)
 800404a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404c:	4a07      	ldr	r2, [pc, #28]	; (800406c <HAL_I2C_MspInit+0xac>)
 800404e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004052:	6593      	str	r3, [r2, #88]	; 0x58
 8004054:	4b05      	ldr	r3, [pc, #20]	; (800406c <HAL_I2C_MspInit+0xac>)
 8004056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800405c:	60bb      	str	r3, [r7, #8]
 800405e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004060:	bf00      	nop
 8004062:	3778      	adds	r7, #120	; 0x78
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40005400 	.word	0x40005400
 800406c:	40021000 	.word	0x40021000

08004070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004076:	f004 fd68 	bl	8008b4a <HAL_Init>
  /* USER CODE BEGIN Init */
 // setbuf(stdout, NULL);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800407a:	f000 f87d 	bl	8004178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800407e:	f7ff fedb 	bl	8003e38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004082:	f004 fc9f 	bl	80089c4 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8004086:	f003 fd7f 	bl	8007b88 <MX_TIM6_Init>
  MX_I2C1_Init();
 800408a:	f7ff ff59 	bl	8003f40 <MX_I2C1_Init>
  MX_DMA_Init();
 800408e:	f7ff feb5 	bl	8003dfc <MX_DMA_Init>
  MX_ADC1_Init();
 8004092:	f7ff fd55 	bl	8003b40 <MX_ADC1_Init>
  MX_TIM15_Init();
 8004096:	f003 fdad 	bl	8007bf4 <MX_TIM15_Init>
  MX_TIM1_Init();
 800409a:	f003 fc8b 	bl	80079b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800409e:	f003 fd19 	bl	8007ad4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  init_WallControl();
 80040a2:	f7fe f8c9 	bl	8002238 <init_WallControl>
  pl_motor_init();
 80040a6:	f7fe fa87 	bl	80025b8 <pl_motor_init>
  pl_speaker_init();
 80040aa:	f7fe fd67 	bl	8002b7c <pl_speaker_init>
  pl_timer_init();
 80040ae:	f7ff fd13 	bl	8003ad8 <pl_timer_init>
  pl_lcd_init();
 80040b2:	f7fe fa26 	bl	8002502 <pl_lcd_init>
  motor_init();
 80040b6:	f7fd f805 	bl	80010c4 <motor_init>
  record_reset();
 80040ba:	f003 fa5f 	bl	800757c <record_reset>
  input_parameter();
 80040be:	f003 ff19 	bl	8007ef4 <input_parameter>

  pl_lcd_puts("Hello");
 80040c2:	4829      	ldr	r0, [pc, #164]	; (8004168 <main+0xf8>)
 80040c4:	f7fe fa08 	bl	80024d8 <pl_lcd_puts>
  pl_lcd_pos(1, 0);
 80040c8:	2100      	movs	r1, #0
 80040ca:	2001      	movs	r0, #1
 80040cc:	f7fe fa3f 	bl	800254e <pl_lcd_pos>
  pl_lcd_puts("   STM32");
 80040d0:	4826      	ldr	r0, [pc, #152]	; (800416c <main+0xfc>)
 80040d2:	f7fe fa01 	bl	80024d8 <pl_lcd_puts>
  HAL_Delay(500);
 80040d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80040da:	f004 fdab 	bl	8008c34 <HAL_Delay>
  pl_lcd_clear();
 80040de:	f7fe fa4e 	bl	800257e <pl_lcd_clear>

  if(pl_getbatt() < LIPO_LIMIT){
 80040e2:	f7fe fbe5 	bl	80028b0 <pl_getbatt>
 80040e6:	ee10 3a10 	vmov	r3, s0
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fc fa2c 	bl	8000548 <__aeabi_f2d>
 80040f0:	a31b      	add	r3, pc, #108	; (adr r3, 8004160 <main+0xf0>)
 80040f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f6:	f7fc fcf1 	bl	8000adc <__aeabi_dcmplt>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d013      	beq.n	8004128 <main+0xb8>
	  pl_lcd_clear();
 8004100:	f7fe fa3d 	bl	800257e <pl_lcd_clear>
	  pl_lcd_pos(0, 0);
 8004104:	2100      	movs	r1, #0
 8004106:	2000      	movs	r0, #0
 8004108:	f7fe fa21 	bl	800254e <pl_lcd_pos>
	  pl_lcd_puts("LIPO");
 800410c:	4818      	ldr	r0, [pc, #96]	; (8004170 <main+0x100>)
 800410e:	f7fe f9e3 	bl	80024d8 <pl_lcd_puts>
	  pl_lcd_pos(1, 0);
 8004112:	2100      	movs	r1, #0
 8004114:	2001      	movs	r0, #1
 8004116:	f7fe fa1a 	bl	800254e <pl_lcd_pos>
	  pl_lcd_puts("error");
 800411a:	4816      	ldr	r0, [pc, #88]	; (8004174 <main+0x104>)
 800411c:	f7fe f9dc 	bl	80024d8 <pl_lcd_puts>
	  HAL_Delay(1000);
 8004120:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004124:	f004 fd86 	bl	8008c34 <HAL_Delay>
  }

  uint16_t cnt = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	80bb      	strh	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  mode1=mode_decision(0,mode1);
 800412c:	79fb      	ldrb	r3, [r7, #7]
 800412e:	4619      	mov	r1, r3
 8004130:	2000      	movs	r0, #0
 8004132:	f002 fef9 	bl	8006f28 <mode_decision>
 8004136:	4603      	mov	r3, r0
 8004138:	71fb      	strb	r3, [r7, #7]
	  wait_ms(1000);
 800413a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800413e:	f7ff fce3 	bl	8003b08 <wait_ms>
	  mode2=mode_decision(1,mode2);
 8004142:	79bb      	ldrb	r3, [r7, #6]
 8004144:	4619      	mov	r1, r3
 8004146:	2001      	movs	r0, #1
 8004148:	f002 feee 	bl	8006f28 <mode_decision>
 800414c:	4603      	mov	r3, r0
 800414e:	71bb      	strb	r3, [r7, #6]
	  mode_execution(mode1,mode2);
 8004150:	79ba      	ldrb	r2, [r7, #6]
 8004152:	79fb      	ldrb	r3, [r7, #7]
 8004154:	4611      	mov	r1, r2
 8004156:	4618      	mov	r0, r3
 8004158:	f002 fff0 	bl	800713c <mode_execution>
	  mode1=mode_decision(0,mode1);
 800415c:	e7e6      	b.n	800412c <main+0xbc>
 800415e:	bf00      	nop
 8004160:	9999999a 	.word	0x9999999a
 8004164:	40269999 	.word	0x40269999
 8004168:	080113a0 	.word	0x080113a0
 800416c:	080113a8 	.word	0x080113a8
 8004170:	080113b4 	.word	0x080113b4
 8004174:	080113bc 	.word	0x080113bc

08004178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b096      	sub	sp, #88	; 0x58
 800417c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800417e:	f107 0314 	add.w	r3, r7, #20
 8004182:	2244      	movs	r2, #68	; 0x44
 8004184:	2100      	movs	r1, #0
 8004186:	4618      	mov	r0, r3
 8004188:	f00a f864 	bl	800e254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800418c:	463b      	mov	r3, r7
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	605a      	str	r2, [r3, #4]
 8004194:	609a      	str	r2, [r3, #8]
 8004196:	60da      	str	r2, [r3, #12]
 8004198:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800419a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800419e:	f007 f975 	bl	800b48c <HAL_PWREx_ControlVoltageScaling>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80041a8:	f000 f835 	bl	8004216 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80041ac:	2301      	movs	r3, #1
 80041ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80041b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80041b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041b6:	2302      	movs	r3, #2
 80041b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80041ba:	2303      	movs	r3, #3
 80041bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 3;
 80041be:	2303      	movs	r3, #3
 80041c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80041c2:	2328      	movs	r3, #40	; 0x28
 80041c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80041c6:	2307      	movs	r3, #7
 80041c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80041ca:	2302      	movs	r3, #2
 80041cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80041ce:	2302      	movs	r3, #2
 80041d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041d2:	f107 0314 	add.w	r3, r7, #20
 80041d6:	4618      	mov	r0, r3
 80041d8:	f007 f9ae 	bl	800b538 <HAL_RCC_OscConfig>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80041e2:	f000 f818 	bl	8004216 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041e6:	230f      	movs	r3, #15
 80041e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041ea:	2303      	movs	r3, #3
 80041ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041ee:	2300      	movs	r3, #0
 80041f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80041f2:	2300      	movs	r3, #0
 80041f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80041f6:	2300      	movs	r3, #0
 80041f8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80041fa:	463b      	mov	r3, r7
 80041fc:	2104      	movs	r1, #4
 80041fe:	4618      	mov	r0, r3
 8004200:	f007 fdba 	bl	800bd78 <HAL_RCC_ClockConfig>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800420a:	f000 f804 	bl	8004216 <Error_Handler>
  }
}
 800420e:	bf00      	nop
 8004210:	3758      	adds	r7, #88	; 0x58
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004216:	b480      	push	{r7}
 8004218:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800421a:	b672      	cpsid	i
}
 800421c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800421e:	e7fe      	b.n	800421e <Error_Handler+0x8>

08004220 <test_motor_start>:
parameter_speed speed1000_shortest;




void test_motor_start(MOTOR_MODE *wallmode){
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
	wallmode->WallControlMode=1;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]
	wallmode->WallControlStatus=0;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	705a      	strb	r2, [r3, #1]
	wallmode->WallCutMode=0;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	70da      	strb	r2, [r3, #3]
	wallmode->calMazeMode=0;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	709a      	strb	r2, [r3, #2]
	pl_motor_standby(1);
 8004240:	2001      	movs	r0, #1
 8004242:	f7fe f9d5 	bl	80025f0 <pl_motor_standby>
	HAL_Delay(500);
 8004246:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800424a:	f004 fcf3 	bl	8008c34 <HAL_Delay>
	pl_motor_start();
 800424e:	f7fe fa39 	bl	80026c4 <pl_motor_start>

}
 8004252:	bf00      	nop
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <test_motor_stop>:

void test_motor_stop(void){
 800425a:	b580      	push	{r7, lr}
 800425c:	af00      	add	r7, sp, #0
	pl_motor_stop();
 800425e:	f7fe fa45 	bl	80026ec <pl_motor_stop>
	HAL_Delay(500);
 8004262:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004266:	f004 fce5 	bl	8008c34 <HAL_Delay>
	pl_motor_standby(0);
 800426a:	2000      	movs	r0, #0
 800426c:	f7fe f9c0 	bl	80025f0 <pl_motor_standby>
}
 8004270:	bf00      	nop
 8004272:	bd80      	pop	{r7, pc}

08004274 <slalomR>:

void slalomR(parameter turnpara,char test_mode,char shortest_mode) {
 8004274:	b084      	sub	sp, #16
 8004276:	b580      	push	{r7, lr}
 8004278:	b082      	sub	sp, #8
 800427a:	af00      	add	r7, sp, #0
 800427c:	f107 0c10 	add.w	ip, r7, #16
 8004280:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8004284:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004288:	2b01      	cmp	r3, #1
 800428a:	f040 80c2 	bne.w	8004412 <slalomR+0x19e>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 800428e:	1d3b      	adds	r3, r7, #4
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff ffc5 	bl	8004220 <test_motor_start>
		straight_table(BACK_TO_CENTER + 270, 100, turnpara.g_speed, turnpara.g_speed,
 8004296:	edd7 6a04 	vldr	s13, [r7, #16]
 800429a:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 800429e:	ed97 7a04 	vldr	s14, [r7, #16]
 80042a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80042a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042aa:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80042ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80042b2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80042b6:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 270, 100, turnpara.g_speed, turnpara.g_speed,
 80042ba:	eddf 5a8f 	vldr	s11, [pc, #572]	; 80044f8 <slalomR+0x284>
 80042be:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	eeb0 2a47 	vmov.f32	s4, s14
 80042c8:	eef0 1a46 	vmov.f32	s3, s12
 80042cc:	eeb0 1a66 	vmov.f32	s2, s13
 80042d0:	eddf 0a8a 	vldr	s1, [pc, #552]	; 80044fc <slalomR+0x288>
 80042d4:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 8004500 <slalomR+0x28c>
 80042d8:	f7fd fc2e 	bl	8001b38 <straight_table>
		wallmode.WallCutMode=0;
 80042dc:	2300      	movs	r3, #0
 80042de:	71fb      	strb	r3, [r7, #7]
		if(shortest_mode==0){
 80042e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d12b      	bne.n	8004340 <slalomR+0xcc>
			straight_table(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80042e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80042ec:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80042f0:	ee77 6a87 	vadd.f32	s13, s15, s14
 80042f4:	ed97 6a04 	vldr	s12, [r7, #16]
 80042f8:	edd7 5a04 	vldr	s11, [r7, #16]
 80042fc:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004300:	ed97 7a04 	vldr	s14, [r7, #16]
 8004304:	edd7 7a04 	vldr	s15, [r7, #16]
 8004308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800430c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004310:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004314:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004318:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800431c:	eddf 4a76 	vldr	s9, [pc, #472]	; 80044f8 <slalomR+0x284>
 8004320:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	eeb0 2a47 	vmov.f32	s4, s14
 800432a:	eef0 1a45 	vmov.f32	s3, s10
 800432e:	eeb0 1a65 	vmov.f32	s2, s11
 8004332:	eef0 0a46 	vmov.f32	s1, s12
 8004336:	eeb0 0a66 	vmov.f32	s0, s13
 800433a:	f7fd fbfd 	bl	8001b38 <straight_table>
 800433e:	e026      	b.n	800438e <slalomR+0x11a>
		}else{
			straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004340:	edd7 6a05 	vldr	s13, [r7, #20]
 8004344:	ed97 6a04 	vldr	s12, [r7, #16]
 8004348:	edd7 5a04 	vldr	s11, [r7, #16]
 800434c:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004350:	ed97 7a04 	vldr	s14, [r7, #16]
 8004354:	edd7 7a04 	vldr	s15, [r7, #16]
 8004358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800435c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004360:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004364:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004368:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800436c:	eddf 4a62 	vldr	s9, [pc, #392]	; 80044f8 <slalomR+0x284>
 8004370:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	eeb0 2a47 	vmov.f32	s4, s14
 800437a:	eef0 1a45 	vmov.f32	s3, s10
 800437e:	eeb0 1a65 	vmov.f32	s2, s11
 8004382:	eef0 0a46 	vmov.f32	s1, s12
 8004386:	eeb0 0a66 	vmov.f32	s0, s13
 800438a:	f7fd fbd5 	bl	8001b38 <straight_table>
		}

		slalom_table(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800438e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004392:	ed97 7a07 	vldr	s14, [r7, #28]
 8004396:	edd7 6a08 	vldr	s13, [r7, #32]
 800439a:	eef0 2a66 	vmov.f32	s5, s13
 800439e:	eeb0 2a47 	vmov.f32	s4, s14
 80043a2:	eddf 1a58 	vldr	s3, [pc, #352]	; 8004504 <slalomR+0x290>
 80043a6:	ed9f 1a57 	vldr	s2, [pc, #348]	; 8004504 <slalomR+0x290>
 80043aa:	eddf 0a53 	vldr	s1, [pc, #332]	; 80044f8 <slalomR+0x284>
 80043ae:	eeb0 0a67 	vmov.f32	s0, s15
 80043b2:	f7fd fda5 	bl	8001f00 <slalom_table>
		wallmode.WallControlMode=0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	713b      	strb	r3, [r7, #4]
		straight_table(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80043ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80043be:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80044f8 <slalomR+0x284>
 80043c2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80043c6:	ed97 6a04 	vldr	s12, [r7, #16]
 80043ca:	edd7 5a04 	vldr	s11, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80043ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80043d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80043d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043da:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80043de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80043e2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 80043e6:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80043ea:	ed9f 5a43 	vldr	s10, [pc, #268]	; 80044f8 <slalomR+0x284>
 80043ee:	ee87 7a85 	vdiv.f32	s14, s15, s10
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	eeb0 2a47 	vmov.f32	s4, s14
 80043f8:	eef0 1a65 	vmov.f32	s3, s11
 80043fc:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8004504 <slalomR+0x290>
 8004400:	eef0 0a46 	vmov.f32	s1, s12
 8004404:	eeb0 0a66 	vmov.f32	s0, s13
 8004408:	f7fd fb96 	bl	8001b38 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 800440c:	f7ff ff25 	bl	800425a <test_motor_stop>
		wallmode.WallCutMode=0;
				straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);

	}
}
 8004410:	e06b      	b.n	80044ea <slalomR+0x276>
		wallmode.WallControlMode=1;
 8004412:	2301      	movs	r3, #1
 8004414:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8004416:	2300      	movs	r3, #0
 8004418:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=0;
 800441a:	2300      	movs	r3, #0
 800441c:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 800441e:	2300      	movs	r3, #0
 8004420:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004422:	edd7 6a05 	vldr	s13, [r7, #20]
 8004426:	ed97 6a04 	vldr	s12, [r7, #16]
 800442a:	edd7 5a04 	vldr	s11, [r7, #16]
 800442e:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004432:	ed97 7a04 	vldr	s14, [r7, #16]
 8004436:	edd7 7a04 	vldr	s15, [r7, #16]
 800443a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004442:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004446:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800444a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800444e:	eddf 4a2a 	vldr	s9, [pc, #168]	; 80044f8 <slalomR+0x284>
 8004452:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	eeb0 2a47 	vmov.f32	s4, s14
 800445c:	eef0 1a45 	vmov.f32	s3, s10
 8004460:	eeb0 1a65 	vmov.f32	s2, s11
 8004464:	eef0 0a46 	vmov.f32	s1, s12
 8004468:	eeb0 0a66 	vmov.f32	s0, s13
 800446c:	f7fd fb64 	bl	8001b38 <straight_table>
		slalom_table(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 8004470:	edd7 7a04 	vldr	s15, [r7, #16]
 8004474:	ed97 7a07 	vldr	s14, [r7, #28]
 8004478:	edd7 6a08 	vldr	s13, [r7, #32]
 800447c:	eef0 2a66 	vmov.f32	s5, s13
 8004480:	eeb0 2a47 	vmov.f32	s4, s14
 8004484:	eddf 1a1f 	vldr	s3, [pc, #124]	; 8004504 <slalomR+0x290>
 8004488:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8004504 <slalomR+0x290>
 800448c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80044f8 <slalomR+0x284>
 8004490:	eeb0 0a67 	vmov.f32	s0, s15
 8004494:	f7fd fd34 	bl	8001f00 <slalom_table>
		wallmode.WallControlMode=0;
 8004498:	2300      	movs	r3, #0
 800449a:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 800449c:	2300      	movs	r3, #0
 800449e:	71fb      	strb	r3, [r7, #7]
				straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80044a0:	edd7 6a06 	vldr	s13, [r7, #24]
 80044a4:	ed97 6a04 	vldr	s12, [r7, #16]
 80044a8:	edd7 5a04 	vldr	s11, [r7, #16]
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80044ac:	ed97 7a04 	vldr	s14, [r7, #16]
 80044b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80044b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044b8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80044bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80044c0:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 80044c4:	eec7 7a05 	vdiv.f32	s15, s14, s10
				straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80044c8:	ed9f 5a0b 	vldr	s10, [pc, #44]	; 80044f8 <slalomR+0x284>
 80044cc:	ee87 7a85 	vdiv.f32	s14, s15, s10
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	eeb0 2a47 	vmov.f32	s4, s14
 80044d6:	eef0 1a65 	vmov.f32	s3, s11
 80044da:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8004504 <slalomR+0x290>
 80044de:	eef0 0a46 	vmov.f32	s1, s12
 80044e2:	eeb0 0a66 	vmov.f32	s0, s13
 80044e6:	f7fd fb27 	bl	8001b38 <straight_table>
}
 80044ea:	bf00      	nop
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044f4:	b004      	add	sp, #16
 80044f6:	4770      	bx	lr
 80044f8:	42b40000 	.word	0x42b40000
 80044fc:	42c80000 	.word	0x42c80000
 8004500:	439ac000 	.word	0x439ac000
 8004504:	00000000 	.word	0x00000000

08004508 <slalomL>:

void slalomL(parameter turnpara,char test_mode,char shortest_mode) {
 8004508:	b084      	sub	sp, #16
 800450a:	b580      	push	{r7, lr}
 800450c:	b082      	sub	sp, #8
 800450e:	af00      	add	r7, sp, #0
 8004510:	f107 0c10 	add.w	ip, r7, #16
 8004514:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8004518:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800451c:	2b01      	cmp	r3, #1
 800451e:	f040 80c4 	bne.w	80046aa <slalomL+0x1a2>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 8004522:	1d3b      	adds	r3, r7, #4
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff fe7b 	bl	8004220 <test_motor_start>
		straight_table(BACK_TO_CENTER + 270, 100, turnpara.g_speed, turnpara.g_speed,
 800452a:	edd7 6a04 	vldr	s13, [r7, #16]
 800452e:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004532:	ed97 7a04 	vldr	s14, [r7, #16]
 8004536:	edd7 7a04 	vldr	s15, [r7, #16]
 800453a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004542:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004546:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800454a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 270, 100, turnpara.g_speed, turnpara.g_speed,
 800454e:	eddf 5a91 	vldr	s11, [pc, #580]	; 8004794 <slalomL+0x28c>
 8004552:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	eeb0 2a47 	vmov.f32	s4, s14
 800455c:	eef0 1a46 	vmov.f32	s3, s12
 8004560:	eeb0 1a66 	vmov.f32	s2, s13
 8004564:	eddf 0a8c 	vldr	s1, [pc, #560]	; 8004798 <slalomL+0x290>
 8004568:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 800479c <slalomL+0x294>
 800456c:	f7fd fae4 	bl	8001b38 <straight_table>
		wallmode.WallCutMode=0;
 8004570:	2300      	movs	r3, #0
 8004572:	71fb      	strb	r3, [r7, #7]
		if(shortest_mode==0){
 8004574:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004578:	2b00      	cmp	r3, #0
 800457a:	d12b      	bne.n	80045d4 <slalomL+0xcc>
			straight_table(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800457c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004580:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004584:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004588:	ed97 6a04 	vldr	s12, [r7, #16]
 800458c:	edd7 5a04 	vldr	s11, [r7, #16]
 8004590:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004594:	ed97 7a04 	vldr	s14, [r7, #16]
 8004598:	edd7 7a04 	vldr	s15, [r7, #16]
 800459c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80045a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80045a8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80045ac:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80045b0:	eddf 4a78 	vldr	s9, [pc, #480]	; 8004794 <slalomL+0x28c>
 80045b4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	eeb0 2a47 	vmov.f32	s4, s14
 80045be:	eef0 1a45 	vmov.f32	s3, s10
 80045c2:	eeb0 1a65 	vmov.f32	s2, s11
 80045c6:	eef0 0a46 	vmov.f32	s1, s12
 80045ca:	eeb0 0a66 	vmov.f32	s0, s13
 80045ce:	f7fd fab3 	bl	8001b38 <straight_table>
 80045d2:	e026      	b.n	8004622 <slalomL+0x11a>
		}else{
			straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80045d4:	edd7 6a05 	vldr	s13, [r7, #20]
 80045d8:	ed97 6a04 	vldr	s12, [r7, #16]
 80045dc:	edd7 5a04 	vldr	s11, [r7, #16]
 80045e0:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80045e4:	ed97 7a04 	vldr	s14, [r7, #16]
 80045e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80045ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80045f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80045f8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80045fc:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004600:	eddf 4a64 	vldr	s9, [pc, #400]	; 8004794 <slalomL+0x28c>
 8004604:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	eeb0 2a47 	vmov.f32	s4, s14
 800460e:	eef0 1a45 	vmov.f32	s3, s10
 8004612:	eeb0 1a65 	vmov.f32	s2, s11
 8004616:	eef0 0a46 	vmov.f32	s1, s12
 800461a:	eeb0 0a66 	vmov.f32	s0, s13
 800461e:	f7fd fa8b 	bl	8001b38 <straight_table>
		}

		slalom_table(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8004622:	ed97 7a04 	vldr	s14, [r7, #16]
 8004626:	edd7 7a07 	vldr	s15, [r7, #28]
 800462a:	eef1 7a67 	vneg.f32	s15, s15
 800462e:	edd7 6a08 	vldr	s13, [r7, #32]
 8004632:	eef0 2a66 	vmov.f32	s5, s13
 8004636:	eeb0 2a67 	vmov.f32	s4, s15
 800463a:	eddf 1a59 	vldr	s3, [pc, #356]	; 80047a0 <slalomL+0x298>
 800463e:	ed9f 1a58 	vldr	s2, [pc, #352]	; 80047a0 <slalomL+0x298>
 8004642:	eddf 0a58 	vldr	s1, [pc, #352]	; 80047a4 <slalomL+0x29c>
 8004646:	eeb0 0a47 	vmov.f32	s0, s14
 800464a:	f7fd fc59 	bl	8001f00 <slalom_table>
		wallmode.WallControlMode=0;
 800464e:	2300      	movs	r3, #0
 8004650:	713b      	strb	r3, [r7, #4]
		straight_table(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004652:	edd7 7a06 	vldr	s15, [r7, #24]
 8004656:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004794 <slalomL+0x28c>
 800465a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800465e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004662:	edd7 5a04 	vldr	s11, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004666:	ed97 7a04 	vldr	s14, [r7, #16]
 800466a:	edd7 7a04 	vldr	s15, [r7, #16]
 800466e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004672:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004676:	ee27 7a87 	vmul.f32	s14, s15, s14
 800467a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800467e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004682:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8004794 <slalomL+0x28c>
 8004686:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	eeb0 2a47 	vmov.f32	s4, s14
 8004690:	eef0 1a65 	vmov.f32	s3, s11
 8004694:	ed9f 1a42 	vldr	s2, [pc, #264]	; 80047a0 <slalomL+0x298>
 8004698:	eef0 0a46 	vmov.f32	s1, s12
 800469c:	eeb0 0a66 	vmov.f32	s0, s13
 80046a0:	f7fd fa4a 	bl	8001b38 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 80046a4:	f7ff fdd9 	bl	800425a <test_motor_stop>
		wallmode.WallCutMode=0;
				straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);

	}
}
 80046a8:	e06d      	b.n	8004786 <slalomL+0x27e>
		wallmode.WallControlMode=1;
 80046aa:	2301      	movs	r3, #1
 80046ac:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 80046ae:	2300      	movs	r3, #0
 80046b0:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80046ba:	edd7 6a05 	vldr	s13, [r7, #20]
 80046be:	ed97 6a04 	vldr	s12, [r7, #16]
 80046c2:	edd7 5a04 	vldr	s11, [r7, #16]
 80046c6:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80046ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80046ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80046d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80046da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80046de:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80046e2:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80046e6:	eddf 4a2b 	vldr	s9, [pc, #172]	; 8004794 <slalomL+0x28c>
 80046ea:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	eeb0 2a47 	vmov.f32	s4, s14
 80046f4:	eef0 1a45 	vmov.f32	s3, s10
 80046f8:	eeb0 1a65 	vmov.f32	s2, s11
 80046fc:	eef0 0a46 	vmov.f32	s1, s12
 8004700:	eeb0 0a66 	vmov.f32	s0, s13
 8004704:	f7fd fa18 	bl	8001b38 <straight_table>
		slalom_table(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8004708:	ed97 7a04 	vldr	s14, [r7, #16]
 800470c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004710:	eef1 7a67 	vneg.f32	s15, s15
 8004714:	edd7 6a08 	vldr	s13, [r7, #32]
 8004718:	eef0 2a66 	vmov.f32	s5, s13
 800471c:	eeb0 2a67 	vmov.f32	s4, s15
 8004720:	eddf 1a1f 	vldr	s3, [pc, #124]	; 80047a0 <slalomL+0x298>
 8004724:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 80047a0 <slalomL+0x298>
 8004728:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80047a4 <slalomL+0x29c>
 800472c:	eeb0 0a47 	vmov.f32	s0, s14
 8004730:	f7fd fbe6 	bl	8001f00 <slalom_table>
		wallmode.WallControlMode=0;
 8004734:	2300      	movs	r3, #0
 8004736:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 8004738:	2300      	movs	r3, #0
 800473a:	71fb      	strb	r3, [r7, #7]
				straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800473c:	edd7 6a06 	vldr	s13, [r7, #24]
 8004740:	ed97 6a04 	vldr	s12, [r7, #16]
 8004744:	edd7 5a04 	vldr	s11, [r7, #16]
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004748:	ed97 7a04 	vldr	s14, [r7, #16]
 800474c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004754:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004758:	ee27 7a87 	vmul.f32	s14, s15, s14
 800475c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8004760:	eec7 7a05 	vdiv.f32	s15, s14, s10
				straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004764:	ed9f 5a0b 	vldr	s10, [pc, #44]	; 8004794 <slalomL+0x28c>
 8004768:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	eeb0 2a47 	vmov.f32	s4, s14
 8004772:	eef0 1a65 	vmov.f32	s3, s11
 8004776:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80047a0 <slalomL+0x298>
 800477a:	eef0 0a46 	vmov.f32	s1, s12
 800477e:	eeb0 0a66 	vmov.f32	s0, s13
 8004782:	f7fd f9d9 	bl	8001b38 <straight_table>
}
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004790:	b004      	add	sp, #16
 8004792:	4770      	bx	lr
 8004794:	42b40000 	.word	0x42b40000
 8004798:	42c80000 	.word	0x42c80000
 800479c:	439ac000 	.word	0x439ac000
 80047a0:	00000000 	.word	0x00000000
 80047a4:	c2b40000 	.word	0xc2b40000

080047a8 <turn90R>:



void turn90R(parameter turnpara, char test_mode) {
 80047a8:	b084      	sub	sp, #16
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b082      	sub	sp, #8
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	f107 0c10 	add.w	ip, r7, #16
 80047b4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 80047b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80047bc:	2b01      	cmp	r3, #1
 80047be:	f040 8092 	bne.w	80048e6 <turn90R+0x13e>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 80047c2:	1d3b      	adds	r3, r7, #4
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff fd2b 	bl	8004220 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 80047ca:	edd7 6a04 	vldr	s13, [r7, #16]
 80047ce:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80047d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80047d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80047da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047de:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80047e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80047e6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80047ea:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 80047ee:	eddf 5a77 	vldr	s11, [pc, #476]	; 80049cc <turn90R+0x224>
 80047f2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	eeb0 2a47 	vmov.f32	s4, s14
 80047fc:	eef0 1a46 	vmov.f32	s3, s12
 8004800:	eeb0 1a66 	vmov.f32	s2, s13
 8004804:	eddf 0a72 	vldr	s1, [pc, #456]	; 80049d0 <turn90R+0x228>
 8004808:	ed9f 0a72 	vldr	s0, [pc, #456]	; 80049d4 <turn90R+0x22c>
 800480c:	f7fd f994 	bl	8001b38 <straight_table>
		wallmode.WallCutMode=1;
 8004810:	2301      	movs	r3, #1
 8004812:	71fb      	strb	r3, [r7, #7]

		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004814:	edd7 6a05 	vldr	s13, [r7, #20]
 8004818:	ed97 6a04 	vldr	s12, [r7, #16]
 800481c:	edd7 5a04 	vldr	s11, [r7, #16]
 8004820:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004824:	ed97 7a04 	vldr	s14, [r7, #16]
 8004828:	edd7 7a04 	vldr	s15, [r7, #16]
 800482c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004830:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004834:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004838:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800483c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004840:	eddf 4a62 	vldr	s9, [pc, #392]	; 80049cc <turn90R+0x224>
 8004844:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	eeb0 2a47 	vmov.f32	s4, s14
 800484e:	eef0 1a45 	vmov.f32	s3, s10
 8004852:	eeb0 1a65 	vmov.f32	s2, s11
 8004856:	eef0 0a46 	vmov.f32	s1, s12
 800485a:	eeb0 0a66 	vmov.f32	s0, s13
 800485e:	f7fd f96b 	bl	8001b38 <straight_table>

		slalom_table(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 8004862:	edd7 7a04 	vldr	s15, [r7, #16]
 8004866:	ed97 7a07 	vldr	s14, [r7, #28]
 800486a:	edd7 6a08 	vldr	s13, [r7, #32]
 800486e:	eef0 2a66 	vmov.f32	s5, s13
 8004872:	eeb0 2a47 	vmov.f32	s4, s14
 8004876:	eddf 1a58 	vldr	s3, [pc, #352]	; 80049d8 <turn90R+0x230>
 800487a:	ed9f 1a57 	vldr	s2, [pc, #348]	; 80049d8 <turn90R+0x230>
 800487e:	eddf 0a53 	vldr	s1, [pc, #332]	; 80049cc <turn90R+0x224>
 8004882:	eeb0 0a67 	vmov.f32	s0, s15
 8004886:	f7fd fb3b 	bl	8001f00 <slalom_table>
		wallmode.WallControlMode=0;
 800488a:	2300      	movs	r3, #0
 800488c:	713b      	strb	r3, [r7, #4]
		straight_table(180 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800488e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004892:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80049dc <turn90R+0x234>
 8004896:	ee77 6a87 	vadd.f32	s13, s15, s14
 800489a:	ed97 6a04 	vldr	s12, [r7, #16]
 800489e:	edd7 5a04 	vldr	s11, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80048a2:	ed97 7a04 	vldr	s14, [r7, #16]
 80048a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80048aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ae:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80048b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80048b6:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 80048ba:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(180 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80048be:	ed9f 5a43 	vldr	s10, [pc, #268]	; 80049cc <turn90R+0x224>
 80048c2:	ee87 7a85 	vdiv.f32	s14, s15, s10
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	eeb0 2a47 	vmov.f32	s4, s14
 80048cc:	eef0 1a65 	vmov.f32	s3, s11
 80048d0:	ed9f 1a41 	vldr	s2, [pc, #260]	; 80049d8 <turn90R+0x230>
 80048d4:	eef0 0a46 	vmov.f32	s1, s12
 80048d8:	eeb0 0a66 	vmov.f32	s0, s13
 80048dc:	f7fd f92c 	bl	8001b38 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 80048e0:	f7ff fcbb 	bl	800425a <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);

	}
}
 80048e4:	e06b      	b.n	80049be <turn90R+0x216>
		wallmode.WallControlMode=1;
 80048e6:	2301      	movs	r3, #1
 80048e8:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 80048ea:	2300      	movs	r3, #0
 80048ec:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=1;
 80048ee:	2301      	movs	r3, #1
 80048f0:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80048f6:	edd7 6a05 	vldr	s13, [r7, #20]
 80048fa:	ed97 6a04 	vldr	s12, [r7, #16]
 80048fe:	edd7 5a04 	vldr	s11, [r7, #16]
 8004902:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004906:	ed97 7a04 	vldr	s14, [r7, #16]
 800490a:	edd7 7a04 	vldr	s15, [r7, #16]
 800490e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004912:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004916:	ee27 7a87 	vmul.f32	s14, s15, s14
 800491a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800491e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004922:	eddf 4a2a 	vldr	s9, [pc, #168]	; 80049cc <turn90R+0x224>
 8004926:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	eeb0 2a47 	vmov.f32	s4, s14
 8004930:	eef0 1a45 	vmov.f32	s3, s10
 8004934:	eeb0 1a65 	vmov.f32	s2, s11
 8004938:	eef0 0a46 	vmov.f32	s1, s12
 800493c:	eeb0 0a66 	vmov.f32	s0, s13
 8004940:	f7fd f8fa 	bl	8001b38 <straight_table>
		slalom_table(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 8004944:	edd7 7a04 	vldr	s15, [r7, #16]
 8004948:	ed97 7a07 	vldr	s14, [r7, #28]
 800494c:	edd7 6a08 	vldr	s13, [r7, #32]
 8004950:	eef0 2a66 	vmov.f32	s5, s13
 8004954:	eeb0 2a47 	vmov.f32	s4, s14
 8004958:	eddf 1a1f 	vldr	s3, [pc, #124]	; 80049d8 <turn90R+0x230>
 800495c:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 80049d8 <turn90R+0x230>
 8004960:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80049cc <turn90R+0x224>
 8004964:	eeb0 0a67 	vmov.f32	s0, s15
 8004968:	f7fd faca 	bl	8001f00 <slalom_table>
		wallmode.WallControlMode=0;
 800496c:	2300      	movs	r3, #0
 800496e:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 8004970:	2300      	movs	r3, #0
 8004972:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004974:	edd7 6a06 	vldr	s13, [r7, #24]
 8004978:	ed97 6a04 	vldr	s12, [r7, #16]
 800497c:	edd7 5a04 	vldr	s11, [r7, #16]
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004980:	ed97 7a04 	vldr	s14, [r7, #16]
 8004984:	edd7 7a04 	vldr	s15, [r7, #16]
 8004988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800498c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004990:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004994:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8004998:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800499c:	ed9f 5a0b 	vldr	s10, [pc, #44]	; 80049cc <turn90R+0x224>
 80049a0:	ee87 7a85 	vdiv.f32	s14, s15, s10
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	eeb0 2a47 	vmov.f32	s4, s14
 80049aa:	eef0 1a65 	vmov.f32	s3, s11
 80049ae:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80049d8 <turn90R+0x230>
 80049b2:	eef0 0a46 	vmov.f32	s1, s12
 80049b6:	eeb0 0a66 	vmov.f32	s0, s13
 80049ba:	f7fd f8bd 	bl	8001b38 <straight_table>
}
 80049be:	bf00      	nop
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049c8:	b004      	add	sp, #16
 80049ca:	4770      	bx	lr
 80049cc:	42b40000 	.word	0x42b40000
 80049d0:	42c80000 	.word	0x42c80000
 80049d4:	435b8000 	.word	0x435b8000
 80049d8:	00000000 	.word	0x00000000
 80049dc:	43340000 	.word	0x43340000

080049e0 <turn90L>:

void turn90L(parameter turnpara, char test_mode) {
 80049e0:	b084      	sub	sp, #16
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b082      	sub	sp, #8
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	f107 0c10 	add.w	ip, r7, #16
 80049ec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 80049f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	f040 8094 	bne.w	8004b22 <turn90L+0x142>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 80049fa:	1d3b      	adds	r3, r7, #4
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff fc0f 	bl	8004220 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8004a02:	edd7 6a04 	vldr	s13, [r7, #16]
 8004a06:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004a0a:	ed97 7a04 	vldr	s14, [r7, #16]
 8004a0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a16:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004a1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a1e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8004a22:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8004a26:	eddf 5a79 	vldr	s11, [pc, #484]	; 8004c0c <turn90L+0x22c>
 8004a2a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	eeb0 2a47 	vmov.f32	s4, s14
 8004a34:	eef0 1a46 	vmov.f32	s3, s12
 8004a38:	eeb0 1a66 	vmov.f32	s2, s13
 8004a3c:	eddf 0a74 	vldr	s1, [pc, #464]	; 8004c10 <turn90L+0x230>
 8004a40:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8004c14 <turn90L+0x234>
 8004a44:	f7fd f878 	bl	8001b38 <straight_table>
		wallmode.WallCutMode=1;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	71fb      	strb	r3, [r7, #7]

		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004a4c:	edd7 6a05 	vldr	s13, [r7, #20]
 8004a50:	ed97 6a04 	vldr	s12, [r7, #16]
 8004a54:	edd7 5a04 	vldr	s11, [r7, #16]
 8004a58:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004a5c:	ed97 7a04 	vldr	s14, [r7, #16]
 8004a60:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a68:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004a6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a70:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004a74:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004a78:	eddf 4a64 	vldr	s9, [pc, #400]	; 8004c0c <turn90L+0x22c>
 8004a7c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	eeb0 2a47 	vmov.f32	s4, s14
 8004a86:	eef0 1a45 	vmov.f32	s3, s10
 8004a8a:	eeb0 1a65 	vmov.f32	s2, s11
 8004a8e:	eef0 0a46 	vmov.f32	s1, s12
 8004a92:	eeb0 0a66 	vmov.f32	s0, s13
 8004a96:	f7fd f84f 	bl	8001b38 <straight_table>

		slalom_table(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8004a9a:	ed97 7a04 	vldr	s14, [r7, #16]
 8004a9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004aa2:	eef1 7a67 	vneg.f32	s15, s15
 8004aa6:	edd7 6a08 	vldr	s13, [r7, #32]
 8004aaa:	eef0 2a66 	vmov.f32	s5, s13
 8004aae:	eeb0 2a67 	vmov.f32	s4, s15
 8004ab2:	eddf 1a59 	vldr	s3, [pc, #356]	; 8004c18 <turn90L+0x238>
 8004ab6:	ed9f 1a58 	vldr	s2, [pc, #352]	; 8004c18 <turn90L+0x238>
 8004aba:	eddf 0a58 	vldr	s1, [pc, #352]	; 8004c1c <turn90L+0x23c>
 8004abe:	eeb0 0a47 	vmov.f32	s0, s14
 8004ac2:	f7fd fa1d 	bl	8001f00 <slalom_table>
		wallmode.WallControlMode=0;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	713b      	strb	r3, [r7, #4]
		straight_table(180 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004aca:	edd7 7a06 	vldr	s15, [r7, #24]
 8004ace:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8004c20 <turn90L+0x240>
 8004ad2:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004ad6:	ed97 6a04 	vldr	s12, [r7, #16]
 8004ada:	edd7 5a04 	vldr	s11, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004ade:	ed97 7a04 	vldr	s14, [r7, #16]
 8004ae2:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aea:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004aee:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004af2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8004af6:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(180 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004afa:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8004c0c <turn90L+0x22c>
 8004afe:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	eeb0 2a47 	vmov.f32	s4, s14
 8004b08:	eef0 1a65 	vmov.f32	s3, s11
 8004b0c:	ed9f 1a42 	vldr	s2, [pc, #264]	; 8004c18 <turn90L+0x238>
 8004b10:	eef0 0a46 	vmov.f32	s1, s12
 8004b14:	eeb0 0a66 	vmov.f32	s0, s13
 8004b18:	f7fd f80e 	bl	8001b38 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 8004b1c:	f7ff fb9d 	bl	800425a <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);

	}
}
 8004b20:	e06d      	b.n	8004bfe <turn90L+0x21e>
		wallmode.WallControlMode=1;
 8004b22:	2301      	movs	r3, #1
 8004b24:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8004b26:	2300      	movs	r3, #0
 8004b28:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=1;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004b32:	edd7 6a05 	vldr	s13, [r7, #20]
 8004b36:	ed97 6a04 	vldr	s12, [r7, #16]
 8004b3a:	edd7 5a04 	vldr	s11, [r7, #16]
 8004b3e:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004b42:	ed97 7a04 	vldr	s14, [r7, #16]
 8004b46:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004b52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004b56:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004b5a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004b5e:	eddf 4a2b 	vldr	s9, [pc, #172]	; 8004c0c <turn90L+0x22c>
 8004b62:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	eeb0 2a47 	vmov.f32	s4, s14
 8004b6c:	eef0 1a45 	vmov.f32	s3, s10
 8004b70:	eeb0 1a65 	vmov.f32	s2, s11
 8004b74:	eef0 0a46 	vmov.f32	s1, s12
 8004b78:	eeb0 0a66 	vmov.f32	s0, s13
 8004b7c:	f7fc ffdc 	bl	8001b38 <straight_table>
		slalom_table(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8004b80:	ed97 7a04 	vldr	s14, [r7, #16]
 8004b84:	edd7 7a07 	vldr	s15, [r7, #28]
 8004b88:	eef1 7a67 	vneg.f32	s15, s15
 8004b8c:	edd7 6a08 	vldr	s13, [r7, #32]
 8004b90:	eef0 2a66 	vmov.f32	s5, s13
 8004b94:	eeb0 2a67 	vmov.f32	s4, s15
 8004b98:	eddf 1a1f 	vldr	s3, [pc, #124]	; 8004c18 <turn90L+0x238>
 8004b9c:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8004c18 <turn90L+0x238>
 8004ba0:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8004c1c <turn90L+0x23c>
 8004ba4:	eeb0 0a47 	vmov.f32	s0, s14
 8004ba8:	f7fd f9aa 	bl	8001f00 <slalom_table>
		wallmode.WallControlMode=0;
 8004bac:	2300      	movs	r3, #0
 8004bae:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004bb4:	edd7 6a06 	vldr	s13, [r7, #24]
 8004bb8:	ed97 6a04 	vldr	s12, [r7, #16]
 8004bbc:	edd7 5a04 	vldr	s11, [r7, #16]
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004bc0:	ed97 7a04 	vldr	s14, [r7, #16]
 8004bc4:	edd7 7a04 	vldr	s15, [r7, #16]
 8004bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bcc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004bd0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004bd4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8004bd8:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004bdc:	ed9f 5a0b 	vldr	s10, [pc, #44]	; 8004c0c <turn90L+0x22c>
 8004be0:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	eeb0 2a47 	vmov.f32	s4, s14
 8004bea:	eef0 1a65 	vmov.f32	s3, s11
 8004bee:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8004c18 <turn90L+0x238>
 8004bf2:	eef0 0a46 	vmov.f32	s1, s12
 8004bf6:	eeb0 0a66 	vmov.f32	s0, s13
 8004bfa:	f7fc ff9d 	bl	8001b38 <straight_table>
}
 8004bfe:	bf00      	nop
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c08:	b004      	add	sp, #16
 8004c0a:	4770      	bx	lr
 8004c0c:	42b40000 	.word	0x42b40000
 8004c10:	42c80000 	.word	0x42c80000
 8004c14:	435b8000 	.word	0x435b8000
 8004c18:	00000000 	.word	0x00000000
 8004c1c:	c2b40000 	.word	0xc2b40000
 8004c20:	43340000 	.word	0x43340000

08004c24 <turn180R>:


void turn180R(parameter turnpara, char test_mode) {
 8004c24:	b084      	sub	sp, #16
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	f107 0c10 	add.w	ip, r7, #16
 8004c30:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8004c34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	f040 8092 	bne.w	8004d62 <turn180R+0x13e>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 8004c3e:	1d3b      	adds	r3, r7, #4
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff faed 	bl	8004220 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8004c46:	edd7 6a04 	vldr	s13, [r7, #16]
 8004c4a:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004c4e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004c52:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c5a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004c5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004c62:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8004c66:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8004c6a:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004e48 <turn180R+0x224>
 8004c6e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	eeb0 2a47 	vmov.f32	s4, s14
 8004c78:	eef0 1a46 	vmov.f32	s3, s12
 8004c7c:	eeb0 1a66 	vmov.f32	s2, s13
 8004c80:	eddf 0a72 	vldr	s1, [pc, #456]	; 8004e4c <turn180R+0x228>
 8004c84:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8004e50 <turn180R+0x22c>
 8004c88:	f7fc ff56 	bl	8001b38 <straight_table>
		wallmode.WallCutMode=1;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	71fb      	strb	r3, [r7, #7]

		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004c90:	edd7 6a05 	vldr	s13, [r7, #20]
 8004c94:	ed97 6a04 	vldr	s12, [r7, #16]
 8004c98:	edd7 5a04 	vldr	s11, [r7, #16]
 8004c9c:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004ca0:	ed97 7a04 	vldr	s14, [r7, #16]
 8004ca4:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cac:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004cb0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004cb4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004cb8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004cbc:	eddf 4a62 	vldr	s9, [pc, #392]	; 8004e48 <turn180R+0x224>
 8004cc0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	eeb0 2a47 	vmov.f32	s4, s14
 8004cca:	eef0 1a45 	vmov.f32	s3, s10
 8004cce:	eeb0 1a65 	vmov.f32	s2, s11
 8004cd2:	eef0 0a46 	vmov.f32	s1, s12
 8004cd6:	eeb0 0a66 	vmov.f32	s0, s13
 8004cda:	f7fc ff2d 	bl	8001b38 <straight_table>

		slalom_table(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 8004cde:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ce2:	ed97 7a07 	vldr	s14, [r7, #28]
 8004ce6:	edd7 6a08 	vldr	s13, [r7, #32]
 8004cea:	eef0 2a66 	vmov.f32	s5, s13
 8004cee:	eeb0 2a47 	vmov.f32	s4, s14
 8004cf2:	eddf 1a58 	vldr	s3, [pc, #352]	; 8004e54 <turn180R+0x230>
 8004cf6:	ed9f 1a57 	vldr	s2, [pc, #348]	; 8004e54 <turn180R+0x230>
 8004cfa:	eddf 0a57 	vldr	s1, [pc, #348]	; 8004e58 <turn180R+0x234>
 8004cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8004d02:	f7fd f8fd 	bl	8001f00 <slalom_table>
		wallmode.WallControlMode=0;
 8004d06:	2300      	movs	r3, #0
 8004d08:	713b      	strb	r3, [r7, #4]
		straight_table(180 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004d0a:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d0e:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8004e58 <turn180R+0x234>
 8004d12:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004d16:	ed97 6a04 	vldr	s12, [r7, #16]
 8004d1a:	edd7 5a04 	vldr	s11, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004d1e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004d22:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d2a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004d2e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d32:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8004d36:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(180 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004d3a:	ed9f 5a43 	vldr	s10, [pc, #268]	; 8004e48 <turn180R+0x224>
 8004d3e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	eeb0 2a47 	vmov.f32	s4, s14
 8004d48:	eef0 1a65 	vmov.f32	s3, s11
 8004d4c:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8004e54 <turn180R+0x230>
 8004d50:	eef0 0a46 	vmov.f32	s1, s12
 8004d54:	eeb0 0a66 	vmov.f32	s0, s13
 8004d58:	f7fc feee 	bl	8001b38 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 8004d5c:	f7ff fa7d 	bl	800425a <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);

	}
}
 8004d60:	e06b      	b.n	8004e3a <turn180R+0x216>
		wallmode.WallControlMode=1;
 8004d62:	2301      	movs	r3, #1
 8004d64:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8004d66:	2300      	movs	r3, #0
 8004d68:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=1;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004d72:	edd7 6a05 	vldr	s13, [r7, #20]
 8004d76:	ed97 6a04 	vldr	s12, [r7, #16]
 8004d7a:	edd7 5a04 	vldr	s11, [r7, #16]
 8004d7e:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004d82:	ed97 7a04 	vldr	s14, [r7, #16]
 8004d86:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d8e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004d92:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d96:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004d9a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004d9e:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8004e48 <turn180R+0x224>
 8004da2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	eeb0 2a47 	vmov.f32	s4, s14
 8004dac:	eef0 1a45 	vmov.f32	s3, s10
 8004db0:	eeb0 1a65 	vmov.f32	s2, s11
 8004db4:	eef0 0a46 	vmov.f32	s1, s12
 8004db8:	eeb0 0a66 	vmov.f32	s0, s13
 8004dbc:	f7fc febc 	bl	8001b38 <straight_table>
		slalom_table(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 8004dc0:	edd7 7a04 	vldr	s15, [r7, #16]
 8004dc4:	ed97 7a07 	vldr	s14, [r7, #28]
 8004dc8:	edd7 6a08 	vldr	s13, [r7, #32]
 8004dcc:	eef0 2a66 	vmov.f32	s5, s13
 8004dd0:	eeb0 2a47 	vmov.f32	s4, s14
 8004dd4:	eddf 1a1f 	vldr	s3, [pc, #124]	; 8004e54 <turn180R+0x230>
 8004dd8:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8004e54 <turn180R+0x230>
 8004ddc:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8004e58 <turn180R+0x234>
 8004de0:	eeb0 0a67 	vmov.f32	s0, s15
 8004de4:	f7fd f88c 	bl	8001f00 <slalom_table>
		wallmode.WallControlMode=0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004df0:	edd7 6a06 	vldr	s13, [r7, #24]
 8004df4:	ed97 6a04 	vldr	s12, [r7, #16]
 8004df8:	edd7 5a04 	vldr	s11, [r7, #16]
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004dfc:	ed97 7a04 	vldr	s14, [r7, #16]
 8004e00:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e08:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004e0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004e10:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8004e14:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004e18:	ed9f 5a0b 	vldr	s10, [pc, #44]	; 8004e48 <turn180R+0x224>
 8004e1c:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	eeb0 2a47 	vmov.f32	s4, s14
 8004e26:	eef0 1a65 	vmov.f32	s3, s11
 8004e2a:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8004e54 <turn180R+0x230>
 8004e2e:	eef0 0a46 	vmov.f32	s1, s12
 8004e32:	eeb0 0a66 	vmov.f32	s0, s13
 8004e36:	f7fc fe7f 	bl	8001b38 <straight_table>
}
 8004e3a:	bf00      	nop
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e44:	b004      	add	sp, #16
 8004e46:	4770      	bx	lr
 8004e48:	42b40000 	.word	0x42b40000
 8004e4c:	42c80000 	.word	0x42c80000
 8004e50:	435b8000 	.word	0x435b8000
 8004e54:	00000000 	.word	0x00000000
 8004e58:	43340000 	.word	0x43340000

08004e5c <turn180L>:

void turn180L(parameter turnpara, char test_mode) {
 8004e5c:	b084      	sub	sp, #16
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b082      	sub	sp, #8
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	f107 0c10 	add.w	ip, r7, #16
 8004e68:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8004e6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	f040 8094 	bne.w	8004f9e <turn180L+0x142>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 8004e76:	1d3b      	adds	r3, r7, #4
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7ff f9d1 	bl	8004220 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8004e7e:	edd7 6a04 	vldr	s13, [r7, #16]
 8004e82:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004e86:	ed97 7a04 	vldr	s14, [r7, #16]
 8004e8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e92:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004e96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004e9a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8004e9e:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8004ea2:	eddf 5a79 	vldr	s11, [pc, #484]	; 8005088 <turn180L+0x22c>
 8004ea6:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	eeb0 2a47 	vmov.f32	s4, s14
 8004eb0:	eef0 1a46 	vmov.f32	s3, s12
 8004eb4:	eeb0 1a66 	vmov.f32	s2, s13
 8004eb8:	eddf 0a74 	vldr	s1, [pc, #464]	; 800508c <turn180L+0x230>
 8004ebc:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8005090 <turn180L+0x234>
 8004ec0:	f7fc fe3a 	bl	8001b38 <straight_table>
		wallmode.WallCutMode=1;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	71fb      	strb	r3, [r7, #7]

		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004ec8:	edd7 6a05 	vldr	s13, [r7, #20]
 8004ecc:	ed97 6a04 	vldr	s12, [r7, #16]
 8004ed0:	edd7 5a04 	vldr	s11, [r7, #16]
 8004ed4:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004ed8:	ed97 7a04 	vldr	s14, [r7, #16]
 8004edc:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004ee8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004eec:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004ef0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004ef4:	eddf 4a64 	vldr	s9, [pc, #400]	; 8005088 <turn180L+0x22c>
 8004ef8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	eeb0 2a47 	vmov.f32	s4, s14
 8004f02:	eef0 1a45 	vmov.f32	s3, s10
 8004f06:	eeb0 1a65 	vmov.f32	s2, s11
 8004f0a:	eef0 0a46 	vmov.f32	s1, s12
 8004f0e:	eeb0 0a66 	vmov.f32	s0, s13
 8004f12:	f7fc fe11 	bl	8001b38 <straight_table>

		slalom_table(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8004f16:	ed97 7a04 	vldr	s14, [r7, #16]
 8004f1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8004f1e:	eef1 7a67 	vneg.f32	s15, s15
 8004f22:	edd7 6a08 	vldr	s13, [r7, #32]
 8004f26:	eef0 2a66 	vmov.f32	s5, s13
 8004f2a:	eeb0 2a67 	vmov.f32	s4, s15
 8004f2e:	eddf 1a59 	vldr	s3, [pc, #356]	; 8005094 <turn180L+0x238>
 8004f32:	ed9f 1a58 	vldr	s2, [pc, #352]	; 8005094 <turn180L+0x238>
 8004f36:	eddf 0a58 	vldr	s1, [pc, #352]	; 8005098 <turn180L+0x23c>
 8004f3a:	eeb0 0a47 	vmov.f32	s0, s14
 8004f3e:	f7fc ffdf 	bl	8001f00 <slalom_table>
		wallmode.WallControlMode=0;
 8004f42:	2300      	movs	r3, #0
 8004f44:	713b      	strb	r3, [r7, #4]
		straight_table(180 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004f46:	edd7 7a06 	vldr	s15, [r7, #24]
 8004f4a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800509c <turn180L+0x240>
 8004f4e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004f52:	ed97 6a04 	vldr	s12, [r7, #16]
 8004f56:	edd7 5a04 	vldr	s11, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004f5a:	ed97 7a04 	vldr	s14, [r7, #16]
 8004f5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f66:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004f6a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004f6e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8004f72:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(180 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004f76:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8005088 <turn180L+0x22c>
 8004f7a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	eeb0 2a47 	vmov.f32	s4, s14
 8004f84:	eef0 1a65 	vmov.f32	s3, s11
 8004f88:	ed9f 1a42 	vldr	s2, [pc, #264]	; 8005094 <turn180L+0x238>
 8004f8c:	eef0 0a46 	vmov.f32	s1, s12
 8004f90:	eeb0 0a66 	vmov.f32	s0, s13
 8004f94:	f7fc fdd0 	bl	8001b38 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 8004f98:	f7ff f95f 	bl	800425a <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);

	}
}
 8004f9c:	e06d      	b.n	800507a <turn180L+0x21e>
		wallmode.WallControlMode=1;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=1;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004fae:	edd7 6a05 	vldr	s13, [r7, #20]
 8004fb2:	ed97 6a04 	vldr	s12, [r7, #16]
 8004fb6:	edd7 5a04 	vldr	s11, [r7, #16]
 8004fba:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004fbe:	ed97 7a04 	vldr	s14, [r7, #16]
 8004fc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8004fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fca:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004fce:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004fd2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004fd6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004fda:	eddf 4a2b 	vldr	s9, [pc, #172]	; 8005088 <turn180L+0x22c>
 8004fde:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	eeb0 2a47 	vmov.f32	s4, s14
 8004fe8:	eef0 1a45 	vmov.f32	s3, s10
 8004fec:	eeb0 1a65 	vmov.f32	s2, s11
 8004ff0:	eef0 0a46 	vmov.f32	s1, s12
 8004ff4:	eeb0 0a66 	vmov.f32	s0, s13
 8004ff8:	f7fc fd9e 	bl	8001b38 <straight_table>
		slalom_table(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8004ffc:	ed97 7a04 	vldr	s14, [r7, #16]
 8005000:	edd7 7a07 	vldr	s15, [r7, #28]
 8005004:	eef1 7a67 	vneg.f32	s15, s15
 8005008:	edd7 6a08 	vldr	s13, [r7, #32]
 800500c:	eef0 2a66 	vmov.f32	s5, s13
 8005010:	eeb0 2a67 	vmov.f32	s4, s15
 8005014:	eddf 1a1f 	vldr	s3, [pc, #124]	; 8005094 <turn180L+0x238>
 8005018:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8005094 <turn180L+0x238>
 800501c:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8005098 <turn180L+0x23c>
 8005020:	eeb0 0a47 	vmov.f32	s0, s14
 8005024:	f7fc ff6c 	bl	8001f00 <slalom_table>
		wallmode.WallControlMode=0;
 8005028:	2300      	movs	r3, #0
 800502a:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 800502c:	2300      	movs	r3, #0
 800502e:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8005030:	edd7 6a06 	vldr	s13, [r7, #24]
 8005034:	ed97 6a04 	vldr	s12, [r7, #16]
 8005038:	edd7 5a04 	vldr	s11, [r7, #16]
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 800503c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005040:	edd7 7a04 	vldr	s15, [r7, #16]
 8005044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005048:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800504c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005050:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8005054:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8005058:	ed9f 5a0b 	vldr	s10, [pc, #44]	; 8005088 <turn180L+0x22c>
 800505c:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	eeb0 2a47 	vmov.f32	s4, s14
 8005066:	eef0 1a65 	vmov.f32	s3, s11
 800506a:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8005094 <turn180L+0x238>
 800506e:	eef0 0a46 	vmov.f32	s1, s12
 8005072:	eeb0 0a66 	vmov.f32	s0, s13
 8005076:	f7fc fd5f 	bl	8001b38 <straight_table>
}
 800507a:	bf00      	nop
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005084:	b004      	add	sp, #16
 8005086:	4770      	bx	lr
 8005088:	42b40000 	.word	0x42b40000
 800508c:	42c80000 	.word	0x42c80000
 8005090:	435b8000 	.word	0x435b8000
 8005094:	00000000 	.word	0x00000000
 8005098:	c3340000 	.word	0xc3340000
 800509c:	43340000 	.word	0x43340000

080050a0 <testturning>:
	}

}


void testturning(parameter_speed Howspeed,int turnmode,char shortest_mode){
 80050a0:	b084      	sub	sp, #16
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b084      	sub	sp, #16
 80050a6:	af04      	add	r7, sp, #16
 80050a8:	f107 0c08 	add.w	ip, r7, #8
 80050ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//0=slalomR,1=slalomL,2=90R,3=90L,4=180R,5=180L,6=in45R,7=in45L,8=in135R,9=in135L
	//10=out45R,11=out45L,12=out135R,13=out135L,14=V90R,15=V90L

	if(turnmode==0){slalomR(Howspeed.slalom_R,ON,shortest_mode);}
 80050b0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10b      	bne.n	80050d0 <testturning+0x30>
 80050b8:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80050bc:	9302      	str	r3, [sp, #8]
 80050be:	2301      	movs	r3, #1
 80050c0:	9301      	str	r3, [sp, #4]
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	f107 0308 	add.w	r3, r7, #8
 80050ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050cc:	f7ff f8d2 	bl	8004274 <slalomR>
	if(turnmode==1){slalomL(Howspeed.slalom_L,ON,shortest_mode);}
 80050d0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d10b      	bne.n	80050f0 <testturning+0x50>
 80050d8:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80050dc:	9302      	str	r3, [sp, #8]
 80050de:	2301      	movs	r3, #1
 80050e0:	9301      	str	r3, [sp, #4]
 80050e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	f107 031c 	add.w	r3, r7, #28
 80050ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050ec:	f7ff fa0c 	bl	8004508 <slalomL>
	if(turnmode==2){turn90R(Howspeed.turn90_R,ON);}
 80050f0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d108      	bne.n	800510a <testturning+0x6a>
 80050f8:	2301      	movs	r3, #1
 80050fa:	9301      	str	r3, [sp, #4]
 80050fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005104:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005106:	f7ff fb4f 	bl	80047a8 <turn90R>
	if(turnmode==3){turn90L(Howspeed.turn90_L,ON);}
 800510a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800510e:	2b03      	cmp	r3, #3
 8005110:	d108      	bne.n	8005124 <testturning+0x84>
 8005112:	2301      	movs	r3, #1
 8005114:	9301      	str	r3, [sp, #4]
 8005116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800511e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005120:	f7ff fc5e 	bl	80049e0 <turn90L>
	if(turnmode==4){turn180R(Howspeed.turn180_R,ON);}
 8005124:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005128:	2b04      	cmp	r3, #4
 800512a:	d108      	bne.n	800513e <testturning+0x9e>
 800512c:	2301      	movs	r3, #1
 800512e:	9301      	str	r3, [sp, #4]
 8005130:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005138:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800513a:	f7ff fd73 	bl	8004c24 <turn180R>
	if(turnmode==5){turn180L(Howspeed.turn180_L,ON);}
 800513e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005142:	2b05      	cmp	r3, #5
 8005144:	d108      	bne.n	8005158 <testturning+0xb8>
 8005146:	2301      	movs	r3, #1
 8005148:	9301      	str	r3, [sp, #4]
 800514a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005152:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005154:	f7ff fe82 	bl	8004e5c <turn180L>
//	if(turnmode==12){turn135inL(Howspeed.turn135in_L, CONNECT);turn135outR(Howspeed.turn135out_R,ON);}
//	if(turnmode==13){turn135inR(Howspeed.turn135in_R, CONNECT);turn135outL(Howspeed.turn135out_L,ON);}
//	if(turnmode==14){turn45inL(Howspeed.turn45in_L, CONNECT);V90R(Howspeed.V90_R,ON);}
//	if(turnmode==15){turn45inR(Howspeed.turn45in_R, CONNECT);V90L(Howspeed.V90_L,ON);}

	HAL_Delay(500);
 8005158:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800515c:	f003 fd6a 	bl	8008c34 <HAL_Delay>

}
 8005160:	bf00      	nop
 8005162:	46bd      	mov	sp, r7
 8005164:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005168:	b004      	add	sp, #16
 800516a:	4770      	bx	lr

0800516c <AdatiWayReturn>:
//}



void AdatiWayReturn(float input_StraightVelocity, float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration) {
 800516c:	b580      	push	{r7, lr}
 800516e:	b08e      	sub	sp, #56	; 0x38
 8005170:	af04      	add	r7, sp, #16
 8005172:	ed87 0a03 	vstr	s0, [r7, #12]
 8005176:	edc7 0a02 	vstr	s1, [r7, #8]
 800517a:	ed87 1a01 	vstr	s2, [r7, #4]
 800517e:	edc7 1a00 	vstr	s3, [r7]

	unsigned short front_count, right_count, back_count, left_count;
	float v_e,v_ea;
//初期化
	x=0;
 8005182:	4b5f      	ldr	r3, [pc, #380]	; (8005300 <AdatiWayReturn+0x194>)
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]
	y=0;
 8005188:	4b5e      	ldr	r3, [pc, #376]	; (8005304 <AdatiWayReturn+0x198>)
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]
	direction=1;
 800518e:	4b5e      	ldr	r3, [pc, #376]	; (8005308 <AdatiWayReturn+0x19c>)
 8005190:	2201      	movs	r2, #1
 8005192:	601a      	str	r2, [r3, #0]
//	maze_mode = 1;

	MOTOR_MODE mode;
	mode.WallControlMode=1;
 8005194:	2301      	movs	r3, #1
 8005196:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 8005198:	2300      	movs	r3, #0
 800519a:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 800519c:	2300      	movs	r3, #0
 800519e:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 80051a0:	2300      	movs	r3, #0
 80051a2:	75bb      	strb	r3, [r7, #22]
	pl_motor_standby(1);
 80051a4:	2001      	movs	r0, #1
 80051a6:	f7fd fa23 	bl	80025f0 <pl_motor_standby>
	HAL_Delay(500);
 80051aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80051ae:	f003 fd41 	bl	8008c34 <HAL_Delay>

	front_wall=((int)((float)(g_sensor_mean[0]+g_sensor_mean[3])/2) >= F_PRESENCE);
 80051b2:	4b56      	ldr	r3, [pc, #344]	; (800530c <AdatiWayReturn+0x1a0>)
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	4b55      	ldr	r3, [pc, #340]	; (800530c <AdatiWayReturn+0x1a0>)
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	4413      	add	r3, r2
 80051bc:	ee07 3a90 	vmov	s15, r3
 80051c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80051c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051d0:	ee17 3a90 	vmov	r3, s15
 80051d4:	2b4f      	cmp	r3, #79	; 0x4f
 80051d6:	bfcc      	ite	gt
 80051d8:	2301      	movgt	r3, #1
 80051da:	2300      	movle	r3, #0
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	4b4c      	ldr	r3, [pc, #304]	; (8005310 <AdatiWayReturn+0x1a4>)
 80051e0:	701a      	strb	r2, [r3, #0]
	right_wall=(g_sensor_mean[2] >= R_PRESENCE);
 80051e2:	4b4a      	ldr	r3, [pc, #296]	; (800530c <AdatiWayReturn+0x1a0>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	2b4f      	cmp	r3, #79	; 0x4f
 80051e8:	bfcc      	ite	gt
 80051ea:	2301      	movgt	r3, #1
 80051ec:	2300      	movle	r3, #0
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	4b48      	ldr	r3, [pc, #288]	; (8005314 <AdatiWayReturn+0x1a8>)
 80051f2:	701a      	strb	r2, [r3, #0]
	left_wall=(g_sensor_mean[1] >= L_PRESENCE);
 80051f4:	4b45      	ldr	r3, [pc, #276]	; (800530c <AdatiWayReturn+0x1a0>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2b4f      	cmp	r3, #79	; 0x4f
 80051fa:	bfcc      	ite	gt
 80051fc:	2301      	movgt	r3, #1
 80051fe:	2300      	movle	r3, #0
 8005200:	b2da      	uxtb	r2, r3
 8005202:	4b45      	ldr	r3, [pc, #276]	; (8005318 <AdatiWayReturn+0x1ac>)
 8005204:	701a      	strb	r2, [r3, #0]

	maze_maker();
 8005206:	f001 f98f 	bl	8006528 <maze_maker>

	HAL_Delay(100);
 800520a:	2064      	movs	r0, #100	; 0x64
 800520c:	f003 fd12 	bl	8008c34 <HAL_Delay>

	pl_motor_start();
 8005210:	f7fd fa58 	bl	80026c4 <pl_motor_start>
	v_e=straight_table(90+BACK_TO_CENTER, 120,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 8005214:	6978      	ldr	r0, [r7, #20]
 8005216:	ed97 2a01 	vldr	s4, [r7, #4]
 800521a:	edd7 1a03 	vldr	s3, [r7, #12]
 800521e:	ed97 1a03 	vldr	s2, [r7, #12]
 8005222:	eddf 0a3e 	vldr	s1, [pc, #248]	; 800531c <AdatiWayReturn+0x1b0>
 8005226:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8005320 <AdatiWayReturn+0x1b4>
 800522a:	f7fc fc85 	bl	8001b38 <straight_table>
 800522e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	while (1) {

		update_coordinate();
 8005232:	f000 fd91 	bl	8005d58 <update_coordinate>

		front_wall=((int)((float)(g_sensor_mean[0]+g_sensor_mean[3])/2) >= F_PRESENCE);
 8005236:	4b35      	ldr	r3, [pc, #212]	; (800530c <AdatiWayReturn+0x1a0>)
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	4b34      	ldr	r3, [pc, #208]	; (800530c <AdatiWayReturn+0x1a0>)
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	4413      	add	r3, r2
 8005240:	ee07 3a90 	vmov	s15, r3
 8005244:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005248:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800524c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005250:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005254:	ee17 3a90 	vmov	r3, s15
 8005258:	2b4f      	cmp	r3, #79	; 0x4f
 800525a:	bfcc      	ite	gt
 800525c:	2301      	movgt	r3, #1
 800525e:	2300      	movle	r3, #0
 8005260:	b2da      	uxtb	r2, r3
 8005262:	4b2b      	ldr	r3, [pc, #172]	; (8005310 <AdatiWayReturn+0x1a4>)
 8005264:	701a      	strb	r2, [r3, #0]
		right_wall=(g_sensor_mean[2] >= R_PRESENCE);
 8005266:	4b29      	ldr	r3, [pc, #164]	; (800530c <AdatiWayReturn+0x1a0>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	2b4f      	cmp	r3, #79	; 0x4f
 800526c:	bfcc      	ite	gt
 800526e:	2301      	movgt	r3, #1
 8005270:	2300      	movle	r3, #0
 8005272:	b2da      	uxtb	r2, r3
 8005274:	4b27      	ldr	r3, [pc, #156]	; (8005314 <AdatiWayReturn+0x1a8>)
 8005276:	701a      	strb	r2, [r3, #0]
		left_wall=(g_sensor_mean[1] >= L_PRESENCE);
 8005278:	4b24      	ldr	r3, [pc, #144]	; (800530c <AdatiWayReturn+0x1a0>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	2b4f      	cmp	r3, #79	; 0x4f
 800527e:	bfcc      	ite	gt
 8005280:	2301      	movgt	r3, #1
 8005282:	2300      	movle	r3, #0
 8005284:	b2da      	uxtb	r2, r3
 8005286:	4b24      	ldr	r3, [pc, #144]	; (8005318 <AdatiWayReturn+0x1ac>)
 8005288:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=1;
 800528a:	2301      	movs	r3, #1
 800528c:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800528e:	2301      	movs	r3, #1
 8005290:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 8005292:	2300      	movs	r3, #0
 8005294:	75fb      	strb	r3, [r7, #23]
		v_e=straight_table(MAZE_OFFSET, v_e,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 8005296:	6978      	ldr	r0, [r7, #20]
 8005298:	ed97 2a01 	vldr	s4, [r7, #4]
 800529c:	edd7 1a03 	vldr	s3, [r7, #12]
 80052a0:	ed97 1a03 	vldr	s2, [r7, #12]
 80052a4:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80052a8:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80052ac:	f7fc fc44 	bl	8001b38 <straight_table>
 80052b0:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count);
 80052b4:	f107 0318 	add.w	r3, r7, #24
 80052b8:	f107 021a 	add.w	r2, r7, #26
 80052bc:	f107 011c 	add.w	r1, r7, #28
 80052c0:	f107 001e 	add.w	r0, r7, #30
 80052c4:	f001 f88e 	bl	80063e4 <search_AroundWalkCount>

		if (x == 0 && y == 0) {
 80052c8:	4b0d      	ldr	r3, [pc, #52]	; (8005300 <AdatiWayReturn+0x194>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d104      	bne.n	80052da <AdatiWayReturn+0x16e>
 80052d0:	4b0c      	ldr	r3, [pc, #48]	; (8005304 <AdatiWayReturn+0x198>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 82b2 	beq.w	800583e <AdatiWayReturn+0x6d2>
			break;
		}
		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 80052da:	4b09      	ldr	r3, [pc, #36]	; (8005300 <AdatiWayReturn+0x194>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d004      	beq.n	80052ec <AdatiWayReturn+0x180>
 80052e2:	4b07      	ldr	r3, [pc, #28]	; (8005300 <AdatiWayReturn+0x194>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	f040 810a 	bne.w	8005500 <AdatiWayReturn+0x394>
 80052ec:	4b05      	ldr	r3, [pc, #20]	; (8005304 <AdatiWayReturn+0x198>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b03      	cmp	r3, #3
 80052f2:	d079      	beq.n	80053e8 <AdatiWayReturn+0x27c>
 80052f4:	4b03      	ldr	r3, [pc, #12]	; (8005304 <AdatiWayReturn+0x198>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	f040 8101 	bne.w	8005500 <AdatiWayReturn+0x394>
			while (front_wall) {
 80052fe:	e073      	b.n	80053e8 <AdatiWayReturn+0x27c>
 8005300:	20000f50 	.word	0x20000f50
 8005304:	20000f54 	.word	0x20000f54
 8005308:	20000f58 	.word	0x20000f58
 800530c:	2000038c 	.word	0x2000038c
 8005310:	20000f5c 	.word	0x20000f5c
 8005314:	20000f5d 	.word	0x20000f5d
 8005318:	20000f5e 	.word	0x20000f5e
 800531c:	42f00000 	.word	0x42f00000
 8005320:	43018000 	.word	0x43018000
 8005324:	43200000 	.word	0x43200000
				//直進
				mode.WallControlMode=1;
 8005328:	2301      	movs	r3, #1
 800532a:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800532c:	2300      	movs	r3, #0
 800532e:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 8005330:	2300      	movs	r3, #0
 8005332:	75fb      	strb	r3, [r7, #23]
				v_e=straight_table(180-MAZE_OFFSET, v_e,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 8005334:	6978      	ldr	r0, [r7, #20]
 8005336:	ed97 2a01 	vldr	s4, [r7, #4]
 800533a:	edd7 1a03 	vldr	s3, [r7, #12]
 800533e:	ed97 1a03 	vldr	s2, [r7, #12]
 8005342:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8005346:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 8005324 <AdatiWayReturn+0x1b8>
 800534a:	f7fc fbf5 	bl	8001b38 <straight_table>
 800534e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24


				update_coordinate();
 8005352:	f000 fd01 	bl	8005d58 <update_coordinate>

				front_wall=((int)((float)(g_sensor_mean[0]+g_sensor_mean[3])/2) >= F_PRESENCE);
 8005356:	4b5e      	ldr	r3, [pc, #376]	; (80054d0 <AdatiWayReturn+0x364>)
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	4b5d      	ldr	r3, [pc, #372]	; (80054d0 <AdatiWayReturn+0x364>)
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	4413      	add	r3, r2
 8005360:	ee07 3a90 	vmov	s15, r3
 8005364:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005368:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800536c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005374:	ee17 3a90 	vmov	r3, s15
 8005378:	2b4f      	cmp	r3, #79	; 0x4f
 800537a:	bfcc      	ite	gt
 800537c:	2301      	movgt	r3, #1
 800537e:	2300      	movle	r3, #0
 8005380:	b2da      	uxtb	r2, r3
 8005382:	4b54      	ldr	r3, [pc, #336]	; (80054d4 <AdatiWayReturn+0x368>)
 8005384:	701a      	strb	r2, [r3, #0]
				right_wall=(g_sensor_mean[2] >= R_PRESENCE);
 8005386:	4b52      	ldr	r3, [pc, #328]	; (80054d0 <AdatiWayReturn+0x364>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	2b4f      	cmp	r3, #79	; 0x4f
 800538c:	bfcc      	ite	gt
 800538e:	2301      	movgt	r3, #1
 8005390:	2300      	movle	r3, #0
 8005392:	b2da      	uxtb	r2, r3
 8005394:	4b50      	ldr	r3, [pc, #320]	; (80054d8 <AdatiWayReturn+0x36c>)
 8005396:	701a      	strb	r2, [r3, #0]
				left_wall=(g_sensor_mean[1] >= L_PRESENCE);
 8005398:	4b4d      	ldr	r3, [pc, #308]	; (80054d0 <AdatiWayReturn+0x364>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	2b4f      	cmp	r3, #79	; 0x4f
 800539e:	bfcc      	ite	gt
 80053a0:	2301      	movgt	r3, #1
 80053a2:	2300      	movle	r3, #0
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	4b4d      	ldr	r3, [pc, #308]	; (80054dc <AdatiWayReturn+0x370>)
 80053a8:	701a      	strb	r2, [r3, #0]

				mode.WallControlMode=1;
 80053aa:	2301      	movs	r3, #1
 80053ac:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 80053ae:	2301      	movs	r3, #1
 80053b0:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 80053b2:	2300      	movs	r3, #0
 80053b4:	75fb      	strb	r3, [r7, #23]
				v_e=straight_table(MAZE_OFFSET, v_e,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 80053b6:	6978      	ldr	r0, [r7, #20]
 80053b8:	ed97 2a01 	vldr	s4, [r7, #4]
 80053bc:	edd7 1a03 	vldr	s3, [r7, #12]
 80053c0:	ed97 1a03 	vldr	s2, [r7, #12]
 80053c4:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80053c8:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80053cc:	f7fc fbb4 	bl	8001b38 <straight_table>
 80053d0:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

				search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count);
 80053d4:	f107 0318 	add.w	r3, r7, #24
 80053d8:	f107 021a 	add.w	r2, r7, #26
 80053dc:	f107 011c 	add.w	r1, r7, #28
 80053e0:	f107 001e 	add.w	r0, r7, #30
 80053e4:	f000 fffe 	bl	80063e4 <search_AroundWalkCount>
			while (front_wall) {
 80053e8:	4b3a      	ldr	r3, [pc, #232]	; (80054d4 <AdatiWayReturn+0x368>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d19b      	bne.n	8005328 <AdatiWayReturn+0x1bc>

			}
			mode.WallControlMode=0;
 80053f0:	2300      	movs	r3, #0
 80053f2:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 80053f4:	2300      	movs	r3, #0
 80053f6:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 80053f8:	2300      	movs	r3, #0
 80053fa:	75fb      	strb	r3, [r7, #23]
			v_e=straight_table(90-MAZE_OFFSET, v_e,100,input_StraightVelocity,input_StraightAcceleration, mode);
 80053fc:	6978      	ldr	r0, [r7, #20]
 80053fe:	ed97 2a01 	vldr	s4, [r7, #4]
 8005402:	edd7 1a03 	vldr	s3, [r7, #12]
 8005406:	ed9f 1a36 	vldr	s2, [pc, #216]	; 80054e0 <AdatiWayReturn+0x374>
 800540a:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 800540e:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80054e4 <AdatiWayReturn+0x378>
 8005412:	f7fc fb91 	bl	8001b38 <straight_table>
 8005416:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
			pl_motor_stop();
 800541a:	f7fd f967 	bl	80026ec <pl_motor_stop>
			wait_ms(300);
 800541e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005422:	f7fe fb71 	bl	8003b08 <wait_ms>
			pl_motor_start();
 8005426:	f7fd f94d 	bl	80026c4 <pl_motor_start>
			v_ea=turning_table(180, 120,120,input_TurningVelocity,input_TurningAcceleration);
 800542a:	ed97 2a00 	vldr	s4, [r7]
 800542e:	edd7 1a02 	vldr	s3, [r7, #8]
 8005432:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 80054e8 <AdatiWayReturn+0x37c>
 8005436:	eddf 0a2c 	vldr	s1, [pc, #176]	; 80054e8 <AdatiWayReturn+0x37c>
 800543a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80054ec <AdatiWayReturn+0x380>
 800543e:	f7fc fc75 	bl	8001d2c <turning_table>
 8005442:	ed87 0a08 	vstr	s0, [r7, #32]
			pl_motor_stop();
 8005446:	f7fd f951 	bl	80026ec <pl_motor_stop>
			wait_ms(300);
 800544a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800544e:	f7fe fb5b 	bl	8003b08 <wait_ms>
			pl_motor_start();
 8005452:	f7fd f937 	bl	80026c4 <pl_motor_start>
			v_e=straight_table(-90, -v_e,-100,-200,input_StraightAcceleration, mode);
 8005456:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800545a:	eef1 7a67 	vneg.f32	s15, s15
 800545e:	6978      	ldr	r0, [r7, #20]
 8005460:	ed97 2a01 	vldr	s4, [r7, #4]
 8005464:	eddf 1a22 	vldr	s3, [pc, #136]	; 80054f0 <AdatiWayReturn+0x384>
 8005468:	ed9f 1a22 	vldr	s2, [pc, #136]	; 80054f4 <AdatiWayReturn+0x388>
 800546c:	eef0 0a67 	vmov.f32	s1, s15
 8005470:	ed9f 0a21 	vldr	s0, [pc, #132]	; 80054f8 <AdatiWayReturn+0x38c>
 8005474:	f7fc fb60 	bl	8001b38 <straight_table>
 8005478:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
			pl_motor_stop();
 800547c:	f7fd f936 	bl	80026ec <pl_motor_stop>
			wait_ms(600);
 8005480:	f44f 7016 	mov.w	r0, #600	; 0x258
 8005484:	f7fe fb40 	bl	8003b08 <wait_ms>

			direction = direction + 2;
 8005488:	4b1c      	ldr	r3, [pc, #112]	; (80054fc <AdatiWayReturn+0x390>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	3302      	adds	r3, #2
 800548e:	4a1b      	ldr	r2, [pc, #108]	; (80054fc <AdatiWayReturn+0x390>)
 8005490:	6013      	str	r3, [r2, #0]

			if (direction == 5) {
 8005492:	4b1a      	ldr	r3, [pc, #104]	; (80054fc <AdatiWayReturn+0x390>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b05      	cmp	r3, #5
 8005498:	d102      	bne.n	80054a0 <AdatiWayReturn+0x334>
				direction = 1;
 800549a:	4b18      	ldr	r3, [pc, #96]	; (80054fc <AdatiWayReturn+0x390>)
 800549c:	2201      	movs	r2, #1
 800549e:	601a      	str	r2, [r3, #0]
			}
			if (direction == 6) {
 80054a0:	4b16      	ldr	r3, [pc, #88]	; (80054fc <AdatiWayReturn+0x390>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b06      	cmp	r3, #6
 80054a6:	d102      	bne.n	80054ae <AdatiWayReturn+0x342>
				direction = 2;
 80054a8:	4b14      	ldr	r3, [pc, #80]	; (80054fc <AdatiWayReturn+0x390>)
 80054aa:	2202      	movs	r2, #2
 80054ac:	601a      	str	r2, [r3, #0]
			}
			if (direction == 0) {
 80054ae:	4b13      	ldr	r3, [pc, #76]	; (80054fc <AdatiWayReturn+0x390>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d102      	bne.n	80054bc <AdatiWayReturn+0x350>
				direction = 4;
 80054b6:	4b11      	ldr	r3, [pc, #68]	; (80054fc <AdatiWayReturn+0x390>)
 80054b8:	2204      	movs	r2, #4
 80054ba:	601a      	str	r2, [r3, #0]
			}
			if (direction == -1) {
 80054bc:	4b0f      	ldr	r3, [pc, #60]	; (80054fc <AdatiWayReturn+0x390>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c4:	f040 81bd 	bne.w	8005842 <AdatiWayReturn+0x6d6>
				direction = 3;
 80054c8:	4b0c      	ldr	r3, [pc, #48]	; (80054fc <AdatiWayReturn+0x390>)
 80054ca:	2203      	movs	r2, #3
 80054cc:	601a      	str	r2, [r3, #0]
			}
			break;
 80054ce:	e1b8      	b.n	8005842 <AdatiWayReturn+0x6d6>
 80054d0:	2000038c 	.word	0x2000038c
 80054d4:	20000f5c 	.word	0x20000f5c
 80054d8:	20000f5d 	.word	0x20000f5d
 80054dc:	20000f5e 	.word	0x20000f5e
 80054e0:	42c80000 	.word	0x42c80000
 80054e4:	428c0000 	.word	0x428c0000
 80054e8:	42f00000 	.word	0x42f00000
 80054ec:	43340000 	.word	0x43340000
 80054f0:	c3480000 	.word	0xc3480000
 80054f4:	c2c80000 	.word	0xc2c80000
 80054f8:	c2b40000 	.word	0xc2b40000
 80054fc:	20000f58 	.word	0x20000f58
		}



			if (front_wall) {
 8005500:	4b7d      	ldr	r3, [pc, #500]	; (80056f8 <AdatiWayReturn+0x58c>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <AdatiWayReturn+0x3a0>
				front_count = MAX_WALKCOUNT;
 8005508:	23ff      	movs	r3, #255	; 0xff
 800550a:	83fb      	strh	r3, [r7, #30]
			}
			if (right_wall) {
 800550c:	4b7b      	ldr	r3, [pc, #492]	; (80056fc <AdatiWayReturn+0x590>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <AdatiWayReturn+0x3ac>
				right_count = MAX_WALKCOUNT;
 8005514:	23ff      	movs	r3, #255	; 0xff
 8005516:	83bb      	strh	r3, [r7, #28]
			}
			if (left_wall) {
 8005518:	4b79      	ldr	r3, [pc, #484]	; (8005700 <AdatiWayReturn+0x594>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <AdatiWayReturn+0x3b8>
				left_count = MAX_WALKCOUNT;
 8005520:	23ff      	movs	r3, #255	; 0xff
 8005522:	833b      	strh	r3, [r7, #24]
			}
// 移動の優先順位 ： 前→右→左→後
			if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 8005524:	8bfb      	ldrh	r3, [r7, #30]
 8005526:	2bff      	cmp	r3, #255	; 0xff
 8005528:	d109      	bne.n	800553e <AdatiWayReturn+0x3d2>
 800552a:	8bbb      	ldrh	r3, [r7, #28]
 800552c:	2bff      	cmp	r3, #255	; 0xff
 800552e:	d106      	bne.n	800553e <AdatiWayReturn+0x3d2>
 8005530:	8b3b      	ldrh	r3, [r7, #24]
 8005532:	2bff      	cmp	r3, #255	; 0xff
 8005534:	d103      	bne.n	800553e <AdatiWayReturn+0x3d2>
 8005536:	8b7b      	ldrh	r3, [r7, #26]
 8005538:	2bff      	cmp	r3, #255	; 0xff
 800553a:	f000 8184 	beq.w	8005846 <AdatiWayReturn+0x6da>
				break;
			}

			if (front_count <= right_count && front_count <= left_count
 800553e:	8bfa      	ldrh	r2, [r7, #30]
 8005540:	8bbb      	ldrh	r3, [r7, #28]
 8005542:	429a      	cmp	r2, r3
 8005544:	d81c      	bhi.n	8005580 <AdatiWayReturn+0x414>
 8005546:	8bfa      	ldrh	r2, [r7, #30]
 8005548:	8b3b      	ldrh	r3, [r7, #24]
 800554a:	429a      	cmp	r2, r3
 800554c:	d818      	bhi.n	8005580 <AdatiWayReturn+0x414>
					&& front_count <= back_count){
 800554e:	8bfa      	ldrh	r2, [r7, #30]
 8005550:	8b7b      	ldrh	r3, [r7, #26]
 8005552:	429a      	cmp	r2, r3
 8005554:	d814      	bhi.n	8005580 <AdatiWayReturn+0x414>
				//直進
				mode.WallControlMode=1;
 8005556:	2301      	movs	r3, #1
 8005558:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800555a:	2300      	movs	r3, #0
 800555c:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800555e:	2300      	movs	r3, #0
 8005560:	75fb      	strb	r3, [r7, #23]
				v_e=straight_table(180-MAZE_OFFSET, v_e,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 8005562:	6978      	ldr	r0, [r7, #20]
 8005564:	ed97 2a01 	vldr	s4, [r7, #4]
 8005568:	edd7 1a03 	vldr	s3, [r7, #12]
 800556c:	ed97 1a03 	vldr	s2, [r7, #12]
 8005570:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8005574:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8005704 <AdatiWayReturn+0x598>
 8005578:	f7fc fade 	bl	8001b38 <straight_table>
 800557c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

			}
			if(right_count < front_count && right_count <= left_count
 8005580:	8bba      	ldrh	r2, [r7, #28]
 8005582:	8bfb      	ldrh	r3, [r7, #30]
 8005584:	429a      	cmp	r2, r3
 8005586:	d21c      	bcs.n	80055c2 <AdatiWayReturn+0x456>
 8005588:	8bba      	ldrh	r2, [r7, #28]
 800558a:	8b3b      	ldrh	r3, [r7, #24]
 800558c:	429a      	cmp	r2, r3
 800558e:	d818      	bhi.n	80055c2 <AdatiWayReturn+0x456>
					&& right_count <= back_count){
 8005590:	8bba      	ldrh	r2, [r7, #28]
 8005592:	8b7b      	ldrh	r3, [r7, #26]
 8005594:	429a      	cmp	r2, r3
 8005596:	d814      	bhi.n	80055c2 <AdatiWayReturn+0x456>
				//右旋回
				mode.WallControlMode=0;
 8005598:	2300      	movs	r3, #0
 800559a:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800559c:	2300      	movs	r3, #0
 800559e:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=1;
 80055a0:	2301      	movs	r3, #1
 80055a2:	75fb      	strb	r3, [r7, #23]
				slalomR(speed500_exploration.slalom_R, OFF,EXPLORATION);
 80055a4:	4b58      	ldr	r3, [pc, #352]	; (8005708 <AdatiWayReturn+0x59c>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	9202      	str	r2, [sp, #8]
 80055aa:	2200      	movs	r2, #0
 80055ac:	9201      	str	r2, [sp, #4]
 80055ae:	691a      	ldr	r2, [r3, #16]
 80055b0:	9200      	str	r2, [sp, #0]
 80055b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80055b4:	f7fe fe5e 	bl	8004274 <slalomR>
				direction++;
 80055b8:	4b54      	ldr	r3, [pc, #336]	; (800570c <AdatiWayReturn+0x5a0>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3301      	adds	r3, #1
 80055be:	4a53      	ldr	r2, [pc, #332]	; (800570c <AdatiWayReturn+0x5a0>)
 80055c0:	6013      	str	r3, [r2, #0]

			}
			if(left_count < front_count && left_count < right_count
 80055c2:	8b3a      	ldrh	r2, [r7, #24]
 80055c4:	8bfb      	ldrh	r3, [r7, #30]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d21d      	bcs.n	8005606 <AdatiWayReturn+0x49a>
 80055ca:	8b3a      	ldrh	r2, [r7, #24]
 80055cc:	8bbb      	ldrh	r3, [r7, #28]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d219      	bcs.n	8005606 <AdatiWayReturn+0x49a>
					&& left_count <= back_count){
 80055d2:	8b3a      	ldrh	r2, [r7, #24]
 80055d4:	8b7b      	ldrh	r3, [r7, #26]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d815      	bhi.n	8005606 <AdatiWayReturn+0x49a>
				mode.WallControlMode=0;
 80055da:	2300      	movs	r3, #0
 80055dc:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 80055de:	2300      	movs	r3, #0
 80055e0:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=1;
 80055e2:	2301      	movs	r3, #1
 80055e4:	75fb      	strb	r3, [r7, #23]
				slalomL(speed500_exploration.slalom_L, OFF,EXPLORATION);
 80055e6:	4b48      	ldr	r3, [pc, #288]	; (8005708 <AdatiWayReturn+0x59c>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	9202      	str	r2, [sp, #8]
 80055ec:	2200      	movs	r2, #0
 80055ee:	9201      	str	r2, [sp, #4]
 80055f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055f2:	9200      	str	r2, [sp, #0]
 80055f4:	3314      	adds	r3, #20
 80055f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80055f8:	f7fe ff86 	bl	8004508 <slalomL>
				direction--;
 80055fc:	4b43      	ldr	r3, [pc, #268]	; (800570c <AdatiWayReturn+0x5a0>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3b01      	subs	r3, #1
 8005602:	4a42      	ldr	r2, [pc, #264]	; (800570c <AdatiWayReturn+0x5a0>)
 8005604:	6013      	str	r3, [r2, #0]
			}
			if(back_count < front_count && back_count < right_count
 8005606:	8b7a      	ldrh	r2, [r7, #26]
 8005608:	8bfb      	ldrh	r3, [r7, #30]
 800560a:	429a      	cmp	r2, r3
 800560c:	f080 80f8 	bcs.w	8005800 <AdatiWayReturn+0x694>
 8005610:	8b7a      	ldrh	r2, [r7, #26]
 8005612:	8bbb      	ldrh	r3, [r7, #28]
 8005614:	429a      	cmp	r2, r3
 8005616:	f080 80f3 	bcs.w	8005800 <AdatiWayReturn+0x694>
					&& back_count < left_count){
 800561a:	8b7a      	ldrh	r2, [r7, #26]
 800561c:	8b3b      	ldrh	r3, [r7, #24]
 800561e:	429a      	cmp	r2, r3
 8005620:	f080 80ee 	bcs.w	8005800 <AdatiWayReturn+0x694>

				if (front_wall){
 8005624:	4b34      	ldr	r3, [pc, #208]	; (80056f8 <AdatiWayReturn+0x58c>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 8083 	beq.w	8005734 <AdatiWayReturn+0x5c8>
					mode.WallControlMode=0;
 800562e:	2300      	movs	r3, #0
 8005630:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 8005632:	2300      	movs	r3, #0
 8005634:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 8005636:	2300      	movs	r3, #0
 8005638:	75fb      	strb	r3, [r7, #23]
					v_e=straight_table(90-MAZE_OFFSET, v_e,100,input_StraightVelocity,input_StraightAcceleration, mode);
 800563a:	6978      	ldr	r0, [r7, #20]
 800563c:	ed97 2a01 	vldr	s4, [r7, #4]
 8005640:	edd7 1a03 	vldr	s3, [r7, #12]
 8005644:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8005714 <AdatiWayReturn+0x5a8>
 8005648:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 800564c:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8005718 <AdatiWayReturn+0x5ac>
 8005650:	f7fc fa72 	bl	8001b38 <straight_table>
 8005654:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
					pl_motor_stop();
 8005658:	f7fd f848 	bl	80026ec <pl_motor_stop>
					wait_ms(300);
 800565c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005660:	f7fe fa52 	bl	8003b08 <wait_ms>
					pl_motor_start();
 8005664:	f7fd f82e 	bl	80026c4 <pl_motor_start>
					v_ea=turning_table(180, 120,120,input_TurningVelocity,input_TurningAcceleration);
 8005668:	ed97 2a00 	vldr	s4, [r7]
 800566c:	edd7 1a02 	vldr	s3, [r7, #8]
 8005670:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 800572c <AdatiWayReturn+0x5c0>
 8005674:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800572c <AdatiWayReturn+0x5c0>
 8005678:	ed9f 0a28 	vldr	s0, [pc, #160]	; 800571c <AdatiWayReturn+0x5b0>
 800567c:	f7fc fb56 	bl	8001d2c <turning_table>
 8005680:	ed87 0a08 	vstr	s0, [r7, #32]
					pl_motor_stop();
 8005684:	f7fd f832 	bl	80026ec <pl_motor_stop>
					wait_ms(300);
 8005688:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800568c:	f7fe fa3c 	bl	8003b08 <wait_ms>
					pl_motor_start();
 8005690:	f7fd f818 	bl	80026c4 <pl_motor_start>
					v_e=straight_table(-90, -v_e,-100,-200,input_StraightAcceleration, mode);
 8005694:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005698:	eef1 7a67 	vneg.f32	s15, s15
 800569c:	6978      	ldr	r0, [r7, #20]
 800569e:	ed97 2a01 	vldr	s4, [r7, #4]
 80056a2:	eddf 1a1f 	vldr	s3, [pc, #124]	; 8005720 <AdatiWayReturn+0x5b4>
 80056a6:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8005724 <AdatiWayReturn+0x5b8>
 80056aa:	eef0 0a67 	vmov.f32	s1, s15
 80056ae:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8005710 <AdatiWayReturn+0x5a4>
 80056b2:	f7fc fa41 	bl	8001b38 <straight_table>
 80056b6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
					pl_motor_stop();
 80056ba:	f7fd f817 	bl	80026ec <pl_motor_stop>
					wait_ms(600);
 80056be:	f44f 7016 	mov.w	r0, #600	; 0x258
 80056c2:	f7fe fa21 	bl	8003b08 <wait_ms>
					mode.WallControlMode=1;
 80056c6:	2301      	movs	r3, #1
 80056c8:	753b      	strb	r3, [r7, #20]
					pl_motor_start();
 80056ca:	f7fc fffb 	bl	80026c4 <pl_motor_start>
					v_e=straight_table(90+BACK_TO_CENTER, 120,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 80056ce:	6978      	ldr	r0, [r7, #20]
 80056d0:	ed97 2a01 	vldr	s4, [r7, #4]
 80056d4:	edd7 1a03 	vldr	s3, [r7, #12]
 80056d8:	ed97 1a03 	vldr	s2, [r7, #12]
 80056dc:	eddf 0a13 	vldr	s1, [pc, #76]	; 800572c <AdatiWayReturn+0x5c0>
 80056e0:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8005730 <AdatiWayReturn+0x5c4>
 80056e4:	f7fc fa28 	bl	8001b38 <straight_table>
 80056e8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
					direction = direction + 2;
 80056ec:	4b07      	ldr	r3, [pc, #28]	; (800570c <AdatiWayReturn+0x5a0>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3302      	adds	r3, #2
 80056f2:	4a06      	ldr	r2, [pc, #24]	; (800570c <AdatiWayReturn+0x5a0>)
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	e083      	b.n	8005800 <AdatiWayReturn+0x694>
 80056f8:	20000f5c 	.word	0x20000f5c
 80056fc:	20000f5d 	.word	0x20000f5d
 8005700:	20000f5e 	.word	0x20000f5e
 8005704:	43200000 	.word	0x43200000
 8005708:	20000a50 	.word	0x20000a50
 800570c:	20000f58 	.word	0x20000f58
 8005710:	c2b40000 	.word	0xc2b40000
 8005714:	42c80000 	.word	0x42c80000
 8005718:	428c0000 	.word	0x428c0000
 800571c:	43340000 	.word	0x43340000
 8005720:	c3480000 	.word	0xc3480000
 8005724:	c2c80000 	.word	0xc2c80000
 8005728:	c21e0000 	.word	0xc21e0000
 800572c:	42f00000 	.word	0x42f00000
 8005730:	43018000 	.word	0x43018000
				}else{
					mode.WallControlMode=0;
 8005734:	2300      	movs	r3, #0
 8005736:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 8005738:	2300      	movs	r3, #0
 800573a:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800573c:	2300      	movs	r3, #0
 800573e:	75fb      	strb	r3, [r7, #23]
					pl_motor_start();
 8005740:	f7fc ffc0 	bl	80026c4 <pl_motor_start>
					v_e=straight_table(90-MAZE_OFFSET, v_e,100,input_StraightVelocity,input_StraightAcceleration, mode);
 8005744:	6978      	ldr	r0, [r7, #20]
 8005746:	ed97 2a01 	vldr	s4, [r7, #4]
 800574a:	edd7 1a03 	vldr	s3, [r7, #12]
 800574e:	ed1f 1a0f 	vldr	s2, [pc, #-60]	; 8005714 <AdatiWayReturn+0x5a8>
 8005752:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8005756:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 8005718 <AdatiWayReturn+0x5ac>
 800575a:	f7fc f9ed 	bl	8001b38 <straight_table>
 800575e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
					pl_motor_stop();
 8005762:	f7fc ffc3 	bl	80026ec <pl_motor_stop>
					wait_ms(300);
 8005766:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800576a:	f7fe f9cd 	bl	8003b08 <wait_ms>
					pl_motor_start();
 800576e:	f7fc ffa9 	bl	80026c4 <pl_motor_start>
					v_ea=turning_table(180, 120,120,input_TurningVelocity,input_TurningAcceleration);
 8005772:	ed97 2a00 	vldr	s4, [r7]
 8005776:	edd7 1a02 	vldr	s3, [r7, #8]
 800577a:	ed1f 1a14 	vldr	s2, [pc, #-80]	; 800572c <AdatiWayReturn+0x5c0>
 800577e:	ed5f 0a15 	vldr	s1, [pc, #-84]	; 800572c <AdatiWayReturn+0x5c0>
 8005782:	ed1f 0a1a 	vldr	s0, [pc, #-104]	; 800571c <AdatiWayReturn+0x5b0>
 8005786:	f7fc fad1 	bl	8001d2c <turning_table>
 800578a:	ed87 0a08 	vstr	s0, [r7, #32]
					pl_motor_stop();
 800578e:	f7fc ffad 	bl	80026ec <pl_motor_stop>
					wait_ms(300);
 8005792:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005796:	f7fe f9b7 	bl	8003b08 <wait_ms>
					pl_motor_start();
 800579a:	f7fc ff93 	bl	80026c4 <pl_motor_start>
					v_e=straight_table(-BACK_TO_CENTER, -v_e,-100,-200,input_StraightAcceleration, mode);
 800579e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80057a2:	eef1 7a67 	vneg.f32	s15, s15
 80057a6:	6978      	ldr	r0, [r7, #20]
 80057a8:	ed97 2a01 	vldr	s4, [r7, #4]
 80057ac:	ed5f 1a24 	vldr	s3, [pc, #-144]	; 8005720 <AdatiWayReturn+0x5b4>
 80057b0:	ed1f 1a24 	vldr	s2, [pc, #-144]	; 8005724 <AdatiWayReturn+0x5b8>
 80057b4:	eef0 0a67 	vmov.f32	s1, s15
 80057b8:	ed1f 0a25 	vldr	s0, [pc, #-148]	; 8005728 <AdatiWayReturn+0x5bc>
 80057bc:	f7fc f9bc 	bl	8001b38 <straight_table>
 80057c0:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
					pl_motor_stop();
 80057c4:	f7fc ff92 	bl	80026ec <pl_motor_stop>
					wait_ms(600);
 80057c8:	f44f 7016 	mov.w	r0, #600	; 0x258
 80057cc:	f7fe f99c 	bl	8003b08 <wait_ms>
					mode.WallControlMode=1;
 80057d0:	2301      	movs	r3, #1
 80057d2:	753b      	strb	r3, [r7, #20]
					pl_motor_start();
 80057d4:	f7fc ff76 	bl	80026c4 <pl_motor_start>
					v_e=straight_table(90+BACK_TO_CENTER, 120,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 80057d8:	6978      	ldr	r0, [r7, #20]
 80057da:	ed97 2a01 	vldr	s4, [r7, #4]
 80057de:	edd7 1a03 	vldr	s3, [r7, #12]
 80057e2:	ed97 1a03 	vldr	s2, [r7, #12]
 80057e6:	ed5f 0a2f 	vldr	s1, [pc, #-188]	; 800572c <AdatiWayReturn+0x5c0>
 80057ea:	ed1f 0a2f 	vldr	s0, [pc, #-188]	; 8005730 <AdatiWayReturn+0x5c4>
 80057ee:	f7fc f9a3 	bl	8001b38 <straight_table>
 80057f2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
					direction = direction + 2;
 80057f6:	4b72      	ldr	r3, [pc, #456]	; (80059c0 <AdatiWayReturn+0x854>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3302      	adds	r3, #2
 80057fc:	4a70      	ldr	r2, [pc, #448]	; (80059c0 <AdatiWayReturn+0x854>)
 80057fe:	6013      	str	r3, [r2, #0]

				}

			}

		if (direction == 5) {
 8005800:	4b6f      	ldr	r3, [pc, #444]	; (80059c0 <AdatiWayReturn+0x854>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b05      	cmp	r3, #5
 8005806:	d102      	bne.n	800580e <AdatiWayReturn+0x6a2>
			direction = 1;
 8005808:	4b6d      	ldr	r3, [pc, #436]	; (80059c0 <AdatiWayReturn+0x854>)
 800580a:	2201      	movs	r2, #1
 800580c:	601a      	str	r2, [r3, #0]
		}
		if (direction == 6) {
 800580e:	4b6c      	ldr	r3, [pc, #432]	; (80059c0 <AdatiWayReturn+0x854>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b06      	cmp	r3, #6
 8005814:	d102      	bne.n	800581c <AdatiWayReturn+0x6b0>
			direction = 2;
 8005816:	4b6a      	ldr	r3, [pc, #424]	; (80059c0 <AdatiWayReturn+0x854>)
 8005818:	2202      	movs	r2, #2
 800581a:	601a      	str	r2, [r3, #0]
		}
		if (direction == 0) {
 800581c:	4b68      	ldr	r3, [pc, #416]	; (80059c0 <AdatiWayReturn+0x854>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d102      	bne.n	800582a <AdatiWayReturn+0x6be>
			direction = 4;
 8005824:	4b66      	ldr	r3, [pc, #408]	; (80059c0 <AdatiWayReturn+0x854>)
 8005826:	2204      	movs	r2, #4
 8005828:	601a      	str	r2, [r3, #0]
		}
		if (direction == -1) {
 800582a:	4b65      	ldr	r3, [pc, #404]	; (80059c0 <AdatiWayReturn+0x854>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005832:	f47f acfe 	bne.w	8005232 <AdatiWayReturn+0xc6>
			direction = 3;
 8005836:	4b62      	ldr	r3, [pc, #392]	; (80059c0 <AdatiWayReturn+0x854>)
 8005838:	2203      	movs	r2, #3
 800583a:	601a      	str	r2, [r3, #0]
		update_coordinate();
 800583c:	e4f9      	b.n	8005232 <AdatiWayReturn+0xc6>
			break;
 800583e:	bf00      	nop
 8005840:	e002      	b.n	8005848 <AdatiWayReturn+0x6dc>
			break;
 8005842:	bf00      	nop
 8005844:	e000      	b.n	8005848 <AdatiWayReturn+0x6dc>
				break;
 8005846:	bf00      	nop
		}

	}

//	record_in();
	pl_motor_start();
 8005848:	f7fc ff3c 	bl	80026c4 <pl_motor_start>
	v_e=straight_table(90+BACK_TO_CENTER, 120,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800584c:	6978      	ldr	r0, [r7, #20]
 800584e:	ed97 2a01 	vldr	s4, [r7, #4]
 8005852:	edd7 1a03 	vldr	s3, [r7, #12]
 8005856:	ed97 1a03 	vldr	s2, [r7, #12]
 800585a:	eddf 0a5a 	vldr	s1, [pc, #360]	; 80059c4 <AdatiWayReturn+0x858>
 800585e:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 80059c8 <AdatiWayReturn+0x85c>
 8005862:	f7fc f969 	bl	8001b38 <straight_table>
 8005866:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	while (1) {

		update_coordinate();
 800586a:	f000 fa75 	bl	8005d58 <update_coordinate>

		front_wall=((int)((float)(g_sensor_mean[0]+g_sensor_mean[3])/2) >= F_PRESENCE);
 800586e:	4b57      	ldr	r3, [pc, #348]	; (80059cc <AdatiWayReturn+0x860>)
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	4b56      	ldr	r3, [pc, #344]	; (80059cc <AdatiWayReturn+0x860>)
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	4413      	add	r3, r2
 8005878:	ee07 3a90 	vmov	s15, r3
 800587c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005880:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005884:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005888:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800588c:	ee17 3a90 	vmov	r3, s15
 8005890:	2b4f      	cmp	r3, #79	; 0x4f
 8005892:	bfcc      	ite	gt
 8005894:	2301      	movgt	r3, #1
 8005896:	2300      	movle	r3, #0
 8005898:	b2da      	uxtb	r2, r3
 800589a:	4b4d      	ldr	r3, [pc, #308]	; (80059d0 <AdatiWayReturn+0x864>)
 800589c:	701a      	strb	r2, [r3, #0]
		right_wall=(g_sensor_mean[2] >= R_PRESENCE);
 800589e:	4b4b      	ldr	r3, [pc, #300]	; (80059cc <AdatiWayReturn+0x860>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	2b4f      	cmp	r3, #79	; 0x4f
 80058a4:	bfcc      	ite	gt
 80058a6:	2301      	movgt	r3, #1
 80058a8:	2300      	movle	r3, #0
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	4b49      	ldr	r3, [pc, #292]	; (80059d4 <AdatiWayReturn+0x868>)
 80058ae:	701a      	strb	r2, [r3, #0]
		left_wall=(g_sensor_mean[1] >= L_PRESENCE);
 80058b0:	4b46      	ldr	r3, [pc, #280]	; (80059cc <AdatiWayReturn+0x860>)
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	2b4f      	cmp	r3, #79	; 0x4f
 80058b6:	bfcc      	ite	gt
 80058b8:	2301      	movgt	r3, #1
 80058ba:	2300      	movle	r3, #0
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	4b46      	ldr	r3, [pc, #280]	; (80059d8 <AdatiWayReturn+0x86c>)
 80058c0:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=1;
 80058c2:	2301      	movs	r3, #1
 80058c4:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=2;
 80058c6:	2302      	movs	r3, #2
 80058c8:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 80058ca:	2300      	movs	r3, #0
 80058cc:	75fb      	strb	r3, [r7, #23]
		v_e=straight_table(MAZE_OFFSET, v_e,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 80058ce:	6978      	ldr	r0, [r7, #20]
 80058d0:	ed97 2a01 	vldr	s4, [r7, #4]
 80058d4:	edd7 1a03 	vldr	s3, [r7, #12]
 80058d8:	ed97 1a03 	vldr	s2, [r7, #12]
 80058dc:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80058e0:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80058e4:	f7fc f928 	bl	8001b38 <straight_table>
 80058e8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count);
 80058ec:	f107 0318 	add.w	r3, r7, #24
 80058f0:	f107 021a 	add.w	r2, r7, #26
 80058f4:	f107 011c 	add.w	r1, r7, #28
 80058f8:	f107 001e 	add.w	r0, r7, #30
 80058fc:	f000 fd72 	bl	80063e4 <search_AroundWalkCount>

		if (x == 0 && y == 0) { ///////goal************************
 8005900:	4b36      	ldr	r3, [pc, #216]	; (80059dc <AdatiWayReturn+0x870>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d173      	bne.n	80059f0 <AdatiWayReturn+0x884>
 8005908:	4b35      	ldr	r3, [pc, #212]	; (80059e0 <AdatiWayReturn+0x874>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d16f      	bne.n	80059f0 <AdatiWayReturn+0x884>
			mode.WallControlMode=0;
 8005910:	2300      	movs	r3, #0
 8005912:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 8005914:	2300      	movs	r3, #0
 8005916:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 8005918:	2300      	movs	r3, #0
 800591a:	75fb      	strb	r3, [r7, #23]
			v_e=straight_table(90-MAZE_OFFSET, v_e,100,input_StraightVelocity,input_StraightAcceleration, mode);
 800591c:	6978      	ldr	r0, [r7, #20]
 800591e:	ed97 2a01 	vldr	s4, [r7, #4]
 8005922:	edd7 1a03 	vldr	s3, [r7, #12]
 8005926:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 80059e4 <AdatiWayReturn+0x878>
 800592a:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 800592e:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80059e8 <AdatiWayReturn+0x87c>
 8005932:	f7fc f901 	bl	8001b38 <straight_table>
 8005936:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
			pl_motor_stop();
 800593a:	f7fc fed7 	bl	80026ec <pl_motor_stop>
			wait_ms(300);
 800593e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005942:	f7fe f8e1 	bl	8003b08 <wait_ms>
			pl_motor_start();
 8005946:	f7fc febd 	bl	80026c4 <pl_motor_start>
			v_ea=turning_table(180, 120,120,input_TurningVelocity,input_TurningAcceleration);
 800594a:	ed97 2a00 	vldr	s4, [r7]
 800594e:	edd7 1a02 	vldr	s3, [r7, #8]
 8005952:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 80059c4 <AdatiWayReturn+0x858>
 8005956:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80059c4 <AdatiWayReturn+0x858>
 800595a:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80059ec <AdatiWayReturn+0x880>
 800595e:	f7fc f9e5 	bl	8001d2c <turning_table>
 8005962:	ed87 0a08 	vstr	s0, [r7, #32]
			pl_motor_stop();
 8005966:	f7fc fec1 	bl	80026ec <pl_motor_stop>
			wait_ms(300);
 800596a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800596e:	f7fe f8cb 	bl	8003b08 <wait_ms>

			maze_display();
 8005972:	f001 f951 	bl	8006c18 <maze_display>
			direction = direction + 2;
 8005976:	4b12      	ldr	r3, [pc, #72]	; (80059c0 <AdatiWayReturn+0x854>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3302      	adds	r3, #2
 800597c:	4a10      	ldr	r2, [pc, #64]	; (80059c0 <AdatiWayReturn+0x854>)
 800597e:	6013      	str	r3, [r2, #0]

			if (direction == 5) {
 8005980:	4b0f      	ldr	r3, [pc, #60]	; (80059c0 <AdatiWayReturn+0x854>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b05      	cmp	r3, #5
 8005986:	d102      	bne.n	800598e <AdatiWayReturn+0x822>
				direction = 1;
 8005988:	4b0d      	ldr	r3, [pc, #52]	; (80059c0 <AdatiWayReturn+0x854>)
 800598a:	2201      	movs	r2, #1
 800598c:	601a      	str	r2, [r3, #0]
			}
			if (direction == 6) {
 800598e:	4b0c      	ldr	r3, [pc, #48]	; (80059c0 <AdatiWayReturn+0x854>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b06      	cmp	r3, #6
 8005994:	d102      	bne.n	800599c <AdatiWayReturn+0x830>
				direction = 2;
 8005996:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <AdatiWayReturn+0x854>)
 8005998:	2202      	movs	r2, #2
 800599a:	601a      	str	r2, [r3, #0]
			}
			if (direction == 0) {
 800599c:	4b08      	ldr	r3, [pc, #32]	; (80059c0 <AdatiWayReturn+0x854>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d102      	bne.n	80059aa <AdatiWayReturn+0x83e>
				direction = 4;
 80059a4:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <AdatiWayReturn+0x854>)
 80059a6:	2204      	movs	r2, #4
 80059a8:	601a      	str	r2, [r3, #0]
			}
			if (direction == -1) {
 80059aa:	4b05      	ldr	r3, [pc, #20]	; (80059c0 <AdatiWayReturn+0x854>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b2:	f040 81bc 	bne.w	8005d2e <AdatiWayReturn+0xbc2>
				direction = 3;
 80059b6:	4b02      	ldr	r3, [pc, #8]	; (80059c0 <AdatiWayReturn+0x854>)
 80059b8:	2203      	movs	r2, #3
 80059ba:	601a      	str	r2, [r3, #0]
			}

			break;
 80059bc:	e1b7      	b.n	8005d2e <AdatiWayReturn+0xbc2>
 80059be:	bf00      	nop
 80059c0:	20000f58 	.word	0x20000f58
 80059c4:	42f00000 	.word	0x42f00000
 80059c8:	43018000 	.word	0x43018000
 80059cc:	2000038c 	.word	0x2000038c
 80059d0:	20000f5c 	.word	0x20000f5c
 80059d4:	20000f5d 	.word	0x20000f5d
 80059d8:	20000f5e 	.word	0x20000f5e
 80059dc:	20000f50 	.word	0x20000f50
 80059e0:	20000f54 	.word	0x20000f54
 80059e4:	42c80000 	.word	0x42c80000
 80059e8:	428c0000 	.word	0x428c0000
 80059ec:	43340000 	.word	0x43340000
		}


		if (front_wall) {
 80059f0:	4b7d      	ldr	r3, [pc, #500]	; (8005be8 <AdatiWayReturn+0xa7c>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <AdatiWayReturn+0x890>
			front_count = MAX_WALKCOUNT;
 80059f8:	23ff      	movs	r3, #255	; 0xff
 80059fa:	83fb      	strh	r3, [r7, #30]
		}
		if (right_wall) {
 80059fc:	4b7b      	ldr	r3, [pc, #492]	; (8005bec <AdatiWayReturn+0xa80>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <AdatiWayReturn+0x89c>
			right_count = MAX_WALKCOUNT;
 8005a04:	23ff      	movs	r3, #255	; 0xff
 8005a06:	83bb      	strh	r3, [r7, #28]
		}
		if (left_wall) {
 8005a08:	4b79      	ldr	r3, [pc, #484]	; (8005bf0 <AdatiWayReturn+0xa84>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <AdatiWayReturn+0x8a8>
			left_count = MAX_WALKCOUNT;
 8005a10:	23ff      	movs	r3, #255	; 0xff
 8005a12:	833b      	strh	r3, [r7, #24]
		}
// 移動の優先順位 ： 前→右→左→後
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 8005a14:	8bfb      	ldrh	r3, [r7, #30]
 8005a16:	2bff      	cmp	r3, #255	; 0xff
 8005a18:	d109      	bne.n	8005a2e <AdatiWayReturn+0x8c2>
 8005a1a:	8bbb      	ldrh	r3, [r7, #28]
 8005a1c:	2bff      	cmp	r3, #255	; 0xff
 8005a1e:	d106      	bne.n	8005a2e <AdatiWayReturn+0x8c2>
 8005a20:	8b3b      	ldrh	r3, [r7, #24]
 8005a22:	2bff      	cmp	r3, #255	; 0xff
 8005a24:	d103      	bne.n	8005a2e <AdatiWayReturn+0x8c2>
 8005a26:	8b7b      	ldrh	r3, [r7, #26]
 8005a28:	2bff      	cmp	r3, #255	; 0xff
 8005a2a:	f000 8182 	beq.w	8005d32 <AdatiWayReturn+0xbc6>
			break;
		}

		if (front_count <= right_count && front_count <= left_count
 8005a2e:	8bfa      	ldrh	r2, [r7, #30]
 8005a30:	8bbb      	ldrh	r3, [r7, #28]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d81c      	bhi.n	8005a70 <AdatiWayReturn+0x904>
 8005a36:	8bfa      	ldrh	r2, [r7, #30]
 8005a38:	8b3b      	ldrh	r3, [r7, #24]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d818      	bhi.n	8005a70 <AdatiWayReturn+0x904>
				&& front_count <= back_count){
 8005a3e:	8bfa      	ldrh	r2, [r7, #30]
 8005a40:	8b7b      	ldrh	r3, [r7, #26]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d814      	bhi.n	8005a70 <AdatiWayReturn+0x904>
			//直進
			mode.WallControlMode=1;
 8005a46:	2301      	movs	r3, #1
 8005a48:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	75fb      	strb	r3, [r7, #23]
			v_e=straight_table(180-MAZE_OFFSET, v_e,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 8005a52:	6978      	ldr	r0, [r7, #20]
 8005a54:	ed97 2a01 	vldr	s4, [r7, #4]
 8005a58:	edd7 1a03 	vldr	s3, [r7, #12]
 8005a5c:	ed97 1a03 	vldr	s2, [r7, #12]
 8005a60:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8005a64:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8005bf4 <AdatiWayReturn+0xa88>
 8005a68:	f7fc f866 	bl	8001b38 <straight_table>
 8005a6c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

		}
		if(right_count < front_count && right_count <= left_count
 8005a70:	8bba      	ldrh	r2, [r7, #28]
 8005a72:	8bfb      	ldrh	r3, [r7, #30]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d21c      	bcs.n	8005ab2 <AdatiWayReturn+0x946>
 8005a78:	8bba      	ldrh	r2, [r7, #28]
 8005a7a:	8b3b      	ldrh	r3, [r7, #24]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d818      	bhi.n	8005ab2 <AdatiWayReturn+0x946>
				&& right_count <= back_count){
 8005a80:	8bba      	ldrh	r2, [r7, #28]
 8005a82:	8b7b      	ldrh	r3, [r7, #26]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d814      	bhi.n	8005ab2 <AdatiWayReturn+0x946>
			//右旋回
			mode.WallControlMode=0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=1;
 8005a90:	2301      	movs	r3, #1
 8005a92:	75fb      	strb	r3, [r7, #23]
			slalomR(speed500_exploration.slalom_R, OFF,EXPLORATION);
 8005a94:	4b58      	ldr	r3, [pc, #352]	; (8005bf8 <AdatiWayReturn+0xa8c>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	9202      	str	r2, [sp, #8]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	9201      	str	r2, [sp, #4]
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	9200      	str	r2, [sp, #0]
 8005aa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005aa4:	f7fe fbe6 	bl	8004274 <slalomR>
			direction++;
 8005aa8:	4b54      	ldr	r3, [pc, #336]	; (8005bfc <AdatiWayReturn+0xa90>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3301      	adds	r3, #1
 8005aae:	4a53      	ldr	r2, [pc, #332]	; (8005bfc <AdatiWayReturn+0xa90>)
 8005ab0:	6013      	str	r3, [r2, #0]

		}
		if(left_count < front_count && left_count < right_count
 8005ab2:	8b3a      	ldrh	r2, [r7, #24]
 8005ab4:	8bfb      	ldrh	r3, [r7, #30]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d21d      	bcs.n	8005af6 <AdatiWayReturn+0x98a>
 8005aba:	8b3a      	ldrh	r2, [r7, #24]
 8005abc:	8bbb      	ldrh	r3, [r7, #28]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d219      	bcs.n	8005af6 <AdatiWayReturn+0x98a>
				&& left_count <= back_count){
 8005ac2:	8b3a      	ldrh	r2, [r7, #24]
 8005ac4:	8b7b      	ldrh	r3, [r7, #26]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d815      	bhi.n	8005af6 <AdatiWayReturn+0x98a>
			mode.WallControlMode=0;
 8005aca:	2300      	movs	r3, #0
 8005acc:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=1;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	75fb      	strb	r3, [r7, #23]
			slalomL(speed500_exploration.slalom_L, OFF,EXPLORATION);
 8005ad6:	4b48      	ldr	r3, [pc, #288]	; (8005bf8 <AdatiWayReturn+0xa8c>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	9202      	str	r2, [sp, #8]
 8005adc:	2200      	movs	r2, #0
 8005ade:	9201      	str	r2, [sp, #4]
 8005ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ae2:	9200      	str	r2, [sp, #0]
 8005ae4:	3314      	adds	r3, #20
 8005ae6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ae8:	f7fe fd0e 	bl	8004508 <slalomL>
			direction--;
 8005aec:	4b43      	ldr	r3, [pc, #268]	; (8005bfc <AdatiWayReturn+0xa90>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3b01      	subs	r3, #1
 8005af2:	4a42      	ldr	r2, [pc, #264]	; (8005bfc <AdatiWayReturn+0xa90>)
 8005af4:	6013      	str	r3, [r2, #0]
		}
		if(back_count < front_count && back_count < right_count
 8005af6:	8b7a      	ldrh	r2, [r7, #26]
 8005af8:	8bfb      	ldrh	r3, [r7, #30]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	f080 80f8 	bcs.w	8005cf0 <AdatiWayReturn+0xb84>
 8005b00:	8b7a      	ldrh	r2, [r7, #26]
 8005b02:	8bbb      	ldrh	r3, [r7, #28]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	f080 80f3 	bcs.w	8005cf0 <AdatiWayReturn+0xb84>
				&& back_count < left_count){
 8005b0a:	8b7a      	ldrh	r2, [r7, #26]
 8005b0c:	8b3b      	ldrh	r3, [r7, #24]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	f080 80ee 	bcs.w	8005cf0 <AdatiWayReturn+0xb84>

			if (front_wall){
 8005b14:	4b34      	ldr	r3, [pc, #208]	; (8005be8 <AdatiWayReturn+0xa7c>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 8083 	beq.w	8005c24 <AdatiWayReturn+0xab8>
				mode.WallControlMode=0;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 8005b26:	2300      	movs	r3, #0
 8005b28:	75fb      	strb	r3, [r7, #23]
				v_e=straight_table(90-MAZE_OFFSET, v_e,100,input_StraightVelocity,input_StraightAcceleration, mode);
 8005b2a:	6978      	ldr	r0, [r7, #20]
 8005b2c:	ed97 2a01 	vldr	s4, [r7, #4]
 8005b30:	edd7 1a03 	vldr	s3, [r7, #12]
 8005b34:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8005c04 <AdatiWayReturn+0xa98>
 8005b38:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8005b3c:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8005c08 <AdatiWayReturn+0xa9c>
 8005b40:	f7fb fffa 	bl	8001b38 <straight_table>
 8005b44:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
				pl_motor_stop();
 8005b48:	f7fc fdd0 	bl	80026ec <pl_motor_stop>
				wait_ms(300);
 8005b4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005b50:	f7fd ffda 	bl	8003b08 <wait_ms>
				pl_motor_start();
 8005b54:	f7fc fdb6 	bl	80026c4 <pl_motor_start>
				v_ea=turning_table(180, 120,120,input_TurningVelocity,input_TurningAcceleration);
 8005b58:	ed97 2a00 	vldr	s4, [r7]
 8005b5c:	edd7 1a02 	vldr	s3, [r7, #8]
 8005b60:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8005c1c <AdatiWayReturn+0xab0>
 8005b64:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8005c1c <AdatiWayReturn+0xab0>
 8005b68:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8005c0c <AdatiWayReturn+0xaa0>
 8005b6c:	f7fc f8de 	bl	8001d2c <turning_table>
 8005b70:	ed87 0a08 	vstr	s0, [r7, #32]
				pl_motor_stop();
 8005b74:	f7fc fdba 	bl	80026ec <pl_motor_stop>
				wait_ms(300);
 8005b78:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005b7c:	f7fd ffc4 	bl	8003b08 <wait_ms>
				pl_motor_start();
 8005b80:	f7fc fda0 	bl	80026c4 <pl_motor_start>
				v_e=straight_table(-90, -v_e,-100,-200,input_StraightAcceleration, mode);
 8005b84:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005b88:	eef1 7a67 	vneg.f32	s15, s15
 8005b8c:	6978      	ldr	r0, [r7, #20]
 8005b8e:	ed97 2a01 	vldr	s4, [r7, #4]
 8005b92:	eddf 1a1f 	vldr	s3, [pc, #124]	; 8005c10 <AdatiWayReturn+0xaa4>
 8005b96:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8005c14 <AdatiWayReturn+0xaa8>
 8005b9a:	eef0 0a67 	vmov.f32	s1, s15
 8005b9e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8005c00 <AdatiWayReturn+0xa94>
 8005ba2:	f7fb ffc9 	bl	8001b38 <straight_table>
 8005ba6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
				pl_motor_stop();
 8005baa:	f7fc fd9f 	bl	80026ec <pl_motor_stop>
				wait_ms(600);
 8005bae:	f44f 7016 	mov.w	r0, #600	; 0x258
 8005bb2:	f7fd ffa9 	bl	8003b08 <wait_ms>
				mode.WallControlMode=1;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	753b      	strb	r3, [r7, #20]
				pl_motor_start();
 8005bba:	f7fc fd83 	bl	80026c4 <pl_motor_start>
				v_e=straight_table(90+BACK_TO_CENTER, 120,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 8005bbe:	6978      	ldr	r0, [r7, #20]
 8005bc0:	ed97 2a01 	vldr	s4, [r7, #4]
 8005bc4:	edd7 1a03 	vldr	s3, [r7, #12]
 8005bc8:	ed97 1a03 	vldr	s2, [r7, #12]
 8005bcc:	eddf 0a13 	vldr	s1, [pc, #76]	; 8005c1c <AdatiWayReturn+0xab0>
 8005bd0:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8005c20 <AdatiWayReturn+0xab4>
 8005bd4:	f7fb ffb0 	bl	8001b38 <straight_table>
 8005bd8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
				direction = direction + 2;
 8005bdc:	4b07      	ldr	r3, [pc, #28]	; (8005bfc <AdatiWayReturn+0xa90>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3302      	adds	r3, #2
 8005be2:	4a06      	ldr	r2, [pc, #24]	; (8005bfc <AdatiWayReturn+0xa90>)
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	e083      	b.n	8005cf0 <AdatiWayReturn+0xb84>
 8005be8:	20000f5c 	.word	0x20000f5c
 8005bec:	20000f5d 	.word	0x20000f5d
 8005bf0:	20000f5e 	.word	0x20000f5e
 8005bf4:	43200000 	.word	0x43200000
 8005bf8:	20000a50 	.word	0x20000a50
 8005bfc:	20000f58 	.word	0x20000f58
 8005c00:	c2b40000 	.word	0xc2b40000
 8005c04:	42c80000 	.word	0x42c80000
 8005c08:	428c0000 	.word	0x428c0000
 8005c0c:	43340000 	.word	0x43340000
 8005c10:	c3480000 	.word	0xc3480000
 8005c14:	c2c80000 	.word	0xc2c80000
 8005c18:	c21e0000 	.word	0xc21e0000
 8005c1c:	42f00000 	.word	0x42f00000
 8005c20:	43018000 	.word	0x43018000
			}else{
				mode.WallControlMode=0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	75fb      	strb	r3, [r7, #23]
				pl_motor_start();
 8005c30:	f7fc fd48 	bl	80026c4 <pl_motor_start>
				v_e=straight_table(90-MAZE_OFFSET, v_e,100,input_StraightVelocity,input_StraightAcceleration, mode);
 8005c34:	6978      	ldr	r0, [r7, #20]
 8005c36:	ed97 2a01 	vldr	s4, [r7, #4]
 8005c3a:	edd7 1a03 	vldr	s3, [r7, #12]
 8005c3e:	ed1f 1a0f 	vldr	s2, [pc, #-60]	; 8005c04 <AdatiWayReturn+0xa98>
 8005c42:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8005c46:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 8005c08 <AdatiWayReturn+0xa9c>
 8005c4a:	f7fb ff75 	bl	8001b38 <straight_table>
 8005c4e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
				pl_motor_stop();
 8005c52:	f7fc fd4b 	bl	80026ec <pl_motor_stop>
				wait_ms(300);
 8005c56:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005c5a:	f7fd ff55 	bl	8003b08 <wait_ms>
				pl_motor_start();
 8005c5e:	f7fc fd31 	bl	80026c4 <pl_motor_start>
				v_ea=turning_table(180, 120,120,input_TurningVelocity,input_TurningAcceleration);
 8005c62:	ed97 2a00 	vldr	s4, [r7]
 8005c66:	edd7 1a02 	vldr	s3, [r7, #8]
 8005c6a:	ed1f 1a14 	vldr	s2, [pc, #-80]	; 8005c1c <AdatiWayReturn+0xab0>
 8005c6e:	ed5f 0a15 	vldr	s1, [pc, #-84]	; 8005c1c <AdatiWayReturn+0xab0>
 8005c72:	ed1f 0a1a 	vldr	s0, [pc, #-104]	; 8005c0c <AdatiWayReturn+0xaa0>
 8005c76:	f7fc f859 	bl	8001d2c <turning_table>
 8005c7a:	ed87 0a08 	vstr	s0, [r7, #32]
				pl_motor_stop();
 8005c7e:	f7fc fd35 	bl	80026ec <pl_motor_stop>
				wait_ms(300);
 8005c82:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005c86:	f7fd ff3f 	bl	8003b08 <wait_ms>
				pl_motor_start();
 8005c8a:	f7fc fd1b 	bl	80026c4 <pl_motor_start>
				v_e=straight_table(-BACK_TO_CENTER, -v_e,-100,-200,input_StraightAcceleration, mode);
 8005c8e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005c92:	eef1 7a67 	vneg.f32	s15, s15
 8005c96:	6978      	ldr	r0, [r7, #20]
 8005c98:	ed97 2a01 	vldr	s4, [r7, #4]
 8005c9c:	ed5f 1a24 	vldr	s3, [pc, #-144]	; 8005c10 <AdatiWayReturn+0xaa4>
 8005ca0:	ed1f 1a24 	vldr	s2, [pc, #-144]	; 8005c14 <AdatiWayReturn+0xaa8>
 8005ca4:	eef0 0a67 	vmov.f32	s1, s15
 8005ca8:	ed1f 0a25 	vldr	s0, [pc, #-148]	; 8005c18 <AdatiWayReturn+0xaac>
 8005cac:	f7fb ff44 	bl	8001b38 <straight_table>
 8005cb0:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
				pl_motor_stop();
 8005cb4:	f7fc fd1a 	bl	80026ec <pl_motor_stop>
				wait_ms(600);
 8005cb8:	f44f 7016 	mov.w	r0, #600	; 0x258
 8005cbc:	f7fd ff24 	bl	8003b08 <wait_ms>
				mode.WallControlMode=1;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	753b      	strb	r3, [r7, #20]
				pl_motor_start();
 8005cc4:	f7fc fcfe 	bl	80026c4 <pl_motor_start>
				v_e=straight_table(90+BACK_TO_CENTER, 120,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 8005cc8:	6978      	ldr	r0, [r7, #20]
 8005cca:	ed97 2a01 	vldr	s4, [r7, #4]
 8005cce:	edd7 1a03 	vldr	s3, [r7, #12]
 8005cd2:	ed97 1a03 	vldr	s2, [r7, #12]
 8005cd6:	ed5f 0a2f 	vldr	s1, [pc, #-188]	; 8005c1c <AdatiWayReturn+0xab0>
 8005cda:	ed1f 0a2f 	vldr	s0, [pc, #-188]	; 8005c20 <AdatiWayReturn+0xab4>
 8005cde:	f7fb ff2b 	bl	8001b38 <straight_table>
 8005ce2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
				direction = direction + 2;
 8005ce6:	4b1b      	ldr	r3, [pc, #108]	; (8005d54 <AdatiWayReturn+0xbe8>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3302      	adds	r3, #2
 8005cec:	4a19      	ldr	r2, [pc, #100]	; (8005d54 <AdatiWayReturn+0xbe8>)
 8005cee:	6013      	str	r3, [r2, #0]
			}

		}


		if (direction == 5) {
 8005cf0:	4b18      	ldr	r3, [pc, #96]	; (8005d54 <AdatiWayReturn+0xbe8>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b05      	cmp	r3, #5
 8005cf6:	d102      	bne.n	8005cfe <AdatiWayReturn+0xb92>
			direction = 1;
 8005cf8:	4b16      	ldr	r3, [pc, #88]	; (8005d54 <AdatiWayReturn+0xbe8>)
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]
		}
		if (direction == 6) {
 8005cfe:	4b15      	ldr	r3, [pc, #84]	; (8005d54 <AdatiWayReturn+0xbe8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b06      	cmp	r3, #6
 8005d04:	d102      	bne.n	8005d0c <AdatiWayReturn+0xba0>
			direction = 2;
 8005d06:	4b13      	ldr	r3, [pc, #76]	; (8005d54 <AdatiWayReturn+0xbe8>)
 8005d08:	2202      	movs	r2, #2
 8005d0a:	601a      	str	r2, [r3, #0]
		}
		if (direction == 0) {
 8005d0c:	4b11      	ldr	r3, [pc, #68]	; (8005d54 <AdatiWayReturn+0xbe8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d102      	bne.n	8005d1a <AdatiWayReturn+0xbae>
			direction = 4;
 8005d14:	4b0f      	ldr	r3, [pc, #60]	; (8005d54 <AdatiWayReturn+0xbe8>)
 8005d16:	2204      	movs	r2, #4
 8005d18:	601a      	str	r2, [r3, #0]
		}
		if (direction == -1) {
 8005d1a:	4b0e      	ldr	r3, [pc, #56]	; (8005d54 <AdatiWayReturn+0xbe8>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d22:	f47f ada2 	bne.w	800586a <AdatiWayReturn+0x6fe>
			direction = 3;
 8005d26:	4b0b      	ldr	r3, [pc, #44]	; (8005d54 <AdatiWayReturn+0xbe8>)
 8005d28:	2203      	movs	r2, #3
 8005d2a:	601a      	str	r2, [r3, #0]
		update_coordinate();
 8005d2c:	e59d      	b.n	800586a <AdatiWayReturn+0x6fe>
			break;
 8005d2e:	bf00      	nop
 8005d30:	e000      	b.n	8005d34 <AdatiWayReturn+0xbc8>
			break;
 8005d32:	bf00      	nop
//			}
//			while (green_switch == 0) {
//			}

	}
	pl_motor_stop();
 8005d34:	f7fc fcda 	bl	80026ec <pl_motor_stop>
	wait_ms(500);
 8005d38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d3c:	f7fd fee4 	bl	8003b08 <wait_ms>
	pl_motor_standby(0);
 8005d40:	2000      	movs	r0, #0
 8005d42:	f7fc fc55 	bl	80025f0 <pl_motor_standby>
	maze_display();
 8005d46:	f000 ff67 	bl	8006c18 <maze_display>


}
 8005d4a:	bf00      	nop
 8005d4c:	3728      	adds	r7, #40	; 0x28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	20000f58 	.word	0x20000f58

08005d58 <update_coordinate>:

void update_coordinate(void){
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
// int direction,int *x_coordinate,int *y_coordinate
	switch (direction) {
 8005d5c:	4b16      	ldr	r3, [pc, #88]	; (8005db8 <update_coordinate+0x60>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3b01      	subs	r3, #1
 8005d62:	2b03      	cmp	r3, #3
 8005d64:	d822      	bhi.n	8005dac <update_coordinate+0x54>
 8005d66:	a201      	add	r2, pc, #4	; (adr r2, 8005d6c <update_coordinate+0x14>)
 8005d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6c:	08005d7d 	.word	0x08005d7d
 8005d70:	08005d89 	.word	0x08005d89
 8005d74:	08005d95 	.word	0x08005d95
 8005d78:	08005da1 	.word	0x08005da1
	case 1://北
		y = y + 1;
 8005d7c:	4b0f      	ldr	r3, [pc, #60]	; (8005dbc <update_coordinate+0x64>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3301      	adds	r3, #1
 8005d82:	4a0e      	ldr	r2, [pc, #56]	; (8005dbc <update_coordinate+0x64>)
 8005d84:	6013      	str	r3, [r2, #0]
		break;
 8005d86:	e011      	b.n	8005dac <update_coordinate+0x54>
	case 2://東
		x = x + 1;
 8005d88:	4b0d      	ldr	r3, [pc, #52]	; (8005dc0 <update_coordinate+0x68>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	4a0c      	ldr	r2, [pc, #48]	; (8005dc0 <update_coordinate+0x68>)
 8005d90:	6013      	str	r3, [r2, #0]
		break;
 8005d92:	e00b      	b.n	8005dac <update_coordinate+0x54>
	case 3://南
		y = y - 1;
 8005d94:	4b09      	ldr	r3, [pc, #36]	; (8005dbc <update_coordinate+0x64>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	4a08      	ldr	r2, [pc, #32]	; (8005dbc <update_coordinate+0x64>)
 8005d9c:	6013      	str	r3, [r2, #0]
		break;
 8005d9e:	e005      	b.n	8005dac <update_coordinate+0x54>
	case 4://西
		x = x - 1;
 8005da0:	4b07      	ldr	r3, [pc, #28]	; (8005dc0 <update_coordinate+0x68>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3b01      	subs	r3, #1
 8005da6:	4a06      	ldr	r2, [pc, #24]	; (8005dc0 <update_coordinate+0x68>)
 8005da8:	6013      	str	r3, [r2, #0]
		break;
 8005daa:	bf00      	nop
	}

}
 8005dac:	bf00      	nop
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	20000f58 	.word	0x20000f58
 8005dbc:	20000f54 	.word	0x20000f54
 8005dc0:	20000f50 	.word	0x20000f50

08005dc4 <update_wall>:

//kokomade

}

void update_wall(void){
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0


	switch (direction) {
 8005dc8:	4b5e      	ldr	r3, [pc, #376]	; (8005f44 <update_wall+0x180>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	f200 82f7 	bhi.w	80063c2 <update_wall+0x5fe>
 8005dd4:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <update_wall+0x18>)
 8005dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dda:	bf00      	nop
 8005ddc:	08005ded 	.word	0x08005ded
 8005de0:	08005f61 	.word	0x08005f61
 8005de4:	080060d9 	.word	0x080060d9
 8005de8:	08006251 	.word	0x08006251
	case 1:
		if (y <= 14) {
 8005dec:	4b56      	ldr	r3, [pc, #344]	; (8005f48 <update_wall+0x184>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b0e      	cmp	r3, #14
 8005df2:	dc35      	bgt.n	8005e60 <update_wall+0x9c>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8005df4:	4b54      	ldr	r3, [pc, #336]	; (8005f48 <update_wall+0x184>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a54      	ldr	r2, [pc, #336]	; (8005f4c <update_wall+0x188>)
 8005dfa:	332c      	adds	r3, #44	; 0x2c
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	4413      	add	r3, r2
 8005e00:	885b      	ldrh	r3, [r3, #2]
 8005e02:	b21a      	sxth	r2, r3
 8005e04:	4b52      	ldr	r3, [pc, #328]	; (8005f50 <update_wall+0x18c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2101      	movs	r1, #1
 8005e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0e:	b21b      	sxth	r3, r3
 8005e10:	4313      	orrs	r3, r2
 8005e12:	b21a      	sxth	r2, r3
 8005e14:	4b4c      	ldr	r3, [pc, #304]	; (8005f48 <update_wall+0x184>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	b291      	uxth	r1, r2
 8005e1a:	4a4c      	ldr	r2, [pc, #304]	; (8005f4c <update_wall+0x188>)
 8005e1c:	332c      	adds	r3, #44	; 0x2c
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	4413      	add	r3, r2
 8005e22:	460a      	mov	r2, r1
 8005e24:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8005e26:	4b4b      	ldr	r3, [pc, #300]	; (8005f54 <update_wall+0x190>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d018      	beq.n	8005e60 <update_wall+0x9c>
 8005e2e:	4b46      	ldr	r3, [pc, #280]	; (8005f48 <update_wall+0x184>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a46      	ldr	r2, [pc, #280]	; (8005f4c <update_wall+0x188>)
 8005e34:	330c      	adds	r3, #12
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	4413      	add	r3, r2
 8005e3a:	88db      	ldrh	r3, [r3, #6]
 8005e3c:	b21a      	sxth	r2, r3
 8005e3e:	4b44      	ldr	r3, [pc, #272]	; (8005f50 <update_wall+0x18c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2101      	movs	r1, #1
 8005e44:	fa01 f303 	lsl.w	r3, r1, r3
 8005e48:	b21b      	sxth	r3, r3
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	b21a      	sxth	r2, r3
 8005e4e:	4b3e      	ldr	r3, [pc, #248]	; (8005f48 <update_wall+0x184>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	b291      	uxth	r1, r2
 8005e54:	4a3d      	ldr	r2, [pc, #244]	; (8005f4c <update_wall+0x188>)
 8005e56:	330c      	adds	r3, #12
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	4413      	add	r3, r2
 8005e5c:	460a      	mov	r2, r1
 8005e5e:	80da      	strh	r2, [r3, #6]
		}

		if (x >= 1) {
 8005e60:	4b3b      	ldr	r3, [pc, #236]	; (8005f50 <update_wall+0x18c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	dd34      	ble.n	8005ed2 <update_wall+0x10e>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8005e68:	4b39      	ldr	r3, [pc, #228]	; (8005f50 <update_wall+0x18c>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	4a37      	ldr	r2, [pc, #220]	; (8005f4c <update_wall+0x188>)
 8005e70:	331c      	adds	r3, #28
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	4413      	add	r3, r2
 8005e76:	889b      	ldrh	r3, [r3, #4]
 8005e78:	b21a      	sxth	r2, r3
 8005e7a:	4b33      	ldr	r3, [pc, #204]	; (8005f48 <update_wall+0x184>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2101      	movs	r1, #1
 8005e80:	fa01 f303 	lsl.w	r3, r1, r3
 8005e84:	b21b      	sxth	r3, r3
 8005e86:	4313      	orrs	r3, r2
 8005e88:	b21a      	sxth	r2, r3
 8005e8a:	4b31      	ldr	r3, [pc, #196]	; (8005f50 <update_wall+0x18c>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	b291      	uxth	r1, r2
 8005e92:	4a2e      	ldr	r2, [pc, #184]	; (8005f4c <update_wall+0x188>)
 8005e94:	331c      	adds	r3, #28
 8005e96:	005b      	lsls	r3, r3, #1
 8005e98:	4413      	add	r3, r2
 8005e9a:	460a      	mov	r2, r1
 8005e9c:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8005e9e:	4b2e      	ldr	r3, [pc, #184]	; (8005f58 <update_wall+0x194>)
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d015      	beq.n	8005ed2 <update_wall+0x10e>
 8005ea6:	4b2a      	ldr	r3, [pc, #168]	; (8005f50 <update_wall+0x18c>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	4a27      	ldr	r2, [pc, #156]	; (8005f4c <update_wall+0x188>)
 8005eae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eb2:	b21a      	sxth	r2, r3
 8005eb4:	4b24      	ldr	r3, [pc, #144]	; (8005f48 <update_wall+0x184>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2101      	movs	r1, #1
 8005eba:	fa01 f303 	lsl.w	r3, r1, r3
 8005ebe:	b21b      	sxth	r3, r3
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	b21a      	sxth	r2, r3
 8005ec4:	4b22      	ldr	r3, [pc, #136]	; (8005f50 <update_wall+0x18c>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b291      	uxth	r1, r2
 8005ecc:	4a1f      	ldr	r2, [pc, #124]	; (8005f4c <update_wall+0x188>)
 8005ece:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x <= 14) {
 8005ed2:	4b1f      	ldr	r3, [pc, #124]	; (8005f50 <update_wall+0x18c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b0e      	cmp	r3, #14
 8005ed8:	f300 826c 	bgt.w	80063b4 <update_wall+0x5f0>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8005edc:	4b1c      	ldr	r3, [pc, #112]	; (8005f50 <update_wall+0x18c>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a1a      	ldr	r2, [pc, #104]	; (8005f4c <update_wall+0x188>)
 8005ee2:	331c      	adds	r3, #28
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	4413      	add	r3, r2
 8005ee8:	889b      	ldrh	r3, [r3, #4]
 8005eea:	b21a      	sxth	r2, r3
 8005eec:	4b16      	ldr	r3, [pc, #88]	; (8005f48 <update_wall+0x184>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef6:	b21b      	sxth	r3, r3
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	b21a      	sxth	r2, r3
 8005efc:	4b14      	ldr	r3, [pc, #80]	; (8005f50 <update_wall+0x18c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	b291      	uxth	r1, r2
 8005f02:	4a12      	ldr	r2, [pc, #72]	; (8005f4c <update_wall+0x188>)
 8005f04:	331c      	adds	r3, #28
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	4413      	add	r3, r2
 8005f0a:	460a      	mov	r2, r1
 8005f0c:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8005f0e:	4b13      	ldr	r3, [pc, #76]	; (8005f5c <update_wall+0x198>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 824e 	beq.w	80063b4 <update_wall+0x5f0>
 8005f18:	4b0d      	ldr	r3, [pc, #52]	; (8005f50 <update_wall+0x18c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a0b      	ldr	r2, [pc, #44]	; (8005f4c <update_wall+0x188>)
 8005f1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f22:	b21a      	sxth	r2, r3
 8005f24:	4b08      	ldr	r3, [pc, #32]	; (8005f48 <update_wall+0x184>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2101      	movs	r1, #1
 8005f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f2e:	b21b      	sxth	r3, r3
 8005f30:	4313      	orrs	r3, r2
 8005f32:	b21a      	sxth	r2, r3
 8005f34:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <update_wall+0x18c>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	b291      	uxth	r1, r2
 8005f3a:	4a04      	ldr	r2, [pc, #16]	; (8005f4c <update_wall+0x188>)
 8005f3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 8005f40:	e238      	b.n	80063b4 <update_wall+0x5f0>
 8005f42:	bf00      	nop
 8005f44:	20000f58 	.word	0x20000f58
 8005f48:	20000f54 	.word	0x20000f54
 8005f4c:	20000f60 	.word	0x20000f60
 8005f50:	20000f50 	.word	0x20000f50
 8005f54:	20000f5c 	.word	0x20000f5c
 8005f58:	20000f5e 	.word	0x20000f5e
 8005f5c:	20000f5d 	.word	0x20000f5d
	case 2:
		if (x <= 14) {
 8005f60:	4b57      	ldr	r3, [pc, #348]	; (80060c0 <update_wall+0x2fc>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b0e      	cmp	r3, #14
 8005f66:	dc30      	bgt.n	8005fca <update_wall+0x206>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8005f68:	4b55      	ldr	r3, [pc, #340]	; (80060c0 <update_wall+0x2fc>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a55      	ldr	r2, [pc, #340]	; (80060c4 <update_wall+0x300>)
 8005f6e:	331c      	adds	r3, #28
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	4413      	add	r3, r2
 8005f74:	889b      	ldrh	r3, [r3, #4]
 8005f76:	b21a      	sxth	r2, r3
 8005f78:	4b53      	ldr	r3, [pc, #332]	; (80060c8 <update_wall+0x304>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f82:	b21b      	sxth	r3, r3
 8005f84:	4313      	orrs	r3, r2
 8005f86:	b21a      	sxth	r2, r3
 8005f88:	4b4d      	ldr	r3, [pc, #308]	; (80060c0 <update_wall+0x2fc>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	b291      	uxth	r1, r2
 8005f8e:	4a4d      	ldr	r2, [pc, #308]	; (80060c4 <update_wall+0x300>)
 8005f90:	331c      	adds	r3, #28
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	4413      	add	r3, r2
 8005f96:	460a      	mov	r2, r1
 8005f98:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8005f9a:	4b4c      	ldr	r3, [pc, #304]	; (80060cc <update_wall+0x308>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d013      	beq.n	8005fca <update_wall+0x206>
 8005fa2:	4b47      	ldr	r3, [pc, #284]	; (80060c0 <update_wall+0x2fc>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a47      	ldr	r2, [pc, #284]	; (80060c4 <update_wall+0x300>)
 8005fa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fac:	b21a      	sxth	r2, r3
 8005fae:	4b46      	ldr	r3, [pc, #280]	; (80060c8 <update_wall+0x304>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb8:	b21b      	sxth	r3, r3
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	b21a      	sxth	r2, r3
 8005fbe:	4b40      	ldr	r3, [pc, #256]	; (80060c0 <update_wall+0x2fc>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	b291      	uxth	r1, r2
 8005fc4:	4a3f      	ldr	r2, [pc, #252]	; (80060c4 <update_wall+0x300>)
 8005fc6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y <= 14) {
 8005fca:	4b3f      	ldr	r3, [pc, #252]	; (80060c8 <update_wall+0x304>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b0e      	cmp	r3, #14
 8005fd0:	dc35      	bgt.n	800603e <update_wall+0x27a>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8005fd2:	4b3d      	ldr	r3, [pc, #244]	; (80060c8 <update_wall+0x304>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a3b      	ldr	r2, [pc, #236]	; (80060c4 <update_wall+0x300>)
 8005fd8:	332c      	adds	r3, #44	; 0x2c
 8005fda:	005b      	lsls	r3, r3, #1
 8005fdc:	4413      	add	r3, r2
 8005fde:	885b      	ldrh	r3, [r3, #2]
 8005fe0:	b21a      	sxth	r2, r3
 8005fe2:	4b37      	ldr	r3, [pc, #220]	; (80060c0 <update_wall+0x2fc>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fec:	b21b      	sxth	r3, r3
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	b21a      	sxth	r2, r3
 8005ff2:	4b35      	ldr	r3, [pc, #212]	; (80060c8 <update_wall+0x304>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	b291      	uxth	r1, r2
 8005ff8:	4a32      	ldr	r2, [pc, #200]	; (80060c4 <update_wall+0x300>)
 8005ffa:	332c      	adds	r3, #44	; 0x2c
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	4413      	add	r3, r2
 8006000:	460a      	mov	r2, r1
 8006002:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8006004:	4b32      	ldr	r3, [pc, #200]	; (80060d0 <update_wall+0x30c>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d018      	beq.n	800603e <update_wall+0x27a>
 800600c:	4b2e      	ldr	r3, [pc, #184]	; (80060c8 <update_wall+0x304>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a2c      	ldr	r2, [pc, #176]	; (80060c4 <update_wall+0x300>)
 8006012:	330c      	adds	r3, #12
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	4413      	add	r3, r2
 8006018:	88db      	ldrh	r3, [r3, #6]
 800601a:	b21a      	sxth	r2, r3
 800601c:	4b28      	ldr	r3, [pc, #160]	; (80060c0 <update_wall+0x2fc>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2101      	movs	r1, #1
 8006022:	fa01 f303 	lsl.w	r3, r1, r3
 8006026:	b21b      	sxth	r3, r3
 8006028:	4313      	orrs	r3, r2
 800602a:	b21a      	sxth	r2, r3
 800602c:	4b26      	ldr	r3, [pc, #152]	; (80060c8 <update_wall+0x304>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	b291      	uxth	r1, r2
 8006032:	4a24      	ldr	r2, [pc, #144]	; (80060c4 <update_wall+0x300>)
 8006034:	330c      	adds	r3, #12
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	4413      	add	r3, r2
 800603a:	460a      	mov	r2, r1
 800603c:	80da      	strh	r2, [r3, #6]
		}

		if (y >= 1) {
 800603e:	4b22      	ldr	r3, [pc, #136]	; (80060c8 <update_wall+0x304>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	f340 81b8 	ble.w	80063b8 <update_wall+0x5f4>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8006048:	4b1f      	ldr	r3, [pc, #124]	; (80060c8 <update_wall+0x304>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3b01      	subs	r3, #1
 800604e:	4a1d      	ldr	r2, [pc, #116]	; (80060c4 <update_wall+0x300>)
 8006050:	332c      	adds	r3, #44	; 0x2c
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	4413      	add	r3, r2
 8006056:	885b      	ldrh	r3, [r3, #2]
 8006058:	b21a      	sxth	r2, r3
 800605a:	4b19      	ldr	r3, [pc, #100]	; (80060c0 <update_wall+0x2fc>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2101      	movs	r1, #1
 8006060:	fa01 f303 	lsl.w	r3, r1, r3
 8006064:	b21b      	sxth	r3, r3
 8006066:	4313      	orrs	r3, r2
 8006068:	b21a      	sxth	r2, r3
 800606a:	4b17      	ldr	r3, [pc, #92]	; (80060c8 <update_wall+0x304>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3b01      	subs	r3, #1
 8006070:	b291      	uxth	r1, r2
 8006072:	4a14      	ldr	r2, [pc, #80]	; (80060c4 <update_wall+0x300>)
 8006074:	332c      	adds	r3, #44	; 0x2c
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	4413      	add	r3, r2
 800607a:	460a      	mov	r2, r1
 800607c:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 800607e:	4b15      	ldr	r3, [pc, #84]	; (80060d4 <update_wall+0x310>)
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 8198 	beq.w	80063b8 <update_wall+0x5f4>
 8006088:	4b0f      	ldr	r3, [pc, #60]	; (80060c8 <update_wall+0x304>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3b01      	subs	r3, #1
 800608e:	4a0d      	ldr	r2, [pc, #52]	; (80060c4 <update_wall+0x300>)
 8006090:	330c      	adds	r3, #12
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	4413      	add	r3, r2
 8006096:	88db      	ldrh	r3, [r3, #6]
 8006098:	b21a      	sxth	r2, r3
 800609a:	4b09      	ldr	r3, [pc, #36]	; (80060c0 <update_wall+0x2fc>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2101      	movs	r1, #1
 80060a0:	fa01 f303 	lsl.w	r3, r1, r3
 80060a4:	b21b      	sxth	r3, r3
 80060a6:	4313      	orrs	r3, r2
 80060a8:	b21a      	sxth	r2, r3
 80060aa:	4b07      	ldr	r3, [pc, #28]	; (80060c8 <update_wall+0x304>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b291      	uxth	r1, r2
 80060b2:	4a04      	ldr	r2, [pc, #16]	; (80060c4 <update_wall+0x300>)
 80060b4:	330c      	adds	r3, #12
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	4413      	add	r3, r2
 80060ba:	460a      	mov	r2, r1
 80060bc:	80da      	strh	r2, [r3, #6]
		}

		break;
 80060be:	e17b      	b.n	80063b8 <update_wall+0x5f4>
 80060c0:	20000f50 	.word	0x20000f50
 80060c4:	20000f60 	.word	0x20000f60
 80060c8:	20000f54 	.word	0x20000f54
 80060cc:	20000f5c 	.word	0x20000f5c
 80060d0:	20000f5e 	.word	0x20000f5e
 80060d4:	20000f5d 	.word	0x20000f5d
	case 3:
		if (y >= 1) {
 80060d8:	4b57      	ldr	r3, [pc, #348]	; (8006238 <update_wall+0x474>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	dd39      	ble.n	8006154 <update_wall+0x390>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 80060e0:	4b55      	ldr	r3, [pc, #340]	; (8006238 <update_wall+0x474>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3b01      	subs	r3, #1
 80060e6:	4a55      	ldr	r2, [pc, #340]	; (800623c <update_wall+0x478>)
 80060e8:	332c      	adds	r3, #44	; 0x2c
 80060ea:	005b      	lsls	r3, r3, #1
 80060ec:	4413      	add	r3, r2
 80060ee:	885b      	ldrh	r3, [r3, #2]
 80060f0:	b21a      	sxth	r2, r3
 80060f2:	4b53      	ldr	r3, [pc, #332]	; (8006240 <update_wall+0x47c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2101      	movs	r1, #1
 80060f8:	fa01 f303 	lsl.w	r3, r1, r3
 80060fc:	b21b      	sxth	r3, r3
 80060fe:	4313      	orrs	r3, r2
 8006100:	b21a      	sxth	r2, r3
 8006102:	4b4d      	ldr	r3, [pc, #308]	; (8006238 <update_wall+0x474>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3b01      	subs	r3, #1
 8006108:	b291      	uxth	r1, r2
 800610a:	4a4c      	ldr	r2, [pc, #304]	; (800623c <update_wall+0x478>)
 800610c:	332c      	adds	r3, #44	; 0x2c
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	4413      	add	r3, r2
 8006112:	460a      	mov	r2, r1
 8006114:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8006116:	4b4b      	ldr	r3, [pc, #300]	; (8006244 <update_wall+0x480>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d01a      	beq.n	8006154 <update_wall+0x390>
 800611e:	4b46      	ldr	r3, [pc, #280]	; (8006238 <update_wall+0x474>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3b01      	subs	r3, #1
 8006124:	4a45      	ldr	r2, [pc, #276]	; (800623c <update_wall+0x478>)
 8006126:	330c      	adds	r3, #12
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	4413      	add	r3, r2
 800612c:	88db      	ldrh	r3, [r3, #6]
 800612e:	b21a      	sxth	r2, r3
 8006130:	4b43      	ldr	r3, [pc, #268]	; (8006240 <update_wall+0x47c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2101      	movs	r1, #1
 8006136:	fa01 f303 	lsl.w	r3, r1, r3
 800613a:	b21b      	sxth	r3, r3
 800613c:	4313      	orrs	r3, r2
 800613e:	b21a      	sxth	r2, r3
 8006140:	4b3d      	ldr	r3, [pc, #244]	; (8006238 <update_wall+0x474>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3b01      	subs	r3, #1
 8006146:	b291      	uxth	r1, r2
 8006148:	4a3c      	ldr	r2, [pc, #240]	; (800623c <update_wall+0x478>)
 800614a:	330c      	adds	r3, #12
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	4413      	add	r3, r2
 8006150:	460a      	mov	r2, r1
 8006152:	80da      	strh	r2, [r3, #6]
		}

		if (x <= 14) {
 8006154:	4b3a      	ldr	r3, [pc, #232]	; (8006240 <update_wall+0x47c>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b0e      	cmp	r3, #14
 800615a:	dc30      	bgt.n	80061be <update_wall+0x3fa>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 800615c:	4b38      	ldr	r3, [pc, #224]	; (8006240 <update_wall+0x47c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a36      	ldr	r2, [pc, #216]	; (800623c <update_wall+0x478>)
 8006162:	331c      	adds	r3, #28
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	4413      	add	r3, r2
 8006168:	889b      	ldrh	r3, [r3, #4]
 800616a:	b21a      	sxth	r2, r3
 800616c:	4b32      	ldr	r3, [pc, #200]	; (8006238 <update_wall+0x474>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2101      	movs	r1, #1
 8006172:	fa01 f303 	lsl.w	r3, r1, r3
 8006176:	b21b      	sxth	r3, r3
 8006178:	4313      	orrs	r3, r2
 800617a:	b21a      	sxth	r2, r3
 800617c:	4b30      	ldr	r3, [pc, #192]	; (8006240 <update_wall+0x47c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	b291      	uxth	r1, r2
 8006182:	4a2e      	ldr	r2, [pc, #184]	; (800623c <update_wall+0x478>)
 8006184:	331c      	adds	r3, #28
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	4413      	add	r3, r2
 800618a:	460a      	mov	r2, r1
 800618c:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x] = wall.row[x] | (1 << y);}
 800618e:	4b2e      	ldr	r3, [pc, #184]	; (8006248 <update_wall+0x484>)
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d013      	beq.n	80061be <update_wall+0x3fa>
 8006196:	4b2a      	ldr	r3, [pc, #168]	; (8006240 <update_wall+0x47c>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a28      	ldr	r2, [pc, #160]	; (800623c <update_wall+0x478>)
 800619c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061a0:	b21a      	sxth	r2, r3
 80061a2:	4b25      	ldr	r3, [pc, #148]	; (8006238 <update_wall+0x474>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2101      	movs	r1, #1
 80061a8:	fa01 f303 	lsl.w	r3, r1, r3
 80061ac:	b21b      	sxth	r3, r3
 80061ae:	4313      	orrs	r3, r2
 80061b0:	b21a      	sxth	r2, r3
 80061b2:	4b23      	ldr	r3, [pc, #140]	; (8006240 <update_wall+0x47c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	b291      	uxth	r1, r2
 80061b8:	4a20      	ldr	r2, [pc, #128]	; (800623c <update_wall+0x478>)
 80061ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x >= 1) {
 80061be:	4b20      	ldr	r3, [pc, #128]	; (8006240 <update_wall+0x47c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f340 80fa 	ble.w	80063bc <update_wall+0x5f8>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 80061c8:	4b1d      	ldr	r3, [pc, #116]	; (8006240 <update_wall+0x47c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	4a1b      	ldr	r2, [pc, #108]	; (800623c <update_wall+0x478>)
 80061d0:	331c      	adds	r3, #28
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	4413      	add	r3, r2
 80061d6:	889b      	ldrh	r3, [r3, #4]
 80061d8:	b21a      	sxth	r2, r3
 80061da:	4b17      	ldr	r3, [pc, #92]	; (8006238 <update_wall+0x474>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2101      	movs	r1, #1
 80061e0:	fa01 f303 	lsl.w	r3, r1, r3
 80061e4:	b21b      	sxth	r3, r3
 80061e6:	4313      	orrs	r3, r2
 80061e8:	b21a      	sxth	r2, r3
 80061ea:	4b15      	ldr	r3, [pc, #84]	; (8006240 <update_wall+0x47c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3b01      	subs	r3, #1
 80061f0:	b291      	uxth	r1, r2
 80061f2:	4a12      	ldr	r2, [pc, #72]	; (800623c <update_wall+0x478>)
 80061f4:	331c      	adds	r3, #28
 80061f6:	005b      	lsls	r3, r3, #1
 80061f8:	4413      	add	r3, r2
 80061fa:	460a      	mov	r2, r1
 80061fc:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 80061fe:	4b13      	ldr	r3, [pc, #76]	; (800624c <update_wall+0x488>)
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 80da 	beq.w	80063bc <update_wall+0x5f8>
 8006208:	4b0d      	ldr	r3, [pc, #52]	; (8006240 <update_wall+0x47c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3b01      	subs	r3, #1
 800620e:	4a0b      	ldr	r2, [pc, #44]	; (800623c <update_wall+0x478>)
 8006210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006214:	b21a      	sxth	r2, r3
 8006216:	4b08      	ldr	r3, [pc, #32]	; (8006238 <update_wall+0x474>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2101      	movs	r1, #1
 800621c:	fa01 f303 	lsl.w	r3, r1, r3
 8006220:	b21b      	sxth	r3, r3
 8006222:	4313      	orrs	r3, r2
 8006224:	b21a      	sxth	r2, r3
 8006226:	4b06      	ldr	r3, [pc, #24]	; (8006240 <update_wall+0x47c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3b01      	subs	r3, #1
 800622c:	b291      	uxth	r1, r2
 800622e:	4a03      	ldr	r2, [pc, #12]	; (800623c <update_wall+0x478>)
 8006230:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 8006234:	e0c2      	b.n	80063bc <update_wall+0x5f8>
 8006236:	bf00      	nop
 8006238:	20000f54 	.word	0x20000f54
 800623c:	20000f60 	.word	0x20000f60
 8006240:	20000f50 	.word	0x20000f50
 8006244:	20000f5c 	.word	0x20000f5c
 8006248:	20000f5e 	.word	0x20000f5e
 800624c:	20000f5d 	.word	0x20000f5d
	case 4:
		if (x >= 1) {
 8006250:	4b5e      	ldr	r3, [pc, #376]	; (80063cc <update_wall+0x608>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	dd34      	ble.n	80062c2 <update_wall+0x4fe>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8006258:	4b5c      	ldr	r3, [pc, #368]	; (80063cc <update_wall+0x608>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3b01      	subs	r3, #1
 800625e:	4a5c      	ldr	r2, [pc, #368]	; (80063d0 <update_wall+0x60c>)
 8006260:	331c      	adds	r3, #28
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	4413      	add	r3, r2
 8006266:	889b      	ldrh	r3, [r3, #4]
 8006268:	b21a      	sxth	r2, r3
 800626a:	4b5a      	ldr	r3, [pc, #360]	; (80063d4 <update_wall+0x610>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2101      	movs	r1, #1
 8006270:	fa01 f303 	lsl.w	r3, r1, r3
 8006274:	b21b      	sxth	r3, r3
 8006276:	4313      	orrs	r3, r2
 8006278:	b21a      	sxth	r2, r3
 800627a:	4b54      	ldr	r3, [pc, #336]	; (80063cc <update_wall+0x608>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	3b01      	subs	r3, #1
 8006280:	b291      	uxth	r1, r2
 8006282:	4a53      	ldr	r2, [pc, #332]	; (80063d0 <update_wall+0x60c>)
 8006284:	331c      	adds	r3, #28
 8006286:	005b      	lsls	r3, r3, #1
 8006288:	4413      	add	r3, r2
 800628a:	460a      	mov	r2, r1
 800628c:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 800628e:	4b52      	ldr	r3, [pc, #328]	; (80063d8 <update_wall+0x614>)
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d015      	beq.n	80062c2 <update_wall+0x4fe>
 8006296:	4b4d      	ldr	r3, [pc, #308]	; (80063cc <update_wall+0x608>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3b01      	subs	r3, #1
 800629c:	4a4c      	ldr	r2, [pc, #304]	; (80063d0 <update_wall+0x60c>)
 800629e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062a2:	b21a      	sxth	r2, r3
 80062a4:	4b4b      	ldr	r3, [pc, #300]	; (80063d4 <update_wall+0x610>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2101      	movs	r1, #1
 80062aa:	fa01 f303 	lsl.w	r3, r1, r3
 80062ae:	b21b      	sxth	r3, r3
 80062b0:	4313      	orrs	r3, r2
 80062b2:	b21a      	sxth	r2, r3
 80062b4:	4b45      	ldr	r3, [pc, #276]	; (80063cc <update_wall+0x608>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b291      	uxth	r1, r2
 80062bc:	4a44      	ldr	r2, [pc, #272]	; (80063d0 <update_wall+0x60c>)
 80062be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y >= 1) {
 80062c2:	4b44      	ldr	r3, [pc, #272]	; (80063d4 <update_wall+0x610>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	dd39      	ble.n	800633e <update_wall+0x57a>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 80062ca:	4b42      	ldr	r3, [pc, #264]	; (80063d4 <update_wall+0x610>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	4a3f      	ldr	r2, [pc, #252]	; (80063d0 <update_wall+0x60c>)
 80062d2:	332c      	adds	r3, #44	; 0x2c
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	4413      	add	r3, r2
 80062d8:	885b      	ldrh	r3, [r3, #2]
 80062da:	b21a      	sxth	r2, r3
 80062dc:	4b3b      	ldr	r3, [pc, #236]	; (80063cc <update_wall+0x608>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2101      	movs	r1, #1
 80062e2:	fa01 f303 	lsl.w	r3, r1, r3
 80062e6:	b21b      	sxth	r3, r3
 80062e8:	4313      	orrs	r3, r2
 80062ea:	b21a      	sxth	r2, r3
 80062ec:	4b39      	ldr	r3, [pc, #228]	; (80063d4 <update_wall+0x610>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	b291      	uxth	r1, r2
 80062f4:	4a36      	ldr	r2, [pc, #216]	; (80063d0 <update_wall+0x60c>)
 80062f6:	332c      	adds	r3, #44	; 0x2c
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	4413      	add	r3, r2
 80062fc:	460a      	mov	r2, r1
 80062fe:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8006300:	4b36      	ldr	r3, [pc, #216]	; (80063dc <update_wall+0x618>)
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d01a      	beq.n	800633e <update_wall+0x57a>
 8006308:	4b32      	ldr	r3, [pc, #200]	; (80063d4 <update_wall+0x610>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3b01      	subs	r3, #1
 800630e:	4a30      	ldr	r2, [pc, #192]	; (80063d0 <update_wall+0x60c>)
 8006310:	330c      	adds	r3, #12
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	4413      	add	r3, r2
 8006316:	88db      	ldrh	r3, [r3, #6]
 8006318:	b21a      	sxth	r2, r3
 800631a:	4b2c      	ldr	r3, [pc, #176]	; (80063cc <update_wall+0x608>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2101      	movs	r1, #1
 8006320:	fa01 f303 	lsl.w	r3, r1, r3
 8006324:	b21b      	sxth	r3, r3
 8006326:	4313      	orrs	r3, r2
 8006328:	b21a      	sxth	r2, r3
 800632a:	4b2a      	ldr	r3, [pc, #168]	; (80063d4 <update_wall+0x610>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3b01      	subs	r3, #1
 8006330:	b291      	uxth	r1, r2
 8006332:	4a27      	ldr	r2, [pc, #156]	; (80063d0 <update_wall+0x60c>)
 8006334:	330c      	adds	r3, #12
 8006336:	005b      	lsls	r3, r3, #1
 8006338:	4413      	add	r3, r2
 800633a:	460a      	mov	r2, r1
 800633c:	80da      	strh	r2, [r3, #6]
		}

		if (y <= 14) {
 800633e:	4b25      	ldr	r3, [pc, #148]	; (80063d4 <update_wall+0x610>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b0e      	cmp	r3, #14
 8006344:	dc3c      	bgt.n	80063c0 <update_wall+0x5fc>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8006346:	4b23      	ldr	r3, [pc, #140]	; (80063d4 <update_wall+0x610>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a21      	ldr	r2, [pc, #132]	; (80063d0 <update_wall+0x60c>)
 800634c:	332c      	adds	r3, #44	; 0x2c
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	4413      	add	r3, r2
 8006352:	885b      	ldrh	r3, [r3, #2]
 8006354:	b21a      	sxth	r2, r3
 8006356:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <update_wall+0x608>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2101      	movs	r1, #1
 800635c:	fa01 f303 	lsl.w	r3, r1, r3
 8006360:	b21b      	sxth	r3, r3
 8006362:	4313      	orrs	r3, r2
 8006364:	b21a      	sxth	r2, r3
 8006366:	4b1b      	ldr	r3, [pc, #108]	; (80063d4 <update_wall+0x610>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	b291      	uxth	r1, r2
 800636c:	4a18      	ldr	r2, [pc, #96]	; (80063d0 <update_wall+0x60c>)
 800636e:	332c      	adds	r3, #44	; 0x2c
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	4413      	add	r3, r2
 8006374:	460a      	mov	r2, r1
 8006376:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8006378:	4b19      	ldr	r3, [pc, #100]	; (80063e0 <update_wall+0x61c>)
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d01f      	beq.n	80063c0 <update_wall+0x5fc>
 8006380:	4b14      	ldr	r3, [pc, #80]	; (80063d4 <update_wall+0x610>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a12      	ldr	r2, [pc, #72]	; (80063d0 <update_wall+0x60c>)
 8006386:	330c      	adds	r3, #12
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	4413      	add	r3, r2
 800638c:	88db      	ldrh	r3, [r3, #6]
 800638e:	b21a      	sxth	r2, r3
 8006390:	4b0e      	ldr	r3, [pc, #56]	; (80063cc <update_wall+0x608>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2101      	movs	r1, #1
 8006396:	fa01 f303 	lsl.w	r3, r1, r3
 800639a:	b21b      	sxth	r3, r3
 800639c:	4313      	orrs	r3, r2
 800639e:	b21a      	sxth	r2, r3
 80063a0:	4b0c      	ldr	r3, [pc, #48]	; (80063d4 <update_wall+0x610>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	b291      	uxth	r1, r2
 80063a6:	4a0a      	ldr	r2, [pc, #40]	; (80063d0 <update_wall+0x60c>)
 80063a8:	330c      	adds	r3, #12
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	4413      	add	r3, r2
 80063ae:	460a      	mov	r2, r1
 80063b0:	80da      	strh	r2, [r3, #6]
		}

		break;
 80063b2:	e005      	b.n	80063c0 <update_wall+0x5fc>
		break;
 80063b4:	bf00      	nop
 80063b6:	e004      	b.n	80063c2 <update_wall+0x5fe>
		break;
 80063b8:	bf00      	nop
 80063ba:	e002      	b.n	80063c2 <update_wall+0x5fe>
		break;
 80063bc:	bf00      	nop
 80063be:	e000      	b.n	80063c2 <update_wall+0x5fe>
		break;
 80063c0:	bf00      	nop

	}


}
 80063c2:	bf00      	nop
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	20000f50 	.word	0x20000f50
 80063d0:	20000f60 	.word	0x20000f60
 80063d4:	20000f54 	.word	0x20000f54
 80063d8:	20000f5c 	.word	0x20000f5c
 80063dc:	20000f5e 	.word	0x20000f5e
 80063e0:	20000f5d 	.word	0x20000f5d

080063e4 <search_AroundWalkCount>:


void search_AroundWalkCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count){
 80063e4:	b480      	push	{r7}
 80063e6:	b087      	sub	sp, #28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
 80063f0:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = MAX_WALKCOUNT;}
 80063f2:	4b49      	ldr	r3, [pc, #292]	; (8006518 <search_AroundWalkCount+0x134>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b0e      	cmp	r3, #14
 80063f8:	dd02      	ble.n	8006400 <search_AroundWalkCount+0x1c>
 80063fa:	23ff      	movs	r3, #255	; 0xff
 80063fc:	82fb      	strh	r3, [r7, #22]
 80063fe:	e00a      	b.n	8006416 <search_AroundWalkCount+0x32>
	else {north_count = walk_count[16 * x + y + 1];}
 8006400:	4b46      	ldr	r3, [pc, #280]	; (800651c <search_AroundWalkCount+0x138>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	011a      	lsls	r2, r3, #4
 8006406:	4b44      	ldr	r3, [pc, #272]	; (8006518 <search_AroundWalkCount+0x134>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4413      	add	r3, r2
 800640c:	3301      	adds	r3, #1
 800640e:	4a44      	ldr	r2, [pc, #272]	; (8006520 <search_AroundWalkCount+0x13c>)
 8006410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006414:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = MAX_WALKCOUNT;}
 8006416:	4b41      	ldr	r3, [pc, #260]	; (800651c <search_AroundWalkCount+0x138>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b0e      	cmp	r3, #14
 800641c:	dd02      	ble.n	8006424 <search_AroundWalkCount+0x40>
 800641e:	23ff      	movs	r3, #255	; 0xff
 8006420:	82bb      	strh	r3, [r7, #20]
 8006422:	e00a      	b.n	800643a <search_AroundWalkCount+0x56>
	else {east_count = walk_count[16 * (x + 1) + y];}
 8006424:	4b3d      	ldr	r3, [pc, #244]	; (800651c <search_AroundWalkCount+0x138>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3301      	adds	r3, #1
 800642a:	011a      	lsls	r2, r3, #4
 800642c:	4b3a      	ldr	r3, [pc, #232]	; (8006518 <search_AroundWalkCount+0x134>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4413      	add	r3, r2
 8006432:	4a3b      	ldr	r2, [pc, #236]	; (8006520 <search_AroundWalkCount+0x13c>)
 8006434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006438:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = MAX_WALKCOUNT;}
 800643a:	4b37      	ldr	r3, [pc, #220]	; (8006518 <search_AroundWalkCount+0x134>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	dc02      	bgt.n	8006448 <search_AroundWalkCount+0x64>
 8006442:	23ff      	movs	r3, #255	; 0xff
 8006444:	827b      	strh	r3, [r7, #18]
 8006446:	e00a      	b.n	800645e <search_AroundWalkCount+0x7a>
	else {south_count = walk_count[16 * x + y - 1];}
 8006448:	4b34      	ldr	r3, [pc, #208]	; (800651c <search_AroundWalkCount+0x138>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	011a      	lsls	r2, r3, #4
 800644e:	4b32      	ldr	r3, [pc, #200]	; (8006518 <search_AroundWalkCount+0x134>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4413      	add	r3, r2
 8006454:	3b01      	subs	r3, #1
 8006456:	4a32      	ldr	r2, [pc, #200]	; (8006520 <search_AroundWalkCount+0x13c>)
 8006458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800645c:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = MAX_WALKCOUNT;}
 800645e:	4b2f      	ldr	r3, [pc, #188]	; (800651c <search_AroundWalkCount+0x138>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	dc02      	bgt.n	800646c <search_AroundWalkCount+0x88>
 8006466:	23ff      	movs	r3, #255	; 0xff
 8006468:	823b      	strh	r3, [r7, #16]
 800646a:	e00a      	b.n	8006482 <search_AroundWalkCount+0x9e>
	else {west_count = walk_count[16 * (x - 1) + y];}
 800646c:	4b2b      	ldr	r3, [pc, #172]	; (800651c <search_AroundWalkCount+0x138>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3b01      	subs	r3, #1
 8006472:	011a      	lsls	r2, r3, #4
 8006474:	4b28      	ldr	r3, [pc, #160]	; (8006518 <search_AroundWalkCount+0x134>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4413      	add	r3, r2
 800647a:	4a29      	ldr	r2, [pc, #164]	; (8006520 <search_AroundWalkCount+0x13c>)
 800647c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006480:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 8006482:	4b28      	ldr	r3, [pc, #160]	; (8006524 <search_AroundWalkCount+0x140>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3b01      	subs	r3, #1
 8006488:	2b03      	cmp	r3, #3
 800648a:	d83f      	bhi.n	800650c <search_AroundWalkCount+0x128>
 800648c:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <search_AroundWalkCount+0xb0>)
 800648e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006492:	bf00      	nop
 8006494:	080064a5 	.word	0x080064a5
 8006498:	080064bf 	.word	0x080064bf
 800649c:	080064d9 	.word	0x080064d9
 80064a0:	080064f3 	.word	0x080064f3
	case 1:
		*front_count = north_count;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8afa      	ldrh	r2, [r7, #22]
 80064a8:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	8aba      	ldrh	r2, [r7, #20]
 80064ae:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	8a7a      	ldrh	r2, [r7, #18]
 80064b4:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	8a3a      	ldrh	r2, [r7, #16]
 80064ba:	801a      	strh	r2, [r3, #0]
		break;
 80064bc:	e026      	b.n	800650c <search_AroundWalkCount+0x128>
	case 2:
		*front_count = east_count;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8aba      	ldrh	r2, [r7, #20]
 80064c2:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	8a7a      	ldrh	r2, [r7, #18]
 80064c8:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	8a3a      	ldrh	r2, [r7, #16]
 80064ce:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	8afa      	ldrh	r2, [r7, #22]
 80064d4:	801a      	strh	r2, [r3, #0]
		break;
 80064d6:	e019      	b.n	800650c <search_AroundWalkCount+0x128>
	case 3:
		*front_count = south_count;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8a7a      	ldrh	r2, [r7, #18]
 80064dc:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	8a3a      	ldrh	r2, [r7, #16]
 80064e2:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	8afa      	ldrh	r2, [r7, #22]
 80064e8:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	8aba      	ldrh	r2, [r7, #20]
 80064ee:	801a      	strh	r2, [r3, #0]
		break;
 80064f0:	e00c      	b.n	800650c <search_AroundWalkCount+0x128>
	case 4:
		*front_count = west_count;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8a3a      	ldrh	r2, [r7, #16]
 80064f6:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	8afa      	ldrh	r2, [r7, #22]
 80064fc:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	8aba      	ldrh	r2, [r7, #20]
 8006502:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	8a7a      	ldrh	r2, [r7, #18]
 8006508:	801a      	strh	r2, [r3, #0]
		break;
 800650a:	bf00      	nop

	}


}
 800650c:	bf00      	nop
 800650e:	371c      	adds	r7, #28
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	20000f54 	.word	0x20000f54
 800651c:	20000f50 	.word	0x20000f50
 8006520:	20000fd8 	.word	0x20000fd8
 8006524:	20000f58 	.word	0x20000f58

08006528 <maze_maker>:

}

//試験用歩数マップ作成短縮方法＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊

void maze_maker(void) {
 8006528:	b580      	push	{r7, lr}
 800652a:	b0ae      	sub	sp, #184	; 0xb8
 800652c:	af00      	add	r7, sp, #0

	update_wall();
 800652e:	f7ff fc49 	bl	8005dc4 <update_wall>

//ここから歩数マップを作る．*************************************
	int tt = 0;
 8006532:	2300      	movs	r3, #0
 8006534:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	unsigned short count_box[40];
	unsigned short count_boxnext[40];
	while (tt <= 255) {
 8006538:	e00a      	b.n	8006550 <maze_maker+0x28>
		walk_count[tt] = 255;
 800653a:	4ac1      	ldr	r2, [pc, #772]	; (8006840 <maze_maker+0x318>)
 800653c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006540:	21ff      	movs	r1, #255	; 0xff
 8006542:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		tt++;
 8006546:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800654a:	3301      	adds	r3, #1
 800654c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (tt <= 255) {
 8006550:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006554:	2bff      	cmp	r3, #255	; 0xff
 8006556:	ddf0      	ble.n	800653a <maze_maker+0x12>
	}
	tt = 0;
 8006558:	2300      	movs	r3, #0
 800655a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (tt <= 39) {
 800655e:	e016      	b.n	800658e <maze_maker+0x66>
		count_box[tt] = 256;
 8006560:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	33b8      	adds	r3, #184	; 0xb8
 8006568:	443b      	add	r3, r7
 800656a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800656e:	f823 2c68 	strh.w	r2, [r3, #-104]
		count_boxnext[tt] = 256;
 8006572:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006576:	005b      	lsls	r3, r3, #1
 8006578:	33b8      	adds	r3, #184	; 0xb8
 800657a:	443b      	add	r3, r7
 800657c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006580:	f823 2cb8 	strh.w	r2, [r3, #-184]
		tt++;
 8006584:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006588:	3301      	adds	r3, #1
 800658a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (tt <= 39) {
 800658e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006592:	2b27      	cmp	r3, #39	; 0x27
 8006594:	dde4      	ble.n	8006560 <maze_maker+0x38>
	}

	walk_count[(GOAL_X * 16) + GOAL_Y] = 0;
 8006596:	4baa      	ldr	r3, [pc, #680]	; (8006840 <maze_maker+0x318>)
 8006598:	2200      	movs	r2, #0
 800659a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	walk_count[((GOAL_X + 1) * 16) + GOAL_Y] = 0;
 800659e:	4ba8      	ldr	r3, [pc, #672]	; (8006840 <maze_maker+0x318>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	walk_count[(GOAL_X * 16) + GOAL_Y + 1] = 0;
 80065a6:	4ba6      	ldr	r3, [pc, #664]	; (8006840 <maze_maker+0x318>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	walk_count[((GOAL_X + 1) * 16) + GOAL_Y + 1] = 0;
 80065ae:	4ba4      	ldr	r3, [pc, #656]	; (8006840 <maze_maker+0x318>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	count_box[0] = (GOAL_X * 16) + GOAL_Y;
 80065b6:	2333      	movs	r3, #51	; 0x33
 80065b8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	count_box[1] = ((GOAL_X + 1) * 16) + GOAL_Y;
 80065bc:	2343      	movs	r3, #67	; 0x43
 80065be:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	count_box[2] = (GOAL_X * 16) + GOAL_Y + 1;
 80065c2:	2334      	movs	r3, #52	; 0x34
 80065c4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	count_box[3] = ((GOAL_X + 1) * 16) + GOAL_Y + 1;
 80065c8:	2344      	movs	r3, #68	; 0x44
 80065ca:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	unsigned short coordinate;
	unsigned short count_number = 1;
 80065ce:	2301      	movs	r3, #1
 80065d0:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north,wall_south,wall_east,wall_west;
	unsigned short box,boxnext;
	while (count_number <= 255) {
 80065d4:	e166      	b.n	80068a4 <maze_maker+0x37c>
		box=0;boxnext=0;
 80065d6:	2300      	movs	r3, #0
 80065d8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80065dc:	2300      	movs	r3, #0
 80065de:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6

		while (box <= 39) {
 80065e2:	e11f      	b.n	8006824 <maze_maker+0x2fc>

			coordinate = count_box[box];
 80065e4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80065e8:	005b      	lsls	r3, r3, #1
 80065ea:	33b8      	adds	r3, #184	; 0xb8
 80065ec:	443b      	add	r3, r7
 80065ee:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 80065f2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
			Xcoordinate = (coordinate & 0xf0) >> 4;
 80065f6:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80065fa:	111b      	asrs	r3, r3, #4
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	f003 030f 	and.w	r3, r3, #15
 8006602:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
			Ycoordinate = coordinate & 0x0f;
 8006606:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800660a:	f003 030f 	and.w	r3, r3, #15
 800660e:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
//壁情報のときに使う
			if (Ycoordinate <= 14) {
 8006612:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8006616:	2b0e      	cmp	r3, #14
 8006618:	d811      	bhi.n	800663e <maze_maker+0x116>
				wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 800661a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800661e:	4a89      	ldr	r2, [pc, #548]	; (8006844 <maze_maker+0x31c>)
 8006620:	330c      	adds	r3, #12
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	4413      	add	r3, r2
 8006626:	88db      	ldrh	r3, [r3, #6]
 8006628:	b21a      	sxth	r2, r3
 800662a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800662e:	2101      	movs	r1, #1
 8006630:	fa01 f303 	lsl.w	r3, r1, r3
 8006634:	b21b      	sxth	r3, r3
 8006636:	4013      	ands	r3, r2
 8006638:	b21b      	sxth	r3, r3
 800663a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
			}
			if (Ycoordinate >= 1) {
 800663e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d012      	beq.n	800666c <maze_maker+0x144>
				wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8006646:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800664a:	3b01      	subs	r3, #1
 800664c:	4a7d      	ldr	r2, [pc, #500]	; (8006844 <maze_maker+0x31c>)
 800664e:	330c      	adds	r3, #12
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	4413      	add	r3, r2
 8006654:	88db      	ldrh	r3, [r3, #6]
 8006656:	b21a      	sxth	r2, r3
 8006658:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800665c:	2101      	movs	r1, #1
 800665e:	fa01 f303 	lsl.w	r3, r1, r3
 8006662:	b21b      	sxth	r3, r3
 8006664:	4013      	ands	r3, r2
 8006666:	b21b      	sxth	r3, r3
 8006668:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
			}
			if (Xcoordinate <= 14) {
 800666c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006670:	2b0e      	cmp	r3, #14
 8006672:	d80f      	bhi.n	8006694 <maze_maker+0x16c>
				wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8006674:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006678:	4a72      	ldr	r2, [pc, #456]	; (8006844 <maze_maker+0x31c>)
 800667a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800667e:	b21a      	sxth	r2, r3
 8006680:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8006684:	2101      	movs	r1, #1
 8006686:	fa01 f303 	lsl.w	r3, r1, r3
 800668a:	b21b      	sxth	r3, r3
 800668c:	4013      	ands	r3, r2
 800668e:	b21b      	sxth	r3, r3
 8006690:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
			}
			if (Xcoordinate >= 1) {
 8006694:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d010      	beq.n	80066be <maze_maker+0x196>
				wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 800669c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80066a0:	3b01      	subs	r3, #1
 80066a2:	4a68      	ldr	r2, [pc, #416]	; (8006844 <maze_maker+0x31c>)
 80066a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066a8:	b21a      	sxth	r2, r3
 80066aa:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80066ae:	2101      	movs	r1, #1
 80066b0:	fa01 f303 	lsl.w	r3, r1, r3
 80066b4:	b21b      	sxth	r3, r3
 80066b6:	4013      	ands	r3, r2
 80066b8:	b21b      	sxth	r3, r3
 80066ba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			}

			if (walk_count[coordinate + 1] <= 254 || Ycoordinate == 15
 80066be:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80066c2:	3301      	adds	r3, #1
 80066c4:	4a5e      	ldr	r2, [pc, #376]	; (8006840 <maze_maker+0x318>)
 80066c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066ca:	2bfe      	cmp	r3, #254	; 0xfe
 80066cc:	d91f      	bls.n	800670e <maze_maker+0x1e6>
 80066ce:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80066d2:	2b0f      	cmp	r3, #15
 80066d4:	d01b      	beq.n	800670e <maze_maker+0x1e6>
					|| wall_north >= 1) {} else {
 80066d6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d117      	bne.n	800670e <maze_maker+0x1e6>
				walk_count[coordinate + 1] = count_number;
 80066de:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80066e2:	3301      	adds	r3, #1
 80066e4:	4956      	ldr	r1, [pc, #344]	; (8006840 <maze_maker+0x318>)
 80066e6:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 80066ea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				count_boxnext[boxnext] = coordinate + 1;
 80066ee:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80066f2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80066f6:	3201      	adds	r2, #1
 80066f8:	b292      	uxth	r2, r2
 80066fa:	005b      	lsls	r3, r3, #1
 80066fc:	33b8      	adds	r3, #184	; 0xb8
 80066fe:	443b      	add	r3, r7
 8006700:	f823 2cb8 	strh.w	r2, [r3, #-184]
				boxnext++;
 8006704:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006708:	3301      	adds	r3, #1
 800670a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			}
			if (walk_count[coordinate - 1] <= 254 || Ycoordinate == 0
 800670e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8006712:	3b01      	subs	r3, #1
 8006714:	4a4a      	ldr	r2, [pc, #296]	; (8006840 <maze_maker+0x318>)
 8006716:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800671a:	2bfe      	cmp	r3, #254	; 0xfe
 800671c:	d91f      	bls.n	800675e <maze_maker+0x236>
 800671e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d01b      	beq.n	800675e <maze_maker+0x236>
					|| wall_south >= 1) {} else {
 8006726:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800672a:	2b00      	cmp	r3, #0
 800672c:	d117      	bne.n	800675e <maze_maker+0x236>
				walk_count[coordinate - 1] = count_number;
 800672e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8006732:	3b01      	subs	r3, #1
 8006734:	4942      	ldr	r1, [pc, #264]	; (8006840 <maze_maker+0x318>)
 8006736:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 800673a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				count_boxnext[boxnext] = coordinate - 1;
 800673e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006742:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006746:	3a01      	subs	r2, #1
 8006748:	b292      	uxth	r2, r2
 800674a:	005b      	lsls	r3, r3, #1
 800674c:	33b8      	adds	r3, #184	; 0xb8
 800674e:	443b      	add	r3, r7
 8006750:	f823 2cb8 	strh.w	r2, [r3, #-184]
				boxnext++;
 8006754:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006758:	3301      	adds	r3, #1
 800675a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			}
			if (walk_count[coordinate + 16] <= 254 || Xcoordinate == 15
 800675e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8006762:	3310      	adds	r3, #16
 8006764:	4a36      	ldr	r2, [pc, #216]	; (8006840 <maze_maker+0x318>)
 8006766:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800676a:	2bfe      	cmp	r3, #254	; 0xfe
 800676c:	d91f      	bls.n	80067ae <maze_maker+0x286>
 800676e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006772:	2b0f      	cmp	r3, #15
 8006774:	d01b      	beq.n	80067ae <maze_maker+0x286>
					|| wall_east >= 1) {} else {
 8006776:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800677a:	2b00      	cmp	r3, #0
 800677c:	d117      	bne.n	80067ae <maze_maker+0x286>
				walk_count[coordinate + 16] = count_number;
 800677e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8006782:	3310      	adds	r3, #16
 8006784:	492e      	ldr	r1, [pc, #184]	; (8006840 <maze_maker+0x318>)
 8006786:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 800678a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				count_boxnext[boxnext] = coordinate + 16;
 800678e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006792:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006796:	3210      	adds	r2, #16
 8006798:	b292      	uxth	r2, r2
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	33b8      	adds	r3, #184	; 0xb8
 800679e:	443b      	add	r3, r7
 80067a0:	f823 2cb8 	strh.w	r2, [r3, #-184]
				boxnext++;
 80067a4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80067a8:	3301      	adds	r3, #1
 80067aa:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			}
			if (walk_count[coordinate - 16] <= 254 || Xcoordinate == 0
 80067ae:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80067b2:	3b10      	subs	r3, #16
 80067b4:	4a22      	ldr	r2, [pc, #136]	; (8006840 <maze_maker+0x318>)
 80067b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067ba:	2bfe      	cmp	r3, #254	; 0xfe
 80067bc:	d91f      	bls.n	80067fe <maze_maker+0x2d6>
 80067be:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d01b      	beq.n	80067fe <maze_maker+0x2d6>
					|| wall_west >= 1) {} else {
 80067c6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d117      	bne.n	80067fe <maze_maker+0x2d6>
				walk_count[coordinate - 16] = count_number;
 80067ce:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80067d2:	3b10      	subs	r3, #16
 80067d4:	491a      	ldr	r1, [pc, #104]	; (8006840 <maze_maker+0x318>)
 80067d6:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 80067da:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				count_boxnext[boxnext] = coordinate - 16;
 80067de:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80067e2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80067e6:	3a10      	subs	r2, #16
 80067e8:	b292      	uxth	r2, r2
 80067ea:	005b      	lsls	r3, r3, #1
 80067ec:	33b8      	adds	r3, #184	; 0xb8
 80067ee:	443b      	add	r3, r7
 80067f0:	f823 2cb8 	strh.w	r2, [r3, #-184]
				boxnext++;
 80067f4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80067f8:	3301      	adds	r3, #1
 80067fa:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			}
			if (box == 39) {break;}
 80067fe:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006802:	2b27      	cmp	r3, #39	; 0x27
 8006804:	d014      	beq.n	8006830 <maze_maker+0x308>
			box++;
 8006806:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800680a:	3301      	adds	r3, #1
 800680c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
			if (count_box[box] == 256) {break;}
 8006810:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	33b8      	adds	r3, #184	; 0xb8
 8006818:	443b      	add	r3, r7
 800681a:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 800681e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006822:	d007      	beq.n	8006834 <maze_maker+0x30c>
		while (box <= 39) {
 8006824:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006828:	2b27      	cmp	r3, #39	; 0x27
 800682a:	f67f aedb 	bls.w	80065e4 <maze_maker+0xbc>
 800682e:	e002      	b.n	8006836 <maze_maker+0x30e>
			if (box == 39) {break;}
 8006830:	bf00      	nop
 8006832:	e000      	b.n	8006836 <maze_maker+0x30e>
			if (count_box[box] == 256) {break;}
 8006834:	bf00      	nop
		}

		tt = 0;
 8006836:	2300      	movs	r3, #0
 8006838:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		while (tt <= 39) {
 800683c:	e020      	b.n	8006880 <maze_maker+0x358>
 800683e:	bf00      	nop
 8006840:	20000fd8 	.word	0x20000fd8
 8006844:	20000f60 	.word	0x20000f60
			count_box[tt] = count_boxnext[tt];
 8006848:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800684c:	005b      	lsls	r3, r3, #1
 800684e:	33b8      	adds	r3, #184	; 0xb8
 8006850:	443b      	add	r3, r7
 8006852:	f833 2cb8 	ldrh.w	r2, [r3, #-184]
 8006856:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800685a:	005b      	lsls	r3, r3, #1
 800685c:	33b8      	adds	r3, #184	; 0xb8
 800685e:	443b      	add	r3, r7
 8006860:	f823 2c68 	strh.w	r2, [r3, #-104]
			count_boxnext[tt] = 256;
 8006864:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	33b8      	adds	r3, #184	; 0xb8
 800686c:	443b      	add	r3, r7
 800686e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006872:	f823 2cb8 	strh.w	r2, [r3, #-184]
			tt++;
 8006876:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800687a:	3301      	adds	r3, #1
 800687c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		while (tt <= 39) {
 8006880:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006884:	2b27      	cmp	r3, #39	; 0x27
 8006886:	dddf      	ble.n	8006848 <maze_maker+0x320>
		}
		if (count_number == 255 || count_box[0] == 256) {break;}
 8006888:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800688c:	2bff      	cmp	r3, #255	; 0xff
 800688e:	d00e      	beq.n	80068ae <maze_maker+0x386>
 8006890:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006898:	d009      	beq.n	80068ae <maze_maker+0x386>
		count_number++;
 800689a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800689e:	3301      	adds	r3, #1
 80068a0:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	while (count_number <= 255) {
 80068a4:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80068a8:	2bff      	cmp	r3, #255	; 0xff
 80068aa:	f67f ae94 	bls.w	80065d6 <maze_maker+0xae>
	}

}
 80068ae:	bf00      	nop
 80068b0:	37b8      	adds	r7, #184	; 0xb8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop

080068b8 <maze_makerBack>:


void maze_makerBack(void) {
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b0ae      	sub	sp, #184	; 0xb8
 80068bc:	af00      	add	r7, sp, #0
	update_wall();
 80068be:	f7ff fa81 	bl	8005dc4 <update_wall>

//ここから歩数マップを作る．*************************************
	int tt = 0;
 80068c2:	2300      	movs	r3, #0
 80068c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	unsigned short count_box[40];
	unsigned short count_boxnext[40];
	while (tt <= 255) {
 80068c8:	e00a      	b.n	80068e0 <maze_makerBack+0x28>
		walk_count[tt] = 255;
 80068ca:	4ad1      	ldr	r2, [pc, #836]	; (8006c10 <maze_makerBack+0x358>)
 80068cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80068d0:	21ff      	movs	r1, #255	; 0xff
 80068d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		tt++;
 80068d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80068da:	3301      	adds	r3, #1
 80068dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (tt <= 255) {
 80068e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80068e4:	2bff      	cmp	r3, #255	; 0xff
 80068e6:	ddf0      	ble.n	80068ca <maze_makerBack+0x12>
	}
	tt = 0;
 80068e8:	2300      	movs	r3, #0
 80068ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (tt <= 39) {
 80068ee:	e016      	b.n	800691e <maze_makerBack+0x66>
		count_box[tt] = 256;
 80068f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80068f4:	005b      	lsls	r3, r3, #1
 80068f6:	33b8      	adds	r3, #184	; 0xb8
 80068f8:	443b      	add	r3, r7
 80068fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068fe:	f823 2c68 	strh.w	r2, [r3, #-104]
		count_boxnext[tt] = 256;
 8006902:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006906:	005b      	lsls	r3, r3, #1
 8006908:	33b8      	adds	r3, #184	; 0xb8
 800690a:	443b      	add	r3, r7
 800690c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006910:	f823 2cb8 	strh.w	r2, [r3, #-184]
		tt++;
 8006914:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006918:	3301      	adds	r3, #1
 800691a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (tt <= 39) {
 800691e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006922:	2b27      	cmp	r3, #39	; 0x27
 8006924:	dde4      	ble.n	80068f0 <maze_makerBack+0x38>
	}

	walk_count[0] = 0;
 8006926:	4bba      	ldr	r3, [pc, #744]	; (8006c10 <maze_makerBack+0x358>)
 8006928:	2200      	movs	r2, #0
 800692a:	801a      	strh	r2, [r3, #0]
	count_box[0] = 0;
 800692c:	2300      	movs	r3, #0
 800692e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	unsigned short coordinate;
	unsigned short count_number = 1;
 8006932:	2301      	movs	r3, #1
 8006934:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north,wall_south,wall_east,wall_west;
	unsigned short box,boxnext;
	while (count_number <= 255) {
 8006938:	e161      	b.n	8006bfe <maze_makerBack+0x346>
		box=0;boxnext=0;
 800693a:	2300      	movs	r3, #0
 800693c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006940:	2300      	movs	r3, #0
 8006942:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6

		while (box <= 39) {
 8006946:	e11f      	b.n	8006b88 <maze_makerBack+0x2d0>

			coordinate = count_box[box];
 8006948:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800694c:	005b      	lsls	r3, r3, #1
 800694e:	33b8      	adds	r3, #184	; 0xb8
 8006950:	443b      	add	r3, r7
 8006952:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 8006956:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
			Xcoordinate = (coordinate & 0xf0) >> 4;
 800695a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800695e:	111b      	asrs	r3, r3, #4
 8006960:	b29b      	uxth	r3, r3
 8006962:	f003 030f 	and.w	r3, r3, #15
 8006966:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
			Ycoordinate = coordinate & 0x0f;
 800696a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800696e:	f003 030f 	and.w	r3, r3, #15
 8006972:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
//壁情報のときに使う
			if (Ycoordinate <= 14) {
 8006976:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800697a:	2b0e      	cmp	r3, #14
 800697c:	d811      	bhi.n	80069a2 <maze_makerBack+0xea>
				wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 800697e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8006982:	4aa4      	ldr	r2, [pc, #656]	; (8006c14 <maze_makerBack+0x35c>)
 8006984:	330c      	adds	r3, #12
 8006986:	005b      	lsls	r3, r3, #1
 8006988:	4413      	add	r3, r2
 800698a:	88db      	ldrh	r3, [r3, #6]
 800698c:	b21a      	sxth	r2, r3
 800698e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006992:	2101      	movs	r1, #1
 8006994:	fa01 f303 	lsl.w	r3, r1, r3
 8006998:	b21b      	sxth	r3, r3
 800699a:	4013      	ands	r3, r2
 800699c:	b21b      	sxth	r3, r3
 800699e:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
			}
			if (Ycoordinate >= 1) {
 80069a2:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d012      	beq.n	80069d0 <maze_makerBack+0x118>
				wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 80069aa:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80069ae:	3b01      	subs	r3, #1
 80069b0:	4a98      	ldr	r2, [pc, #608]	; (8006c14 <maze_makerBack+0x35c>)
 80069b2:	330c      	adds	r3, #12
 80069b4:	005b      	lsls	r3, r3, #1
 80069b6:	4413      	add	r3, r2
 80069b8:	88db      	ldrh	r3, [r3, #6]
 80069ba:	b21a      	sxth	r2, r3
 80069bc:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80069c0:	2101      	movs	r1, #1
 80069c2:	fa01 f303 	lsl.w	r3, r1, r3
 80069c6:	b21b      	sxth	r3, r3
 80069c8:	4013      	ands	r3, r2
 80069ca:	b21b      	sxth	r3, r3
 80069cc:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
			}
			if (Xcoordinate <= 14) {
 80069d0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80069d4:	2b0e      	cmp	r3, #14
 80069d6:	d80f      	bhi.n	80069f8 <maze_makerBack+0x140>
				wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 80069d8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80069dc:	4a8d      	ldr	r2, [pc, #564]	; (8006c14 <maze_makerBack+0x35c>)
 80069de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069e2:	b21a      	sxth	r2, r3
 80069e4:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80069e8:	2101      	movs	r1, #1
 80069ea:	fa01 f303 	lsl.w	r3, r1, r3
 80069ee:	b21b      	sxth	r3, r3
 80069f0:	4013      	ands	r3, r2
 80069f2:	b21b      	sxth	r3, r3
 80069f4:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
			}
			if (Xcoordinate >= 1) {
 80069f8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d010      	beq.n	8006a22 <maze_makerBack+0x16a>
				wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 8006a00:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006a04:	3b01      	subs	r3, #1
 8006a06:	4a83      	ldr	r2, [pc, #524]	; (8006c14 <maze_makerBack+0x35c>)
 8006a08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a0c:	b21a      	sxth	r2, r3
 8006a0e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8006a12:	2101      	movs	r1, #1
 8006a14:	fa01 f303 	lsl.w	r3, r1, r3
 8006a18:	b21b      	sxth	r3, r3
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	b21b      	sxth	r3, r3
 8006a1e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			}

			if (walk_count[coordinate + 1] <= 254 || Ycoordinate == 15
 8006a22:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8006a26:	3301      	adds	r3, #1
 8006a28:	4a79      	ldr	r2, [pc, #484]	; (8006c10 <maze_makerBack+0x358>)
 8006a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a2e:	2bfe      	cmp	r3, #254	; 0xfe
 8006a30:	d91f      	bls.n	8006a72 <maze_makerBack+0x1ba>
 8006a32:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8006a36:	2b0f      	cmp	r3, #15
 8006a38:	d01b      	beq.n	8006a72 <maze_makerBack+0x1ba>
					|| wall_north >= 1) {} else {
 8006a3a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d117      	bne.n	8006a72 <maze_makerBack+0x1ba>
				walk_count[coordinate + 1] = count_number;
 8006a42:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8006a46:	3301      	adds	r3, #1
 8006a48:	4971      	ldr	r1, [pc, #452]	; (8006c10 <maze_makerBack+0x358>)
 8006a4a:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8006a4e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				count_boxnext[boxnext] = coordinate + 1;
 8006a52:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006a56:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006a5a:	3201      	adds	r2, #1
 8006a5c:	b292      	uxth	r2, r2
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	33b8      	adds	r3, #184	; 0xb8
 8006a62:	443b      	add	r3, r7
 8006a64:	f823 2cb8 	strh.w	r2, [r3, #-184]
				boxnext++;
 8006a68:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			}
			if (walk_count[coordinate - 1] <= 254 || Ycoordinate == 0
 8006a72:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8006a76:	3b01      	subs	r3, #1
 8006a78:	4a65      	ldr	r2, [pc, #404]	; (8006c10 <maze_makerBack+0x358>)
 8006a7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a7e:	2bfe      	cmp	r3, #254	; 0xfe
 8006a80:	d91f      	bls.n	8006ac2 <maze_makerBack+0x20a>
 8006a82:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d01b      	beq.n	8006ac2 <maze_makerBack+0x20a>
					|| wall_south >= 1) {} else {
 8006a8a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d117      	bne.n	8006ac2 <maze_makerBack+0x20a>
				walk_count[coordinate - 1] = count_number;
 8006a92:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8006a96:	3b01      	subs	r3, #1
 8006a98:	495d      	ldr	r1, [pc, #372]	; (8006c10 <maze_makerBack+0x358>)
 8006a9a:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8006a9e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				count_boxnext[boxnext] = coordinate - 1;
 8006aa2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006aa6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006aaa:	3a01      	subs	r2, #1
 8006aac:	b292      	uxth	r2, r2
 8006aae:	005b      	lsls	r3, r3, #1
 8006ab0:	33b8      	adds	r3, #184	; 0xb8
 8006ab2:	443b      	add	r3, r7
 8006ab4:	f823 2cb8 	strh.w	r2, [r3, #-184]
				boxnext++;
 8006ab8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006abc:	3301      	adds	r3, #1
 8006abe:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			}
			if (walk_count[coordinate + 16] <= 254 || Xcoordinate == 15
 8006ac2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8006ac6:	3310      	adds	r3, #16
 8006ac8:	4a51      	ldr	r2, [pc, #324]	; (8006c10 <maze_makerBack+0x358>)
 8006aca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ace:	2bfe      	cmp	r3, #254	; 0xfe
 8006ad0:	d91f      	bls.n	8006b12 <maze_makerBack+0x25a>
 8006ad2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006ad6:	2b0f      	cmp	r3, #15
 8006ad8:	d01b      	beq.n	8006b12 <maze_makerBack+0x25a>
					|| wall_east >= 1) {} else {
 8006ada:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d117      	bne.n	8006b12 <maze_makerBack+0x25a>
				walk_count[coordinate + 16] = count_number;
 8006ae2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8006ae6:	3310      	adds	r3, #16
 8006ae8:	4949      	ldr	r1, [pc, #292]	; (8006c10 <maze_makerBack+0x358>)
 8006aea:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8006aee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				count_boxnext[boxnext] = coordinate + 16;
 8006af2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006af6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006afa:	3210      	adds	r2, #16
 8006afc:	b292      	uxth	r2, r2
 8006afe:	005b      	lsls	r3, r3, #1
 8006b00:	33b8      	adds	r3, #184	; 0xb8
 8006b02:	443b      	add	r3, r7
 8006b04:	f823 2cb8 	strh.w	r2, [r3, #-184]
				boxnext++;
 8006b08:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			}
			if (walk_count[coordinate - 16] <= 254 || Xcoordinate == 0
 8006b12:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8006b16:	3b10      	subs	r3, #16
 8006b18:	4a3d      	ldr	r2, [pc, #244]	; (8006c10 <maze_makerBack+0x358>)
 8006b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b1e:	2bfe      	cmp	r3, #254	; 0xfe
 8006b20:	d91f      	bls.n	8006b62 <maze_makerBack+0x2aa>
 8006b22:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d01b      	beq.n	8006b62 <maze_makerBack+0x2aa>
					|| wall_west >= 1) {} else {
 8006b2a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d117      	bne.n	8006b62 <maze_makerBack+0x2aa>
				walk_count[coordinate - 16] = count_number;
 8006b32:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8006b36:	3b10      	subs	r3, #16
 8006b38:	4935      	ldr	r1, [pc, #212]	; (8006c10 <maze_makerBack+0x358>)
 8006b3a:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8006b3e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				count_boxnext[boxnext] = coordinate - 16;
 8006b42:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006b46:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006b4a:	3a10      	subs	r2, #16
 8006b4c:	b292      	uxth	r2, r2
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	33b8      	adds	r3, #184	; 0xb8
 8006b52:	443b      	add	r3, r7
 8006b54:	f823 2cb8 	strh.w	r2, [r3, #-184]
				boxnext++;
 8006b58:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			}
			if (box == 39) {break;}
 8006b62:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006b66:	2b27      	cmp	r3, #39	; 0x27
 8006b68:	d014      	beq.n	8006b94 <maze_makerBack+0x2dc>
			box++;
 8006b6a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006b6e:	3301      	adds	r3, #1
 8006b70:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
			if (count_box[box] == 256) {break;}
 8006b74:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006b78:	005b      	lsls	r3, r3, #1
 8006b7a:	33b8      	adds	r3, #184	; 0xb8
 8006b7c:	443b      	add	r3, r7
 8006b7e:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 8006b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b86:	d007      	beq.n	8006b98 <maze_makerBack+0x2e0>
		while (box <= 39) {
 8006b88:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006b8c:	2b27      	cmp	r3, #39	; 0x27
 8006b8e:	f67f aedb 	bls.w	8006948 <maze_makerBack+0x90>
 8006b92:	e002      	b.n	8006b9a <maze_makerBack+0x2e2>
			if (box == 39) {break;}
 8006b94:	bf00      	nop
 8006b96:	e000      	b.n	8006b9a <maze_makerBack+0x2e2>
			if (count_box[box] == 256) {break;}
 8006b98:	bf00      	nop
		}

		tt = 0;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		while (tt <= 39) {
 8006ba0:	e01b      	b.n	8006bda <maze_makerBack+0x322>
			count_box[tt] = count_boxnext[tt];
 8006ba2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ba6:	005b      	lsls	r3, r3, #1
 8006ba8:	33b8      	adds	r3, #184	; 0xb8
 8006baa:	443b      	add	r3, r7
 8006bac:	f833 2cb8 	ldrh.w	r2, [r3, #-184]
 8006bb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006bb4:	005b      	lsls	r3, r3, #1
 8006bb6:	33b8      	adds	r3, #184	; 0xb8
 8006bb8:	443b      	add	r3, r7
 8006bba:	f823 2c68 	strh.w	r2, [r3, #-104]
			count_boxnext[tt] = 256;
 8006bbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	33b8      	adds	r3, #184	; 0xb8
 8006bc6:	443b      	add	r3, r7
 8006bc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bcc:	f823 2cb8 	strh.w	r2, [r3, #-184]
			tt++;
 8006bd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		while (tt <= 39) {
 8006bda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006bde:	2b27      	cmp	r3, #39	; 0x27
 8006be0:	dddf      	ble.n	8006ba2 <maze_makerBack+0x2ea>
		}
		if (count_number == 255 || count_box[0] == 256) {break;}
 8006be2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006be6:	2bff      	cmp	r3, #255	; 0xff
 8006be8:	d00e      	beq.n	8006c08 <maze_makerBack+0x350>
 8006bea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bf2:	d009      	beq.n	8006c08 <maze_makerBack+0x350>
		count_number++;
 8006bf4:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	while (count_number <= 255) {
 8006bfe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006c02:	2bff      	cmp	r3, #255	; 0xff
 8006c04:	f67f ae99 	bls.w	800693a <maze_makerBack+0x82>
	}

}
 8006c08:	bf00      	nop
 8006c0a:	37b8      	adds	r7, #184	; 0xb8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	20000fd8 	.word	0x20000fd8
 8006c14:	20000f60 	.word	0x20000f60

08006c18 <maze_display>:

void maze_display(void) {
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b08a      	sub	sp, #40	; 0x28
 8006c1c:	af00      	add	r7, sp, #0
	int ss;
	int tt = 14;
 8006c1e:	230e      	movs	r3, #14
 8006c20:	623b      	str	r3, [r7, #32]
	unsigned short presence[16];

	printf(
 8006c22:	48a6      	ldr	r0, [pc, #664]	; (8006ebc <maze_display+0x2a4>)
 8006c24:	f008 f824 	bl	800ec70 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	while (tt >= -1) { //ttはｙ軸
 8006c28:	e0a3      	b.n	8006d72 <maze_display+0x15a>
		ss = 0;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
		printf("|%5d", walk_count[tt + 1]);
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	3301      	adds	r3, #1
 8006c32:	4aa3      	ldr	r2, [pc, #652]	; (8006ec0 <maze_display+0x2a8>)
 8006c34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c38:	4619      	mov	r1, r3
 8006c3a:	48a2      	ldr	r0, [pc, #648]	; (8006ec4 <maze_display+0x2ac>)
 8006c3c:	f007 ff7c 	bl	800eb38 <iprintf>
		while (ss < 15) {
 8006c40:	e039      	b.n	8006cb6 <maze_display+0x9e>
			presence[ss] = wall.row[ss] & (1 << (tt + 1));
 8006c42:	4aa1      	ldr	r2, [pc, #644]	; (8006ec8 <maze_display+0x2b0>)
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c4a:	b21a      	sxth	r2, r3
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	2101      	movs	r1, #1
 8006c52:	fa01 f303 	lsl.w	r3, r1, r3
 8006c56:	b21b      	sxth	r3, r3
 8006c58:	4013      	ands	r3, r2
 8006c5a:	b21b      	sxth	r3, r3
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	3328      	adds	r3, #40	; 0x28
 8006c64:	443b      	add	r3, r7
 8006c66:	f823 2c28 	strh.w	r2, [r3, #-40]
			if (presence[ss] == 0) {
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	3328      	adds	r3, #40	; 0x28
 8006c70:	443b      	add	r3, r7
 8006c72:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10d      	bne.n	8006c96 <maze_display+0x7e>
				printf(" %5d", walk_count[tt + 1 + (ss + 1) * 16]);
 8006c7a:	6a3b      	ldr	r3, [r7, #32]
 8006c7c:	1c5a      	adds	r2, r3, #1
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	3301      	adds	r3, #1
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	4413      	add	r3, r2
 8006c86:	4a8e      	ldr	r2, [pc, #568]	; (8006ec0 <maze_display+0x2a8>)
 8006c88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	488f      	ldr	r0, [pc, #572]	; (8006ecc <maze_display+0x2b4>)
 8006c90:	f007 ff52 	bl	800eb38 <iprintf>
 8006c94:	e00c      	b.n	8006cb0 <maze_display+0x98>
			} else {
				printf("|%5d", walk_count[tt + 1 + (ss + 1) * 16]);
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	011b      	lsls	r3, r3, #4
 8006ca0:	4413      	add	r3, r2
 8006ca2:	4a87      	ldr	r2, [pc, #540]	; (8006ec0 <maze_display+0x2a8>)
 8006ca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ca8:	4619      	mov	r1, r3
 8006caa:	4886      	ldr	r0, [pc, #536]	; (8006ec4 <maze_display+0x2ac>)
 8006cac:	f007 ff44 	bl	800eb38 <iprintf>
			}
			ss++;
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss < 15) {
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	2b0e      	cmp	r3, #14
 8006cba:	ddc2      	ble.n	8006c42 <maze_display+0x2a>
		}
		printf("|\n");
 8006cbc:	4884      	ldr	r0, [pc, #528]	; (8006ed0 <maze_display+0x2b8>)
 8006cbe:	f007 ffd7 	bl	800ec70 <puts>
		ss = 0;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss <= 15) { // all clear***************************************
 8006cc6:	e009      	b.n	8006cdc <maze_display+0xc4>
			presence[ss] = 0;
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cca:	005b      	lsls	r3, r3, #1
 8006ccc:	3328      	adds	r3, #40	; 0x28
 8006cce:	443b      	add	r3, r7
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f823 2c28 	strh.w	r2, [r3, #-40]
			ss++;
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	3301      	adds	r3, #1
 8006cda:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss <= 15) { // all clear***************************************
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	2b0f      	cmp	r3, #15
 8006ce0:	ddf2      	ble.n	8006cc8 <maze_display+0xb0>
		}
		ss = 0; // all clear***************************************
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	627b      	str	r3, [r7, #36]	; 0x24
		if (tt <= -1) {
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	db48      	blt.n	8006d7e <maze_display+0x166>
			break;
		}
		while (ss <= 15) {
 8006cec:	e026      	b.n	8006d3c <maze_display+0x124>
			presence[ss] = wall.column[tt] & (1 << ss);
 8006cee:	4a76      	ldr	r2, [pc, #472]	; (8006ec8 <maze_display+0x2b0>)
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	330c      	adds	r3, #12
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	4413      	add	r3, r2
 8006cf8:	88db      	ldrh	r3, [r3, #6]
 8006cfa:	b21a      	sxth	r2, r3
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	fa01 f303 	lsl.w	r3, r1, r3
 8006d04:	b21b      	sxth	r3, r3
 8006d06:	4013      	ands	r3, r2
 8006d08:	b21b      	sxth	r3, r3
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	005b      	lsls	r3, r3, #1
 8006d10:	3328      	adds	r3, #40	; 0x28
 8006d12:	443b      	add	r3, r7
 8006d14:	f823 2c28 	strh.w	r2, [r3, #-40]

			if (presence[ss] == 0) {
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	005b      	lsls	r3, r3, #1
 8006d1c:	3328      	adds	r3, #40	; 0x28
 8006d1e:	443b      	add	r3, r7
 8006d20:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d103      	bne.n	8006d30 <maze_display+0x118>
				printf("+     ");
 8006d28:	486a      	ldr	r0, [pc, #424]	; (8006ed4 <maze_display+0x2bc>)
 8006d2a:	f007 ff05 	bl	800eb38 <iprintf>
 8006d2e:	e002      	b.n	8006d36 <maze_display+0x11e>
			} else {
				printf("+-----");
 8006d30:	4869      	ldr	r0, [pc, #420]	; (8006ed8 <maze_display+0x2c0>)
 8006d32:	f007 ff01 	bl	800eb38 <iprintf>
			}
			ss++;
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	3301      	adds	r3, #1
 8006d3a:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss <= 15) {
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	2b0f      	cmp	r3, #15
 8006d40:	ddd5      	ble.n	8006cee <maze_display+0xd6>
		}

		printf("+\n");
 8006d42:	4866      	ldr	r0, [pc, #408]	; (8006edc <maze_display+0x2c4>)
 8006d44:	f007 ff94 	bl	800ec70 <puts>

		ss = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	627b      	str	r3, [r7, #36]	; 0x24

		while (ss <= 15) { // all clear***************************************
 8006d4c:	e009      	b.n	8006d62 <maze_display+0x14a>
			presence[ss] = 0;
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d50:	005b      	lsls	r3, r3, #1
 8006d52:	3328      	adds	r3, #40	; 0x28
 8006d54:	443b      	add	r3, r7
 8006d56:	2200      	movs	r2, #0
 8006d58:	f823 2c28 	strh.w	r2, [r3, #-40]

			ss++;
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	3301      	adds	r3, #1
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss <= 15) { // all clear***************************************
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	2b0f      	cmp	r3, #15
 8006d66:	ddf2      	ble.n	8006d4e <maze_display+0x136>
		}
		ss = 0; // all clear***************************************
 8006d68:	2300      	movs	r3, #0
 8006d6a:	627b      	str	r3, [r7, #36]	; 0x24

		tt--;
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	623b      	str	r3, [r7, #32]
	while (tt >= -1) { //ttはｙ軸
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d78:	f6bf af57 	bge.w	8006c2a <maze_display+0x12>
 8006d7c:	e000      	b.n	8006d80 <maze_display+0x168>
			break;
 8006d7e:	bf00      	nop
	}

	printf(
 8006d80:	4857      	ldr	r0, [pc, #348]	; (8006ee0 <maze_display+0x2c8>)
 8006d82:	f007 ff75 	bl	800ec70 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");

	tt = 14;
 8006d86:	230e      	movs	r3, #14
 8006d88:	623b      	str	r3, [r7, #32]
	printf(
 8006d8a:	484c      	ldr	r0, [pc, #304]	; (8006ebc <maze_display+0x2a4>)
 8006d8c:	f007 ff70 	bl	800ec70 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");

	while (tt >= -1) { //ttはｙ軸
 8006d90:	e0ba      	b.n	8006f08 <maze_display+0x2f0>


		ss = 0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	627b      	str	r3, [r7, #36]	; 0x24
		printf("|%5d", walk_count[tt + 1]);
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	4a49      	ldr	r2, [pc, #292]	; (8006ec0 <maze_display+0x2a8>)
 8006d9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006da0:	4619      	mov	r1, r3
 8006da2:	4848      	ldr	r0, [pc, #288]	; (8006ec4 <maze_display+0x2ac>)
 8006da4:	f007 fec8 	bl	800eb38 <iprintf>
		while (ss < 15) {
 8006da8:	e03b      	b.n	8006e22 <maze_display+0x20a>
			presence[ss] = wall.row_look[ss] & (1 << (tt + 1));
 8006daa:	4a47      	ldr	r2, [pc, #284]	; (8006ec8 <maze_display+0x2b0>)
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	331c      	adds	r3, #28
 8006db0:	005b      	lsls	r3, r3, #1
 8006db2:	4413      	add	r3, r2
 8006db4:	889b      	ldrh	r3, [r3, #4]
 8006db6:	b21a      	sxth	r2, r3
 8006db8:	6a3b      	ldr	r3, [r7, #32]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8006dc2:	b21b      	sxth	r3, r3
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	b21b      	sxth	r3, r3
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	3328      	adds	r3, #40	; 0x28
 8006dd0:	443b      	add	r3, r7
 8006dd2:	f823 2c28 	strh.w	r2, [r3, #-40]
			if (presence[ss] == 0) {
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	3328      	adds	r3, #40	; 0x28
 8006ddc:	443b      	add	r3, r7
 8006dde:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10d      	bne.n	8006e02 <maze_display+0x1ea>
				printf(" %5d", walk_count[tt + 1 + (ss + 1) * 16]);
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	3301      	adds	r3, #1
 8006dee:	011b      	lsls	r3, r3, #4
 8006df0:	4413      	add	r3, r2
 8006df2:	4a33      	ldr	r2, [pc, #204]	; (8006ec0 <maze_display+0x2a8>)
 8006df4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	4834      	ldr	r0, [pc, #208]	; (8006ecc <maze_display+0x2b4>)
 8006dfc:	f007 fe9c 	bl	800eb38 <iprintf>
 8006e00:	e00c      	b.n	8006e1c <maze_display+0x204>
			} else {
				printf("|%5d", walk_count[tt + 1 + (ss + 1) * 16]);
 8006e02:	6a3b      	ldr	r3, [r7, #32]
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	3301      	adds	r3, #1
 8006e0a:	011b      	lsls	r3, r3, #4
 8006e0c:	4413      	add	r3, r2
 8006e0e:	4a2c      	ldr	r2, [pc, #176]	; (8006ec0 <maze_display+0x2a8>)
 8006e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e14:	4619      	mov	r1, r3
 8006e16:	482b      	ldr	r0, [pc, #172]	; (8006ec4 <maze_display+0x2ac>)
 8006e18:	f007 fe8e 	bl	800eb38 <iprintf>
			}
			ss++;
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	3301      	adds	r3, #1
 8006e20:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss < 15) {
 8006e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e24:	2b0e      	cmp	r3, #14
 8006e26:	ddc0      	ble.n	8006daa <maze_display+0x192>
		}
		printf("|\n");
 8006e28:	4829      	ldr	r0, [pc, #164]	; (8006ed0 <maze_display+0x2b8>)
 8006e2a:	f007 ff21 	bl	800ec70 <puts>
		ss = 0;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss <= 15) { // all clear***************************************
 8006e32:	e009      	b.n	8006e48 <maze_display+0x230>
			presence[ss] = 0;
 8006e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e36:	005b      	lsls	r3, r3, #1
 8006e38:	3328      	adds	r3, #40	; 0x28
 8006e3a:	443b      	add	r3, r7
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f823 2c28 	strh.w	r2, [r3, #-40]

			ss++;
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	3301      	adds	r3, #1
 8006e46:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss <= 15) { // all clear***************************************
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	2b0f      	cmp	r3, #15
 8006e4c:	ddf2      	ble.n	8006e34 <maze_display+0x21c>
		}
		ss = 0; // all clear***************************************
 8006e4e:	2300      	movs	r3, #0
 8006e50:	627b      	str	r3, [r7, #36]	; 0x24
		if (tt <= -1) {
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	db5d      	blt.n	8006f14 <maze_display+0x2fc>
			break;
		}
		while (ss <= 15) {
 8006e58:	e026      	b.n	8006ea8 <maze_display+0x290>
			presence[ss] = wall.column_look[tt] & (1 << ss);
 8006e5a:	4a1b      	ldr	r2, [pc, #108]	; (8006ec8 <maze_display+0x2b0>)
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	332c      	adds	r3, #44	; 0x2c
 8006e60:	005b      	lsls	r3, r3, #1
 8006e62:	4413      	add	r3, r2
 8006e64:	885b      	ldrh	r3, [r3, #2]
 8006e66:	b21a      	sxth	r2, r3
 8006e68:	2101      	movs	r1, #1
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e70:	b21b      	sxth	r3, r3
 8006e72:	4013      	ands	r3, r2
 8006e74:	b21b      	sxth	r3, r3
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7a:	005b      	lsls	r3, r3, #1
 8006e7c:	3328      	adds	r3, #40	; 0x28
 8006e7e:	443b      	add	r3, r7
 8006e80:	f823 2c28 	strh.w	r2, [r3, #-40]

			if (presence[ss] == 0) {
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	005b      	lsls	r3, r3, #1
 8006e88:	3328      	adds	r3, #40	; 0x28
 8006e8a:	443b      	add	r3, r7
 8006e8c:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d103      	bne.n	8006e9c <maze_display+0x284>
				printf("+     ");
 8006e94:	480f      	ldr	r0, [pc, #60]	; (8006ed4 <maze_display+0x2bc>)
 8006e96:	f007 fe4f 	bl	800eb38 <iprintf>
 8006e9a:	e002      	b.n	8006ea2 <maze_display+0x28a>
			} else {
				printf("+-----");
 8006e9c:	480e      	ldr	r0, [pc, #56]	; (8006ed8 <maze_display+0x2c0>)
 8006e9e:	f007 fe4b 	bl	800eb38 <iprintf>
			}
			ss++;
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss <= 15) {
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eaa:	2b0f      	cmp	r3, #15
 8006eac:	ddd5      	ble.n	8006e5a <maze_display+0x242>
		}

		printf("+\n");
 8006eae:	480b      	ldr	r0, [pc, #44]	; (8006edc <maze_display+0x2c4>)
 8006eb0:	f007 fede 	bl	800ec70 <puts>

		ss = 0;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	627b      	str	r3, [r7, #36]	; 0x24

		while (ss <= 15) { // all clear***************************************
 8006eb8:	e01e      	b.n	8006ef8 <maze_display+0x2e0>
 8006eba:	bf00      	nop
 8006ebc:	080113c4 	.word	0x080113c4
 8006ec0:	20000fd8 	.word	0x20000fd8
 8006ec4:	08011428 	.word	0x08011428
 8006ec8:	20000f60 	.word	0x20000f60
 8006ecc:	08011430 	.word	0x08011430
 8006ed0:	08011438 	.word	0x08011438
 8006ed4:	0801143c 	.word	0x0801143c
 8006ed8:	08011444 	.word	0x08011444
 8006edc:	0801144c 	.word	0x0801144c
 8006ee0:	08011450 	.word	0x08011450
			presence[ss] = 0;
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	3328      	adds	r3, #40	; 0x28
 8006eea:	443b      	add	r3, r7
 8006eec:	2200      	movs	r2, #0
 8006eee:	f823 2c28 	strh.w	r2, [r3, #-40]

			ss++;
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss <= 15) { // all clear***************************************
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	2b0f      	cmp	r3, #15
 8006efc:	ddf2      	ble.n	8006ee4 <maze_display+0x2cc>
		}
		ss = 0; // all clear***************************************
 8006efe:	2300      	movs	r3, #0
 8006f00:	627b      	str	r3, [r7, #36]	; 0x24

		tt--;
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	3b01      	subs	r3, #1
 8006f06:	623b      	str	r3, [r7, #32]
	while (tt >= -1) { //ttはｙ軸
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f0e:	f6bf af40 	bge.w	8006d92 <maze_display+0x17a>
 8006f12:	e000      	b.n	8006f16 <maze_display+0x2fe>
			break;
 8006f14:	bf00      	nop
	}

	printf(
 8006f16:	4803      	ldr	r0, [pc, #12]	; (8006f24 <maze_display+0x30c>)
 8006f18:	f007 feaa 	bl	800ec70 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");

}
 8006f1c:	bf00      	nop
 8006f1e:	3728      	adds	r7, #40	; 0x28
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	08011450 	.word	0x08011450

08006f28 <mode_decision>:
#include "maze_Turning.h"
#include "maze_strategy.h"



unsigned char mode_decision(unsigned char select,unsigned char now_mode){
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	4603      	mov	r3, r0
 8006f30:	460a      	mov	r2, r1
 8006f32:	71fb      	strb	r3, [r7, #7]
 8006f34:	4613      	mov	r3, r2
 8006f36:	71bb      	strb	r3, [r7, #6]

//LCDで現在のモード番号を表示
switch (select){
 8006f38:	79fb      	ldrb	r3, [r7, #7]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <mode_decision+0x1c>
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d005      	beq.n	8006f4e <mode_decision+0x26>
 8006f42:	e009      	b.n	8006f58 <mode_decision+0x30>
case 0:
mode_display0(now_mode);
 8006f44:	79bb      	ldrb	r3, [r7, #6]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 f884 	bl	8007054 <mode_display0>
break;
 8006f4c:	e004      	b.n	8006f58 <mode_decision+0x30>
case 1:
mode_display1(now_mode);
 8006f4e:	79bb      	ldrb	r3, [r7, #6]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 f8c5 	bl	80070e0 <mode_display1>
break;
 8006f56:	bf00      	nop
}


while (g_sensor_on[0]<=SENSOR_FINGER_0){
 8006f58:	e061      	b.n	800701e <mode_decision+0xf6>
	if(read_switch1()==1){
 8006f5a:	f7fc fd91 	bl	8003a80 <read_switch1>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d12b      	bne.n	8006fbc <mode_decision+0x94>
		if(select==0 && now_mode > MAX_MODE0){now_mode=0;}
 8006f64:	79fb      	ldrb	r3, [r7, #7]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d105      	bne.n	8006f76 <mode_decision+0x4e>
 8006f6a:	79bb      	ldrb	r3, [r7, #6]
 8006f6c:	2b05      	cmp	r3, #5
 8006f6e:	d902      	bls.n	8006f76 <mode_decision+0x4e>
 8006f70:	2300      	movs	r3, #0
 8006f72:	71bb      	strb	r3, [r7, #6]
 8006f74:	e00b      	b.n	8006f8e <mode_decision+0x66>
		else if(select==1 && now_mode > MAX_MODE1){now_mode=0;}
 8006f76:	79fb      	ldrb	r3, [r7, #7]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d105      	bne.n	8006f88 <mode_decision+0x60>
 8006f7c:	79bb      	ldrb	r3, [r7, #6]
 8006f7e:	2b0f      	cmp	r3, #15
 8006f80:	d902      	bls.n	8006f88 <mode_decision+0x60>
 8006f82:	2300      	movs	r3, #0
 8006f84:	71bb      	strb	r3, [r7, #6]
 8006f86:	e002      	b.n	8006f8e <mode_decision+0x66>
		else{now_mode++;}
 8006f88:	79bb      	ldrb	r3, [r7, #6]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	71bb      	strb	r3, [r7, #6]

		switch (select){
 8006f8e:	79fb      	ldrb	r3, [r7, #7]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <mode_decision+0x72>
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d005      	beq.n	8006fa4 <mode_decision+0x7c>
 8006f98:	e009      	b.n	8006fae <mode_decision+0x86>
		case 0:
		mode_display0(now_mode);
 8006f9a:	79bb      	ldrb	r3, [r7, #6]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 f859 	bl	8007054 <mode_display0>
		break;
 8006fa2:	e004      	b.n	8006fae <mode_decision+0x86>
		case 1:
		mode_display1(now_mode);
 8006fa4:	79bb      	ldrb	r3, [r7, #6]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 f89a 	bl	80070e0 <mode_display1>
		break;
 8006fac:	bf00      	nop
		}
		pl_play_oneSound(now_mode);
 8006fae:	79bb      	ldrb	r3, [r7, #6]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7fb fe2d 	bl	8002c10 <pl_play_oneSound>
		wait_ms(100);
 8006fb6:	2064      	movs	r0, #100	; 0x64
 8006fb8:	f7fc fda6 	bl	8003b08 <wait_ms>
	}
	if(read_switch2()==1){
 8006fbc:	f7fc fd76 	bl	8003aac <read_switch2>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d12b      	bne.n	800701e <mode_decision+0xf6>
		if(select==0 && now_mode == 0){now_mode=MAX_MODE0+1;}
 8006fc6:	79fb      	ldrb	r3, [r7, #7]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d105      	bne.n	8006fd8 <mode_decision+0xb0>
 8006fcc:	79bb      	ldrb	r3, [r7, #6]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d102      	bne.n	8006fd8 <mode_decision+0xb0>
 8006fd2:	2306      	movs	r3, #6
 8006fd4:	71bb      	strb	r3, [r7, #6]
 8006fd6:	e00b      	b.n	8006ff0 <mode_decision+0xc8>
		else if(select==1 && now_mode == 0){now_mode=MAX_MODE1+1;}
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d105      	bne.n	8006fea <mode_decision+0xc2>
 8006fde:	79bb      	ldrb	r3, [r7, #6]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d102      	bne.n	8006fea <mode_decision+0xc2>
 8006fe4:	2310      	movs	r3, #16
 8006fe6:	71bb      	strb	r3, [r7, #6]
 8006fe8:	e002      	b.n	8006ff0 <mode_decision+0xc8>
		else{now_mode--;}
 8006fea:	79bb      	ldrb	r3, [r7, #6]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	71bb      	strb	r3, [r7, #6]

		switch (select){
 8006ff0:	79fb      	ldrb	r3, [r7, #7]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d002      	beq.n	8006ffc <mode_decision+0xd4>
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d005      	beq.n	8007006 <mode_decision+0xde>
 8006ffa:	e009      	b.n	8007010 <mode_decision+0xe8>
		case 0:
		mode_display0(now_mode);
 8006ffc:	79bb      	ldrb	r3, [r7, #6]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 f828 	bl	8007054 <mode_display0>
		break;
 8007004:	e004      	b.n	8007010 <mode_decision+0xe8>
		case 1:
		mode_display1(now_mode);
 8007006:	79bb      	ldrb	r3, [r7, #6]
 8007008:	4618      	mov	r0, r3
 800700a:	f000 f869 	bl	80070e0 <mode_display1>
		break;
 800700e:	bf00      	nop
		}
		pl_play_oneSound(now_mode);
 8007010:	79bb      	ldrb	r3, [r7, #6]
 8007012:	4618      	mov	r0, r3
 8007014:	f7fb fdfc 	bl	8002c10 <pl_play_oneSound>
		wait_ms(100);
 8007018:	2064      	movs	r0, #100	; 0x64
 800701a:	f7fc fd75 	bl	8003b08 <wait_ms>
while (g_sensor_on[0]<=SENSOR_FINGER_0){
 800701e:	4b0b      	ldr	r3, [pc, #44]	; (800704c <mode_decision+0x124>)
 8007020:	881b      	ldrh	r3, [r3, #0]
 8007022:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8007026:	d998      	bls.n	8006f5a <mode_decision+0x32>
	}


}

while (g_sensor_on[0]>=SENSOR_FINGER_0){
 8007028:	e002      	b.n	8007030 <mode_decision+0x108>
	wait_ms(1);
 800702a:	2001      	movs	r0, #1
 800702c:	f7fc fd6c 	bl	8003b08 <wait_ms>
while (g_sensor_on[0]>=SENSOR_FINGER_0){
 8007030:	4b06      	ldr	r3, [pc, #24]	; (800704c <mode_decision+0x124>)
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8007038:	d2f7      	bcs.n	800702a <mode_decision+0x102>
}
pl_play_Music(8, Zelda_nazo);
 800703a:	4905      	ldr	r1, [pc, #20]	; (8007050 <mode_decision+0x128>)
 800703c:	2008      	movs	r0, #8
 800703e:	f7fb fe53 	bl	8002ce8 <pl_play_Music>

return now_mode;
 8007042:	79bb      	ldrb	r3, [r7, #6]
}
 8007044:	4618      	mov	r0, r3
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	200003b0 	.word	0x200003b0
 8007050:	20000914 	.word	0x20000914

08007054 <mode_display0>:

void mode_display0(int mode){
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
	pl_lcd_clear();
 800705c:	f7fb fa8f 	bl	800257e <pl_lcd_clear>
	pl_lcd_pos(0, 0);
 8007060:	2100      	movs	r1, #0
 8007062:	2000      	movs	r0, #0
 8007064:	f7fb fa73 	bl	800254e <pl_lcd_pos>
	switch(mode){
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b04      	cmp	r3, #4
 800706c:	d820      	bhi.n	80070b0 <mode_display0+0x5c>
 800706e:	a201      	add	r2, pc, #4	; (adr r2, 8007074 <mode_display0+0x20>)
 8007070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007074:	08007089 	.word	0x08007089
 8007078:	08007091 	.word	0x08007091
 800707c:	08007099 	.word	0x08007099
 8007080:	080070a1 	.word	0x080070a1
 8007084:	080070a9 	.word	0x080070a9
	case 0:
		pl_lcd_puts("test");
 8007088:	480f      	ldr	r0, [pc, #60]	; (80070c8 <mode_display0+0x74>)
 800708a:	f7fb fa25 	bl	80024d8 <pl_lcd_puts>
	break;
 800708e:	e00f      	b.n	80070b0 <mode_display0+0x5c>
	case 1:
		pl_lcd_puts("run");
 8007090:	480e      	ldr	r0, [pc, #56]	; (80070cc <mode_display0+0x78>)
 8007092:	f7fb fa21 	bl	80024d8 <pl_lcd_puts>
	break;
 8007096:	e00b      	b.n	80070b0 <mode_display0+0x5c>
	case 2:
		pl_lcd_puts("tune");
 8007098:	480d      	ldr	r0, [pc, #52]	; (80070d0 <mode_display0+0x7c>)
 800709a:	f7fb fa1d 	bl	80024d8 <pl_lcd_puts>
	break;
 800709e:	e007      	b.n	80070b0 <mode_display0+0x5c>
	case 3:
		pl_lcd_puts("tune2");
 80070a0:	480c      	ldr	r0, [pc, #48]	; (80070d4 <mode_display0+0x80>)
 80070a2:	f7fb fa19 	bl	80024d8 <pl_lcd_puts>
	break;
 80070a6:	e003      	b.n	80070b0 <mode_display0+0x5c>
	case 4:
		pl_lcd_puts("endure");
 80070a8:	480b      	ldr	r0, [pc, #44]	; (80070d8 <mode_display0+0x84>)
 80070aa:	f7fb fa15 	bl	80024d8 <pl_lcd_puts>
	break;
 80070ae:	bf00      	nop
	}

	pl_lcd_pos(1, 0);
 80070b0:	2100      	movs	r1, #0
 80070b2:	2001      	movs	r0, #1
 80070b4:	f7fb fa4b 	bl	800254e <pl_lcd_pos>
	pl_lcd_puts("mode");
 80070b8:	4808      	ldr	r0, [pc, #32]	; (80070dc <mode_display0+0x88>)
 80070ba:	f7fb fa0d 	bl	80024d8 <pl_lcd_puts>

}
 80070be:	bf00      	nop
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	080114b4 	.word	0x080114b4
 80070cc:	080114bc 	.word	0x080114bc
 80070d0:	080114c0 	.word	0x080114c0
 80070d4:	080114c8 	.word	0x080114c8
 80070d8:	080114d0 	.word	0x080114d0
 80070dc:	080114d8 	.word	0x080114d8

080070e0 <mode_display1>:


void mode_display1(int mode){
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b088      	sub	sp, #32
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
	pl_lcd_clear();
 80070e8:	f7fb fa49 	bl	800257e <pl_lcd_clear>
	pl_lcd_pos(0, 0);
 80070ec:	2100      	movs	r1, #0
 80070ee:	2000      	movs	r0, #0
 80070f0:	f7fb fa2d 	bl	800254e <pl_lcd_pos>
	pl_lcd_puts("mode");
 80070f4:	480f      	ldr	r0, [pc, #60]	; (8007134 <mode_display1+0x54>)
 80070f6:	f7fb f9ef 	bl	80024d8 <pl_lcd_puts>
	char strBuffer[17] = {0};
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	f107 0310 	add.w	r3, r7, #16
 8007102:	2200      	movs	r2, #0
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	605a      	str	r2, [r3, #4]
 8007108:	609a      	str	r2, [r3, #8]
 800710a:	731a      	strb	r2, [r3, #12]
	sprintf(strBuffer, "CNT=%04d", mode);
 800710c:	f107 030c 	add.w	r3, r7, #12
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	4909      	ldr	r1, [pc, #36]	; (8007138 <mode_display1+0x58>)
 8007114:	4618      	mov	r0, r3
 8007116:	f007 fe81 	bl	800ee1c <siprintf>
	pl_lcd_pos(1, 0);
 800711a:	2100      	movs	r1, #0
 800711c:	2001      	movs	r0, #1
 800711e:	f7fb fa16 	bl	800254e <pl_lcd_pos>
	pl_lcd_puts(strBuffer);
 8007122:	f107 030c 	add.w	r3, r7, #12
 8007126:	4618      	mov	r0, r3
 8007128:	f7fb f9d6 	bl	80024d8 <pl_lcd_puts>

}
 800712c:	bf00      	nop
 800712e:	3720      	adds	r7, #32
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	080114d8 	.word	0x080114d8
 8007138:	080114e0 	.word	0x080114e0

0800713c <mode_execution>:





void mode_execution(unsigned char now_mode1,unsigned char now_mode2){
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	4603      	mov	r3, r0
 8007144:	460a      	mov	r2, r1
 8007146:	71fb      	strb	r3, [r7, #7]
 8007148:	4613      	mov	r3, r2
 800714a:	71bb      	strb	r3, [r7, #6]
	pl_lcd_clear();
 800714c:	f7fb fa17 	bl	800257e <pl_lcd_clear>
	pl_lcd_pos(0, 0);
 8007150:	2100      	movs	r1, #0
 8007152:	2000      	movs	r0, #0
 8007154:	f7fb f9fb 	bl	800254e <pl_lcd_pos>
	pl_lcd_puts("mode");
 8007158:	4829      	ldr	r0, [pc, #164]	; (8007200 <mode_execution+0xc4>)
 800715a:	f7fb f9bd 	bl	80024d8 <pl_lcd_puts>
	pl_lcd_pos(1, 0);
 800715e:	2100      	movs	r1, #0
 8007160:	2001      	movs	r0, #1
 8007162:	f7fb f9f4 	bl	800254e <pl_lcd_pos>
	pl_lcd_puts("select");
 8007166:	4827      	ldr	r0, [pc, #156]	; (8007204 <mode_execution+0xc8>)
 8007168:	f7fb f9b6 	bl	80024d8 <pl_lcd_puts>
	while (g_sensor_on[3]<=SENSOR_FINGER_3){
 800716c:	e00f      	b.n	800718e <mode_execution+0x52>
		wait_ms(1);
 800716e:	2001      	movs	r0, #1
 8007170:	f7fc fcca 	bl	8003b08 <wait_ms>
		if(read_switch1()==1 && read_switch2()==1){
 8007174:	f7fc fc84 	bl	8003a80 <read_switch1>
 8007178:	4603      	mov	r3, r0
 800717a:	2b01      	cmp	r3, #1
 800717c:	d107      	bne.n	800718e <mode_execution+0x52>
 800717e:	f7fc fc95 	bl	8003aac <read_switch2>
 8007182:	4603      	mov	r3, r0
 8007184:	2b01      	cmp	r3, #1
 8007186:	d102      	bne.n	800718e <mode_execution+0x52>
			now_mode1=100;
 8007188:	2364      	movs	r3, #100	; 0x64
 800718a:	71fb      	strb	r3, [r7, #7]
			break;
 800718c:	e004      	b.n	8007198 <mode_execution+0x5c>
	while (g_sensor_on[3]<=SENSOR_FINGER_3){
 800718e:	4b1e      	ldr	r3, [pc, #120]	; (8007208 <mode_execution+0xcc>)
 8007190:	88db      	ldrh	r3, [r3, #6]
 8007192:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8007196:	d9ea      	bls.n	800716e <mode_execution+0x32>
		}
	}
	pl_play_Music(8, Zelda_nazo);
 8007198:	491c      	ldr	r1, [pc, #112]	; (800720c <mode_execution+0xd0>)
 800719a:	2008      	movs	r0, #8
 800719c:	f7fb fda4 	bl	8002ce8 <pl_play_Music>

switch (now_mode1) {
 80071a0:	79fb      	ldrb	r3, [r7, #7]
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	dc10      	bgt.n	80071c8 <mode_execution+0x8c>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	db25      	blt.n	80071f6 <mode_execution+0xba>
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d823      	bhi.n	80071f6 <mode_execution+0xba>
 80071ae:	a201      	add	r2, pc, #4	; (adr r2, 80071b4 <mode_execution+0x78>)
 80071b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b4:	080071cf 	.word	0x080071cf
 80071b8:	080071d9 	.word	0x080071d9
 80071bc:	080071e3 	.word	0x080071e3
 80071c0:	080071f5 	.word	0x080071f5
 80071c4:	080071f5 	.word	0x080071f5
 80071c8:	2b64      	cmp	r3, #100	; 0x64
 80071ca:	d00f      	beq.n	80071ec <mode_execution+0xb0>
	case 100://エラー脱出
		wait_ms(10);
	break;

	}
}
 80071cc:	e013      	b.n	80071f6 <mode_execution+0xba>
		mode_PLtest(now_mode2);
 80071ce:	79bb      	ldrb	r3, [r7, #6]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f000 f81d 	bl	8007210 <mode_PLtest>
	break;
 80071d6:	e00e      	b.n	80071f6 <mode_execution+0xba>
		mode_Running(now_mode2);
 80071d8:	79bb      	ldrb	r3, [r7, #6]
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 f932 	bl	8007444 <mode_Running>
	break;
 80071e0:	e009      	b.n	80071f6 <mode_execution+0xba>
		mode_Tuning(now_mode2);
 80071e2:	79bb      	ldrb	r3, [r7, #6]
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 f961 	bl	80074ac <mode_Tuning>
	break;
 80071ea:	e004      	b.n	80071f6 <mode_execution+0xba>
		wait_ms(10);
 80071ec:	200a      	movs	r0, #10
 80071ee:	f7fc fc8b 	bl	8003b08 <wait_ms>
	break;
 80071f2:	e000      	b.n	80071f6 <mode_execution+0xba>
	break;
 80071f4:	bf00      	nop
}
 80071f6:	bf00      	nop
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	080114d8 	.word	0x080114d8
 8007204:	080114ec 	.word	0x080114ec
 8007208:	200003b0 	.word	0x200003b0
 800720c:	20000914 	.word	0x20000914

08007210 <mode_PLtest>:

void mode_PLtest(unsigned char now_mode2){
 8007210:	b590      	push	{r4, r7, lr}
 8007212:	b091      	sub	sp, #68	; 0x44
 8007214:	af02      	add	r7, sp, #8
 8007216:	4603      	mov	r3, r0
 8007218:	71fb      	strb	r3, [r7, #7]
	uint8_t Pin=0;
 800721a:	2300      	movs	r3, #0
 800721c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t hello[] = "Hello World\n\r";
 8007220:	4b7e      	ldr	r3, [pc, #504]	; (800741c <mode_PLtest+0x20c>)
 8007222:	f107 0420 	add.w	r4, r7, #32
 8007226:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007228:	c407      	stmia	r4!, {r0, r1, r2}
 800722a:	8023      	strh	r3, [r4, #0]
	char strBuffer[17] = {0};
 800722c:	2300      	movs	r3, #0
 800722e:	60fb      	str	r3, [r7, #12]
 8007230:	f107 0310 	add.w	r3, r7, #16
 8007234:	2200      	movs	r2, #0
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	605a      	str	r2, [r3, #4]
 800723a:	609a      	str	r2, [r3, #8]
 800723c:	731a      	strb	r2, [r3, #12]


	switch (now_mode2) {
 800723e:	79fb      	ldrb	r3, [r7, #7]
 8007240:	2b0c      	cmp	r3, #12
 8007242:	f200 80e7 	bhi.w	8007414 <mode_PLtest+0x204>
 8007246:	a201      	add	r2, pc, #4	; (adr r2, 800724c <mode_PLtest+0x3c>)
 8007248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724c:	0800729d 	.word	0x0800729d
 8007250:	080072ed 	.word	0x080072ed
 8007254:	08007339 	.word	0x08007339
 8007258:	08007361 	.word	0x08007361
 800725c:	08007393 	.word	0x08007393
 8007260:	0800739f 	.word	0x0800739f
 8007264:	080073d1 	.word	0x080073d1
 8007268:	080073dd 	.word	0x080073dd
 800726c:	080073e5 	.word	0x080073e5
 8007270:	080073ed 	.word	0x080073ed
 8007274:	08007413 	.word	0x08007413
 8007278:	08007413 	.word	0x08007413
 800727c:	08007413 	.word	0x08007413
		case 0://LED
			while(read_switch1()==0){
			write_LED(1);
 8007280:	2001      	movs	r0, #1
 8007282:	f7fb f987 	bl	8002594 <write_LED>
			HAL_Delay(500);
 8007286:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800728a:	f001 fcd3 	bl	8008c34 <HAL_Delay>
			write_LED(0);
 800728e:	2000      	movs	r0, #0
 8007290:	f7fb f980 	bl	8002594 <write_LED>
			HAL_Delay(500);
 8007294:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007298:	f001 fccc 	bl	8008c34 <HAL_Delay>
			while(read_switch1()==0){
 800729c:	f7fc fbf0 	bl	8003a80 <read_switch1>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d0ec      	beq.n	8007280 <mode_PLtest+0x70>
			}
		break;
 80072a6:	e0b5      	b.n	8007414 <mode_PLtest+0x204>
		case 1://SWITCH
			while(read_switch1()==0){
			if (read_switch2()==1 && Pin==0){
 80072a8:	f7fc fc00 	bl	8003aac <read_switch2>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d10a      	bne.n	80072c8 <mode_PLtest+0xb8>
 80072b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d106      	bne.n	80072c8 <mode_PLtest+0xb8>
				Pin=1;
 80072ba:	2301      	movs	r3, #1
 80072bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				HAL_Delay(100);
 80072c0:	2064      	movs	r0, #100	; 0x64
 80072c2:	f001 fcb7 	bl	8008c34 <HAL_Delay>
 80072c6:	e00e      	b.n	80072e6 <mode_PLtest+0xd6>
			}else if(read_switch2()==1 && Pin==1){
 80072c8:	f7fc fbf0 	bl	8003aac <read_switch2>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d109      	bne.n	80072e6 <mode_PLtest+0xd6>
 80072d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d105      	bne.n	80072e6 <mode_PLtest+0xd6>
				Pin=0;
 80072da:	2300      	movs	r3, #0
 80072dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				HAL_Delay(100);
 80072e0:	2064      	movs	r0, #100	; 0x64
 80072e2:	f001 fca7 	bl	8008c34 <HAL_Delay>
			}
			write_LED(1);
 80072e6:	2001      	movs	r0, #1
 80072e8:	f7fb f954 	bl	8002594 <write_LED>
			while(read_switch1()==0){
 80072ec:	f7fc fbc8 	bl	8003a80 <read_switch1>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d0d8      	beq.n	80072a8 <mode_PLtest+0x98>
			}
		break;
 80072f6:	e08d      	b.n	8007414 <mode_PLtest+0x204>
		case 2://USART

			while(read_switch1()==0){
			// test USART2
			setbuf(stdout, NULL);
 80072f8:	4b49      	ldr	r3, [pc, #292]	; (8007420 <mode_PLtest+0x210>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	2100      	movs	r1, #0
 8007300:	4618      	mov	r0, r3
 8007302:	f007 fcbd 	bl	800ec80 <setbuf>
			printf("hello=%s", hello);
 8007306:	f107 0320 	add.w	r3, r7, #32
 800730a:	4619      	mov	r1, r3
 800730c:	4845      	ldr	r0, [pc, #276]	; (8007424 <mode_PLtest+0x214>)
 800730e:	f007 fc13 	bl	800eb38 <iprintf>
			uint8_t hoge = 3;
 8007312:	2303      	movs	r3, #3
 8007314:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			float PI=3.14;
 8007318:	4b43      	ldr	r3, [pc, #268]	; (8007428 <mode_PLtest+0x218>)
 800731a:	633b      	str	r3, [r7, #48]	; 0x30
			printf("hoge=%d\n", hoge);
 800731c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8007320:	4619      	mov	r1, r3
 8007322:	4842      	ldr	r0, [pc, #264]	; (800742c <mode_PLtest+0x21c>)
 8007324:	f007 fc08 	bl	800eb38 <iprintf>
			printf("M_PI=%f\n", PI); // @suppress("Float formatting support")
 8007328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800732a:	f7f9 f90d 	bl	8000548 <__aeabi_f2d>
 800732e:	4602      	mov	r2, r0
 8007330:	460b      	mov	r3, r1
 8007332:	483f      	ldr	r0, [pc, #252]	; (8007430 <mode_PLtest+0x220>)
 8007334:	f007 fc00 	bl	800eb38 <iprintf>
			while(read_switch1()==0){
 8007338:	f7fc fba2 	bl	8003a80 <read_switch1>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d0da      	beq.n	80072f8 <mode_PLtest+0xe8>
			}
		break;
 8007342:	e067      	b.n	8007414 <mode_PLtest+0x204>
		case 3://timer
			while(read_switch1()==0){
				write_LED(1);
 8007344:	2001      	movs	r0, #1
 8007346:	f7fb f925 	bl	8002594 <write_LED>
				wait_ms(500);
 800734a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800734e:	f7fc fbdb 	bl	8003b08 <wait_ms>
				write_LED(0);
 8007352:	2000      	movs	r0, #0
 8007354:	f7fb f91e 	bl	8002594 <write_LED>
				wait_ms(500);
 8007358:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800735c:	f7fc fbd4 	bl	8003b08 <wait_ms>
			while(read_switch1()==0){
 8007360:	f7fc fb8e 	bl	8003a80 <read_switch1>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0ec      	beq.n	8007344 <mode_PLtest+0x134>
				}
		break;
 800736a:	e053      	b.n	8007414 <mode_PLtest+0x204>
		case 4://sensor
			// sensor test
			while(read_switch1()==0){
			//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer) / sizeof(uint16_t));
			//printf("BATT=%f\n",g_V_batt);
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d\n", g_sensor[0][0],g_sensor[1][0],g_sensor[2][0],g_sensor[3][0]);
 800736c:	4b31      	ldr	r3, [pc, #196]	; (8007434 <mode_PLtest+0x224>)
 800736e:	6819      	ldr	r1, [r3, #0]
 8007370:	4b30      	ldr	r3, [pc, #192]	; (8007434 <mode_PLtest+0x224>)
 8007372:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007374:	4b2f      	ldr	r3, [pc, #188]	; (8007434 <mode_PLtest+0x224>)
 8007376:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800737a:	4b2e      	ldr	r3, [pc, #184]	; (8007434 <mode_PLtest+0x224>)
 800737c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	4603      	mov	r3, r0
 8007384:	482c      	ldr	r0, [pc, #176]	; (8007438 <mode_PLtest+0x228>)
 8007386:	f007 fbd7 	bl	800eb38 <iprintf>
			wait_ms(500);
 800738a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800738e:	f7fc fbbb 	bl	8003b08 <wait_ms>
			while(read_switch1()==0){
 8007392:	f7fc fb75 	bl	8003a80 <read_switch1>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d0e7      	beq.n	800736c <mode_PLtest+0x15c>
			}
		break;
 800739c:	e03a      	b.n	8007414 <mode_PLtest+0x204>
		case 5://speaker
			pl_test_speaker();
 800739e:	f7fb fbcb 	bl	8002b38 <pl_test_speaker>
		break;
 80073a2:	e037      	b.n	8007414 <mode_PLtest+0x204>
		case 6://LCD
			while(read_switch1()==0){
			sprintf(strBuffer, "CNT=%04d", Pin);
 80073a4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80073a8:	f107 030c 	add.w	r3, r7, #12
 80073ac:	4923      	ldr	r1, [pc, #140]	; (800743c <mode_PLtest+0x22c>)
 80073ae:	4618      	mov	r0, r3
 80073b0:	f007 fd34 	bl	800ee1c <siprintf>
			Pin++;
 80073b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073b8:	3301      	adds	r3, #1
 80073ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			pl_lcd_pos(1, 0);
 80073be:	2100      	movs	r1, #0
 80073c0:	2001      	movs	r0, #1
 80073c2:	f7fb f8c4 	bl	800254e <pl_lcd_pos>
			pl_lcd_puts(strBuffer);
 80073c6:	f107 030c 	add.w	r3, r7, #12
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7fb f884 	bl	80024d8 <pl_lcd_puts>
			while(read_switch1()==0){
 80073d0:	f7fc fb56 	bl	8003a80 <read_switch1>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d0e4      	beq.n	80073a4 <mode_PLtest+0x194>
			}
		break;
 80073da:	e01b      	b.n	8007414 <mode_PLtest+0x204>
		case 7://motor
		    control_test_motor(0);
 80073dc:	2000      	movs	r0, #0
 80073de:	f7f9 fdd5 	bl	8000f8c <control_test_motor>
		break;
 80073e2:	e017      	b.n	8007414 <mode_PLtest+0x204>
		case 8://motor+sensor
			control_test_motor(1);
 80073e4:	2001      	movs	r0, #1
 80073e6:	f7f9 fdd1 	bl	8000f8c <control_test_motor>
		break;
 80073ea:	e013      	b.n	8007414 <mode_PLtest+0x204>
		case 9://record
			record_mode=1;
 80073ec:	4b14      	ldr	r3, [pc, #80]	; (8007440 <mode_PLtest+0x230>)
 80073ee:	2201      	movs	r2, #1
 80073f0:	701a      	strb	r2, [r3, #0]
			wait_ms(1000);
 80073f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80073f6:	f7fc fb87 	bl	8003b08 <wait_ms>
			while(read_switch1()==0){
 80073fa:	e002      	b.n	8007402 <mode_PLtest+0x1f2>
			record_mode=0;
 80073fc:	4b10      	ldr	r3, [pc, #64]	; (8007440 <mode_PLtest+0x230>)
 80073fe:	2200      	movs	r2, #0
 8007400:	701a      	strb	r2, [r3, #0]
			while(read_switch1()==0){
 8007402:	f7fc fb3d 	bl	8003a80 <read_switch1>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d0f7      	beq.n	80073fc <mode_PLtest+0x1ec>
			}
			record_print();
 800740c:	f000 f904 	bl	8007618 <record_print>
		break;
 8007410:	e000      	b.n	8007414 <mode_PLtest+0x204>
		case 10://flash
		break;
 8007412:	bf00      	nop
		break;
		case 12://PLname
		break;
	}

}
 8007414:	bf00      	nop
 8007416:	373c      	adds	r7, #60	; 0x3c
 8007418:	46bd      	mov	sp, r7
 800741a:	bd90      	pop	{r4, r7, pc}
 800741c:	0801153c 	.word	0x0801153c
 8007420:	2000000c 	.word	0x2000000c
 8007424:	080114f4 	.word	0x080114f4
 8007428:	4048f5c3 	.word	0x4048f5c3
 800742c:	08011500 	.word	0x08011500
 8007430:	0801150c 	.word	0x0801150c
 8007434:	2000023c 	.word	0x2000023c
 8007438:	08011518 	.word	0x08011518
 800743c:	080114e0 	.word	0x080114e0
 8007440:	20001278 	.word	0x20001278

08007444 <mode_Running>:

void mode_Running(unsigned char now_mode2){
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	4603      	mov	r3, r0
 800744c:	71fb      	strb	r3, [r7, #7]

	switch (now_mode2) {
 800744e:	79fb      	ldrb	r3, [r7, #7]
 8007450:	2b07      	cmp	r3, #7
 8007452:	d822      	bhi.n	800749a <mode_Running+0x56>
 8007454:	a201      	add	r2, pc, #4	; (adr r2, 800745c <mode_Running+0x18>)
 8007456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745a:	bf00      	nop
 800745c:	0800747d 	.word	0x0800747d
 8007460:	08007483 	.word	0x08007483
 8007464:	08007499 	.word	0x08007499
 8007468:	08007499 	.word	0x08007499
 800746c:	08007499 	.word	0x08007499
 8007470:	08007499 	.word	0x08007499
 8007474:	08007499 	.word	0x08007499
 8007478:	08007499 	.word	0x08007499
		case 0://迷路情報の可視化
			maze_display();
 800747c:	f7ff fbcc 	bl	8006c18 <maze_display>
		break;
 8007480:	e00b      	b.n	800749a <mode_Running+0x56>
		case 1://足立法
			AdatiWayReturn(500, 500, 7000,7000);
 8007482:	eddf 1a08 	vldr	s3, [pc, #32]	; 80074a4 <mode_Running+0x60>
 8007486:	ed9f 1a07 	vldr	s2, [pc, #28]	; 80074a4 <mode_Running+0x60>
 800748a:	eddf 0a07 	vldr	s1, [pc, #28]	; 80074a8 <mode_Running+0x64>
 800748e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80074a8 <mode_Running+0x64>
 8007492:	f7fd fe6b 	bl	800516c <AdatiWayReturn>
		break;
 8007496:	e000      	b.n	800749a <mode_Running+0x56>
		case 2://足立法(帰りあり)
		break;
 8007498:	bf00      	nop
		break;
		case 7://Runname
		break;
	}

}
 800749a:	bf00      	nop
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	45dac000 	.word	0x45dac000
 80074a8:	43fa0000 	.word	0x43fa0000

080074ac <mode_Tuning>:


void mode_Tuning(unsigned char now_mode2){
 80074ac:	b590      	push	{r4, r7, lr}
 80074ae:	b0d1      	sub	sp, #324	; 0x144
 80074b0:	af4e      	add	r7, sp, #312	; 0x138
 80074b2:	4603      	mov	r3, r0
 80074b4:	71fb      	strb	r3, [r7, #7]

	switch (now_mode2) {
 80074b6:	79fb      	ldrb	r3, [r7, #7]
 80074b8:	2b10      	cmp	r3, #16
 80074ba:	d859      	bhi.n	8007570 <mode_Tuning+0xc4>
 80074bc:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <mode_Tuning+0x18>)
 80074be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c2:	bf00      	nop
 80074c4:	08007509 	.word	0x08007509
 80074c8:	08007513 	.word	0x08007513
 80074cc:	0800751d 	.word	0x0800751d
 80074d0:	08007527 	.word	0x08007527
 80074d4:	0800754b 	.word	0x0800754b
 80074d8:	0800756f 	.word	0x0800756f
 80074dc:	0800756f 	.word	0x0800756f
 80074e0:	0800756f 	.word	0x0800756f
 80074e4:	0800756f 	.word	0x0800756f
 80074e8:	0800756f 	.word	0x0800756f
 80074ec:	0800756f 	.word	0x0800756f
 80074f0:	0800756f 	.word	0x0800756f
 80074f4:	0800756f 	.word	0x0800756f
 80074f8:	0800756f 	.word	0x0800756f
 80074fc:	0800756f 	.word	0x0800756f
 8007500:	0800756f 	.word	0x0800756f
 8007504:	0800756f 	.word	0x0800756f
		case 0://タイヤ径
			control_test_motor2(0,0);
 8007508:	2100      	movs	r1, #0
 800750a:	2000      	movs	r0, #0
 800750c:	f7f9 fd8e 	bl	800102c <control_test_motor2>
		break;
 8007510:	e02e      	b.n	8007570 <mode_Tuning+0xc4>
		case 1://トレッド幅
			control_test_motor2(1,0);
 8007512:	2100      	movs	r1, #0
 8007514:	2001      	movs	r0, #1
 8007516:	f7f9 fd89 	bl	800102c <control_test_motor2>
		break;
 800751a:	e029      	b.n	8007570 <mode_Tuning+0xc4>
		case 2://壁制御
			control_test_motor2(0,1);
 800751c:	2101      	movs	r1, #1
 800751e:	2000      	movs	r0, #0
 8007520:	f7f9 fd84 	bl	800102c <control_test_motor2>
		break;
 8007524:	e024      	b.n	8007570 <mode_Tuning+0xc4>
		case 3://右スラローム(探索)
			testturning(speed500_exploration,0,0);
 8007526:	4c14      	ldr	r4, [pc, #80]	; (8007578 <mode_Tuning+0xcc>)
 8007528:	2300      	movs	r3, #0
 800752a:	934d      	str	r3, [sp, #308]	; 0x134
 800752c:	2300      	movs	r3, #0
 800752e:	934c      	str	r3, [sp, #304]	; 0x130
 8007530:	4668      	mov	r0, sp
 8007532:	f104 0310 	add.w	r3, r4, #16
 8007536:	f44f 7298 	mov.w	r2, #304	; 0x130
 800753a:	4619      	mov	r1, r3
 800753c:	f006 fe7c 	bl	800e238 <memcpy>
 8007540:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007544:	f7fd fdac 	bl	80050a0 <testturning>
		break;
 8007548:	e012      	b.n	8007570 <mode_Tuning+0xc4>
		case 4://左スラローム(探索)
			testturning(speed500_exploration,1,0);
 800754a:	4c0b      	ldr	r4, [pc, #44]	; (8007578 <mode_Tuning+0xcc>)
 800754c:	2300      	movs	r3, #0
 800754e:	934d      	str	r3, [sp, #308]	; 0x134
 8007550:	2301      	movs	r3, #1
 8007552:	934c      	str	r3, [sp, #304]	; 0x130
 8007554:	4668      	mov	r0, sp
 8007556:	f104 0310 	add.w	r3, r4, #16
 800755a:	f44f 7298 	mov.w	r2, #304	; 0x130
 800755e:	4619      	mov	r1, r3
 8007560:	f006 fe6a 	bl	800e238 <memcpy>
 8007564:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007568:	f7fd fd9a 	bl	80050a0 <testturning>
		break;
 800756c:	e000      	b.n	8007570 <mode_Tuning+0xc4>
		case 5://右スラローム
		break;
 800756e:	bf00      	nop
		break;
		case 16://左斜め135
		break;
	}

}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	bd90      	pop	{r4, r7, pc}
 8007578:	20000a50 	.word	0x20000a50

0800757c <record_reset>:
//int SEN_record[5][15];
//int SEN_recordD[5][15];



void record_reset(void) {
 800757c:	b480      	push	{r7}
 800757e:	af00      	add	r7, sp, #0
	record_mode=0;
 8007580:	4b05      	ldr	r3, [pc, #20]	; (8007598 <record_reset+0x1c>)
 8007582:	2200      	movs	r2, #0
 8007584:	701a      	strb	r2, [r3, #0]
	record_time = 0;
 8007586:	4b05      	ldr	r3, [pc, #20]	; (800759c <record_reset+0x20>)
 8007588:	2200      	movs	r2, #0
 800758a:	601a      	str	r2, [r3, #0]
}
 800758c:	bf00      	nop
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	20001278 	.word	0x20001278
 800759c:	2000127c 	.word	0x2000127c

080075a0 <record_data>:



void record_data(float *input_record_data, int numlen) {
 80075a0:	b490      	push	{r4, r7}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
	if (record_mode == 1) {
 80075aa:	4b18      	ldr	r3, [pc, #96]	; (800760c <record_data+0x6c>)
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d126      	bne.n	8007600 <record_data+0x60>
		for (int record_count = 0; record_count < numlen; record_count++) {
 80075b2:	2300      	movs	r3, #0
 80075b4:	60fb      	str	r3, [r7, #12]
 80075b6:	e013      	b.n	80075e0 <record_data+0x40>
		record_value[record_count][record_time] = input_record_data[record_count];
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	4413      	add	r3, r2
 80075c0:	4a13      	ldr	r2, [pc, #76]	; (8007610 <record_data+0x70>)
 80075c2:	6810      	ldr	r0, [r2, #0]
 80075c4:	6819      	ldr	r1, [r3, #0]
 80075c6:	4c13      	ldr	r4, [pc, #76]	; (8007614 <record_data+0x74>)
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	4613      	mov	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	4403      	add	r3, r0
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4423      	add	r3, r4
 80075d8:	6019      	str	r1, [r3, #0]
		for (int record_count = 0; record_count < numlen; record_count++) {
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3301      	adds	r3, #1
 80075de:	60fb      	str	r3, [r7, #12]
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	dbe7      	blt.n	80075b8 <record_data+0x18>
		}


		record_time++;
 80075e8:	4b09      	ldr	r3, [pc, #36]	; (8007610 <record_data+0x70>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3301      	adds	r3, #1
 80075ee:	4a08      	ldr	r2, [pc, #32]	; (8007610 <record_data+0x70>)
 80075f0:	6013      	str	r3, [r2, #0]
		if (record_time >= max_record_time) {
 80075f2:	4b07      	ldr	r3, [pc, #28]	; (8007610 <record_data+0x70>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b09      	cmp	r3, #9
 80075f8:	dd02      	ble.n	8007600 <record_data+0x60>
					record_mode = 0;
 80075fa:	4b04      	ldr	r3, [pc, #16]	; (800760c <record_data+0x6c>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	701a      	strb	r2, [r3, #0]
				}
	}
}
 8007600:	bf00      	nop
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bc90      	pop	{r4, r7}
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	20001278 	.word	0x20001278
 8007610:	2000127c 	.word	0x2000127c
 8007614:	200011d8 	.word	0x200011d8

08007618 <record_print>:

void record_print(void) {
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
	int a;
	for (a = 0; a <= record_time; a++) {
 800761e:	2300      	movs	r3, #0
 8007620:	607b      	str	r3, [r7, #4]
 8007622:	e025      	b.n	8007670 <record_print+0x58>
		printf("%d", a);
 8007624:	6879      	ldr	r1, [r7, #4]
 8007626:	4817      	ldr	r0, [pc, #92]	; (8007684 <record_print+0x6c>)
 8007628:	f007 fa86 	bl	800eb38 <iprintf>
		for (int record_count = 0; record_count < max_record_num; record_count++) {
 800762c:	2300      	movs	r3, #0
 800762e:	603b      	str	r3, [r7, #0]
 8007630:	e015      	b.n	800765e <record_print+0x46>
		printf(",%f", record_value[record_count][a]);
 8007632:	4915      	ldr	r1, [pc, #84]	; (8007688 <record_print+0x70>)
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	4613      	mov	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	005b      	lsls	r3, r3, #1
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	4413      	add	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	440b      	add	r3, r1
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4618      	mov	r0, r3
 800764a:	f7f8 ff7d 	bl	8000548 <__aeabi_f2d>
 800764e:	4602      	mov	r2, r0
 8007650:	460b      	mov	r3, r1
 8007652:	480e      	ldr	r0, [pc, #56]	; (800768c <record_print+0x74>)
 8007654:	f007 fa70 	bl	800eb38 <iprintf>
		for (int record_count = 0; record_count < max_record_num; record_count++) {
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	3301      	adds	r3, #1
 800765c:	603b      	str	r3, [r7, #0]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	2b03      	cmp	r3, #3
 8007662:	dde6      	ble.n	8007632 <record_print+0x1a>
		}
		printf("\n");
 8007664:	200a      	movs	r0, #10
 8007666:	f007 fa7f 	bl	800eb68 <putchar>
	for (a = 0; a <= record_time; a++) {
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3301      	adds	r3, #1
 800766e:	607b      	str	r3, [r7, #4]
 8007670:	4b07      	ldr	r3, [pc, #28]	; (8007690 <record_print+0x78>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	429a      	cmp	r2, r3
 8007678:	ddd4      	ble.n	8007624 <record_print+0xc>
	}
}
 800767a:	bf00      	nop
 800767c:	bf00      	nop
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	0801154c 	.word	0x0801154c
 8007688:	200011d8 	.word	0x200011d8
 800768c:	08011550 	.word	0x08011550
 8007690:	2000127c 	.word	0x2000127c

08007694 <interrupt_record>:

void interrupt_record(void){
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0

	float r_data[max_record_num]={(float)(g_sensor[0][0]),(float)(g_sensor[1][0]),(float)(g_sensor[2][0]),(float)(g_sensor[3][0])};
 800769a:	4b15      	ldr	r3, [pc, #84]	; (80076f0 <interrupt_record+0x5c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	ee07 3a90 	vmov	s15, r3
 80076a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076a6:	edc7 7a00 	vstr	s15, [r7]
 80076aa:	4b11      	ldr	r3, [pc, #68]	; (80076f0 <interrupt_record+0x5c>)
 80076ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ae:	ee07 3a90 	vmov	s15, r3
 80076b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076b6:	edc7 7a01 	vstr	s15, [r7, #4]
 80076ba:	4b0d      	ldr	r3, [pc, #52]	; (80076f0 <interrupt_record+0x5c>)
 80076bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80076c0:	ee07 3a90 	vmov	s15, r3
 80076c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076c8:	edc7 7a02 	vstr	s15, [r7, #8]
 80076cc:	4b08      	ldr	r3, [pc, #32]	; (80076f0 <interrupt_record+0x5c>)
 80076ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076d2:	ee07 3a90 	vmov	s15, r3
 80076d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076da:	edc7 7a03 	vstr	s15, [r7, #12]
	//	float r_data[max_record_num]={g_TargetStraight.velocity};
	record_data(r_data, max_record_num);
 80076de:	463b      	mov	r3, r7
 80076e0:	2104      	movs	r1, #4
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7ff ff5c 	bl	80075a0 <record_data>



}
 80076e8:	bf00      	nop
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	2000023c 	.word	0x2000023c

080076f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076fa:	4b0f      	ldr	r3, [pc, #60]	; (8007738 <HAL_MspInit+0x44>)
 80076fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076fe:	4a0e      	ldr	r2, [pc, #56]	; (8007738 <HAL_MspInit+0x44>)
 8007700:	f043 0301 	orr.w	r3, r3, #1
 8007704:	6613      	str	r3, [r2, #96]	; 0x60
 8007706:	4b0c      	ldr	r3, [pc, #48]	; (8007738 <HAL_MspInit+0x44>)
 8007708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800770a:	f003 0301 	and.w	r3, r3, #1
 800770e:	607b      	str	r3, [r7, #4]
 8007710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007712:	4b09      	ldr	r3, [pc, #36]	; (8007738 <HAL_MspInit+0x44>)
 8007714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007716:	4a08      	ldr	r2, [pc, #32]	; (8007738 <HAL_MspInit+0x44>)
 8007718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800771c:	6593      	str	r3, [r2, #88]	; 0x58
 800771e:	4b06      	ldr	r3, [pc, #24]	; (8007738 <HAL_MspInit+0x44>)
 8007720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007726:	603b      	str	r3, [r7, #0]
 8007728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800772a:	bf00      	nop
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	40021000 	.word	0x40021000

0800773c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800773c:	b480      	push	{r7}
 800773e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007740:	e7fe      	b.n	8007740 <NMI_Handler+0x4>

08007742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007742:	b480      	push	{r7}
 8007744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007746:	e7fe      	b.n	8007746 <HardFault_Handler+0x4>

08007748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800774c:	e7fe      	b.n	800774c <MemManage_Handler+0x4>

0800774e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800774e:	b480      	push	{r7}
 8007750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007752:	e7fe      	b.n	8007752 <BusFault_Handler+0x4>

08007754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007754:	b480      	push	{r7}
 8007756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007758:	e7fe      	b.n	8007758 <UsageFault_Handler+0x4>

0800775a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800775a:	b480      	push	{r7}
 800775c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800775e:	bf00      	nop
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007768:	b480      	push	{r7}
 800776a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800776c:	bf00      	nop
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007776:	b480      	push	{r7}
 8007778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800777a:	bf00      	nop
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007788:	f001 fa34 	bl	8008bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800778c:	bf00      	nop
 800778e:	bd80      	pop	{r7, pc}

08007790 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007794:	4802      	ldr	r0, [pc, #8]	; (80077a0 <DMA1_Channel1_IRQHandler+0x10>)
 8007796:	f003 f855 	bl	800a844 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800779a:	bf00      	nop
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	200009bc 	.word	0x200009bc

080077a4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	  pl_interrupt_motor_count_L();
 80077a8:	f7fa ffd8 	bl	800275c <pl_interrupt_motor_count_L>
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80077ac:	4802      	ldr	r0, [pc, #8]	; (80077b8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80077ae:	f005 fa3b 	bl	800cc28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80077b2:	bf00      	nop
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	20001284 	.word	0x20001284

080077bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	  pl_interrupt_motor_count_R();
 80077c0:	f7fa fff8 	bl	80027b4 <pl_interrupt_motor_count_R>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80077c4:	4802      	ldr	r0, [pc, #8]	; (80077d0 <TIM2_IRQHandler+0x14>)
 80077c6:	f005 fa2f 	bl	800cc28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80077ca:	bf00      	nop
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	200012d0 	.word	0x200012d0

080077d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80077d8:	4807      	ldr	r0, [pc, #28]	; (80077f8 <TIM6_DAC_IRQHandler+0x24>)
 80077da:	f005 fa25 	bl	800cc28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  pl_timer_count();
 80077de:	f7fc f985 	bl	8003aec <pl_timer_count>
  pl_interupt_getSensor();
 80077e2:	f7fb f99b 	bl	8002b1c <pl_interupt_getSensor>
  interrupt_calSensor();
 80077e6:	f7fa fc77 	bl	80020d8 <interrupt_calSensor>
  interrupt_Motor();
 80077ea:	f7f9 fc7d 	bl	80010e8 <interrupt_Motor>
  interrupt_record();
 80077ee:	f7ff ff51 	bl	8007694 <interrupt_record>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80077f2:	bf00      	nop
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	2000131c 	.word	0x2000131c

080077fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80077fc:	b480      	push	{r7}
 80077fe:	af00      	add	r7, sp, #0
	return 1;
 8007800:	2301      	movs	r3, #1
}
 8007802:	4618      	mov	r0, r3
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <_kill>:

int _kill(int pid, int sig)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007816:	f006 fce5 	bl	800e1e4 <__errno>
 800781a:	4603      	mov	r3, r0
 800781c:	2216      	movs	r2, #22
 800781e:	601a      	str	r2, [r3, #0]
	return -1;
 8007820:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007824:	4618      	mov	r0, r3
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <_exit>:

void _exit (int status)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007834:	f04f 31ff 	mov.w	r1, #4294967295
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7ff ffe7 	bl	800780c <_kill>
	while (1) {}		/* Make sure we hang here */
 800783e:	e7fe      	b.n	800783e <_exit+0x12>

08007840 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800784c:	2300      	movs	r3, #0
 800784e:	617b      	str	r3, [r7, #20]
 8007850:	e00a      	b.n	8007868 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007852:	f3af 8000 	nop.w
 8007856:	4601      	mov	r1, r0
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	60ba      	str	r2, [r7, #8]
 800785e:	b2ca      	uxtb	r2, r1
 8007860:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	3301      	adds	r3, #1
 8007866:	617b      	str	r3, [r7, #20]
 8007868:	697a      	ldr	r2, [r7, #20]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	429a      	cmp	r2, r3
 800786e:	dbf0      	blt.n	8007852 <_read+0x12>
	}

return len;
 8007870:	687b      	ldr	r3, [r7, #4]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3718      	adds	r7, #24
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
	...

0800787c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007888:	2300      	movs	r3, #0
 800788a:	617b      	str	r3, [r7, #20]
 800788c:	e00a      	b.n	80078a4 <_write+0x28>
	{
		HAL_UART_Transmit(&huart2, ptr++, 1, 1);
 800788e:	68b9      	ldr	r1, [r7, #8]
 8007890:	1c4b      	adds	r3, r1, #1
 8007892:	60bb      	str	r3, [r7, #8]
 8007894:	2301      	movs	r3, #1
 8007896:	2201      	movs	r2, #1
 8007898:	4807      	ldr	r0, [pc, #28]	; (80078b8 <_write+0x3c>)
 800789a:	f006 f879 	bl	800d990 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	3301      	adds	r3, #1
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	697a      	ldr	r2, [r7, #20]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	dbf0      	blt.n	800788e <_write+0x12>
	}
	return len;
 80078ac:	687b      	ldr	r3, [r7, #4]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3718      	adds	r7, #24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	200013b4 	.word	0x200013b4

080078bc <_close>:

int _close(int file)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
	return -1;
 80078c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80078e4:	605a      	str	r2, [r3, #4]
	return 0;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <_isatty>:

int _isatty(int file)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
	return 1;
 80078fc:	2301      	movs	r3, #1
}
 80078fe:	4618      	mov	r0, r3
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800790a:	b480      	push	{r7}
 800790c:	b085      	sub	sp, #20
 800790e:	af00      	add	r7, sp, #0
 8007910:	60f8      	str	r0, [r7, #12]
 8007912:	60b9      	str	r1, [r7, #8]
 8007914:	607a      	str	r2, [r7, #4]
	return 0;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3714      	adds	r7, #20
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b086      	sub	sp, #24
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800792c:	4a14      	ldr	r2, [pc, #80]	; (8007980 <_sbrk+0x5c>)
 800792e:	4b15      	ldr	r3, [pc, #84]	; (8007984 <_sbrk+0x60>)
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007938:	4b13      	ldr	r3, [pc, #76]	; (8007988 <_sbrk+0x64>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d102      	bne.n	8007946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007940:	4b11      	ldr	r3, [pc, #68]	; (8007988 <_sbrk+0x64>)
 8007942:	4a12      	ldr	r2, [pc, #72]	; (800798c <_sbrk+0x68>)
 8007944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007946:	4b10      	ldr	r3, [pc, #64]	; (8007988 <_sbrk+0x64>)
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4413      	add	r3, r2
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	429a      	cmp	r2, r3
 8007952:	d207      	bcs.n	8007964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007954:	f006 fc46 	bl	800e1e4 <__errno>
 8007958:	4603      	mov	r3, r0
 800795a:	220c      	movs	r2, #12
 800795c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800795e:	f04f 33ff 	mov.w	r3, #4294967295
 8007962:	e009      	b.n	8007978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007964:	4b08      	ldr	r3, [pc, #32]	; (8007988 <_sbrk+0x64>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800796a:	4b07      	ldr	r3, [pc, #28]	; (8007988 <_sbrk+0x64>)
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4413      	add	r3, r2
 8007972:	4a05      	ldr	r2, [pc, #20]	; (8007988 <_sbrk+0x64>)
 8007974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007976:	68fb      	ldr	r3, [r7, #12]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3718      	adds	r7, #24
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	20010000 	.word	0x20010000
 8007984:	00000400 	.word	0x00000400
 8007988:	20001280 	.word	0x20001280
 800798c:	20001450 	.word	0x20001450

08007990 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8007990:	b480      	push	{r7}
 8007992:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8007994:	4b06      	ldr	r3, [pc, #24]	; (80079b0 <SystemInit+0x20>)
 8007996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800799a:	4a05      	ldr	r2, [pc, #20]	; (80079b0 <SystemInit+0x20>)
 800799c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80079a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80079a4:	bf00      	nop
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	e000ed00 	.word	0xe000ed00

080079b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b096      	sub	sp, #88	; 0x58
 80079b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80079ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80079be:	2200      	movs	r2, #0
 80079c0:	601a      	str	r2, [r3, #0]
 80079c2:	605a      	str	r2, [r3, #4]
 80079c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80079c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80079ca:	2200      	movs	r2, #0
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	605a      	str	r2, [r3, #4]
 80079d0:	609a      	str	r2, [r3, #8]
 80079d2:	60da      	str	r2, [r3, #12]
 80079d4:	611a      	str	r2, [r3, #16]
 80079d6:	615a      	str	r2, [r3, #20]
 80079d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80079da:	1d3b      	adds	r3, r7, #4
 80079dc:	222c      	movs	r2, #44	; 0x2c
 80079de:	2100      	movs	r1, #0
 80079e0:	4618      	mov	r0, r3
 80079e2:	f006 fc37 	bl	800e254 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80079e6:	4b39      	ldr	r3, [pc, #228]	; (8007acc <MX_TIM1_Init+0x118>)
 80079e8:	4a39      	ldr	r2, [pc, #228]	; (8007ad0 <MX_TIM1_Init+0x11c>)
 80079ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 80079ec:	4b37      	ldr	r3, [pc, #220]	; (8007acc <MX_TIM1_Init+0x118>)
 80079ee:	2207      	movs	r2, #7
 80079f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80079f2:	4b36      	ldr	r3, [pc, #216]	; (8007acc <MX_TIM1_Init+0x118>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80079f8:	4b34      	ldr	r3, [pc, #208]	; (8007acc <MX_TIM1_Init+0x118>)
 80079fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80079fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a00:	4b32      	ldr	r3, [pc, #200]	; (8007acc <MX_TIM1_Init+0x118>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007a06:	4b31      	ldr	r3, [pc, #196]	; (8007acc <MX_TIM1_Init+0x118>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a0c:	4b2f      	ldr	r3, [pc, #188]	; (8007acc <MX_TIM1_Init+0x118>)
 8007a0e:	2200      	movs	r2, #0
 8007a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007a12:	482e      	ldr	r0, [pc, #184]	; (8007acc <MX_TIM1_Init+0x118>)
 8007a14:	f004 ff4a 	bl	800c8ac <HAL_TIM_PWM_Init>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8007a1e:	f7fc fbfa 	bl	8004216 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007a22:	2300      	movs	r3, #0
 8007a24:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007a26:	2300      	movs	r3, #0
 8007a28:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007a2e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007a32:	4619      	mov	r1, r3
 8007a34:	4825      	ldr	r0, [pc, #148]	; (8007acc <MX_TIM1_Init+0x118>)
 8007a36:	f005 fe61 	bl	800d6fc <HAL_TIMEx_MasterConfigSynchronization>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8007a40:	f7fc fbe9 	bl	8004216 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007a44:	2360      	movs	r3, #96	; 0x60
 8007a46:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 5000-1;
 8007a48:	f241 3387 	movw	r3, #4999	; 0x1387
 8007a4c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007a52:	2300      	movs	r3, #0
 8007a54:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007a56:	2300      	movs	r3, #0
 8007a58:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007a62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a66:	2200      	movs	r2, #0
 8007a68:	4619      	mov	r1, r3
 8007a6a:	4818      	ldr	r0, [pc, #96]	; (8007acc <MX_TIM1_Init+0x118>)
 8007a6c:	f005 f9fc 	bl	800ce68 <HAL_TIM_PWM_ConfigChannel>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8007a76:	f7fc fbce 	bl	8004216 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007a82:	2300      	movs	r3, #0
 8007a84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007a86:	2300      	movs	r3, #0
 8007a88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007a8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8007a94:	2300      	movs	r3, #0
 8007a96:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8007a9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007aa0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007aaa:	1d3b      	adds	r3, r7, #4
 8007aac:	4619      	mov	r1, r3
 8007aae:	4807      	ldr	r0, [pc, #28]	; (8007acc <MX_TIM1_Init+0x118>)
 8007ab0:	f005 fe8a 	bl	800d7c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8007aba:	f7fc fbac 	bl	8004216 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8007abe:	4803      	ldr	r0, [pc, #12]	; (8007acc <MX_TIM1_Init+0x118>)
 8007ac0:	f000 f998 	bl	8007df4 <HAL_TIM_MspPostInit>

}
 8007ac4:	bf00      	nop
 8007ac6:	3758      	adds	r7, #88	; 0x58
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	20001284 	.word	0x20001284
 8007ad0:	40012c00 	.word	0x40012c00

08007ad4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b08a      	sub	sp, #40	; 0x28
 8007ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ada:	f107 031c 	add.w	r3, r7, #28
 8007ade:	2200      	movs	r2, #0
 8007ae0:	601a      	str	r2, [r3, #0]
 8007ae2:	605a      	str	r2, [r3, #4]
 8007ae4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007ae6:	463b      	mov	r3, r7
 8007ae8:	2200      	movs	r2, #0
 8007aea:	601a      	str	r2, [r3, #0]
 8007aec:	605a      	str	r2, [r3, #4]
 8007aee:	609a      	str	r2, [r3, #8]
 8007af0:	60da      	str	r2, [r3, #12]
 8007af2:	611a      	str	r2, [r3, #16]
 8007af4:	615a      	str	r2, [r3, #20]
 8007af6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007af8:	4b22      	ldr	r3, [pc, #136]	; (8007b84 <MX_TIM2_Init+0xb0>)
 8007afa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007afe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8007b00:	4b20      	ldr	r3, [pc, #128]	; (8007b84 <MX_TIM2_Init+0xb0>)
 8007b02:	2207      	movs	r2, #7
 8007b04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b06:	4b1f      	ldr	r3, [pc, #124]	; (8007b84 <MX_TIM2_Init+0xb0>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8007b0c:	4b1d      	ldr	r3, [pc, #116]	; (8007b84 <MX_TIM2_Init+0xb0>)
 8007b0e:	f242 720f 	movw	r2, #9999	; 0x270f
 8007b12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b14:	4b1b      	ldr	r3, [pc, #108]	; (8007b84 <MX_TIM2_Init+0xb0>)
 8007b16:	2200      	movs	r2, #0
 8007b18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007b1a:	4b1a      	ldr	r3, [pc, #104]	; (8007b84 <MX_TIM2_Init+0xb0>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8007b20:	4818      	ldr	r0, [pc, #96]	; (8007b84 <MX_TIM2_Init+0xb0>)
 8007b22:	f004 fec3 	bl	800c8ac <HAL_TIM_PWM_Init>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d001      	beq.n	8007b30 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8007b2c:	f7fc fb73 	bl	8004216 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007b30:	2300      	movs	r3, #0
 8007b32:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007b34:	2300      	movs	r3, #0
 8007b36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007b38:	f107 031c 	add.w	r3, r7, #28
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	4811      	ldr	r0, [pc, #68]	; (8007b84 <MX_TIM2_Init+0xb0>)
 8007b40:	f005 fddc 	bl	800d6fc <HAL_TIMEx_MasterConfigSynchronization>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8007b4a:	f7fc fb64 	bl	8004216 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007b4e:	2360      	movs	r3, #96	; 0x60
 8007b50:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000-1;
 8007b52:	f241 3387 	movw	r3, #4999	; 0x1387
 8007b56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007b60:	463b      	mov	r3, r7
 8007b62:	2204      	movs	r2, #4
 8007b64:	4619      	mov	r1, r3
 8007b66:	4807      	ldr	r0, [pc, #28]	; (8007b84 <MX_TIM2_Init+0xb0>)
 8007b68:	f005 f97e 	bl	800ce68 <HAL_TIM_PWM_ConfigChannel>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8007b72:	f7fc fb50 	bl	8004216 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8007b76:	4803      	ldr	r0, [pc, #12]	; (8007b84 <MX_TIM2_Init+0xb0>)
 8007b78:	f000 f93c 	bl	8007df4 <HAL_TIM_MspPostInit>

}
 8007b7c:	bf00      	nop
 8007b7e:	3728      	adds	r7, #40	; 0x28
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	200012d0 	.word	0x200012d0

08007b88 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007b8e:	1d3b      	adds	r3, r7, #4
 8007b90:	2200      	movs	r2, #0
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	605a      	str	r2, [r3, #4]
 8007b96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8007b98:	4b14      	ldr	r3, [pc, #80]	; (8007bec <MX_TIM6_Init+0x64>)
 8007b9a:	4a15      	ldr	r2, [pc, #84]	; (8007bf0 <MX_TIM6_Init+0x68>)
 8007b9c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 8007b9e:	4b13      	ldr	r3, [pc, #76]	; (8007bec <MX_TIM6_Init+0x64>)
 8007ba0:	224f      	movs	r2, #79	; 0x4f
 8007ba2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ba4:	4b11      	ldr	r3, [pc, #68]	; (8007bec <MX_TIM6_Init+0x64>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8007baa:	4b10      	ldr	r3, [pc, #64]	; (8007bec <MX_TIM6_Init+0x64>)
 8007bac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007bb0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007bb2:	4b0e      	ldr	r3, [pc, #56]	; (8007bec <MX_TIM6_Init+0x64>)
 8007bb4:	2280      	movs	r2, #128	; 0x80
 8007bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8007bb8:	480c      	ldr	r0, [pc, #48]	; (8007bec <MX_TIM6_Init+0x64>)
 8007bba:	f004 fdcb 	bl	800c754 <HAL_TIM_Base_Init>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8007bc4:	f7fc fb27 	bl	8004216 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8007bd0:	1d3b      	adds	r3, r7, #4
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	4805      	ldr	r0, [pc, #20]	; (8007bec <MX_TIM6_Init+0x64>)
 8007bd6:	f005 fd91 	bl	800d6fc <HAL_TIMEx_MasterConfigSynchronization>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8007be0:	f7fc fb19 	bl	8004216 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8007be4:	bf00      	nop
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	2000131c 	.word	0x2000131c
 8007bf0:	40001000 	.word	0x40001000

08007bf4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b096      	sub	sp, #88	; 0x58
 8007bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007bfa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007bfe:	2200      	movs	r2, #0
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	605a      	str	r2, [r3, #4]
 8007c04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007c06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	605a      	str	r2, [r3, #4]
 8007c10:	609a      	str	r2, [r3, #8]
 8007c12:	60da      	str	r2, [r3, #12]
 8007c14:	611a      	str	r2, [r3, #16]
 8007c16:	615a      	str	r2, [r3, #20]
 8007c18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007c1a:	1d3b      	adds	r3, r7, #4
 8007c1c:	222c      	movs	r2, #44	; 0x2c
 8007c1e:	2100      	movs	r1, #0
 8007c20:	4618      	mov	r0, r3
 8007c22:	f006 fb17 	bl	800e254 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8007c26:	4b34      	ldr	r3, [pc, #208]	; (8007cf8 <MX_TIM15_Init+0x104>)
 8007c28:	4a34      	ldr	r2, [pc, #208]	; (8007cfc <MX_TIM15_Init+0x108>)
 8007c2a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 8007c2c:	4b32      	ldr	r3, [pc, #200]	; (8007cf8 <MX_TIM15_Init+0x104>)
 8007c2e:	224f      	movs	r2, #79	; 0x4f
 8007c30:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c32:	4b31      	ldr	r3, [pc, #196]	; (8007cf8 <MX_TIM15_Init+0x104>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 5000-1;
 8007c38:	4b2f      	ldr	r3, [pc, #188]	; (8007cf8 <MX_TIM15_Init+0x104>)
 8007c3a:	f241 3287 	movw	r2, #4999	; 0x1387
 8007c3e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007c40:	4b2d      	ldr	r3, [pc, #180]	; (8007cf8 <MX_TIM15_Init+0x104>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8007c46:	4b2c      	ldr	r3, [pc, #176]	; (8007cf8 <MX_TIM15_Init+0x104>)
 8007c48:	2200      	movs	r2, #0
 8007c4a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007c4c:	4b2a      	ldr	r3, [pc, #168]	; (8007cf8 <MX_TIM15_Init+0x104>)
 8007c4e:	2200      	movs	r2, #0
 8007c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8007c52:	4829      	ldr	r0, [pc, #164]	; (8007cf8 <MX_TIM15_Init+0x104>)
 8007c54:	f004 fe2a 	bl	800c8ac <HAL_TIM_PWM_Init>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8007c5e:	f7fc fada 	bl	8004216 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007c62:	2300      	movs	r3, #0
 8007c64:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007c66:	2300      	movs	r3, #0
 8007c68:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8007c6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007c6e:	4619      	mov	r1, r3
 8007c70:	4821      	ldr	r0, [pc, #132]	; (8007cf8 <MX_TIM15_Init+0x104>)
 8007c72:	f005 fd43 	bl	800d6fc <HAL_TIMEx_MasterConfigSynchronization>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8007c7c:	f7fc facb 	bl	8004216 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007c80:	2360      	movs	r3, #96	; 0x60
 8007c82:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 2500-1;
 8007c84:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8007c88:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007c92:	2300      	movs	r3, #0
 8007c94:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007c96:	2300      	movs	r3, #0
 8007c98:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007c9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ca2:	2204      	movs	r2, #4
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	4814      	ldr	r0, [pc, #80]	; (8007cf8 <MX_TIM15_Init+0x104>)
 8007ca8:	f005 f8de 	bl	800ce68 <HAL_TIM_PWM_ConfigChannel>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 8007cb2:	f7fc fab0 	bl	8004216 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007cca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007cce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8007cd4:	1d3b      	adds	r3, r7, #4
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	4807      	ldr	r0, [pc, #28]	; (8007cf8 <MX_TIM15_Init+0x104>)
 8007cda:	f005 fd75 	bl	800d7c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <MX_TIM15_Init+0xf4>
  {
    Error_Handler();
 8007ce4:	f7fc fa97 	bl	8004216 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8007ce8:	4803      	ldr	r0, [pc, #12]	; (8007cf8 <MX_TIM15_Init+0x104>)
 8007cea:	f000 f883 	bl	8007df4 <HAL_TIM_MspPostInit>

}
 8007cee:	bf00      	nop
 8007cf0:	3758      	adds	r7, #88	; 0x58
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20001368 	.word	0x20001368
 8007cfc:	40014000 	.word	0x40014000

08007d00 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a23      	ldr	r2, [pc, #140]	; (8007d9c <HAL_TIM_PWM_MspInit+0x9c>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d114      	bne.n	8007d3c <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007d12:	4b23      	ldr	r3, [pc, #140]	; (8007da0 <HAL_TIM_PWM_MspInit+0xa0>)
 8007d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d16:	4a22      	ldr	r2, [pc, #136]	; (8007da0 <HAL_TIM_PWM_MspInit+0xa0>)
 8007d18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007d1c:	6613      	str	r3, [r2, #96]	; 0x60
 8007d1e:	4b20      	ldr	r3, [pc, #128]	; (8007da0 <HAL_TIM_PWM_MspInit+0xa0>)
 8007d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d26:	617b      	str	r3, [r7, #20]
 8007d28:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	2019      	movs	r0, #25
 8007d30:	f002 fbfb 	bl	800a52a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8007d34:	2019      	movs	r0, #25
 8007d36:	f002 fc14 	bl	800a562 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8007d3a:	e02a      	b.n	8007d92 <HAL_TIM_PWM_MspInit+0x92>
  else if(tim_pwmHandle->Instance==TIM2)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d44:	d114      	bne.n	8007d70 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007d46:	4b16      	ldr	r3, [pc, #88]	; (8007da0 <HAL_TIM_PWM_MspInit+0xa0>)
 8007d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d4a:	4a15      	ldr	r2, [pc, #84]	; (8007da0 <HAL_TIM_PWM_MspInit+0xa0>)
 8007d4c:	f043 0301 	orr.w	r3, r3, #1
 8007d50:	6593      	str	r3, [r2, #88]	; 0x58
 8007d52:	4b13      	ldr	r3, [pc, #76]	; (8007da0 <HAL_TIM_PWM_MspInit+0xa0>)
 8007d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	613b      	str	r3, [r7, #16]
 8007d5c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007d5e:	2200      	movs	r2, #0
 8007d60:	2100      	movs	r1, #0
 8007d62:	201c      	movs	r0, #28
 8007d64:	f002 fbe1 	bl	800a52a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007d68:	201c      	movs	r0, #28
 8007d6a:	f002 fbfa 	bl	800a562 <HAL_NVIC_EnableIRQ>
}
 8007d6e:	e010      	b.n	8007d92 <HAL_TIM_PWM_MspInit+0x92>
  else if(tim_pwmHandle->Instance==TIM15)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a0b      	ldr	r2, [pc, #44]	; (8007da4 <HAL_TIM_PWM_MspInit+0xa4>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d10b      	bne.n	8007d92 <HAL_TIM_PWM_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8007d7a:	4b09      	ldr	r3, [pc, #36]	; (8007da0 <HAL_TIM_PWM_MspInit+0xa0>)
 8007d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d7e:	4a08      	ldr	r2, [pc, #32]	; (8007da0 <HAL_TIM_PWM_MspInit+0xa0>)
 8007d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d84:	6613      	str	r3, [r2, #96]	; 0x60
 8007d86:	4b06      	ldr	r3, [pc, #24]	; (8007da0 <HAL_TIM_PWM_MspInit+0xa0>)
 8007d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d8e:	60fb      	str	r3, [r7, #12]
 8007d90:	68fb      	ldr	r3, [r7, #12]
}
 8007d92:	bf00      	nop
 8007d94:	3718      	adds	r7, #24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	40012c00 	.word	0x40012c00
 8007da0:	40021000 	.word	0x40021000
 8007da4:	40014000 	.word	0x40014000

08007da8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a0d      	ldr	r2, [pc, #52]	; (8007dec <HAL_TIM_Base_MspInit+0x44>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d113      	bne.n	8007de2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007dba:	4b0d      	ldr	r3, [pc, #52]	; (8007df0 <HAL_TIM_Base_MspInit+0x48>)
 8007dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dbe:	4a0c      	ldr	r2, [pc, #48]	; (8007df0 <HAL_TIM_Base_MspInit+0x48>)
 8007dc0:	f043 0310 	orr.w	r3, r3, #16
 8007dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8007dc6:	4b0a      	ldr	r3, [pc, #40]	; (8007df0 <HAL_TIM_Base_MspInit+0x48>)
 8007dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dca:	f003 0310 	and.w	r3, r3, #16
 8007dce:	60fb      	str	r3, [r7, #12]
 8007dd0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 4, 0);
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	2104      	movs	r1, #4
 8007dd6:	2036      	movs	r0, #54	; 0x36
 8007dd8:	f002 fba7 	bl	800a52a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007ddc:	2036      	movs	r0, #54	; 0x36
 8007dde:	f002 fbc0 	bl	800a562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8007de2:	bf00      	nop
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	40001000 	.word	0x40001000
 8007df0:	40021000 	.word	0x40021000

08007df4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08a      	sub	sp, #40	; 0x28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dfc:	f107 0314 	add.w	r3, r7, #20
 8007e00:	2200      	movs	r2, #0
 8007e02:	601a      	str	r2, [r3, #0]
 8007e04:	605a      	str	r2, [r3, #4]
 8007e06:	609a      	str	r2, [r3, #8]
 8007e08:	60da      	str	r2, [r3, #12]
 8007e0a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a35      	ldr	r2, [pc, #212]	; (8007ee8 <HAL_TIM_MspPostInit+0xf4>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d11e      	bne.n	8007e54 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e16:	4b35      	ldr	r3, [pc, #212]	; (8007eec <HAL_TIM_MspPostInit+0xf8>)
 8007e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e1a:	4a34      	ldr	r2, [pc, #208]	; (8007eec <HAL_TIM_MspPostInit+0xf8>)
 8007e1c:	f043 0301 	orr.w	r3, r3, #1
 8007e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e22:	4b32      	ldr	r3, [pc, #200]	; (8007eec <HAL_TIM_MspPostInit+0xf8>)
 8007e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	613b      	str	r3, [r7, #16]
 8007e2c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_CLOCK_L_Pin;
 8007e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e34:	2302      	movs	r3, #2
 8007e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007e40:	2301      	movs	r3, #1
 8007e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_CLOCK_L_GPIO_Port, &GPIO_InitStruct);
 8007e44:	f107 0314 	add.w	r3, r7, #20
 8007e48:	4619      	mov	r1, r3
 8007e4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007e4e:	f002 fdd9 	bl	800aa04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8007e52:	e044      	b.n	8007ede <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM2)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e5c:	d11d      	bne.n	8007e9a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e5e:	4b23      	ldr	r3, [pc, #140]	; (8007eec <HAL_TIM_MspPostInit+0xf8>)
 8007e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e62:	4a22      	ldr	r2, [pc, #136]	; (8007eec <HAL_TIM_MspPostInit+0xf8>)
 8007e64:	f043 0301 	orr.w	r3, r3, #1
 8007e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e6a:	4b20      	ldr	r3, [pc, #128]	; (8007eec <HAL_TIM_MspPostInit+0xf8>)
 8007e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e6e:	f003 0301 	and.w	r3, r3, #1
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_CLOCK_R_Pin;
 8007e76:	2302      	movs	r3, #2
 8007e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e82:	2300      	movs	r3, #0
 8007e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007e86:	2301      	movs	r3, #1
 8007e88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_CLOCK_R_GPIO_Port, &GPIO_InitStruct);
 8007e8a:	f107 0314 	add.w	r3, r7, #20
 8007e8e:	4619      	mov	r1, r3
 8007e90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007e94:	f002 fdb6 	bl	800aa04 <HAL_GPIO_Init>
}
 8007e98:	e021      	b.n	8007ede <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM15)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a14      	ldr	r2, [pc, #80]	; (8007ef0 <HAL_TIM_MspPostInit+0xfc>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d11c      	bne.n	8007ede <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ea4:	4b11      	ldr	r3, [pc, #68]	; (8007eec <HAL_TIM_MspPostInit+0xf8>)
 8007ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ea8:	4a10      	ldr	r2, [pc, #64]	; (8007eec <HAL_TIM_MspPostInit+0xf8>)
 8007eaa:	f043 0301 	orr.w	r3, r3, #1
 8007eae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007eb0:	4b0e      	ldr	r3, [pc, #56]	; (8007eec <HAL_TIM_MspPostInit+0xf8>)
 8007eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	60bb      	str	r3, [r7, #8]
 8007eba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPEAKER_Pin;
 8007ebc:	2308      	movs	r3, #8
 8007ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8007ecc:	230e      	movs	r3, #14
 8007ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPEAKER_GPIO_Port, &GPIO_InitStruct);
 8007ed0:	f107 0314 	add.w	r3, r7, #20
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007eda:	f002 fd93 	bl	800aa04 <HAL_GPIO_Init>
}
 8007ede:	bf00      	nop
 8007ee0:	3728      	adds	r7, #40	; 0x28
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	40012c00 	.word	0x40012c00
 8007eec:	40021000 	.word	0x40021000
 8007ef0:	40014000 	.word	0x40014000

08007ef4 <input_parameter>:

#include "turning_parameter.h"
#include "maze_Turning.h"


void input_parameter(void){
 8007ef4:	b480      	push	{r7}
 8007ef6:	af00      	add	r7, sp, #0

speed500_exploration.slalom_R.g_speed=500;
 8007ef8:	4b97      	ldr	r3, [pc, #604]	; (8008158 <input_parameter+0x264>)
 8007efa:	4a98      	ldr	r2, [pc, #608]	; (800815c <input_parameter+0x268>)
 8007efc:	601a      	str	r2, [r3, #0]
speed500_exploration.slalom_R.t_speed=500;
 8007efe:	4b96      	ldr	r3, [pc, #600]	; (8008158 <input_parameter+0x264>)
 8007f00:	4a96      	ldr	r2, [pc, #600]	; (800815c <input_parameter+0x268>)
 8007f02:	60da      	str	r2, [r3, #12]
speed500_exploration.slalom_R.t_acc=9000;
 8007f04:	4b94      	ldr	r3, [pc, #592]	; (8008158 <input_parameter+0x264>)
 8007f06:	4a96      	ldr	r2, [pc, #600]	; (8008160 <input_parameter+0x26c>)
 8007f08:	611a      	str	r2, [r3, #16]
speed500_exploration.slalom_R.f_ofset=41;//55;
 8007f0a:	4b93      	ldr	r3, [pc, #588]	; (8008158 <input_parameter+0x264>)
 8007f0c:	4a95      	ldr	r2, [pc, #596]	; (8008164 <input_parameter+0x270>)
 8007f0e:	605a      	str	r2, [r3, #4]
speed500_exploration.slalom_R.e_ofset=25;
 8007f10:	4b91      	ldr	r3, [pc, #580]	; (8008158 <input_parameter+0x264>)
 8007f12:	4a95      	ldr	r2, [pc, #596]	; (8008168 <input_parameter+0x274>)
 8007f14:	609a      	str	r2, [r3, #8]

speed500_exploration.slalom_L.g_speed=500;
 8007f16:	4b90      	ldr	r3, [pc, #576]	; (8008158 <input_parameter+0x264>)
 8007f18:	4a90      	ldr	r2, [pc, #576]	; (800815c <input_parameter+0x268>)
 8007f1a:	615a      	str	r2, [r3, #20]
speed500_exploration.slalom_L.t_speed=500;
 8007f1c:	4b8e      	ldr	r3, [pc, #568]	; (8008158 <input_parameter+0x264>)
 8007f1e:	4a8f      	ldr	r2, [pc, #572]	; (800815c <input_parameter+0x268>)
 8007f20:	621a      	str	r2, [r3, #32]
speed500_exploration.slalom_L.t_acc=9000;
 8007f22:	4b8d      	ldr	r3, [pc, #564]	; (8008158 <input_parameter+0x264>)
 8007f24:	4a8e      	ldr	r2, [pc, #568]	; (8008160 <input_parameter+0x26c>)
 8007f26:	625a      	str	r2, [r3, #36]	; 0x24
speed500_exploration.slalom_L.f_ofset=40;//50;
 8007f28:	4b8b      	ldr	r3, [pc, #556]	; (8008158 <input_parameter+0x264>)
 8007f2a:	4a90      	ldr	r2, [pc, #576]	; (800816c <input_parameter+0x278>)
 8007f2c:	619a      	str	r2, [r3, #24]
speed500_exploration.slalom_L.e_ofset=29;
 8007f2e:	4b8a      	ldr	r3, [pc, #552]	; (8008158 <input_parameter+0x264>)
 8007f30:	4a8f      	ldr	r2, [pc, #572]	; (8008170 <input_parameter+0x27c>)
 8007f32:	61da      	str	r2, [r3, #28]


speed500_exploration.turn90_R.g_speed=1200;
 8007f34:	4b88      	ldr	r3, [pc, #544]	; (8008158 <input_parameter+0x264>)
 8007f36:	4a8f      	ldr	r2, [pc, #572]	; (8008174 <input_parameter+0x280>)
 8007f38:	629a      	str	r2, [r3, #40]	; 0x28
speed500_exploration.turn90_R.t_speed=650;
 8007f3a:	4b87      	ldr	r3, [pc, #540]	; (8008158 <input_parameter+0x264>)
 8007f3c:	4a8e      	ldr	r2, [pc, #568]	; (8008178 <input_parameter+0x284>)
 8007f3e:	635a      	str	r2, [r3, #52]	; 0x34
speed500_exploration.turn90_R.t_acc=10000;
 8007f40:	4b85      	ldr	r3, [pc, #532]	; (8008158 <input_parameter+0x264>)
 8007f42:	4a8e      	ldr	r2, [pc, #568]	; (800817c <input_parameter+0x288>)
 8007f44:	639a      	str	r2, [r3, #56]	; 0x38
speed500_exploration.turn90_R.f_ofset=45;
 8007f46:	4b84      	ldr	r3, [pc, #528]	; (8008158 <input_parameter+0x264>)
 8007f48:	4a8d      	ldr	r2, [pc, #564]	; (8008180 <input_parameter+0x28c>)
 8007f4a:	62da      	str	r2, [r3, #44]	; 0x2c
speed500_exploration.turn90_R.e_ofset=46;
 8007f4c:	4b82      	ldr	r3, [pc, #520]	; (8008158 <input_parameter+0x264>)
 8007f4e:	4a8d      	ldr	r2, [pc, #564]	; (8008184 <input_parameter+0x290>)
 8007f50:	631a      	str	r2, [r3, #48]	; 0x30

speed500_exploration.turn90_L.g_speed=1200;
 8007f52:	4b81      	ldr	r3, [pc, #516]	; (8008158 <input_parameter+0x264>)
 8007f54:	4a87      	ldr	r2, [pc, #540]	; (8008174 <input_parameter+0x280>)
 8007f56:	63da      	str	r2, [r3, #60]	; 0x3c
speed500_exploration.turn90_L.t_speed=650;
 8007f58:	4b7f      	ldr	r3, [pc, #508]	; (8008158 <input_parameter+0x264>)
 8007f5a:	4a87      	ldr	r2, [pc, #540]	; (8008178 <input_parameter+0x284>)
 8007f5c:	649a      	str	r2, [r3, #72]	; 0x48
speed500_exploration.turn90_L.t_acc=10000;
 8007f5e:	4b7e      	ldr	r3, [pc, #504]	; (8008158 <input_parameter+0x264>)
 8007f60:	4a86      	ldr	r2, [pc, #536]	; (800817c <input_parameter+0x288>)
 8007f62:	64da      	str	r2, [r3, #76]	; 0x4c
speed500_exploration.turn90_L.f_ofset=50;
 8007f64:	4b7c      	ldr	r3, [pc, #496]	; (8008158 <input_parameter+0x264>)
 8007f66:	4a88      	ldr	r2, [pc, #544]	; (8008188 <input_parameter+0x294>)
 8007f68:	641a      	str	r2, [r3, #64]	; 0x40
speed500_exploration.turn90_L.e_ofset=47;
 8007f6a:	4b7b      	ldr	r3, [pc, #492]	; (8008158 <input_parameter+0x264>)
 8007f6c:	4a87      	ldr	r2, [pc, #540]	; (800818c <input_parameter+0x298>)
 8007f6e:	645a      	str	r2, [r3, #68]	; 0x44

speed500_exploration.turn180_R.g_speed=1200;
 8007f70:	4b79      	ldr	r3, [pc, #484]	; (8008158 <input_parameter+0x264>)
 8007f72:	4a80      	ldr	r2, [pc, #512]	; (8008174 <input_parameter+0x280>)
 8007f74:	651a      	str	r2, [r3, #80]	; 0x50
speed500_exploration.turn180_R.t_speed=800;
 8007f76:	4b78      	ldr	r3, [pc, #480]	; (8008158 <input_parameter+0x264>)
 8007f78:	4a85      	ldr	r2, [pc, #532]	; (8008190 <input_parameter+0x29c>)
 8007f7a:	65da      	str	r2, [r3, #92]	; 0x5c
speed500_exploration.turn180_R.t_acc=8000;
 8007f7c:	4b76      	ldr	r3, [pc, #472]	; (8008158 <input_parameter+0x264>)
 8007f7e:	4a85      	ldr	r2, [pc, #532]	; (8008194 <input_parameter+0x2a0>)
 8007f80:	661a      	str	r2, [r3, #96]	; 0x60
speed500_exploration.turn180_R.f_ofset=20;
 8007f82:	4b75      	ldr	r3, [pc, #468]	; (8008158 <input_parameter+0x264>)
 8007f84:	4a84      	ldr	r2, [pc, #528]	; (8008198 <input_parameter+0x2a4>)
 8007f86:	655a      	str	r2, [r3, #84]	; 0x54
speed500_exploration.turn180_R.e_ofset=30;
 8007f88:	4b73      	ldr	r3, [pc, #460]	; (8008158 <input_parameter+0x264>)
 8007f8a:	4a84      	ldr	r2, [pc, #528]	; (800819c <input_parameter+0x2a8>)
 8007f8c:	659a      	str	r2, [r3, #88]	; 0x58

speed500_exploration.turn180_L.g_speed=1200;
 8007f8e:	4b72      	ldr	r3, [pc, #456]	; (8008158 <input_parameter+0x264>)
 8007f90:	4a78      	ldr	r2, [pc, #480]	; (8008174 <input_parameter+0x280>)
 8007f92:	665a      	str	r2, [r3, #100]	; 0x64
speed500_exploration.turn180_L.t_speed=780;
 8007f94:	4b70      	ldr	r3, [pc, #448]	; (8008158 <input_parameter+0x264>)
 8007f96:	4a82      	ldr	r2, [pc, #520]	; (80081a0 <input_parameter+0x2ac>)
 8007f98:	671a      	str	r2, [r3, #112]	; 0x70
speed500_exploration.turn180_L.t_acc=8000;
 8007f9a:	4b6f      	ldr	r3, [pc, #444]	; (8008158 <input_parameter+0x264>)
 8007f9c:	4a7d      	ldr	r2, [pc, #500]	; (8008194 <input_parameter+0x2a0>)
 8007f9e:	675a      	str	r2, [r3, #116]	; 0x74
speed500_exploration.turn180_L.f_ofset=20;
 8007fa0:	4b6d      	ldr	r3, [pc, #436]	; (8008158 <input_parameter+0x264>)
 8007fa2:	4a7d      	ldr	r2, [pc, #500]	; (8008198 <input_parameter+0x2a4>)
 8007fa4:	669a      	str	r2, [r3, #104]	; 0x68
speed500_exploration.turn180_L.e_ofset=40;
 8007fa6:	4b6c      	ldr	r3, [pc, #432]	; (8008158 <input_parameter+0x264>)
 8007fa8:	4a70      	ldr	r2, [pc, #448]	; (800816c <input_parameter+0x278>)
 8007faa:	66da      	str	r2, [r3, #108]	; 0x6c

speed500_exploration.turn45in_R.g_speed=1200;
 8007fac:	4b6a      	ldr	r3, [pc, #424]	; (8008158 <input_parameter+0x264>)
 8007fae:	4a71      	ldr	r2, [pc, #452]	; (8008174 <input_parameter+0x280>)
 8007fb0:	679a      	str	r2, [r3, #120]	; 0x78
speed500_exploration.turn45in_R.t_speed=900;
 8007fb2:	4b69      	ldr	r3, [pc, #420]	; (8008158 <input_parameter+0x264>)
 8007fb4:	4a7b      	ldr	r2, [pc, #492]	; (80081a4 <input_parameter+0x2b0>)
 8007fb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
speed500_exploration.turn45in_R.t_acc=13000;
 8007fba:	4b67      	ldr	r3, [pc, #412]	; (8008158 <input_parameter+0x264>)
 8007fbc:	4a7a      	ldr	r2, [pc, #488]	; (80081a8 <input_parameter+0x2b4>)
 8007fbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
speed500_exploration.turn45in_R.f_ofset=25;
 8007fc2:	4b65      	ldr	r3, [pc, #404]	; (8008158 <input_parameter+0x264>)
 8007fc4:	4a68      	ldr	r2, [pc, #416]	; (8008168 <input_parameter+0x274>)
 8007fc6:	67da      	str	r2, [r3, #124]	; 0x7c
speed500_exploration.turn45in_R.e_ofset=60;
 8007fc8:	4b63      	ldr	r3, [pc, #396]	; (8008158 <input_parameter+0x264>)
 8007fca:	4a78      	ldr	r2, [pc, #480]	; (80081ac <input_parameter+0x2b8>)
 8007fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

speed500_exploration.turn45in_L.g_speed=1200;
 8007fd0:	4b61      	ldr	r3, [pc, #388]	; (8008158 <input_parameter+0x264>)
 8007fd2:	4a68      	ldr	r2, [pc, #416]	; (8008174 <input_parameter+0x280>)
 8007fd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
speed500_exploration.turn45in_L.t_speed=900;
 8007fd8:	4b5f      	ldr	r3, [pc, #380]	; (8008158 <input_parameter+0x264>)
 8007fda:	4a72      	ldr	r2, [pc, #456]	; (80081a4 <input_parameter+0x2b0>)
 8007fdc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
speed500_exploration.turn45in_L.t_acc=13000;
 8007fe0:	4b5d      	ldr	r3, [pc, #372]	; (8008158 <input_parameter+0x264>)
 8007fe2:	4a71      	ldr	r2, [pc, #452]	; (80081a8 <input_parameter+0x2b4>)
 8007fe4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
speed500_exploration.turn45in_L.f_ofset=32;
 8007fe8:	4b5b      	ldr	r3, [pc, #364]	; (8008158 <input_parameter+0x264>)
 8007fea:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8007fee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
speed500_exploration.turn45in_L.e_ofset=60;
 8007ff2:	4b59      	ldr	r3, [pc, #356]	; (8008158 <input_parameter+0x264>)
 8007ff4:	4a6d      	ldr	r2, [pc, #436]	; (80081ac <input_parameter+0x2b8>)
 8007ff6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

speed500_exploration.turn135in_R.g_speed=1200;
 8007ffa:	4b57      	ldr	r3, [pc, #348]	; (8008158 <input_parameter+0x264>)
 8007ffc:	4a5d      	ldr	r2, [pc, #372]	; (8008174 <input_parameter+0x280>)
 8007ffe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
speed500_exploration.turn135in_R.t_speed=900;
 8008002:	4b55      	ldr	r3, [pc, #340]	; (8008158 <input_parameter+0x264>)
 8008004:	4a67      	ldr	r2, [pc, #412]	; (80081a4 <input_parameter+0x2b0>)
 8008006:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
speed500_exploration.turn135in_R.t_acc=12000;
 800800a:	4b53      	ldr	r3, [pc, #332]	; (8008158 <input_parameter+0x264>)
 800800c:	4a68      	ldr	r2, [pc, #416]	; (80081b0 <input_parameter+0x2bc>)
 800800e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
speed500_exploration.turn135in_R.f_ofset=53;
 8008012:	4b51      	ldr	r3, [pc, #324]	; (8008158 <input_parameter+0x264>)
 8008014:	4a67      	ldr	r2, [pc, #412]	; (80081b4 <input_parameter+0x2c0>)
 8008016:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
speed500_exploration.turn135in_R.e_ofset=47;
 800801a:	4b4f      	ldr	r3, [pc, #316]	; (8008158 <input_parameter+0x264>)
 800801c:	4a5b      	ldr	r2, [pc, #364]	; (800818c <input_parameter+0x298>)
 800801e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

speed500_exploration.turn135in_L.g_speed=1200;
 8008022:	4b4d      	ldr	r3, [pc, #308]	; (8008158 <input_parameter+0x264>)
 8008024:	4a53      	ldr	r2, [pc, #332]	; (8008174 <input_parameter+0x280>)
 8008026:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
speed500_exploration.turn135in_L.t_speed=900;
 800802a:	4b4b      	ldr	r3, [pc, #300]	; (8008158 <input_parameter+0x264>)
 800802c:	4a5d      	ldr	r2, [pc, #372]	; (80081a4 <input_parameter+0x2b0>)
 800802e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
speed500_exploration.turn135in_L.t_acc=12000;
 8008032:	4b49      	ldr	r3, [pc, #292]	; (8008158 <input_parameter+0x264>)
 8008034:	4a5e      	ldr	r2, [pc, #376]	; (80081b0 <input_parameter+0x2bc>)
 8008036:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
speed500_exploration.turn135in_L.f_ofset=40;
 800803a:	4b47      	ldr	r3, [pc, #284]	; (8008158 <input_parameter+0x264>)
 800803c:	4a4b      	ldr	r2, [pc, #300]	; (800816c <input_parameter+0x278>)
 800803e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
speed500_exploration.turn135in_L.e_ofset=55;
 8008042:	4b45      	ldr	r3, [pc, #276]	; (8008158 <input_parameter+0x264>)
 8008044:	4a5c      	ldr	r2, [pc, #368]	; (80081b8 <input_parameter+0x2c4>)
 8008046:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

speed500_exploration.turn45out_R.g_speed=1200;
 800804a:	4b43      	ldr	r3, [pc, #268]	; (8008158 <input_parameter+0x264>)
 800804c:	4a49      	ldr	r2, [pc, #292]	; (8008174 <input_parameter+0x280>)
 800804e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
speed500_exploration.turn45out_R.t_speed=900;
 8008052:	4b41      	ldr	r3, [pc, #260]	; (8008158 <input_parameter+0x264>)
 8008054:	4a53      	ldr	r2, [pc, #332]	; (80081a4 <input_parameter+0x2b0>)
 8008056:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
speed500_exploration.turn45out_R.t_acc=10000;
 800805a:	4b3f      	ldr	r3, [pc, #252]	; (8008158 <input_parameter+0x264>)
 800805c:	4a47      	ldr	r2, [pc, #284]	; (800817c <input_parameter+0x288>)
 800805e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
speed500_exploration.turn45out_R.f_ofset=45;
 8008062:	4b3d      	ldr	r3, [pc, #244]	; (8008158 <input_parameter+0x264>)
 8008064:	4a46      	ldr	r2, [pc, #280]	; (8008180 <input_parameter+0x28c>)
 8008066:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
speed500_exploration.turn45out_R.e_ofset=10;
 800806a:	4b3b      	ldr	r3, [pc, #236]	; (8008158 <input_parameter+0x264>)
 800806c:	4a53      	ldr	r2, [pc, #332]	; (80081bc <input_parameter+0x2c8>)
 800806e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

speed500_exploration.turn45out_L.g_speed=1200;
 8008072:	4b39      	ldr	r3, [pc, #228]	; (8008158 <input_parameter+0x264>)
 8008074:	4a3f      	ldr	r2, [pc, #252]	; (8008174 <input_parameter+0x280>)
 8008076:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
speed500_exploration.turn45out_L.t_speed=900;
 800807a:	4b37      	ldr	r3, [pc, #220]	; (8008158 <input_parameter+0x264>)
 800807c:	4a49      	ldr	r2, [pc, #292]	; (80081a4 <input_parameter+0x2b0>)
 800807e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
speed500_exploration.turn45out_L.t_acc=10000;
 8008082:	4b35      	ldr	r3, [pc, #212]	; (8008158 <input_parameter+0x264>)
 8008084:	4a3d      	ldr	r2, [pc, #244]	; (800817c <input_parameter+0x288>)
 8008086:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
speed500_exploration.turn45out_L.f_ofset=40;
 800808a:	4b33      	ldr	r3, [pc, #204]	; (8008158 <input_parameter+0x264>)
 800808c:	4a37      	ldr	r2, [pc, #220]	; (800816c <input_parameter+0x278>)
 800808e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
speed500_exploration.turn45out_L.e_ofset=10;
 8008092:	4b31      	ldr	r3, [pc, #196]	; (8008158 <input_parameter+0x264>)
 8008094:	4a49      	ldr	r2, [pc, #292]	; (80081bc <input_parameter+0x2c8>)
 8008096:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

speed500_exploration.turn135out_R.g_speed=1200;
 800809a:	4b2f      	ldr	r3, [pc, #188]	; (8008158 <input_parameter+0x264>)
 800809c:	4a35      	ldr	r2, [pc, #212]	; (8008174 <input_parameter+0x280>)
 800809e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
speed500_exploration.turn135out_R.t_speed=1000;
 80080a2:	4b2d      	ldr	r3, [pc, #180]	; (8008158 <input_parameter+0x264>)
 80080a4:	4a46      	ldr	r2, [pc, #280]	; (80081c0 <input_parameter+0x2cc>)
 80080a6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
speed500_exploration.turn135out_R.t_acc=12000;
 80080aa:	4b2b      	ldr	r3, [pc, #172]	; (8008158 <input_parameter+0x264>)
 80080ac:	4a40      	ldr	r2, [pc, #256]	; (80081b0 <input_parameter+0x2bc>)
 80080ae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
speed500_exploration.turn135out_R.f_ofset=25;
 80080b2:	4b29      	ldr	r3, [pc, #164]	; (8008158 <input_parameter+0x264>)
 80080b4:	4a2c      	ldr	r2, [pc, #176]	; (8008168 <input_parameter+0x274>)
 80080b6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
speed500_exploration.turn135out_R.e_ofset=90;
 80080ba:	4b27      	ldr	r3, [pc, #156]	; (8008158 <input_parameter+0x264>)
 80080bc:	4a41      	ldr	r2, [pc, #260]	; (80081c4 <input_parameter+0x2d0>)
 80080be:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

speed500_exploration.turn135out_L.g_speed=1200;
 80080c2:	4b25      	ldr	r3, [pc, #148]	; (8008158 <input_parameter+0x264>)
 80080c4:	4a2b      	ldr	r2, [pc, #172]	; (8008174 <input_parameter+0x280>)
 80080c6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
speed500_exploration.turn135out_L.t_speed=1000;
 80080ca:	4b23      	ldr	r3, [pc, #140]	; (8008158 <input_parameter+0x264>)
 80080cc:	4a3c      	ldr	r2, [pc, #240]	; (80081c0 <input_parameter+0x2cc>)
 80080ce:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
speed500_exploration.turn135out_L.t_acc=12000;
 80080d2:	4b21      	ldr	r3, [pc, #132]	; (8008158 <input_parameter+0x264>)
 80080d4:	4a36      	ldr	r2, [pc, #216]	; (80081b0 <input_parameter+0x2bc>)
 80080d6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
speed500_exploration.turn135out_L.f_ofset=40;
 80080da:	4b1f      	ldr	r3, [pc, #124]	; (8008158 <input_parameter+0x264>)
 80080dc:	4a23      	ldr	r2, [pc, #140]	; (800816c <input_parameter+0x278>)
 80080de:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
speed500_exploration.turn135out_L.e_ofset=95;
 80080e2:	4b1d      	ldr	r3, [pc, #116]	; (8008158 <input_parameter+0x264>)
 80080e4:	4a38      	ldr	r2, [pc, #224]	; (80081c8 <input_parameter+0x2d4>)
 80080e6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

speed500_exploration.V90_R.g_speed=1200;
 80080ea:	4b1b      	ldr	r3, [pc, #108]	; (8008158 <input_parameter+0x264>)
 80080ec:	4a21      	ldr	r2, [pc, #132]	; (8008174 <input_parameter+0x280>)
 80080ee:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
speed500_exploration.V90_R.t_speed=1650;
 80080f2:	4b19      	ldr	r3, [pc, #100]	; (8008158 <input_parameter+0x264>)
 80080f4:	4a35      	ldr	r2, [pc, #212]	; (80081cc <input_parameter+0x2d8>)
 80080f6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
speed500_exploration.V90_R.t_acc=24500;
 80080fa:	4b17      	ldr	r3, [pc, #92]	; (8008158 <input_parameter+0x264>)
 80080fc:	4a34      	ldr	r2, [pc, #208]	; (80081d0 <input_parameter+0x2dc>)
 80080fe:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
speed500_exploration.V90_R.f_ofset=50;
 8008102:	4b15      	ldr	r3, [pc, #84]	; (8008158 <input_parameter+0x264>)
 8008104:	4a20      	ldr	r2, [pc, #128]	; (8008188 <input_parameter+0x294>)
 8008106:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
speed500_exploration.V90_R.e_ofset=65;
 800810a:	4b13      	ldr	r3, [pc, #76]	; (8008158 <input_parameter+0x264>)
 800810c:	4a31      	ldr	r2, [pc, #196]	; (80081d4 <input_parameter+0x2e0>)
 800810e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

speed500_exploration.V90_L.g_speed=1200;
 8008112:	4b11      	ldr	r3, [pc, #68]	; (8008158 <input_parameter+0x264>)
 8008114:	4a17      	ldr	r2, [pc, #92]	; (8008174 <input_parameter+0x280>)
 8008116:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
speed500_exploration.V90_L.t_speed=1550;
 800811a:	4b0f      	ldr	r3, [pc, #60]	; (8008158 <input_parameter+0x264>)
 800811c:	4a2e      	ldr	r2, [pc, #184]	; (80081d8 <input_parameter+0x2e4>)
 800811e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
speed500_exploration.V90_L.t_acc=22000;
 8008122:	4b0d      	ldr	r3, [pc, #52]	; (8008158 <input_parameter+0x264>)
 8008124:	4a2d      	ldr	r2, [pc, #180]	; (80081dc <input_parameter+0x2e8>)
 8008126:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
speed500_exploration.V90_L.f_ofset=28;
 800812a:	4b0b      	ldr	r3, [pc, #44]	; (8008158 <input_parameter+0x264>)
 800812c:	4a2c      	ldr	r2, [pc, #176]	; (80081e0 <input_parameter+0x2ec>)
 800812e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
speed500_exploration.V90_L.e_ofset=55;
 8008132:	4b09      	ldr	r3, [pc, #36]	; (8008158 <input_parameter+0x264>)
 8008134:	4a20      	ldr	r2, [pc, #128]	; (80081b8 <input_parameter+0x2c4>)
 8008136:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134



//*********************************600********************************************

speed600_shortest.slalom_R.g_speed=1200;
 800813a:	4b2a      	ldr	r3, [pc, #168]	; (80081e4 <input_parameter+0x2f0>)
 800813c:	4a0d      	ldr	r2, [pc, #52]	; (8008174 <input_parameter+0x280>)
 800813e:	601a      	str	r2, [r3, #0]
speed600_shortest.slalom_R.t_speed=650;
 8008140:	4b28      	ldr	r3, [pc, #160]	; (80081e4 <input_parameter+0x2f0>)
 8008142:	4a0d      	ldr	r2, [pc, #52]	; (8008178 <input_parameter+0x284>)
 8008144:	60da      	str	r2, [r3, #12]
speed600_shortest.slalom_R.t_acc=15000;
 8008146:	4b27      	ldr	r3, [pc, #156]	; (80081e4 <input_parameter+0x2f0>)
 8008148:	4a27      	ldr	r2, [pc, #156]	; (80081e8 <input_parameter+0x2f4>)
 800814a:	611a      	str	r2, [r3, #16]
speed600_shortest.slalom_R.f_ofset=47;
 800814c:	4b25      	ldr	r3, [pc, #148]	; (80081e4 <input_parameter+0x2f0>)
 800814e:	4a0f      	ldr	r2, [pc, #60]	; (800818c <input_parameter+0x298>)
 8008150:	605a      	str	r2, [r3, #4]
speed600_shortest.slalom_R.e_ofset=40;
 8008152:	4b24      	ldr	r3, [pc, #144]	; (80081e4 <input_parameter+0x2f0>)
 8008154:	e04a      	b.n	80081ec <input_parameter+0x2f8>
 8008156:	bf00      	nop
 8008158:	20000a50 	.word	0x20000a50
 800815c:	43fa0000 	.word	0x43fa0000
 8008160:	460ca000 	.word	0x460ca000
 8008164:	42240000 	.word	0x42240000
 8008168:	41c80000 	.word	0x41c80000
 800816c:	42200000 	.word	0x42200000
 8008170:	41e80000 	.word	0x41e80000
 8008174:	44960000 	.word	0x44960000
 8008178:	44228000 	.word	0x44228000
 800817c:	461c4000 	.word	0x461c4000
 8008180:	42340000 	.word	0x42340000
 8008184:	42380000 	.word	0x42380000
 8008188:	42480000 	.word	0x42480000
 800818c:	423c0000 	.word	0x423c0000
 8008190:	44480000 	.word	0x44480000
 8008194:	45fa0000 	.word	0x45fa0000
 8008198:	41a00000 	.word	0x41a00000
 800819c:	41f00000 	.word	0x41f00000
 80081a0:	44430000 	.word	0x44430000
 80081a4:	44610000 	.word	0x44610000
 80081a8:	464b2000 	.word	0x464b2000
 80081ac:	42700000 	.word	0x42700000
 80081b0:	463b8000 	.word	0x463b8000
 80081b4:	42540000 	.word	0x42540000
 80081b8:	425c0000 	.word	0x425c0000
 80081bc:	41200000 	.word	0x41200000
 80081c0:	447a0000 	.word	0x447a0000
 80081c4:	42b40000 	.word	0x42b40000
 80081c8:	42be0000 	.word	0x42be0000
 80081cc:	44ce4000 	.word	0x44ce4000
 80081d0:	46bf6800 	.word	0x46bf6800
 80081d4:	42820000 	.word	0x42820000
 80081d8:	44c1c000 	.word	0x44c1c000
 80081dc:	46abe000 	.word	0x46abe000
 80081e0:	41e00000 	.word	0x41e00000
 80081e4:	20000b90 	.word	0x20000b90
 80081e8:	466a6000 	.word	0x466a6000
 80081ec:	4a98      	ldr	r2, [pc, #608]	; (8008450 <input_parameter+0x55c>)
 80081ee:	609a      	str	r2, [r3, #8]

speed600_shortest.slalom_L.g_speed=1200;
 80081f0:	4b98      	ldr	r3, [pc, #608]	; (8008454 <input_parameter+0x560>)
 80081f2:	4a99      	ldr	r2, [pc, #612]	; (8008458 <input_parameter+0x564>)
 80081f4:	615a      	str	r2, [r3, #20]
speed600_shortest.slalom_L.t_speed=650;
 80081f6:	4b97      	ldr	r3, [pc, #604]	; (8008454 <input_parameter+0x560>)
 80081f8:	4a98      	ldr	r2, [pc, #608]	; (800845c <input_parameter+0x568>)
 80081fa:	621a      	str	r2, [r3, #32]
speed600_shortest.slalom_L.t_acc=15000;
 80081fc:	4b95      	ldr	r3, [pc, #596]	; (8008454 <input_parameter+0x560>)
 80081fe:	4a98      	ldr	r2, [pc, #608]	; (8008460 <input_parameter+0x56c>)
 8008200:	625a      	str	r2, [r3, #36]	; 0x24
speed600_shortest.slalom_L.f_ofset=53;
 8008202:	4b94      	ldr	r3, [pc, #592]	; (8008454 <input_parameter+0x560>)
 8008204:	4a97      	ldr	r2, [pc, #604]	; (8008464 <input_parameter+0x570>)
 8008206:	619a      	str	r2, [r3, #24]
speed600_shortest.slalom_L.e_ofset=44;
 8008208:	4b92      	ldr	r3, [pc, #584]	; (8008454 <input_parameter+0x560>)
 800820a:	4a97      	ldr	r2, [pc, #604]	; (8008468 <input_parameter+0x574>)
 800820c:	61da      	str	r2, [r3, #28]

speed600_shortest.turn90_R.g_speed=1200;
 800820e:	4b91      	ldr	r3, [pc, #580]	; (8008454 <input_parameter+0x560>)
 8008210:	4a91      	ldr	r2, [pc, #580]	; (8008458 <input_parameter+0x564>)
 8008212:	629a      	str	r2, [r3, #40]	; 0x28
speed600_shortest.turn90_R.t_speed=650;
 8008214:	4b8f      	ldr	r3, [pc, #572]	; (8008454 <input_parameter+0x560>)
 8008216:	4a91      	ldr	r2, [pc, #580]	; (800845c <input_parameter+0x568>)
 8008218:	635a      	str	r2, [r3, #52]	; 0x34
speed600_shortest.turn90_R.t_acc=10000;
 800821a:	4b8e      	ldr	r3, [pc, #568]	; (8008454 <input_parameter+0x560>)
 800821c:	4a93      	ldr	r2, [pc, #588]	; (800846c <input_parameter+0x578>)
 800821e:	639a      	str	r2, [r3, #56]	; 0x38
speed600_shortest.turn90_R.f_ofset=45;
 8008220:	4b8c      	ldr	r3, [pc, #560]	; (8008454 <input_parameter+0x560>)
 8008222:	4a93      	ldr	r2, [pc, #588]	; (8008470 <input_parameter+0x57c>)
 8008224:	62da      	str	r2, [r3, #44]	; 0x2c
speed600_shortest.turn90_R.e_ofset=46;
 8008226:	4b8b      	ldr	r3, [pc, #556]	; (8008454 <input_parameter+0x560>)
 8008228:	4a92      	ldr	r2, [pc, #584]	; (8008474 <input_parameter+0x580>)
 800822a:	631a      	str	r2, [r3, #48]	; 0x30

speed600_shortest.turn90_L.g_speed=1200;
 800822c:	4b89      	ldr	r3, [pc, #548]	; (8008454 <input_parameter+0x560>)
 800822e:	4a8a      	ldr	r2, [pc, #552]	; (8008458 <input_parameter+0x564>)
 8008230:	63da      	str	r2, [r3, #60]	; 0x3c
speed600_shortest.turn90_L.t_speed=650;
 8008232:	4b88      	ldr	r3, [pc, #544]	; (8008454 <input_parameter+0x560>)
 8008234:	4a89      	ldr	r2, [pc, #548]	; (800845c <input_parameter+0x568>)
 8008236:	649a      	str	r2, [r3, #72]	; 0x48
speed600_shortest.turn90_L.t_acc=10000;
 8008238:	4b86      	ldr	r3, [pc, #536]	; (8008454 <input_parameter+0x560>)
 800823a:	4a8c      	ldr	r2, [pc, #560]	; (800846c <input_parameter+0x578>)
 800823c:	64da      	str	r2, [r3, #76]	; 0x4c
speed600_shortest.turn90_L.f_ofset=50;
 800823e:	4b85      	ldr	r3, [pc, #532]	; (8008454 <input_parameter+0x560>)
 8008240:	4a8d      	ldr	r2, [pc, #564]	; (8008478 <input_parameter+0x584>)
 8008242:	641a      	str	r2, [r3, #64]	; 0x40
speed600_shortest.turn90_L.e_ofset=47;
 8008244:	4b83      	ldr	r3, [pc, #524]	; (8008454 <input_parameter+0x560>)
 8008246:	4a8d      	ldr	r2, [pc, #564]	; (800847c <input_parameter+0x588>)
 8008248:	645a      	str	r2, [r3, #68]	; 0x44

speed600_shortest.turn180_R.g_speed=1200;
 800824a:	4b82      	ldr	r3, [pc, #520]	; (8008454 <input_parameter+0x560>)
 800824c:	4a82      	ldr	r2, [pc, #520]	; (8008458 <input_parameter+0x564>)
 800824e:	651a      	str	r2, [r3, #80]	; 0x50
speed600_shortest.turn180_R.t_speed=800;
 8008250:	4b80      	ldr	r3, [pc, #512]	; (8008454 <input_parameter+0x560>)
 8008252:	4a8b      	ldr	r2, [pc, #556]	; (8008480 <input_parameter+0x58c>)
 8008254:	65da      	str	r2, [r3, #92]	; 0x5c
speed600_shortest.turn180_R.t_acc=8000;
 8008256:	4b7f      	ldr	r3, [pc, #508]	; (8008454 <input_parameter+0x560>)
 8008258:	4a8a      	ldr	r2, [pc, #552]	; (8008484 <input_parameter+0x590>)
 800825a:	661a      	str	r2, [r3, #96]	; 0x60
speed600_shortest.turn180_R.f_ofset=20;
 800825c:	4b7d      	ldr	r3, [pc, #500]	; (8008454 <input_parameter+0x560>)
 800825e:	4a8a      	ldr	r2, [pc, #552]	; (8008488 <input_parameter+0x594>)
 8008260:	655a      	str	r2, [r3, #84]	; 0x54
speed600_shortest.turn180_R.e_ofset=30;
 8008262:	4b7c      	ldr	r3, [pc, #496]	; (8008454 <input_parameter+0x560>)
 8008264:	4a89      	ldr	r2, [pc, #548]	; (800848c <input_parameter+0x598>)
 8008266:	659a      	str	r2, [r3, #88]	; 0x58

speed600_shortest.turn180_L.g_speed=1200;
 8008268:	4b7a      	ldr	r3, [pc, #488]	; (8008454 <input_parameter+0x560>)
 800826a:	4a7b      	ldr	r2, [pc, #492]	; (8008458 <input_parameter+0x564>)
 800826c:	665a      	str	r2, [r3, #100]	; 0x64
speed600_shortest.turn180_L.t_speed=780;
 800826e:	4b79      	ldr	r3, [pc, #484]	; (8008454 <input_parameter+0x560>)
 8008270:	4a87      	ldr	r2, [pc, #540]	; (8008490 <input_parameter+0x59c>)
 8008272:	671a      	str	r2, [r3, #112]	; 0x70
speed600_shortest.turn180_L.t_acc=8000;
 8008274:	4b77      	ldr	r3, [pc, #476]	; (8008454 <input_parameter+0x560>)
 8008276:	4a83      	ldr	r2, [pc, #524]	; (8008484 <input_parameter+0x590>)
 8008278:	675a      	str	r2, [r3, #116]	; 0x74
speed600_shortest.turn180_L.f_ofset=20;
 800827a:	4b76      	ldr	r3, [pc, #472]	; (8008454 <input_parameter+0x560>)
 800827c:	4a82      	ldr	r2, [pc, #520]	; (8008488 <input_parameter+0x594>)
 800827e:	669a      	str	r2, [r3, #104]	; 0x68
speed600_shortest.turn180_L.e_ofset=40;
 8008280:	4b74      	ldr	r3, [pc, #464]	; (8008454 <input_parameter+0x560>)
 8008282:	4a73      	ldr	r2, [pc, #460]	; (8008450 <input_parameter+0x55c>)
 8008284:	66da      	str	r2, [r3, #108]	; 0x6c

speed600_shortest.turn45in_R.g_speed=1200;
 8008286:	4b73      	ldr	r3, [pc, #460]	; (8008454 <input_parameter+0x560>)
 8008288:	4a73      	ldr	r2, [pc, #460]	; (8008458 <input_parameter+0x564>)
 800828a:	679a      	str	r2, [r3, #120]	; 0x78
speed600_shortest.turn45in_R.t_speed=900;
 800828c:	4b71      	ldr	r3, [pc, #452]	; (8008454 <input_parameter+0x560>)
 800828e:	4a81      	ldr	r2, [pc, #516]	; (8008494 <input_parameter+0x5a0>)
 8008290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
speed600_shortest.turn45in_R.t_acc=13000;
 8008294:	4b6f      	ldr	r3, [pc, #444]	; (8008454 <input_parameter+0x560>)
 8008296:	4a80      	ldr	r2, [pc, #512]	; (8008498 <input_parameter+0x5a4>)
 8008298:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
speed600_shortest.turn45in_R.f_ofset=25;
 800829c:	4b6d      	ldr	r3, [pc, #436]	; (8008454 <input_parameter+0x560>)
 800829e:	4a7f      	ldr	r2, [pc, #508]	; (800849c <input_parameter+0x5a8>)
 80082a0:	67da      	str	r2, [r3, #124]	; 0x7c
speed600_shortest.turn45in_R.e_ofset=60;
 80082a2:	4b6c      	ldr	r3, [pc, #432]	; (8008454 <input_parameter+0x560>)
 80082a4:	4a7e      	ldr	r2, [pc, #504]	; (80084a0 <input_parameter+0x5ac>)
 80082a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

speed600_shortest.turn45in_L.g_speed=1200;
 80082aa:	4b6a      	ldr	r3, [pc, #424]	; (8008454 <input_parameter+0x560>)
 80082ac:	4a6a      	ldr	r2, [pc, #424]	; (8008458 <input_parameter+0x564>)
 80082ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
speed600_shortest.turn45in_L.t_speed=900;
 80082b2:	4b68      	ldr	r3, [pc, #416]	; (8008454 <input_parameter+0x560>)
 80082b4:	4a77      	ldr	r2, [pc, #476]	; (8008494 <input_parameter+0x5a0>)
 80082b6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
speed600_shortest.turn45in_L.t_acc=13000;
 80082ba:	4b66      	ldr	r3, [pc, #408]	; (8008454 <input_parameter+0x560>)
 80082bc:	4a76      	ldr	r2, [pc, #472]	; (8008498 <input_parameter+0x5a4>)
 80082be:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
speed600_shortest.turn45in_L.f_ofset=32;
 80082c2:	4b64      	ldr	r3, [pc, #400]	; (8008454 <input_parameter+0x560>)
 80082c4:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80082c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
speed600_shortest.turn45in_L.e_ofset=60;
 80082cc:	4b61      	ldr	r3, [pc, #388]	; (8008454 <input_parameter+0x560>)
 80082ce:	4a74      	ldr	r2, [pc, #464]	; (80084a0 <input_parameter+0x5ac>)
 80082d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

speed600_shortest.turn135in_R.g_speed=1200;
 80082d4:	4b5f      	ldr	r3, [pc, #380]	; (8008454 <input_parameter+0x560>)
 80082d6:	4a60      	ldr	r2, [pc, #384]	; (8008458 <input_parameter+0x564>)
 80082d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
speed600_shortest.turn135in_R.t_speed=900;
 80082dc:	4b5d      	ldr	r3, [pc, #372]	; (8008454 <input_parameter+0x560>)
 80082de:	4a6d      	ldr	r2, [pc, #436]	; (8008494 <input_parameter+0x5a0>)
 80082e0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
speed600_shortest.turn135in_R.t_acc=12000;
 80082e4:	4b5b      	ldr	r3, [pc, #364]	; (8008454 <input_parameter+0x560>)
 80082e6:	4a6f      	ldr	r2, [pc, #444]	; (80084a4 <input_parameter+0x5b0>)
 80082e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
speed600_shortest.turn135in_R.f_ofset=53;
 80082ec:	4b59      	ldr	r3, [pc, #356]	; (8008454 <input_parameter+0x560>)
 80082ee:	4a5d      	ldr	r2, [pc, #372]	; (8008464 <input_parameter+0x570>)
 80082f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
speed600_shortest.turn135in_R.e_ofset=47;
 80082f4:	4b57      	ldr	r3, [pc, #348]	; (8008454 <input_parameter+0x560>)
 80082f6:	4a61      	ldr	r2, [pc, #388]	; (800847c <input_parameter+0x588>)
 80082f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

speed600_shortest.turn135in_L.g_speed=1200;
 80082fc:	4b55      	ldr	r3, [pc, #340]	; (8008454 <input_parameter+0x560>)
 80082fe:	4a56      	ldr	r2, [pc, #344]	; (8008458 <input_parameter+0x564>)
 8008300:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
speed600_shortest.turn135in_L.t_speed=900;
 8008304:	4b53      	ldr	r3, [pc, #332]	; (8008454 <input_parameter+0x560>)
 8008306:	4a63      	ldr	r2, [pc, #396]	; (8008494 <input_parameter+0x5a0>)
 8008308:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
speed600_shortest.turn135in_L.t_acc=12000;
 800830c:	4b51      	ldr	r3, [pc, #324]	; (8008454 <input_parameter+0x560>)
 800830e:	4a65      	ldr	r2, [pc, #404]	; (80084a4 <input_parameter+0x5b0>)
 8008310:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
speed600_shortest.turn135in_L.f_ofset=40;
 8008314:	4b4f      	ldr	r3, [pc, #316]	; (8008454 <input_parameter+0x560>)
 8008316:	4a4e      	ldr	r2, [pc, #312]	; (8008450 <input_parameter+0x55c>)
 8008318:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
speed600_shortest.turn135in_L.e_ofset=55;
 800831c:	4b4d      	ldr	r3, [pc, #308]	; (8008454 <input_parameter+0x560>)
 800831e:	4a62      	ldr	r2, [pc, #392]	; (80084a8 <input_parameter+0x5b4>)
 8008320:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

speed600_shortest.turn45out_R.g_speed=1200;
 8008324:	4b4b      	ldr	r3, [pc, #300]	; (8008454 <input_parameter+0x560>)
 8008326:	4a4c      	ldr	r2, [pc, #304]	; (8008458 <input_parameter+0x564>)
 8008328:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
speed600_shortest.turn45out_R.t_speed=900;
 800832c:	4b49      	ldr	r3, [pc, #292]	; (8008454 <input_parameter+0x560>)
 800832e:	4a59      	ldr	r2, [pc, #356]	; (8008494 <input_parameter+0x5a0>)
 8008330:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
speed600_shortest.turn45out_R.t_acc=10000;
 8008334:	4b47      	ldr	r3, [pc, #284]	; (8008454 <input_parameter+0x560>)
 8008336:	4a4d      	ldr	r2, [pc, #308]	; (800846c <input_parameter+0x578>)
 8008338:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
speed600_shortest.turn45out_R.f_ofset=45;
 800833c:	4b45      	ldr	r3, [pc, #276]	; (8008454 <input_parameter+0x560>)
 800833e:	4a4c      	ldr	r2, [pc, #304]	; (8008470 <input_parameter+0x57c>)
 8008340:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
speed600_shortest.turn45out_R.e_ofset=10;
 8008344:	4b43      	ldr	r3, [pc, #268]	; (8008454 <input_parameter+0x560>)
 8008346:	4a59      	ldr	r2, [pc, #356]	; (80084ac <input_parameter+0x5b8>)
 8008348:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

speed600_shortest.turn45out_L.g_speed=1200;
 800834c:	4b41      	ldr	r3, [pc, #260]	; (8008454 <input_parameter+0x560>)
 800834e:	4a42      	ldr	r2, [pc, #264]	; (8008458 <input_parameter+0x564>)
 8008350:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
speed600_shortest.turn45out_L.t_speed=900;
 8008354:	4b3f      	ldr	r3, [pc, #252]	; (8008454 <input_parameter+0x560>)
 8008356:	4a4f      	ldr	r2, [pc, #316]	; (8008494 <input_parameter+0x5a0>)
 8008358:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
speed600_shortest.turn45out_L.t_acc=10000;
 800835c:	4b3d      	ldr	r3, [pc, #244]	; (8008454 <input_parameter+0x560>)
 800835e:	4a43      	ldr	r2, [pc, #268]	; (800846c <input_parameter+0x578>)
 8008360:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
speed600_shortest.turn45out_L.f_ofset=40;
 8008364:	4b3b      	ldr	r3, [pc, #236]	; (8008454 <input_parameter+0x560>)
 8008366:	4a3a      	ldr	r2, [pc, #232]	; (8008450 <input_parameter+0x55c>)
 8008368:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
speed600_shortest.turn45out_L.e_ofset=10;
 800836c:	4b39      	ldr	r3, [pc, #228]	; (8008454 <input_parameter+0x560>)
 800836e:	4a4f      	ldr	r2, [pc, #316]	; (80084ac <input_parameter+0x5b8>)
 8008370:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

speed600_shortest.turn135out_R.g_speed=1200;
 8008374:	4b37      	ldr	r3, [pc, #220]	; (8008454 <input_parameter+0x560>)
 8008376:	4a38      	ldr	r2, [pc, #224]	; (8008458 <input_parameter+0x564>)
 8008378:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
speed600_shortest.turn135out_R.t_speed=1000;
 800837c:	4b35      	ldr	r3, [pc, #212]	; (8008454 <input_parameter+0x560>)
 800837e:	4a4c      	ldr	r2, [pc, #304]	; (80084b0 <input_parameter+0x5bc>)
 8008380:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
speed600_shortest.turn135out_R.t_acc=12000;
 8008384:	4b33      	ldr	r3, [pc, #204]	; (8008454 <input_parameter+0x560>)
 8008386:	4a47      	ldr	r2, [pc, #284]	; (80084a4 <input_parameter+0x5b0>)
 8008388:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
speed600_shortest.turn135out_R.f_ofset=25;
 800838c:	4b31      	ldr	r3, [pc, #196]	; (8008454 <input_parameter+0x560>)
 800838e:	4a43      	ldr	r2, [pc, #268]	; (800849c <input_parameter+0x5a8>)
 8008390:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
speed600_shortest.turn135out_R.e_ofset=90;
 8008394:	4b2f      	ldr	r3, [pc, #188]	; (8008454 <input_parameter+0x560>)
 8008396:	4a47      	ldr	r2, [pc, #284]	; (80084b4 <input_parameter+0x5c0>)
 8008398:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

speed600_shortest.turn135out_L.g_speed=1200;
 800839c:	4b2d      	ldr	r3, [pc, #180]	; (8008454 <input_parameter+0x560>)
 800839e:	4a2e      	ldr	r2, [pc, #184]	; (8008458 <input_parameter+0x564>)
 80083a0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
speed600_shortest.turn135out_L.t_speed=1000;
 80083a4:	4b2b      	ldr	r3, [pc, #172]	; (8008454 <input_parameter+0x560>)
 80083a6:	4a42      	ldr	r2, [pc, #264]	; (80084b0 <input_parameter+0x5bc>)
 80083a8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
speed600_shortest.turn135out_L.t_acc=12000;
 80083ac:	4b29      	ldr	r3, [pc, #164]	; (8008454 <input_parameter+0x560>)
 80083ae:	4a3d      	ldr	r2, [pc, #244]	; (80084a4 <input_parameter+0x5b0>)
 80083b0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
speed600_shortest.turn135out_L.f_ofset=40;
 80083b4:	4b27      	ldr	r3, [pc, #156]	; (8008454 <input_parameter+0x560>)
 80083b6:	4a26      	ldr	r2, [pc, #152]	; (8008450 <input_parameter+0x55c>)
 80083b8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
speed600_shortest.turn135out_L.e_ofset=95;
 80083bc:	4b25      	ldr	r3, [pc, #148]	; (8008454 <input_parameter+0x560>)
 80083be:	4a3e      	ldr	r2, [pc, #248]	; (80084b8 <input_parameter+0x5c4>)
 80083c0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

speed600_shortest.V90_R.g_speed=1200;
 80083c4:	4b23      	ldr	r3, [pc, #140]	; (8008454 <input_parameter+0x560>)
 80083c6:	4a24      	ldr	r2, [pc, #144]	; (8008458 <input_parameter+0x564>)
 80083c8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
speed600_shortest.V90_R.t_speed=1650;
 80083cc:	4b21      	ldr	r3, [pc, #132]	; (8008454 <input_parameter+0x560>)
 80083ce:	4a3b      	ldr	r2, [pc, #236]	; (80084bc <input_parameter+0x5c8>)
 80083d0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
speed600_shortest.V90_R.t_acc=24500;
 80083d4:	4b1f      	ldr	r3, [pc, #124]	; (8008454 <input_parameter+0x560>)
 80083d6:	4a3a      	ldr	r2, [pc, #232]	; (80084c0 <input_parameter+0x5cc>)
 80083d8:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
speed600_shortest.V90_R.f_ofset=50;
 80083dc:	4b1d      	ldr	r3, [pc, #116]	; (8008454 <input_parameter+0x560>)
 80083de:	4a26      	ldr	r2, [pc, #152]	; (8008478 <input_parameter+0x584>)
 80083e0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
speed600_shortest.V90_R.e_ofset=65;
 80083e4:	4b1b      	ldr	r3, [pc, #108]	; (8008454 <input_parameter+0x560>)
 80083e6:	4a37      	ldr	r2, [pc, #220]	; (80084c4 <input_parameter+0x5d0>)
 80083e8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

speed600_shortest.V90_L.g_speed=1200;
 80083ec:	4b19      	ldr	r3, [pc, #100]	; (8008454 <input_parameter+0x560>)
 80083ee:	4a1a      	ldr	r2, [pc, #104]	; (8008458 <input_parameter+0x564>)
 80083f0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
speed600_shortest.V90_L.t_speed=1550;
 80083f4:	4b17      	ldr	r3, [pc, #92]	; (8008454 <input_parameter+0x560>)
 80083f6:	4a34      	ldr	r2, [pc, #208]	; (80084c8 <input_parameter+0x5d4>)
 80083f8:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
speed600_shortest.V90_L.t_acc=22000;
 80083fc:	4b15      	ldr	r3, [pc, #84]	; (8008454 <input_parameter+0x560>)
 80083fe:	4a33      	ldr	r2, [pc, #204]	; (80084cc <input_parameter+0x5d8>)
 8008400:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
speed600_shortest.V90_L.f_ofset=28;
 8008404:	4b13      	ldr	r3, [pc, #76]	; (8008454 <input_parameter+0x560>)
 8008406:	4a32      	ldr	r2, [pc, #200]	; (80084d0 <input_parameter+0x5dc>)
 8008408:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
speed600_shortest.V90_L.e_ofset=55;
 800840c:	4b11      	ldr	r3, [pc, #68]	; (8008454 <input_parameter+0x560>)
 800840e:	4a26      	ldr	r2, [pc, #152]	; (80084a8 <input_parameter+0x5b4>)
 8008410:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134


//*********************************800********************************************

speed800_shortest.slalom_R.g_speed=1000;
 8008414:	4b2f      	ldr	r3, [pc, #188]	; (80084d4 <input_parameter+0x5e0>)
 8008416:	4a26      	ldr	r2, [pc, #152]	; (80084b0 <input_parameter+0x5bc>)
 8008418:	601a      	str	r2, [r3, #0]
speed800_shortest.slalom_R.t_speed=1000;
 800841a:	4b2e      	ldr	r3, [pc, #184]	; (80084d4 <input_parameter+0x5e0>)
 800841c:	4a24      	ldr	r2, [pc, #144]	; (80084b0 <input_parameter+0x5bc>)
 800841e:	60da      	str	r2, [r3, #12]
speed800_shortest.slalom_R.t_acc=14000;
 8008420:	4b2c      	ldr	r3, [pc, #176]	; (80084d4 <input_parameter+0x5e0>)
 8008422:	4a2d      	ldr	r2, [pc, #180]	; (80084d8 <input_parameter+0x5e4>)
 8008424:	611a      	str	r2, [r3, #16]
speed800_shortest.slalom_R.f_ofset=0;
 8008426:	4b2b      	ldr	r3, [pc, #172]	; (80084d4 <input_parameter+0x5e0>)
 8008428:	f04f 0200 	mov.w	r2, #0
 800842c:	605a      	str	r2, [r3, #4]
speed800_shortest.slalom_R.e_ofset=15;
 800842e:	4b29      	ldr	r3, [pc, #164]	; (80084d4 <input_parameter+0x5e0>)
 8008430:	4a2a      	ldr	r2, [pc, #168]	; (80084dc <input_parameter+0x5e8>)
 8008432:	609a      	str	r2, [r3, #8]

speed800_shortest.slalom_L.g_speed=1000;
 8008434:	4b27      	ldr	r3, [pc, #156]	; (80084d4 <input_parameter+0x5e0>)
 8008436:	4a1e      	ldr	r2, [pc, #120]	; (80084b0 <input_parameter+0x5bc>)
 8008438:	615a      	str	r2, [r3, #20]
speed800_shortest.slalom_L.t_speed=1000;
 800843a:	4b26      	ldr	r3, [pc, #152]	; (80084d4 <input_parameter+0x5e0>)
 800843c:	4a1c      	ldr	r2, [pc, #112]	; (80084b0 <input_parameter+0x5bc>)
 800843e:	621a      	str	r2, [r3, #32]
speed800_shortest.slalom_L.t_acc=14000;
 8008440:	4b24      	ldr	r3, [pc, #144]	; (80084d4 <input_parameter+0x5e0>)
 8008442:	4a25      	ldr	r2, [pc, #148]	; (80084d8 <input_parameter+0x5e4>)
 8008444:	625a      	str	r2, [r3, #36]	; 0x24
speed800_shortest.slalom_L.f_ofset=5;
 8008446:	4b23      	ldr	r3, [pc, #140]	; (80084d4 <input_parameter+0x5e0>)
 8008448:	4a25      	ldr	r2, [pc, #148]	; (80084e0 <input_parameter+0x5ec>)
 800844a:	619a      	str	r2, [r3, #24]
 800844c:	e04a      	b.n	80084e4 <input_parameter+0x5f0>
 800844e:	bf00      	nop
 8008450:	42200000 	.word	0x42200000
 8008454:	20000b90 	.word	0x20000b90
 8008458:	44960000 	.word	0x44960000
 800845c:	44228000 	.word	0x44228000
 8008460:	466a6000 	.word	0x466a6000
 8008464:	42540000 	.word	0x42540000
 8008468:	42300000 	.word	0x42300000
 800846c:	461c4000 	.word	0x461c4000
 8008470:	42340000 	.word	0x42340000
 8008474:	42380000 	.word	0x42380000
 8008478:	42480000 	.word	0x42480000
 800847c:	423c0000 	.word	0x423c0000
 8008480:	44480000 	.word	0x44480000
 8008484:	45fa0000 	.word	0x45fa0000
 8008488:	41a00000 	.word	0x41a00000
 800848c:	41f00000 	.word	0x41f00000
 8008490:	44430000 	.word	0x44430000
 8008494:	44610000 	.word	0x44610000
 8008498:	464b2000 	.word	0x464b2000
 800849c:	41c80000 	.word	0x41c80000
 80084a0:	42700000 	.word	0x42700000
 80084a4:	463b8000 	.word	0x463b8000
 80084a8:	425c0000 	.word	0x425c0000
 80084ac:	41200000 	.word	0x41200000
 80084b0:	447a0000 	.word	0x447a0000
 80084b4:	42b40000 	.word	0x42b40000
 80084b8:	42be0000 	.word	0x42be0000
 80084bc:	44ce4000 	.word	0x44ce4000
 80084c0:	46bf6800 	.word	0x46bf6800
 80084c4:	42820000 	.word	0x42820000
 80084c8:	44c1c000 	.word	0x44c1c000
 80084cc:	46abe000 	.word	0x46abe000
 80084d0:	41e00000 	.word	0x41e00000
 80084d4:	20000cd0 	.word	0x20000cd0
 80084d8:	465ac000 	.word	0x465ac000
 80084dc:	41700000 	.word	0x41700000
 80084e0:	40a00000 	.word	0x40a00000
speed800_shortest.slalom_L.e_ofset=5;
 80084e4:	4b96      	ldr	r3, [pc, #600]	; (8008740 <input_parameter+0x84c>)
 80084e6:	4a97      	ldr	r2, [pc, #604]	; (8008744 <input_parameter+0x850>)
 80084e8:	61da      	str	r2, [r3, #28]

speed800_shortest.turn90_R.g_speed=500;
 80084ea:	4b95      	ldr	r3, [pc, #596]	; (8008740 <input_parameter+0x84c>)
 80084ec:	4a96      	ldr	r2, [pc, #600]	; (8008748 <input_parameter+0x854>)
 80084ee:	629a      	str	r2, [r3, #40]	; 0x28
speed800_shortest.turn90_R.t_speed=650;
 80084f0:	4b93      	ldr	r3, [pc, #588]	; (8008740 <input_parameter+0x84c>)
 80084f2:	4a96      	ldr	r2, [pc, #600]	; (800874c <input_parameter+0x858>)
 80084f4:	635a      	str	r2, [r3, #52]	; 0x34
speed800_shortest.turn90_R.t_acc=15000;
 80084f6:	4b92      	ldr	r3, [pc, #584]	; (8008740 <input_parameter+0x84c>)
 80084f8:	4a95      	ldr	r2, [pc, #596]	; (8008750 <input_parameter+0x85c>)
 80084fa:	639a      	str	r2, [r3, #56]	; 0x38
speed800_shortest.turn90_R.f_ofset=55;
 80084fc:	4b90      	ldr	r3, [pc, #576]	; (8008740 <input_parameter+0x84c>)
 80084fe:	4a95      	ldr	r2, [pc, #596]	; (8008754 <input_parameter+0x860>)
 8008500:	62da      	str	r2, [r3, #44]	; 0x2c
speed800_shortest.turn90_R.e_ofset=40;
 8008502:	4b8f      	ldr	r3, [pc, #572]	; (8008740 <input_parameter+0x84c>)
 8008504:	4a94      	ldr	r2, [pc, #592]	; (8008758 <input_parameter+0x864>)
 8008506:	631a      	str	r2, [r3, #48]	; 0x30

speed800_shortest.turn90_L.g_speed=500;
 8008508:	4b8d      	ldr	r3, [pc, #564]	; (8008740 <input_parameter+0x84c>)
 800850a:	4a8f      	ldr	r2, [pc, #572]	; (8008748 <input_parameter+0x854>)
 800850c:	63da      	str	r2, [r3, #60]	; 0x3c
speed800_shortest.turn90_L.t_speed=650;
 800850e:	4b8c      	ldr	r3, [pc, #560]	; (8008740 <input_parameter+0x84c>)
 8008510:	4a8e      	ldr	r2, [pc, #568]	; (800874c <input_parameter+0x858>)
 8008512:	649a      	str	r2, [r3, #72]	; 0x48
speed800_shortest.turn90_L.t_acc=15000;
 8008514:	4b8a      	ldr	r3, [pc, #552]	; (8008740 <input_parameter+0x84c>)
 8008516:	4a8e      	ldr	r2, [pc, #568]	; (8008750 <input_parameter+0x85c>)
 8008518:	64da      	str	r2, [r3, #76]	; 0x4c
speed800_shortest.turn90_L.f_ofset=50;
 800851a:	4b89      	ldr	r3, [pc, #548]	; (8008740 <input_parameter+0x84c>)
 800851c:	4a8f      	ldr	r2, [pc, #572]	; (800875c <input_parameter+0x868>)
 800851e:	641a      	str	r2, [r3, #64]	; 0x40
speed800_shortest.turn90_L.e_ofset=44;
 8008520:	4b87      	ldr	r3, [pc, #540]	; (8008740 <input_parameter+0x84c>)
 8008522:	4a8f      	ldr	r2, [pc, #572]	; (8008760 <input_parameter+0x86c>)
 8008524:	645a      	str	r2, [r3, #68]	; 0x44

speed800_shortest.turn180_R.g_speed=500;
 8008526:	4b86      	ldr	r3, [pc, #536]	; (8008740 <input_parameter+0x84c>)
 8008528:	4a87      	ldr	r2, [pc, #540]	; (8008748 <input_parameter+0x854>)
 800852a:	651a      	str	r2, [r3, #80]	; 0x50
speed800_shortest.turn180_R.t_speed=650;
 800852c:	4b84      	ldr	r3, [pc, #528]	; (8008740 <input_parameter+0x84c>)
 800852e:	4a87      	ldr	r2, [pc, #540]	; (800874c <input_parameter+0x858>)
 8008530:	65da      	str	r2, [r3, #92]	; 0x5c
speed800_shortest.turn180_R.t_acc=15000;
 8008532:	4b83      	ldr	r3, [pc, #524]	; (8008740 <input_parameter+0x84c>)
 8008534:	4a86      	ldr	r2, [pc, #536]	; (8008750 <input_parameter+0x85c>)
 8008536:	661a      	str	r2, [r3, #96]	; 0x60
speed800_shortest.turn180_R.f_ofset=55;
 8008538:	4b81      	ldr	r3, [pc, #516]	; (8008740 <input_parameter+0x84c>)
 800853a:	4a86      	ldr	r2, [pc, #536]	; (8008754 <input_parameter+0x860>)
 800853c:	655a      	str	r2, [r3, #84]	; 0x54
speed800_shortest.turn180_R.e_ofset=40;
 800853e:	4b80      	ldr	r3, [pc, #512]	; (8008740 <input_parameter+0x84c>)
 8008540:	4a85      	ldr	r2, [pc, #532]	; (8008758 <input_parameter+0x864>)
 8008542:	659a      	str	r2, [r3, #88]	; 0x58

speed800_shortest.turn180_L.g_speed=500;
 8008544:	4b7e      	ldr	r3, [pc, #504]	; (8008740 <input_parameter+0x84c>)
 8008546:	4a80      	ldr	r2, [pc, #512]	; (8008748 <input_parameter+0x854>)
 8008548:	665a      	str	r2, [r3, #100]	; 0x64
speed800_shortest.turn180_L.t_speed=650;
 800854a:	4b7d      	ldr	r3, [pc, #500]	; (8008740 <input_parameter+0x84c>)
 800854c:	4a7f      	ldr	r2, [pc, #508]	; (800874c <input_parameter+0x858>)
 800854e:	671a      	str	r2, [r3, #112]	; 0x70
speed800_shortest.turn180_L.t_acc=15000;
 8008550:	4b7b      	ldr	r3, [pc, #492]	; (8008740 <input_parameter+0x84c>)
 8008552:	4a7f      	ldr	r2, [pc, #508]	; (8008750 <input_parameter+0x85c>)
 8008554:	675a      	str	r2, [r3, #116]	; 0x74
speed800_shortest.turn180_L.f_ofset=50;
 8008556:	4b7a      	ldr	r3, [pc, #488]	; (8008740 <input_parameter+0x84c>)
 8008558:	4a80      	ldr	r2, [pc, #512]	; (800875c <input_parameter+0x868>)
 800855a:	669a      	str	r2, [r3, #104]	; 0x68
speed800_shortest.turn180_L.e_ofset=44;
 800855c:	4b78      	ldr	r3, [pc, #480]	; (8008740 <input_parameter+0x84c>)
 800855e:	4a80      	ldr	r2, [pc, #512]	; (8008760 <input_parameter+0x86c>)
 8008560:	66da      	str	r2, [r3, #108]	; 0x6c

speed800_shortest.turn45in_R.g_speed=500;
 8008562:	4b77      	ldr	r3, [pc, #476]	; (8008740 <input_parameter+0x84c>)
 8008564:	4a78      	ldr	r2, [pc, #480]	; (8008748 <input_parameter+0x854>)
 8008566:	679a      	str	r2, [r3, #120]	; 0x78
speed800_shortest.turn45in_R.t_speed=650;
 8008568:	4b75      	ldr	r3, [pc, #468]	; (8008740 <input_parameter+0x84c>)
 800856a:	4a78      	ldr	r2, [pc, #480]	; (800874c <input_parameter+0x858>)
 800856c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
speed800_shortest.turn45in_R.t_acc=15000;
 8008570:	4b73      	ldr	r3, [pc, #460]	; (8008740 <input_parameter+0x84c>)
 8008572:	4a77      	ldr	r2, [pc, #476]	; (8008750 <input_parameter+0x85c>)
 8008574:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
speed800_shortest.turn45in_R.f_ofset=55;
 8008578:	4b71      	ldr	r3, [pc, #452]	; (8008740 <input_parameter+0x84c>)
 800857a:	4a76      	ldr	r2, [pc, #472]	; (8008754 <input_parameter+0x860>)
 800857c:	67da      	str	r2, [r3, #124]	; 0x7c
speed800_shortest.turn45in_R.e_ofset=40;
 800857e:	4b70      	ldr	r3, [pc, #448]	; (8008740 <input_parameter+0x84c>)
 8008580:	4a75      	ldr	r2, [pc, #468]	; (8008758 <input_parameter+0x864>)
 8008582:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

speed800_shortest.turn45in_L.g_speed=500;
 8008586:	4b6e      	ldr	r3, [pc, #440]	; (8008740 <input_parameter+0x84c>)
 8008588:	4a6f      	ldr	r2, [pc, #444]	; (8008748 <input_parameter+0x854>)
 800858a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
speed800_shortest.turn45in_L.t_speed=650;
 800858e:	4b6c      	ldr	r3, [pc, #432]	; (8008740 <input_parameter+0x84c>)
 8008590:	4a6e      	ldr	r2, [pc, #440]	; (800874c <input_parameter+0x858>)
 8008592:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
speed800_shortest.turn45in_L.t_acc=15000;
 8008596:	4b6a      	ldr	r3, [pc, #424]	; (8008740 <input_parameter+0x84c>)
 8008598:	4a6d      	ldr	r2, [pc, #436]	; (8008750 <input_parameter+0x85c>)
 800859a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
speed800_shortest.turn45in_L.f_ofset=50;
 800859e:	4b68      	ldr	r3, [pc, #416]	; (8008740 <input_parameter+0x84c>)
 80085a0:	4a6e      	ldr	r2, [pc, #440]	; (800875c <input_parameter+0x868>)
 80085a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
speed800_shortest.turn45in_L.e_ofset=44;
 80085a6:	4b66      	ldr	r3, [pc, #408]	; (8008740 <input_parameter+0x84c>)
 80085a8:	4a6d      	ldr	r2, [pc, #436]	; (8008760 <input_parameter+0x86c>)
 80085aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

speed800_shortest.turn135in_R.g_speed=500;
 80085ae:	4b64      	ldr	r3, [pc, #400]	; (8008740 <input_parameter+0x84c>)
 80085b0:	4a65      	ldr	r2, [pc, #404]	; (8008748 <input_parameter+0x854>)
 80085b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
speed800_shortest.turn135in_R.t_speed=650;
 80085b6:	4b62      	ldr	r3, [pc, #392]	; (8008740 <input_parameter+0x84c>)
 80085b8:	4a64      	ldr	r2, [pc, #400]	; (800874c <input_parameter+0x858>)
 80085ba:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
speed800_shortest.turn135in_R.t_acc=15000;
 80085be:	4b60      	ldr	r3, [pc, #384]	; (8008740 <input_parameter+0x84c>)
 80085c0:	4a63      	ldr	r2, [pc, #396]	; (8008750 <input_parameter+0x85c>)
 80085c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
speed800_shortest.turn135in_R.f_ofset=55;
 80085c6:	4b5e      	ldr	r3, [pc, #376]	; (8008740 <input_parameter+0x84c>)
 80085c8:	4a62      	ldr	r2, [pc, #392]	; (8008754 <input_parameter+0x860>)
 80085ca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
speed800_shortest.turn135in_R.e_ofset=40;
 80085ce:	4b5c      	ldr	r3, [pc, #368]	; (8008740 <input_parameter+0x84c>)
 80085d0:	4a61      	ldr	r2, [pc, #388]	; (8008758 <input_parameter+0x864>)
 80085d2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

speed800_shortest.turn135in_L.g_speed=500;
 80085d6:	4b5a      	ldr	r3, [pc, #360]	; (8008740 <input_parameter+0x84c>)
 80085d8:	4a5b      	ldr	r2, [pc, #364]	; (8008748 <input_parameter+0x854>)
 80085da:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
speed800_shortest.turn135in_L.t_speed=650;
 80085de:	4b58      	ldr	r3, [pc, #352]	; (8008740 <input_parameter+0x84c>)
 80085e0:	4a5a      	ldr	r2, [pc, #360]	; (800874c <input_parameter+0x858>)
 80085e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
speed800_shortest.turn135in_L.t_acc=15000;
 80085e6:	4b56      	ldr	r3, [pc, #344]	; (8008740 <input_parameter+0x84c>)
 80085e8:	4a59      	ldr	r2, [pc, #356]	; (8008750 <input_parameter+0x85c>)
 80085ea:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
speed800_shortest.turn135in_L.f_ofset=50;
 80085ee:	4b54      	ldr	r3, [pc, #336]	; (8008740 <input_parameter+0x84c>)
 80085f0:	4a5a      	ldr	r2, [pc, #360]	; (800875c <input_parameter+0x868>)
 80085f2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
speed800_shortest.turn135in_L.e_ofset=44;
 80085f6:	4b52      	ldr	r3, [pc, #328]	; (8008740 <input_parameter+0x84c>)
 80085f8:	4a59      	ldr	r2, [pc, #356]	; (8008760 <input_parameter+0x86c>)
 80085fa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

speed800_shortest.turn45out_R.g_speed=500;
 80085fe:	4b50      	ldr	r3, [pc, #320]	; (8008740 <input_parameter+0x84c>)
 8008600:	4a51      	ldr	r2, [pc, #324]	; (8008748 <input_parameter+0x854>)
 8008602:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
speed800_shortest.turn45out_R.t_speed=650;
 8008606:	4b4e      	ldr	r3, [pc, #312]	; (8008740 <input_parameter+0x84c>)
 8008608:	4a50      	ldr	r2, [pc, #320]	; (800874c <input_parameter+0x858>)
 800860a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
speed800_shortest.turn45out_R.t_acc=15000;
 800860e:	4b4c      	ldr	r3, [pc, #304]	; (8008740 <input_parameter+0x84c>)
 8008610:	4a4f      	ldr	r2, [pc, #316]	; (8008750 <input_parameter+0x85c>)
 8008612:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
speed800_shortest.turn45out_R.f_ofset=55;
 8008616:	4b4a      	ldr	r3, [pc, #296]	; (8008740 <input_parameter+0x84c>)
 8008618:	4a4e      	ldr	r2, [pc, #312]	; (8008754 <input_parameter+0x860>)
 800861a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
speed800_shortest.turn45out_R.e_ofset=40;
 800861e:	4b48      	ldr	r3, [pc, #288]	; (8008740 <input_parameter+0x84c>)
 8008620:	4a4d      	ldr	r2, [pc, #308]	; (8008758 <input_parameter+0x864>)
 8008622:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

speed800_shortest.turn45out_L.g_speed=500;
 8008626:	4b46      	ldr	r3, [pc, #280]	; (8008740 <input_parameter+0x84c>)
 8008628:	4a47      	ldr	r2, [pc, #284]	; (8008748 <input_parameter+0x854>)
 800862a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
speed800_shortest.turn45out_L.t_speed=650;
 800862e:	4b44      	ldr	r3, [pc, #272]	; (8008740 <input_parameter+0x84c>)
 8008630:	4a46      	ldr	r2, [pc, #280]	; (800874c <input_parameter+0x858>)
 8008632:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
speed800_shortest.turn45out_L.t_acc=15000;
 8008636:	4b42      	ldr	r3, [pc, #264]	; (8008740 <input_parameter+0x84c>)
 8008638:	4a45      	ldr	r2, [pc, #276]	; (8008750 <input_parameter+0x85c>)
 800863a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
speed800_shortest.turn45out_L.f_ofset=50;
 800863e:	4b40      	ldr	r3, [pc, #256]	; (8008740 <input_parameter+0x84c>)
 8008640:	4a46      	ldr	r2, [pc, #280]	; (800875c <input_parameter+0x868>)
 8008642:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
speed800_shortest.turn45out_L.e_ofset=44;
 8008646:	4b3e      	ldr	r3, [pc, #248]	; (8008740 <input_parameter+0x84c>)
 8008648:	4a45      	ldr	r2, [pc, #276]	; (8008760 <input_parameter+0x86c>)
 800864a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

speed800_shortest.turn135out_R.g_speed=500;
 800864e:	4b3c      	ldr	r3, [pc, #240]	; (8008740 <input_parameter+0x84c>)
 8008650:	4a3d      	ldr	r2, [pc, #244]	; (8008748 <input_parameter+0x854>)
 8008652:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
speed800_shortest.turn135out_R.t_speed=650;
 8008656:	4b3a      	ldr	r3, [pc, #232]	; (8008740 <input_parameter+0x84c>)
 8008658:	4a3c      	ldr	r2, [pc, #240]	; (800874c <input_parameter+0x858>)
 800865a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
speed800_shortest.turn135out_R.t_acc=15000;
 800865e:	4b38      	ldr	r3, [pc, #224]	; (8008740 <input_parameter+0x84c>)
 8008660:	4a3b      	ldr	r2, [pc, #236]	; (8008750 <input_parameter+0x85c>)
 8008662:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
speed800_shortest.turn135out_R.f_ofset=55;
 8008666:	4b36      	ldr	r3, [pc, #216]	; (8008740 <input_parameter+0x84c>)
 8008668:	4a3a      	ldr	r2, [pc, #232]	; (8008754 <input_parameter+0x860>)
 800866a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
speed800_shortest.turn135out_R.e_ofset=40;
 800866e:	4b34      	ldr	r3, [pc, #208]	; (8008740 <input_parameter+0x84c>)
 8008670:	4a39      	ldr	r2, [pc, #228]	; (8008758 <input_parameter+0x864>)
 8008672:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

speed800_shortest.turn135out_L.g_speed=500;
 8008676:	4b32      	ldr	r3, [pc, #200]	; (8008740 <input_parameter+0x84c>)
 8008678:	4a33      	ldr	r2, [pc, #204]	; (8008748 <input_parameter+0x854>)
 800867a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
speed800_shortest.turn135out_L.t_speed=650;
 800867e:	4b30      	ldr	r3, [pc, #192]	; (8008740 <input_parameter+0x84c>)
 8008680:	4a32      	ldr	r2, [pc, #200]	; (800874c <input_parameter+0x858>)
 8008682:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
speed800_shortest.turn135out_L.t_acc=15000;
 8008686:	4b2e      	ldr	r3, [pc, #184]	; (8008740 <input_parameter+0x84c>)
 8008688:	4a31      	ldr	r2, [pc, #196]	; (8008750 <input_parameter+0x85c>)
 800868a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
speed800_shortest.turn135out_L.f_ofset=50;
 800868e:	4b2c      	ldr	r3, [pc, #176]	; (8008740 <input_parameter+0x84c>)
 8008690:	4a32      	ldr	r2, [pc, #200]	; (800875c <input_parameter+0x868>)
 8008692:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
speed800_shortest.turn135out_L.e_ofset=44;
 8008696:	4b2a      	ldr	r3, [pc, #168]	; (8008740 <input_parameter+0x84c>)
 8008698:	4a31      	ldr	r2, [pc, #196]	; (8008760 <input_parameter+0x86c>)
 800869a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

speed800_shortest.V90_R.g_speed=500;
 800869e:	4b28      	ldr	r3, [pc, #160]	; (8008740 <input_parameter+0x84c>)
 80086a0:	4a29      	ldr	r2, [pc, #164]	; (8008748 <input_parameter+0x854>)
 80086a2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
speed800_shortest.V90_R.t_speed=650;
 80086a6:	4b26      	ldr	r3, [pc, #152]	; (8008740 <input_parameter+0x84c>)
 80086a8:	4a28      	ldr	r2, [pc, #160]	; (800874c <input_parameter+0x858>)
 80086aa:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
speed800_shortest.V90_R.t_acc=15000;
 80086ae:	4b24      	ldr	r3, [pc, #144]	; (8008740 <input_parameter+0x84c>)
 80086b0:	4a27      	ldr	r2, [pc, #156]	; (8008750 <input_parameter+0x85c>)
 80086b2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
speed800_shortest.V90_R.f_ofset=55;
 80086b6:	4b22      	ldr	r3, [pc, #136]	; (8008740 <input_parameter+0x84c>)
 80086b8:	4a26      	ldr	r2, [pc, #152]	; (8008754 <input_parameter+0x860>)
 80086ba:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
speed800_shortest.V90_R.e_ofset=40;
 80086be:	4b20      	ldr	r3, [pc, #128]	; (8008740 <input_parameter+0x84c>)
 80086c0:	4a25      	ldr	r2, [pc, #148]	; (8008758 <input_parameter+0x864>)
 80086c2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

speed800_shortest.V90_L.g_speed=500;
 80086c6:	4b1e      	ldr	r3, [pc, #120]	; (8008740 <input_parameter+0x84c>)
 80086c8:	4a1f      	ldr	r2, [pc, #124]	; (8008748 <input_parameter+0x854>)
 80086ca:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
speed800_shortest.V90_L.t_speed=650;
 80086ce:	4b1c      	ldr	r3, [pc, #112]	; (8008740 <input_parameter+0x84c>)
 80086d0:	4a1e      	ldr	r2, [pc, #120]	; (800874c <input_parameter+0x858>)
 80086d2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
speed800_shortest.V90_L.t_acc=15000;
 80086d6:	4b1a      	ldr	r3, [pc, #104]	; (8008740 <input_parameter+0x84c>)
 80086d8:	4a1d      	ldr	r2, [pc, #116]	; (8008750 <input_parameter+0x85c>)
 80086da:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
speed800_shortest.V90_L.f_ofset=50;
 80086de:	4b18      	ldr	r3, [pc, #96]	; (8008740 <input_parameter+0x84c>)
 80086e0:	4a1e      	ldr	r2, [pc, #120]	; (800875c <input_parameter+0x868>)
 80086e2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
speed800_shortest.V90_L.e_ofset=44;
 80086e6:	4b16      	ldr	r3, [pc, #88]	; (8008740 <input_parameter+0x84c>)
 80086e8:	4a1d      	ldr	r2, [pc, #116]	; (8008760 <input_parameter+0x86c>)
 80086ea:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

//*********************************1000********************************************

speed1000_shortest.slalom_R.g_speed=1000;
 80086ee:	4b1d      	ldr	r3, [pc, #116]	; (8008764 <input_parameter+0x870>)
 80086f0:	4a1d      	ldr	r2, [pc, #116]	; (8008768 <input_parameter+0x874>)
 80086f2:	601a      	str	r2, [r3, #0]
speed1000_shortest.slalom_R.t_speed=550;
 80086f4:	4b1b      	ldr	r3, [pc, #108]	; (8008764 <input_parameter+0x870>)
 80086f6:	4a1d      	ldr	r2, [pc, #116]	; (800876c <input_parameter+0x878>)
 80086f8:	60da      	str	r2, [r3, #12]
speed1000_shortest.slalom_R.t_acc=12000;
 80086fa:	4b1a      	ldr	r3, [pc, #104]	; (8008764 <input_parameter+0x870>)
 80086fc:	4a1c      	ldr	r2, [pc, #112]	; (8008770 <input_parameter+0x87c>)
 80086fe:	611a      	str	r2, [r3, #16]
speed1000_shortest.slalom_R.f_ofset=30;
 8008700:	4b18      	ldr	r3, [pc, #96]	; (8008764 <input_parameter+0x870>)
 8008702:	4a1c      	ldr	r2, [pc, #112]	; (8008774 <input_parameter+0x880>)
 8008704:	605a      	str	r2, [r3, #4]
speed1000_shortest.slalom_R.e_ofset=60;
 8008706:	4b17      	ldr	r3, [pc, #92]	; (8008764 <input_parameter+0x870>)
 8008708:	4a1b      	ldr	r2, [pc, #108]	; (8008778 <input_parameter+0x884>)
 800870a:	609a      	str	r2, [r3, #8]

speed1000_shortest.slalom_L.g_speed=1000;
 800870c:	4b15      	ldr	r3, [pc, #84]	; (8008764 <input_parameter+0x870>)
 800870e:	4a16      	ldr	r2, [pc, #88]	; (8008768 <input_parameter+0x874>)
 8008710:	615a      	str	r2, [r3, #20]
speed1000_shortest.slalom_L.t_speed=550;
 8008712:	4b14      	ldr	r3, [pc, #80]	; (8008764 <input_parameter+0x870>)
 8008714:	4a15      	ldr	r2, [pc, #84]	; (800876c <input_parameter+0x878>)
 8008716:	621a      	str	r2, [r3, #32]
speed1000_shortest.slalom_L.t_acc=12000;
 8008718:	4b12      	ldr	r3, [pc, #72]	; (8008764 <input_parameter+0x870>)
 800871a:	4a15      	ldr	r2, [pc, #84]	; (8008770 <input_parameter+0x87c>)
 800871c:	625a      	str	r2, [r3, #36]	; 0x24
speed1000_shortest.slalom_L.f_ofset=30;
 800871e:	4b11      	ldr	r3, [pc, #68]	; (8008764 <input_parameter+0x870>)
 8008720:	4a14      	ldr	r2, [pc, #80]	; (8008774 <input_parameter+0x880>)
 8008722:	619a      	str	r2, [r3, #24]
speed1000_shortest.slalom_L.e_ofset=60;
 8008724:	4b0f      	ldr	r3, [pc, #60]	; (8008764 <input_parameter+0x870>)
 8008726:	4a14      	ldr	r2, [pc, #80]	; (8008778 <input_parameter+0x884>)
 8008728:	61da      	str	r2, [r3, #28]

speed1000_shortest.turn90_R.g_speed=1000;
 800872a:	4b0e      	ldr	r3, [pc, #56]	; (8008764 <input_parameter+0x870>)
 800872c:	4a0e      	ldr	r2, [pc, #56]	; (8008768 <input_parameter+0x874>)
 800872e:	629a      	str	r2, [r3, #40]	; 0x28
speed1000_shortest.turn90_R.t_speed=400;
 8008730:	4b0c      	ldr	r3, [pc, #48]	; (8008764 <input_parameter+0x870>)
 8008732:	4a12      	ldr	r2, [pc, #72]	; (800877c <input_parameter+0x888>)
 8008734:	635a      	str	r2, [r3, #52]	; 0x34
speed1000_shortest.turn90_R.t_acc=12000;
 8008736:	4b0b      	ldr	r3, [pc, #44]	; (8008764 <input_parameter+0x870>)
 8008738:	4a0d      	ldr	r2, [pc, #52]	; (8008770 <input_parameter+0x87c>)
 800873a:	639a      	str	r2, [r3, #56]	; 0x38
speed1000_shortest.turn90_R.f_ofset=30;
 800873c:	4b09      	ldr	r3, [pc, #36]	; (8008764 <input_parameter+0x870>)
 800873e:	e01f      	b.n	8008780 <input_parameter+0x88c>
 8008740:	20000cd0 	.word	0x20000cd0
 8008744:	40a00000 	.word	0x40a00000
 8008748:	43fa0000 	.word	0x43fa0000
 800874c:	44228000 	.word	0x44228000
 8008750:	466a6000 	.word	0x466a6000
 8008754:	425c0000 	.word	0x425c0000
 8008758:	42200000 	.word	0x42200000
 800875c:	42480000 	.word	0x42480000
 8008760:	42300000 	.word	0x42300000
 8008764:	20000e10 	.word	0x20000e10
 8008768:	447a0000 	.word	0x447a0000
 800876c:	44098000 	.word	0x44098000
 8008770:	463b8000 	.word	0x463b8000
 8008774:	41f00000 	.word	0x41f00000
 8008778:	42700000 	.word	0x42700000
 800877c:	43c80000 	.word	0x43c80000
 8008780:	4a7e      	ldr	r2, [pc, #504]	; (800897c <input_parameter+0xa88>)
 8008782:	62da      	str	r2, [r3, #44]	; 0x2c
speed1000_shortest.turn90_R.e_ofset=60;
 8008784:	4b7e      	ldr	r3, [pc, #504]	; (8008980 <input_parameter+0xa8c>)
 8008786:	4a7f      	ldr	r2, [pc, #508]	; (8008984 <input_parameter+0xa90>)
 8008788:	631a      	str	r2, [r3, #48]	; 0x30

speed1000_shortest.turn90_L.g_speed=1000;
 800878a:	4b7d      	ldr	r3, [pc, #500]	; (8008980 <input_parameter+0xa8c>)
 800878c:	4a7e      	ldr	r2, [pc, #504]	; (8008988 <input_parameter+0xa94>)
 800878e:	63da      	str	r2, [r3, #60]	; 0x3c
speed1000_shortest.turn90_L.t_speed=400;
 8008790:	4b7b      	ldr	r3, [pc, #492]	; (8008980 <input_parameter+0xa8c>)
 8008792:	4a7e      	ldr	r2, [pc, #504]	; (800898c <input_parameter+0xa98>)
 8008794:	649a      	str	r2, [r3, #72]	; 0x48
speed1000_shortest.turn90_L.t_acc=12000;
 8008796:	4b7a      	ldr	r3, [pc, #488]	; (8008980 <input_parameter+0xa8c>)
 8008798:	4a7d      	ldr	r2, [pc, #500]	; (8008990 <input_parameter+0xa9c>)
 800879a:	64da      	str	r2, [r3, #76]	; 0x4c
speed1000_shortest.turn90_L.f_ofset=30;
 800879c:	4b78      	ldr	r3, [pc, #480]	; (8008980 <input_parameter+0xa8c>)
 800879e:	4a77      	ldr	r2, [pc, #476]	; (800897c <input_parameter+0xa88>)
 80087a0:	641a      	str	r2, [r3, #64]	; 0x40
speed1000_shortest.turn90_L.e_ofset=60;
 80087a2:	4b77      	ldr	r3, [pc, #476]	; (8008980 <input_parameter+0xa8c>)
 80087a4:	4a77      	ldr	r2, [pc, #476]	; (8008984 <input_parameter+0xa90>)
 80087a6:	645a      	str	r2, [r3, #68]	; 0x44

speed1000_shortest.turn180_R.g_speed=1000;
 80087a8:	4b75      	ldr	r3, [pc, #468]	; (8008980 <input_parameter+0xa8c>)
 80087aa:	4a77      	ldr	r2, [pc, #476]	; (8008988 <input_parameter+0xa94>)
 80087ac:	651a      	str	r2, [r3, #80]	; 0x50
speed1000_shortest.turn180_R.t_speed=500;
 80087ae:	4b74      	ldr	r3, [pc, #464]	; (8008980 <input_parameter+0xa8c>)
 80087b0:	4a78      	ldr	r2, [pc, #480]	; (8008994 <input_parameter+0xaa0>)
 80087b2:	65da      	str	r2, [r3, #92]	; 0x5c
speed1000_shortest.turn180_R.t_acc=10000;
 80087b4:	4b72      	ldr	r3, [pc, #456]	; (8008980 <input_parameter+0xa8c>)
 80087b6:	4a78      	ldr	r2, [pc, #480]	; (8008998 <input_parameter+0xaa4>)
 80087b8:	661a      	str	r2, [r3, #96]	; 0x60
speed1000_shortest.turn180_R.f_ofset=30;
 80087ba:	4b71      	ldr	r3, [pc, #452]	; (8008980 <input_parameter+0xa8c>)
 80087bc:	4a6f      	ldr	r2, [pc, #444]	; (800897c <input_parameter+0xa88>)
 80087be:	655a      	str	r2, [r3, #84]	; 0x54
speed1000_shortest.turn180_R.e_ofset=70;
 80087c0:	4b6f      	ldr	r3, [pc, #444]	; (8008980 <input_parameter+0xa8c>)
 80087c2:	4a76      	ldr	r2, [pc, #472]	; (800899c <input_parameter+0xaa8>)
 80087c4:	659a      	str	r2, [r3, #88]	; 0x58

speed1000_shortest.turn180_L.g_speed=1000;
 80087c6:	4b6e      	ldr	r3, [pc, #440]	; (8008980 <input_parameter+0xa8c>)
 80087c8:	4a6f      	ldr	r2, [pc, #444]	; (8008988 <input_parameter+0xa94>)
 80087ca:	665a      	str	r2, [r3, #100]	; 0x64
speed1000_shortest.turn180_L.t_speed=500;
 80087cc:	4b6c      	ldr	r3, [pc, #432]	; (8008980 <input_parameter+0xa8c>)
 80087ce:	4a71      	ldr	r2, [pc, #452]	; (8008994 <input_parameter+0xaa0>)
 80087d0:	671a      	str	r2, [r3, #112]	; 0x70
speed1000_shortest.turn180_L.t_acc=10000;
 80087d2:	4b6b      	ldr	r3, [pc, #428]	; (8008980 <input_parameter+0xa8c>)
 80087d4:	4a70      	ldr	r2, [pc, #448]	; (8008998 <input_parameter+0xaa4>)
 80087d6:	675a      	str	r2, [r3, #116]	; 0x74
speed1000_shortest.turn180_L.f_ofset=30;
 80087d8:	4b69      	ldr	r3, [pc, #420]	; (8008980 <input_parameter+0xa8c>)
 80087da:	4a68      	ldr	r2, [pc, #416]	; (800897c <input_parameter+0xa88>)
 80087dc:	669a      	str	r2, [r3, #104]	; 0x68
speed1000_shortest.turn180_L.e_ofset=70;
 80087de:	4b68      	ldr	r3, [pc, #416]	; (8008980 <input_parameter+0xa8c>)
 80087e0:	4a6e      	ldr	r2, [pc, #440]	; (800899c <input_parameter+0xaa8>)
 80087e2:	66da      	str	r2, [r3, #108]	; 0x6c

speed1000_shortest.turn45in_R.g_speed=1000;
 80087e4:	4b66      	ldr	r3, [pc, #408]	; (8008980 <input_parameter+0xa8c>)
 80087e6:	4a68      	ldr	r2, [pc, #416]	; (8008988 <input_parameter+0xa94>)
 80087e8:	679a      	str	r2, [r3, #120]	; 0x78
speed1000_shortest.turn45in_R.t_speed=750;
 80087ea:	4b65      	ldr	r3, [pc, #404]	; (8008980 <input_parameter+0xa8c>)
 80087ec:	4a6c      	ldr	r2, [pc, #432]	; (80089a0 <input_parameter+0xaac>)
 80087ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
speed1000_shortest.turn45in_R.t_acc=12000;
 80087f2:	4b63      	ldr	r3, [pc, #396]	; (8008980 <input_parameter+0xa8c>)
 80087f4:	4a66      	ldr	r2, [pc, #408]	; (8008990 <input_parameter+0xa9c>)
 80087f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
speed1000_shortest.turn45in_R.f_ofset=20;
 80087fa:	4b61      	ldr	r3, [pc, #388]	; (8008980 <input_parameter+0xa8c>)
 80087fc:	4a69      	ldr	r2, [pc, #420]	; (80089a4 <input_parameter+0xab0>)
 80087fe:	67da      	str	r2, [r3, #124]	; 0x7c
speed1000_shortest.turn45in_R.e_ofset=70;
 8008800:	4b5f      	ldr	r3, [pc, #380]	; (8008980 <input_parameter+0xa8c>)
 8008802:	4a66      	ldr	r2, [pc, #408]	; (800899c <input_parameter+0xaa8>)
 8008804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

speed1000_shortest.turn45in_L.g_speed=1000;
 8008808:	4b5d      	ldr	r3, [pc, #372]	; (8008980 <input_parameter+0xa8c>)
 800880a:	4a5f      	ldr	r2, [pc, #380]	; (8008988 <input_parameter+0xa94>)
 800880c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
speed1000_shortest.turn45in_L.t_speed=750;
 8008810:	4b5b      	ldr	r3, [pc, #364]	; (8008980 <input_parameter+0xa8c>)
 8008812:	4a63      	ldr	r2, [pc, #396]	; (80089a0 <input_parameter+0xaac>)
 8008814:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
speed1000_shortest.turn45in_L.t_acc=12000;
 8008818:	4b59      	ldr	r3, [pc, #356]	; (8008980 <input_parameter+0xa8c>)
 800881a:	4a5d      	ldr	r2, [pc, #372]	; (8008990 <input_parameter+0xa9c>)
 800881c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
speed1000_shortest.turn45in_L.f_ofset=20;
 8008820:	4b57      	ldr	r3, [pc, #348]	; (8008980 <input_parameter+0xa8c>)
 8008822:	4a60      	ldr	r2, [pc, #384]	; (80089a4 <input_parameter+0xab0>)
 8008824:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
speed1000_shortest.turn45in_L.e_ofset=70;
 8008828:	4b55      	ldr	r3, [pc, #340]	; (8008980 <input_parameter+0xa8c>)
 800882a:	4a5c      	ldr	r2, [pc, #368]	; (800899c <input_parameter+0xaa8>)
 800882c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

speed1000_shortest.turn135in_R.g_speed=1000;
 8008830:	4b53      	ldr	r3, [pc, #332]	; (8008980 <input_parameter+0xa8c>)
 8008832:	4a55      	ldr	r2, [pc, #340]	; (8008988 <input_parameter+0xa94>)
 8008834:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
speed1000_shortest.turn135in_R.t_speed=680;
 8008838:	4b51      	ldr	r3, [pc, #324]	; (8008980 <input_parameter+0xa8c>)
 800883a:	4a5b      	ldr	r2, [pc, #364]	; (80089a8 <input_parameter+0xab4>)
 800883c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
speed1000_shortest.turn135in_R.t_acc=14000;
 8008840:	4b4f      	ldr	r3, [pc, #316]	; (8008980 <input_parameter+0xa8c>)
 8008842:	4a5a      	ldr	r2, [pc, #360]	; (80089ac <input_parameter+0xab8>)
 8008844:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
speed1000_shortest.turn135in_R.f_ofset=20;
 8008848:	4b4d      	ldr	r3, [pc, #308]	; (8008980 <input_parameter+0xa8c>)
 800884a:	4a56      	ldr	r2, [pc, #344]	; (80089a4 <input_parameter+0xab0>)
 800884c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
speed1000_shortest.turn135in_R.e_ofset=50;
 8008850:	4b4b      	ldr	r3, [pc, #300]	; (8008980 <input_parameter+0xa8c>)
 8008852:	4a57      	ldr	r2, [pc, #348]	; (80089b0 <input_parameter+0xabc>)
 8008854:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

speed1000_shortest.turn135in_L.g_speed=1000;
 8008858:	4b49      	ldr	r3, [pc, #292]	; (8008980 <input_parameter+0xa8c>)
 800885a:	4a4b      	ldr	r2, [pc, #300]	; (8008988 <input_parameter+0xa94>)
 800885c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
speed1000_shortest.turn135in_L.t_speed=680;
 8008860:	4b47      	ldr	r3, [pc, #284]	; (8008980 <input_parameter+0xa8c>)
 8008862:	4a51      	ldr	r2, [pc, #324]	; (80089a8 <input_parameter+0xab4>)
 8008864:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
speed1000_shortest.turn135in_L.t_acc=14000;
 8008868:	4b45      	ldr	r3, [pc, #276]	; (8008980 <input_parameter+0xa8c>)
 800886a:	4a50      	ldr	r2, [pc, #320]	; (80089ac <input_parameter+0xab8>)
 800886c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
speed1000_shortest.turn135in_L.f_ofset=20;
 8008870:	4b43      	ldr	r3, [pc, #268]	; (8008980 <input_parameter+0xa8c>)
 8008872:	4a4c      	ldr	r2, [pc, #304]	; (80089a4 <input_parameter+0xab0>)
 8008874:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
speed1000_shortest.turn135in_L.e_ofset=50;
 8008878:	4b41      	ldr	r3, [pc, #260]	; (8008980 <input_parameter+0xa8c>)
 800887a:	4a4d      	ldr	r2, [pc, #308]	; (80089b0 <input_parameter+0xabc>)
 800887c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

speed1000_shortest.turn45out_R.g_speed=1000;
 8008880:	4b3f      	ldr	r3, [pc, #252]	; (8008980 <input_parameter+0xa8c>)
 8008882:	4a41      	ldr	r2, [pc, #260]	; (8008988 <input_parameter+0xa94>)
 8008884:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
speed1000_shortest.turn45out_R.t_speed=750;
 8008888:	4b3d      	ldr	r3, [pc, #244]	; (8008980 <input_parameter+0xa8c>)
 800888a:	4a45      	ldr	r2, [pc, #276]	; (80089a0 <input_parameter+0xaac>)
 800888c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
speed1000_shortest.turn45out_R.t_acc=14000;
 8008890:	4b3b      	ldr	r3, [pc, #236]	; (8008980 <input_parameter+0xa8c>)
 8008892:	4a46      	ldr	r2, [pc, #280]	; (80089ac <input_parameter+0xab8>)
 8008894:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
speed1000_shortest.turn45out_R.f_ofset=50;
 8008898:	4b39      	ldr	r3, [pc, #228]	; (8008980 <input_parameter+0xa8c>)
 800889a:	4a45      	ldr	r2, [pc, #276]	; (80089b0 <input_parameter+0xabc>)
 800889c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
speed1000_shortest.turn45out_R.e_ofset=50;
 80088a0:	4b37      	ldr	r3, [pc, #220]	; (8008980 <input_parameter+0xa8c>)
 80088a2:	4a43      	ldr	r2, [pc, #268]	; (80089b0 <input_parameter+0xabc>)
 80088a4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

speed1000_shortest.turn45out_L.g_speed=1000;
 80088a8:	4b35      	ldr	r3, [pc, #212]	; (8008980 <input_parameter+0xa8c>)
 80088aa:	4a37      	ldr	r2, [pc, #220]	; (8008988 <input_parameter+0xa94>)
 80088ac:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
speed1000_shortest.turn45out_L.t_speed=750;
 80088b0:	4b33      	ldr	r3, [pc, #204]	; (8008980 <input_parameter+0xa8c>)
 80088b2:	4a3b      	ldr	r2, [pc, #236]	; (80089a0 <input_parameter+0xaac>)
 80088b4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
speed1000_shortest.turn45out_L.t_acc=14000;
 80088b8:	4b31      	ldr	r3, [pc, #196]	; (8008980 <input_parameter+0xa8c>)
 80088ba:	4a3c      	ldr	r2, [pc, #240]	; (80089ac <input_parameter+0xab8>)
 80088bc:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
speed1000_shortest.turn45out_L.f_ofset=50;
 80088c0:	4b2f      	ldr	r3, [pc, #188]	; (8008980 <input_parameter+0xa8c>)
 80088c2:	4a3b      	ldr	r2, [pc, #236]	; (80089b0 <input_parameter+0xabc>)
 80088c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
speed1000_shortest.turn45out_L.e_ofset=50;
 80088c8:	4b2d      	ldr	r3, [pc, #180]	; (8008980 <input_parameter+0xa8c>)
 80088ca:	4a39      	ldr	r2, [pc, #228]	; (80089b0 <input_parameter+0xabc>)
 80088cc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

speed1000_shortest.turn135out_R.g_speed=1000;
 80088d0:	4b2b      	ldr	r3, [pc, #172]	; (8008980 <input_parameter+0xa8c>)
 80088d2:	4a2d      	ldr	r2, [pc, #180]	; (8008988 <input_parameter+0xa94>)
 80088d4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
speed1000_shortest.turn135out_R.t_speed=770;
 80088d8:	4b29      	ldr	r3, [pc, #164]	; (8008980 <input_parameter+0xa8c>)
 80088da:	4a36      	ldr	r2, [pc, #216]	; (80089b4 <input_parameter+0xac0>)
 80088dc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
speed1000_shortest.turn135out_R.t_acc=14000;
 80088e0:	4b27      	ldr	r3, [pc, #156]	; (8008980 <input_parameter+0xa8c>)
 80088e2:	4a32      	ldr	r2, [pc, #200]	; (80089ac <input_parameter+0xab8>)
 80088e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
speed1000_shortest.turn135out_R.f_ofset=30;
 80088e8:	4b25      	ldr	r3, [pc, #148]	; (8008980 <input_parameter+0xa8c>)
 80088ea:	4a24      	ldr	r2, [pc, #144]	; (800897c <input_parameter+0xa88>)
 80088ec:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
speed1000_shortest.turn135out_R.e_ofset=90;
 80088f0:	4b23      	ldr	r3, [pc, #140]	; (8008980 <input_parameter+0xa8c>)
 80088f2:	4a31      	ldr	r2, [pc, #196]	; (80089b8 <input_parameter+0xac4>)
 80088f4:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

speed1000_shortest.turn135out_L.g_speed=1000;
 80088f8:	4b21      	ldr	r3, [pc, #132]	; (8008980 <input_parameter+0xa8c>)
 80088fa:	4a23      	ldr	r2, [pc, #140]	; (8008988 <input_parameter+0xa94>)
 80088fc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
speed1000_shortest.turn135out_L.t_speed=770;
 8008900:	4b1f      	ldr	r3, [pc, #124]	; (8008980 <input_parameter+0xa8c>)
 8008902:	4a2c      	ldr	r2, [pc, #176]	; (80089b4 <input_parameter+0xac0>)
 8008904:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
speed1000_shortest.turn135out_L.t_acc=14000;
 8008908:	4b1d      	ldr	r3, [pc, #116]	; (8008980 <input_parameter+0xa8c>)
 800890a:	4a28      	ldr	r2, [pc, #160]	; (80089ac <input_parameter+0xab8>)
 800890c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
speed1000_shortest.turn135out_L.f_ofset=30;
 8008910:	4b1b      	ldr	r3, [pc, #108]	; (8008980 <input_parameter+0xa8c>)
 8008912:	4a1a      	ldr	r2, [pc, #104]	; (800897c <input_parameter+0xa88>)
 8008914:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
speed1000_shortest.turn135out_L.e_ofset=90;
 8008918:	4b19      	ldr	r3, [pc, #100]	; (8008980 <input_parameter+0xa8c>)
 800891a:	4a27      	ldr	r2, [pc, #156]	; (80089b8 <input_parameter+0xac4>)
 800891c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

speed1000_shortest.V90_R.g_speed=1000;
 8008920:	4b17      	ldr	r3, [pc, #92]	; (8008980 <input_parameter+0xa8c>)
 8008922:	4a19      	ldr	r2, [pc, #100]	; (8008988 <input_parameter+0xa94>)
 8008924:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
speed1000_shortest.V90_R.t_speed=950;
 8008928:	4b15      	ldr	r3, [pc, #84]	; (8008980 <input_parameter+0xa8c>)
 800892a:	4a24      	ldr	r2, [pc, #144]	; (80089bc <input_parameter+0xac8>)
 800892c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
speed1000_shortest.V90_R.t_acc=18000;
 8008930:	4b13      	ldr	r3, [pc, #76]	; (8008980 <input_parameter+0xa8c>)
 8008932:	4a23      	ldr	r2, [pc, #140]	; (80089c0 <input_parameter+0xacc>)
 8008934:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
speed1000_shortest.V90_R.f_ofset=20;
 8008938:	4b11      	ldr	r3, [pc, #68]	; (8008980 <input_parameter+0xa8c>)
 800893a:	4a1a      	ldr	r2, [pc, #104]	; (80089a4 <input_parameter+0xab0>)
 800893c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
speed1000_shortest.V90_R.e_ofset=60;
 8008940:	4b0f      	ldr	r3, [pc, #60]	; (8008980 <input_parameter+0xa8c>)
 8008942:	4a10      	ldr	r2, [pc, #64]	; (8008984 <input_parameter+0xa90>)
 8008944:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

speed1000_shortest.V90_L.g_speed=1000;
 8008948:	4b0d      	ldr	r3, [pc, #52]	; (8008980 <input_parameter+0xa8c>)
 800894a:	4a0f      	ldr	r2, [pc, #60]	; (8008988 <input_parameter+0xa94>)
 800894c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
speed1000_shortest.V90_L.t_speed=950;
 8008950:	4b0b      	ldr	r3, [pc, #44]	; (8008980 <input_parameter+0xa8c>)
 8008952:	4a1a      	ldr	r2, [pc, #104]	; (80089bc <input_parameter+0xac8>)
 8008954:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
speed1000_shortest.V90_L.t_acc=18000;
 8008958:	4b09      	ldr	r3, [pc, #36]	; (8008980 <input_parameter+0xa8c>)
 800895a:	4a19      	ldr	r2, [pc, #100]	; (80089c0 <input_parameter+0xacc>)
 800895c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
speed1000_shortest.V90_L.f_ofset=20;
 8008960:	4b07      	ldr	r3, [pc, #28]	; (8008980 <input_parameter+0xa8c>)
 8008962:	4a10      	ldr	r2, [pc, #64]	; (80089a4 <input_parameter+0xab0>)
 8008964:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
speed1000_shortest.V90_L.e_ofset=60;
 8008968:	4b05      	ldr	r3, [pc, #20]	; (8008980 <input_parameter+0xa8c>)
 800896a:	4a06      	ldr	r2, [pc, #24]	; (8008984 <input_parameter+0xa90>)
 800896c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134




}
 8008970:	bf00      	nop
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	41f00000 	.word	0x41f00000
 8008980:	20000e10 	.word	0x20000e10
 8008984:	42700000 	.word	0x42700000
 8008988:	447a0000 	.word	0x447a0000
 800898c:	43c80000 	.word	0x43c80000
 8008990:	463b8000 	.word	0x463b8000
 8008994:	43fa0000 	.word	0x43fa0000
 8008998:	461c4000 	.word	0x461c4000
 800899c:	428c0000 	.word	0x428c0000
 80089a0:	443b8000 	.word	0x443b8000
 80089a4:	41a00000 	.word	0x41a00000
 80089a8:	442a0000 	.word	0x442a0000
 80089ac:	465ac000 	.word	0x465ac000
 80089b0:	42480000 	.word	0x42480000
 80089b4:	44408000 	.word	0x44408000
 80089b8:	42b40000 	.word	0x42b40000
 80089bc:	446d8000 	.word	0x446d8000
 80089c0:	468ca000 	.word	0x468ca000

080089c4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80089c8:	4b14      	ldr	r3, [pc, #80]	; (8008a1c <MX_USART2_UART_Init+0x58>)
 80089ca:	4a15      	ldr	r2, [pc, #84]	; (8008a20 <MX_USART2_UART_Init+0x5c>)
 80089cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80089ce:	4b13      	ldr	r3, [pc, #76]	; (8008a1c <MX_USART2_UART_Init+0x58>)
 80089d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80089d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80089d6:	4b11      	ldr	r3, [pc, #68]	; (8008a1c <MX_USART2_UART_Init+0x58>)
 80089d8:	2200      	movs	r2, #0
 80089da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80089dc:	4b0f      	ldr	r3, [pc, #60]	; (8008a1c <MX_USART2_UART_Init+0x58>)
 80089de:	2200      	movs	r2, #0
 80089e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80089e2:	4b0e      	ldr	r3, [pc, #56]	; (8008a1c <MX_USART2_UART_Init+0x58>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80089e8:	4b0c      	ldr	r3, [pc, #48]	; (8008a1c <MX_USART2_UART_Init+0x58>)
 80089ea:	220c      	movs	r2, #12
 80089ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80089ee:	4b0b      	ldr	r3, [pc, #44]	; (8008a1c <MX_USART2_UART_Init+0x58>)
 80089f0:	2200      	movs	r2, #0
 80089f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80089f4:	4b09      	ldr	r3, [pc, #36]	; (8008a1c <MX_USART2_UART_Init+0x58>)
 80089f6:	2200      	movs	r2, #0
 80089f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80089fa:	4b08      	ldr	r3, [pc, #32]	; (8008a1c <MX_USART2_UART_Init+0x58>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008a00:	4b06      	ldr	r3, [pc, #24]	; (8008a1c <MX_USART2_UART_Init+0x58>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008a06:	4805      	ldr	r0, [pc, #20]	; (8008a1c <MX_USART2_UART_Init+0x58>)
 8008a08:	f004 ff74 	bl	800d8f4 <HAL_UART_Init>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d001      	beq.n	8008a16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8008a12:	f7fb fc00 	bl	8004216 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008a16:	bf00      	nop
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	200013b4 	.word	0x200013b4
 8008a20:	40004400 	.word	0x40004400

08008a24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b09e      	sub	sp, #120	; 0x78
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008a30:	2200      	movs	r2, #0
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	605a      	str	r2, [r3, #4]
 8008a36:	609a      	str	r2, [r3, #8]
 8008a38:	60da      	str	r2, [r3, #12]
 8008a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008a3c:	f107 0310 	add.w	r3, r7, #16
 8008a40:	2254      	movs	r2, #84	; 0x54
 8008a42:	2100      	movs	r1, #0
 8008a44:	4618      	mov	r0, r3
 8008a46:	f005 fc05 	bl	800e254 <memset>
  if(uartHandle->Instance==USART2)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a28      	ldr	r2, [pc, #160]	; (8008af0 <HAL_UART_MspInit+0xcc>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d148      	bne.n	8008ae6 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008a54:	2302      	movs	r3, #2
 8008a56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008a5c:	f107 0310 	add.w	r3, r7, #16
 8008a60:	4618      	mov	r0, r3
 8008a62:	f003 fb8f 	bl	800c184 <HAL_RCCEx_PeriphCLKConfig>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d001      	beq.n	8008a70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8008a6c:	f7fb fbd3 	bl	8004216 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008a70:	4b20      	ldr	r3, [pc, #128]	; (8008af4 <HAL_UART_MspInit+0xd0>)
 8008a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a74:	4a1f      	ldr	r2, [pc, #124]	; (8008af4 <HAL_UART_MspInit+0xd0>)
 8008a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8008a7c:	4b1d      	ldr	r3, [pc, #116]	; (8008af4 <HAL_UART_MspInit+0xd0>)
 8008a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a84:	60fb      	str	r3, [r7, #12]
 8008a86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a88:	4b1a      	ldr	r3, [pc, #104]	; (8008af4 <HAL_UART_MspInit+0xd0>)
 8008a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a8c:	4a19      	ldr	r2, [pc, #100]	; (8008af4 <HAL_UART_MspInit+0xd0>)
 8008a8e:	f043 0301 	orr.w	r3, r3, #1
 8008a92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a94:	4b17      	ldr	r3, [pc, #92]	; (8008af4 <HAL_UART_MspInit+0xd0>)
 8008a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a98:	f003 0301 	and.w	r3, r3, #1
 8008a9c:	60bb      	str	r3, [r7, #8]
 8008a9e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8008aa0:	2304      	movs	r3, #4
 8008aa2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008aac:	2303      	movs	r3, #3
 8008aae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008ab0:	2307      	movs	r3, #7
 8008ab2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8008ab4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008ab8:	4619      	mov	r1, r3
 8008aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008abe:	f001 ffa1 	bl	800aa04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8008ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ac6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ac8:	2302      	movs	r3, #2
 8008aca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008acc:	2300      	movs	r3, #0
 8008ace:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8008ad8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008adc:	4619      	mov	r1, r3
 8008ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008ae2:	f001 ff8f 	bl	800aa04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8008ae6:	bf00      	nop
 8008ae8:	3778      	adds	r7, #120	; 0x78
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	40004400 	.word	0x40004400
 8008af4:	40021000 	.word	0x40021000

08008af8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008b30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008afc:	f7fe ff48 	bl	8007990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008b00:	480c      	ldr	r0, [pc, #48]	; (8008b34 <LoopForever+0x6>)
  ldr r1, =_edata
 8008b02:	490d      	ldr	r1, [pc, #52]	; (8008b38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008b04:	4a0d      	ldr	r2, [pc, #52]	; (8008b3c <LoopForever+0xe>)
  movs r3, #0
 8008b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008b08:	e002      	b.n	8008b10 <LoopCopyDataInit>

08008b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008b0e:	3304      	adds	r3, #4

08008b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008b14:	d3f9      	bcc.n	8008b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008b16:	4a0a      	ldr	r2, [pc, #40]	; (8008b40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008b18:	4c0a      	ldr	r4, [pc, #40]	; (8008b44 <LoopForever+0x16>)
  movs r3, #0
 8008b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008b1c:	e001      	b.n	8008b22 <LoopFillZerobss>

08008b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008b20:	3204      	adds	r2, #4

08008b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008b24:	d3fb      	bcc.n	8008b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008b26:	f005 fb63 	bl	800e1f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008b2a:	f7fb faa1 	bl	8004070 <main>

08008b2e <LoopForever>:

LoopForever:
    b LoopForever
 8008b2e:	e7fe      	b.n	8008b2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008b30:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8008b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008b38:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8008b3c:	08011984 	.word	0x08011984
  ldr r2, =_sbss
 8008b40:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8008b44:	2000144c 	.word	0x2000144c

08008b48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008b48:	e7fe      	b.n	8008b48 <ADC1_IRQHandler>

08008b4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b082      	sub	sp, #8
 8008b4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008b54:	2003      	movs	r0, #3
 8008b56:	f001 fcdd 	bl	800a514 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	f000 f80e 	bl	8008b7c <HAL_InitTick>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d002      	beq.n	8008b6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	71fb      	strb	r3, [r7, #7]
 8008b6a:	e001      	b.n	8008b70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008b6c:	f7fe fdc2 	bl	80076f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008b70:	79fb      	ldrb	r3, [r7, #7]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
	...

08008b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8008b88:	4b17      	ldr	r3, [pc, #92]	; (8008be8 <HAL_InitTick+0x6c>)
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d023      	beq.n	8008bd8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8008b90:	4b16      	ldr	r3, [pc, #88]	; (8008bec <HAL_InitTick+0x70>)
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	4b14      	ldr	r3, [pc, #80]	; (8008be8 <HAL_InitTick+0x6c>)
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	4619      	mov	r1, r3
 8008b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f001 fce9 	bl	800a57e <HAL_SYSTICK_Config>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d10f      	bne.n	8008bd2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2b0f      	cmp	r3, #15
 8008bb6:	d809      	bhi.n	8008bcc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008bb8:	2200      	movs	r2, #0
 8008bba:	6879      	ldr	r1, [r7, #4]
 8008bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc0:	f001 fcb3 	bl	800a52a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008bc4:	4a0a      	ldr	r2, [pc, #40]	; (8008bf0 <HAL_InitTick+0x74>)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6013      	str	r3, [r2, #0]
 8008bca:	e007      	b.n	8008bdc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	73fb      	strb	r3, [r7, #15]
 8008bd0:	e004      	b.n	8008bdc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	73fb      	strb	r3, [r7, #15]
 8008bd6:	e001      	b.n	8008bdc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	20000008 	.word	0x20000008
 8008bec:	20000000 	.word	0x20000000
 8008bf0:	20000004 	.word	0x20000004

08008bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008bf8:	4b06      	ldr	r3, [pc, #24]	; (8008c14 <HAL_IncTick+0x20>)
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	4b06      	ldr	r3, [pc, #24]	; (8008c18 <HAL_IncTick+0x24>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4413      	add	r3, r2
 8008c04:	4a04      	ldr	r2, [pc, #16]	; (8008c18 <HAL_IncTick+0x24>)
 8008c06:	6013      	str	r3, [r2, #0]
}
 8008c08:	bf00      	nop
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop
 8008c14:	20000008 	.word	0x20000008
 8008c18:	20001438 	.word	0x20001438

08008c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8008c20:	4b03      	ldr	r3, [pc, #12]	; (8008c30 <HAL_GetTick+0x14>)
 8008c22:	681b      	ldr	r3, [r3, #0]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	20001438 	.word	0x20001438

08008c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008c3c:	f7ff ffee 	bl	8008c1c <HAL_GetTick>
 8008c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c4c:	d005      	beq.n	8008c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8008c4e:	4b0a      	ldr	r3, [pc, #40]	; (8008c78 <HAL_Delay+0x44>)
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	461a      	mov	r2, r3
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	4413      	add	r3, r2
 8008c58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008c5a:	bf00      	nop
 8008c5c:	f7ff ffde 	bl	8008c1c <HAL_GetTick>
 8008c60:	4602      	mov	r2, r0
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d8f7      	bhi.n	8008c5c <HAL_Delay+0x28>
  {
  }
}
 8008c6c:	bf00      	nop
 8008c6e:	bf00      	nop
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	20000008 	.word	0x20000008

08008c7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	431a      	orrs	r2, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	609a      	str	r2, [r3, #8]
}
 8008c96:	bf00      	nop
 8008c98:	370c      	adds	r7, #12
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b083      	sub	sp, #12
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	431a      	orrs	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	609a      	str	r2, [r3, #8]
}
 8008cbc:	bf00      	nop
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b087      	sub	sp, #28
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
 8008cf0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	3360      	adds	r3, #96	; 0x60
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	4413      	add	r3, r2
 8008cfe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	4b08      	ldr	r3, [pc, #32]	; (8008d28 <LL_ADC_SetOffset+0x44>)
 8008d06:	4013      	ands	r3, r2
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	430a      	orrs	r2, r1
 8008d12:	4313      	orrs	r3, r2
 8008d14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008d1c:	bf00      	nop
 8008d1e:	371c      	adds	r7, #28
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	03fff000 	.word	0x03fff000

08008d2c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	3360      	adds	r3, #96	; 0x60
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	4413      	add	r3, r2
 8008d42:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3714      	adds	r7, #20
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b087      	sub	sp, #28
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	3360      	adds	r3, #96	; 0x60
 8008d68:	461a      	mov	r2, r3
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	431a      	orrs	r2, r3
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8008d82:	bf00      	nop
 8008d84:	371c      	adds	r7, #28
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr

08008d8e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8008d8e:	b480      	push	{r7}
 8008d90:	b083      	sub	sp, #12
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d101      	bne.n	8008da6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008da2:	2301      	movs	r3, #1
 8008da4:	e000      	b.n	8008da8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b087      	sub	sp, #28
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	3330      	adds	r3, #48	; 0x30
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	0a1b      	lsrs	r3, r3, #8
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	f003 030c 	and.w	r3, r3, #12
 8008dd0:	4413      	add	r3, r2
 8008dd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	f003 031f 	and.w	r3, r3, #31
 8008dde:	211f      	movs	r1, #31
 8008de0:	fa01 f303 	lsl.w	r3, r1, r3
 8008de4:	43db      	mvns	r3, r3
 8008de6:	401a      	ands	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	0e9b      	lsrs	r3, r3, #26
 8008dec:	f003 011f 	and.w	r1, r3, #31
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	f003 031f 	and.w	r3, r3, #31
 8008df6:	fa01 f303 	lsl.w	r3, r1, r3
 8008dfa:	431a      	orrs	r2, r3
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008e00:	bf00      	nop
 8008e02:	371c      	adds	r7, #28
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b087      	sub	sp, #28
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	3314      	adds	r3, #20
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	0e5b      	lsrs	r3, r3, #25
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	f003 0304 	and.w	r3, r3, #4
 8008e28:	4413      	add	r3, r2
 8008e2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	0d1b      	lsrs	r3, r3, #20
 8008e34:	f003 031f 	and.w	r3, r3, #31
 8008e38:	2107      	movs	r1, #7
 8008e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e3e:	43db      	mvns	r3, r3
 8008e40:	401a      	ands	r2, r3
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	0d1b      	lsrs	r3, r3, #20
 8008e46:	f003 031f 	and.w	r3, r3, #31
 8008e4a:	6879      	ldr	r1, [r7, #4]
 8008e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e50:	431a      	orrs	r2, r3
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008e56:	bf00      	nop
 8008e58:	371c      	adds	r7, #28
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
	...

08008e64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e7c:	43db      	mvns	r3, r3
 8008e7e:	401a      	ands	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f003 0318 	and.w	r3, r3, #24
 8008e86:	4908      	ldr	r1, [pc, #32]	; (8008ea8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008e88:	40d9      	lsrs	r1, r3
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	400b      	ands	r3, r1
 8008e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e92:	431a      	orrs	r2, r3
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008e9a:	bf00      	nop
 8008e9c:	3714      	adds	r7, #20
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	0007ffff 	.word	0x0007ffff

08008eac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008ebc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	6093      	str	r3, [r2, #8]
}
 8008ec4:	bf00      	nop
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ee4:	d101      	bne.n	8008eea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e000      	b.n	8008eec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008f08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008f0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f34:	d101      	bne.n	8008f3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008f36:	2301      	movs	r3, #1
 8008f38:	e000      	b.n	8008f3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008f5c:	f043 0201 	orr.w	r2, r3, #1
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008f64:	bf00      	nop
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008f84:	f043 0202 	orr.w	r2, r3, #2
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d101      	bne.n	8008fb0 <LL_ADC_IsEnabled+0x18>
 8008fac:	2301      	movs	r3, #1
 8008fae:	e000      	b.n	8008fb2 <LL_ADC_IsEnabled+0x1a>
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b083      	sub	sp, #12
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	f003 0302 	and.w	r3, r3, #2
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d101      	bne.n	8008fd6 <LL_ADC_IsDisableOngoing+0x18>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e000      	b.n	8008fd8 <LL_ADC_IsDisableOngoing+0x1a>
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ff4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008ff8:	f043 0204 	orr.w	r2, r3, #4
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800901c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009020:	f043 0210 	orr.w	r2, r3, #16
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f003 0304 	and.w	r3, r3, #4
 8009044:	2b04      	cmp	r3, #4
 8009046:	d101      	bne.n	800904c <LL_ADC_REG_IsConversionOngoing+0x18>
 8009048:	2301      	movs	r3, #1
 800904a:	e000      	b.n	800904e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	370c      	adds	r7, #12
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800905a:	b480      	push	{r7}
 800905c:	b083      	sub	sp, #12
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800906a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800906e:	f043 0220 	orr.w	r2, r3, #32
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8009076:	bf00      	nop
 8009078:	370c      	adds	r7, #12
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr

08009082 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8009082:	b480      	push	{r7}
 8009084:	b083      	sub	sp, #12
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	f003 0308 	and.w	r3, r3, #8
 8009092:	2b08      	cmp	r3, #8
 8009094:	d101      	bne.n	800909a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009096:	2301      	movs	r3, #1
 8009098:	e000      	b.n	800909c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b088      	sub	sp, #32
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80090b0:	2300      	movs	r3, #0
 80090b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80090b4:	2300      	movs	r3, #0
 80090b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d101      	bne.n	80090c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	e12c      	b.n	800931c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d109      	bne.n	80090e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7fa fddb 	bl	8003c8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7ff fef1 	bl	8008ed0 <LL_ADC_IsDeepPowerDownEnabled>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d004      	beq.n	80090fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7ff fed7 	bl	8008eac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4618      	mov	r0, r3
 8009104:	f7ff ff0c 	bl	8008f20 <LL_ADC_IsInternalRegulatorEnabled>
 8009108:	4603      	mov	r3, r0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d115      	bne.n	800913a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4618      	mov	r0, r3
 8009114:	f7ff fef0 	bl	8008ef8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009118:	4b82      	ldr	r3, [pc, #520]	; (8009324 <HAL_ADC_Init+0x27c>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	099b      	lsrs	r3, r3, #6
 800911e:	4a82      	ldr	r2, [pc, #520]	; (8009328 <HAL_ADC_Init+0x280>)
 8009120:	fba2 2303 	umull	r2, r3, r2, r3
 8009124:	099b      	lsrs	r3, r3, #6
 8009126:	3301      	adds	r3, #1
 8009128:	005b      	lsls	r3, r3, #1
 800912a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800912c:	e002      	b.n	8009134 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	3b01      	subs	r3, #1
 8009132:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1f9      	bne.n	800912e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff feee 	bl	8008f20 <LL_ADC_IsInternalRegulatorEnabled>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d10d      	bne.n	8009166 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800914e:	f043 0210 	orr.w	r2, r3, #16
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800915a:	f043 0201 	orr.w	r2, r3, #1
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4618      	mov	r0, r3
 800916c:	f7ff ff62 	bl	8009034 <LL_ADC_REG_IsConversionOngoing>
 8009170:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009176:	f003 0310 	and.w	r3, r3, #16
 800917a:	2b00      	cmp	r3, #0
 800917c:	f040 80c5 	bne.w	800930a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	2b00      	cmp	r3, #0
 8009184:	f040 80c1 	bne.w	800930a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800918c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8009190:	f043 0202 	orr.w	r2, r3, #2
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4618      	mov	r0, r3
 800919e:	f7ff fefb 	bl	8008f98 <LL_ADC_IsEnabled>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10b      	bne.n	80091c0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80091a8:	4860      	ldr	r0, [pc, #384]	; (800932c <HAL_ADC_Init+0x284>)
 80091aa:	f7ff fef5 	bl	8008f98 <LL_ADC_IsEnabled>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d105      	bne.n	80091c0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	4619      	mov	r1, r3
 80091ba:	485d      	ldr	r0, [pc, #372]	; (8009330 <HAL_ADC_Init+0x288>)
 80091bc:	f7ff fd5e 	bl	8008c7c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	7e5b      	ldrb	r3, [r3, #25]
 80091c4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80091ca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80091d0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80091d6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80091de:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80091e0:	4313      	orrs	r3, r2
 80091e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d106      	bne.n	80091fc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f2:	3b01      	subs	r3, #1
 80091f4:	045b      	lsls	r3, r3, #17
 80091f6:	69ba      	ldr	r2, [r7, #24]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009200:	2b00      	cmp	r3, #0
 8009202:	d009      	beq.n	8009218 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009208:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009210:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009212:	69ba      	ldr	r2, [r7, #24]
 8009214:	4313      	orrs	r3, r2
 8009216:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68da      	ldr	r2, [r3, #12]
 800921e:	4b45      	ldr	r3, [pc, #276]	; (8009334 <HAL_ADC_Init+0x28c>)
 8009220:	4013      	ands	r3, r2
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	6812      	ldr	r2, [r2, #0]
 8009226:	69b9      	ldr	r1, [r7, #24]
 8009228:	430b      	orrs	r3, r1
 800922a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4618      	mov	r0, r3
 8009232:	f7ff feff 	bl	8009034 <LL_ADC_REG_IsConversionOngoing>
 8009236:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4618      	mov	r0, r3
 800923e:	f7ff ff20 	bl	8009082 <LL_ADC_INJ_IsConversionOngoing>
 8009242:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d13d      	bne.n	80092c6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d13a      	bne.n	80092c6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8009254:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800925c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800925e:	4313      	orrs	r3, r2
 8009260:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800926c:	f023 0302 	bic.w	r3, r3, #2
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	6812      	ldr	r2, [r2, #0]
 8009274:	69b9      	ldr	r1, [r7, #24]
 8009276:	430b      	orrs	r3, r1
 8009278:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009280:	2b01      	cmp	r3, #1
 8009282:	d118      	bne.n	80092b6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800928e:	f023 0304 	bic.w	r3, r3, #4
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800929a:	4311      	orrs	r1, r2
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80092a0:	4311      	orrs	r1, r2
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80092a6:	430a      	orrs	r2, r1
 80092a8:	431a      	orrs	r2, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f042 0201 	orr.w	r2, r2, #1
 80092b2:	611a      	str	r2, [r3, #16]
 80092b4:	e007      	b.n	80092c6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	691a      	ldr	r2, [r3, #16]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f022 0201 	bic.w	r2, r2, #1
 80092c4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d10c      	bne.n	80092e8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d4:	f023 010f 	bic.w	r1, r3, #15
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	69db      	ldr	r3, [r3, #28]
 80092dc:	1e5a      	subs	r2, r3, #1
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	430a      	orrs	r2, r1
 80092e4:	631a      	str	r2, [r3, #48]	; 0x30
 80092e6:	e007      	b.n	80092f8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f022 020f 	bic.w	r2, r2, #15
 80092f6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092fc:	f023 0303 	bic.w	r3, r3, #3
 8009300:	f043 0201 	orr.w	r2, r3, #1
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	655a      	str	r2, [r3, #84]	; 0x54
 8009308:	e007      	b.n	800931a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800930e:	f043 0210 	orr.w	r2, r3, #16
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800931a:	7ffb      	ldrb	r3, [r7, #31]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3720      	adds	r7, #32
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	20000000 	.word	0x20000000
 8009328:	053e2d63 	.word	0x053e2d63
 800932c:	50040000 	.word	0x50040000
 8009330:	50040300 	.word	0x50040300
 8009334:	fff0c007 	.word	0xfff0c007

08009338 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4618      	mov	r0, r3
 8009346:	f7ff fe75 	bl	8009034 <LL_ADC_REG_IsConversionOngoing>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d14f      	bne.n	80093f0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009356:	2b01      	cmp	r3, #1
 8009358:	d101      	bne.n	800935e <HAL_ADC_Start+0x26>
 800935a:	2302      	movs	r3, #2
 800935c:	e04b      	b.n	80093f6 <HAL_ADC_Start+0xbe>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 feae 	bl	800a0c8 <ADC_Enable>
 800936c:	4603      	mov	r3, r0
 800936e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8009370:	7bfb      	ldrb	r3, [r7, #15]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d137      	bne.n	80093e6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800937a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800937e:	f023 0301 	bic.w	r3, r3, #1
 8009382:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800938e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009396:	d106      	bne.n	80093a6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800939c:	f023 0206 	bic.w	r2, r3, #6
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	659a      	str	r2, [r3, #88]	; 0x58
 80093a4:	e002      	b.n	80093ac <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	221c      	movs	r2, #28
 80093b2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d007      	beq.n	80093da <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80093d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4618      	mov	r0, r3
 80093e0:	f7ff fe00 	bl	8008fe4 <LL_ADC_REG_StartConversion>
 80093e4:	e006      	b.n	80093f4 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80093ee:	e001      	b.n	80093f4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80093f0:	2302      	movs	r3, #2
 80093f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80093f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b084      	sub	sp, #16
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800940c:	2b01      	cmp	r3, #1
 800940e:	d101      	bne.n	8009414 <HAL_ADC_Stop+0x16>
 8009410:	2302      	movs	r3, #2
 8009412:	e023      	b.n	800945c <HAL_ADC_Stop+0x5e>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800941c:	2103      	movs	r1, #3
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fd96 	bl	8009f50 <ADC_ConversionStop>
 8009424:	4603      	mov	r3, r0
 8009426:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8009428:	7bfb      	ldrb	r3, [r7, #15]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d111      	bne.n	8009452 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 feac 	bl	800a18c <ADC_Disable>
 8009434:	4603      	mov	r3, r0
 8009436:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8009438:	7bfb      	ldrb	r3, [r7, #15]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d109      	bne.n	8009452 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009442:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009446:	f023 0301 	bic.w	r3, r3, #1
 800944a:	f043 0201 	orr.w	r2, r3, #1
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800945a:	7bfb      	ldrb	r3, [r7, #15]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	695b      	ldr	r3, [r3, #20]
 8009472:	2b08      	cmp	r3, #8
 8009474:	d102      	bne.n	800947c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8009476:	2308      	movs	r3, #8
 8009478:	617b      	str	r3, [r7, #20]
 800947a:	e010      	b.n	800949e <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	f003 0301 	and.w	r3, r3, #1
 8009486:	2b00      	cmp	r3, #0
 8009488:	d007      	beq.n	800949a <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800948e:	f043 0220 	orr.w	r2, r3, #32
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	e06f      	b.n	800957a <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800949a:	2304      	movs	r3, #4
 800949c:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800949e:	f7ff fbbd 	bl	8008c1c <HAL_GetTick>
 80094a2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80094a4:	e021      	b.n	80094ea <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ac:	d01d      	beq.n	80094ea <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80094ae:	f7ff fbb5 	bl	8008c1c <HAL_GetTick>
 80094b2:	4602      	mov	r2, r0
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	683a      	ldr	r2, [r7, #0]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d302      	bcc.n	80094c4 <HAL_ADC_PollForConversion+0x60>
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d112      	bne.n	80094ea <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	4013      	ands	r3, r2
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d10b      	bne.n	80094ea <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094d6:	f043 0204 	orr.w	r2, r3, #4
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80094e6:	2303      	movs	r3, #3
 80094e8:	e047      	b.n	800957a <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	4013      	ands	r3, r2
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d0d6      	beq.n	80094a6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4618      	mov	r0, r3
 800950a:	f7ff fc40 	bl	8008d8e <LL_ADC_REG_IsTriggerSourceSWStart>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d01c      	beq.n	800954e <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	7e5b      	ldrb	r3, [r3, #25]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d118      	bne.n	800954e <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f003 0308 	and.w	r3, r3, #8
 8009526:	2b08      	cmp	r3, #8
 8009528:	d111      	bne.n	800954e <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800952e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800953a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800953e:	2b00      	cmp	r3, #0
 8009540:	d105      	bne.n	800954e <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009546:	f043 0201 	orr.w	r2, r3, #1
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	2b08      	cmp	r3, #8
 800955a:	d104      	bne.n	8009566 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2208      	movs	r2, #8
 8009562:	601a      	str	r2, [r3, #0]
 8009564:	e008      	b.n	8009578 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800956c:	2b00      	cmp	r3, #0
 800956e:	d103      	bne.n	8009578 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	220c      	movs	r2, #12
 8009576:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3718      	adds	r7, #24
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
	...

08009584 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b086      	sub	sp, #24
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4618      	mov	r0, r3
 8009596:	f7ff fd4d 	bl	8009034 <LL_ADC_REG_IsConversionOngoing>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d167      	bne.n	8009670 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d101      	bne.n	80095ae <HAL_ADC_Start_DMA+0x2a>
 80095aa:	2302      	movs	r3, #2
 80095ac:	e063      	b.n	8009676 <HAL_ADC_Start_DMA+0xf2>
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f000 fd86 	bl	800a0c8 <ADC_Enable>
 80095bc:	4603      	mov	r3, r0
 80095be:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80095c0:	7dfb      	ldrb	r3, [r7, #23]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d14f      	bne.n	8009666 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80095ce:	f023 0301 	bic.w	r3, r3, #1
 80095d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d006      	beq.n	80095f4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ea:	f023 0206 	bic.w	r2, r3, #6
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	659a      	str	r2, [r3, #88]	; 0x58
 80095f2:	e002      	b.n	80095fa <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095fe:	4a20      	ldr	r2, [pc, #128]	; (8009680 <HAL_ADC_Start_DMA+0xfc>)
 8009600:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009606:	4a1f      	ldr	r2, [pc, #124]	; (8009684 <HAL_ADC_Start_DMA+0x100>)
 8009608:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800960e:	4a1e      	ldr	r2, [pc, #120]	; (8009688 <HAL_ADC_Start_DMA+0x104>)
 8009610:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	221c      	movs	r2, #28
 8009618:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	685a      	ldr	r2, [r3, #4]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f042 0210 	orr.w	r2, r2, #16
 8009630:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68da      	ldr	r2, [r3, #12]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f042 0201 	orr.w	r2, r2, #1
 8009640:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	3340      	adds	r3, #64	; 0x40
 800964c:	4619      	mov	r1, r3
 800964e:	68ba      	ldr	r2, [r7, #8]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f001 f859 	bl	800a708 <HAL_DMA_Start_IT>
 8009656:	4603      	mov	r3, r0
 8009658:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4618      	mov	r0, r3
 8009660:	f7ff fcc0 	bl	8008fe4 <LL_ADC_REG_StartConversion>
 8009664:	e006      	b.n	8009674 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2200      	movs	r2, #0
 800966a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800966e:	e001      	b.n	8009674 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009670:	2302      	movs	r3, #2
 8009672:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009674:	7dfb      	ldrb	r3, [r7, #23]
}
 8009676:	4618      	mov	r0, r3
 8009678:	3718      	adds	r7, #24
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	0800a24b 	.word	0x0800a24b
 8009684:	0800a323 	.word	0x0800a323
 8009688:	0800a33f 	.word	0x0800a33f

0800968c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800969a:	2b01      	cmp	r3, #1
 800969c:	d101      	bne.n	80096a2 <HAL_ADC_Stop_DMA+0x16>
 800969e:	2302      	movs	r3, #2
 80096a0:	e051      	b.n	8009746 <HAL_ADC_Stop_DMA+0xba>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2201      	movs	r2, #1
 80096a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80096aa:	2103      	movs	r1, #3
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 fc4f 	bl	8009f50 <ADC_ConversionStop>
 80096b2:	4603      	mov	r3, r0
 80096b4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80096b6:	7bfb      	ldrb	r3, [r7, #15]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d13f      	bne.n	800973c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	68da      	ldr	r2, [r3, #12]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f022 0201 	bic.w	r2, r2, #1
 80096ca:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	d10f      	bne.n	80096fa <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096de:	4618      	mov	r0, r3
 80096e0:	f001 f872 	bl	800a7c8 <HAL_DMA_Abort>
 80096e4:	4603      	mov	r3, r0
 80096e6:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d005      	beq.n	80096fa <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	685a      	ldr	r2, [r3, #4]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f022 0210 	bic.w	r2, r2, #16
 8009708:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800970a:	7bfb      	ldrb	r3, [r7, #15]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d105      	bne.n	800971c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fd3b 	bl	800a18c <ADC_Disable>
 8009716:	4603      	mov	r3, r0
 8009718:	73fb      	strb	r3, [r7, #15]
 800971a:	e002      	b.n	8009722 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fd35 	bl	800a18c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8009722:	7bfb      	ldrb	r3, [r7, #15]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d109      	bne.n	800973c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800972c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009730:	f023 0301 	bic.w	r3, r3, #1
 8009734:	f043 0201 	orr.w	r2, r3, #1
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8009744:	7bfb      	ldrb	r3, [r7, #15]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800974e:	b480      	push	{r7}
 8009750:	b083      	sub	sp, #12
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800975c:	4618      	mov	r0, r3
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009784:	bf00      	nop
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b0b6      	sub	sp, #216	; 0xd8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800979a:	2300      	movs	r3, #0
 800979c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80097a0:	2300      	movs	r3, #0
 80097a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d101      	bne.n	80097b2 <HAL_ADC_ConfigChannel+0x22>
 80097ae:	2302      	movs	r3, #2
 80097b0:	e3b9      	b.n	8009f26 <HAL_ADC_ConfigChannel+0x796>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4618      	mov	r0, r3
 80097c0:	f7ff fc38 	bl	8009034 <LL_ADC_REG_IsConversionOngoing>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f040 839e 	bne.w	8009f08 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	2b05      	cmp	r3, #5
 80097d2:	d824      	bhi.n	800981e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	3b02      	subs	r3, #2
 80097da:	2b03      	cmp	r3, #3
 80097dc:	d81b      	bhi.n	8009816 <HAL_ADC_ConfigChannel+0x86>
 80097de:	a201      	add	r2, pc, #4	; (adr r2, 80097e4 <HAL_ADC_ConfigChannel+0x54>)
 80097e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e4:	080097f5 	.word	0x080097f5
 80097e8:	080097fd 	.word	0x080097fd
 80097ec:	08009805 	.word	0x08009805
 80097f0:	0800980d 	.word	0x0800980d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	220c      	movs	r2, #12
 80097f8:	605a      	str	r2, [r3, #4]
          break;
 80097fa:	e011      	b.n	8009820 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	2212      	movs	r2, #18
 8009800:	605a      	str	r2, [r3, #4]
          break;
 8009802:	e00d      	b.n	8009820 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	2218      	movs	r2, #24
 8009808:	605a      	str	r2, [r3, #4]
          break;
 800980a:	e009      	b.n	8009820 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009812:	605a      	str	r2, [r3, #4]
          break;
 8009814:	e004      	b.n	8009820 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	2206      	movs	r2, #6
 800981a:	605a      	str	r2, [r3, #4]
          break;
 800981c:	e000      	b.n	8009820 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800981e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6818      	ldr	r0, [r3, #0]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	6859      	ldr	r1, [r3, #4]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	461a      	mov	r2, r3
 800982e:	f7ff fac1 	bl	8008db4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4618      	mov	r0, r3
 8009838:	f7ff fbfc 	bl	8009034 <LL_ADC_REG_IsConversionOngoing>
 800983c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4618      	mov	r0, r3
 8009846:	f7ff fc1c 	bl	8009082 <LL_ADC_INJ_IsConversionOngoing>
 800984a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800984e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009852:	2b00      	cmp	r3, #0
 8009854:	f040 81a6 	bne.w	8009ba4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009858:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800985c:	2b00      	cmp	r3, #0
 800985e:	f040 81a1 	bne.w	8009ba4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6818      	ldr	r0, [r3, #0]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	6819      	ldr	r1, [r3, #0]
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	461a      	mov	r2, r3
 8009870:	f7ff facc 	bl	8008e0c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	695a      	ldr	r2, [r3, #20]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	08db      	lsrs	r3, r3, #3
 8009880:	f003 0303 	and.w	r3, r3, #3
 8009884:	005b      	lsls	r3, r3, #1
 8009886:	fa02 f303 	lsl.w	r3, r2, r3
 800988a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	2b04      	cmp	r3, #4
 8009894:	d00a      	beq.n	80098ac <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6818      	ldr	r0, [r3, #0]
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	6919      	ldr	r1, [r3, #16]
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80098a6:	f7ff fa1d 	bl	8008ce4 <LL_ADC_SetOffset>
 80098aa:	e17b      	b.n	8009ba4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2100      	movs	r1, #0
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7ff fa3a 	bl	8008d2c <LL_ADC_GetOffsetChannel>
 80098b8:	4603      	mov	r3, r0
 80098ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d10a      	bne.n	80098d8 <HAL_ADC_ConfigChannel+0x148>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2100      	movs	r1, #0
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7ff fa2f 	bl	8008d2c <LL_ADC_GetOffsetChannel>
 80098ce:	4603      	mov	r3, r0
 80098d0:	0e9b      	lsrs	r3, r3, #26
 80098d2:	f003 021f 	and.w	r2, r3, #31
 80098d6:	e01e      	b.n	8009916 <HAL_ADC_ConfigChannel+0x186>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2100      	movs	r1, #0
 80098de:	4618      	mov	r0, r3
 80098e0:	f7ff fa24 	bl	8008d2c <LL_ADC_GetOffsetChannel>
 80098e4:	4603      	mov	r3, r0
 80098e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80098ee:	fa93 f3a3 	rbit	r3, r3
 80098f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80098f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80098fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80098fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8009906:	2320      	movs	r3, #32
 8009908:	e004      	b.n	8009914 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800990a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800990e:	fab3 f383 	clz	r3, r3
 8009912:	b2db      	uxtb	r3, r3
 8009914:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800991e:	2b00      	cmp	r3, #0
 8009920:	d105      	bne.n	800992e <HAL_ADC_ConfigChannel+0x19e>
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	0e9b      	lsrs	r3, r3, #26
 8009928:	f003 031f 	and.w	r3, r3, #31
 800992c:	e018      	b.n	8009960 <HAL_ADC_ConfigChannel+0x1d0>
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009936:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800993a:	fa93 f3a3 	rbit	r3, r3
 800993e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8009942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009946:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800994a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800994e:	2b00      	cmp	r3, #0
 8009950:	d101      	bne.n	8009956 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8009952:	2320      	movs	r3, #32
 8009954:	e004      	b.n	8009960 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8009956:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800995a:	fab3 f383 	clz	r3, r3
 800995e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8009960:	429a      	cmp	r2, r3
 8009962:	d106      	bne.n	8009972 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2200      	movs	r2, #0
 800996a:	2100      	movs	r1, #0
 800996c:	4618      	mov	r0, r3
 800996e:	f7ff f9f3 	bl	8008d58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2101      	movs	r1, #1
 8009978:	4618      	mov	r0, r3
 800997a:	f7ff f9d7 	bl	8008d2c <LL_ADC_GetOffsetChannel>
 800997e:	4603      	mov	r3, r0
 8009980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009984:	2b00      	cmp	r3, #0
 8009986:	d10a      	bne.n	800999e <HAL_ADC_ConfigChannel+0x20e>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2101      	movs	r1, #1
 800998e:	4618      	mov	r0, r3
 8009990:	f7ff f9cc 	bl	8008d2c <LL_ADC_GetOffsetChannel>
 8009994:	4603      	mov	r3, r0
 8009996:	0e9b      	lsrs	r3, r3, #26
 8009998:	f003 021f 	and.w	r2, r3, #31
 800999c:	e01e      	b.n	80099dc <HAL_ADC_ConfigChannel+0x24c>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2101      	movs	r1, #1
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7ff f9c1 	bl	8008d2c <LL_ADC_GetOffsetChannel>
 80099aa:	4603      	mov	r3, r0
 80099ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80099b4:	fa93 f3a3 	rbit	r3, r3
 80099b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80099bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80099c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80099c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d101      	bne.n	80099d0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80099cc:	2320      	movs	r3, #32
 80099ce:	e004      	b.n	80099da <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80099d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099d4:	fab3 f383 	clz	r3, r3
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d105      	bne.n	80099f4 <HAL_ADC_ConfigChannel+0x264>
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	0e9b      	lsrs	r3, r3, #26
 80099ee:	f003 031f 	and.w	r3, r3, #31
 80099f2:	e018      	b.n	8009a26 <HAL_ADC_ConfigChannel+0x296>
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a00:	fa93 f3a3 	rbit	r3, r3
 8009a04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8009a08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009a0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8009a10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d101      	bne.n	8009a1c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8009a18:	2320      	movs	r3, #32
 8009a1a:	e004      	b.n	8009a26 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8009a1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a20:	fab3 f383 	clz	r3, r3
 8009a24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d106      	bne.n	8009a38 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	2101      	movs	r1, #1
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7ff f990 	bl	8008d58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2102      	movs	r1, #2
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7ff f974 	bl	8008d2c <LL_ADC_GetOffsetChannel>
 8009a44:	4603      	mov	r3, r0
 8009a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d10a      	bne.n	8009a64 <HAL_ADC_ConfigChannel+0x2d4>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2102      	movs	r1, #2
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7ff f969 	bl	8008d2c <LL_ADC_GetOffsetChannel>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	0e9b      	lsrs	r3, r3, #26
 8009a5e:	f003 021f 	and.w	r2, r3, #31
 8009a62:	e01e      	b.n	8009aa2 <HAL_ADC_ConfigChannel+0x312>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2102      	movs	r1, #2
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7ff f95e 	bl	8008d2c <LL_ADC_GetOffsetChannel>
 8009a70:	4603      	mov	r3, r0
 8009a72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a7a:	fa93 f3a3 	rbit	r3, r3
 8009a7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8009a82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8009a8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d101      	bne.n	8009a96 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8009a92:	2320      	movs	r3, #32
 8009a94:	e004      	b.n	8009aa0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8009a96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a9a:	fab3 f383 	clz	r3, r3
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d105      	bne.n	8009aba <HAL_ADC_ConfigChannel+0x32a>
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	0e9b      	lsrs	r3, r3, #26
 8009ab4:	f003 031f 	and.w	r3, r3, #31
 8009ab8:	e016      	b.n	8009ae8 <HAL_ADC_ConfigChannel+0x358>
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ac2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ac6:	fa93 f3a3 	rbit	r3, r3
 8009aca:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8009acc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009ace:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8009ad2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d101      	bne.n	8009ade <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8009ada:	2320      	movs	r3, #32
 8009adc:	e004      	b.n	8009ae8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8009ade:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ae2:	fab3 f383 	clz	r3, r3
 8009ae6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d106      	bne.n	8009afa <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2200      	movs	r2, #0
 8009af2:	2102      	movs	r1, #2
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7ff f92f 	bl	8008d58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2103      	movs	r1, #3
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7ff f913 	bl	8008d2c <LL_ADC_GetOffsetChannel>
 8009b06:	4603      	mov	r3, r0
 8009b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d10a      	bne.n	8009b26 <HAL_ADC_ConfigChannel+0x396>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2103      	movs	r1, #3
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7ff f908 	bl	8008d2c <LL_ADC_GetOffsetChannel>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	0e9b      	lsrs	r3, r3, #26
 8009b20:	f003 021f 	and.w	r2, r3, #31
 8009b24:	e017      	b.n	8009b56 <HAL_ADC_ConfigChannel+0x3c6>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2103      	movs	r1, #3
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7ff f8fd 	bl	8008d2c <LL_ADC_GetOffsetChannel>
 8009b32:	4603      	mov	r3, r0
 8009b34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b38:	fa93 f3a3 	rbit	r3, r3
 8009b3c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8009b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b40:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8009b42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d101      	bne.n	8009b4c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8009b48:	2320      	movs	r3, #32
 8009b4a:	e003      	b.n	8009b54 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8009b4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b4e:	fab3 f383 	clz	r3, r3
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d105      	bne.n	8009b6e <HAL_ADC_ConfigChannel+0x3de>
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	0e9b      	lsrs	r3, r3, #26
 8009b68:	f003 031f 	and.w	r3, r3, #31
 8009b6c:	e011      	b.n	8009b92 <HAL_ADC_ConfigChannel+0x402>
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b76:	fa93 f3a3 	rbit	r3, r3
 8009b7a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8009b7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8009b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d101      	bne.n	8009b8a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8009b86:	2320      	movs	r3, #32
 8009b88:	e003      	b.n	8009b92 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8009b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b8c:	fab3 f383 	clz	r3, r3
 8009b90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d106      	bne.n	8009ba4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	2103      	movs	r1, #3
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7ff f8da 	bl	8008d58 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7ff f9f5 	bl	8008f98 <LL_ADC_IsEnabled>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f040 813f 	bne.w	8009e34 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6818      	ldr	r0, [r3, #0]
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	6819      	ldr	r1, [r3, #0]
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	f7ff f94e 	bl	8008e64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	4a8e      	ldr	r2, [pc, #568]	; (8009e08 <HAL_ADC_ConfigChannel+0x678>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	f040 8130 	bne.w	8009e34 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d10b      	bne.n	8009bfc <HAL_ADC_ConfigChannel+0x46c>
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	0e9b      	lsrs	r3, r3, #26
 8009bea:	3301      	adds	r3, #1
 8009bec:	f003 031f 	and.w	r3, r3, #31
 8009bf0:	2b09      	cmp	r3, #9
 8009bf2:	bf94      	ite	ls
 8009bf4:	2301      	movls	r3, #1
 8009bf6:	2300      	movhi	r3, #0
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	e019      	b.n	8009c30 <HAL_ADC_ConfigChannel+0x4a0>
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c04:	fa93 f3a3 	rbit	r3, r3
 8009c08:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8009c0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c0c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8009c0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d101      	bne.n	8009c18 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8009c14:	2320      	movs	r3, #32
 8009c16:	e003      	b.n	8009c20 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8009c18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c1a:	fab3 f383 	clz	r3, r3
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	3301      	adds	r3, #1
 8009c22:	f003 031f 	and.w	r3, r3, #31
 8009c26:	2b09      	cmp	r3, #9
 8009c28:	bf94      	ite	ls
 8009c2a:	2301      	movls	r3, #1
 8009c2c:	2300      	movhi	r3, #0
 8009c2e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d079      	beq.n	8009d28 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d107      	bne.n	8009c50 <HAL_ADC_ConfigChannel+0x4c0>
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	0e9b      	lsrs	r3, r3, #26
 8009c46:	3301      	adds	r3, #1
 8009c48:	069b      	lsls	r3, r3, #26
 8009c4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009c4e:	e015      	b.n	8009c7c <HAL_ADC_ConfigChannel+0x4ec>
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c58:	fa93 f3a3 	rbit	r3, r3
 8009c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c60:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8009c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d101      	bne.n	8009c6c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8009c68:	2320      	movs	r3, #32
 8009c6a:	e003      	b.n	8009c74 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8009c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c6e:	fab3 f383 	clz	r3, r3
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	3301      	adds	r3, #1
 8009c76:	069b      	lsls	r3, r3, #26
 8009c78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d109      	bne.n	8009c9c <HAL_ADC_ConfigChannel+0x50c>
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	0e9b      	lsrs	r3, r3, #26
 8009c8e:	3301      	adds	r3, #1
 8009c90:	f003 031f 	and.w	r3, r3, #31
 8009c94:	2101      	movs	r1, #1
 8009c96:	fa01 f303 	lsl.w	r3, r1, r3
 8009c9a:	e017      	b.n	8009ccc <HAL_ADC_ConfigChannel+0x53c>
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ca4:	fa93 f3a3 	rbit	r3, r3
 8009ca8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8009caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8009cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d101      	bne.n	8009cb8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8009cb4:	2320      	movs	r3, #32
 8009cb6:	e003      	b.n	8009cc0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8009cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cba:	fab3 f383 	clz	r3, r3
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	f003 031f 	and.w	r3, r3, #31
 8009cc6:	2101      	movs	r1, #1
 8009cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8009ccc:	ea42 0103 	orr.w	r1, r2, r3
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d10a      	bne.n	8009cf2 <HAL_ADC_ConfigChannel+0x562>
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	0e9b      	lsrs	r3, r3, #26
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	f003 021f 	and.w	r2, r3, #31
 8009ce8:	4613      	mov	r3, r2
 8009cea:	005b      	lsls	r3, r3, #1
 8009cec:	4413      	add	r3, r2
 8009cee:	051b      	lsls	r3, r3, #20
 8009cf0:	e018      	b.n	8009d24 <HAL_ADC_ConfigChannel+0x594>
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfa:	fa93 f3a3 	rbit	r3, r3
 8009cfe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8009d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d101      	bne.n	8009d0e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8009d0a:	2320      	movs	r3, #32
 8009d0c:	e003      	b.n	8009d16 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8009d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d10:	fab3 f383 	clz	r3, r3
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	3301      	adds	r3, #1
 8009d18:	f003 021f 	and.w	r2, r3, #31
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	005b      	lsls	r3, r3, #1
 8009d20:	4413      	add	r3, r2
 8009d22:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009d24:	430b      	orrs	r3, r1
 8009d26:	e080      	b.n	8009e2a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d107      	bne.n	8009d44 <HAL_ADC_ConfigChannel+0x5b4>
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	0e9b      	lsrs	r3, r3, #26
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	069b      	lsls	r3, r3, #26
 8009d3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009d42:	e015      	b.n	8009d70 <HAL_ADC_ConfigChannel+0x5e0>
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4c:	fa93 f3a3 	rbit	r3, r3
 8009d50:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8009d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d54:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8009d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d101      	bne.n	8009d60 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8009d5c:	2320      	movs	r3, #32
 8009d5e:	e003      	b.n	8009d68 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8009d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d62:	fab3 f383 	clz	r3, r3
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	3301      	adds	r3, #1
 8009d6a:	069b      	lsls	r3, r3, #26
 8009d6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d109      	bne.n	8009d90 <HAL_ADC_ConfigChannel+0x600>
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	0e9b      	lsrs	r3, r3, #26
 8009d82:	3301      	adds	r3, #1
 8009d84:	f003 031f 	and.w	r3, r3, #31
 8009d88:	2101      	movs	r1, #1
 8009d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8009d8e:	e017      	b.n	8009dc0 <HAL_ADC_ConfigChannel+0x630>
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d96:	6a3b      	ldr	r3, [r7, #32]
 8009d98:	fa93 f3a3 	rbit	r3, r3
 8009d9c:	61fb      	str	r3, [r7, #28]
  return result;
 8009d9e:	69fb      	ldr	r3, [r7, #28]
 8009da0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d101      	bne.n	8009dac <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8009da8:	2320      	movs	r3, #32
 8009daa:	e003      	b.n	8009db4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8009dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dae:	fab3 f383 	clz	r3, r3
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	3301      	adds	r3, #1
 8009db6:	f003 031f 	and.w	r3, r3, #31
 8009dba:	2101      	movs	r1, #1
 8009dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8009dc0:	ea42 0103 	orr.w	r1, r2, r3
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d10d      	bne.n	8009dec <HAL_ADC_ConfigChannel+0x65c>
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	0e9b      	lsrs	r3, r3, #26
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	f003 021f 	and.w	r2, r3, #31
 8009ddc:	4613      	mov	r3, r2
 8009dde:	005b      	lsls	r3, r3, #1
 8009de0:	4413      	add	r3, r2
 8009de2:	3b1e      	subs	r3, #30
 8009de4:	051b      	lsls	r3, r3, #20
 8009de6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009dea:	e01d      	b.n	8009e28 <HAL_ADC_ConfigChannel+0x698>
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	fa93 f3a3 	rbit	r3, r3
 8009df8:	613b      	str	r3, [r7, #16]
  return result;
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d103      	bne.n	8009e0c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8009e04:	2320      	movs	r3, #32
 8009e06:	e005      	b.n	8009e14 <HAL_ADC_ConfigChannel+0x684>
 8009e08:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8009e0c:	69bb      	ldr	r3, [r7, #24]
 8009e0e:	fab3 f383 	clz	r3, r3
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	3301      	adds	r3, #1
 8009e16:	f003 021f 	and.w	r2, r3, #31
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	005b      	lsls	r3, r3, #1
 8009e1e:	4413      	add	r3, r2
 8009e20:	3b1e      	subs	r3, #30
 8009e22:	051b      	lsls	r3, r3, #20
 8009e24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009e28:	430b      	orrs	r3, r1
 8009e2a:	683a      	ldr	r2, [r7, #0]
 8009e2c:	6892      	ldr	r2, [r2, #8]
 8009e2e:	4619      	mov	r1, r3
 8009e30:	f7fe ffec 	bl	8008e0c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	4b3d      	ldr	r3, [pc, #244]	; (8009f30 <HAL_ADC_ConfigChannel+0x7a0>)
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d06c      	beq.n	8009f1a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009e40:	483c      	ldr	r0, [pc, #240]	; (8009f34 <HAL_ADC_ConfigChannel+0x7a4>)
 8009e42:	f7fe ff41 	bl	8008cc8 <LL_ADC_GetCommonPathInternalCh>
 8009e46:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a3a      	ldr	r2, [pc, #232]	; (8009f38 <HAL_ADC_ConfigChannel+0x7a8>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d127      	bne.n	8009ea4 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009e54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009e58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d121      	bne.n	8009ea4 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a35      	ldr	r2, [pc, #212]	; (8009f3c <HAL_ADC_ConfigChannel+0x7ac>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d157      	bne.n	8009f1a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009e6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009e6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009e72:	4619      	mov	r1, r3
 8009e74:	482f      	ldr	r0, [pc, #188]	; (8009f34 <HAL_ADC_ConfigChannel+0x7a4>)
 8009e76:	f7fe ff14 	bl	8008ca2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009e7a:	4b31      	ldr	r3, [pc, #196]	; (8009f40 <HAL_ADC_ConfigChannel+0x7b0>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	099b      	lsrs	r3, r3, #6
 8009e80:	4a30      	ldr	r2, [pc, #192]	; (8009f44 <HAL_ADC_ConfigChannel+0x7b4>)
 8009e82:	fba2 2303 	umull	r2, r3, r2, r3
 8009e86:	099b      	lsrs	r3, r3, #6
 8009e88:	1c5a      	adds	r2, r3, #1
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	005b      	lsls	r3, r3, #1
 8009e8e:	4413      	add	r3, r2
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8009e94:	e002      	b.n	8009e9c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1f9      	bne.n	8009e96 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009ea2:	e03a      	b.n	8009f1a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a27      	ldr	r2, [pc, #156]	; (8009f48 <HAL_ADC_ConfigChannel+0x7b8>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d113      	bne.n	8009ed6 <HAL_ADC_ConfigChannel+0x746>
 8009eae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009eb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10d      	bne.n	8009ed6 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a1f      	ldr	r2, [pc, #124]	; (8009f3c <HAL_ADC_ConfigChannel+0x7ac>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d12a      	bne.n	8009f1a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009ec4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009ec8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ecc:	4619      	mov	r1, r3
 8009ece:	4819      	ldr	r0, [pc, #100]	; (8009f34 <HAL_ADC_ConfigChannel+0x7a4>)
 8009ed0:	f7fe fee7 	bl	8008ca2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009ed4:	e021      	b.n	8009f1a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a1c      	ldr	r2, [pc, #112]	; (8009f4c <HAL_ADC_ConfigChannel+0x7bc>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d11c      	bne.n	8009f1a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009ee0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d116      	bne.n	8009f1a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a12      	ldr	r2, [pc, #72]	; (8009f3c <HAL_ADC_ConfigChannel+0x7ac>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d111      	bne.n	8009f1a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009ef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009efa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009efe:	4619      	mov	r1, r3
 8009f00:	480c      	ldr	r0, [pc, #48]	; (8009f34 <HAL_ADC_ConfigChannel+0x7a4>)
 8009f02:	f7fe fece 	bl	8008ca2 <LL_ADC_SetCommonPathInternalCh>
 8009f06:	e008      	b.n	8009f1a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f0c:	f043 0220 	orr.w	r2, r3, #32
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8009f22:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	37d8      	adds	r7, #216	; 0xd8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	80080000 	.word	0x80080000
 8009f34:	50040300 	.word	0x50040300
 8009f38:	c7520000 	.word	0xc7520000
 8009f3c:	50040000 	.word	0x50040000
 8009f40:	20000000 	.word	0x20000000
 8009f44:	053e2d63 	.word	0x053e2d63
 8009f48:	cb840000 	.word	0xcb840000
 8009f4c:	80000001 	.word	0x80000001

08009f50 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b088      	sub	sp, #32
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7ff f864 	bl	8009034 <LL_ADC_REG_IsConversionOngoing>
 8009f6c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7ff f885 	bl	8009082 <LL_ADC_INJ_IsConversionOngoing>
 8009f78:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d103      	bne.n	8009f88 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f000 8098 	beq.w	800a0b8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d02a      	beq.n	8009fec <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	7e5b      	ldrb	r3, [r3, #25]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d126      	bne.n	8009fec <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	7e1b      	ldrb	r3, [r3, #24]
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d122      	bne.n	8009fec <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8009faa:	e014      	b.n	8009fd6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	4a45      	ldr	r2, [pc, #276]	; (800a0c4 <ADC_ConversionStop+0x174>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d90d      	bls.n	8009fd0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fb8:	f043 0210 	orr.w	r2, r3, #16
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fc4:	f043 0201 	orr.w	r2, r3, #1
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e074      	b.n	800a0ba <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fe0:	2b40      	cmp	r3, #64	; 0x40
 8009fe2:	d1e3      	bne.n	8009fac <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2240      	movs	r2, #64	; 0x40
 8009fea:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d014      	beq.n	800a01c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7ff f81c 	bl	8009034 <LL_ADC_REG_IsConversionOngoing>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00c      	beq.n	800a01c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4618      	mov	r0, r3
 800a008:	f7fe ffd9 	bl	8008fbe <LL_ADC_IsDisableOngoing>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d104      	bne.n	800a01c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4618      	mov	r0, r3
 800a018:	f7fe fff8 	bl	800900c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d014      	beq.n	800a04c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4618      	mov	r0, r3
 800a028:	f7ff f82b 	bl	8009082 <LL_ADC_INJ_IsConversionOngoing>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00c      	beq.n	800a04c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4618      	mov	r0, r3
 800a038:	f7fe ffc1 	bl	8008fbe <LL_ADC_IsDisableOngoing>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d104      	bne.n	800a04c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4618      	mov	r0, r3
 800a048:	f7ff f807 	bl	800905a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	2b02      	cmp	r3, #2
 800a050:	d005      	beq.n	800a05e <ADC_ConversionStop+0x10e>
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	2b03      	cmp	r3, #3
 800a056:	d105      	bne.n	800a064 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800a058:	230c      	movs	r3, #12
 800a05a:	617b      	str	r3, [r7, #20]
        break;
 800a05c:	e005      	b.n	800a06a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800a05e:	2308      	movs	r3, #8
 800a060:	617b      	str	r3, [r7, #20]
        break;
 800a062:	e002      	b.n	800a06a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800a064:	2304      	movs	r3, #4
 800a066:	617b      	str	r3, [r7, #20]
        break;
 800a068:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800a06a:	f7fe fdd7 	bl	8008c1c <HAL_GetTick>
 800a06e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a070:	e01b      	b.n	800a0aa <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800a072:	f7fe fdd3 	bl	8008c1c <HAL_GetTick>
 800a076:	4602      	mov	r2, r0
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	1ad3      	subs	r3, r2, r3
 800a07c:	2b05      	cmp	r3, #5
 800a07e:	d914      	bls.n	800a0aa <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	689a      	ldr	r2, [r3, #8]
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	4013      	ands	r3, r2
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d00d      	beq.n	800a0aa <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a092:	f043 0210 	orr.w	r2, r3, #16
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a09e:	f043 0201 	orr.w	r2, r3, #1
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e007      	b.n	800a0ba <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	689a      	ldr	r2, [r3, #8]
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1dc      	bne.n	800a072 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3720      	adds	r7, #32
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	a33fffff 	.word	0xa33fffff

0800a0c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7fe ff5f 	bl	8008f98 <LL_ADC_IsEnabled>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d14d      	bne.n	800a17c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	689a      	ldr	r2, [r3, #8]
 800a0e6:	4b28      	ldr	r3, [pc, #160]	; (800a188 <ADC_Enable+0xc0>)
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00d      	beq.n	800a10a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0f2:	f043 0210 	orr.w	r2, r3, #16
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0fe:	f043 0201 	orr.w	r2, r3, #1
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	e039      	b.n	800a17e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4618      	mov	r0, r3
 800a110:	f7fe ff1a 	bl	8008f48 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800a114:	f7fe fd82 	bl	8008c1c <HAL_GetTick>
 800a118:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a11a:	e028      	b.n	800a16e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4618      	mov	r0, r3
 800a122:	f7fe ff39 	bl	8008f98 <LL_ADC_IsEnabled>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d104      	bne.n	800a136 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4618      	mov	r0, r3
 800a132:	f7fe ff09 	bl	8008f48 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a136:	f7fe fd71 	bl	8008c1c <HAL_GetTick>
 800a13a:	4602      	mov	r2, r0
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	1ad3      	subs	r3, r2, r3
 800a140:	2b02      	cmp	r3, #2
 800a142:	d914      	bls.n	800a16e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 0301 	and.w	r3, r3, #1
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d00d      	beq.n	800a16e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a156:	f043 0210 	orr.w	r2, r3, #16
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a162:	f043 0201 	orr.w	r2, r3, #1
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	e007      	b.n	800a17e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f003 0301 	and.w	r3, r3, #1
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d1cf      	bne.n	800a11c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	8000003f 	.word	0x8000003f

0800a18c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4618      	mov	r0, r3
 800a19a:	f7fe ff10 	bl	8008fbe <LL_ADC_IsDisableOngoing>
 800a19e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7fe fef7 	bl	8008f98 <LL_ADC_IsEnabled>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d047      	beq.n	800a240 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d144      	bne.n	800a240 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	f003 030d 	and.w	r3, r3, #13
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d10c      	bne.n	800a1de <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7fe fed1 	bl	8008f70 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2203      	movs	r2, #3
 800a1d4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a1d6:	f7fe fd21 	bl	8008c1c <HAL_GetTick>
 800a1da:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a1dc:	e029      	b.n	800a232 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1e2:	f043 0210 	orr.w	r2, r3, #16
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1ee:	f043 0201 	orr.w	r2, r3, #1
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e023      	b.n	800a242 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a1fa:	f7fe fd0f 	bl	8008c1c <HAL_GetTick>
 800a1fe:	4602      	mov	r2, r0
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	2b02      	cmp	r3, #2
 800a206:	d914      	bls.n	800a232 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	f003 0301 	and.w	r3, r3, #1
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00d      	beq.n	800a232 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a21a:	f043 0210 	orr.w	r2, r3, #16
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a226:	f043 0201 	orr.w	r2, r3, #1
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	e007      	b.n	800a242 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	f003 0301 	and.w	r3, r3, #1
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d1dc      	bne.n	800a1fa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a240:	2300      	movs	r3, #0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b084      	sub	sp, #16
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a256:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a25c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a260:	2b00      	cmp	r3, #0
 800a262:	d14b      	bne.n	800a2fc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a268:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f003 0308 	and.w	r3, r3, #8
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d021      	beq.n	800a2c2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4618      	mov	r0, r3
 800a284:	f7fe fd83 	bl	8008d8e <LL_ADC_REG_IsTriggerSourceSWStart>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d032      	beq.n	800a2f4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d12b      	bne.n	800a2f4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d11f      	bne.n	800a2f4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2b8:	f043 0201 	orr.w	r2, r3, #1
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	655a      	str	r2, [r3, #84]	; 0x54
 800a2c0:	e018      	b.n	800a2f4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	f003 0302 	and.w	r3, r3, #2
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d111      	bne.n	800a2f4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d105      	bne.n	800a2f4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ec:	f043 0201 	orr.w	r2, r3, #1
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f7f9 fd77 	bl	8003de8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a2fa:	e00e      	b.n	800a31a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a300:	f003 0310 	and.w	r3, r3, #16
 800a304:	2b00      	cmp	r3, #0
 800a306:	d003      	beq.n	800a310 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f7ff fa37 	bl	800977c <HAL_ADC_ErrorCallback>
}
 800a30e:	e004      	b.n	800a31a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	4798      	blx	r3
}
 800a31a:	bf00      	nop
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b084      	sub	sp, #16
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a32e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f7ff fa19 	bl	8009768 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a336:	bf00      	nop
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a34a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a350:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a35c:	f043 0204 	orr.w	r2, r3, #4
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f7ff fa09 	bl	800977c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a36a:	bf00      	nop
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
	...

0800a374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f003 0307 	and.w	r3, r3, #7
 800a382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a384:	4b0c      	ldr	r3, [pc, #48]	; (800a3b8 <__NVIC_SetPriorityGrouping+0x44>)
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a38a:	68ba      	ldr	r2, [r7, #8]
 800a38c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a390:	4013      	ands	r3, r2
 800a392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a39c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a3a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a3a6:	4a04      	ldr	r2, [pc, #16]	; (800a3b8 <__NVIC_SetPriorityGrouping+0x44>)
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	60d3      	str	r3, [r2, #12]
}
 800a3ac:	bf00      	nop
 800a3ae:	3714      	adds	r7, #20
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr
 800a3b8:	e000ed00 	.word	0xe000ed00

0800a3bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a3c0:	4b04      	ldr	r3, [pc, #16]	; (800a3d4 <__NVIC_GetPriorityGrouping+0x18>)
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	0a1b      	lsrs	r3, r3, #8
 800a3c6:	f003 0307 	and.w	r3, r3, #7
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr
 800a3d4:	e000ed00 	.word	0xe000ed00

0800a3d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b083      	sub	sp, #12
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	4603      	mov	r3, r0
 800a3e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a3e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	db0b      	blt.n	800a402 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a3ea:	79fb      	ldrb	r3, [r7, #7]
 800a3ec:	f003 021f 	and.w	r2, r3, #31
 800a3f0:	4907      	ldr	r1, [pc, #28]	; (800a410 <__NVIC_EnableIRQ+0x38>)
 800a3f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3f6:	095b      	lsrs	r3, r3, #5
 800a3f8:	2001      	movs	r0, #1
 800a3fa:	fa00 f202 	lsl.w	r2, r0, r2
 800a3fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a402:	bf00      	nop
 800a404:	370c      	adds	r7, #12
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	e000e100 	.word	0xe000e100

0800a414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	4603      	mov	r3, r0
 800a41c:	6039      	str	r1, [r7, #0]
 800a41e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a424:	2b00      	cmp	r3, #0
 800a426:	db0a      	blt.n	800a43e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	b2da      	uxtb	r2, r3
 800a42c:	490c      	ldr	r1, [pc, #48]	; (800a460 <__NVIC_SetPriority+0x4c>)
 800a42e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a432:	0112      	lsls	r2, r2, #4
 800a434:	b2d2      	uxtb	r2, r2
 800a436:	440b      	add	r3, r1
 800a438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a43c:	e00a      	b.n	800a454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	b2da      	uxtb	r2, r3
 800a442:	4908      	ldr	r1, [pc, #32]	; (800a464 <__NVIC_SetPriority+0x50>)
 800a444:	79fb      	ldrb	r3, [r7, #7]
 800a446:	f003 030f 	and.w	r3, r3, #15
 800a44a:	3b04      	subs	r3, #4
 800a44c:	0112      	lsls	r2, r2, #4
 800a44e:	b2d2      	uxtb	r2, r2
 800a450:	440b      	add	r3, r1
 800a452:	761a      	strb	r2, [r3, #24]
}
 800a454:	bf00      	nop
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr
 800a460:	e000e100 	.word	0xe000e100
 800a464:	e000ed00 	.word	0xe000ed00

0800a468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a468:	b480      	push	{r7}
 800a46a:	b089      	sub	sp, #36	; 0x24
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f003 0307 	and.w	r3, r3, #7
 800a47a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	f1c3 0307 	rsb	r3, r3, #7
 800a482:	2b04      	cmp	r3, #4
 800a484:	bf28      	it	cs
 800a486:	2304      	movcs	r3, #4
 800a488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a48a:	69fb      	ldr	r3, [r7, #28]
 800a48c:	3304      	adds	r3, #4
 800a48e:	2b06      	cmp	r3, #6
 800a490:	d902      	bls.n	800a498 <NVIC_EncodePriority+0x30>
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	3b03      	subs	r3, #3
 800a496:	e000      	b.n	800a49a <NVIC_EncodePriority+0x32>
 800a498:	2300      	movs	r3, #0
 800a49a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a49c:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4a6:	43da      	mvns	r2, r3
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	401a      	ands	r2, r3
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a4b0:	f04f 31ff 	mov.w	r1, #4294967295
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	fa01 f303 	lsl.w	r3, r1, r3
 800a4ba:	43d9      	mvns	r1, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a4c0:	4313      	orrs	r3, r2
         );
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3724      	adds	r7, #36	; 0x24
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
	...

0800a4d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	3b01      	subs	r3, #1
 800a4dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a4e0:	d301      	bcc.n	800a4e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e00f      	b.n	800a506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a4e6:	4a0a      	ldr	r2, [pc, #40]	; (800a510 <SysTick_Config+0x40>)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a4ee:	210f      	movs	r1, #15
 800a4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f4:	f7ff ff8e 	bl	800a414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a4f8:	4b05      	ldr	r3, [pc, #20]	; (800a510 <SysTick_Config+0x40>)
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a4fe:	4b04      	ldr	r3, [pc, #16]	; (800a510 <SysTick_Config+0x40>)
 800a500:	2207      	movs	r2, #7
 800a502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	e000e010 	.word	0xe000e010

0800a514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f7ff ff29 	bl	800a374 <__NVIC_SetPriorityGrouping>
}
 800a522:	bf00      	nop
 800a524:	3708      	adds	r7, #8
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b086      	sub	sp, #24
 800a52e:	af00      	add	r7, sp, #0
 800a530:	4603      	mov	r3, r0
 800a532:	60b9      	str	r1, [r7, #8]
 800a534:	607a      	str	r2, [r7, #4]
 800a536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a538:	2300      	movs	r3, #0
 800a53a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a53c:	f7ff ff3e 	bl	800a3bc <__NVIC_GetPriorityGrouping>
 800a540:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	68b9      	ldr	r1, [r7, #8]
 800a546:	6978      	ldr	r0, [r7, #20]
 800a548:	f7ff ff8e 	bl	800a468 <NVIC_EncodePriority>
 800a54c:	4602      	mov	r2, r0
 800a54e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a552:	4611      	mov	r1, r2
 800a554:	4618      	mov	r0, r3
 800a556:	f7ff ff5d 	bl	800a414 <__NVIC_SetPriority>
}
 800a55a:	bf00      	nop
 800a55c:	3718      	adds	r7, #24
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b082      	sub	sp, #8
 800a566:	af00      	add	r7, sp, #0
 800a568:	4603      	mov	r3, r0
 800a56a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a56c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a570:	4618      	mov	r0, r3
 800a572:	f7ff ff31 	bl	800a3d8 <__NVIC_EnableIRQ>
}
 800a576:	bf00      	nop
 800a578:	3708      	adds	r7, #8
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b082      	sub	sp, #8
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7ff ffa2 	bl	800a4d0 <SysTick_Config>
 800a58c:	4603      	mov	r3, r0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3708      	adds	r7, #8
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
	...

0800a598 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d101      	bne.n	800a5aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e098      	b.n	800a6dc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	4b4d      	ldr	r3, [pc, #308]	; (800a6e8 <HAL_DMA_Init+0x150>)
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d80f      	bhi.n	800a5d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	4b4b      	ldr	r3, [pc, #300]	; (800a6ec <HAL_DMA_Init+0x154>)
 800a5be:	4413      	add	r3, r2
 800a5c0:	4a4b      	ldr	r2, [pc, #300]	; (800a6f0 <HAL_DMA_Init+0x158>)
 800a5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5c6:	091b      	lsrs	r3, r3, #4
 800a5c8:	009a      	lsls	r2, r3, #2
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	4a48      	ldr	r2, [pc, #288]	; (800a6f4 <HAL_DMA_Init+0x15c>)
 800a5d2:	641a      	str	r2, [r3, #64]	; 0x40
 800a5d4:	e00e      	b.n	800a5f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	461a      	mov	r2, r3
 800a5dc:	4b46      	ldr	r3, [pc, #280]	; (800a6f8 <HAL_DMA_Init+0x160>)
 800a5de:	4413      	add	r3, r2
 800a5e0:	4a43      	ldr	r2, [pc, #268]	; (800a6f0 <HAL_DMA_Init+0x158>)
 800a5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5e6:	091b      	lsrs	r3, r3, #4
 800a5e8:	009a      	lsls	r2, r3, #2
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	4a42      	ldr	r2, [pc, #264]	; (800a6fc <HAL_DMA_Init+0x164>)
 800a5f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2202      	movs	r2, #2
 800a5f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a60a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a60e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a618:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a624:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	699b      	ldr	r3, [r3, #24]
 800a62a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a630:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a1b      	ldr	r3, [r3, #32]
 800a636:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	68fa      	ldr	r2, [r7, #12]
 800a644:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a64e:	d039      	beq.n	800a6c4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a654:	4a27      	ldr	r2, [pc, #156]	; (800a6f4 <HAL_DMA_Init+0x15c>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d11a      	bne.n	800a690 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a65a:	4b29      	ldr	r3, [pc, #164]	; (800a700 <HAL_DMA_Init+0x168>)
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a662:	f003 031c 	and.w	r3, r3, #28
 800a666:	210f      	movs	r1, #15
 800a668:	fa01 f303 	lsl.w	r3, r1, r3
 800a66c:	43db      	mvns	r3, r3
 800a66e:	4924      	ldr	r1, [pc, #144]	; (800a700 <HAL_DMA_Init+0x168>)
 800a670:	4013      	ands	r3, r2
 800a672:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800a674:	4b22      	ldr	r3, [pc, #136]	; (800a700 <HAL_DMA_Init+0x168>)
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6859      	ldr	r1, [r3, #4]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a680:	f003 031c 	and.w	r3, r3, #28
 800a684:	fa01 f303 	lsl.w	r3, r1, r3
 800a688:	491d      	ldr	r1, [pc, #116]	; (800a700 <HAL_DMA_Init+0x168>)
 800a68a:	4313      	orrs	r3, r2
 800a68c:	600b      	str	r3, [r1, #0]
 800a68e:	e019      	b.n	800a6c4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a690:	4b1c      	ldr	r3, [pc, #112]	; (800a704 <HAL_DMA_Init+0x16c>)
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a698:	f003 031c 	and.w	r3, r3, #28
 800a69c:	210f      	movs	r1, #15
 800a69e:	fa01 f303 	lsl.w	r3, r1, r3
 800a6a2:	43db      	mvns	r3, r3
 800a6a4:	4917      	ldr	r1, [pc, #92]	; (800a704 <HAL_DMA_Init+0x16c>)
 800a6a6:	4013      	ands	r3, r2
 800a6a8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800a6aa:	4b16      	ldr	r3, [pc, #88]	; (800a704 <HAL_DMA_Init+0x16c>)
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6859      	ldr	r1, [r3, #4]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6b6:	f003 031c 	and.w	r3, r3, #28
 800a6ba:	fa01 f303 	lsl.w	r3, r1, r3
 800a6be:	4911      	ldr	r1, [pc, #68]	; (800a704 <HAL_DMA_Init+0x16c>)
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3714      	adds	r7, #20
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr
 800a6e8:	40020407 	.word	0x40020407
 800a6ec:	bffdfff8 	.word	0xbffdfff8
 800a6f0:	cccccccd 	.word	0xcccccccd
 800a6f4:	40020000 	.word	0x40020000
 800a6f8:	bffdfbf8 	.word	0xbffdfbf8
 800a6fc:	40020400 	.word	0x40020400
 800a700:	400200a8 	.word	0x400200a8
 800a704:	400204a8 	.word	0x400204a8

0800a708 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b086      	sub	sp, #24
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
 800a714:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a716:	2300      	movs	r3, #0
 800a718:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a720:	2b01      	cmp	r3, #1
 800a722:	d101      	bne.n	800a728 <HAL_DMA_Start_IT+0x20>
 800a724:	2302      	movs	r3, #2
 800a726:	e04b      	b.n	800a7c0 <HAL_DMA_Start_IT+0xb8>
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a736:	b2db      	uxtb	r3, r3
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d13a      	bne.n	800a7b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2202      	movs	r2, #2
 800a740:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f022 0201 	bic.w	r2, r2, #1
 800a758:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	68b9      	ldr	r1, [r7, #8]
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f000 f91e 	bl	800a9a2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d008      	beq.n	800a780 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f042 020e 	orr.w	r2, r2, #14
 800a77c:	601a      	str	r2, [r3, #0]
 800a77e:	e00f      	b.n	800a7a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f022 0204 	bic.w	r2, r2, #4
 800a78e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f042 020a 	orr.w	r2, r2, #10
 800a79e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f042 0201 	orr.w	r2, r2, #1
 800a7ae:	601a      	str	r2, [r3, #0]
 800a7b0:	e005      	b.n	800a7be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a7ba:	2302      	movs	r3, #2
 800a7bc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a7be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3718      	adds	r7, #24
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d008      	beq.n	800a7f2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2204      	movs	r2, #4
 800a7e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e022      	b.n	800a838 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f022 020e 	bic.w	r2, r2, #14
 800a800:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f022 0201 	bic.w	r2, r2, #1
 800a810:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a816:	f003 021c 	and.w	r2, r3, #28
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a81e:	2101      	movs	r1, #1
 800a820:	fa01 f202 	lsl.w	r2, r1, r2
 800a824:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2201      	movs	r2, #1
 800a82a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800a836:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3714      	adds	r7, #20
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a860:	f003 031c 	and.w	r3, r3, #28
 800a864:	2204      	movs	r2, #4
 800a866:	409a      	lsls	r2, r3
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	4013      	ands	r3, r2
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d026      	beq.n	800a8be <HAL_DMA_IRQHandler+0x7a>
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	f003 0304 	and.w	r3, r3, #4
 800a876:	2b00      	cmp	r3, #0
 800a878:	d021      	beq.n	800a8be <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f003 0320 	and.w	r3, r3, #32
 800a884:	2b00      	cmp	r3, #0
 800a886:	d107      	bne.n	800a898 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f022 0204 	bic.w	r2, r2, #4
 800a896:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a89c:	f003 021c 	and.w	r2, r3, #28
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a4:	2104      	movs	r1, #4
 800a8a6:	fa01 f202 	lsl.w	r2, r1, r2
 800a8aa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d071      	beq.n	800a998 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800a8bc:	e06c      	b.n	800a998 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8c2:	f003 031c 	and.w	r3, r3, #28
 800a8c6:	2202      	movs	r2, #2
 800a8c8:	409a      	lsls	r2, r3
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	4013      	ands	r3, r2
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d02e      	beq.n	800a930 <HAL_DMA_IRQHandler+0xec>
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	f003 0302 	and.w	r3, r3, #2
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d029      	beq.n	800a930 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f003 0320 	and.w	r3, r3, #32
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d10b      	bne.n	800a902 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f022 020a 	bic.w	r2, r2, #10
 800a8f8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a906:	f003 021c 	and.w	r2, r3, #28
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90e:	2102      	movs	r1, #2
 800a910:	fa01 f202 	lsl.w	r2, r1, r2
 800a914:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a922:	2b00      	cmp	r3, #0
 800a924:	d038      	beq.n	800a998 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800a92e:	e033      	b.n	800a998 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a934:	f003 031c 	and.w	r3, r3, #28
 800a938:	2208      	movs	r2, #8
 800a93a:	409a      	lsls	r2, r3
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	4013      	ands	r3, r2
 800a940:	2b00      	cmp	r3, #0
 800a942:	d02a      	beq.n	800a99a <HAL_DMA_IRQHandler+0x156>
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	f003 0308 	and.w	r3, r3, #8
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d025      	beq.n	800a99a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f022 020e 	bic.w	r2, r2, #14
 800a95c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a962:	f003 021c 	and.w	r2, r3, #28
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96a:	2101      	movs	r1, #1
 800a96c:	fa01 f202 	lsl.w	r2, r1, r2
 800a970:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2201      	movs	r2, #1
 800a976:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d004      	beq.n	800a99a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a998:	bf00      	nop
 800a99a:	bf00      	nop
}
 800a99c:	3710      	adds	r7, #16
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a9a2:	b480      	push	{r7}
 800a9a4:	b085      	sub	sp, #20
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	60f8      	str	r0, [r7, #12]
 800a9aa:	60b9      	str	r1, [r7, #8]
 800a9ac:	607a      	str	r2, [r7, #4]
 800a9ae:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9b4:	f003 021c 	and.w	r2, r3, #28
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9bc:	2101      	movs	r1, #1
 800a9be:	fa01 f202 	lsl.w	r2, r1, r2
 800a9c2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	683a      	ldr	r2, [r7, #0]
 800a9ca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	2b10      	cmp	r3, #16
 800a9d2:	d108      	bne.n	800a9e6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	68ba      	ldr	r2, [r7, #8]
 800a9e2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a9e4:	e007      	b.n	800a9f6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	68ba      	ldr	r2, [r7, #8]
 800a9ec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	60da      	str	r2, [r3, #12]
}
 800a9f6:	bf00      	nop
 800a9f8:	3714      	adds	r7, #20
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
	...

0800aa04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b087      	sub	sp, #28
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800aa12:	e148      	b.n	800aca6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	2101      	movs	r1, #1
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	fa01 f303 	lsl.w	r3, r1, r3
 800aa20:	4013      	ands	r3, r2
 800aa22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	f000 813a 	beq.w	800aca0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d00b      	beq.n	800aa4c <HAL_GPIO_Init+0x48>
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	2b02      	cmp	r3, #2
 800aa3a:	d007      	beq.n	800aa4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aa40:	2b11      	cmp	r3, #17
 800aa42:	d003      	beq.n	800aa4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	2b12      	cmp	r3, #18
 800aa4a:	d130      	bne.n	800aaae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	005b      	lsls	r3, r3, #1
 800aa56:	2203      	movs	r2, #3
 800aa58:	fa02 f303 	lsl.w	r3, r2, r3
 800aa5c:	43db      	mvns	r3, r3
 800aa5e:	693a      	ldr	r2, [r7, #16]
 800aa60:	4013      	ands	r3, r2
 800aa62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	68da      	ldr	r2, [r3, #12]
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	005b      	lsls	r3, r3, #1
 800aa6c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa70:	693a      	ldr	r2, [r7, #16]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	693a      	ldr	r2, [r7, #16]
 800aa7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800aa82:	2201      	movs	r2, #1
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	fa02 f303 	lsl.w	r3, r2, r3
 800aa8a:	43db      	mvns	r3, r3
 800aa8c:	693a      	ldr	r2, [r7, #16]
 800aa8e:	4013      	ands	r3, r2
 800aa90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	091b      	lsrs	r3, r3, #4
 800aa98:	f003 0201 	and.w	r2, r3, #1
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa2:	693a      	ldr	r2, [r7, #16]
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	693a      	ldr	r2, [r7, #16]
 800aaac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	005b      	lsls	r3, r3, #1
 800aab8:	2203      	movs	r2, #3
 800aaba:	fa02 f303 	lsl.w	r3, r2, r3
 800aabe:	43db      	mvns	r3, r3
 800aac0:	693a      	ldr	r2, [r7, #16]
 800aac2:	4013      	ands	r3, r2
 800aac4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	689a      	ldr	r2, [r3, #8]
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	005b      	lsls	r3, r3, #1
 800aace:	fa02 f303 	lsl.w	r3, r2, r3
 800aad2:	693a      	ldr	r2, [r7, #16]
 800aad4:	4313      	orrs	r3, r2
 800aad6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	693a      	ldr	r2, [r7, #16]
 800aadc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	2b02      	cmp	r3, #2
 800aae4:	d003      	beq.n	800aaee <HAL_GPIO_Init+0xea>
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	2b12      	cmp	r3, #18
 800aaec:	d123      	bne.n	800ab36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	08da      	lsrs	r2, r3, #3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	3208      	adds	r2, #8
 800aaf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aafa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	f003 0307 	and.w	r3, r3, #7
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	220f      	movs	r2, #15
 800ab06:	fa02 f303 	lsl.w	r3, r2, r3
 800ab0a:	43db      	mvns	r3, r3
 800ab0c:	693a      	ldr	r2, [r7, #16]
 800ab0e:	4013      	ands	r3, r2
 800ab10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	691a      	ldr	r2, [r3, #16]
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	f003 0307 	and.w	r3, r3, #7
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab22:	693a      	ldr	r2, [r7, #16]
 800ab24:	4313      	orrs	r3, r2
 800ab26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	08da      	lsrs	r2, r3, #3
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	3208      	adds	r2, #8
 800ab30:	6939      	ldr	r1, [r7, #16]
 800ab32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	005b      	lsls	r3, r3, #1
 800ab40:	2203      	movs	r2, #3
 800ab42:	fa02 f303 	lsl.w	r3, r2, r3
 800ab46:	43db      	mvns	r3, r3
 800ab48:	693a      	ldr	r2, [r7, #16]
 800ab4a:	4013      	ands	r3, r2
 800ab4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	f003 0203 	and.w	r2, r3, #3
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	005b      	lsls	r3, r3, #1
 800ab5a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab5e:	693a      	ldr	r2, [r7, #16]
 800ab60:	4313      	orrs	r3, r2
 800ab62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	693a      	ldr	r2, [r7, #16]
 800ab68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f000 8094 	beq.w	800aca0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ab78:	4b52      	ldr	r3, [pc, #328]	; (800acc4 <HAL_GPIO_Init+0x2c0>)
 800ab7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab7c:	4a51      	ldr	r2, [pc, #324]	; (800acc4 <HAL_GPIO_Init+0x2c0>)
 800ab7e:	f043 0301 	orr.w	r3, r3, #1
 800ab82:	6613      	str	r3, [r2, #96]	; 0x60
 800ab84:	4b4f      	ldr	r3, [pc, #316]	; (800acc4 <HAL_GPIO_Init+0x2c0>)
 800ab86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab88:	f003 0301 	and.w	r3, r3, #1
 800ab8c:	60bb      	str	r3, [r7, #8]
 800ab8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800ab90:	4a4d      	ldr	r2, [pc, #308]	; (800acc8 <HAL_GPIO_Init+0x2c4>)
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	089b      	lsrs	r3, r3, #2
 800ab96:	3302      	adds	r3, #2
 800ab98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	f003 0303 	and.w	r3, r3, #3
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	220f      	movs	r2, #15
 800aba8:	fa02 f303 	lsl.w	r3, r2, r3
 800abac:	43db      	mvns	r3, r3
 800abae:	693a      	ldr	r2, [r7, #16]
 800abb0:	4013      	ands	r3, r2
 800abb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800abba:	d00d      	beq.n	800abd8 <HAL_GPIO_Init+0x1d4>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	4a43      	ldr	r2, [pc, #268]	; (800accc <HAL_GPIO_Init+0x2c8>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d007      	beq.n	800abd4 <HAL_GPIO_Init+0x1d0>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	4a42      	ldr	r2, [pc, #264]	; (800acd0 <HAL_GPIO_Init+0x2cc>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d101      	bne.n	800abd0 <HAL_GPIO_Init+0x1cc>
 800abcc:	2302      	movs	r3, #2
 800abce:	e004      	b.n	800abda <HAL_GPIO_Init+0x1d6>
 800abd0:	2307      	movs	r3, #7
 800abd2:	e002      	b.n	800abda <HAL_GPIO_Init+0x1d6>
 800abd4:	2301      	movs	r3, #1
 800abd6:	e000      	b.n	800abda <HAL_GPIO_Init+0x1d6>
 800abd8:	2300      	movs	r3, #0
 800abda:	697a      	ldr	r2, [r7, #20]
 800abdc:	f002 0203 	and.w	r2, r2, #3
 800abe0:	0092      	lsls	r2, r2, #2
 800abe2:	4093      	lsls	r3, r2
 800abe4:	693a      	ldr	r2, [r7, #16]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800abea:	4937      	ldr	r1, [pc, #220]	; (800acc8 <HAL_GPIO_Init+0x2c4>)
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	089b      	lsrs	r3, r3, #2
 800abf0:	3302      	adds	r3, #2
 800abf2:	693a      	ldr	r2, [r7, #16]
 800abf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800abf8:	4b36      	ldr	r3, [pc, #216]	; (800acd4 <HAL_GPIO_Init+0x2d0>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	43db      	mvns	r3, r3
 800ac02:	693a      	ldr	r2, [r7, #16]
 800ac04:	4013      	ands	r3, r2
 800ac06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d003      	beq.n	800ac1c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800ac14:	693a      	ldr	r2, [r7, #16]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800ac1c:	4a2d      	ldr	r2, [pc, #180]	; (800acd4 <HAL_GPIO_Init+0x2d0>)
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800ac22:	4b2c      	ldr	r3, [pc, #176]	; (800acd4 <HAL_GPIO_Init+0x2d0>)
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	43db      	mvns	r3, r3
 800ac2c:	693a      	ldr	r2, [r7, #16]
 800ac2e:	4013      	ands	r3, r2
 800ac30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d003      	beq.n	800ac46 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800ac3e:	693a      	ldr	r2, [r7, #16]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800ac46:	4a23      	ldr	r2, [pc, #140]	; (800acd4 <HAL_GPIO_Init+0x2d0>)
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ac4c:	4b21      	ldr	r3, [pc, #132]	; (800acd4 <HAL_GPIO_Init+0x2d0>)
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	43db      	mvns	r3, r3
 800ac56:	693a      	ldr	r2, [r7, #16]
 800ac58:	4013      	ands	r3, r2
 800ac5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d003      	beq.n	800ac70 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800ac68:	693a      	ldr	r2, [r7, #16]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800ac70:	4a18      	ldr	r2, [pc, #96]	; (800acd4 <HAL_GPIO_Init+0x2d0>)
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800ac76:	4b17      	ldr	r3, [pc, #92]	; (800acd4 <HAL_GPIO_Init+0x2d0>)
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	43db      	mvns	r3, r3
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	4013      	ands	r3, r2
 800ac84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d003      	beq.n	800ac9a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800ac92:	693a      	ldr	r2, [r7, #16]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800ac9a:	4a0e      	ldr	r2, [pc, #56]	; (800acd4 <HAL_GPIO_Init+0x2d0>)
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	3301      	adds	r3, #1
 800aca4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	fa22 f303 	lsr.w	r3, r2, r3
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f47f aeaf 	bne.w	800aa14 <HAL_GPIO_Init+0x10>
  }
}
 800acb6:	bf00      	nop
 800acb8:	bf00      	nop
 800acba:	371c      	adds	r7, #28
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr
 800acc4:	40021000 	.word	0x40021000
 800acc8:	40010000 	.word	0x40010000
 800accc:	48000400 	.word	0x48000400
 800acd0:	48000800 	.word	0x48000800
 800acd4:	40010400 	.word	0x40010400

0800acd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800acd8:	b480      	push	{r7}
 800acda:	b085      	sub	sp, #20
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	460b      	mov	r3, r1
 800ace2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	691a      	ldr	r2, [r3, #16]
 800ace8:	887b      	ldrh	r3, [r7, #2]
 800acea:	4013      	ands	r3, r2
 800acec:	2b00      	cmp	r3, #0
 800acee:	d002      	beq.n	800acf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800acf0:	2301      	movs	r3, #1
 800acf2:	73fb      	strb	r3, [r7, #15]
 800acf4:	e001      	b.n	800acfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800acf6:	2300      	movs	r3, #0
 800acf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800acfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3714      	adds	r7, #20
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	460b      	mov	r3, r1
 800ad12:	807b      	strh	r3, [r7, #2]
 800ad14:	4613      	mov	r3, r2
 800ad16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ad18:	787b      	ldrb	r3, [r7, #1]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d003      	beq.n	800ad26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ad1e:	887a      	ldrh	r2, [r7, #2]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ad24:	e002      	b.n	800ad2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ad26:	887a      	ldrh	r2, [r7, #2]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ad2c:	bf00      	nop
 800ad2e:	370c      	adds	r7, #12
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d101      	bne.n	800ad4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ad46:	2301      	movs	r3, #1
 800ad48:	e081      	b.n	800ae4e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d106      	bne.n	800ad64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f7f9 f92e 	bl	8003fc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2224      	movs	r2, #36	; 0x24
 800ad68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f022 0201 	bic.w	r2, r2, #1
 800ad7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	685a      	ldr	r2, [r3, #4]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ad88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	689a      	ldr	r2, [r3, #8]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ad98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d107      	bne.n	800adb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	689a      	ldr	r2, [r3, #8]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800adae:	609a      	str	r2, [r3, #8]
 800adb0:	e006      	b.n	800adc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	689a      	ldr	r2, [r3, #8]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800adbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d104      	bne.n	800add2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800add0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	6812      	ldr	r2, [r2, #0]
 800addc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ade0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ade4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	68da      	ldr	r2, [r3, #12]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800adf4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	691a      	ldr	r2, [r3, #16]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	695b      	ldr	r3, [r3, #20]
 800adfe:	ea42 0103 	orr.w	r1, r2, r3
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	699b      	ldr	r3, [r3, #24]
 800ae06:	021a      	lsls	r2, r3, #8
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	430a      	orrs	r2, r1
 800ae0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	69d9      	ldr	r1, [r3, #28]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6a1a      	ldr	r2, [r3, #32]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	430a      	orrs	r2, r1
 800ae1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f042 0201 	orr.w	r2, r2, #1
 800ae2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2200      	movs	r2, #0
 800ae34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2220      	movs	r2, #32
 800ae3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2200      	movs	r2, #0
 800ae42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3708      	adds	r7, #8
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
	...

0800ae58 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b088      	sub	sp, #32
 800ae5c:	af02      	add	r7, sp, #8
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	607a      	str	r2, [r7, #4]
 800ae62:	461a      	mov	r2, r3
 800ae64:	460b      	mov	r3, r1
 800ae66:	817b      	strh	r3, [r7, #10]
 800ae68:	4613      	mov	r3, r2
 800ae6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	2b20      	cmp	r3, #32
 800ae76:	f040 80da 	bne.w	800b02e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d101      	bne.n	800ae88 <HAL_I2C_Master_Transmit+0x30>
 800ae84:	2302      	movs	r3, #2
 800ae86:	e0d3      	b.n	800b030 <HAL_I2C_Master_Transmit+0x1d8>
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ae90:	f7fd fec4 	bl	8008c1c <HAL_GetTick>
 800ae94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	9300      	str	r3, [sp, #0]
 800ae9a:	2319      	movs	r3, #25
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f000 f8fc 	bl	800b0a0 <I2C_WaitOnFlagUntilTimeout>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d001      	beq.n	800aeb2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e0be      	b.n	800b030 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2221      	movs	r2, #33	; 0x21
 800aeb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2210      	movs	r2, #16
 800aebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2200      	movs	r2, #0
 800aec6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	893a      	ldrh	r2, [r7, #8]
 800aed2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2200      	movs	r2, #0
 800aed8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aede:	b29b      	uxth	r3, r3
 800aee0:	2bff      	cmp	r3, #255	; 0xff
 800aee2:	d90e      	bls.n	800af02 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	22ff      	movs	r2, #255	; 0xff
 800aee8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aeee:	b2da      	uxtb	r2, r3
 800aef0:	8979      	ldrh	r1, [r7, #10]
 800aef2:	4b51      	ldr	r3, [pc, #324]	; (800b038 <HAL_I2C_Master_Transmit+0x1e0>)
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aefa:	68f8      	ldr	r0, [r7, #12]
 800aefc:	f000 f9f2 	bl	800b2e4 <I2C_TransferConfig>
 800af00:	e06c      	b.n	800afdc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af06:	b29a      	uxth	r2, r3
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af10:	b2da      	uxtb	r2, r3
 800af12:	8979      	ldrh	r1, [r7, #10]
 800af14:	4b48      	ldr	r3, [pc, #288]	; (800b038 <HAL_I2C_Master_Transmit+0x1e0>)
 800af16:	9300      	str	r3, [sp, #0]
 800af18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	f000 f9e1 	bl	800b2e4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800af22:	e05b      	b.n	800afdc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af24:	697a      	ldr	r2, [r7, #20]
 800af26:	6a39      	ldr	r1, [r7, #32]
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f000 f8f9 	bl	800b120 <I2C_WaitOnTXISFlagUntilTimeout>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d001      	beq.n	800af38 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800af34:	2301      	movs	r3, #1
 800af36:	e07b      	b.n	800b030 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3c:	781a      	ldrb	r2, [r3, #0]
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af48:	1c5a      	adds	r2, r3, #1
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af52:	b29b      	uxth	r3, r3
 800af54:	3b01      	subs	r3, #1
 800af56:	b29a      	uxth	r2, r3
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af60:	3b01      	subs	r3, #1
 800af62:	b29a      	uxth	r2, r3
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d034      	beq.n	800afdc <HAL_I2C_Master_Transmit+0x184>
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af76:	2b00      	cmp	r3, #0
 800af78:	d130      	bne.n	800afdc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	9300      	str	r3, [sp, #0]
 800af7e:	6a3b      	ldr	r3, [r7, #32]
 800af80:	2200      	movs	r2, #0
 800af82:	2180      	movs	r1, #128	; 0x80
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f000 f88b 	bl	800b0a0 <I2C_WaitOnFlagUntilTimeout>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d001      	beq.n	800af94 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800af90:	2301      	movs	r3, #1
 800af92:	e04d      	b.n	800b030 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af98:	b29b      	uxth	r3, r3
 800af9a:	2bff      	cmp	r3, #255	; 0xff
 800af9c:	d90e      	bls.n	800afbc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	22ff      	movs	r2, #255	; 0xff
 800afa2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afa8:	b2da      	uxtb	r2, r3
 800afaa:	8979      	ldrh	r1, [r7, #10]
 800afac:	2300      	movs	r3, #0
 800afae:	9300      	str	r3, [sp, #0]
 800afb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800afb4:	68f8      	ldr	r0, [r7, #12]
 800afb6:	f000 f995 	bl	800b2e4 <I2C_TransferConfig>
 800afba:	e00f      	b.n	800afdc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afc0:	b29a      	uxth	r2, r3
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afca:	b2da      	uxtb	r2, r3
 800afcc:	8979      	ldrh	r1, [r7, #10]
 800afce:	2300      	movs	r3, #0
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800afd6:	68f8      	ldr	r0, [r7, #12]
 800afd8:	f000 f984 	bl	800b2e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d19e      	bne.n	800af24 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800afe6:	697a      	ldr	r2, [r7, #20]
 800afe8:	6a39      	ldr	r1, [r7, #32]
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	f000 f8d8 	bl	800b1a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d001      	beq.n	800affa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	e01a      	b.n	800b030 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2220      	movs	r2, #32
 800b000:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	6859      	ldr	r1, [r3, #4]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	4b0b      	ldr	r3, [pc, #44]	; (800b03c <HAL_I2C_Master_Transmit+0x1e4>)
 800b00e:	400b      	ands	r3, r1
 800b010:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2220      	movs	r2, #32
 800b016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2200      	movs	r2, #0
 800b01e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2200      	movs	r2, #0
 800b026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	e000      	b.n	800b030 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800b02e:	2302      	movs	r3, #2
  }
}
 800b030:	4618      	mov	r0, r3
 800b032:	3718      	adds	r7, #24
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	80002000 	.word	0x80002000
 800b03c:	fe00e800 	.word	0xfe00e800

0800b040 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	370c      	adds	r7, #12
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	699b      	ldr	r3, [r3, #24]
 800b066:	f003 0302 	and.w	r3, r3, #2
 800b06a:	2b02      	cmp	r3, #2
 800b06c:	d103      	bne.n	800b076 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	2200      	movs	r2, #0
 800b074:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	699b      	ldr	r3, [r3, #24]
 800b07c:	f003 0301 	and.w	r3, r3, #1
 800b080:	2b01      	cmp	r3, #1
 800b082:	d007      	beq.n	800b094 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	699a      	ldr	r2, [r3, #24]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f042 0201 	orr.w	r2, r2, #1
 800b092:	619a      	str	r2, [r3, #24]
  }
}
 800b094:	bf00      	nop
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	60b9      	str	r1, [r7, #8]
 800b0aa:	603b      	str	r3, [r7, #0]
 800b0ac:	4613      	mov	r3, r2
 800b0ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b0b0:	e022      	b.n	800b0f8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b8:	d01e      	beq.n	800b0f8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0ba:	f7fd fdaf 	bl	8008c1c <HAL_GetTick>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	1ad3      	subs	r3, r2, r3
 800b0c4:	683a      	ldr	r2, [r7, #0]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d302      	bcc.n	800b0d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d113      	bne.n	800b0f8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0d4:	f043 0220 	orr.w	r2, r3, #32
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2220      	movs	r2, #32
 800b0e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e00f      	b.n	800b118 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	699a      	ldr	r2, [r3, #24]
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	4013      	ands	r3, r2
 800b102:	68ba      	ldr	r2, [r7, #8]
 800b104:	429a      	cmp	r2, r3
 800b106:	bf0c      	ite	eq
 800b108:	2301      	moveq	r3, #1
 800b10a:	2300      	movne	r3, #0
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	461a      	mov	r2, r3
 800b110:	79fb      	ldrb	r3, [r7, #7]
 800b112:	429a      	cmp	r2, r3
 800b114:	d0cd      	beq.n	800b0b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b116:	2300      	movs	r3, #0
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b12c:	e02c      	b.n	800b188 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	68b9      	ldr	r1, [r7, #8]
 800b132:	68f8      	ldr	r0, [r7, #12]
 800b134:	f000 f870 	bl	800b218 <I2C_IsAcknowledgeFailed>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d001      	beq.n	800b142 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	e02a      	b.n	800b198 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b148:	d01e      	beq.n	800b188 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b14a:	f7fd fd67 	bl	8008c1c <HAL_GetTick>
 800b14e:	4602      	mov	r2, r0
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	1ad3      	subs	r3, r2, r3
 800b154:	68ba      	ldr	r2, [r7, #8]
 800b156:	429a      	cmp	r2, r3
 800b158:	d302      	bcc.n	800b160 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d113      	bne.n	800b188 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b164:	f043 0220 	orr.w	r2, r3, #32
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2220      	movs	r2, #32
 800b170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2200      	movs	r2, #0
 800b178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2200      	movs	r2, #0
 800b180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b184:	2301      	movs	r3, #1
 800b186:	e007      	b.n	800b198 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	699b      	ldr	r3, [r3, #24]
 800b18e:	f003 0302 	and.w	r3, r3, #2
 800b192:	2b02      	cmp	r3, #2
 800b194:	d1cb      	bne.n	800b12e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b196:	2300      	movs	r3, #0
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3710      	adds	r7, #16
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b1ac:	e028      	b.n	800b200 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	68b9      	ldr	r1, [r7, #8]
 800b1b2:	68f8      	ldr	r0, [r7, #12]
 800b1b4:	f000 f830 	bl	800b218 <I2C_IsAcknowledgeFailed>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d001      	beq.n	800b1c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	e026      	b.n	800b210 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1c2:	f7fd fd2b 	bl	8008c1c <HAL_GetTick>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	1ad3      	subs	r3, r2, r3
 800b1cc:	68ba      	ldr	r2, [r7, #8]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d302      	bcc.n	800b1d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d113      	bne.n	800b200 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1dc:	f043 0220 	orr.w	r2, r3, #32
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2220      	movs	r2, #32
 800b1e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e007      	b.n	800b210 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	699b      	ldr	r3, [r3, #24]
 800b206:	f003 0320 	and.w	r3, r3, #32
 800b20a:	2b20      	cmp	r3, #32
 800b20c:	d1cf      	bne.n	800b1ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b20e:	2300      	movs	r3, #0
}
 800b210:	4618      	mov	r0, r3
 800b212:	3710      	adds	r7, #16
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	60b9      	str	r1, [r7, #8]
 800b222:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	699b      	ldr	r3, [r3, #24]
 800b22a:	f003 0310 	and.w	r3, r3, #16
 800b22e:	2b10      	cmp	r3, #16
 800b230:	d151      	bne.n	800b2d6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b232:	e022      	b.n	800b27a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b23a:	d01e      	beq.n	800b27a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b23c:	f7fd fcee 	bl	8008c1c <HAL_GetTick>
 800b240:	4602      	mov	r2, r0
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	1ad3      	subs	r3, r2, r3
 800b246:	68ba      	ldr	r2, [r7, #8]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d302      	bcc.n	800b252 <I2C_IsAcknowledgeFailed+0x3a>
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d113      	bne.n	800b27a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b256:	f043 0220 	orr.w	r2, r3, #32
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2220      	movs	r2, #32
 800b262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2200      	movs	r2, #0
 800b26a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2200      	movs	r2, #0
 800b272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b276:	2301      	movs	r3, #1
 800b278:	e02e      	b.n	800b2d8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	699b      	ldr	r3, [r3, #24]
 800b280:	f003 0320 	and.w	r3, r3, #32
 800b284:	2b20      	cmp	r3, #32
 800b286:	d1d5      	bne.n	800b234 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2210      	movs	r2, #16
 800b28e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2220      	movs	r2, #32
 800b296:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	f7ff fedd 	bl	800b058 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	6859      	ldr	r1, [r3, #4]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	4b0d      	ldr	r3, [pc, #52]	; (800b2e0 <I2C_IsAcknowledgeFailed+0xc8>)
 800b2aa:	400b      	ands	r3, r1
 800b2ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2b2:	f043 0204 	orr.w	r2, r3, #4
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2220      	movs	r2, #32
 800b2be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e000      	b.n	800b2d8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800b2d6:	2300      	movs	r3, #0
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	fe00e800 	.word	0xfe00e800

0800b2e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	607b      	str	r3, [r7, #4]
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	817b      	strh	r3, [r7, #10]
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	685a      	ldr	r2, [r3, #4]
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	0d5b      	lsrs	r3, r3, #21
 800b300:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b304:	4b0d      	ldr	r3, [pc, #52]	; (800b33c <I2C_TransferConfig+0x58>)
 800b306:	430b      	orrs	r3, r1
 800b308:	43db      	mvns	r3, r3
 800b30a:	ea02 0103 	and.w	r1, r2, r3
 800b30e:	897b      	ldrh	r3, [r7, #10]
 800b310:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b314:	7a7b      	ldrb	r3, [r7, #9]
 800b316:	041b      	lsls	r3, r3, #16
 800b318:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b31c:	431a      	orrs	r2, r3
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	431a      	orrs	r2, r3
 800b322:	69bb      	ldr	r3, [r7, #24]
 800b324:	431a      	orrs	r2, r3
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	430a      	orrs	r2, r1
 800b32c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b32e:	bf00      	nop
 800b330:	3714      	adds	r7, #20
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	03ff63ff 	.word	0x03ff63ff

0800b340 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b350:	b2db      	uxtb	r3, r3
 800b352:	2b20      	cmp	r3, #32
 800b354:	d138      	bne.n	800b3c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d101      	bne.n	800b364 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b360:	2302      	movs	r3, #2
 800b362:	e032      	b.n	800b3ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2201      	movs	r2, #1
 800b368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2224      	movs	r2, #36	; 0x24
 800b370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f022 0201 	bic.w	r2, r2, #1
 800b382:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b392:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	6819      	ldr	r1, [r3, #0]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	683a      	ldr	r2, [r7, #0]
 800b3a0:	430a      	orrs	r2, r1
 800b3a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f042 0201 	orr.w	r2, r2, #1
 800b3b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2220      	movs	r2, #32
 800b3b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	e000      	b.n	800b3ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b3c8:	2302      	movs	r3, #2
  }
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	370c      	adds	r7, #12
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr

0800b3d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b3d6:	b480      	push	{r7}
 800b3d8:	b085      	sub	sp, #20
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
 800b3de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3e6:	b2db      	uxtb	r3, r3
 800b3e8:	2b20      	cmp	r3, #32
 800b3ea:	d139      	bne.n	800b460 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d101      	bne.n	800b3fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b3f6:	2302      	movs	r3, #2
 800b3f8:	e033      	b.n	800b462 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2224      	movs	r2, #36	; 0x24
 800b406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f022 0201 	bic.w	r2, r2, #1
 800b418:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b428:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	021b      	lsls	r3, r3, #8
 800b42e:	68fa      	ldr	r2, [r7, #12]
 800b430:	4313      	orrs	r3, r2
 800b432:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f042 0201 	orr.w	r2, r2, #1
 800b44a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2220      	movs	r2, #32
 800b450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2200      	movs	r2, #0
 800b458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b45c:	2300      	movs	r3, #0
 800b45e:	e000      	b.n	800b462 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b460:	2302      	movs	r3, #2
  }
}
 800b462:	4618      	mov	r0, r3
 800b464:	3714      	adds	r7, #20
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr
	...

0800b470 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b470:	b480      	push	{r7}
 800b472:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800b474:	4b04      	ldr	r3, [pc, #16]	; (800b488 <HAL_PWREx_GetVoltageRange+0x18>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	40007000 	.word	0x40007000

0800b48c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b49a:	d130      	bne.n	800b4fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800b49c:	4b23      	ldr	r3, [pc, #140]	; (800b52c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b4a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4a8:	d038      	beq.n	800b51c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b4aa:	4b20      	ldr	r3, [pc, #128]	; (800b52c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b4b2:	4a1e      	ldr	r2, [pc, #120]	; (800b52c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b4b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b4b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b4ba:	4b1d      	ldr	r3, [pc, #116]	; (800b530 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	2232      	movs	r2, #50	; 0x32
 800b4c0:	fb02 f303 	mul.w	r3, r2, r3
 800b4c4:	4a1b      	ldr	r2, [pc, #108]	; (800b534 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800b4c6:	fba2 2303 	umull	r2, r3, r2, r3
 800b4ca:	0c9b      	lsrs	r3, r3, #18
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b4d0:	e002      	b.n	800b4d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	3b01      	subs	r3, #1
 800b4d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b4d8:	4b14      	ldr	r3, [pc, #80]	; (800b52c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b4da:	695b      	ldr	r3, [r3, #20]
 800b4dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4e4:	d102      	bne.n	800b4ec <HAL_PWREx_ControlVoltageScaling+0x60>
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d1f2      	bne.n	800b4d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b4ec:	4b0f      	ldr	r3, [pc, #60]	; (800b52c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b4ee:	695b      	ldr	r3, [r3, #20]
 800b4f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4f8:	d110      	bne.n	800b51c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800b4fa:	2303      	movs	r3, #3
 800b4fc:	e00f      	b.n	800b51e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800b4fe:	4b0b      	ldr	r3, [pc, #44]	; (800b52c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b50a:	d007      	beq.n	800b51c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b50c:	4b07      	ldr	r3, [pc, #28]	; (800b52c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b514:	4a05      	ldr	r2, [pc, #20]	; (800b52c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b51a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800b51c:	2300      	movs	r3, #0
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3714      	adds	r7, #20
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	40007000 	.word	0x40007000
 800b530:	20000000 	.word	0x20000000
 800b534:	431bde83 	.word	0x431bde83

0800b538 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b088      	sub	sp, #32
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d102      	bne.n	800b54c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b546:	2301      	movs	r3, #1
 800b548:	f000 bc10 	b.w	800bd6c <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b54c:	4b96      	ldr	r3, [pc, #600]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	f003 030c 	and.w	r3, r3, #12
 800b554:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b556:	4b94      	ldr	r3, [pc, #592]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b558:	68db      	ldr	r3, [r3, #12]
 800b55a:	f003 0303 	and.w	r3, r3, #3
 800b55e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f003 0310 	and.w	r3, r3, #16
 800b568:	2b00      	cmp	r3, #0
 800b56a:	f000 80e4 	beq.w	800b736 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b56e:	69bb      	ldr	r3, [r7, #24]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d007      	beq.n	800b584 <HAL_RCC_OscConfig+0x4c>
 800b574:	69bb      	ldr	r3, [r7, #24]
 800b576:	2b0c      	cmp	r3, #12
 800b578:	f040 808b 	bne.w	800b692 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	2b01      	cmp	r3, #1
 800b580:	f040 8087 	bne.w	800b692 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b584:	4b88      	ldr	r3, [pc, #544]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f003 0302 	and.w	r3, r3, #2
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d005      	beq.n	800b59c <HAL_RCC_OscConfig+0x64>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	699b      	ldr	r3, [r3, #24]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d101      	bne.n	800b59c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800b598:	2301      	movs	r3, #1
 800b59a:	e3e7      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6a1a      	ldr	r2, [r3, #32]
 800b5a0:	4b81      	ldr	r3, [pc, #516]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f003 0308 	and.w	r3, r3, #8
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d004      	beq.n	800b5b6 <HAL_RCC_OscConfig+0x7e>
 800b5ac:	4b7e      	ldr	r3, [pc, #504]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5b4:	e005      	b.n	800b5c2 <HAL_RCC_OscConfig+0x8a>
 800b5b6:	4b7c      	ldr	r3, [pc, #496]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b5b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b5bc:	091b      	lsrs	r3, r3, #4
 800b5be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d223      	bcs.n	800b60e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a1b      	ldr	r3, [r3, #32]
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f000 fd7a 	bl	800c0c4 <RCC_SetFlashLatencyFromMSIRange>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d001      	beq.n	800b5da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e3c8      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b5da:	4b73      	ldr	r3, [pc, #460]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4a72      	ldr	r2, [pc, #456]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b5e0:	f043 0308 	orr.w	r3, r3, #8
 800b5e4:	6013      	str	r3, [r2, #0]
 800b5e6:	4b70      	ldr	r3, [pc, #448]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6a1b      	ldr	r3, [r3, #32]
 800b5f2:	496d      	ldr	r1, [pc, #436]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b5f8:	4b6b      	ldr	r3, [pc, #428]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	69db      	ldr	r3, [r3, #28]
 800b604:	021b      	lsls	r3, r3, #8
 800b606:	4968      	ldr	r1, [pc, #416]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b608:	4313      	orrs	r3, r2
 800b60a:	604b      	str	r3, [r1, #4]
 800b60c:	e025      	b.n	800b65a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b60e:	4b66      	ldr	r3, [pc, #408]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4a65      	ldr	r2, [pc, #404]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b614:	f043 0308 	orr.w	r3, r3, #8
 800b618:	6013      	str	r3, [r2, #0]
 800b61a:	4b63      	ldr	r3, [pc, #396]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6a1b      	ldr	r3, [r3, #32]
 800b626:	4960      	ldr	r1, [pc, #384]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b628:	4313      	orrs	r3, r2
 800b62a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b62c:	4b5e      	ldr	r3, [pc, #376]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	69db      	ldr	r3, [r3, #28]
 800b638:	021b      	lsls	r3, r3, #8
 800b63a:	495b      	ldr	r1, [pc, #364]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b63c:	4313      	orrs	r3, r2
 800b63e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b640:	69bb      	ldr	r3, [r7, #24]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d109      	bne.n	800b65a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6a1b      	ldr	r3, [r3, #32]
 800b64a:	4618      	mov	r0, r3
 800b64c:	f000 fd3a 	bl	800c0c4 <RCC_SetFlashLatencyFromMSIRange>
 800b650:	4603      	mov	r3, r0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d001      	beq.n	800b65a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800b656:	2301      	movs	r3, #1
 800b658:	e388      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b65a:	f000 fc6f 	bl	800bf3c <HAL_RCC_GetSysClockFreq>
 800b65e:	4602      	mov	r2, r0
 800b660:	4b51      	ldr	r3, [pc, #324]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	091b      	lsrs	r3, r3, #4
 800b666:	f003 030f 	and.w	r3, r3, #15
 800b66a:	4950      	ldr	r1, [pc, #320]	; (800b7ac <HAL_RCC_OscConfig+0x274>)
 800b66c:	5ccb      	ldrb	r3, [r1, r3]
 800b66e:	f003 031f 	and.w	r3, r3, #31
 800b672:	fa22 f303 	lsr.w	r3, r2, r3
 800b676:	4a4e      	ldr	r2, [pc, #312]	; (800b7b0 <HAL_RCC_OscConfig+0x278>)
 800b678:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800b67a:	4b4e      	ldr	r3, [pc, #312]	; (800b7b4 <HAL_RCC_OscConfig+0x27c>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4618      	mov	r0, r3
 800b680:	f7fd fa7c 	bl	8008b7c <HAL_InitTick>
 800b684:	4603      	mov	r3, r0
 800b686:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800b688:	7bfb      	ldrb	r3, [r7, #15]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d052      	beq.n	800b734 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800b68e:	7bfb      	ldrb	r3, [r7, #15]
 800b690:	e36c      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	699b      	ldr	r3, [r3, #24]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d032      	beq.n	800b700 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b69a:	4b43      	ldr	r3, [pc, #268]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a42      	ldr	r2, [pc, #264]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b6a0:	f043 0301 	orr.w	r3, r3, #1
 800b6a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b6a6:	f7fd fab9 	bl	8008c1c <HAL_GetTick>
 800b6aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b6ac:	e008      	b.n	800b6c0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b6ae:	f7fd fab5 	bl	8008c1c <HAL_GetTick>
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	1ad3      	subs	r3, r2, r3
 800b6b8:	2b02      	cmp	r3, #2
 800b6ba:	d901      	bls.n	800b6c0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800b6bc:	2303      	movs	r3, #3
 800b6be:	e355      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b6c0:	4b39      	ldr	r3, [pc, #228]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f003 0302 	and.w	r3, r3, #2
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d0f0      	beq.n	800b6ae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b6cc:	4b36      	ldr	r3, [pc, #216]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a35      	ldr	r2, [pc, #212]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b6d2:	f043 0308 	orr.w	r3, r3, #8
 800b6d6:	6013      	str	r3, [r2, #0]
 800b6d8:	4b33      	ldr	r3, [pc, #204]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6a1b      	ldr	r3, [r3, #32]
 800b6e4:	4930      	ldr	r1, [pc, #192]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b6ea:	4b2f      	ldr	r3, [pc, #188]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	69db      	ldr	r3, [r3, #28]
 800b6f6:	021b      	lsls	r3, r3, #8
 800b6f8:	492b      	ldr	r1, [pc, #172]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	604b      	str	r3, [r1, #4]
 800b6fe:	e01a      	b.n	800b736 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b700:	4b29      	ldr	r3, [pc, #164]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a28      	ldr	r2, [pc, #160]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b706:	f023 0301 	bic.w	r3, r3, #1
 800b70a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b70c:	f7fd fa86 	bl	8008c1c <HAL_GetTick>
 800b710:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b712:	e008      	b.n	800b726 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b714:	f7fd fa82 	bl	8008c1c <HAL_GetTick>
 800b718:	4602      	mov	r2, r0
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	1ad3      	subs	r3, r2, r3
 800b71e:	2b02      	cmp	r3, #2
 800b720:	d901      	bls.n	800b726 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800b722:	2303      	movs	r3, #3
 800b724:	e322      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b726:	4b20      	ldr	r3, [pc, #128]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f003 0302 	and.w	r3, r3, #2
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d1f0      	bne.n	800b714 <HAL_RCC_OscConfig+0x1dc>
 800b732:	e000      	b.n	800b736 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b734:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f003 0301 	and.w	r3, r3, #1
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d073      	beq.n	800b82a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	2b08      	cmp	r3, #8
 800b746:	d005      	beq.n	800b754 <HAL_RCC_OscConfig+0x21c>
 800b748:	69bb      	ldr	r3, [r7, #24]
 800b74a:	2b0c      	cmp	r3, #12
 800b74c:	d10e      	bne.n	800b76c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	2b03      	cmp	r3, #3
 800b752:	d10b      	bne.n	800b76c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b754:	4b14      	ldr	r3, [pc, #80]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d063      	beq.n	800b828 <HAL_RCC_OscConfig+0x2f0>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d15f      	bne.n	800b828 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800b768:	2301      	movs	r3, #1
 800b76a:	e2ff      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b774:	d106      	bne.n	800b784 <HAL_RCC_OscConfig+0x24c>
 800b776:	4b0c      	ldr	r3, [pc, #48]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4a0b      	ldr	r2, [pc, #44]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b77c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b780:	6013      	str	r3, [r2, #0]
 800b782:	e025      	b.n	800b7d0 <HAL_RCC_OscConfig+0x298>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b78c:	d114      	bne.n	800b7b8 <HAL_RCC_OscConfig+0x280>
 800b78e:	4b06      	ldr	r3, [pc, #24]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a05      	ldr	r2, [pc, #20]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b798:	6013      	str	r3, [r2, #0]
 800b79a:	4b03      	ldr	r3, [pc, #12]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4a02      	ldr	r2, [pc, #8]	; (800b7a8 <HAL_RCC_OscConfig+0x270>)
 800b7a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7a4:	6013      	str	r3, [r2, #0]
 800b7a6:	e013      	b.n	800b7d0 <HAL_RCC_OscConfig+0x298>
 800b7a8:	40021000 	.word	0x40021000
 800b7ac:	08011554 	.word	0x08011554
 800b7b0:	20000000 	.word	0x20000000
 800b7b4:	20000004 	.word	0x20000004
 800b7b8:	4ba0      	ldr	r3, [pc, #640]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4a9f      	ldr	r2, [pc, #636]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b7be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7c2:	6013      	str	r3, [r2, #0]
 800b7c4:	4b9d      	ldr	r3, [pc, #628]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a9c      	ldr	r2, [pc, #624]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b7ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b7ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d013      	beq.n	800b800 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7d8:	f7fd fa20 	bl	8008c1c <HAL_GetTick>
 800b7dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b7de:	e008      	b.n	800b7f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b7e0:	f7fd fa1c 	bl	8008c1c <HAL_GetTick>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	1ad3      	subs	r3, r2, r3
 800b7ea:	2b64      	cmp	r3, #100	; 0x64
 800b7ec:	d901      	bls.n	800b7f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800b7ee:	2303      	movs	r3, #3
 800b7f0:	e2bc      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b7f2:	4b92      	ldr	r3, [pc, #584]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d0f0      	beq.n	800b7e0 <HAL_RCC_OscConfig+0x2a8>
 800b7fe:	e014      	b.n	800b82a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b800:	f7fd fa0c 	bl	8008c1c <HAL_GetTick>
 800b804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b806:	e008      	b.n	800b81a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b808:	f7fd fa08 	bl	8008c1c <HAL_GetTick>
 800b80c:	4602      	mov	r2, r0
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	1ad3      	subs	r3, r2, r3
 800b812:	2b64      	cmp	r3, #100	; 0x64
 800b814:	d901      	bls.n	800b81a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b816:	2303      	movs	r3, #3
 800b818:	e2a8      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b81a:	4b88      	ldr	r3, [pc, #544]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b822:	2b00      	cmp	r3, #0
 800b824:	d1f0      	bne.n	800b808 <HAL_RCC_OscConfig+0x2d0>
 800b826:	e000      	b.n	800b82a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f003 0302 	and.w	r3, r3, #2
 800b832:	2b00      	cmp	r3, #0
 800b834:	d060      	beq.n	800b8f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	2b04      	cmp	r3, #4
 800b83a:	d005      	beq.n	800b848 <HAL_RCC_OscConfig+0x310>
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	2b0c      	cmp	r3, #12
 800b840:	d119      	bne.n	800b876 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	2b02      	cmp	r3, #2
 800b846:	d116      	bne.n	800b876 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b848:	4b7c      	ldr	r3, [pc, #496]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b850:	2b00      	cmp	r3, #0
 800b852:	d005      	beq.n	800b860 <HAL_RCC_OscConfig+0x328>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	68db      	ldr	r3, [r3, #12]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d101      	bne.n	800b860 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800b85c:	2301      	movs	r3, #1
 800b85e:	e285      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b860:	4b76      	ldr	r3, [pc, #472]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	691b      	ldr	r3, [r3, #16]
 800b86c:	061b      	lsls	r3, r3, #24
 800b86e:	4973      	ldr	r1, [pc, #460]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b870:	4313      	orrs	r3, r2
 800b872:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b874:	e040      	b.n	800b8f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d023      	beq.n	800b8c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b87e:	4b6f      	ldr	r3, [pc, #444]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4a6e      	ldr	r2, [pc, #440]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b88a:	f7fd f9c7 	bl	8008c1c <HAL_GetTick>
 800b88e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b890:	e008      	b.n	800b8a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b892:	f7fd f9c3 	bl	8008c1c <HAL_GetTick>
 800b896:	4602      	mov	r2, r0
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	1ad3      	subs	r3, r2, r3
 800b89c:	2b02      	cmp	r3, #2
 800b89e:	d901      	bls.n	800b8a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800b8a0:	2303      	movs	r3, #3
 800b8a2:	e263      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b8a4:	4b65      	ldr	r3, [pc, #404]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d0f0      	beq.n	800b892 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8b0:	4b62      	ldr	r3, [pc, #392]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	691b      	ldr	r3, [r3, #16]
 800b8bc:	061b      	lsls	r3, r3, #24
 800b8be:	495f      	ldr	r1, [pc, #380]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	604b      	str	r3, [r1, #4]
 800b8c4:	e018      	b.n	800b8f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b8c6:	4b5d      	ldr	r3, [pc, #372]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a5c      	ldr	r2, [pc, #368]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b8cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8d2:	f7fd f9a3 	bl	8008c1c <HAL_GetTick>
 800b8d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b8d8:	e008      	b.n	800b8ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b8da:	f7fd f99f 	bl	8008c1c <HAL_GetTick>
 800b8de:	4602      	mov	r2, r0
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	1ad3      	subs	r3, r2, r3
 800b8e4:	2b02      	cmp	r3, #2
 800b8e6:	d901      	bls.n	800b8ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800b8e8:	2303      	movs	r3, #3
 800b8ea:	e23f      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b8ec:	4b53      	ldr	r3, [pc, #332]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d1f0      	bne.n	800b8da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f003 0308 	and.w	r3, r3, #8
 800b900:	2b00      	cmp	r3, #0
 800b902:	d03c      	beq.n	800b97e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	695b      	ldr	r3, [r3, #20]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d01c      	beq.n	800b946 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b90c:	4b4b      	ldr	r3, [pc, #300]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b90e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b912:	4a4a      	ldr	r2, [pc, #296]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b914:	f043 0301 	orr.w	r3, r3, #1
 800b918:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b91c:	f7fd f97e 	bl	8008c1c <HAL_GetTick>
 800b920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b922:	e008      	b.n	800b936 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b924:	f7fd f97a 	bl	8008c1c <HAL_GetTick>
 800b928:	4602      	mov	r2, r0
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	1ad3      	subs	r3, r2, r3
 800b92e:	2b02      	cmp	r3, #2
 800b930:	d901      	bls.n	800b936 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b932:	2303      	movs	r3, #3
 800b934:	e21a      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b936:	4b41      	ldr	r3, [pc, #260]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b93c:	f003 0302 	and.w	r3, r3, #2
 800b940:	2b00      	cmp	r3, #0
 800b942:	d0ef      	beq.n	800b924 <HAL_RCC_OscConfig+0x3ec>
 800b944:	e01b      	b.n	800b97e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b946:	4b3d      	ldr	r3, [pc, #244]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b94c:	4a3b      	ldr	r2, [pc, #236]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b94e:	f023 0301 	bic.w	r3, r3, #1
 800b952:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b956:	f7fd f961 	bl	8008c1c <HAL_GetTick>
 800b95a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b95c:	e008      	b.n	800b970 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b95e:	f7fd f95d 	bl	8008c1c <HAL_GetTick>
 800b962:	4602      	mov	r2, r0
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	1ad3      	subs	r3, r2, r3
 800b968:	2b02      	cmp	r3, #2
 800b96a:	d901      	bls.n	800b970 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800b96c:	2303      	movs	r3, #3
 800b96e:	e1fd      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b970:	4b32      	ldr	r3, [pc, #200]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b976:	f003 0302 	and.w	r3, r3, #2
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d1ef      	bne.n	800b95e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f003 0304 	and.w	r3, r3, #4
 800b986:	2b00      	cmp	r3, #0
 800b988:	f000 80a6 	beq.w	800bad8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b98c:	2300      	movs	r3, #0
 800b98e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800b990:	4b2a      	ldr	r3, [pc, #168]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d10d      	bne.n	800b9b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b99c:	4b27      	ldr	r3, [pc, #156]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b99e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9a0:	4a26      	ldr	r2, [pc, #152]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b9a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9a6:	6593      	str	r3, [r2, #88]	; 0x58
 800b9a8:	4b24      	ldr	r3, [pc, #144]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800b9aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9b0:	60bb      	str	r3, [r7, #8]
 800b9b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b9b8:	4b21      	ldr	r3, [pc, #132]	; (800ba40 <HAL_RCC_OscConfig+0x508>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d118      	bne.n	800b9f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b9c4:	4b1e      	ldr	r3, [pc, #120]	; (800ba40 <HAL_RCC_OscConfig+0x508>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a1d      	ldr	r2, [pc, #116]	; (800ba40 <HAL_RCC_OscConfig+0x508>)
 800b9ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b9d0:	f7fd f924 	bl	8008c1c <HAL_GetTick>
 800b9d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b9d6:	e008      	b.n	800b9ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b9d8:	f7fd f920 	bl	8008c1c <HAL_GetTick>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	1ad3      	subs	r3, r2, r3
 800b9e2:	2b02      	cmp	r3, #2
 800b9e4:	d901      	bls.n	800b9ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800b9e6:	2303      	movs	r3, #3
 800b9e8:	e1c0      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b9ea:	4b15      	ldr	r3, [pc, #84]	; (800ba40 <HAL_RCC_OscConfig+0x508>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d0f0      	beq.n	800b9d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	689b      	ldr	r3, [r3, #8]
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d108      	bne.n	800ba10 <HAL_RCC_OscConfig+0x4d8>
 800b9fe:	4b0f      	ldr	r3, [pc, #60]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800ba00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba04:	4a0d      	ldr	r2, [pc, #52]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800ba06:	f043 0301 	orr.w	r3, r3, #1
 800ba0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ba0e:	e029      	b.n	800ba64 <HAL_RCC_OscConfig+0x52c>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	689b      	ldr	r3, [r3, #8]
 800ba14:	2b05      	cmp	r3, #5
 800ba16:	d115      	bne.n	800ba44 <HAL_RCC_OscConfig+0x50c>
 800ba18:	4b08      	ldr	r3, [pc, #32]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800ba1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba1e:	4a07      	ldr	r2, [pc, #28]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800ba20:	f043 0304 	orr.w	r3, r3, #4
 800ba24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ba28:	4b04      	ldr	r3, [pc, #16]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800ba2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba2e:	4a03      	ldr	r2, [pc, #12]	; (800ba3c <HAL_RCC_OscConfig+0x504>)
 800ba30:	f043 0301 	orr.w	r3, r3, #1
 800ba34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ba38:	e014      	b.n	800ba64 <HAL_RCC_OscConfig+0x52c>
 800ba3a:	bf00      	nop
 800ba3c:	40021000 	.word	0x40021000
 800ba40:	40007000 	.word	0x40007000
 800ba44:	4b9a      	ldr	r3, [pc, #616]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800ba46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba4a:	4a99      	ldr	r2, [pc, #612]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800ba4c:	f023 0301 	bic.w	r3, r3, #1
 800ba50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ba54:	4b96      	ldr	r3, [pc, #600]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800ba56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba5a:	4a95      	ldr	r2, [pc, #596]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800ba5c:	f023 0304 	bic.w	r3, r3, #4
 800ba60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	689b      	ldr	r3, [r3, #8]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d016      	beq.n	800ba9a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba6c:	f7fd f8d6 	bl	8008c1c <HAL_GetTick>
 800ba70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ba72:	e00a      	b.n	800ba8a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba74:	f7fd f8d2 	bl	8008c1c <HAL_GetTick>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	1ad3      	subs	r3, r2, r3
 800ba7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d901      	bls.n	800ba8a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800ba86:	2303      	movs	r3, #3
 800ba88:	e170      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ba8a:	4b89      	ldr	r3, [pc, #548]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800ba8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba90:	f003 0302 	and.w	r3, r3, #2
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d0ed      	beq.n	800ba74 <HAL_RCC_OscConfig+0x53c>
 800ba98:	e015      	b.n	800bac6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba9a:	f7fd f8bf 	bl	8008c1c <HAL_GetTick>
 800ba9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800baa0:	e00a      	b.n	800bab8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800baa2:	f7fd f8bb 	bl	8008c1c <HAL_GetTick>
 800baa6:	4602      	mov	r2, r0
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	1ad3      	subs	r3, r2, r3
 800baac:	f241 3288 	movw	r2, #5000	; 0x1388
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d901      	bls.n	800bab8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800bab4:	2303      	movs	r3, #3
 800bab6:	e159      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bab8:	4b7d      	ldr	r3, [pc, #500]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800baba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800babe:	f003 0302 	and.w	r3, r3, #2
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d1ed      	bne.n	800baa2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bac6:	7ffb      	ldrb	r3, [r7, #31]
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d105      	bne.n	800bad8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bacc:	4b78      	ldr	r3, [pc, #480]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800bace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bad0:	4a77      	ldr	r2, [pc, #476]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800bad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bad6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f003 0320 	and.w	r3, r3, #32
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d03c      	beq.n	800bb5e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d01c      	beq.n	800bb26 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800baec:	4b70      	ldr	r3, [pc, #448]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800baee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800baf2:	4a6f      	ldr	r2, [pc, #444]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800baf4:	f043 0301 	orr.w	r3, r3, #1
 800baf8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bafc:	f7fd f88e 	bl	8008c1c <HAL_GetTick>
 800bb00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bb02:	e008      	b.n	800bb16 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bb04:	f7fd f88a 	bl	8008c1c <HAL_GetTick>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	1ad3      	subs	r3, r2, r3
 800bb0e:	2b02      	cmp	r3, #2
 800bb10:	d901      	bls.n	800bb16 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800bb12:	2303      	movs	r3, #3
 800bb14:	e12a      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bb16:	4b66      	ldr	r3, [pc, #408]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800bb18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb1c:	f003 0302 	and.w	r3, r3, #2
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d0ef      	beq.n	800bb04 <HAL_RCC_OscConfig+0x5cc>
 800bb24:	e01b      	b.n	800bb5e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bb26:	4b62      	ldr	r3, [pc, #392]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800bb28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb2c:	4a60      	ldr	r2, [pc, #384]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800bb2e:	f023 0301 	bic.w	r3, r3, #1
 800bb32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb36:	f7fd f871 	bl	8008c1c <HAL_GetTick>
 800bb3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bb3c:	e008      	b.n	800bb50 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bb3e:	f7fd f86d 	bl	8008c1c <HAL_GetTick>
 800bb42:	4602      	mov	r2, r0
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	1ad3      	subs	r3, r2, r3
 800bb48:	2b02      	cmp	r3, #2
 800bb4a:	d901      	bls.n	800bb50 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800bb4c:	2303      	movs	r3, #3
 800bb4e:	e10d      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bb50:	4b57      	ldr	r3, [pc, #348]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800bb52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb56:	f003 0302 	and.w	r3, r3, #2
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d1ef      	bne.n	800bb3e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	f000 8101 	beq.w	800bd6a <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb6c:	2b02      	cmp	r3, #2
 800bb6e:	f040 80c9 	bne.w	800bd04 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800bb72:	4b4f      	ldr	r3, [pc, #316]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800bb74:	68db      	ldr	r3, [r3, #12]
 800bb76:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	f003 0203 	and.w	r2, r3, #3
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d12c      	bne.n	800bbe0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb90:	3b01      	subs	r3, #1
 800bb92:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d123      	bne.n	800bbe0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bba2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d11b      	bne.n	800bbe0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d113      	bne.n	800bbe0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbc2:	085b      	lsrs	r3, r3, #1
 800bbc4:	3b01      	subs	r3, #1
 800bbc6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d109      	bne.n	800bbe0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd6:	085b      	lsrs	r3, r3, #1
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d06b      	beq.n	800bcb8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bbe0:	69bb      	ldr	r3, [r7, #24]
 800bbe2:	2b0c      	cmp	r3, #12
 800bbe4:	d062      	beq.n	800bcac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800bbe6:	4b32      	ldr	r3, [pc, #200]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d001      	beq.n	800bbf6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e0ba      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800bbf6:	4b2e      	ldr	r3, [pc, #184]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a2d      	ldr	r2, [pc, #180]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800bbfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bc00:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800bc02:	f7fd f80b 	bl	8008c1c <HAL_GetTick>
 800bc06:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bc08:	e008      	b.n	800bc1c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc0a:	f7fd f807 	bl	8008c1c <HAL_GetTick>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	1ad3      	subs	r3, r2, r3
 800bc14:	2b02      	cmp	r3, #2
 800bc16:	d901      	bls.n	800bc1c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800bc18:	2303      	movs	r3, #3
 800bc1a:	e0a7      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bc1c:	4b24      	ldr	r3, [pc, #144]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d1f0      	bne.n	800bc0a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bc28:	4b21      	ldr	r3, [pc, #132]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800bc2a:	68da      	ldr	r2, [r3, #12]
 800bc2c:	4b21      	ldr	r3, [pc, #132]	; (800bcb4 <HAL_RCC_OscConfig+0x77c>)
 800bc2e:	4013      	ands	r3, r2
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bc38:	3a01      	subs	r2, #1
 800bc3a:	0112      	lsls	r2, r2, #4
 800bc3c:	4311      	orrs	r1, r2
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bc42:	0212      	lsls	r2, r2, #8
 800bc44:	4311      	orrs	r1, r2
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bc4a:	0852      	lsrs	r2, r2, #1
 800bc4c:	3a01      	subs	r2, #1
 800bc4e:	0552      	lsls	r2, r2, #21
 800bc50:	4311      	orrs	r1, r2
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bc56:	0852      	lsrs	r2, r2, #1
 800bc58:	3a01      	subs	r2, #1
 800bc5a:	0652      	lsls	r2, r2, #25
 800bc5c:	4311      	orrs	r1, r2
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bc62:	06d2      	lsls	r2, r2, #27
 800bc64:	430a      	orrs	r2, r1
 800bc66:	4912      	ldr	r1, [pc, #72]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800bc6c:	4b10      	ldr	r3, [pc, #64]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a0f      	ldr	r2, [pc, #60]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800bc72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bc76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bc78:	4b0d      	ldr	r3, [pc, #52]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800bc7a:	68db      	ldr	r3, [r3, #12]
 800bc7c:	4a0c      	ldr	r2, [pc, #48]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800bc7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bc82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800bc84:	f7fc ffca 	bl	8008c1c <HAL_GetTick>
 800bc88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bc8a:	e008      	b.n	800bc9e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc8c:	f7fc ffc6 	bl	8008c1c <HAL_GetTick>
 800bc90:	4602      	mov	r2, r0
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	1ad3      	subs	r3, r2, r3
 800bc96:	2b02      	cmp	r3, #2
 800bc98:	d901      	bls.n	800bc9e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800bc9a:	2303      	movs	r3, #3
 800bc9c:	e066      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bc9e:	4b04      	ldr	r3, [pc, #16]	; (800bcb0 <HAL_RCC_OscConfig+0x778>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d0f0      	beq.n	800bc8c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bcaa:	e05e      	b.n	800bd6a <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800bcac:	2301      	movs	r3, #1
 800bcae:	e05d      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
 800bcb0:	40021000 	.word	0x40021000
 800bcb4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bcb8:	4b2e      	ldr	r3, [pc, #184]	; (800bd74 <HAL_RCC_OscConfig+0x83c>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d152      	bne.n	800bd6a <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800bcc4:	4b2b      	ldr	r3, [pc, #172]	; (800bd74 <HAL_RCC_OscConfig+0x83c>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a2a      	ldr	r2, [pc, #168]	; (800bd74 <HAL_RCC_OscConfig+0x83c>)
 800bcca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bcce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bcd0:	4b28      	ldr	r3, [pc, #160]	; (800bd74 <HAL_RCC_OscConfig+0x83c>)
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	4a27      	ldr	r2, [pc, #156]	; (800bd74 <HAL_RCC_OscConfig+0x83c>)
 800bcd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bcda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bcdc:	f7fc ff9e 	bl	8008c1c <HAL_GetTick>
 800bce0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bce2:	e008      	b.n	800bcf6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bce4:	f7fc ff9a 	bl	8008c1c <HAL_GetTick>
 800bce8:	4602      	mov	r2, r0
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	1ad3      	subs	r3, r2, r3
 800bcee:	2b02      	cmp	r3, #2
 800bcf0:	d901      	bls.n	800bcf6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800bcf2:	2303      	movs	r3, #3
 800bcf4:	e03a      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bcf6:	4b1f      	ldr	r3, [pc, #124]	; (800bd74 <HAL_RCC_OscConfig+0x83c>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d0f0      	beq.n	800bce4 <HAL_RCC_OscConfig+0x7ac>
 800bd02:	e032      	b.n	800bd6a <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bd04:	69bb      	ldr	r3, [r7, #24]
 800bd06:	2b0c      	cmp	r3, #12
 800bd08:	d02d      	beq.n	800bd66 <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd0a:	4b1a      	ldr	r3, [pc, #104]	; (800bd74 <HAL_RCC_OscConfig+0x83c>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4a19      	ldr	r2, [pc, #100]	; (800bd74 <HAL_RCC_OscConfig+0x83c>)
 800bd10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bd14:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800bd16:	4b17      	ldr	r3, [pc, #92]	; (800bd74 <HAL_RCC_OscConfig+0x83c>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d105      	bne.n	800bd2e <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800bd22:	4b14      	ldr	r3, [pc, #80]	; (800bd74 <HAL_RCC_OscConfig+0x83c>)
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	4a13      	ldr	r2, [pc, #76]	; (800bd74 <HAL_RCC_OscConfig+0x83c>)
 800bd28:	f023 0303 	bic.w	r3, r3, #3
 800bd2c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800bd2e:	4b11      	ldr	r3, [pc, #68]	; (800bd74 <HAL_RCC_OscConfig+0x83c>)
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	4a10      	ldr	r2, [pc, #64]	; (800bd74 <HAL_RCC_OscConfig+0x83c>)
 800bd34:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800bd38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd3c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd3e:	f7fc ff6d 	bl	8008c1c <HAL_GetTick>
 800bd42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bd44:	e008      	b.n	800bd58 <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bd46:	f7fc ff69 	bl	8008c1c <HAL_GetTick>
 800bd4a:	4602      	mov	r2, r0
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	1ad3      	subs	r3, r2, r3
 800bd50:	2b02      	cmp	r3, #2
 800bd52:	d901      	bls.n	800bd58 <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 800bd54:	2303      	movs	r3, #3
 800bd56:	e009      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bd58:	4b06      	ldr	r3, [pc, #24]	; (800bd74 <HAL_RCC_OscConfig+0x83c>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1f0      	bne.n	800bd46 <HAL_RCC_OscConfig+0x80e>
 800bd64:	e001      	b.n	800bd6a <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800bd66:	2301      	movs	r3, #1
 800bd68:	e000      	b.n	800bd6c <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 800bd6a:	2300      	movs	r3, #0
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3720      	adds	r7, #32
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}
 800bd74:	40021000 	.word	0x40021000

0800bd78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d101      	bne.n	800bd8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	e0c8      	b.n	800bf1e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bd8c:	4b66      	ldr	r3, [pc, #408]	; (800bf28 <HAL_RCC_ClockConfig+0x1b0>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f003 0307 	and.w	r3, r3, #7
 800bd94:	683a      	ldr	r2, [r7, #0]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d910      	bls.n	800bdbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bd9a:	4b63      	ldr	r3, [pc, #396]	; (800bf28 <HAL_RCC_ClockConfig+0x1b0>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f023 0207 	bic.w	r2, r3, #7
 800bda2:	4961      	ldr	r1, [pc, #388]	; (800bf28 <HAL_RCC_ClockConfig+0x1b0>)
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	4313      	orrs	r3, r2
 800bda8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdaa:	4b5f      	ldr	r3, [pc, #380]	; (800bf28 <HAL_RCC_ClockConfig+0x1b0>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f003 0307 	and.w	r3, r3, #7
 800bdb2:	683a      	ldr	r2, [r7, #0]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d001      	beq.n	800bdbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	e0b0      	b.n	800bf1e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f003 0301 	and.w	r3, r3, #1
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d04c      	beq.n	800be62 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	2b03      	cmp	r3, #3
 800bdce:	d107      	bne.n	800bde0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bdd0:	4b56      	ldr	r3, [pc, #344]	; (800bf2c <HAL_RCC_ClockConfig+0x1b4>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d121      	bne.n	800be20 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800bddc:	2301      	movs	r3, #1
 800bdde:	e09e      	b.n	800bf1e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	2b02      	cmp	r3, #2
 800bde6:	d107      	bne.n	800bdf8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bde8:	4b50      	ldr	r3, [pc, #320]	; (800bf2c <HAL_RCC_ClockConfig+0x1b4>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d115      	bne.n	800be20 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	e092      	b.n	800bf1e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d107      	bne.n	800be10 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800be00:	4b4a      	ldr	r3, [pc, #296]	; (800bf2c <HAL_RCC_ClockConfig+0x1b4>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f003 0302 	and.w	r3, r3, #2
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d109      	bne.n	800be20 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800be0c:	2301      	movs	r3, #1
 800be0e:	e086      	b.n	800bf1e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800be10:	4b46      	ldr	r3, [pc, #280]	; (800bf2c <HAL_RCC_ClockConfig+0x1b4>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d101      	bne.n	800be20 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800be1c:	2301      	movs	r3, #1
 800be1e:	e07e      	b.n	800bf1e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800be20:	4b42      	ldr	r3, [pc, #264]	; (800bf2c <HAL_RCC_ClockConfig+0x1b4>)
 800be22:	689b      	ldr	r3, [r3, #8]
 800be24:	f023 0203 	bic.w	r2, r3, #3
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	493f      	ldr	r1, [pc, #252]	; (800bf2c <HAL_RCC_ClockConfig+0x1b4>)
 800be2e:	4313      	orrs	r3, r2
 800be30:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be32:	f7fc fef3 	bl	8008c1c <HAL_GetTick>
 800be36:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be38:	e00a      	b.n	800be50 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800be3a:	f7fc feef 	bl	8008c1c <HAL_GetTick>
 800be3e:	4602      	mov	r2, r0
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	1ad3      	subs	r3, r2, r3
 800be44:	f241 3288 	movw	r2, #5000	; 0x1388
 800be48:	4293      	cmp	r3, r2
 800be4a:	d901      	bls.n	800be50 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800be4c:	2303      	movs	r3, #3
 800be4e:	e066      	b.n	800bf1e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be50:	4b36      	ldr	r3, [pc, #216]	; (800bf2c <HAL_RCC_ClockConfig+0x1b4>)
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	f003 020c 	and.w	r2, r3, #12
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	429a      	cmp	r2, r3
 800be60:	d1eb      	bne.n	800be3a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f003 0302 	and.w	r3, r3, #2
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d008      	beq.n	800be80 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800be6e:	4b2f      	ldr	r3, [pc, #188]	; (800bf2c <HAL_RCC_ClockConfig+0x1b4>)
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	689b      	ldr	r3, [r3, #8]
 800be7a:	492c      	ldr	r1, [pc, #176]	; (800bf2c <HAL_RCC_ClockConfig+0x1b4>)
 800be7c:	4313      	orrs	r3, r2
 800be7e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800be80:	4b29      	ldr	r3, [pc, #164]	; (800bf28 <HAL_RCC_ClockConfig+0x1b0>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f003 0307 	and.w	r3, r3, #7
 800be88:	683a      	ldr	r2, [r7, #0]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d210      	bcs.n	800beb0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800be8e:	4b26      	ldr	r3, [pc, #152]	; (800bf28 <HAL_RCC_ClockConfig+0x1b0>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f023 0207 	bic.w	r2, r3, #7
 800be96:	4924      	ldr	r1, [pc, #144]	; (800bf28 <HAL_RCC_ClockConfig+0x1b0>)
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	4313      	orrs	r3, r2
 800be9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800be9e:	4b22      	ldr	r3, [pc, #136]	; (800bf28 <HAL_RCC_ClockConfig+0x1b0>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f003 0307 	and.w	r3, r3, #7
 800bea6:	683a      	ldr	r2, [r7, #0]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d001      	beq.n	800beb0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800beac:	2301      	movs	r3, #1
 800beae:	e036      	b.n	800bf1e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f003 0304 	and.w	r3, r3, #4
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d008      	beq.n	800bece <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bebc:	4b1b      	ldr	r3, [pc, #108]	; (800bf2c <HAL_RCC_ClockConfig+0x1b4>)
 800bebe:	689b      	ldr	r3, [r3, #8]
 800bec0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	4918      	ldr	r1, [pc, #96]	; (800bf2c <HAL_RCC_ClockConfig+0x1b4>)
 800beca:	4313      	orrs	r3, r2
 800becc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f003 0308 	and.w	r3, r3, #8
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d009      	beq.n	800beee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800beda:	4b14      	ldr	r3, [pc, #80]	; (800bf2c <HAL_RCC_ClockConfig+0x1b4>)
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	691b      	ldr	r3, [r3, #16]
 800bee6:	00db      	lsls	r3, r3, #3
 800bee8:	4910      	ldr	r1, [pc, #64]	; (800bf2c <HAL_RCC_ClockConfig+0x1b4>)
 800beea:	4313      	orrs	r3, r2
 800beec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800beee:	f000 f825 	bl	800bf3c <HAL_RCC_GetSysClockFreq>
 800bef2:	4602      	mov	r2, r0
 800bef4:	4b0d      	ldr	r3, [pc, #52]	; (800bf2c <HAL_RCC_ClockConfig+0x1b4>)
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	091b      	lsrs	r3, r3, #4
 800befa:	f003 030f 	and.w	r3, r3, #15
 800befe:	490c      	ldr	r1, [pc, #48]	; (800bf30 <HAL_RCC_ClockConfig+0x1b8>)
 800bf00:	5ccb      	ldrb	r3, [r1, r3]
 800bf02:	f003 031f 	and.w	r3, r3, #31
 800bf06:	fa22 f303 	lsr.w	r3, r2, r3
 800bf0a:	4a0a      	ldr	r2, [pc, #40]	; (800bf34 <HAL_RCC_ClockConfig+0x1bc>)
 800bf0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800bf0e:	4b0a      	ldr	r3, [pc, #40]	; (800bf38 <HAL_RCC_ClockConfig+0x1c0>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7fc fe32 	bl	8008b7c <HAL_InitTick>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	72fb      	strb	r3, [r7, #11]

  return status;
 800bf1c:	7afb      	ldrb	r3, [r7, #11]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	40022000 	.word	0x40022000
 800bf2c:	40021000 	.word	0x40021000
 800bf30:	08011554 	.word	0x08011554
 800bf34:	20000000 	.word	0x20000000
 800bf38:	20000004 	.word	0x20000004

0800bf3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b089      	sub	sp, #36	; 0x24
 800bf40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800bf42:	2300      	movs	r3, #0
 800bf44:	61fb      	str	r3, [r7, #28]
 800bf46:	2300      	movs	r3, #0
 800bf48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bf4a:	4b3e      	ldr	r3, [pc, #248]	; (800c044 <HAL_RCC_GetSysClockFreq+0x108>)
 800bf4c:	689b      	ldr	r3, [r3, #8]
 800bf4e:	f003 030c 	and.w	r3, r3, #12
 800bf52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bf54:	4b3b      	ldr	r3, [pc, #236]	; (800c044 <HAL_RCC_GetSysClockFreq+0x108>)
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	f003 0303 	and.w	r3, r3, #3
 800bf5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d005      	beq.n	800bf70 <HAL_RCC_GetSysClockFreq+0x34>
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	2b0c      	cmp	r3, #12
 800bf68:	d121      	bne.n	800bfae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d11e      	bne.n	800bfae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800bf70:	4b34      	ldr	r3, [pc, #208]	; (800c044 <HAL_RCC_GetSysClockFreq+0x108>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f003 0308 	and.w	r3, r3, #8
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d107      	bne.n	800bf8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800bf7c:	4b31      	ldr	r3, [pc, #196]	; (800c044 <HAL_RCC_GetSysClockFreq+0x108>)
 800bf7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf82:	0a1b      	lsrs	r3, r3, #8
 800bf84:	f003 030f 	and.w	r3, r3, #15
 800bf88:	61fb      	str	r3, [r7, #28]
 800bf8a:	e005      	b.n	800bf98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800bf8c:	4b2d      	ldr	r3, [pc, #180]	; (800c044 <HAL_RCC_GetSysClockFreq+0x108>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	091b      	lsrs	r3, r3, #4
 800bf92:	f003 030f 	and.w	r3, r3, #15
 800bf96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800bf98:	4a2b      	ldr	r2, [pc, #172]	; (800c048 <HAL_RCC_GetSysClockFreq+0x10c>)
 800bf9a:	69fb      	ldr	r3, [r7, #28]
 800bf9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfa0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d10d      	bne.n	800bfc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800bfa8:	69fb      	ldr	r3, [r7, #28]
 800bfaa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bfac:	e00a      	b.n	800bfc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	2b04      	cmp	r3, #4
 800bfb2:	d102      	bne.n	800bfba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bfb4:	4b25      	ldr	r3, [pc, #148]	; (800c04c <HAL_RCC_GetSysClockFreq+0x110>)
 800bfb6:	61bb      	str	r3, [r7, #24]
 800bfb8:	e004      	b.n	800bfc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	2b08      	cmp	r3, #8
 800bfbe:	d101      	bne.n	800bfc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bfc0:	4b23      	ldr	r3, [pc, #140]	; (800c050 <HAL_RCC_GetSysClockFreq+0x114>)
 800bfc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	2b0c      	cmp	r3, #12
 800bfc8:	d134      	bne.n	800c034 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bfca:	4b1e      	ldr	r3, [pc, #120]	; (800c044 <HAL_RCC_GetSysClockFreq+0x108>)
 800bfcc:	68db      	ldr	r3, [r3, #12]
 800bfce:	f003 0303 	and.w	r3, r3, #3
 800bfd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	2b02      	cmp	r3, #2
 800bfd8:	d003      	beq.n	800bfe2 <HAL_RCC_GetSysClockFreq+0xa6>
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	2b03      	cmp	r3, #3
 800bfde:	d003      	beq.n	800bfe8 <HAL_RCC_GetSysClockFreq+0xac>
 800bfe0:	e005      	b.n	800bfee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800bfe2:	4b1a      	ldr	r3, [pc, #104]	; (800c04c <HAL_RCC_GetSysClockFreq+0x110>)
 800bfe4:	617b      	str	r3, [r7, #20]
      break;
 800bfe6:	e005      	b.n	800bff4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800bfe8:	4b19      	ldr	r3, [pc, #100]	; (800c050 <HAL_RCC_GetSysClockFreq+0x114>)
 800bfea:	617b      	str	r3, [r7, #20]
      break;
 800bfec:	e002      	b.n	800bff4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800bfee:	69fb      	ldr	r3, [r7, #28]
 800bff0:	617b      	str	r3, [r7, #20]
      break;
 800bff2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bff4:	4b13      	ldr	r3, [pc, #76]	; (800c044 <HAL_RCC_GetSysClockFreq+0x108>)
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	091b      	lsrs	r3, r3, #4
 800bffa:	f003 0307 	and.w	r3, r3, #7
 800bffe:	3301      	adds	r3, #1
 800c000:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c002:	4b10      	ldr	r3, [pc, #64]	; (800c044 <HAL_RCC_GetSysClockFreq+0x108>)
 800c004:	68db      	ldr	r3, [r3, #12]
 800c006:	0a1b      	lsrs	r3, r3, #8
 800c008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c00c:	697a      	ldr	r2, [r7, #20]
 800c00e:	fb03 f202 	mul.w	r2, r3, r2
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	fbb2 f3f3 	udiv	r3, r2, r3
 800c018:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c01a:	4b0a      	ldr	r3, [pc, #40]	; (800c044 <HAL_RCC_GetSysClockFreq+0x108>)
 800c01c:	68db      	ldr	r3, [r3, #12]
 800c01e:	0e5b      	lsrs	r3, r3, #25
 800c020:	f003 0303 	and.w	r3, r3, #3
 800c024:	3301      	adds	r3, #1
 800c026:	005b      	lsls	r3, r3, #1
 800c028:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c02a:	697a      	ldr	r2, [r7, #20]
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c032:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800c034:	69bb      	ldr	r3, [r7, #24]
}
 800c036:	4618      	mov	r0, r3
 800c038:	3724      	adds	r7, #36	; 0x24
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	40021000 	.word	0x40021000
 800c048:	0801156c 	.word	0x0801156c
 800c04c:	00f42400 	.word	0x00f42400
 800c050:	00b71b00 	.word	0x00b71b00

0800c054 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c054:	b480      	push	{r7}
 800c056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c058:	4b03      	ldr	r3, [pc, #12]	; (800c068 <HAL_RCC_GetHCLKFreq+0x14>)
 800c05a:	681b      	ldr	r3, [r3, #0]
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr
 800c066:	bf00      	nop
 800c068:	20000000 	.word	0x20000000

0800c06c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c070:	f7ff fff0 	bl	800c054 <HAL_RCC_GetHCLKFreq>
 800c074:	4602      	mov	r2, r0
 800c076:	4b06      	ldr	r3, [pc, #24]	; (800c090 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c078:	689b      	ldr	r3, [r3, #8]
 800c07a:	0a1b      	lsrs	r3, r3, #8
 800c07c:	f003 0307 	and.w	r3, r3, #7
 800c080:	4904      	ldr	r1, [pc, #16]	; (800c094 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c082:	5ccb      	ldrb	r3, [r1, r3]
 800c084:	f003 031f 	and.w	r3, r3, #31
 800c088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	bd80      	pop	{r7, pc}
 800c090:	40021000 	.word	0x40021000
 800c094:	08011564 	.word	0x08011564

0800c098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c09c:	f7ff ffda 	bl	800c054 <HAL_RCC_GetHCLKFreq>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	4b06      	ldr	r3, [pc, #24]	; (800c0bc <HAL_RCC_GetPCLK2Freq+0x24>)
 800c0a4:	689b      	ldr	r3, [r3, #8]
 800c0a6:	0adb      	lsrs	r3, r3, #11
 800c0a8:	f003 0307 	and.w	r3, r3, #7
 800c0ac:	4904      	ldr	r1, [pc, #16]	; (800c0c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c0ae:	5ccb      	ldrb	r3, [r1, r3]
 800c0b0:	f003 031f 	and.w	r3, r3, #31
 800c0b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	40021000 	.word	0x40021000
 800c0c0:	08011564 	.word	0x08011564

0800c0c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b086      	sub	sp, #24
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c0d0:	4b2a      	ldr	r3, [pc, #168]	; (800c17c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c0d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d003      	beq.n	800c0e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800c0dc:	f7ff f9c8 	bl	800b470 <HAL_PWREx_GetVoltageRange>
 800c0e0:	6178      	str	r0, [r7, #20]
 800c0e2:	e014      	b.n	800c10e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c0e4:	4b25      	ldr	r3, [pc, #148]	; (800c17c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c0e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0e8:	4a24      	ldr	r2, [pc, #144]	; (800c17c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c0ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0ee:	6593      	str	r3, [r2, #88]	; 0x58
 800c0f0:	4b22      	ldr	r3, [pc, #136]	; (800c17c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c0f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0f8:	60fb      	str	r3, [r7, #12]
 800c0fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800c0fc:	f7ff f9b8 	bl	800b470 <HAL_PWREx_GetVoltageRange>
 800c100:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800c102:	4b1e      	ldr	r3, [pc, #120]	; (800c17c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c106:	4a1d      	ldr	r2, [pc, #116]	; (800c17c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c10c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c114:	d10b      	bne.n	800c12e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2b80      	cmp	r3, #128	; 0x80
 800c11a:	d919      	bls.n	800c150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2ba0      	cmp	r3, #160	; 0xa0
 800c120:	d902      	bls.n	800c128 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c122:	2302      	movs	r3, #2
 800c124:	613b      	str	r3, [r7, #16]
 800c126:	e013      	b.n	800c150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c128:	2301      	movs	r3, #1
 800c12a:	613b      	str	r3, [r7, #16]
 800c12c:	e010      	b.n	800c150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2b80      	cmp	r3, #128	; 0x80
 800c132:	d902      	bls.n	800c13a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800c134:	2303      	movs	r3, #3
 800c136:	613b      	str	r3, [r7, #16]
 800c138:	e00a      	b.n	800c150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2b80      	cmp	r3, #128	; 0x80
 800c13e:	d102      	bne.n	800c146 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c140:	2302      	movs	r3, #2
 800c142:	613b      	str	r3, [r7, #16]
 800c144:	e004      	b.n	800c150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b70      	cmp	r3, #112	; 0x70
 800c14a:	d101      	bne.n	800c150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c14c:	2301      	movs	r3, #1
 800c14e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800c150:	4b0b      	ldr	r3, [pc, #44]	; (800c180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f023 0207 	bic.w	r2, r3, #7
 800c158:	4909      	ldr	r1, [pc, #36]	; (800c180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	4313      	orrs	r3, r2
 800c15e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800c160:	4b07      	ldr	r3, [pc, #28]	; (800c180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f003 0307 	and.w	r3, r3, #7
 800c168:	693a      	ldr	r2, [r7, #16]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d001      	beq.n	800c172 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800c16e:	2301      	movs	r3, #1
 800c170:	e000      	b.n	800c174 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800c172:	2300      	movs	r3, #0
}
 800c174:	4618      	mov	r0, r3
 800c176:	3718      	adds	r7, #24
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	40021000 	.word	0x40021000
 800c180:	40022000 	.word	0x40022000

0800c184 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b086      	sub	sp, #24
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c18c:	2300      	movs	r3, #0
 800c18e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c190:	2300      	movs	r3, #0
 800c192:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d031      	beq.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c1a8:	d01a      	beq.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800c1aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c1ae:	d814      	bhi.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d009      	beq.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c1b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c1b8:	d10f      	bne.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800c1ba:	4b5d      	ldr	r3, [pc, #372]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	4a5c      	ldr	r2, [pc, #368]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c1c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c1c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c1c6:	e00c      	b.n	800c1e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	3304      	adds	r3, #4
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f000 f9ce 	bl	800c570 <RCCEx_PLLSAI1_Config>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c1d8:	e003      	b.n	800c1e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	74fb      	strb	r3, [r7, #19]
      break;
 800c1de:	e000      	b.n	800c1e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800c1e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c1e2:	7cfb      	ldrb	r3, [r7, #19]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d10b      	bne.n	800c200 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c1e8:	4b51      	ldr	r3, [pc, #324]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c1ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1f6:	494e      	ldr	r1, [pc, #312]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c1fe:	e001      	b.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c200:	7cfb      	ldrb	r3, [r7, #19]
 800c202:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	f000 809e 	beq.w	800c34e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c212:	2300      	movs	r3, #0
 800c214:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c216:	4b46      	ldr	r3, [pc, #280]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c21a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d101      	bne.n	800c226 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800c222:	2301      	movs	r3, #1
 800c224:	e000      	b.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800c226:	2300      	movs	r3, #0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d00d      	beq.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c22c:	4b40      	ldr	r3, [pc, #256]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c22e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c230:	4a3f      	ldr	r2, [pc, #252]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c236:	6593      	str	r3, [r2, #88]	; 0x58
 800c238:	4b3d      	ldr	r3, [pc, #244]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c23a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c23c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c240:	60bb      	str	r3, [r7, #8]
 800c242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c244:	2301      	movs	r3, #1
 800c246:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c248:	4b3a      	ldr	r3, [pc, #232]	; (800c334 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a39      	ldr	r2, [pc, #228]	; (800c334 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c24e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c252:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c254:	f7fc fce2 	bl	8008c1c <HAL_GetTick>
 800c258:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c25a:	e009      	b.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c25c:	f7fc fcde 	bl	8008c1c <HAL_GetTick>
 800c260:	4602      	mov	r2, r0
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	1ad3      	subs	r3, r2, r3
 800c266:	2b02      	cmp	r3, #2
 800c268:	d902      	bls.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800c26a:	2303      	movs	r3, #3
 800c26c:	74fb      	strb	r3, [r7, #19]
        break;
 800c26e:	e005      	b.n	800c27c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c270:	4b30      	ldr	r3, [pc, #192]	; (800c334 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d0ef      	beq.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800c27c:	7cfb      	ldrb	r3, [r7, #19]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d15a      	bne.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c282:	4b2b      	ldr	r3, [pc, #172]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c28c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d01e      	beq.n	800c2d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c298:	697a      	ldr	r2, [r7, #20]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d019      	beq.n	800c2d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c29e:	4b24      	ldr	r3, [pc, #144]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c2a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c2aa:	4b21      	ldr	r3, [pc, #132]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c2ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2b0:	4a1f      	ldr	r2, [pc, #124]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c2b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c2ba:	4b1d      	ldr	r3, [pc, #116]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c2bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2c0:	4a1b      	ldr	r2, [pc, #108]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c2c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c2c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c2ca:	4a19      	ldr	r2, [pc, #100]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	f003 0301 	and.w	r3, r3, #1
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d016      	beq.n	800c30a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2dc:	f7fc fc9e 	bl	8008c1c <HAL_GetTick>
 800c2e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c2e2:	e00b      	b.n	800c2fc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c2e4:	f7fc fc9a 	bl	8008c1c <HAL_GetTick>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	1ad3      	subs	r3, r2, r3
 800c2ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d902      	bls.n	800c2fc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800c2f6:	2303      	movs	r3, #3
 800c2f8:	74fb      	strb	r3, [r7, #19]
            break;
 800c2fa:	e006      	b.n	800c30a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c2fc:	4b0c      	ldr	r3, [pc, #48]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c2fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c302:	f003 0302 	and.w	r3, r3, #2
 800c306:	2b00      	cmp	r3, #0
 800c308:	d0ec      	beq.n	800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800c30a:	7cfb      	ldrb	r3, [r7, #19]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d10b      	bne.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c310:	4b07      	ldr	r3, [pc, #28]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c316:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c31e:	4904      	ldr	r1, [pc, #16]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c320:	4313      	orrs	r3, r2
 800c322:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c326:	e009      	b.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c328:	7cfb      	ldrb	r3, [r7, #19]
 800c32a:	74bb      	strb	r3, [r7, #18]
 800c32c:	e006      	b.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800c32e:	bf00      	nop
 800c330:	40021000 	.word	0x40021000
 800c334:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c338:	7cfb      	ldrb	r3, [r7, #19]
 800c33a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c33c:	7c7b      	ldrb	r3, [r7, #17]
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d105      	bne.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c342:	4b8a      	ldr	r3, [pc, #552]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c346:	4a89      	ldr	r2, [pc, #548]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c34c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f003 0301 	and.w	r3, r3, #1
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00a      	beq.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c35a:	4b84      	ldr	r3, [pc, #528]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c35c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c360:	f023 0203 	bic.w	r2, r3, #3
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6a1b      	ldr	r3, [r3, #32]
 800c368:	4980      	ldr	r1, [pc, #512]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c36a:	4313      	orrs	r3, r2
 800c36c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f003 0302 	and.w	r3, r3, #2
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00a      	beq.n	800c392 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c37c:	4b7b      	ldr	r3, [pc, #492]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c37e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c382:	f023 020c 	bic.w	r2, r3, #12
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c38a:	4978      	ldr	r1, [pc, #480]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c38c:	4313      	orrs	r3, r2
 800c38e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f003 0320 	and.w	r3, r3, #32
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d00a      	beq.n	800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c39e:	4b73      	ldr	r3, [pc, #460]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c3a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ac:	496f      	ldr	r1, [pc, #444]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d00a      	beq.n	800c3d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c3c0:	4b6a      	ldr	r3, [pc, #424]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c3c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3c6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3ce:	4967      	ldr	r1, [pc, #412]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d00a      	beq.n	800c3f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c3e2:	4b62      	ldr	r3, [pc, #392]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c3e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3f0:	495e      	ldr	r1, [pc, #376]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c400:	2b00      	cmp	r3, #0
 800c402:	d00a      	beq.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c404:	4b59      	ldr	r3, [pc, #356]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c40a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c412:	4956      	ldr	r1, [pc, #344]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c414:	4313      	orrs	r3, r2
 800c416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c422:	2b00      	cmp	r3, #0
 800c424:	d00a      	beq.n	800c43c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c426:	4b51      	ldr	r3, [pc, #324]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c42c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c434:	494d      	ldr	r1, [pc, #308]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c436:	4313      	orrs	r3, r2
 800c438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c444:	2b00      	cmp	r3, #0
 800c446:	d028      	beq.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c448:	4b48      	ldr	r3, [pc, #288]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c44a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c44e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c456:	4945      	ldr	r1, [pc, #276]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c458:	4313      	orrs	r3, r2
 800c45a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c462:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c466:	d106      	bne.n	800c476 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c468:	4b40      	ldr	r3, [pc, #256]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c46a:	68db      	ldr	r3, [r3, #12]
 800c46c:	4a3f      	ldr	r2, [pc, #252]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c46e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c472:	60d3      	str	r3, [r2, #12]
 800c474:	e011      	b.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c47a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c47e:	d10c      	bne.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	3304      	adds	r3, #4
 800c484:	2101      	movs	r1, #1
 800c486:	4618      	mov	r0, r3
 800c488:	f000 f872 	bl	800c570 <RCCEx_PLLSAI1_Config>
 800c48c:	4603      	mov	r3, r0
 800c48e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800c490:	7cfb      	ldrb	r3, [r7, #19]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d001      	beq.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800c496:	7cfb      	ldrb	r3, [r7, #19]
 800c498:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d028      	beq.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c4a6:	4b31      	ldr	r3, [pc, #196]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c4a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4b4:	492d      	ldr	r1, [pc, #180]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4c4:	d106      	bne.n	800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c4c6:	4b29      	ldr	r3, [pc, #164]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c4c8:	68db      	ldr	r3, [r3, #12]
 800c4ca:	4a28      	ldr	r2, [pc, #160]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c4cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4d0:	60d3      	str	r3, [r2, #12]
 800c4d2:	e011      	b.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c4dc:	d10c      	bne.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	3304      	adds	r3, #4
 800c4e2:	2101      	movs	r1, #1
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f000 f843 	bl	800c570 <RCCEx_PLLSAI1_Config>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c4ee:	7cfb      	ldrb	r3, [r7, #19]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d001      	beq.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800c4f4:	7cfb      	ldrb	r3, [r7, #19]
 800c4f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c500:	2b00      	cmp	r3, #0
 800c502:	d01c      	beq.n	800c53e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c504:	4b19      	ldr	r3, [pc, #100]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c50a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c512:	4916      	ldr	r1, [pc, #88]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c514:	4313      	orrs	r3, r2
 800c516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c51e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c522:	d10c      	bne.n	800c53e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	3304      	adds	r3, #4
 800c528:	2102      	movs	r1, #2
 800c52a:	4618      	mov	r0, r3
 800c52c:	f000 f820 	bl	800c570 <RCCEx_PLLSAI1_Config>
 800c530:	4603      	mov	r3, r0
 800c532:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c534:	7cfb      	ldrb	r3, [r7, #19]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d001      	beq.n	800c53e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800c53a:	7cfb      	ldrb	r3, [r7, #19]
 800c53c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c546:	2b00      	cmp	r3, #0
 800c548:	d00a      	beq.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c54a:	4b08      	ldr	r3, [pc, #32]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c54c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c550:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c558:	4904      	ldr	r1, [pc, #16]	; (800c56c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c55a:	4313      	orrs	r3, r2
 800c55c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800c560:	7cbb      	ldrb	r3, [r7, #18]
}
 800c562:	4618      	mov	r0, r3
 800c564:	3718      	adds	r7, #24
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	40021000 	.word	0x40021000

0800c570 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c57a:	2300      	movs	r3, #0
 800c57c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c57e:	4b74      	ldr	r3, [pc, #464]	; (800c750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c580:	68db      	ldr	r3, [r3, #12]
 800c582:	f003 0303 	and.w	r3, r3, #3
 800c586:	2b00      	cmp	r3, #0
 800c588:	d018      	beq.n	800c5bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c58a:	4b71      	ldr	r3, [pc, #452]	; (800c750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	f003 0203 	and.w	r2, r3, #3
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	429a      	cmp	r2, r3
 800c598:	d10d      	bne.n	800c5b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
       ||
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d009      	beq.n	800c5b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800c5a2:	4b6b      	ldr	r3, [pc, #428]	; (800c750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	091b      	lsrs	r3, r3, #4
 800c5a8:	f003 0307 	and.w	r3, r3, #7
 800c5ac:	1c5a      	adds	r2, r3, #1
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	685b      	ldr	r3, [r3, #4]
       ||
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d047      	beq.n	800c646 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	73fb      	strb	r3, [r7, #15]
 800c5ba:	e044      	b.n	800c646 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	2b03      	cmp	r3, #3
 800c5c2:	d018      	beq.n	800c5f6 <RCCEx_PLLSAI1_Config+0x86>
 800c5c4:	2b03      	cmp	r3, #3
 800c5c6:	d825      	bhi.n	800c614 <RCCEx_PLLSAI1_Config+0xa4>
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d002      	beq.n	800c5d2 <RCCEx_PLLSAI1_Config+0x62>
 800c5cc:	2b02      	cmp	r3, #2
 800c5ce:	d009      	beq.n	800c5e4 <RCCEx_PLLSAI1_Config+0x74>
 800c5d0:	e020      	b.n	800c614 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c5d2:	4b5f      	ldr	r3, [pc, #380]	; (800c750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f003 0302 	and.w	r3, r3, #2
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d11d      	bne.n	800c61a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800c5de:	2301      	movs	r3, #1
 800c5e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c5e2:	e01a      	b.n	800c61a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c5e4:	4b5a      	ldr	r3, [pc, #360]	; (800c750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d116      	bne.n	800c61e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c5f4:	e013      	b.n	800c61e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c5f6:	4b56      	ldr	r3, [pc, #344]	; (800c750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d10f      	bne.n	800c622 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c602:	4b53      	ldr	r3, [pc, #332]	; (800c750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d109      	bne.n	800c622 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800c60e:	2301      	movs	r3, #1
 800c610:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c612:	e006      	b.n	800c622 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800c614:	2301      	movs	r3, #1
 800c616:	73fb      	strb	r3, [r7, #15]
      break;
 800c618:	e004      	b.n	800c624 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c61a:	bf00      	nop
 800c61c:	e002      	b.n	800c624 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c61e:	bf00      	nop
 800c620:	e000      	b.n	800c624 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c622:	bf00      	nop
    }

    if(status == HAL_OK)
 800c624:	7bfb      	ldrb	r3, [r7, #15]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d10d      	bne.n	800c646 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c62a:	4b49      	ldr	r3, [pc, #292]	; (800c750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c62c:	68db      	ldr	r3, [r3, #12]
 800c62e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6819      	ldr	r1, [r3, #0]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	3b01      	subs	r3, #1
 800c63c:	011b      	lsls	r3, r3, #4
 800c63e:	430b      	orrs	r3, r1
 800c640:	4943      	ldr	r1, [pc, #268]	; (800c750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c642:	4313      	orrs	r3, r2
 800c644:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800c646:	7bfb      	ldrb	r3, [r7, #15]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d17c      	bne.n	800c746 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800c64c:	4b40      	ldr	r3, [pc, #256]	; (800c750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	4a3f      	ldr	r2, [pc, #252]	; (800c750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c652:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c656:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c658:	f7fc fae0 	bl	8008c1c <HAL_GetTick>
 800c65c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c65e:	e009      	b.n	800c674 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c660:	f7fc fadc 	bl	8008c1c <HAL_GetTick>
 800c664:	4602      	mov	r2, r0
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	1ad3      	subs	r3, r2, r3
 800c66a:	2b02      	cmp	r3, #2
 800c66c:	d902      	bls.n	800c674 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800c66e:	2303      	movs	r3, #3
 800c670:	73fb      	strb	r3, [r7, #15]
        break;
 800c672:	e005      	b.n	800c680 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c674:	4b36      	ldr	r3, [pc, #216]	; (800c750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d1ef      	bne.n	800c660 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800c680:	7bfb      	ldrb	r3, [r7, #15]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d15f      	bne.n	800c746 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d110      	bne.n	800c6ae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c68c:	4b30      	ldr	r3, [pc, #192]	; (800c750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c68e:	691b      	ldr	r3, [r3, #16]
 800c690:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800c694:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	6892      	ldr	r2, [r2, #8]
 800c69c:	0211      	lsls	r1, r2, #8
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	68d2      	ldr	r2, [r2, #12]
 800c6a2:	06d2      	lsls	r2, r2, #27
 800c6a4:	430a      	orrs	r2, r1
 800c6a6:	492a      	ldr	r1, [pc, #168]	; (800c750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c6a8:	4313      	orrs	r3, r2
 800c6aa:	610b      	str	r3, [r1, #16]
 800c6ac:	e027      	b.n	800c6fe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d112      	bne.n	800c6da <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c6b4:	4b26      	ldr	r3, [pc, #152]	; (800c750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c6b6:	691b      	ldr	r3, [r3, #16]
 800c6b8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800c6bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	6892      	ldr	r2, [r2, #8]
 800c6c4:	0211      	lsls	r1, r2, #8
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	6912      	ldr	r2, [r2, #16]
 800c6ca:	0852      	lsrs	r2, r2, #1
 800c6cc:	3a01      	subs	r2, #1
 800c6ce:	0552      	lsls	r2, r2, #21
 800c6d0:	430a      	orrs	r2, r1
 800c6d2:	491f      	ldr	r1, [pc, #124]	; (800c750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	610b      	str	r3, [r1, #16]
 800c6d8:	e011      	b.n	800c6fe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c6da:	4b1d      	ldr	r3, [pc, #116]	; (800c750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c6dc:	691b      	ldr	r3, [r3, #16]
 800c6de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800c6e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	6892      	ldr	r2, [r2, #8]
 800c6ea:	0211      	lsls	r1, r2, #8
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	6952      	ldr	r2, [r2, #20]
 800c6f0:	0852      	lsrs	r2, r2, #1
 800c6f2:	3a01      	subs	r2, #1
 800c6f4:	0652      	lsls	r2, r2, #25
 800c6f6:	430a      	orrs	r2, r1
 800c6f8:	4915      	ldr	r1, [pc, #84]	; (800c750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800c6fe:	4b14      	ldr	r3, [pc, #80]	; (800c750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a13      	ldr	r2, [pc, #76]	; (800c750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c704:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c708:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c70a:	f7fc fa87 	bl	8008c1c <HAL_GetTick>
 800c70e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c710:	e009      	b.n	800c726 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c712:	f7fc fa83 	bl	8008c1c <HAL_GetTick>
 800c716:	4602      	mov	r2, r0
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	1ad3      	subs	r3, r2, r3
 800c71c:	2b02      	cmp	r3, #2
 800c71e:	d902      	bls.n	800c726 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800c720:	2303      	movs	r3, #3
 800c722:	73fb      	strb	r3, [r7, #15]
          break;
 800c724:	e005      	b.n	800c732 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c726:	4b0a      	ldr	r3, [pc, #40]	; (800c750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d0ef      	beq.n	800c712 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800c732:	7bfb      	ldrb	r3, [r7, #15]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d106      	bne.n	800c746 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c738:	4b05      	ldr	r3, [pc, #20]	; (800c750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c73a:	691a      	ldr	r2, [r3, #16]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	699b      	ldr	r3, [r3, #24]
 800c740:	4903      	ldr	r1, [pc, #12]	; (800c750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c742:	4313      	orrs	r3, r2
 800c744:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800c746:	7bfb      	ldrb	r3, [r7, #15]
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3710      	adds	r7, #16
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	40021000 	.word	0x40021000

0800c754 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b082      	sub	sp, #8
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d101      	bne.n	800c766 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c762:	2301      	movs	r3, #1
 800c764:	e049      	b.n	800c7fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c76c:	b2db      	uxtb	r3, r3
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d106      	bne.n	800c780 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2200      	movs	r2, #0
 800c776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f7fb fb14 	bl	8007da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2202      	movs	r2, #2
 800c784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	3304      	adds	r3, #4
 800c790:	4619      	mov	r1, r3
 800c792:	4610      	mov	r0, r2
 800c794:	f000 fcaa 	bl	800d0ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2201      	movs	r2, #1
 800c79c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c7f8:	2300      	movs	r3, #0
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3708      	adds	r7, #8
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
	...

0800c804 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c804:	b480      	push	{r7}
 800c806:	b085      	sub	sp, #20
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c812:	b2db      	uxtb	r3, r3
 800c814:	2b01      	cmp	r3, #1
 800c816:	d001      	beq.n	800c81c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c818:	2301      	movs	r3, #1
 800c81a:	e03b      	b.n	800c894 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2202      	movs	r2, #2
 800c820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	68da      	ldr	r2, [r3, #12]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f042 0201 	orr.w	r2, r2, #1
 800c832:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4a19      	ldr	r2, [pc, #100]	; (800c8a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d009      	beq.n	800c852 <HAL_TIM_Base_Start_IT+0x4e>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c846:	d004      	beq.n	800c852 <HAL_TIM_Base_Start_IT+0x4e>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a15      	ldr	r2, [pc, #84]	; (800c8a4 <HAL_TIM_Base_Start_IT+0xa0>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	d115      	bne.n	800c87e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	689a      	ldr	r2, [r3, #8]
 800c858:	4b13      	ldr	r3, [pc, #76]	; (800c8a8 <HAL_TIM_Base_Start_IT+0xa4>)
 800c85a:	4013      	ands	r3, r2
 800c85c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	2b06      	cmp	r3, #6
 800c862:	d015      	beq.n	800c890 <HAL_TIM_Base_Start_IT+0x8c>
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c86a:	d011      	beq.n	800c890 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f042 0201 	orr.w	r2, r2, #1
 800c87a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c87c:	e008      	b.n	800c890 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f042 0201 	orr.w	r2, r2, #1
 800c88c:	601a      	str	r2, [r3, #0]
 800c88e:	e000      	b.n	800c892 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c890:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c892:	2300      	movs	r3, #0
}
 800c894:	4618      	mov	r0, r3
 800c896:	3714      	adds	r7, #20
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr
 800c8a0:	40012c00 	.word	0x40012c00
 800c8a4:	40014000 	.word	0x40014000
 800c8a8:	00010007 	.word	0x00010007

0800c8ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d101      	bne.n	800c8be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	e049      	b.n	800c952 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8c4:	b2db      	uxtb	r3, r3
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d106      	bne.n	800c8d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f7fb fa14 	bl	8007d00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2202      	movs	r2, #2
 800c8dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681a      	ldr	r2, [r3, #0]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	3304      	adds	r3, #4
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	4610      	mov	r0, r2
 800c8ec:	f000 fbfe 	bl	800d0ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2201      	movs	r2, #1
 800c904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2201      	movs	r2, #1
 800c90c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2201      	movs	r2, #1
 800c914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2201      	movs	r2, #1
 800c91c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2201      	movs	r2, #1
 800c924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2201      	movs	r2, #1
 800c92c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2201      	movs	r2, #1
 800c934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2201      	movs	r2, #1
 800c93c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2201      	movs	r2, #1
 800c944:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2201      	movs	r2, #1
 800c94c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c950:	2300      	movs	r3, #0
}
 800c952:	4618      	mov	r0, r3
 800c954:	3708      	adds	r7, #8
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
	...

0800c95c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b084      	sub	sp, #16
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d109      	bne.n	800c980 <HAL_TIM_PWM_Start+0x24>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c972:	b2db      	uxtb	r3, r3
 800c974:	2b01      	cmp	r3, #1
 800c976:	bf14      	ite	ne
 800c978:	2301      	movne	r3, #1
 800c97a:	2300      	moveq	r3, #0
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	e03c      	b.n	800c9fa <HAL_TIM_PWM_Start+0x9e>
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	2b04      	cmp	r3, #4
 800c984:	d109      	bne.n	800c99a <HAL_TIM_PWM_Start+0x3e>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	2b01      	cmp	r3, #1
 800c990:	bf14      	ite	ne
 800c992:	2301      	movne	r3, #1
 800c994:	2300      	moveq	r3, #0
 800c996:	b2db      	uxtb	r3, r3
 800c998:	e02f      	b.n	800c9fa <HAL_TIM_PWM_Start+0x9e>
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	2b08      	cmp	r3, #8
 800c99e:	d109      	bne.n	800c9b4 <HAL_TIM_PWM_Start+0x58>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	bf14      	ite	ne
 800c9ac:	2301      	movne	r3, #1
 800c9ae:	2300      	moveq	r3, #0
 800c9b0:	b2db      	uxtb	r3, r3
 800c9b2:	e022      	b.n	800c9fa <HAL_TIM_PWM_Start+0x9e>
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	2b0c      	cmp	r3, #12
 800c9b8:	d109      	bne.n	800c9ce <HAL_TIM_PWM_Start+0x72>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9c0:	b2db      	uxtb	r3, r3
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	bf14      	ite	ne
 800c9c6:	2301      	movne	r3, #1
 800c9c8:	2300      	moveq	r3, #0
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	e015      	b.n	800c9fa <HAL_TIM_PWM_Start+0x9e>
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	2b10      	cmp	r3, #16
 800c9d2:	d109      	bne.n	800c9e8 <HAL_TIM_PWM_Start+0x8c>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	bf14      	ite	ne
 800c9e0:	2301      	movne	r3, #1
 800c9e2:	2300      	moveq	r3, #0
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	e008      	b.n	800c9fa <HAL_TIM_PWM_Start+0x9e>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	bf14      	ite	ne
 800c9f4:	2301      	movne	r3, #1
 800c9f6:	2300      	moveq	r3, #0
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d001      	beq.n	800ca02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e07e      	b.n	800cb00 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d104      	bne.n	800ca12 <HAL_TIM_PWM_Start+0xb6>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2202      	movs	r2, #2
 800ca0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ca10:	e023      	b.n	800ca5a <HAL_TIM_PWM_Start+0xfe>
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	2b04      	cmp	r3, #4
 800ca16:	d104      	bne.n	800ca22 <HAL_TIM_PWM_Start+0xc6>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2202      	movs	r2, #2
 800ca1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca20:	e01b      	b.n	800ca5a <HAL_TIM_PWM_Start+0xfe>
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	2b08      	cmp	r3, #8
 800ca26:	d104      	bne.n	800ca32 <HAL_TIM_PWM_Start+0xd6>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2202      	movs	r2, #2
 800ca2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca30:	e013      	b.n	800ca5a <HAL_TIM_PWM_Start+0xfe>
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	2b0c      	cmp	r3, #12
 800ca36:	d104      	bne.n	800ca42 <HAL_TIM_PWM_Start+0xe6>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2202      	movs	r2, #2
 800ca3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ca40:	e00b      	b.n	800ca5a <HAL_TIM_PWM_Start+0xfe>
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	2b10      	cmp	r3, #16
 800ca46:	d104      	bne.n	800ca52 <HAL_TIM_PWM_Start+0xf6>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2202      	movs	r2, #2
 800ca4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ca50:	e003      	b.n	800ca5a <HAL_TIM_PWM_Start+0xfe>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2202      	movs	r2, #2
 800ca56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	6839      	ldr	r1, [r7, #0]
 800ca62:	4618      	mov	r0, r3
 800ca64:	f000 fe24 	bl	800d6b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	4a26      	ldr	r2, [pc, #152]	; (800cb08 <HAL_TIM_PWM_Start+0x1ac>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d009      	beq.n	800ca86 <HAL_TIM_PWM_Start+0x12a>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4a25      	ldr	r2, [pc, #148]	; (800cb0c <HAL_TIM_PWM_Start+0x1b0>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d004      	beq.n	800ca86 <HAL_TIM_PWM_Start+0x12a>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4a23      	ldr	r2, [pc, #140]	; (800cb10 <HAL_TIM_PWM_Start+0x1b4>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d101      	bne.n	800ca8a <HAL_TIM_PWM_Start+0x12e>
 800ca86:	2301      	movs	r3, #1
 800ca88:	e000      	b.n	800ca8c <HAL_TIM_PWM_Start+0x130>
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d007      	beq.n	800caa0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ca9e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	4a18      	ldr	r2, [pc, #96]	; (800cb08 <HAL_TIM_PWM_Start+0x1ac>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d009      	beq.n	800cabe <HAL_TIM_PWM_Start+0x162>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cab2:	d004      	beq.n	800cabe <HAL_TIM_PWM_Start+0x162>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4a14      	ldr	r2, [pc, #80]	; (800cb0c <HAL_TIM_PWM_Start+0x1b0>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d115      	bne.n	800caea <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	689a      	ldr	r2, [r3, #8]
 800cac4:	4b13      	ldr	r3, [pc, #76]	; (800cb14 <HAL_TIM_PWM_Start+0x1b8>)
 800cac6:	4013      	ands	r3, r2
 800cac8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2b06      	cmp	r3, #6
 800cace:	d015      	beq.n	800cafc <HAL_TIM_PWM_Start+0x1a0>
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cad6:	d011      	beq.n	800cafc <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	681a      	ldr	r2, [r3, #0]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f042 0201 	orr.w	r2, r2, #1
 800cae6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cae8:	e008      	b.n	800cafc <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	681a      	ldr	r2, [r3, #0]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	f042 0201 	orr.w	r2, r2, #1
 800caf8:	601a      	str	r2, [r3, #0]
 800cafa:	e000      	b.n	800cafe <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cafc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cafe:	2300      	movs	r3, #0
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3710      	adds	r7, #16
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}
 800cb08:	40012c00 	.word	0x40012c00
 800cb0c:	40014000 	.word	0x40014000
 800cb10:	40014400 	.word	0x40014400
 800cb14:	00010007 	.word	0x00010007

0800cb18 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	2200      	movs	r2, #0
 800cb28:	6839      	ldr	r1, [r7, #0]
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f000 fdc0 	bl	800d6b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	4a39      	ldr	r2, [pc, #228]	; (800cc1c <HAL_TIM_PWM_Stop+0x104>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d009      	beq.n	800cb4e <HAL_TIM_PWM_Stop+0x36>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	4a38      	ldr	r2, [pc, #224]	; (800cc20 <HAL_TIM_PWM_Stop+0x108>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d004      	beq.n	800cb4e <HAL_TIM_PWM_Stop+0x36>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4a36      	ldr	r2, [pc, #216]	; (800cc24 <HAL_TIM_PWM_Stop+0x10c>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d101      	bne.n	800cb52 <HAL_TIM_PWM_Stop+0x3a>
 800cb4e:	2301      	movs	r3, #1
 800cb50:	e000      	b.n	800cb54 <HAL_TIM_PWM_Stop+0x3c>
 800cb52:	2300      	movs	r3, #0
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d017      	beq.n	800cb88 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	6a1a      	ldr	r2, [r3, #32]
 800cb5e:	f241 1311 	movw	r3, #4369	; 0x1111
 800cb62:	4013      	ands	r3, r2
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d10f      	bne.n	800cb88 <HAL_TIM_PWM_Stop+0x70>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	6a1a      	ldr	r2, [r3, #32]
 800cb6e:	f240 4344 	movw	r3, #1092	; 0x444
 800cb72:	4013      	ands	r3, r2
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d107      	bne.n	800cb88 <HAL_TIM_PWM_Stop+0x70>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cb86:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	6a1a      	ldr	r2, [r3, #32]
 800cb8e:	f241 1311 	movw	r3, #4369	; 0x1111
 800cb92:	4013      	ands	r3, r2
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10f      	bne.n	800cbb8 <HAL_TIM_PWM_Stop+0xa0>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	6a1a      	ldr	r2, [r3, #32]
 800cb9e:	f240 4344 	movw	r3, #1092	; 0x444
 800cba2:	4013      	ands	r3, r2
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d107      	bne.n	800cbb8 <HAL_TIM_PWM_Stop+0xa0>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	681a      	ldr	r2, [r3, #0]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f022 0201 	bic.w	r2, r2, #1
 800cbb6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d104      	bne.n	800cbc8 <HAL_TIM_PWM_Stop+0xb0>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2201      	movs	r2, #1
 800cbc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cbc6:	e023      	b.n	800cc10 <HAL_TIM_PWM_Stop+0xf8>
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	2b04      	cmp	r3, #4
 800cbcc:	d104      	bne.n	800cbd8 <HAL_TIM_PWM_Stop+0xc0>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cbd6:	e01b      	b.n	800cc10 <HAL_TIM_PWM_Stop+0xf8>
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	2b08      	cmp	r3, #8
 800cbdc:	d104      	bne.n	800cbe8 <HAL_TIM_PWM_Stop+0xd0>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2201      	movs	r2, #1
 800cbe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cbe6:	e013      	b.n	800cc10 <HAL_TIM_PWM_Stop+0xf8>
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	2b0c      	cmp	r3, #12
 800cbec:	d104      	bne.n	800cbf8 <HAL_TIM_PWM_Stop+0xe0>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cbf6:	e00b      	b.n	800cc10 <HAL_TIM_PWM_Stop+0xf8>
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	2b10      	cmp	r3, #16
 800cbfc:	d104      	bne.n	800cc08 <HAL_TIM_PWM_Stop+0xf0>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2201      	movs	r2, #1
 800cc02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cc06:	e003      	b.n	800cc10 <HAL_TIM_PWM_Stop+0xf8>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800cc10:	2300      	movs	r3, #0
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3708      	adds	r7, #8
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	40012c00 	.word	0x40012c00
 800cc20:	40014000 	.word	0x40014000
 800cc24:	40014400 	.word	0x40014400

0800cc28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	691b      	ldr	r3, [r3, #16]
 800cc36:	f003 0302 	and.w	r3, r3, #2
 800cc3a:	2b02      	cmp	r3, #2
 800cc3c:	d122      	bne.n	800cc84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	68db      	ldr	r3, [r3, #12]
 800cc44:	f003 0302 	and.w	r3, r3, #2
 800cc48:	2b02      	cmp	r3, #2
 800cc4a:	d11b      	bne.n	800cc84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f06f 0202 	mvn.w	r2, #2
 800cc54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2201      	movs	r2, #1
 800cc5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	699b      	ldr	r3, [r3, #24]
 800cc62:	f003 0303 	and.w	r3, r3, #3
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d003      	beq.n	800cc72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 fa20 	bl	800d0b0 <HAL_TIM_IC_CaptureCallback>
 800cc70:	e005      	b.n	800cc7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f000 fa12 	bl	800d09c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 fa23 	bl	800d0c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2200      	movs	r2, #0
 800cc82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	691b      	ldr	r3, [r3, #16]
 800cc8a:	f003 0304 	and.w	r3, r3, #4
 800cc8e:	2b04      	cmp	r3, #4
 800cc90:	d122      	bne.n	800ccd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	f003 0304 	and.w	r3, r3, #4
 800cc9c:	2b04      	cmp	r3, #4
 800cc9e:	d11b      	bne.n	800ccd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f06f 0204 	mvn.w	r2, #4
 800cca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2202      	movs	r2, #2
 800ccae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	699b      	ldr	r3, [r3, #24]
 800ccb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d003      	beq.n	800ccc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 f9f6 	bl	800d0b0 <HAL_TIM_IC_CaptureCallback>
 800ccc4:	e005      	b.n	800ccd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f000 f9e8 	bl	800d09c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f000 f9f9 	bl	800d0c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	691b      	ldr	r3, [r3, #16]
 800ccde:	f003 0308 	and.w	r3, r3, #8
 800cce2:	2b08      	cmp	r3, #8
 800cce4:	d122      	bne.n	800cd2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	68db      	ldr	r3, [r3, #12]
 800ccec:	f003 0308 	and.w	r3, r3, #8
 800ccf0:	2b08      	cmp	r3, #8
 800ccf2:	d11b      	bne.n	800cd2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f06f 0208 	mvn.w	r2, #8
 800ccfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2204      	movs	r2, #4
 800cd02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	69db      	ldr	r3, [r3, #28]
 800cd0a:	f003 0303 	and.w	r3, r3, #3
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d003      	beq.n	800cd1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f000 f9cc 	bl	800d0b0 <HAL_TIM_IC_CaptureCallback>
 800cd18:	e005      	b.n	800cd26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f000 f9be 	bl	800d09c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 f9cf 	bl	800d0c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	691b      	ldr	r3, [r3, #16]
 800cd32:	f003 0310 	and.w	r3, r3, #16
 800cd36:	2b10      	cmp	r3, #16
 800cd38:	d122      	bne.n	800cd80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	68db      	ldr	r3, [r3, #12]
 800cd40:	f003 0310 	and.w	r3, r3, #16
 800cd44:	2b10      	cmp	r3, #16
 800cd46:	d11b      	bne.n	800cd80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f06f 0210 	mvn.w	r2, #16
 800cd50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2208      	movs	r2, #8
 800cd56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	69db      	ldr	r3, [r3, #28]
 800cd5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d003      	beq.n	800cd6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 f9a2 	bl	800d0b0 <HAL_TIM_IC_CaptureCallback>
 800cd6c:	e005      	b.n	800cd7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f000 f994 	bl	800d09c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f000 f9a5 	bl	800d0c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	691b      	ldr	r3, [r3, #16]
 800cd86:	f003 0301 	and.w	r3, r3, #1
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	d10e      	bne.n	800cdac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	68db      	ldr	r3, [r3, #12]
 800cd94:	f003 0301 	and.w	r3, r3, #1
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d107      	bne.n	800cdac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f06f 0201 	mvn.w	r2, #1
 800cda4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 f96e 	bl	800d088 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	691b      	ldr	r3, [r3, #16]
 800cdb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdb6:	2b80      	cmp	r3, #128	; 0x80
 800cdb8:	d10e      	bne.n	800cdd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	68db      	ldr	r3, [r3, #12]
 800cdc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdc4:	2b80      	cmp	r3, #128	; 0x80
 800cdc6:	d107      	bne.n	800cdd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cdd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f000 fd7a 	bl	800d8cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	691b      	ldr	r3, [r3, #16]
 800cdde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cde2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cde6:	d10e      	bne.n	800ce06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	68db      	ldr	r3, [r3, #12]
 800cdee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdf2:	2b80      	cmp	r3, #128	; 0x80
 800cdf4:	d107      	bne.n	800ce06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cdfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f000 fd6d 	bl	800d8e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	691b      	ldr	r3, [r3, #16]
 800ce0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce10:	2b40      	cmp	r3, #64	; 0x40
 800ce12:	d10e      	bne.n	800ce32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	68db      	ldr	r3, [r3, #12]
 800ce1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce1e:	2b40      	cmp	r3, #64	; 0x40
 800ce20:	d107      	bne.n	800ce32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ce2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f000 f953 	bl	800d0d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	691b      	ldr	r3, [r3, #16]
 800ce38:	f003 0320 	and.w	r3, r3, #32
 800ce3c:	2b20      	cmp	r3, #32
 800ce3e:	d10e      	bne.n	800ce5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	68db      	ldr	r3, [r3, #12]
 800ce46:	f003 0320 	and.w	r3, r3, #32
 800ce4a:	2b20      	cmp	r3, #32
 800ce4c:	d107      	bne.n	800ce5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f06f 0220 	mvn.w	r2, #32
 800ce56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f000 fd2d 	bl	800d8b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ce5e:	bf00      	nop
 800ce60:	3708      	adds	r7, #8
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
	...

0800ce68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	60b9      	str	r1, [r7, #8]
 800ce72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	d101      	bne.n	800ce82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ce7e:	2302      	movs	r3, #2
 800ce80:	e0fd      	b.n	800d07e <HAL_TIM_PWM_ConfigChannel+0x216>
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	2201      	movs	r2, #1
 800ce86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2b14      	cmp	r3, #20
 800ce8e:	f200 80f0 	bhi.w	800d072 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800ce92:	a201      	add	r2, pc, #4	; (adr r2, 800ce98 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800ce94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce98:	0800ceed 	.word	0x0800ceed
 800ce9c:	0800d073 	.word	0x0800d073
 800cea0:	0800d073 	.word	0x0800d073
 800cea4:	0800d073 	.word	0x0800d073
 800cea8:	0800cf2d 	.word	0x0800cf2d
 800ceac:	0800d073 	.word	0x0800d073
 800ceb0:	0800d073 	.word	0x0800d073
 800ceb4:	0800d073 	.word	0x0800d073
 800ceb8:	0800cf6f 	.word	0x0800cf6f
 800cebc:	0800d073 	.word	0x0800d073
 800cec0:	0800d073 	.word	0x0800d073
 800cec4:	0800d073 	.word	0x0800d073
 800cec8:	0800cfaf 	.word	0x0800cfaf
 800cecc:	0800d073 	.word	0x0800d073
 800ced0:	0800d073 	.word	0x0800d073
 800ced4:	0800d073 	.word	0x0800d073
 800ced8:	0800cff1 	.word	0x0800cff1
 800cedc:	0800d073 	.word	0x0800d073
 800cee0:	0800d073 	.word	0x0800d073
 800cee4:	0800d073 	.word	0x0800d073
 800cee8:	0800d031 	.word	0x0800d031
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	68b9      	ldr	r1, [r7, #8]
 800cef2:	4618      	mov	r0, r3
 800cef4:	f000 f95e 	bl	800d1b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	699a      	ldr	r2, [r3, #24]
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f042 0208 	orr.w	r2, r2, #8
 800cf06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	699a      	ldr	r2, [r3, #24]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f022 0204 	bic.w	r2, r2, #4
 800cf16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	6999      	ldr	r1, [r3, #24]
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	691a      	ldr	r2, [r3, #16]
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	430a      	orrs	r2, r1
 800cf28:	619a      	str	r2, [r3, #24]
      break;
 800cf2a:	e0a3      	b.n	800d074 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	68b9      	ldr	r1, [r7, #8]
 800cf32:	4618      	mov	r0, r3
 800cf34:	f000 f9ba 	bl	800d2ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	699a      	ldr	r2, [r3, #24]
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	699a      	ldr	r2, [r3, #24]
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	6999      	ldr	r1, [r3, #24]
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	691b      	ldr	r3, [r3, #16]
 800cf62:	021a      	lsls	r2, r3, #8
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	430a      	orrs	r2, r1
 800cf6a:	619a      	str	r2, [r3, #24]
      break;
 800cf6c:	e082      	b.n	800d074 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	68b9      	ldr	r1, [r7, #8]
 800cf74:	4618      	mov	r0, r3
 800cf76:	f000 fa13 	bl	800d3a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	69da      	ldr	r2, [r3, #28]
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f042 0208 	orr.w	r2, r2, #8
 800cf88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	69da      	ldr	r2, [r3, #28]
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f022 0204 	bic.w	r2, r2, #4
 800cf98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	69d9      	ldr	r1, [r3, #28]
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	691a      	ldr	r2, [r3, #16]
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	430a      	orrs	r2, r1
 800cfaa:	61da      	str	r2, [r3, #28]
      break;
 800cfac:	e062      	b.n	800d074 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	68b9      	ldr	r1, [r7, #8]
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f000 fa6b 	bl	800d490 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	69da      	ldr	r2, [r3, #28]
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cfc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	69da      	ldr	r2, [r3, #28]
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cfd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	69d9      	ldr	r1, [r3, #28]
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	691b      	ldr	r3, [r3, #16]
 800cfe4:	021a      	lsls	r2, r3, #8
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	430a      	orrs	r2, r1
 800cfec:	61da      	str	r2, [r3, #28]
      break;
 800cfee:	e041      	b.n	800d074 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	68b9      	ldr	r1, [r7, #8]
 800cff6:	4618      	mov	r0, r3
 800cff8:	f000 faa8 	bl	800d54c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f042 0208 	orr.w	r2, r2, #8
 800d00a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f022 0204 	bic.w	r2, r2, #4
 800d01a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	691a      	ldr	r2, [r3, #16]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	430a      	orrs	r2, r1
 800d02c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d02e:	e021      	b.n	800d074 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	68b9      	ldr	r1, [r7, #8]
 800d036:	4618      	mov	r0, r3
 800d038:	f000 fae0 	bl	800d5fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d04a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d05a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	691b      	ldr	r3, [r3, #16]
 800d066:	021a      	lsls	r2, r3, #8
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	430a      	orrs	r2, r1
 800d06e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d070:	e000      	b.n	800d074 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800d072:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	2200      	movs	r2, #0
 800d078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d07c:	2300      	movs	r3, #0
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3710      	adds	r7, #16
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop

0800d088 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d088:	b480      	push	{r7}
 800d08a:	b083      	sub	sp, #12
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d090:	bf00      	nop
 800d092:	370c      	adds	r7, #12
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr

0800d09c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b083      	sub	sp, #12
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d0a4:	bf00      	nop
 800d0a6:	370c      	adds	r7, #12
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ae:	4770      	bx	lr

0800d0b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b083      	sub	sp, #12
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d0b8:	bf00      	nop
 800d0ba:	370c      	adds	r7, #12
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr

0800d0c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b083      	sub	sp, #12
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d0cc:	bf00      	nop
 800d0ce:	370c      	adds	r7, #12
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr

0800d0d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b083      	sub	sp, #12
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d0e0:	bf00      	nop
 800d0e2:	370c      	adds	r7, #12
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr

0800d0ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b085      	sub	sp, #20
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	4a2a      	ldr	r2, [pc, #168]	; (800d1a8 <TIM_Base_SetConfig+0xbc>)
 800d100:	4293      	cmp	r3, r2
 800d102:	d003      	beq.n	800d10c <TIM_Base_SetConfig+0x20>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d10a:	d108      	bne.n	800d11e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	68fa      	ldr	r2, [r7, #12]
 800d11a:	4313      	orrs	r3, r2
 800d11c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	4a21      	ldr	r2, [pc, #132]	; (800d1a8 <TIM_Base_SetConfig+0xbc>)
 800d122:	4293      	cmp	r3, r2
 800d124:	d00b      	beq.n	800d13e <TIM_Base_SetConfig+0x52>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d12c:	d007      	beq.n	800d13e <TIM_Base_SetConfig+0x52>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	4a1e      	ldr	r2, [pc, #120]	; (800d1ac <TIM_Base_SetConfig+0xc0>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d003      	beq.n	800d13e <TIM_Base_SetConfig+0x52>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	4a1d      	ldr	r2, [pc, #116]	; (800d1b0 <TIM_Base_SetConfig+0xc4>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d108      	bne.n	800d150 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	68db      	ldr	r3, [r3, #12]
 800d14a:	68fa      	ldr	r2, [r7, #12]
 800d14c:	4313      	orrs	r3, r2
 800d14e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	695b      	ldr	r3, [r3, #20]
 800d15a:	4313      	orrs	r3, r2
 800d15c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	68fa      	ldr	r2, [r7, #12]
 800d162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	689a      	ldr	r2, [r3, #8]
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	681a      	ldr	r2, [r3, #0]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	4a0c      	ldr	r2, [pc, #48]	; (800d1a8 <TIM_Base_SetConfig+0xbc>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d007      	beq.n	800d18c <TIM_Base_SetConfig+0xa0>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	4a0b      	ldr	r2, [pc, #44]	; (800d1ac <TIM_Base_SetConfig+0xc0>)
 800d180:	4293      	cmp	r3, r2
 800d182:	d003      	beq.n	800d18c <TIM_Base_SetConfig+0xa0>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	4a0a      	ldr	r2, [pc, #40]	; (800d1b0 <TIM_Base_SetConfig+0xc4>)
 800d188:	4293      	cmp	r3, r2
 800d18a:	d103      	bne.n	800d194 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	691a      	ldr	r2, [r3, #16]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2201      	movs	r2, #1
 800d198:	615a      	str	r2, [r3, #20]
}
 800d19a:	bf00      	nop
 800d19c:	3714      	adds	r7, #20
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a4:	4770      	bx	lr
 800d1a6:	bf00      	nop
 800d1a8:	40012c00 	.word	0x40012c00
 800d1ac:	40014000 	.word	0x40014000
 800d1b0:	40014400 	.word	0x40014400

0800d1b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b087      	sub	sp, #28
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6a1b      	ldr	r3, [r3, #32]
 800d1c2:	f023 0201 	bic.w	r2, r3, #1
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6a1b      	ldr	r3, [r3, #32]
 800d1ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	685b      	ldr	r3, [r3, #4]
 800d1d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	699b      	ldr	r3, [r3, #24]
 800d1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d1e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f023 0303 	bic.w	r3, r3, #3
 800d1ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	68fa      	ldr	r2, [r7, #12]
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	f023 0302 	bic.w	r3, r3, #2
 800d200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	689b      	ldr	r3, [r3, #8]
 800d206:	697a      	ldr	r2, [r7, #20]
 800d208:	4313      	orrs	r3, r2
 800d20a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	4a24      	ldr	r2, [pc, #144]	; (800d2a0 <TIM_OC1_SetConfig+0xec>)
 800d210:	4293      	cmp	r3, r2
 800d212:	d007      	beq.n	800d224 <TIM_OC1_SetConfig+0x70>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	4a23      	ldr	r2, [pc, #140]	; (800d2a4 <TIM_OC1_SetConfig+0xf0>)
 800d218:	4293      	cmp	r3, r2
 800d21a:	d003      	beq.n	800d224 <TIM_OC1_SetConfig+0x70>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	4a22      	ldr	r2, [pc, #136]	; (800d2a8 <TIM_OC1_SetConfig+0xf4>)
 800d220:	4293      	cmp	r3, r2
 800d222:	d10c      	bne.n	800d23e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	f023 0308 	bic.w	r3, r3, #8
 800d22a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	68db      	ldr	r3, [r3, #12]
 800d230:	697a      	ldr	r2, [r7, #20]
 800d232:	4313      	orrs	r3, r2
 800d234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	f023 0304 	bic.w	r3, r3, #4
 800d23c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	4a17      	ldr	r2, [pc, #92]	; (800d2a0 <TIM_OC1_SetConfig+0xec>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d007      	beq.n	800d256 <TIM_OC1_SetConfig+0xa2>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	4a16      	ldr	r2, [pc, #88]	; (800d2a4 <TIM_OC1_SetConfig+0xf0>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d003      	beq.n	800d256 <TIM_OC1_SetConfig+0xa2>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	4a15      	ldr	r2, [pc, #84]	; (800d2a8 <TIM_OC1_SetConfig+0xf4>)
 800d252:	4293      	cmp	r3, r2
 800d254:	d111      	bne.n	800d27a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d25c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	695b      	ldr	r3, [r3, #20]
 800d26a:	693a      	ldr	r2, [r7, #16]
 800d26c:	4313      	orrs	r3, r2
 800d26e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	699b      	ldr	r3, [r3, #24]
 800d274:	693a      	ldr	r2, [r7, #16]
 800d276:	4313      	orrs	r3, r2
 800d278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	693a      	ldr	r2, [r7, #16]
 800d27e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	68fa      	ldr	r2, [r7, #12]
 800d284:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	685a      	ldr	r2, [r3, #4]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	697a      	ldr	r2, [r7, #20]
 800d292:	621a      	str	r2, [r3, #32]
}
 800d294:	bf00      	nop
 800d296:	371c      	adds	r7, #28
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr
 800d2a0:	40012c00 	.word	0x40012c00
 800d2a4:	40014000 	.word	0x40014000
 800d2a8:	40014400 	.word	0x40014400

0800d2ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b087      	sub	sp, #28
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6a1b      	ldr	r3, [r3, #32]
 800d2ba:	f023 0210 	bic.w	r2, r3, #16
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6a1b      	ldr	r3, [r3, #32]
 800d2c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	699b      	ldr	r3, [r3, #24]
 800d2d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d2da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d2de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d2e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	021b      	lsls	r3, r3, #8
 800d2ee:	68fa      	ldr	r2, [r7, #12]
 800d2f0:	4313      	orrs	r3, r2
 800d2f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	f023 0320 	bic.w	r3, r3, #32
 800d2fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	689b      	ldr	r3, [r3, #8]
 800d300:	011b      	lsls	r3, r3, #4
 800d302:	697a      	ldr	r2, [r7, #20]
 800d304:	4313      	orrs	r3, r2
 800d306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	4a22      	ldr	r2, [pc, #136]	; (800d394 <TIM_OC2_SetConfig+0xe8>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d10d      	bne.n	800d32c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	68db      	ldr	r3, [r3, #12]
 800d31c:	011b      	lsls	r3, r3, #4
 800d31e:	697a      	ldr	r2, [r7, #20]
 800d320:	4313      	orrs	r3, r2
 800d322:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d32a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	4a19      	ldr	r2, [pc, #100]	; (800d394 <TIM_OC2_SetConfig+0xe8>)
 800d330:	4293      	cmp	r3, r2
 800d332:	d007      	beq.n	800d344 <TIM_OC2_SetConfig+0x98>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	4a18      	ldr	r2, [pc, #96]	; (800d398 <TIM_OC2_SetConfig+0xec>)
 800d338:	4293      	cmp	r3, r2
 800d33a:	d003      	beq.n	800d344 <TIM_OC2_SetConfig+0x98>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	4a17      	ldr	r2, [pc, #92]	; (800d39c <TIM_OC2_SetConfig+0xf0>)
 800d340:	4293      	cmp	r3, r2
 800d342:	d113      	bne.n	800d36c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d34a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d352:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	695b      	ldr	r3, [r3, #20]
 800d358:	009b      	lsls	r3, r3, #2
 800d35a:	693a      	ldr	r2, [r7, #16]
 800d35c:	4313      	orrs	r3, r2
 800d35e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	699b      	ldr	r3, [r3, #24]
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	693a      	ldr	r2, [r7, #16]
 800d368:	4313      	orrs	r3, r2
 800d36a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	693a      	ldr	r2, [r7, #16]
 800d370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	68fa      	ldr	r2, [r7, #12]
 800d376:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	685a      	ldr	r2, [r3, #4]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	697a      	ldr	r2, [r7, #20]
 800d384:	621a      	str	r2, [r3, #32]
}
 800d386:	bf00      	nop
 800d388:	371c      	adds	r7, #28
 800d38a:	46bd      	mov	sp, r7
 800d38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d390:	4770      	bx	lr
 800d392:	bf00      	nop
 800d394:	40012c00 	.word	0x40012c00
 800d398:	40014000 	.word	0x40014000
 800d39c:	40014400 	.word	0x40014400

0800d3a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b087      	sub	sp, #28
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6a1b      	ldr	r3, [r3, #32]
 800d3ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6a1b      	ldr	r3, [r3, #32]
 800d3ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	69db      	ldr	r3, [r3, #28]
 800d3c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d3ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	f023 0303 	bic.w	r3, r3, #3
 800d3da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	68fa      	ldr	r2, [r7, #12]
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d3ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	689b      	ldr	r3, [r3, #8]
 800d3f2:	021b      	lsls	r3, r3, #8
 800d3f4:	697a      	ldr	r2, [r7, #20]
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	4a21      	ldr	r2, [pc, #132]	; (800d484 <TIM_OC3_SetConfig+0xe4>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d10d      	bne.n	800d41e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d408:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	68db      	ldr	r3, [r3, #12]
 800d40e:	021b      	lsls	r3, r3, #8
 800d410:	697a      	ldr	r2, [r7, #20]
 800d412:	4313      	orrs	r3, r2
 800d414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d41c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	4a18      	ldr	r2, [pc, #96]	; (800d484 <TIM_OC3_SetConfig+0xe4>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d007      	beq.n	800d436 <TIM_OC3_SetConfig+0x96>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	4a17      	ldr	r2, [pc, #92]	; (800d488 <TIM_OC3_SetConfig+0xe8>)
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d003      	beq.n	800d436 <TIM_OC3_SetConfig+0x96>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	4a16      	ldr	r2, [pc, #88]	; (800d48c <TIM_OC3_SetConfig+0xec>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d113      	bne.n	800d45e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d43c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	695b      	ldr	r3, [r3, #20]
 800d44a:	011b      	lsls	r3, r3, #4
 800d44c:	693a      	ldr	r2, [r7, #16]
 800d44e:	4313      	orrs	r3, r2
 800d450:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	699b      	ldr	r3, [r3, #24]
 800d456:	011b      	lsls	r3, r3, #4
 800d458:	693a      	ldr	r2, [r7, #16]
 800d45a:	4313      	orrs	r3, r2
 800d45c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	693a      	ldr	r2, [r7, #16]
 800d462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	68fa      	ldr	r2, [r7, #12]
 800d468:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	685a      	ldr	r2, [r3, #4]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	697a      	ldr	r2, [r7, #20]
 800d476:	621a      	str	r2, [r3, #32]
}
 800d478:	bf00      	nop
 800d47a:	371c      	adds	r7, #28
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr
 800d484:	40012c00 	.word	0x40012c00
 800d488:	40014000 	.word	0x40014000
 800d48c:	40014400 	.word	0x40014400

0800d490 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d490:	b480      	push	{r7}
 800d492:	b087      	sub	sp, #28
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6a1b      	ldr	r3, [r3, #32]
 800d49e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6a1b      	ldr	r3, [r3, #32]
 800d4aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	69db      	ldr	r3, [r3, #28]
 800d4b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d4be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	021b      	lsls	r3, r3, #8
 800d4d2:	68fa      	ldr	r2, [r7, #12]
 800d4d4:	4313      	orrs	r3, r2
 800d4d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d4de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	689b      	ldr	r3, [r3, #8]
 800d4e4:	031b      	lsls	r3, r3, #12
 800d4e6:	693a      	ldr	r2, [r7, #16]
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	4a14      	ldr	r2, [pc, #80]	; (800d540 <TIM_OC4_SetConfig+0xb0>)
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	d007      	beq.n	800d504 <TIM_OC4_SetConfig+0x74>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	4a13      	ldr	r2, [pc, #76]	; (800d544 <TIM_OC4_SetConfig+0xb4>)
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d003      	beq.n	800d504 <TIM_OC4_SetConfig+0x74>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	4a12      	ldr	r2, [pc, #72]	; (800d548 <TIM_OC4_SetConfig+0xb8>)
 800d500:	4293      	cmp	r3, r2
 800d502:	d109      	bne.n	800d518 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d50a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	695b      	ldr	r3, [r3, #20]
 800d510:	019b      	lsls	r3, r3, #6
 800d512:	697a      	ldr	r2, [r7, #20]
 800d514:	4313      	orrs	r3, r2
 800d516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	697a      	ldr	r2, [r7, #20]
 800d51c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	68fa      	ldr	r2, [r7, #12]
 800d522:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	685a      	ldr	r2, [r3, #4]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	693a      	ldr	r2, [r7, #16]
 800d530:	621a      	str	r2, [r3, #32]
}
 800d532:	bf00      	nop
 800d534:	371c      	adds	r7, #28
 800d536:	46bd      	mov	sp, r7
 800d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53c:	4770      	bx	lr
 800d53e:	bf00      	nop
 800d540:	40012c00 	.word	0x40012c00
 800d544:	40014000 	.word	0x40014000
 800d548:	40014400 	.word	0x40014400

0800d54c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d54c:	b480      	push	{r7}
 800d54e:	b087      	sub	sp, #28
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6a1b      	ldr	r3, [r3, #32]
 800d55a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6a1b      	ldr	r3, [r3, #32]
 800d566:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d57a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d57e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	68fa      	ldr	r2, [r7, #12]
 800d586:	4313      	orrs	r3, r2
 800d588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d590:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	689b      	ldr	r3, [r3, #8]
 800d596:	041b      	lsls	r3, r3, #16
 800d598:	693a      	ldr	r2, [r7, #16]
 800d59a:	4313      	orrs	r3, r2
 800d59c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	4a13      	ldr	r2, [pc, #76]	; (800d5f0 <TIM_OC5_SetConfig+0xa4>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d007      	beq.n	800d5b6 <TIM_OC5_SetConfig+0x6a>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	4a12      	ldr	r2, [pc, #72]	; (800d5f4 <TIM_OC5_SetConfig+0xa8>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d003      	beq.n	800d5b6 <TIM_OC5_SetConfig+0x6a>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	4a11      	ldr	r2, [pc, #68]	; (800d5f8 <TIM_OC5_SetConfig+0xac>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d109      	bne.n	800d5ca <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d5bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	695b      	ldr	r3, [r3, #20]
 800d5c2:	021b      	lsls	r3, r3, #8
 800d5c4:	697a      	ldr	r2, [r7, #20]
 800d5c6:	4313      	orrs	r3, r2
 800d5c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	697a      	ldr	r2, [r7, #20]
 800d5ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	68fa      	ldr	r2, [r7, #12]
 800d5d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	685a      	ldr	r2, [r3, #4]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	693a      	ldr	r2, [r7, #16]
 800d5e2:	621a      	str	r2, [r3, #32]
}
 800d5e4:	bf00      	nop
 800d5e6:	371c      	adds	r7, #28
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr
 800d5f0:	40012c00 	.word	0x40012c00
 800d5f4:	40014000 	.word	0x40014000
 800d5f8:	40014400 	.word	0x40014400

0800d5fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b087      	sub	sp, #28
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6a1b      	ldr	r3, [r3, #32]
 800d60a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6a1b      	ldr	r3, [r3, #32]
 800d616:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	685b      	ldr	r3, [r3, #4]
 800d61c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d62a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d62e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	021b      	lsls	r3, r3, #8
 800d636:	68fa      	ldr	r2, [r7, #12]
 800d638:	4313      	orrs	r3, r2
 800d63a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d642:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	689b      	ldr	r3, [r3, #8]
 800d648:	051b      	lsls	r3, r3, #20
 800d64a:	693a      	ldr	r2, [r7, #16]
 800d64c:	4313      	orrs	r3, r2
 800d64e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	4a14      	ldr	r2, [pc, #80]	; (800d6a4 <TIM_OC6_SetConfig+0xa8>)
 800d654:	4293      	cmp	r3, r2
 800d656:	d007      	beq.n	800d668 <TIM_OC6_SetConfig+0x6c>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	4a13      	ldr	r2, [pc, #76]	; (800d6a8 <TIM_OC6_SetConfig+0xac>)
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d003      	beq.n	800d668 <TIM_OC6_SetConfig+0x6c>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	4a12      	ldr	r2, [pc, #72]	; (800d6ac <TIM_OC6_SetConfig+0xb0>)
 800d664:	4293      	cmp	r3, r2
 800d666:	d109      	bne.n	800d67c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d66e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	695b      	ldr	r3, [r3, #20]
 800d674:	029b      	lsls	r3, r3, #10
 800d676:	697a      	ldr	r2, [r7, #20]
 800d678:	4313      	orrs	r3, r2
 800d67a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	697a      	ldr	r2, [r7, #20]
 800d680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	68fa      	ldr	r2, [r7, #12]
 800d686:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	685a      	ldr	r2, [r3, #4]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	693a      	ldr	r2, [r7, #16]
 800d694:	621a      	str	r2, [r3, #32]
}
 800d696:	bf00      	nop
 800d698:	371c      	adds	r7, #28
 800d69a:	46bd      	mov	sp, r7
 800d69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a0:	4770      	bx	lr
 800d6a2:	bf00      	nop
 800d6a4:	40012c00 	.word	0x40012c00
 800d6a8:	40014000 	.word	0x40014000
 800d6ac:	40014400 	.word	0x40014400

0800d6b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b087      	sub	sp, #28
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	60f8      	str	r0, [r7, #12]
 800d6b8:	60b9      	str	r1, [r7, #8]
 800d6ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	f003 031f 	and.w	r3, r3, #31
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d6c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	6a1a      	ldr	r2, [r3, #32]
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	43db      	mvns	r3, r3
 800d6d2:	401a      	ands	r2, r3
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	6a1a      	ldr	r2, [r3, #32]
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	f003 031f 	and.w	r3, r3, #31
 800d6e2:	6879      	ldr	r1, [r7, #4]
 800d6e4:	fa01 f303 	lsl.w	r3, r1, r3
 800d6e8:	431a      	orrs	r2, r3
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	621a      	str	r2, [r3, #32]
}
 800d6ee:	bf00      	nop
 800d6f0:	371c      	adds	r7, #28
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f8:	4770      	bx	lr
	...

0800d6fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b085      	sub	sp, #20
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	d101      	bne.n	800d714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d710:	2302      	movs	r3, #2
 800d712:	e04f      	b.n	800d7b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2201      	movs	r2, #1
 800d718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2202      	movs	r2, #2
 800d720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	689b      	ldr	r3, [r3, #8]
 800d732:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4a21      	ldr	r2, [pc, #132]	; (800d7c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d108      	bne.n	800d750 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d744:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	68fa      	ldr	r2, [r7, #12]
 800d74c:	4313      	orrs	r3, r2
 800d74e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d756:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	68fa      	ldr	r2, [r7, #12]
 800d75e:	4313      	orrs	r3, r2
 800d760:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	68fa      	ldr	r2, [r7, #12]
 800d768:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	4a14      	ldr	r2, [pc, #80]	; (800d7c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d770:	4293      	cmp	r3, r2
 800d772:	d009      	beq.n	800d788 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d77c:	d004      	beq.n	800d788 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	4a10      	ldr	r2, [pc, #64]	; (800d7c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d784:	4293      	cmp	r3, r2
 800d786:	d10c      	bne.n	800d7a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d78e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	689b      	ldr	r3, [r3, #8]
 800d794:	68ba      	ldr	r2, [r7, #8]
 800d796:	4313      	orrs	r3, r2
 800d798:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	68ba      	ldr	r2, [r7, #8]
 800d7a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d7b2:	2300      	movs	r3, #0
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3714      	adds	r7, #20
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr
 800d7c0:	40012c00 	.word	0x40012c00
 800d7c4:	40014000 	.word	0x40014000

0800d7c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b085      	sub	sp, #20
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	d101      	bne.n	800d7e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d7e0:	2302      	movs	r3, #2
 800d7e2:	e060      	b.n	800d8a6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2201      	movs	r2, #1
 800d7e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	68db      	ldr	r3, [r3, #12]
 800d7f6:	4313      	orrs	r3, r2
 800d7f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	689b      	ldr	r3, [r3, #8]
 800d804:	4313      	orrs	r3, r2
 800d806:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	4313      	orrs	r3, r2
 800d814:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	4313      	orrs	r3, r2
 800d822:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	691b      	ldr	r3, [r3, #16]
 800d82e:	4313      	orrs	r3, r2
 800d830:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	695b      	ldr	r3, [r3, #20]
 800d83c:	4313      	orrs	r3, r2
 800d83e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d84a:	4313      	orrs	r3, r2
 800d84c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	699b      	ldr	r3, [r3, #24]
 800d858:	041b      	lsls	r3, r3, #16
 800d85a:	4313      	orrs	r3, r2
 800d85c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	4a14      	ldr	r2, [pc, #80]	; (800d8b4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800d864:	4293      	cmp	r3, r2
 800d866:	d115      	bne.n	800d894 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d872:	051b      	lsls	r3, r3, #20
 800d874:	4313      	orrs	r3, r2
 800d876:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	69db      	ldr	r3, [r3, #28]
 800d882:	4313      	orrs	r3, r2
 800d884:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	6a1b      	ldr	r3, [r3, #32]
 800d890:	4313      	orrs	r3, r2
 800d892:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	68fa      	ldr	r2, [r7, #12]
 800d89a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d8a4:	2300      	movs	r3, #0
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3714      	adds	r7, #20
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b0:	4770      	bx	lr
 800d8b2:	bf00      	nop
 800d8b4:	40012c00 	.word	0x40012c00

0800d8b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b083      	sub	sp, #12
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d8c0:	bf00      	nop
 800d8c2:	370c      	adds	r7, #12
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ca:	4770      	bx	lr

0800d8cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b083      	sub	sp, #12
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d8d4:	bf00      	nop
 800d8d6:	370c      	adds	r7, #12
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr

0800d8e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b083      	sub	sp, #12
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d8e8:	bf00      	nop
 800d8ea:	370c      	adds	r7, #12
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f2:	4770      	bx	lr

0800d8f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b082      	sub	sp, #8
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d101      	bne.n	800d906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d902:	2301      	movs	r3, #1
 800d904:	e040      	b.n	800d988 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d106      	bne.n	800d91c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2200      	movs	r2, #0
 800d912:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f7fb f884 	bl	8008a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2224      	movs	r2, #36	; 0x24
 800d920:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	681a      	ldr	r2, [r3, #0]
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f022 0201 	bic.w	r2, r2, #1
 800d930:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f000 f8c0 	bl	800dab8 <UART_SetConfig>
 800d938:	4603      	mov	r3, r0
 800d93a:	2b01      	cmp	r3, #1
 800d93c:	d101      	bne.n	800d942 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d93e:	2301      	movs	r3, #1
 800d940:	e022      	b.n	800d988 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d946:	2b00      	cmp	r3, #0
 800d948:	d002      	beq.n	800d950 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f000 fae2 	bl	800df14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	685a      	ldr	r2, [r3, #4]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d95e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	689a      	ldr	r2, [r3, #8]
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d96e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	681a      	ldr	r2, [r3, #0]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f042 0201 	orr.w	r2, r2, #1
 800d97e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f000 fb69 	bl	800e058 <UART_CheckIdleState>
 800d986:	4603      	mov	r3, r0
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3708      	adds	r7, #8
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b08a      	sub	sp, #40	; 0x28
 800d994:	af02      	add	r7, sp, #8
 800d996:	60f8      	str	r0, [r7, #12]
 800d998:	60b9      	str	r1, [r7, #8]
 800d99a:	603b      	str	r3, [r7, #0]
 800d99c:	4613      	mov	r3, r2
 800d99e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9a4:	2b20      	cmp	r3, #32
 800d9a6:	f040 8082 	bne.w	800daae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d002      	beq.n	800d9b6 <HAL_UART_Transmit+0x26>
 800d9b0:	88fb      	ldrh	r3, [r7, #6]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d101      	bne.n	800d9ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	e07a      	b.n	800dab0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d101      	bne.n	800d9c8 <HAL_UART_Transmit+0x38>
 800d9c4:	2302      	movs	r3, #2
 800d9c6:	e073      	b.n	800dab0 <HAL_UART_Transmit+0x120>
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2221      	movs	r2, #33	; 0x21
 800d9dc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d9de:	f7fb f91d 	bl	8008c1c <HAL_GetTick>
 800d9e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	88fa      	ldrh	r2, [r7, #6]
 800d9e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	88fa      	ldrh	r2, [r7, #6]
 800d9f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	689b      	ldr	r3, [r3, #8]
 800d9f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9fc:	d108      	bne.n	800da10 <HAL_UART_Transmit+0x80>
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	691b      	ldr	r3, [r3, #16]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d104      	bne.n	800da10 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800da06:	2300      	movs	r3, #0
 800da08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	61bb      	str	r3, [r7, #24]
 800da0e:	e003      	b.n	800da18 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800da14:	2300      	movs	r3, #0
 800da16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	2200      	movs	r2, #0
 800da1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800da20:	e02d      	b.n	800da7e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	9300      	str	r3, [sp, #0]
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	2200      	movs	r2, #0
 800da2a:	2180      	movs	r1, #128	; 0x80
 800da2c:	68f8      	ldr	r0, [r7, #12]
 800da2e:	f000 fb5c 	bl	800e0ea <UART_WaitOnFlagUntilTimeout>
 800da32:	4603      	mov	r3, r0
 800da34:	2b00      	cmp	r3, #0
 800da36:	d001      	beq.n	800da3c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800da38:	2303      	movs	r3, #3
 800da3a:	e039      	b.n	800dab0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800da3c:	69fb      	ldr	r3, [r7, #28]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d10b      	bne.n	800da5a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800da42:	69bb      	ldr	r3, [r7, #24]
 800da44:	881a      	ldrh	r2, [r3, #0]
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800da4e:	b292      	uxth	r2, r2
 800da50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800da52:	69bb      	ldr	r3, [r7, #24]
 800da54:	3302      	adds	r3, #2
 800da56:	61bb      	str	r3, [r7, #24]
 800da58:	e008      	b.n	800da6c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800da5a:	69fb      	ldr	r3, [r7, #28]
 800da5c:	781a      	ldrb	r2, [r3, #0]
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	b292      	uxth	r2, r2
 800da64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800da66:	69fb      	ldr	r3, [r7, #28]
 800da68:	3301      	adds	r3, #1
 800da6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800da72:	b29b      	uxth	r3, r3
 800da74:	3b01      	subs	r3, #1
 800da76:	b29a      	uxth	r2, r3
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800da84:	b29b      	uxth	r3, r3
 800da86:	2b00      	cmp	r3, #0
 800da88:	d1cb      	bne.n	800da22 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	9300      	str	r3, [sp, #0]
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	2200      	movs	r2, #0
 800da92:	2140      	movs	r1, #64	; 0x40
 800da94:	68f8      	ldr	r0, [r7, #12]
 800da96:	f000 fb28 	bl	800e0ea <UART_WaitOnFlagUntilTimeout>
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d001      	beq.n	800daa4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800daa0:	2303      	movs	r3, #3
 800daa2:	e005      	b.n	800dab0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2220      	movs	r2, #32
 800daa8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800daaa:	2300      	movs	r3, #0
 800daac:	e000      	b.n	800dab0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800daae:	2302      	movs	r3, #2
  }
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3720      	adds	r7, #32
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dabc:	b08a      	sub	sp, #40	; 0x28
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dac2:	2300      	movs	r3, #0
 800dac4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	689a      	ldr	r2, [r3, #8]
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	691b      	ldr	r3, [r3, #16]
 800dad0:	431a      	orrs	r2, r3
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	695b      	ldr	r3, [r3, #20]
 800dad6:	431a      	orrs	r2, r3
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	69db      	ldr	r3, [r3, #28]
 800dadc:	4313      	orrs	r3, r2
 800dade:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	681a      	ldr	r2, [r3, #0]
 800dae6:	4bb4      	ldr	r3, [pc, #720]	; (800ddb8 <UART_SetConfig+0x300>)
 800dae8:	4013      	ands	r3, r2
 800daea:	68fa      	ldr	r2, [r7, #12]
 800daec:	6812      	ldr	r2, [r2, #0]
 800daee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800daf0:	430b      	orrs	r3, r1
 800daf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	68da      	ldr	r2, [r3, #12]
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	430a      	orrs	r2, r1
 800db08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	699b      	ldr	r3, [r3, #24]
 800db0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	4aa9      	ldr	r2, [pc, #676]	; (800ddbc <UART_SetConfig+0x304>)
 800db16:	4293      	cmp	r3, r2
 800db18:	d004      	beq.n	800db24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	6a1b      	ldr	r3, [r3, #32]
 800db1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db20:	4313      	orrs	r3, r2
 800db22:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	689b      	ldr	r3, [r3, #8]
 800db2a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db34:	430a      	orrs	r2, r1
 800db36:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	4aa0      	ldr	r2, [pc, #640]	; (800ddc0 <UART_SetConfig+0x308>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	d126      	bne.n	800db90 <UART_SetConfig+0xd8>
 800db42:	4ba0      	ldr	r3, [pc, #640]	; (800ddc4 <UART_SetConfig+0x30c>)
 800db44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db48:	f003 0303 	and.w	r3, r3, #3
 800db4c:	2b03      	cmp	r3, #3
 800db4e:	d81b      	bhi.n	800db88 <UART_SetConfig+0xd0>
 800db50:	a201      	add	r2, pc, #4	; (adr r2, 800db58 <UART_SetConfig+0xa0>)
 800db52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db56:	bf00      	nop
 800db58:	0800db69 	.word	0x0800db69
 800db5c:	0800db79 	.word	0x0800db79
 800db60:	0800db71 	.word	0x0800db71
 800db64:	0800db81 	.word	0x0800db81
 800db68:	2301      	movs	r3, #1
 800db6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db6e:	e080      	b.n	800dc72 <UART_SetConfig+0x1ba>
 800db70:	2302      	movs	r3, #2
 800db72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db76:	e07c      	b.n	800dc72 <UART_SetConfig+0x1ba>
 800db78:	2304      	movs	r3, #4
 800db7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db7e:	e078      	b.n	800dc72 <UART_SetConfig+0x1ba>
 800db80:	2308      	movs	r3, #8
 800db82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db86:	e074      	b.n	800dc72 <UART_SetConfig+0x1ba>
 800db88:	2310      	movs	r3, #16
 800db8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db8e:	e070      	b.n	800dc72 <UART_SetConfig+0x1ba>
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4a8c      	ldr	r2, [pc, #560]	; (800ddc8 <UART_SetConfig+0x310>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d138      	bne.n	800dc0c <UART_SetConfig+0x154>
 800db9a:	4b8a      	ldr	r3, [pc, #552]	; (800ddc4 <UART_SetConfig+0x30c>)
 800db9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dba0:	f003 030c 	and.w	r3, r3, #12
 800dba4:	2b0c      	cmp	r3, #12
 800dba6:	d82d      	bhi.n	800dc04 <UART_SetConfig+0x14c>
 800dba8:	a201      	add	r2, pc, #4	; (adr r2, 800dbb0 <UART_SetConfig+0xf8>)
 800dbaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbae:	bf00      	nop
 800dbb0:	0800dbe5 	.word	0x0800dbe5
 800dbb4:	0800dc05 	.word	0x0800dc05
 800dbb8:	0800dc05 	.word	0x0800dc05
 800dbbc:	0800dc05 	.word	0x0800dc05
 800dbc0:	0800dbf5 	.word	0x0800dbf5
 800dbc4:	0800dc05 	.word	0x0800dc05
 800dbc8:	0800dc05 	.word	0x0800dc05
 800dbcc:	0800dc05 	.word	0x0800dc05
 800dbd0:	0800dbed 	.word	0x0800dbed
 800dbd4:	0800dc05 	.word	0x0800dc05
 800dbd8:	0800dc05 	.word	0x0800dc05
 800dbdc:	0800dc05 	.word	0x0800dc05
 800dbe0:	0800dbfd 	.word	0x0800dbfd
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dbea:	e042      	b.n	800dc72 <UART_SetConfig+0x1ba>
 800dbec:	2302      	movs	r3, #2
 800dbee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dbf2:	e03e      	b.n	800dc72 <UART_SetConfig+0x1ba>
 800dbf4:	2304      	movs	r3, #4
 800dbf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dbfa:	e03a      	b.n	800dc72 <UART_SetConfig+0x1ba>
 800dbfc:	2308      	movs	r3, #8
 800dbfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc02:	e036      	b.n	800dc72 <UART_SetConfig+0x1ba>
 800dc04:	2310      	movs	r3, #16
 800dc06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc0a:	e032      	b.n	800dc72 <UART_SetConfig+0x1ba>
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4a6a      	ldr	r2, [pc, #424]	; (800ddbc <UART_SetConfig+0x304>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d12a      	bne.n	800dc6c <UART_SetConfig+0x1b4>
 800dc16:	4b6b      	ldr	r3, [pc, #428]	; (800ddc4 <UART_SetConfig+0x30c>)
 800dc18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800dc20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dc24:	d01a      	beq.n	800dc5c <UART_SetConfig+0x1a4>
 800dc26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dc2a:	d81b      	bhi.n	800dc64 <UART_SetConfig+0x1ac>
 800dc2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc30:	d00c      	beq.n	800dc4c <UART_SetConfig+0x194>
 800dc32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc36:	d815      	bhi.n	800dc64 <UART_SetConfig+0x1ac>
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d003      	beq.n	800dc44 <UART_SetConfig+0x18c>
 800dc3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc40:	d008      	beq.n	800dc54 <UART_SetConfig+0x19c>
 800dc42:	e00f      	b.n	800dc64 <UART_SetConfig+0x1ac>
 800dc44:	2300      	movs	r3, #0
 800dc46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc4a:	e012      	b.n	800dc72 <UART_SetConfig+0x1ba>
 800dc4c:	2302      	movs	r3, #2
 800dc4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc52:	e00e      	b.n	800dc72 <UART_SetConfig+0x1ba>
 800dc54:	2304      	movs	r3, #4
 800dc56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc5a:	e00a      	b.n	800dc72 <UART_SetConfig+0x1ba>
 800dc5c:	2308      	movs	r3, #8
 800dc5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc62:	e006      	b.n	800dc72 <UART_SetConfig+0x1ba>
 800dc64:	2310      	movs	r3, #16
 800dc66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc6a:	e002      	b.n	800dc72 <UART_SetConfig+0x1ba>
 800dc6c:	2310      	movs	r3, #16
 800dc6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	4a51      	ldr	r2, [pc, #324]	; (800ddbc <UART_SetConfig+0x304>)
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d17a      	bne.n	800dd72 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dc7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc80:	2b08      	cmp	r3, #8
 800dc82:	d824      	bhi.n	800dcce <UART_SetConfig+0x216>
 800dc84:	a201      	add	r2, pc, #4	; (adr r2, 800dc8c <UART_SetConfig+0x1d4>)
 800dc86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc8a:	bf00      	nop
 800dc8c:	0800dcb1 	.word	0x0800dcb1
 800dc90:	0800dccf 	.word	0x0800dccf
 800dc94:	0800dcb9 	.word	0x0800dcb9
 800dc98:	0800dccf 	.word	0x0800dccf
 800dc9c:	0800dcbf 	.word	0x0800dcbf
 800dca0:	0800dccf 	.word	0x0800dccf
 800dca4:	0800dccf 	.word	0x0800dccf
 800dca8:	0800dccf 	.word	0x0800dccf
 800dcac:	0800dcc7 	.word	0x0800dcc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dcb0:	f7fe f9dc 	bl	800c06c <HAL_RCC_GetPCLK1Freq>
 800dcb4:	61f8      	str	r0, [r7, #28]
        break;
 800dcb6:	e010      	b.n	800dcda <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dcb8:	4b44      	ldr	r3, [pc, #272]	; (800ddcc <UART_SetConfig+0x314>)
 800dcba:	61fb      	str	r3, [r7, #28]
        break;
 800dcbc:	e00d      	b.n	800dcda <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dcbe:	f7fe f93d 	bl	800bf3c <HAL_RCC_GetSysClockFreq>
 800dcc2:	61f8      	str	r0, [r7, #28]
        break;
 800dcc4:	e009      	b.n	800dcda <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dcc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dcca:	61fb      	str	r3, [r7, #28]
        break;
 800dccc:	e005      	b.n	800dcda <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800dcd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dcda:	69fb      	ldr	r3, [r7, #28]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	f000 8109 	beq.w	800def4 <UART_SetConfig+0x43c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	685a      	ldr	r2, [r3, #4]
 800dce6:	4613      	mov	r3, r2
 800dce8:	005b      	lsls	r3, r3, #1
 800dcea:	4413      	add	r3, r2
 800dcec:	69fa      	ldr	r2, [r7, #28]
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d305      	bcc.n	800dcfe <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	685b      	ldr	r3, [r3, #4]
 800dcf6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800dcf8:	69fa      	ldr	r2, [r7, #28]
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d903      	bls.n	800dd06 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800dcfe:	2301      	movs	r3, #1
 800dd00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800dd04:	e0f6      	b.n	800def4 <UART_SetConfig+0x43c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800dd06:	69fb      	ldr	r3, [r7, #28]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	461c      	mov	r4, r3
 800dd0c:	4615      	mov	r5, r2
 800dd0e:	f04f 0200 	mov.w	r2, #0
 800dd12:	f04f 0300 	mov.w	r3, #0
 800dd16:	022b      	lsls	r3, r5, #8
 800dd18:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800dd1c:	0222      	lsls	r2, r4, #8
 800dd1e:	68f9      	ldr	r1, [r7, #12]
 800dd20:	6849      	ldr	r1, [r1, #4]
 800dd22:	0849      	lsrs	r1, r1, #1
 800dd24:	2000      	movs	r0, #0
 800dd26:	4688      	mov	r8, r1
 800dd28:	4681      	mov	r9, r0
 800dd2a:	eb12 0a08 	adds.w	sl, r2, r8
 800dd2e:	eb43 0b09 	adc.w	fp, r3, r9
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	685b      	ldr	r3, [r3, #4]
 800dd36:	2200      	movs	r2, #0
 800dd38:	603b      	str	r3, [r7, #0]
 800dd3a:	607a      	str	r2, [r7, #4]
 800dd3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd40:	4650      	mov	r0, sl
 800dd42:	4659      	mov	r1, fp
 800dd44:	f7f2 ffa0 	bl	8000c88 <__aeabi_uldivmod>
 800dd48:	4602      	mov	r2, r0
 800dd4a:	460b      	mov	r3, r1
 800dd4c:	4613      	mov	r3, r2
 800dd4e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dd50:	69bb      	ldr	r3, [r7, #24]
 800dd52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dd56:	d308      	bcc.n	800dd6a <UART_SetConfig+0x2b2>
 800dd58:	69bb      	ldr	r3, [r7, #24]
 800dd5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd5e:	d204      	bcs.n	800dd6a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	69ba      	ldr	r2, [r7, #24]
 800dd66:	60da      	str	r2, [r3, #12]
 800dd68:	e0c4      	b.n	800def4 <UART_SetConfig+0x43c>
        }
        else
        {
          ret = HAL_ERROR;
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800dd70:	e0c0      	b.n	800def4 <UART_SetConfig+0x43c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	69db      	ldr	r3, [r3, #28]
 800dd76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd7a:	d16b      	bne.n	800de54 <UART_SetConfig+0x39c>
  {
    switch (clocksource)
 800dd7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dd80:	2b08      	cmp	r3, #8
 800dd82:	d834      	bhi.n	800ddee <UART_SetConfig+0x336>
 800dd84:	a201      	add	r2, pc, #4	; (adr r2, 800dd8c <UART_SetConfig+0x2d4>)
 800dd86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd8a:	bf00      	nop
 800dd8c:	0800ddb1 	.word	0x0800ddb1
 800dd90:	0800ddd1 	.word	0x0800ddd1
 800dd94:	0800ddd9 	.word	0x0800ddd9
 800dd98:	0800ddef 	.word	0x0800ddef
 800dd9c:	0800dddf 	.word	0x0800dddf
 800dda0:	0800ddef 	.word	0x0800ddef
 800dda4:	0800ddef 	.word	0x0800ddef
 800dda8:	0800ddef 	.word	0x0800ddef
 800ddac:	0800dde7 	.word	0x0800dde7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ddb0:	f7fe f95c 	bl	800c06c <HAL_RCC_GetPCLK1Freq>
 800ddb4:	61f8      	str	r0, [r7, #28]
        break;
 800ddb6:	e020      	b.n	800ddfa <UART_SetConfig+0x342>
 800ddb8:	efff69f3 	.word	0xefff69f3
 800ddbc:	40008000 	.word	0x40008000
 800ddc0:	40013800 	.word	0x40013800
 800ddc4:	40021000 	.word	0x40021000
 800ddc8:	40004400 	.word	0x40004400
 800ddcc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ddd0:	f7fe f962 	bl	800c098 <HAL_RCC_GetPCLK2Freq>
 800ddd4:	61f8      	str	r0, [r7, #28]
        break;
 800ddd6:	e010      	b.n	800ddfa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ddd8:	4b4d      	ldr	r3, [pc, #308]	; (800df10 <UART_SetConfig+0x458>)
 800ddda:	61fb      	str	r3, [r7, #28]
        break;
 800dddc:	e00d      	b.n	800ddfa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ddde:	f7fe f8ad 	bl	800bf3c <HAL_RCC_GetSysClockFreq>
 800dde2:	61f8      	str	r0, [r7, #28]
        break;
 800dde4:	e009      	b.n	800ddfa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dde6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ddea:	61fb      	str	r3, [r7, #28]
        break;
 800ddec:	e005      	b.n	800ddfa <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ddf8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ddfa:	69fb      	ldr	r3, [r7, #28]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d079      	beq.n	800def4 <UART_SetConfig+0x43c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	005a      	lsls	r2, r3, #1
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	685b      	ldr	r3, [r3, #4]
 800de08:	085b      	lsrs	r3, r3, #1
 800de0a:	441a      	add	r2, r3
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	685b      	ldr	r3, [r3, #4]
 800de10:	fbb2 f3f3 	udiv	r3, r2, r3
 800de14:	b29b      	uxth	r3, r3
 800de16:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de18:	69bb      	ldr	r3, [r7, #24]
 800de1a:	2b0f      	cmp	r3, #15
 800de1c:	d916      	bls.n	800de4c <UART_SetConfig+0x394>
 800de1e:	69bb      	ldr	r3, [r7, #24]
 800de20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de24:	d212      	bcs.n	800de4c <UART_SetConfig+0x394>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800de26:	69bb      	ldr	r3, [r7, #24]
 800de28:	b29b      	uxth	r3, r3
 800de2a:	f023 030f 	bic.w	r3, r3, #15
 800de2e:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800de30:	69bb      	ldr	r3, [r7, #24]
 800de32:	085b      	lsrs	r3, r3, #1
 800de34:	b29b      	uxth	r3, r3
 800de36:	f003 0307 	and.w	r3, r3, #7
 800de3a:	b29a      	uxth	r2, r3
 800de3c:	8afb      	ldrh	r3, [r7, #22]
 800de3e:	4313      	orrs	r3, r2
 800de40:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	8afa      	ldrh	r2, [r7, #22]
 800de48:	60da      	str	r2, [r3, #12]
 800de4a:	e053      	b.n	800def4 <UART_SetConfig+0x43c>
      }
      else
      {
        ret = HAL_ERROR;
 800de4c:	2301      	movs	r3, #1
 800de4e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800de52:	e04f      	b.n	800def4 <UART_SetConfig+0x43c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800de54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800de58:	2b08      	cmp	r3, #8
 800de5a:	d828      	bhi.n	800deae <UART_SetConfig+0x3f6>
 800de5c:	a201      	add	r2, pc, #4	; (adr r2, 800de64 <UART_SetConfig+0x3ac>)
 800de5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de62:	bf00      	nop
 800de64:	0800de89 	.word	0x0800de89
 800de68:	0800de91 	.word	0x0800de91
 800de6c:	0800de99 	.word	0x0800de99
 800de70:	0800deaf 	.word	0x0800deaf
 800de74:	0800de9f 	.word	0x0800de9f
 800de78:	0800deaf 	.word	0x0800deaf
 800de7c:	0800deaf 	.word	0x0800deaf
 800de80:	0800deaf 	.word	0x0800deaf
 800de84:	0800dea7 	.word	0x0800dea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800de88:	f7fe f8f0 	bl	800c06c <HAL_RCC_GetPCLK1Freq>
 800de8c:	61f8      	str	r0, [r7, #28]
        break;
 800de8e:	e014      	b.n	800deba <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800de90:	f7fe f902 	bl	800c098 <HAL_RCC_GetPCLK2Freq>
 800de94:	61f8      	str	r0, [r7, #28]
        break;
 800de96:	e010      	b.n	800deba <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800de98:	4b1d      	ldr	r3, [pc, #116]	; (800df10 <UART_SetConfig+0x458>)
 800de9a:	61fb      	str	r3, [r7, #28]
        break;
 800de9c:	e00d      	b.n	800deba <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800de9e:	f7fe f84d 	bl	800bf3c <HAL_RCC_GetSysClockFreq>
 800dea2:	61f8      	str	r0, [r7, #28]
        break;
 800dea4:	e009      	b.n	800deba <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800deaa:	61fb      	str	r3, [r7, #28]
        break;
 800deac:	e005      	b.n	800deba <UART_SetConfig+0x402>
      default:
        pclk = 0U;
 800deae:	2300      	movs	r3, #0
 800deb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800deb2:	2301      	movs	r3, #1
 800deb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800deb8:	bf00      	nop
    }

    if (pclk != 0U)
 800deba:	69fb      	ldr	r3, [r7, #28]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d019      	beq.n	800def4 <UART_SetConfig+0x43c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	685b      	ldr	r3, [r3, #4]
 800dec4:	085a      	lsrs	r2, r3, #1
 800dec6:	69fb      	ldr	r3, [r7, #28]
 800dec8:	441a      	add	r2, r3
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	fbb2 f3f3 	udiv	r3, r2, r3
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ded6:	69bb      	ldr	r3, [r7, #24]
 800ded8:	2b0f      	cmp	r3, #15
 800deda:	d908      	bls.n	800deee <UART_SetConfig+0x436>
 800dedc:	69bb      	ldr	r3, [r7, #24]
 800dede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dee2:	d204      	bcs.n	800deee <UART_SetConfig+0x436>
      {
        huart->Instance->BRR = usartdiv;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	69ba      	ldr	r2, [r7, #24]
 800deea:	60da      	str	r2, [r3, #12]
 800deec:	e002      	b.n	800def4 <UART_SetConfig+0x43c>
      }
      else
      {
        ret = HAL_ERROR;
 800deee:	2301      	movs	r3, #1
 800def0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2200      	movs	r2, #0
 800def8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	2200      	movs	r2, #0
 800defe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800df00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800df04:	4618      	mov	r0, r3
 800df06:	3728      	adds	r7, #40	; 0x28
 800df08:	46bd      	mov	sp, r7
 800df0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800df0e:	bf00      	nop
 800df10:	00f42400 	.word	0x00f42400

0800df14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800df14:	b480      	push	{r7}
 800df16:	b083      	sub	sp, #12
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df20:	f003 0301 	and.w	r3, r3, #1
 800df24:	2b00      	cmp	r3, #0
 800df26:	d00a      	beq.n	800df3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	430a      	orrs	r2, r1
 800df3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df42:	f003 0302 	and.w	r3, r3, #2
 800df46:	2b00      	cmp	r3, #0
 800df48:	d00a      	beq.n	800df60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	685b      	ldr	r3, [r3, #4]
 800df50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	430a      	orrs	r2, r1
 800df5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df64:	f003 0304 	and.w	r3, r3, #4
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d00a      	beq.n	800df82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	430a      	orrs	r2, r1
 800df80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df86:	f003 0308 	and.w	r3, r3, #8
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d00a      	beq.n	800dfa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	430a      	orrs	r2, r1
 800dfa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfa8:	f003 0310 	and.w	r3, r3, #16
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d00a      	beq.n	800dfc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	689b      	ldr	r3, [r3, #8]
 800dfb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	430a      	orrs	r2, r1
 800dfc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfca:	f003 0320 	and.w	r3, r3, #32
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00a      	beq.n	800dfe8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	689b      	ldr	r3, [r3, #8]
 800dfd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	430a      	orrs	r2, r1
 800dfe6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d01a      	beq.n	800e02a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	430a      	orrs	r2, r1
 800e008:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e00e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e012:	d10a      	bne.n	800e02a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	430a      	orrs	r2, r1
 800e028:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e032:	2b00      	cmp	r3, #0
 800e034:	d00a      	beq.n	800e04c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	685b      	ldr	r3, [r3, #4]
 800e03c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	430a      	orrs	r2, r1
 800e04a:	605a      	str	r2, [r3, #4]
  }
}
 800e04c:	bf00      	nop
 800e04e:	370c      	adds	r7, #12
 800e050:	46bd      	mov	sp, r7
 800e052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e056:	4770      	bx	lr

0800e058 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b086      	sub	sp, #24
 800e05c:	af02      	add	r7, sp, #8
 800e05e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2200      	movs	r2, #0
 800e064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e068:	f7fa fdd8 	bl	8008c1c <HAL_GetTick>
 800e06c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f003 0308 	and.w	r3, r3, #8
 800e078:	2b08      	cmp	r3, #8
 800e07a:	d10e      	bne.n	800e09a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e07c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e080:	9300      	str	r3, [sp, #0]
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2200      	movs	r2, #0
 800e086:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f000 f82d 	bl	800e0ea <UART_WaitOnFlagUntilTimeout>
 800e090:	4603      	mov	r3, r0
 800e092:	2b00      	cmp	r3, #0
 800e094:	d001      	beq.n	800e09a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e096:	2303      	movs	r3, #3
 800e098:	e023      	b.n	800e0e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f003 0304 	and.w	r3, r3, #4
 800e0a4:	2b04      	cmp	r3, #4
 800e0a6:	d10e      	bne.n	800e0c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e0a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e0ac:	9300      	str	r3, [sp, #0]
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f000 f817 	bl	800e0ea <UART_WaitOnFlagUntilTimeout>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d001      	beq.n	800e0c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e0c2:	2303      	movs	r3, #3
 800e0c4:	e00d      	b.n	800e0e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2220      	movs	r2, #32
 800e0ca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2220      	movs	r2, #32
 800e0d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800e0e0:	2300      	movs	r3, #0
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3710      	adds	r7, #16
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}

0800e0ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e0ea:	b580      	push	{r7, lr}
 800e0ec:	b084      	sub	sp, #16
 800e0ee:	af00      	add	r7, sp, #0
 800e0f0:	60f8      	str	r0, [r7, #12]
 800e0f2:	60b9      	str	r1, [r7, #8]
 800e0f4:	603b      	str	r3, [r7, #0]
 800e0f6:	4613      	mov	r3, r2
 800e0f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e0fa:	e05e      	b.n	800e1ba <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e0fc:	69bb      	ldr	r3, [r7, #24]
 800e0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e102:	d05a      	beq.n	800e1ba <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e104:	f7fa fd8a 	bl	8008c1c <HAL_GetTick>
 800e108:	4602      	mov	r2, r0
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	1ad3      	subs	r3, r2, r3
 800e10e:	69ba      	ldr	r2, [r7, #24]
 800e110:	429a      	cmp	r2, r3
 800e112:	d302      	bcc.n	800e11a <UART_WaitOnFlagUntilTimeout+0x30>
 800e114:	69bb      	ldr	r3, [r7, #24]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d11b      	bne.n	800e152 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	681a      	ldr	r2, [r3, #0]
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e128:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	689a      	ldr	r2, [r3, #8]
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	f022 0201 	bic.w	r2, r2, #1
 800e138:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2220      	movs	r2, #32
 800e13e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2220      	movs	r2, #32
 800e144:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2200      	movs	r2, #0
 800e14a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800e14e:	2303      	movs	r3, #3
 800e150:	e043      	b.n	800e1da <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f003 0304 	and.w	r3, r3, #4
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d02c      	beq.n	800e1ba <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	69db      	ldr	r3, [r3, #28]
 800e166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e16a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e16e:	d124      	bne.n	800e1ba <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e178:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e188:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	689a      	ldr	r2, [r3, #8]
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f022 0201 	bic.w	r2, r2, #1
 800e198:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	2220      	movs	r2, #32
 800e19e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	2220      	movs	r2, #32
 800e1a4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2220      	movs	r2, #32
 800e1aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800e1b6:	2303      	movs	r3, #3
 800e1b8:	e00f      	b.n	800e1da <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	69da      	ldr	r2, [r3, #28]
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	4013      	ands	r3, r2
 800e1c4:	68ba      	ldr	r2, [r7, #8]
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	bf0c      	ite	eq
 800e1ca:	2301      	moveq	r3, #1
 800e1cc:	2300      	movne	r3, #0
 800e1ce:	b2db      	uxtb	r3, r3
 800e1d0:	461a      	mov	r2, r3
 800e1d2:	79fb      	ldrb	r3, [r7, #7]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d091      	beq.n	800e0fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e1d8:	2300      	movs	r3, #0
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3710      	adds	r7, #16
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}
	...

0800e1e4 <__errno>:
 800e1e4:	4b01      	ldr	r3, [pc, #4]	; (800e1ec <__errno+0x8>)
 800e1e6:	6818      	ldr	r0, [r3, #0]
 800e1e8:	4770      	bx	lr
 800e1ea:	bf00      	nop
 800e1ec:	2000000c 	.word	0x2000000c

0800e1f0 <__libc_init_array>:
 800e1f0:	b570      	push	{r4, r5, r6, lr}
 800e1f2:	4d0d      	ldr	r5, [pc, #52]	; (800e228 <__libc_init_array+0x38>)
 800e1f4:	4c0d      	ldr	r4, [pc, #52]	; (800e22c <__libc_init_array+0x3c>)
 800e1f6:	1b64      	subs	r4, r4, r5
 800e1f8:	10a4      	asrs	r4, r4, #2
 800e1fa:	2600      	movs	r6, #0
 800e1fc:	42a6      	cmp	r6, r4
 800e1fe:	d109      	bne.n	800e214 <__libc_init_array+0x24>
 800e200:	4d0b      	ldr	r5, [pc, #44]	; (800e230 <__libc_init_array+0x40>)
 800e202:	4c0c      	ldr	r4, [pc, #48]	; (800e234 <__libc_init_array+0x44>)
 800e204:	f003 f8be 	bl	8011384 <_init>
 800e208:	1b64      	subs	r4, r4, r5
 800e20a:	10a4      	asrs	r4, r4, #2
 800e20c:	2600      	movs	r6, #0
 800e20e:	42a6      	cmp	r6, r4
 800e210:	d105      	bne.n	800e21e <__libc_init_array+0x2e>
 800e212:	bd70      	pop	{r4, r5, r6, pc}
 800e214:	f855 3b04 	ldr.w	r3, [r5], #4
 800e218:	4798      	blx	r3
 800e21a:	3601      	adds	r6, #1
 800e21c:	e7ee      	b.n	800e1fc <__libc_init_array+0xc>
 800e21e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e222:	4798      	blx	r3
 800e224:	3601      	adds	r6, #1
 800e226:	e7f2      	b.n	800e20e <__libc_init_array+0x1e>
 800e228:	0801197c 	.word	0x0801197c
 800e22c:	0801197c 	.word	0x0801197c
 800e230:	0801197c 	.word	0x0801197c
 800e234:	08011980 	.word	0x08011980

0800e238 <memcpy>:
 800e238:	440a      	add	r2, r1
 800e23a:	4291      	cmp	r1, r2
 800e23c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e240:	d100      	bne.n	800e244 <memcpy+0xc>
 800e242:	4770      	bx	lr
 800e244:	b510      	push	{r4, lr}
 800e246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e24a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e24e:	4291      	cmp	r1, r2
 800e250:	d1f9      	bne.n	800e246 <memcpy+0xe>
 800e252:	bd10      	pop	{r4, pc}

0800e254 <memset>:
 800e254:	4402      	add	r2, r0
 800e256:	4603      	mov	r3, r0
 800e258:	4293      	cmp	r3, r2
 800e25a:	d100      	bne.n	800e25e <memset+0xa>
 800e25c:	4770      	bx	lr
 800e25e:	f803 1b01 	strb.w	r1, [r3], #1
 800e262:	e7f9      	b.n	800e258 <memset+0x4>

0800e264 <__cvt>:
 800e264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e268:	ec55 4b10 	vmov	r4, r5, d0
 800e26c:	2d00      	cmp	r5, #0
 800e26e:	460e      	mov	r6, r1
 800e270:	4619      	mov	r1, r3
 800e272:	462b      	mov	r3, r5
 800e274:	bfbb      	ittet	lt
 800e276:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e27a:	461d      	movlt	r5, r3
 800e27c:	2300      	movge	r3, #0
 800e27e:	232d      	movlt	r3, #45	; 0x2d
 800e280:	700b      	strb	r3, [r1, #0]
 800e282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e284:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e288:	4691      	mov	r9, r2
 800e28a:	f023 0820 	bic.w	r8, r3, #32
 800e28e:	bfbc      	itt	lt
 800e290:	4622      	movlt	r2, r4
 800e292:	4614      	movlt	r4, r2
 800e294:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e298:	d005      	beq.n	800e2a6 <__cvt+0x42>
 800e29a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e29e:	d100      	bne.n	800e2a2 <__cvt+0x3e>
 800e2a0:	3601      	adds	r6, #1
 800e2a2:	2102      	movs	r1, #2
 800e2a4:	e000      	b.n	800e2a8 <__cvt+0x44>
 800e2a6:	2103      	movs	r1, #3
 800e2a8:	ab03      	add	r3, sp, #12
 800e2aa:	9301      	str	r3, [sp, #4]
 800e2ac:	ab02      	add	r3, sp, #8
 800e2ae:	9300      	str	r3, [sp, #0]
 800e2b0:	ec45 4b10 	vmov	d0, r4, r5
 800e2b4:	4653      	mov	r3, sl
 800e2b6:	4632      	mov	r2, r6
 800e2b8:	f000 ff1e 	bl	800f0f8 <_dtoa_r>
 800e2bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e2c0:	4607      	mov	r7, r0
 800e2c2:	d102      	bne.n	800e2ca <__cvt+0x66>
 800e2c4:	f019 0f01 	tst.w	r9, #1
 800e2c8:	d022      	beq.n	800e310 <__cvt+0xac>
 800e2ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e2ce:	eb07 0906 	add.w	r9, r7, r6
 800e2d2:	d110      	bne.n	800e2f6 <__cvt+0x92>
 800e2d4:	783b      	ldrb	r3, [r7, #0]
 800e2d6:	2b30      	cmp	r3, #48	; 0x30
 800e2d8:	d10a      	bne.n	800e2f0 <__cvt+0x8c>
 800e2da:	2200      	movs	r2, #0
 800e2dc:	2300      	movs	r3, #0
 800e2de:	4620      	mov	r0, r4
 800e2e0:	4629      	mov	r1, r5
 800e2e2:	f7f2 fbf1 	bl	8000ac8 <__aeabi_dcmpeq>
 800e2e6:	b918      	cbnz	r0, 800e2f0 <__cvt+0x8c>
 800e2e8:	f1c6 0601 	rsb	r6, r6, #1
 800e2ec:	f8ca 6000 	str.w	r6, [sl]
 800e2f0:	f8da 3000 	ldr.w	r3, [sl]
 800e2f4:	4499      	add	r9, r3
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	4629      	mov	r1, r5
 800e2fe:	f7f2 fbe3 	bl	8000ac8 <__aeabi_dcmpeq>
 800e302:	b108      	cbz	r0, 800e308 <__cvt+0xa4>
 800e304:	f8cd 900c 	str.w	r9, [sp, #12]
 800e308:	2230      	movs	r2, #48	; 0x30
 800e30a:	9b03      	ldr	r3, [sp, #12]
 800e30c:	454b      	cmp	r3, r9
 800e30e:	d307      	bcc.n	800e320 <__cvt+0xbc>
 800e310:	9b03      	ldr	r3, [sp, #12]
 800e312:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e314:	1bdb      	subs	r3, r3, r7
 800e316:	4638      	mov	r0, r7
 800e318:	6013      	str	r3, [r2, #0]
 800e31a:	b004      	add	sp, #16
 800e31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e320:	1c59      	adds	r1, r3, #1
 800e322:	9103      	str	r1, [sp, #12]
 800e324:	701a      	strb	r2, [r3, #0]
 800e326:	e7f0      	b.n	800e30a <__cvt+0xa6>

0800e328 <__exponent>:
 800e328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e32a:	4603      	mov	r3, r0
 800e32c:	2900      	cmp	r1, #0
 800e32e:	bfb8      	it	lt
 800e330:	4249      	neglt	r1, r1
 800e332:	f803 2b02 	strb.w	r2, [r3], #2
 800e336:	bfb4      	ite	lt
 800e338:	222d      	movlt	r2, #45	; 0x2d
 800e33a:	222b      	movge	r2, #43	; 0x2b
 800e33c:	2909      	cmp	r1, #9
 800e33e:	7042      	strb	r2, [r0, #1]
 800e340:	dd2a      	ble.n	800e398 <__exponent+0x70>
 800e342:	f10d 0407 	add.w	r4, sp, #7
 800e346:	46a4      	mov	ip, r4
 800e348:	270a      	movs	r7, #10
 800e34a:	46a6      	mov	lr, r4
 800e34c:	460a      	mov	r2, r1
 800e34e:	fb91 f6f7 	sdiv	r6, r1, r7
 800e352:	fb07 1516 	mls	r5, r7, r6, r1
 800e356:	3530      	adds	r5, #48	; 0x30
 800e358:	2a63      	cmp	r2, #99	; 0x63
 800e35a:	f104 34ff 	add.w	r4, r4, #4294967295
 800e35e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e362:	4631      	mov	r1, r6
 800e364:	dcf1      	bgt.n	800e34a <__exponent+0x22>
 800e366:	3130      	adds	r1, #48	; 0x30
 800e368:	f1ae 0502 	sub.w	r5, lr, #2
 800e36c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e370:	1c44      	adds	r4, r0, #1
 800e372:	4629      	mov	r1, r5
 800e374:	4561      	cmp	r1, ip
 800e376:	d30a      	bcc.n	800e38e <__exponent+0x66>
 800e378:	f10d 0209 	add.w	r2, sp, #9
 800e37c:	eba2 020e 	sub.w	r2, r2, lr
 800e380:	4565      	cmp	r5, ip
 800e382:	bf88      	it	hi
 800e384:	2200      	movhi	r2, #0
 800e386:	4413      	add	r3, r2
 800e388:	1a18      	subs	r0, r3, r0
 800e38a:	b003      	add	sp, #12
 800e38c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e38e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e392:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e396:	e7ed      	b.n	800e374 <__exponent+0x4c>
 800e398:	2330      	movs	r3, #48	; 0x30
 800e39a:	3130      	adds	r1, #48	; 0x30
 800e39c:	7083      	strb	r3, [r0, #2]
 800e39e:	70c1      	strb	r1, [r0, #3]
 800e3a0:	1d03      	adds	r3, r0, #4
 800e3a2:	e7f1      	b.n	800e388 <__exponent+0x60>

0800e3a4 <_printf_float>:
 800e3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3a8:	ed2d 8b02 	vpush	{d8}
 800e3ac:	b08d      	sub	sp, #52	; 0x34
 800e3ae:	460c      	mov	r4, r1
 800e3b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e3b4:	4616      	mov	r6, r2
 800e3b6:	461f      	mov	r7, r3
 800e3b8:	4605      	mov	r5, r0
 800e3ba:	f001 fe43 	bl	8010044 <_localeconv_r>
 800e3be:	f8d0 a000 	ldr.w	sl, [r0]
 800e3c2:	4650      	mov	r0, sl
 800e3c4:	f7f1 ff04 	bl	80001d0 <strlen>
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	930a      	str	r3, [sp, #40]	; 0x28
 800e3cc:	6823      	ldr	r3, [r4, #0]
 800e3ce:	9305      	str	r3, [sp, #20]
 800e3d0:	f8d8 3000 	ldr.w	r3, [r8]
 800e3d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e3d8:	3307      	adds	r3, #7
 800e3da:	f023 0307 	bic.w	r3, r3, #7
 800e3de:	f103 0208 	add.w	r2, r3, #8
 800e3e2:	f8c8 2000 	str.w	r2, [r8]
 800e3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e3ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e3f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e3f6:	9307      	str	r3, [sp, #28]
 800e3f8:	f8cd 8018 	str.w	r8, [sp, #24]
 800e3fc:	ee08 0a10 	vmov	s16, r0
 800e400:	4b9f      	ldr	r3, [pc, #636]	; (800e680 <_printf_float+0x2dc>)
 800e402:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e406:	f04f 32ff 	mov.w	r2, #4294967295
 800e40a:	f7f2 fb8f 	bl	8000b2c <__aeabi_dcmpun>
 800e40e:	bb88      	cbnz	r0, 800e474 <_printf_float+0xd0>
 800e410:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e414:	4b9a      	ldr	r3, [pc, #616]	; (800e680 <_printf_float+0x2dc>)
 800e416:	f04f 32ff 	mov.w	r2, #4294967295
 800e41a:	f7f2 fb69 	bl	8000af0 <__aeabi_dcmple>
 800e41e:	bb48      	cbnz	r0, 800e474 <_printf_float+0xd0>
 800e420:	2200      	movs	r2, #0
 800e422:	2300      	movs	r3, #0
 800e424:	4640      	mov	r0, r8
 800e426:	4649      	mov	r1, r9
 800e428:	f7f2 fb58 	bl	8000adc <__aeabi_dcmplt>
 800e42c:	b110      	cbz	r0, 800e434 <_printf_float+0x90>
 800e42e:	232d      	movs	r3, #45	; 0x2d
 800e430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e434:	4b93      	ldr	r3, [pc, #588]	; (800e684 <_printf_float+0x2e0>)
 800e436:	4894      	ldr	r0, [pc, #592]	; (800e688 <_printf_float+0x2e4>)
 800e438:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e43c:	bf94      	ite	ls
 800e43e:	4698      	movls	r8, r3
 800e440:	4680      	movhi	r8, r0
 800e442:	2303      	movs	r3, #3
 800e444:	6123      	str	r3, [r4, #16]
 800e446:	9b05      	ldr	r3, [sp, #20]
 800e448:	f023 0204 	bic.w	r2, r3, #4
 800e44c:	6022      	str	r2, [r4, #0]
 800e44e:	f04f 0900 	mov.w	r9, #0
 800e452:	9700      	str	r7, [sp, #0]
 800e454:	4633      	mov	r3, r6
 800e456:	aa0b      	add	r2, sp, #44	; 0x2c
 800e458:	4621      	mov	r1, r4
 800e45a:	4628      	mov	r0, r5
 800e45c:	f000 f9d8 	bl	800e810 <_printf_common>
 800e460:	3001      	adds	r0, #1
 800e462:	f040 8090 	bne.w	800e586 <_printf_float+0x1e2>
 800e466:	f04f 30ff 	mov.w	r0, #4294967295
 800e46a:	b00d      	add	sp, #52	; 0x34
 800e46c:	ecbd 8b02 	vpop	{d8}
 800e470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e474:	4642      	mov	r2, r8
 800e476:	464b      	mov	r3, r9
 800e478:	4640      	mov	r0, r8
 800e47a:	4649      	mov	r1, r9
 800e47c:	f7f2 fb56 	bl	8000b2c <__aeabi_dcmpun>
 800e480:	b140      	cbz	r0, 800e494 <_printf_float+0xf0>
 800e482:	464b      	mov	r3, r9
 800e484:	2b00      	cmp	r3, #0
 800e486:	bfbc      	itt	lt
 800e488:	232d      	movlt	r3, #45	; 0x2d
 800e48a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e48e:	487f      	ldr	r0, [pc, #508]	; (800e68c <_printf_float+0x2e8>)
 800e490:	4b7f      	ldr	r3, [pc, #508]	; (800e690 <_printf_float+0x2ec>)
 800e492:	e7d1      	b.n	800e438 <_printf_float+0x94>
 800e494:	6863      	ldr	r3, [r4, #4]
 800e496:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e49a:	9206      	str	r2, [sp, #24]
 800e49c:	1c5a      	adds	r2, r3, #1
 800e49e:	d13f      	bne.n	800e520 <_printf_float+0x17c>
 800e4a0:	2306      	movs	r3, #6
 800e4a2:	6063      	str	r3, [r4, #4]
 800e4a4:	9b05      	ldr	r3, [sp, #20]
 800e4a6:	6861      	ldr	r1, [r4, #4]
 800e4a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	9303      	str	r3, [sp, #12]
 800e4b0:	ab0a      	add	r3, sp, #40	; 0x28
 800e4b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e4b6:	ab09      	add	r3, sp, #36	; 0x24
 800e4b8:	ec49 8b10 	vmov	d0, r8, r9
 800e4bc:	9300      	str	r3, [sp, #0]
 800e4be:	6022      	str	r2, [r4, #0]
 800e4c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e4c4:	4628      	mov	r0, r5
 800e4c6:	f7ff fecd 	bl	800e264 <__cvt>
 800e4ca:	9b06      	ldr	r3, [sp, #24]
 800e4cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e4ce:	2b47      	cmp	r3, #71	; 0x47
 800e4d0:	4680      	mov	r8, r0
 800e4d2:	d108      	bne.n	800e4e6 <_printf_float+0x142>
 800e4d4:	1cc8      	adds	r0, r1, #3
 800e4d6:	db02      	blt.n	800e4de <_printf_float+0x13a>
 800e4d8:	6863      	ldr	r3, [r4, #4]
 800e4da:	4299      	cmp	r1, r3
 800e4dc:	dd41      	ble.n	800e562 <_printf_float+0x1be>
 800e4de:	f1ab 0b02 	sub.w	fp, fp, #2
 800e4e2:	fa5f fb8b 	uxtb.w	fp, fp
 800e4e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e4ea:	d820      	bhi.n	800e52e <_printf_float+0x18a>
 800e4ec:	3901      	subs	r1, #1
 800e4ee:	465a      	mov	r2, fp
 800e4f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e4f4:	9109      	str	r1, [sp, #36]	; 0x24
 800e4f6:	f7ff ff17 	bl	800e328 <__exponent>
 800e4fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4fc:	1813      	adds	r3, r2, r0
 800e4fe:	2a01      	cmp	r2, #1
 800e500:	4681      	mov	r9, r0
 800e502:	6123      	str	r3, [r4, #16]
 800e504:	dc02      	bgt.n	800e50c <_printf_float+0x168>
 800e506:	6822      	ldr	r2, [r4, #0]
 800e508:	07d2      	lsls	r2, r2, #31
 800e50a:	d501      	bpl.n	800e510 <_printf_float+0x16c>
 800e50c:	3301      	adds	r3, #1
 800e50e:	6123      	str	r3, [r4, #16]
 800e510:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e514:	2b00      	cmp	r3, #0
 800e516:	d09c      	beq.n	800e452 <_printf_float+0xae>
 800e518:	232d      	movs	r3, #45	; 0x2d
 800e51a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e51e:	e798      	b.n	800e452 <_printf_float+0xae>
 800e520:	9a06      	ldr	r2, [sp, #24]
 800e522:	2a47      	cmp	r2, #71	; 0x47
 800e524:	d1be      	bne.n	800e4a4 <_printf_float+0x100>
 800e526:	2b00      	cmp	r3, #0
 800e528:	d1bc      	bne.n	800e4a4 <_printf_float+0x100>
 800e52a:	2301      	movs	r3, #1
 800e52c:	e7b9      	b.n	800e4a2 <_printf_float+0xfe>
 800e52e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e532:	d118      	bne.n	800e566 <_printf_float+0x1c2>
 800e534:	2900      	cmp	r1, #0
 800e536:	6863      	ldr	r3, [r4, #4]
 800e538:	dd0b      	ble.n	800e552 <_printf_float+0x1ae>
 800e53a:	6121      	str	r1, [r4, #16]
 800e53c:	b913      	cbnz	r3, 800e544 <_printf_float+0x1a0>
 800e53e:	6822      	ldr	r2, [r4, #0]
 800e540:	07d0      	lsls	r0, r2, #31
 800e542:	d502      	bpl.n	800e54a <_printf_float+0x1a6>
 800e544:	3301      	adds	r3, #1
 800e546:	440b      	add	r3, r1
 800e548:	6123      	str	r3, [r4, #16]
 800e54a:	65a1      	str	r1, [r4, #88]	; 0x58
 800e54c:	f04f 0900 	mov.w	r9, #0
 800e550:	e7de      	b.n	800e510 <_printf_float+0x16c>
 800e552:	b913      	cbnz	r3, 800e55a <_printf_float+0x1b6>
 800e554:	6822      	ldr	r2, [r4, #0]
 800e556:	07d2      	lsls	r2, r2, #31
 800e558:	d501      	bpl.n	800e55e <_printf_float+0x1ba>
 800e55a:	3302      	adds	r3, #2
 800e55c:	e7f4      	b.n	800e548 <_printf_float+0x1a4>
 800e55e:	2301      	movs	r3, #1
 800e560:	e7f2      	b.n	800e548 <_printf_float+0x1a4>
 800e562:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e568:	4299      	cmp	r1, r3
 800e56a:	db05      	blt.n	800e578 <_printf_float+0x1d4>
 800e56c:	6823      	ldr	r3, [r4, #0]
 800e56e:	6121      	str	r1, [r4, #16]
 800e570:	07d8      	lsls	r0, r3, #31
 800e572:	d5ea      	bpl.n	800e54a <_printf_float+0x1a6>
 800e574:	1c4b      	adds	r3, r1, #1
 800e576:	e7e7      	b.n	800e548 <_printf_float+0x1a4>
 800e578:	2900      	cmp	r1, #0
 800e57a:	bfd4      	ite	le
 800e57c:	f1c1 0202 	rsble	r2, r1, #2
 800e580:	2201      	movgt	r2, #1
 800e582:	4413      	add	r3, r2
 800e584:	e7e0      	b.n	800e548 <_printf_float+0x1a4>
 800e586:	6823      	ldr	r3, [r4, #0]
 800e588:	055a      	lsls	r2, r3, #21
 800e58a:	d407      	bmi.n	800e59c <_printf_float+0x1f8>
 800e58c:	6923      	ldr	r3, [r4, #16]
 800e58e:	4642      	mov	r2, r8
 800e590:	4631      	mov	r1, r6
 800e592:	4628      	mov	r0, r5
 800e594:	47b8      	blx	r7
 800e596:	3001      	adds	r0, #1
 800e598:	d12c      	bne.n	800e5f4 <_printf_float+0x250>
 800e59a:	e764      	b.n	800e466 <_printf_float+0xc2>
 800e59c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e5a0:	f240 80e0 	bls.w	800e764 <_printf_float+0x3c0>
 800e5a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	f7f2 fa8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800e5b0:	2800      	cmp	r0, #0
 800e5b2:	d034      	beq.n	800e61e <_printf_float+0x27a>
 800e5b4:	4a37      	ldr	r2, [pc, #220]	; (800e694 <_printf_float+0x2f0>)
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	4631      	mov	r1, r6
 800e5ba:	4628      	mov	r0, r5
 800e5bc:	47b8      	blx	r7
 800e5be:	3001      	adds	r0, #1
 800e5c0:	f43f af51 	beq.w	800e466 <_printf_float+0xc2>
 800e5c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	db02      	blt.n	800e5d2 <_printf_float+0x22e>
 800e5cc:	6823      	ldr	r3, [r4, #0]
 800e5ce:	07d8      	lsls	r0, r3, #31
 800e5d0:	d510      	bpl.n	800e5f4 <_printf_float+0x250>
 800e5d2:	ee18 3a10 	vmov	r3, s16
 800e5d6:	4652      	mov	r2, sl
 800e5d8:	4631      	mov	r1, r6
 800e5da:	4628      	mov	r0, r5
 800e5dc:	47b8      	blx	r7
 800e5de:	3001      	adds	r0, #1
 800e5e0:	f43f af41 	beq.w	800e466 <_printf_float+0xc2>
 800e5e4:	f04f 0800 	mov.w	r8, #0
 800e5e8:	f104 091a 	add.w	r9, r4, #26
 800e5ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5ee:	3b01      	subs	r3, #1
 800e5f0:	4543      	cmp	r3, r8
 800e5f2:	dc09      	bgt.n	800e608 <_printf_float+0x264>
 800e5f4:	6823      	ldr	r3, [r4, #0]
 800e5f6:	079b      	lsls	r3, r3, #30
 800e5f8:	f100 8105 	bmi.w	800e806 <_printf_float+0x462>
 800e5fc:	68e0      	ldr	r0, [r4, #12]
 800e5fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e600:	4298      	cmp	r0, r3
 800e602:	bfb8      	it	lt
 800e604:	4618      	movlt	r0, r3
 800e606:	e730      	b.n	800e46a <_printf_float+0xc6>
 800e608:	2301      	movs	r3, #1
 800e60a:	464a      	mov	r2, r9
 800e60c:	4631      	mov	r1, r6
 800e60e:	4628      	mov	r0, r5
 800e610:	47b8      	blx	r7
 800e612:	3001      	adds	r0, #1
 800e614:	f43f af27 	beq.w	800e466 <_printf_float+0xc2>
 800e618:	f108 0801 	add.w	r8, r8, #1
 800e61c:	e7e6      	b.n	800e5ec <_printf_float+0x248>
 800e61e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e620:	2b00      	cmp	r3, #0
 800e622:	dc39      	bgt.n	800e698 <_printf_float+0x2f4>
 800e624:	4a1b      	ldr	r2, [pc, #108]	; (800e694 <_printf_float+0x2f0>)
 800e626:	2301      	movs	r3, #1
 800e628:	4631      	mov	r1, r6
 800e62a:	4628      	mov	r0, r5
 800e62c:	47b8      	blx	r7
 800e62e:	3001      	adds	r0, #1
 800e630:	f43f af19 	beq.w	800e466 <_printf_float+0xc2>
 800e634:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e638:	4313      	orrs	r3, r2
 800e63a:	d102      	bne.n	800e642 <_printf_float+0x29e>
 800e63c:	6823      	ldr	r3, [r4, #0]
 800e63e:	07d9      	lsls	r1, r3, #31
 800e640:	d5d8      	bpl.n	800e5f4 <_printf_float+0x250>
 800e642:	ee18 3a10 	vmov	r3, s16
 800e646:	4652      	mov	r2, sl
 800e648:	4631      	mov	r1, r6
 800e64a:	4628      	mov	r0, r5
 800e64c:	47b8      	blx	r7
 800e64e:	3001      	adds	r0, #1
 800e650:	f43f af09 	beq.w	800e466 <_printf_float+0xc2>
 800e654:	f04f 0900 	mov.w	r9, #0
 800e658:	f104 0a1a 	add.w	sl, r4, #26
 800e65c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e65e:	425b      	negs	r3, r3
 800e660:	454b      	cmp	r3, r9
 800e662:	dc01      	bgt.n	800e668 <_printf_float+0x2c4>
 800e664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e666:	e792      	b.n	800e58e <_printf_float+0x1ea>
 800e668:	2301      	movs	r3, #1
 800e66a:	4652      	mov	r2, sl
 800e66c:	4631      	mov	r1, r6
 800e66e:	4628      	mov	r0, r5
 800e670:	47b8      	blx	r7
 800e672:	3001      	adds	r0, #1
 800e674:	f43f aef7 	beq.w	800e466 <_printf_float+0xc2>
 800e678:	f109 0901 	add.w	r9, r9, #1
 800e67c:	e7ee      	b.n	800e65c <_printf_float+0x2b8>
 800e67e:	bf00      	nop
 800e680:	7fefffff 	.word	0x7fefffff
 800e684:	080115a0 	.word	0x080115a0
 800e688:	080115a4 	.word	0x080115a4
 800e68c:	080115ac 	.word	0x080115ac
 800e690:	080115a8 	.word	0x080115a8
 800e694:	080115b0 	.word	0x080115b0
 800e698:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e69a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e69c:	429a      	cmp	r2, r3
 800e69e:	bfa8      	it	ge
 800e6a0:	461a      	movge	r2, r3
 800e6a2:	2a00      	cmp	r2, #0
 800e6a4:	4691      	mov	r9, r2
 800e6a6:	dc37      	bgt.n	800e718 <_printf_float+0x374>
 800e6a8:	f04f 0b00 	mov.w	fp, #0
 800e6ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e6b0:	f104 021a 	add.w	r2, r4, #26
 800e6b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e6b6:	9305      	str	r3, [sp, #20]
 800e6b8:	eba3 0309 	sub.w	r3, r3, r9
 800e6bc:	455b      	cmp	r3, fp
 800e6be:	dc33      	bgt.n	800e728 <_printf_float+0x384>
 800e6c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	db3b      	blt.n	800e740 <_printf_float+0x39c>
 800e6c8:	6823      	ldr	r3, [r4, #0]
 800e6ca:	07da      	lsls	r2, r3, #31
 800e6cc:	d438      	bmi.n	800e740 <_printf_float+0x39c>
 800e6ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6d0:	9a05      	ldr	r2, [sp, #20]
 800e6d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e6d4:	1a9a      	subs	r2, r3, r2
 800e6d6:	eba3 0901 	sub.w	r9, r3, r1
 800e6da:	4591      	cmp	r9, r2
 800e6dc:	bfa8      	it	ge
 800e6de:	4691      	movge	r9, r2
 800e6e0:	f1b9 0f00 	cmp.w	r9, #0
 800e6e4:	dc35      	bgt.n	800e752 <_printf_float+0x3ae>
 800e6e6:	f04f 0800 	mov.w	r8, #0
 800e6ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e6ee:	f104 0a1a 	add.w	sl, r4, #26
 800e6f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e6f6:	1a9b      	subs	r3, r3, r2
 800e6f8:	eba3 0309 	sub.w	r3, r3, r9
 800e6fc:	4543      	cmp	r3, r8
 800e6fe:	f77f af79 	ble.w	800e5f4 <_printf_float+0x250>
 800e702:	2301      	movs	r3, #1
 800e704:	4652      	mov	r2, sl
 800e706:	4631      	mov	r1, r6
 800e708:	4628      	mov	r0, r5
 800e70a:	47b8      	blx	r7
 800e70c:	3001      	adds	r0, #1
 800e70e:	f43f aeaa 	beq.w	800e466 <_printf_float+0xc2>
 800e712:	f108 0801 	add.w	r8, r8, #1
 800e716:	e7ec      	b.n	800e6f2 <_printf_float+0x34e>
 800e718:	4613      	mov	r3, r2
 800e71a:	4631      	mov	r1, r6
 800e71c:	4642      	mov	r2, r8
 800e71e:	4628      	mov	r0, r5
 800e720:	47b8      	blx	r7
 800e722:	3001      	adds	r0, #1
 800e724:	d1c0      	bne.n	800e6a8 <_printf_float+0x304>
 800e726:	e69e      	b.n	800e466 <_printf_float+0xc2>
 800e728:	2301      	movs	r3, #1
 800e72a:	4631      	mov	r1, r6
 800e72c:	4628      	mov	r0, r5
 800e72e:	9205      	str	r2, [sp, #20]
 800e730:	47b8      	blx	r7
 800e732:	3001      	adds	r0, #1
 800e734:	f43f ae97 	beq.w	800e466 <_printf_float+0xc2>
 800e738:	9a05      	ldr	r2, [sp, #20]
 800e73a:	f10b 0b01 	add.w	fp, fp, #1
 800e73e:	e7b9      	b.n	800e6b4 <_printf_float+0x310>
 800e740:	ee18 3a10 	vmov	r3, s16
 800e744:	4652      	mov	r2, sl
 800e746:	4631      	mov	r1, r6
 800e748:	4628      	mov	r0, r5
 800e74a:	47b8      	blx	r7
 800e74c:	3001      	adds	r0, #1
 800e74e:	d1be      	bne.n	800e6ce <_printf_float+0x32a>
 800e750:	e689      	b.n	800e466 <_printf_float+0xc2>
 800e752:	9a05      	ldr	r2, [sp, #20]
 800e754:	464b      	mov	r3, r9
 800e756:	4442      	add	r2, r8
 800e758:	4631      	mov	r1, r6
 800e75a:	4628      	mov	r0, r5
 800e75c:	47b8      	blx	r7
 800e75e:	3001      	adds	r0, #1
 800e760:	d1c1      	bne.n	800e6e6 <_printf_float+0x342>
 800e762:	e680      	b.n	800e466 <_printf_float+0xc2>
 800e764:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e766:	2a01      	cmp	r2, #1
 800e768:	dc01      	bgt.n	800e76e <_printf_float+0x3ca>
 800e76a:	07db      	lsls	r3, r3, #31
 800e76c:	d538      	bpl.n	800e7e0 <_printf_float+0x43c>
 800e76e:	2301      	movs	r3, #1
 800e770:	4642      	mov	r2, r8
 800e772:	4631      	mov	r1, r6
 800e774:	4628      	mov	r0, r5
 800e776:	47b8      	blx	r7
 800e778:	3001      	adds	r0, #1
 800e77a:	f43f ae74 	beq.w	800e466 <_printf_float+0xc2>
 800e77e:	ee18 3a10 	vmov	r3, s16
 800e782:	4652      	mov	r2, sl
 800e784:	4631      	mov	r1, r6
 800e786:	4628      	mov	r0, r5
 800e788:	47b8      	blx	r7
 800e78a:	3001      	adds	r0, #1
 800e78c:	f43f ae6b 	beq.w	800e466 <_printf_float+0xc2>
 800e790:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e794:	2200      	movs	r2, #0
 800e796:	2300      	movs	r3, #0
 800e798:	f7f2 f996 	bl	8000ac8 <__aeabi_dcmpeq>
 800e79c:	b9d8      	cbnz	r0, 800e7d6 <_printf_float+0x432>
 800e79e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7a0:	f108 0201 	add.w	r2, r8, #1
 800e7a4:	3b01      	subs	r3, #1
 800e7a6:	4631      	mov	r1, r6
 800e7a8:	4628      	mov	r0, r5
 800e7aa:	47b8      	blx	r7
 800e7ac:	3001      	adds	r0, #1
 800e7ae:	d10e      	bne.n	800e7ce <_printf_float+0x42a>
 800e7b0:	e659      	b.n	800e466 <_printf_float+0xc2>
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	4652      	mov	r2, sl
 800e7b6:	4631      	mov	r1, r6
 800e7b8:	4628      	mov	r0, r5
 800e7ba:	47b8      	blx	r7
 800e7bc:	3001      	adds	r0, #1
 800e7be:	f43f ae52 	beq.w	800e466 <_printf_float+0xc2>
 800e7c2:	f108 0801 	add.w	r8, r8, #1
 800e7c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7c8:	3b01      	subs	r3, #1
 800e7ca:	4543      	cmp	r3, r8
 800e7cc:	dcf1      	bgt.n	800e7b2 <_printf_float+0x40e>
 800e7ce:	464b      	mov	r3, r9
 800e7d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e7d4:	e6dc      	b.n	800e590 <_printf_float+0x1ec>
 800e7d6:	f04f 0800 	mov.w	r8, #0
 800e7da:	f104 0a1a 	add.w	sl, r4, #26
 800e7de:	e7f2      	b.n	800e7c6 <_printf_float+0x422>
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	4642      	mov	r2, r8
 800e7e4:	e7df      	b.n	800e7a6 <_printf_float+0x402>
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	464a      	mov	r2, r9
 800e7ea:	4631      	mov	r1, r6
 800e7ec:	4628      	mov	r0, r5
 800e7ee:	47b8      	blx	r7
 800e7f0:	3001      	adds	r0, #1
 800e7f2:	f43f ae38 	beq.w	800e466 <_printf_float+0xc2>
 800e7f6:	f108 0801 	add.w	r8, r8, #1
 800e7fa:	68e3      	ldr	r3, [r4, #12]
 800e7fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e7fe:	1a5b      	subs	r3, r3, r1
 800e800:	4543      	cmp	r3, r8
 800e802:	dcf0      	bgt.n	800e7e6 <_printf_float+0x442>
 800e804:	e6fa      	b.n	800e5fc <_printf_float+0x258>
 800e806:	f04f 0800 	mov.w	r8, #0
 800e80a:	f104 0919 	add.w	r9, r4, #25
 800e80e:	e7f4      	b.n	800e7fa <_printf_float+0x456>

0800e810 <_printf_common>:
 800e810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e814:	4616      	mov	r6, r2
 800e816:	4699      	mov	r9, r3
 800e818:	688a      	ldr	r2, [r1, #8]
 800e81a:	690b      	ldr	r3, [r1, #16]
 800e81c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e820:	4293      	cmp	r3, r2
 800e822:	bfb8      	it	lt
 800e824:	4613      	movlt	r3, r2
 800e826:	6033      	str	r3, [r6, #0]
 800e828:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e82c:	4607      	mov	r7, r0
 800e82e:	460c      	mov	r4, r1
 800e830:	b10a      	cbz	r2, 800e836 <_printf_common+0x26>
 800e832:	3301      	adds	r3, #1
 800e834:	6033      	str	r3, [r6, #0]
 800e836:	6823      	ldr	r3, [r4, #0]
 800e838:	0699      	lsls	r1, r3, #26
 800e83a:	bf42      	ittt	mi
 800e83c:	6833      	ldrmi	r3, [r6, #0]
 800e83e:	3302      	addmi	r3, #2
 800e840:	6033      	strmi	r3, [r6, #0]
 800e842:	6825      	ldr	r5, [r4, #0]
 800e844:	f015 0506 	ands.w	r5, r5, #6
 800e848:	d106      	bne.n	800e858 <_printf_common+0x48>
 800e84a:	f104 0a19 	add.w	sl, r4, #25
 800e84e:	68e3      	ldr	r3, [r4, #12]
 800e850:	6832      	ldr	r2, [r6, #0]
 800e852:	1a9b      	subs	r3, r3, r2
 800e854:	42ab      	cmp	r3, r5
 800e856:	dc26      	bgt.n	800e8a6 <_printf_common+0x96>
 800e858:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e85c:	1e13      	subs	r3, r2, #0
 800e85e:	6822      	ldr	r2, [r4, #0]
 800e860:	bf18      	it	ne
 800e862:	2301      	movne	r3, #1
 800e864:	0692      	lsls	r2, r2, #26
 800e866:	d42b      	bmi.n	800e8c0 <_printf_common+0xb0>
 800e868:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e86c:	4649      	mov	r1, r9
 800e86e:	4638      	mov	r0, r7
 800e870:	47c0      	blx	r8
 800e872:	3001      	adds	r0, #1
 800e874:	d01e      	beq.n	800e8b4 <_printf_common+0xa4>
 800e876:	6823      	ldr	r3, [r4, #0]
 800e878:	68e5      	ldr	r5, [r4, #12]
 800e87a:	6832      	ldr	r2, [r6, #0]
 800e87c:	f003 0306 	and.w	r3, r3, #6
 800e880:	2b04      	cmp	r3, #4
 800e882:	bf08      	it	eq
 800e884:	1aad      	subeq	r5, r5, r2
 800e886:	68a3      	ldr	r3, [r4, #8]
 800e888:	6922      	ldr	r2, [r4, #16]
 800e88a:	bf0c      	ite	eq
 800e88c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e890:	2500      	movne	r5, #0
 800e892:	4293      	cmp	r3, r2
 800e894:	bfc4      	itt	gt
 800e896:	1a9b      	subgt	r3, r3, r2
 800e898:	18ed      	addgt	r5, r5, r3
 800e89a:	2600      	movs	r6, #0
 800e89c:	341a      	adds	r4, #26
 800e89e:	42b5      	cmp	r5, r6
 800e8a0:	d11a      	bne.n	800e8d8 <_printf_common+0xc8>
 800e8a2:	2000      	movs	r0, #0
 800e8a4:	e008      	b.n	800e8b8 <_printf_common+0xa8>
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	4652      	mov	r2, sl
 800e8aa:	4649      	mov	r1, r9
 800e8ac:	4638      	mov	r0, r7
 800e8ae:	47c0      	blx	r8
 800e8b0:	3001      	adds	r0, #1
 800e8b2:	d103      	bne.n	800e8bc <_printf_common+0xac>
 800e8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8bc:	3501      	adds	r5, #1
 800e8be:	e7c6      	b.n	800e84e <_printf_common+0x3e>
 800e8c0:	18e1      	adds	r1, r4, r3
 800e8c2:	1c5a      	adds	r2, r3, #1
 800e8c4:	2030      	movs	r0, #48	; 0x30
 800e8c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e8ca:	4422      	add	r2, r4
 800e8cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e8d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e8d4:	3302      	adds	r3, #2
 800e8d6:	e7c7      	b.n	800e868 <_printf_common+0x58>
 800e8d8:	2301      	movs	r3, #1
 800e8da:	4622      	mov	r2, r4
 800e8dc:	4649      	mov	r1, r9
 800e8de:	4638      	mov	r0, r7
 800e8e0:	47c0      	blx	r8
 800e8e2:	3001      	adds	r0, #1
 800e8e4:	d0e6      	beq.n	800e8b4 <_printf_common+0xa4>
 800e8e6:	3601      	adds	r6, #1
 800e8e8:	e7d9      	b.n	800e89e <_printf_common+0x8e>
	...

0800e8ec <_printf_i>:
 800e8ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8f0:	7e0f      	ldrb	r7, [r1, #24]
 800e8f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e8f4:	2f78      	cmp	r7, #120	; 0x78
 800e8f6:	4691      	mov	r9, r2
 800e8f8:	4680      	mov	r8, r0
 800e8fa:	460c      	mov	r4, r1
 800e8fc:	469a      	mov	sl, r3
 800e8fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e902:	d807      	bhi.n	800e914 <_printf_i+0x28>
 800e904:	2f62      	cmp	r7, #98	; 0x62
 800e906:	d80a      	bhi.n	800e91e <_printf_i+0x32>
 800e908:	2f00      	cmp	r7, #0
 800e90a:	f000 80d8 	beq.w	800eabe <_printf_i+0x1d2>
 800e90e:	2f58      	cmp	r7, #88	; 0x58
 800e910:	f000 80a3 	beq.w	800ea5a <_printf_i+0x16e>
 800e914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e918:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e91c:	e03a      	b.n	800e994 <_printf_i+0xa8>
 800e91e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e922:	2b15      	cmp	r3, #21
 800e924:	d8f6      	bhi.n	800e914 <_printf_i+0x28>
 800e926:	a101      	add	r1, pc, #4	; (adr r1, 800e92c <_printf_i+0x40>)
 800e928:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e92c:	0800e985 	.word	0x0800e985
 800e930:	0800e999 	.word	0x0800e999
 800e934:	0800e915 	.word	0x0800e915
 800e938:	0800e915 	.word	0x0800e915
 800e93c:	0800e915 	.word	0x0800e915
 800e940:	0800e915 	.word	0x0800e915
 800e944:	0800e999 	.word	0x0800e999
 800e948:	0800e915 	.word	0x0800e915
 800e94c:	0800e915 	.word	0x0800e915
 800e950:	0800e915 	.word	0x0800e915
 800e954:	0800e915 	.word	0x0800e915
 800e958:	0800eaa5 	.word	0x0800eaa5
 800e95c:	0800e9c9 	.word	0x0800e9c9
 800e960:	0800ea87 	.word	0x0800ea87
 800e964:	0800e915 	.word	0x0800e915
 800e968:	0800e915 	.word	0x0800e915
 800e96c:	0800eac7 	.word	0x0800eac7
 800e970:	0800e915 	.word	0x0800e915
 800e974:	0800e9c9 	.word	0x0800e9c9
 800e978:	0800e915 	.word	0x0800e915
 800e97c:	0800e915 	.word	0x0800e915
 800e980:	0800ea8f 	.word	0x0800ea8f
 800e984:	682b      	ldr	r3, [r5, #0]
 800e986:	1d1a      	adds	r2, r3, #4
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	602a      	str	r2, [r5, #0]
 800e98c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e994:	2301      	movs	r3, #1
 800e996:	e0a3      	b.n	800eae0 <_printf_i+0x1f4>
 800e998:	6820      	ldr	r0, [r4, #0]
 800e99a:	6829      	ldr	r1, [r5, #0]
 800e99c:	0606      	lsls	r6, r0, #24
 800e99e:	f101 0304 	add.w	r3, r1, #4
 800e9a2:	d50a      	bpl.n	800e9ba <_printf_i+0xce>
 800e9a4:	680e      	ldr	r6, [r1, #0]
 800e9a6:	602b      	str	r3, [r5, #0]
 800e9a8:	2e00      	cmp	r6, #0
 800e9aa:	da03      	bge.n	800e9b4 <_printf_i+0xc8>
 800e9ac:	232d      	movs	r3, #45	; 0x2d
 800e9ae:	4276      	negs	r6, r6
 800e9b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9b4:	485e      	ldr	r0, [pc, #376]	; (800eb30 <_printf_i+0x244>)
 800e9b6:	230a      	movs	r3, #10
 800e9b8:	e019      	b.n	800e9ee <_printf_i+0x102>
 800e9ba:	680e      	ldr	r6, [r1, #0]
 800e9bc:	602b      	str	r3, [r5, #0]
 800e9be:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e9c2:	bf18      	it	ne
 800e9c4:	b236      	sxthne	r6, r6
 800e9c6:	e7ef      	b.n	800e9a8 <_printf_i+0xbc>
 800e9c8:	682b      	ldr	r3, [r5, #0]
 800e9ca:	6820      	ldr	r0, [r4, #0]
 800e9cc:	1d19      	adds	r1, r3, #4
 800e9ce:	6029      	str	r1, [r5, #0]
 800e9d0:	0601      	lsls	r1, r0, #24
 800e9d2:	d501      	bpl.n	800e9d8 <_printf_i+0xec>
 800e9d4:	681e      	ldr	r6, [r3, #0]
 800e9d6:	e002      	b.n	800e9de <_printf_i+0xf2>
 800e9d8:	0646      	lsls	r6, r0, #25
 800e9da:	d5fb      	bpl.n	800e9d4 <_printf_i+0xe8>
 800e9dc:	881e      	ldrh	r6, [r3, #0]
 800e9de:	4854      	ldr	r0, [pc, #336]	; (800eb30 <_printf_i+0x244>)
 800e9e0:	2f6f      	cmp	r7, #111	; 0x6f
 800e9e2:	bf0c      	ite	eq
 800e9e4:	2308      	moveq	r3, #8
 800e9e6:	230a      	movne	r3, #10
 800e9e8:	2100      	movs	r1, #0
 800e9ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e9ee:	6865      	ldr	r5, [r4, #4]
 800e9f0:	60a5      	str	r5, [r4, #8]
 800e9f2:	2d00      	cmp	r5, #0
 800e9f4:	bfa2      	ittt	ge
 800e9f6:	6821      	ldrge	r1, [r4, #0]
 800e9f8:	f021 0104 	bicge.w	r1, r1, #4
 800e9fc:	6021      	strge	r1, [r4, #0]
 800e9fe:	b90e      	cbnz	r6, 800ea04 <_printf_i+0x118>
 800ea00:	2d00      	cmp	r5, #0
 800ea02:	d04d      	beq.n	800eaa0 <_printf_i+0x1b4>
 800ea04:	4615      	mov	r5, r2
 800ea06:	fbb6 f1f3 	udiv	r1, r6, r3
 800ea0a:	fb03 6711 	mls	r7, r3, r1, r6
 800ea0e:	5dc7      	ldrb	r7, [r0, r7]
 800ea10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ea14:	4637      	mov	r7, r6
 800ea16:	42bb      	cmp	r3, r7
 800ea18:	460e      	mov	r6, r1
 800ea1a:	d9f4      	bls.n	800ea06 <_printf_i+0x11a>
 800ea1c:	2b08      	cmp	r3, #8
 800ea1e:	d10b      	bne.n	800ea38 <_printf_i+0x14c>
 800ea20:	6823      	ldr	r3, [r4, #0]
 800ea22:	07de      	lsls	r6, r3, #31
 800ea24:	d508      	bpl.n	800ea38 <_printf_i+0x14c>
 800ea26:	6923      	ldr	r3, [r4, #16]
 800ea28:	6861      	ldr	r1, [r4, #4]
 800ea2a:	4299      	cmp	r1, r3
 800ea2c:	bfde      	ittt	le
 800ea2e:	2330      	movle	r3, #48	; 0x30
 800ea30:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ea34:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ea38:	1b52      	subs	r2, r2, r5
 800ea3a:	6122      	str	r2, [r4, #16]
 800ea3c:	f8cd a000 	str.w	sl, [sp]
 800ea40:	464b      	mov	r3, r9
 800ea42:	aa03      	add	r2, sp, #12
 800ea44:	4621      	mov	r1, r4
 800ea46:	4640      	mov	r0, r8
 800ea48:	f7ff fee2 	bl	800e810 <_printf_common>
 800ea4c:	3001      	adds	r0, #1
 800ea4e:	d14c      	bne.n	800eaea <_printf_i+0x1fe>
 800ea50:	f04f 30ff 	mov.w	r0, #4294967295
 800ea54:	b004      	add	sp, #16
 800ea56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea5a:	4835      	ldr	r0, [pc, #212]	; (800eb30 <_printf_i+0x244>)
 800ea5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ea60:	6829      	ldr	r1, [r5, #0]
 800ea62:	6823      	ldr	r3, [r4, #0]
 800ea64:	f851 6b04 	ldr.w	r6, [r1], #4
 800ea68:	6029      	str	r1, [r5, #0]
 800ea6a:	061d      	lsls	r5, r3, #24
 800ea6c:	d514      	bpl.n	800ea98 <_printf_i+0x1ac>
 800ea6e:	07df      	lsls	r7, r3, #31
 800ea70:	bf44      	itt	mi
 800ea72:	f043 0320 	orrmi.w	r3, r3, #32
 800ea76:	6023      	strmi	r3, [r4, #0]
 800ea78:	b91e      	cbnz	r6, 800ea82 <_printf_i+0x196>
 800ea7a:	6823      	ldr	r3, [r4, #0]
 800ea7c:	f023 0320 	bic.w	r3, r3, #32
 800ea80:	6023      	str	r3, [r4, #0]
 800ea82:	2310      	movs	r3, #16
 800ea84:	e7b0      	b.n	800e9e8 <_printf_i+0xfc>
 800ea86:	6823      	ldr	r3, [r4, #0]
 800ea88:	f043 0320 	orr.w	r3, r3, #32
 800ea8c:	6023      	str	r3, [r4, #0]
 800ea8e:	2378      	movs	r3, #120	; 0x78
 800ea90:	4828      	ldr	r0, [pc, #160]	; (800eb34 <_printf_i+0x248>)
 800ea92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ea96:	e7e3      	b.n	800ea60 <_printf_i+0x174>
 800ea98:	0659      	lsls	r1, r3, #25
 800ea9a:	bf48      	it	mi
 800ea9c:	b2b6      	uxthmi	r6, r6
 800ea9e:	e7e6      	b.n	800ea6e <_printf_i+0x182>
 800eaa0:	4615      	mov	r5, r2
 800eaa2:	e7bb      	b.n	800ea1c <_printf_i+0x130>
 800eaa4:	682b      	ldr	r3, [r5, #0]
 800eaa6:	6826      	ldr	r6, [r4, #0]
 800eaa8:	6961      	ldr	r1, [r4, #20]
 800eaaa:	1d18      	adds	r0, r3, #4
 800eaac:	6028      	str	r0, [r5, #0]
 800eaae:	0635      	lsls	r5, r6, #24
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	d501      	bpl.n	800eab8 <_printf_i+0x1cc>
 800eab4:	6019      	str	r1, [r3, #0]
 800eab6:	e002      	b.n	800eabe <_printf_i+0x1d2>
 800eab8:	0670      	lsls	r0, r6, #25
 800eaba:	d5fb      	bpl.n	800eab4 <_printf_i+0x1c8>
 800eabc:	8019      	strh	r1, [r3, #0]
 800eabe:	2300      	movs	r3, #0
 800eac0:	6123      	str	r3, [r4, #16]
 800eac2:	4615      	mov	r5, r2
 800eac4:	e7ba      	b.n	800ea3c <_printf_i+0x150>
 800eac6:	682b      	ldr	r3, [r5, #0]
 800eac8:	1d1a      	adds	r2, r3, #4
 800eaca:	602a      	str	r2, [r5, #0]
 800eacc:	681d      	ldr	r5, [r3, #0]
 800eace:	6862      	ldr	r2, [r4, #4]
 800ead0:	2100      	movs	r1, #0
 800ead2:	4628      	mov	r0, r5
 800ead4:	f7f1 fb84 	bl	80001e0 <memchr>
 800ead8:	b108      	cbz	r0, 800eade <_printf_i+0x1f2>
 800eada:	1b40      	subs	r0, r0, r5
 800eadc:	6060      	str	r0, [r4, #4]
 800eade:	6863      	ldr	r3, [r4, #4]
 800eae0:	6123      	str	r3, [r4, #16]
 800eae2:	2300      	movs	r3, #0
 800eae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eae8:	e7a8      	b.n	800ea3c <_printf_i+0x150>
 800eaea:	6923      	ldr	r3, [r4, #16]
 800eaec:	462a      	mov	r2, r5
 800eaee:	4649      	mov	r1, r9
 800eaf0:	4640      	mov	r0, r8
 800eaf2:	47d0      	blx	sl
 800eaf4:	3001      	adds	r0, #1
 800eaf6:	d0ab      	beq.n	800ea50 <_printf_i+0x164>
 800eaf8:	6823      	ldr	r3, [r4, #0]
 800eafa:	079b      	lsls	r3, r3, #30
 800eafc:	d413      	bmi.n	800eb26 <_printf_i+0x23a>
 800eafe:	68e0      	ldr	r0, [r4, #12]
 800eb00:	9b03      	ldr	r3, [sp, #12]
 800eb02:	4298      	cmp	r0, r3
 800eb04:	bfb8      	it	lt
 800eb06:	4618      	movlt	r0, r3
 800eb08:	e7a4      	b.n	800ea54 <_printf_i+0x168>
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	4632      	mov	r2, r6
 800eb0e:	4649      	mov	r1, r9
 800eb10:	4640      	mov	r0, r8
 800eb12:	47d0      	blx	sl
 800eb14:	3001      	adds	r0, #1
 800eb16:	d09b      	beq.n	800ea50 <_printf_i+0x164>
 800eb18:	3501      	adds	r5, #1
 800eb1a:	68e3      	ldr	r3, [r4, #12]
 800eb1c:	9903      	ldr	r1, [sp, #12]
 800eb1e:	1a5b      	subs	r3, r3, r1
 800eb20:	42ab      	cmp	r3, r5
 800eb22:	dcf2      	bgt.n	800eb0a <_printf_i+0x21e>
 800eb24:	e7eb      	b.n	800eafe <_printf_i+0x212>
 800eb26:	2500      	movs	r5, #0
 800eb28:	f104 0619 	add.w	r6, r4, #25
 800eb2c:	e7f5      	b.n	800eb1a <_printf_i+0x22e>
 800eb2e:	bf00      	nop
 800eb30:	080115b2 	.word	0x080115b2
 800eb34:	080115c3 	.word	0x080115c3

0800eb38 <iprintf>:
 800eb38:	b40f      	push	{r0, r1, r2, r3}
 800eb3a:	4b0a      	ldr	r3, [pc, #40]	; (800eb64 <iprintf+0x2c>)
 800eb3c:	b513      	push	{r0, r1, r4, lr}
 800eb3e:	681c      	ldr	r4, [r3, #0]
 800eb40:	b124      	cbz	r4, 800eb4c <iprintf+0x14>
 800eb42:	69a3      	ldr	r3, [r4, #24]
 800eb44:	b913      	cbnz	r3, 800eb4c <iprintf+0x14>
 800eb46:	4620      	mov	r0, r4
 800eb48:	f001 f9de 	bl	800ff08 <__sinit>
 800eb4c:	ab05      	add	r3, sp, #20
 800eb4e:	9a04      	ldr	r2, [sp, #16]
 800eb50:	68a1      	ldr	r1, [r4, #8]
 800eb52:	9301      	str	r3, [sp, #4]
 800eb54:	4620      	mov	r0, r4
 800eb56:	f002 f8e9 	bl	8010d2c <_vfiprintf_r>
 800eb5a:	b002      	add	sp, #8
 800eb5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb60:	b004      	add	sp, #16
 800eb62:	4770      	bx	lr
 800eb64:	2000000c 	.word	0x2000000c

0800eb68 <putchar>:
 800eb68:	4b09      	ldr	r3, [pc, #36]	; (800eb90 <putchar+0x28>)
 800eb6a:	b513      	push	{r0, r1, r4, lr}
 800eb6c:	681c      	ldr	r4, [r3, #0]
 800eb6e:	4601      	mov	r1, r0
 800eb70:	b134      	cbz	r4, 800eb80 <putchar+0x18>
 800eb72:	69a3      	ldr	r3, [r4, #24]
 800eb74:	b923      	cbnz	r3, 800eb80 <putchar+0x18>
 800eb76:	9001      	str	r0, [sp, #4]
 800eb78:	4620      	mov	r0, r4
 800eb7a:	f001 f9c5 	bl	800ff08 <__sinit>
 800eb7e:	9901      	ldr	r1, [sp, #4]
 800eb80:	68a2      	ldr	r2, [r4, #8]
 800eb82:	4620      	mov	r0, r4
 800eb84:	b002      	add	sp, #8
 800eb86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb8a:	f002 b9ff 	b.w	8010f8c <_putc_r>
 800eb8e:	bf00      	nop
 800eb90:	2000000c 	.word	0x2000000c

0800eb94 <_puts_r>:
 800eb94:	b570      	push	{r4, r5, r6, lr}
 800eb96:	460e      	mov	r6, r1
 800eb98:	4605      	mov	r5, r0
 800eb9a:	b118      	cbz	r0, 800eba4 <_puts_r+0x10>
 800eb9c:	6983      	ldr	r3, [r0, #24]
 800eb9e:	b90b      	cbnz	r3, 800eba4 <_puts_r+0x10>
 800eba0:	f001 f9b2 	bl	800ff08 <__sinit>
 800eba4:	69ab      	ldr	r3, [r5, #24]
 800eba6:	68ac      	ldr	r4, [r5, #8]
 800eba8:	b913      	cbnz	r3, 800ebb0 <_puts_r+0x1c>
 800ebaa:	4628      	mov	r0, r5
 800ebac:	f001 f9ac 	bl	800ff08 <__sinit>
 800ebb0:	4b2c      	ldr	r3, [pc, #176]	; (800ec64 <_puts_r+0xd0>)
 800ebb2:	429c      	cmp	r4, r3
 800ebb4:	d120      	bne.n	800ebf8 <_puts_r+0x64>
 800ebb6:	686c      	ldr	r4, [r5, #4]
 800ebb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ebba:	07db      	lsls	r3, r3, #31
 800ebbc:	d405      	bmi.n	800ebca <_puts_r+0x36>
 800ebbe:	89a3      	ldrh	r3, [r4, #12]
 800ebc0:	0598      	lsls	r0, r3, #22
 800ebc2:	d402      	bmi.n	800ebca <_puts_r+0x36>
 800ebc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebc6:	f001 fa42 	bl	801004e <__retarget_lock_acquire_recursive>
 800ebca:	89a3      	ldrh	r3, [r4, #12]
 800ebcc:	0719      	lsls	r1, r3, #28
 800ebce:	d51d      	bpl.n	800ec0c <_puts_r+0x78>
 800ebd0:	6923      	ldr	r3, [r4, #16]
 800ebd2:	b1db      	cbz	r3, 800ec0c <_puts_r+0x78>
 800ebd4:	3e01      	subs	r6, #1
 800ebd6:	68a3      	ldr	r3, [r4, #8]
 800ebd8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ebdc:	3b01      	subs	r3, #1
 800ebde:	60a3      	str	r3, [r4, #8]
 800ebe0:	bb39      	cbnz	r1, 800ec32 <_puts_r+0x9e>
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	da38      	bge.n	800ec58 <_puts_r+0xc4>
 800ebe6:	4622      	mov	r2, r4
 800ebe8:	210a      	movs	r1, #10
 800ebea:	4628      	mov	r0, r5
 800ebec:	f000 f936 	bl	800ee5c <__swbuf_r>
 800ebf0:	3001      	adds	r0, #1
 800ebf2:	d011      	beq.n	800ec18 <_puts_r+0x84>
 800ebf4:	250a      	movs	r5, #10
 800ebf6:	e011      	b.n	800ec1c <_puts_r+0x88>
 800ebf8:	4b1b      	ldr	r3, [pc, #108]	; (800ec68 <_puts_r+0xd4>)
 800ebfa:	429c      	cmp	r4, r3
 800ebfc:	d101      	bne.n	800ec02 <_puts_r+0x6e>
 800ebfe:	68ac      	ldr	r4, [r5, #8]
 800ec00:	e7da      	b.n	800ebb8 <_puts_r+0x24>
 800ec02:	4b1a      	ldr	r3, [pc, #104]	; (800ec6c <_puts_r+0xd8>)
 800ec04:	429c      	cmp	r4, r3
 800ec06:	bf08      	it	eq
 800ec08:	68ec      	ldreq	r4, [r5, #12]
 800ec0a:	e7d5      	b.n	800ebb8 <_puts_r+0x24>
 800ec0c:	4621      	mov	r1, r4
 800ec0e:	4628      	mov	r0, r5
 800ec10:	f000 f976 	bl	800ef00 <__swsetup_r>
 800ec14:	2800      	cmp	r0, #0
 800ec16:	d0dd      	beq.n	800ebd4 <_puts_r+0x40>
 800ec18:	f04f 35ff 	mov.w	r5, #4294967295
 800ec1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec1e:	07da      	lsls	r2, r3, #31
 800ec20:	d405      	bmi.n	800ec2e <_puts_r+0x9a>
 800ec22:	89a3      	ldrh	r3, [r4, #12]
 800ec24:	059b      	lsls	r3, r3, #22
 800ec26:	d402      	bmi.n	800ec2e <_puts_r+0x9a>
 800ec28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec2a:	f001 fa11 	bl	8010050 <__retarget_lock_release_recursive>
 800ec2e:	4628      	mov	r0, r5
 800ec30:	bd70      	pop	{r4, r5, r6, pc}
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	da04      	bge.n	800ec40 <_puts_r+0xac>
 800ec36:	69a2      	ldr	r2, [r4, #24]
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	dc06      	bgt.n	800ec4a <_puts_r+0xb6>
 800ec3c:	290a      	cmp	r1, #10
 800ec3e:	d004      	beq.n	800ec4a <_puts_r+0xb6>
 800ec40:	6823      	ldr	r3, [r4, #0]
 800ec42:	1c5a      	adds	r2, r3, #1
 800ec44:	6022      	str	r2, [r4, #0]
 800ec46:	7019      	strb	r1, [r3, #0]
 800ec48:	e7c5      	b.n	800ebd6 <_puts_r+0x42>
 800ec4a:	4622      	mov	r2, r4
 800ec4c:	4628      	mov	r0, r5
 800ec4e:	f000 f905 	bl	800ee5c <__swbuf_r>
 800ec52:	3001      	adds	r0, #1
 800ec54:	d1bf      	bne.n	800ebd6 <_puts_r+0x42>
 800ec56:	e7df      	b.n	800ec18 <_puts_r+0x84>
 800ec58:	6823      	ldr	r3, [r4, #0]
 800ec5a:	250a      	movs	r5, #10
 800ec5c:	1c5a      	adds	r2, r3, #1
 800ec5e:	6022      	str	r2, [r4, #0]
 800ec60:	701d      	strb	r5, [r3, #0]
 800ec62:	e7db      	b.n	800ec1c <_puts_r+0x88>
 800ec64:	08011684 	.word	0x08011684
 800ec68:	080116a4 	.word	0x080116a4
 800ec6c:	08011664 	.word	0x08011664

0800ec70 <puts>:
 800ec70:	4b02      	ldr	r3, [pc, #8]	; (800ec7c <puts+0xc>)
 800ec72:	4601      	mov	r1, r0
 800ec74:	6818      	ldr	r0, [r3, #0]
 800ec76:	f7ff bf8d 	b.w	800eb94 <_puts_r>
 800ec7a:	bf00      	nop
 800ec7c:	2000000c 	.word	0x2000000c

0800ec80 <setbuf>:
 800ec80:	2900      	cmp	r1, #0
 800ec82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec86:	bf0c      	ite	eq
 800ec88:	2202      	moveq	r2, #2
 800ec8a:	2200      	movne	r2, #0
 800ec8c:	f000 b800 	b.w	800ec90 <setvbuf>

0800ec90 <setvbuf>:
 800ec90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ec94:	461d      	mov	r5, r3
 800ec96:	4b5d      	ldr	r3, [pc, #372]	; (800ee0c <setvbuf+0x17c>)
 800ec98:	681f      	ldr	r7, [r3, #0]
 800ec9a:	4604      	mov	r4, r0
 800ec9c:	460e      	mov	r6, r1
 800ec9e:	4690      	mov	r8, r2
 800eca0:	b127      	cbz	r7, 800ecac <setvbuf+0x1c>
 800eca2:	69bb      	ldr	r3, [r7, #24]
 800eca4:	b913      	cbnz	r3, 800ecac <setvbuf+0x1c>
 800eca6:	4638      	mov	r0, r7
 800eca8:	f001 f92e 	bl	800ff08 <__sinit>
 800ecac:	4b58      	ldr	r3, [pc, #352]	; (800ee10 <setvbuf+0x180>)
 800ecae:	429c      	cmp	r4, r3
 800ecb0:	d167      	bne.n	800ed82 <setvbuf+0xf2>
 800ecb2:	687c      	ldr	r4, [r7, #4]
 800ecb4:	f1b8 0f02 	cmp.w	r8, #2
 800ecb8:	d006      	beq.n	800ecc8 <setvbuf+0x38>
 800ecba:	f1b8 0f01 	cmp.w	r8, #1
 800ecbe:	f200 809f 	bhi.w	800ee00 <setvbuf+0x170>
 800ecc2:	2d00      	cmp	r5, #0
 800ecc4:	f2c0 809c 	blt.w	800ee00 <setvbuf+0x170>
 800ecc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ecca:	07db      	lsls	r3, r3, #31
 800eccc:	d405      	bmi.n	800ecda <setvbuf+0x4a>
 800ecce:	89a3      	ldrh	r3, [r4, #12]
 800ecd0:	0598      	lsls	r0, r3, #22
 800ecd2:	d402      	bmi.n	800ecda <setvbuf+0x4a>
 800ecd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecd6:	f001 f9ba 	bl	801004e <__retarget_lock_acquire_recursive>
 800ecda:	4621      	mov	r1, r4
 800ecdc:	4638      	mov	r0, r7
 800ecde:	f001 f87f 	bl	800fde0 <_fflush_r>
 800ece2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ece4:	b141      	cbz	r1, 800ecf8 <setvbuf+0x68>
 800ece6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ecea:	4299      	cmp	r1, r3
 800ecec:	d002      	beq.n	800ecf4 <setvbuf+0x64>
 800ecee:	4638      	mov	r0, r7
 800ecf0:	f001 fdb6 	bl	8010860 <_free_r>
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	6363      	str	r3, [r4, #52]	; 0x34
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	61a3      	str	r3, [r4, #24]
 800ecfc:	6063      	str	r3, [r4, #4]
 800ecfe:	89a3      	ldrh	r3, [r4, #12]
 800ed00:	0619      	lsls	r1, r3, #24
 800ed02:	d503      	bpl.n	800ed0c <setvbuf+0x7c>
 800ed04:	6921      	ldr	r1, [r4, #16]
 800ed06:	4638      	mov	r0, r7
 800ed08:	f001 fdaa 	bl	8010860 <_free_r>
 800ed0c:	89a3      	ldrh	r3, [r4, #12]
 800ed0e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800ed12:	f023 0303 	bic.w	r3, r3, #3
 800ed16:	f1b8 0f02 	cmp.w	r8, #2
 800ed1a:	81a3      	strh	r3, [r4, #12]
 800ed1c:	d06c      	beq.n	800edf8 <setvbuf+0x168>
 800ed1e:	ab01      	add	r3, sp, #4
 800ed20:	466a      	mov	r2, sp
 800ed22:	4621      	mov	r1, r4
 800ed24:	4638      	mov	r0, r7
 800ed26:	f001 f994 	bl	8010052 <__swhatbuf_r>
 800ed2a:	89a3      	ldrh	r3, [r4, #12]
 800ed2c:	4318      	orrs	r0, r3
 800ed2e:	81a0      	strh	r0, [r4, #12]
 800ed30:	2d00      	cmp	r5, #0
 800ed32:	d130      	bne.n	800ed96 <setvbuf+0x106>
 800ed34:	9d00      	ldr	r5, [sp, #0]
 800ed36:	4628      	mov	r0, r5
 800ed38:	f001 f9f0 	bl	801011c <malloc>
 800ed3c:	4606      	mov	r6, r0
 800ed3e:	2800      	cmp	r0, #0
 800ed40:	d155      	bne.n	800edee <setvbuf+0x15e>
 800ed42:	f8dd 9000 	ldr.w	r9, [sp]
 800ed46:	45a9      	cmp	r9, r5
 800ed48:	d14a      	bne.n	800ede0 <setvbuf+0x150>
 800ed4a:	f04f 35ff 	mov.w	r5, #4294967295
 800ed4e:	2200      	movs	r2, #0
 800ed50:	60a2      	str	r2, [r4, #8]
 800ed52:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800ed56:	6022      	str	r2, [r4, #0]
 800ed58:	6122      	str	r2, [r4, #16]
 800ed5a:	2201      	movs	r2, #1
 800ed5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed60:	6162      	str	r2, [r4, #20]
 800ed62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ed64:	f043 0302 	orr.w	r3, r3, #2
 800ed68:	07d2      	lsls	r2, r2, #31
 800ed6a:	81a3      	strh	r3, [r4, #12]
 800ed6c:	d405      	bmi.n	800ed7a <setvbuf+0xea>
 800ed6e:	f413 7f00 	tst.w	r3, #512	; 0x200
 800ed72:	d102      	bne.n	800ed7a <setvbuf+0xea>
 800ed74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed76:	f001 f96b 	bl	8010050 <__retarget_lock_release_recursive>
 800ed7a:	4628      	mov	r0, r5
 800ed7c:	b003      	add	sp, #12
 800ed7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed82:	4b24      	ldr	r3, [pc, #144]	; (800ee14 <setvbuf+0x184>)
 800ed84:	429c      	cmp	r4, r3
 800ed86:	d101      	bne.n	800ed8c <setvbuf+0xfc>
 800ed88:	68bc      	ldr	r4, [r7, #8]
 800ed8a:	e793      	b.n	800ecb4 <setvbuf+0x24>
 800ed8c:	4b22      	ldr	r3, [pc, #136]	; (800ee18 <setvbuf+0x188>)
 800ed8e:	429c      	cmp	r4, r3
 800ed90:	bf08      	it	eq
 800ed92:	68fc      	ldreq	r4, [r7, #12]
 800ed94:	e78e      	b.n	800ecb4 <setvbuf+0x24>
 800ed96:	2e00      	cmp	r6, #0
 800ed98:	d0cd      	beq.n	800ed36 <setvbuf+0xa6>
 800ed9a:	69bb      	ldr	r3, [r7, #24]
 800ed9c:	b913      	cbnz	r3, 800eda4 <setvbuf+0x114>
 800ed9e:	4638      	mov	r0, r7
 800eda0:	f001 f8b2 	bl	800ff08 <__sinit>
 800eda4:	f1b8 0f01 	cmp.w	r8, #1
 800eda8:	bf08      	it	eq
 800edaa:	89a3      	ldrheq	r3, [r4, #12]
 800edac:	6026      	str	r6, [r4, #0]
 800edae:	bf04      	itt	eq
 800edb0:	f043 0301 	orreq.w	r3, r3, #1
 800edb4:	81a3      	strheq	r3, [r4, #12]
 800edb6:	89a2      	ldrh	r2, [r4, #12]
 800edb8:	f012 0308 	ands.w	r3, r2, #8
 800edbc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800edc0:	d01c      	beq.n	800edfc <setvbuf+0x16c>
 800edc2:	07d3      	lsls	r3, r2, #31
 800edc4:	bf41      	itttt	mi
 800edc6:	2300      	movmi	r3, #0
 800edc8:	426d      	negmi	r5, r5
 800edca:	60a3      	strmi	r3, [r4, #8]
 800edcc:	61a5      	strmi	r5, [r4, #24]
 800edce:	bf58      	it	pl
 800edd0:	60a5      	strpl	r5, [r4, #8]
 800edd2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800edd4:	f015 0501 	ands.w	r5, r5, #1
 800edd8:	d115      	bne.n	800ee06 <setvbuf+0x176>
 800edda:	f412 7f00 	tst.w	r2, #512	; 0x200
 800edde:	e7c8      	b.n	800ed72 <setvbuf+0xe2>
 800ede0:	4648      	mov	r0, r9
 800ede2:	f001 f99b 	bl	801011c <malloc>
 800ede6:	4606      	mov	r6, r0
 800ede8:	2800      	cmp	r0, #0
 800edea:	d0ae      	beq.n	800ed4a <setvbuf+0xba>
 800edec:	464d      	mov	r5, r9
 800edee:	89a3      	ldrh	r3, [r4, #12]
 800edf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edf4:	81a3      	strh	r3, [r4, #12]
 800edf6:	e7d0      	b.n	800ed9a <setvbuf+0x10a>
 800edf8:	2500      	movs	r5, #0
 800edfa:	e7a8      	b.n	800ed4e <setvbuf+0xbe>
 800edfc:	60a3      	str	r3, [r4, #8]
 800edfe:	e7e8      	b.n	800edd2 <setvbuf+0x142>
 800ee00:	f04f 35ff 	mov.w	r5, #4294967295
 800ee04:	e7b9      	b.n	800ed7a <setvbuf+0xea>
 800ee06:	2500      	movs	r5, #0
 800ee08:	e7b7      	b.n	800ed7a <setvbuf+0xea>
 800ee0a:	bf00      	nop
 800ee0c:	2000000c 	.word	0x2000000c
 800ee10:	08011684 	.word	0x08011684
 800ee14:	080116a4 	.word	0x080116a4
 800ee18:	08011664 	.word	0x08011664

0800ee1c <siprintf>:
 800ee1c:	b40e      	push	{r1, r2, r3}
 800ee1e:	b500      	push	{lr}
 800ee20:	b09c      	sub	sp, #112	; 0x70
 800ee22:	ab1d      	add	r3, sp, #116	; 0x74
 800ee24:	9002      	str	r0, [sp, #8]
 800ee26:	9006      	str	r0, [sp, #24]
 800ee28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ee2c:	4809      	ldr	r0, [pc, #36]	; (800ee54 <siprintf+0x38>)
 800ee2e:	9107      	str	r1, [sp, #28]
 800ee30:	9104      	str	r1, [sp, #16]
 800ee32:	4909      	ldr	r1, [pc, #36]	; (800ee58 <siprintf+0x3c>)
 800ee34:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee38:	9105      	str	r1, [sp, #20]
 800ee3a:	6800      	ldr	r0, [r0, #0]
 800ee3c:	9301      	str	r3, [sp, #4]
 800ee3e:	a902      	add	r1, sp, #8
 800ee40:	f001 fe4a 	bl	8010ad8 <_svfiprintf_r>
 800ee44:	9b02      	ldr	r3, [sp, #8]
 800ee46:	2200      	movs	r2, #0
 800ee48:	701a      	strb	r2, [r3, #0]
 800ee4a:	b01c      	add	sp, #112	; 0x70
 800ee4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee50:	b003      	add	sp, #12
 800ee52:	4770      	bx	lr
 800ee54:	2000000c 	.word	0x2000000c
 800ee58:	ffff0208 	.word	0xffff0208

0800ee5c <__swbuf_r>:
 800ee5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee5e:	460e      	mov	r6, r1
 800ee60:	4614      	mov	r4, r2
 800ee62:	4605      	mov	r5, r0
 800ee64:	b118      	cbz	r0, 800ee6e <__swbuf_r+0x12>
 800ee66:	6983      	ldr	r3, [r0, #24]
 800ee68:	b90b      	cbnz	r3, 800ee6e <__swbuf_r+0x12>
 800ee6a:	f001 f84d 	bl	800ff08 <__sinit>
 800ee6e:	4b21      	ldr	r3, [pc, #132]	; (800eef4 <__swbuf_r+0x98>)
 800ee70:	429c      	cmp	r4, r3
 800ee72:	d12b      	bne.n	800eecc <__swbuf_r+0x70>
 800ee74:	686c      	ldr	r4, [r5, #4]
 800ee76:	69a3      	ldr	r3, [r4, #24]
 800ee78:	60a3      	str	r3, [r4, #8]
 800ee7a:	89a3      	ldrh	r3, [r4, #12]
 800ee7c:	071a      	lsls	r2, r3, #28
 800ee7e:	d52f      	bpl.n	800eee0 <__swbuf_r+0x84>
 800ee80:	6923      	ldr	r3, [r4, #16]
 800ee82:	b36b      	cbz	r3, 800eee0 <__swbuf_r+0x84>
 800ee84:	6923      	ldr	r3, [r4, #16]
 800ee86:	6820      	ldr	r0, [r4, #0]
 800ee88:	1ac0      	subs	r0, r0, r3
 800ee8a:	6963      	ldr	r3, [r4, #20]
 800ee8c:	b2f6      	uxtb	r6, r6
 800ee8e:	4283      	cmp	r3, r0
 800ee90:	4637      	mov	r7, r6
 800ee92:	dc04      	bgt.n	800ee9e <__swbuf_r+0x42>
 800ee94:	4621      	mov	r1, r4
 800ee96:	4628      	mov	r0, r5
 800ee98:	f000 ffa2 	bl	800fde0 <_fflush_r>
 800ee9c:	bb30      	cbnz	r0, 800eeec <__swbuf_r+0x90>
 800ee9e:	68a3      	ldr	r3, [r4, #8]
 800eea0:	3b01      	subs	r3, #1
 800eea2:	60a3      	str	r3, [r4, #8]
 800eea4:	6823      	ldr	r3, [r4, #0]
 800eea6:	1c5a      	adds	r2, r3, #1
 800eea8:	6022      	str	r2, [r4, #0]
 800eeaa:	701e      	strb	r6, [r3, #0]
 800eeac:	6963      	ldr	r3, [r4, #20]
 800eeae:	3001      	adds	r0, #1
 800eeb0:	4283      	cmp	r3, r0
 800eeb2:	d004      	beq.n	800eebe <__swbuf_r+0x62>
 800eeb4:	89a3      	ldrh	r3, [r4, #12]
 800eeb6:	07db      	lsls	r3, r3, #31
 800eeb8:	d506      	bpl.n	800eec8 <__swbuf_r+0x6c>
 800eeba:	2e0a      	cmp	r6, #10
 800eebc:	d104      	bne.n	800eec8 <__swbuf_r+0x6c>
 800eebe:	4621      	mov	r1, r4
 800eec0:	4628      	mov	r0, r5
 800eec2:	f000 ff8d 	bl	800fde0 <_fflush_r>
 800eec6:	b988      	cbnz	r0, 800eeec <__swbuf_r+0x90>
 800eec8:	4638      	mov	r0, r7
 800eeca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eecc:	4b0a      	ldr	r3, [pc, #40]	; (800eef8 <__swbuf_r+0x9c>)
 800eece:	429c      	cmp	r4, r3
 800eed0:	d101      	bne.n	800eed6 <__swbuf_r+0x7a>
 800eed2:	68ac      	ldr	r4, [r5, #8]
 800eed4:	e7cf      	b.n	800ee76 <__swbuf_r+0x1a>
 800eed6:	4b09      	ldr	r3, [pc, #36]	; (800eefc <__swbuf_r+0xa0>)
 800eed8:	429c      	cmp	r4, r3
 800eeda:	bf08      	it	eq
 800eedc:	68ec      	ldreq	r4, [r5, #12]
 800eede:	e7ca      	b.n	800ee76 <__swbuf_r+0x1a>
 800eee0:	4621      	mov	r1, r4
 800eee2:	4628      	mov	r0, r5
 800eee4:	f000 f80c 	bl	800ef00 <__swsetup_r>
 800eee8:	2800      	cmp	r0, #0
 800eeea:	d0cb      	beq.n	800ee84 <__swbuf_r+0x28>
 800eeec:	f04f 37ff 	mov.w	r7, #4294967295
 800eef0:	e7ea      	b.n	800eec8 <__swbuf_r+0x6c>
 800eef2:	bf00      	nop
 800eef4:	08011684 	.word	0x08011684
 800eef8:	080116a4 	.word	0x080116a4
 800eefc:	08011664 	.word	0x08011664

0800ef00 <__swsetup_r>:
 800ef00:	4b32      	ldr	r3, [pc, #200]	; (800efcc <__swsetup_r+0xcc>)
 800ef02:	b570      	push	{r4, r5, r6, lr}
 800ef04:	681d      	ldr	r5, [r3, #0]
 800ef06:	4606      	mov	r6, r0
 800ef08:	460c      	mov	r4, r1
 800ef0a:	b125      	cbz	r5, 800ef16 <__swsetup_r+0x16>
 800ef0c:	69ab      	ldr	r3, [r5, #24]
 800ef0e:	b913      	cbnz	r3, 800ef16 <__swsetup_r+0x16>
 800ef10:	4628      	mov	r0, r5
 800ef12:	f000 fff9 	bl	800ff08 <__sinit>
 800ef16:	4b2e      	ldr	r3, [pc, #184]	; (800efd0 <__swsetup_r+0xd0>)
 800ef18:	429c      	cmp	r4, r3
 800ef1a:	d10f      	bne.n	800ef3c <__swsetup_r+0x3c>
 800ef1c:	686c      	ldr	r4, [r5, #4]
 800ef1e:	89a3      	ldrh	r3, [r4, #12]
 800ef20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef24:	0719      	lsls	r1, r3, #28
 800ef26:	d42c      	bmi.n	800ef82 <__swsetup_r+0x82>
 800ef28:	06dd      	lsls	r5, r3, #27
 800ef2a:	d411      	bmi.n	800ef50 <__swsetup_r+0x50>
 800ef2c:	2309      	movs	r3, #9
 800ef2e:	6033      	str	r3, [r6, #0]
 800ef30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ef34:	81a3      	strh	r3, [r4, #12]
 800ef36:	f04f 30ff 	mov.w	r0, #4294967295
 800ef3a:	e03e      	b.n	800efba <__swsetup_r+0xba>
 800ef3c:	4b25      	ldr	r3, [pc, #148]	; (800efd4 <__swsetup_r+0xd4>)
 800ef3e:	429c      	cmp	r4, r3
 800ef40:	d101      	bne.n	800ef46 <__swsetup_r+0x46>
 800ef42:	68ac      	ldr	r4, [r5, #8]
 800ef44:	e7eb      	b.n	800ef1e <__swsetup_r+0x1e>
 800ef46:	4b24      	ldr	r3, [pc, #144]	; (800efd8 <__swsetup_r+0xd8>)
 800ef48:	429c      	cmp	r4, r3
 800ef4a:	bf08      	it	eq
 800ef4c:	68ec      	ldreq	r4, [r5, #12]
 800ef4e:	e7e6      	b.n	800ef1e <__swsetup_r+0x1e>
 800ef50:	0758      	lsls	r0, r3, #29
 800ef52:	d512      	bpl.n	800ef7a <__swsetup_r+0x7a>
 800ef54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef56:	b141      	cbz	r1, 800ef6a <__swsetup_r+0x6a>
 800ef58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef5c:	4299      	cmp	r1, r3
 800ef5e:	d002      	beq.n	800ef66 <__swsetup_r+0x66>
 800ef60:	4630      	mov	r0, r6
 800ef62:	f001 fc7d 	bl	8010860 <_free_r>
 800ef66:	2300      	movs	r3, #0
 800ef68:	6363      	str	r3, [r4, #52]	; 0x34
 800ef6a:	89a3      	ldrh	r3, [r4, #12]
 800ef6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ef70:	81a3      	strh	r3, [r4, #12]
 800ef72:	2300      	movs	r3, #0
 800ef74:	6063      	str	r3, [r4, #4]
 800ef76:	6923      	ldr	r3, [r4, #16]
 800ef78:	6023      	str	r3, [r4, #0]
 800ef7a:	89a3      	ldrh	r3, [r4, #12]
 800ef7c:	f043 0308 	orr.w	r3, r3, #8
 800ef80:	81a3      	strh	r3, [r4, #12]
 800ef82:	6923      	ldr	r3, [r4, #16]
 800ef84:	b94b      	cbnz	r3, 800ef9a <__swsetup_r+0x9a>
 800ef86:	89a3      	ldrh	r3, [r4, #12]
 800ef88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ef8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef90:	d003      	beq.n	800ef9a <__swsetup_r+0x9a>
 800ef92:	4621      	mov	r1, r4
 800ef94:	4630      	mov	r0, r6
 800ef96:	f001 f881 	bl	801009c <__smakebuf_r>
 800ef9a:	89a0      	ldrh	r0, [r4, #12]
 800ef9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800efa0:	f010 0301 	ands.w	r3, r0, #1
 800efa4:	d00a      	beq.n	800efbc <__swsetup_r+0xbc>
 800efa6:	2300      	movs	r3, #0
 800efa8:	60a3      	str	r3, [r4, #8]
 800efaa:	6963      	ldr	r3, [r4, #20]
 800efac:	425b      	negs	r3, r3
 800efae:	61a3      	str	r3, [r4, #24]
 800efb0:	6923      	ldr	r3, [r4, #16]
 800efb2:	b943      	cbnz	r3, 800efc6 <__swsetup_r+0xc6>
 800efb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800efb8:	d1ba      	bne.n	800ef30 <__swsetup_r+0x30>
 800efba:	bd70      	pop	{r4, r5, r6, pc}
 800efbc:	0781      	lsls	r1, r0, #30
 800efbe:	bf58      	it	pl
 800efc0:	6963      	ldrpl	r3, [r4, #20]
 800efc2:	60a3      	str	r3, [r4, #8]
 800efc4:	e7f4      	b.n	800efb0 <__swsetup_r+0xb0>
 800efc6:	2000      	movs	r0, #0
 800efc8:	e7f7      	b.n	800efba <__swsetup_r+0xba>
 800efca:	bf00      	nop
 800efcc:	2000000c 	.word	0x2000000c
 800efd0:	08011684 	.word	0x08011684
 800efd4:	080116a4 	.word	0x080116a4
 800efd8:	08011664 	.word	0x08011664

0800efdc <quorem>:
 800efdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe0:	6903      	ldr	r3, [r0, #16]
 800efe2:	690c      	ldr	r4, [r1, #16]
 800efe4:	42a3      	cmp	r3, r4
 800efe6:	4607      	mov	r7, r0
 800efe8:	f2c0 8081 	blt.w	800f0ee <quorem+0x112>
 800efec:	3c01      	subs	r4, #1
 800efee:	f101 0814 	add.w	r8, r1, #20
 800eff2:	f100 0514 	add.w	r5, r0, #20
 800eff6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800effa:	9301      	str	r3, [sp, #4]
 800effc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f000:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f004:	3301      	adds	r3, #1
 800f006:	429a      	cmp	r2, r3
 800f008:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f00c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f010:	fbb2 f6f3 	udiv	r6, r2, r3
 800f014:	d331      	bcc.n	800f07a <quorem+0x9e>
 800f016:	f04f 0e00 	mov.w	lr, #0
 800f01a:	4640      	mov	r0, r8
 800f01c:	46ac      	mov	ip, r5
 800f01e:	46f2      	mov	sl, lr
 800f020:	f850 2b04 	ldr.w	r2, [r0], #4
 800f024:	b293      	uxth	r3, r2
 800f026:	fb06 e303 	mla	r3, r6, r3, lr
 800f02a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f02e:	b29b      	uxth	r3, r3
 800f030:	ebaa 0303 	sub.w	r3, sl, r3
 800f034:	f8dc a000 	ldr.w	sl, [ip]
 800f038:	0c12      	lsrs	r2, r2, #16
 800f03a:	fa13 f38a 	uxtah	r3, r3, sl
 800f03e:	fb06 e202 	mla	r2, r6, r2, lr
 800f042:	9300      	str	r3, [sp, #0]
 800f044:	9b00      	ldr	r3, [sp, #0]
 800f046:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f04a:	b292      	uxth	r2, r2
 800f04c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f050:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f054:	f8bd 3000 	ldrh.w	r3, [sp]
 800f058:	4581      	cmp	r9, r0
 800f05a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f05e:	f84c 3b04 	str.w	r3, [ip], #4
 800f062:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f066:	d2db      	bcs.n	800f020 <quorem+0x44>
 800f068:	f855 300b 	ldr.w	r3, [r5, fp]
 800f06c:	b92b      	cbnz	r3, 800f07a <quorem+0x9e>
 800f06e:	9b01      	ldr	r3, [sp, #4]
 800f070:	3b04      	subs	r3, #4
 800f072:	429d      	cmp	r5, r3
 800f074:	461a      	mov	r2, r3
 800f076:	d32e      	bcc.n	800f0d6 <quorem+0xfa>
 800f078:	613c      	str	r4, [r7, #16]
 800f07a:	4638      	mov	r0, r7
 800f07c:	f001 fad8 	bl	8010630 <__mcmp>
 800f080:	2800      	cmp	r0, #0
 800f082:	db24      	blt.n	800f0ce <quorem+0xf2>
 800f084:	3601      	adds	r6, #1
 800f086:	4628      	mov	r0, r5
 800f088:	f04f 0c00 	mov.w	ip, #0
 800f08c:	f858 2b04 	ldr.w	r2, [r8], #4
 800f090:	f8d0 e000 	ldr.w	lr, [r0]
 800f094:	b293      	uxth	r3, r2
 800f096:	ebac 0303 	sub.w	r3, ip, r3
 800f09a:	0c12      	lsrs	r2, r2, #16
 800f09c:	fa13 f38e 	uxtah	r3, r3, lr
 800f0a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f0a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f0a8:	b29b      	uxth	r3, r3
 800f0aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f0ae:	45c1      	cmp	r9, r8
 800f0b0:	f840 3b04 	str.w	r3, [r0], #4
 800f0b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f0b8:	d2e8      	bcs.n	800f08c <quorem+0xb0>
 800f0ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f0be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f0c2:	b922      	cbnz	r2, 800f0ce <quorem+0xf2>
 800f0c4:	3b04      	subs	r3, #4
 800f0c6:	429d      	cmp	r5, r3
 800f0c8:	461a      	mov	r2, r3
 800f0ca:	d30a      	bcc.n	800f0e2 <quorem+0x106>
 800f0cc:	613c      	str	r4, [r7, #16]
 800f0ce:	4630      	mov	r0, r6
 800f0d0:	b003      	add	sp, #12
 800f0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0d6:	6812      	ldr	r2, [r2, #0]
 800f0d8:	3b04      	subs	r3, #4
 800f0da:	2a00      	cmp	r2, #0
 800f0dc:	d1cc      	bne.n	800f078 <quorem+0x9c>
 800f0de:	3c01      	subs	r4, #1
 800f0e0:	e7c7      	b.n	800f072 <quorem+0x96>
 800f0e2:	6812      	ldr	r2, [r2, #0]
 800f0e4:	3b04      	subs	r3, #4
 800f0e6:	2a00      	cmp	r2, #0
 800f0e8:	d1f0      	bne.n	800f0cc <quorem+0xf0>
 800f0ea:	3c01      	subs	r4, #1
 800f0ec:	e7eb      	b.n	800f0c6 <quorem+0xea>
 800f0ee:	2000      	movs	r0, #0
 800f0f0:	e7ee      	b.n	800f0d0 <quorem+0xf4>
 800f0f2:	0000      	movs	r0, r0
 800f0f4:	0000      	movs	r0, r0
	...

0800f0f8 <_dtoa_r>:
 800f0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0fc:	ed2d 8b04 	vpush	{d8-d9}
 800f100:	ec57 6b10 	vmov	r6, r7, d0
 800f104:	b093      	sub	sp, #76	; 0x4c
 800f106:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f108:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f10c:	9106      	str	r1, [sp, #24]
 800f10e:	ee10 aa10 	vmov	sl, s0
 800f112:	4604      	mov	r4, r0
 800f114:	9209      	str	r2, [sp, #36]	; 0x24
 800f116:	930c      	str	r3, [sp, #48]	; 0x30
 800f118:	46bb      	mov	fp, r7
 800f11a:	b975      	cbnz	r5, 800f13a <_dtoa_r+0x42>
 800f11c:	2010      	movs	r0, #16
 800f11e:	f000 fffd 	bl	801011c <malloc>
 800f122:	4602      	mov	r2, r0
 800f124:	6260      	str	r0, [r4, #36]	; 0x24
 800f126:	b920      	cbnz	r0, 800f132 <_dtoa_r+0x3a>
 800f128:	4ba7      	ldr	r3, [pc, #668]	; (800f3c8 <_dtoa_r+0x2d0>)
 800f12a:	21ea      	movs	r1, #234	; 0xea
 800f12c:	48a7      	ldr	r0, [pc, #668]	; (800f3cc <_dtoa_r+0x2d4>)
 800f12e:	f001 ffdb 	bl	80110e8 <__assert_func>
 800f132:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f136:	6005      	str	r5, [r0, #0]
 800f138:	60c5      	str	r5, [r0, #12]
 800f13a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f13c:	6819      	ldr	r1, [r3, #0]
 800f13e:	b151      	cbz	r1, 800f156 <_dtoa_r+0x5e>
 800f140:	685a      	ldr	r2, [r3, #4]
 800f142:	604a      	str	r2, [r1, #4]
 800f144:	2301      	movs	r3, #1
 800f146:	4093      	lsls	r3, r2
 800f148:	608b      	str	r3, [r1, #8]
 800f14a:	4620      	mov	r0, r4
 800f14c:	f001 f82e 	bl	80101ac <_Bfree>
 800f150:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f152:	2200      	movs	r2, #0
 800f154:	601a      	str	r2, [r3, #0]
 800f156:	1e3b      	subs	r3, r7, #0
 800f158:	bfaa      	itet	ge
 800f15a:	2300      	movge	r3, #0
 800f15c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f160:	f8c8 3000 	strge.w	r3, [r8]
 800f164:	4b9a      	ldr	r3, [pc, #616]	; (800f3d0 <_dtoa_r+0x2d8>)
 800f166:	bfbc      	itt	lt
 800f168:	2201      	movlt	r2, #1
 800f16a:	f8c8 2000 	strlt.w	r2, [r8]
 800f16e:	ea33 030b 	bics.w	r3, r3, fp
 800f172:	d11b      	bne.n	800f1ac <_dtoa_r+0xb4>
 800f174:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f176:	f242 730f 	movw	r3, #9999	; 0x270f
 800f17a:	6013      	str	r3, [r2, #0]
 800f17c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f180:	4333      	orrs	r3, r6
 800f182:	f000 8592 	beq.w	800fcaa <_dtoa_r+0xbb2>
 800f186:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f188:	b963      	cbnz	r3, 800f1a4 <_dtoa_r+0xac>
 800f18a:	4b92      	ldr	r3, [pc, #584]	; (800f3d4 <_dtoa_r+0x2dc>)
 800f18c:	e022      	b.n	800f1d4 <_dtoa_r+0xdc>
 800f18e:	4b92      	ldr	r3, [pc, #584]	; (800f3d8 <_dtoa_r+0x2e0>)
 800f190:	9301      	str	r3, [sp, #4]
 800f192:	3308      	adds	r3, #8
 800f194:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f196:	6013      	str	r3, [r2, #0]
 800f198:	9801      	ldr	r0, [sp, #4]
 800f19a:	b013      	add	sp, #76	; 0x4c
 800f19c:	ecbd 8b04 	vpop	{d8-d9}
 800f1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1a4:	4b8b      	ldr	r3, [pc, #556]	; (800f3d4 <_dtoa_r+0x2dc>)
 800f1a6:	9301      	str	r3, [sp, #4]
 800f1a8:	3303      	adds	r3, #3
 800f1aa:	e7f3      	b.n	800f194 <_dtoa_r+0x9c>
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	4650      	mov	r0, sl
 800f1b2:	4659      	mov	r1, fp
 800f1b4:	f7f1 fc88 	bl	8000ac8 <__aeabi_dcmpeq>
 800f1b8:	ec4b ab19 	vmov	d9, sl, fp
 800f1bc:	4680      	mov	r8, r0
 800f1be:	b158      	cbz	r0, 800f1d8 <_dtoa_r+0xe0>
 800f1c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	6013      	str	r3, [r2, #0]
 800f1c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	f000 856b 	beq.w	800fca4 <_dtoa_r+0xbac>
 800f1ce:	4883      	ldr	r0, [pc, #524]	; (800f3dc <_dtoa_r+0x2e4>)
 800f1d0:	6018      	str	r0, [r3, #0]
 800f1d2:	1e43      	subs	r3, r0, #1
 800f1d4:	9301      	str	r3, [sp, #4]
 800f1d6:	e7df      	b.n	800f198 <_dtoa_r+0xa0>
 800f1d8:	ec4b ab10 	vmov	d0, sl, fp
 800f1dc:	aa10      	add	r2, sp, #64	; 0x40
 800f1de:	a911      	add	r1, sp, #68	; 0x44
 800f1e0:	4620      	mov	r0, r4
 800f1e2:	f001 facb 	bl	801077c <__d2b>
 800f1e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f1ea:	ee08 0a10 	vmov	s16, r0
 800f1ee:	2d00      	cmp	r5, #0
 800f1f0:	f000 8084 	beq.w	800f2fc <_dtoa_r+0x204>
 800f1f4:	ee19 3a90 	vmov	r3, s19
 800f1f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f1fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f200:	4656      	mov	r6, sl
 800f202:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f206:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f20a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f20e:	4b74      	ldr	r3, [pc, #464]	; (800f3e0 <_dtoa_r+0x2e8>)
 800f210:	2200      	movs	r2, #0
 800f212:	4630      	mov	r0, r6
 800f214:	4639      	mov	r1, r7
 800f216:	f7f1 f837 	bl	8000288 <__aeabi_dsub>
 800f21a:	a365      	add	r3, pc, #404	; (adr r3, 800f3b0 <_dtoa_r+0x2b8>)
 800f21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f220:	f7f1 f9ea 	bl	80005f8 <__aeabi_dmul>
 800f224:	a364      	add	r3, pc, #400	; (adr r3, 800f3b8 <_dtoa_r+0x2c0>)
 800f226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22a:	f7f1 f82f 	bl	800028c <__adddf3>
 800f22e:	4606      	mov	r6, r0
 800f230:	4628      	mov	r0, r5
 800f232:	460f      	mov	r7, r1
 800f234:	f7f1 f976 	bl	8000524 <__aeabi_i2d>
 800f238:	a361      	add	r3, pc, #388	; (adr r3, 800f3c0 <_dtoa_r+0x2c8>)
 800f23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f23e:	f7f1 f9db 	bl	80005f8 <__aeabi_dmul>
 800f242:	4602      	mov	r2, r0
 800f244:	460b      	mov	r3, r1
 800f246:	4630      	mov	r0, r6
 800f248:	4639      	mov	r1, r7
 800f24a:	f7f1 f81f 	bl	800028c <__adddf3>
 800f24e:	4606      	mov	r6, r0
 800f250:	460f      	mov	r7, r1
 800f252:	f7f1 fc81 	bl	8000b58 <__aeabi_d2iz>
 800f256:	2200      	movs	r2, #0
 800f258:	9000      	str	r0, [sp, #0]
 800f25a:	2300      	movs	r3, #0
 800f25c:	4630      	mov	r0, r6
 800f25e:	4639      	mov	r1, r7
 800f260:	f7f1 fc3c 	bl	8000adc <__aeabi_dcmplt>
 800f264:	b150      	cbz	r0, 800f27c <_dtoa_r+0x184>
 800f266:	9800      	ldr	r0, [sp, #0]
 800f268:	f7f1 f95c 	bl	8000524 <__aeabi_i2d>
 800f26c:	4632      	mov	r2, r6
 800f26e:	463b      	mov	r3, r7
 800f270:	f7f1 fc2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800f274:	b910      	cbnz	r0, 800f27c <_dtoa_r+0x184>
 800f276:	9b00      	ldr	r3, [sp, #0]
 800f278:	3b01      	subs	r3, #1
 800f27a:	9300      	str	r3, [sp, #0]
 800f27c:	9b00      	ldr	r3, [sp, #0]
 800f27e:	2b16      	cmp	r3, #22
 800f280:	d85a      	bhi.n	800f338 <_dtoa_r+0x240>
 800f282:	9a00      	ldr	r2, [sp, #0]
 800f284:	4b57      	ldr	r3, [pc, #348]	; (800f3e4 <_dtoa_r+0x2ec>)
 800f286:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f28e:	ec51 0b19 	vmov	r0, r1, d9
 800f292:	f7f1 fc23 	bl	8000adc <__aeabi_dcmplt>
 800f296:	2800      	cmp	r0, #0
 800f298:	d050      	beq.n	800f33c <_dtoa_r+0x244>
 800f29a:	9b00      	ldr	r3, [sp, #0]
 800f29c:	3b01      	subs	r3, #1
 800f29e:	9300      	str	r3, [sp, #0]
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800f2a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f2a6:	1b5d      	subs	r5, r3, r5
 800f2a8:	1e6b      	subs	r3, r5, #1
 800f2aa:	9305      	str	r3, [sp, #20]
 800f2ac:	bf45      	ittet	mi
 800f2ae:	f1c5 0301 	rsbmi	r3, r5, #1
 800f2b2:	9304      	strmi	r3, [sp, #16]
 800f2b4:	2300      	movpl	r3, #0
 800f2b6:	2300      	movmi	r3, #0
 800f2b8:	bf4c      	ite	mi
 800f2ba:	9305      	strmi	r3, [sp, #20]
 800f2bc:	9304      	strpl	r3, [sp, #16]
 800f2be:	9b00      	ldr	r3, [sp, #0]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	db3d      	blt.n	800f340 <_dtoa_r+0x248>
 800f2c4:	9b05      	ldr	r3, [sp, #20]
 800f2c6:	9a00      	ldr	r2, [sp, #0]
 800f2c8:	920a      	str	r2, [sp, #40]	; 0x28
 800f2ca:	4413      	add	r3, r2
 800f2cc:	9305      	str	r3, [sp, #20]
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	9307      	str	r3, [sp, #28]
 800f2d2:	9b06      	ldr	r3, [sp, #24]
 800f2d4:	2b09      	cmp	r3, #9
 800f2d6:	f200 8089 	bhi.w	800f3ec <_dtoa_r+0x2f4>
 800f2da:	2b05      	cmp	r3, #5
 800f2dc:	bfc4      	itt	gt
 800f2de:	3b04      	subgt	r3, #4
 800f2e0:	9306      	strgt	r3, [sp, #24]
 800f2e2:	9b06      	ldr	r3, [sp, #24]
 800f2e4:	f1a3 0302 	sub.w	r3, r3, #2
 800f2e8:	bfcc      	ite	gt
 800f2ea:	2500      	movgt	r5, #0
 800f2ec:	2501      	movle	r5, #1
 800f2ee:	2b03      	cmp	r3, #3
 800f2f0:	f200 8087 	bhi.w	800f402 <_dtoa_r+0x30a>
 800f2f4:	e8df f003 	tbb	[pc, r3]
 800f2f8:	59383a2d 	.word	0x59383a2d
 800f2fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f300:	441d      	add	r5, r3
 800f302:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f306:	2b20      	cmp	r3, #32
 800f308:	bfc1      	itttt	gt
 800f30a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f30e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f312:	fa0b f303 	lslgt.w	r3, fp, r3
 800f316:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f31a:	bfda      	itte	le
 800f31c:	f1c3 0320 	rsble	r3, r3, #32
 800f320:	fa06 f003 	lslle.w	r0, r6, r3
 800f324:	4318      	orrgt	r0, r3
 800f326:	f7f1 f8ed 	bl	8000504 <__aeabi_ui2d>
 800f32a:	2301      	movs	r3, #1
 800f32c:	4606      	mov	r6, r0
 800f32e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f332:	3d01      	subs	r5, #1
 800f334:	930e      	str	r3, [sp, #56]	; 0x38
 800f336:	e76a      	b.n	800f20e <_dtoa_r+0x116>
 800f338:	2301      	movs	r3, #1
 800f33a:	e7b2      	b.n	800f2a2 <_dtoa_r+0x1aa>
 800f33c:	900b      	str	r0, [sp, #44]	; 0x2c
 800f33e:	e7b1      	b.n	800f2a4 <_dtoa_r+0x1ac>
 800f340:	9b04      	ldr	r3, [sp, #16]
 800f342:	9a00      	ldr	r2, [sp, #0]
 800f344:	1a9b      	subs	r3, r3, r2
 800f346:	9304      	str	r3, [sp, #16]
 800f348:	4253      	negs	r3, r2
 800f34a:	9307      	str	r3, [sp, #28]
 800f34c:	2300      	movs	r3, #0
 800f34e:	930a      	str	r3, [sp, #40]	; 0x28
 800f350:	e7bf      	b.n	800f2d2 <_dtoa_r+0x1da>
 800f352:	2300      	movs	r3, #0
 800f354:	9308      	str	r3, [sp, #32]
 800f356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f358:	2b00      	cmp	r3, #0
 800f35a:	dc55      	bgt.n	800f408 <_dtoa_r+0x310>
 800f35c:	2301      	movs	r3, #1
 800f35e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f362:	461a      	mov	r2, r3
 800f364:	9209      	str	r2, [sp, #36]	; 0x24
 800f366:	e00c      	b.n	800f382 <_dtoa_r+0x28a>
 800f368:	2301      	movs	r3, #1
 800f36a:	e7f3      	b.n	800f354 <_dtoa_r+0x25c>
 800f36c:	2300      	movs	r3, #0
 800f36e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f370:	9308      	str	r3, [sp, #32]
 800f372:	9b00      	ldr	r3, [sp, #0]
 800f374:	4413      	add	r3, r2
 800f376:	9302      	str	r3, [sp, #8]
 800f378:	3301      	adds	r3, #1
 800f37a:	2b01      	cmp	r3, #1
 800f37c:	9303      	str	r3, [sp, #12]
 800f37e:	bfb8      	it	lt
 800f380:	2301      	movlt	r3, #1
 800f382:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f384:	2200      	movs	r2, #0
 800f386:	6042      	str	r2, [r0, #4]
 800f388:	2204      	movs	r2, #4
 800f38a:	f102 0614 	add.w	r6, r2, #20
 800f38e:	429e      	cmp	r6, r3
 800f390:	6841      	ldr	r1, [r0, #4]
 800f392:	d93d      	bls.n	800f410 <_dtoa_r+0x318>
 800f394:	4620      	mov	r0, r4
 800f396:	f000 fec9 	bl	801012c <_Balloc>
 800f39a:	9001      	str	r0, [sp, #4]
 800f39c:	2800      	cmp	r0, #0
 800f39e:	d13b      	bne.n	800f418 <_dtoa_r+0x320>
 800f3a0:	4b11      	ldr	r3, [pc, #68]	; (800f3e8 <_dtoa_r+0x2f0>)
 800f3a2:	4602      	mov	r2, r0
 800f3a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f3a8:	e6c0      	b.n	800f12c <_dtoa_r+0x34>
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	e7df      	b.n	800f36e <_dtoa_r+0x276>
 800f3ae:	bf00      	nop
 800f3b0:	636f4361 	.word	0x636f4361
 800f3b4:	3fd287a7 	.word	0x3fd287a7
 800f3b8:	8b60c8b3 	.word	0x8b60c8b3
 800f3bc:	3fc68a28 	.word	0x3fc68a28
 800f3c0:	509f79fb 	.word	0x509f79fb
 800f3c4:	3fd34413 	.word	0x3fd34413
 800f3c8:	080115e1 	.word	0x080115e1
 800f3cc:	080115f8 	.word	0x080115f8
 800f3d0:	7ff00000 	.word	0x7ff00000
 800f3d4:	080115dd 	.word	0x080115dd
 800f3d8:	080115d4 	.word	0x080115d4
 800f3dc:	080115b1 	.word	0x080115b1
 800f3e0:	3ff80000 	.word	0x3ff80000
 800f3e4:	08011748 	.word	0x08011748
 800f3e8:	08011653 	.word	0x08011653
 800f3ec:	2501      	movs	r5, #1
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	9306      	str	r3, [sp, #24]
 800f3f2:	9508      	str	r5, [sp, #32]
 800f3f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f3f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	2312      	movs	r3, #18
 800f400:	e7b0      	b.n	800f364 <_dtoa_r+0x26c>
 800f402:	2301      	movs	r3, #1
 800f404:	9308      	str	r3, [sp, #32]
 800f406:	e7f5      	b.n	800f3f4 <_dtoa_r+0x2fc>
 800f408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f40a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f40e:	e7b8      	b.n	800f382 <_dtoa_r+0x28a>
 800f410:	3101      	adds	r1, #1
 800f412:	6041      	str	r1, [r0, #4]
 800f414:	0052      	lsls	r2, r2, #1
 800f416:	e7b8      	b.n	800f38a <_dtoa_r+0x292>
 800f418:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f41a:	9a01      	ldr	r2, [sp, #4]
 800f41c:	601a      	str	r2, [r3, #0]
 800f41e:	9b03      	ldr	r3, [sp, #12]
 800f420:	2b0e      	cmp	r3, #14
 800f422:	f200 809d 	bhi.w	800f560 <_dtoa_r+0x468>
 800f426:	2d00      	cmp	r5, #0
 800f428:	f000 809a 	beq.w	800f560 <_dtoa_r+0x468>
 800f42c:	9b00      	ldr	r3, [sp, #0]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	dd32      	ble.n	800f498 <_dtoa_r+0x3a0>
 800f432:	4ab7      	ldr	r2, [pc, #732]	; (800f710 <_dtoa_r+0x618>)
 800f434:	f003 030f 	and.w	r3, r3, #15
 800f438:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f43c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f440:	9b00      	ldr	r3, [sp, #0]
 800f442:	05d8      	lsls	r0, r3, #23
 800f444:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f448:	d516      	bpl.n	800f478 <_dtoa_r+0x380>
 800f44a:	4bb2      	ldr	r3, [pc, #712]	; (800f714 <_dtoa_r+0x61c>)
 800f44c:	ec51 0b19 	vmov	r0, r1, d9
 800f450:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f454:	f7f1 f9fa 	bl	800084c <__aeabi_ddiv>
 800f458:	f007 070f 	and.w	r7, r7, #15
 800f45c:	4682      	mov	sl, r0
 800f45e:	468b      	mov	fp, r1
 800f460:	2503      	movs	r5, #3
 800f462:	4eac      	ldr	r6, [pc, #688]	; (800f714 <_dtoa_r+0x61c>)
 800f464:	b957      	cbnz	r7, 800f47c <_dtoa_r+0x384>
 800f466:	4642      	mov	r2, r8
 800f468:	464b      	mov	r3, r9
 800f46a:	4650      	mov	r0, sl
 800f46c:	4659      	mov	r1, fp
 800f46e:	f7f1 f9ed 	bl	800084c <__aeabi_ddiv>
 800f472:	4682      	mov	sl, r0
 800f474:	468b      	mov	fp, r1
 800f476:	e028      	b.n	800f4ca <_dtoa_r+0x3d2>
 800f478:	2502      	movs	r5, #2
 800f47a:	e7f2      	b.n	800f462 <_dtoa_r+0x36a>
 800f47c:	07f9      	lsls	r1, r7, #31
 800f47e:	d508      	bpl.n	800f492 <_dtoa_r+0x39a>
 800f480:	4640      	mov	r0, r8
 800f482:	4649      	mov	r1, r9
 800f484:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f488:	f7f1 f8b6 	bl	80005f8 <__aeabi_dmul>
 800f48c:	3501      	adds	r5, #1
 800f48e:	4680      	mov	r8, r0
 800f490:	4689      	mov	r9, r1
 800f492:	107f      	asrs	r7, r7, #1
 800f494:	3608      	adds	r6, #8
 800f496:	e7e5      	b.n	800f464 <_dtoa_r+0x36c>
 800f498:	f000 809b 	beq.w	800f5d2 <_dtoa_r+0x4da>
 800f49c:	9b00      	ldr	r3, [sp, #0]
 800f49e:	4f9d      	ldr	r7, [pc, #628]	; (800f714 <_dtoa_r+0x61c>)
 800f4a0:	425e      	negs	r6, r3
 800f4a2:	4b9b      	ldr	r3, [pc, #620]	; (800f710 <_dtoa_r+0x618>)
 800f4a4:	f006 020f 	and.w	r2, r6, #15
 800f4a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b0:	ec51 0b19 	vmov	r0, r1, d9
 800f4b4:	f7f1 f8a0 	bl	80005f8 <__aeabi_dmul>
 800f4b8:	1136      	asrs	r6, r6, #4
 800f4ba:	4682      	mov	sl, r0
 800f4bc:	468b      	mov	fp, r1
 800f4be:	2300      	movs	r3, #0
 800f4c0:	2502      	movs	r5, #2
 800f4c2:	2e00      	cmp	r6, #0
 800f4c4:	d17a      	bne.n	800f5bc <_dtoa_r+0x4c4>
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d1d3      	bne.n	800f472 <_dtoa_r+0x37a>
 800f4ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	f000 8082 	beq.w	800f5d6 <_dtoa_r+0x4de>
 800f4d2:	4b91      	ldr	r3, [pc, #580]	; (800f718 <_dtoa_r+0x620>)
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	4650      	mov	r0, sl
 800f4d8:	4659      	mov	r1, fp
 800f4da:	f7f1 faff 	bl	8000adc <__aeabi_dcmplt>
 800f4de:	2800      	cmp	r0, #0
 800f4e0:	d079      	beq.n	800f5d6 <_dtoa_r+0x4de>
 800f4e2:	9b03      	ldr	r3, [sp, #12]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d076      	beq.n	800f5d6 <_dtoa_r+0x4de>
 800f4e8:	9b02      	ldr	r3, [sp, #8]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	dd36      	ble.n	800f55c <_dtoa_r+0x464>
 800f4ee:	9b00      	ldr	r3, [sp, #0]
 800f4f0:	4650      	mov	r0, sl
 800f4f2:	4659      	mov	r1, fp
 800f4f4:	1e5f      	subs	r7, r3, #1
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	4b88      	ldr	r3, [pc, #544]	; (800f71c <_dtoa_r+0x624>)
 800f4fa:	f7f1 f87d 	bl	80005f8 <__aeabi_dmul>
 800f4fe:	9e02      	ldr	r6, [sp, #8]
 800f500:	4682      	mov	sl, r0
 800f502:	468b      	mov	fp, r1
 800f504:	3501      	adds	r5, #1
 800f506:	4628      	mov	r0, r5
 800f508:	f7f1 f80c 	bl	8000524 <__aeabi_i2d>
 800f50c:	4652      	mov	r2, sl
 800f50e:	465b      	mov	r3, fp
 800f510:	f7f1 f872 	bl	80005f8 <__aeabi_dmul>
 800f514:	4b82      	ldr	r3, [pc, #520]	; (800f720 <_dtoa_r+0x628>)
 800f516:	2200      	movs	r2, #0
 800f518:	f7f0 feb8 	bl	800028c <__adddf3>
 800f51c:	46d0      	mov	r8, sl
 800f51e:	46d9      	mov	r9, fp
 800f520:	4682      	mov	sl, r0
 800f522:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f526:	2e00      	cmp	r6, #0
 800f528:	d158      	bne.n	800f5dc <_dtoa_r+0x4e4>
 800f52a:	4b7e      	ldr	r3, [pc, #504]	; (800f724 <_dtoa_r+0x62c>)
 800f52c:	2200      	movs	r2, #0
 800f52e:	4640      	mov	r0, r8
 800f530:	4649      	mov	r1, r9
 800f532:	f7f0 fea9 	bl	8000288 <__aeabi_dsub>
 800f536:	4652      	mov	r2, sl
 800f538:	465b      	mov	r3, fp
 800f53a:	4680      	mov	r8, r0
 800f53c:	4689      	mov	r9, r1
 800f53e:	f7f1 faeb 	bl	8000b18 <__aeabi_dcmpgt>
 800f542:	2800      	cmp	r0, #0
 800f544:	f040 8295 	bne.w	800fa72 <_dtoa_r+0x97a>
 800f548:	4652      	mov	r2, sl
 800f54a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f54e:	4640      	mov	r0, r8
 800f550:	4649      	mov	r1, r9
 800f552:	f7f1 fac3 	bl	8000adc <__aeabi_dcmplt>
 800f556:	2800      	cmp	r0, #0
 800f558:	f040 8289 	bne.w	800fa6e <_dtoa_r+0x976>
 800f55c:	ec5b ab19 	vmov	sl, fp, d9
 800f560:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f562:	2b00      	cmp	r3, #0
 800f564:	f2c0 8148 	blt.w	800f7f8 <_dtoa_r+0x700>
 800f568:	9a00      	ldr	r2, [sp, #0]
 800f56a:	2a0e      	cmp	r2, #14
 800f56c:	f300 8144 	bgt.w	800f7f8 <_dtoa_r+0x700>
 800f570:	4b67      	ldr	r3, [pc, #412]	; (800f710 <_dtoa_r+0x618>)
 800f572:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f576:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f57a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	f280 80d5 	bge.w	800f72c <_dtoa_r+0x634>
 800f582:	9b03      	ldr	r3, [sp, #12]
 800f584:	2b00      	cmp	r3, #0
 800f586:	f300 80d1 	bgt.w	800f72c <_dtoa_r+0x634>
 800f58a:	f040 826f 	bne.w	800fa6c <_dtoa_r+0x974>
 800f58e:	4b65      	ldr	r3, [pc, #404]	; (800f724 <_dtoa_r+0x62c>)
 800f590:	2200      	movs	r2, #0
 800f592:	4640      	mov	r0, r8
 800f594:	4649      	mov	r1, r9
 800f596:	f7f1 f82f 	bl	80005f8 <__aeabi_dmul>
 800f59a:	4652      	mov	r2, sl
 800f59c:	465b      	mov	r3, fp
 800f59e:	f7f1 fab1 	bl	8000b04 <__aeabi_dcmpge>
 800f5a2:	9e03      	ldr	r6, [sp, #12]
 800f5a4:	4637      	mov	r7, r6
 800f5a6:	2800      	cmp	r0, #0
 800f5a8:	f040 8245 	bne.w	800fa36 <_dtoa_r+0x93e>
 800f5ac:	9d01      	ldr	r5, [sp, #4]
 800f5ae:	2331      	movs	r3, #49	; 0x31
 800f5b0:	f805 3b01 	strb.w	r3, [r5], #1
 800f5b4:	9b00      	ldr	r3, [sp, #0]
 800f5b6:	3301      	adds	r3, #1
 800f5b8:	9300      	str	r3, [sp, #0]
 800f5ba:	e240      	b.n	800fa3e <_dtoa_r+0x946>
 800f5bc:	07f2      	lsls	r2, r6, #31
 800f5be:	d505      	bpl.n	800f5cc <_dtoa_r+0x4d4>
 800f5c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5c4:	f7f1 f818 	bl	80005f8 <__aeabi_dmul>
 800f5c8:	3501      	adds	r5, #1
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	1076      	asrs	r6, r6, #1
 800f5ce:	3708      	adds	r7, #8
 800f5d0:	e777      	b.n	800f4c2 <_dtoa_r+0x3ca>
 800f5d2:	2502      	movs	r5, #2
 800f5d4:	e779      	b.n	800f4ca <_dtoa_r+0x3d2>
 800f5d6:	9f00      	ldr	r7, [sp, #0]
 800f5d8:	9e03      	ldr	r6, [sp, #12]
 800f5da:	e794      	b.n	800f506 <_dtoa_r+0x40e>
 800f5dc:	9901      	ldr	r1, [sp, #4]
 800f5de:	4b4c      	ldr	r3, [pc, #304]	; (800f710 <_dtoa_r+0x618>)
 800f5e0:	4431      	add	r1, r6
 800f5e2:	910d      	str	r1, [sp, #52]	; 0x34
 800f5e4:	9908      	ldr	r1, [sp, #32]
 800f5e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f5ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f5ee:	2900      	cmp	r1, #0
 800f5f0:	d043      	beq.n	800f67a <_dtoa_r+0x582>
 800f5f2:	494d      	ldr	r1, [pc, #308]	; (800f728 <_dtoa_r+0x630>)
 800f5f4:	2000      	movs	r0, #0
 800f5f6:	f7f1 f929 	bl	800084c <__aeabi_ddiv>
 800f5fa:	4652      	mov	r2, sl
 800f5fc:	465b      	mov	r3, fp
 800f5fe:	f7f0 fe43 	bl	8000288 <__aeabi_dsub>
 800f602:	9d01      	ldr	r5, [sp, #4]
 800f604:	4682      	mov	sl, r0
 800f606:	468b      	mov	fp, r1
 800f608:	4649      	mov	r1, r9
 800f60a:	4640      	mov	r0, r8
 800f60c:	f7f1 faa4 	bl	8000b58 <__aeabi_d2iz>
 800f610:	4606      	mov	r6, r0
 800f612:	f7f0 ff87 	bl	8000524 <__aeabi_i2d>
 800f616:	4602      	mov	r2, r0
 800f618:	460b      	mov	r3, r1
 800f61a:	4640      	mov	r0, r8
 800f61c:	4649      	mov	r1, r9
 800f61e:	f7f0 fe33 	bl	8000288 <__aeabi_dsub>
 800f622:	3630      	adds	r6, #48	; 0x30
 800f624:	f805 6b01 	strb.w	r6, [r5], #1
 800f628:	4652      	mov	r2, sl
 800f62a:	465b      	mov	r3, fp
 800f62c:	4680      	mov	r8, r0
 800f62e:	4689      	mov	r9, r1
 800f630:	f7f1 fa54 	bl	8000adc <__aeabi_dcmplt>
 800f634:	2800      	cmp	r0, #0
 800f636:	d163      	bne.n	800f700 <_dtoa_r+0x608>
 800f638:	4642      	mov	r2, r8
 800f63a:	464b      	mov	r3, r9
 800f63c:	4936      	ldr	r1, [pc, #216]	; (800f718 <_dtoa_r+0x620>)
 800f63e:	2000      	movs	r0, #0
 800f640:	f7f0 fe22 	bl	8000288 <__aeabi_dsub>
 800f644:	4652      	mov	r2, sl
 800f646:	465b      	mov	r3, fp
 800f648:	f7f1 fa48 	bl	8000adc <__aeabi_dcmplt>
 800f64c:	2800      	cmp	r0, #0
 800f64e:	f040 80b5 	bne.w	800f7bc <_dtoa_r+0x6c4>
 800f652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f654:	429d      	cmp	r5, r3
 800f656:	d081      	beq.n	800f55c <_dtoa_r+0x464>
 800f658:	4b30      	ldr	r3, [pc, #192]	; (800f71c <_dtoa_r+0x624>)
 800f65a:	2200      	movs	r2, #0
 800f65c:	4650      	mov	r0, sl
 800f65e:	4659      	mov	r1, fp
 800f660:	f7f0 ffca 	bl	80005f8 <__aeabi_dmul>
 800f664:	4b2d      	ldr	r3, [pc, #180]	; (800f71c <_dtoa_r+0x624>)
 800f666:	4682      	mov	sl, r0
 800f668:	468b      	mov	fp, r1
 800f66a:	4640      	mov	r0, r8
 800f66c:	4649      	mov	r1, r9
 800f66e:	2200      	movs	r2, #0
 800f670:	f7f0 ffc2 	bl	80005f8 <__aeabi_dmul>
 800f674:	4680      	mov	r8, r0
 800f676:	4689      	mov	r9, r1
 800f678:	e7c6      	b.n	800f608 <_dtoa_r+0x510>
 800f67a:	4650      	mov	r0, sl
 800f67c:	4659      	mov	r1, fp
 800f67e:	f7f0 ffbb 	bl	80005f8 <__aeabi_dmul>
 800f682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f684:	9d01      	ldr	r5, [sp, #4]
 800f686:	930f      	str	r3, [sp, #60]	; 0x3c
 800f688:	4682      	mov	sl, r0
 800f68a:	468b      	mov	fp, r1
 800f68c:	4649      	mov	r1, r9
 800f68e:	4640      	mov	r0, r8
 800f690:	f7f1 fa62 	bl	8000b58 <__aeabi_d2iz>
 800f694:	4606      	mov	r6, r0
 800f696:	f7f0 ff45 	bl	8000524 <__aeabi_i2d>
 800f69a:	3630      	adds	r6, #48	; 0x30
 800f69c:	4602      	mov	r2, r0
 800f69e:	460b      	mov	r3, r1
 800f6a0:	4640      	mov	r0, r8
 800f6a2:	4649      	mov	r1, r9
 800f6a4:	f7f0 fdf0 	bl	8000288 <__aeabi_dsub>
 800f6a8:	f805 6b01 	strb.w	r6, [r5], #1
 800f6ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f6ae:	429d      	cmp	r5, r3
 800f6b0:	4680      	mov	r8, r0
 800f6b2:	4689      	mov	r9, r1
 800f6b4:	f04f 0200 	mov.w	r2, #0
 800f6b8:	d124      	bne.n	800f704 <_dtoa_r+0x60c>
 800f6ba:	4b1b      	ldr	r3, [pc, #108]	; (800f728 <_dtoa_r+0x630>)
 800f6bc:	4650      	mov	r0, sl
 800f6be:	4659      	mov	r1, fp
 800f6c0:	f7f0 fde4 	bl	800028c <__adddf3>
 800f6c4:	4602      	mov	r2, r0
 800f6c6:	460b      	mov	r3, r1
 800f6c8:	4640      	mov	r0, r8
 800f6ca:	4649      	mov	r1, r9
 800f6cc:	f7f1 fa24 	bl	8000b18 <__aeabi_dcmpgt>
 800f6d0:	2800      	cmp	r0, #0
 800f6d2:	d173      	bne.n	800f7bc <_dtoa_r+0x6c4>
 800f6d4:	4652      	mov	r2, sl
 800f6d6:	465b      	mov	r3, fp
 800f6d8:	4913      	ldr	r1, [pc, #76]	; (800f728 <_dtoa_r+0x630>)
 800f6da:	2000      	movs	r0, #0
 800f6dc:	f7f0 fdd4 	bl	8000288 <__aeabi_dsub>
 800f6e0:	4602      	mov	r2, r0
 800f6e2:	460b      	mov	r3, r1
 800f6e4:	4640      	mov	r0, r8
 800f6e6:	4649      	mov	r1, r9
 800f6e8:	f7f1 f9f8 	bl	8000adc <__aeabi_dcmplt>
 800f6ec:	2800      	cmp	r0, #0
 800f6ee:	f43f af35 	beq.w	800f55c <_dtoa_r+0x464>
 800f6f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f6f4:	1e6b      	subs	r3, r5, #1
 800f6f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800f6f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f6fc:	2b30      	cmp	r3, #48	; 0x30
 800f6fe:	d0f8      	beq.n	800f6f2 <_dtoa_r+0x5fa>
 800f700:	9700      	str	r7, [sp, #0]
 800f702:	e049      	b.n	800f798 <_dtoa_r+0x6a0>
 800f704:	4b05      	ldr	r3, [pc, #20]	; (800f71c <_dtoa_r+0x624>)
 800f706:	f7f0 ff77 	bl	80005f8 <__aeabi_dmul>
 800f70a:	4680      	mov	r8, r0
 800f70c:	4689      	mov	r9, r1
 800f70e:	e7bd      	b.n	800f68c <_dtoa_r+0x594>
 800f710:	08011748 	.word	0x08011748
 800f714:	08011720 	.word	0x08011720
 800f718:	3ff00000 	.word	0x3ff00000
 800f71c:	40240000 	.word	0x40240000
 800f720:	401c0000 	.word	0x401c0000
 800f724:	40140000 	.word	0x40140000
 800f728:	3fe00000 	.word	0x3fe00000
 800f72c:	9d01      	ldr	r5, [sp, #4]
 800f72e:	4656      	mov	r6, sl
 800f730:	465f      	mov	r7, fp
 800f732:	4642      	mov	r2, r8
 800f734:	464b      	mov	r3, r9
 800f736:	4630      	mov	r0, r6
 800f738:	4639      	mov	r1, r7
 800f73a:	f7f1 f887 	bl	800084c <__aeabi_ddiv>
 800f73e:	f7f1 fa0b 	bl	8000b58 <__aeabi_d2iz>
 800f742:	4682      	mov	sl, r0
 800f744:	f7f0 feee 	bl	8000524 <__aeabi_i2d>
 800f748:	4642      	mov	r2, r8
 800f74a:	464b      	mov	r3, r9
 800f74c:	f7f0 ff54 	bl	80005f8 <__aeabi_dmul>
 800f750:	4602      	mov	r2, r0
 800f752:	460b      	mov	r3, r1
 800f754:	4630      	mov	r0, r6
 800f756:	4639      	mov	r1, r7
 800f758:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f75c:	f7f0 fd94 	bl	8000288 <__aeabi_dsub>
 800f760:	f805 6b01 	strb.w	r6, [r5], #1
 800f764:	9e01      	ldr	r6, [sp, #4]
 800f766:	9f03      	ldr	r7, [sp, #12]
 800f768:	1bae      	subs	r6, r5, r6
 800f76a:	42b7      	cmp	r7, r6
 800f76c:	4602      	mov	r2, r0
 800f76e:	460b      	mov	r3, r1
 800f770:	d135      	bne.n	800f7de <_dtoa_r+0x6e6>
 800f772:	f7f0 fd8b 	bl	800028c <__adddf3>
 800f776:	4642      	mov	r2, r8
 800f778:	464b      	mov	r3, r9
 800f77a:	4606      	mov	r6, r0
 800f77c:	460f      	mov	r7, r1
 800f77e:	f7f1 f9cb 	bl	8000b18 <__aeabi_dcmpgt>
 800f782:	b9d0      	cbnz	r0, 800f7ba <_dtoa_r+0x6c2>
 800f784:	4642      	mov	r2, r8
 800f786:	464b      	mov	r3, r9
 800f788:	4630      	mov	r0, r6
 800f78a:	4639      	mov	r1, r7
 800f78c:	f7f1 f99c 	bl	8000ac8 <__aeabi_dcmpeq>
 800f790:	b110      	cbz	r0, 800f798 <_dtoa_r+0x6a0>
 800f792:	f01a 0f01 	tst.w	sl, #1
 800f796:	d110      	bne.n	800f7ba <_dtoa_r+0x6c2>
 800f798:	4620      	mov	r0, r4
 800f79a:	ee18 1a10 	vmov	r1, s16
 800f79e:	f000 fd05 	bl	80101ac <_Bfree>
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	9800      	ldr	r0, [sp, #0]
 800f7a6:	702b      	strb	r3, [r5, #0]
 800f7a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7aa:	3001      	adds	r0, #1
 800f7ac:	6018      	str	r0, [r3, #0]
 800f7ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	f43f acf1 	beq.w	800f198 <_dtoa_r+0xa0>
 800f7b6:	601d      	str	r5, [r3, #0]
 800f7b8:	e4ee      	b.n	800f198 <_dtoa_r+0xa0>
 800f7ba:	9f00      	ldr	r7, [sp, #0]
 800f7bc:	462b      	mov	r3, r5
 800f7be:	461d      	mov	r5, r3
 800f7c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f7c4:	2a39      	cmp	r2, #57	; 0x39
 800f7c6:	d106      	bne.n	800f7d6 <_dtoa_r+0x6de>
 800f7c8:	9a01      	ldr	r2, [sp, #4]
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d1f7      	bne.n	800f7be <_dtoa_r+0x6c6>
 800f7ce:	9901      	ldr	r1, [sp, #4]
 800f7d0:	2230      	movs	r2, #48	; 0x30
 800f7d2:	3701      	adds	r7, #1
 800f7d4:	700a      	strb	r2, [r1, #0]
 800f7d6:	781a      	ldrb	r2, [r3, #0]
 800f7d8:	3201      	adds	r2, #1
 800f7da:	701a      	strb	r2, [r3, #0]
 800f7dc:	e790      	b.n	800f700 <_dtoa_r+0x608>
 800f7de:	4ba6      	ldr	r3, [pc, #664]	; (800fa78 <_dtoa_r+0x980>)
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	f7f0 ff09 	bl	80005f8 <__aeabi_dmul>
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	4606      	mov	r6, r0
 800f7ec:	460f      	mov	r7, r1
 800f7ee:	f7f1 f96b 	bl	8000ac8 <__aeabi_dcmpeq>
 800f7f2:	2800      	cmp	r0, #0
 800f7f4:	d09d      	beq.n	800f732 <_dtoa_r+0x63a>
 800f7f6:	e7cf      	b.n	800f798 <_dtoa_r+0x6a0>
 800f7f8:	9a08      	ldr	r2, [sp, #32]
 800f7fa:	2a00      	cmp	r2, #0
 800f7fc:	f000 80d7 	beq.w	800f9ae <_dtoa_r+0x8b6>
 800f800:	9a06      	ldr	r2, [sp, #24]
 800f802:	2a01      	cmp	r2, #1
 800f804:	f300 80ba 	bgt.w	800f97c <_dtoa_r+0x884>
 800f808:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f80a:	2a00      	cmp	r2, #0
 800f80c:	f000 80b2 	beq.w	800f974 <_dtoa_r+0x87c>
 800f810:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f814:	9e07      	ldr	r6, [sp, #28]
 800f816:	9d04      	ldr	r5, [sp, #16]
 800f818:	9a04      	ldr	r2, [sp, #16]
 800f81a:	441a      	add	r2, r3
 800f81c:	9204      	str	r2, [sp, #16]
 800f81e:	9a05      	ldr	r2, [sp, #20]
 800f820:	2101      	movs	r1, #1
 800f822:	441a      	add	r2, r3
 800f824:	4620      	mov	r0, r4
 800f826:	9205      	str	r2, [sp, #20]
 800f828:	f000 fd78 	bl	801031c <__i2b>
 800f82c:	4607      	mov	r7, r0
 800f82e:	2d00      	cmp	r5, #0
 800f830:	dd0c      	ble.n	800f84c <_dtoa_r+0x754>
 800f832:	9b05      	ldr	r3, [sp, #20]
 800f834:	2b00      	cmp	r3, #0
 800f836:	dd09      	ble.n	800f84c <_dtoa_r+0x754>
 800f838:	42ab      	cmp	r3, r5
 800f83a:	9a04      	ldr	r2, [sp, #16]
 800f83c:	bfa8      	it	ge
 800f83e:	462b      	movge	r3, r5
 800f840:	1ad2      	subs	r2, r2, r3
 800f842:	9204      	str	r2, [sp, #16]
 800f844:	9a05      	ldr	r2, [sp, #20]
 800f846:	1aed      	subs	r5, r5, r3
 800f848:	1ad3      	subs	r3, r2, r3
 800f84a:	9305      	str	r3, [sp, #20]
 800f84c:	9b07      	ldr	r3, [sp, #28]
 800f84e:	b31b      	cbz	r3, 800f898 <_dtoa_r+0x7a0>
 800f850:	9b08      	ldr	r3, [sp, #32]
 800f852:	2b00      	cmp	r3, #0
 800f854:	f000 80af 	beq.w	800f9b6 <_dtoa_r+0x8be>
 800f858:	2e00      	cmp	r6, #0
 800f85a:	dd13      	ble.n	800f884 <_dtoa_r+0x78c>
 800f85c:	4639      	mov	r1, r7
 800f85e:	4632      	mov	r2, r6
 800f860:	4620      	mov	r0, r4
 800f862:	f000 fe1b 	bl	801049c <__pow5mult>
 800f866:	ee18 2a10 	vmov	r2, s16
 800f86a:	4601      	mov	r1, r0
 800f86c:	4607      	mov	r7, r0
 800f86e:	4620      	mov	r0, r4
 800f870:	f000 fd6a 	bl	8010348 <__multiply>
 800f874:	ee18 1a10 	vmov	r1, s16
 800f878:	4680      	mov	r8, r0
 800f87a:	4620      	mov	r0, r4
 800f87c:	f000 fc96 	bl	80101ac <_Bfree>
 800f880:	ee08 8a10 	vmov	s16, r8
 800f884:	9b07      	ldr	r3, [sp, #28]
 800f886:	1b9a      	subs	r2, r3, r6
 800f888:	d006      	beq.n	800f898 <_dtoa_r+0x7a0>
 800f88a:	ee18 1a10 	vmov	r1, s16
 800f88e:	4620      	mov	r0, r4
 800f890:	f000 fe04 	bl	801049c <__pow5mult>
 800f894:	ee08 0a10 	vmov	s16, r0
 800f898:	2101      	movs	r1, #1
 800f89a:	4620      	mov	r0, r4
 800f89c:	f000 fd3e 	bl	801031c <__i2b>
 800f8a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	4606      	mov	r6, r0
 800f8a6:	f340 8088 	ble.w	800f9ba <_dtoa_r+0x8c2>
 800f8aa:	461a      	mov	r2, r3
 800f8ac:	4601      	mov	r1, r0
 800f8ae:	4620      	mov	r0, r4
 800f8b0:	f000 fdf4 	bl	801049c <__pow5mult>
 800f8b4:	9b06      	ldr	r3, [sp, #24]
 800f8b6:	2b01      	cmp	r3, #1
 800f8b8:	4606      	mov	r6, r0
 800f8ba:	f340 8081 	ble.w	800f9c0 <_dtoa_r+0x8c8>
 800f8be:	f04f 0800 	mov.w	r8, #0
 800f8c2:	6933      	ldr	r3, [r6, #16]
 800f8c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f8c8:	6918      	ldr	r0, [r3, #16]
 800f8ca:	f000 fcd7 	bl	801027c <__hi0bits>
 800f8ce:	f1c0 0020 	rsb	r0, r0, #32
 800f8d2:	9b05      	ldr	r3, [sp, #20]
 800f8d4:	4418      	add	r0, r3
 800f8d6:	f010 001f 	ands.w	r0, r0, #31
 800f8da:	f000 8092 	beq.w	800fa02 <_dtoa_r+0x90a>
 800f8de:	f1c0 0320 	rsb	r3, r0, #32
 800f8e2:	2b04      	cmp	r3, #4
 800f8e4:	f340 808a 	ble.w	800f9fc <_dtoa_r+0x904>
 800f8e8:	f1c0 001c 	rsb	r0, r0, #28
 800f8ec:	9b04      	ldr	r3, [sp, #16]
 800f8ee:	4403      	add	r3, r0
 800f8f0:	9304      	str	r3, [sp, #16]
 800f8f2:	9b05      	ldr	r3, [sp, #20]
 800f8f4:	4403      	add	r3, r0
 800f8f6:	4405      	add	r5, r0
 800f8f8:	9305      	str	r3, [sp, #20]
 800f8fa:	9b04      	ldr	r3, [sp, #16]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	dd07      	ble.n	800f910 <_dtoa_r+0x818>
 800f900:	ee18 1a10 	vmov	r1, s16
 800f904:	461a      	mov	r2, r3
 800f906:	4620      	mov	r0, r4
 800f908:	f000 fe22 	bl	8010550 <__lshift>
 800f90c:	ee08 0a10 	vmov	s16, r0
 800f910:	9b05      	ldr	r3, [sp, #20]
 800f912:	2b00      	cmp	r3, #0
 800f914:	dd05      	ble.n	800f922 <_dtoa_r+0x82a>
 800f916:	4631      	mov	r1, r6
 800f918:	461a      	mov	r2, r3
 800f91a:	4620      	mov	r0, r4
 800f91c:	f000 fe18 	bl	8010550 <__lshift>
 800f920:	4606      	mov	r6, r0
 800f922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f924:	2b00      	cmp	r3, #0
 800f926:	d06e      	beq.n	800fa06 <_dtoa_r+0x90e>
 800f928:	ee18 0a10 	vmov	r0, s16
 800f92c:	4631      	mov	r1, r6
 800f92e:	f000 fe7f 	bl	8010630 <__mcmp>
 800f932:	2800      	cmp	r0, #0
 800f934:	da67      	bge.n	800fa06 <_dtoa_r+0x90e>
 800f936:	9b00      	ldr	r3, [sp, #0]
 800f938:	3b01      	subs	r3, #1
 800f93a:	ee18 1a10 	vmov	r1, s16
 800f93e:	9300      	str	r3, [sp, #0]
 800f940:	220a      	movs	r2, #10
 800f942:	2300      	movs	r3, #0
 800f944:	4620      	mov	r0, r4
 800f946:	f000 fc53 	bl	80101f0 <__multadd>
 800f94a:	9b08      	ldr	r3, [sp, #32]
 800f94c:	ee08 0a10 	vmov	s16, r0
 800f950:	2b00      	cmp	r3, #0
 800f952:	f000 81b1 	beq.w	800fcb8 <_dtoa_r+0xbc0>
 800f956:	2300      	movs	r3, #0
 800f958:	4639      	mov	r1, r7
 800f95a:	220a      	movs	r2, #10
 800f95c:	4620      	mov	r0, r4
 800f95e:	f000 fc47 	bl	80101f0 <__multadd>
 800f962:	9b02      	ldr	r3, [sp, #8]
 800f964:	2b00      	cmp	r3, #0
 800f966:	4607      	mov	r7, r0
 800f968:	f300 808e 	bgt.w	800fa88 <_dtoa_r+0x990>
 800f96c:	9b06      	ldr	r3, [sp, #24]
 800f96e:	2b02      	cmp	r3, #2
 800f970:	dc51      	bgt.n	800fa16 <_dtoa_r+0x91e>
 800f972:	e089      	b.n	800fa88 <_dtoa_r+0x990>
 800f974:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f976:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f97a:	e74b      	b.n	800f814 <_dtoa_r+0x71c>
 800f97c:	9b03      	ldr	r3, [sp, #12]
 800f97e:	1e5e      	subs	r6, r3, #1
 800f980:	9b07      	ldr	r3, [sp, #28]
 800f982:	42b3      	cmp	r3, r6
 800f984:	bfbf      	itttt	lt
 800f986:	9b07      	ldrlt	r3, [sp, #28]
 800f988:	9607      	strlt	r6, [sp, #28]
 800f98a:	1af2      	sublt	r2, r6, r3
 800f98c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f98e:	bfb6      	itet	lt
 800f990:	189b      	addlt	r3, r3, r2
 800f992:	1b9e      	subge	r6, r3, r6
 800f994:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f996:	9b03      	ldr	r3, [sp, #12]
 800f998:	bfb8      	it	lt
 800f99a:	2600      	movlt	r6, #0
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	bfb7      	itett	lt
 800f9a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f9a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f9a8:	1a9d      	sublt	r5, r3, r2
 800f9aa:	2300      	movlt	r3, #0
 800f9ac:	e734      	b.n	800f818 <_dtoa_r+0x720>
 800f9ae:	9e07      	ldr	r6, [sp, #28]
 800f9b0:	9d04      	ldr	r5, [sp, #16]
 800f9b2:	9f08      	ldr	r7, [sp, #32]
 800f9b4:	e73b      	b.n	800f82e <_dtoa_r+0x736>
 800f9b6:	9a07      	ldr	r2, [sp, #28]
 800f9b8:	e767      	b.n	800f88a <_dtoa_r+0x792>
 800f9ba:	9b06      	ldr	r3, [sp, #24]
 800f9bc:	2b01      	cmp	r3, #1
 800f9be:	dc18      	bgt.n	800f9f2 <_dtoa_r+0x8fa>
 800f9c0:	f1ba 0f00 	cmp.w	sl, #0
 800f9c4:	d115      	bne.n	800f9f2 <_dtoa_r+0x8fa>
 800f9c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f9ca:	b993      	cbnz	r3, 800f9f2 <_dtoa_r+0x8fa>
 800f9cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f9d0:	0d1b      	lsrs	r3, r3, #20
 800f9d2:	051b      	lsls	r3, r3, #20
 800f9d4:	b183      	cbz	r3, 800f9f8 <_dtoa_r+0x900>
 800f9d6:	9b04      	ldr	r3, [sp, #16]
 800f9d8:	3301      	adds	r3, #1
 800f9da:	9304      	str	r3, [sp, #16]
 800f9dc:	9b05      	ldr	r3, [sp, #20]
 800f9de:	3301      	adds	r3, #1
 800f9e0:	9305      	str	r3, [sp, #20]
 800f9e2:	f04f 0801 	mov.w	r8, #1
 800f9e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	f47f af6a 	bne.w	800f8c2 <_dtoa_r+0x7ca>
 800f9ee:	2001      	movs	r0, #1
 800f9f0:	e76f      	b.n	800f8d2 <_dtoa_r+0x7da>
 800f9f2:	f04f 0800 	mov.w	r8, #0
 800f9f6:	e7f6      	b.n	800f9e6 <_dtoa_r+0x8ee>
 800f9f8:	4698      	mov	r8, r3
 800f9fa:	e7f4      	b.n	800f9e6 <_dtoa_r+0x8ee>
 800f9fc:	f43f af7d 	beq.w	800f8fa <_dtoa_r+0x802>
 800fa00:	4618      	mov	r0, r3
 800fa02:	301c      	adds	r0, #28
 800fa04:	e772      	b.n	800f8ec <_dtoa_r+0x7f4>
 800fa06:	9b03      	ldr	r3, [sp, #12]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	dc37      	bgt.n	800fa7c <_dtoa_r+0x984>
 800fa0c:	9b06      	ldr	r3, [sp, #24]
 800fa0e:	2b02      	cmp	r3, #2
 800fa10:	dd34      	ble.n	800fa7c <_dtoa_r+0x984>
 800fa12:	9b03      	ldr	r3, [sp, #12]
 800fa14:	9302      	str	r3, [sp, #8]
 800fa16:	9b02      	ldr	r3, [sp, #8]
 800fa18:	b96b      	cbnz	r3, 800fa36 <_dtoa_r+0x93e>
 800fa1a:	4631      	mov	r1, r6
 800fa1c:	2205      	movs	r2, #5
 800fa1e:	4620      	mov	r0, r4
 800fa20:	f000 fbe6 	bl	80101f0 <__multadd>
 800fa24:	4601      	mov	r1, r0
 800fa26:	4606      	mov	r6, r0
 800fa28:	ee18 0a10 	vmov	r0, s16
 800fa2c:	f000 fe00 	bl	8010630 <__mcmp>
 800fa30:	2800      	cmp	r0, #0
 800fa32:	f73f adbb 	bgt.w	800f5ac <_dtoa_r+0x4b4>
 800fa36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa38:	9d01      	ldr	r5, [sp, #4]
 800fa3a:	43db      	mvns	r3, r3
 800fa3c:	9300      	str	r3, [sp, #0]
 800fa3e:	f04f 0800 	mov.w	r8, #0
 800fa42:	4631      	mov	r1, r6
 800fa44:	4620      	mov	r0, r4
 800fa46:	f000 fbb1 	bl	80101ac <_Bfree>
 800fa4a:	2f00      	cmp	r7, #0
 800fa4c:	f43f aea4 	beq.w	800f798 <_dtoa_r+0x6a0>
 800fa50:	f1b8 0f00 	cmp.w	r8, #0
 800fa54:	d005      	beq.n	800fa62 <_dtoa_r+0x96a>
 800fa56:	45b8      	cmp	r8, r7
 800fa58:	d003      	beq.n	800fa62 <_dtoa_r+0x96a>
 800fa5a:	4641      	mov	r1, r8
 800fa5c:	4620      	mov	r0, r4
 800fa5e:	f000 fba5 	bl	80101ac <_Bfree>
 800fa62:	4639      	mov	r1, r7
 800fa64:	4620      	mov	r0, r4
 800fa66:	f000 fba1 	bl	80101ac <_Bfree>
 800fa6a:	e695      	b.n	800f798 <_dtoa_r+0x6a0>
 800fa6c:	2600      	movs	r6, #0
 800fa6e:	4637      	mov	r7, r6
 800fa70:	e7e1      	b.n	800fa36 <_dtoa_r+0x93e>
 800fa72:	9700      	str	r7, [sp, #0]
 800fa74:	4637      	mov	r7, r6
 800fa76:	e599      	b.n	800f5ac <_dtoa_r+0x4b4>
 800fa78:	40240000 	.word	0x40240000
 800fa7c:	9b08      	ldr	r3, [sp, #32]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	f000 80ca 	beq.w	800fc18 <_dtoa_r+0xb20>
 800fa84:	9b03      	ldr	r3, [sp, #12]
 800fa86:	9302      	str	r3, [sp, #8]
 800fa88:	2d00      	cmp	r5, #0
 800fa8a:	dd05      	ble.n	800fa98 <_dtoa_r+0x9a0>
 800fa8c:	4639      	mov	r1, r7
 800fa8e:	462a      	mov	r2, r5
 800fa90:	4620      	mov	r0, r4
 800fa92:	f000 fd5d 	bl	8010550 <__lshift>
 800fa96:	4607      	mov	r7, r0
 800fa98:	f1b8 0f00 	cmp.w	r8, #0
 800fa9c:	d05b      	beq.n	800fb56 <_dtoa_r+0xa5e>
 800fa9e:	6879      	ldr	r1, [r7, #4]
 800faa0:	4620      	mov	r0, r4
 800faa2:	f000 fb43 	bl	801012c <_Balloc>
 800faa6:	4605      	mov	r5, r0
 800faa8:	b928      	cbnz	r0, 800fab6 <_dtoa_r+0x9be>
 800faaa:	4b87      	ldr	r3, [pc, #540]	; (800fcc8 <_dtoa_r+0xbd0>)
 800faac:	4602      	mov	r2, r0
 800faae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fab2:	f7ff bb3b 	b.w	800f12c <_dtoa_r+0x34>
 800fab6:	693a      	ldr	r2, [r7, #16]
 800fab8:	3202      	adds	r2, #2
 800faba:	0092      	lsls	r2, r2, #2
 800fabc:	f107 010c 	add.w	r1, r7, #12
 800fac0:	300c      	adds	r0, #12
 800fac2:	f7fe fbb9 	bl	800e238 <memcpy>
 800fac6:	2201      	movs	r2, #1
 800fac8:	4629      	mov	r1, r5
 800faca:	4620      	mov	r0, r4
 800facc:	f000 fd40 	bl	8010550 <__lshift>
 800fad0:	9b01      	ldr	r3, [sp, #4]
 800fad2:	f103 0901 	add.w	r9, r3, #1
 800fad6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800fada:	4413      	add	r3, r2
 800fadc:	9305      	str	r3, [sp, #20]
 800fade:	f00a 0301 	and.w	r3, sl, #1
 800fae2:	46b8      	mov	r8, r7
 800fae4:	9304      	str	r3, [sp, #16]
 800fae6:	4607      	mov	r7, r0
 800fae8:	4631      	mov	r1, r6
 800faea:	ee18 0a10 	vmov	r0, s16
 800faee:	f7ff fa75 	bl	800efdc <quorem>
 800faf2:	4641      	mov	r1, r8
 800faf4:	9002      	str	r0, [sp, #8]
 800faf6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fafa:	ee18 0a10 	vmov	r0, s16
 800fafe:	f000 fd97 	bl	8010630 <__mcmp>
 800fb02:	463a      	mov	r2, r7
 800fb04:	9003      	str	r0, [sp, #12]
 800fb06:	4631      	mov	r1, r6
 800fb08:	4620      	mov	r0, r4
 800fb0a:	f000 fdad 	bl	8010668 <__mdiff>
 800fb0e:	68c2      	ldr	r2, [r0, #12]
 800fb10:	f109 3bff 	add.w	fp, r9, #4294967295
 800fb14:	4605      	mov	r5, r0
 800fb16:	bb02      	cbnz	r2, 800fb5a <_dtoa_r+0xa62>
 800fb18:	4601      	mov	r1, r0
 800fb1a:	ee18 0a10 	vmov	r0, s16
 800fb1e:	f000 fd87 	bl	8010630 <__mcmp>
 800fb22:	4602      	mov	r2, r0
 800fb24:	4629      	mov	r1, r5
 800fb26:	4620      	mov	r0, r4
 800fb28:	9207      	str	r2, [sp, #28]
 800fb2a:	f000 fb3f 	bl	80101ac <_Bfree>
 800fb2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800fb32:	ea43 0102 	orr.w	r1, r3, r2
 800fb36:	9b04      	ldr	r3, [sp, #16]
 800fb38:	430b      	orrs	r3, r1
 800fb3a:	464d      	mov	r5, r9
 800fb3c:	d10f      	bne.n	800fb5e <_dtoa_r+0xa66>
 800fb3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fb42:	d02a      	beq.n	800fb9a <_dtoa_r+0xaa2>
 800fb44:	9b03      	ldr	r3, [sp, #12]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	dd02      	ble.n	800fb50 <_dtoa_r+0xa58>
 800fb4a:	9b02      	ldr	r3, [sp, #8]
 800fb4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800fb50:	f88b a000 	strb.w	sl, [fp]
 800fb54:	e775      	b.n	800fa42 <_dtoa_r+0x94a>
 800fb56:	4638      	mov	r0, r7
 800fb58:	e7ba      	b.n	800fad0 <_dtoa_r+0x9d8>
 800fb5a:	2201      	movs	r2, #1
 800fb5c:	e7e2      	b.n	800fb24 <_dtoa_r+0xa2c>
 800fb5e:	9b03      	ldr	r3, [sp, #12]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	db04      	blt.n	800fb6e <_dtoa_r+0xa76>
 800fb64:	9906      	ldr	r1, [sp, #24]
 800fb66:	430b      	orrs	r3, r1
 800fb68:	9904      	ldr	r1, [sp, #16]
 800fb6a:	430b      	orrs	r3, r1
 800fb6c:	d122      	bne.n	800fbb4 <_dtoa_r+0xabc>
 800fb6e:	2a00      	cmp	r2, #0
 800fb70:	ddee      	ble.n	800fb50 <_dtoa_r+0xa58>
 800fb72:	ee18 1a10 	vmov	r1, s16
 800fb76:	2201      	movs	r2, #1
 800fb78:	4620      	mov	r0, r4
 800fb7a:	f000 fce9 	bl	8010550 <__lshift>
 800fb7e:	4631      	mov	r1, r6
 800fb80:	ee08 0a10 	vmov	s16, r0
 800fb84:	f000 fd54 	bl	8010630 <__mcmp>
 800fb88:	2800      	cmp	r0, #0
 800fb8a:	dc03      	bgt.n	800fb94 <_dtoa_r+0xa9c>
 800fb8c:	d1e0      	bne.n	800fb50 <_dtoa_r+0xa58>
 800fb8e:	f01a 0f01 	tst.w	sl, #1
 800fb92:	d0dd      	beq.n	800fb50 <_dtoa_r+0xa58>
 800fb94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fb98:	d1d7      	bne.n	800fb4a <_dtoa_r+0xa52>
 800fb9a:	2339      	movs	r3, #57	; 0x39
 800fb9c:	f88b 3000 	strb.w	r3, [fp]
 800fba0:	462b      	mov	r3, r5
 800fba2:	461d      	mov	r5, r3
 800fba4:	3b01      	subs	r3, #1
 800fba6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fbaa:	2a39      	cmp	r2, #57	; 0x39
 800fbac:	d071      	beq.n	800fc92 <_dtoa_r+0xb9a>
 800fbae:	3201      	adds	r2, #1
 800fbb0:	701a      	strb	r2, [r3, #0]
 800fbb2:	e746      	b.n	800fa42 <_dtoa_r+0x94a>
 800fbb4:	2a00      	cmp	r2, #0
 800fbb6:	dd07      	ble.n	800fbc8 <_dtoa_r+0xad0>
 800fbb8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fbbc:	d0ed      	beq.n	800fb9a <_dtoa_r+0xaa2>
 800fbbe:	f10a 0301 	add.w	r3, sl, #1
 800fbc2:	f88b 3000 	strb.w	r3, [fp]
 800fbc6:	e73c      	b.n	800fa42 <_dtoa_r+0x94a>
 800fbc8:	9b05      	ldr	r3, [sp, #20]
 800fbca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800fbce:	4599      	cmp	r9, r3
 800fbd0:	d047      	beq.n	800fc62 <_dtoa_r+0xb6a>
 800fbd2:	ee18 1a10 	vmov	r1, s16
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	220a      	movs	r2, #10
 800fbda:	4620      	mov	r0, r4
 800fbdc:	f000 fb08 	bl	80101f0 <__multadd>
 800fbe0:	45b8      	cmp	r8, r7
 800fbe2:	ee08 0a10 	vmov	s16, r0
 800fbe6:	f04f 0300 	mov.w	r3, #0
 800fbea:	f04f 020a 	mov.w	r2, #10
 800fbee:	4641      	mov	r1, r8
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	d106      	bne.n	800fc02 <_dtoa_r+0xb0a>
 800fbf4:	f000 fafc 	bl	80101f0 <__multadd>
 800fbf8:	4680      	mov	r8, r0
 800fbfa:	4607      	mov	r7, r0
 800fbfc:	f109 0901 	add.w	r9, r9, #1
 800fc00:	e772      	b.n	800fae8 <_dtoa_r+0x9f0>
 800fc02:	f000 faf5 	bl	80101f0 <__multadd>
 800fc06:	4639      	mov	r1, r7
 800fc08:	4680      	mov	r8, r0
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	220a      	movs	r2, #10
 800fc0e:	4620      	mov	r0, r4
 800fc10:	f000 faee 	bl	80101f0 <__multadd>
 800fc14:	4607      	mov	r7, r0
 800fc16:	e7f1      	b.n	800fbfc <_dtoa_r+0xb04>
 800fc18:	9b03      	ldr	r3, [sp, #12]
 800fc1a:	9302      	str	r3, [sp, #8]
 800fc1c:	9d01      	ldr	r5, [sp, #4]
 800fc1e:	ee18 0a10 	vmov	r0, s16
 800fc22:	4631      	mov	r1, r6
 800fc24:	f7ff f9da 	bl	800efdc <quorem>
 800fc28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fc2c:	9b01      	ldr	r3, [sp, #4]
 800fc2e:	f805 ab01 	strb.w	sl, [r5], #1
 800fc32:	1aea      	subs	r2, r5, r3
 800fc34:	9b02      	ldr	r3, [sp, #8]
 800fc36:	4293      	cmp	r3, r2
 800fc38:	dd09      	ble.n	800fc4e <_dtoa_r+0xb56>
 800fc3a:	ee18 1a10 	vmov	r1, s16
 800fc3e:	2300      	movs	r3, #0
 800fc40:	220a      	movs	r2, #10
 800fc42:	4620      	mov	r0, r4
 800fc44:	f000 fad4 	bl	80101f0 <__multadd>
 800fc48:	ee08 0a10 	vmov	s16, r0
 800fc4c:	e7e7      	b.n	800fc1e <_dtoa_r+0xb26>
 800fc4e:	9b02      	ldr	r3, [sp, #8]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	bfc8      	it	gt
 800fc54:	461d      	movgt	r5, r3
 800fc56:	9b01      	ldr	r3, [sp, #4]
 800fc58:	bfd8      	it	le
 800fc5a:	2501      	movle	r5, #1
 800fc5c:	441d      	add	r5, r3
 800fc5e:	f04f 0800 	mov.w	r8, #0
 800fc62:	ee18 1a10 	vmov	r1, s16
 800fc66:	2201      	movs	r2, #1
 800fc68:	4620      	mov	r0, r4
 800fc6a:	f000 fc71 	bl	8010550 <__lshift>
 800fc6e:	4631      	mov	r1, r6
 800fc70:	ee08 0a10 	vmov	s16, r0
 800fc74:	f000 fcdc 	bl	8010630 <__mcmp>
 800fc78:	2800      	cmp	r0, #0
 800fc7a:	dc91      	bgt.n	800fba0 <_dtoa_r+0xaa8>
 800fc7c:	d102      	bne.n	800fc84 <_dtoa_r+0xb8c>
 800fc7e:	f01a 0f01 	tst.w	sl, #1
 800fc82:	d18d      	bne.n	800fba0 <_dtoa_r+0xaa8>
 800fc84:	462b      	mov	r3, r5
 800fc86:	461d      	mov	r5, r3
 800fc88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc8c:	2a30      	cmp	r2, #48	; 0x30
 800fc8e:	d0fa      	beq.n	800fc86 <_dtoa_r+0xb8e>
 800fc90:	e6d7      	b.n	800fa42 <_dtoa_r+0x94a>
 800fc92:	9a01      	ldr	r2, [sp, #4]
 800fc94:	429a      	cmp	r2, r3
 800fc96:	d184      	bne.n	800fba2 <_dtoa_r+0xaaa>
 800fc98:	9b00      	ldr	r3, [sp, #0]
 800fc9a:	3301      	adds	r3, #1
 800fc9c:	9300      	str	r3, [sp, #0]
 800fc9e:	2331      	movs	r3, #49	; 0x31
 800fca0:	7013      	strb	r3, [r2, #0]
 800fca2:	e6ce      	b.n	800fa42 <_dtoa_r+0x94a>
 800fca4:	4b09      	ldr	r3, [pc, #36]	; (800fccc <_dtoa_r+0xbd4>)
 800fca6:	f7ff ba95 	b.w	800f1d4 <_dtoa_r+0xdc>
 800fcaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	f47f aa6e 	bne.w	800f18e <_dtoa_r+0x96>
 800fcb2:	4b07      	ldr	r3, [pc, #28]	; (800fcd0 <_dtoa_r+0xbd8>)
 800fcb4:	f7ff ba8e 	b.w	800f1d4 <_dtoa_r+0xdc>
 800fcb8:	9b02      	ldr	r3, [sp, #8]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	dcae      	bgt.n	800fc1c <_dtoa_r+0xb24>
 800fcbe:	9b06      	ldr	r3, [sp, #24]
 800fcc0:	2b02      	cmp	r3, #2
 800fcc2:	f73f aea8 	bgt.w	800fa16 <_dtoa_r+0x91e>
 800fcc6:	e7a9      	b.n	800fc1c <_dtoa_r+0xb24>
 800fcc8:	08011653 	.word	0x08011653
 800fccc:	080115b0 	.word	0x080115b0
 800fcd0:	080115d4 	.word	0x080115d4

0800fcd4 <__sflush_r>:
 800fcd4:	898a      	ldrh	r2, [r1, #12]
 800fcd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcda:	4605      	mov	r5, r0
 800fcdc:	0710      	lsls	r0, r2, #28
 800fcde:	460c      	mov	r4, r1
 800fce0:	d458      	bmi.n	800fd94 <__sflush_r+0xc0>
 800fce2:	684b      	ldr	r3, [r1, #4]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	dc05      	bgt.n	800fcf4 <__sflush_r+0x20>
 800fce8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	dc02      	bgt.n	800fcf4 <__sflush_r+0x20>
 800fcee:	2000      	movs	r0, #0
 800fcf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fcf6:	2e00      	cmp	r6, #0
 800fcf8:	d0f9      	beq.n	800fcee <__sflush_r+0x1a>
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fd00:	682f      	ldr	r7, [r5, #0]
 800fd02:	602b      	str	r3, [r5, #0]
 800fd04:	d032      	beq.n	800fd6c <__sflush_r+0x98>
 800fd06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fd08:	89a3      	ldrh	r3, [r4, #12]
 800fd0a:	075a      	lsls	r2, r3, #29
 800fd0c:	d505      	bpl.n	800fd1a <__sflush_r+0x46>
 800fd0e:	6863      	ldr	r3, [r4, #4]
 800fd10:	1ac0      	subs	r0, r0, r3
 800fd12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fd14:	b10b      	cbz	r3, 800fd1a <__sflush_r+0x46>
 800fd16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fd18:	1ac0      	subs	r0, r0, r3
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	4602      	mov	r2, r0
 800fd1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd20:	6a21      	ldr	r1, [r4, #32]
 800fd22:	4628      	mov	r0, r5
 800fd24:	47b0      	blx	r6
 800fd26:	1c43      	adds	r3, r0, #1
 800fd28:	89a3      	ldrh	r3, [r4, #12]
 800fd2a:	d106      	bne.n	800fd3a <__sflush_r+0x66>
 800fd2c:	6829      	ldr	r1, [r5, #0]
 800fd2e:	291d      	cmp	r1, #29
 800fd30:	d82c      	bhi.n	800fd8c <__sflush_r+0xb8>
 800fd32:	4a2a      	ldr	r2, [pc, #168]	; (800fddc <__sflush_r+0x108>)
 800fd34:	40ca      	lsrs	r2, r1
 800fd36:	07d6      	lsls	r6, r2, #31
 800fd38:	d528      	bpl.n	800fd8c <__sflush_r+0xb8>
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	6062      	str	r2, [r4, #4]
 800fd3e:	04d9      	lsls	r1, r3, #19
 800fd40:	6922      	ldr	r2, [r4, #16]
 800fd42:	6022      	str	r2, [r4, #0]
 800fd44:	d504      	bpl.n	800fd50 <__sflush_r+0x7c>
 800fd46:	1c42      	adds	r2, r0, #1
 800fd48:	d101      	bne.n	800fd4e <__sflush_r+0x7a>
 800fd4a:	682b      	ldr	r3, [r5, #0]
 800fd4c:	b903      	cbnz	r3, 800fd50 <__sflush_r+0x7c>
 800fd4e:	6560      	str	r0, [r4, #84]	; 0x54
 800fd50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd52:	602f      	str	r7, [r5, #0]
 800fd54:	2900      	cmp	r1, #0
 800fd56:	d0ca      	beq.n	800fcee <__sflush_r+0x1a>
 800fd58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd5c:	4299      	cmp	r1, r3
 800fd5e:	d002      	beq.n	800fd66 <__sflush_r+0x92>
 800fd60:	4628      	mov	r0, r5
 800fd62:	f000 fd7d 	bl	8010860 <_free_r>
 800fd66:	2000      	movs	r0, #0
 800fd68:	6360      	str	r0, [r4, #52]	; 0x34
 800fd6a:	e7c1      	b.n	800fcf0 <__sflush_r+0x1c>
 800fd6c:	6a21      	ldr	r1, [r4, #32]
 800fd6e:	2301      	movs	r3, #1
 800fd70:	4628      	mov	r0, r5
 800fd72:	47b0      	blx	r6
 800fd74:	1c41      	adds	r1, r0, #1
 800fd76:	d1c7      	bne.n	800fd08 <__sflush_r+0x34>
 800fd78:	682b      	ldr	r3, [r5, #0]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d0c4      	beq.n	800fd08 <__sflush_r+0x34>
 800fd7e:	2b1d      	cmp	r3, #29
 800fd80:	d001      	beq.n	800fd86 <__sflush_r+0xb2>
 800fd82:	2b16      	cmp	r3, #22
 800fd84:	d101      	bne.n	800fd8a <__sflush_r+0xb6>
 800fd86:	602f      	str	r7, [r5, #0]
 800fd88:	e7b1      	b.n	800fcee <__sflush_r+0x1a>
 800fd8a:	89a3      	ldrh	r3, [r4, #12]
 800fd8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd90:	81a3      	strh	r3, [r4, #12]
 800fd92:	e7ad      	b.n	800fcf0 <__sflush_r+0x1c>
 800fd94:	690f      	ldr	r7, [r1, #16]
 800fd96:	2f00      	cmp	r7, #0
 800fd98:	d0a9      	beq.n	800fcee <__sflush_r+0x1a>
 800fd9a:	0793      	lsls	r3, r2, #30
 800fd9c:	680e      	ldr	r6, [r1, #0]
 800fd9e:	bf08      	it	eq
 800fda0:	694b      	ldreq	r3, [r1, #20]
 800fda2:	600f      	str	r7, [r1, #0]
 800fda4:	bf18      	it	ne
 800fda6:	2300      	movne	r3, #0
 800fda8:	eba6 0807 	sub.w	r8, r6, r7
 800fdac:	608b      	str	r3, [r1, #8]
 800fdae:	f1b8 0f00 	cmp.w	r8, #0
 800fdb2:	dd9c      	ble.n	800fcee <__sflush_r+0x1a>
 800fdb4:	6a21      	ldr	r1, [r4, #32]
 800fdb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fdb8:	4643      	mov	r3, r8
 800fdba:	463a      	mov	r2, r7
 800fdbc:	4628      	mov	r0, r5
 800fdbe:	47b0      	blx	r6
 800fdc0:	2800      	cmp	r0, #0
 800fdc2:	dc06      	bgt.n	800fdd2 <__sflush_r+0xfe>
 800fdc4:	89a3      	ldrh	r3, [r4, #12]
 800fdc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdca:	81a3      	strh	r3, [r4, #12]
 800fdcc:	f04f 30ff 	mov.w	r0, #4294967295
 800fdd0:	e78e      	b.n	800fcf0 <__sflush_r+0x1c>
 800fdd2:	4407      	add	r7, r0
 800fdd4:	eba8 0800 	sub.w	r8, r8, r0
 800fdd8:	e7e9      	b.n	800fdae <__sflush_r+0xda>
 800fdda:	bf00      	nop
 800fddc:	20400001 	.word	0x20400001

0800fde0 <_fflush_r>:
 800fde0:	b538      	push	{r3, r4, r5, lr}
 800fde2:	690b      	ldr	r3, [r1, #16]
 800fde4:	4605      	mov	r5, r0
 800fde6:	460c      	mov	r4, r1
 800fde8:	b913      	cbnz	r3, 800fdf0 <_fflush_r+0x10>
 800fdea:	2500      	movs	r5, #0
 800fdec:	4628      	mov	r0, r5
 800fdee:	bd38      	pop	{r3, r4, r5, pc}
 800fdf0:	b118      	cbz	r0, 800fdfa <_fflush_r+0x1a>
 800fdf2:	6983      	ldr	r3, [r0, #24]
 800fdf4:	b90b      	cbnz	r3, 800fdfa <_fflush_r+0x1a>
 800fdf6:	f000 f887 	bl	800ff08 <__sinit>
 800fdfa:	4b14      	ldr	r3, [pc, #80]	; (800fe4c <_fflush_r+0x6c>)
 800fdfc:	429c      	cmp	r4, r3
 800fdfe:	d11b      	bne.n	800fe38 <_fflush_r+0x58>
 800fe00:	686c      	ldr	r4, [r5, #4]
 800fe02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d0ef      	beq.n	800fdea <_fflush_r+0xa>
 800fe0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fe0c:	07d0      	lsls	r0, r2, #31
 800fe0e:	d404      	bmi.n	800fe1a <_fflush_r+0x3a>
 800fe10:	0599      	lsls	r1, r3, #22
 800fe12:	d402      	bmi.n	800fe1a <_fflush_r+0x3a>
 800fe14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe16:	f000 f91a 	bl	801004e <__retarget_lock_acquire_recursive>
 800fe1a:	4628      	mov	r0, r5
 800fe1c:	4621      	mov	r1, r4
 800fe1e:	f7ff ff59 	bl	800fcd4 <__sflush_r>
 800fe22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe24:	07da      	lsls	r2, r3, #31
 800fe26:	4605      	mov	r5, r0
 800fe28:	d4e0      	bmi.n	800fdec <_fflush_r+0xc>
 800fe2a:	89a3      	ldrh	r3, [r4, #12]
 800fe2c:	059b      	lsls	r3, r3, #22
 800fe2e:	d4dd      	bmi.n	800fdec <_fflush_r+0xc>
 800fe30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe32:	f000 f90d 	bl	8010050 <__retarget_lock_release_recursive>
 800fe36:	e7d9      	b.n	800fdec <_fflush_r+0xc>
 800fe38:	4b05      	ldr	r3, [pc, #20]	; (800fe50 <_fflush_r+0x70>)
 800fe3a:	429c      	cmp	r4, r3
 800fe3c:	d101      	bne.n	800fe42 <_fflush_r+0x62>
 800fe3e:	68ac      	ldr	r4, [r5, #8]
 800fe40:	e7df      	b.n	800fe02 <_fflush_r+0x22>
 800fe42:	4b04      	ldr	r3, [pc, #16]	; (800fe54 <_fflush_r+0x74>)
 800fe44:	429c      	cmp	r4, r3
 800fe46:	bf08      	it	eq
 800fe48:	68ec      	ldreq	r4, [r5, #12]
 800fe4a:	e7da      	b.n	800fe02 <_fflush_r+0x22>
 800fe4c:	08011684 	.word	0x08011684
 800fe50:	080116a4 	.word	0x080116a4
 800fe54:	08011664 	.word	0x08011664

0800fe58 <std>:
 800fe58:	2300      	movs	r3, #0
 800fe5a:	b510      	push	{r4, lr}
 800fe5c:	4604      	mov	r4, r0
 800fe5e:	e9c0 3300 	strd	r3, r3, [r0]
 800fe62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fe66:	6083      	str	r3, [r0, #8]
 800fe68:	8181      	strh	r1, [r0, #12]
 800fe6a:	6643      	str	r3, [r0, #100]	; 0x64
 800fe6c:	81c2      	strh	r2, [r0, #14]
 800fe6e:	6183      	str	r3, [r0, #24]
 800fe70:	4619      	mov	r1, r3
 800fe72:	2208      	movs	r2, #8
 800fe74:	305c      	adds	r0, #92	; 0x5c
 800fe76:	f7fe f9ed 	bl	800e254 <memset>
 800fe7a:	4b05      	ldr	r3, [pc, #20]	; (800fe90 <std+0x38>)
 800fe7c:	6263      	str	r3, [r4, #36]	; 0x24
 800fe7e:	4b05      	ldr	r3, [pc, #20]	; (800fe94 <std+0x3c>)
 800fe80:	62a3      	str	r3, [r4, #40]	; 0x28
 800fe82:	4b05      	ldr	r3, [pc, #20]	; (800fe98 <std+0x40>)
 800fe84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fe86:	4b05      	ldr	r3, [pc, #20]	; (800fe9c <std+0x44>)
 800fe88:	6224      	str	r4, [r4, #32]
 800fe8a:	6323      	str	r3, [r4, #48]	; 0x30
 800fe8c:	bd10      	pop	{r4, pc}
 800fe8e:	bf00      	nop
 800fe90:	0801103d 	.word	0x0801103d
 800fe94:	0801105f 	.word	0x0801105f
 800fe98:	08011097 	.word	0x08011097
 800fe9c:	080110bb 	.word	0x080110bb

0800fea0 <_cleanup_r>:
 800fea0:	4901      	ldr	r1, [pc, #4]	; (800fea8 <_cleanup_r+0x8>)
 800fea2:	f000 b8af 	b.w	8010004 <_fwalk_reent>
 800fea6:	bf00      	nop
 800fea8:	0800fde1 	.word	0x0800fde1

0800feac <__sfmoreglue>:
 800feac:	b570      	push	{r4, r5, r6, lr}
 800feae:	2268      	movs	r2, #104	; 0x68
 800feb0:	1e4d      	subs	r5, r1, #1
 800feb2:	4355      	muls	r5, r2
 800feb4:	460e      	mov	r6, r1
 800feb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800feba:	f000 fd3d 	bl	8010938 <_malloc_r>
 800febe:	4604      	mov	r4, r0
 800fec0:	b140      	cbz	r0, 800fed4 <__sfmoreglue+0x28>
 800fec2:	2100      	movs	r1, #0
 800fec4:	e9c0 1600 	strd	r1, r6, [r0]
 800fec8:	300c      	adds	r0, #12
 800feca:	60a0      	str	r0, [r4, #8]
 800fecc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fed0:	f7fe f9c0 	bl	800e254 <memset>
 800fed4:	4620      	mov	r0, r4
 800fed6:	bd70      	pop	{r4, r5, r6, pc}

0800fed8 <__sfp_lock_acquire>:
 800fed8:	4801      	ldr	r0, [pc, #4]	; (800fee0 <__sfp_lock_acquire+0x8>)
 800feda:	f000 b8b8 	b.w	801004e <__retarget_lock_acquire_recursive>
 800fede:	bf00      	nop
 800fee0:	2000143d 	.word	0x2000143d

0800fee4 <__sfp_lock_release>:
 800fee4:	4801      	ldr	r0, [pc, #4]	; (800feec <__sfp_lock_release+0x8>)
 800fee6:	f000 b8b3 	b.w	8010050 <__retarget_lock_release_recursive>
 800feea:	bf00      	nop
 800feec:	2000143d 	.word	0x2000143d

0800fef0 <__sinit_lock_acquire>:
 800fef0:	4801      	ldr	r0, [pc, #4]	; (800fef8 <__sinit_lock_acquire+0x8>)
 800fef2:	f000 b8ac 	b.w	801004e <__retarget_lock_acquire_recursive>
 800fef6:	bf00      	nop
 800fef8:	2000143e 	.word	0x2000143e

0800fefc <__sinit_lock_release>:
 800fefc:	4801      	ldr	r0, [pc, #4]	; (800ff04 <__sinit_lock_release+0x8>)
 800fefe:	f000 b8a7 	b.w	8010050 <__retarget_lock_release_recursive>
 800ff02:	bf00      	nop
 800ff04:	2000143e 	.word	0x2000143e

0800ff08 <__sinit>:
 800ff08:	b510      	push	{r4, lr}
 800ff0a:	4604      	mov	r4, r0
 800ff0c:	f7ff fff0 	bl	800fef0 <__sinit_lock_acquire>
 800ff10:	69a3      	ldr	r3, [r4, #24]
 800ff12:	b11b      	cbz	r3, 800ff1c <__sinit+0x14>
 800ff14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff18:	f7ff bff0 	b.w	800fefc <__sinit_lock_release>
 800ff1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ff20:	6523      	str	r3, [r4, #80]	; 0x50
 800ff22:	4b13      	ldr	r3, [pc, #76]	; (800ff70 <__sinit+0x68>)
 800ff24:	4a13      	ldr	r2, [pc, #76]	; (800ff74 <__sinit+0x6c>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	62a2      	str	r2, [r4, #40]	; 0x28
 800ff2a:	42a3      	cmp	r3, r4
 800ff2c:	bf04      	itt	eq
 800ff2e:	2301      	moveq	r3, #1
 800ff30:	61a3      	streq	r3, [r4, #24]
 800ff32:	4620      	mov	r0, r4
 800ff34:	f000 f820 	bl	800ff78 <__sfp>
 800ff38:	6060      	str	r0, [r4, #4]
 800ff3a:	4620      	mov	r0, r4
 800ff3c:	f000 f81c 	bl	800ff78 <__sfp>
 800ff40:	60a0      	str	r0, [r4, #8]
 800ff42:	4620      	mov	r0, r4
 800ff44:	f000 f818 	bl	800ff78 <__sfp>
 800ff48:	2200      	movs	r2, #0
 800ff4a:	60e0      	str	r0, [r4, #12]
 800ff4c:	2104      	movs	r1, #4
 800ff4e:	6860      	ldr	r0, [r4, #4]
 800ff50:	f7ff ff82 	bl	800fe58 <std>
 800ff54:	68a0      	ldr	r0, [r4, #8]
 800ff56:	2201      	movs	r2, #1
 800ff58:	2109      	movs	r1, #9
 800ff5a:	f7ff ff7d 	bl	800fe58 <std>
 800ff5e:	68e0      	ldr	r0, [r4, #12]
 800ff60:	2202      	movs	r2, #2
 800ff62:	2112      	movs	r1, #18
 800ff64:	f7ff ff78 	bl	800fe58 <std>
 800ff68:	2301      	movs	r3, #1
 800ff6a:	61a3      	str	r3, [r4, #24]
 800ff6c:	e7d2      	b.n	800ff14 <__sinit+0xc>
 800ff6e:	bf00      	nop
 800ff70:	0801159c 	.word	0x0801159c
 800ff74:	0800fea1 	.word	0x0800fea1

0800ff78 <__sfp>:
 800ff78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff7a:	4607      	mov	r7, r0
 800ff7c:	f7ff ffac 	bl	800fed8 <__sfp_lock_acquire>
 800ff80:	4b1e      	ldr	r3, [pc, #120]	; (800fffc <__sfp+0x84>)
 800ff82:	681e      	ldr	r6, [r3, #0]
 800ff84:	69b3      	ldr	r3, [r6, #24]
 800ff86:	b913      	cbnz	r3, 800ff8e <__sfp+0x16>
 800ff88:	4630      	mov	r0, r6
 800ff8a:	f7ff ffbd 	bl	800ff08 <__sinit>
 800ff8e:	3648      	adds	r6, #72	; 0x48
 800ff90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ff94:	3b01      	subs	r3, #1
 800ff96:	d503      	bpl.n	800ffa0 <__sfp+0x28>
 800ff98:	6833      	ldr	r3, [r6, #0]
 800ff9a:	b30b      	cbz	r3, 800ffe0 <__sfp+0x68>
 800ff9c:	6836      	ldr	r6, [r6, #0]
 800ff9e:	e7f7      	b.n	800ff90 <__sfp+0x18>
 800ffa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ffa4:	b9d5      	cbnz	r5, 800ffdc <__sfp+0x64>
 800ffa6:	4b16      	ldr	r3, [pc, #88]	; (8010000 <__sfp+0x88>)
 800ffa8:	60e3      	str	r3, [r4, #12]
 800ffaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ffae:	6665      	str	r5, [r4, #100]	; 0x64
 800ffb0:	f000 f84c 	bl	801004c <__retarget_lock_init_recursive>
 800ffb4:	f7ff ff96 	bl	800fee4 <__sfp_lock_release>
 800ffb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ffbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ffc0:	6025      	str	r5, [r4, #0]
 800ffc2:	61a5      	str	r5, [r4, #24]
 800ffc4:	2208      	movs	r2, #8
 800ffc6:	4629      	mov	r1, r5
 800ffc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ffcc:	f7fe f942 	bl	800e254 <memset>
 800ffd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ffd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ffd8:	4620      	mov	r0, r4
 800ffda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffdc:	3468      	adds	r4, #104	; 0x68
 800ffde:	e7d9      	b.n	800ff94 <__sfp+0x1c>
 800ffe0:	2104      	movs	r1, #4
 800ffe2:	4638      	mov	r0, r7
 800ffe4:	f7ff ff62 	bl	800feac <__sfmoreglue>
 800ffe8:	4604      	mov	r4, r0
 800ffea:	6030      	str	r0, [r6, #0]
 800ffec:	2800      	cmp	r0, #0
 800ffee:	d1d5      	bne.n	800ff9c <__sfp+0x24>
 800fff0:	f7ff ff78 	bl	800fee4 <__sfp_lock_release>
 800fff4:	230c      	movs	r3, #12
 800fff6:	603b      	str	r3, [r7, #0]
 800fff8:	e7ee      	b.n	800ffd8 <__sfp+0x60>
 800fffa:	bf00      	nop
 800fffc:	0801159c 	.word	0x0801159c
 8010000:	ffff0001 	.word	0xffff0001

08010004 <_fwalk_reent>:
 8010004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010008:	4606      	mov	r6, r0
 801000a:	4688      	mov	r8, r1
 801000c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010010:	2700      	movs	r7, #0
 8010012:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010016:	f1b9 0901 	subs.w	r9, r9, #1
 801001a:	d505      	bpl.n	8010028 <_fwalk_reent+0x24>
 801001c:	6824      	ldr	r4, [r4, #0]
 801001e:	2c00      	cmp	r4, #0
 8010020:	d1f7      	bne.n	8010012 <_fwalk_reent+0xe>
 8010022:	4638      	mov	r0, r7
 8010024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010028:	89ab      	ldrh	r3, [r5, #12]
 801002a:	2b01      	cmp	r3, #1
 801002c:	d907      	bls.n	801003e <_fwalk_reent+0x3a>
 801002e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010032:	3301      	adds	r3, #1
 8010034:	d003      	beq.n	801003e <_fwalk_reent+0x3a>
 8010036:	4629      	mov	r1, r5
 8010038:	4630      	mov	r0, r6
 801003a:	47c0      	blx	r8
 801003c:	4307      	orrs	r7, r0
 801003e:	3568      	adds	r5, #104	; 0x68
 8010040:	e7e9      	b.n	8010016 <_fwalk_reent+0x12>
	...

08010044 <_localeconv_r>:
 8010044:	4800      	ldr	r0, [pc, #0]	; (8010048 <_localeconv_r+0x4>)
 8010046:	4770      	bx	lr
 8010048:	20000160 	.word	0x20000160

0801004c <__retarget_lock_init_recursive>:
 801004c:	4770      	bx	lr

0801004e <__retarget_lock_acquire_recursive>:
 801004e:	4770      	bx	lr

08010050 <__retarget_lock_release_recursive>:
 8010050:	4770      	bx	lr

08010052 <__swhatbuf_r>:
 8010052:	b570      	push	{r4, r5, r6, lr}
 8010054:	460e      	mov	r6, r1
 8010056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801005a:	2900      	cmp	r1, #0
 801005c:	b096      	sub	sp, #88	; 0x58
 801005e:	4614      	mov	r4, r2
 8010060:	461d      	mov	r5, r3
 8010062:	da08      	bge.n	8010076 <__swhatbuf_r+0x24>
 8010064:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010068:	2200      	movs	r2, #0
 801006a:	602a      	str	r2, [r5, #0]
 801006c:	061a      	lsls	r2, r3, #24
 801006e:	d410      	bmi.n	8010092 <__swhatbuf_r+0x40>
 8010070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010074:	e00e      	b.n	8010094 <__swhatbuf_r+0x42>
 8010076:	466a      	mov	r2, sp
 8010078:	f001 f876 	bl	8011168 <_fstat_r>
 801007c:	2800      	cmp	r0, #0
 801007e:	dbf1      	blt.n	8010064 <__swhatbuf_r+0x12>
 8010080:	9a01      	ldr	r2, [sp, #4]
 8010082:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010086:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801008a:	425a      	negs	r2, r3
 801008c:	415a      	adcs	r2, r3
 801008e:	602a      	str	r2, [r5, #0]
 8010090:	e7ee      	b.n	8010070 <__swhatbuf_r+0x1e>
 8010092:	2340      	movs	r3, #64	; 0x40
 8010094:	2000      	movs	r0, #0
 8010096:	6023      	str	r3, [r4, #0]
 8010098:	b016      	add	sp, #88	; 0x58
 801009a:	bd70      	pop	{r4, r5, r6, pc}

0801009c <__smakebuf_r>:
 801009c:	898b      	ldrh	r3, [r1, #12]
 801009e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80100a0:	079d      	lsls	r5, r3, #30
 80100a2:	4606      	mov	r6, r0
 80100a4:	460c      	mov	r4, r1
 80100a6:	d507      	bpl.n	80100b8 <__smakebuf_r+0x1c>
 80100a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80100ac:	6023      	str	r3, [r4, #0]
 80100ae:	6123      	str	r3, [r4, #16]
 80100b0:	2301      	movs	r3, #1
 80100b2:	6163      	str	r3, [r4, #20]
 80100b4:	b002      	add	sp, #8
 80100b6:	bd70      	pop	{r4, r5, r6, pc}
 80100b8:	ab01      	add	r3, sp, #4
 80100ba:	466a      	mov	r2, sp
 80100bc:	f7ff ffc9 	bl	8010052 <__swhatbuf_r>
 80100c0:	9900      	ldr	r1, [sp, #0]
 80100c2:	4605      	mov	r5, r0
 80100c4:	4630      	mov	r0, r6
 80100c6:	f000 fc37 	bl	8010938 <_malloc_r>
 80100ca:	b948      	cbnz	r0, 80100e0 <__smakebuf_r+0x44>
 80100cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100d0:	059a      	lsls	r2, r3, #22
 80100d2:	d4ef      	bmi.n	80100b4 <__smakebuf_r+0x18>
 80100d4:	f023 0303 	bic.w	r3, r3, #3
 80100d8:	f043 0302 	orr.w	r3, r3, #2
 80100dc:	81a3      	strh	r3, [r4, #12]
 80100de:	e7e3      	b.n	80100a8 <__smakebuf_r+0xc>
 80100e0:	4b0d      	ldr	r3, [pc, #52]	; (8010118 <__smakebuf_r+0x7c>)
 80100e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80100e4:	89a3      	ldrh	r3, [r4, #12]
 80100e6:	6020      	str	r0, [r4, #0]
 80100e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100ec:	81a3      	strh	r3, [r4, #12]
 80100ee:	9b00      	ldr	r3, [sp, #0]
 80100f0:	6163      	str	r3, [r4, #20]
 80100f2:	9b01      	ldr	r3, [sp, #4]
 80100f4:	6120      	str	r0, [r4, #16]
 80100f6:	b15b      	cbz	r3, 8010110 <__smakebuf_r+0x74>
 80100f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80100fc:	4630      	mov	r0, r6
 80100fe:	f001 f845 	bl	801118c <_isatty_r>
 8010102:	b128      	cbz	r0, 8010110 <__smakebuf_r+0x74>
 8010104:	89a3      	ldrh	r3, [r4, #12]
 8010106:	f023 0303 	bic.w	r3, r3, #3
 801010a:	f043 0301 	orr.w	r3, r3, #1
 801010e:	81a3      	strh	r3, [r4, #12]
 8010110:	89a0      	ldrh	r0, [r4, #12]
 8010112:	4305      	orrs	r5, r0
 8010114:	81a5      	strh	r5, [r4, #12]
 8010116:	e7cd      	b.n	80100b4 <__smakebuf_r+0x18>
 8010118:	0800fea1 	.word	0x0800fea1

0801011c <malloc>:
 801011c:	4b02      	ldr	r3, [pc, #8]	; (8010128 <malloc+0xc>)
 801011e:	4601      	mov	r1, r0
 8010120:	6818      	ldr	r0, [r3, #0]
 8010122:	f000 bc09 	b.w	8010938 <_malloc_r>
 8010126:	bf00      	nop
 8010128:	2000000c 	.word	0x2000000c

0801012c <_Balloc>:
 801012c:	b570      	push	{r4, r5, r6, lr}
 801012e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010130:	4604      	mov	r4, r0
 8010132:	460d      	mov	r5, r1
 8010134:	b976      	cbnz	r6, 8010154 <_Balloc+0x28>
 8010136:	2010      	movs	r0, #16
 8010138:	f7ff fff0 	bl	801011c <malloc>
 801013c:	4602      	mov	r2, r0
 801013e:	6260      	str	r0, [r4, #36]	; 0x24
 8010140:	b920      	cbnz	r0, 801014c <_Balloc+0x20>
 8010142:	4b18      	ldr	r3, [pc, #96]	; (80101a4 <_Balloc+0x78>)
 8010144:	4818      	ldr	r0, [pc, #96]	; (80101a8 <_Balloc+0x7c>)
 8010146:	2166      	movs	r1, #102	; 0x66
 8010148:	f000 ffce 	bl	80110e8 <__assert_func>
 801014c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010150:	6006      	str	r6, [r0, #0]
 8010152:	60c6      	str	r6, [r0, #12]
 8010154:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010156:	68f3      	ldr	r3, [r6, #12]
 8010158:	b183      	cbz	r3, 801017c <_Balloc+0x50>
 801015a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801015c:	68db      	ldr	r3, [r3, #12]
 801015e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010162:	b9b8      	cbnz	r0, 8010194 <_Balloc+0x68>
 8010164:	2101      	movs	r1, #1
 8010166:	fa01 f605 	lsl.w	r6, r1, r5
 801016a:	1d72      	adds	r2, r6, #5
 801016c:	0092      	lsls	r2, r2, #2
 801016e:	4620      	mov	r0, r4
 8010170:	f000 fb60 	bl	8010834 <_calloc_r>
 8010174:	b160      	cbz	r0, 8010190 <_Balloc+0x64>
 8010176:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801017a:	e00e      	b.n	801019a <_Balloc+0x6e>
 801017c:	2221      	movs	r2, #33	; 0x21
 801017e:	2104      	movs	r1, #4
 8010180:	4620      	mov	r0, r4
 8010182:	f000 fb57 	bl	8010834 <_calloc_r>
 8010186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010188:	60f0      	str	r0, [r6, #12]
 801018a:	68db      	ldr	r3, [r3, #12]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d1e4      	bne.n	801015a <_Balloc+0x2e>
 8010190:	2000      	movs	r0, #0
 8010192:	bd70      	pop	{r4, r5, r6, pc}
 8010194:	6802      	ldr	r2, [r0, #0]
 8010196:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801019a:	2300      	movs	r3, #0
 801019c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80101a0:	e7f7      	b.n	8010192 <_Balloc+0x66>
 80101a2:	bf00      	nop
 80101a4:	080115e1 	.word	0x080115e1
 80101a8:	080116c4 	.word	0x080116c4

080101ac <_Bfree>:
 80101ac:	b570      	push	{r4, r5, r6, lr}
 80101ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80101b0:	4605      	mov	r5, r0
 80101b2:	460c      	mov	r4, r1
 80101b4:	b976      	cbnz	r6, 80101d4 <_Bfree+0x28>
 80101b6:	2010      	movs	r0, #16
 80101b8:	f7ff ffb0 	bl	801011c <malloc>
 80101bc:	4602      	mov	r2, r0
 80101be:	6268      	str	r0, [r5, #36]	; 0x24
 80101c0:	b920      	cbnz	r0, 80101cc <_Bfree+0x20>
 80101c2:	4b09      	ldr	r3, [pc, #36]	; (80101e8 <_Bfree+0x3c>)
 80101c4:	4809      	ldr	r0, [pc, #36]	; (80101ec <_Bfree+0x40>)
 80101c6:	218a      	movs	r1, #138	; 0x8a
 80101c8:	f000 ff8e 	bl	80110e8 <__assert_func>
 80101cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80101d0:	6006      	str	r6, [r0, #0]
 80101d2:	60c6      	str	r6, [r0, #12]
 80101d4:	b13c      	cbz	r4, 80101e6 <_Bfree+0x3a>
 80101d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80101d8:	6862      	ldr	r2, [r4, #4]
 80101da:	68db      	ldr	r3, [r3, #12]
 80101dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80101e0:	6021      	str	r1, [r4, #0]
 80101e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80101e6:	bd70      	pop	{r4, r5, r6, pc}
 80101e8:	080115e1 	.word	0x080115e1
 80101ec:	080116c4 	.word	0x080116c4

080101f0 <__multadd>:
 80101f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101f4:	690d      	ldr	r5, [r1, #16]
 80101f6:	4607      	mov	r7, r0
 80101f8:	460c      	mov	r4, r1
 80101fa:	461e      	mov	r6, r3
 80101fc:	f101 0c14 	add.w	ip, r1, #20
 8010200:	2000      	movs	r0, #0
 8010202:	f8dc 3000 	ldr.w	r3, [ip]
 8010206:	b299      	uxth	r1, r3
 8010208:	fb02 6101 	mla	r1, r2, r1, r6
 801020c:	0c1e      	lsrs	r6, r3, #16
 801020e:	0c0b      	lsrs	r3, r1, #16
 8010210:	fb02 3306 	mla	r3, r2, r6, r3
 8010214:	b289      	uxth	r1, r1
 8010216:	3001      	adds	r0, #1
 8010218:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801021c:	4285      	cmp	r5, r0
 801021e:	f84c 1b04 	str.w	r1, [ip], #4
 8010222:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010226:	dcec      	bgt.n	8010202 <__multadd+0x12>
 8010228:	b30e      	cbz	r6, 801026e <__multadd+0x7e>
 801022a:	68a3      	ldr	r3, [r4, #8]
 801022c:	42ab      	cmp	r3, r5
 801022e:	dc19      	bgt.n	8010264 <__multadd+0x74>
 8010230:	6861      	ldr	r1, [r4, #4]
 8010232:	4638      	mov	r0, r7
 8010234:	3101      	adds	r1, #1
 8010236:	f7ff ff79 	bl	801012c <_Balloc>
 801023a:	4680      	mov	r8, r0
 801023c:	b928      	cbnz	r0, 801024a <__multadd+0x5a>
 801023e:	4602      	mov	r2, r0
 8010240:	4b0c      	ldr	r3, [pc, #48]	; (8010274 <__multadd+0x84>)
 8010242:	480d      	ldr	r0, [pc, #52]	; (8010278 <__multadd+0x88>)
 8010244:	21b5      	movs	r1, #181	; 0xb5
 8010246:	f000 ff4f 	bl	80110e8 <__assert_func>
 801024a:	6922      	ldr	r2, [r4, #16]
 801024c:	3202      	adds	r2, #2
 801024e:	f104 010c 	add.w	r1, r4, #12
 8010252:	0092      	lsls	r2, r2, #2
 8010254:	300c      	adds	r0, #12
 8010256:	f7fd ffef 	bl	800e238 <memcpy>
 801025a:	4621      	mov	r1, r4
 801025c:	4638      	mov	r0, r7
 801025e:	f7ff ffa5 	bl	80101ac <_Bfree>
 8010262:	4644      	mov	r4, r8
 8010264:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010268:	3501      	adds	r5, #1
 801026a:	615e      	str	r6, [r3, #20]
 801026c:	6125      	str	r5, [r4, #16]
 801026e:	4620      	mov	r0, r4
 8010270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010274:	08011653 	.word	0x08011653
 8010278:	080116c4 	.word	0x080116c4

0801027c <__hi0bits>:
 801027c:	0c03      	lsrs	r3, r0, #16
 801027e:	041b      	lsls	r3, r3, #16
 8010280:	b9d3      	cbnz	r3, 80102b8 <__hi0bits+0x3c>
 8010282:	0400      	lsls	r0, r0, #16
 8010284:	2310      	movs	r3, #16
 8010286:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801028a:	bf04      	itt	eq
 801028c:	0200      	lsleq	r0, r0, #8
 801028e:	3308      	addeq	r3, #8
 8010290:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010294:	bf04      	itt	eq
 8010296:	0100      	lsleq	r0, r0, #4
 8010298:	3304      	addeq	r3, #4
 801029a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801029e:	bf04      	itt	eq
 80102a0:	0080      	lsleq	r0, r0, #2
 80102a2:	3302      	addeq	r3, #2
 80102a4:	2800      	cmp	r0, #0
 80102a6:	db05      	blt.n	80102b4 <__hi0bits+0x38>
 80102a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80102ac:	f103 0301 	add.w	r3, r3, #1
 80102b0:	bf08      	it	eq
 80102b2:	2320      	moveq	r3, #32
 80102b4:	4618      	mov	r0, r3
 80102b6:	4770      	bx	lr
 80102b8:	2300      	movs	r3, #0
 80102ba:	e7e4      	b.n	8010286 <__hi0bits+0xa>

080102bc <__lo0bits>:
 80102bc:	6803      	ldr	r3, [r0, #0]
 80102be:	f013 0207 	ands.w	r2, r3, #7
 80102c2:	4601      	mov	r1, r0
 80102c4:	d00b      	beq.n	80102de <__lo0bits+0x22>
 80102c6:	07da      	lsls	r2, r3, #31
 80102c8:	d423      	bmi.n	8010312 <__lo0bits+0x56>
 80102ca:	0798      	lsls	r0, r3, #30
 80102cc:	bf49      	itett	mi
 80102ce:	085b      	lsrmi	r3, r3, #1
 80102d0:	089b      	lsrpl	r3, r3, #2
 80102d2:	2001      	movmi	r0, #1
 80102d4:	600b      	strmi	r3, [r1, #0]
 80102d6:	bf5c      	itt	pl
 80102d8:	600b      	strpl	r3, [r1, #0]
 80102da:	2002      	movpl	r0, #2
 80102dc:	4770      	bx	lr
 80102de:	b298      	uxth	r0, r3
 80102e0:	b9a8      	cbnz	r0, 801030e <__lo0bits+0x52>
 80102e2:	0c1b      	lsrs	r3, r3, #16
 80102e4:	2010      	movs	r0, #16
 80102e6:	b2da      	uxtb	r2, r3
 80102e8:	b90a      	cbnz	r2, 80102ee <__lo0bits+0x32>
 80102ea:	3008      	adds	r0, #8
 80102ec:	0a1b      	lsrs	r3, r3, #8
 80102ee:	071a      	lsls	r2, r3, #28
 80102f0:	bf04      	itt	eq
 80102f2:	091b      	lsreq	r3, r3, #4
 80102f4:	3004      	addeq	r0, #4
 80102f6:	079a      	lsls	r2, r3, #30
 80102f8:	bf04      	itt	eq
 80102fa:	089b      	lsreq	r3, r3, #2
 80102fc:	3002      	addeq	r0, #2
 80102fe:	07da      	lsls	r2, r3, #31
 8010300:	d403      	bmi.n	801030a <__lo0bits+0x4e>
 8010302:	085b      	lsrs	r3, r3, #1
 8010304:	f100 0001 	add.w	r0, r0, #1
 8010308:	d005      	beq.n	8010316 <__lo0bits+0x5a>
 801030a:	600b      	str	r3, [r1, #0]
 801030c:	4770      	bx	lr
 801030e:	4610      	mov	r0, r2
 8010310:	e7e9      	b.n	80102e6 <__lo0bits+0x2a>
 8010312:	2000      	movs	r0, #0
 8010314:	4770      	bx	lr
 8010316:	2020      	movs	r0, #32
 8010318:	4770      	bx	lr
	...

0801031c <__i2b>:
 801031c:	b510      	push	{r4, lr}
 801031e:	460c      	mov	r4, r1
 8010320:	2101      	movs	r1, #1
 8010322:	f7ff ff03 	bl	801012c <_Balloc>
 8010326:	4602      	mov	r2, r0
 8010328:	b928      	cbnz	r0, 8010336 <__i2b+0x1a>
 801032a:	4b05      	ldr	r3, [pc, #20]	; (8010340 <__i2b+0x24>)
 801032c:	4805      	ldr	r0, [pc, #20]	; (8010344 <__i2b+0x28>)
 801032e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010332:	f000 fed9 	bl	80110e8 <__assert_func>
 8010336:	2301      	movs	r3, #1
 8010338:	6144      	str	r4, [r0, #20]
 801033a:	6103      	str	r3, [r0, #16]
 801033c:	bd10      	pop	{r4, pc}
 801033e:	bf00      	nop
 8010340:	08011653 	.word	0x08011653
 8010344:	080116c4 	.word	0x080116c4

08010348 <__multiply>:
 8010348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801034c:	4691      	mov	r9, r2
 801034e:	690a      	ldr	r2, [r1, #16]
 8010350:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010354:	429a      	cmp	r2, r3
 8010356:	bfb8      	it	lt
 8010358:	460b      	movlt	r3, r1
 801035a:	460c      	mov	r4, r1
 801035c:	bfbc      	itt	lt
 801035e:	464c      	movlt	r4, r9
 8010360:	4699      	movlt	r9, r3
 8010362:	6927      	ldr	r7, [r4, #16]
 8010364:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010368:	68a3      	ldr	r3, [r4, #8]
 801036a:	6861      	ldr	r1, [r4, #4]
 801036c:	eb07 060a 	add.w	r6, r7, sl
 8010370:	42b3      	cmp	r3, r6
 8010372:	b085      	sub	sp, #20
 8010374:	bfb8      	it	lt
 8010376:	3101      	addlt	r1, #1
 8010378:	f7ff fed8 	bl	801012c <_Balloc>
 801037c:	b930      	cbnz	r0, 801038c <__multiply+0x44>
 801037e:	4602      	mov	r2, r0
 8010380:	4b44      	ldr	r3, [pc, #272]	; (8010494 <__multiply+0x14c>)
 8010382:	4845      	ldr	r0, [pc, #276]	; (8010498 <__multiply+0x150>)
 8010384:	f240 115d 	movw	r1, #349	; 0x15d
 8010388:	f000 feae 	bl	80110e8 <__assert_func>
 801038c:	f100 0514 	add.w	r5, r0, #20
 8010390:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010394:	462b      	mov	r3, r5
 8010396:	2200      	movs	r2, #0
 8010398:	4543      	cmp	r3, r8
 801039a:	d321      	bcc.n	80103e0 <__multiply+0x98>
 801039c:	f104 0314 	add.w	r3, r4, #20
 80103a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80103a4:	f109 0314 	add.w	r3, r9, #20
 80103a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80103ac:	9202      	str	r2, [sp, #8]
 80103ae:	1b3a      	subs	r2, r7, r4
 80103b0:	3a15      	subs	r2, #21
 80103b2:	f022 0203 	bic.w	r2, r2, #3
 80103b6:	3204      	adds	r2, #4
 80103b8:	f104 0115 	add.w	r1, r4, #21
 80103bc:	428f      	cmp	r7, r1
 80103be:	bf38      	it	cc
 80103c0:	2204      	movcc	r2, #4
 80103c2:	9201      	str	r2, [sp, #4]
 80103c4:	9a02      	ldr	r2, [sp, #8]
 80103c6:	9303      	str	r3, [sp, #12]
 80103c8:	429a      	cmp	r2, r3
 80103ca:	d80c      	bhi.n	80103e6 <__multiply+0x9e>
 80103cc:	2e00      	cmp	r6, #0
 80103ce:	dd03      	ble.n	80103d8 <__multiply+0x90>
 80103d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d05a      	beq.n	801048e <__multiply+0x146>
 80103d8:	6106      	str	r6, [r0, #16]
 80103da:	b005      	add	sp, #20
 80103dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103e0:	f843 2b04 	str.w	r2, [r3], #4
 80103e4:	e7d8      	b.n	8010398 <__multiply+0x50>
 80103e6:	f8b3 a000 	ldrh.w	sl, [r3]
 80103ea:	f1ba 0f00 	cmp.w	sl, #0
 80103ee:	d024      	beq.n	801043a <__multiply+0xf2>
 80103f0:	f104 0e14 	add.w	lr, r4, #20
 80103f4:	46a9      	mov	r9, r5
 80103f6:	f04f 0c00 	mov.w	ip, #0
 80103fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80103fe:	f8d9 1000 	ldr.w	r1, [r9]
 8010402:	fa1f fb82 	uxth.w	fp, r2
 8010406:	b289      	uxth	r1, r1
 8010408:	fb0a 110b 	mla	r1, sl, fp, r1
 801040c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010410:	f8d9 2000 	ldr.w	r2, [r9]
 8010414:	4461      	add	r1, ip
 8010416:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801041a:	fb0a c20b 	mla	r2, sl, fp, ip
 801041e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010422:	b289      	uxth	r1, r1
 8010424:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010428:	4577      	cmp	r7, lr
 801042a:	f849 1b04 	str.w	r1, [r9], #4
 801042e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010432:	d8e2      	bhi.n	80103fa <__multiply+0xb2>
 8010434:	9a01      	ldr	r2, [sp, #4]
 8010436:	f845 c002 	str.w	ip, [r5, r2]
 801043a:	9a03      	ldr	r2, [sp, #12]
 801043c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010440:	3304      	adds	r3, #4
 8010442:	f1b9 0f00 	cmp.w	r9, #0
 8010446:	d020      	beq.n	801048a <__multiply+0x142>
 8010448:	6829      	ldr	r1, [r5, #0]
 801044a:	f104 0c14 	add.w	ip, r4, #20
 801044e:	46ae      	mov	lr, r5
 8010450:	f04f 0a00 	mov.w	sl, #0
 8010454:	f8bc b000 	ldrh.w	fp, [ip]
 8010458:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801045c:	fb09 220b 	mla	r2, r9, fp, r2
 8010460:	4492      	add	sl, r2
 8010462:	b289      	uxth	r1, r1
 8010464:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010468:	f84e 1b04 	str.w	r1, [lr], #4
 801046c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010470:	f8be 1000 	ldrh.w	r1, [lr]
 8010474:	0c12      	lsrs	r2, r2, #16
 8010476:	fb09 1102 	mla	r1, r9, r2, r1
 801047a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801047e:	4567      	cmp	r7, ip
 8010480:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010484:	d8e6      	bhi.n	8010454 <__multiply+0x10c>
 8010486:	9a01      	ldr	r2, [sp, #4]
 8010488:	50a9      	str	r1, [r5, r2]
 801048a:	3504      	adds	r5, #4
 801048c:	e79a      	b.n	80103c4 <__multiply+0x7c>
 801048e:	3e01      	subs	r6, #1
 8010490:	e79c      	b.n	80103cc <__multiply+0x84>
 8010492:	bf00      	nop
 8010494:	08011653 	.word	0x08011653
 8010498:	080116c4 	.word	0x080116c4

0801049c <__pow5mult>:
 801049c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104a0:	4615      	mov	r5, r2
 80104a2:	f012 0203 	ands.w	r2, r2, #3
 80104a6:	4606      	mov	r6, r0
 80104a8:	460f      	mov	r7, r1
 80104aa:	d007      	beq.n	80104bc <__pow5mult+0x20>
 80104ac:	4c25      	ldr	r4, [pc, #148]	; (8010544 <__pow5mult+0xa8>)
 80104ae:	3a01      	subs	r2, #1
 80104b0:	2300      	movs	r3, #0
 80104b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80104b6:	f7ff fe9b 	bl	80101f0 <__multadd>
 80104ba:	4607      	mov	r7, r0
 80104bc:	10ad      	asrs	r5, r5, #2
 80104be:	d03d      	beq.n	801053c <__pow5mult+0xa0>
 80104c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80104c2:	b97c      	cbnz	r4, 80104e4 <__pow5mult+0x48>
 80104c4:	2010      	movs	r0, #16
 80104c6:	f7ff fe29 	bl	801011c <malloc>
 80104ca:	4602      	mov	r2, r0
 80104cc:	6270      	str	r0, [r6, #36]	; 0x24
 80104ce:	b928      	cbnz	r0, 80104dc <__pow5mult+0x40>
 80104d0:	4b1d      	ldr	r3, [pc, #116]	; (8010548 <__pow5mult+0xac>)
 80104d2:	481e      	ldr	r0, [pc, #120]	; (801054c <__pow5mult+0xb0>)
 80104d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80104d8:	f000 fe06 	bl	80110e8 <__assert_func>
 80104dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80104e0:	6004      	str	r4, [r0, #0]
 80104e2:	60c4      	str	r4, [r0, #12]
 80104e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80104e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80104ec:	b94c      	cbnz	r4, 8010502 <__pow5mult+0x66>
 80104ee:	f240 2171 	movw	r1, #625	; 0x271
 80104f2:	4630      	mov	r0, r6
 80104f4:	f7ff ff12 	bl	801031c <__i2b>
 80104f8:	2300      	movs	r3, #0
 80104fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80104fe:	4604      	mov	r4, r0
 8010500:	6003      	str	r3, [r0, #0]
 8010502:	f04f 0900 	mov.w	r9, #0
 8010506:	07eb      	lsls	r3, r5, #31
 8010508:	d50a      	bpl.n	8010520 <__pow5mult+0x84>
 801050a:	4639      	mov	r1, r7
 801050c:	4622      	mov	r2, r4
 801050e:	4630      	mov	r0, r6
 8010510:	f7ff ff1a 	bl	8010348 <__multiply>
 8010514:	4639      	mov	r1, r7
 8010516:	4680      	mov	r8, r0
 8010518:	4630      	mov	r0, r6
 801051a:	f7ff fe47 	bl	80101ac <_Bfree>
 801051e:	4647      	mov	r7, r8
 8010520:	106d      	asrs	r5, r5, #1
 8010522:	d00b      	beq.n	801053c <__pow5mult+0xa0>
 8010524:	6820      	ldr	r0, [r4, #0]
 8010526:	b938      	cbnz	r0, 8010538 <__pow5mult+0x9c>
 8010528:	4622      	mov	r2, r4
 801052a:	4621      	mov	r1, r4
 801052c:	4630      	mov	r0, r6
 801052e:	f7ff ff0b 	bl	8010348 <__multiply>
 8010532:	6020      	str	r0, [r4, #0]
 8010534:	f8c0 9000 	str.w	r9, [r0]
 8010538:	4604      	mov	r4, r0
 801053a:	e7e4      	b.n	8010506 <__pow5mult+0x6a>
 801053c:	4638      	mov	r0, r7
 801053e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010542:	bf00      	nop
 8010544:	08011810 	.word	0x08011810
 8010548:	080115e1 	.word	0x080115e1
 801054c:	080116c4 	.word	0x080116c4

08010550 <__lshift>:
 8010550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010554:	460c      	mov	r4, r1
 8010556:	6849      	ldr	r1, [r1, #4]
 8010558:	6923      	ldr	r3, [r4, #16]
 801055a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801055e:	68a3      	ldr	r3, [r4, #8]
 8010560:	4607      	mov	r7, r0
 8010562:	4691      	mov	r9, r2
 8010564:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010568:	f108 0601 	add.w	r6, r8, #1
 801056c:	42b3      	cmp	r3, r6
 801056e:	db0b      	blt.n	8010588 <__lshift+0x38>
 8010570:	4638      	mov	r0, r7
 8010572:	f7ff fddb 	bl	801012c <_Balloc>
 8010576:	4605      	mov	r5, r0
 8010578:	b948      	cbnz	r0, 801058e <__lshift+0x3e>
 801057a:	4602      	mov	r2, r0
 801057c:	4b2a      	ldr	r3, [pc, #168]	; (8010628 <__lshift+0xd8>)
 801057e:	482b      	ldr	r0, [pc, #172]	; (801062c <__lshift+0xdc>)
 8010580:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010584:	f000 fdb0 	bl	80110e8 <__assert_func>
 8010588:	3101      	adds	r1, #1
 801058a:	005b      	lsls	r3, r3, #1
 801058c:	e7ee      	b.n	801056c <__lshift+0x1c>
 801058e:	2300      	movs	r3, #0
 8010590:	f100 0114 	add.w	r1, r0, #20
 8010594:	f100 0210 	add.w	r2, r0, #16
 8010598:	4618      	mov	r0, r3
 801059a:	4553      	cmp	r3, sl
 801059c:	db37      	blt.n	801060e <__lshift+0xbe>
 801059e:	6920      	ldr	r0, [r4, #16]
 80105a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80105a4:	f104 0314 	add.w	r3, r4, #20
 80105a8:	f019 091f 	ands.w	r9, r9, #31
 80105ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80105b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80105b4:	d02f      	beq.n	8010616 <__lshift+0xc6>
 80105b6:	f1c9 0e20 	rsb	lr, r9, #32
 80105ba:	468a      	mov	sl, r1
 80105bc:	f04f 0c00 	mov.w	ip, #0
 80105c0:	681a      	ldr	r2, [r3, #0]
 80105c2:	fa02 f209 	lsl.w	r2, r2, r9
 80105c6:	ea42 020c 	orr.w	r2, r2, ip
 80105ca:	f84a 2b04 	str.w	r2, [sl], #4
 80105ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80105d2:	4298      	cmp	r0, r3
 80105d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80105d8:	d8f2      	bhi.n	80105c0 <__lshift+0x70>
 80105da:	1b03      	subs	r3, r0, r4
 80105dc:	3b15      	subs	r3, #21
 80105de:	f023 0303 	bic.w	r3, r3, #3
 80105e2:	3304      	adds	r3, #4
 80105e4:	f104 0215 	add.w	r2, r4, #21
 80105e8:	4290      	cmp	r0, r2
 80105ea:	bf38      	it	cc
 80105ec:	2304      	movcc	r3, #4
 80105ee:	f841 c003 	str.w	ip, [r1, r3]
 80105f2:	f1bc 0f00 	cmp.w	ip, #0
 80105f6:	d001      	beq.n	80105fc <__lshift+0xac>
 80105f8:	f108 0602 	add.w	r6, r8, #2
 80105fc:	3e01      	subs	r6, #1
 80105fe:	4638      	mov	r0, r7
 8010600:	612e      	str	r6, [r5, #16]
 8010602:	4621      	mov	r1, r4
 8010604:	f7ff fdd2 	bl	80101ac <_Bfree>
 8010608:	4628      	mov	r0, r5
 801060a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801060e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010612:	3301      	adds	r3, #1
 8010614:	e7c1      	b.n	801059a <__lshift+0x4a>
 8010616:	3904      	subs	r1, #4
 8010618:	f853 2b04 	ldr.w	r2, [r3], #4
 801061c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010620:	4298      	cmp	r0, r3
 8010622:	d8f9      	bhi.n	8010618 <__lshift+0xc8>
 8010624:	e7ea      	b.n	80105fc <__lshift+0xac>
 8010626:	bf00      	nop
 8010628:	08011653 	.word	0x08011653
 801062c:	080116c4 	.word	0x080116c4

08010630 <__mcmp>:
 8010630:	b530      	push	{r4, r5, lr}
 8010632:	6902      	ldr	r2, [r0, #16]
 8010634:	690c      	ldr	r4, [r1, #16]
 8010636:	1b12      	subs	r2, r2, r4
 8010638:	d10e      	bne.n	8010658 <__mcmp+0x28>
 801063a:	f100 0314 	add.w	r3, r0, #20
 801063e:	3114      	adds	r1, #20
 8010640:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010644:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010648:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801064c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010650:	42a5      	cmp	r5, r4
 8010652:	d003      	beq.n	801065c <__mcmp+0x2c>
 8010654:	d305      	bcc.n	8010662 <__mcmp+0x32>
 8010656:	2201      	movs	r2, #1
 8010658:	4610      	mov	r0, r2
 801065a:	bd30      	pop	{r4, r5, pc}
 801065c:	4283      	cmp	r3, r0
 801065e:	d3f3      	bcc.n	8010648 <__mcmp+0x18>
 8010660:	e7fa      	b.n	8010658 <__mcmp+0x28>
 8010662:	f04f 32ff 	mov.w	r2, #4294967295
 8010666:	e7f7      	b.n	8010658 <__mcmp+0x28>

08010668 <__mdiff>:
 8010668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801066c:	460c      	mov	r4, r1
 801066e:	4606      	mov	r6, r0
 8010670:	4611      	mov	r1, r2
 8010672:	4620      	mov	r0, r4
 8010674:	4690      	mov	r8, r2
 8010676:	f7ff ffdb 	bl	8010630 <__mcmp>
 801067a:	1e05      	subs	r5, r0, #0
 801067c:	d110      	bne.n	80106a0 <__mdiff+0x38>
 801067e:	4629      	mov	r1, r5
 8010680:	4630      	mov	r0, r6
 8010682:	f7ff fd53 	bl	801012c <_Balloc>
 8010686:	b930      	cbnz	r0, 8010696 <__mdiff+0x2e>
 8010688:	4b3a      	ldr	r3, [pc, #232]	; (8010774 <__mdiff+0x10c>)
 801068a:	4602      	mov	r2, r0
 801068c:	f240 2132 	movw	r1, #562	; 0x232
 8010690:	4839      	ldr	r0, [pc, #228]	; (8010778 <__mdiff+0x110>)
 8010692:	f000 fd29 	bl	80110e8 <__assert_func>
 8010696:	2301      	movs	r3, #1
 8010698:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801069c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106a0:	bfa4      	itt	ge
 80106a2:	4643      	movge	r3, r8
 80106a4:	46a0      	movge	r8, r4
 80106a6:	4630      	mov	r0, r6
 80106a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80106ac:	bfa6      	itte	ge
 80106ae:	461c      	movge	r4, r3
 80106b0:	2500      	movge	r5, #0
 80106b2:	2501      	movlt	r5, #1
 80106b4:	f7ff fd3a 	bl	801012c <_Balloc>
 80106b8:	b920      	cbnz	r0, 80106c4 <__mdiff+0x5c>
 80106ba:	4b2e      	ldr	r3, [pc, #184]	; (8010774 <__mdiff+0x10c>)
 80106bc:	4602      	mov	r2, r0
 80106be:	f44f 7110 	mov.w	r1, #576	; 0x240
 80106c2:	e7e5      	b.n	8010690 <__mdiff+0x28>
 80106c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80106c8:	6926      	ldr	r6, [r4, #16]
 80106ca:	60c5      	str	r5, [r0, #12]
 80106cc:	f104 0914 	add.w	r9, r4, #20
 80106d0:	f108 0514 	add.w	r5, r8, #20
 80106d4:	f100 0e14 	add.w	lr, r0, #20
 80106d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80106dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80106e0:	f108 0210 	add.w	r2, r8, #16
 80106e4:	46f2      	mov	sl, lr
 80106e6:	2100      	movs	r1, #0
 80106e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80106ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80106f0:	fa1f f883 	uxth.w	r8, r3
 80106f4:	fa11 f18b 	uxtah	r1, r1, fp
 80106f8:	0c1b      	lsrs	r3, r3, #16
 80106fa:	eba1 0808 	sub.w	r8, r1, r8
 80106fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010702:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010706:	fa1f f888 	uxth.w	r8, r8
 801070a:	1419      	asrs	r1, r3, #16
 801070c:	454e      	cmp	r6, r9
 801070e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010712:	f84a 3b04 	str.w	r3, [sl], #4
 8010716:	d8e7      	bhi.n	80106e8 <__mdiff+0x80>
 8010718:	1b33      	subs	r3, r6, r4
 801071a:	3b15      	subs	r3, #21
 801071c:	f023 0303 	bic.w	r3, r3, #3
 8010720:	3304      	adds	r3, #4
 8010722:	3415      	adds	r4, #21
 8010724:	42a6      	cmp	r6, r4
 8010726:	bf38      	it	cc
 8010728:	2304      	movcc	r3, #4
 801072a:	441d      	add	r5, r3
 801072c:	4473      	add	r3, lr
 801072e:	469e      	mov	lr, r3
 8010730:	462e      	mov	r6, r5
 8010732:	4566      	cmp	r6, ip
 8010734:	d30e      	bcc.n	8010754 <__mdiff+0xec>
 8010736:	f10c 0203 	add.w	r2, ip, #3
 801073a:	1b52      	subs	r2, r2, r5
 801073c:	f022 0203 	bic.w	r2, r2, #3
 8010740:	3d03      	subs	r5, #3
 8010742:	45ac      	cmp	ip, r5
 8010744:	bf38      	it	cc
 8010746:	2200      	movcc	r2, #0
 8010748:	441a      	add	r2, r3
 801074a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801074e:	b17b      	cbz	r3, 8010770 <__mdiff+0x108>
 8010750:	6107      	str	r7, [r0, #16]
 8010752:	e7a3      	b.n	801069c <__mdiff+0x34>
 8010754:	f856 8b04 	ldr.w	r8, [r6], #4
 8010758:	fa11 f288 	uxtah	r2, r1, r8
 801075c:	1414      	asrs	r4, r2, #16
 801075e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010762:	b292      	uxth	r2, r2
 8010764:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010768:	f84e 2b04 	str.w	r2, [lr], #4
 801076c:	1421      	asrs	r1, r4, #16
 801076e:	e7e0      	b.n	8010732 <__mdiff+0xca>
 8010770:	3f01      	subs	r7, #1
 8010772:	e7ea      	b.n	801074a <__mdiff+0xe2>
 8010774:	08011653 	.word	0x08011653
 8010778:	080116c4 	.word	0x080116c4

0801077c <__d2b>:
 801077c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010780:	4689      	mov	r9, r1
 8010782:	2101      	movs	r1, #1
 8010784:	ec57 6b10 	vmov	r6, r7, d0
 8010788:	4690      	mov	r8, r2
 801078a:	f7ff fccf 	bl	801012c <_Balloc>
 801078e:	4604      	mov	r4, r0
 8010790:	b930      	cbnz	r0, 80107a0 <__d2b+0x24>
 8010792:	4602      	mov	r2, r0
 8010794:	4b25      	ldr	r3, [pc, #148]	; (801082c <__d2b+0xb0>)
 8010796:	4826      	ldr	r0, [pc, #152]	; (8010830 <__d2b+0xb4>)
 8010798:	f240 310a 	movw	r1, #778	; 0x30a
 801079c:	f000 fca4 	bl	80110e8 <__assert_func>
 80107a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80107a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80107a8:	bb35      	cbnz	r5, 80107f8 <__d2b+0x7c>
 80107aa:	2e00      	cmp	r6, #0
 80107ac:	9301      	str	r3, [sp, #4]
 80107ae:	d028      	beq.n	8010802 <__d2b+0x86>
 80107b0:	4668      	mov	r0, sp
 80107b2:	9600      	str	r6, [sp, #0]
 80107b4:	f7ff fd82 	bl	80102bc <__lo0bits>
 80107b8:	9900      	ldr	r1, [sp, #0]
 80107ba:	b300      	cbz	r0, 80107fe <__d2b+0x82>
 80107bc:	9a01      	ldr	r2, [sp, #4]
 80107be:	f1c0 0320 	rsb	r3, r0, #32
 80107c2:	fa02 f303 	lsl.w	r3, r2, r3
 80107c6:	430b      	orrs	r3, r1
 80107c8:	40c2      	lsrs	r2, r0
 80107ca:	6163      	str	r3, [r4, #20]
 80107cc:	9201      	str	r2, [sp, #4]
 80107ce:	9b01      	ldr	r3, [sp, #4]
 80107d0:	61a3      	str	r3, [r4, #24]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	bf14      	ite	ne
 80107d6:	2202      	movne	r2, #2
 80107d8:	2201      	moveq	r2, #1
 80107da:	6122      	str	r2, [r4, #16]
 80107dc:	b1d5      	cbz	r5, 8010814 <__d2b+0x98>
 80107de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80107e2:	4405      	add	r5, r0
 80107e4:	f8c9 5000 	str.w	r5, [r9]
 80107e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80107ec:	f8c8 0000 	str.w	r0, [r8]
 80107f0:	4620      	mov	r0, r4
 80107f2:	b003      	add	sp, #12
 80107f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80107fc:	e7d5      	b.n	80107aa <__d2b+0x2e>
 80107fe:	6161      	str	r1, [r4, #20]
 8010800:	e7e5      	b.n	80107ce <__d2b+0x52>
 8010802:	a801      	add	r0, sp, #4
 8010804:	f7ff fd5a 	bl	80102bc <__lo0bits>
 8010808:	9b01      	ldr	r3, [sp, #4]
 801080a:	6163      	str	r3, [r4, #20]
 801080c:	2201      	movs	r2, #1
 801080e:	6122      	str	r2, [r4, #16]
 8010810:	3020      	adds	r0, #32
 8010812:	e7e3      	b.n	80107dc <__d2b+0x60>
 8010814:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010818:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801081c:	f8c9 0000 	str.w	r0, [r9]
 8010820:	6918      	ldr	r0, [r3, #16]
 8010822:	f7ff fd2b 	bl	801027c <__hi0bits>
 8010826:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801082a:	e7df      	b.n	80107ec <__d2b+0x70>
 801082c:	08011653 	.word	0x08011653
 8010830:	080116c4 	.word	0x080116c4

08010834 <_calloc_r>:
 8010834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010836:	fba1 2402 	umull	r2, r4, r1, r2
 801083a:	b94c      	cbnz	r4, 8010850 <_calloc_r+0x1c>
 801083c:	4611      	mov	r1, r2
 801083e:	9201      	str	r2, [sp, #4]
 8010840:	f000 f87a 	bl	8010938 <_malloc_r>
 8010844:	9a01      	ldr	r2, [sp, #4]
 8010846:	4605      	mov	r5, r0
 8010848:	b930      	cbnz	r0, 8010858 <_calloc_r+0x24>
 801084a:	4628      	mov	r0, r5
 801084c:	b003      	add	sp, #12
 801084e:	bd30      	pop	{r4, r5, pc}
 8010850:	220c      	movs	r2, #12
 8010852:	6002      	str	r2, [r0, #0]
 8010854:	2500      	movs	r5, #0
 8010856:	e7f8      	b.n	801084a <_calloc_r+0x16>
 8010858:	4621      	mov	r1, r4
 801085a:	f7fd fcfb 	bl	800e254 <memset>
 801085e:	e7f4      	b.n	801084a <_calloc_r+0x16>

08010860 <_free_r>:
 8010860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010862:	2900      	cmp	r1, #0
 8010864:	d044      	beq.n	80108f0 <_free_r+0x90>
 8010866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801086a:	9001      	str	r0, [sp, #4]
 801086c:	2b00      	cmp	r3, #0
 801086e:	f1a1 0404 	sub.w	r4, r1, #4
 8010872:	bfb8      	it	lt
 8010874:	18e4      	addlt	r4, r4, r3
 8010876:	f000 fcd7 	bl	8011228 <__malloc_lock>
 801087a:	4a1e      	ldr	r2, [pc, #120]	; (80108f4 <_free_r+0x94>)
 801087c:	9801      	ldr	r0, [sp, #4]
 801087e:	6813      	ldr	r3, [r2, #0]
 8010880:	b933      	cbnz	r3, 8010890 <_free_r+0x30>
 8010882:	6063      	str	r3, [r4, #4]
 8010884:	6014      	str	r4, [r2, #0]
 8010886:	b003      	add	sp, #12
 8010888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801088c:	f000 bcd2 	b.w	8011234 <__malloc_unlock>
 8010890:	42a3      	cmp	r3, r4
 8010892:	d908      	bls.n	80108a6 <_free_r+0x46>
 8010894:	6825      	ldr	r5, [r4, #0]
 8010896:	1961      	adds	r1, r4, r5
 8010898:	428b      	cmp	r3, r1
 801089a:	bf01      	itttt	eq
 801089c:	6819      	ldreq	r1, [r3, #0]
 801089e:	685b      	ldreq	r3, [r3, #4]
 80108a0:	1949      	addeq	r1, r1, r5
 80108a2:	6021      	streq	r1, [r4, #0]
 80108a4:	e7ed      	b.n	8010882 <_free_r+0x22>
 80108a6:	461a      	mov	r2, r3
 80108a8:	685b      	ldr	r3, [r3, #4]
 80108aa:	b10b      	cbz	r3, 80108b0 <_free_r+0x50>
 80108ac:	42a3      	cmp	r3, r4
 80108ae:	d9fa      	bls.n	80108a6 <_free_r+0x46>
 80108b0:	6811      	ldr	r1, [r2, #0]
 80108b2:	1855      	adds	r5, r2, r1
 80108b4:	42a5      	cmp	r5, r4
 80108b6:	d10b      	bne.n	80108d0 <_free_r+0x70>
 80108b8:	6824      	ldr	r4, [r4, #0]
 80108ba:	4421      	add	r1, r4
 80108bc:	1854      	adds	r4, r2, r1
 80108be:	42a3      	cmp	r3, r4
 80108c0:	6011      	str	r1, [r2, #0]
 80108c2:	d1e0      	bne.n	8010886 <_free_r+0x26>
 80108c4:	681c      	ldr	r4, [r3, #0]
 80108c6:	685b      	ldr	r3, [r3, #4]
 80108c8:	6053      	str	r3, [r2, #4]
 80108ca:	4421      	add	r1, r4
 80108cc:	6011      	str	r1, [r2, #0]
 80108ce:	e7da      	b.n	8010886 <_free_r+0x26>
 80108d0:	d902      	bls.n	80108d8 <_free_r+0x78>
 80108d2:	230c      	movs	r3, #12
 80108d4:	6003      	str	r3, [r0, #0]
 80108d6:	e7d6      	b.n	8010886 <_free_r+0x26>
 80108d8:	6825      	ldr	r5, [r4, #0]
 80108da:	1961      	adds	r1, r4, r5
 80108dc:	428b      	cmp	r3, r1
 80108de:	bf04      	itt	eq
 80108e0:	6819      	ldreq	r1, [r3, #0]
 80108e2:	685b      	ldreq	r3, [r3, #4]
 80108e4:	6063      	str	r3, [r4, #4]
 80108e6:	bf04      	itt	eq
 80108e8:	1949      	addeq	r1, r1, r5
 80108ea:	6021      	streq	r1, [r4, #0]
 80108ec:	6054      	str	r4, [r2, #4]
 80108ee:	e7ca      	b.n	8010886 <_free_r+0x26>
 80108f0:	b003      	add	sp, #12
 80108f2:	bd30      	pop	{r4, r5, pc}
 80108f4:	20001440 	.word	0x20001440

080108f8 <sbrk_aligned>:
 80108f8:	b570      	push	{r4, r5, r6, lr}
 80108fa:	4e0e      	ldr	r6, [pc, #56]	; (8010934 <sbrk_aligned+0x3c>)
 80108fc:	460c      	mov	r4, r1
 80108fe:	6831      	ldr	r1, [r6, #0]
 8010900:	4605      	mov	r5, r0
 8010902:	b911      	cbnz	r1, 801090a <sbrk_aligned+0x12>
 8010904:	f000 fb8a 	bl	801101c <_sbrk_r>
 8010908:	6030      	str	r0, [r6, #0]
 801090a:	4621      	mov	r1, r4
 801090c:	4628      	mov	r0, r5
 801090e:	f000 fb85 	bl	801101c <_sbrk_r>
 8010912:	1c43      	adds	r3, r0, #1
 8010914:	d00a      	beq.n	801092c <sbrk_aligned+0x34>
 8010916:	1cc4      	adds	r4, r0, #3
 8010918:	f024 0403 	bic.w	r4, r4, #3
 801091c:	42a0      	cmp	r0, r4
 801091e:	d007      	beq.n	8010930 <sbrk_aligned+0x38>
 8010920:	1a21      	subs	r1, r4, r0
 8010922:	4628      	mov	r0, r5
 8010924:	f000 fb7a 	bl	801101c <_sbrk_r>
 8010928:	3001      	adds	r0, #1
 801092a:	d101      	bne.n	8010930 <sbrk_aligned+0x38>
 801092c:	f04f 34ff 	mov.w	r4, #4294967295
 8010930:	4620      	mov	r0, r4
 8010932:	bd70      	pop	{r4, r5, r6, pc}
 8010934:	20001444 	.word	0x20001444

08010938 <_malloc_r>:
 8010938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801093c:	1ccd      	adds	r5, r1, #3
 801093e:	f025 0503 	bic.w	r5, r5, #3
 8010942:	3508      	adds	r5, #8
 8010944:	2d0c      	cmp	r5, #12
 8010946:	bf38      	it	cc
 8010948:	250c      	movcc	r5, #12
 801094a:	2d00      	cmp	r5, #0
 801094c:	4607      	mov	r7, r0
 801094e:	db01      	blt.n	8010954 <_malloc_r+0x1c>
 8010950:	42a9      	cmp	r1, r5
 8010952:	d905      	bls.n	8010960 <_malloc_r+0x28>
 8010954:	230c      	movs	r3, #12
 8010956:	603b      	str	r3, [r7, #0]
 8010958:	2600      	movs	r6, #0
 801095a:	4630      	mov	r0, r6
 801095c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010960:	4e2e      	ldr	r6, [pc, #184]	; (8010a1c <_malloc_r+0xe4>)
 8010962:	f000 fc61 	bl	8011228 <__malloc_lock>
 8010966:	6833      	ldr	r3, [r6, #0]
 8010968:	461c      	mov	r4, r3
 801096a:	bb34      	cbnz	r4, 80109ba <_malloc_r+0x82>
 801096c:	4629      	mov	r1, r5
 801096e:	4638      	mov	r0, r7
 8010970:	f7ff ffc2 	bl	80108f8 <sbrk_aligned>
 8010974:	1c43      	adds	r3, r0, #1
 8010976:	4604      	mov	r4, r0
 8010978:	d14d      	bne.n	8010a16 <_malloc_r+0xde>
 801097a:	6834      	ldr	r4, [r6, #0]
 801097c:	4626      	mov	r6, r4
 801097e:	2e00      	cmp	r6, #0
 8010980:	d140      	bne.n	8010a04 <_malloc_r+0xcc>
 8010982:	6823      	ldr	r3, [r4, #0]
 8010984:	4631      	mov	r1, r6
 8010986:	4638      	mov	r0, r7
 8010988:	eb04 0803 	add.w	r8, r4, r3
 801098c:	f000 fb46 	bl	801101c <_sbrk_r>
 8010990:	4580      	cmp	r8, r0
 8010992:	d13a      	bne.n	8010a0a <_malloc_r+0xd2>
 8010994:	6821      	ldr	r1, [r4, #0]
 8010996:	3503      	adds	r5, #3
 8010998:	1a6d      	subs	r5, r5, r1
 801099a:	f025 0503 	bic.w	r5, r5, #3
 801099e:	3508      	adds	r5, #8
 80109a0:	2d0c      	cmp	r5, #12
 80109a2:	bf38      	it	cc
 80109a4:	250c      	movcc	r5, #12
 80109a6:	4629      	mov	r1, r5
 80109a8:	4638      	mov	r0, r7
 80109aa:	f7ff ffa5 	bl	80108f8 <sbrk_aligned>
 80109ae:	3001      	adds	r0, #1
 80109b0:	d02b      	beq.n	8010a0a <_malloc_r+0xd2>
 80109b2:	6823      	ldr	r3, [r4, #0]
 80109b4:	442b      	add	r3, r5
 80109b6:	6023      	str	r3, [r4, #0]
 80109b8:	e00e      	b.n	80109d8 <_malloc_r+0xa0>
 80109ba:	6822      	ldr	r2, [r4, #0]
 80109bc:	1b52      	subs	r2, r2, r5
 80109be:	d41e      	bmi.n	80109fe <_malloc_r+0xc6>
 80109c0:	2a0b      	cmp	r2, #11
 80109c2:	d916      	bls.n	80109f2 <_malloc_r+0xba>
 80109c4:	1961      	adds	r1, r4, r5
 80109c6:	42a3      	cmp	r3, r4
 80109c8:	6025      	str	r5, [r4, #0]
 80109ca:	bf18      	it	ne
 80109cc:	6059      	strne	r1, [r3, #4]
 80109ce:	6863      	ldr	r3, [r4, #4]
 80109d0:	bf08      	it	eq
 80109d2:	6031      	streq	r1, [r6, #0]
 80109d4:	5162      	str	r2, [r4, r5]
 80109d6:	604b      	str	r3, [r1, #4]
 80109d8:	4638      	mov	r0, r7
 80109da:	f104 060b 	add.w	r6, r4, #11
 80109de:	f000 fc29 	bl	8011234 <__malloc_unlock>
 80109e2:	f026 0607 	bic.w	r6, r6, #7
 80109e6:	1d23      	adds	r3, r4, #4
 80109e8:	1af2      	subs	r2, r6, r3
 80109ea:	d0b6      	beq.n	801095a <_malloc_r+0x22>
 80109ec:	1b9b      	subs	r3, r3, r6
 80109ee:	50a3      	str	r3, [r4, r2]
 80109f0:	e7b3      	b.n	801095a <_malloc_r+0x22>
 80109f2:	6862      	ldr	r2, [r4, #4]
 80109f4:	42a3      	cmp	r3, r4
 80109f6:	bf0c      	ite	eq
 80109f8:	6032      	streq	r2, [r6, #0]
 80109fa:	605a      	strne	r2, [r3, #4]
 80109fc:	e7ec      	b.n	80109d8 <_malloc_r+0xa0>
 80109fe:	4623      	mov	r3, r4
 8010a00:	6864      	ldr	r4, [r4, #4]
 8010a02:	e7b2      	b.n	801096a <_malloc_r+0x32>
 8010a04:	4634      	mov	r4, r6
 8010a06:	6876      	ldr	r6, [r6, #4]
 8010a08:	e7b9      	b.n	801097e <_malloc_r+0x46>
 8010a0a:	230c      	movs	r3, #12
 8010a0c:	603b      	str	r3, [r7, #0]
 8010a0e:	4638      	mov	r0, r7
 8010a10:	f000 fc10 	bl	8011234 <__malloc_unlock>
 8010a14:	e7a1      	b.n	801095a <_malloc_r+0x22>
 8010a16:	6025      	str	r5, [r4, #0]
 8010a18:	e7de      	b.n	80109d8 <_malloc_r+0xa0>
 8010a1a:	bf00      	nop
 8010a1c:	20001440 	.word	0x20001440

08010a20 <__ssputs_r>:
 8010a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a24:	688e      	ldr	r6, [r1, #8]
 8010a26:	429e      	cmp	r6, r3
 8010a28:	4682      	mov	sl, r0
 8010a2a:	460c      	mov	r4, r1
 8010a2c:	4690      	mov	r8, r2
 8010a2e:	461f      	mov	r7, r3
 8010a30:	d838      	bhi.n	8010aa4 <__ssputs_r+0x84>
 8010a32:	898a      	ldrh	r2, [r1, #12]
 8010a34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010a38:	d032      	beq.n	8010aa0 <__ssputs_r+0x80>
 8010a3a:	6825      	ldr	r5, [r4, #0]
 8010a3c:	6909      	ldr	r1, [r1, #16]
 8010a3e:	eba5 0901 	sub.w	r9, r5, r1
 8010a42:	6965      	ldr	r5, [r4, #20]
 8010a44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a4c:	3301      	adds	r3, #1
 8010a4e:	444b      	add	r3, r9
 8010a50:	106d      	asrs	r5, r5, #1
 8010a52:	429d      	cmp	r5, r3
 8010a54:	bf38      	it	cc
 8010a56:	461d      	movcc	r5, r3
 8010a58:	0553      	lsls	r3, r2, #21
 8010a5a:	d531      	bpl.n	8010ac0 <__ssputs_r+0xa0>
 8010a5c:	4629      	mov	r1, r5
 8010a5e:	f7ff ff6b 	bl	8010938 <_malloc_r>
 8010a62:	4606      	mov	r6, r0
 8010a64:	b950      	cbnz	r0, 8010a7c <__ssputs_r+0x5c>
 8010a66:	230c      	movs	r3, #12
 8010a68:	f8ca 3000 	str.w	r3, [sl]
 8010a6c:	89a3      	ldrh	r3, [r4, #12]
 8010a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a72:	81a3      	strh	r3, [r4, #12]
 8010a74:	f04f 30ff 	mov.w	r0, #4294967295
 8010a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a7c:	6921      	ldr	r1, [r4, #16]
 8010a7e:	464a      	mov	r2, r9
 8010a80:	f7fd fbda 	bl	800e238 <memcpy>
 8010a84:	89a3      	ldrh	r3, [r4, #12]
 8010a86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a8e:	81a3      	strh	r3, [r4, #12]
 8010a90:	6126      	str	r6, [r4, #16]
 8010a92:	6165      	str	r5, [r4, #20]
 8010a94:	444e      	add	r6, r9
 8010a96:	eba5 0509 	sub.w	r5, r5, r9
 8010a9a:	6026      	str	r6, [r4, #0]
 8010a9c:	60a5      	str	r5, [r4, #8]
 8010a9e:	463e      	mov	r6, r7
 8010aa0:	42be      	cmp	r6, r7
 8010aa2:	d900      	bls.n	8010aa6 <__ssputs_r+0x86>
 8010aa4:	463e      	mov	r6, r7
 8010aa6:	6820      	ldr	r0, [r4, #0]
 8010aa8:	4632      	mov	r2, r6
 8010aaa:	4641      	mov	r1, r8
 8010aac:	f000 fba2 	bl	80111f4 <memmove>
 8010ab0:	68a3      	ldr	r3, [r4, #8]
 8010ab2:	1b9b      	subs	r3, r3, r6
 8010ab4:	60a3      	str	r3, [r4, #8]
 8010ab6:	6823      	ldr	r3, [r4, #0]
 8010ab8:	4433      	add	r3, r6
 8010aba:	6023      	str	r3, [r4, #0]
 8010abc:	2000      	movs	r0, #0
 8010abe:	e7db      	b.n	8010a78 <__ssputs_r+0x58>
 8010ac0:	462a      	mov	r2, r5
 8010ac2:	f000 fbbd 	bl	8011240 <_realloc_r>
 8010ac6:	4606      	mov	r6, r0
 8010ac8:	2800      	cmp	r0, #0
 8010aca:	d1e1      	bne.n	8010a90 <__ssputs_r+0x70>
 8010acc:	6921      	ldr	r1, [r4, #16]
 8010ace:	4650      	mov	r0, sl
 8010ad0:	f7ff fec6 	bl	8010860 <_free_r>
 8010ad4:	e7c7      	b.n	8010a66 <__ssputs_r+0x46>
	...

08010ad8 <_svfiprintf_r>:
 8010ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010adc:	4698      	mov	r8, r3
 8010ade:	898b      	ldrh	r3, [r1, #12]
 8010ae0:	061b      	lsls	r3, r3, #24
 8010ae2:	b09d      	sub	sp, #116	; 0x74
 8010ae4:	4607      	mov	r7, r0
 8010ae6:	460d      	mov	r5, r1
 8010ae8:	4614      	mov	r4, r2
 8010aea:	d50e      	bpl.n	8010b0a <_svfiprintf_r+0x32>
 8010aec:	690b      	ldr	r3, [r1, #16]
 8010aee:	b963      	cbnz	r3, 8010b0a <_svfiprintf_r+0x32>
 8010af0:	2140      	movs	r1, #64	; 0x40
 8010af2:	f7ff ff21 	bl	8010938 <_malloc_r>
 8010af6:	6028      	str	r0, [r5, #0]
 8010af8:	6128      	str	r0, [r5, #16]
 8010afa:	b920      	cbnz	r0, 8010b06 <_svfiprintf_r+0x2e>
 8010afc:	230c      	movs	r3, #12
 8010afe:	603b      	str	r3, [r7, #0]
 8010b00:	f04f 30ff 	mov.w	r0, #4294967295
 8010b04:	e0d1      	b.n	8010caa <_svfiprintf_r+0x1d2>
 8010b06:	2340      	movs	r3, #64	; 0x40
 8010b08:	616b      	str	r3, [r5, #20]
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8010b0e:	2320      	movs	r3, #32
 8010b10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010b14:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b18:	2330      	movs	r3, #48	; 0x30
 8010b1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010cc4 <_svfiprintf_r+0x1ec>
 8010b1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010b22:	f04f 0901 	mov.w	r9, #1
 8010b26:	4623      	mov	r3, r4
 8010b28:	469a      	mov	sl, r3
 8010b2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b2e:	b10a      	cbz	r2, 8010b34 <_svfiprintf_r+0x5c>
 8010b30:	2a25      	cmp	r2, #37	; 0x25
 8010b32:	d1f9      	bne.n	8010b28 <_svfiprintf_r+0x50>
 8010b34:	ebba 0b04 	subs.w	fp, sl, r4
 8010b38:	d00b      	beq.n	8010b52 <_svfiprintf_r+0x7a>
 8010b3a:	465b      	mov	r3, fp
 8010b3c:	4622      	mov	r2, r4
 8010b3e:	4629      	mov	r1, r5
 8010b40:	4638      	mov	r0, r7
 8010b42:	f7ff ff6d 	bl	8010a20 <__ssputs_r>
 8010b46:	3001      	adds	r0, #1
 8010b48:	f000 80aa 	beq.w	8010ca0 <_svfiprintf_r+0x1c8>
 8010b4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b4e:	445a      	add	r2, fp
 8010b50:	9209      	str	r2, [sp, #36]	; 0x24
 8010b52:	f89a 3000 	ldrb.w	r3, [sl]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	f000 80a2 	beq.w	8010ca0 <_svfiprintf_r+0x1c8>
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8010b62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b66:	f10a 0a01 	add.w	sl, sl, #1
 8010b6a:	9304      	str	r3, [sp, #16]
 8010b6c:	9307      	str	r3, [sp, #28]
 8010b6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010b72:	931a      	str	r3, [sp, #104]	; 0x68
 8010b74:	4654      	mov	r4, sl
 8010b76:	2205      	movs	r2, #5
 8010b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b7c:	4851      	ldr	r0, [pc, #324]	; (8010cc4 <_svfiprintf_r+0x1ec>)
 8010b7e:	f7ef fb2f 	bl	80001e0 <memchr>
 8010b82:	9a04      	ldr	r2, [sp, #16]
 8010b84:	b9d8      	cbnz	r0, 8010bbe <_svfiprintf_r+0xe6>
 8010b86:	06d0      	lsls	r0, r2, #27
 8010b88:	bf44      	itt	mi
 8010b8a:	2320      	movmi	r3, #32
 8010b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b90:	0711      	lsls	r1, r2, #28
 8010b92:	bf44      	itt	mi
 8010b94:	232b      	movmi	r3, #43	; 0x2b
 8010b96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8010b9e:	2b2a      	cmp	r3, #42	; 0x2a
 8010ba0:	d015      	beq.n	8010bce <_svfiprintf_r+0xf6>
 8010ba2:	9a07      	ldr	r2, [sp, #28]
 8010ba4:	4654      	mov	r4, sl
 8010ba6:	2000      	movs	r0, #0
 8010ba8:	f04f 0c0a 	mov.w	ip, #10
 8010bac:	4621      	mov	r1, r4
 8010bae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010bb2:	3b30      	subs	r3, #48	; 0x30
 8010bb4:	2b09      	cmp	r3, #9
 8010bb6:	d94e      	bls.n	8010c56 <_svfiprintf_r+0x17e>
 8010bb8:	b1b0      	cbz	r0, 8010be8 <_svfiprintf_r+0x110>
 8010bba:	9207      	str	r2, [sp, #28]
 8010bbc:	e014      	b.n	8010be8 <_svfiprintf_r+0x110>
 8010bbe:	eba0 0308 	sub.w	r3, r0, r8
 8010bc2:	fa09 f303 	lsl.w	r3, r9, r3
 8010bc6:	4313      	orrs	r3, r2
 8010bc8:	9304      	str	r3, [sp, #16]
 8010bca:	46a2      	mov	sl, r4
 8010bcc:	e7d2      	b.n	8010b74 <_svfiprintf_r+0x9c>
 8010bce:	9b03      	ldr	r3, [sp, #12]
 8010bd0:	1d19      	adds	r1, r3, #4
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	9103      	str	r1, [sp, #12]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	bfbb      	ittet	lt
 8010bda:	425b      	neglt	r3, r3
 8010bdc:	f042 0202 	orrlt.w	r2, r2, #2
 8010be0:	9307      	strge	r3, [sp, #28]
 8010be2:	9307      	strlt	r3, [sp, #28]
 8010be4:	bfb8      	it	lt
 8010be6:	9204      	strlt	r2, [sp, #16]
 8010be8:	7823      	ldrb	r3, [r4, #0]
 8010bea:	2b2e      	cmp	r3, #46	; 0x2e
 8010bec:	d10c      	bne.n	8010c08 <_svfiprintf_r+0x130>
 8010bee:	7863      	ldrb	r3, [r4, #1]
 8010bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8010bf2:	d135      	bne.n	8010c60 <_svfiprintf_r+0x188>
 8010bf4:	9b03      	ldr	r3, [sp, #12]
 8010bf6:	1d1a      	adds	r2, r3, #4
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	9203      	str	r2, [sp, #12]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	bfb8      	it	lt
 8010c00:	f04f 33ff 	movlt.w	r3, #4294967295
 8010c04:	3402      	adds	r4, #2
 8010c06:	9305      	str	r3, [sp, #20]
 8010c08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010cd4 <_svfiprintf_r+0x1fc>
 8010c0c:	7821      	ldrb	r1, [r4, #0]
 8010c0e:	2203      	movs	r2, #3
 8010c10:	4650      	mov	r0, sl
 8010c12:	f7ef fae5 	bl	80001e0 <memchr>
 8010c16:	b140      	cbz	r0, 8010c2a <_svfiprintf_r+0x152>
 8010c18:	2340      	movs	r3, #64	; 0x40
 8010c1a:	eba0 000a 	sub.w	r0, r0, sl
 8010c1e:	fa03 f000 	lsl.w	r0, r3, r0
 8010c22:	9b04      	ldr	r3, [sp, #16]
 8010c24:	4303      	orrs	r3, r0
 8010c26:	3401      	adds	r4, #1
 8010c28:	9304      	str	r3, [sp, #16]
 8010c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c2e:	4826      	ldr	r0, [pc, #152]	; (8010cc8 <_svfiprintf_r+0x1f0>)
 8010c30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010c34:	2206      	movs	r2, #6
 8010c36:	f7ef fad3 	bl	80001e0 <memchr>
 8010c3a:	2800      	cmp	r0, #0
 8010c3c:	d038      	beq.n	8010cb0 <_svfiprintf_r+0x1d8>
 8010c3e:	4b23      	ldr	r3, [pc, #140]	; (8010ccc <_svfiprintf_r+0x1f4>)
 8010c40:	bb1b      	cbnz	r3, 8010c8a <_svfiprintf_r+0x1b2>
 8010c42:	9b03      	ldr	r3, [sp, #12]
 8010c44:	3307      	adds	r3, #7
 8010c46:	f023 0307 	bic.w	r3, r3, #7
 8010c4a:	3308      	adds	r3, #8
 8010c4c:	9303      	str	r3, [sp, #12]
 8010c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c50:	4433      	add	r3, r6
 8010c52:	9309      	str	r3, [sp, #36]	; 0x24
 8010c54:	e767      	b.n	8010b26 <_svfiprintf_r+0x4e>
 8010c56:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c5a:	460c      	mov	r4, r1
 8010c5c:	2001      	movs	r0, #1
 8010c5e:	e7a5      	b.n	8010bac <_svfiprintf_r+0xd4>
 8010c60:	2300      	movs	r3, #0
 8010c62:	3401      	adds	r4, #1
 8010c64:	9305      	str	r3, [sp, #20]
 8010c66:	4619      	mov	r1, r3
 8010c68:	f04f 0c0a 	mov.w	ip, #10
 8010c6c:	4620      	mov	r0, r4
 8010c6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c72:	3a30      	subs	r2, #48	; 0x30
 8010c74:	2a09      	cmp	r2, #9
 8010c76:	d903      	bls.n	8010c80 <_svfiprintf_r+0x1a8>
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d0c5      	beq.n	8010c08 <_svfiprintf_r+0x130>
 8010c7c:	9105      	str	r1, [sp, #20]
 8010c7e:	e7c3      	b.n	8010c08 <_svfiprintf_r+0x130>
 8010c80:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c84:	4604      	mov	r4, r0
 8010c86:	2301      	movs	r3, #1
 8010c88:	e7f0      	b.n	8010c6c <_svfiprintf_r+0x194>
 8010c8a:	ab03      	add	r3, sp, #12
 8010c8c:	9300      	str	r3, [sp, #0]
 8010c8e:	462a      	mov	r2, r5
 8010c90:	4b0f      	ldr	r3, [pc, #60]	; (8010cd0 <_svfiprintf_r+0x1f8>)
 8010c92:	a904      	add	r1, sp, #16
 8010c94:	4638      	mov	r0, r7
 8010c96:	f7fd fb85 	bl	800e3a4 <_printf_float>
 8010c9a:	1c42      	adds	r2, r0, #1
 8010c9c:	4606      	mov	r6, r0
 8010c9e:	d1d6      	bne.n	8010c4e <_svfiprintf_r+0x176>
 8010ca0:	89ab      	ldrh	r3, [r5, #12]
 8010ca2:	065b      	lsls	r3, r3, #25
 8010ca4:	f53f af2c 	bmi.w	8010b00 <_svfiprintf_r+0x28>
 8010ca8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010caa:	b01d      	add	sp, #116	; 0x74
 8010cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cb0:	ab03      	add	r3, sp, #12
 8010cb2:	9300      	str	r3, [sp, #0]
 8010cb4:	462a      	mov	r2, r5
 8010cb6:	4b06      	ldr	r3, [pc, #24]	; (8010cd0 <_svfiprintf_r+0x1f8>)
 8010cb8:	a904      	add	r1, sp, #16
 8010cba:	4638      	mov	r0, r7
 8010cbc:	f7fd fe16 	bl	800e8ec <_printf_i>
 8010cc0:	e7eb      	b.n	8010c9a <_svfiprintf_r+0x1c2>
 8010cc2:	bf00      	nop
 8010cc4:	0801181c 	.word	0x0801181c
 8010cc8:	08011826 	.word	0x08011826
 8010ccc:	0800e3a5 	.word	0x0800e3a5
 8010cd0:	08010a21 	.word	0x08010a21
 8010cd4:	08011822 	.word	0x08011822

08010cd8 <__sfputc_r>:
 8010cd8:	6893      	ldr	r3, [r2, #8]
 8010cda:	3b01      	subs	r3, #1
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	b410      	push	{r4}
 8010ce0:	6093      	str	r3, [r2, #8]
 8010ce2:	da08      	bge.n	8010cf6 <__sfputc_r+0x1e>
 8010ce4:	6994      	ldr	r4, [r2, #24]
 8010ce6:	42a3      	cmp	r3, r4
 8010ce8:	db01      	blt.n	8010cee <__sfputc_r+0x16>
 8010cea:	290a      	cmp	r1, #10
 8010cec:	d103      	bne.n	8010cf6 <__sfputc_r+0x1e>
 8010cee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cf2:	f7fe b8b3 	b.w	800ee5c <__swbuf_r>
 8010cf6:	6813      	ldr	r3, [r2, #0]
 8010cf8:	1c58      	adds	r0, r3, #1
 8010cfa:	6010      	str	r0, [r2, #0]
 8010cfc:	7019      	strb	r1, [r3, #0]
 8010cfe:	4608      	mov	r0, r1
 8010d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d04:	4770      	bx	lr

08010d06 <__sfputs_r>:
 8010d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d08:	4606      	mov	r6, r0
 8010d0a:	460f      	mov	r7, r1
 8010d0c:	4614      	mov	r4, r2
 8010d0e:	18d5      	adds	r5, r2, r3
 8010d10:	42ac      	cmp	r4, r5
 8010d12:	d101      	bne.n	8010d18 <__sfputs_r+0x12>
 8010d14:	2000      	movs	r0, #0
 8010d16:	e007      	b.n	8010d28 <__sfputs_r+0x22>
 8010d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d1c:	463a      	mov	r2, r7
 8010d1e:	4630      	mov	r0, r6
 8010d20:	f7ff ffda 	bl	8010cd8 <__sfputc_r>
 8010d24:	1c43      	adds	r3, r0, #1
 8010d26:	d1f3      	bne.n	8010d10 <__sfputs_r+0xa>
 8010d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010d2c <_vfiprintf_r>:
 8010d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d30:	460d      	mov	r5, r1
 8010d32:	b09d      	sub	sp, #116	; 0x74
 8010d34:	4614      	mov	r4, r2
 8010d36:	4698      	mov	r8, r3
 8010d38:	4606      	mov	r6, r0
 8010d3a:	b118      	cbz	r0, 8010d44 <_vfiprintf_r+0x18>
 8010d3c:	6983      	ldr	r3, [r0, #24]
 8010d3e:	b90b      	cbnz	r3, 8010d44 <_vfiprintf_r+0x18>
 8010d40:	f7ff f8e2 	bl	800ff08 <__sinit>
 8010d44:	4b89      	ldr	r3, [pc, #548]	; (8010f6c <_vfiprintf_r+0x240>)
 8010d46:	429d      	cmp	r5, r3
 8010d48:	d11b      	bne.n	8010d82 <_vfiprintf_r+0x56>
 8010d4a:	6875      	ldr	r5, [r6, #4]
 8010d4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d4e:	07d9      	lsls	r1, r3, #31
 8010d50:	d405      	bmi.n	8010d5e <_vfiprintf_r+0x32>
 8010d52:	89ab      	ldrh	r3, [r5, #12]
 8010d54:	059a      	lsls	r2, r3, #22
 8010d56:	d402      	bmi.n	8010d5e <_vfiprintf_r+0x32>
 8010d58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d5a:	f7ff f978 	bl	801004e <__retarget_lock_acquire_recursive>
 8010d5e:	89ab      	ldrh	r3, [r5, #12]
 8010d60:	071b      	lsls	r3, r3, #28
 8010d62:	d501      	bpl.n	8010d68 <_vfiprintf_r+0x3c>
 8010d64:	692b      	ldr	r3, [r5, #16]
 8010d66:	b9eb      	cbnz	r3, 8010da4 <_vfiprintf_r+0x78>
 8010d68:	4629      	mov	r1, r5
 8010d6a:	4630      	mov	r0, r6
 8010d6c:	f7fe f8c8 	bl	800ef00 <__swsetup_r>
 8010d70:	b1c0      	cbz	r0, 8010da4 <_vfiprintf_r+0x78>
 8010d72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d74:	07dc      	lsls	r4, r3, #31
 8010d76:	d50e      	bpl.n	8010d96 <_vfiprintf_r+0x6a>
 8010d78:	f04f 30ff 	mov.w	r0, #4294967295
 8010d7c:	b01d      	add	sp, #116	; 0x74
 8010d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d82:	4b7b      	ldr	r3, [pc, #492]	; (8010f70 <_vfiprintf_r+0x244>)
 8010d84:	429d      	cmp	r5, r3
 8010d86:	d101      	bne.n	8010d8c <_vfiprintf_r+0x60>
 8010d88:	68b5      	ldr	r5, [r6, #8]
 8010d8a:	e7df      	b.n	8010d4c <_vfiprintf_r+0x20>
 8010d8c:	4b79      	ldr	r3, [pc, #484]	; (8010f74 <_vfiprintf_r+0x248>)
 8010d8e:	429d      	cmp	r5, r3
 8010d90:	bf08      	it	eq
 8010d92:	68f5      	ldreq	r5, [r6, #12]
 8010d94:	e7da      	b.n	8010d4c <_vfiprintf_r+0x20>
 8010d96:	89ab      	ldrh	r3, [r5, #12]
 8010d98:	0598      	lsls	r0, r3, #22
 8010d9a:	d4ed      	bmi.n	8010d78 <_vfiprintf_r+0x4c>
 8010d9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d9e:	f7ff f957 	bl	8010050 <__retarget_lock_release_recursive>
 8010da2:	e7e9      	b.n	8010d78 <_vfiprintf_r+0x4c>
 8010da4:	2300      	movs	r3, #0
 8010da6:	9309      	str	r3, [sp, #36]	; 0x24
 8010da8:	2320      	movs	r3, #32
 8010daa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010dae:	f8cd 800c 	str.w	r8, [sp, #12]
 8010db2:	2330      	movs	r3, #48	; 0x30
 8010db4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010f78 <_vfiprintf_r+0x24c>
 8010db8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010dbc:	f04f 0901 	mov.w	r9, #1
 8010dc0:	4623      	mov	r3, r4
 8010dc2:	469a      	mov	sl, r3
 8010dc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010dc8:	b10a      	cbz	r2, 8010dce <_vfiprintf_r+0xa2>
 8010dca:	2a25      	cmp	r2, #37	; 0x25
 8010dcc:	d1f9      	bne.n	8010dc2 <_vfiprintf_r+0x96>
 8010dce:	ebba 0b04 	subs.w	fp, sl, r4
 8010dd2:	d00b      	beq.n	8010dec <_vfiprintf_r+0xc0>
 8010dd4:	465b      	mov	r3, fp
 8010dd6:	4622      	mov	r2, r4
 8010dd8:	4629      	mov	r1, r5
 8010dda:	4630      	mov	r0, r6
 8010ddc:	f7ff ff93 	bl	8010d06 <__sfputs_r>
 8010de0:	3001      	adds	r0, #1
 8010de2:	f000 80aa 	beq.w	8010f3a <_vfiprintf_r+0x20e>
 8010de6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010de8:	445a      	add	r2, fp
 8010dea:	9209      	str	r2, [sp, #36]	; 0x24
 8010dec:	f89a 3000 	ldrb.w	r3, [sl]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	f000 80a2 	beq.w	8010f3a <_vfiprintf_r+0x20e>
 8010df6:	2300      	movs	r3, #0
 8010df8:	f04f 32ff 	mov.w	r2, #4294967295
 8010dfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e00:	f10a 0a01 	add.w	sl, sl, #1
 8010e04:	9304      	str	r3, [sp, #16]
 8010e06:	9307      	str	r3, [sp, #28]
 8010e08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010e0c:	931a      	str	r3, [sp, #104]	; 0x68
 8010e0e:	4654      	mov	r4, sl
 8010e10:	2205      	movs	r2, #5
 8010e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e16:	4858      	ldr	r0, [pc, #352]	; (8010f78 <_vfiprintf_r+0x24c>)
 8010e18:	f7ef f9e2 	bl	80001e0 <memchr>
 8010e1c:	9a04      	ldr	r2, [sp, #16]
 8010e1e:	b9d8      	cbnz	r0, 8010e58 <_vfiprintf_r+0x12c>
 8010e20:	06d1      	lsls	r1, r2, #27
 8010e22:	bf44      	itt	mi
 8010e24:	2320      	movmi	r3, #32
 8010e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e2a:	0713      	lsls	r3, r2, #28
 8010e2c:	bf44      	itt	mi
 8010e2e:	232b      	movmi	r3, #43	; 0x2b
 8010e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e34:	f89a 3000 	ldrb.w	r3, [sl]
 8010e38:	2b2a      	cmp	r3, #42	; 0x2a
 8010e3a:	d015      	beq.n	8010e68 <_vfiprintf_r+0x13c>
 8010e3c:	9a07      	ldr	r2, [sp, #28]
 8010e3e:	4654      	mov	r4, sl
 8010e40:	2000      	movs	r0, #0
 8010e42:	f04f 0c0a 	mov.w	ip, #10
 8010e46:	4621      	mov	r1, r4
 8010e48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e4c:	3b30      	subs	r3, #48	; 0x30
 8010e4e:	2b09      	cmp	r3, #9
 8010e50:	d94e      	bls.n	8010ef0 <_vfiprintf_r+0x1c4>
 8010e52:	b1b0      	cbz	r0, 8010e82 <_vfiprintf_r+0x156>
 8010e54:	9207      	str	r2, [sp, #28]
 8010e56:	e014      	b.n	8010e82 <_vfiprintf_r+0x156>
 8010e58:	eba0 0308 	sub.w	r3, r0, r8
 8010e5c:	fa09 f303 	lsl.w	r3, r9, r3
 8010e60:	4313      	orrs	r3, r2
 8010e62:	9304      	str	r3, [sp, #16]
 8010e64:	46a2      	mov	sl, r4
 8010e66:	e7d2      	b.n	8010e0e <_vfiprintf_r+0xe2>
 8010e68:	9b03      	ldr	r3, [sp, #12]
 8010e6a:	1d19      	adds	r1, r3, #4
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	9103      	str	r1, [sp, #12]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	bfbb      	ittet	lt
 8010e74:	425b      	neglt	r3, r3
 8010e76:	f042 0202 	orrlt.w	r2, r2, #2
 8010e7a:	9307      	strge	r3, [sp, #28]
 8010e7c:	9307      	strlt	r3, [sp, #28]
 8010e7e:	bfb8      	it	lt
 8010e80:	9204      	strlt	r2, [sp, #16]
 8010e82:	7823      	ldrb	r3, [r4, #0]
 8010e84:	2b2e      	cmp	r3, #46	; 0x2e
 8010e86:	d10c      	bne.n	8010ea2 <_vfiprintf_r+0x176>
 8010e88:	7863      	ldrb	r3, [r4, #1]
 8010e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8010e8c:	d135      	bne.n	8010efa <_vfiprintf_r+0x1ce>
 8010e8e:	9b03      	ldr	r3, [sp, #12]
 8010e90:	1d1a      	adds	r2, r3, #4
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	9203      	str	r2, [sp, #12]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	bfb8      	it	lt
 8010e9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e9e:	3402      	adds	r4, #2
 8010ea0:	9305      	str	r3, [sp, #20]
 8010ea2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010f88 <_vfiprintf_r+0x25c>
 8010ea6:	7821      	ldrb	r1, [r4, #0]
 8010ea8:	2203      	movs	r2, #3
 8010eaa:	4650      	mov	r0, sl
 8010eac:	f7ef f998 	bl	80001e0 <memchr>
 8010eb0:	b140      	cbz	r0, 8010ec4 <_vfiprintf_r+0x198>
 8010eb2:	2340      	movs	r3, #64	; 0x40
 8010eb4:	eba0 000a 	sub.w	r0, r0, sl
 8010eb8:	fa03 f000 	lsl.w	r0, r3, r0
 8010ebc:	9b04      	ldr	r3, [sp, #16]
 8010ebe:	4303      	orrs	r3, r0
 8010ec0:	3401      	adds	r4, #1
 8010ec2:	9304      	str	r3, [sp, #16]
 8010ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ec8:	482c      	ldr	r0, [pc, #176]	; (8010f7c <_vfiprintf_r+0x250>)
 8010eca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010ece:	2206      	movs	r2, #6
 8010ed0:	f7ef f986 	bl	80001e0 <memchr>
 8010ed4:	2800      	cmp	r0, #0
 8010ed6:	d03f      	beq.n	8010f58 <_vfiprintf_r+0x22c>
 8010ed8:	4b29      	ldr	r3, [pc, #164]	; (8010f80 <_vfiprintf_r+0x254>)
 8010eda:	bb1b      	cbnz	r3, 8010f24 <_vfiprintf_r+0x1f8>
 8010edc:	9b03      	ldr	r3, [sp, #12]
 8010ede:	3307      	adds	r3, #7
 8010ee0:	f023 0307 	bic.w	r3, r3, #7
 8010ee4:	3308      	adds	r3, #8
 8010ee6:	9303      	str	r3, [sp, #12]
 8010ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010eea:	443b      	add	r3, r7
 8010eec:	9309      	str	r3, [sp, #36]	; 0x24
 8010eee:	e767      	b.n	8010dc0 <_vfiprintf_r+0x94>
 8010ef0:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ef4:	460c      	mov	r4, r1
 8010ef6:	2001      	movs	r0, #1
 8010ef8:	e7a5      	b.n	8010e46 <_vfiprintf_r+0x11a>
 8010efa:	2300      	movs	r3, #0
 8010efc:	3401      	adds	r4, #1
 8010efe:	9305      	str	r3, [sp, #20]
 8010f00:	4619      	mov	r1, r3
 8010f02:	f04f 0c0a 	mov.w	ip, #10
 8010f06:	4620      	mov	r0, r4
 8010f08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f0c:	3a30      	subs	r2, #48	; 0x30
 8010f0e:	2a09      	cmp	r2, #9
 8010f10:	d903      	bls.n	8010f1a <_vfiprintf_r+0x1ee>
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d0c5      	beq.n	8010ea2 <_vfiprintf_r+0x176>
 8010f16:	9105      	str	r1, [sp, #20]
 8010f18:	e7c3      	b.n	8010ea2 <_vfiprintf_r+0x176>
 8010f1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f1e:	4604      	mov	r4, r0
 8010f20:	2301      	movs	r3, #1
 8010f22:	e7f0      	b.n	8010f06 <_vfiprintf_r+0x1da>
 8010f24:	ab03      	add	r3, sp, #12
 8010f26:	9300      	str	r3, [sp, #0]
 8010f28:	462a      	mov	r2, r5
 8010f2a:	4b16      	ldr	r3, [pc, #88]	; (8010f84 <_vfiprintf_r+0x258>)
 8010f2c:	a904      	add	r1, sp, #16
 8010f2e:	4630      	mov	r0, r6
 8010f30:	f7fd fa38 	bl	800e3a4 <_printf_float>
 8010f34:	4607      	mov	r7, r0
 8010f36:	1c78      	adds	r0, r7, #1
 8010f38:	d1d6      	bne.n	8010ee8 <_vfiprintf_r+0x1bc>
 8010f3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f3c:	07d9      	lsls	r1, r3, #31
 8010f3e:	d405      	bmi.n	8010f4c <_vfiprintf_r+0x220>
 8010f40:	89ab      	ldrh	r3, [r5, #12]
 8010f42:	059a      	lsls	r2, r3, #22
 8010f44:	d402      	bmi.n	8010f4c <_vfiprintf_r+0x220>
 8010f46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f48:	f7ff f882 	bl	8010050 <__retarget_lock_release_recursive>
 8010f4c:	89ab      	ldrh	r3, [r5, #12]
 8010f4e:	065b      	lsls	r3, r3, #25
 8010f50:	f53f af12 	bmi.w	8010d78 <_vfiprintf_r+0x4c>
 8010f54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f56:	e711      	b.n	8010d7c <_vfiprintf_r+0x50>
 8010f58:	ab03      	add	r3, sp, #12
 8010f5a:	9300      	str	r3, [sp, #0]
 8010f5c:	462a      	mov	r2, r5
 8010f5e:	4b09      	ldr	r3, [pc, #36]	; (8010f84 <_vfiprintf_r+0x258>)
 8010f60:	a904      	add	r1, sp, #16
 8010f62:	4630      	mov	r0, r6
 8010f64:	f7fd fcc2 	bl	800e8ec <_printf_i>
 8010f68:	e7e4      	b.n	8010f34 <_vfiprintf_r+0x208>
 8010f6a:	bf00      	nop
 8010f6c:	08011684 	.word	0x08011684
 8010f70:	080116a4 	.word	0x080116a4
 8010f74:	08011664 	.word	0x08011664
 8010f78:	0801181c 	.word	0x0801181c
 8010f7c:	08011826 	.word	0x08011826
 8010f80:	0800e3a5 	.word	0x0800e3a5
 8010f84:	08010d07 	.word	0x08010d07
 8010f88:	08011822 	.word	0x08011822

08010f8c <_putc_r>:
 8010f8c:	b570      	push	{r4, r5, r6, lr}
 8010f8e:	460d      	mov	r5, r1
 8010f90:	4614      	mov	r4, r2
 8010f92:	4606      	mov	r6, r0
 8010f94:	b118      	cbz	r0, 8010f9e <_putc_r+0x12>
 8010f96:	6983      	ldr	r3, [r0, #24]
 8010f98:	b90b      	cbnz	r3, 8010f9e <_putc_r+0x12>
 8010f9a:	f7fe ffb5 	bl	800ff08 <__sinit>
 8010f9e:	4b1c      	ldr	r3, [pc, #112]	; (8011010 <_putc_r+0x84>)
 8010fa0:	429c      	cmp	r4, r3
 8010fa2:	d124      	bne.n	8010fee <_putc_r+0x62>
 8010fa4:	6874      	ldr	r4, [r6, #4]
 8010fa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010fa8:	07d8      	lsls	r0, r3, #31
 8010faa:	d405      	bmi.n	8010fb8 <_putc_r+0x2c>
 8010fac:	89a3      	ldrh	r3, [r4, #12]
 8010fae:	0599      	lsls	r1, r3, #22
 8010fb0:	d402      	bmi.n	8010fb8 <_putc_r+0x2c>
 8010fb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010fb4:	f7ff f84b 	bl	801004e <__retarget_lock_acquire_recursive>
 8010fb8:	68a3      	ldr	r3, [r4, #8]
 8010fba:	3b01      	subs	r3, #1
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	60a3      	str	r3, [r4, #8]
 8010fc0:	da05      	bge.n	8010fce <_putc_r+0x42>
 8010fc2:	69a2      	ldr	r2, [r4, #24]
 8010fc4:	4293      	cmp	r3, r2
 8010fc6:	db1c      	blt.n	8011002 <_putc_r+0x76>
 8010fc8:	b2eb      	uxtb	r3, r5
 8010fca:	2b0a      	cmp	r3, #10
 8010fcc:	d019      	beq.n	8011002 <_putc_r+0x76>
 8010fce:	6823      	ldr	r3, [r4, #0]
 8010fd0:	1c5a      	adds	r2, r3, #1
 8010fd2:	6022      	str	r2, [r4, #0]
 8010fd4:	701d      	strb	r5, [r3, #0]
 8010fd6:	b2ed      	uxtb	r5, r5
 8010fd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010fda:	07da      	lsls	r2, r3, #31
 8010fdc:	d405      	bmi.n	8010fea <_putc_r+0x5e>
 8010fde:	89a3      	ldrh	r3, [r4, #12]
 8010fe0:	059b      	lsls	r3, r3, #22
 8010fe2:	d402      	bmi.n	8010fea <_putc_r+0x5e>
 8010fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010fe6:	f7ff f833 	bl	8010050 <__retarget_lock_release_recursive>
 8010fea:	4628      	mov	r0, r5
 8010fec:	bd70      	pop	{r4, r5, r6, pc}
 8010fee:	4b09      	ldr	r3, [pc, #36]	; (8011014 <_putc_r+0x88>)
 8010ff0:	429c      	cmp	r4, r3
 8010ff2:	d101      	bne.n	8010ff8 <_putc_r+0x6c>
 8010ff4:	68b4      	ldr	r4, [r6, #8]
 8010ff6:	e7d6      	b.n	8010fa6 <_putc_r+0x1a>
 8010ff8:	4b07      	ldr	r3, [pc, #28]	; (8011018 <_putc_r+0x8c>)
 8010ffa:	429c      	cmp	r4, r3
 8010ffc:	bf08      	it	eq
 8010ffe:	68f4      	ldreq	r4, [r6, #12]
 8011000:	e7d1      	b.n	8010fa6 <_putc_r+0x1a>
 8011002:	4629      	mov	r1, r5
 8011004:	4622      	mov	r2, r4
 8011006:	4630      	mov	r0, r6
 8011008:	f7fd ff28 	bl	800ee5c <__swbuf_r>
 801100c:	4605      	mov	r5, r0
 801100e:	e7e3      	b.n	8010fd8 <_putc_r+0x4c>
 8011010:	08011684 	.word	0x08011684
 8011014:	080116a4 	.word	0x080116a4
 8011018:	08011664 	.word	0x08011664

0801101c <_sbrk_r>:
 801101c:	b538      	push	{r3, r4, r5, lr}
 801101e:	4d06      	ldr	r5, [pc, #24]	; (8011038 <_sbrk_r+0x1c>)
 8011020:	2300      	movs	r3, #0
 8011022:	4604      	mov	r4, r0
 8011024:	4608      	mov	r0, r1
 8011026:	602b      	str	r3, [r5, #0]
 8011028:	f7f6 fc7c 	bl	8007924 <_sbrk>
 801102c:	1c43      	adds	r3, r0, #1
 801102e:	d102      	bne.n	8011036 <_sbrk_r+0x1a>
 8011030:	682b      	ldr	r3, [r5, #0]
 8011032:	b103      	cbz	r3, 8011036 <_sbrk_r+0x1a>
 8011034:	6023      	str	r3, [r4, #0]
 8011036:	bd38      	pop	{r3, r4, r5, pc}
 8011038:	20001448 	.word	0x20001448

0801103c <__sread>:
 801103c:	b510      	push	{r4, lr}
 801103e:	460c      	mov	r4, r1
 8011040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011044:	f000 f92c 	bl	80112a0 <_read_r>
 8011048:	2800      	cmp	r0, #0
 801104a:	bfab      	itete	ge
 801104c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801104e:	89a3      	ldrhlt	r3, [r4, #12]
 8011050:	181b      	addge	r3, r3, r0
 8011052:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011056:	bfac      	ite	ge
 8011058:	6563      	strge	r3, [r4, #84]	; 0x54
 801105a:	81a3      	strhlt	r3, [r4, #12]
 801105c:	bd10      	pop	{r4, pc}

0801105e <__swrite>:
 801105e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011062:	461f      	mov	r7, r3
 8011064:	898b      	ldrh	r3, [r1, #12]
 8011066:	05db      	lsls	r3, r3, #23
 8011068:	4605      	mov	r5, r0
 801106a:	460c      	mov	r4, r1
 801106c:	4616      	mov	r6, r2
 801106e:	d505      	bpl.n	801107c <__swrite+0x1e>
 8011070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011074:	2302      	movs	r3, #2
 8011076:	2200      	movs	r2, #0
 8011078:	f000 f898 	bl	80111ac <_lseek_r>
 801107c:	89a3      	ldrh	r3, [r4, #12]
 801107e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011082:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011086:	81a3      	strh	r3, [r4, #12]
 8011088:	4632      	mov	r2, r6
 801108a:	463b      	mov	r3, r7
 801108c:	4628      	mov	r0, r5
 801108e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011092:	f000 b817 	b.w	80110c4 <_write_r>

08011096 <__sseek>:
 8011096:	b510      	push	{r4, lr}
 8011098:	460c      	mov	r4, r1
 801109a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801109e:	f000 f885 	bl	80111ac <_lseek_r>
 80110a2:	1c43      	adds	r3, r0, #1
 80110a4:	89a3      	ldrh	r3, [r4, #12]
 80110a6:	bf15      	itete	ne
 80110a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80110aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80110ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80110b2:	81a3      	strheq	r3, [r4, #12]
 80110b4:	bf18      	it	ne
 80110b6:	81a3      	strhne	r3, [r4, #12]
 80110b8:	bd10      	pop	{r4, pc}

080110ba <__sclose>:
 80110ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110be:	f000 b831 	b.w	8011124 <_close_r>
	...

080110c4 <_write_r>:
 80110c4:	b538      	push	{r3, r4, r5, lr}
 80110c6:	4d07      	ldr	r5, [pc, #28]	; (80110e4 <_write_r+0x20>)
 80110c8:	4604      	mov	r4, r0
 80110ca:	4608      	mov	r0, r1
 80110cc:	4611      	mov	r1, r2
 80110ce:	2200      	movs	r2, #0
 80110d0:	602a      	str	r2, [r5, #0]
 80110d2:	461a      	mov	r2, r3
 80110d4:	f7f6 fbd2 	bl	800787c <_write>
 80110d8:	1c43      	adds	r3, r0, #1
 80110da:	d102      	bne.n	80110e2 <_write_r+0x1e>
 80110dc:	682b      	ldr	r3, [r5, #0]
 80110de:	b103      	cbz	r3, 80110e2 <_write_r+0x1e>
 80110e0:	6023      	str	r3, [r4, #0]
 80110e2:	bd38      	pop	{r3, r4, r5, pc}
 80110e4:	20001448 	.word	0x20001448

080110e8 <__assert_func>:
 80110e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80110ea:	4614      	mov	r4, r2
 80110ec:	461a      	mov	r2, r3
 80110ee:	4b09      	ldr	r3, [pc, #36]	; (8011114 <__assert_func+0x2c>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	4605      	mov	r5, r0
 80110f4:	68d8      	ldr	r0, [r3, #12]
 80110f6:	b14c      	cbz	r4, 801110c <__assert_func+0x24>
 80110f8:	4b07      	ldr	r3, [pc, #28]	; (8011118 <__assert_func+0x30>)
 80110fa:	9100      	str	r1, [sp, #0]
 80110fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011100:	4906      	ldr	r1, [pc, #24]	; (801111c <__assert_func+0x34>)
 8011102:	462b      	mov	r3, r5
 8011104:	f000 f81e 	bl	8011144 <fiprintf>
 8011108:	f000 f8e9 	bl	80112de <abort>
 801110c:	4b04      	ldr	r3, [pc, #16]	; (8011120 <__assert_func+0x38>)
 801110e:	461c      	mov	r4, r3
 8011110:	e7f3      	b.n	80110fa <__assert_func+0x12>
 8011112:	bf00      	nop
 8011114:	2000000c 	.word	0x2000000c
 8011118:	0801182d 	.word	0x0801182d
 801111c:	0801183a 	.word	0x0801183a
 8011120:	08011868 	.word	0x08011868

08011124 <_close_r>:
 8011124:	b538      	push	{r3, r4, r5, lr}
 8011126:	4d06      	ldr	r5, [pc, #24]	; (8011140 <_close_r+0x1c>)
 8011128:	2300      	movs	r3, #0
 801112a:	4604      	mov	r4, r0
 801112c:	4608      	mov	r0, r1
 801112e:	602b      	str	r3, [r5, #0]
 8011130:	f7f6 fbc4 	bl	80078bc <_close>
 8011134:	1c43      	adds	r3, r0, #1
 8011136:	d102      	bne.n	801113e <_close_r+0x1a>
 8011138:	682b      	ldr	r3, [r5, #0]
 801113a:	b103      	cbz	r3, 801113e <_close_r+0x1a>
 801113c:	6023      	str	r3, [r4, #0]
 801113e:	bd38      	pop	{r3, r4, r5, pc}
 8011140:	20001448 	.word	0x20001448

08011144 <fiprintf>:
 8011144:	b40e      	push	{r1, r2, r3}
 8011146:	b503      	push	{r0, r1, lr}
 8011148:	4601      	mov	r1, r0
 801114a:	ab03      	add	r3, sp, #12
 801114c:	4805      	ldr	r0, [pc, #20]	; (8011164 <fiprintf+0x20>)
 801114e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011152:	6800      	ldr	r0, [r0, #0]
 8011154:	9301      	str	r3, [sp, #4]
 8011156:	f7ff fde9 	bl	8010d2c <_vfiprintf_r>
 801115a:	b002      	add	sp, #8
 801115c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011160:	b003      	add	sp, #12
 8011162:	4770      	bx	lr
 8011164:	2000000c 	.word	0x2000000c

08011168 <_fstat_r>:
 8011168:	b538      	push	{r3, r4, r5, lr}
 801116a:	4d07      	ldr	r5, [pc, #28]	; (8011188 <_fstat_r+0x20>)
 801116c:	2300      	movs	r3, #0
 801116e:	4604      	mov	r4, r0
 8011170:	4608      	mov	r0, r1
 8011172:	4611      	mov	r1, r2
 8011174:	602b      	str	r3, [r5, #0]
 8011176:	f7f6 fbad 	bl	80078d4 <_fstat>
 801117a:	1c43      	adds	r3, r0, #1
 801117c:	d102      	bne.n	8011184 <_fstat_r+0x1c>
 801117e:	682b      	ldr	r3, [r5, #0]
 8011180:	b103      	cbz	r3, 8011184 <_fstat_r+0x1c>
 8011182:	6023      	str	r3, [r4, #0]
 8011184:	bd38      	pop	{r3, r4, r5, pc}
 8011186:	bf00      	nop
 8011188:	20001448 	.word	0x20001448

0801118c <_isatty_r>:
 801118c:	b538      	push	{r3, r4, r5, lr}
 801118e:	4d06      	ldr	r5, [pc, #24]	; (80111a8 <_isatty_r+0x1c>)
 8011190:	2300      	movs	r3, #0
 8011192:	4604      	mov	r4, r0
 8011194:	4608      	mov	r0, r1
 8011196:	602b      	str	r3, [r5, #0]
 8011198:	f7f6 fbac 	bl	80078f4 <_isatty>
 801119c:	1c43      	adds	r3, r0, #1
 801119e:	d102      	bne.n	80111a6 <_isatty_r+0x1a>
 80111a0:	682b      	ldr	r3, [r5, #0]
 80111a2:	b103      	cbz	r3, 80111a6 <_isatty_r+0x1a>
 80111a4:	6023      	str	r3, [r4, #0]
 80111a6:	bd38      	pop	{r3, r4, r5, pc}
 80111a8:	20001448 	.word	0x20001448

080111ac <_lseek_r>:
 80111ac:	b538      	push	{r3, r4, r5, lr}
 80111ae:	4d07      	ldr	r5, [pc, #28]	; (80111cc <_lseek_r+0x20>)
 80111b0:	4604      	mov	r4, r0
 80111b2:	4608      	mov	r0, r1
 80111b4:	4611      	mov	r1, r2
 80111b6:	2200      	movs	r2, #0
 80111b8:	602a      	str	r2, [r5, #0]
 80111ba:	461a      	mov	r2, r3
 80111bc:	f7f6 fba5 	bl	800790a <_lseek>
 80111c0:	1c43      	adds	r3, r0, #1
 80111c2:	d102      	bne.n	80111ca <_lseek_r+0x1e>
 80111c4:	682b      	ldr	r3, [r5, #0]
 80111c6:	b103      	cbz	r3, 80111ca <_lseek_r+0x1e>
 80111c8:	6023      	str	r3, [r4, #0]
 80111ca:	bd38      	pop	{r3, r4, r5, pc}
 80111cc:	20001448 	.word	0x20001448

080111d0 <__ascii_mbtowc>:
 80111d0:	b082      	sub	sp, #8
 80111d2:	b901      	cbnz	r1, 80111d6 <__ascii_mbtowc+0x6>
 80111d4:	a901      	add	r1, sp, #4
 80111d6:	b142      	cbz	r2, 80111ea <__ascii_mbtowc+0x1a>
 80111d8:	b14b      	cbz	r3, 80111ee <__ascii_mbtowc+0x1e>
 80111da:	7813      	ldrb	r3, [r2, #0]
 80111dc:	600b      	str	r3, [r1, #0]
 80111de:	7812      	ldrb	r2, [r2, #0]
 80111e0:	1e10      	subs	r0, r2, #0
 80111e2:	bf18      	it	ne
 80111e4:	2001      	movne	r0, #1
 80111e6:	b002      	add	sp, #8
 80111e8:	4770      	bx	lr
 80111ea:	4610      	mov	r0, r2
 80111ec:	e7fb      	b.n	80111e6 <__ascii_mbtowc+0x16>
 80111ee:	f06f 0001 	mvn.w	r0, #1
 80111f2:	e7f8      	b.n	80111e6 <__ascii_mbtowc+0x16>

080111f4 <memmove>:
 80111f4:	4288      	cmp	r0, r1
 80111f6:	b510      	push	{r4, lr}
 80111f8:	eb01 0402 	add.w	r4, r1, r2
 80111fc:	d902      	bls.n	8011204 <memmove+0x10>
 80111fe:	4284      	cmp	r4, r0
 8011200:	4623      	mov	r3, r4
 8011202:	d807      	bhi.n	8011214 <memmove+0x20>
 8011204:	1e43      	subs	r3, r0, #1
 8011206:	42a1      	cmp	r1, r4
 8011208:	d008      	beq.n	801121c <memmove+0x28>
 801120a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801120e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011212:	e7f8      	b.n	8011206 <memmove+0x12>
 8011214:	4402      	add	r2, r0
 8011216:	4601      	mov	r1, r0
 8011218:	428a      	cmp	r2, r1
 801121a:	d100      	bne.n	801121e <memmove+0x2a>
 801121c:	bd10      	pop	{r4, pc}
 801121e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011222:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011226:	e7f7      	b.n	8011218 <memmove+0x24>

08011228 <__malloc_lock>:
 8011228:	4801      	ldr	r0, [pc, #4]	; (8011230 <__malloc_lock+0x8>)
 801122a:	f7fe bf10 	b.w	801004e <__retarget_lock_acquire_recursive>
 801122e:	bf00      	nop
 8011230:	2000143c 	.word	0x2000143c

08011234 <__malloc_unlock>:
 8011234:	4801      	ldr	r0, [pc, #4]	; (801123c <__malloc_unlock+0x8>)
 8011236:	f7fe bf0b 	b.w	8010050 <__retarget_lock_release_recursive>
 801123a:	bf00      	nop
 801123c:	2000143c 	.word	0x2000143c

08011240 <_realloc_r>:
 8011240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011244:	4680      	mov	r8, r0
 8011246:	4614      	mov	r4, r2
 8011248:	460e      	mov	r6, r1
 801124a:	b921      	cbnz	r1, 8011256 <_realloc_r+0x16>
 801124c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011250:	4611      	mov	r1, r2
 8011252:	f7ff bb71 	b.w	8010938 <_malloc_r>
 8011256:	b92a      	cbnz	r2, 8011264 <_realloc_r+0x24>
 8011258:	f7ff fb02 	bl	8010860 <_free_r>
 801125c:	4625      	mov	r5, r4
 801125e:	4628      	mov	r0, r5
 8011260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011264:	f000 f842 	bl	80112ec <_malloc_usable_size_r>
 8011268:	4284      	cmp	r4, r0
 801126a:	4607      	mov	r7, r0
 801126c:	d802      	bhi.n	8011274 <_realloc_r+0x34>
 801126e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011272:	d812      	bhi.n	801129a <_realloc_r+0x5a>
 8011274:	4621      	mov	r1, r4
 8011276:	4640      	mov	r0, r8
 8011278:	f7ff fb5e 	bl	8010938 <_malloc_r>
 801127c:	4605      	mov	r5, r0
 801127e:	2800      	cmp	r0, #0
 8011280:	d0ed      	beq.n	801125e <_realloc_r+0x1e>
 8011282:	42bc      	cmp	r4, r7
 8011284:	4622      	mov	r2, r4
 8011286:	4631      	mov	r1, r6
 8011288:	bf28      	it	cs
 801128a:	463a      	movcs	r2, r7
 801128c:	f7fc ffd4 	bl	800e238 <memcpy>
 8011290:	4631      	mov	r1, r6
 8011292:	4640      	mov	r0, r8
 8011294:	f7ff fae4 	bl	8010860 <_free_r>
 8011298:	e7e1      	b.n	801125e <_realloc_r+0x1e>
 801129a:	4635      	mov	r5, r6
 801129c:	e7df      	b.n	801125e <_realloc_r+0x1e>
	...

080112a0 <_read_r>:
 80112a0:	b538      	push	{r3, r4, r5, lr}
 80112a2:	4d07      	ldr	r5, [pc, #28]	; (80112c0 <_read_r+0x20>)
 80112a4:	4604      	mov	r4, r0
 80112a6:	4608      	mov	r0, r1
 80112a8:	4611      	mov	r1, r2
 80112aa:	2200      	movs	r2, #0
 80112ac:	602a      	str	r2, [r5, #0]
 80112ae:	461a      	mov	r2, r3
 80112b0:	f7f6 fac6 	bl	8007840 <_read>
 80112b4:	1c43      	adds	r3, r0, #1
 80112b6:	d102      	bne.n	80112be <_read_r+0x1e>
 80112b8:	682b      	ldr	r3, [r5, #0]
 80112ba:	b103      	cbz	r3, 80112be <_read_r+0x1e>
 80112bc:	6023      	str	r3, [r4, #0]
 80112be:	bd38      	pop	{r3, r4, r5, pc}
 80112c0:	20001448 	.word	0x20001448

080112c4 <__ascii_wctomb>:
 80112c4:	b149      	cbz	r1, 80112da <__ascii_wctomb+0x16>
 80112c6:	2aff      	cmp	r2, #255	; 0xff
 80112c8:	bf85      	ittet	hi
 80112ca:	238a      	movhi	r3, #138	; 0x8a
 80112cc:	6003      	strhi	r3, [r0, #0]
 80112ce:	700a      	strbls	r2, [r1, #0]
 80112d0:	f04f 30ff 	movhi.w	r0, #4294967295
 80112d4:	bf98      	it	ls
 80112d6:	2001      	movls	r0, #1
 80112d8:	4770      	bx	lr
 80112da:	4608      	mov	r0, r1
 80112dc:	4770      	bx	lr

080112de <abort>:
 80112de:	b508      	push	{r3, lr}
 80112e0:	2006      	movs	r0, #6
 80112e2:	f000 f833 	bl	801134c <raise>
 80112e6:	2001      	movs	r0, #1
 80112e8:	f7f6 faa0 	bl	800782c <_exit>

080112ec <_malloc_usable_size_r>:
 80112ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112f0:	1f18      	subs	r0, r3, #4
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	bfbc      	itt	lt
 80112f6:	580b      	ldrlt	r3, [r1, r0]
 80112f8:	18c0      	addlt	r0, r0, r3
 80112fa:	4770      	bx	lr

080112fc <_raise_r>:
 80112fc:	291f      	cmp	r1, #31
 80112fe:	b538      	push	{r3, r4, r5, lr}
 8011300:	4604      	mov	r4, r0
 8011302:	460d      	mov	r5, r1
 8011304:	d904      	bls.n	8011310 <_raise_r+0x14>
 8011306:	2316      	movs	r3, #22
 8011308:	6003      	str	r3, [r0, #0]
 801130a:	f04f 30ff 	mov.w	r0, #4294967295
 801130e:	bd38      	pop	{r3, r4, r5, pc}
 8011310:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011312:	b112      	cbz	r2, 801131a <_raise_r+0x1e>
 8011314:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011318:	b94b      	cbnz	r3, 801132e <_raise_r+0x32>
 801131a:	4620      	mov	r0, r4
 801131c:	f000 f830 	bl	8011380 <_getpid_r>
 8011320:	462a      	mov	r2, r5
 8011322:	4601      	mov	r1, r0
 8011324:	4620      	mov	r0, r4
 8011326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801132a:	f000 b817 	b.w	801135c <_kill_r>
 801132e:	2b01      	cmp	r3, #1
 8011330:	d00a      	beq.n	8011348 <_raise_r+0x4c>
 8011332:	1c59      	adds	r1, r3, #1
 8011334:	d103      	bne.n	801133e <_raise_r+0x42>
 8011336:	2316      	movs	r3, #22
 8011338:	6003      	str	r3, [r0, #0]
 801133a:	2001      	movs	r0, #1
 801133c:	e7e7      	b.n	801130e <_raise_r+0x12>
 801133e:	2400      	movs	r4, #0
 8011340:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011344:	4628      	mov	r0, r5
 8011346:	4798      	blx	r3
 8011348:	2000      	movs	r0, #0
 801134a:	e7e0      	b.n	801130e <_raise_r+0x12>

0801134c <raise>:
 801134c:	4b02      	ldr	r3, [pc, #8]	; (8011358 <raise+0xc>)
 801134e:	4601      	mov	r1, r0
 8011350:	6818      	ldr	r0, [r3, #0]
 8011352:	f7ff bfd3 	b.w	80112fc <_raise_r>
 8011356:	bf00      	nop
 8011358:	2000000c 	.word	0x2000000c

0801135c <_kill_r>:
 801135c:	b538      	push	{r3, r4, r5, lr}
 801135e:	4d07      	ldr	r5, [pc, #28]	; (801137c <_kill_r+0x20>)
 8011360:	2300      	movs	r3, #0
 8011362:	4604      	mov	r4, r0
 8011364:	4608      	mov	r0, r1
 8011366:	4611      	mov	r1, r2
 8011368:	602b      	str	r3, [r5, #0]
 801136a:	f7f6 fa4f 	bl	800780c <_kill>
 801136e:	1c43      	adds	r3, r0, #1
 8011370:	d102      	bne.n	8011378 <_kill_r+0x1c>
 8011372:	682b      	ldr	r3, [r5, #0]
 8011374:	b103      	cbz	r3, 8011378 <_kill_r+0x1c>
 8011376:	6023      	str	r3, [r4, #0]
 8011378:	bd38      	pop	{r3, r4, r5, pc}
 801137a:	bf00      	nop
 801137c:	20001448 	.word	0x20001448

08011380 <_getpid_r>:
 8011380:	f7f6 ba3c 	b.w	80077fc <_getpid>

08011384 <_init>:
 8011384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011386:	bf00      	nop
 8011388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801138a:	bc08      	pop	{r3}
 801138c:	469e      	mov	lr, r3
 801138e:	4770      	bx	lr

08011390 <_fini>:
 8011390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011392:	bf00      	nop
 8011394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011396:	bc08      	pop	{r3}
 8011398:	469e      	mov	lr, r3
 801139a:	4770      	bx	lr
