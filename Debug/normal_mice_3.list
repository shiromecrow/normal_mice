
normal_mice_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c85c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800c9f0  0800c9f0  0001c9f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce64  0800ce64  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce64  0800ce64  0001ce64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce6c  0800ce6c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce6c  0800ce6c  0001ce6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce70  0800ce70  0001ce70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800ce74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a40  200001dc  0800d050  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c1c  0800d050  00020c1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ef7  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f87  00000000  00000000  00039103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  0003d090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001568  00000000  00000000  0003e7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026392  00000000  00000000  0003fd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001df8d  00000000  00000000  000660da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dee69  00000000  00000000  00084067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00162ed0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007074  00000000  00000000  00162f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c9d4 	.word	0x0800c9d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800c9d4 	.word	0x0800c9d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <control_test_motor>:

char modeacc;
volatile char g_acc_flag;

void control_test_motor(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
	pl_motor_standby(1);
 8000f52:	2001      	movs	r0, #1
 8000f54:	f001 faea 	bl	800252c <pl_motor_standby>
	pl_motor_start();
 8000f58:	f001 fb52 	bl	8002600 <pl_motor_start>

//	float v_e=straight_table(-180, -100, -100, -500, 7000);
//	float v_e=straight_table(180, 200, 200, 600, 7000);
	float v_e=straight_table(180, 150, 600, 600, 7000);
 8000f5c:	ed9f 2a27 	vldr	s4, [pc, #156]	; 8000ffc <control_test_motor+0xb0>
 8000f60:	eddf 1a27 	vldr	s3, [pc, #156]	; 8001000 <control_test_motor+0xb4>
 8000f64:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8001000 <control_test_motor+0xb4>
 8000f68:	eddf 0a26 	vldr	s1, [pc, #152]	; 8001004 <control_test_motor+0xb8>
 8000f6c:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8001008 <control_test_motor+0xbc>
 8000f70:	f000 fd92 	bl	8001a98 <straight_table>
 8000f74:	ed87 0a01 	vstr	s0, [r7, #4]
	slalom_table(v_e,90, 0, 0, 400, 7000);
 8000f78:	eddf 2a20 	vldr	s5, [pc, #128]	; 8000ffc <control_test_motor+0xb0>
 8000f7c:	ed9f 2a23 	vldr	s4, [pc, #140]	; 800100c <control_test_motor+0xc0>
 8000f80:	eddf 1a23 	vldr	s3, [pc, #140]	; 8001010 <control_test_motor+0xc4>
 8000f84:	ed9f 1a22 	vldr	s2, [pc, #136]	; 8001010 <control_test_motor+0xc4>
 8000f88:	eddf 0a22 	vldr	s1, [pc, #136]	; 8001014 <control_test_motor+0xc8>
 8000f8c:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f90:	f000 ff56 	bl	8001e40 <slalom_table>
	v_e=straight_table(180, v_e, 150, 600, 7000);
 8000f94:	ed9f 2a19 	vldr	s4, [pc, #100]	; 8000ffc <control_test_motor+0xb0>
 8000f98:	eddf 1a19 	vldr	s3, [pc, #100]	; 8001000 <control_test_motor+0xb4>
 8000f9c:	ed9f 1a19 	vldr	s2, [pc, #100]	; 8001004 <control_test_motor+0xb8>
 8000fa0:	edd7 0a01 	vldr	s1, [r7, #4]
 8000fa4:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001008 <control_test_motor+0xbc>
 8000fa8:	f000 fd76 	bl	8001a98 <straight_table>
 8000fac:	ed87 0a01 	vstr	s0, [r7, #4]
	pl_motor_stop();
 8000fb0:	f001 fb3a 	bl	8002628 <pl_motor_stop>
	HAL_Delay(500);
 8000fb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fb8:	f003 fcd4 	bl	8004964 <HAL_Delay>

	pl_motor_standby(1);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f001 fab5 	bl	800252c <pl_motor_standby>
	pl_motor_start();
 8000fc2:	f001 fb1d 	bl	8002600 <pl_motor_start>
	v_e=turning_table(360, 240, 240, 600, 7000);
 8000fc6:	ed9f 2a0d 	vldr	s4, [pc, #52]	; 8000ffc <control_test_motor+0xb0>
 8000fca:	eddf 1a0d 	vldr	s3, [pc, #52]	; 8001000 <control_test_motor+0xb4>
 8000fce:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8001018 <control_test_motor+0xcc>
 8000fd2:	eddf 0a11 	vldr	s1, [pc, #68]	; 8001018 <control_test_motor+0xcc>
 8000fd6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800101c <control_test_motor+0xd0>
 8000fda:	f000 fe47 	bl	8001c6c <turning_table>
 8000fde:	ed87 0a01 	vstr	s0, [r7, #4]

	pl_motor_stop();
 8000fe2:	f001 fb21 	bl	8002628 <pl_motor_stop>
	HAL_Delay(500);
 8000fe6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fea:	f003 fcbb 	bl	8004964 <HAL_Delay>
	pl_motor_standby(0);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f001 fa9c 	bl	800252c <pl_motor_standby>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	45dac000 	.word	0x45dac000
 8001000:	44160000 	.word	0x44160000
 8001004:	43160000 	.word	0x43160000
 8001008:	43340000 	.word	0x43340000
 800100c:	43c80000 	.word	0x43c80000
 8001010:	00000000 	.word	0x00000000
 8001014:	42b40000 	.word	0x42b40000
 8001018:	43700000 	.word	0x43700000
 800101c:	43b40000 	.word	0x43b40000

08001020 <motor_init>:
/*	モータの初期化					(pl_speaker_init)	*/
/*******************************************************************/
/*	モータの初期化する。						*/
/*******************************************************************/
void motor_init(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

	modeacc=0;
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <motor_init+0x1c>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
	g_acc_flag=0;
 800102a:	4b05      	ldr	r3, [pc, #20]	; (8001040 <motor_init+0x20>)
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]


}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000238 	.word	0x20000238
 8001040:	20000239 	.word	0x20000239
 8001044:	00000000 	.word	0x00000000

08001048 <interrupt_Motor>:



void interrupt_Motor(void){
 8001048:	b5b0      	push	{r4, r5, r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af02      	add	r7, sp, #8

	if (modeacc == 0) {
		//g_WallControl_mode=0;
		//g_acc_flag=0;
	}
	if (modeacc == 1) {
 800104e:	4bc4      	ldr	r3, [pc, #784]	; (8001360 <interrupt_Motor+0x318>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b01      	cmp	r3, #1
 8001054:	f040 8088 	bne.w	8001168 <interrupt_Motor+0x120>
		g_TargetStraight.displacement += g_TargetStraight.velocity*INTERRUPT_TIME;// + g_TargetStraight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8001058:	4bc2      	ldr	r3, [pc, #776]	; (8001364 <interrupt_Motor+0x31c>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fa73 	bl	8000548 <__aeabi_f2d>
 8001062:	4604      	mov	r4, r0
 8001064:	460d      	mov	r5, r1
 8001066:	4bbf      	ldr	r3, [pc, #764]	; (8001364 <interrupt_Motor+0x31c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fa6c 	bl	8000548 <__aeabi_f2d>
 8001070:	a3b7      	add	r3, pc, #732	; (adr r3, 8001350 <interrupt_Motor+0x308>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	f7ff fabf 	bl	80005f8 <__aeabi_dmul>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4620      	mov	r0, r4
 8001080:	4629      	mov	r1, r5
 8001082:	f7ff f903 	bl	800028c <__adddf3>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4610      	mov	r0, r2
 800108c:	4619      	mov	r1, r3
 800108e:	f7ff fd8b 	bl	8000ba8 <__aeabi_d2f>
 8001092:	4603      	mov	r3, r0
 8001094:	4ab3      	ldr	r2, [pc, #716]	; (8001364 <interrupt_Motor+0x31c>)
 8001096:	6093      	str	r3, [r2, #8]
		g_TargetStraight.velocity += g_TargetStraight.acceleration*INTERRUPT_TIME;
 8001098:	4bb2      	ldr	r3, [pc, #712]	; (8001364 <interrupt_Motor+0x31c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fa53 	bl	8000548 <__aeabi_f2d>
 80010a2:	4604      	mov	r4, r0
 80010a4:	460d      	mov	r5, r1
 80010a6:	4baf      	ldr	r3, [pc, #700]	; (8001364 <interrupt_Motor+0x31c>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa4c 	bl	8000548 <__aeabi_f2d>
 80010b0:	a3a7      	add	r3, pc, #668	; (adr r3, 8001350 <interrupt_Motor+0x308>)
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	f7ff fa9f 	bl	80005f8 <__aeabi_dmul>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4620      	mov	r0, r4
 80010c0:	4629      	mov	r1, r5
 80010c2:	f7ff f8e3 	bl	800028c <__adddf3>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	f7ff fd6b 	bl	8000ba8 <__aeabi_d2f>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4aa3      	ldr	r2, [pc, #652]	; (8001364 <interrupt_Motor+0x31c>)
 80010d6:	6013      	str	r3, [r2, #0]
		g_TargetTurning.displacement += g_TargetTurning.velocity*INTERRUPT_TIME;// + g_TargetTurning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80010d8:	4ba3      	ldr	r3, [pc, #652]	; (8001368 <interrupt_Motor+0x320>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fa33 	bl	8000548 <__aeabi_f2d>
 80010e2:	4604      	mov	r4, r0
 80010e4:	460d      	mov	r5, r1
 80010e6:	4ba0      	ldr	r3, [pc, #640]	; (8001368 <interrupt_Motor+0x320>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fa2c 	bl	8000548 <__aeabi_f2d>
 80010f0:	a397      	add	r3, pc, #604	; (adr r3, 8001350 <interrupt_Motor+0x308>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f7ff fa7f 	bl	80005f8 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4620      	mov	r0, r4
 8001100:	4629      	mov	r1, r5
 8001102:	f7ff f8c3 	bl	800028c <__adddf3>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4610      	mov	r0, r2
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff fd4b 	bl	8000ba8 <__aeabi_d2f>
 8001112:	4603      	mov	r3, r0
 8001114:	4a94      	ldr	r2, [pc, #592]	; (8001368 <interrupt_Motor+0x320>)
 8001116:	6093      	str	r3, [r2, #8]
		g_TargetTurning.velocity += g_TargetTurning.acceleration*INTERRUPT_TIME;
 8001118:	4b93      	ldr	r3, [pc, #588]	; (8001368 <interrupt_Motor+0x320>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fa13 	bl	8000548 <__aeabi_f2d>
 8001122:	4604      	mov	r4, r0
 8001124:	460d      	mov	r5, r1
 8001126:	4b90      	ldr	r3, [pc, #576]	; (8001368 <interrupt_Motor+0x320>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fa0c 	bl	8000548 <__aeabi_f2d>
 8001130:	a387      	add	r3, pc, #540	; (adr r3, 8001350 <interrupt_Motor+0x308>)
 8001132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001136:	f7ff fa5f 	bl	80005f8 <__aeabi_dmul>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4620      	mov	r0, r4
 8001140:	4629      	mov	r1, r5
 8001142:	f7ff f8a3 	bl	800028c <__adddf3>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff fd2b 	bl	8000ba8 <__aeabi_d2f>
 8001152:	4603      	mov	r3, r0
 8001154:	4a84      	ldr	r2, [pc, #528]	; (8001368 <interrupt_Motor+0x320>)
 8001156:	6013      	str	r3, [r2, #0]
		cal_table(g_TrapezoidStraight,&g_TargetStraight);
 8001158:	4b84      	ldr	r3, [pc, #528]	; (800136c <interrupt_Motor+0x324>)
 800115a:	4a82      	ldr	r2, [pc, #520]	; (8001364 <interrupt_Motor+0x31c>)
 800115c:	9201      	str	r2, [sp, #4]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	9200      	str	r2, [sp, #0]
 8001162:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001164:	f000 f94a 	bl	80013fc <cal_table>
	}
	if (modeacc == 2){
 8001168:	4b7d      	ldr	r3, [pc, #500]	; (8001360 <interrupt_Motor+0x318>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b02      	cmp	r3, #2
 800116e:	f040 808b 	bne.w	8001288 <interrupt_Motor+0x240>
		g_WallControl_mode=0;
 8001172:	4b7f      	ldr	r3, [pc, #508]	; (8001370 <interrupt_Motor+0x328>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
		g_TargetStraight.displacement += g_TargetStraight.velocity*INTERRUPT_TIME;// + g_TargetStraight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8001178:	4b7a      	ldr	r3, [pc, #488]	; (8001364 <interrupt_Motor+0x31c>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f9e3 	bl	8000548 <__aeabi_f2d>
 8001182:	4604      	mov	r4, r0
 8001184:	460d      	mov	r5, r1
 8001186:	4b77      	ldr	r3, [pc, #476]	; (8001364 <interrupt_Motor+0x31c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f9dc 	bl	8000548 <__aeabi_f2d>
 8001190:	a36f      	add	r3, pc, #444	; (adr r3, 8001350 <interrupt_Motor+0x308>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff fa2f 	bl	80005f8 <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4620      	mov	r0, r4
 80011a0:	4629      	mov	r1, r5
 80011a2:	f7ff f873 	bl	800028c <__adddf3>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fcfb 	bl	8000ba8 <__aeabi_d2f>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4a6b      	ldr	r2, [pc, #428]	; (8001364 <interrupt_Motor+0x31c>)
 80011b6:	6093      	str	r3, [r2, #8]
		g_TargetStraight.velocity += g_TargetStraight.acceleration*INTERRUPT_TIME;
 80011b8:	4b6a      	ldr	r3, [pc, #424]	; (8001364 <interrupt_Motor+0x31c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f9c3 	bl	8000548 <__aeabi_f2d>
 80011c2:	4604      	mov	r4, r0
 80011c4:	460d      	mov	r5, r1
 80011c6:	4b67      	ldr	r3, [pc, #412]	; (8001364 <interrupt_Motor+0x31c>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f9bc 	bl	8000548 <__aeabi_f2d>
 80011d0:	a35f      	add	r3, pc, #380	; (adr r3, 8001350 <interrupt_Motor+0x308>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	f7ff fa0f 	bl	80005f8 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4620      	mov	r0, r4
 80011e0:	4629      	mov	r1, r5
 80011e2:	f7ff f853 	bl	800028c <__adddf3>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fcdb 	bl	8000ba8 <__aeabi_d2f>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a5b      	ldr	r2, [pc, #364]	; (8001364 <interrupt_Motor+0x31c>)
 80011f6:	6013      	str	r3, [r2, #0]
		g_TargetTurning.displacement += g_TargetTurning.velocity*INTERRUPT_TIME;// + g_TargetTurning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80011f8:	4b5b      	ldr	r3, [pc, #364]	; (8001368 <interrupt_Motor+0x320>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f9a3 	bl	8000548 <__aeabi_f2d>
 8001202:	4604      	mov	r4, r0
 8001204:	460d      	mov	r5, r1
 8001206:	4b58      	ldr	r3, [pc, #352]	; (8001368 <interrupt_Motor+0x320>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f99c 	bl	8000548 <__aeabi_f2d>
 8001210:	a34f      	add	r3, pc, #316	; (adr r3, 8001350 <interrupt_Motor+0x308>)
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	f7ff f9ef 	bl	80005f8 <__aeabi_dmul>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4620      	mov	r0, r4
 8001220:	4629      	mov	r1, r5
 8001222:	f7ff f833 	bl	800028c <__adddf3>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f7ff fcbb 	bl	8000ba8 <__aeabi_d2f>
 8001232:	4603      	mov	r3, r0
 8001234:	4a4c      	ldr	r2, [pc, #304]	; (8001368 <interrupt_Motor+0x320>)
 8001236:	6093      	str	r3, [r2, #8]
		g_TargetTurning.velocity += g_TargetTurning.acceleration*INTERRUPT_TIME;
 8001238:	4b4b      	ldr	r3, [pc, #300]	; (8001368 <interrupt_Motor+0x320>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f983 	bl	8000548 <__aeabi_f2d>
 8001242:	4604      	mov	r4, r0
 8001244:	460d      	mov	r5, r1
 8001246:	4b48      	ldr	r3, [pc, #288]	; (8001368 <interrupt_Motor+0x320>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f97c 	bl	8000548 <__aeabi_f2d>
 8001250:	a33f      	add	r3, pc, #252	; (adr r3, 8001350 <interrupt_Motor+0x308>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	f7ff f9cf 	bl	80005f8 <__aeabi_dmul>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4620      	mov	r0, r4
 8001260:	4629      	mov	r1, r5
 8001262:	f7ff f813 	bl	800028c <__adddf3>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f7ff fc9b 	bl	8000ba8 <__aeabi_d2f>
 8001272:	4603      	mov	r3, r0
 8001274:	4a3c      	ldr	r2, [pc, #240]	; (8001368 <interrupt_Motor+0x320>)
 8001276:	6013      	str	r3, [r2, #0]
		cal_table(g_TrapezoidTurning,&g_TargetTurning);
 8001278:	4b3e      	ldr	r3, [pc, #248]	; (8001374 <interrupt_Motor+0x32c>)
 800127a:	4a3b      	ldr	r2, [pc, #236]	; (8001368 <interrupt_Motor+0x320>)
 800127c:	9201      	str	r2, [sp, #4]
 800127e:	691a      	ldr	r2, [r3, #16]
 8001280:	9200      	str	r2, [sp, #0]
 8001282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001284:	f000 f8ba 	bl	80013fc <cal_table>
	}
	float PID_wall = calWallConrol();
 8001288:	f000 ffa6 	bl	80021d8 <calWallConrol>
 800128c:	ed87 0a03 	vstr	s0, [r7, #12]
	float velocity_l = g_TargetStraight.velocity + g_TargetTurning.velocity * TREAD_WIDTH / 2 * M_PI / 180 + PID_wall;
 8001290:	4b34      	ldr	r3, [pc, #208]	; (8001364 <interrupt_Motor+0x31c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f957 	bl	8000548 <__aeabi_f2d>
 800129a:	4604      	mov	r4, r0
 800129c:	460d      	mov	r5, r1
 800129e:	4b32      	ldr	r3, [pc, #200]	; (8001368 <interrupt_Motor+0x320>)
 80012a0:	edd3 7a00 	vldr	s15, [r3]
 80012a4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001378 <interrupt_Motor+0x330>
 80012a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80012b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012b4:	ee16 0a90 	vmov	r0, s13
 80012b8:	f7ff f946 	bl	8000548 <__aeabi_f2d>
 80012bc:	a326      	add	r3, pc, #152	; (adr r3, 8001358 <interrupt_Motor+0x310>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	f7ff f999 	bl	80005f8 <__aeabi_dmul>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	4b2a      	ldr	r3, [pc, #168]	; (800137c <interrupt_Motor+0x334>)
 80012d4:	f7ff faba 	bl	800084c <__aeabi_ddiv>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4620      	mov	r0, r4
 80012de:	4629      	mov	r1, r5
 80012e0:	f7fe ffd4 	bl	800028c <__adddf3>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4614      	mov	r4, r2
 80012ea:	461d      	mov	r5, r3
 80012ec:	68f8      	ldr	r0, [r7, #12]
 80012ee:	f7ff f92b 	bl	8000548 <__aeabi_f2d>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4620      	mov	r0, r4
 80012f8:	4629      	mov	r1, r5
 80012fa:	f7fe ffc7 	bl	800028c <__adddf3>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	f7ff fc4f 	bl	8000ba8 <__aeabi_d2f>
 800130a:	4603      	mov	r3, r0
 800130c:	60bb      	str	r3, [r7, #8]
		pl_motor_mode_L(velocity_l);
 800130e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001312:	f001 f937 	bl	8002584 <pl_motor_mode_L>
		pl_motor_count_L(velocity_l);
 8001316:	ed97 0a02 	vldr	s0, [r7, #8]
 800131a:	f001 f995 	bl	8002648 <pl_motor_count_L>
	float velocity_r = g_TargetStraight.velocity - g_TargetTurning.velocity * TREAD_WIDTH / 2 * M_PI / 180 - PID_wall;
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <interrupt_Motor+0x31c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f910 	bl	8000548 <__aeabi_f2d>
 8001328:	4604      	mov	r4, r0
 800132a:	460d      	mov	r5, r1
 800132c:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <interrupt_Motor+0x320>)
 800132e:	edd3 7a00 	vldr	s15, [r3]
 8001332:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001378 <interrupt_Motor+0x330>
 8001336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800133e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001342:	ee16 0a90 	vmov	r0, s13
 8001346:	f7ff f8ff 	bl	8000548 <__aeabi_f2d>
 800134a:	e019      	b.n	8001380 <interrupt_Motor+0x338>
 800134c:	f3af 8000 	nop.w
 8001350:	d2f1a9fc 	.word	0xd2f1a9fc
 8001354:	3f50624d 	.word	0x3f50624d
 8001358:	54442d18 	.word	0x54442d18
 800135c:	400921fb 	.word	0x400921fb
 8001360:	20000238 	.word	0x20000238
 8001364:	200001f8 	.word	0x200001f8
 8001368:	20000204 	.word	0x20000204
 800136c:	20000210 	.word	0x20000210
 8001370:	2000039c 	.word	0x2000039c
 8001374:	20000224 	.word	0x20000224
 8001378:	42a20000 	.word	0x42a20000
 800137c:	40668000 	.word	0x40668000
 8001380:	a31c      	add	r3, pc, #112	; (adr r3, 80013f4 <interrupt_Motor+0x3ac>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	f7ff f937 	bl	80005f8 <__aeabi_dmul>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <interrupt_Motor+0x3a8>)
 8001398:	f7ff fa58 	bl	800084c <__aeabi_ddiv>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4620      	mov	r0, r4
 80013a2:	4629      	mov	r1, r5
 80013a4:	f7fe ff70 	bl	8000288 <__aeabi_dsub>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4614      	mov	r4, r2
 80013ae:	461d      	mov	r5, r3
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	f7ff f8c9 	bl	8000548 <__aeabi_f2d>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4620      	mov	r0, r4
 80013bc:	4629      	mov	r1, r5
 80013be:	f7fe ff63 	bl	8000288 <__aeabi_dsub>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4610      	mov	r0, r2
 80013c8:	4619      	mov	r1, r3
 80013ca:	f7ff fbed 	bl	8000ba8 <__aeabi_d2f>
 80013ce:	4603      	mov	r3, r0
 80013d0:	607b      	str	r3, [r7, #4]
	    pl_motor_mode_R(velocity_r);
 80013d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80013d6:	f001 f8f5 	bl	80025c4 <pl_motor_mode_R>
	    pl_motor_count_R(velocity_r);
 80013da:	ed97 0a01 	vldr	s0, [r7, #4]
 80013de:	f001 f947 	bl	8002670 <pl_motor_count_R>



}
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bdb0      	pop	{r4, r5, r7, pc}
 80013ea:	bf00      	nop
 80013ec:	f3af 8000 	nop.w
 80013f0:	40668000 	.word	0x40668000
 80013f4:	54442d18 	.word	0x54442d18
 80013f8:	400921fb 	.word	0x400921fb

080013fc <cal_table>:

void cal_table(TRAPEZOID input,TARGET *target){
 80013fc:	b084      	sub	sp, #16
 80013fe:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	f107 0420 	add.w	r4, r7, #32
 800140a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 800140e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001412:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141a:	f2c0 819b 	blt.w	8001754 <cal_table+0x358>
	switch (g_acc_flag) {
 800141e:	4bcc      	ldr	r3, [pc, #816]	; (8001750 <cal_table+0x354>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b06      	cmp	r3, #6
 8001426:	f200 832e 	bhi.w	8001a86 <cal_table+0x68a>
 800142a:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <cal_table+0x34>)
 800142c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001430:	08001a81 	.word	0x08001a81
 8001434:	0800144d 	.word	0x0800144d
 8001438:	080015bf 	.word	0x080015bf
 800143c:	080016dd 	.word	0x080016dd
 8001440:	08001a81 	.word	0x08001a81
 8001444:	08001709 	.word	0x08001709
 8001448:	0800172b 	.word	0x0800172b
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 800144c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800144e:	ed93 7a00 	vldr	s14, [r3]
 8001452:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001456:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800145a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145e:	db0a      	blt.n	8001476 <cal_table+0x7a>
				target->velocity = input.count_velocity;
 8001460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001464:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 8001466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 800146e:	4bb8      	ldr	r3, [pc, #736]	; (8001750 <cal_table+0x354>)
 8001470:	2202      	movs	r2, #2
 8001472:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 8001474:	e307      	b.n	8001a86 <cal_table+0x68a>
			else if((input.displacement <= (2*target->velocity*target->velocity
 8001476:	ed97 7a08 	vldr	s14, [r7, #32]
 800147a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800147c:	edd3 7a00 	vldr	s15, [r3]
 8001480:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001486:	edd3 7a00 	vldr	s15, [r3]
 800148a:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 800148e:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8001492:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001496:	ee66 7a27 	vmul.f32	s15, s12, s15
 800149a:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 800149e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80014a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80014a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80014aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 80014ae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014b2:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80014b6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80014ba:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 80014be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c6:	d900      	bls.n	80014ca <cal_table+0xce>
		break;
 80014c8:	e2dd      	b.n	8001a86 <cal_table+0x68a>
				time_over=((2*target->velocity*target->velocity
 80014ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80014d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d6:	edd3 7a00 	vldr	s15, [r3]
 80014da:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 80014de:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80014e2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ea:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 80014ee:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80014f2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80014f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014fa:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 80014fe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001502:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001506:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800150a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800150e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001512:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001518:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 800151c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001520:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8001524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff f80d 	bl	8000548 <__aeabi_f2d>
 800152e:	4604      	mov	r4, r0
 8001530:	460d      	mov	r5, r1
 8001532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff f807 	bl	8000548 <__aeabi_f2d>
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	f04f 0300 	mov.w	r3, #0
 8001542:	f7ff f859 	bl	80005f8 <__aeabi_dmul>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4690      	mov	r8, r2
 800154c:	4699      	mov	r9, r3
 800154e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001552:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001556:	ee17 0a90 	vmov	r0, s15
 800155a:	f7fe fff5 	bl	8000548 <__aeabi_f2d>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4640      	mov	r0, r8
 8001564:	4649      	mov	r1, r9
 8001566:	f7ff f847 	bl	80005f8 <__aeabi_dmul>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4620      	mov	r0, r4
 8001570:	4629      	mov	r1, r5
 8001572:	f7fe fe89 	bl	8000288 <__aeabi_dsub>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff fb13 	bl	8000ba8 <__aeabi_d2f>
 8001582:	4602      	mov	r2, r0
 8001584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001586:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 8001588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800158a:	ed93 7a00 	vldr	s14, [r3]
 800158e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001592:	edd7 7a01 	vldr	s15, [r7, #4]
 8001596:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800159a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800159e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a4:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 80015a8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80015ac:	eef1 7a67 	vneg.f32	s15, s15
 80015b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b2:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 80015b6:	4b66      	ldr	r3, [pc, #408]	; (8001750 <cal_table+0x354>)
 80015b8:	2203      	movs	r2, #3
 80015ba:	701a      	strb	r2, [r3, #0]
		break;
 80015bc:	e263      	b.n	8001a86 <cal_table+0x68a>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 80015be:	ed97 7a08 	vldr	s14, [r7, #32]
 80015c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80015c8:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 80015cc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80015d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 80015d8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80015dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80015e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80015e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80015ec:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80015f0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80015f4:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 80015f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001600:	d900      	bls.n	8001604 <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 8001602:	e240      	b.n	8001a86 <cal_table+0x68a>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8001604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001606:	ed93 7a02 	vldr	s14, [r3, #8]
 800160a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800160e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001612:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 8001616:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800161a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800161e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001622:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001626:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800162a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 800162e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001632:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8001636:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 800163a:	edd7 7a08 	vldr	s15, [r7, #32]
 800163e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001644:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8001648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800164c:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8001650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff77 	bl	8000548 <__aeabi_f2d>
 800165a:	4604      	mov	r4, r0
 800165c:	460d      	mov	r5, r1
 800165e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe ff71 	bl	8000548 <__aeabi_f2d>
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	f7fe ffc3 	bl	80005f8 <__aeabi_dmul>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4690      	mov	r8, r2
 8001678:	4699      	mov	r9, r3
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7fe ff64 	bl	8000548 <__aeabi_f2d>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4640      	mov	r0, r8
 8001686:	4649      	mov	r1, r9
 8001688:	f7fe ffb6 	bl	80005f8 <__aeabi_dmul>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4620      	mov	r0, r4
 8001692:	4629      	mov	r1, r5
 8001694:	f7fe fdf8 	bl	8000288 <__aeabi_dsub>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	f7ff fa82 	bl	8000ba8 <__aeabi_d2f>
 80016a4:	4602      	mov	r2, r0
 80016a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016a8:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 80016aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ac:	ed93 7a00 	vldr	s14, [r3]
 80016b0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80016b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80016b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c2:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 80016c6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80016ca:	eef1 7a67 	vneg.f32	s15, s15
 80016ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d0:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 80016d4:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <cal_table+0x354>)
 80016d6:	2203      	movs	r2, #3
 80016d8:	701a      	strb	r2, [r3, #0]
		break;
 80016da:	e1d4      	b.n	8001a86 <cal_table+0x68a>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 80016dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016de:	ed93 7a00 	vldr	s14, [r3]
 80016e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80016e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ee:	d900      	bls.n	80016f2 <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80016f0:	e1c9      	b.n	8001a86 <cal_table+0x68a>
			target->velocity = input.end_velocity;
 80016f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f6:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 80016f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <cal_table+0x354>)
 8001702:	2204      	movs	r2, #4
 8001704:	701a      	strb	r2, [r3, #0]
		break;
 8001706:	e1be      	b.n	8001a86 <cal_table+0x68a>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 8001708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800170a:	ed93 7a02 	vldr	s14, [r3, #8]
 800170e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001712:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171a:	db06      	blt.n	800172a <cal_table+0x32e>
			target->acceleration = 0;
 800171c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001724:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <cal_table+0x354>)
 8001726:	2204      	movs	r2, #4
 8001728:	701a      	strb	r2, [r3, #0]
		}
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 800172a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800172c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001730:	edd7 7a08 	vldr	s15, [r7, #32]
 8001734:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173c:	da00      	bge.n	8001740 <cal_table+0x344>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800173e:	e1a2      	b.n	8001a86 <cal_table+0x68a>
			target->acceleration = 0;
 8001740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001748:	4b01      	ldr	r3, [pc, #4]	; (8001750 <cal_table+0x354>)
 800174a:	2204      	movs	r2, #4
 800174c:	701a      	strb	r2, [r3, #0]
		break;
 800174e:	e19a      	b.n	8001a86 <cal_table+0x68a>
 8001750:	20000239 	.word	0x20000239
	}
}else{
	switch (g_acc_flag) {
 8001754:	4bcf      	ldr	r3, [pc, #828]	; (8001a94 <cal_table+0x698>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b06      	cmp	r3, #6
 800175c:	f200 8193 	bhi.w	8001a86 <cal_table+0x68a>
 8001760:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <cal_table+0x36c>)
 8001762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001766:	bf00      	nop
 8001768:	08001a85 	.word	0x08001a85
 800176c:	08001785 	.word	0x08001785
 8001770:	080018f7 	.word	0x080018f7
 8001774:	08001a0d 	.word	0x08001a0d
 8001778:	08001a39 	.word	0x08001a39
 800177c:	08001a39 	.word	0x08001a39
 8001780:	08001a5b 	.word	0x08001a5b
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 8001784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001786:	ed93 7a00 	vldr	s14, [r3]
 800178a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800178e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001796:	d80a      	bhi.n	80017ae <cal_table+0x3b2>
				target->velocity = input.count_velocity;
 8001798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800179a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800179c:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 800179e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 80017a6:	4bbb      	ldr	r3, [pc, #748]	; (8001a94 <cal_table+0x698>)
 80017a8:	2202      	movs	r2, #2
 80017aa:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 80017ac:	e16b      	b.n	8001a86 <cal_table+0x68a>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 80017ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80017b2:	eeb1 7a67 	vneg.f32	s14, s15
 80017b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b8:	edd3 7a00 	vldr	s15, [r3]
 80017bc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80017c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c2:	edd3 7a00 	vldr	s15, [r3]
 80017c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 80017ca:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80017ce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80017d2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80017d6:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 80017da:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80017de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017e2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80017e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 80017ea:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80017ee:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80017f2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80017f6:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 80017fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001802:	d900      	bls.n	8001806 <cal_table+0x40a>
		break;
 8001804:	e13f      	b.n	8001a86 <cal_table+0x68a>
				time_over=(-(2*target->velocity*target->velocity
 8001806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001808:	edd3 7a00 	vldr	s15, [r3]
 800180c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001812:	edd3 7a00 	vldr	s15, [r3]
 8001816:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 800181a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800181e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001822:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001826:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 800182a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800182e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001832:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001836:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 800183a:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 800183e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001842:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001846:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800184a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800184e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001852:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001858:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 800185c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001860:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8001864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe6d 	bl	8000548 <__aeabi_f2d>
 800186e:	4604      	mov	r4, r0
 8001870:	460d      	mov	r5, r1
 8001872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fe67 	bl	8000548 <__aeabi_f2d>
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	f7fe feb9 	bl	80005f8 <__aeabi_dmul>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4690      	mov	r8, r2
 800188c:	4699      	mov	r9, r3
 800188e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001892:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001896:	ee17 0a90 	vmov	r0, s15
 800189a:	f7fe fe55 	bl	8000548 <__aeabi_f2d>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4640      	mov	r0, r8
 80018a4:	4649      	mov	r1, r9
 80018a6:	f7fe fea7 	bl	80005f8 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4620      	mov	r0, r4
 80018b0:	4629      	mov	r1, r5
 80018b2:	f7fe fceb 	bl	800028c <__adddf3>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f7ff f973 	bl	8000ba8 <__aeabi_d2f>
 80018c2:	4602      	mov	r2, r0
 80018c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c6:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 80018c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ca:	ed93 7a00 	vldr	s14, [r3]
 80018ce:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80018d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e4:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 80018e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ec:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 80018ee:	4b69      	ldr	r3, [pc, #420]	; (8001a94 <cal_table+0x698>)
 80018f0:	2203      	movs	r2, #3
 80018f2:	701a      	strb	r2, [r3, #0]
		break;
 80018f4:	e0c7      	b.n	8001a86 <cal_table+0x68a>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 80018f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80018fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001900:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8001904:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001908:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800190c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8001910:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001914:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001918:	ee66 7a27 	vmul.f32	s15, s12, s15
 800191c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001920:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001924:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8001928:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800192c:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 8001930:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001938:	d900      	bls.n	800193c <cal_table+0x540>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 800193a:	e0a4      	b.n	8001a86 <cal_table+0x68a>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 800193c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001942:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001946:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800194a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 800194e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001952:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001956:	ee66 7a27 	vmul.f32	s15, s12, s15
 800195a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800195e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001962:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 8001966:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800196a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 800196e:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 8001972:	edd7 7a08 	vldr	s15, [r7, #32]
 8001976:	ee77 6a67 	vsub.f32	s13, s14, s15
 800197a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800197c:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8001980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001984:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8001988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fddb 	bl	8000548 <__aeabi_f2d>
 8001992:	4604      	mov	r4, r0
 8001994:	460d      	mov	r5, r1
 8001996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fdd5 	bl	8000548 <__aeabi_f2d>
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	f7fe fe27 	bl	80005f8 <__aeabi_dmul>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4690      	mov	r8, r2
 80019b0:	4699      	mov	r9, r3
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7fe fdc8 	bl	8000548 <__aeabi_f2d>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4640      	mov	r0, r8
 80019be:	4649      	mov	r1, r9
 80019c0:	f7fe fe1a 	bl	80005f8 <__aeabi_dmul>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4620      	mov	r0, r4
 80019ca:	4629      	mov	r1, r5
 80019cc:	f7fe fc5e 	bl	800028c <__adddf3>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4610      	mov	r0, r2
 80019d6:	4619      	mov	r1, r3
 80019d8:	f7ff f8e6 	bl	8000ba8 <__aeabi_d2f>
 80019dc:	4602      	mov	r2, r0
 80019de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e0:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 80019e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e4:	ed93 7a00 	vldr	s14, [r3]
 80019e8:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80019ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80019f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019fa:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 80019fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a02:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 8001a04:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <cal_table+0x698>)
 8001a06:	2203      	movs	r2, #3
 8001a08:	701a      	strb	r2, [r3, #0]
		break;
 8001a0a:	e03c      	b.n	8001a86 <cal_table+0x68a>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 8001a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a0e:	ed93 7a00 	vldr	s14, [r3]
 8001a12:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1e:	da00      	bge.n	8001a22 <cal_table+0x626>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8001a20:	e031      	b.n	8001a86 <cal_table+0x68a>
			target->velocity = input.end_velocity;
 8001a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a26:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8001a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <cal_table+0x698>)
 8001a32:	2204      	movs	r2, #4
 8001a34:	701a      	strb	r2, [r3, #0]
		break;
 8001a36:	e026      	b.n	8001a86 <cal_table+0x68a>
	case 4:
		//終了(0でもいいかも)
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 8001a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a3e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4a:	d806      	bhi.n	8001a5a <cal_table+0x65e>
			target->acceleration = 0;
 8001a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <cal_table+0x698>)
 8001a56:	2204      	movs	r2, #4
 8001a58:	701a      	strb	r2, [r3, #0]
		}
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 8001a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a5c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a60:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6c:	d900      	bls.n	8001a70 <cal_table+0x674>
		}
	}

}

}
 8001a6e:	e00a      	b.n	8001a86 <cal_table+0x68a>
			target->acceleration = 0;
 8001a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <cal_table+0x698>)
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	701a      	strb	r2, [r3, #0]
}
 8001a7e:	e002      	b.n	8001a86 <cal_table+0x68a>
		break;
 8001a80:	bf00      	nop
 8001a82:	e000      	b.n	8001a86 <cal_table+0x68a>
		break;
 8001a84:	bf00      	nop
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8001a90:	b004      	add	sp, #16
 8001a92:	4770      	bx	lr
 8001a94:	20000239 	.word	0x20000239

08001a98 <straight_table>:


float straight_table(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001aa2:	edc7 0a04 	vstr	s1, [r7, #16]
 8001aa6:	ed87 1a03 	vstr	s2, [r7, #12]
 8001aaa:	edc7 1a02 	vstr	s3, [r7, #8]
 8001aae:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8001ab2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ab6:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8001aba:	edd7 7a04 	vldr	s15, [r7, #16]
 8001abe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8001ac6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001aca:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8001ace:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ad6:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8001ada:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ade:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae6:	d505      	bpl.n	8001af4 <straight_table+0x5c>
 8001ae8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aec:	eef1 7a67 	vneg.f32	s15, s15
 8001af0:	edc7 7a01 	vstr	s15, [r7, #4]

	g_TrapezoidStraight.displacement = input_displacement;
 8001af4:	4a58      	ldr	r2, [pc, #352]	; (8001c58 <straight_table+0x1c0>)
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	6013      	str	r3, [r2, #0]
	g_TrapezoidStraight.start_velocity = input_start_velocity;
 8001afa:	4a57      	ldr	r2, [pc, #348]	; (8001c58 <straight_table+0x1c0>)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	6053      	str	r3, [r2, #4]
	g_TrapezoidStraight.end_velocity = input_end_velocity;
 8001b00:	4a55      	ldr	r2, [pc, #340]	; (8001c58 <straight_table+0x1c0>)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6093      	str	r3, [r2, #8]
	g_TrapezoidStraight.count_velocity = input_count_velocity;
 8001b06:	4a54      	ldr	r2, [pc, #336]	; (8001c58 <straight_table+0x1c0>)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	60d3      	str	r3, [r2, #12]
	g_TrapezoidStraight.acceleration = input_acceleration;
 8001b0c:	4a52      	ldr	r2, [pc, #328]	; (8001c58 <straight_table+0x1c0>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){g_TargetStraight.acceleration = input_acceleration;
 8001b12:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1e:	db03      	blt.n	8001b28 <straight_table+0x90>
 8001b20:	4a4e      	ldr	r2, [pc, #312]	; (8001c5c <straight_table+0x1c4>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6053      	str	r3, [r2, #4]
 8001b26:	e006      	b.n	8001b36 <straight_table+0x9e>
	}else{g_TargetStraight.acceleration = -input_acceleration;}
 8001b28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b2c:	eef1 7a67 	vneg.f32	s15, s15
 8001b30:	4b4a      	ldr	r3, [pc, #296]	; (8001c5c <straight_table+0x1c4>)
 8001b32:	edc3 7a01 	vstr	s15, [r3, #4]
	g_TargetStraight.velocity = input_start_velocity;
 8001b36:	4a49      	ldr	r2, [pc, #292]	; (8001c5c <straight_table+0x1c4>)
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	6013      	str	r3, [r2, #0]
	g_TargetStraight.displacement = 0;
 8001b3c:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <straight_table+0x1c4>)
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
	g_TargetTurning.velocity = 0;
 8001b44:	4b46      	ldr	r3, [pc, #280]	; (8001c60 <straight_table+0x1c8>)
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
	g_TargetTurning.acceleration = 0;
 8001b4c:	4b44      	ldr	r3, [pc, #272]	; (8001c60 <straight_table+0x1c8>)
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	605a      	str	r2, [r3, #4]
	g_TargetTurning.displacement = 0;
 8001b54:	4b42      	ldr	r3, [pc, #264]	; (8001c60 <straight_table+0x1c8>)
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]

	g_acc_flag=1;
 8001b5c:	4b41      	ldr	r3, [pc, #260]	; (8001c64 <straight_table+0x1cc>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;g_TargetStraight.acceleration = input_acceleration;}
 8001b62:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6e:	dd0e      	ble.n	8001b8e <straight_table+0xf6>
 8001b70:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b74:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b80:	dd05      	ble.n	8001b8e <straight_table+0xf6>
 8001b82:	4b38      	ldr	r3, [pc, #224]	; (8001c64 <straight_table+0x1cc>)
 8001b84:	2205      	movs	r2, #5
 8001b86:	701a      	strb	r2, [r3, #0]
 8001b88:	4a34      	ldr	r2, [pc, #208]	; (8001c5c <straight_table+0x1c4>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;g_TargetStraight.acceleration = -input_acceleration;}
 8001b8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9a:	dd14      	ble.n	8001bc6 <straight_table+0x12e>
 8001b9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ba0:	eef1 7a67 	vneg.f32	s15, s15
 8001ba4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ba8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb0:	d509      	bpl.n	8001bc6 <straight_table+0x12e>
 8001bb2:	4b2c      	ldr	r3, [pc, #176]	; (8001c64 <straight_table+0x1cc>)
 8001bb4:	2206      	movs	r2, #6
 8001bb6:	701a      	strb	r2, [r3, #0]
 8001bb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bbc:	eef1 7a67 	vneg.f32	s15, s15
 8001bc0:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <straight_table+0x1c4>)
 8001bc2:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;g_TargetStraight.acceleration = -input_acceleration;}
 8001bc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd2:	d514      	bpl.n	8001bfe <straight_table+0x166>
 8001bd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bd8:	eef1 7a67 	vneg.f32	s15, s15
 8001bdc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001be0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be8:	dd09      	ble.n	8001bfe <straight_table+0x166>
 8001bea:	4b1e      	ldr	r3, [pc, #120]	; (8001c64 <straight_table+0x1cc>)
 8001bec:	2205      	movs	r2, #5
 8001bee:	701a      	strb	r2, [r3, #0]
 8001bf0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bf4:	eef1 7a67 	vneg.f32	s15, s15
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <straight_table+0x1c4>)
 8001bfa:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;g_TargetStraight.acceleration = input_acceleration;}
 8001bfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0a:	d50e      	bpl.n	8001c2a <straight_table+0x192>
 8001c0c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c10:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1c:	d505      	bpl.n	8001c2a <straight_table+0x192>
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <straight_table+0x1cc>)
 8001c20:	2206      	movs	r2, #6
 8001c22:	701a      	strb	r2, [r3, #0]
 8001c24:	4a0d      	ldr	r2, [pc, #52]	; (8001c5c <straight_table+0x1c4>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <straight_table+0x1d0>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	701a      	strb	r2, [r3, #0]



	//pl_motor_start();
	while (g_acc_flag!=4){
 8001c30:	bf00      	nop
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <straight_table+0x1cc>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d1fa      	bne.n	8001c32 <straight_table+0x19a>
//		printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d\n", g_motorCount_l,g_motorCount_r,g_motorCount_l,g_motorCount_l);
	}
	modeacc = 0;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <straight_table+0x1d0>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]

	//pl_motor_stop();

	return g_TargetStraight.velocity;
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <straight_table+0x1c4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	ee07 3a90 	vmov	s15, r3
}
 8001c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4e:	3724      	adds	r7, #36	; 0x24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	20000210 	.word	0x20000210
 8001c5c:	200001f8 	.word	0x200001f8
 8001c60:	20000204 	.word	0x20000204
 8001c64:	20000239 	.word	0x20000239
 8001c68:	20000238 	.word	0x20000238

08001c6c <turning_table>:


float turning_table(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	; 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	ed87 0a05 	vstr	s0, [r7, #20]
 8001c76:	edc7 0a04 	vstr	s1, [r7, #16]
 8001c7a:	ed87 1a03 	vstr	s2, [r7, #12]
 8001c7e:	edc7 1a02 	vstr	s3, [r7, #8]
 8001c82:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8001c86:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c8a:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8001c8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c92:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c96:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8001c9a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001c9e:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8001ca2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001caa:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8001cae:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cba:	d505      	bpl.n	8001cc8 <turning_table+0x5c>
 8001cbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cc0:	eef1 7a67 	vneg.f32	s15, s15
 8001cc4:	edc7 7a01 	vstr	s15, [r7, #4]

	g_TrapezoidTurning.displacement = input_displacement;
 8001cc8:	4a58      	ldr	r2, [pc, #352]	; (8001e2c <turning_table+0x1c0>)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	6013      	str	r3, [r2, #0]
	g_TrapezoidTurning.start_velocity = input_start_velocity;
 8001cce:	4a57      	ldr	r2, [pc, #348]	; (8001e2c <turning_table+0x1c0>)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	6053      	str	r3, [r2, #4]
	g_TrapezoidTurning.end_velocity = input_end_velocity;
 8001cd4:	4a55      	ldr	r2, [pc, #340]	; (8001e2c <turning_table+0x1c0>)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6093      	str	r3, [r2, #8]
	g_TrapezoidTurning.count_velocity = input_count_velocity;
 8001cda:	4a54      	ldr	r2, [pc, #336]	; (8001e2c <turning_table+0x1c0>)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	60d3      	str	r3, [r2, #12]
	g_TrapezoidTurning.acceleration = input_acceleration;
 8001ce0:	4a52      	ldr	r2, [pc, #328]	; (8001e2c <turning_table+0x1c0>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){g_TargetTurning.acceleration = input_acceleration;
 8001ce6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf2:	db03      	blt.n	8001cfc <turning_table+0x90>
 8001cf4:	4a4e      	ldr	r2, [pc, #312]	; (8001e30 <turning_table+0x1c4>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6053      	str	r3, [r2, #4]
 8001cfa:	e006      	b.n	8001d0a <turning_table+0x9e>
	}else{g_TargetTurning.acceleration = -input_acceleration;}
 8001cfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d00:	eef1 7a67 	vneg.f32	s15, s15
 8001d04:	4b4a      	ldr	r3, [pc, #296]	; (8001e30 <turning_table+0x1c4>)
 8001d06:	edc3 7a01 	vstr	s15, [r3, #4]
	g_TargetTurning.velocity = input_start_velocity;
 8001d0a:	4a49      	ldr	r2, [pc, #292]	; (8001e30 <turning_table+0x1c4>)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	6013      	str	r3, [r2, #0]
	g_TargetTurning.displacement = 0;
 8001d10:	4b47      	ldr	r3, [pc, #284]	; (8001e30 <turning_table+0x1c4>)
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
	g_TargetStraight.velocity = 0;
 8001d18:	4b46      	ldr	r3, [pc, #280]	; (8001e34 <turning_table+0x1c8>)
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
	g_TargetStraight.acceleration = 0;
 8001d20:	4b44      	ldr	r3, [pc, #272]	; (8001e34 <turning_table+0x1c8>)
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	605a      	str	r2, [r3, #4]
	g_TargetStraight.displacement = 0;
 8001d28:	4b42      	ldr	r3, [pc, #264]	; (8001e34 <turning_table+0x1c8>)
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]

	g_acc_flag=1;
 8001d30:	4b41      	ldr	r3, [pc, #260]	; (8001e38 <turning_table+0x1cc>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;g_TargetTurning.acceleration = input_acceleration;}
 8001d36:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d42:	dd0e      	ble.n	8001d62 <turning_table+0xf6>
 8001d44:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d48:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d54:	dd05      	ble.n	8001d62 <turning_table+0xf6>
 8001d56:	4b38      	ldr	r3, [pc, #224]	; (8001e38 <turning_table+0x1cc>)
 8001d58:	2205      	movs	r2, #5
 8001d5a:	701a      	strb	r2, [r3, #0]
 8001d5c:	4a34      	ldr	r2, [pc, #208]	; (8001e30 <turning_table+0x1c4>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;g_TargetTurning.acceleration = -input_acceleration;}
 8001d62:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6e:	dd14      	ble.n	8001d9a <turning_table+0x12e>
 8001d70:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d74:	eef1 7a67 	vneg.f32	s15, s15
 8001d78:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d84:	d509      	bpl.n	8001d9a <turning_table+0x12e>
 8001d86:	4b2c      	ldr	r3, [pc, #176]	; (8001e38 <turning_table+0x1cc>)
 8001d88:	2206      	movs	r2, #6
 8001d8a:	701a      	strb	r2, [r3, #0]
 8001d8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d90:	eef1 7a67 	vneg.f32	s15, s15
 8001d94:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <turning_table+0x1c4>)
 8001d96:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;g_TargetTurning.acceleration = -input_acceleration;}
 8001d9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da6:	d514      	bpl.n	8001dd2 <turning_table+0x166>
 8001da8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dac:	eef1 7a67 	vneg.f32	s15, s15
 8001db0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001db4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbc:	dd09      	ble.n	8001dd2 <turning_table+0x166>
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <turning_table+0x1cc>)
 8001dc0:	2205      	movs	r2, #5
 8001dc2:	701a      	strb	r2, [r3, #0]
 8001dc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dc8:	eef1 7a67 	vneg.f32	s15, s15
 8001dcc:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <turning_table+0x1c4>)
 8001dce:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;g_TargetTurning.acceleration = input_acceleration;}
 8001dd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dde:	d50e      	bpl.n	8001dfe <turning_table+0x192>
 8001de0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001de4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001de8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df0:	d505      	bpl.n	8001dfe <turning_table+0x192>
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <turning_table+0x1cc>)
 8001df4:	2206      	movs	r2, #6
 8001df6:	701a      	strb	r2, [r3, #0]
 8001df8:	4a0d      	ldr	r2, [pc, #52]	; (8001e30 <turning_table+0x1c4>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <turning_table+0x1d0>)
 8001e00:	2202      	movs	r2, #2
 8001e02:	701a      	strb	r2, [r3, #0]


	//pl_motor_start();
	while (g_acc_flag!=4){
 8001e04:	bf00      	nop
 8001e06:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <turning_table+0x1cc>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d1fa      	bne.n	8001e06 <turning_table+0x19a>

	}
	modeacc = 0;
 8001e10:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <turning_table+0x1d0>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]

	//pl_motor_stop();

	return g_TargetTurning.velocity;
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <turning_table+0x1c4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	ee07 3a90 	vmov	s15, r3
}
 8001e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e22:	3724      	adds	r7, #36	; 0x24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	20000224 	.word	0x20000224
 8001e30:	20000204 	.word	0x20000204
 8001e34:	200001f8 	.word	0x200001f8
 8001e38:	20000239 	.word	0x20000239
 8001e3c:	20000238 	.word	0x20000238

08001e40 <slalom_table>:


float slalom_table(float input_center_velocity,float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	ed87 0a05 	vstr	s0, [r7, #20]
 8001e4a:	edc7 0a04 	vstr	s1, [r7, #16]
 8001e4e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001e52:	edc7 1a02 	vstr	s3, [r7, #8]
 8001e56:	ed87 2a01 	vstr	s4, [r7, #4]
 8001e5a:	edc7 2a00 	vstr	s5, [r7]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8001e5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e62:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8001e66:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e6a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8001e72:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001e76:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8001e7a:	ed97 7a00 	vldr	s14, [r7]
 8001e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e82:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8001e86:	edd7 7a00 	vldr	s15, [r7]
 8001e8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e92:	d505      	bpl.n	8001ea0 <slalom_table+0x60>
 8001e94:	edd7 7a00 	vldr	s15, [r7]
 8001e98:	eef1 7a67 	vneg.f32	s15, s15
 8001e9c:	edc7 7a00 	vstr	s15, [r7]

	g_TrapezoidTurning.displacement = input_displacement;
 8001ea0:	4a58      	ldr	r2, [pc, #352]	; (8002004 <slalom_table+0x1c4>)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	6013      	str	r3, [r2, #0]
	g_TrapezoidTurning.start_velocity = input_start_velocity;
 8001ea6:	4a57      	ldr	r2, [pc, #348]	; (8002004 <slalom_table+0x1c4>)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6053      	str	r3, [r2, #4]
	g_TrapezoidTurning.end_velocity = input_end_velocity;
 8001eac:	4a55      	ldr	r2, [pc, #340]	; (8002004 <slalom_table+0x1c4>)
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	6093      	str	r3, [r2, #8]
	g_TrapezoidTurning.count_velocity = input_count_velocity;
 8001eb2:	4a54      	ldr	r2, [pc, #336]	; (8002004 <slalom_table+0x1c4>)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	60d3      	str	r3, [r2, #12]
	g_TrapezoidTurning.acceleration = input_acceleration;
 8001eb8:	4a52      	ldr	r2, [pc, #328]	; (8002004 <slalom_table+0x1c4>)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){g_TargetTurning.acceleration = input_acceleration;
 8001ebe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ec2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eca:	db03      	blt.n	8001ed4 <slalom_table+0x94>
 8001ecc:	4a4e      	ldr	r2, [pc, #312]	; (8002008 <slalom_table+0x1c8>)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	6053      	str	r3, [r2, #4]
 8001ed2:	e006      	b.n	8001ee2 <slalom_table+0xa2>
	}else{g_TargetTurning.acceleration = -input_acceleration;}
 8001ed4:	edd7 7a00 	vldr	s15, [r7]
 8001ed8:	eef1 7a67 	vneg.f32	s15, s15
 8001edc:	4b4a      	ldr	r3, [pc, #296]	; (8002008 <slalom_table+0x1c8>)
 8001ede:	edc3 7a01 	vstr	s15, [r3, #4]
	g_TargetTurning.velocity = input_start_velocity;
 8001ee2:	4a49      	ldr	r2, [pc, #292]	; (8002008 <slalom_table+0x1c8>)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6013      	str	r3, [r2, #0]
	g_TargetTurning.displacement = 0;
 8001ee8:	4b47      	ldr	r3, [pc, #284]	; (8002008 <slalom_table+0x1c8>)
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
	g_TargetStraight.velocity = input_center_velocity;
 8001ef0:	4a46      	ldr	r2, [pc, #280]	; (800200c <slalom_table+0x1cc>)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	6013      	str	r3, [r2, #0]
	g_TargetStraight.acceleration = 0;
 8001ef6:	4b45      	ldr	r3, [pc, #276]	; (800200c <slalom_table+0x1cc>)
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	605a      	str	r2, [r3, #4]
	g_TargetStraight.displacement = 0;
 8001efe:	4b43      	ldr	r3, [pc, #268]	; (800200c <slalom_table+0x1cc>)
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]

	g_acc_flag=1;
 8001f06:	4b42      	ldr	r3, [pc, #264]	; (8002010 <slalom_table+0x1d0>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;g_TargetTurning.acceleration = input_acceleration;}
 8001f0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f18:	dd0e      	ble.n	8001f38 <slalom_table+0xf8>
 8001f1a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f2a:	dd05      	ble.n	8001f38 <slalom_table+0xf8>
 8001f2c:	4b38      	ldr	r3, [pc, #224]	; (8002010 <slalom_table+0x1d0>)
 8001f2e:	2205      	movs	r2, #5
 8001f30:	701a      	strb	r2, [r3, #0]
 8001f32:	4a35      	ldr	r2, [pc, #212]	; (8002008 <slalom_table+0x1c8>)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;g_TargetTurning.acceleration = -input_acceleration;}
 8001f38:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f44:	dd14      	ble.n	8001f70 <slalom_table+0x130>
 8001f46:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f4a:	eef1 7a67 	vneg.f32	s15, s15
 8001f4e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5a:	d509      	bpl.n	8001f70 <slalom_table+0x130>
 8001f5c:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <slalom_table+0x1d0>)
 8001f5e:	2206      	movs	r2, #6
 8001f60:	701a      	strb	r2, [r3, #0]
 8001f62:	edd7 7a00 	vldr	s15, [r7]
 8001f66:	eef1 7a67 	vneg.f32	s15, s15
 8001f6a:	4b27      	ldr	r3, [pc, #156]	; (8002008 <slalom_table+0x1c8>)
 8001f6c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;g_TargetTurning.acceleration = -input_acceleration;}
 8001f70:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7c:	d514      	bpl.n	8001fa8 <slalom_table+0x168>
 8001f7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f82:	eef1 7a67 	vneg.f32	s15, s15
 8001f86:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f92:	dd09      	ble.n	8001fa8 <slalom_table+0x168>
 8001f94:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <slalom_table+0x1d0>)
 8001f96:	2205      	movs	r2, #5
 8001f98:	701a      	strb	r2, [r3, #0]
 8001f9a:	edd7 7a00 	vldr	s15, [r7]
 8001f9e:	eef1 7a67 	vneg.f32	s15, s15
 8001fa2:	4b19      	ldr	r3, [pc, #100]	; (8002008 <slalom_table+0x1c8>)
 8001fa4:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;g_TargetTurning.acceleration = input_acceleration;}
 8001fa8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb4:	d50e      	bpl.n	8001fd4 <slalom_table+0x194>
 8001fb6:	ed97 7a07 	vldr	s14, [r7, #28]
 8001fba:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc6:	d505      	bpl.n	8001fd4 <slalom_table+0x194>
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <slalom_table+0x1d0>)
 8001fca:	2206      	movs	r2, #6
 8001fcc:	701a      	strb	r2, [r3, #0]
 8001fce:	4a0e      	ldr	r2, [pc, #56]	; (8002008 <slalom_table+0x1c8>)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <slalom_table+0x1d4>)
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	701a      	strb	r2, [r3, #0]


	//pl_motor_start();
	while (g_acc_flag!=4){
 8001fda:	bf00      	nop
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <slalom_table+0x1d0>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d1fa      	bne.n	8001fdc <slalom_table+0x19c>

	}
	modeacc = 0;
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <slalom_table+0x1d4>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]

	//pl_motor_stop();

	return g_TargetTurning.velocity;
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <slalom_table+0x1c8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	ee07 3a90 	vmov	s15, r3
}
 8001ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff8:	3724      	adds	r7, #36	; 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000224 	.word	0x20000224
 8002008:	20000204 	.word	0x20000204
 800200c:	200001f8 	.word	0x200001f8
 8002010:	20000239 	.word	0x20000239
 8002014:	20000238 	.word	0x20000238

08002018 <interrupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interrupt_calSensor(void){
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
	int j;

//	if (sensor_mode == 1) {
	for (j = 19; j >= 1; j--) {
 800201e:	2313      	movs	r3, #19
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	e037      	b.n	8002094 <interrupt_calSensor+0x7c>
		g_sensor[0][j] = g_sensor[0][j - 1];
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	4a57      	ldr	r2, [pc, #348]	; (8002188 <interrupt_calSensor+0x170>)
 800202a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800202e:	4956      	ldr	r1, [pc, #344]	; (8002188 <interrupt_calSensor+0x170>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3b01      	subs	r3, #1
 800203a:	4a53      	ldr	r2, [pc, #332]	; (8002188 <interrupt_calSensor+0x170>)
 800203c:	3314      	adds	r3, #20
 800203e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002042:	4951      	ldr	r1, [pc, #324]	; (8002188 <interrupt_calSensor+0x170>)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3314      	adds	r3, #20
 8002048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3b01      	subs	r3, #1
 8002050:	4a4d      	ldr	r2, [pc, #308]	; (8002188 <interrupt_calSensor+0x170>)
 8002052:	3328      	adds	r3, #40	; 0x28
 8002054:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002058:	494b      	ldr	r1, [pc, #300]	; (8002188 <interrupt_calSensor+0x170>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3328      	adds	r3, #40	; 0x28
 800205e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3b01      	subs	r3, #1
 8002066:	4a48      	ldr	r2, [pc, #288]	; (8002188 <interrupt_calSensor+0x170>)
 8002068:	333c      	adds	r3, #60	; 0x3c
 800206a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800206e:	4946      	ldr	r1, [pc, #280]	; (8002188 <interrupt_calSensor+0x170>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	333c      	adds	r3, #60	; 0x3c
 8002074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[4][j] = g_sensor[4][j - 1];
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	4a42      	ldr	r2, [pc, #264]	; (8002188 <interrupt_calSensor+0x170>)
 800207e:	3350      	adds	r3, #80	; 0x50
 8002080:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002084:	4940      	ldr	r1, [pc, #256]	; (8002188 <interrupt_calSensor+0x170>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3350      	adds	r3, #80	; 0x50
 800208a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3b01      	subs	r3, #1
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	dcc4      	bgt.n	8002024 <interrupt_calSensor+0xc>
	}
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 800209a:	4b3c      	ldr	r3, [pc, #240]	; (800218c <interrupt_calSensor+0x174>)
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	4b3b      	ldr	r3, [pc, #236]	; (8002190 <interrupt_calSensor+0x178>)
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	4a38      	ldr	r2, [pc, #224]	; (8002188 <interrupt_calSensor+0x170>)
 80020a8:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 80020aa:	4b38      	ldr	r3, [pc, #224]	; (800218c <interrupt_calSensor+0x174>)
 80020ac:	885b      	ldrh	r3, [r3, #2]
 80020ae:	461a      	mov	r2, r3
 80020b0:	4b37      	ldr	r3, [pc, #220]	; (8002190 <interrupt_calSensor+0x178>)
 80020b2:	885b      	ldrh	r3, [r3, #2]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	4a34      	ldr	r2, [pc, #208]	; (8002188 <interrupt_calSensor+0x170>)
 80020b8:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 80020ba:	4b34      	ldr	r3, [pc, #208]	; (800218c <interrupt_calSensor+0x174>)
 80020bc:	889b      	ldrh	r3, [r3, #4]
 80020be:	461a      	mov	r2, r3
 80020c0:	4b33      	ldr	r3, [pc, #204]	; (8002190 <interrupt_calSensor+0x178>)
 80020c2:	889b      	ldrh	r3, [r3, #4]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	4a30      	ldr	r2, [pc, #192]	; (8002188 <interrupt_calSensor+0x170>)
 80020c8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 80020cc:	4b2f      	ldr	r3, [pc, #188]	; (800218c <interrupt_calSensor+0x174>)
 80020ce:	88db      	ldrh	r3, [r3, #6]
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b2f      	ldr	r3, [pc, #188]	; (8002190 <interrupt_calSensor+0x178>)
 80020d4:	88db      	ldrh	r3, [r3, #6]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	4a2b      	ldr	r2, [pc, #172]	; (8002188 <interrupt_calSensor+0x170>)
 80020da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	g_sensor[4][0] = g_sensor_on[4] - g_sensor_off[4];
 80020de:	4b2b      	ldr	r3, [pc, #172]	; (800218c <interrupt_calSensor+0x174>)
 80020e0:	891b      	ldrh	r3, [r3, #8]
 80020e2:	461a      	mov	r2, r3
 80020e4:	4b2a      	ldr	r3, [pc, #168]	; (8002190 <interrupt_calSensor+0x178>)
 80020e6:	891b      	ldrh	r3, [r3, #8]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	4a27      	ldr	r2, [pc, #156]	; (8002188 <interrupt_calSensor+0x170>)
 80020ec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
	for (j = 0; j <= 4; j++) {
 80020f0:	2300      	movs	r3, #0
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	e03d      	b.n	8002172 <interrupt_calSensor+0x15a>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 80020f6:	4924      	ldr	r1, [pc, #144]	; (8002188 <interrupt_calSensor+0x170>)
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	440b      	add	r3, r1
 8002104:	6819      	ldr	r1, [r3, #0]
 8002106:	4820      	ldr	r0, [pc, #128]	; (8002188 <interrupt_calSensor+0x170>)
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	4403      	add	r3, r0
 8002114:	332c      	adds	r3, #44	; 0x2c
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	1aca      	subs	r2, r1, r3
 800211a:	491e      	ldr	r1, [pc, #120]	; (8002194 <interrupt_calSensor+0x17c>)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 8002122:	4919      	ldr	r1, [pc, #100]	; (8002188 <interrupt_calSensor+0x170>)
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	440b      	add	r3, r1
 8002130:	6819      	ldr	r1, [r3, #0]
 8002132:	4815      	ldr	r0, [pc, #84]	; (8002188 <interrupt_calSensor+0x170>)
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	4403      	add	r3, r0
 8002140:	3304      	adds	r3, #4
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4419      	add	r1, r3
 8002146:	4810      	ldr	r0, [pc, #64]	; (8002188 <interrupt_calSensor+0x170>)
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	4403      	add	r3, r0
 8002154:	3308      	adds	r3, #8
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	440b      	add	r3, r1
 800215a:	4a0f      	ldr	r2, [pc, #60]	; (8002198 <interrupt_calSensor+0x180>)
 800215c:	fb82 1203 	smull	r1, r2, r2, r3
 8002160:	17db      	asrs	r3, r3, #31
 8002162:	1ad2      	subs	r2, r2, r3
 8002164:	490d      	ldr	r1, [pc, #52]	; (800219c <interrupt_calSensor+0x184>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 4; j++) {
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3301      	adds	r3, #1
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b04      	cmp	r3, #4
 8002176:	ddbe      	ble.n	80020f6 <interrupt_calSensor+0xde>
	}


//	}

}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	2000023c 	.word	0x2000023c
 800218c:	200003b0 	.word	0x200003b0
 8002190:	200003b8 	.word	0x200003b8
 8002194:	2000037c 	.word	0x2000037c
 8002198:	55555556 	.word	0x55555556
 800219c:	2000038c 	.word	0x2000038c

080021a0 <init_WallControl>:

uint8_t g_WallControl_mode;//0で壁制御なし、1で通常の壁制御、2で斜めの制御
uint8_t g_WallControlStatus;
uint8_t StabilityCount_L,StabilityCount_R;

void init_WallControl(void){
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
	g_WallControl_mode=0;
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <init_WallControl+0x28>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
	g_WallControlStatus=0;
 80021aa:	4b08      	ldr	r3, [pc, #32]	; (80021cc <init_WallControl+0x2c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
	StabilityCount_L=0;
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <init_WallControl+0x30>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
	StabilityCount_R=0;
 80021b6:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <init_WallControl+0x34>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	2000039c 	.word	0x2000039c
 80021cc:	2000039d 	.word	0x2000039d
 80021d0:	2000039e 	.word	0x2000039e
 80021d4:	2000039f 	.word	0x2000039f

080021d8 <calWallConrol>:

float calWallConrol(void){
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
//	SensorDistanceR = -0.0000001684 * g_sensor[2][0] * g_sensor[2][0] * g_sensor[2][0]
//				+ 0.0004061427 * g_sensor[2][0] * g_sensor[2][0] - 0.3784837856 * g_sensor[2][0]
//				+ 197.1162;


    if(g_WallControl_mode == 0){
 80021de:	4b6a      	ldr	r3, [pc, #424]	; (8002388 <calWallConrol+0x1b0>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10c      	bne.n	8002200 <calWallConrol+0x28>
    	g_WallControlStatus=0;
 80021e6:	4b69      	ldr	r3, [pc, #420]	; (800238c <calWallConrol+0x1b4>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
    	StabilityCount_L=0;
 80021ec:	4b68      	ldr	r3, [pc, #416]	; (8002390 <calWallConrol+0x1b8>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
    	StabilityCount_R=0;
 80021f2:	4b68      	ldr	r3, [pc, #416]	; (8002394 <calWallConrol+0x1bc>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
    	PID_wall=0;
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	e0b9      	b.n	8002374 <calWallConrol+0x19c>

    }else if (g_WallControl_mode == 1) {
 8002200:	4b61      	ldr	r3, [pc, #388]	; (8002388 <calWallConrol+0x1b0>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b01      	cmp	r3, #1
 8002206:	f040 80b4 	bne.w	8002372 <calWallConrol+0x19a>

		// 左壁の有無の判定
		if ((g_WallControlStatus >> 0)&1 == 1){
 800220a:	4b60      	ldr	r3, [pc, #384]	; (800238c <calWallConrol+0x1b4>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00e      	beq.n	8002234 <calWallConrol+0x5c>
			//前回左壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_L || g_sensor_diff[SENSOR_LEFT] > CONTROLWALLCUT_THRESHOLD_L){
 8002216:	4b60      	ldr	r3, [pc, #384]	; (8002398 <calWallConrol+0x1c0>)
 8002218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800221a:	2b4f      	cmp	r3, #79	; 0x4f
 800221c:	dd03      	ble.n	8002226 <calWallConrol+0x4e>
 800221e:	4b5f      	ldr	r3, [pc, #380]	; (800239c <calWallConrol+0x1c4>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b32      	cmp	r3, #50	; 0x32
 8002224:	dd22      	ble.n	800226c <calWallConrol+0x94>
				g_WallControlStatus=g_WallControlStatus - 1;
 8002226:	4b59      	ldr	r3, [pc, #356]	; (800238c <calWallConrol+0x1b4>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	3b01      	subs	r3, #1
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4b57      	ldr	r3, [pc, #348]	; (800238c <calWallConrol+0x1b4>)
 8002230:	701a      	strb	r2, [r3, #0]
 8002232:	e01b      	b.n	800226c <calWallConrol+0x94>
			}
		}else{
			//前回左壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_L && g_sensor_diff[SENSOR_LEFT] < CONTROLWALLCUT_THRESHOLD_L){
 8002234:	4b58      	ldr	r3, [pc, #352]	; (8002398 <calWallConrol+0x1c0>)
 8002236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002238:	2b50      	cmp	r3, #80	; 0x50
 800223a:	dd0a      	ble.n	8002252 <calWallConrol+0x7a>
 800223c:	4b57      	ldr	r3, [pc, #348]	; (800239c <calWallConrol+0x1c4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b31      	cmp	r3, #49	; 0x31
 8002242:	dc06      	bgt.n	8002252 <calWallConrol+0x7a>
				StabilityCount_L++;
 8002244:	4b52      	ldr	r3, [pc, #328]	; (8002390 <calWallConrol+0x1b8>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	3301      	adds	r3, #1
 800224a:	b2da      	uxtb	r2, r3
 800224c:	4b50      	ldr	r3, [pc, #320]	; (8002390 <calWallConrol+0x1b8>)
 800224e:	701a      	strb	r2, [r3, #0]
 8002250:	e002      	b.n	8002258 <calWallConrol+0x80>
			}else{
				StabilityCount_L=0;
 8002252:	4b4f      	ldr	r3, [pc, #316]	; (8002390 <calWallConrol+0x1b8>)
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]
			}
			if(StabilityCount_L>=10){
 8002258:	4b4d      	ldr	r3, [pc, #308]	; (8002390 <calWallConrol+0x1b8>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b09      	cmp	r3, #9
 800225e:	d905      	bls.n	800226c <calWallConrol+0x94>
				g_WallControlStatus=g_WallControlStatus + 1;
 8002260:	4b4a      	ldr	r3, [pc, #296]	; (800238c <calWallConrol+0x1b4>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	3301      	adds	r3, #1
 8002266:	b2da      	uxtb	r2, r3
 8002268:	4b48      	ldr	r3, [pc, #288]	; (800238c <calWallConrol+0x1b4>)
 800226a:	701a      	strb	r2, [r3, #0]
			}
		}
		// 右壁の有無の判定
		if ((g_WallControlStatus >> 1)&1 == 1){
 800226c:	4b47      	ldr	r3, [pc, #284]	; (800238c <calWallConrol+0x1b4>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	085b      	lsrs	r3, r3, #1
 8002272:	b2db      	uxtb	r3, r3
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00f      	beq.n	800229c <calWallConrol+0xc4>
			//前回右壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_R || g_sensor_diff[SENSOR_RIGHT] > CONTROLWALLCUT_THRESHOLD_R){
 800227c:	4b46      	ldr	r3, [pc, #280]	; (8002398 <calWallConrol+0x1c0>)
 800227e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002282:	2b4f      	cmp	r3, #79	; 0x4f
 8002284:	dd03      	ble.n	800228e <calWallConrol+0xb6>
 8002286:	4b45      	ldr	r3, [pc, #276]	; (800239c <calWallConrol+0x1c4>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b32      	cmp	r3, #50	; 0x32
 800228c:	dd23      	ble.n	80022d6 <calWallConrol+0xfe>
				g_WallControlStatus=g_WallControlStatus - 2;
 800228e:	4b3f      	ldr	r3, [pc, #252]	; (800238c <calWallConrol+0x1b4>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	3b02      	subs	r3, #2
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4b3d      	ldr	r3, [pc, #244]	; (800238c <calWallConrol+0x1b4>)
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	e01c      	b.n	80022d6 <calWallConrol+0xfe>
			}
		}else{
			//前回右壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_R && g_sensor_diff[SENSOR_RIGHT] < CONTROLWALLCUT_THRESHOLD_R){
 800229c:	4b3e      	ldr	r3, [pc, #248]	; (8002398 <calWallConrol+0x1c0>)
 800229e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80022a2:	2b50      	cmp	r3, #80	; 0x50
 80022a4:	dd0a      	ble.n	80022bc <calWallConrol+0xe4>
 80022a6:	4b3d      	ldr	r3, [pc, #244]	; (800239c <calWallConrol+0x1c4>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b31      	cmp	r3, #49	; 0x31
 80022ac:	dc06      	bgt.n	80022bc <calWallConrol+0xe4>
				StabilityCount_R++;
 80022ae:	4b39      	ldr	r3, [pc, #228]	; (8002394 <calWallConrol+0x1bc>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	3301      	adds	r3, #1
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	4b37      	ldr	r3, [pc, #220]	; (8002394 <calWallConrol+0x1bc>)
 80022b8:	701a      	strb	r2, [r3, #0]
 80022ba:	e002      	b.n	80022c2 <calWallConrol+0xea>
			}else{
				StabilityCount_R=0;
 80022bc:	4b35      	ldr	r3, [pc, #212]	; (8002394 <calWallConrol+0x1bc>)
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
			}
			if(StabilityCount_R>=10){
 80022c2:	4b34      	ldr	r3, [pc, #208]	; (8002394 <calWallConrol+0x1bc>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b09      	cmp	r3, #9
 80022c8:	d905      	bls.n	80022d6 <calWallConrol+0xfe>
				g_WallControlStatus=g_WallControlStatus + 2;
 80022ca:	4b30      	ldr	r3, [pc, #192]	; (800238c <calWallConrol+0x1b4>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	3302      	adds	r3, #2
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	4b2e      	ldr	r3, [pc, #184]	; (800238c <calWallConrol+0x1b4>)
 80022d4:	701a      	strb	r2, [r3, #0]
			}
		}
		switch (g_WallControlStatus){
 80022d6:	4b2d      	ldr	r3, [pc, #180]	; (800238c <calWallConrol+0x1b4>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d84a      	bhi.n	8002374 <calWallConrol+0x19c>
 80022de:	a201      	add	r2, pc, #4	; (adr r2, 80022e4 <calWallConrol+0x10c>)
 80022e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e4:	080022f5 	.word	0x080022f5
 80022e8:	080022fd 	.word	0x080022fd
 80022ec:	0800231d 	.word	0x0800231d
 80022f0:	08002343 	.word	0x08002343
		case 0://両壁なし
			PID_wall= 0;
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	607b      	str	r3, [r7, #4]
		break;
 80022fa:	e03b      	b.n	8002374 <calWallConrol+0x19c>
		case 1://左壁のみ
			PID_wall= SENSOR_GAIN*(2*(float)(g_sensor[SENSOR_LEFT][0] - CENTER_L));
 80022fc:	4b26      	ldr	r3, [pc, #152]	; (8002398 <calWallConrol+0x1c0>)
 80022fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002300:	3b78      	subs	r3, #120	; 0x78
 8002302:	ee07 3a90 	vmov	s15, r3
 8002306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800230a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800230e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002312:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002316:	edc7 7a01 	vstr	s15, [r7, #4]
		break;
 800231a:	e02b      	b.n	8002374 <calWallConrol+0x19c>
		case 2://右壁のみ
			PID_wall= SENSOR_GAIN * (-2 * (float)(g_sensor[SENSOR_RIGHT][0] - CENTER_R));
 800231c:	4b1e      	ldr	r3, [pc, #120]	; (8002398 <calWallConrol+0x1c0>)
 800231e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002322:	3b78      	subs	r3, #120	; 0x78
 8002324:	ee07 3a90 	vmov	s15, r3
 8002328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800232c:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002330:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002334:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002338:	ee67 7a87 	vmul.f32	s15, s15, s14
 800233c:	edc7 7a01 	vstr	s15, [r7, #4]
		break;
 8002340:	e018      	b.n	8002374 <calWallConrol+0x19c>
		case 3://両壁あり
			PID_wall= SENSOR_GAIN * ((float)(g_sensor[SENSOR_LEFT][0] - CENTER_L)-(float)(g_sensor[SENSOR_RIGHT][0] - CENTER_R));
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <calWallConrol+0x1c0>)
 8002344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002346:	3b78      	subs	r3, #120	; 0x78
 8002348:	ee07 3a90 	vmov	s15, r3
 800234c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <calWallConrol+0x1c0>)
 8002352:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002356:	3b78      	subs	r3, #120	; 0x78
 8002358:	ee07 3a90 	vmov	s15, r3
 800235c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002364:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800236c:	edc7 7a01 	vstr	s15, [r7, #4]
		break;
 8002370:	e000      	b.n	8002374 <calWallConrol+0x19c>
		}


	}
 8002372:	bf00      	nop




	return PID_wall;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	ee07 3a90 	vmov	s15, r3
}
 800237a:	eeb0 0a67 	vmov.f32	s0, s15
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	2000039c 	.word	0x2000039c
 800238c:	2000039d 	.word	0x2000039d
 8002390:	2000039e 	.word	0x2000039e
 8002394:	2000039f 	.word	0x2000039f
 8002398:	2000023c 	.word	0x2000023c
 800239c:	2000037c 	.word	0x2000037c

080023a0 <lcd_cmd>:
#include "PL_lcd.h"
#include "i2c.h"


void lcd_cmd(uint8_t x)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	4603      	mov	r3, r0
 80023a8:	71fb      	strb	r3, [r7, #7]
  uint8_t aTxBuffer[2] = { 0x00, x };
 80023aa:	2300      	movs	r3, #0
 80023ac:	733b      	strb	r3, [r7, #12]
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 80023b2:	e007      	b.n	80023c4 <lcd_cmd+0x24>
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80023b4:	480c      	ldr	r0, [pc, #48]	; (80023e8 <lcd_cmd+0x48>)
 80023b6:	f004 fcdb 	bl	8006d70 <HAL_I2C_GetError>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d001      	beq.n	80023c4 <lcd_cmd+0x24>
    {
      Error_Handler();
 80023c0:	f001 fd95 	bl	8003eee <Error_Handler>
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 80023c4:	f107 020c 	add.w	r2, r7, #12
 80023c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	2302      	movs	r3, #2
 80023d0:	217c      	movs	r1, #124	; 0x7c
 80023d2:	4805      	ldr	r0, [pc, #20]	; (80023e8 <lcd_cmd+0x48>)
 80023d4:	f004 fbd8 	bl	8006b88 <HAL_I2C_Master_Transmit>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1ea      	bne.n	80023b4 <lcd_cmd+0x14>
    }
  }
}
 80023de:	bf00      	nop
 80023e0:	bf00      	nop
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000a04 	.word	0x20000a04

080023ec <lcd_data>:

void lcd_data(uint8_t x)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
  uint8_t aTxBuffer[2] = { 0x40, x };
 80023f6:	2340      	movs	r3, #64	; 0x40
 80023f8:	733b      	strb	r3, [r7, #12]
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 80023fe:	e007      	b.n	8002410 <lcd_data+0x24>
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8002400:	480c      	ldr	r0, [pc, #48]	; (8002434 <lcd_data+0x48>)
 8002402:	f004 fcb5 	bl	8006d70 <HAL_I2C_GetError>
 8002406:	4603      	mov	r3, r0
 8002408:	2b04      	cmp	r3, #4
 800240a:	d001      	beq.n	8002410 <lcd_data+0x24>
    {
      Error_Handler();
 800240c:	f001 fd6f 	bl	8003eee <Error_Handler>
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 8002410:	f107 020c 	add.w	r2, r7, #12
 8002414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	2302      	movs	r3, #2
 800241c:	217c      	movs	r1, #124	; 0x7c
 800241e:	4805      	ldr	r0, [pc, #20]	; (8002434 <lcd_data+0x48>)
 8002420:	f004 fbb2 	bl	8006b88 <HAL_I2C_Master_Transmit>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1ea      	bne.n	8002400 <lcd_data+0x14>
    }
  }
}
 800242a:	bf00      	nop
 800242c:	bf00      	nop
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20000a04 	.word	0x20000a04

08002438 <pl_lcd_puts>:

void pl_lcd_puts(const char *s)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  while(*s) lcd_data(*s++);
 8002440:	e006      	b.n	8002450 <pl_lcd_puts+0x18>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff ffce 	bl	80023ec <lcd_data>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f4      	bne.n	8002442 <pl_lcd_puts+0xa>
}
 8002458:	bf00      	nop
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <pl_lcd_init>:

// param:
//  contrast: 0 ~ 63 (最初は大きくして調整)
void pl_lcd_init(void)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	af00      	add	r7, sp, #0
  // LCD initialize(裏面に記載)
  lcd_cmd(0x38); // function set
 8002466:	2038      	movs	r0, #56	; 0x38
 8002468:	f7ff ff9a 	bl	80023a0 <lcd_cmd>
  lcd_cmd(0x39); // function set
 800246c:	2039      	movs	r0, #57	; 0x39
 800246e:	f7ff ff97 	bl	80023a0 <lcd_cmd>
  lcd_cmd(0x14); // interval osc
 8002472:	2014      	movs	r0, #20
 8002474:	f7ff ff94 	bl	80023a0 <lcd_cmd>
  lcd_cmd(0x70); // contrast low
 8002478:	2070      	movs	r0, #112	; 0x70
 800247a:	f7ff ff91 	bl	80023a0 <lcd_cmd>
  lcd_cmd(0x56); // contrast high / icon / power
 800247e:	2056      	movs	r0, #86	; 0x56
 8002480:	f7ff ff8e 	bl	80023a0 <lcd_cmd>
  lcd_cmd(0x6c); // follower control
 8002484:	206c      	movs	r0, #108	; 0x6c
 8002486:	f7ff ff8b 	bl	80023a0 <lcd_cmd>
  HAL_Delay(300);
 800248a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800248e:	f002 fa69 	bl	8004964 <HAL_Delay>
  lcd_cmd(0x38); // function set
 8002492:	2038      	movs	r0, #56	; 0x38
 8002494:	f7ff ff84 	bl	80023a0 <lcd_cmd>
  lcd_cmd(0x0c); // display on
 8002498:	200c      	movs	r0, #12
 800249a:	f7ff ff81 	bl	80023a0 <lcd_cmd>
  lcd_cmd(0x01); // clear display
 800249e:	2001      	movs	r0, #1
 80024a0:	f7ff ff7e 	bl	80023a0 <lcd_cmd>
  HAL_Delay(2);
 80024a4:	2002      	movs	r0, #2
 80024a6:	f002 fa5d 	bl	8004964 <HAL_Delay>
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}

080024ae <pl_lcd_pos>:

void pl_lcd_move(uint8_t pos){
  lcd_cmd(0x80 | pos);
}

void pl_lcd_pos(uint8_t raw, uint8_t col) {
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	4603      	mov	r3, r0
 80024b6:	460a      	mov	r2, r1
 80024b8:	71fb      	strb	r3, [r7, #7]
 80024ba:	4613      	mov	r3, r2
 80024bc:	71bb      	strb	r3, [r7, #6]
  lcd_cmd(0x80 | ((raw & 0x01) << 6) | col);
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	019b      	lsls	r3, r3, #6
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	79bb      	ldrb	r3, [r7, #6]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff ff62 	bl	80023a0 <lcd_cmd>
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <pl_lcd_clear>:

void pl_lcd_clear() {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  lcd_cmd(0x01);
 80024e8:	2001      	movs	r0, #1
 80024ea:	f7ff ff59 	bl	80023a0 <lcd_cmd>
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <pl_motor_init>:
/*	モータの初期化					(pl_speaker_init)	*/
/*******************************************************************/
/*	モータの初期化する。						*/
/*******************************************************************/
void pl_motor_init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0

	  HAL_TIM_Base_Start_IT(&htim1);//motor
 80024f8:	480a      	ldr	r0, [pc, #40]	; (8002524 <pl_motor_init+0x30>)
 80024fa:	f006 f81b 	bl	8008534 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim1);//motor
 80024fe:	4809      	ldr	r0, [pc, #36]	; (8002524 <pl_motor_init+0x30>)
 8002500:	f001 fffe 	bl	8004500 <HAL_TIM_PWM_MspInit>

	  HAL_TIM_Base_Start_IT(&htim2);//motor
 8002504:	4808      	ldr	r0, [pc, #32]	; (8002528 <pl_motor_init+0x34>)
 8002506:	f006 f815 	bl	8008534 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim2);//motor
 800250a:	4807      	ldr	r0, [pc, #28]	; (8002528 <pl_motor_init+0x34>)
 800250c:	f001 fff8 	bl	8004500 <HAL_TIM_PWM_MspInit>

	  pl_motor_mode_L(1);
 8002510:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002514:	f000 f836 	bl	8002584 <pl_motor_mode_L>
	  pl_motor_mode_R(1);
 8002518:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800251c:	f000 f852 	bl	80025c4 <pl_motor_mode_R>



}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000a54 	.word	0x20000a54
 8002528:	20000aa0 	.word	0x20000aa0

0800252c <pl_motor_standby>:

void pl_motor_standby(int pin){
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MOTOR_ENABLE_GPIO_Port, MOTOR_ENABLE_Pin, pin);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	461a      	mov	r2, r3
 800253a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800253e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002542:	f004 fa79 	bl	8006a38 <HAL_GPIO_WritePin>
	pl_motor_mode_L(1);
 8002546:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800254a:	f000 f81b 	bl	8002584 <pl_motor_mode_L>
	pl_motor_mode_R(1);
 800254e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002552:	f000 f837 	bl	80025c4 <pl_motor_mode_R>
	HAL_GPIO_WritePin(MD_RESET_GPIO_Port,MD_RESET_Pin,GPIO_PIN_SET);
 8002556:	2201      	movs	r2, #1
 8002558:	2120      	movs	r1, #32
 800255a:	4809      	ldr	r0, [pc, #36]	; (8002580 <pl_motor_standby+0x54>)
 800255c:	f004 fa6c 	bl	8006a38 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 8002560:	2003      	movs	r0, #3
 8002562:	f002 f9ff 	bl	8004964 <HAL_Delay>
	HAL_GPIO_WritePin(MD_RESET_GPIO_Port,MD_RESET_Pin,GPIO_PIN_RESET);
 8002566:	2200      	movs	r2, #0
 8002568:	2120      	movs	r1, #32
 800256a:	4805      	ldr	r0, [pc, #20]	; (8002580 <pl_motor_standby+0x54>)
 800256c:	f004 fa64 	bl	8006a38 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002570:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002574:	f002 f9f6 	bl	8004964 <HAL_Delay>
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	48000400 	.word	0x48000400

08002584 <pl_motor_mode_L>:

void pl_motor_mode_L(float velocity_l){
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (velocity_l>=0){
 800258e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002592:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259a:	db07      	blt.n	80025ac <pl_motor_mode_L+0x28>
		HAL_GPIO_WritePin(MOTOR_CW_CCW_L_GPIO_Port,MOTOR_CW_CCW_L_Pin,L_MOTOR_FRONT);
 800259c:	2200      	movs	r2, #0
 800259e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a6:	f004 fa47 	bl	8006a38 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(MOTOR_CW_CCW_L_GPIO_Port,MOTOR_CW_CCW_L_Pin,L_MOTOR_BACK);
	}
}
 80025aa:	e006      	b.n	80025ba <pl_motor_mode_L+0x36>
		HAL_GPIO_WritePin(MOTOR_CW_CCW_L_GPIO_Port,MOTOR_CW_CCW_L_Pin,L_MOTOR_BACK);
 80025ac:	2201      	movs	r2, #1
 80025ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025b6:	f004 fa3f 	bl	8006a38 <HAL_GPIO_WritePin>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <pl_motor_mode_R>:

void pl_motor_mode_R(float velocity_r){
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	ed87 0a01 	vstr	s0, [r7, #4]
	if (velocity_r>=0){
 80025ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80025d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025da:	db05      	blt.n	80025e8 <pl_motor_mode_R+0x24>
		HAL_GPIO_WritePin(MOTOR_CW_CCW_R_GPIO_Port,MOTOR_CW_CCW_R_Pin,R_MOTOR_FRONT);
 80025dc:	2201      	movs	r2, #1
 80025de:	2110      	movs	r1, #16
 80025e0:	4806      	ldr	r0, [pc, #24]	; (80025fc <pl_motor_mode_R+0x38>)
 80025e2:	f004 fa29 	bl	8006a38 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(MOTOR_CW_CCW_R_GPIO_Port,MOTOR_CW_CCW_R_Pin,R_MOTOR_BACK);
	}
}
 80025e6:	e004      	b.n	80025f2 <pl_motor_mode_R+0x2e>
		HAL_GPIO_WritePin(MOTOR_CW_CCW_R_GPIO_Port,MOTOR_CW_CCW_R_Pin,R_MOTOR_BACK);
 80025e8:	2200      	movs	r2, #0
 80025ea:	2110      	movs	r1, #16
 80025ec:	4803      	ldr	r0, [pc, #12]	; (80025fc <pl_motor_mode_R+0x38>)
 80025ee:	f004 fa23 	bl	8006a38 <HAL_GPIO_WritePin>
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	48000400 	.word	0x48000400

08002600 <pl_motor_start>:

void pl_motor_start(void){
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	pl_interrupt_motor_count_L();
 8002604:	f000 f848 	bl	8002698 <pl_interrupt_motor_count_L>
	pl_interrupt_motor_count_R();
 8002608:	f000 f872 	bl	80026f0 <pl_interrupt_motor_count_R>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800260c:	2100      	movs	r1, #0
 800260e:	4804      	ldr	r0, [pc, #16]	; (8002620 <pl_motor_start+0x20>)
 8002610:	f006 f83c 	bl	800868c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002614:	2104      	movs	r1, #4
 8002616:	4803      	ldr	r0, [pc, #12]	; (8002624 <pl_motor_start+0x24>)
 8002618:	f006 f838 	bl	800868c <HAL_TIM_PWM_Start>
}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000a54 	.word	0x20000a54
 8002624:	20000aa0 	.word	0x20000aa0

08002628 <pl_motor_stop>:

void pl_motor_stop(void){
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800262c:	2100      	movs	r1, #0
 800262e:	4804      	ldr	r0, [pc, #16]	; (8002640 <pl_motor_stop+0x18>)
 8002630:	f006 f90a 	bl	8008848 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8002634:	2104      	movs	r1, #4
 8002636:	4803      	ldr	r0, [pc, #12]	; (8002644 <pl_motor_stop+0x1c>)
 8002638:	f006 f906 	bl	8008848 <HAL_TIM_PWM_Stop>
}
 800263c:	bf00      	nop
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000a54 	.word	0x20000a54
 8002644:	20000aa0 	.word	0x20000aa0

08002648 <pl_motor_count_L>:

void pl_motor_count_L(float velocity_l){
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	ed87 0a01 	vstr	s0, [r7, #4]
//	uint16_t motorCount_l;
	g_motorCount_l = calMotorVelocityCount(velocity_l);
 8002652:	ed97 0a01 	vldr	s0, [r7, #4]
 8002656:	f000 f877 	bl	8002748 <calMotorVelocityCount>
 800265a:	4603      	mov	r3, r0
 800265c:	461a      	mov	r2, r3
 800265e:	4b03      	ldr	r3, [pc, #12]	; (800266c <pl_motor_count_L+0x24>)
 8002660:	801a      	strh	r2, [r3, #0]
//	__HAL_TIM_SET_AUTORELOAD(&htim1, g_motorCount_l);
//	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,(uint16_t)((float)(g_motorCount_l)/2));
//	__HAL_TIM_SET_COUNTER(&htim1, 0);
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	200003a0 	.word	0x200003a0

08002670 <pl_motor_count_R>:

void pl_motor_count_R(float velocity_r){
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	ed87 0a01 	vstr	s0, [r7, #4]
//	uint16_t motorCount_r;
	g_motorCount_r = calMotorVelocityCount(velocity_r);
 800267a:	ed97 0a01 	vldr	s0, [r7, #4]
 800267e:	f000 f863 	bl	8002748 <calMotorVelocityCount>
 8002682:	4603      	mov	r3, r0
 8002684:	461a      	mov	r2, r3
 8002686:	4b03      	ldr	r3, [pc, #12]	; (8002694 <pl_motor_count_R+0x24>)
 8002688:	801a      	strh	r2, [r3, #0]
//	__HAL_TIM_SET_AUTORELOAD(&htim2, g_motorCount_r);
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,(uint16_t)((float)(g_motorCount_r)/2));
//	__HAL_TIM_SET_COUNTER(&htim2, 0);

}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	200003a2 	.word	0x200003a2

08002698 <pl_interrupt_motor_count_L>:

void pl_interrupt_motor_count_L(void){
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim1, g_motorCount_l);
 800269c:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <pl_interrupt_motor_count_L+0x50>)
 800269e:	881a      	ldrh	r2, [r3, #0]
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <pl_interrupt_motor_count_L+0x54>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <pl_interrupt_motor_count_L+0x50>)
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <pl_interrupt_motor_count_L+0x54>)
 80026ae:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,(uint16_t)((float)(g_motorCount_l)/2));
 80026b0:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <pl_interrupt_motor_count_L+0x50>)
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	ee07 3a90 	vmov	s15, r3
 80026b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026bc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80026c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026c8:	ee17 3a90 	vmov	r3, s15
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	4b07      	ldr	r3, [pc, #28]	; (80026ec <pl_interrupt_motor_count_L+0x54>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <pl_interrupt_motor_count_L+0x54>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2200      	movs	r2, #0
 80026da:	625a      	str	r2, [r3, #36]	; 0x24
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	200003a0 	.word	0x200003a0
 80026ec:	20000a54 	.word	0x20000a54

080026f0 <pl_interrupt_motor_count_R>:

void pl_interrupt_motor_count_R(void){
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim2, g_motorCount_r);
 80026f4:	4b12      	ldr	r3, [pc, #72]	; (8002740 <pl_interrupt_motor_count_R+0x50>)
 80026f6:	881a      	ldrh	r2, [r3, #0]
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <pl_interrupt_motor_count_R+0x54>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <pl_interrupt_motor_count_R+0x50>)
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <pl_interrupt_motor_count_R+0x54>)
 8002706:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,(uint16_t)((float)(g_motorCount_r)/2));
 8002708:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <pl_interrupt_motor_count_R+0x50>)
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	ee07 3a90 	vmov	s15, r3
 8002710:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002714:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800271c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002720:	ee17 3a90 	vmov	r3, s15
 8002724:	b29a      	uxth	r2, r3
 8002726:	4b07      	ldr	r3, [pc, #28]	; (8002744 <pl_interrupt_motor_count_R+0x54>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <pl_interrupt_motor_count_R+0x54>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2200      	movs	r2, #0
 8002732:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	200003a2 	.word	0x200003a2
 8002744:	20000aa0 	.word	0x20000aa0

08002748 <calMotorVelocityCount>:
/*******************************************************************/
/*	速度からcycleCountへの変換					(calFrequencyCount)	*/
/*******************************************************************/
/*	速度からPWMに送るcycleCountを計算する．。						*/
/*******************************************************************/
uint16_t calMotorVelocityCount(float Velocity) {
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	ed87 0a01 	vstr	s0, [r7, #4]
	float f_MotorCount;
	uint16_t MotorCount;

	f_MotorCount=(10000000 * STEP_DEGREE * M_PI / 180 * TIRE_DIAMETER / 2 / fabs(Velocity));
 8002752:	edd7 7a01 	vldr	s15, [r7, #4]
 8002756:	eef0 7ae7 	vabs.f32	s15, s15
 800275a:	ee17 0a90 	vmov	r0, s15
 800275e:	f7fd fef3 	bl	8000548 <__aeabi_f2d>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	a11d      	add	r1, pc, #116	; (adr r1, 80027dc <calMotorVelocityCount+0x94>)
 8002768:	e9d1 0100 	ldrd	r0, r1, [r1]
 800276c:	f7fe f86e 	bl	800084c <__aeabi_ddiv>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4610      	mov	r0, r2
 8002776:	4619      	mov	r1, r3
 8002778:	f7fe fa16 	bl	8000ba8 <__aeabi_d2f>
 800277c:	4603      	mov	r3, r0
 800277e:	60bb      	str	r3, [r7, #8]
	if (Velocity == 0 || f_MotorCount > 65535 || f_MotorCount < 0) {
 8002780:	edd7 7a01 	vldr	s15, [r7, #4]
 8002784:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278c:	d00f      	beq.n	80027ae <calMotorVelocityCount+0x66>
 800278e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002792:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80027d8 <calMotorVelocityCount+0x90>
 8002796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800279a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279e:	dc06      	bgt.n	80027ae <calMotorVelocityCount+0x66>
 80027a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80027a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ac:	d503      	bpl.n	80027b6 <calMotorVelocityCount+0x6e>
		MotorCount = 30535 - 1;
 80027ae:	f247 7346 	movw	r3, #30534	; 0x7746
 80027b2:	81fb      	strh	r3, [r7, #14]
 80027b4:	e008      	b.n	80027c8 <calMotorVelocityCount+0x80>
	} else {
		MotorCount = (uint16_t) (f_MotorCount)-1;
 80027b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80027ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027be:	ee17 3a90 	vmov	r3, s15
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	3b01      	subs	r3, #1
 80027c6:	81fb      	strh	r3, [r7, #14]
	}

	return MotorCount;
 80027c8:	89fb      	ldrh	r3, [r7, #14]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	f3af 8000 	nop.w
 80027d8:	477fff00 	.word	0x477fff00
 80027dc:	398eadef 	.word	0x398eadef
 80027e0:	414f28b3 	.word	0x414f28b3
 80027e4:	00000000 	.word	0x00000000

080027e8 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 80027ee:	4828      	ldr	r0, [pc, #160]	; (8002890 <pl_getbatt+0xa8>)
 80027f0:	f002 fc3a 	bl	8005068 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 80027f4:	2132      	movs	r1, #50	; 0x32
 80027f6:	4826      	ldr	r0, [pc, #152]	; (8002890 <pl_getbatt+0xa8>)
 80027f8:	f002 fccc 	bl	8005194 <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 80027fc:	4824      	ldr	r0, [pc, #144]	; (8002890 <pl_getbatt+0xa8>)
 80027fe:	f002 fe3e 	bl	800547e <HAL_ADC_GetValue>
 8002802:	4603      	mov	r3, r0
 8002804:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 8002806:	4822      	ldr	r0, [pc, #136]	; (8002890 <pl_getbatt+0xa8>)
 8002808:	f002 fc91 	bl	800512e <HAL_ADC_Stop>
	batt = 3.3  * (float) battAD / 1023.0 * (100.0 + 22.0) / 22.0;
 800280c:	88fb      	ldrh	r3, [r7, #6]
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002816:	ee17 0a90 	vmov	r0, s15
 800281a:	f7fd fe95 	bl	8000548 <__aeabi_f2d>
 800281e:	a318      	add	r3, pc, #96	; (adr r3, 8002880 <pl_getbatt+0x98>)
 8002820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002824:	f7fd fee8 	bl	80005f8 <__aeabi_dmul>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4610      	mov	r0, r2
 800282e:	4619      	mov	r1, r3
 8002830:	a315      	add	r3, pc, #84	; (adr r3, 8002888 <pl_getbatt+0xa0>)
 8002832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002836:	f7fe f809 	bl	800084c <__aeabi_ddiv>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	4b13      	ldr	r3, [pc, #76]	; (8002894 <pl_getbatt+0xac>)
 8002848:	f7fd fed6 	bl	80005f8 <__aeabi_dmul>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <pl_getbatt+0xb0>)
 800285a:	f7fd fff7 	bl	800084c <__aeabi_ddiv>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	f7fe f99f 	bl	8000ba8 <__aeabi_d2f>
 800286a:	4603      	mov	r3, r0
 800286c:	603b      	str	r3, [r7, #0]


return batt;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	ee07 3a90 	vmov	s15, r3
}
 8002874:	eeb0 0a67 	vmov.f32	s0, s15
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	66666666 	.word	0x66666666
 8002884:	400a6666 	.word	0x400a6666
 8002888:	00000000 	.word	0x00000000
 800288c:	408ff800 	.word	0x408ff800
 8002890:	20000958 	.word	0x20000958
 8002894:	405e8000 	.word	0x405e8000
 8002898:	40360000 	.word	0x40360000
 800289c:	00000000 	.word	0x00000000

080028a0 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 80028a6:	4862      	ldr	r0, [pc, #392]	; (8002a30 <pl_callback_getSensor+0x190>)
 80028a8:	f002 fd88 	bl	80053bc <HAL_ADC_Stop_DMA>
	switch (AD_step) {
 80028ac:	4b61      	ldr	r3, [pc, #388]	; (8002a34 <pl_callback_getSensor+0x194>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d042      	beq.n	800293a <pl_callback_getSensor+0x9a>
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	dc66      	bgt.n	8002986 <pl_callback_getSensor+0xe6>
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <pl_callback_getSensor+0x22>
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d016      	beq.n	80028ee <pl_callback_getSensor+0x4e>
 80028c0:	e061      	b.n	8002986 <pl_callback_getSensor+0xe6>
		case 0:
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_SET);
 80028c2:	2201      	movs	r2, #1
 80028c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028c8:	485b      	ldr	r0, [pc, #364]	; (8002a38 <pl_callback_getSensor+0x198>)
 80028ca:	f004 f8b5 	bl	8006a38 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_RESET);
 80028ce:	2200      	movs	r2, #0
 80028d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028d4:	4858      	ldr	r0, [pc, #352]	; (8002a38 <pl_callback_getSensor+0x198>)
 80028d6:	f004 f8af 	bl	8006a38 <HAL_GPIO_WritePin>
					for (j = 0; j <= 100; j++) {
 80028da:	2300      	movs	r3, #0
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	e002      	b.n	80028e6 <pl_callback_getSensor+0x46>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3301      	adds	r3, #1
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b64      	cmp	r3, #100	; 0x64
 80028ea:	ddf9      	ble.n	80028e0 <pl_callback_getSensor+0x40>
					}
			break;
 80028ec:	e04b      	b.n	8002986 <pl_callback_getSensor+0xe6>
		case 1:
			g_sensor_on[0] = g_ADCBuffer[1];
 80028ee:	4b53      	ldr	r3, [pc, #332]	; (8002a3c <pl_callback_getSensor+0x19c>)
 80028f0:	885a      	ldrh	r2, [r3, #2]
 80028f2:	4b53      	ldr	r3, [pc, #332]	; (8002a40 <pl_callback_getSensor+0x1a0>)
 80028f4:	801a      	strh	r2, [r3, #0]
			g_sensor_on[1] = g_ADCBuffer[2];
 80028f6:	4b51      	ldr	r3, [pc, #324]	; (8002a3c <pl_callback_getSensor+0x19c>)
 80028f8:	889a      	ldrh	r2, [r3, #4]
 80028fa:	4b51      	ldr	r3, [pc, #324]	; (8002a40 <pl_callback_getSensor+0x1a0>)
 80028fc:	805a      	strh	r2, [r3, #2]
			g_sensor_off[2] = g_ADCBuffer[3];
 80028fe:	4b4f      	ldr	r3, [pc, #316]	; (8002a3c <pl_callback_getSensor+0x19c>)
 8002900:	88da      	ldrh	r2, [r3, #6]
 8002902:	4b50      	ldr	r3, [pc, #320]	; (8002a44 <pl_callback_getSensor+0x1a4>)
 8002904:	809a      	strh	r2, [r3, #4]
			g_sensor_off[3] = g_ADCBuffer[4];
 8002906:	4b4d      	ldr	r3, [pc, #308]	; (8002a3c <pl_callback_getSensor+0x19c>)
 8002908:	891a      	ldrh	r2, [r3, #8]
 800290a:	4b4e      	ldr	r3, [pc, #312]	; (8002a44 <pl_callback_getSensor+0x1a4>)
 800290c:	80da      	strh	r2, [r3, #6]
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_RESET);
 800290e:	2200      	movs	r2, #0
 8002910:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002914:	4848      	ldr	r0, [pc, #288]	; (8002a38 <pl_callback_getSensor+0x198>)
 8002916:	f004 f88f 	bl	8006a38 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_SET);
 800291a:	2201      	movs	r2, #1
 800291c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002920:	4845      	ldr	r0, [pc, #276]	; (8002a38 <pl_callback_getSensor+0x198>)
 8002922:	f004 f889 	bl	8006a38 <HAL_GPIO_WritePin>
					for (j = 0; j <= 100; j++) {
 8002926:	2300      	movs	r3, #0
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	e002      	b.n	8002932 <pl_callback_getSensor+0x92>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3301      	adds	r3, #1
 8002930:	607b      	str	r3, [r7, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b64      	cmp	r3, #100	; 0x64
 8002936:	ddf9      	ble.n	800292c <pl_callback_getSensor+0x8c>
					}
			break;
 8002938:	e025      	b.n	8002986 <pl_callback_getSensor+0xe6>
		case 2:
			g_sensor_off[0] = g_ADCBuffer[1];
 800293a:	4b40      	ldr	r3, [pc, #256]	; (8002a3c <pl_callback_getSensor+0x19c>)
 800293c:	885a      	ldrh	r2, [r3, #2]
 800293e:	4b41      	ldr	r3, [pc, #260]	; (8002a44 <pl_callback_getSensor+0x1a4>)
 8002940:	801a      	strh	r2, [r3, #0]
			g_sensor_off[1] = g_ADCBuffer[2];
 8002942:	4b3e      	ldr	r3, [pc, #248]	; (8002a3c <pl_callback_getSensor+0x19c>)
 8002944:	889a      	ldrh	r2, [r3, #4]
 8002946:	4b3f      	ldr	r3, [pc, #252]	; (8002a44 <pl_callback_getSensor+0x1a4>)
 8002948:	805a      	strh	r2, [r3, #2]
			g_sensor_on[2] = g_ADCBuffer[3];
 800294a:	4b3c      	ldr	r3, [pc, #240]	; (8002a3c <pl_callback_getSensor+0x19c>)
 800294c:	88da      	ldrh	r2, [r3, #6]
 800294e:	4b3c      	ldr	r3, [pc, #240]	; (8002a40 <pl_callback_getSensor+0x1a0>)
 8002950:	809a      	strh	r2, [r3, #4]
			g_sensor_on[3] = g_ADCBuffer[4];
 8002952:	4b3a      	ldr	r3, [pc, #232]	; (8002a3c <pl_callback_getSensor+0x19c>)
 8002954:	891a      	ldrh	r2, [r3, #8]
 8002956:	4b3a      	ldr	r3, [pc, #232]	; (8002a40 <pl_callback_getSensor+0x1a0>)
 8002958:	80da      	strh	r2, [r3, #6]
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_RESET);
 800295a:	2200      	movs	r2, #0
 800295c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002960:	4835      	ldr	r0, [pc, #212]	; (8002a38 <pl_callback_getSensor+0x198>)
 8002962:	f004 f869 	bl	8006a38 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_RESET);
 8002966:	2200      	movs	r2, #0
 8002968:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800296c:	4832      	ldr	r0, [pc, #200]	; (8002a38 <pl_callback_getSensor+0x198>)
 800296e:	f004 f863 	bl	8006a38 <HAL_GPIO_WritePin>
					for (j = 0; j <= 10; j++) {
 8002972:	2300      	movs	r3, #0
 8002974:	607b      	str	r3, [r7, #4]
 8002976:	e002      	b.n	800297e <pl_callback_getSensor+0xde>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3301      	adds	r3, #1
 800297c:	607b      	str	r3, [r7, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b0a      	cmp	r3, #10
 8002982:	ddf9      	ble.n	8002978 <pl_callback_getSensor+0xd8>
					}
			break;
 8002984:	bf00      	nop
	}
	V_battAD = g_ADCBuffer[0];
 8002986:	4b2d      	ldr	r3, [pc, #180]	; (8002a3c <pl_callback_getSensor+0x19c>)
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 1023.0 * (100.0 + 22.0) / 22.0;
 800298c:	887b      	ldrh	r3, [r7, #2]
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002996:	ee17 0a90 	vmov	r0, s15
 800299a:	f7fd fdd5 	bl	8000548 <__aeabi_f2d>
 800299e:	a320      	add	r3, pc, #128	; (adr r3, 8002a20 <pl_callback_getSensor+0x180>)
 80029a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a4:	f7fd fe28 	bl	80005f8 <__aeabi_dmul>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	a31d      	add	r3, pc, #116	; (adr r3, 8002a28 <pl_callback_getSensor+0x188>)
 80029b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b6:	f7fd ff49 	bl	800084c <__aeabi_ddiv>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4610      	mov	r0, r2
 80029c0:	4619      	mov	r1, r3
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <pl_callback_getSensor+0x1a8>)
 80029c8:	f7fd fe16 	bl	80005f8 <__aeabi_dmul>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4610      	mov	r0, r2
 80029d2:	4619      	mov	r1, r3
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <pl_callback_getSensor+0x1ac>)
 80029da:	f7fd ff37 	bl	800084c <__aeabi_ddiv>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4610      	mov	r0, r2
 80029e4:	4619      	mov	r1, r3
 80029e6:	f7fe f8df 	bl	8000ba8 <__aeabi_d2f>
 80029ea:	4603      	mov	r3, r0
 80029ec:	4a18      	ldr	r2, [pc, #96]	; (8002a50 <pl_callback_getSensor+0x1b0>)
 80029ee:	6013      	str	r3, [r2, #0]
		AD_step++;
 80029f0:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <pl_callback_getSensor+0x194>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	3301      	adds	r3, #1
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <pl_callback_getSensor+0x194>)
 80029fa:	701a      	strb	r2, [r3, #0]

		if (AD_step != 3) {
 80029fc:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <pl_callback_getSensor+0x194>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d005      	beq.n	8002a10 <pl_callback_getSensor+0x170>
			HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
 8002a04:	2205      	movs	r2, #5
 8002a06:	490d      	ldr	r1, [pc, #52]	; (8002a3c <pl_callback_getSensor+0x19c>)
 8002a08:	4809      	ldr	r0, [pc, #36]	; (8002a30 <pl_callback_getSensor+0x190>)
 8002a0a:	f002 fc53 	bl	80052b4 <HAL_ADC_Start_DMA>

			AD_step = 0;

		}

}
 8002a0e:	e002      	b.n	8002a16 <pl_callback_getSensor+0x176>
			AD_step = 0;
 8002a10:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <pl_callback_getSensor+0x194>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	701a      	strb	r2, [r3, #0]
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	66666666 	.word	0x66666666
 8002a24:	400a6666 	.word	0x400a6666
 8002a28:	00000000 	.word	0x00000000
 8002a2c:	408ff800 	.word	0x408ff800
 8002a30:	20000958 	.word	0x20000958
 8002a34:	200003ae 	.word	0x200003ae
 8002a38:	48000800 	.word	0x48000800
 8002a3c:	200003a4 	.word	0x200003a4
 8002a40:	200003b0 	.word	0x200003b0
 8002a44:	200003b8 	.word	0x200003b8
 8002a48:	405e8000 	.word	0x405e8000
 8002a4c:	40360000 	.word	0x40360000
 8002a50:	200003c0 	.word	0x200003c0

08002a54 <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
	if (sensor_mode == 1) {
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <pl_interupt_getSensor+0x1c>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d104      	bne.n	8002a6a <pl_interupt_getSensor+0x16>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
 8002a60:	2205      	movs	r2, #5
 8002a62:	4904      	ldr	r1, [pc, #16]	; (8002a74 <pl_interupt_getSensor+0x20>)
 8002a64:	4804      	ldr	r0, [pc, #16]	; (8002a78 <pl_interupt_getSensor+0x24>)
 8002a66:	f002 fc25 	bl	80052b4 <HAL_ADC_Start_DMA>
				sizeof(g_ADCBuffer) / sizeof(uint16_t));
	}

}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	200003af 	.word	0x200003af
 8002a74:	200003a4 	.word	0x200003a4
 8002a78:	20000958 	.word	0x20000958

08002a7c <pl_speaker_init>:
/*	スピーカーの初期化					(pl_speaker_init)	*/
/*******************************************************************/
/*	スピーカーの初期化する。						*/
/*******************************************************************/
void pl_speaker_init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0

	  HAL_TIM_Base_Start_IT(&htim15);//speaker
 8002a80:	4805      	ldr	r0, [pc, #20]	; (8002a98 <pl_speaker_init+0x1c>)
 8002a82:	f005 fd57 	bl	8008534 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim15);//speaker
 8002a86:	4804      	ldr	r0, [pc, #16]	; (8002a98 <pl_speaker_init+0x1c>)
 8002a88:	f001 fd3a 	bl	8004500 <HAL_TIM_PWM_MspInit>

	  inputseria();
 8002a8c:	f000 f850 	bl	8002b30 <inputseria>
	  inputZelda_nazo();
 8002a90:	f000 f804 	bl	8002a9c <inputZelda_nazo>


}
 8002a94:	bf00      	nop
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20000b38 	.word	0x20000b38

08002a9c <inputZelda_nazo>:
/*******************************************************************/
/*	音楽用構造体配列の入力					(input)	*/
/*******************************************************************/
/*	音楽用の構造体を定義してる．						*/
/*******************************************************************/
void inputZelda_nazo(void) {
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
	Zelda_nazo[0].interval = 1480;
 8002aa0:	4b1a      	ldr	r3, [pc, #104]	; (8002b0c <inputZelda_nazo+0x70>)
 8002aa2:	4a1b      	ldr	r2, [pc, #108]	; (8002b10 <inputZelda_nazo+0x74>)
 8002aa4:	601a      	str	r2, [r3, #0]
	Zelda_nazo[0].waittime = 19 * 7;
 8002aa6:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <inputZelda_nazo+0x70>)
 8002aa8:	2285      	movs	r2, #133	; 0x85
 8002aaa:	809a      	strh	r2, [r3, #4]
	Zelda_nazo[1].interval = 1397;
 8002aac:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <inputZelda_nazo+0x70>)
 8002aae:	4a19      	ldr	r2, [pc, #100]	; (8002b14 <inputZelda_nazo+0x78>)
 8002ab0:	609a      	str	r2, [r3, #8]
	Zelda_nazo[1].waittime = 19 * 7;
 8002ab2:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <inputZelda_nazo+0x70>)
 8002ab4:	2285      	movs	r2, #133	; 0x85
 8002ab6:	819a      	strh	r2, [r3, #12]
	Zelda_nazo[2].interval = 1175;
 8002ab8:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <inputZelda_nazo+0x70>)
 8002aba:	4a17      	ldr	r2, [pc, #92]	; (8002b18 <inputZelda_nazo+0x7c>)
 8002abc:	611a      	str	r2, [r3, #16]
	Zelda_nazo[2].waittime = 19 * 7;
 8002abe:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <inputZelda_nazo+0x70>)
 8002ac0:	2285      	movs	r2, #133	; 0x85
 8002ac2:	829a      	strh	r2, [r3, #20]
	Zelda_nazo[3].interval = 831;
 8002ac4:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <inputZelda_nazo+0x70>)
 8002ac6:	4a15      	ldr	r2, [pc, #84]	; (8002b1c <inputZelda_nazo+0x80>)
 8002ac8:	619a      	str	r2, [r3, #24]
	Zelda_nazo[3].waittime = 19 * 7;
 8002aca:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <inputZelda_nazo+0x70>)
 8002acc:	2285      	movs	r2, #133	; 0x85
 8002ace:	839a      	strh	r2, [r3, #28]
	Zelda_nazo[4].interval = 784;
 8002ad0:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <inputZelda_nazo+0x70>)
 8002ad2:	4a13      	ldr	r2, [pc, #76]	; (8002b20 <inputZelda_nazo+0x84>)
 8002ad4:	621a      	str	r2, [r3, #32]
	Zelda_nazo[4].waittime = 19 * 7;
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <inputZelda_nazo+0x70>)
 8002ad8:	2285      	movs	r2, #133	; 0x85
 8002ada:	849a      	strh	r2, [r3, #36]	; 0x24
	Zelda_nazo[5].interval = 1245;
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <inputZelda_nazo+0x70>)
 8002ade:	4a11      	ldr	r2, [pc, #68]	; (8002b24 <inputZelda_nazo+0x88>)
 8002ae0:	629a      	str	r2, [r3, #40]	; 0x28
	Zelda_nazo[5].waittime = 19 * 7;
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <inputZelda_nazo+0x70>)
 8002ae4:	2285      	movs	r2, #133	; 0x85
 8002ae6:	859a      	strh	r2, [r3, #44]	; 0x2c
	Zelda_nazo[6].interval = 1568;
 8002ae8:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <inputZelda_nazo+0x70>)
 8002aea:	4a0f      	ldr	r2, [pc, #60]	; (8002b28 <inputZelda_nazo+0x8c>)
 8002aec:	631a      	str	r2, [r3, #48]	; 0x30
	Zelda_nazo[6].waittime = 19 * 7;
 8002aee:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <inputZelda_nazo+0x70>)
 8002af0:	2285      	movs	r2, #133	; 0x85
 8002af2:	869a      	strh	r2, [r3, #52]	; 0x34
	Zelda_nazo[7].interval = 1976;
 8002af4:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <inputZelda_nazo+0x70>)
 8002af6:	4a0d      	ldr	r2, [pc, #52]	; (8002b2c <inputZelda_nazo+0x90>)
 8002af8:	639a      	str	r2, [r3, #56]	; 0x38
	Zelda_nazo[7].waittime = 99 * 7;
 8002afa:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <inputZelda_nazo+0x70>)
 8002afc:	f240 22b5 	movw	r2, #693	; 0x2b5
 8002b00:	879a      	strh	r2, [r3, #60]	; 0x3c

}
 8002b02:	bf00      	nop
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	20000914 	.word	0x20000914
 8002b10:	44b90000 	.word	0x44b90000
 8002b14:	44aea000 	.word	0x44aea000
 8002b18:	4492e000 	.word	0x4492e000
 8002b1c:	444fc000 	.word	0x444fc000
 8002b20:	44440000 	.word	0x44440000
 8002b24:	449ba000 	.word	0x449ba000
 8002b28:	44c40000 	.word	0x44c40000
 8002b2c:	44f70000 	.word	0x44f70000

08002b30 <inputseria>:


void inputseria(void) {
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
	seria[0].interval = 698;
 8002b34:	4bad      	ldr	r3, [pc, #692]	; (8002dec <inputseria+0x2bc>)
 8002b36:	4aae      	ldr	r2, [pc, #696]	; (8002df0 <inputseria+0x2c0>)
 8002b38:	601a      	str	r2, [r3, #0]
	seria[0].waittime = 224;
 8002b3a:	4bac      	ldr	r3, [pc, #688]	; (8002dec <inputseria+0x2bc>)
 8002b3c:	22e0      	movs	r2, #224	; 0xe0
 8002b3e:	809a      	strh	r2, [r3, #4]
	seria[1].interval = 880;
 8002b40:	4baa      	ldr	r3, [pc, #680]	; (8002dec <inputseria+0x2bc>)
 8002b42:	4aac      	ldr	r2, [pc, #688]	; (8002df4 <inputseria+0x2c4>)
 8002b44:	609a      	str	r2, [r3, #8]
	seria[1].waittime = 224;
 8002b46:	4ba9      	ldr	r3, [pc, #676]	; (8002dec <inputseria+0x2bc>)
 8002b48:	22e0      	movs	r2, #224	; 0xe0
 8002b4a:	819a      	strh	r2, [r3, #12]
	seria[2].interval = 988;
 8002b4c:	4ba7      	ldr	r3, [pc, #668]	; (8002dec <inputseria+0x2bc>)
 8002b4e:	4aaa      	ldr	r2, [pc, #680]	; (8002df8 <inputseria+0x2c8>)
 8002b50:	611a      	str	r2, [r3, #16]
	seria[2].waittime = 462;
 8002b52:	4ba6      	ldr	r3, [pc, #664]	; (8002dec <inputseria+0x2bc>)
 8002b54:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002b58:	829a      	strh	r2, [r3, #20]
	seria[3].interval = 698;
 8002b5a:	4ba4      	ldr	r3, [pc, #656]	; (8002dec <inputseria+0x2bc>)
 8002b5c:	4aa4      	ldr	r2, [pc, #656]	; (8002df0 <inputseria+0x2c0>)
 8002b5e:	619a      	str	r2, [r3, #24]
	seria[3].waittime = 224;
 8002b60:	4ba2      	ldr	r3, [pc, #648]	; (8002dec <inputseria+0x2bc>)
 8002b62:	22e0      	movs	r2, #224	; 0xe0
 8002b64:	839a      	strh	r2, [r3, #28]
	seria[4].interval = 880;
 8002b66:	4ba1      	ldr	r3, [pc, #644]	; (8002dec <inputseria+0x2bc>)
 8002b68:	4aa2      	ldr	r2, [pc, #648]	; (8002df4 <inputseria+0x2c4>)
 8002b6a:	621a      	str	r2, [r3, #32]
	seria[4].waittime = 224;
 8002b6c:	4b9f      	ldr	r3, [pc, #636]	; (8002dec <inputseria+0x2bc>)
 8002b6e:	22e0      	movs	r2, #224	; 0xe0
 8002b70:	849a      	strh	r2, [r3, #36]	; 0x24
	seria[5].interval = 988;
 8002b72:	4b9e      	ldr	r3, [pc, #632]	; (8002dec <inputseria+0x2bc>)
 8002b74:	4aa0      	ldr	r2, [pc, #640]	; (8002df8 <inputseria+0x2c8>)
 8002b76:	629a      	str	r2, [r3, #40]	; 0x28
	seria[5].waittime = 462;
 8002b78:	4b9c      	ldr	r3, [pc, #624]	; (8002dec <inputseria+0x2bc>)
 8002b7a:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002b7e:	859a      	strh	r2, [r3, #44]	; 0x2c
	seria[6].interval = 698;
 8002b80:	4b9a      	ldr	r3, [pc, #616]	; (8002dec <inputseria+0x2bc>)
 8002b82:	4a9b      	ldr	r2, [pc, #620]	; (8002df0 <inputseria+0x2c0>)
 8002b84:	631a      	str	r2, [r3, #48]	; 0x30
	seria[6].waittime = 224;
 8002b86:	4b99      	ldr	r3, [pc, #612]	; (8002dec <inputseria+0x2bc>)
 8002b88:	22e0      	movs	r2, #224	; 0xe0
 8002b8a:	869a      	strh	r2, [r3, #52]	; 0x34
	seria[7].interval = 880;
 8002b8c:	4b97      	ldr	r3, [pc, #604]	; (8002dec <inputseria+0x2bc>)
 8002b8e:	4a99      	ldr	r2, [pc, #612]	; (8002df4 <inputseria+0x2c4>)
 8002b90:	639a      	str	r2, [r3, #56]	; 0x38
	seria[7].waittime = 224;
 8002b92:	4b96      	ldr	r3, [pc, #600]	; (8002dec <inputseria+0x2bc>)
 8002b94:	22e0      	movs	r2, #224	; 0xe0
 8002b96:	879a      	strh	r2, [r3, #60]	; 0x3c
	seria[8].interval = 988;
 8002b98:	4b94      	ldr	r3, [pc, #592]	; (8002dec <inputseria+0x2bc>)
 8002b9a:	4a97      	ldr	r2, [pc, #604]	; (8002df8 <inputseria+0x2c8>)
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
	seria[8].waittime = 224;
 8002b9e:	4b93      	ldr	r3, [pc, #588]	; (8002dec <inputseria+0x2bc>)
 8002ba0:	22e0      	movs	r2, #224	; 0xe0
 8002ba2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	seria[9].interval = 1319;
 8002ba6:	4b91      	ldr	r3, [pc, #580]	; (8002dec <inputseria+0x2bc>)
 8002ba8:	4a94      	ldr	r2, [pc, #592]	; (8002dfc <inputseria+0x2cc>)
 8002baa:	649a      	str	r2, [r3, #72]	; 0x48
	seria[9].waittime = 224;
 8002bac:	4b8f      	ldr	r3, [pc, #572]	; (8002dec <inputseria+0x2bc>)
 8002bae:	22e0      	movs	r2, #224	; 0xe0
 8002bb0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	seria[10].interval = 1175;
 8002bb4:	4b8d      	ldr	r3, [pc, #564]	; (8002dec <inputseria+0x2bc>)
 8002bb6:	4a92      	ldr	r2, [pc, #584]	; (8002e00 <inputseria+0x2d0>)
 8002bb8:	651a      	str	r2, [r3, #80]	; 0x50
	seria[10].waittime = 462;
 8002bba:	4b8c      	ldr	r3, [pc, #560]	; (8002dec <inputseria+0x2bc>)
 8002bbc:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002bc0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	seria[11].interval = 988;
 8002bc4:	4b89      	ldr	r3, [pc, #548]	; (8002dec <inputseria+0x2bc>)
 8002bc6:	4a8c      	ldr	r2, [pc, #560]	; (8002df8 <inputseria+0x2c8>)
 8002bc8:	659a      	str	r2, [r3, #88]	; 0x58
	seria[11].waittime = 224;
 8002bca:	4b88      	ldr	r3, [pc, #544]	; (8002dec <inputseria+0x2bc>)
 8002bcc:	22e0      	movs	r2, #224	; 0xe0
 8002bce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	seria[12].interval = 1047;
 8002bd2:	4b86      	ldr	r3, [pc, #536]	; (8002dec <inputseria+0x2bc>)
 8002bd4:	4a8b      	ldr	r2, [pc, #556]	; (8002e04 <inputseria+0x2d4>)
 8002bd6:	661a      	str	r2, [r3, #96]	; 0x60
	seria[12].waittime = 224;
 8002bd8:	4b84      	ldr	r3, [pc, #528]	; (8002dec <inputseria+0x2bc>)
 8002bda:	22e0      	movs	r2, #224	; 0xe0
 8002bdc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	seria[13].interval = 988;
 8002be0:	4b82      	ldr	r3, [pc, #520]	; (8002dec <inputseria+0x2bc>)
 8002be2:	4a85      	ldr	r2, [pc, #532]	; (8002df8 <inputseria+0x2c8>)
 8002be4:	669a      	str	r2, [r3, #104]	; 0x68
	seria[13].waittime = 224;
 8002be6:	4b81      	ldr	r3, [pc, #516]	; (8002dec <inputseria+0x2bc>)
 8002be8:	22e0      	movs	r2, #224	; 0xe0
 8002bea:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	seria[14].interval = 784;
 8002bee:	4b7f      	ldr	r3, [pc, #508]	; (8002dec <inputseria+0x2bc>)
 8002bf0:	4a85      	ldr	r2, [pc, #532]	; (8002e08 <inputseria+0x2d8>)
 8002bf2:	671a      	str	r2, [r3, #112]	; 0x70
	seria[14].waittime = 224;
 8002bf4:	4b7d      	ldr	r3, [pc, #500]	; (8002dec <inputseria+0x2bc>)
 8002bf6:	22e0      	movs	r2, #224	; 0xe0
 8002bf8:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	seria[15].interval = 659;
 8002bfc:	4b7b      	ldr	r3, [pc, #492]	; (8002dec <inputseria+0x2bc>)
 8002bfe:	4a83      	ldr	r2, [pc, #524]	; (8002e0c <inputseria+0x2dc>)
 8002c00:	679a      	str	r2, [r3, #120]	; 0x78
	seria[15].waittime = 1169;
 8002c02:	4b7a      	ldr	r3, [pc, #488]	; (8002dec <inputseria+0x2bc>)
 8002c04:	f240 4291 	movw	r2, #1169	; 0x491
 8002c08:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	seria[16].interval = 587;
 8002c0c:	4b77      	ldr	r3, [pc, #476]	; (8002dec <inputseria+0x2bc>)
 8002c0e:	4a80      	ldr	r2, [pc, #512]	; (8002e10 <inputseria+0x2e0>)
 8002c10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	seria[16].waittime = 224;
 8002c14:	4b75      	ldr	r3, [pc, #468]	; (8002dec <inputseria+0x2bc>)
 8002c16:	22e0      	movs	r2, #224	; 0xe0
 8002c18:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	seria[17].interval = 659;
 8002c1c:	4b73      	ldr	r3, [pc, #460]	; (8002dec <inputseria+0x2bc>)
 8002c1e:	4a7b      	ldr	r2, [pc, #492]	; (8002e0c <inputseria+0x2dc>)
 8002c20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	seria[17].waittime = 224;
 8002c24:	4b71      	ldr	r3, [pc, #452]	; (8002dec <inputseria+0x2bc>)
 8002c26:	22e0      	movs	r2, #224	; 0xe0
 8002c28:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	seria[18].interval = 784;
 8002c2c:	4b6f      	ldr	r3, [pc, #444]	; (8002dec <inputseria+0x2bc>)
 8002c2e:	4a76      	ldr	r2, [pc, #472]	; (8002e08 <inputseria+0x2d8>)
 8002c30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	seria[18].waittime = 224;
 8002c34:	4b6d      	ldr	r3, [pc, #436]	; (8002dec <inputseria+0x2bc>)
 8002c36:	22e0      	movs	r2, #224	; 0xe0
 8002c38:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	seria[19].interval = 659;
 8002c3c:	4b6b      	ldr	r3, [pc, #428]	; (8002dec <inputseria+0x2bc>)
 8002c3e:	4a73      	ldr	r2, [pc, #460]	; (8002e0c <inputseria+0x2dc>)
 8002c40:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	seria[19].waittime = 1400;
 8002c44:	4b69      	ldr	r3, [pc, #420]	; (8002dec <inputseria+0x2bc>)
 8002c46:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8002c4a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	seria[20].interval = 698;
 8002c4e:	4b67      	ldr	r3, [pc, #412]	; (8002dec <inputseria+0x2bc>)
 8002c50:	4a67      	ldr	r2, [pc, #412]	; (8002df0 <inputseria+0x2c0>)
 8002c52:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	seria[20].waittime = 224;
 8002c56:	4b65      	ldr	r3, [pc, #404]	; (8002dec <inputseria+0x2bc>)
 8002c58:	22e0      	movs	r2, #224	; 0xe0
 8002c5a:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	seria[21].interval = 880;
 8002c5e:	4b63      	ldr	r3, [pc, #396]	; (8002dec <inputseria+0x2bc>)
 8002c60:	4a64      	ldr	r2, [pc, #400]	; (8002df4 <inputseria+0x2c4>)
 8002c62:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	seria[21].waittime = 224;
 8002c66:	4b61      	ldr	r3, [pc, #388]	; (8002dec <inputseria+0x2bc>)
 8002c68:	22e0      	movs	r2, #224	; 0xe0
 8002c6a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	seria[22].interval = 988;
 8002c6e:	4b5f      	ldr	r3, [pc, #380]	; (8002dec <inputseria+0x2bc>)
 8002c70:	4a61      	ldr	r2, [pc, #388]	; (8002df8 <inputseria+0x2c8>)
 8002c72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	seria[22].waittime = 462;
 8002c76:	4b5d      	ldr	r3, [pc, #372]	; (8002dec <inputseria+0x2bc>)
 8002c78:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002c7c:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	seria[23].interval = 698;
 8002c80:	4b5a      	ldr	r3, [pc, #360]	; (8002dec <inputseria+0x2bc>)
 8002c82:	4a5b      	ldr	r2, [pc, #364]	; (8002df0 <inputseria+0x2c0>)
 8002c84:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	seria[23].waittime = 224;
 8002c88:	4b58      	ldr	r3, [pc, #352]	; (8002dec <inputseria+0x2bc>)
 8002c8a:	22e0      	movs	r2, #224	; 0xe0
 8002c8c:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
	seria[24].interval = 880;
 8002c90:	4b56      	ldr	r3, [pc, #344]	; (8002dec <inputseria+0x2bc>)
 8002c92:	4a58      	ldr	r2, [pc, #352]	; (8002df4 <inputseria+0x2c4>)
 8002c94:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	seria[24].waittime = 224;
 8002c98:	4b54      	ldr	r3, [pc, #336]	; (8002dec <inputseria+0x2bc>)
 8002c9a:	22e0      	movs	r2, #224	; 0xe0
 8002c9c:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	seria[25].interval = 988;
 8002ca0:	4b52      	ldr	r3, [pc, #328]	; (8002dec <inputseria+0x2bc>)
 8002ca2:	4a55      	ldr	r2, [pc, #340]	; (8002df8 <inputseria+0x2c8>)
 8002ca4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	seria[25].waittime = 462;
 8002ca8:	4b50      	ldr	r3, [pc, #320]	; (8002dec <inputseria+0x2bc>)
 8002caa:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002cae:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
	seria[26].interval = 698;
 8002cb2:	4b4e      	ldr	r3, [pc, #312]	; (8002dec <inputseria+0x2bc>)
 8002cb4:	4a4e      	ldr	r2, [pc, #312]	; (8002df0 <inputseria+0x2c0>)
 8002cb6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	seria[26].waittime = 224;
 8002cba:	4b4c      	ldr	r3, [pc, #304]	; (8002dec <inputseria+0x2bc>)
 8002cbc:	22e0      	movs	r2, #224	; 0xe0
 8002cbe:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
	seria[27].interval = 880;
 8002cc2:	4b4a      	ldr	r3, [pc, #296]	; (8002dec <inputseria+0x2bc>)
 8002cc4:	4a4b      	ldr	r2, [pc, #300]	; (8002df4 <inputseria+0x2c4>)
 8002cc6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	seria[27].waittime = 224;
 8002cca:	4b48      	ldr	r3, [pc, #288]	; (8002dec <inputseria+0x2bc>)
 8002ccc:	22e0      	movs	r2, #224	; 0xe0
 8002cce:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	seria[28].interval = 988;
 8002cd2:	4b46      	ldr	r3, [pc, #280]	; (8002dec <inputseria+0x2bc>)
 8002cd4:	4a48      	ldr	r2, [pc, #288]	; (8002df8 <inputseria+0x2c8>)
 8002cd6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	seria[28].waittime = 224;
 8002cda:	4b44      	ldr	r3, [pc, #272]	; (8002dec <inputseria+0x2bc>)
 8002cdc:	22e0      	movs	r2, #224	; 0xe0
 8002cde:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	seria[29].interval = 1319;
 8002ce2:	4b42      	ldr	r3, [pc, #264]	; (8002dec <inputseria+0x2bc>)
 8002ce4:	4a45      	ldr	r2, [pc, #276]	; (8002dfc <inputseria+0x2cc>)
 8002ce6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	seria[29].waittime = 224;
 8002cea:	4b40      	ldr	r3, [pc, #256]	; (8002dec <inputseria+0x2bc>)
 8002cec:	22e0      	movs	r2, #224	; 0xe0
 8002cee:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
	seria[30].interval = 1175;
 8002cf2:	4b3e      	ldr	r3, [pc, #248]	; (8002dec <inputseria+0x2bc>)
 8002cf4:	4a42      	ldr	r2, [pc, #264]	; (8002e00 <inputseria+0x2d0>)
 8002cf6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	seria[30].waittime = 462;
 8002cfa:	4b3c      	ldr	r3, [pc, #240]	; (8002dec <inputseria+0x2bc>)
 8002cfc:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002d00:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
	seria[31].interval = 988;
 8002d04:	4b39      	ldr	r3, [pc, #228]	; (8002dec <inputseria+0x2bc>)
 8002d06:	4a3c      	ldr	r2, [pc, #240]	; (8002df8 <inputseria+0x2c8>)
 8002d08:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	seria[31].waittime = 224;
 8002d0c:	4b37      	ldr	r3, [pc, #220]	; (8002dec <inputseria+0x2bc>)
 8002d0e:	22e0      	movs	r2, #224	; 0xe0
 8002d10:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
	seria[32].interval = 1047;
 8002d14:	4b35      	ldr	r3, [pc, #212]	; (8002dec <inputseria+0x2bc>)
 8002d16:	4a3b      	ldr	r2, [pc, #236]	; (8002e04 <inputseria+0x2d4>)
 8002d18:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	seria[32].waittime = 224;
 8002d1c:	4b33      	ldr	r3, [pc, #204]	; (8002dec <inputseria+0x2bc>)
 8002d1e:	22e0      	movs	r2, #224	; 0xe0
 8002d20:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	seria[33].interval = 1319;
 8002d24:	4b31      	ldr	r3, [pc, #196]	; (8002dec <inputseria+0x2bc>)
 8002d26:	4a35      	ldr	r2, [pc, #212]	; (8002dfc <inputseria+0x2cc>)
 8002d28:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	seria[33].waittime = 224;
 8002d2c:	4b2f      	ldr	r3, [pc, #188]	; (8002dec <inputseria+0x2bc>)
 8002d2e:	22e0      	movs	r2, #224	; 0xe0
 8002d30:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	seria[34].interval = 988;
 8002d34:	4b2d      	ldr	r3, [pc, #180]	; (8002dec <inputseria+0x2bc>)
 8002d36:	4a30      	ldr	r2, [pc, #192]	; (8002df8 <inputseria+0x2c8>)
 8002d38:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	seria[34].waittime = 224;
 8002d3c:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <inputseria+0x2bc>)
 8002d3e:	22e0      	movs	r2, #224	; 0xe0
 8002d40:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
	seria[35].interval = 784;
 8002d44:	4b29      	ldr	r3, [pc, #164]	; (8002dec <inputseria+0x2bc>)
 8002d46:	4a30      	ldr	r2, [pc, #192]	; (8002e08 <inputseria+0x2d8>)
 8002d48:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	seria[35].waittime = 1169;
 8002d4c:	4b27      	ldr	r3, [pc, #156]	; (8002dec <inputseria+0x2bc>)
 8002d4e:	f240 4291 	movw	r2, #1169	; 0x491
 8002d52:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
	seria[36].interval = 988;
 8002d56:	4b25      	ldr	r3, [pc, #148]	; (8002dec <inputseria+0x2bc>)
 8002d58:	4a27      	ldr	r2, [pc, #156]	; (8002df8 <inputseria+0x2c8>)
 8002d5a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	seria[36].waittime = 224;
 8002d5e:	4b23      	ldr	r3, [pc, #140]	; (8002dec <inputseria+0x2bc>)
 8002d60:	22e0      	movs	r2, #224	; 0xe0
 8002d62:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
	seria[37].interval = 784;
 8002d66:	4b21      	ldr	r3, [pc, #132]	; (8002dec <inputseria+0x2bc>)
 8002d68:	4a27      	ldr	r2, [pc, #156]	; (8002e08 <inputseria+0x2d8>)
 8002d6a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	seria[37].waittime = 224;
 8002d6e:	4b1f      	ldr	r3, [pc, #124]	; (8002dec <inputseria+0x2bc>)
 8002d70:	22e0      	movs	r2, #224	; 0xe0
 8002d72:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
	seria[38].interval = 587;
 8002d76:	4b1d      	ldr	r3, [pc, #116]	; (8002dec <inputseria+0x2bc>)
 8002d78:	4a25      	ldr	r2, [pc, #148]	; (8002e10 <inputseria+0x2e0>)
 8002d7a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	seria[38].waittime = 224;
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	; (8002dec <inputseria+0x2bc>)
 8002d80:	22e0      	movs	r2, #224	; 0xe0
 8002d82:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	seria[39].interval = 659;
 8002d86:	4b19      	ldr	r3, [pc, #100]	; (8002dec <inputseria+0x2bc>)
 8002d88:	4a20      	ldr	r2, [pc, #128]	; (8002e0c <inputseria+0x2dc>)
 8002d8a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	seria[39].waittime = 1400;
 8002d8e:	4b17      	ldr	r3, [pc, #92]	; (8002dec <inputseria+0x2bc>)
 8002d90:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8002d94:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
	seria[40].interval = 294;
 8002d98:	4b14      	ldr	r3, [pc, #80]	; (8002dec <inputseria+0x2bc>)
 8002d9a:	4a1e      	ldr	r2, [pc, #120]	; (8002e14 <inputseria+0x2e4>)
 8002d9c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	seria[40].waittime = 224;
 8002da0:	4b12      	ldr	r3, [pc, #72]	; (8002dec <inputseria+0x2bc>)
 8002da2:	22e0      	movs	r2, #224	; 0xe0
 8002da4:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
	seria[41].interval = 330;
 8002da8:	4b10      	ldr	r3, [pc, #64]	; (8002dec <inputseria+0x2bc>)
 8002daa:	4a1b      	ldr	r2, [pc, #108]	; (8002e18 <inputseria+0x2e8>)
 8002dac:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	seria[41].waittime = 224;
 8002db0:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <inputseria+0x2bc>)
 8002db2:	22e0      	movs	r2, #224	; 0xe0
 8002db4:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
	seria[42].interval = 349;
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <inputseria+0x2bc>)
 8002dba:	4a18      	ldr	r2, [pc, #96]	; (8002e1c <inputseria+0x2ec>)
 8002dbc:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	seria[42].waittime = 462;
 8002dc0:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <inputseria+0x2bc>)
 8002dc2:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002dc6:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	seria[43].interval = 392;
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <inputseria+0x2bc>)
 8002dcc:	4a14      	ldr	r2, [pc, #80]	; (8002e20 <inputseria+0x2f0>)
 8002dce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	seria[43].waittime = 224;
 8002dd2:	4b06      	ldr	r3, [pc, #24]	; (8002dec <inputseria+0x2bc>)
 8002dd4:	22e0      	movs	r2, #224	; 0xe0
 8002dd6:	f8a3 215c 	strh.w	r2, [r3, #348]	; 0x15c
	seria[44].interval = 440;
 8002dda:	4b04      	ldr	r3, [pc, #16]	; (8002dec <inputseria+0x2bc>)
 8002ddc:	4a11      	ldr	r2, [pc, #68]	; (8002e24 <inputseria+0x2f4>)
 8002dde:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	seria[44].waittime = 224;
 8002de2:	4b02      	ldr	r3, [pc, #8]	; (8002dec <inputseria+0x2bc>)
 8002de4:	22e0      	movs	r2, #224	; 0xe0
 8002de6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8002dea:	e01d      	b.n	8002e28 <inputseria+0x2f8>
 8002dec:	200003c4 	.word	0x200003c4
 8002df0:	442e8000 	.word	0x442e8000
 8002df4:	445c0000 	.word	0x445c0000
 8002df8:	44770000 	.word	0x44770000
 8002dfc:	44a4e000 	.word	0x44a4e000
 8002e00:	4492e000 	.word	0x4492e000
 8002e04:	4482e000 	.word	0x4482e000
 8002e08:	44440000 	.word	0x44440000
 8002e0c:	4424c000 	.word	0x4424c000
 8002e10:	4412c000 	.word	0x4412c000
 8002e14:	43930000 	.word	0x43930000
 8002e18:	43a50000 	.word	0x43a50000
 8002e1c:	43ae8000 	.word	0x43ae8000
 8002e20:	43c40000 	.word	0x43c40000
 8002e24:	43dc0000 	.word	0x43dc0000
	seria[45].interval = 494;
 8002e28:	4bb9      	ldr	r3, [pc, #740]	; (8003110 <inputseria+0x5e0>)
 8002e2a:	4aba      	ldr	r2, [pc, #744]	; (8003114 <inputseria+0x5e4>)
 8002e2c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	seria[45].waittime = 462;
 8002e30:	4bb7      	ldr	r3, [pc, #732]	; (8003110 <inputseria+0x5e0>)
 8002e32:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002e36:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
	seria[46].interval = 523;
 8002e3a:	4bb5      	ldr	r3, [pc, #724]	; (8003110 <inputseria+0x5e0>)
 8002e3c:	4ab6      	ldr	r2, [pc, #728]	; (8003118 <inputseria+0x5e8>)
 8002e3e:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	seria[46].waittime = 224;
 8002e42:	4bb3      	ldr	r3, [pc, #716]	; (8003110 <inputseria+0x5e0>)
 8002e44:	22e0      	movs	r2, #224	; 0xe0
 8002e46:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	seria[47].interval = 494;
 8002e4a:	4bb1      	ldr	r3, [pc, #708]	; (8003110 <inputseria+0x5e0>)
 8002e4c:	4ab1      	ldr	r2, [pc, #708]	; (8003114 <inputseria+0x5e4>)
 8002e4e:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	seria[47].waittime = 224;
 8002e52:	4baf      	ldr	r3, [pc, #700]	; (8003110 <inputseria+0x5e0>)
 8002e54:	22e0      	movs	r2, #224	; 0xe0
 8002e56:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	seria[48].interval = 330;
 8002e5a:	4bad      	ldr	r3, [pc, #692]	; (8003110 <inputseria+0x5e0>)
 8002e5c:	4aaf      	ldr	r2, [pc, #700]	; (800311c <inputseria+0x5ec>)
 8002e5e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	seria[48].waittime = 1400;
 8002e62:	4bab      	ldr	r3, [pc, #684]	; (8003110 <inputseria+0x5e0>)
 8002e64:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8002e68:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184
	seria[49].interval = 698;
 8002e6c:	4ba8      	ldr	r3, [pc, #672]	; (8003110 <inputseria+0x5e0>)
 8002e6e:	4aac      	ldr	r2, [pc, #688]	; (8003120 <inputseria+0x5f0>)
 8002e70:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	seria[49].waittime = 224;
 8002e74:	4ba6      	ldr	r3, [pc, #664]	; (8003110 <inputseria+0x5e0>)
 8002e76:	22e0      	movs	r2, #224	; 0xe0
 8002e78:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
	seria[50].interval = 784;
 8002e7c:	4ba4      	ldr	r3, [pc, #656]	; (8003110 <inputseria+0x5e0>)
 8002e7e:	4aa9      	ldr	r2, [pc, #676]	; (8003124 <inputseria+0x5f4>)
 8002e80:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	seria[50].waittime = 224;
 8002e84:	4ba2      	ldr	r3, [pc, #648]	; (8003110 <inputseria+0x5e0>)
 8002e86:	22e0      	movs	r2, #224	; 0xe0
 8002e88:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
	seria[51].interval = 880;
 8002e8c:	4ba0      	ldr	r3, [pc, #640]	; (8003110 <inputseria+0x5e0>)
 8002e8e:	4aa6      	ldr	r2, [pc, #664]	; (8003128 <inputseria+0x5f8>)
 8002e90:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	seria[51].waittime = 462;
 8002e94:	4b9e      	ldr	r3, [pc, #632]	; (8003110 <inputseria+0x5e0>)
 8002e96:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002e9a:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
	seria[52].interval = 988;
 8002e9e:	4b9c      	ldr	r3, [pc, #624]	; (8003110 <inputseria+0x5e0>)
 8002ea0:	4aa2      	ldr	r2, [pc, #648]	; (800312c <inputseria+0x5fc>)
 8002ea2:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	seria[52].waittime = 224;
 8002ea6:	4b9a      	ldr	r3, [pc, #616]	; (8003110 <inputseria+0x5e0>)
 8002ea8:	22e0      	movs	r2, #224	; 0xe0
 8002eaa:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
	seria[53].interval = 1047;
 8002eae:	4b98      	ldr	r3, [pc, #608]	; (8003110 <inputseria+0x5e0>)
 8002eb0:	4a9f      	ldr	r2, [pc, #636]	; (8003130 <inputseria+0x600>)
 8002eb2:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	seria[53].waittime = 224;
 8002eb6:	4b96      	ldr	r3, [pc, #600]	; (8003110 <inputseria+0x5e0>)
 8002eb8:	22e0      	movs	r2, #224	; 0xe0
 8002eba:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
	seria[54].interval = 1175;
 8002ebe:	4b94      	ldr	r3, [pc, #592]	; (8003110 <inputseria+0x5e0>)
 8002ec0:	4a9c      	ldr	r2, [pc, #624]	; (8003134 <inputseria+0x604>)
 8002ec2:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	seria[54].waittime = 462;
 8002ec6:	4b92      	ldr	r3, [pc, #584]	; (8003110 <inputseria+0x5e0>)
 8002ec8:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002ecc:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
	seria[55].interval = 1319;
 8002ed0:	4b8f      	ldr	r3, [pc, #572]	; (8003110 <inputseria+0x5e0>)
 8002ed2:	4a99      	ldr	r2, [pc, #612]	; (8003138 <inputseria+0x608>)
 8002ed4:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	seria[55].waittime = 224;
 8002ed8:	4b8d      	ldr	r3, [pc, #564]	; (8003110 <inputseria+0x5e0>)
 8002eda:	22e0      	movs	r2, #224	; 0xe0
 8002edc:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
	seria[56].interval = 1397;
 8002ee0:	4b8b      	ldr	r3, [pc, #556]	; (8003110 <inputseria+0x5e0>)
 8002ee2:	4a96      	ldr	r2, [pc, #600]	; (800313c <inputseria+0x60c>)
 8002ee4:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
	seria[56].waittime = 224;
 8002ee8:	4b89      	ldr	r3, [pc, #548]	; (8003110 <inputseria+0x5e0>)
 8002eea:	22e0      	movs	r2, #224	; 0xe0
 8002eec:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
	seria[57].interval = 1568;
 8002ef0:	4b87      	ldr	r3, [pc, #540]	; (8003110 <inputseria+0x5e0>)
 8002ef2:	4a93      	ldr	r2, [pc, #588]	; (8003140 <inputseria+0x610>)
 8002ef4:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
	seria[57].waittime = 1400;
 8002ef8:	4b85      	ldr	r3, [pc, #532]	; (8003110 <inputseria+0x5e0>)
 8002efa:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8002efe:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
	seria[58].interval = 294;
 8002f02:	4b83      	ldr	r3, [pc, #524]	; (8003110 <inputseria+0x5e0>)
 8002f04:	4a8f      	ldr	r2, [pc, #572]	; (8003144 <inputseria+0x614>)
 8002f06:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	seria[58].waittime = 224;
 8002f0a:	4b81      	ldr	r3, [pc, #516]	; (8003110 <inputseria+0x5e0>)
 8002f0c:	22e0      	movs	r2, #224	; 0xe0
 8002f0e:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
	seria[59].interval = 330;
 8002f12:	4b7f      	ldr	r3, [pc, #508]	; (8003110 <inputseria+0x5e0>)
 8002f14:	4a81      	ldr	r2, [pc, #516]	; (800311c <inputseria+0x5ec>)
 8002f16:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	seria[59].waittime = 224;
 8002f1a:	4b7d      	ldr	r3, [pc, #500]	; (8003110 <inputseria+0x5e0>)
 8002f1c:	22e0      	movs	r2, #224	; 0xe0
 8002f1e:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
	seria[60].interval = 349;
 8002f22:	4b7b      	ldr	r3, [pc, #492]	; (8003110 <inputseria+0x5e0>)
 8002f24:	4a88      	ldr	r2, [pc, #544]	; (8003148 <inputseria+0x618>)
 8002f26:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	seria[60].waittime = 462;
 8002f2a:	4b79      	ldr	r3, [pc, #484]	; (8003110 <inputseria+0x5e0>)
 8002f2c:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002f30:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
	seria[61].interval = 392;
 8002f34:	4b76      	ldr	r3, [pc, #472]	; (8003110 <inputseria+0x5e0>)
 8002f36:	4a85      	ldr	r2, [pc, #532]	; (800314c <inputseria+0x61c>)
 8002f38:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	seria[61].waittime = 224;
 8002f3c:	4b74      	ldr	r3, [pc, #464]	; (8003110 <inputseria+0x5e0>)
 8002f3e:	22e0      	movs	r2, #224	; 0xe0
 8002f40:	f8a3 21ec 	strh.w	r2, [r3, #492]	; 0x1ec
	seria[62].interval = 440;
 8002f44:	4b72      	ldr	r3, [pc, #456]	; (8003110 <inputseria+0x5e0>)
 8002f46:	4a82      	ldr	r2, [pc, #520]	; (8003150 <inputseria+0x620>)
 8002f48:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	seria[62].waittime = 224;
 8002f4c:	4b70      	ldr	r3, [pc, #448]	; (8003110 <inputseria+0x5e0>)
 8002f4e:	22e0      	movs	r2, #224	; 0xe0
 8002f50:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
	seria[63].interval = 494;
 8002f54:	4b6e      	ldr	r3, [pc, #440]	; (8003110 <inputseria+0x5e0>)
 8002f56:	4a6f      	ldr	r2, [pc, #444]	; (8003114 <inputseria+0x5e4>)
 8002f58:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	seria[63].waittime = 462;
 8002f5c:	4b6c      	ldr	r3, [pc, #432]	; (8003110 <inputseria+0x5e0>)
 8002f5e:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002f62:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	seria[64].interval = 523;
 8002f66:	4b6a      	ldr	r3, [pc, #424]	; (8003110 <inputseria+0x5e0>)
 8002f68:	4a6b      	ldr	r2, [pc, #428]	; (8003118 <inputseria+0x5e8>)
 8002f6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	seria[64].waittime = 224;
 8002f6e:	4b68      	ldr	r3, [pc, #416]	; (8003110 <inputseria+0x5e0>)
 8002f70:	22e0      	movs	r2, #224	; 0xe0
 8002f72:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	seria[65].interval = 494;
 8002f76:	4b66      	ldr	r3, [pc, #408]	; (8003110 <inputseria+0x5e0>)
 8002f78:	4a66      	ldr	r2, [pc, #408]	; (8003114 <inputseria+0x5e4>)
 8002f7a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	seria[65].waittime = 224;
 8002f7e:	4b64      	ldr	r3, [pc, #400]	; (8003110 <inputseria+0x5e0>)
 8002f80:	22e0      	movs	r2, #224	; 0xe0
 8002f82:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
	seria[66].interval = 330;
 8002f86:	4b62      	ldr	r3, [pc, #392]	; (8003110 <inputseria+0x5e0>)
 8002f88:	4a64      	ldr	r2, [pc, #400]	; (800311c <inputseria+0x5ec>)
 8002f8a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	seria[66].waittime = 1400;
 8002f8e:	4b60      	ldr	r3, [pc, #384]	; (8003110 <inputseria+0x5e0>)
 8002f90:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8002f94:	f8a3 2214 	strh.w	r2, [r3, #532]	; 0x214
	seria[67].interval = 698;
 8002f98:	4b5d      	ldr	r3, [pc, #372]	; (8003110 <inputseria+0x5e0>)
 8002f9a:	4a61      	ldr	r2, [pc, #388]	; (8003120 <inputseria+0x5f0>)
 8002f9c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	seria[67].waittime = 224;
 8002fa0:	4b5b      	ldr	r3, [pc, #364]	; (8003110 <inputseria+0x5e0>)
 8002fa2:	22e0      	movs	r2, #224	; 0xe0
 8002fa4:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
	seria[68].interval = 659;
 8002fa8:	4b59      	ldr	r3, [pc, #356]	; (8003110 <inputseria+0x5e0>)
 8002faa:	4a6a      	ldr	r2, [pc, #424]	; (8003154 <inputseria+0x624>)
 8002fac:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	seria[68].waittime = 105;
 8002fb0:	4b57      	ldr	r3, [pc, #348]	; (8003110 <inputseria+0x5e0>)
 8002fb2:	2269      	movs	r2, #105	; 0x69
 8002fb4:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
	seria[69].interval = 880;
 8002fb8:	4b55      	ldr	r3, [pc, #340]	; (8003110 <inputseria+0x5e0>)
 8002fba:	4a5b      	ldr	r2, [pc, #364]	; (8003128 <inputseria+0x5f8>)
 8002fbc:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	seria[69].waittime = 224;
 8002fc0:	4b53      	ldr	r3, [pc, #332]	; (8003110 <inputseria+0x5e0>)
 8002fc2:	22e0      	movs	r2, #224	; 0xe0
 8002fc4:	f8a3 222c 	strh.w	r2, [r3, #556]	; 0x22c
	seria[70].interval = 784;
 8002fc8:	4b51      	ldr	r3, [pc, #324]	; (8003110 <inputseria+0x5e0>)
 8002fca:	4a56      	ldr	r2, [pc, #344]	; (8003124 <inputseria+0x5f4>)
 8002fcc:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	seria[70].waittime = 105;
 8002fd0:	4b4f      	ldr	r3, [pc, #316]	; (8003110 <inputseria+0x5e0>)
 8002fd2:	2269      	movs	r2, #105	; 0x69
 8002fd4:	f8a3 2234 	strh.w	r2, [r3, #564]	; 0x234
	seria[71].interval = 988;
 8002fd8:	4b4d      	ldr	r3, [pc, #308]	; (8003110 <inputseria+0x5e0>)
 8002fda:	4a54      	ldr	r2, [pc, #336]	; (800312c <inputseria+0x5fc>)
 8002fdc:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	seria[71].waittime = 224;
 8002fe0:	4b4b      	ldr	r3, [pc, #300]	; (8003110 <inputseria+0x5e0>)
 8002fe2:	22e0      	movs	r2, #224	; 0xe0
 8002fe4:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
	seria[72].interval = 880;
 8002fe8:	4b49      	ldr	r3, [pc, #292]	; (8003110 <inputseria+0x5e0>)
 8002fea:	4a4f      	ldr	r2, [pc, #316]	; (8003128 <inputseria+0x5f8>)
 8002fec:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	seria[72].waittime = 105;
 8002ff0:	4b47      	ldr	r3, [pc, #284]	; (8003110 <inputseria+0x5e0>)
 8002ff2:	2269      	movs	r2, #105	; 0x69
 8002ff4:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
	seria[73].interval = 1047;
 8002ff8:	4b45      	ldr	r3, [pc, #276]	; (8003110 <inputseria+0x5e0>)
 8002ffa:	4a4d      	ldr	r2, [pc, #308]	; (8003130 <inputseria+0x600>)
 8002ffc:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	seria[73].waittime = 224;
 8003000:	4b43      	ldr	r3, [pc, #268]	; (8003110 <inputseria+0x5e0>)
 8003002:	22e0      	movs	r2, #224	; 0xe0
 8003004:	f8a3 224c 	strh.w	r2, [r3, #588]	; 0x24c
	seria[74].interval = 988;
 8003008:	4b41      	ldr	r3, [pc, #260]	; (8003110 <inputseria+0x5e0>)
 800300a:	4a48      	ldr	r2, [pc, #288]	; (800312c <inputseria+0x5fc>)
 800300c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	seria[74].waittime = 105;
 8003010:	4b3f      	ldr	r3, [pc, #252]	; (8003110 <inputseria+0x5e0>)
 8003012:	2269      	movs	r2, #105	; 0x69
 8003014:	f8a3 2254 	strh.w	r2, [r3, #596]	; 0x254
	seria[75].interval = 1175;
 8003018:	4b3d      	ldr	r3, [pc, #244]	; (8003110 <inputseria+0x5e0>)
 800301a:	4a46      	ldr	r2, [pc, #280]	; (8003134 <inputseria+0x604>)
 800301c:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	seria[75].waittime = 224;
 8003020:	4b3b      	ldr	r3, [pc, #236]	; (8003110 <inputseria+0x5e0>)
 8003022:	22e0      	movs	r2, #224	; 0xe0
 8003024:	f8a3 225c 	strh.w	r2, [r3, #604]	; 0x25c
	seria[76].interval = 1047;
 8003028:	4b39      	ldr	r3, [pc, #228]	; (8003110 <inputseria+0x5e0>)
 800302a:	4a41      	ldr	r2, [pc, #260]	; (8003130 <inputseria+0x600>)
 800302c:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	seria[76].waittime = 105;
 8003030:	4b37      	ldr	r3, [pc, #220]	; (8003110 <inputseria+0x5e0>)
 8003032:	2269      	movs	r2, #105	; 0x69
 8003034:	f8a3 2264 	strh.w	r2, [r3, #612]	; 0x264
	seria[77].interval = 1319;
 8003038:	4b35      	ldr	r3, [pc, #212]	; (8003110 <inputseria+0x5e0>)
 800303a:	4a3f      	ldr	r2, [pc, #252]	; (8003138 <inputseria+0x608>)
 800303c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	seria[77].waittime = 224;
 8003040:	4b33      	ldr	r3, [pc, #204]	; (8003110 <inputseria+0x5e0>)
 8003042:	22e0      	movs	r2, #224	; 0xe0
 8003044:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
	seria[78].interval = 1175;
 8003048:	4b31      	ldr	r3, [pc, #196]	; (8003110 <inputseria+0x5e0>)
 800304a:	4a3a      	ldr	r2, [pc, #232]	; (8003134 <inputseria+0x604>)
 800304c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	seria[78].waittime = 105;
 8003050:	4b2f      	ldr	r3, [pc, #188]	; (8003110 <inputseria+0x5e0>)
 8003052:	2269      	movs	r2, #105	; 0x69
 8003054:	f8a3 2274 	strh.w	r2, [r3, #628]	; 0x274
	seria[79].interval = 1397;
 8003058:	4b2d      	ldr	r3, [pc, #180]	; (8003110 <inputseria+0x5e0>)
 800305a:	4a38      	ldr	r2, [pc, #224]	; (800313c <inputseria+0x60c>)
 800305c:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	seria[79].waittime = 224;
 8003060:	4b2b      	ldr	r3, [pc, #172]	; (8003110 <inputseria+0x5e0>)
 8003062:	22e0      	movs	r2, #224	; 0xe0
 8003064:	f8a3 227c 	strh.w	r2, [r3, #636]	; 0x27c
	seria[80].interval = 1319;
 8003068:	4b29      	ldr	r3, [pc, #164]	; (8003110 <inputseria+0x5e0>)
 800306a:	4a33      	ldr	r2, [pc, #204]	; (8003138 <inputseria+0x608>)
 800306c:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	seria[80].waittime = 105;
 8003070:	4b27      	ldr	r3, [pc, #156]	; (8003110 <inputseria+0x5e0>)
 8003072:	2269      	movs	r2, #105	; 0x69
 8003074:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	seria[81].interval = 988;
 8003078:	4b25      	ldr	r3, [pc, #148]	; (8003110 <inputseria+0x5e0>)
 800307a:	4a2c      	ldr	r2, [pc, #176]	; (800312c <inputseria+0x5fc>)
 800307c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	seria[81].waittime = 105;
 8003080:	4b23      	ldr	r3, [pc, #140]	; (8003110 <inputseria+0x5e0>)
 8003082:	2269      	movs	r2, #105	; 0x69
 8003084:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
	seria[82].interval = 1047;
 8003088:	4b21      	ldr	r3, [pc, #132]	; (8003110 <inputseria+0x5e0>)
 800308a:	4a29      	ldr	r2, [pc, #164]	; (8003130 <inputseria+0x600>)
 800308c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	seria[82].waittime = 105;
 8003090:	4b1f      	ldr	r3, [pc, #124]	; (8003110 <inputseria+0x5e0>)
 8003092:	2269      	movs	r2, #105	; 0x69
 8003094:	f8a3 2294 	strh.w	r2, [r3, #660]	; 0x294
	seria[83].interval = 880;
 8003098:	4b1d      	ldr	r3, [pc, #116]	; (8003110 <inputseria+0x5e0>)
 800309a:	4a23      	ldr	r2, [pc, #140]	; (8003128 <inputseria+0x5f8>)
 800309c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	seria[83].waittime = 105;
 80030a0:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <inputseria+0x5e0>)
 80030a2:	2269      	movs	r2, #105	; 0x69
 80030a4:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
	seria[84].interval = 988;
 80030a8:	4b19      	ldr	r3, [pc, #100]	; (8003110 <inputseria+0x5e0>)
 80030aa:	4a20      	ldr	r2, [pc, #128]	; (800312c <inputseria+0x5fc>)
 80030ac:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	seria[84].waittime = 2576;
 80030b0:	4b17      	ldr	r3, [pc, #92]	; (8003110 <inputseria+0x5e0>)
 80030b2:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 80030b6:	f8a3 22a4 	strh.w	r2, [r3, #676]	; 0x2a4
	seria[85].interval = 698;
 80030ba:	4b15      	ldr	r3, [pc, #84]	; (8003110 <inputseria+0x5e0>)
 80030bc:	4a18      	ldr	r2, [pc, #96]	; (8003120 <inputseria+0x5f0>)
 80030be:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	seria[85].waittime = 224;
 80030c2:	4b13      	ldr	r3, [pc, #76]	; (8003110 <inputseria+0x5e0>)
 80030c4:	22e0      	movs	r2, #224	; 0xe0
 80030c6:	f8a3 22ac 	strh.w	r2, [r3, #684]	; 0x2ac
	seria[86].interval = 880;
 80030ca:	4b11      	ldr	r3, [pc, #68]	; (8003110 <inputseria+0x5e0>)
 80030cc:	4a16      	ldr	r2, [pc, #88]	; (8003128 <inputseria+0x5f8>)
 80030ce:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
	seria[86].waittime = 224;
 80030d2:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <inputseria+0x5e0>)
 80030d4:	22e0      	movs	r2, #224	; 0xe0
 80030d6:	f8a3 22b4 	strh.w	r2, [r3, #692]	; 0x2b4
	seria[87].interval = 988;
 80030da:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <inputseria+0x5e0>)
 80030dc:	4a13      	ldr	r2, [pc, #76]	; (800312c <inputseria+0x5fc>)
 80030de:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
	seria[87].waittime = 462;
 80030e2:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <inputseria+0x5e0>)
 80030e4:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80030e8:	f8a3 22bc 	strh.w	r2, [r3, #700]	; 0x2bc
	seria[88].interval = 698;
 80030ec:	4b08      	ldr	r3, [pc, #32]	; (8003110 <inputseria+0x5e0>)
 80030ee:	4a0c      	ldr	r2, [pc, #48]	; (8003120 <inputseria+0x5f0>)
 80030f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
	seria[88].waittime = 224;
 80030f4:	4b06      	ldr	r3, [pc, #24]	; (8003110 <inputseria+0x5e0>)
 80030f6:	22e0      	movs	r2, #224	; 0xe0
 80030f8:	f8a3 22c4 	strh.w	r2, [r3, #708]	; 0x2c4
	seria[89].interval = 880;
 80030fc:	4b04      	ldr	r3, [pc, #16]	; (8003110 <inputseria+0x5e0>)
 80030fe:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <inputseria+0x5f8>)
 8003100:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
	seria[89].waittime = 224;
 8003104:	4b02      	ldr	r3, [pc, #8]	; (8003110 <inputseria+0x5e0>)
 8003106:	22e0      	movs	r2, #224	; 0xe0
 8003108:	f8a3 22cc 	strh.w	r2, [r3, #716]	; 0x2cc
 800310c:	e024      	b.n	8003158 <inputseria+0x628>
 800310e:	bf00      	nop
 8003110:	200003c4 	.word	0x200003c4
 8003114:	43f70000 	.word	0x43f70000
 8003118:	4402c000 	.word	0x4402c000
 800311c:	43a50000 	.word	0x43a50000
 8003120:	442e8000 	.word	0x442e8000
 8003124:	44440000 	.word	0x44440000
 8003128:	445c0000 	.word	0x445c0000
 800312c:	44770000 	.word	0x44770000
 8003130:	4482e000 	.word	0x4482e000
 8003134:	4492e000 	.word	0x4492e000
 8003138:	44a4e000 	.word	0x44a4e000
 800313c:	44aea000 	.word	0x44aea000
 8003140:	44c40000 	.word	0x44c40000
 8003144:	43930000 	.word	0x43930000
 8003148:	43ae8000 	.word	0x43ae8000
 800314c:	43c40000 	.word	0x43c40000
 8003150:	43dc0000 	.word	0x43dc0000
 8003154:	4424c000 	.word	0x4424c000
	seria[90].interval = 988;
 8003158:	4bb9      	ldr	r3, [pc, #740]	; (8003440 <inputseria+0x910>)
 800315a:	4aba      	ldr	r2, [pc, #744]	; (8003444 <inputseria+0x914>)
 800315c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
	seria[90].waittime = 462;
 8003160:	4bb7      	ldr	r3, [pc, #732]	; (8003440 <inputseria+0x910>)
 8003162:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003166:	f8a3 22d4 	strh.w	r2, [r3, #724]	; 0x2d4
	seria[91].interval = 698;
 800316a:	4bb5      	ldr	r3, [pc, #724]	; (8003440 <inputseria+0x910>)
 800316c:	4ab6      	ldr	r2, [pc, #728]	; (8003448 <inputseria+0x918>)
 800316e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
	seria[91].waittime = 224;
 8003172:	4bb3      	ldr	r3, [pc, #716]	; (8003440 <inputseria+0x910>)
 8003174:	22e0      	movs	r2, #224	; 0xe0
 8003176:	f8a3 22dc 	strh.w	r2, [r3, #732]	; 0x2dc
	seria[92].interval = 880;
 800317a:	4bb1      	ldr	r3, [pc, #708]	; (8003440 <inputseria+0x910>)
 800317c:	4ab3      	ldr	r2, [pc, #716]	; (800344c <inputseria+0x91c>)
 800317e:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
	seria[92].waittime = 224;
 8003182:	4baf      	ldr	r3, [pc, #700]	; (8003440 <inputseria+0x910>)
 8003184:	22e0      	movs	r2, #224	; 0xe0
 8003186:	f8a3 22e4 	strh.w	r2, [r3, #740]	; 0x2e4
	seria[93].interval = 988;
 800318a:	4bad      	ldr	r3, [pc, #692]	; (8003440 <inputseria+0x910>)
 800318c:	4aad      	ldr	r2, [pc, #692]	; (8003444 <inputseria+0x914>)
 800318e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
	seria[93].waittime = 224;
 8003192:	4bab      	ldr	r3, [pc, #684]	; (8003440 <inputseria+0x910>)
 8003194:	22e0      	movs	r2, #224	; 0xe0
 8003196:	f8a3 22ec 	strh.w	r2, [r3, #748]	; 0x2ec
	seria[94].interval = 1319;
 800319a:	4ba9      	ldr	r3, [pc, #676]	; (8003440 <inputseria+0x910>)
 800319c:	4aac      	ldr	r2, [pc, #688]	; (8003450 <inputseria+0x920>)
 800319e:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
	seria[94].waittime = 224;
 80031a2:	4ba7      	ldr	r3, [pc, #668]	; (8003440 <inputseria+0x910>)
 80031a4:	22e0      	movs	r2, #224	; 0xe0
 80031a6:	f8a3 22f4 	strh.w	r2, [r3, #756]	; 0x2f4
	seria[95].interval = 1175;
 80031aa:	4ba5      	ldr	r3, [pc, #660]	; (8003440 <inputseria+0x910>)
 80031ac:	4aa9      	ldr	r2, [pc, #676]	; (8003454 <inputseria+0x924>)
 80031ae:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	seria[95].waittime = 462;
 80031b2:	4ba3      	ldr	r3, [pc, #652]	; (8003440 <inputseria+0x910>)
 80031b4:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80031b8:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
	seria[96].interval = 988;
 80031bc:	4ba0      	ldr	r3, [pc, #640]	; (8003440 <inputseria+0x910>)
 80031be:	4aa1      	ldr	r2, [pc, #644]	; (8003444 <inputseria+0x914>)
 80031c0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
	seria[96].waittime = 224;
 80031c4:	4b9e      	ldr	r3, [pc, #632]	; (8003440 <inputseria+0x910>)
 80031c6:	22e0      	movs	r2, #224	; 0xe0
 80031c8:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
	seria[97].interval = 1047;
 80031cc:	4b9c      	ldr	r3, [pc, #624]	; (8003440 <inputseria+0x910>)
 80031ce:	4aa2      	ldr	r2, [pc, #648]	; (8003458 <inputseria+0x928>)
 80031d0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	seria[97].waittime = 224;
 80031d4:	4b9a      	ldr	r3, [pc, #616]	; (8003440 <inputseria+0x910>)
 80031d6:	22e0      	movs	r2, #224	; 0xe0
 80031d8:	f8a3 230c 	strh.w	r2, [r3, #780]	; 0x30c
	seria[98].interval = 988;
 80031dc:	4b98      	ldr	r3, [pc, #608]	; (8003440 <inputseria+0x910>)
 80031de:	4a99      	ldr	r2, [pc, #612]	; (8003444 <inputseria+0x914>)
 80031e0:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
	seria[98].waittime = 224;
 80031e4:	4b96      	ldr	r3, [pc, #600]	; (8003440 <inputseria+0x910>)
 80031e6:	22e0      	movs	r2, #224	; 0xe0
 80031e8:	f8a3 2314 	strh.w	r2, [r3, #788]	; 0x314
	seria[99].interval = 784;
 80031ec:	4b94      	ldr	r3, [pc, #592]	; (8003440 <inputseria+0x910>)
 80031ee:	4a9b      	ldr	r2, [pc, #620]	; (800345c <inputseria+0x92c>)
 80031f0:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
	seria[99].waittime = 224;
 80031f4:	4b92      	ldr	r3, [pc, #584]	; (8003440 <inputseria+0x910>)
 80031f6:	22e0      	movs	r2, #224	; 0xe0
 80031f8:	f8a3 231c 	strh.w	r2, [r3, #796]	; 0x31c
	seria[100].interval = 659;
 80031fc:	4b90      	ldr	r3, [pc, #576]	; (8003440 <inputseria+0x910>)
 80031fe:	4a98      	ldr	r2, [pc, #608]	; (8003460 <inputseria+0x930>)
 8003200:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
	seria[100].waittime = 1169;
 8003204:	4b8e      	ldr	r3, [pc, #568]	; (8003440 <inputseria+0x910>)
 8003206:	f240 4291 	movw	r2, #1169	; 0x491
 800320a:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324
	seria[101].interval = 587;
 800320e:	4b8c      	ldr	r3, [pc, #560]	; (8003440 <inputseria+0x910>)
 8003210:	4a94      	ldr	r2, [pc, #592]	; (8003464 <inputseria+0x934>)
 8003212:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	seria[101].waittime = 224;
 8003216:	4b8a      	ldr	r3, [pc, #552]	; (8003440 <inputseria+0x910>)
 8003218:	22e0      	movs	r2, #224	; 0xe0
 800321a:	f8a3 232c 	strh.w	r2, [r3, #812]	; 0x32c
	seria[102].interval = 659;
 800321e:	4b88      	ldr	r3, [pc, #544]	; (8003440 <inputseria+0x910>)
 8003220:	4a8f      	ldr	r2, [pc, #572]	; (8003460 <inputseria+0x930>)
 8003222:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
	seria[102].waittime = 224;
 8003226:	4b86      	ldr	r3, [pc, #536]	; (8003440 <inputseria+0x910>)
 8003228:	22e0      	movs	r2, #224	; 0xe0
 800322a:	f8a3 2334 	strh.w	r2, [r3, #820]	; 0x334
	seria[103].interval = 784;
 800322e:	4b84      	ldr	r3, [pc, #528]	; (8003440 <inputseria+0x910>)
 8003230:	4a8a      	ldr	r2, [pc, #552]	; (800345c <inputseria+0x92c>)
 8003232:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
	seria[103].waittime = 224;
 8003236:	4b82      	ldr	r3, [pc, #520]	; (8003440 <inputseria+0x910>)
 8003238:	22e0      	movs	r2, #224	; 0xe0
 800323a:	f8a3 233c 	strh.w	r2, [r3, #828]	; 0x33c
	seria[104].interval = 659;
 800323e:	4b80      	ldr	r3, [pc, #512]	; (8003440 <inputseria+0x910>)
 8003240:	4a87      	ldr	r2, [pc, #540]	; (8003460 <inputseria+0x930>)
 8003242:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
	seria[104].waittime = 1400;
 8003246:	4b7e      	ldr	r3, [pc, #504]	; (8003440 <inputseria+0x910>)
 8003248:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800324c:	f8a3 2344 	strh.w	r2, [r3, #836]	; 0x344
	seria[105].interval = 698;
 8003250:	4b7b      	ldr	r3, [pc, #492]	; (8003440 <inputseria+0x910>)
 8003252:	4a7d      	ldr	r2, [pc, #500]	; (8003448 <inputseria+0x918>)
 8003254:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	seria[105].waittime = 224;
 8003258:	4b79      	ldr	r3, [pc, #484]	; (8003440 <inputseria+0x910>)
 800325a:	22e0      	movs	r2, #224	; 0xe0
 800325c:	f8a3 234c 	strh.w	r2, [r3, #844]	; 0x34c
	seria[106].interval = 880;
 8003260:	4b77      	ldr	r3, [pc, #476]	; (8003440 <inputseria+0x910>)
 8003262:	4a7a      	ldr	r2, [pc, #488]	; (800344c <inputseria+0x91c>)
 8003264:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
	seria[106].waittime = 224;
 8003268:	4b75      	ldr	r3, [pc, #468]	; (8003440 <inputseria+0x910>)
 800326a:	22e0      	movs	r2, #224	; 0xe0
 800326c:	f8a3 2354 	strh.w	r2, [r3, #852]	; 0x354
	seria[107].interval = 988;
 8003270:	4b73      	ldr	r3, [pc, #460]	; (8003440 <inputseria+0x910>)
 8003272:	4a74      	ldr	r2, [pc, #464]	; (8003444 <inputseria+0x914>)
 8003274:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
	seria[107].waittime = 462;
 8003278:	4b71      	ldr	r3, [pc, #452]	; (8003440 <inputseria+0x910>)
 800327a:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800327e:	f8a3 235c 	strh.w	r2, [r3, #860]	; 0x35c
	seria[108].interval = 698;
 8003282:	4b6f      	ldr	r3, [pc, #444]	; (8003440 <inputseria+0x910>)
 8003284:	4a70      	ldr	r2, [pc, #448]	; (8003448 <inputseria+0x918>)
 8003286:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
	seria[108].waittime = 224;
 800328a:	4b6d      	ldr	r3, [pc, #436]	; (8003440 <inputseria+0x910>)
 800328c:	22e0      	movs	r2, #224	; 0xe0
 800328e:	f8a3 2364 	strh.w	r2, [r3, #868]	; 0x364
	seria[109].interval = 880;
 8003292:	4b6b      	ldr	r3, [pc, #428]	; (8003440 <inputseria+0x910>)
 8003294:	4a6d      	ldr	r2, [pc, #436]	; (800344c <inputseria+0x91c>)
 8003296:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
	seria[109].waittime = 224;
 800329a:	4b69      	ldr	r3, [pc, #420]	; (8003440 <inputseria+0x910>)
 800329c:	22e0      	movs	r2, #224	; 0xe0
 800329e:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
	seria[110].interval = 988;
 80032a2:	4b67      	ldr	r3, [pc, #412]	; (8003440 <inputseria+0x910>)
 80032a4:	4a67      	ldr	r2, [pc, #412]	; (8003444 <inputseria+0x914>)
 80032a6:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
	seria[110].waittime = 462;
 80032aa:	4b65      	ldr	r3, [pc, #404]	; (8003440 <inputseria+0x910>)
 80032ac:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80032b0:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
	seria[111].interval = 698;
 80032b4:	4b62      	ldr	r3, [pc, #392]	; (8003440 <inputseria+0x910>)
 80032b6:	4a64      	ldr	r2, [pc, #400]	; (8003448 <inputseria+0x918>)
 80032b8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
	seria[111].waittime = 224;
 80032bc:	4b60      	ldr	r3, [pc, #384]	; (8003440 <inputseria+0x910>)
 80032be:	22e0      	movs	r2, #224	; 0xe0
 80032c0:	f8a3 237c 	strh.w	r2, [r3, #892]	; 0x37c
	seria[112].interval = 880;
 80032c4:	4b5e      	ldr	r3, [pc, #376]	; (8003440 <inputseria+0x910>)
 80032c6:	4a61      	ldr	r2, [pc, #388]	; (800344c <inputseria+0x91c>)
 80032c8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
	seria[112].waittime = 224;
 80032cc:	4b5c      	ldr	r3, [pc, #368]	; (8003440 <inputseria+0x910>)
 80032ce:	22e0      	movs	r2, #224	; 0xe0
 80032d0:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
	seria[113].interval = 988;
 80032d4:	4b5a      	ldr	r3, [pc, #360]	; (8003440 <inputseria+0x910>)
 80032d6:	4a5b      	ldr	r2, [pc, #364]	; (8003444 <inputseria+0x914>)
 80032d8:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	seria[113].waittime = 224;
 80032dc:	4b58      	ldr	r3, [pc, #352]	; (8003440 <inputseria+0x910>)
 80032de:	22e0      	movs	r2, #224	; 0xe0
 80032e0:	f8a3 238c 	strh.w	r2, [r3, #908]	; 0x38c
	seria[114].interval = 1319;
 80032e4:	4b56      	ldr	r3, [pc, #344]	; (8003440 <inputseria+0x910>)
 80032e6:	4a5a      	ldr	r2, [pc, #360]	; (8003450 <inputseria+0x920>)
 80032e8:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
	seria[114].waittime = 224;
 80032ec:	4b54      	ldr	r3, [pc, #336]	; (8003440 <inputseria+0x910>)
 80032ee:	22e0      	movs	r2, #224	; 0xe0
 80032f0:	f8a3 2394 	strh.w	r2, [r3, #916]	; 0x394
	seria[115].interval = 1175;
 80032f4:	4b52      	ldr	r3, [pc, #328]	; (8003440 <inputseria+0x910>)
 80032f6:	4a57      	ldr	r2, [pc, #348]	; (8003454 <inputseria+0x924>)
 80032f8:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
	seria[115].waittime = 462;
 80032fc:	4b50      	ldr	r3, [pc, #320]	; (8003440 <inputseria+0x910>)
 80032fe:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003302:	f8a3 239c 	strh.w	r2, [r3, #924]	; 0x39c
	seria[116].interval = 988;
 8003306:	4b4e      	ldr	r3, [pc, #312]	; (8003440 <inputseria+0x910>)
 8003308:	4a4e      	ldr	r2, [pc, #312]	; (8003444 <inputseria+0x914>)
 800330a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	seria[116].waittime = 224;
 800330e:	4b4c      	ldr	r3, [pc, #304]	; (8003440 <inputseria+0x910>)
 8003310:	22e0      	movs	r2, #224	; 0xe0
 8003312:	f8a3 23a4 	strh.w	r2, [r3, #932]	; 0x3a4
	seria[117].interval = 1047;
 8003316:	4b4a      	ldr	r3, [pc, #296]	; (8003440 <inputseria+0x910>)
 8003318:	4a4f      	ldr	r2, [pc, #316]	; (8003458 <inputseria+0x928>)
 800331a:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
	seria[117].waittime = 224;
 800331e:	4b48      	ldr	r3, [pc, #288]	; (8003440 <inputseria+0x910>)
 8003320:	22e0      	movs	r2, #224	; 0xe0
 8003322:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
	seria[118].interval = 1319;
 8003326:	4b46      	ldr	r3, [pc, #280]	; (8003440 <inputseria+0x910>)
 8003328:	4a49      	ldr	r2, [pc, #292]	; (8003450 <inputseria+0x920>)
 800332a:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
	seria[118].waittime = 224;
 800332e:	4b44      	ldr	r3, [pc, #272]	; (8003440 <inputseria+0x910>)
 8003330:	22e0      	movs	r2, #224	; 0xe0
 8003332:	f8a3 23b4 	strh.w	r2, [r3, #948]	; 0x3b4
	seria[119].interval = 988;
 8003336:	4b42      	ldr	r3, [pc, #264]	; (8003440 <inputseria+0x910>)
 8003338:	4a42      	ldr	r2, [pc, #264]	; (8003444 <inputseria+0x914>)
 800333a:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
	seria[119].waittime = 224;
 800333e:	4b40      	ldr	r3, [pc, #256]	; (8003440 <inputseria+0x910>)
 8003340:	22e0      	movs	r2, #224	; 0xe0
 8003342:	f8a3 23bc 	strh.w	r2, [r3, #956]	; 0x3bc
	seria[120].interval = 784;
 8003346:	4b3e      	ldr	r3, [pc, #248]	; (8003440 <inputseria+0x910>)
 8003348:	4a44      	ldr	r2, [pc, #272]	; (800345c <inputseria+0x92c>)
 800334a:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
	seria[120].waittime = 1169;
 800334e:	4b3c      	ldr	r3, [pc, #240]	; (8003440 <inputseria+0x910>)
 8003350:	f240 4291 	movw	r2, #1169	; 0x491
 8003354:	f8a3 23c4 	strh.w	r2, [r3, #964]	; 0x3c4
	seria[121].interval = 988;
 8003358:	4b39      	ldr	r3, [pc, #228]	; (8003440 <inputseria+0x910>)
 800335a:	4a3a      	ldr	r2, [pc, #232]	; (8003444 <inputseria+0x914>)
 800335c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
	seria[121].waittime = 224;
 8003360:	4b37      	ldr	r3, [pc, #220]	; (8003440 <inputseria+0x910>)
 8003362:	22e0      	movs	r2, #224	; 0xe0
 8003364:	f8a3 23cc 	strh.w	r2, [r3, #972]	; 0x3cc
	seria[122].interval = 784;
 8003368:	4b35      	ldr	r3, [pc, #212]	; (8003440 <inputseria+0x910>)
 800336a:	4a3c      	ldr	r2, [pc, #240]	; (800345c <inputseria+0x92c>)
 800336c:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
	seria[122].waittime = 224;
 8003370:	4b33      	ldr	r3, [pc, #204]	; (8003440 <inputseria+0x910>)
 8003372:	22e0      	movs	r2, #224	; 0xe0
 8003374:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4
	seria[123].interval = 587;
 8003378:	4b31      	ldr	r3, [pc, #196]	; (8003440 <inputseria+0x910>)
 800337a:	4a3a      	ldr	r2, [pc, #232]	; (8003464 <inputseria+0x934>)
 800337c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
	seria[123].waittime = 224;
 8003380:	4b2f      	ldr	r3, [pc, #188]	; (8003440 <inputseria+0x910>)
 8003382:	22e0      	movs	r2, #224	; 0xe0
 8003384:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
	seria[124].interval = 659;
 8003388:	4b2d      	ldr	r3, [pc, #180]	; (8003440 <inputseria+0x910>)
 800338a:	4a35      	ldr	r2, [pc, #212]	; (8003460 <inputseria+0x930>)
 800338c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
	seria[124].waittime = 1400;
 8003390:	4b2b      	ldr	r3, [pc, #172]	; (8003440 <inputseria+0x910>)
 8003392:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003396:	f8a3 23e4 	strh.w	r2, [r3, #996]	; 0x3e4
	seria[125].interval = 294;
 800339a:	4b29      	ldr	r3, [pc, #164]	; (8003440 <inputseria+0x910>)
 800339c:	4a32      	ldr	r2, [pc, #200]	; (8003468 <inputseria+0x938>)
 800339e:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
	seria[125].waittime = 224;
 80033a2:	4b27      	ldr	r3, [pc, #156]	; (8003440 <inputseria+0x910>)
 80033a4:	22e0      	movs	r2, #224	; 0xe0
 80033a6:	f8a3 23ec 	strh.w	r2, [r3, #1004]	; 0x3ec
	seria[126].interval = 330;
 80033aa:	4b25      	ldr	r3, [pc, #148]	; (8003440 <inputseria+0x910>)
 80033ac:	4a2f      	ldr	r2, [pc, #188]	; (800346c <inputseria+0x93c>)
 80033ae:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
	seria[126].waittime = 224;
 80033b2:	4b23      	ldr	r3, [pc, #140]	; (8003440 <inputseria+0x910>)
 80033b4:	22e0      	movs	r2, #224	; 0xe0
 80033b6:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4
	seria[127].interval = 349;
 80033ba:	4b21      	ldr	r3, [pc, #132]	; (8003440 <inputseria+0x910>)
 80033bc:	4a2c      	ldr	r2, [pc, #176]	; (8003470 <inputseria+0x940>)
 80033be:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
	seria[127].waittime = 462;
 80033c2:	4b1f      	ldr	r3, [pc, #124]	; (8003440 <inputseria+0x910>)
 80033c4:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80033c8:	f8a3 23fc 	strh.w	r2, [r3, #1020]	; 0x3fc
	seria[128].interval = 392;
 80033cc:	4b1c      	ldr	r3, [pc, #112]	; (8003440 <inputseria+0x910>)
 80033ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033d2:	4a28      	ldr	r2, [pc, #160]	; (8003474 <inputseria+0x944>)
 80033d4:	601a      	str	r2, [r3, #0]
	seria[128].waittime = 224;
 80033d6:	4b1a      	ldr	r3, [pc, #104]	; (8003440 <inputseria+0x910>)
 80033d8:	22e0      	movs	r2, #224	; 0xe0
 80033da:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	seria[129].interval = 440;
 80033de:	4b18      	ldr	r3, [pc, #96]	; (8003440 <inputseria+0x910>)
 80033e0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80033e4:	4a24      	ldr	r2, [pc, #144]	; (8003478 <inputseria+0x948>)
 80033e6:	601a      	str	r2, [r3, #0]
	seria[129].waittime = 224;
 80033e8:	4b15      	ldr	r3, [pc, #84]	; (8003440 <inputseria+0x910>)
 80033ea:	22e0      	movs	r2, #224	; 0xe0
 80033ec:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
	seria[130].interval = 494;
 80033f0:	4b13      	ldr	r3, [pc, #76]	; (8003440 <inputseria+0x910>)
 80033f2:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80033f6:	4a21      	ldr	r2, [pc, #132]	; (800347c <inputseria+0x94c>)
 80033f8:	601a      	str	r2, [r3, #0]
	seria[130].waittime = 462;
 80033fa:	4b11      	ldr	r3, [pc, #68]	; (8003440 <inputseria+0x910>)
 80033fc:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003400:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
	seria[131].interval = 523;
 8003404:	4b0e      	ldr	r3, [pc, #56]	; (8003440 <inputseria+0x910>)
 8003406:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800340a:	4a1d      	ldr	r2, [pc, #116]	; (8003480 <inputseria+0x950>)
 800340c:	601a      	str	r2, [r3, #0]
	seria[131].waittime = 224;
 800340e:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <inputseria+0x910>)
 8003410:	22e0      	movs	r2, #224	; 0xe0
 8003412:	f8a3 241c 	strh.w	r2, [r3, #1052]	; 0x41c
	seria[132].interval = 494;
 8003416:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <inputseria+0x910>)
 8003418:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800341c:	4a17      	ldr	r2, [pc, #92]	; (800347c <inputseria+0x94c>)
 800341e:	601a      	str	r2, [r3, #0]
	seria[132].waittime = 224;
 8003420:	4b07      	ldr	r3, [pc, #28]	; (8003440 <inputseria+0x910>)
 8003422:	22e0      	movs	r2, #224	; 0xe0
 8003424:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
	seria[133].interval = 330;
 8003428:	4b05      	ldr	r3, [pc, #20]	; (8003440 <inputseria+0x910>)
 800342a:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800342e:	4a0f      	ldr	r2, [pc, #60]	; (800346c <inputseria+0x93c>)
 8003430:	601a      	str	r2, [r3, #0]
	seria[133].waittime = 1400;
 8003432:	4b03      	ldr	r3, [pc, #12]	; (8003440 <inputseria+0x910>)
 8003434:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003438:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
 800343c:	e022      	b.n	8003484 <inputseria+0x954>
 800343e:	bf00      	nop
 8003440:	200003c4 	.word	0x200003c4
 8003444:	44770000 	.word	0x44770000
 8003448:	442e8000 	.word	0x442e8000
 800344c:	445c0000 	.word	0x445c0000
 8003450:	44a4e000 	.word	0x44a4e000
 8003454:	4492e000 	.word	0x4492e000
 8003458:	4482e000 	.word	0x4482e000
 800345c:	44440000 	.word	0x44440000
 8003460:	4424c000 	.word	0x4424c000
 8003464:	4412c000 	.word	0x4412c000
 8003468:	43930000 	.word	0x43930000
 800346c:	43a50000 	.word	0x43a50000
 8003470:	43ae8000 	.word	0x43ae8000
 8003474:	43c40000 	.word	0x43c40000
 8003478:	43dc0000 	.word	0x43dc0000
 800347c:	43f70000 	.word	0x43f70000
 8003480:	4402c000 	.word	0x4402c000
	seria[134].interval = 698;
 8003484:	4ba7      	ldr	r3, [pc, #668]	; (8003724 <inputseria+0xbf4>)
 8003486:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800348a:	4aa7      	ldr	r2, [pc, #668]	; (8003728 <inputseria+0xbf8>)
 800348c:	601a      	str	r2, [r3, #0]
	seria[134].waittime = 224;
 800348e:	4ba5      	ldr	r3, [pc, #660]	; (8003724 <inputseria+0xbf4>)
 8003490:	22e0      	movs	r2, #224	; 0xe0
 8003492:	f8a3 2434 	strh.w	r2, [r3, #1076]	; 0x434
	seria[135].interval = 784;
 8003496:	4ba3      	ldr	r3, [pc, #652]	; (8003724 <inputseria+0xbf4>)
 8003498:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800349c:	4aa3      	ldr	r2, [pc, #652]	; (800372c <inputseria+0xbfc>)
 800349e:	601a      	str	r2, [r3, #0]
	seria[135].waittime = 224;
 80034a0:	4ba0      	ldr	r3, [pc, #640]	; (8003724 <inputseria+0xbf4>)
 80034a2:	22e0      	movs	r2, #224	; 0xe0
 80034a4:	f8a3 243c 	strh.w	r2, [r3, #1084]	; 0x43c
	seria[136].interval = 880;
 80034a8:	4b9e      	ldr	r3, [pc, #632]	; (8003724 <inputseria+0xbf4>)
 80034aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034ae:	4aa0      	ldr	r2, [pc, #640]	; (8003730 <inputseria+0xc00>)
 80034b0:	601a      	str	r2, [r3, #0]
	seria[136].waittime = 462;
 80034b2:	4b9c      	ldr	r3, [pc, #624]	; (8003724 <inputseria+0xbf4>)
 80034b4:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80034b8:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444
	seria[137].interval = 988;
 80034bc:	4b99      	ldr	r3, [pc, #612]	; (8003724 <inputseria+0xbf4>)
 80034be:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80034c2:	4a9c      	ldr	r2, [pc, #624]	; (8003734 <inputseria+0xc04>)
 80034c4:	601a      	str	r2, [r3, #0]
	seria[137].waittime = 224;
 80034c6:	4b97      	ldr	r3, [pc, #604]	; (8003724 <inputseria+0xbf4>)
 80034c8:	22e0      	movs	r2, #224	; 0xe0
 80034ca:	f8a3 244c 	strh.w	r2, [r3, #1100]	; 0x44c
	seria[138].interval = 1047;
 80034ce:	4b95      	ldr	r3, [pc, #596]	; (8003724 <inputseria+0xbf4>)
 80034d0:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80034d4:	4a98      	ldr	r2, [pc, #608]	; (8003738 <inputseria+0xc08>)
 80034d6:	601a      	str	r2, [r3, #0]
	seria[138].waittime = 224;
 80034d8:	4b92      	ldr	r3, [pc, #584]	; (8003724 <inputseria+0xbf4>)
 80034da:	22e0      	movs	r2, #224	; 0xe0
 80034dc:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
	seria[139].interval = 1175;
 80034e0:	4b90      	ldr	r3, [pc, #576]	; (8003724 <inputseria+0xbf4>)
 80034e2:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 80034e6:	4a95      	ldr	r2, [pc, #596]	; (800373c <inputseria+0xc0c>)
 80034e8:	601a      	str	r2, [r3, #0]
	seria[139].waittime = 462;
 80034ea:	4b8e      	ldr	r3, [pc, #568]	; (8003724 <inputseria+0xbf4>)
 80034ec:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80034f0:	f8a3 245c 	strh.w	r2, [r3, #1116]	; 0x45c
	seria[140].interval = 1319;
 80034f4:	4b8b      	ldr	r3, [pc, #556]	; (8003724 <inputseria+0xbf4>)
 80034f6:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 80034fa:	4a91      	ldr	r2, [pc, #580]	; (8003740 <inputseria+0xc10>)
 80034fc:	601a      	str	r2, [r3, #0]
	seria[140].waittime = 224;
 80034fe:	4b89      	ldr	r3, [pc, #548]	; (8003724 <inputseria+0xbf4>)
 8003500:	22e0      	movs	r2, #224	; 0xe0
 8003502:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464
	seria[141].interval = 1397;
 8003506:	4b87      	ldr	r3, [pc, #540]	; (8003724 <inputseria+0xbf4>)
 8003508:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800350c:	4a8d      	ldr	r2, [pc, #564]	; (8003744 <inputseria+0xc14>)
 800350e:	601a      	str	r2, [r3, #0]
	seria[141].waittime = 224;
 8003510:	4b84      	ldr	r3, [pc, #528]	; (8003724 <inputseria+0xbf4>)
 8003512:	22e0      	movs	r2, #224	; 0xe0
 8003514:	f8a3 246c 	strh.w	r2, [r3, #1132]	; 0x46c
	seria[142].interval = 1568;
 8003518:	4b82      	ldr	r3, [pc, #520]	; (8003724 <inputseria+0xbf4>)
 800351a:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800351e:	4a8a      	ldr	r2, [pc, #552]	; (8003748 <inputseria+0xc18>)
 8003520:	601a      	str	r2, [r3, #0]
	seria[142].waittime = 1400;
 8003522:	4b80      	ldr	r3, [pc, #512]	; (8003724 <inputseria+0xbf4>)
 8003524:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003528:	f8a3 2474 	strh.w	r2, [r3, #1140]	; 0x474
	seria[143].interval = 294;
 800352c:	4b7d      	ldr	r3, [pc, #500]	; (8003724 <inputseria+0xbf4>)
 800352e:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8003532:	4a86      	ldr	r2, [pc, #536]	; (800374c <inputseria+0xc1c>)
 8003534:	601a      	str	r2, [r3, #0]
	seria[143].waittime = 224;
 8003536:	4b7b      	ldr	r3, [pc, #492]	; (8003724 <inputseria+0xbf4>)
 8003538:	22e0      	movs	r2, #224	; 0xe0
 800353a:	f8a3 247c 	strh.w	r2, [r3, #1148]	; 0x47c
	seria[144].interval = 330;
 800353e:	4b79      	ldr	r3, [pc, #484]	; (8003724 <inputseria+0xbf4>)
 8003540:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8003544:	4a82      	ldr	r2, [pc, #520]	; (8003750 <inputseria+0xc20>)
 8003546:	601a      	str	r2, [r3, #0]
	seria[144].waittime = 224;
 8003548:	4b76      	ldr	r3, [pc, #472]	; (8003724 <inputseria+0xbf4>)
 800354a:	22e0      	movs	r2, #224	; 0xe0
 800354c:	f8a3 2484 	strh.w	r2, [r3, #1156]	; 0x484
	seria[145].interval = 349;
 8003550:	4b74      	ldr	r3, [pc, #464]	; (8003724 <inputseria+0xbf4>)
 8003552:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8003556:	4a7f      	ldr	r2, [pc, #508]	; (8003754 <inputseria+0xc24>)
 8003558:	601a      	str	r2, [r3, #0]
	seria[145].waittime = 462;
 800355a:	4b72      	ldr	r3, [pc, #456]	; (8003724 <inputseria+0xbf4>)
 800355c:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003560:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
	seria[146].interval = 392;
 8003564:	4b6f      	ldr	r3, [pc, #444]	; (8003724 <inputseria+0xbf4>)
 8003566:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 800356a:	4a7b      	ldr	r2, [pc, #492]	; (8003758 <inputseria+0xc28>)
 800356c:	601a      	str	r2, [r3, #0]
	seria[146].waittime = 224;
 800356e:	4b6d      	ldr	r3, [pc, #436]	; (8003724 <inputseria+0xbf4>)
 8003570:	22e0      	movs	r2, #224	; 0xe0
 8003572:	f8a3 2494 	strh.w	r2, [r3, #1172]	; 0x494
	seria[147].interval = 440;
 8003576:	4b6b      	ldr	r3, [pc, #428]	; (8003724 <inputseria+0xbf4>)
 8003578:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800357c:	4a77      	ldr	r2, [pc, #476]	; (800375c <inputseria+0xc2c>)
 800357e:	601a      	str	r2, [r3, #0]
	seria[147].waittime = 224;
 8003580:	4b68      	ldr	r3, [pc, #416]	; (8003724 <inputseria+0xbf4>)
 8003582:	22e0      	movs	r2, #224	; 0xe0
 8003584:	f8a3 249c 	strh.w	r2, [r3, #1180]	; 0x49c
	seria[148].interval = 494;
 8003588:	4b66      	ldr	r3, [pc, #408]	; (8003724 <inputseria+0xbf4>)
 800358a:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800358e:	4a74      	ldr	r2, [pc, #464]	; (8003760 <inputseria+0xc30>)
 8003590:	601a      	str	r2, [r3, #0]
	seria[148].waittime = 462;
 8003592:	4b64      	ldr	r3, [pc, #400]	; (8003724 <inputseria+0xbf4>)
 8003594:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003598:	f8a3 24a4 	strh.w	r2, [r3, #1188]	; 0x4a4
	seria[149].interval = 523;
 800359c:	4b61      	ldr	r3, [pc, #388]	; (8003724 <inputseria+0xbf4>)
 800359e:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 80035a2:	4a70      	ldr	r2, [pc, #448]	; (8003764 <inputseria+0xc34>)
 80035a4:	601a      	str	r2, [r3, #0]
	seria[149].waittime = 224;
 80035a6:	4b5f      	ldr	r3, [pc, #380]	; (8003724 <inputseria+0xbf4>)
 80035a8:	22e0      	movs	r2, #224	; 0xe0
 80035aa:	f8a3 24ac 	strh.w	r2, [r3, #1196]	; 0x4ac
	seria[150].interval = 494;
 80035ae:	4b5d      	ldr	r3, [pc, #372]	; (8003724 <inputseria+0xbf4>)
 80035b0:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80035b4:	4a6a      	ldr	r2, [pc, #424]	; (8003760 <inputseria+0xc30>)
 80035b6:	601a      	str	r2, [r3, #0]
	seria[150].waittime = 224;
 80035b8:	4b5a      	ldr	r3, [pc, #360]	; (8003724 <inputseria+0xbf4>)
 80035ba:	22e0      	movs	r2, #224	; 0xe0
 80035bc:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
	seria[151].interval = 330;
 80035c0:	4b58      	ldr	r3, [pc, #352]	; (8003724 <inputseria+0xbf4>)
 80035c2:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 80035c6:	4a62      	ldr	r2, [pc, #392]	; (8003750 <inputseria+0xc20>)
 80035c8:	601a      	str	r2, [r3, #0]
	seria[151].waittime = 1400;
 80035ca:	4b56      	ldr	r3, [pc, #344]	; (8003724 <inputseria+0xbf4>)
 80035cc:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80035d0:	f8a3 24bc 	strh.w	r2, [r3, #1212]	; 0x4bc
	seria[152].interval = 698;
 80035d4:	4b53      	ldr	r3, [pc, #332]	; (8003724 <inputseria+0xbf4>)
 80035d6:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80035da:	4a53      	ldr	r2, [pc, #332]	; (8003728 <inputseria+0xbf8>)
 80035dc:	601a      	str	r2, [r3, #0]
	seria[152].waittime = 224;
 80035de:	4b51      	ldr	r3, [pc, #324]	; (8003724 <inputseria+0xbf4>)
 80035e0:	22e0      	movs	r2, #224	; 0xe0
 80035e2:	f8a3 24c4 	strh.w	r2, [r3, #1220]	; 0x4c4
	seria[153].interval = 659;
 80035e6:	4b4f      	ldr	r3, [pc, #316]	; (8003724 <inputseria+0xbf4>)
 80035e8:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80035ec:	4a5e      	ldr	r2, [pc, #376]	; (8003768 <inputseria+0xc38>)
 80035ee:	601a      	str	r2, [r3, #0]
	seria[153].waittime = 105;
 80035f0:	4b4c      	ldr	r3, [pc, #304]	; (8003724 <inputseria+0xbf4>)
 80035f2:	2269      	movs	r2, #105	; 0x69
 80035f4:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
	seria[154].interval = 880;
 80035f8:	4b4a      	ldr	r3, [pc, #296]	; (8003724 <inputseria+0xbf4>)
 80035fa:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 80035fe:	4a4c      	ldr	r2, [pc, #304]	; (8003730 <inputseria+0xc00>)
 8003600:	601a      	str	r2, [r3, #0]
	seria[154].waittime = 224;
 8003602:	4b48      	ldr	r3, [pc, #288]	; (8003724 <inputseria+0xbf4>)
 8003604:	22e0      	movs	r2, #224	; 0xe0
 8003606:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4
	seria[155].interval = 784;
 800360a:	4b46      	ldr	r3, [pc, #280]	; (8003724 <inputseria+0xbf4>)
 800360c:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8003610:	4a46      	ldr	r2, [pc, #280]	; (800372c <inputseria+0xbfc>)
 8003612:	601a      	str	r2, [r3, #0]
	seria[155].waittime = 105;
 8003614:	4b43      	ldr	r3, [pc, #268]	; (8003724 <inputseria+0xbf4>)
 8003616:	2269      	movs	r2, #105	; 0x69
 8003618:	f8a3 24dc 	strh.w	r2, [r3, #1244]	; 0x4dc
	seria[156].interval = 988;
 800361c:	4b41      	ldr	r3, [pc, #260]	; (8003724 <inputseria+0xbf4>)
 800361e:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8003622:	4a44      	ldr	r2, [pc, #272]	; (8003734 <inputseria+0xc04>)
 8003624:	601a      	str	r2, [r3, #0]
	seria[156].waittime = 224;
 8003626:	4b3f      	ldr	r3, [pc, #252]	; (8003724 <inputseria+0xbf4>)
 8003628:	22e0      	movs	r2, #224	; 0xe0
 800362a:	f8a3 24e4 	strh.w	r2, [r3, #1252]	; 0x4e4
	seria[157].interval = 880;
 800362e:	4b3d      	ldr	r3, [pc, #244]	; (8003724 <inputseria+0xbf4>)
 8003630:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 8003634:	4a3e      	ldr	r2, [pc, #248]	; (8003730 <inputseria+0xc00>)
 8003636:	601a      	str	r2, [r3, #0]
	seria[157].waittime = 105;
 8003638:	4b3a      	ldr	r3, [pc, #232]	; (8003724 <inputseria+0xbf4>)
 800363a:	2269      	movs	r2, #105	; 0x69
 800363c:	f8a3 24ec 	strh.w	r2, [r3, #1260]	; 0x4ec
	seria[158].interval = 1047;
 8003640:	4b38      	ldr	r3, [pc, #224]	; (8003724 <inputseria+0xbf4>)
 8003642:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8003646:	4a3c      	ldr	r2, [pc, #240]	; (8003738 <inputseria+0xc08>)
 8003648:	601a      	str	r2, [r3, #0]
	seria[158].waittime = 224;
 800364a:	4b36      	ldr	r3, [pc, #216]	; (8003724 <inputseria+0xbf4>)
 800364c:	22e0      	movs	r2, #224	; 0xe0
 800364e:	f8a3 24f4 	strh.w	r2, [r3, #1268]	; 0x4f4
	seria[159].interval = 988;
 8003652:	4b34      	ldr	r3, [pc, #208]	; (8003724 <inputseria+0xbf4>)
 8003654:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
 8003658:	4a36      	ldr	r2, [pc, #216]	; (8003734 <inputseria+0xc04>)
 800365a:	601a      	str	r2, [r3, #0]
	seria[159].waittime = 105;
 800365c:	4b31      	ldr	r3, [pc, #196]	; (8003724 <inputseria+0xbf4>)
 800365e:	2269      	movs	r2, #105	; 0x69
 8003660:	f8a3 24fc 	strh.w	r2, [r3, #1276]	; 0x4fc
	seria[160].interval = 1175;
 8003664:	4b2f      	ldr	r3, [pc, #188]	; (8003724 <inputseria+0xbf4>)
 8003666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800366a:	4a34      	ldr	r2, [pc, #208]	; (800373c <inputseria+0xc0c>)
 800366c:	601a      	str	r2, [r3, #0]
	seria[160].waittime = 224;
 800366e:	4b2d      	ldr	r3, [pc, #180]	; (8003724 <inputseria+0xbf4>)
 8003670:	22e0      	movs	r2, #224	; 0xe0
 8003672:	f8a3 2504 	strh.w	r2, [r3, #1284]	; 0x504
	seria[161].interval = 1047;
 8003676:	4b2b      	ldr	r3, [pc, #172]	; (8003724 <inputseria+0xbf4>)
 8003678:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800367c:	4a2e      	ldr	r2, [pc, #184]	; (8003738 <inputseria+0xc08>)
 800367e:	601a      	str	r2, [r3, #0]
	seria[161].waittime = 105;
 8003680:	4b28      	ldr	r3, [pc, #160]	; (8003724 <inputseria+0xbf4>)
 8003682:	2269      	movs	r2, #105	; 0x69
 8003684:	f8a3 250c 	strh.w	r2, [r3, #1292]	; 0x50c
	seria[162].interval = 1319;
 8003688:	4b26      	ldr	r3, [pc, #152]	; (8003724 <inputseria+0xbf4>)
 800368a:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800368e:	4a2c      	ldr	r2, [pc, #176]	; (8003740 <inputseria+0xc10>)
 8003690:	601a      	str	r2, [r3, #0]
	seria[162].waittime = 224;
 8003692:	4b24      	ldr	r3, [pc, #144]	; (8003724 <inputseria+0xbf4>)
 8003694:	22e0      	movs	r2, #224	; 0xe0
 8003696:	f8a3 2514 	strh.w	r2, [r3, #1300]	; 0x514
	seria[163].interval = 1175;
 800369a:	4b22      	ldr	r3, [pc, #136]	; (8003724 <inputseria+0xbf4>)
 800369c:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80036a0:	4a26      	ldr	r2, [pc, #152]	; (800373c <inputseria+0xc0c>)
 80036a2:	601a      	str	r2, [r3, #0]
	seria[163].waittime = 105;
 80036a4:	4b1f      	ldr	r3, [pc, #124]	; (8003724 <inputseria+0xbf4>)
 80036a6:	2269      	movs	r2, #105	; 0x69
 80036a8:	f8a3 251c 	strh.w	r2, [r3, #1308]	; 0x51c
	seria[164].interval = 1397;
 80036ac:	4b1d      	ldr	r3, [pc, #116]	; (8003724 <inputseria+0xbf4>)
 80036ae:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80036b2:	4a24      	ldr	r2, [pc, #144]	; (8003744 <inputseria+0xc14>)
 80036b4:	601a      	str	r2, [r3, #0]
	seria[164].waittime = 224;
 80036b6:	4b1b      	ldr	r3, [pc, #108]	; (8003724 <inputseria+0xbf4>)
 80036b8:	22e0      	movs	r2, #224	; 0xe0
 80036ba:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
	seria[165].interval = 1319;
 80036be:	4b19      	ldr	r3, [pc, #100]	; (8003724 <inputseria+0xbf4>)
 80036c0:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 80036c4:	4a1e      	ldr	r2, [pc, #120]	; (8003740 <inputseria+0xc10>)
 80036c6:	601a      	str	r2, [r3, #0]
	seria[165].waittime = 105;
 80036c8:	4b16      	ldr	r3, [pc, #88]	; (8003724 <inputseria+0xbf4>)
 80036ca:	2269      	movs	r2, #105	; 0x69
 80036cc:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
	seria[166].interval = 988;
 80036d0:	4b14      	ldr	r3, [pc, #80]	; (8003724 <inputseria+0xbf4>)
 80036d2:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 80036d6:	4a17      	ldr	r2, [pc, #92]	; (8003734 <inputseria+0xc04>)
 80036d8:	601a      	str	r2, [r3, #0]
	seria[166].waittime = 105;
 80036da:	4b12      	ldr	r3, [pc, #72]	; (8003724 <inputseria+0xbf4>)
 80036dc:	2269      	movs	r2, #105	; 0x69
 80036de:	f8a3 2534 	strh.w	r2, [r3, #1332]	; 0x534
	seria[167].interval = 1047;
 80036e2:	4b10      	ldr	r3, [pc, #64]	; (8003724 <inputseria+0xbf4>)
 80036e4:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 80036e8:	4a13      	ldr	r2, [pc, #76]	; (8003738 <inputseria+0xc08>)
 80036ea:	601a      	str	r2, [r3, #0]
	seria[167].waittime = 105;
 80036ec:	4b0d      	ldr	r3, [pc, #52]	; (8003724 <inputseria+0xbf4>)
 80036ee:	2269      	movs	r2, #105	; 0x69
 80036f0:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
	seria[168].interval = 880;
 80036f4:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <inputseria+0xbf4>)
 80036f6:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 80036fa:	4a0d      	ldr	r2, [pc, #52]	; (8003730 <inputseria+0xc00>)
 80036fc:	601a      	str	r2, [r3, #0]
	seria[168].waittime = 105;
 80036fe:	4b09      	ldr	r3, [pc, #36]	; (8003724 <inputseria+0xbf4>)
 8003700:	2269      	movs	r2, #105	; 0x69
 8003702:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
	seria[169].interval = 988;
 8003706:	4b07      	ldr	r3, [pc, #28]	; (8003724 <inputseria+0xbf4>)
 8003708:	f503 63a9 	add.w	r3, r3, #1352	; 0x548
 800370c:	4a09      	ldr	r2, [pc, #36]	; (8003734 <inputseria+0xc04>)
 800370e:	601a      	str	r2, [r3, #0]
	seria[169].waittime = 2576;
 8003710:	4b04      	ldr	r3, [pc, #16]	; (8003724 <inputseria+0xbf4>)
 8003712:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 8003716:	f8a3 254c 	strh.w	r2, [r3, #1356]	; 0x54c

}
 800371a:	bf00      	nop
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	200003c4 	.word	0x200003c4
 8003728:	442e8000 	.word	0x442e8000
 800372c:	44440000 	.word	0x44440000
 8003730:	445c0000 	.word	0x445c0000
 8003734:	44770000 	.word	0x44770000
 8003738:	4482e000 	.word	0x4482e000
 800373c:	4492e000 	.word	0x4492e000
 8003740:	44a4e000 	.word	0x44a4e000
 8003744:	44aea000 	.word	0x44aea000
 8003748:	44c40000 	.word	0x44c40000
 800374c:	43930000 	.word	0x43930000
 8003750:	43a50000 	.word	0x43a50000
 8003754:	43ae8000 	.word	0x43ae8000
 8003758:	43c40000 	.word	0x43c40000
 800375c:	43dc0000 	.word	0x43dc0000
 8003760:	43f70000 	.word	0x43f70000
 8003764:	4402c000 	.word	0x4402c000
 8003768:	4424c000 	.word	0x4424c000

0800376c <pl_timer_init>:
#include "tim.h"

volatile uint32_t g_timCount;


void pl_timer_init(void){
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8003770:	4802      	ldr	r0, [pc, #8]	; (800377c <pl_timer_init+0x10>)
 8003772:	f004 fedf 	bl	8008534 <HAL_TIM_Base_Start_IT>
}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	20000aec 	.word	0x20000aec

08003780 <pl_timer_count>:

void pl_timer_count(void){
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
	 g_timCount++;
 8003784:	4b04      	ldr	r3, [pc, #16]	; (8003798 <pl_timer_count+0x18>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3301      	adds	r3, #1
 800378a:	4a03      	ldr	r2, [pc, #12]	; (8003798 <pl_timer_count+0x18>)
 800378c:	6013      	str	r3, [r2, #0]
}
 800378e:	bf00      	nop
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	20000954 	.word	0x20000954

0800379c <wait_ms>:


void wait_ms(uint32_t wait_time) {
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 80037a4:	4b09      	ldr	r3, [pc, #36]	; (80037cc <wait_ms+0x30>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 80037aa:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <wait_ms+0x34>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2200      	movs	r2, #0
 80037b0:	625a      	str	r2, [r3, #36]	; 0x24
        while (g_timCount < wait_time) {
 80037b2:	bf00      	nop
 80037b4:	4b05      	ldr	r3, [pc, #20]	; (80037cc <wait_ms+0x30>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d8fa      	bhi.n	80037b4 <wait_ms+0x18>
        }

}
 80037be:	bf00      	nop
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	20000954 	.word	0x20000954
 80037d0:	20000aec 	.word	0x20000aec

080037d4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80037da:	463b      	mov	r3, r7
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	605a      	str	r2, [r3, #4]
 80037e2:	609a      	str	r2, [r3, #8]
 80037e4:	60da      	str	r2, [r3, #12]
 80037e6:	611a      	str	r2, [r3, #16]
 80037e8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80037ea:	4b46      	ldr	r3, [pc, #280]	; (8003904 <MX_ADC1_Init+0x130>)
 80037ec:	4a46      	ldr	r2, [pc, #280]	; (8003908 <MX_ADC1_Init+0x134>)
 80037ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 80037f0:	4b44      	ldr	r3, [pc, #272]	; (8003904 <MX_ADC1_Init+0x130>)
 80037f2:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80037f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80037f8:	4b42      	ldr	r3, [pc, #264]	; (8003904 <MX_ADC1_Init+0x130>)
 80037fa:	2208      	movs	r2, #8
 80037fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80037fe:	4b41      	ldr	r3, [pc, #260]	; (8003904 <MX_ADC1_Init+0x130>)
 8003800:	2200      	movs	r2, #0
 8003802:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003804:	4b3f      	ldr	r3, [pc, #252]	; (8003904 <MX_ADC1_Init+0x130>)
 8003806:	2201      	movs	r2, #1
 8003808:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800380a:	4b3e      	ldr	r3, [pc, #248]	; (8003904 <MX_ADC1_Init+0x130>)
 800380c:	2204      	movs	r2, #4
 800380e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003810:	4b3c      	ldr	r3, [pc, #240]	; (8003904 <MX_ADC1_Init+0x130>)
 8003812:	2200      	movs	r2, #0
 8003814:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003816:	4b3b      	ldr	r3, [pc, #236]	; (8003904 <MX_ADC1_Init+0x130>)
 8003818:	2200      	movs	r2, #0
 800381a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 800381c:	4b39      	ldr	r3, [pc, #228]	; (8003904 <MX_ADC1_Init+0x130>)
 800381e:	2205      	movs	r2, #5
 8003820:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003822:	4b38      	ldr	r3, [pc, #224]	; (8003904 <MX_ADC1_Init+0x130>)
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800382a:	4b36      	ldr	r3, [pc, #216]	; (8003904 <MX_ADC1_Init+0x130>)
 800382c:	2200      	movs	r2, #0
 800382e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003830:	4b34      	ldr	r3, [pc, #208]	; (8003904 <MX_ADC1_Init+0x130>)
 8003832:	2200      	movs	r2, #0
 8003834:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003836:	4b33      	ldr	r3, [pc, #204]	; (8003904 <MX_ADC1_Init+0x130>)
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800383e:	4b31      	ldr	r3, [pc, #196]	; (8003904 <MX_ADC1_Init+0x130>)
 8003840:	2200      	movs	r2, #0
 8003842:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003844:	4b2f      	ldr	r3, [pc, #188]	; (8003904 <MX_ADC1_Init+0x130>)
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800384c:	482d      	ldr	r0, [pc, #180]	; (8003904 <MX_ADC1_Init+0x130>)
 800384e:	f001 fac3 	bl	8004dd8 <HAL_ADC_Init>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8003858:	f000 fb49 	bl	8003eee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800385c:	4b2b      	ldr	r3, [pc, #172]	; (800390c <MX_ADC1_Init+0x138>)
 800385e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003860:	2306      	movs	r3, #6
 8003862:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8003864:	2301      	movs	r3, #1
 8003866:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003868:	237f      	movs	r3, #127	; 0x7f
 800386a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800386c:	2304      	movs	r3, #4
 800386e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003874:	463b      	mov	r3, r7
 8003876:	4619      	mov	r1, r3
 8003878:	4822      	ldr	r0, [pc, #136]	; (8003904 <MX_ADC1_Init+0x130>)
 800387a:	f001 fe21 	bl	80054c0 <HAL_ADC_ConfigChannel>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8003884:	f000 fb33 	bl	8003eee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003888:	4b21      	ldr	r3, [pc, #132]	; (8003910 <MX_ADC1_Init+0x13c>)
 800388a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800388c:	230c      	movs	r3, #12
 800388e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003890:	463b      	mov	r3, r7
 8003892:	4619      	mov	r1, r3
 8003894:	481b      	ldr	r0, [pc, #108]	; (8003904 <MX_ADC1_Init+0x130>)
 8003896:	f001 fe13 	bl	80054c0 <HAL_ADC_ConfigChannel>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80038a0:	f000 fb25 	bl	8003eee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80038a4:	4b1b      	ldr	r3, [pc, #108]	; (8003914 <MX_ADC1_Init+0x140>)
 80038a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80038a8:	2312      	movs	r3, #18
 80038aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038ac:	463b      	mov	r3, r7
 80038ae:	4619      	mov	r1, r3
 80038b0:	4814      	ldr	r0, [pc, #80]	; (8003904 <MX_ADC1_Init+0x130>)
 80038b2:	f001 fe05 	bl	80054c0 <HAL_ADC_ConfigChannel>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80038bc:	f000 fb17 	bl	8003eee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80038c0:	4b15      	ldr	r3, [pc, #84]	; (8003918 <MX_ADC1_Init+0x144>)
 80038c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80038c4:	2318      	movs	r3, #24
 80038c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038c8:	463b      	mov	r3, r7
 80038ca:	4619      	mov	r1, r3
 80038cc:	480d      	ldr	r0, [pc, #52]	; (8003904 <MX_ADC1_Init+0x130>)
 80038ce:	f001 fdf7 	bl	80054c0 <HAL_ADC_ConfigChannel>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80038d8:	f000 fb09 	bl	8003eee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80038dc:	4b0f      	ldr	r3, [pc, #60]	; (800391c <MX_ADC1_Init+0x148>)
 80038de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80038e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038e6:	463b      	mov	r3, r7
 80038e8:	4619      	mov	r1, r3
 80038ea:	4806      	ldr	r0, [pc, #24]	; (8003904 <MX_ADC1_Init+0x130>)
 80038ec:	f001 fde8 	bl	80054c0 <HAL_ADC_ConfigChannel>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80038f6:	f000 fafa 	bl	8003eee <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80038fa:	bf00      	nop
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000958 	.word	0x20000958
 8003908:	50040000 	.word	0x50040000
 800390c:	43210000 	.word	0x43210000
 8003910:	3ef08000 	.word	0x3ef08000
 8003914:	32601000 	.word	0x32601000
 8003918:	2e300800 	.word	0x2e300800
 800391c:	2a000400 	.word	0x2a000400

08003920 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b0a0      	sub	sp, #128	; 0x80
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003928:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	605a      	str	r2, [r3, #4]
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	60da      	str	r2, [r3, #12]
 8003936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003938:	f107 0318 	add.w	r3, r7, #24
 800393c:	2254      	movs	r2, #84	; 0x54
 800393e:	2100      	movs	r1, #0
 8003940:	4618      	mov	r0, r3
 8003942:	f006 fb11 	bl	8009f68 <memset>
  if(adcHandle->Instance==ADC1)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a47      	ldr	r2, [pc, #284]	; (8003a68 <HAL_ADC_MspInit+0x148>)
 800394c:	4293      	cmp	r3, r2
 800394e:	f040 8087 	bne.w	8003a60 <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003952:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003956:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003958:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800395c:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800395e:	2303      	movs	r3, #3
 8003960:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 3;
 8003962:	2303      	movs	r3, #3
 8003964:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8003966:	2310      	movs	r3, #16
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800396a:	2307      	movs	r3, #7
 800396c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800396e:	2302      	movs	r3, #2
 8003970:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003972:	2302      	movs	r3, #2
 8003974:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003976:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800397a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800397c:	f107 0318 	add.w	r3, r7, #24
 8003980:	4618      	mov	r0, r3
 8003982:	f004 fa97 	bl	8007eb4 <HAL_RCCEx_PeriphCLKConfig>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800398c:	f000 faaf 	bl	8003eee <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003990:	4b36      	ldr	r3, [pc, #216]	; (8003a6c <HAL_ADC_MspInit+0x14c>)
 8003992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003994:	4a35      	ldr	r2, [pc, #212]	; (8003a6c <HAL_ADC_MspInit+0x14c>)
 8003996:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800399a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800399c:	4b33      	ldr	r3, [pc, #204]	; (8003a6c <HAL_ADC_MspInit+0x14c>)
 800399e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a8:	4b30      	ldr	r3, [pc, #192]	; (8003a6c <HAL_ADC_MspInit+0x14c>)
 80039aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ac:	4a2f      	ldr	r2, [pc, #188]	; (8003a6c <HAL_ADC_MspInit+0x14c>)
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039b4:	4b2d      	ldr	r3, [pc, #180]	; (8003a6c <HAL_ADC_MspInit+0x14c>)
 80039b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c0:	4b2a      	ldr	r3, [pc, #168]	; (8003a6c <HAL_ADC_MspInit+0x14c>)
 80039c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c4:	4a29      	ldr	r2, [pc, #164]	; (8003a6c <HAL_ADC_MspInit+0x14c>)
 80039c6:	f043 0302 	orr.w	r3, r3, #2
 80039ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039cc:	4b27      	ldr	r3, [pc, #156]	; (8003a6c <HAL_ADC_MspInit+0x14c>)
 80039ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = SENSOR_4_Pin|SENSOR_3_Pin|SENSOR_2_Pin;
 80039d8:	23e0      	movs	r3, #224	; 0xe0
 80039da:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80039dc:	230b      	movs	r3, #11
 80039de:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e0:	2300      	movs	r3, #0
 80039e2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80039e8:	4619      	mov	r1, r3
 80039ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039ee:	f002 fea1 	bl	8006734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR_1_Pin|BATTERY_Pin;
 80039f2:	2303      	movs	r3, #3
 80039f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80039f6:	230b      	movs	r3, #11
 80039f8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039fe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003a02:	4619      	mov	r1, r3
 8003a04:	481a      	ldr	r0, [pc, #104]	; (8003a70 <HAL_ADC_MspInit+0x150>)
 8003a06:	f002 fe95 	bl	8006734 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003a0a:	4b1a      	ldr	r3, [pc, #104]	; (8003a74 <HAL_ADC_MspInit+0x154>)
 8003a0c:	4a1a      	ldr	r2, [pc, #104]	; (8003a78 <HAL_ADC_MspInit+0x158>)
 8003a0e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003a10:	4b18      	ldr	r3, [pc, #96]	; (8003a74 <HAL_ADC_MspInit+0x154>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a16:	4b17      	ldr	r3, [pc, #92]	; (8003a74 <HAL_ADC_MspInit+0x154>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a1c:	4b15      	ldr	r3, [pc, #84]	; (8003a74 <HAL_ADC_MspInit+0x154>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003a22:	4b14      	ldr	r3, [pc, #80]	; (8003a74 <HAL_ADC_MspInit+0x154>)
 8003a24:	2280      	movs	r2, #128	; 0x80
 8003a26:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a28:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <HAL_ADC_MspInit+0x154>)
 8003a2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a2e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a30:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <HAL_ADC_MspInit+0x154>)
 8003a32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a36:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003a38:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <HAL_ADC_MspInit+0x154>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003a3e:	4b0d      	ldr	r3, [pc, #52]	; (8003a74 <HAL_ADC_MspInit+0x154>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003a44:	480b      	ldr	r0, [pc, #44]	; (8003a74 <HAL_ADC_MspInit+0x154>)
 8003a46:	f002 fc3f 	bl	80062c8 <HAL_DMA_Init>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8003a50:	f000 fa4d 	bl	8003eee <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a07      	ldr	r2, [pc, #28]	; (8003a74 <HAL_ADC_MspInit+0x154>)
 8003a58:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a5a:	4a06      	ldr	r2, [pc, #24]	; (8003a74 <HAL_ADC_MspInit+0x154>)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003a60:	bf00      	nop
 8003a62:	3780      	adds	r7, #128	; 0x80
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	50040000 	.word	0x50040000
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	48000400 	.word	0x48000400
 8003a74:	200009bc 	.word	0x200009bc
 8003a78:	40020008 	.word	0x40020008

08003a7c <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 8003a84:	f7fe ff0c 	bl	80028a0 <pl_callback_getSensor>

}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a96:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <MX_DMA_Init+0x38>)
 8003a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a9a:	4a0b      	ldr	r2, [pc, #44]	; (8003ac8 <MX_DMA_Init+0x38>)
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	6493      	str	r3, [r2, #72]	; 0x48
 8003aa2:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <MX_DMA_Init+0x38>)
 8003aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	607b      	str	r3, [r7, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	200b      	movs	r0, #11
 8003ab4:	f002 fbd1 	bl	800625a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003ab8:	200b      	movs	r0, #11
 8003aba:	f002 fbea 	bl	8006292 <HAL_NVIC_EnableIRQ>

}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40021000 	.word	0x40021000

08003acc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad2:	f107 030c 	add.w	r3, r7, #12
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	605a      	str	r2, [r3, #4]
 8003adc:	609a      	str	r2, [r3, #8]
 8003ade:	60da      	str	r2, [r3, #12]
 8003ae0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ae2:	4b39      	ldr	r3, [pc, #228]	; (8003bc8 <MX_GPIO_Init+0xfc>)
 8003ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae6:	4a38      	ldr	r2, [pc, #224]	; (8003bc8 <MX_GPIO_Init+0xfc>)
 8003ae8:	f043 0304 	orr.w	r3, r3, #4
 8003aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003aee:	4b36      	ldr	r3, [pc, #216]	; (8003bc8 <MX_GPIO_Init+0xfc>)
 8003af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003afa:	4b33      	ldr	r3, [pc, #204]	; (8003bc8 <MX_GPIO_Init+0xfc>)
 8003afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afe:	4a32      	ldr	r2, [pc, #200]	; (8003bc8 <MX_GPIO_Init+0xfc>)
 8003b00:	f043 0301 	orr.w	r3, r3, #1
 8003b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b06:	4b30      	ldr	r3, [pc, #192]	; (8003bc8 <MX_GPIO_Init+0xfc>)
 8003b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	607b      	str	r3, [r7, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b12:	4b2d      	ldr	r3, [pc, #180]	; (8003bc8 <MX_GPIO_Init+0xfc>)
 8003b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b16:	4a2c      	ldr	r2, [pc, #176]	; (8003bc8 <MX_GPIO_Init+0xfc>)
 8003b18:	f043 0302 	orr.w	r3, r3, #2
 8003b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b1e:	4b2a      	ldr	r3, [pc, #168]	; (8003bc8 <MX_GPIO_Init+0xfc>)
 8003b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSORLED_1_Pin|SENSORLED_2_Pin, GPIO_PIN_RESET);
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003b30:	4826      	ldr	r0, [pc, #152]	; (8003bcc <MX_GPIO_Init+0x100>)
 8003b32:	f002 ff81 	bl	8006a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_ENABLE_Pin|MOTOR_CW_CCW_L_Pin, GPIO_PIN_RESET);
 8003b36:	2200      	movs	r2, #0
 8003b38:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b40:	f002 ff7a 	bl	8006a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INTERFACELED_Pin|MOTOR_CW_CCW_R_Pin|MD_RESET_Pin, GPIO_PIN_RESET);
 8003b44:	2200      	movs	r2, #0
 8003b46:	2138      	movs	r1, #56	; 0x38
 8003b48:	4821      	ldr	r0, [pc, #132]	; (8003bd0 <MX_GPIO_Init+0x104>)
 8003b4a:	f002 ff75 	bl	8006a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SENSORLED_1_Pin|SENSORLED_2_Pin;
 8003b4e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003b52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b54:	2301      	movs	r3, #1
 8003b56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b60:	f107 030c 	add.w	r3, r7, #12
 8003b64:	4619      	mov	r1, r3
 8003b66:	4819      	ldr	r0, [pc, #100]	; (8003bcc <MX_GPIO_Init+0x100>)
 8003b68:	f002 fde4 	bl	8006734 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_ENABLE_Pin|MOTOR_CW_CCW_L_Pin;
 8003b6c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003b70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b72:	2301      	movs	r3, #1
 8003b74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b7e:	f107 030c 	add.w	r3, r7, #12
 8003b82:	4619      	mov	r1, r3
 8003b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b88:	f002 fdd4 	bl	8006734 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = INTERFACELED_Pin|MOTOR_CW_CCW_R_Pin|MD_RESET_Pin;
 8003b8c:	2338      	movs	r3, #56	; 0x38
 8003b8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b90:	2301      	movs	r3, #1
 8003b92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b9c:	f107 030c 	add.w	r3, r7, #12
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	480b      	ldr	r0, [pc, #44]	; (8003bd0 <MX_GPIO_Init+0x104>)
 8003ba4:	f002 fdc6 	bl	8006734 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SWITCH_1_Pin|SWITCH_2_Pin;
 8003ba8:	23c0      	movs	r3, #192	; 0xc0
 8003baa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bac:	2300      	movs	r3, #0
 8003bae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bb4:	f107 030c 	add.w	r3, r7, #12
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4805      	ldr	r0, [pc, #20]	; (8003bd0 <MX_GPIO_Init+0x104>)
 8003bbc:	f002 fdba 	bl	8006734 <HAL_GPIO_Init>

}
 8003bc0:	bf00      	nop
 8003bc2:	3720      	adds	r7, #32
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	48000800 	.word	0x48000800
 8003bd0:	48000400 	.word	0x48000400

08003bd4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003bd8:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <MX_I2C1_Init+0x74>)
 8003bda:	4a1c      	ldr	r2, [pc, #112]	; (8003c4c <MX_I2C1_Init+0x78>)
 8003bdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8003bde:	4b1a      	ldr	r3, [pc, #104]	; (8003c48 <MX_I2C1_Init+0x74>)
 8003be0:	4a1b      	ldr	r2, [pc, #108]	; (8003c50 <MX_I2C1_Init+0x7c>)
 8003be2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003be4:	4b18      	ldr	r3, [pc, #96]	; (8003c48 <MX_I2C1_Init+0x74>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bea:	4b17      	ldr	r3, [pc, #92]	; (8003c48 <MX_I2C1_Init+0x74>)
 8003bec:	2201      	movs	r2, #1
 8003bee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003bf0:	4b15      	ldr	r3, [pc, #84]	; (8003c48 <MX_I2C1_Init+0x74>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003bf6:	4b14      	ldr	r3, [pc, #80]	; (8003c48 <MX_I2C1_Init+0x74>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003bfc:	4b12      	ldr	r3, [pc, #72]	; (8003c48 <MX_I2C1_Init+0x74>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c02:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <MX_I2C1_Init+0x74>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c08:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <MX_I2C1_Init+0x74>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c0e:	480e      	ldr	r0, [pc, #56]	; (8003c48 <MX_I2C1_Init+0x74>)
 8003c10:	f002 ff2a 	bl	8006a68 <HAL_I2C_Init>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003c1a:	f000 f968 	bl	8003eee <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4809      	ldr	r0, [pc, #36]	; (8003c48 <MX_I2C1_Init+0x74>)
 8003c22:	f003 fa25 	bl	8007070 <HAL_I2CEx_ConfigAnalogFilter>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003c2c:	f000 f95f 	bl	8003eee <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003c30:	2100      	movs	r1, #0
 8003c32:	4805      	ldr	r0, [pc, #20]	; (8003c48 <MX_I2C1_Init+0x74>)
 8003c34:	f003 fa67 	bl	8007106 <HAL_I2CEx_ConfigDigitalFilter>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003c3e:	f000 f956 	bl	8003eee <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000a04 	.word	0x20000a04
 8003c4c:	40005400 	.word	0x40005400
 8003c50:	10909cec 	.word	0x10909cec

08003c54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b09e      	sub	sp, #120	; 0x78
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c5c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	605a      	str	r2, [r3, #4]
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	60da      	str	r2, [r3, #12]
 8003c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c6c:	f107 0310 	add.w	r3, r7, #16
 8003c70:	2254      	movs	r2, #84	; 0x54
 8003c72:	2100      	movs	r1, #0
 8003c74:	4618      	mov	r0, r3
 8003c76:	f006 f977 	bl	8009f68 <memset>
  if(i2cHandle->Instance==I2C1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a1f      	ldr	r2, [pc, #124]	; (8003cfc <HAL_I2C_MspInit+0xa8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d137      	bne.n	8003cf4 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003c84:	2340      	movs	r3, #64	; 0x40
 8003c86:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c8c:	f107 0310 	add.w	r3, r7, #16
 8003c90:	4618      	mov	r0, r3
 8003c92:	f004 f90f 	bl	8007eb4 <HAL_RCCEx_PeriphCLKConfig>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003c9c:	f000 f927 	bl	8003eee <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ca0:	4b17      	ldr	r3, [pc, #92]	; (8003d00 <HAL_I2C_MspInit+0xac>)
 8003ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca4:	4a16      	ldr	r2, [pc, #88]	; (8003d00 <HAL_I2C_MspInit+0xac>)
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cac:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <HAL_I2C_MspInit+0xac>)
 8003cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003cb8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003cbc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cbe:	2312      	movs	r3, #18
 8003cc0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003cca:	2304      	movs	r3, #4
 8003ccc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cd8:	f002 fd2c 	bl	8006734 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cdc:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <HAL_I2C_MspInit+0xac>)
 8003cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce0:	4a07      	ldr	r2, [pc, #28]	; (8003d00 <HAL_I2C_MspInit+0xac>)
 8003ce2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ce6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ce8:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <HAL_I2C_MspInit+0xac>)
 8003cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003cf4:	bf00      	nop
 8003cf6:	3778      	adds	r7, #120	; 0x78
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40005400 	.word	0x40005400
 8003d00:	40021000 	.word	0x40021000
 8003d04:	00000000 	.word	0x00000000

08003d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d0e:	f000 fdb4 	bl	800487a <HAL_Init>
  /* USER CODE BEGIN Init */
 // setbuf(stdout, NULL);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d12:	f000 f89d 	bl	8003e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d16:	f7ff fed9 	bl	8003acc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003d1a:	f000 fceb 	bl	80046f4 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8003d1e:	f000 fb33 	bl	8004388 <MX_TIM6_Init>
  MX_I2C1_Init();
 8003d22:	f7ff ff57 	bl	8003bd4 <MX_I2C1_Init>
  MX_DMA_Init();
 8003d26:	f7ff feb3 	bl	8003a90 <MX_DMA_Init>
  MX_ADC1_Init();
 8003d2a:	f7ff fd53 	bl	80037d4 <MX_ADC1_Init>
  MX_TIM15_Init();
 8003d2e:	f000 fb61 	bl	80043f4 <MX_TIM15_Init>
  MX_TIM1_Init();
 8003d32:	f000 fa3f 	bl	80041b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003d36:	f000 facd 	bl	80042d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  init_WallControl();
 8003d3a:	f7fe fa31 	bl	80021a0 <init_WallControl>
  pl_motor_init();
 8003d3e:	f7fe fbd9 	bl	80024f4 <pl_motor_init>
  pl_speaker_init();
 8003d42:	f7fe fe9b 	bl	8002a7c <pl_speaker_init>
  pl_timer_init();
 8003d46:	f7ff fd11 	bl	800376c <pl_timer_init>
  pl_lcd_init();
 8003d4a:	f7fe fb8a 	bl	8002462 <pl_lcd_init>
  motor_init();
 8003d4e:	f7fd f967 	bl	8001020 <motor_init>

  pl_lcd_puts("Hello");
 8003d52:	4835      	ldr	r0, [pc, #212]	; (8003e28 <main+0x120>)
 8003d54:	f7fe fb70 	bl	8002438 <pl_lcd_puts>
  pl_lcd_pos(1, 0);
 8003d58:	2100      	movs	r1, #0
 8003d5a:	2001      	movs	r0, #1
 8003d5c:	f7fe fba7 	bl	80024ae <pl_lcd_pos>
  pl_lcd_puts("   STM32");
 8003d60:	4832      	ldr	r0, [pc, #200]	; (8003e2c <main+0x124>)
 8003d62:	f7fe fb69 	bl	8002438 <pl_lcd_puts>
  HAL_Delay(500);
 8003d66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d6a:	f000 fdfb 	bl	8004964 <HAL_Delay>
  pl_lcd_clear();
 8003d6e:	f7fe fbb9 	bl	80024e4 <pl_lcd_clear>
  pl_lcd_pos(0, 0);
 8003d72:	2100      	movs	r1, #0
 8003d74:	2000      	movs	r0, #0
 8003d76:	f7fe fb9a 	bl	80024ae <pl_lcd_pos>
  pl_lcd_puts("Mice");
 8003d7a:	482d      	ldr	r0, [pc, #180]	; (8003e30 <main+0x128>)
 8003d7c:	f7fe fb5c 	bl	8002438 <pl_lcd_puts>
  pl_lcd_pos(1, 0);
 8003d80:	2100      	movs	r1, #0
 8003d82:	2001      	movs	r0, #1
 8003d84:	f7fe fb93 	bl	80024ae <pl_lcd_pos>
  pl_lcd_puts("aaa");
 8003d88:	482a      	ldr	r0, [pc, #168]	; (8003e34 <main+0x12c>)
 8003d8a:	f7fe fb55 	bl	8002438 <pl_lcd_puts>
  HAL_Delay(100);
 8003d8e:	2064      	movs	r0, #100	; 0x64
 8003d90:	f000 fde8 	bl	8004964 <HAL_Delay>

  if(pl_getbatt() < LIPO_LIMIT){
 8003d94:	f7fe fd28 	bl	80027e8 <pl_getbatt>
 8003d98:	ee10 3a10 	vmov	r3, s0
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fc fbd3 	bl	8000548 <__aeabi_f2d>
 8003da2:	a31f      	add	r3, pc, #124	; (adr r3, 8003e20 <main+0x118>)
 8003da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da8:	f7fc fe98 	bl	8000adc <__aeabi_dcmplt>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d013      	beq.n	8003dda <main+0xd2>
	  pl_lcd_clear();
 8003db2:	f7fe fb97 	bl	80024e4 <pl_lcd_clear>
	  pl_lcd_pos(0, 0);
 8003db6:	2100      	movs	r1, #0
 8003db8:	2000      	movs	r0, #0
 8003dba:	f7fe fb78 	bl	80024ae <pl_lcd_pos>
	  pl_lcd_puts("LIPO");
 8003dbe:	481e      	ldr	r0, [pc, #120]	; (8003e38 <main+0x130>)
 8003dc0:	f7fe fb3a 	bl	8002438 <pl_lcd_puts>
	  pl_lcd_pos(1, 0);
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	2001      	movs	r0, #1
 8003dc8:	f7fe fb71 	bl	80024ae <pl_lcd_pos>
	  pl_lcd_puts("error");
 8003dcc:	481b      	ldr	r0, [pc, #108]	; (8003e3c <main+0x134>)
 8003dce:	f7fe fb33 	bl	8002438 <pl_lcd_puts>
	  HAL_Delay(1000);
 8003dd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dd6:	f000 fdc5 	bl	8004964 <HAL_Delay>
  }

  uint16_t cnt = 0;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	80fb      	strh	r3, [r7, #6]
  sensor_mode=1;
 8003dde:	4b18      	ldr	r3, [pc, #96]	; (8003e40 <main+0x138>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	701a      	strb	r2, [r3, #0]
//	 lcd_pos(1, 0);
//	 lcd_puts(strBuffer);
// sensor test
//     HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer) / sizeof(uint16_t));
//	 printf("BATT=%f\n",g_V_batt);
     printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d\n", g_sensor[0][0],g_sensor[1][0],g_sensor[2][0],g_sensor[3][0]);
 8003de4:	4b17      	ldr	r3, [pc, #92]	; (8003e44 <main+0x13c>)
 8003de6:	6819      	ldr	r1, [r3, #0]
 8003de8:	4b16      	ldr	r3, [pc, #88]	; (8003e44 <main+0x13c>)
 8003dea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dec:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <main+0x13c>)
 8003dee:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 8003df2:	4b14      	ldr	r3, [pc, #80]	; (8003e44 <main+0x13c>)
 8003df4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	4812      	ldr	r0, [pc, #72]	; (8003e48 <main+0x140>)
 8003dfe:	f006 fd25 	bl	800a84c <iprintf>
     wait_ms(500);
 8003e02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e06:	f7ff fcc9 	bl	800379c <wait_ms>
//	 	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
//	 	HAL_GPIO_WritePin(MOTOR_ENABLE_GPIO_Port,MOTOR_ENABLE_Pin,GPIO_PIN_RESET);
//	 	HAL_Delay(1000);
//	  }

	  if (HAL_GPIO_ReadPin(SWITCH_1_GPIO_Port,SWITCH_1_Pin)==0){
 8003e0a:	2140      	movs	r1, #64	; 0x40
 8003e0c:	480f      	ldr	r0, [pc, #60]	; (8003e4c <main+0x144>)
 8003e0e:	f002 fdfb 	bl	8006a08 <HAL_GPIO_ReadPin>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1e5      	bne.n	8003de4 <main+0xdc>
// test_speaker_music
    //pl_test_speaker();
// test_motor
//     pl_test_motor();

      control_test_motor();
 8003e18:	f7fd f898 	bl	8000f4c <control_test_motor>
     printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d\n", g_sensor[0][0],g_sensor[1][0],g_sensor[2][0],g_sensor[3][0]);
 8003e1c:	e7e2      	b.n	8003de4 <main+0xdc>
 8003e1e:	bf00      	nop
 8003e20:	9999999a 	.word	0x9999999a
 8003e24:	40269999 	.word	0x40269999
 8003e28:	0800c9f0 	.word	0x0800c9f0
 8003e2c:	0800c9f8 	.word	0x0800c9f8
 8003e30:	0800ca04 	.word	0x0800ca04
 8003e34:	0800ca0c 	.word	0x0800ca0c
 8003e38:	0800ca10 	.word	0x0800ca10
 8003e3c:	0800ca18 	.word	0x0800ca18
 8003e40:	200003af 	.word	0x200003af
 8003e44:	2000023c 	.word	0x2000023c
 8003e48:	0800ca20 	.word	0x0800ca20
 8003e4c:	48000400 	.word	0x48000400

08003e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b096      	sub	sp, #88	; 0x58
 8003e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e56:	f107 0314 	add.w	r3, r7, #20
 8003e5a:	2244      	movs	r2, #68	; 0x44
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f006 f882 	bl	8009f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e64:	463b      	mov	r3, r7
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	605a      	str	r2, [r3, #4]
 8003e6c:	609a      	str	r2, [r3, #8]
 8003e6e:	60da      	str	r2, [r3, #12]
 8003e70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003e72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003e76:	f003 f9a1 	bl	80071bc <HAL_PWREx_ControlVoltageScaling>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003e80:	f000 f835 	bl	8003eee <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e84:	2301      	movs	r3, #1
 8003e86:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003e88:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003e8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e8e:	2302      	movs	r3, #2
 8003e90:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e92:	2303      	movs	r3, #3
 8003e94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 3;
 8003e96:	2303      	movs	r3, #3
 8003e98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003e9a:	2328      	movs	r3, #40	; 0x28
 8003e9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003e9e:	2307      	movs	r3, #7
 8003ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003eaa:	f107 0314 	add.w	r3, r7, #20
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f003 f9da 	bl	8007268 <HAL_RCC_OscConfig>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8003eba:	f000 f818 	bl	8003eee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ebe:	230f      	movs	r3, #15
 8003ec0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003ed2:	463b      	mov	r3, r7
 8003ed4:	2104      	movs	r1, #4
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f003 fde6 	bl	8007aa8 <HAL_RCC_ClockConfig>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003ee2:	f000 f804 	bl	8003eee <Error_Handler>
  }
}
 8003ee6:	bf00      	nop
 8003ee8:	3758      	adds	r7, #88	; 0x58
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ef2:	b672      	cpsid	i
}
 8003ef4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ef6:	e7fe      	b.n	8003ef6 <Error_Handler+0x8>

08003ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003efe:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <HAL_MspInit+0x44>)
 8003f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f02:	4a0e      	ldr	r2, [pc, #56]	; (8003f3c <HAL_MspInit+0x44>)
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	6613      	str	r3, [r2, #96]	; 0x60
 8003f0a:	4b0c      	ldr	r3, [pc, #48]	; (8003f3c <HAL_MspInit+0x44>)
 8003f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	607b      	str	r3, [r7, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f16:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <HAL_MspInit+0x44>)
 8003f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1a:	4a08      	ldr	r2, [pc, #32]	; (8003f3c <HAL_MspInit+0x44>)
 8003f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f20:	6593      	str	r3, [r2, #88]	; 0x58
 8003f22:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <HAL_MspInit+0x44>)
 8003f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	603b      	str	r3, [r7, #0]
 8003f2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40021000 	.word	0x40021000

08003f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f44:	e7fe      	b.n	8003f44 <NMI_Handler+0x4>

08003f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f46:	b480      	push	{r7}
 8003f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f4a:	e7fe      	b.n	8003f4a <HardFault_Handler+0x4>

08003f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f50:	e7fe      	b.n	8003f50 <MemManage_Handler+0x4>

08003f52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f52:	b480      	push	{r7}
 8003f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f56:	e7fe      	b.n	8003f56 <BusFault_Handler+0x4>

08003f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f5c:	e7fe      	b.n	8003f5c <UsageFault_Handler+0x4>

08003f5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f62:	bf00      	nop
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f70:	bf00      	nop
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f7e:	bf00      	nop
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f8c:	f000 fcca 	bl	8004924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f90:	bf00      	nop
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003f98:	4802      	ldr	r0, [pc, #8]	; (8003fa4 <DMA1_Channel1_IRQHandler+0x10>)
 8003f9a:	f002 faeb 	bl	8006574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003f9e:	bf00      	nop
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	200009bc 	.word	0x200009bc

08003fa8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	  pl_interrupt_motor_count_L();
 8003fac:	f7fe fb74 	bl	8002698 <pl_interrupt_motor_count_L>
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003fb0:	4802      	ldr	r0, [pc, #8]	; (8003fbc <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003fb2:	f004 fcd1 	bl	8008958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003fb6:	bf00      	nop
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000a54 	.word	0x20000a54

08003fc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	  pl_interrupt_motor_count_R();
 8003fc4:	f7fe fb94 	bl	80026f0 <pl_interrupt_motor_count_R>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003fc8:	4802      	ldr	r0, [pc, #8]	; (8003fd4 <TIM2_IRQHandler+0x14>)
 8003fca:	f004 fcc5 	bl	8008958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003fce:	bf00      	nop
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20000aa0 	.word	0x20000aa0

08003fd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003fdc:	4806      	ldr	r0, [pc, #24]	; (8003ff8 <TIM6_DAC_IRQHandler+0x20>)
 8003fde:	f004 fcbb 	bl	8008958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  pl_timer_count();
 8003fe2:	f7ff fbcd 	bl	8003780 <pl_timer_count>
  pl_interupt_getSensor();
 8003fe6:	f7fe fd35 	bl	8002a54 <pl_interupt_getSensor>
  interrupt_calSensor();
 8003fea:	f7fe f815 	bl	8002018 <interrupt_calSensor>

  interrupt_Motor();
 8003fee:	f7fd f82b 	bl	8001048 <interrupt_Motor>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003ff2:	bf00      	nop
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000aec 	.word	0x20000aec

08003ffc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
	return 1;
 8004000:	2301      	movs	r3, #1
}
 8004002:	4618      	mov	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <_kill>:

int _kill(int pid, int sig)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004016:	f005 ff7d 	bl	8009f14 <__errno>
 800401a:	4603      	mov	r3, r0
 800401c:	2216      	movs	r2, #22
 800401e:	601a      	str	r2, [r3, #0]
	return -1;
 8004020:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004024:	4618      	mov	r0, r3
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <_exit>:

void _exit (int status)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004034:	f04f 31ff 	mov.w	r1, #4294967295
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff ffe7 	bl	800400c <_kill>
	while (1) {}		/* Make sure we hang here */
 800403e:	e7fe      	b.n	800403e <_exit+0x12>

08004040 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	e00a      	b.n	8004068 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004052:	f3af 8000 	nop.w
 8004056:	4601      	mov	r1, r0
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	60ba      	str	r2, [r7, #8]
 800405e:	b2ca      	uxtb	r2, r1
 8004060:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	3301      	adds	r3, #1
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	429a      	cmp	r2, r3
 800406e:	dbf0      	blt.n	8004052 <_read+0x12>
	}

return len;
 8004070:	687b      	ldr	r3, [r7, #4]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004088:	2300      	movs	r3, #0
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	e00a      	b.n	80040a4 <_write+0x28>
	{
		HAL_UART_Transmit(&huart2, ptr++, 1, 1);
 800408e:	68b9      	ldr	r1, [r7, #8]
 8004090:	1c4b      	adds	r3, r1, #1
 8004092:	60bb      	str	r3, [r7, #8]
 8004094:	2301      	movs	r3, #1
 8004096:	2201      	movs	r2, #1
 8004098:	4807      	ldr	r0, [pc, #28]	; (80040b8 <_write+0x3c>)
 800409a:	f005 fb11 	bl	80096c0 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	3301      	adds	r3, #1
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	dbf0      	blt.n	800408e <_write+0x12>
	}
	return len;
 80040ac:	687b      	ldr	r3, [r7, #4]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20000b84 	.word	0x20000b84

080040bc <_close>:

int _close(int file)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
	return -1;
 80040c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040e4:	605a      	str	r2, [r3, #4]
	return 0;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <_isatty>:

int _isatty(int file)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
	return 1;
 80040fc:	2301      	movs	r3, #1
}
 80040fe:	4618      	mov	r0, r3
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800410a:	b480      	push	{r7}
 800410c:	b085      	sub	sp, #20
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	607a      	str	r2, [r7, #4]
	return 0;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800412c:	4a14      	ldr	r2, [pc, #80]	; (8004180 <_sbrk+0x5c>)
 800412e:	4b15      	ldr	r3, [pc, #84]	; (8004184 <_sbrk+0x60>)
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004138:	4b13      	ldr	r3, [pc, #76]	; (8004188 <_sbrk+0x64>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d102      	bne.n	8004146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004140:	4b11      	ldr	r3, [pc, #68]	; (8004188 <_sbrk+0x64>)
 8004142:	4a12      	ldr	r2, [pc, #72]	; (800418c <_sbrk+0x68>)
 8004144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004146:	4b10      	ldr	r3, [pc, #64]	; (8004188 <_sbrk+0x64>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4413      	add	r3, r2
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	429a      	cmp	r2, r3
 8004152:	d207      	bcs.n	8004164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004154:	f005 fede 	bl	8009f14 <__errno>
 8004158:	4603      	mov	r3, r0
 800415a:	220c      	movs	r2, #12
 800415c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800415e:	f04f 33ff 	mov.w	r3, #4294967295
 8004162:	e009      	b.n	8004178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004164:	4b08      	ldr	r3, [pc, #32]	; (8004188 <_sbrk+0x64>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800416a:	4b07      	ldr	r3, [pc, #28]	; (8004188 <_sbrk+0x64>)
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4413      	add	r3, r2
 8004172:	4a05      	ldr	r2, [pc, #20]	; (8004188 <_sbrk+0x64>)
 8004174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004176:	68fb      	ldr	r3, [r7, #12]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20010000 	.word	0x20010000
 8004184:	00000400 	.word	0x00000400
 8004188:	20000a50 	.word	0x20000a50
 800418c:	20000c20 	.word	0x20000c20

08004190 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004194:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <SystemInit+0x20>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	4a05      	ldr	r2, [pc, #20]	; (80041b0 <SystemInit+0x20>)
 800419c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80041a4:	bf00      	nop
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	e000ed00 	.word	0xe000ed00

080041b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b096      	sub	sp, #88	; 0x58
 80041b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	605a      	str	r2, [r3, #4]
 80041c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	605a      	str	r2, [r3, #4]
 80041d0:	609a      	str	r2, [r3, #8]
 80041d2:	60da      	str	r2, [r3, #12]
 80041d4:	611a      	str	r2, [r3, #16]
 80041d6:	615a      	str	r2, [r3, #20]
 80041d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80041da:	1d3b      	adds	r3, r7, #4
 80041dc:	222c      	movs	r2, #44	; 0x2c
 80041de:	2100      	movs	r1, #0
 80041e0:	4618      	mov	r0, r3
 80041e2:	f005 fec1 	bl	8009f68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80041e6:	4b39      	ldr	r3, [pc, #228]	; (80042cc <MX_TIM1_Init+0x118>)
 80041e8:	4a39      	ldr	r2, [pc, #228]	; (80042d0 <MX_TIM1_Init+0x11c>)
 80041ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 80041ec:	4b37      	ldr	r3, [pc, #220]	; (80042cc <MX_TIM1_Init+0x118>)
 80041ee:	2207      	movs	r2, #7
 80041f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041f2:	4b36      	ldr	r3, [pc, #216]	; (80042cc <MX_TIM1_Init+0x118>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80041f8:	4b34      	ldr	r3, [pc, #208]	; (80042cc <MX_TIM1_Init+0x118>)
 80041fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80041fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004200:	4b32      	ldr	r3, [pc, #200]	; (80042cc <MX_TIM1_Init+0x118>)
 8004202:	2200      	movs	r2, #0
 8004204:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004206:	4b31      	ldr	r3, [pc, #196]	; (80042cc <MX_TIM1_Init+0x118>)
 8004208:	2200      	movs	r2, #0
 800420a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800420c:	4b2f      	ldr	r3, [pc, #188]	; (80042cc <MX_TIM1_Init+0x118>)
 800420e:	2200      	movs	r2, #0
 8004210:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004212:	482e      	ldr	r0, [pc, #184]	; (80042cc <MX_TIM1_Init+0x118>)
 8004214:	f004 f9e2 	bl	80085dc <HAL_TIM_PWM_Init>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800421e:	f7ff fe66 	bl	8003eee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004222:	2300      	movs	r3, #0
 8004224:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004226:	2300      	movs	r3, #0
 8004228:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800422a:	2300      	movs	r3, #0
 800422c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800422e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004232:	4619      	mov	r1, r3
 8004234:	4825      	ldr	r0, [pc, #148]	; (80042cc <MX_TIM1_Init+0x118>)
 8004236:	f005 f8f9 	bl	800942c <HAL_TIMEx_MasterConfigSynchronization>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004240:	f7ff fe55 	bl	8003eee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004244:	2360      	movs	r3, #96	; 0x60
 8004246:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 5000-1;
 8004248:	f241 3387 	movw	r3, #4999	; 0x1387
 800424c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800424e:	2300      	movs	r3, #0
 8004250:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004252:	2300      	movs	r3, #0
 8004254:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004256:	2300      	movs	r3, #0
 8004258:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800425a:	2300      	movs	r3, #0
 800425c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800425e:	2300      	movs	r3, #0
 8004260:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004262:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004266:	2200      	movs	r2, #0
 8004268:	4619      	mov	r1, r3
 800426a:	4818      	ldr	r0, [pc, #96]	; (80042cc <MX_TIM1_Init+0x118>)
 800426c:	f004 fc94 	bl	8008b98 <HAL_TIM_PWM_ConfigChannel>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8004276:	f7ff fe3a 	bl	8003eee <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800427a:	2300      	movs	r3, #0
 800427c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800427e:	2300      	movs	r3, #0
 8004280:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004286:	2300      	movs	r3, #0
 8004288:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800428a:	2300      	movs	r3, #0
 800428c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800428e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004292:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004298:	2300      	movs	r3, #0
 800429a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800429c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80042a2:	2300      	movs	r3, #0
 80042a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80042a6:	2300      	movs	r3, #0
 80042a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80042aa:	1d3b      	adds	r3, r7, #4
 80042ac:	4619      	mov	r1, r3
 80042ae:	4807      	ldr	r0, [pc, #28]	; (80042cc <MX_TIM1_Init+0x118>)
 80042b0:	f005 f922 	bl	80094f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80042ba:	f7ff fe18 	bl	8003eee <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80042be:	4803      	ldr	r0, [pc, #12]	; (80042cc <MX_TIM1_Init+0x118>)
 80042c0:	f000 f998 	bl	80045f4 <HAL_TIM_MspPostInit>

}
 80042c4:	bf00      	nop
 80042c6:	3758      	adds	r7, #88	; 0x58
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	20000a54 	.word	0x20000a54
 80042d0:	40012c00 	.word	0x40012c00

080042d4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	; 0x28
 80042d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042da:	f107 031c 	add.w	r3, r7, #28
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	605a      	str	r2, [r3, #4]
 80042e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042e6:	463b      	mov	r3, r7
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	605a      	str	r2, [r3, #4]
 80042ee:	609a      	str	r2, [r3, #8]
 80042f0:	60da      	str	r2, [r3, #12]
 80042f2:	611a      	str	r2, [r3, #16]
 80042f4:	615a      	str	r2, [r3, #20]
 80042f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80042f8:	4b22      	ldr	r3, [pc, #136]	; (8004384 <MX_TIM2_Init+0xb0>)
 80042fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8004300:	4b20      	ldr	r3, [pc, #128]	; (8004384 <MX_TIM2_Init+0xb0>)
 8004302:	2207      	movs	r2, #7
 8004304:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004306:	4b1f      	ldr	r3, [pc, #124]	; (8004384 <MX_TIM2_Init+0xb0>)
 8004308:	2200      	movs	r2, #0
 800430a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800430c:	4b1d      	ldr	r3, [pc, #116]	; (8004384 <MX_TIM2_Init+0xb0>)
 800430e:	f242 720f 	movw	r2, #9999	; 0x270f
 8004312:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004314:	4b1b      	ldr	r3, [pc, #108]	; (8004384 <MX_TIM2_Init+0xb0>)
 8004316:	2200      	movs	r2, #0
 8004318:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800431a:	4b1a      	ldr	r3, [pc, #104]	; (8004384 <MX_TIM2_Init+0xb0>)
 800431c:	2200      	movs	r2, #0
 800431e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004320:	4818      	ldr	r0, [pc, #96]	; (8004384 <MX_TIM2_Init+0xb0>)
 8004322:	f004 f95b 	bl	80085dc <HAL_TIM_PWM_Init>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800432c:	f7ff fddf 	bl	8003eee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004334:	2300      	movs	r3, #0
 8004336:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004338:	f107 031c 	add.w	r3, r7, #28
 800433c:	4619      	mov	r1, r3
 800433e:	4811      	ldr	r0, [pc, #68]	; (8004384 <MX_TIM2_Init+0xb0>)
 8004340:	f005 f874 	bl	800942c <HAL_TIMEx_MasterConfigSynchronization>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800434a:	f7ff fdd0 	bl	8003eee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800434e:	2360      	movs	r3, #96	; 0x60
 8004350:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000-1;
 8004352:	f241 3387 	movw	r3, #4999	; 0x1387
 8004356:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004358:	2300      	movs	r3, #0
 800435a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800435c:	2300      	movs	r3, #0
 800435e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004360:	463b      	mov	r3, r7
 8004362:	2204      	movs	r2, #4
 8004364:	4619      	mov	r1, r3
 8004366:	4807      	ldr	r0, [pc, #28]	; (8004384 <MX_TIM2_Init+0xb0>)
 8004368:	f004 fc16 	bl	8008b98 <HAL_TIM_PWM_ConfigChannel>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8004372:	f7ff fdbc 	bl	8003eee <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004376:	4803      	ldr	r0, [pc, #12]	; (8004384 <MX_TIM2_Init+0xb0>)
 8004378:	f000 f93c 	bl	80045f4 <HAL_TIM_MspPostInit>

}
 800437c:	bf00      	nop
 800437e:	3728      	adds	r7, #40	; 0x28
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20000aa0 	.word	0x20000aa0

08004388 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800438e:	1d3b      	adds	r3, r7, #4
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	605a      	str	r2, [r3, #4]
 8004396:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004398:	4b14      	ldr	r3, [pc, #80]	; (80043ec <MX_TIM6_Init+0x64>)
 800439a:	4a15      	ldr	r2, [pc, #84]	; (80043f0 <MX_TIM6_Init+0x68>)
 800439c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 800439e:	4b13      	ldr	r3, [pc, #76]	; (80043ec <MX_TIM6_Init+0x64>)
 80043a0:	224f      	movs	r2, #79	; 0x4f
 80043a2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043a4:	4b11      	ldr	r3, [pc, #68]	; (80043ec <MX_TIM6_Init+0x64>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80043aa:	4b10      	ldr	r3, [pc, #64]	; (80043ec <MX_TIM6_Init+0x64>)
 80043ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80043b0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043b2:	4b0e      	ldr	r3, [pc, #56]	; (80043ec <MX_TIM6_Init+0x64>)
 80043b4:	2280      	movs	r2, #128	; 0x80
 80043b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80043b8:	480c      	ldr	r0, [pc, #48]	; (80043ec <MX_TIM6_Init+0x64>)
 80043ba:	f004 f863 	bl	8008484 <HAL_TIM_Base_Init>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80043c4:	f7ff fd93 	bl	8003eee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043c8:	2300      	movs	r3, #0
 80043ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80043d0:	1d3b      	adds	r3, r7, #4
 80043d2:	4619      	mov	r1, r3
 80043d4:	4805      	ldr	r0, [pc, #20]	; (80043ec <MX_TIM6_Init+0x64>)
 80043d6:	f005 f829 	bl	800942c <HAL_TIMEx_MasterConfigSynchronization>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80043e0:	f7ff fd85 	bl	8003eee <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80043e4:	bf00      	nop
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20000aec 	.word	0x20000aec
 80043f0:	40001000 	.word	0x40001000

080043f4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b096      	sub	sp, #88	; 0x58
 80043f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	605a      	str	r2, [r3, #4]
 8004404:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004406:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	605a      	str	r2, [r3, #4]
 8004410:	609a      	str	r2, [r3, #8]
 8004412:	60da      	str	r2, [r3, #12]
 8004414:	611a      	str	r2, [r3, #16]
 8004416:	615a      	str	r2, [r3, #20]
 8004418:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800441a:	1d3b      	adds	r3, r7, #4
 800441c:	222c      	movs	r2, #44	; 0x2c
 800441e:	2100      	movs	r1, #0
 8004420:	4618      	mov	r0, r3
 8004422:	f005 fda1 	bl	8009f68 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004426:	4b34      	ldr	r3, [pc, #208]	; (80044f8 <MX_TIM15_Init+0x104>)
 8004428:	4a34      	ldr	r2, [pc, #208]	; (80044fc <MX_TIM15_Init+0x108>)
 800442a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 800442c:	4b32      	ldr	r3, [pc, #200]	; (80044f8 <MX_TIM15_Init+0x104>)
 800442e:	224f      	movs	r2, #79	; 0x4f
 8004430:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004432:	4b31      	ldr	r3, [pc, #196]	; (80044f8 <MX_TIM15_Init+0x104>)
 8004434:	2200      	movs	r2, #0
 8004436:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 5000-1;
 8004438:	4b2f      	ldr	r3, [pc, #188]	; (80044f8 <MX_TIM15_Init+0x104>)
 800443a:	f241 3287 	movw	r2, #4999	; 0x1387
 800443e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004440:	4b2d      	ldr	r3, [pc, #180]	; (80044f8 <MX_TIM15_Init+0x104>)
 8004442:	2200      	movs	r2, #0
 8004444:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004446:	4b2c      	ldr	r3, [pc, #176]	; (80044f8 <MX_TIM15_Init+0x104>)
 8004448:	2200      	movs	r2, #0
 800444a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800444c:	4b2a      	ldr	r3, [pc, #168]	; (80044f8 <MX_TIM15_Init+0x104>)
 800444e:	2200      	movs	r2, #0
 8004450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8004452:	4829      	ldr	r0, [pc, #164]	; (80044f8 <MX_TIM15_Init+0x104>)
 8004454:	f004 f8c2 	bl	80085dc <HAL_TIM_PWM_Init>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800445e:	f7ff fd46 	bl	8003eee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004462:	2300      	movs	r3, #0
 8004464:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004466:	2300      	movs	r3, #0
 8004468:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800446a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800446e:	4619      	mov	r1, r3
 8004470:	4821      	ldr	r0, [pc, #132]	; (80044f8 <MX_TIM15_Init+0x104>)
 8004472:	f004 ffdb 	bl	800942c <HAL_TIMEx_MasterConfigSynchronization>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800447c:	f7ff fd37 	bl	8003eee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004480:	2360      	movs	r3, #96	; 0x60
 8004482:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 2500-1;
 8004484:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8004488:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800448a:	2300      	movs	r3, #0
 800448c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800448e:	2300      	movs	r3, #0
 8004490:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004492:	2300      	movs	r3, #0
 8004494:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004496:	2300      	movs	r3, #0
 8004498:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800449a:	2300      	movs	r3, #0
 800449c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800449e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044a2:	2204      	movs	r2, #4
 80044a4:	4619      	mov	r1, r3
 80044a6:	4814      	ldr	r0, [pc, #80]	; (80044f8 <MX_TIM15_Init+0x104>)
 80044a8:	f004 fb76 	bl	8008b98 <HAL_TIM_PWM_ConfigChannel>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 80044b2:	f7ff fd1c 	bl	8003eee <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80044b6:	2300      	movs	r3, #0
 80044b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80044c2:	2300      	movs	r3, #0
 80044c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80044c6:	2300      	movs	r3, #0
 80044c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80044ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80044d0:	2300      	movs	r3, #0
 80044d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80044d4:	1d3b      	adds	r3, r7, #4
 80044d6:	4619      	mov	r1, r3
 80044d8:	4807      	ldr	r0, [pc, #28]	; (80044f8 <MX_TIM15_Init+0x104>)
 80044da:	f005 f80d 	bl	80094f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <MX_TIM15_Init+0xf4>
  {
    Error_Handler();
 80044e4:	f7ff fd03 	bl	8003eee <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80044e8:	4803      	ldr	r0, [pc, #12]	; (80044f8 <MX_TIM15_Init+0x104>)
 80044ea:	f000 f883 	bl	80045f4 <HAL_TIM_MspPostInit>

}
 80044ee:	bf00      	nop
 80044f0:	3758      	adds	r7, #88	; 0x58
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20000b38 	.word	0x20000b38
 80044fc:	40014000 	.word	0x40014000

08004500 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a23      	ldr	r2, [pc, #140]	; (800459c <HAL_TIM_PWM_MspInit+0x9c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d114      	bne.n	800453c <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004512:	4b23      	ldr	r3, [pc, #140]	; (80045a0 <HAL_TIM_PWM_MspInit+0xa0>)
 8004514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004516:	4a22      	ldr	r2, [pc, #136]	; (80045a0 <HAL_TIM_PWM_MspInit+0xa0>)
 8004518:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800451c:	6613      	str	r3, [r2, #96]	; 0x60
 800451e:	4b20      	ldr	r3, [pc, #128]	; (80045a0 <HAL_TIM_PWM_MspInit+0xa0>)
 8004520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800452a:	2200      	movs	r2, #0
 800452c:	2100      	movs	r1, #0
 800452e:	2019      	movs	r0, #25
 8004530:	f001 fe93 	bl	800625a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004534:	2019      	movs	r0, #25
 8004536:	f001 feac 	bl	8006292 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800453a:	e02a      	b.n	8004592 <HAL_TIM_PWM_MspInit+0x92>
  else if(tim_pwmHandle->Instance==TIM2)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004544:	d114      	bne.n	8004570 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004546:	4b16      	ldr	r3, [pc, #88]	; (80045a0 <HAL_TIM_PWM_MspInit+0xa0>)
 8004548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454a:	4a15      	ldr	r2, [pc, #84]	; (80045a0 <HAL_TIM_PWM_MspInit+0xa0>)
 800454c:	f043 0301 	orr.w	r3, r3, #1
 8004550:	6593      	str	r3, [r2, #88]	; 0x58
 8004552:	4b13      	ldr	r3, [pc, #76]	; (80045a0 <HAL_TIM_PWM_MspInit+0xa0>)
 8004554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800455e:	2200      	movs	r2, #0
 8004560:	2100      	movs	r1, #0
 8004562:	201c      	movs	r0, #28
 8004564:	f001 fe79 	bl	800625a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004568:	201c      	movs	r0, #28
 800456a:	f001 fe92 	bl	8006292 <HAL_NVIC_EnableIRQ>
}
 800456e:	e010      	b.n	8004592 <HAL_TIM_PWM_MspInit+0x92>
  else if(tim_pwmHandle->Instance==TIM15)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a0b      	ldr	r2, [pc, #44]	; (80045a4 <HAL_TIM_PWM_MspInit+0xa4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d10b      	bne.n	8004592 <HAL_TIM_PWM_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800457a:	4b09      	ldr	r3, [pc, #36]	; (80045a0 <HAL_TIM_PWM_MspInit+0xa0>)
 800457c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457e:	4a08      	ldr	r2, [pc, #32]	; (80045a0 <HAL_TIM_PWM_MspInit+0xa0>)
 8004580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004584:	6613      	str	r3, [r2, #96]	; 0x60
 8004586:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <HAL_TIM_PWM_MspInit+0xa0>)
 8004588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800458a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]
}
 8004592:	bf00      	nop
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40012c00 	.word	0x40012c00
 80045a0:	40021000 	.word	0x40021000
 80045a4:	40014000 	.word	0x40014000

080045a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a0d      	ldr	r2, [pc, #52]	; (80045ec <HAL_TIM_Base_MspInit+0x44>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d113      	bne.n	80045e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80045ba:	4b0d      	ldr	r3, [pc, #52]	; (80045f0 <HAL_TIM_Base_MspInit+0x48>)
 80045bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045be:	4a0c      	ldr	r2, [pc, #48]	; (80045f0 <HAL_TIM_Base_MspInit+0x48>)
 80045c0:	f043 0310 	orr.w	r3, r3, #16
 80045c4:	6593      	str	r3, [r2, #88]	; 0x58
 80045c6:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <HAL_TIM_Base_MspInit+0x48>)
 80045c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 4, 0);
 80045d2:	2200      	movs	r2, #0
 80045d4:	2104      	movs	r1, #4
 80045d6:	2036      	movs	r0, #54	; 0x36
 80045d8:	f001 fe3f 	bl	800625a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80045dc:	2036      	movs	r0, #54	; 0x36
 80045de:	f001 fe58 	bl	8006292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80045e2:	bf00      	nop
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40001000 	.word	0x40001000
 80045f0:	40021000 	.word	0x40021000

080045f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08a      	sub	sp, #40	; 0x28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045fc:	f107 0314 	add.w	r3, r7, #20
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	605a      	str	r2, [r3, #4]
 8004606:	609a      	str	r2, [r3, #8]
 8004608:	60da      	str	r2, [r3, #12]
 800460a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a35      	ldr	r2, [pc, #212]	; (80046e8 <HAL_TIM_MspPostInit+0xf4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d11e      	bne.n	8004654 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004616:	4b35      	ldr	r3, [pc, #212]	; (80046ec <HAL_TIM_MspPostInit+0xf8>)
 8004618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461a:	4a34      	ldr	r2, [pc, #208]	; (80046ec <HAL_TIM_MspPostInit+0xf8>)
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004622:	4b32      	ldr	r3, [pc, #200]	; (80046ec <HAL_TIM_MspPostInit+0xf8>)
 8004624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_CLOCK_L_Pin;
 800462e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004634:	2302      	movs	r3, #2
 8004636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004638:	2300      	movs	r3, #0
 800463a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800463c:	2300      	movs	r3, #0
 800463e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004640:	2301      	movs	r3, #1
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_CLOCK_L_GPIO_Port, &GPIO_InitStruct);
 8004644:	f107 0314 	add.w	r3, r7, #20
 8004648:	4619      	mov	r1, r3
 800464a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800464e:	f002 f871 	bl	8006734 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004652:	e044      	b.n	80046de <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM2)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465c:	d11d      	bne.n	800469a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800465e:	4b23      	ldr	r3, [pc, #140]	; (80046ec <HAL_TIM_MspPostInit+0xf8>)
 8004660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004662:	4a22      	ldr	r2, [pc, #136]	; (80046ec <HAL_TIM_MspPostInit+0xf8>)
 8004664:	f043 0301 	orr.w	r3, r3, #1
 8004668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800466a:	4b20      	ldr	r3, [pc, #128]	; (80046ec <HAL_TIM_MspPostInit+0xf8>)
 800466c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_CLOCK_R_Pin;
 8004676:	2302      	movs	r3, #2
 8004678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467a:	2302      	movs	r3, #2
 800467c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800467e:	2300      	movs	r3, #0
 8004680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004682:	2300      	movs	r3, #0
 8004684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004686:	2301      	movs	r3, #1
 8004688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_CLOCK_R_GPIO_Port, &GPIO_InitStruct);
 800468a:	f107 0314 	add.w	r3, r7, #20
 800468e:	4619      	mov	r1, r3
 8004690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004694:	f002 f84e 	bl	8006734 <HAL_GPIO_Init>
}
 8004698:	e021      	b.n	80046de <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM15)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a14      	ldr	r2, [pc, #80]	; (80046f0 <HAL_TIM_MspPostInit+0xfc>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d11c      	bne.n	80046de <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046a4:	4b11      	ldr	r3, [pc, #68]	; (80046ec <HAL_TIM_MspPostInit+0xf8>)
 80046a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a8:	4a10      	ldr	r2, [pc, #64]	; (80046ec <HAL_TIM_MspPostInit+0xf8>)
 80046aa:	f043 0301 	orr.w	r3, r3, #1
 80046ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046b0:	4b0e      	ldr	r3, [pc, #56]	; (80046ec <HAL_TIM_MspPostInit+0xf8>)
 80046b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	60bb      	str	r3, [r7, #8]
 80046ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPEAKER_Pin;
 80046bc:	2308      	movs	r3, #8
 80046be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c0:	2302      	movs	r3, #2
 80046c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c4:	2300      	movs	r3, #0
 80046c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c8:	2300      	movs	r3, #0
 80046ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80046cc:	230e      	movs	r3, #14
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPEAKER_GPIO_Port, &GPIO_InitStruct);
 80046d0:	f107 0314 	add.w	r3, r7, #20
 80046d4:	4619      	mov	r1, r3
 80046d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046da:	f002 f82b 	bl	8006734 <HAL_GPIO_Init>
}
 80046de:	bf00      	nop
 80046e0:	3728      	adds	r7, #40	; 0x28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40012c00 	.word	0x40012c00
 80046ec:	40021000 	.word	0x40021000
 80046f0:	40014000 	.word	0x40014000

080046f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80046f8:	4b14      	ldr	r3, [pc, #80]	; (800474c <MX_USART2_UART_Init+0x58>)
 80046fa:	4a15      	ldr	r2, [pc, #84]	; (8004750 <MX_USART2_UART_Init+0x5c>)
 80046fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80046fe:	4b13      	ldr	r3, [pc, #76]	; (800474c <MX_USART2_UART_Init+0x58>)
 8004700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004704:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004706:	4b11      	ldr	r3, [pc, #68]	; (800474c <MX_USART2_UART_Init+0x58>)
 8004708:	2200      	movs	r2, #0
 800470a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <MX_USART2_UART_Init+0x58>)
 800470e:	2200      	movs	r2, #0
 8004710:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004712:	4b0e      	ldr	r3, [pc, #56]	; (800474c <MX_USART2_UART_Init+0x58>)
 8004714:	2200      	movs	r2, #0
 8004716:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004718:	4b0c      	ldr	r3, [pc, #48]	; (800474c <MX_USART2_UART_Init+0x58>)
 800471a:	220c      	movs	r2, #12
 800471c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800471e:	4b0b      	ldr	r3, [pc, #44]	; (800474c <MX_USART2_UART_Init+0x58>)
 8004720:	2200      	movs	r2, #0
 8004722:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004724:	4b09      	ldr	r3, [pc, #36]	; (800474c <MX_USART2_UART_Init+0x58>)
 8004726:	2200      	movs	r2, #0
 8004728:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800472a:	4b08      	ldr	r3, [pc, #32]	; (800474c <MX_USART2_UART_Init+0x58>)
 800472c:	2200      	movs	r2, #0
 800472e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004730:	4b06      	ldr	r3, [pc, #24]	; (800474c <MX_USART2_UART_Init+0x58>)
 8004732:	2200      	movs	r2, #0
 8004734:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004736:	4805      	ldr	r0, [pc, #20]	; (800474c <MX_USART2_UART_Init+0x58>)
 8004738:	f004 ff74 	bl	8009624 <HAL_UART_Init>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004742:	f7ff fbd4 	bl	8003eee <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004746:	bf00      	nop
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	20000b84 	.word	0x20000b84
 8004750:	40004400 	.word	0x40004400

08004754 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b09e      	sub	sp, #120	; 0x78
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800475c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	605a      	str	r2, [r3, #4]
 8004766:	609a      	str	r2, [r3, #8]
 8004768:	60da      	str	r2, [r3, #12]
 800476a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800476c:	f107 0310 	add.w	r3, r7, #16
 8004770:	2254      	movs	r2, #84	; 0x54
 8004772:	2100      	movs	r1, #0
 8004774:	4618      	mov	r0, r3
 8004776:	f005 fbf7 	bl	8009f68 <memset>
  if(uartHandle->Instance==USART2)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a28      	ldr	r2, [pc, #160]	; (8004820 <HAL_UART_MspInit+0xcc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d148      	bne.n	8004816 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004784:	2302      	movs	r3, #2
 8004786:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004788:	2300      	movs	r3, #0
 800478a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800478c:	f107 0310 	add.w	r3, r7, #16
 8004790:	4618      	mov	r0, r3
 8004792:	f003 fb8f 	bl	8007eb4 <HAL_RCCEx_PeriphCLKConfig>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800479c:	f7ff fba7 	bl	8003eee <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80047a0:	4b20      	ldr	r3, [pc, #128]	; (8004824 <HAL_UART_MspInit+0xd0>)
 80047a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a4:	4a1f      	ldr	r2, [pc, #124]	; (8004824 <HAL_UART_MspInit+0xd0>)
 80047a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047aa:	6593      	str	r3, [r2, #88]	; 0x58
 80047ac:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <HAL_UART_MspInit+0xd0>)
 80047ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047b8:	4b1a      	ldr	r3, [pc, #104]	; (8004824 <HAL_UART_MspInit+0xd0>)
 80047ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047bc:	4a19      	ldr	r2, [pc, #100]	; (8004824 <HAL_UART_MspInit+0xd0>)
 80047be:	f043 0301 	orr.w	r3, r3, #1
 80047c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047c4:	4b17      	ldr	r3, [pc, #92]	; (8004824 <HAL_UART_MspInit+0xd0>)
 80047c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80047d0:	2304      	movs	r3, #4
 80047d2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d4:	2302      	movs	r3, #2
 80047d6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d8:	2300      	movs	r3, #0
 80047da:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047dc:	2303      	movs	r3, #3
 80047de:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80047e0:	2307      	movs	r3, #7
 80047e2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80047e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80047e8:	4619      	mov	r1, r3
 80047ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047ee:	f001 ffa1 	bl	8006734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80047f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047f6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f8:	2302      	movs	r3, #2
 80047fa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fc:	2300      	movs	r3, #0
 80047fe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004800:	2303      	movs	r3, #3
 8004802:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8004804:	2303      	movs	r3, #3
 8004806:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004808:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800480c:	4619      	mov	r1, r3
 800480e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004812:	f001 ff8f 	bl	8006734 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004816:	bf00      	nop
 8004818:	3778      	adds	r7, #120	; 0x78
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40004400 	.word	0x40004400
 8004824:	40021000 	.word	0x40021000

08004828 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004860 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800482c:	f7ff fcb0 	bl	8004190 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004830:	480c      	ldr	r0, [pc, #48]	; (8004864 <LoopForever+0x6>)
  ldr r1, =_edata
 8004832:	490d      	ldr	r1, [pc, #52]	; (8004868 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004834:	4a0d      	ldr	r2, [pc, #52]	; (800486c <LoopForever+0xe>)
  movs r3, #0
 8004836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004838:	e002      	b.n	8004840 <LoopCopyDataInit>

0800483a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800483a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800483c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800483e:	3304      	adds	r3, #4

08004840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004844:	d3f9      	bcc.n	800483a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004846:	4a0a      	ldr	r2, [pc, #40]	; (8004870 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004848:	4c0a      	ldr	r4, [pc, #40]	; (8004874 <LoopForever+0x16>)
  movs r3, #0
 800484a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800484c:	e001      	b.n	8004852 <LoopFillZerobss>

0800484e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800484e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004850:	3204      	adds	r2, #4

08004852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004854:	d3fb      	bcc.n	800484e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004856:	f005 fb63 	bl	8009f20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800485a:	f7ff fa55 	bl	8003d08 <main>

0800485e <LoopForever>:

LoopForever:
    b LoopForever
 800485e:	e7fe      	b.n	800485e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004860:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004868:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800486c:	0800ce74 	.word	0x0800ce74
  ldr r2, =_sbss
 8004870:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8004874:	20000c1c 	.word	0x20000c1c

08004878 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004878:	e7fe      	b.n	8004878 <ADC1_IRQHandler>

0800487a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b082      	sub	sp, #8
 800487e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004880:	2300      	movs	r3, #0
 8004882:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004884:	2003      	movs	r0, #3
 8004886:	f001 fcdd 	bl	8006244 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800488a:	2000      	movs	r0, #0
 800488c:	f000 f80e 	bl	80048ac <HAL_InitTick>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	71fb      	strb	r3, [r7, #7]
 800489a:	e001      	b.n	80048a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800489c:	f7ff fb2c 	bl	8003ef8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80048a0:	79fb      	ldrb	r3, [r7, #7]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80048b8:	4b17      	ldr	r3, [pc, #92]	; (8004918 <HAL_InitTick+0x6c>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d023      	beq.n	8004908 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80048c0:	4b16      	ldr	r3, [pc, #88]	; (800491c <HAL_InitTick+0x70>)
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	4b14      	ldr	r3, [pc, #80]	; (8004918 <HAL_InitTick+0x6c>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	4619      	mov	r1, r3
 80048ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80048d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d6:	4618      	mov	r0, r3
 80048d8:	f001 fce9 	bl	80062ae <HAL_SYSTICK_Config>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10f      	bne.n	8004902 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b0f      	cmp	r3, #15
 80048e6:	d809      	bhi.n	80048fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048e8:	2200      	movs	r2, #0
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	f04f 30ff 	mov.w	r0, #4294967295
 80048f0:	f001 fcb3 	bl	800625a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80048f4:	4a0a      	ldr	r2, [pc, #40]	; (8004920 <HAL_InitTick+0x74>)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	e007      	b.n	800490c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	73fb      	strb	r3, [r7, #15]
 8004900:	e004      	b.n	800490c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	73fb      	strb	r3, [r7, #15]
 8004906:	e001      	b.n	800490c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800490c:	7bfb      	ldrb	r3, [r7, #15]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20000008 	.word	0x20000008
 800491c:	20000000 	.word	0x20000000
 8004920:	20000004 	.word	0x20000004

08004924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004928:	4b06      	ldr	r3, [pc, #24]	; (8004944 <HAL_IncTick+0x20>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	461a      	mov	r2, r3
 800492e:	4b06      	ldr	r3, [pc, #24]	; (8004948 <HAL_IncTick+0x24>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4413      	add	r3, r2
 8004934:	4a04      	ldr	r2, [pc, #16]	; (8004948 <HAL_IncTick+0x24>)
 8004936:	6013      	str	r3, [r2, #0]
}
 8004938:	bf00      	nop
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20000008 	.word	0x20000008
 8004948:	20000c08 	.word	0x20000c08

0800494c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  return uwTick;
 8004950:	4b03      	ldr	r3, [pc, #12]	; (8004960 <HAL_GetTick+0x14>)
 8004952:	681b      	ldr	r3, [r3, #0]
}
 8004954:	4618      	mov	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	20000c08 	.word	0x20000c08

08004964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800496c:	f7ff ffee 	bl	800494c <HAL_GetTick>
 8004970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d005      	beq.n	800498a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800497e:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <HAL_Delay+0x44>)
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4413      	add	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800498a:	bf00      	nop
 800498c:	f7ff ffde 	bl	800494c <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	429a      	cmp	r2, r3
 800499a:	d8f7      	bhi.n	800498c <HAL_Delay+0x28>
  {
  }
}
 800499c:	bf00      	nop
 800499e:	bf00      	nop
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20000008 	.word	0x20000008

080049ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	609a      	str	r2, [r3, #8]
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	609a      	str	r2, [r3, #8]
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3360      	adds	r3, #96	; 0x60
 8004a26:	461a      	mov	r2, r3
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <LL_ADC_SetOffset+0x44>)
 8004a36:	4013      	ands	r3, r2
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004a4c:	bf00      	nop
 8004a4e:	371c      	adds	r7, #28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	03fff000 	.word	0x03fff000

08004a5c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	3360      	adds	r3, #96	; 0x60
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3360      	adds	r3, #96	; 0x60
 8004a98:	461a      	mov	r2, r3
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	431a      	orrs	r2, r3
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004ab2:	bf00      	nop
 8004ab4:	371c      	adds	r7, #28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	3330      	adds	r3, #48	; 0x30
 8004af4:	461a      	mov	r2, r3
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	0a1b      	lsrs	r3, r3, #8
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	f003 030c 	and.w	r3, r3, #12
 8004b00:	4413      	add	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f003 031f 	and.w	r3, r3, #31
 8004b0e:	211f      	movs	r1, #31
 8004b10:	fa01 f303 	lsl.w	r3, r1, r3
 8004b14:	43db      	mvns	r3, r3
 8004b16:	401a      	ands	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	0e9b      	lsrs	r3, r3, #26
 8004b1c:	f003 011f 	and.w	r1, r3, #31
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f003 031f 	and.w	r3, r3, #31
 8004b26:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004b30:	bf00      	nop
 8004b32:	371c      	adds	r7, #28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	3314      	adds	r3, #20
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	0e5b      	lsrs	r3, r3, #25
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	4413      	add	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	0d1b      	lsrs	r3, r3, #20
 8004b64:	f003 031f 	and.w	r3, r3, #31
 8004b68:	2107      	movs	r1, #7
 8004b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	401a      	ands	r2, r3
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	0d1b      	lsrs	r3, r3, #20
 8004b76:	f003 031f 	and.w	r3, r3, #31
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b80:	431a      	orrs	r2, r3
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004b86:	bf00      	nop
 8004b88:	371c      	adds	r7, #28
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
	...

08004b94 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bac:	43db      	mvns	r3, r3
 8004bae:	401a      	ands	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f003 0318 	and.w	r3, r3, #24
 8004bb6:	4908      	ldr	r1, [pc, #32]	; (8004bd8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004bb8:	40d9      	lsrs	r1, r3
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	400b      	ands	r3, r1
 8004bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004bca:	bf00      	nop
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	0007ffff 	.word	0x0007ffff

08004bdc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004bec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6093      	str	r3, [r2, #8]
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c14:	d101      	bne.n	8004c1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e000      	b.n	8004c1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004c38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c64:	d101      	bne.n	8004c6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c8c:	f043 0201 	orr.w	r2, r3, #1
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004cb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004cb4:	f043 0202 	orr.w	r2, r3, #2
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d101      	bne.n	8004ce0 <LL_ADC_IsEnabled+0x18>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e000      	b.n	8004ce2 <LL_ADC_IsEnabled+0x1a>
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d101      	bne.n	8004d06 <LL_ADC_IsDisableOngoing+0x18>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e000      	b.n	8004d08 <LL_ADC_IsDisableOngoing+0x1a>
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d28:	f043 0204 	orr.w	r2, r3, #4
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d50:	f043 0210 	orr.w	r2, r3, #16
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d101      	bne.n	8004d7c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d9a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d9e:	f043 0220 	orr.w	r2, r3, #32
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 0308 	and.w	r3, r3, #8
 8004dc2:	2b08      	cmp	r3, #8
 8004dc4:	d101      	bne.n	8004dca <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e000      	b.n	8004dcc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004de4:	2300      	movs	r3, #0
 8004de6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e12c      	b.n	800504c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d109      	bne.n	8004e14 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7fe fd8d 	bl	8003920 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff fef1 	bl	8004c00 <LL_ADC_IsDeepPowerDownEnabled>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d004      	beq.n	8004e2e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff fed7 	bl	8004bdc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff ff0c 	bl	8004c50 <LL_ADC_IsInternalRegulatorEnabled>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d115      	bne.n	8004e6a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7ff fef0 	bl	8004c28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e48:	4b82      	ldr	r3, [pc, #520]	; (8005054 <HAL_ADC_Init+0x27c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	099b      	lsrs	r3, r3, #6
 8004e4e:	4a82      	ldr	r2, [pc, #520]	; (8005058 <HAL_ADC_Init+0x280>)
 8004e50:	fba2 2303 	umull	r2, r3, r2, r3
 8004e54:	099b      	lsrs	r3, r3, #6
 8004e56:	3301      	adds	r3, #1
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004e5c:	e002      	b.n	8004e64 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	3b01      	subs	r3, #1
 8004e62:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1f9      	bne.n	8004e5e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7ff feee 	bl	8004c50 <LL_ADC_IsInternalRegulatorEnabled>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10d      	bne.n	8004e96 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7e:	f043 0210 	orr.w	r2, r3, #16
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8a:	f043 0201 	orr.w	r2, r3, #1
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff ff62 	bl	8004d64 <LL_ADC_REG_IsConversionOngoing>
 8004ea0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea6:	f003 0310 	and.w	r3, r3, #16
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f040 80c5 	bne.w	800503a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f040 80c1 	bne.w	800503a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004ec0:	f043 0202 	orr.w	r2, r3, #2
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7ff fefb 	bl	8004cc8 <LL_ADC_IsEnabled>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10b      	bne.n	8004ef0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ed8:	4860      	ldr	r0, [pc, #384]	; (800505c <HAL_ADC_Init+0x284>)
 8004eda:	f7ff fef5 	bl	8004cc8 <LL_ADC_IsEnabled>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d105      	bne.n	8004ef0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	4619      	mov	r1, r3
 8004eea:	485d      	ldr	r0, [pc, #372]	; (8005060 <HAL_ADC_Init+0x288>)
 8004eec:	f7ff fd5e 	bl	80049ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	7e5b      	ldrb	r3, [r3, #25]
 8004ef4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004efa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004f00:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004f06:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f0e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004f10:	4313      	orrs	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d106      	bne.n	8004f2c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	3b01      	subs	r3, #1
 8004f24:	045b      	lsls	r3, r3, #17
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d009      	beq.n	8004f48 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f40:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	4b45      	ldr	r3, [pc, #276]	; (8005064 <HAL_ADC_Init+0x28c>)
 8004f50:	4013      	ands	r3, r2
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6812      	ldr	r2, [r2, #0]
 8004f56:	69b9      	ldr	r1, [r7, #24]
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff feff 	bl	8004d64 <LL_ADC_REG_IsConversionOngoing>
 8004f66:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff ff20 	bl	8004db2 <LL_ADC_INJ_IsConversionOngoing>
 8004f72:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d13d      	bne.n	8004ff6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d13a      	bne.n	8004ff6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004f84:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f8c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f9c:	f023 0302 	bic.w	r3, r3, #2
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6812      	ldr	r2, [r2, #0]
 8004fa4:	69b9      	ldr	r1, [r7, #24]
 8004fa6:	430b      	orrs	r3, r1
 8004fa8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d118      	bne.n	8004fe6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004fbe:	f023 0304 	bic.w	r3, r3, #4
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004fca:	4311      	orrs	r1, r2
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004fd0:	4311      	orrs	r1, r2
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0201 	orr.w	r2, r2, #1
 8004fe2:	611a      	str	r2, [r3, #16]
 8004fe4:	e007      	b.n	8004ff6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0201 	bic.w	r2, r2, #1
 8004ff4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d10c      	bne.n	8005018 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005004:	f023 010f 	bic.w	r1, r3, #15
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	1e5a      	subs	r2, r3, #1
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	631a      	str	r2, [r3, #48]	; 0x30
 8005016:	e007      	b.n	8005028 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 020f 	bic.w	r2, r2, #15
 8005026:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502c:	f023 0303 	bic.w	r3, r3, #3
 8005030:	f043 0201 	orr.w	r2, r3, #1
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	655a      	str	r2, [r3, #84]	; 0x54
 8005038:	e007      	b.n	800504a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503e:	f043 0210 	orr.w	r2, r3, #16
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800504a:	7ffb      	ldrb	r3, [r7, #31]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3720      	adds	r7, #32
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	20000000 	.word	0x20000000
 8005058:	053e2d63 	.word	0x053e2d63
 800505c:	50040000 	.word	0x50040000
 8005060:	50040300 	.word	0x50040300
 8005064:	fff0c007 	.word	0xfff0c007

08005068 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff fe75 	bl	8004d64 <LL_ADC_REG_IsConversionOngoing>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d14f      	bne.n	8005120 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <HAL_ADC_Start+0x26>
 800508a:	2302      	movs	r3, #2
 800508c:	e04b      	b.n	8005126 <HAL_ADC_Start+0xbe>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 feae 	bl	8005df8 <ADC_Enable>
 800509c:	4603      	mov	r3, r0
 800509e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d137      	bne.n	8005116 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80050ae:	f023 0301 	bic.w	r3, r3, #1
 80050b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c6:	d106      	bne.n	80050d6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050cc:	f023 0206 	bic.w	r2, r3, #6
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	659a      	str	r2, [r3, #88]	; 0x58
 80050d4:	e002      	b.n	80050dc <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	221c      	movs	r2, #28
 80050e2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d007      	beq.n	800510a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005102:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff fe00 	bl	8004d14 <LL_ADC_REG_StartConversion>
 8005114:	e006      	b.n	8005124 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800511e:	e001      	b.n	8005124 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005120:	2302      	movs	r3, #2
 8005122:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8005124:	7bfb      	ldrb	r3, [r7, #15]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_ADC_Stop+0x16>
 8005140:	2302      	movs	r3, #2
 8005142:	e023      	b.n	800518c <HAL_ADC_Stop+0x5e>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800514c:	2103      	movs	r1, #3
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fd96 	bl	8005c80 <ADC_ConversionStop>
 8005154:	4603      	mov	r3, r0
 8005156:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d111      	bne.n	8005182 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 feac 	bl	8005ebc <ADC_Disable>
 8005164:	4603      	mov	r3, r0
 8005166:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005168:	7bfb      	ldrb	r3, [r7, #15]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d109      	bne.n	8005182 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005172:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005176:	f023 0301 	bic.w	r3, r3, #1
 800517a:	f043 0201 	orr.w	r2, r3, #1
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800518a:	7bfb      	ldrb	r3, [r7, #15]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	d102      	bne.n	80051ac <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80051a6:	2308      	movs	r3, #8
 80051a8:	617b      	str	r3, [r7, #20]
 80051aa:	e010      	b.n	80051ce <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d007      	beq.n	80051ca <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051be:	f043 0220 	orr.w	r2, r3, #32
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e06f      	b.n	80052aa <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80051ca:	2304      	movs	r3, #4
 80051cc:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80051ce:	f7ff fbbd 	bl	800494c <HAL_GetTick>
 80051d2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80051d4:	e021      	b.n	800521a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051dc:	d01d      	beq.n	800521a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80051de:	f7ff fbb5 	bl	800494c <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d302      	bcc.n	80051f4 <HAL_ADC_PollForConversion+0x60>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d112      	bne.n	800521a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	4013      	ands	r3, r2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10b      	bne.n	800521a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005206:	f043 0204 	orr.w	r2, r3, #4
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e047      	b.n	80052aa <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	4013      	ands	r3, r2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0d6      	beq.n	80051d6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff fc40 	bl	8004abe <LL_ADC_REG_IsTriggerSourceSWStart>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d01c      	beq.n	800527e <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	7e5b      	ldrb	r3, [r3, #25]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d118      	bne.n	800527e <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b08      	cmp	r3, #8
 8005258:	d111      	bne.n	800527e <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d105      	bne.n	800527e <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005276:	f043 0201 	orr.w	r2, r3, #1
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2b08      	cmp	r3, #8
 800528a:	d104      	bne.n	8005296 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2208      	movs	r2, #8
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	e008      	b.n	80052a8 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d103      	bne.n	80052a8 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	220c      	movs	r2, #12
 80052a6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff fd4d 	bl	8004d64 <LL_ADC_REG_IsConversionOngoing>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d167      	bne.n	80053a0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <HAL_ADC_Start_DMA+0x2a>
 80052da:	2302      	movs	r3, #2
 80052dc:	e063      	b.n	80053a6 <HAL_ADC_Start_DMA+0xf2>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 fd86 	bl	8005df8 <ADC_Enable>
 80052ec:	4603      	mov	r3, r0
 80052ee:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80052f0:	7dfb      	ldrb	r3, [r7, #23]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d14f      	bne.n	8005396 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80052fe:	f023 0301 	bic.w	r3, r3, #1
 8005302:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d006      	beq.n	8005324 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800531a:	f023 0206 	bic.w	r2, r3, #6
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	659a      	str	r2, [r3, #88]	; 0x58
 8005322:	e002      	b.n	800532a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800532e:	4a20      	ldr	r2, [pc, #128]	; (80053b0 <HAL_ADC_Start_DMA+0xfc>)
 8005330:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005336:	4a1f      	ldr	r2, [pc, #124]	; (80053b4 <HAL_ADC_Start_DMA+0x100>)
 8005338:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533e:	4a1e      	ldr	r2, [pc, #120]	; (80053b8 <HAL_ADC_Start_DMA+0x104>)
 8005340:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	221c      	movs	r2, #28
 8005348:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f042 0210 	orr.w	r2, r2, #16
 8005360:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68da      	ldr	r2, [r3, #12]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f042 0201 	orr.w	r2, r2, #1
 8005370:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3340      	adds	r3, #64	; 0x40
 800537c:	4619      	mov	r1, r3
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f001 f859 	bl	8006438 <HAL_DMA_Start_IT>
 8005386:	4603      	mov	r3, r0
 8005388:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fcc0 	bl	8004d14 <LL_ADC_REG_StartConversion>
 8005394:	e006      	b.n	80053a4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800539e:	e001      	b.n	80053a4 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80053a0:	2302      	movs	r3, #2
 80053a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80053a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3718      	adds	r7, #24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	08005f7b 	.word	0x08005f7b
 80053b4:	08006053 	.word	0x08006053
 80053b8:	0800606f 	.word	0x0800606f

080053bc <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d101      	bne.n	80053d2 <HAL_ADC_Stop_DMA+0x16>
 80053ce:	2302      	movs	r3, #2
 80053d0:	e051      	b.n	8005476 <HAL_ADC_Stop_DMA+0xba>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80053da:	2103      	movs	r1, #3
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 fc4f 	bl	8005c80 <ADC_ConversionStop>
 80053e2:	4603      	mov	r3, r0
 80053e4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d13f      	bne.n	800546c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0201 	bic.w	r2, r2, #1
 80053fa:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005400:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d10f      	bne.n	800542a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540e:	4618      	mov	r0, r3
 8005410:	f001 f872 	bl	80064f8 <HAL_DMA_Abort>
 8005414:	4603      	mov	r3, r0
 8005416:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005418:	7bfb      	ldrb	r3, [r7, #15]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d005      	beq.n	800542a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005422:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0210 	bic.w	r2, r2, #16
 8005438:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800543a:	7bfb      	ldrb	r3, [r7, #15]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d105      	bne.n	800544c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 fd3b 	bl	8005ebc <ADC_Disable>
 8005446:	4603      	mov	r3, r0
 8005448:	73fb      	strb	r3, [r7, #15]
 800544a:	e002      	b.n	8005452 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 fd35 	bl	8005ebc <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005452:	7bfb      	ldrb	r3, [r7, #15]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d109      	bne.n	800546c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005460:	f023 0301 	bic.w	r3, r3, #1
 8005464:	f043 0201 	orr.w	r2, r3, #1
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005474:	7bfb      	ldrb	r3, [r7, #15]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800548c:	4618      	mov	r0, r3
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b0b6      	sub	sp, #216	; 0xd8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80054d0:	2300      	movs	r3, #0
 80054d2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <HAL_ADC_ConfigChannel+0x22>
 80054de:	2302      	movs	r3, #2
 80054e0:	e3b9      	b.n	8005c56 <HAL_ADC_ConfigChannel+0x796>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7ff fc38 	bl	8004d64 <LL_ADC_REG_IsConversionOngoing>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f040 839e 	bne.w	8005c38 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b05      	cmp	r3, #5
 8005502:	d824      	bhi.n	800554e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	3b02      	subs	r3, #2
 800550a:	2b03      	cmp	r3, #3
 800550c:	d81b      	bhi.n	8005546 <HAL_ADC_ConfigChannel+0x86>
 800550e:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <HAL_ADC_ConfigChannel+0x54>)
 8005510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005514:	08005525 	.word	0x08005525
 8005518:	0800552d 	.word	0x0800552d
 800551c:	08005535 	.word	0x08005535
 8005520:	0800553d 	.word	0x0800553d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	220c      	movs	r2, #12
 8005528:	605a      	str	r2, [r3, #4]
          break;
 800552a:	e011      	b.n	8005550 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	2212      	movs	r2, #18
 8005530:	605a      	str	r2, [r3, #4]
          break;
 8005532:	e00d      	b.n	8005550 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2218      	movs	r2, #24
 8005538:	605a      	str	r2, [r3, #4]
          break;
 800553a:	e009      	b.n	8005550 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005542:	605a      	str	r2, [r3, #4]
          break;
 8005544:	e004      	b.n	8005550 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2206      	movs	r2, #6
 800554a:	605a      	str	r2, [r3, #4]
          break;
 800554c:	e000      	b.n	8005550 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800554e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6818      	ldr	r0, [r3, #0]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	6859      	ldr	r1, [r3, #4]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	f7ff fac1 	bl	8004ae4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff fbfc 	bl	8004d64 <LL_ADC_REG_IsConversionOngoing>
 800556c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff fc1c 	bl	8004db2 <LL_ADC_INJ_IsConversionOngoing>
 800557a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800557e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005582:	2b00      	cmp	r3, #0
 8005584:	f040 81a6 	bne.w	80058d4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005588:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800558c:	2b00      	cmp	r3, #0
 800558e:	f040 81a1 	bne.w	80058d4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6818      	ldr	r0, [r3, #0]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	6819      	ldr	r1, [r3, #0]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	461a      	mov	r2, r3
 80055a0:	f7ff facc 	bl	8004b3c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	695a      	ldr	r2, [r3, #20]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	08db      	lsrs	r3, r3, #3
 80055b0:	f003 0303 	and.w	r3, r3, #3
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d00a      	beq.n	80055dc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6818      	ldr	r0, [r3, #0]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	6919      	ldr	r1, [r3, #16]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055d6:	f7ff fa1d 	bl	8004a14 <LL_ADC_SetOffset>
 80055da:	e17b      	b.n	80058d4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2100      	movs	r1, #0
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7ff fa3a 	bl	8004a5c <LL_ADC_GetOffsetChannel>
 80055e8:	4603      	mov	r3, r0
 80055ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10a      	bne.n	8005608 <HAL_ADC_ConfigChannel+0x148>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2100      	movs	r1, #0
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7ff fa2f 	bl	8004a5c <LL_ADC_GetOffsetChannel>
 80055fe:	4603      	mov	r3, r0
 8005600:	0e9b      	lsrs	r3, r3, #26
 8005602:	f003 021f 	and.w	r2, r3, #31
 8005606:	e01e      	b.n	8005646 <HAL_ADC_ConfigChannel+0x186>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2100      	movs	r1, #0
 800560e:	4618      	mov	r0, r3
 8005610:	f7ff fa24 	bl	8004a5c <LL_ADC_GetOffsetChannel>
 8005614:	4603      	mov	r3, r0
 8005616:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800561a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800561e:	fa93 f3a3 	rbit	r3, r3
 8005622:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005626:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800562a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800562e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8005636:	2320      	movs	r3, #32
 8005638:	e004      	b.n	8005644 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800563a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800563e:	fab3 f383 	clz	r3, r3
 8005642:	b2db      	uxtb	r3, r3
 8005644:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800564e:	2b00      	cmp	r3, #0
 8005650:	d105      	bne.n	800565e <HAL_ADC_ConfigChannel+0x19e>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	0e9b      	lsrs	r3, r3, #26
 8005658:	f003 031f 	and.w	r3, r3, #31
 800565c:	e018      	b.n	8005690 <HAL_ADC_ConfigChannel+0x1d0>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005666:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800566a:	fa93 f3a3 	rbit	r3, r3
 800566e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005676:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800567a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8005682:	2320      	movs	r3, #32
 8005684:	e004      	b.n	8005690 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8005686:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800568a:	fab3 f383 	clz	r3, r3
 800568e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005690:	429a      	cmp	r2, r3
 8005692:	d106      	bne.n	80056a2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2200      	movs	r2, #0
 800569a:	2100      	movs	r1, #0
 800569c:	4618      	mov	r0, r3
 800569e:	f7ff f9f3 	bl	8004a88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2101      	movs	r1, #1
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff f9d7 	bl	8004a5c <LL_ADC_GetOffsetChannel>
 80056ae:	4603      	mov	r3, r0
 80056b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10a      	bne.n	80056ce <HAL_ADC_ConfigChannel+0x20e>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2101      	movs	r1, #1
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff f9cc 	bl	8004a5c <LL_ADC_GetOffsetChannel>
 80056c4:	4603      	mov	r3, r0
 80056c6:	0e9b      	lsrs	r3, r3, #26
 80056c8:	f003 021f 	and.w	r2, r3, #31
 80056cc:	e01e      	b.n	800570c <HAL_ADC_ConfigChannel+0x24c>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2101      	movs	r1, #1
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7ff f9c1 	bl	8004a5c <LL_ADC_GetOffsetChannel>
 80056da:	4603      	mov	r3, r0
 80056dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056e4:	fa93 f3a3 	rbit	r3, r3
 80056e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80056ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80056f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80056fc:	2320      	movs	r3, #32
 80056fe:	e004      	b.n	800570a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8005700:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005704:	fab3 f383 	clz	r3, r3
 8005708:	b2db      	uxtb	r3, r3
 800570a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005714:	2b00      	cmp	r3, #0
 8005716:	d105      	bne.n	8005724 <HAL_ADC_ConfigChannel+0x264>
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	0e9b      	lsrs	r3, r3, #26
 800571e:	f003 031f 	and.w	r3, r3, #31
 8005722:	e018      	b.n	8005756 <HAL_ADC_ConfigChannel+0x296>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800572c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005730:	fa93 f3a3 	rbit	r3, r3
 8005734:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005738:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800573c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005740:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8005748:	2320      	movs	r3, #32
 800574a:	e004      	b.n	8005756 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800574c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005750:	fab3 f383 	clz	r3, r3
 8005754:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005756:	429a      	cmp	r2, r3
 8005758:	d106      	bne.n	8005768 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2200      	movs	r2, #0
 8005760:	2101      	movs	r1, #1
 8005762:	4618      	mov	r0, r3
 8005764:	f7ff f990 	bl	8004a88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2102      	movs	r1, #2
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff f974 	bl	8004a5c <LL_ADC_GetOffsetChannel>
 8005774:	4603      	mov	r3, r0
 8005776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10a      	bne.n	8005794 <HAL_ADC_ConfigChannel+0x2d4>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2102      	movs	r1, #2
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff f969 	bl	8004a5c <LL_ADC_GetOffsetChannel>
 800578a:	4603      	mov	r3, r0
 800578c:	0e9b      	lsrs	r3, r3, #26
 800578e:	f003 021f 	and.w	r2, r3, #31
 8005792:	e01e      	b.n	80057d2 <HAL_ADC_ConfigChannel+0x312>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2102      	movs	r1, #2
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff f95e 	bl	8004a5c <LL_ADC_GetOffsetChannel>
 80057a0:	4603      	mov	r3, r0
 80057a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057aa:	fa93 f3a3 	rbit	r3, r3
 80057ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80057b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80057ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80057c2:	2320      	movs	r3, #32
 80057c4:	e004      	b.n	80057d0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80057c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057ca:	fab3 f383 	clz	r3, r3
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d105      	bne.n	80057ea <HAL_ADC_ConfigChannel+0x32a>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	0e9b      	lsrs	r3, r3, #26
 80057e4:	f003 031f 	and.w	r3, r3, #31
 80057e8:	e016      	b.n	8005818 <HAL_ADC_ConfigChannel+0x358>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057f6:	fa93 f3a3 	rbit	r3, r3
 80057fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80057fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005802:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800580a:	2320      	movs	r3, #32
 800580c:	e004      	b.n	8005818 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800580e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005812:	fab3 f383 	clz	r3, r3
 8005816:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005818:	429a      	cmp	r2, r3
 800581a:	d106      	bne.n	800582a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2200      	movs	r2, #0
 8005822:	2102      	movs	r1, #2
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff f92f 	bl	8004a88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2103      	movs	r1, #3
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff f913 	bl	8004a5c <LL_ADC_GetOffsetChannel>
 8005836:	4603      	mov	r3, r0
 8005838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10a      	bne.n	8005856 <HAL_ADC_ConfigChannel+0x396>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2103      	movs	r1, #3
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff f908 	bl	8004a5c <LL_ADC_GetOffsetChannel>
 800584c:	4603      	mov	r3, r0
 800584e:	0e9b      	lsrs	r3, r3, #26
 8005850:	f003 021f 	and.w	r2, r3, #31
 8005854:	e017      	b.n	8005886 <HAL_ADC_ConfigChannel+0x3c6>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2103      	movs	r1, #3
 800585c:	4618      	mov	r0, r3
 800585e:	f7ff f8fd 	bl	8004a5c <LL_ADC_GetOffsetChannel>
 8005862:	4603      	mov	r3, r0
 8005864:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005868:	fa93 f3a3 	rbit	r3, r3
 800586c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800586e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005870:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8005878:	2320      	movs	r3, #32
 800587a:	e003      	b.n	8005884 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800587c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800587e:	fab3 f383 	clz	r3, r3
 8005882:	b2db      	uxtb	r3, r3
 8005884:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800588e:	2b00      	cmp	r3, #0
 8005890:	d105      	bne.n	800589e <HAL_ADC_ConfigChannel+0x3de>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	0e9b      	lsrs	r3, r3, #26
 8005898:	f003 031f 	and.w	r3, r3, #31
 800589c:	e011      	b.n	80058c2 <HAL_ADC_ConfigChannel+0x402>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058a6:	fa93 f3a3 	rbit	r3, r3
 80058aa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80058ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80058b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80058b6:	2320      	movs	r3, #32
 80058b8:	e003      	b.n	80058c2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80058ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058bc:	fab3 f383 	clz	r3, r3
 80058c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d106      	bne.n	80058d4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2200      	movs	r2, #0
 80058cc:	2103      	movs	r1, #3
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7ff f8da 	bl	8004a88 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4618      	mov	r0, r3
 80058da:	f7ff f9f5 	bl	8004cc8 <LL_ADC_IsEnabled>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f040 813f 	bne.w	8005b64 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6818      	ldr	r0, [r3, #0]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	6819      	ldr	r1, [r3, #0]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	461a      	mov	r2, r3
 80058f4:	f7ff f94e 	bl	8004b94 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	4a8e      	ldr	r2, [pc, #568]	; (8005b38 <HAL_ADC_ConfigChannel+0x678>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	f040 8130 	bne.w	8005b64 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10b      	bne.n	800592c <HAL_ADC_ConfigChannel+0x46c>
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	0e9b      	lsrs	r3, r3, #26
 800591a:	3301      	adds	r3, #1
 800591c:	f003 031f 	and.w	r3, r3, #31
 8005920:	2b09      	cmp	r3, #9
 8005922:	bf94      	ite	ls
 8005924:	2301      	movls	r3, #1
 8005926:	2300      	movhi	r3, #0
 8005928:	b2db      	uxtb	r3, r3
 800592a:	e019      	b.n	8005960 <HAL_ADC_ConfigChannel+0x4a0>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005934:	fa93 f3a3 	rbit	r3, r3
 8005938:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800593a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800593c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800593e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8005944:	2320      	movs	r3, #32
 8005946:	e003      	b.n	8005950 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8005948:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800594a:	fab3 f383 	clz	r3, r3
 800594e:	b2db      	uxtb	r3, r3
 8005950:	3301      	adds	r3, #1
 8005952:	f003 031f 	and.w	r3, r3, #31
 8005956:	2b09      	cmp	r3, #9
 8005958:	bf94      	ite	ls
 800595a:	2301      	movls	r3, #1
 800595c:	2300      	movhi	r3, #0
 800595e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005960:	2b00      	cmp	r3, #0
 8005962:	d079      	beq.n	8005a58 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800596c:	2b00      	cmp	r3, #0
 800596e:	d107      	bne.n	8005980 <HAL_ADC_ConfigChannel+0x4c0>
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	0e9b      	lsrs	r3, r3, #26
 8005976:	3301      	adds	r3, #1
 8005978:	069b      	lsls	r3, r3, #26
 800597a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800597e:	e015      	b.n	80059ac <HAL_ADC_ConfigChannel+0x4ec>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005988:	fa93 f3a3 	rbit	r3, r3
 800598c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800598e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005990:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8005998:	2320      	movs	r3, #32
 800599a:	e003      	b.n	80059a4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800599c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800599e:	fab3 f383 	clz	r3, r3
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	3301      	adds	r3, #1
 80059a6:	069b      	lsls	r3, r3, #26
 80059a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d109      	bne.n	80059cc <HAL_ADC_ConfigChannel+0x50c>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	0e9b      	lsrs	r3, r3, #26
 80059be:	3301      	adds	r3, #1
 80059c0:	f003 031f 	and.w	r3, r3, #31
 80059c4:	2101      	movs	r1, #1
 80059c6:	fa01 f303 	lsl.w	r3, r1, r3
 80059ca:	e017      	b.n	80059fc <HAL_ADC_ConfigChannel+0x53c>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059d4:	fa93 f3a3 	rbit	r3, r3
 80059d8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80059da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80059de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80059e4:	2320      	movs	r3, #32
 80059e6:	e003      	b.n	80059f0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80059e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ea:	fab3 f383 	clz	r3, r3
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	3301      	adds	r3, #1
 80059f2:	f003 031f 	and.w	r3, r3, #31
 80059f6:	2101      	movs	r1, #1
 80059f8:	fa01 f303 	lsl.w	r3, r1, r3
 80059fc:	ea42 0103 	orr.w	r1, r2, r3
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10a      	bne.n	8005a22 <HAL_ADC_ConfigChannel+0x562>
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	0e9b      	lsrs	r3, r3, #26
 8005a12:	3301      	adds	r3, #1
 8005a14:	f003 021f 	and.w	r2, r3, #31
 8005a18:	4613      	mov	r3, r2
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	4413      	add	r3, r2
 8005a1e:	051b      	lsls	r3, r3, #20
 8005a20:	e018      	b.n	8005a54 <HAL_ADC_ConfigChannel+0x594>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2a:	fa93 f3a3 	rbit	r3, r3
 8005a2e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8005a3a:	2320      	movs	r3, #32
 8005a3c:	e003      	b.n	8005a46 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8005a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a40:	fab3 f383 	clz	r3, r3
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	3301      	adds	r3, #1
 8005a48:	f003 021f 	and.w	r2, r3, #31
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	4413      	add	r3, r2
 8005a52:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a54:	430b      	orrs	r3, r1
 8005a56:	e080      	b.n	8005b5a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d107      	bne.n	8005a74 <HAL_ADC_ConfigChannel+0x5b4>
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	0e9b      	lsrs	r3, r3, #26
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	069b      	lsls	r3, r3, #26
 8005a6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a72:	e015      	b.n	8005aa0 <HAL_ADC_ConfigChannel+0x5e0>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7c:	fa93 f3a3 	rbit	r3, r3
 8005a80:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a84:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8005a8c:	2320      	movs	r3, #32
 8005a8e:	e003      	b.n	8005a98 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8005a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a92:	fab3 f383 	clz	r3, r3
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	3301      	adds	r3, #1
 8005a9a:	069b      	lsls	r3, r3, #26
 8005a9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d109      	bne.n	8005ac0 <HAL_ADC_ConfigChannel+0x600>
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	0e9b      	lsrs	r3, r3, #26
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	f003 031f 	and.w	r3, r3, #31
 8005ab8:	2101      	movs	r1, #1
 8005aba:	fa01 f303 	lsl.w	r3, r1, r3
 8005abe:	e017      	b.n	8005af0 <HAL_ADC_ConfigChannel+0x630>
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	fa93 f3a3 	rbit	r3, r3
 8005acc:	61fb      	str	r3, [r7, #28]
  return result;
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8005ad8:	2320      	movs	r3, #32
 8005ada:	e003      	b.n	8005ae4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	fab3 f383 	clz	r3, r3
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	f003 031f 	and.w	r3, r3, #31
 8005aea:	2101      	movs	r1, #1
 8005aec:	fa01 f303 	lsl.w	r3, r1, r3
 8005af0:	ea42 0103 	orr.w	r1, r2, r3
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10d      	bne.n	8005b1c <HAL_ADC_ConfigChannel+0x65c>
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	0e9b      	lsrs	r3, r3, #26
 8005b06:	3301      	adds	r3, #1
 8005b08:	f003 021f 	and.w	r2, r3, #31
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	4413      	add	r3, r2
 8005b12:	3b1e      	subs	r3, #30
 8005b14:	051b      	lsls	r3, r3, #20
 8005b16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b1a:	e01d      	b.n	8005b58 <HAL_ADC_ConfigChannel+0x698>
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	fa93 f3a3 	rbit	r3, r3
 8005b28:	613b      	str	r3, [r7, #16]
  return result;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d103      	bne.n	8005b3c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8005b34:	2320      	movs	r3, #32
 8005b36:	e005      	b.n	8005b44 <HAL_ADC_ConfigChannel+0x684>
 8005b38:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	fab3 f383 	clz	r3, r3
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	3301      	adds	r3, #1
 8005b46:	f003 021f 	and.w	r2, r3, #31
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	4413      	add	r3, r2
 8005b50:	3b1e      	subs	r3, #30
 8005b52:	051b      	lsls	r3, r3, #20
 8005b54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b58:	430b      	orrs	r3, r1
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	6892      	ldr	r2, [r2, #8]
 8005b5e:	4619      	mov	r1, r3
 8005b60:	f7fe ffec 	bl	8004b3c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	4b3d      	ldr	r3, [pc, #244]	; (8005c60 <HAL_ADC_ConfigChannel+0x7a0>)
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d06c      	beq.n	8005c4a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b70:	483c      	ldr	r0, [pc, #240]	; (8005c64 <HAL_ADC_ConfigChannel+0x7a4>)
 8005b72:	f7fe ff41 	bl	80049f8 <LL_ADC_GetCommonPathInternalCh>
 8005b76:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a3a      	ldr	r2, [pc, #232]	; (8005c68 <HAL_ADC_ConfigChannel+0x7a8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d127      	bne.n	8005bd4 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005b84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d121      	bne.n	8005bd4 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a35      	ldr	r2, [pc, #212]	; (8005c6c <HAL_ADC_ConfigChannel+0x7ac>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d157      	bne.n	8005c4a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	482f      	ldr	r0, [pc, #188]	; (8005c64 <HAL_ADC_ConfigChannel+0x7a4>)
 8005ba6:	f7fe ff14 	bl	80049d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005baa:	4b31      	ldr	r3, [pc, #196]	; (8005c70 <HAL_ADC_ConfigChannel+0x7b0>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	099b      	lsrs	r3, r3, #6
 8005bb0:	4a30      	ldr	r2, [pc, #192]	; (8005c74 <HAL_ADC_ConfigChannel+0x7b4>)
 8005bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb6:	099b      	lsrs	r3, r3, #6
 8005bb8:	1c5a      	adds	r2, r3, #1
 8005bba:	4613      	mov	r3, r2
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	4413      	add	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005bc4:	e002      	b.n	8005bcc <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1f9      	bne.n	8005bc6 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005bd2:	e03a      	b.n	8005c4a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a27      	ldr	r2, [pc, #156]	; (8005c78 <HAL_ADC_ConfigChannel+0x7b8>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d113      	bne.n	8005c06 <HAL_ADC_ConfigChannel+0x746>
 8005bde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005be2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10d      	bne.n	8005c06 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a1f      	ldr	r2, [pc, #124]	; (8005c6c <HAL_ADC_ConfigChannel+0x7ac>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d12a      	bne.n	8005c4a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005bf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005bf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	4819      	ldr	r0, [pc, #100]	; (8005c64 <HAL_ADC_ConfigChannel+0x7a4>)
 8005c00:	f7fe fee7 	bl	80049d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c04:	e021      	b.n	8005c4a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a1c      	ldr	r2, [pc, #112]	; (8005c7c <HAL_ADC_ConfigChannel+0x7bc>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d11c      	bne.n	8005c4a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005c10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d116      	bne.n	8005c4a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a12      	ldr	r2, [pc, #72]	; (8005c6c <HAL_ADC_ConfigChannel+0x7ac>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d111      	bne.n	8005c4a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c2e:	4619      	mov	r1, r3
 8005c30:	480c      	ldr	r0, [pc, #48]	; (8005c64 <HAL_ADC_ConfigChannel+0x7a4>)
 8005c32:	f7fe fece 	bl	80049d2 <LL_ADC_SetCommonPathInternalCh>
 8005c36:	e008      	b.n	8005c4a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3c:	f043 0220 	orr.w	r2, r3, #32
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005c52:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	37d8      	adds	r7, #216	; 0xd8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	80080000 	.word	0x80080000
 8005c64:	50040300 	.word	0x50040300
 8005c68:	c7520000 	.word	0xc7520000
 8005c6c:	50040000 	.word	0x50040000
 8005c70:	20000000 	.word	0x20000000
 8005c74:	053e2d63 	.word	0x053e2d63
 8005c78:	cb840000 	.word	0xcb840000
 8005c7c:	80000001 	.word	0x80000001

08005c80 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff f864 	bl	8004d64 <LL_ADC_REG_IsConversionOngoing>
 8005c9c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff f885 	bl	8004db2 <LL_ADC_INJ_IsConversionOngoing>
 8005ca8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d103      	bne.n	8005cb8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f000 8098 	beq.w	8005de8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d02a      	beq.n	8005d1c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	7e5b      	ldrb	r3, [r3, #25]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d126      	bne.n	8005d1c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	7e1b      	ldrb	r3, [r3, #24]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d122      	bne.n	8005d1c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005cda:	e014      	b.n	8005d06 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	4a45      	ldr	r2, [pc, #276]	; (8005df4 <ADC_ConversionStop+0x174>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d90d      	bls.n	8005d00 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce8:	f043 0210 	orr.w	r2, r3, #16
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf4:	f043 0201 	orr.w	r2, r3, #1
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e074      	b.n	8005dea <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	3301      	adds	r3, #1
 8005d04:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d10:	2b40      	cmp	r3, #64	; 0x40
 8005d12:	d1e3      	bne.n	8005cdc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2240      	movs	r2, #64	; 0x40
 8005d1a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d014      	beq.n	8005d4c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7ff f81c 	bl	8004d64 <LL_ADC_REG_IsConversionOngoing>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00c      	beq.n	8005d4c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fe ffd9 	bl	8004cee <LL_ADC_IsDisableOngoing>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d104      	bne.n	8005d4c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fe fff8 	bl	8004d3c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d014      	beq.n	8005d7c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff f82b 	bl	8004db2 <LL_ADC_INJ_IsConversionOngoing>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00c      	beq.n	8005d7c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fe ffc1 	bl	8004cee <LL_ADC_IsDisableOngoing>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d104      	bne.n	8005d7c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff f807 	bl	8004d8a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d005      	beq.n	8005d8e <ADC_ConversionStop+0x10e>
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	2b03      	cmp	r3, #3
 8005d86:	d105      	bne.n	8005d94 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005d88:	230c      	movs	r3, #12
 8005d8a:	617b      	str	r3, [r7, #20]
        break;
 8005d8c:	e005      	b.n	8005d9a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005d8e:	2308      	movs	r3, #8
 8005d90:	617b      	str	r3, [r7, #20]
        break;
 8005d92:	e002      	b.n	8005d9a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005d94:	2304      	movs	r3, #4
 8005d96:	617b      	str	r3, [r7, #20]
        break;
 8005d98:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005d9a:	f7fe fdd7 	bl	800494c <HAL_GetTick>
 8005d9e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005da0:	e01b      	b.n	8005dda <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005da2:	f7fe fdd3 	bl	800494c <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b05      	cmp	r3, #5
 8005dae:	d914      	bls.n	8005dda <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	4013      	ands	r3, r2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00d      	beq.n	8005dda <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc2:	f043 0210 	orr.w	r2, r3, #16
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dce:	f043 0201 	orr.w	r2, r3, #1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e007      	b.n	8005dea <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	4013      	ands	r3, r2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1dc      	bne.n	8005da2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3720      	adds	r7, #32
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	a33fffff 	.word	0xa33fffff

08005df8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fe ff5f 	bl	8004cc8 <LL_ADC_IsEnabled>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d14d      	bne.n	8005eac <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	4b28      	ldr	r3, [pc, #160]	; (8005eb8 <ADC_Enable+0xc0>)
 8005e18:	4013      	ands	r3, r2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00d      	beq.n	8005e3a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e22:	f043 0210 	orr.w	r2, r3, #16
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e2e:	f043 0201 	orr.w	r2, r3, #1
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e039      	b.n	8005eae <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fe ff1a 	bl	8004c78 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005e44:	f7fe fd82 	bl	800494c <HAL_GetTick>
 8005e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e4a:	e028      	b.n	8005e9e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7fe ff39 	bl	8004cc8 <LL_ADC_IsEnabled>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d104      	bne.n	8005e66 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fe ff09 	bl	8004c78 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005e66:	f7fe fd71 	bl	800494c <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d914      	bls.n	8005e9e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d00d      	beq.n	8005e9e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e86:	f043 0210 	orr.w	r2, r3, #16
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e92:	f043 0201 	orr.w	r2, r3, #1
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e007      	b.n	8005eae <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d1cf      	bne.n	8005e4c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	8000003f 	.word	0x8000003f

08005ebc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fe ff10 	bl	8004cee <LL_ADC_IsDisableOngoing>
 8005ece:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7fe fef7 	bl	8004cc8 <LL_ADC_IsEnabled>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d047      	beq.n	8005f70 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d144      	bne.n	8005f70 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 030d 	and.w	r3, r3, #13
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d10c      	bne.n	8005f0e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fe fed1 	bl	8004ca0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2203      	movs	r2, #3
 8005f04:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005f06:	f7fe fd21 	bl	800494c <HAL_GetTick>
 8005f0a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f0c:	e029      	b.n	8005f62 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f12:	f043 0210 	orr.w	r2, r3, #16
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1e:	f043 0201 	orr.w	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e023      	b.n	8005f72 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005f2a:	f7fe fd0f 	bl	800494c <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d914      	bls.n	8005f62 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00d      	beq.n	8005f62 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4a:	f043 0210 	orr.w	r2, r3, #16
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f56:	f043 0201 	orr.w	r2, r3, #1
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e007      	b.n	8005f72 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1dc      	bne.n	8005f2a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b084      	sub	sp, #16
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d14b      	bne.n	800602c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0308 	and.w	r3, r3, #8
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d021      	beq.n	8005ff2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fe fd83 	bl	8004abe <LL_ADC_REG_IsTriggerSourceSWStart>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d032      	beq.n	8006024 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d12b      	bne.n	8006024 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d11f      	bne.n	8006024 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe8:	f043 0201 	orr.w	r2, r3, #1
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	655a      	str	r2, [r3, #84]	; 0x54
 8005ff0:	e018      	b.n	8006024 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d111      	bne.n	8006024 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006004:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d105      	bne.n	8006024 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601c:	f043 0201 	orr.w	r2, r3, #1
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f7fd fd29 	bl	8003a7c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800602a:	e00e      	b.n	800604a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006030:	f003 0310 	and.w	r3, r3, #16
 8006034:	2b00      	cmp	r3, #0
 8006036:	d003      	beq.n	8006040 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f7ff fa37 	bl	80054ac <HAL_ADC_ErrorCallback>
}
 800603e:	e004      	b.n	800604a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	4798      	blx	r3
}
 800604a:	bf00      	nop
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f7ff fa19 	bl	8005498 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006066:	bf00      	nop
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b084      	sub	sp, #16
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006080:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608c:	f043 0204 	orr.w	r2, r3, #4
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f7ff fa09 	bl	80054ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800609a:	bf00      	nop
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
	...

080060a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f003 0307 	and.w	r3, r3, #7
 80060b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060b4:	4b0c      	ldr	r3, [pc, #48]	; (80060e8 <__NVIC_SetPriorityGrouping+0x44>)
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80060c0:	4013      	ands	r3, r2
 80060c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80060d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060d6:	4a04      	ldr	r2, [pc, #16]	; (80060e8 <__NVIC_SetPriorityGrouping+0x44>)
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	60d3      	str	r3, [r2, #12]
}
 80060dc:	bf00      	nop
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	e000ed00 	.word	0xe000ed00

080060ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060ec:	b480      	push	{r7}
 80060ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060f0:	4b04      	ldr	r3, [pc, #16]	; (8006104 <__NVIC_GetPriorityGrouping+0x18>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	0a1b      	lsrs	r3, r3, #8
 80060f6:	f003 0307 	and.w	r3, r3, #7
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	e000ed00 	.word	0xe000ed00

08006108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	4603      	mov	r3, r0
 8006110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006116:	2b00      	cmp	r3, #0
 8006118:	db0b      	blt.n	8006132 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800611a:	79fb      	ldrb	r3, [r7, #7]
 800611c:	f003 021f 	and.w	r2, r3, #31
 8006120:	4907      	ldr	r1, [pc, #28]	; (8006140 <__NVIC_EnableIRQ+0x38>)
 8006122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006126:	095b      	lsrs	r3, r3, #5
 8006128:	2001      	movs	r0, #1
 800612a:	fa00 f202 	lsl.w	r2, r0, r2
 800612e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006132:	bf00      	nop
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	e000e100 	.word	0xe000e100

08006144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	4603      	mov	r3, r0
 800614c:	6039      	str	r1, [r7, #0]
 800614e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006154:	2b00      	cmp	r3, #0
 8006156:	db0a      	blt.n	800616e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	b2da      	uxtb	r2, r3
 800615c:	490c      	ldr	r1, [pc, #48]	; (8006190 <__NVIC_SetPriority+0x4c>)
 800615e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006162:	0112      	lsls	r2, r2, #4
 8006164:	b2d2      	uxtb	r2, r2
 8006166:	440b      	add	r3, r1
 8006168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800616c:	e00a      	b.n	8006184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	b2da      	uxtb	r2, r3
 8006172:	4908      	ldr	r1, [pc, #32]	; (8006194 <__NVIC_SetPriority+0x50>)
 8006174:	79fb      	ldrb	r3, [r7, #7]
 8006176:	f003 030f 	and.w	r3, r3, #15
 800617a:	3b04      	subs	r3, #4
 800617c:	0112      	lsls	r2, r2, #4
 800617e:	b2d2      	uxtb	r2, r2
 8006180:	440b      	add	r3, r1
 8006182:	761a      	strb	r2, [r3, #24]
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	e000e100 	.word	0xe000e100
 8006194:	e000ed00 	.word	0xe000ed00

08006198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006198:	b480      	push	{r7}
 800619a:	b089      	sub	sp, #36	; 0x24
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f003 0307 	and.w	r3, r3, #7
 80061aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	f1c3 0307 	rsb	r3, r3, #7
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	bf28      	it	cs
 80061b6:	2304      	movcs	r3, #4
 80061b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	3304      	adds	r3, #4
 80061be:	2b06      	cmp	r3, #6
 80061c0:	d902      	bls.n	80061c8 <NVIC_EncodePriority+0x30>
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	3b03      	subs	r3, #3
 80061c6:	e000      	b.n	80061ca <NVIC_EncodePriority+0x32>
 80061c8:	2300      	movs	r3, #0
 80061ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061cc:	f04f 32ff 	mov.w	r2, #4294967295
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	fa02 f303 	lsl.w	r3, r2, r3
 80061d6:	43da      	mvns	r2, r3
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	401a      	ands	r2, r3
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061e0:	f04f 31ff 	mov.w	r1, #4294967295
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	fa01 f303 	lsl.w	r3, r1, r3
 80061ea:	43d9      	mvns	r1, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061f0:	4313      	orrs	r3, r2
         );
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3724      	adds	r7, #36	; 0x24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
	...

08006200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3b01      	subs	r3, #1
 800620c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006210:	d301      	bcc.n	8006216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006212:	2301      	movs	r3, #1
 8006214:	e00f      	b.n	8006236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006216:	4a0a      	ldr	r2, [pc, #40]	; (8006240 <SysTick_Config+0x40>)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	3b01      	subs	r3, #1
 800621c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800621e:	210f      	movs	r1, #15
 8006220:	f04f 30ff 	mov.w	r0, #4294967295
 8006224:	f7ff ff8e 	bl	8006144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006228:	4b05      	ldr	r3, [pc, #20]	; (8006240 <SysTick_Config+0x40>)
 800622a:	2200      	movs	r2, #0
 800622c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800622e:	4b04      	ldr	r3, [pc, #16]	; (8006240 <SysTick_Config+0x40>)
 8006230:	2207      	movs	r2, #7
 8006232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	e000e010 	.word	0xe000e010

08006244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7ff ff29 	bl	80060a4 <__NVIC_SetPriorityGrouping>
}
 8006252:	bf00      	nop
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b086      	sub	sp, #24
 800625e:	af00      	add	r7, sp, #0
 8006260:	4603      	mov	r3, r0
 8006262:	60b9      	str	r1, [r7, #8]
 8006264:	607a      	str	r2, [r7, #4]
 8006266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006268:	2300      	movs	r3, #0
 800626a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800626c:	f7ff ff3e 	bl	80060ec <__NVIC_GetPriorityGrouping>
 8006270:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	68b9      	ldr	r1, [r7, #8]
 8006276:	6978      	ldr	r0, [r7, #20]
 8006278:	f7ff ff8e 	bl	8006198 <NVIC_EncodePriority>
 800627c:	4602      	mov	r2, r0
 800627e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006282:	4611      	mov	r1, r2
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff ff5d 	bl	8006144 <__NVIC_SetPriority>
}
 800628a:	bf00      	nop
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b082      	sub	sp, #8
 8006296:	af00      	add	r7, sp, #0
 8006298:	4603      	mov	r3, r0
 800629a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800629c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7ff ff31 	bl	8006108 <__NVIC_EnableIRQ>
}
 80062a6:	bf00      	nop
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b082      	sub	sp, #8
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7ff ffa2 	bl	8006200 <SysTick_Config>
 80062bc:	4603      	mov	r3, r0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
	...

080062c8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e098      	b.n	800640c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	461a      	mov	r2, r3
 80062e0:	4b4d      	ldr	r3, [pc, #308]	; (8006418 <HAL_DMA_Init+0x150>)
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d80f      	bhi.n	8006306 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	461a      	mov	r2, r3
 80062ec:	4b4b      	ldr	r3, [pc, #300]	; (800641c <HAL_DMA_Init+0x154>)
 80062ee:	4413      	add	r3, r2
 80062f0:	4a4b      	ldr	r2, [pc, #300]	; (8006420 <HAL_DMA_Init+0x158>)
 80062f2:	fba2 2303 	umull	r2, r3, r2, r3
 80062f6:	091b      	lsrs	r3, r3, #4
 80062f8:	009a      	lsls	r2, r3, #2
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a48      	ldr	r2, [pc, #288]	; (8006424 <HAL_DMA_Init+0x15c>)
 8006302:	641a      	str	r2, [r3, #64]	; 0x40
 8006304:	e00e      	b.n	8006324 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	4b46      	ldr	r3, [pc, #280]	; (8006428 <HAL_DMA_Init+0x160>)
 800630e:	4413      	add	r3, r2
 8006310:	4a43      	ldr	r2, [pc, #268]	; (8006420 <HAL_DMA_Init+0x158>)
 8006312:	fba2 2303 	umull	r2, r3, r2, r3
 8006316:	091b      	lsrs	r3, r3, #4
 8006318:	009a      	lsls	r2, r3, #2
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a42      	ldr	r2, [pc, #264]	; (800642c <HAL_DMA_Init+0x164>)
 8006322:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800633a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006348:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006354:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006360:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	4313      	orrs	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800637e:	d039      	beq.n	80063f4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006384:	4a27      	ldr	r2, [pc, #156]	; (8006424 <HAL_DMA_Init+0x15c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d11a      	bne.n	80063c0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800638a:	4b29      	ldr	r3, [pc, #164]	; (8006430 <HAL_DMA_Init+0x168>)
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006392:	f003 031c 	and.w	r3, r3, #28
 8006396:	210f      	movs	r1, #15
 8006398:	fa01 f303 	lsl.w	r3, r1, r3
 800639c:	43db      	mvns	r3, r3
 800639e:	4924      	ldr	r1, [pc, #144]	; (8006430 <HAL_DMA_Init+0x168>)
 80063a0:	4013      	ands	r3, r2
 80063a2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80063a4:	4b22      	ldr	r3, [pc, #136]	; (8006430 <HAL_DMA_Init+0x168>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6859      	ldr	r1, [r3, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b0:	f003 031c 	and.w	r3, r3, #28
 80063b4:	fa01 f303 	lsl.w	r3, r1, r3
 80063b8:	491d      	ldr	r1, [pc, #116]	; (8006430 <HAL_DMA_Init+0x168>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	600b      	str	r3, [r1, #0]
 80063be:	e019      	b.n	80063f4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80063c0:	4b1c      	ldr	r3, [pc, #112]	; (8006434 <HAL_DMA_Init+0x16c>)
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c8:	f003 031c 	and.w	r3, r3, #28
 80063cc:	210f      	movs	r1, #15
 80063ce:	fa01 f303 	lsl.w	r3, r1, r3
 80063d2:	43db      	mvns	r3, r3
 80063d4:	4917      	ldr	r1, [pc, #92]	; (8006434 <HAL_DMA_Init+0x16c>)
 80063d6:	4013      	ands	r3, r2
 80063d8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80063da:	4b16      	ldr	r3, [pc, #88]	; (8006434 <HAL_DMA_Init+0x16c>)
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6859      	ldr	r1, [r3, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e6:	f003 031c 	and.w	r3, r3, #28
 80063ea:	fa01 f303 	lsl.w	r3, r1, r3
 80063ee:	4911      	ldr	r1, [pc, #68]	; (8006434 <HAL_DMA_Init+0x16c>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	40020407 	.word	0x40020407
 800641c:	bffdfff8 	.word	0xbffdfff8
 8006420:	cccccccd 	.word	0xcccccccd
 8006424:	40020000 	.word	0x40020000
 8006428:	bffdfbf8 	.word	0xbffdfbf8
 800642c:	40020400 	.word	0x40020400
 8006430:	400200a8 	.word	0x400200a8
 8006434:	400204a8 	.word	0x400204a8

08006438 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006450:	2b01      	cmp	r3, #1
 8006452:	d101      	bne.n	8006458 <HAL_DMA_Start_IT+0x20>
 8006454:	2302      	movs	r3, #2
 8006456:	e04b      	b.n	80064f0 <HAL_DMA_Start_IT+0xb8>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b01      	cmp	r3, #1
 800646a:	d13a      	bne.n	80064e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f022 0201 	bic.w	r2, r2, #1
 8006488:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	68b9      	ldr	r1, [r7, #8]
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 f91e 	bl	80066d2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649a:	2b00      	cmp	r3, #0
 800649c:	d008      	beq.n	80064b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f042 020e 	orr.w	r2, r2, #14
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	e00f      	b.n	80064d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0204 	bic.w	r2, r2, #4
 80064be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 020a 	orr.w	r2, r2, #10
 80064ce:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0201 	orr.w	r2, r2, #1
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	e005      	b.n	80064ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80064ea:	2302      	movs	r3, #2
 80064ec:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80064ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3718      	adds	r7, #24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006500:	2300      	movs	r3, #0
 8006502:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d008      	beq.n	8006522 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2204      	movs	r2, #4
 8006514:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e022      	b.n	8006568 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 020e 	bic.w	r2, r2, #14
 8006530:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f022 0201 	bic.w	r2, r2, #1
 8006540:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006546:	f003 021c 	and.w	r2, r3, #28
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	2101      	movs	r1, #1
 8006550:	fa01 f202 	lsl.w	r2, r1, r2
 8006554:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006566:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006568:	4618      	mov	r0, r3
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006590:	f003 031c 	and.w	r3, r3, #28
 8006594:	2204      	movs	r2, #4
 8006596:	409a      	lsls	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4013      	ands	r3, r2
 800659c:	2b00      	cmp	r3, #0
 800659e:	d026      	beq.n	80065ee <HAL_DMA_IRQHandler+0x7a>
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f003 0304 	and.w	r3, r3, #4
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d021      	beq.n	80065ee <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0320 	and.w	r3, r3, #32
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d107      	bne.n	80065c8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 0204 	bic.w	r2, r2, #4
 80065c6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065cc:	f003 021c 	and.w	r2, r3, #28
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d4:	2104      	movs	r1, #4
 80065d6:	fa01 f202 	lsl.w	r2, r1, r2
 80065da:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d071      	beq.n	80066c8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80065ec:	e06c      	b.n	80066c8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f2:	f003 031c 	and.w	r3, r3, #28
 80065f6:	2202      	movs	r2, #2
 80065f8:	409a      	lsls	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	4013      	ands	r3, r2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d02e      	beq.n	8006660 <HAL_DMA_IRQHandler+0xec>
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f003 0302 	and.w	r3, r3, #2
 8006608:	2b00      	cmp	r3, #0
 800660a:	d029      	beq.n	8006660 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0320 	and.w	r3, r3, #32
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10b      	bne.n	8006632 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 020a 	bic.w	r2, r2, #10
 8006628:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006636:	f003 021c 	and.w	r2, r3, #28
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	2102      	movs	r1, #2
 8006640:	fa01 f202 	lsl.w	r2, r1, r2
 8006644:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006652:	2b00      	cmp	r3, #0
 8006654:	d038      	beq.n	80066c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800665e:	e033      	b.n	80066c8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006664:	f003 031c 	and.w	r3, r3, #28
 8006668:	2208      	movs	r2, #8
 800666a:	409a      	lsls	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4013      	ands	r3, r2
 8006670:	2b00      	cmp	r3, #0
 8006672:	d02a      	beq.n	80066ca <HAL_DMA_IRQHandler+0x156>
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	f003 0308 	and.w	r3, r3, #8
 800667a:	2b00      	cmp	r3, #0
 800667c:	d025      	beq.n	80066ca <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 020e 	bic.w	r2, r2, #14
 800668c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006692:	f003 021c 	and.w	r2, r3, #28
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	2101      	movs	r1, #1
 800669c:	fa01 f202 	lsl.w	r2, r1, r2
 80066a0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d004      	beq.n	80066ca <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80066c8:	bf00      	nop
 80066ca:	bf00      	nop
}
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b085      	sub	sp, #20
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	60f8      	str	r0, [r7, #12]
 80066da:	60b9      	str	r1, [r7, #8]
 80066dc:	607a      	str	r2, [r7, #4]
 80066de:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e4:	f003 021c 	and.w	r2, r3, #28
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ec:	2101      	movs	r1, #1
 80066ee:	fa01 f202 	lsl.w	r2, r1, r2
 80066f2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	2b10      	cmp	r3, #16
 8006702:	d108      	bne.n	8006716 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006714:	e007      	b.n	8006726 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	60da      	str	r2, [r3, #12]
}
 8006726:	bf00      	nop
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
	...

08006734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800673e:	2300      	movs	r3, #0
 8006740:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006742:	e148      	b.n	80069d6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	2101      	movs	r1, #1
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	fa01 f303 	lsl.w	r3, r1, r3
 8006750:	4013      	ands	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 813a 	beq.w	80069d0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d00b      	beq.n	800677c <HAL_GPIO_Init+0x48>
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	2b02      	cmp	r3, #2
 800676a:	d007      	beq.n	800677c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006770:	2b11      	cmp	r3, #17
 8006772:	d003      	beq.n	800677c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	2b12      	cmp	r3, #18
 800677a:	d130      	bne.n	80067de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	2203      	movs	r2, #3
 8006788:	fa02 f303 	lsl.w	r3, r2, r3
 800678c:	43db      	mvns	r3, r3
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	4013      	ands	r3, r2
 8006792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	68da      	ldr	r2, [r3, #12]
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	fa02 f303 	lsl.w	r3, r2, r3
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80067b2:	2201      	movs	r2, #1
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ba:	43db      	mvns	r3, r3
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4013      	ands	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	091b      	lsrs	r3, r3, #4
 80067c8:	f003 0201 	and.w	r2, r3, #1
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	fa02 f303 	lsl.w	r3, r2, r3
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	005b      	lsls	r3, r3, #1
 80067e8:	2203      	movs	r2, #3
 80067ea:	fa02 f303 	lsl.w	r3, r2, r3
 80067ee:	43db      	mvns	r3, r3
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	4013      	ands	r3, r2
 80067f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	689a      	ldr	r2, [r3, #8]
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	4313      	orrs	r3, r2
 8006806:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	2b02      	cmp	r3, #2
 8006814:	d003      	beq.n	800681e <HAL_GPIO_Init+0xea>
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	2b12      	cmp	r3, #18
 800681c:	d123      	bne.n	8006866 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	08da      	lsrs	r2, r3, #3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	3208      	adds	r2, #8
 8006826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800682a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f003 0307 	and.w	r3, r3, #7
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	220f      	movs	r2, #15
 8006836:	fa02 f303 	lsl.w	r3, r2, r3
 800683a:	43db      	mvns	r3, r3
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	4013      	ands	r3, r2
 8006840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	691a      	ldr	r2, [r3, #16]
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f003 0307 	and.w	r3, r3, #7
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	fa02 f303 	lsl.w	r3, r2, r3
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	08da      	lsrs	r2, r3, #3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	3208      	adds	r2, #8
 8006860:	6939      	ldr	r1, [r7, #16]
 8006862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	2203      	movs	r2, #3
 8006872:	fa02 f303 	lsl.w	r3, r2, r3
 8006876:	43db      	mvns	r3, r3
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	4013      	ands	r3, r2
 800687c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f003 0203 	and.w	r2, r3, #3
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	005b      	lsls	r3, r3, #1
 800688a:	fa02 f303 	lsl.w	r3, r2, r3
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4313      	orrs	r3, r2
 8006892:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 8094 	beq.w	80069d0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068a8:	4b52      	ldr	r3, [pc, #328]	; (80069f4 <HAL_GPIO_Init+0x2c0>)
 80068aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ac:	4a51      	ldr	r2, [pc, #324]	; (80069f4 <HAL_GPIO_Init+0x2c0>)
 80068ae:	f043 0301 	orr.w	r3, r3, #1
 80068b2:	6613      	str	r3, [r2, #96]	; 0x60
 80068b4:	4b4f      	ldr	r3, [pc, #316]	; (80069f4 <HAL_GPIO_Init+0x2c0>)
 80068b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068b8:	f003 0301 	and.w	r3, r3, #1
 80068bc:	60bb      	str	r3, [r7, #8]
 80068be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80068c0:	4a4d      	ldr	r2, [pc, #308]	; (80069f8 <HAL_GPIO_Init+0x2c4>)
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	089b      	lsrs	r3, r3, #2
 80068c6:	3302      	adds	r3, #2
 80068c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f003 0303 	and.w	r3, r3, #3
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	220f      	movs	r2, #15
 80068d8:	fa02 f303 	lsl.w	r3, r2, r3
 80068dc:	43db      	mvns	r3, r3
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	4013      	ands	r3, r2
 80068e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80068ea:	d00d      	beq.n	8006908 <HAL_GPIO_Init+0x1d4>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a43      	ldr	r2, [pc, #268]	; (80069fc <HAL_GPIO_Init+0x2c8>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d007      	beq.n	8006904 <HAL_GPIO_Init+0x1d0>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a42      	ldr	r2, [pc, #264]	; (8006a00 <HAL_GPIO_Init+0x2cc>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d101      	bne.n	8006900 <HAL_GPIO_Init+0x1cc>
 80068fc:	2302      	movs	r3, #2
 80068fe:	e004      	b.n	800690a <HAL_GPIO_Init+0x1d6>
 8006900:	2307      	movs	r3, #7
 8006902:	e002      	b.n	800690a <HAL_GPIO_Init+0x1d6>
 8006904:	2301      	movs	r3, #1
 8006906:	e000      	b.n	800690a <HAL_GPIO_Init+0x1d6>
 8006908:	2300      	movs	r3, #0
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	f002 0203 	and.w	r2, r2, #3
 8006910:	0092      	lsls	r2, r2, #2
 8006912:	4093      	lsls	r3, r2
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	4313      	orrs	r3, r2
 8006918:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800691a:	4937      	ldr	r1, [pc, #220]	; (80069f8 <HAL_GPIO_Init+0x2c4>)
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	089b      	lsrs	r3, r3, #2
 8006920:	3302      	adds	r3, #2
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006928:	4b36      	ldr	r3, [pc, #216]	; (8006a04 <HAL_GPIO_Init+0x2d0>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	43db      	mvns	r3, r3
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	4013      	ands	r3, r2
 8006936:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d003      	beq.n	800694c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4313      	orrs	r3, r2
 800694a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800694c:	4a2d      	ldr	r2, [pc, #180]	; (8006a04 <HAL_GPIO_Init+0x2d0>)
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8006952:	4b2c      	ldr	r3, [pc, #176]	; (8006a04 <HAL_GPIO_Init+0x2d0>)
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	43db      	mvns	r3, r3
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	4013      	ands	r3, r2
 8006960:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d003      	beq.n	8006976 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4313      	orrs	r3, r2
 8006974:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006976:	4a23      	ldr	r2, [pc, #140]	; (8006a04 <HAL_GPIO_Init+0x2d0>)
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800697c:	4b21      	ldr	r3, [pc, #132]	; (8006a04 <HAL_GPIO_Init+0x2d0>)
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	43db      	mvns	r3, r3
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	4013      	ands	r3, r2
 800698a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d003      	beq.n	80069a0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	4313      	orrs	r3, r2
 800699e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80069a0:	4a18      	ldr	r2, [pc, #96]	; (8006a04 <HAL_GPIO_Init+0x2d0>)
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80069a6:	4b17      	ldr	r3, [pc, #92]	; (8006a04 <HAL_GPIO_Init+0x2d0>)
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	43db      	mvns	r3, r3
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4013      	ands	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d003      	beq.n	80069ca <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80069ca:	4a0e      	ldr	r2, [pc, #56]	; (8006a04 <HAL_GPIO_Init+0x2d0>)
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	3301      	adds	r3, #1
 80069d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	fa22 f303 	lsr.w	r3, r2, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f47f aeaf 	bne.w	8006744 <HAL_GPIO_Init+0x10>
  }
}
 80069e6:	bf00      	nop
 80069e8:	bf00      	nop
 80069ea:	371c      	adds	r7, #28
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr
 80069f4:	40021000 	.word	0x40021000
 80069f8:	40010000 	.word	0x40010000
 80069fc:	48000400 	.word	0x48000400
 8006a00:	48000800 	.word	0x48000800
 8006a04:	40010400 	.word	0x40010400

08006a08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	460b      	mov	r3, r1
 8006a12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691a      	ldr	r2, [r3, #16]
 8006a18:	887b      	ldrh	r3, [r7, #2]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006a20:	2301      	movs	r3, #1
 8006a22:	73fb      	strb	r3, [r7, #15]
 8006a24:	e001      	b.n	8006a2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a26:	2300      	movs	r3, #0
 8006a28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	460b      	mov	r3, r1
 8006a42:	807b      	strh	r3, [r7, #2]
 8006a44:	4613      	mov	r3, r2
 8006a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a48:	787b      	ldrb	r3, [r7, #1]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006a4e:	887a      	ldrh	r2, [r7, #2]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006a54:	e002      	b.n	8006a5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006a56:	887a      	ldrh	r2, [r7, #2]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e081      	b.n	8006b7e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d106      	bne.n	8006a94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7fd f8e0 	bl	8003c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2224      	movs	r2, #36	; 0x24
 8006a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 0201 	bic.w	r2, r2, #1
 8006aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006ab8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689a      	ldr	r2, [r3, #8]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ac8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d107      	bne.n	8006ae2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	689a      	ldr	r2, [r3, #8]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ade:	609a      	str	r2, [r3, #8]
 8006ae0:	e006      	b.n	8006af0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689a      	ldr	r2, [r3, #8]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006aee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d104      	bne.n	8006b02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	6812      	ldr	r2, [r2, #0]
 8006b0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68da      	ldr	r2, [r3, #12]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	691a      	ldr	r2, [r3, #16]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	ea42 0103 	orr.w	r1, r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	021a      	lsls	r2, r3, #8
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	69d9      	ldr	r1, [r3, #28]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a1a      	ldr	r2, [r3, #32]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f042 0201 	orr.w	r2, r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af02      	add	r7, sp, #8
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	607a      	str	r2, [r7, #4]
 8006b92:	461a      	mov	r2, r3
 8006b94:	460b      	mov	r3, r1
 8006b96:	817b      	strh	r3, [r7, #10]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b20      	cmp	r3, #32
 8006ba6:	f040 80da 	bne.w	8006d5e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d101      	bne.n	8006bb8 <HAL_I2C_Master_Transmit+0x30>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	e0d3      	b.n	8006d60 <HAL_I2C_Master_Transmit+0x1d8>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006bc0:	f7fd fec4 	bl	800494c <HAL_GetTick>
 8006bc4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	2319      	movs	r3, #25
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f000 f8fc 	bl	8006dd0 <I2C_WaitOnFlagUntilTimeout>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e0be      	b.n	8006d60 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2221      	movs	r2, #33	; 0x21
 8006be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2210      	movs	r2, #16
 8006bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	893a      	ldrh	r2, [r7, #8]
 8006c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	2bff      	cmp	r3, #255	; 0xff
 8006c12:	d90e      	bls.n	8006c32 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	22ff      	movs	r2, #255	; 0xff
 8006c18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c1e:	b2da      	uxtb	r2, r3
 8006c20:	8979      	ldrh	r1, [r7, #10]
 8006c22:	4b51      	ldr	r3, [pc, #324]	; (8006d68 <HAL_I2C_Master_Transmit+0x1e0>)
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 f9f2 	bl	8007014 <I2C_TransferConfig>
 8006c30:	e06c      	b.n	8006d0c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c40:	b2da      	uxtb	r2, r3
 8006c42:	8979      	ldrh	r1, [r7, #10]
 8006c44:	4b48      	ldr	r3, [pc, #288]	; (8006d68 <HAL_I2C_Master_Transmit+0x1e0>)
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 f9e1 	bl	8007014 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8006c52:	e05b      	b.n	8006d0c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	6a39      	ldr	r1, [r7, #32]
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 f8f9 	bl	8006e50 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d001      	beq.n	8006c68 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e07b      	b.n	8006d60 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6c:	781a      	ldrb	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	3b01      	subs	r3, #1
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c90:	3b01      	subs	r3, #1
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d034      	beq.n	8006d0c <HAL_I2C_Master_Transmit+0x184>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d130      	bne.n	8006d0c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	2180      	movs	r1, #128	; 0x80
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 f88b 	bl	8006dd0 <I2C_WaitOnFlagUntilTimeout>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d001      	beq.n	8006cc4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e04d      	b.n	8006d60 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	2bff      	cmp	r3, #255	; 0xff
 8006ccc:	d90e      	bls.n	8006cec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	22ff      	movs	r2, #255	; 0xff
 8006cd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	8979      	ldrh	r1, [r7, #10]
 8006cdc:	2300      	movs	r3, #0
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 f995 	bl	8007014 <I2C_TransferConfig>
 8006cea:	e00f      	b.n	8006d0c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	8979      	ldrh	r1, [r7, #10]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 f984 	bl	8007014 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d19e      	bne.n	8006c54 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	6a39      	ldr	r1, [r7, #32]
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 f8d8 	bl	8006ed0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e01a      	b.n	8006d60 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	6859      	ldr	r1, [r3, #4]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	4b0b      	ldr	r3, [pc, #44]	; (8006d6c <HAL_I2C_Master_Transmit+0x1e4>)
 8006d3e:	400b      	ands	r3, r1
 8006d40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2220      	movs	r2, #32
 8006d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	e000      	b.n	8006d60 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006d5e:	2302      	movs	r3, #2
  }
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3718      	adds	r7, #24
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	80002000 	.word	0x80002000
 8006d6c:	fe00e800 	.word	0xfe00e800

08006d70 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d103      	bne.n	8006da6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2200      	movs	r2, #0
 8006da4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d007      	beq.n	8006dc4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	699a      	ldr	r2, [r3, #24]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f042 0201 	orr.w	r2, r2, #1
 8006dc2:	619a      	str	r2, [r3, #24]
  }
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	603b      	str	r3, [r7, #0]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006de0:	e022      	b.n	8006e28 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de8:	d01e      	beq.n	8006e28 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dea:	f7fd fdaf 	bl	800494c <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d302      	bcc.n	8006e00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d113      	bne.n	8006e28 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e04:	f043 0220 	orr.w	r2, r3, #32
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e00f      	b.n	8006e48 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	699a      	ldr	r2, [r3, #24]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	4013      	ands	r3, r2
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	bf0c      	ite	eq
 8006e38:	2301      	moveq	r3, #1
 8006e3a:	2300      	movne	r3, #0
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	461a      	mov	r2, r3
 8006e40:	79fb      	ldrb	r3, [r7, #7]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d0cd      	beq.n	8006de2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e5c:	e02c      	b.n	8006eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	68b9      	ldr	r1, [r7, #8]
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f000 f870 	bl	8006f48 <I2C_IsAcknowledgeFailed>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e02a      	b.n	8006ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e78:	d01e      	beq.n	8006eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e7a:	f7fd fd67 	bl	800494c <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d302      	bcc.n	8006e90 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d113      	bne.n	8006eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e94:	f043 0220 	orr.w	r2, r3, #32
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e007      	b.n	8006ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	f003 0302 	and.w	r3, r3, #2
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d1cb      	bne.n	8006e5e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006edc:	e028      	b.n	8006f30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	68b9      	ldr	r1, [r7, #8]
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f000 f830 	bl	8006f48 <I2C_IsAcknowledgeFailed>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e026      	b.n	8006f40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ef2:	f7fd fd2b 	bl	800494c <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d302      	bcc.n	8006f08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d113      	bne.n	8006f30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f0c:	f043 0220 	orr.w	r2, r3, #32
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2220      	movs	r2, #32
 8006f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e007      	b.n	8006f40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	f003 0320 	and.w	r3, r3, #32
 8006f3a:	2b20      	cmp	r3, #32
 8006f3c:	d1cf      	bne.n	8006ede <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	f003 0310 	and.w	r3, r3, #16
 8006f5e:	2b10      	cmp	r3, #16
 8006f60:	d151      	bne.n	8007006 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f62:	e022      	b.n	8006faa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f6a:	d01e      	beq.n	8006faa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f6c:	f7fd fcee 	bl	800494c <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d302      	bcc.n	8006f82 <I2C_IsAcknowledgeFailed+0x3a>
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d113      	bne.n	8006faa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f86:	f043 0220 	orr.w	r2, r3, #32
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2220      	movs	r2, #32
 8006f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e02e      	b.n	8007008 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	f003 0320 	and.w	r3, r3, #32
 8006fb4:	2b20      	cmp	r3, #32
 8006fb6:	d1d5      	bne.n	8006f64 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2210      	movs	r2, #16
 8006fbe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f7ff fedd 	bl	8006d88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6859      	ldr	r1, [r3, #4]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	4b0d      	ldr	r3, [pc, #52]	; (8007010 <I2C_IsAcknowledgeFailed+0xc8>)
 8006fda:	400b      	ands	r3, r1
 8006fdc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe2:	f043 0204 	orr.w	r2, r3, #4
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e000      	b.n	8007008 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	fe00e800 	.word	0xfe00e800

08007014 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	607b      	str	r3, [r7, #4]
 800701e:	460b      	mov	r3, r1
 8007020:	817b      	strh	r3, [r7, #10]
 8007022:	4613      	mov	r3, r2
 8007024:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	0d5b      	lsrs	r3, r3, #21
 8007030:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007034:	4b0d      	ldr	r3, [pc, #52]	; (800706c <I2C_TransferConfig+0x58>)
 8007036:	430b      	orrs	r3, r1
 8007038:	43db      	mvns	r3, r3
 800703a:	ea02 0103 	and.w	r1, r2, r3
 800703e:	897b      	ldrh	r3, [r7, #10]
 8007040:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007044:	7a7b      	ldrb	r3, [r7, #9]
 8007046:	041b      	lsls	r3, r3, #16
 8007048:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800704c:	431a      	orrs	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	431a      	orrs	r2, r3
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	431a      	orrs	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800705e:	bf00      	nop
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	03ff63ff 	.word	0x03ff63ff

08007070 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b20      	cmp	r3, #32
 8007084:	d138      	bne.n	80070f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800708c:	2b01      	cmp	r3, #1
 800708e:	d101      	bne.n	8007094 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007090:	2302      	movs	r3, #2
 8007092:	e032      	b.n	80070fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2224      	movs	r2, #36	; 0x24
 80070a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0201 	bic.w	r2, r2, #1
 80070b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6819      	ldr	r1, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	430a      	orrs	r2, r1
 80070d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f042 0201 	orr.w	r2, r2, #1
 80070e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2220      	movs	r2, #32
 80070e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	e000      	b.n	80070fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80070f8:	2302      	movs	r3, #2
  }
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007106:	b480      	push	{r7}
 8007108:	b085      	sub	sp, #20
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b20      	cmp	r3, #32
 800711a:	d139      	bne.n	8007190 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007122:	2b01      	cmp	r3, #1
 8007124:	d101      	bne.n	800712a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007126:	2302      	movs	r3, #2
 8007128:	e033      	b.n	8007192 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2224      	movs	r2, #36	; 0x24
 8007136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f022 0201 	bic.w	r2, r2, #1
 8007148:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007158:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	021b      	lsls	r3, r3, #8
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	4313      	orrs	r3, r2
 8007162:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f042 0201 	orr.w	r2, r2, #1
 800717a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2220      	movs	r2, #32
 8007180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800718c:	2300      	movs	r3, #0
 800718e:	e000      	b.n	8007192 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007190:	2302      	movs	r3, #2
  }
}
 8007192:	4618      	mov	r0, r3
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
	...

080071a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80071a0:	b480      	push	{r7}
 80071a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80071a4:	4b04      	ldr	r3, [pc, #16]	; (80071b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	40007000 	.word	0x40007000

080071bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071ca:	d130      	bne.n	800722e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80071cc:	4b23      	ldr	r3, [pc, #140]	; (800725c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80071d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071d8:	d038      	beq.n	800724c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80071da:	4b20      	ldr	r3, [pc, #128]	; (800725c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80071e2:	4a1e      	ldr	r2, [pc, #120]	; (800725c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80071e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80071e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80071ea:	4b1d      	ldr	r3, [pc, #116]	; (8007260 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2232      	movs	r2, #50	; 0x32
 80071f0:	fb02 f303 	mul.w	r3, r2, r3
 80071f4:	4a1b      	ldr	r2, [pc, #108]	; (8007264 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80071f6:	fba2 2303 	umull	r2, r3, r2, r3
 80071fa:	0c9b      	lsrs	r3, r3, #18
 80071fc:	3301      	adds	r3, #1
 80071fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007200:	e002      	b.n	8007208 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	3b01      	subs	r3, #1
 8007206:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007208:	4b14      	ldr	r3, [pc, #80]	; (800725c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007214:	d102      	bne.n	800721c <HAL_PWREx_ControlVoltageScaling+0x60>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1f2      	bne.n	8007202 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800721c:	4b0f      	ldr	r3, [pc, #60]	; (800725c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007228:	d110      	bne.n	800724c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e00f      	b.n	800724e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800722e:	4b0b      	ldr	r3, [pc, #44]	; (800725c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800723a:	d007      	beq.n	800724c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800723c:	4b07      	ldr	r3, [pc, #28]	; (800725c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007244:	4a05      	ldr	r2, [pc, #20]	; (800725c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800724a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	40007000 	.word	0x40007000
 8007260:	20000000 	.word	0x20000000
 8007264:	431bde83 	.word	0x431bde83

08007268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b088      	sub	sp, #32
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d102      	bne.n	800727c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	f000 bc10 	b.w	8007a9c <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800727c:	4b96      	ldr	r3, [pc, #600]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f003 030c 	and.w	r3, r3, #12
 8007284:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007286:	4b94      	ldr	r3, [pc, #592]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f003 0303 	and.w	r3, r3, #3
 800728e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0310 	and.w	r3, r3, #16
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 80e4 	beq.w	8007466 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d007      	beq.n	80072b4 <HAL_RCC_OscConfig+0x4c>
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	2b0c      	cmp	r3, #12
 80072a8:	f040 808b 	bne.w	80073c2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	f040 8087 	bne.w	80073c2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80072b4:	4b88      	ldr	r3, [pc, #544]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d005      	beq.n	80072cc <HAL_RCC_OscConfig+0x64>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e3e7      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a1a      	ldr	r2, [r3, #32]
 80072d0:	4b81      	ldr	r3, [pc, #516]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0308 	and.w	r3, r3, #8
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d004      	beq.n	80072e6 <HAL_RCC_OscConfig+0x7e>
 80072dc:	4b7e      	ldr	r3, [pc, #504]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072e4:	e005      	b.n	80072f2 <HAL_RCC_OscConfig+0x8a>
 80072e6:	4b7c      	ldr	r3, [pc, #496]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 80072e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072ec:	091b      	lsrs	r3, r3, #4
 80072ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d223      	bcs.n	800733e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 fd7a 	bl	8007df4 <RCC_SetFlashLatencyFromMSIRange>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e3c8      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800730a:	4b73      	ldr	r3, [pc, #460]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a72      	ldr	r2, [pc, #456]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 8007310:	f043 0308 	orr.w	r3, r3, #8
 8007314:	6013      	str	r3, [r2, #0]
 8007316:	4b70      	ldr	r3, [pc, #448]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	496d      	ldr	r1, [pc, #436]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 8007324:	4313      	orrs	r3, r2
 8007326:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007328:	4b6b      	ldr	r3, [pc, #428]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	021b      	lsls	r3, r3, #8
 8007336:	4968      	ldr	r1, [pc, #416]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 8007338:	4313      	orrs	r3, r2
 800733a:	604b      	str	r3, [r1, #4]
 800733c:	e025      	b.n	800738a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800733e:	4b66      	ldr	r3, [pc, #408]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a65      	ldr	r2, [pc, #404]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 8007344:	f043 0308 	orr.w	r3, r3, #8
 8007348:	6013      	str	r3, [r2, #0]
 800734a:	4b63      	ldr	r3, [pc, #396]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	4960      	ldr	r1, [pc, #384]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 8007358:	4313      	orrs	r3, r2
 800735a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800735c:	4b5e      	ldr	r3, [pc, #376]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	021b      	lsls	r3, r3, #8
 800736a:	495b      	ldr	r1, [pc, #364]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 800736c:	4313      	orrs	r3, r2
 800736e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d109      	bne.n	800738a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	4618      	mov	r0, r3
 800737c:	f000 fd3a 	bl	8007df4 <RCC_SetFlashLatencyFromMSIRange>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e388      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800738a:	f000 fc6f 	bl	8007c6c <HAL_RCC_GetSysClockFreq>
 800738e:	4602      	mov	r2, r0
 8007390:	4b51      	ldr	r3, [pc, #324]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	091b      	lsrs	r3, r3, #4
 8007396:	f003 030f 	and.w	r3, r3, #15
 800739a:	4950      	ldr	r1, [pc, #320]	; (80074dc <HAL_RCC_OscConfig+0x274>)
 800739c:	5ccb      	ldrb	r3, [r1, r3]
 800739e:	f003 031f 	and.w	r3, r3, #31
 80073a2:	fa22 f303 	lsr.w	r3, r2, r3
 80073a6:	4a4e      	ldr	r2, [pc, #312]	; (80074e0 <HAL_RCC_OscConfig+0x278>)
 80073a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80073aa:	4b4e      	ldr	r3, [pc, #312]	; (80074e4 <HAL_RCC_OscConfig+0x27c>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7fd fa7c 	bl	80048ac <HAL_InitTick>
 80073b4:	4603      	mov	r3, r0
 80073b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d052      	beq.n	8007464 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80073be:	7bfb      	ldrb	r3, [r7, #15]
 80073c0:	e36c      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d032      	beq.n	8007430 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80073ca:	4b43      	ldr	r3, [pc, #268]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a42      	ldr	r2, [pc, #264]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 80073d0:	f043 0301 	orr.w	r3, r3, #1
 80073d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80073d6:	f7fd fab9 	bl	800494c <HAL_GetTick>
 80073da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80073dc:	e008      	b.n	80073f0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80073de:	f7fd fab5 	bl	800494c <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d901      	bls.n	80073f0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e355      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80073f0:	4b39      	ldr	r3, [pc, #228]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0302 	and.w	r3, r3, #2
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d0f0      	beq.n	80073de <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80073fc:	4b36      	ldr	r3, [pc, #216]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a35      	ldr	r2, [pc, #212]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 8007402:	f043 0308 	orr.w	r3, r3, #8
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	4b33      	ldr	r3, [pc, #204]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a1b      	ldr	r3, [r3, #32]
 8007414:	4930      	ldr	r1, [pc, #192]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 8007416:	4313      	orrs	r3, r2
 8007418:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800741a:	4b2f      	ldr	r3, [pc, #188]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	021b      	lsls	r3, r3, #8
 8007428:	492b      	ldr	r1, [pc, #172]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 800742a:	4313      	orrs	r3, r2
 800742c:	604b      	str	r3, [r1, #4]
 800742e:	e01a      	b.n	8007466 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007430:	4b29      	ldr	r3, [pc, #164]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a28      	ldr	r2, [pc, #160]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 8007436:	f023 0301 	bic.w	r3, r3, #1
 800743a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800743c:	f7fd fa86 	bl	800494c <HAL_GetTick>
 8007440:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007442:	e008      	b.n	8007456 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007444:	f7fd fa82 	bl	800494c <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	2b02      	cmp	r3, #2
 8007450:	d901      	bls.n	8007456 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e322      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007456:	4b20      	ldr	r3, [pc, #128]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1f0      	bne.n	8007444 <HAL_RCC_OscConfig+0x1dc>
 8007462:	e000      	b.n	8007466 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007464:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b00      	cmp	r3, #0
 8007470:	d073      	beq.n	800755a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	2b08      	cmp	r3, #8
 8007476:	d005      	beq.n	8007484 <HAL_RCC_OscConfig+0x21c>
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	2b0c      	cmp	r3, #12
 800747c:	d10e      	bne.n	800749c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	2b03      	cmp	r3, #3
 8007482:	d10b      	bne.n	800749c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007484:	4b14      	ldr	r3, [pc, #80]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d063      	beq.n	8007558 <HAL_RCC_OscConfig+0x2f0>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d15f      	bne.n	8007558 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e2ff      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074a4:	d106      	bne.n	80074b4 <HAL_RCC_OscConfig+0x24c>
 80074a6:	4b0c      	ldr	r3, [pc, #48]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a0b      	ldr	r2, [pc, #44]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 80074ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074b0:	6013      	str	r3, [r2, #0]
 80074b2:	e025      	b.n	8007500 <HAL_RCC_OscConfig+0x298>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074bc:	d114      	bne.n	80074e8 <HAL_RCC_OscConfig+0x280>
 80074be:	4b06      	ldr	r3, [pc, #24]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a05      	ldr	r2, [pc, #20]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 80074c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074c8:	6013      	str	r3, [r2, #0]
 80074ca:	4b03      	ldr	r3, [pc, #12]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a02      	ldr	r2, [pc, #8]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 80074d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074d4:	6013      	str	r3, [r2, #0]
 80074d6:	e013      	b.n	8007500 <HAL_RCC_OscConfig+0x298>
 80074d8:	40021000 	.word	0x40021000
 80074dc:	0800ca44 	.word	0x0800ca44
 80074e0:	20000000 	.word	0x20000000
 80074e4:	20000004 	.word	0x20000004
 80074e8:	4ba0      	ldr	r3, [pc, #640]	; (800776c <HAL_RCC_OscConfig+0x504>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a9f      	ldr	r2, [pc, #636]	; (800776c <HAL_RCC_OscConfig+0x504>)
 80074ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074f2:	6013      	str	r3, [r2, #0]
 80074f4:	4b9d      	ldr	r3, [pc, #628]	; (800776c <HAL_RCC_OscConfig+0x504>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a9c      	ldr	r2, [pc, #624]	; (800776c <HAL_RCC_OscConfig+0x504>)
 80074fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d013      	beq.n	8007530 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007508:	f7fd fa20 	bl	800494c <HAL_GetTick>
 800750c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800750e:	e008      	b.n	8007522 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007510:	f7fd fa1c 	bl	800494c <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	2b64      	cmp	r3, #100	; 0x64
 800751c:	d901      	bls.n	8007522 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e2bc      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007522:	4b92      	ldr	r3, [pc, #584]	; (800776c <HAL_RCC_OscConfig+0x504>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0f0      	beq.n	8007510 <HAL_RCC_OscConfig+0x2a8>
 800752e:	e014      	b.n	800755a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007530:	f7fd fa0c 	bl	800494c <HAL_GetTick>
 8007534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007536:	e008      	b.n	800754a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007538:	f7fd fa08 	bl	800494c <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	2b64      	cmp	r3, #100	; 0x64
 8007544:	d901      	bls.n	800754a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e2a8      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800754a:	4b88      	ldr	r3, [pc, #544]	; (800776c <HAL_RCC_OscConfig+0x504>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1f0      	bne.n	8007538 <HAL_RCC_OscConfig+0x2d0>
 8007556:	e000      	b.n	800755a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0302 	and.w	r3, r3, #2
 8007562:	2b00      	cmp	r3, #0
 8007564:	d060      	beq.n	8007628 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	2b04      	cmp	r3, #4
 800756a:	d005      	beq.n	8007578 <HAL_RCC_OscConfig+0x310>
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	2b0c      	cmp	r3, #12
 8007570:	d119      	bne.n	80075a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2b02      	cmp	r3, #2
 8007576:	d116      	bne.n	80075a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007578:	4b7c      	ldr	r3, [pc, #496]	; (800776c <HAL_RCC_OscConfig+0x504>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007580:	2b00      	cmp	r3, #0
 8007582:	d005      	beq.n	8007590 <HAL_RCC_OscConfig+0x328>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d101      	bne.n	8007590 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e285      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007590:	4b76      	ldr	r3, [pc, #472]	; (800776c <HAL_RCC_OscConfig+0x504>)
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	061b      	lsls	r3, r3, #24
 800759e:	4973      	ldr	r1, [pc, #460]	; (800776c <HAL_RCC_OscConfig+0x504>)
 80075a0:	4313      	orrs	r3, r2
 80075a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075a4:	e040      	b.n	8007628 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d023      	beq.n	80075f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075ae:	4b6f      	ldr	r3, [pc, #444]	; (800776c <HAL_RCC_OscConfig+0x504>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a6e      	ldr	r2, [pc, #440]	; (800776c <HAL_RCC_OscConfig+0x504>)
 80075b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ba:	f7fd f9c7 	bl	800494c <HAL_GetTick>
 80075be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075c0:	e008      	b.n	80075d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075c2:	f7fd f9c3 	bl	800494c <HAL_GetTick>
 80075c6:	4602      	mov	r2, r0
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d901      	bls.n	80075d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e263      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075d4:	4b65      	ldr	r3, [pc, #404]	; (800776c <HAL_RCC_OscConfig+0x504>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d0f0      	beq.n	80075c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075e0:	4b62      	ldr	r3, [pc, #392]	; (800776c <HAL_RCC_OscConfig+0x504>)
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	061b      	lsls	r3, r3, #24
 80075ee:	495f      	ldr	r1, [pc, #380]	; (800776c <HAL_RCC_OscConfig+0x504>)
 80075f0:	4313      	orrs	r3, r2
 80075f2:	604b      	str	r3, [r1, #4]
 80075f4:	e018      	b.n	8007628 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80075f6:	4b5d      	ldr	r3, [pc, #372]	; (800776c <HAL_RCC_OscConfig+0x504>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a5c      	ldr	r2, [pc, #368]	; (800776c <HAL_RCC_OscConfig+0x504>)
 80075fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007602:	f7fd f9a3 	bl	800494c <HAL_GetTick>
 8007606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007608:	e008      	b.n	800761c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800760a:	f7fd f99f 	bl	800494c <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	2b02      	cmp	r3, #2
 8007616:	d901      	bls.n	800761c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e23f      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800761c:	4b53      	ldr	r3, [pc, #332]	; (800776c <HAL_RCC_OscConfig+0x504>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1f0      	bne.n	800760a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0308 	and.w	r3, r3, #8
 8007630:	2b00      	cmp	r3, #0
 8007632:	d03c      	beq.n	80076ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d01c      	beq.n	8007676 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800763c:	4b4b      	ldr	r3, [pc, #300]	; (800776c <HAL_RCC_OscConfig+0x504>)
 800763e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007642:	4a4a      	ldr	r2, [pc, #296]	; (800776c <HAL_RCC_OscConfig+0x504>)
 8007644:	f043 0301 	orr.w	r3, r3, #1
 8007648:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800764c:	f7fd f97e 	bl	800494c <HAL_GetTick>
 8007650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007652:	e008      	b.n	8007666 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007654:	f7fd f97a 	bl	800494c <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	2b02      	cmp	r3, #2
 8007660:	d901      	bls.n	8007666 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e21a      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007666:	4b41      	ldr	r3, [pc, #260]	; (800776c <HAL_RCC_OscConfig+0x504>)
 8007668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800766c:	f003 0302 	and.w	r3, r3, #2
 8007670:	2b00      	cmp	r3, #0
 8007672:	d0ef      	beq.n	8007654 <HAL_RCC_OscConfig+0x3ec>
 8007674:	e01b      	b.n	80076ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007676:	4b3d      	ldr	r3, [pc, #244]	; (800776c <HAL_RCC_OscConfig+0x504>)
 8007678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800767c:	4a3b      	ldr	r2, [pc, #236]	; (800776c <HAL_RCC_OscConfig+0x504>)
 800767e:	f023 0301 	bic.w	r3, r3, #1
 8007682:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007686:	f7fd f961 	bl	800494c <HAL_GetTick>
 800768a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800768c:	e008      	b.n	80076a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800768e:	f7fd f95d 	bl	800494c <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	2b02      	cmp	r3, #2
 800769a:	d901      	bls.n	80076a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800769c:	2303      	movs	r3, #3
 800769e:	e1fd      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80076a0:	4b32      	ldr	r3, [pc, #200]	; (800776c <HAL_RCC_OscConfig+0x504>)
 80076a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1ef      	bne.n	800768e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0304 	and.w	r3, r3, #4
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f000 80a6 	beq.w	8007808 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076bc:	2300      	movs	r3, #0
 80076be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80076c0:	4b2a      	ldr	r3, [pc, #168]	; (800776c <HAL_RCC_OscConfig+0x504>)
 80076c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10d      	bne.n	80076e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076cc:	4b27      	ldr	r3, [pc, #156]	; (800776c <HAL_RCC_OscConfig+0x504>)
 80076ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076d0:	4a26      	ldr	r2, [pc, #152]	; (800776c <HAL_RCC_OscConfig+0x504>)
 80076d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076d6:	6593      	str	r3, [r2, #88]	; 0x58
 80076d8:	4b24      	ldr	r3, [pc, #144]	; (800776c <HAL_RCC_OscConfig+0x504>)
 80076da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076e0:	60bb      	str	r3, [r7, #8]
 80076e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076e4:	2301      	movs	r3, #1
 80076e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076e8:	4b21      	ldr	r3, [pc, #132]	; (8007770 <HAL_RCC_OscConfig+0x508>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d118      	bne.n	8007726 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076f4:	4b1e      	ldr	r3, [pc, #120]	; (8007770 <HAL_RCC_OscConfig+0x508>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a1d      	ldr	r2, [pc, #116]	; (8007770 <HAL_RCC_OscConfig+0x508>)
 80076fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007700:	f7fd f924 	bl	800494c <HAL_GetTick>
 8007704:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007706:	e008      	b.n	800771a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007708:	f7fd f920 	bl	800494c <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	2b02      	cmp	r3, #2
 8007714:	d901      	bls.n	800771a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e1c0      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800771a:	4b15      	ldr	r3, [pc, #84]	; (8007770 <HAL_RCC_OscConfig+0x508>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0f0      	beq.n	8007708 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d108      	bne.n	8007740 <HAL_RCC_OscConfig+0x4d8>
 800772e:	4b0f      	ldr	r3, [pc, #60]	; (800776c <HAL_RCC_OscConfig+0x504>)
 8007730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007734:	4a0d      	ldr	r2, [pc, #52]	; (800776c <HAL_RCC_OscConfig+0x504>)
 8007736:	f043 0301 	orr.w	r3, r3, #1
 800773a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800773e:	e029      	b.n	8007794 <HAL_RCC_OscConfig+0x52c>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	2b05      	cmp	r3, #5
 8007746:	d115      	bne.n	8007774 <HAL_RCC_OscConfig+0x50c>
 8007748:	4b08      	ldr	r3, [pc, #32]	; (800776c <HAL_RCC_OscConfig+0x504>)
 800774a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800774e:	4a07      	ldr	r2, [pc, #28]	; (800776c <HAL_RCC_OscConfig+0x504>)
 8007750:	f043 0304 	orr.w	r3, r3, #4
 8007754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007758:	4b04      	ldr	r3, [pc, #16]	; (800776c <HAL_RCC_OscConfig+0x504>)
 800775a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800775e:	4a03      	ldr	r2, [pc, #12]	; (800776c <HAL_RCC_OscConfig+0x504>)
 8007760:	f043 0301 	orr.w	r3, r3, #1
 8007764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007768:	e014      	b.n	8007794 <HAL_RCC_OscConfig+0x52c>
 800776a:	bf00      	nop
 800776c:	40021000 	.word	0x40021000
 8007770:	40007000 	.word	0x40007000
 8007774:	4b9a      	ldr	r3, [pc, #616]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 8007776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800777a:	4a99      	ldr	r2, [pc, #612]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 800777c:	f023 0301 	bic.w	r3, r3, #1
 8007780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007784:	4b96      	ldr	r3, [pc, #600]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 8007786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800778a:	4a95      	ldr	r2, [pc, #596]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 800778c:	f023 0304 	bic.w	r3, r3, #4
 8007790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d016      	beq.n	80077ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800779c:	f7fd f8d6 	bl	800494c <HAL_GetTick>
 80077a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077a2:	e00a      	b.n	80077ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077a4:	f7fd f8d2 	bl	800494c <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d901      	bls.n	80077ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e170      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077ba:	4b89      	ldr	r3, [pc, #548]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 80077bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c0:	f003 0302 	and.w	r3, r3, #2
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d0ed      	beq.n	80077a4 <HAL_RCC_OscConfig+0x53c>
 80077c8:	e015      	b.n	80077f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ca:	f7fd f8bf 	bl	800494c <HAL_GetTick>
 80077ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80077d0:	e00a      	b.n	80077e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077d2:	f7fd f8bb 	bl	800494c <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d901      	bls.n	80077e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e159      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80077e8:	4b7d      	ldr	r3, [pc, #500]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 80077ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1ed      	bne.n	80077d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80077f6:	7ffb      	ldrb	r3, [r7, #31]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d105      	bne.n	8007808 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077fc:	4b78      	ldr	r3, [pc, #480]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 80077fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007800:	4a77      	ldr	r2, [pc, #476]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 8007802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007806:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0320 	and.w	r3, r3, #32
 8007810:	2b00      	cmp	r3, #0
 8007812:	d03c      	beq.n	800788e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007818:	2b00      	cmp	r3, #0
 800781a:	d01c      	beq.n	8007856 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800781c:	4b70      	ldr	r3, [pc, #448]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 800781e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007822:	4a6f      	ldr	r2, [pc, #444]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 8007824:	f043 0301 	orr.w	r3, r3, #1
 8007828:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800782c:	f7fd f88e 	bl	800494c <HAL_GetTick>
 8007830:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007832:	e008      	b.n	8007846 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007834:	f7fd f88a 	bl	800494c <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	2b02      	cmp	r3, #2
 8007840:	d901      	bls.n	8007846 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e12a      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007846:	4b66      	ldr	r3, [pc, #408]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 8007848:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800784c:	f003 0302 	and.w	r3, r3, #2
 8007850:	2b00      	cmp	r3, #0
 8007852:	d0ef      	beq.n	8007834 <HAL_RCC_OscConfig+0x5cc>
 8007854:	e01b      	b.n	800788e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007856:	4b62      	ldr	r3, [pc, #392]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 8007858:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800785c:	4a60      	ldr	r2, [pc, #384]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 800785e:	f023 0301 	bic.w	r3, r3, #1
 8007862:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007866:	f7fd f871 	bl	800494c <HAL_GetTick>
 800786a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800786c:	e008      	b.n	8007880 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800786e:	f7fd f86d 	bl	800494c <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	2b02      	cmp	r3, #2
 800787a:	d901      	bls.n	8007880 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e10d      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007880:	4b57      	ldr	r3, [pc, #348]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 8007882:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1ef      	bne.n	800786e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007892:	2b00      	cmp	r3, #0
 8007894:	f000 8101 	beq.w	8007a9a <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789c:	2b02      	cmp	r3, #2
 800789e:	f040 80c9 	bne.w	8007a34 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80078a2:	4b4f      	ldr	r3, [pc, #316]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f003 0203 	and.w	r2, r3, #3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d12c      	bne.n	8007910 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c0:	3b01      	subs	r3, #1
 80078c2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d123      	bne.n	8007910 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d11b      	bne.n	8007910 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d113      	bne.n	8007910 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f2:	085b      	lsrs	r3, r3, #1
 80078f4:	3b01      	subs	r3, #1
 80078f6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d109      	bne.n	8007910 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007906:	085b      	lsrs	r3, r3, #1
 8007908:	3b01      	subs	r3, #1
 800790a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800790c:	429a      	cmp	r2, r3
 800790e:	d06b      	beq.n	80079e8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	2b0c      	cmp	r3, #12
 8007914:	d062      	beq.n	80079dc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007916:	4b32      	ldr	r3, [pc, #200]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e0ba      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007926:	4b2e      	ldr	r3, [pc, #184]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a2d      	ldr	r2, [pc, #180]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 800792c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007930:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007932:	f7fd f80b 	bl	800494c <HAL_GetTick>
 8007936:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007938:	e008      	b.n	800794c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800793a:	f7fd f807 	bl	800494c <HAL_GetTick>
 800793e:	4602      	mov	r2, r0
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	2b02      	cmp	r3, #2
 8007946:	d901      	bls.n	800794c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007948:	2303      	movs	r3, #3
 800794a:	e0a7      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800794c:	4b24      	ldr	r3, [pc, #144]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1f0      	bne.n	800793a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007958:	4b21      	ldr	r3, [pc, #132]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 800795a:	68da      	ldr	r2, [r3, #12]
 800795c:	4b21      	ldr	r3, [pc, #132]	; (80079e4 <HAL_RCC_OscConfig+0x77c>)
 800795e:	4013      	ands	r3, r2
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007968:	3a01      	subs	r2, #1
 800796a:	0112      	lsls	r2, r2, #4
 800796c:	4311      	orrs	r1, r2
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007972:	0212      	lsls	r2, r2, #8
 8007974:	4311      	orrs	r1, r2
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800797a:	0852      	lsrs	r2, r2, #1
 800797c:	3a01      	subs	r2, #1
 800797e:	0552      	lsls	r2, r2, #21
 8007980:	4311      	orrs	r1, r2
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007986:	0852      	lsrs	r2, r2, #1
 8007988:	3a01      	subs	r2, #1
 800798a:	0652      	lsls	r2, r2, #25
 800798c:	4311      	orrs	r1, r2
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007992:	06d2      	lsls	r2, r2, #27
 8007994:	430a      	orrs	r2, r1
 8007996:	4912      	ldr	r1, [pc, #72]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 8007998:	4313      	orrs	r3, r2
 800799a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800799c:	4b10      	ldr	r3, [pc, #64]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a0f      	ldr	r2, [pc, #60]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 80079a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80079a8:	4b0d      	ldr	r3, [pc, #52]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	4a0c      	ldr	r2, [pc, #48]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 80079ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80079b4:	f7fc ffca 	bl	800494c <HAL_GetTick>
 80079b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079ba:	e008      	b.n	80079ce <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079bc:	f7fc ffc6 	bl	800494c <HAL_GetTick>
 80079c0:	4602      	mov	r2, r0
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d901      	bls.n	80079ce <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e066      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079ce:	4b04      	ldr	r3, [pc, #16]	; (80079e0 <HAL_RCC_OscConfig+0x778>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d0f0      	beq.n	80079bc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80079da:	e05e      	b.n	8007a9a <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e05d      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
 80079e0:	40021000 	.word	0x40021000
 80079e4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079e8:	4b2e      	ldr	r3, [pc, #184]	; (8007aa4 <HAL_RCC_OscConfig+0x83c>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d152      	bne.n	8007a9a <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80079f4:	4b2b      	ldr	r3, [pc, #172]	; (8007aa4 <HAL_RCC_OscConfig+0x83c>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a2a      	ldr	r2, [pc, #168]	; (8007aa4 <HAL_RCC_OscConfig+0x83c>)
 80079fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a00:	4b28      	ldr	r3, [pc, #160]	; (8007aa4 <HAL_RCC_OscConfig+0x83c>)
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	4a27      	ldr	r2, [pc, #156]	; (8007aa4 <HAL_RCC_OscConfig+0x83c>)
 8007a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007a0c:	f7fc ff9e 	bl	800494c <HAL_GetTick>
 8007a10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a12:	e008      	b.n	8007a26 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a14:	f7fc ff9a 	bl	800494c <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d901      	bls.n	8007a26 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e03a      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a26:	4b1f      	ldr	r3, [pc, #124]	; (8007aa4 <HAL_RCC_OscConfig+0x83c>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d0f0      	beq.n	8007a14 <HAL_RCC_OscConfig+0x7ac>
 8007a32:	e032      	b.n	8007a9a <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	2b0c      	cmp	r3, #12
 8007a38:	d02d      	beq.n	8007a96 <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a3a:	4b1a      	ldr	r3, [pc, #104]	; (8007aa4 <HAL_RCC_OscConfig+0x83c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a19      	ldr	r2, [pc, #100]	; (8007aa4 <HAL_RCC_OscConfig+0x83c>)
 8007a40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a44:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007a46:	4b17      	ldr	r3, [pc, #92]	; (8007aa4 <HAL_RCC_OscConfig+0x83c>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d105      	bne.n	8007a5e <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007a52:	4b14      	ldr	r3, [pc, #80]	; (8007aa4 <HAL_RCC_OscConfig+0x83c>)
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	4a13      	ldr	r2, [pc, #76]	; (8007aa4 <HAL_RCC_OscConfig+0x83c>)
 8007a58:	f023 0303 	bic.w	r3, r3, #3
 8007a5c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007a5e:	4b11      	ldr	r3, [pc, #68]	; (8007aa4 <HAL_RCC_OscConfig+0x83c>)
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	4a10      	ldr	r2, [pc, #64]	; (8007aa4 <HAL_RCC_OscConfig+0x83c>)
 8007a64:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a6c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a6e:	f7fc ff6d 	bl	800494c <HAL_GetTick>
 8007a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a74:	e008      	b.n	8007a88 <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a76:	f7fc ff69 	bl	800494c <HAL_GetTick>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d901      	bls.n	8007a88 <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e009      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a88:	4b06      	ldr	r3, [pc, #24]	; (8007aa4 <HAL_RCC_OscConfig+0x83c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1f0      	bne.n	8007a76 <HAL_RCC_OscConfig+0x80e>
 8007a94:	e001      	b.n	8007a9a <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e000      	b.n	8007a9c <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3720      	adds	r7, #32
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	40021000 	.word	0x40021000

08007aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d101      	bne.n	8007abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e0c8      	b.n	8007c4e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007abc:	4b66      	ldr	r3, [pc, #408]	; (8007c58 <HAL_RCC_ClockConfig+0x1b0>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0307 	and.w	r3, r3, #7
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d910      	bls.n	8007aec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aca:	4b63      	ldr	r3, [pc, #396]	; (8007c58 <HAL_RCC_ClockConfig+0x1b0>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f023 0207 	bic.w	r2, r3, #7
 8007ad2:	4961      	ldr	r1, [pc, #388]	; (8007c58 <HAL_RCC_ClockConfig+0x1b0>)
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ada:	4b5f      	ldr	r3, [pc, #380]	; (8007c58 <HAL_RCC_ClockConfig+0x1b0>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0307 	and.w	r3, r3, #7
 8007ae2:	683a      	ldr	r2, [r7, #0]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d001      	beq.n	8007aec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e0b0      	b.n	8007c4e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0301 	and.w	r3, r3, #1
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d04c      	beq.n	8007b92 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	2b03      	cmp	r3, #3
 8007afe:	d107      	bne.n	8007b10 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b00:	4b56      	ldr	r3, [pc, #344]	; (8007c5c <HAL_RCC_ClockConfig+0x1b4>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d121      	bne.n	8007b50 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e09e      	b.n	8007c4e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d107      	bne.n	8007b28 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b18:	4b50      	ldr	r3, [pc, #320]	; (8007c5c <HAL_RCC_ClockConfig+0x1b4>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d115      	bne.n	8007b50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e092      	b.n	8007c4e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d107      	bne.n	8007b40 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007b30:	4b4a      	ldr	r3, [pc, #296]	; (8007c5c <HAL_RCC_ClockConfig+0x1b4>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 0302 	and.w	r3, r3, #2
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d109      	bne.n	8007b50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e086      	b.n	8007c4e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b40:	4b46      	ldr	r3, [pc, #280]	; (8007c5c <HAL_RCC_ClockConfig+0x1b4>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d101      	bne.n	8007b50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e07e      	b.n	8007c4e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007b50:	4b42      	ldr	r3, [pc, #264]	; (8007c5c <HAL_RCC_ClockConfig+0x1b4>)
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	f023 0203 	bic.w	r2, r3, #3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	493f      	ldr	r1, [pc, #252]	; (8007c5c <HAL_RCC_ClockConfig+0x1b4>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b62:	f7fc fef3 	bl	800494c <HAL_GetTick>
 8007b66:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b68:	e00a      	b.n	8007b80 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b6a:	f7fc feef 	bl	800494c <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d901      	bls.n	8007b80 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e066      	b.n	8007c4e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b80:	4b36      	ldr	r3, [pc, #216]	; (8007c5c <HAL_RCC_ClockConfig+0x1b4>)
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	f003 020c 	and.w	r2, r3, #12
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d1eb      	bne.n	8007b6a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0302 	and.w	r3, r3, #2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d008      	beq.n	8007bb0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b9e:	4b2f      	ldr	r3, [pc, #188]	; (8007c5c <HAL_RCC_ClockConfig+0x1b4>)
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	492c      	ldr	r1, [pc, #176]	; (8007c5c <HAL_RCC_ClockConfig+0x1b4>)
 8007bac:	4313      	orrs	r3, r2
 8007bae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007bb0:	4b29      	ldr	r3, [pc, #164]	; (8007c58 <HAL_RCC_ClockConfig+0x1b0>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0307 	and.w	r3, r3, #7
 8007bb8:	683a      	ldr	r2, [r7, #0]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d210      	bcs.n	8007be0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bbe:	4b26      	ldr	r3, [pc, #152]	; (8007c58 <HAL_RCC_ClockConfig+0x1b0>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f023 0207 	bic.w	r2, r3, #7
 8007bc6:	4924      	ldr	r1, [pc, #144]	; (8007c58 <HAL_RCC_ClockConfig+0x1b0>)
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bce:	4b22      	ldr	r3, [pc, #136]	; (8007c58 <HAL_RCC_ClockConfig+0x1b0>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0307 	and.w	r3, r3, #7
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d001      	beq.n	8007be0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e036      	b.n	8007c4e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0304 	and.w	r3, r3, #4
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d008      	beq.n	8007bfe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bec:	4b1b      	ldr	r3, [pc, #108]	; (8007c5c <HAL_RCC_ClockConfig+0x1b4>)
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	4918      	ldr	r1, [pc, #96]	; (8007c5c <HAL_RCC_ClockConfig+0x1b4>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0308 	and.w	r3, r3, #8
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d009      	beq.n	8007c1e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c0a:	4b14      	ldr	r3, [pc, #80]	; (8007c5c <HAL_RCC_ClockConfig+0x1b4>)
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	00db      	lsls	r3, r3, #3
 8007c18:	4910      	ldr	r1, [pc, #64]	; (8007c5c <HAL_RCC_ClockConfig+0x1b4>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007c1e:	f000 f825 	bl	8007c6c <HAL_RCC_GetSysClockFreq>
 8007c22:	4602      	mov	r2, r0
 8007c24:	4b0d      	ldr	r3, [pc, #52]	; (8007c5c <HAL_RCC_ClockConfig+0x1b4>)
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	091b      	lsrs	r3, r3, #4
 8007c2a:	f003 030f 	and.w	r3, r3, #15
 8007c2e:	490c      	ldr	r1, [pc, #48]	; (8007c60 <HAL_RCC_ClockConfig+0x1b8>)
 8007c30:	5ccb      	ldrb	r3, [r1, r3]
 8007c32:	f003 031f 	and.w	r3, r3, #31
 8007c36:	fa22 f303 	lsr.w	r3, r2, r3
 8007c3a:	4a0a      	ldr	r2, [pc, #40]	; (8007c64 <HAL_RCC_ClockConfig+0x1bc>)
 8007c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007c3e:	4b0a      	ldr	r3, [pc, #40]	; (8007c68 <HAL_RCC_ClockConfig+0x1c0>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fc fe32 	bl	80048ac <HAL_InitTick>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	72fb      	strb	r3, [r7, #11]

  return status;
 8007c4c:	7afb      	ldrb	r3, [r7, #11]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	40022000 	.word	0x40022000
 8007c5c:	40021000 	.word	0x40021000
 8007c60:	0800ca44 	.word	0x0800ca44
 8007c64:	20000000 	.word	0x20000000
 8007c68:	20000004 	.word	0x20000004

08007c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b089      	sub	sp, #36	; 0x24
 8007c70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007c72:	2300      	movs	r3, #0
 8007c74:	61fb      	str	r3, [r7, #28]
 8007c76:	2300      	movs	r3, #0
 8007c78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c7a:	4b3e      	ldr	r3, [pc, #248]	; (8007d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f003 030c 	and.w	r3, r3, #12
 8007c82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c84:	4b3b      	ldr	r3, [pc, #236]	; (8007d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	f003 0303 	and.w	r3, r3, #3
 8007c8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d005      	beq.n	8007ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	2b0c      	cmp	r3, #12
 8007c98:	d121      	bne.n	8007cde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d11e      	bne.n	8007cde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007ca0:	4b34      	ldr	r3, [pc, #208]	; (8007d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0308 	and.w	r3, r3, #8
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d107      	bne.n	8007cbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007cac:	4b31      	ldr	r3, [pc, #196]	; (8007d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8007cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cb2:	0a1b      	lsrs	r3, r3, #8
 8007cb4:	f003 030f 	and.w	r3, r3, #15
 8007cb8:	61fb      	str	r3, [r7, #28]
 8007cba:	e005      	b.n	8007cc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007cbc:	4b2d      	ldr	r3, [pc, #180]	; (8007d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	091b      	lsrs	r3, r3, #4
 8007cc2:	f003 030f 	and.w	r3, r3, #15
 8007cc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007cc8:	4a2b      	ldr	r2, [pc, #172]	; (8007d78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10d      	bne.n	8007cf4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007cdc:	e00a      	b.n	8007cf4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	2b04      	cmp	r3, #4
 8007ce2:	d102      	bne.n	8007cea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007ce4:	4b25      	ldr	r3, [pc, #148]	; (8007d7c <HAL_RCC_GetSysClockFreq+0x110>)
 8007ce6:	61bb      	str	r3, [r7, #24]
 8007ce8:	e004      	b.n	8007cf4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	2b08      	cmp	r3, #8
 8007cee:	d101      	bne.n	8007cf4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007cf0:	4b23      	ldr	r3, [pc, #140]	; (8007d80 <HAL_RCC_GetSysClockFreq+0x114>)
 8007cf2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	2b0c      	cmp	r3, #12
 8007cf8:	d134      	bne.n	8007d64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007cfa:	4b1e      	ldr	r3, [pc, #120]	; (8007d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	f003 0303 	and.w	r3, r3, #3
 8007d02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d003      	beq.n	8007d12 <HAL_RCC_GetSysClockFreq+0xa6>
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d003      	beq.n	8007d18 <HAL_RCC_GetSysClockFreq+0xac>
 8007d10:	e005      	b.n	8007d1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007d12:	4b1a      	ldr	r3, [pc, #104]	; (8007d7c <HAL_RCC_GetSysClockFreq+0x110>)
 8007d14:	617b      	str	r3, [r7, #20]
      break;
 8007d16:	e005      	b.n	8007d24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007d18:	4b19      	ldr	r3, [pc, #100]	; (8007d80 <HAL_RCC_GetSysClockFreq+0x114>)
 8007d1a:	617b      	str	r3, [r7, #20]
      break;
 8007d1c:	e002      	b.n	8007d24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	617b      	str	r3, [r7, #20]
      break;
 8007d22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d24:	4b13      	ldr	r3, [pc, #76]	; (8007d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	091b      	lsrs	r3, r3, #4
 8007d2a:	f003 0307 	and.w	r3, r3, #7
 8007d2e:	3301      	adds	r3, #1
 8007d30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007d32:	4b10      	ldr	r3, [pc, #64]	; (8007d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	0a1b      	lsrs	r3, r3, #8
 8007d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	fb03 f202 	mul.w	r2, r3, r2
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d4a:	4b0a      	ldr	r3, [pc, #40]	; (8007d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	0e5b      	lsrs	r3, r3, #25
 8007d50:	f003 0303 	and.w	r3, r3, #3
 8007d54:	3301      	adds	r3, #1
 8007d56:	005b      	lsls	r3, r3, #1
 8007d58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007d64:	69bb      	ldr	r3, [r7, #24]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3724      	adds	r7, #36	; 0x24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	40021000 	.word	0x40021000
 8007d78:	0800ca5c 	.word	0x0800ca5c
 8007d7c:	00f42400 	.word	0x00f42400
 8007d80:	00b71b00 	.word	0x00b71b00

08007d84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d84:	b480      	push	{r7}
 8007d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d88:	4b03      	ldr	r3, [pc, #12]	; (8007d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	20000000 	.word	0x20000000

08007d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007da0:	f7ff fff0 	bl	8007d84 <HAL_RCC_GetHCLKFreq>
 8007da4:	4602      	mov	r2, r0
 8007da6:	4b06      	ldr	r3, [pc, #24]	; (8007dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	0a1b      	lsrs	r3, r3, #8
 8007dac:	f003 0307 	and.w	r3, r3, #7
 8007db0:	4904      	ldr	r1, [pc, #16]	; (8007dc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007db2:	5ccb      	ldrb	r3, [r1, r3]
 8007db4:	f003 031f 	and.w	r3, r3, #31
 8007db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	40021000 	.word	0x40021000
 8007dc4:	0800ca54 	.word	0x0800ca54

08007dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007dcc:	f7ff ffda 	bl	8007d84 <HAL_RCC_GetHCLKFreq>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	4b06      	ldr	r3, [pc, #24]	; (8007dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	0adb      	lsrs	r3, r3, #11
 8007dd8:	f003 0307 	and.w	r3, r3, #7
 8007ddc:	4904      	ldr	r1, [pc, #16]	; (8007df0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007dde:	5ccb      	ldrb	r3, [r1, r3]
 8007de0:	f003 031f 	and.w	r3, r3, #31
 8007de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	40021000 	.word	0x40021000
 8007df0:	0800ca54 	.word	0x0800ca54

08007df4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007e00:	4b2a      	ldr	r3, [pc, #168]	; (8007eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d003      	beq.n	8007e14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007e0c:	f7ff f9c8 	bl	80071a0 <HAL_PWREx_GetVoltageRange>
 8007e10:	6178      	str	r0, [r7, #20]
 8007e12:	e014      	b.n	8007e3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007e14:	4b25      	ldr	r3, [pc, #148]	; (8007eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e18:	4a24      	ldr	r2, [pc, #144]	; (8007eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8007e20:	4b22      	ldr	r3, [pc, #136]	; (8007eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e28:	60fb      	str	r3, [r7, #12]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007e2c:	f7ff f9b8 	bl	80071a0 <HAL_PWREx_GetVoltageRange>
 8007e30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007e32:	4b1e      	ldr	r3, [pc, #120]	; (8007eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e36:	4a1d      	ldr	r2, [pc, #116]	; (8007eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e44:	d10b      	bne.n	8007e5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2b80      	cmp	r3, #128	; 0x80
 8007e4a:	d919      	bls.n	8007e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2ba0      	cmp	r3, #160	; 0xa0
 8007e50:	d902      	bls.n	8007e58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007e52:	2302      	movs	r3, #2
 8007e54:	613b      	str	r3, [r7, #16]
 8007e56:	e013      	b.n	8007e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007e58:	2301      	movs	r3, #1
 8007e5a:	613b      	str	r3, [r7, #16]
 8007e5c:	e010      	b.n	8007e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2b80      	cmp	r3, #128	; 0x80
 8007e62:	d902      	bls.n	8007e6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007e64:	2303      	movs	r3, #3
 8007e66:	613b      	str	r3, [r7, #16]
 8007e68:	e00a      	b.n	8007e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2b80      	cmp	r3, #128	; 0x80
 8007e6e:	d102      	bne.n	8007e76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007e70:	2302      	movs	r3, #2
 8007e72:	613b      	str	r3, [r7, #16]
 8007e74:	e004      	b.n	8007e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2b70      	cmp	r3, #112	; 0x70
 8007e7a:	d101      	bne.n	8007e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007e80:	4b0b      	ldr	r3, [pc, #44]	; (8007eb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f023 0207 	bic.w	r2, r3, #7
 8007e88:	4909      	ldr	r1, [pc, #36]	; (8007eb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007e90:	4b07      	ldr	r3, [pc, #28]	; (8007eb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 0307 	and.w	r3, r3, #7
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d001      	beq.n	8007ea2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e000      	b.n	8007ea4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	40021000 	.word	0x40021000
 8007eb0:	40022000 	.word	0x40022000

08007eb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d031      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007ed8:	d01a      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007eda:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007ede:	d814      	bhi.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d009      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007ee4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ee8:	d10f      	bne.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007eea:	4b5d      	ldr	r3, [pc, #372]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	4a5c      	ldr	r2, [pc, #368]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ef4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007ef6:	e00c      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	3304      	adds	r3, #4
 8007efc:	2100      	movs	r1, #0
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 f9ce 	bl	80082a0 <RCCEx_PLLSAI1_Config>
 8007f04:	4603      	mov	r3, r0
 8007f06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007f08:	e003      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	74fb      	strb	r3, [r7, #19]
      break;
 8007f0e:	e000      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f12:	7cfb      	ldrb	r3, [r7, #19]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10b      	bne.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f18:	4b51      	ldr	r3, [pc, #324]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f26:	494e      	ldr	r1, [pc, #312]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007f2e:	e001      	b.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f30:	7cfb      	ldrb	r3, [r7, #19]
 8007f32:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f000 809e 	beq.w	800807e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f42:	2300      	movs	r3, #0
 8007f44:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007f46:	4b46      	ldr	r3, [pc, #280]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007f52:	2301      	movs	r3, #1
 8007f54:	e000      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007f56:	2300      	movs	r3, #0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00d      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f5c:	4b40      	ldr	r3, [pc, #256]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f60:	4a3f      	ldr	r2, [pc, #252]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f66:	6593      	str	r3, [r2, #88]	; 0x58
 8007f68:	4b3d      	ldr	r3, [pc, #244]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f70:	60bb      	str	r3, [r7, #8]
 8007f72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f74:	2301      	movs	r3, #1
 8007f76:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f78:	4b3a      	ldr	r3, [pc, #232]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a39      	ldr	r2, [pc, #228]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f84:	f7fc fce2 	bl	800494c <HAL_GetTick>
 8007f88:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007f8a:	e009      	b.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f8c:	f7fc fcde 	bl	800494c <HAL_GetTick>
 8007f90:	4602      	mov	r2, r0
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d902      	bls.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	74fb      	strb	r3, [r7, #19]
        break;
 8007f9e:	e005      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007fa0:	4b30      	ldr	r3, [pc, #192]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d0ef      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007fac:	7cfb      	ldrb	r3, [r7, #19]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d15a      	bne.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007fb2:	4b2b      	ldr	r3, [pc, #172]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fbc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d01e      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d019      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007fce:	4b24      	ldr	r3, [pc, #144]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fd8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007fda:	4b21      	ldr	r3, [pc, #132]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fe0:	4a1f      	ldr	r2, [pc, #124]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fe6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007fea:	4b1d      	ldr	r3, [pc, #116]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ff0:	4a1b      	ldr	r2, [pc, #108]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007ffa:	4a19      	ldr	r2, [pc, #100]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	f003 0301 	and.w	r3, r3, #1
 8008008:	2b00      	cmp	r3, #0
 800800a:	d016      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800800c:	f7fc fc9e 	bl	800494c <HAL_GetTick>
 8008010:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008012:	e00b      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008014:	f7fc fc9a 	bl	800494c <HAL_GetTick>
 8008018:	4602      	mov	r2, r0
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008022:	4293      	cmp	r3, r2
 8008024:	d902      	bls.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8008026:	2303      	movs	r3, #3
 8008028:	74fb      	strb	r3, [r7, #19]
            break;
 800802a:	e006      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800802c:	4b0c      	ldr	r3, [pc, #48]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800802e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008032:	f003 0302 	and.w	r3, r3, #2
 8008036:	2b00      	cmp	r3, #0
 8008038:	d0ec      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800803a:	7cfb      	ldrb	r3, [r7, #19]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10b      	bne.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008040:	4b07      	ldr	r3, [pc, #28]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008046:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800804e:	4904      	ldr	r1, [pc, #16]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008050:	4313      	orrs	r3, r2
 8008052:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008056:	e009      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008058:	7cfb      	ldrb	r3, [r7, #19]
 800805a:	74bb      	strb	r3, [r7, #18]
 800805c:	e006      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800805e:	bf00      	nop
 8008060:	40021000 	.word	0x40021000
 8008064:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008068:	7cfb      	ldrb	r3, [r7, #19]
 800806a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800806c:	7c7b      	ldrb	r3, [r7, #17]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d105      	bne.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008072:	4b8a      	ldr	r3, [pc, #552]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008076:	4a89      	ldr	r2, [pc, #548]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800807c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0301 	and.w	r3, r3, #1
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00a      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800808a:	4b84      	ldr	r3, [pc, #528]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800808c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008090:	f023 0203 	bic.w	r2, r3, #3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a1b      	ldr	r3, [r3, #32]
 8008098:	4980      	ldr	r1, [pc, #512]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800809a:	4313      	orrs	r3, r2
 800809c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0302 	and.w	r3, r3, #2
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00a      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80080ac:	4b7b      	ldr	r3, [pc, #492]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80080ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080b2:	f023 020c 	bic.w	r2, r3, #12
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ba:	4978      	ldr	r1, [pc, #480]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80080bc:	4313      	orrs	r3, r2
 80080be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0320 	and.w	r3, r3, #32
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00a      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80080ce:	4b73      	ldr	r3, [pc, #460]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80080d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080dc:	496f      	ldr	r1, [pc, #444]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00a      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080f0:	4b6a      	ldr	r3, [pc, #424]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80080f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080fe:	4967      	ldr	r1, [pc, #412]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008100:	4313      	orrs	r3, r2
 8008102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00a      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008112:	4b62      	ldr	r3, [pc, #392]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008118:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008120:	495e      	ldr	r1, [pc, #376]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008122:	4313      	orrs	r3, r2
 8008124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00a      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008134:	4b59      	ldr	r3, [pc, #356]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800813a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008142:	4956      	ldr	r1, [pc, #344]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008144:	4313      	orrs	r3, r2
 8008146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00a      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008156:	4b51      	ldr	r3, [pc, #324]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800815c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008164:	494d      	ldr	r1, [pc, #308]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008166:	4313      	orrs	r3, r2
 8008168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d028      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008178:	4b48      	ldr	r3, [pc, #288]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800817a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800817e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008186:	4945      	ldr	r1, [pc, #276]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008188:	4313      	orrs	r3, r2
 800818a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008192:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008196:	d106      	bne.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008198:	4b40      	ldr	r3, [pc, #256]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	4a3f      	ldr	r2, [pc, #252]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800819e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081a2:	60d3      	str	r3, [r2, #12]
 80081a4:	e011      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081ae:	d10c      	bne.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	3304      	adds	r3, #4
 80081b4:	2101      	movs	r1, #1
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 f872 	bl	80082a0 <RCCEx_PLLSAI1_Config>
 80081bc:	4603      	mov	r3, r0
 80081be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80081c0:	7cfb      	ldrb	r3, [r7, #19]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80081c6:	7cfb      	ldrb	r3, [r7, #19]
 80081c8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d028      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80081d6:	4b31      	ldr	r3, [pc, #196]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80081d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081e4:	492d      	ldr	r1, [pc, #180]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80081e6:	4313      	orrs	r3, r2
 80081e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081f4:	d106      	bne.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081f6:	4b29      	ldr	r3, [pc, #164]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	4a28      	ldr	r2, [pc, #160]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80081fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008200:	60d3      	str	r3, [r2, #12]
 8008202:	e011      	b.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008208:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800820c:	d10c      	bne.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	3304      	adds	r3, #4
 8008212:	2101      	movs	r1, #1
 8008214:	4618      	mov	r0, r3
 8008216:	f000 f843 	bl	80082a0 <RCCEx_PLLSAI1_Config>
 800821a:	4603      	mov	r3, r0
 800821c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800821e:	7cfb      	ldrb	r3, [r7, #19]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8008224:	7cfb      	ldrb	r3, [r7, #19]
 8008226:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008230:	2b00      	cmp	r3, #0
 8008232:	d01c      	beq.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008234:	4b19      	ldr	r3, [pc, #100]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800823a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008242:	4916      	ldr	r1, [pc, #88]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008244:	4313      	orrs	r3, r2
 8008246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800824e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008252:	d10c      	bne.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	3304      	adds	r3, #4
 8008258:	2102      	movs	r1, #2
 800825a:	4618      	mov	r0, r3
 800825c:	f000 f820 	bl	80082a0 <RCCEx_PLLSAI1_Config>
 8008260:	4603      	mov	r3, r0
 8008262:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008264:	7cfb      	ldrb	r3, [r7, #19]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800826a:	7cfb      	ldrb	r3, [r7, #19]
 800826c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00a      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800827a:	4b08      	ldr	r3, [pc, #32]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800827c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008280:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008288:	4904      	ldr	r1, [pc, #16]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800828a:	4313      	orrs	r3, r2
 800828c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008290:	7cbb      	ldrb	r3, [r7, #18]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3718      	adds	r7, #24
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	40021000 	.word	0x40021000

080082a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80082ae:	4b74      	ldr	r3, [pc, #464]	; (8008480 <RCCEx_PLLSAI1_Config+0x1e0>)
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	f003 0303 	and.w	r3, r3, #3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d018      	beq.n	80082ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80082ba:	4b71      	ldr	r3, [pc, #452]	; (8008480 <RCCEx_PLLSAI1_Config+0x1e0>)
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	f003 0203 	and.w	r2, r3, #3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d10d      	bne.n	80082e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
       ||
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d009      	beq.n	80082e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80082d2:	4b6b      	ldr	r3, [pc, #428]	; (8008480 <RCCEx_PLLSAI1_Config+0x1e0>)
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	091b      	lsrs	r3, r3, #4
 80082d8:	f003 0307 	and.w	r3, r3, #7
 80082dc:	1c5a      	adds	r2, r3, #1
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	685b      	ldr	r3, [r3, #4]
       ||
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d047      	beq.n	8008376 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	73fb      	strb	r3, [r7, #15]
 80082ea:	e044      	b.n	8008376 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b03      	cmp	r3, #3
 80082f2:	d018      	beq.n	8008326 <RCCEx_PLLSAI1_Config+0x86>
 80082f4:	2b03      	cmp	r3, #3
 80082f6:	d825      	bhi.n	8008344 <RCCEx_PLLSAI1_Config+0xa4>
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d002      	beq.n	8008302 <RCCEx_PLLSAI1_Config+0x62>
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d009      	beq.n	8008314 <RCCEx_PLLSAI1_Config+0x74>
 8008300:	e020      	b.n	8008344 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008302:	4b5f      	ldr	r3, [pc, #380]	; (8008480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 0302 	and.w	r3, r3, #2
 800830a:	2b00      	cmp	r3, #0
 800830c:	d11d      	bne.n	800834a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008312:	e01a      	b.n	800834a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008314:	4b5a      	ldr	r3, [pc, #360]	; (8008480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800831c:	2b00      	cmp	r3, #0
 800831e:	d116      	bne.n	800834e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008324:	e013      	b.n	800834e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008326:	4b56      	ldr	r3, [pc, #344]	; (8008480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10f      	bne.n	8008352 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008332:	4b53      	ldr	r3, [pc, #332]	; (8008480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d109      	bne.n	8008352 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008342:	e006      	b.n	8008352 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	73fb      	strb	r3, [r7, #15]
      break;
 8008348:	e004      	b.n	8008354 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800834a:	bf00      	nop
 800834c:	e002      	b.n	8008354 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800834e:	bf00      	nop
 8008350:	e000      	b.n	8008354 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008352:	bf00      	nop
    }

    if(status == HAL_OK)
 8008354:	7bfb      	ldrb	r3, [r7, #15]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10d      	bne.n	8008376 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800835a:	4b49      	ldr	r3, [pc, #292]	; (8008480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6819      	ldr	r1, [r3, #0]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	3b01      	subs	r3, #1
 800836c:	011b      	lsls	r3, r3, #4
 800836e:	430b      	orrs	r3, r1
 8008370:	4943      	ldr	r1, [pc, #268]	; (8008480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008372:	4313      	orrs	r3, r2
 8008374:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008376:	7bfb      	ldrb	r3, [r7, #15]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d17c      	bne.n	8008476 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800837c:	4b40      	ldr	r3, [pc, #256]	; (8008480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a3f      	ldr	r2, [pc, #252]	; (8008480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008382:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008388:	f7fc fae0 	bl	800494c <HAL_GetTick>
 800838c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800838e:	e009      	b.n	80083a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008390:	f7fc fadc 	bl	800494c <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	2b02      	cmp	r3, #2
 800839c:	d902      	bls.n	80083a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	73fb      	strb	r3, [r7, #15]
        break;
 80083a2:	e005      	b.n	80083b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80083a4:	4b36      	ldr	r3, [pc, #216]	; (8008480 <RCCEx_PLLSAI1_Config+0x1e0>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1ef      	bne.n	8008390 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d15f      	bne.n	8008476 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d110      	bne.n	80083de <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80083bc:	4b30      	ldr	r3, [pc, #192]	; (8008480 <RCCEx_PLLSAI1_Config+0x1e0>)
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80083c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	6892      	ldr	r2, [r2, #8]
 80083cc:	0211      	lsls	r1, r2, #8
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	68d2      	ldr	r2, [r2, #12]
 80083d2:	06d2      	lsls	r2, r2, #27
 80083d4:	430a      	orrs	r2, r1
 80083d6:	492a      	ldr	r1, [pc, #168]	; (8008480 <RCCEx_PLLSAI1_Config+0x1e0>)
 80083d8:	4313      	orrs	r3, r2
 80083da:	610b      	str	r3, [r1, #16]
 80083dc:	e027      	b.n	800842e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d112      	bne.n	800840a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80083e4:	4b26      	ldr	r3, [pc, #152]	; (8008480 <RCCEx_PLLSAI1_Config+0x1e0>)
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80083ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	6892      	ldr	r2, [r2, #8]
 80083f4:	0211      	lsls	r1, r2, #8
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	6912      	ldr	r2, [r2, #16]
 80083fa:	0852      	lsrs	r2, r2, #1
 80083fc:	3a01      	subs	r2, #1
 80083fe:	0552      	lsls	r2, r2, #21
 8008400:	430a      	orrs	r2, r1
 8008402:	491f      	ldr	r1, [pc, #124]	; (8008480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008404:	4313      	orrs	r3, r2
 8008406:	610b      	str	r3, [r1, #16]
 8008408:	e011      	b.n	800842e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800840a:	4b1d      	ldr	r3, [pc, #116]	; (8008480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008412:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	6892      	ldr	r2, [r2, #8]
 800841a:	0211      	lsls	r1, r2, #8
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	6952      	ldr	r2, [r2, #20]
 8008420:	0852      	lsrs	r2, r2, #1
 8008422:	3a01      	subs	r2, #1
 8008424:	0652      	lsls	r2, r2, #25
 8008426:	430a      	orrs	r2, r1
 8008428:	4915      	ldr	r1, [pc, #84]	; (8008480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800842a:	4313      	orrs	r3, r2
 800842c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800842e:	4b14      	ldr	r3, [pc, #80]	; (8008480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a13      	ldr	r2, [pc, #76]	; (8008480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008434:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008438:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800843a:	f7fc fa87 	bl	800494c <HAL_GetTick>
 800843e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008440:	e009      	b.n	8008456 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008442:	f7fc fa83 	bl	800494c <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	2b02      	cmp	r3, #2
 800844e:	d902      	bls.n	8008456 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008450:	2303      	movs	r3, #3
 8008452:	73fb      	strb	r3, [r7, #15]
          break;
 8008454:	e005      	b.n	8008462 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008456:	4b0a      	ldr	r3, [pc, #40]	; (8008480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d0ef      	beq.n	8008442 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8008462:	7bfb      	ldrb	r3, [r7, #15]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d106      	bne.n	8008476 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008468:	4b05      	ldr	r3, [pc, #20]	; (8008480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800846a:	691a      	ldr	r2, [r3, #16]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	4903      	ldr	r1, [pc, #12]	; (8008480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008472:	4313      	orrs	r3, r2
 8008474:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008476:	7bfb      	ldrb	r3, [r7, #15]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	40021000 	.word	0x40021000

08008484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e049      	b.n	800852a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d106      	bne.n	80084b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7fc f87c 	bl	80045a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2202      	movs	r2, #2
 80084b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	3304      	adds	r3, #4
 80084c0:	4619      	mov	r1, r3
 80084c2:	4610      	mov	r0, r2
 80084c4:	f000 fcaa 	bl	8008e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
	...

08008534 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008542:	b2db      	uxtb	r3, r3
 8008544:	2b01      	cmp	r3, #1
 8008546:	d001      	beq.n	800854c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	e03b      	b.n	80085c4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2202      	movs	r2, #2
 8008550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68da      	ldr	r2, [r3, #12]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f042 0201 	orr.w	r2, r2, #1
 8008562:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a19      	ldr	r2, [pc, #100]	; (80085d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d009      	beq.n	8008582 <HAL_TIM_Base_Start_IT+0x4e>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008576:	d004      	beq.n	8008582 <HAL_TIM_Base_Start_IT+0x4e>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a15      	ldr	r2, [pc, #84]	; (80085d4 <HAL_TIM_Base_Start_IT+0xa0>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d115      	bne.n	80085ae <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	689a      	ldr	r2, [r3, #8]
 8008588:	4b13      	ldr	r3, [pc, #76]	; (80085d8 <HAL_TIM_Base_Start_IT+0xa4>)
 800858a:	4013      	ands	r3, r2
 800858c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2b06      	cmp	r3, #6
 8008592:	d015      	beq.n	80085c0 <HAL_TIM_Base_Start_IT+0x8c>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800859a:	d011      	beq.n	80085c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f042 0201 	orr.w	r2, r2, #1
 80085aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085ac:	e008      	b.n	80085c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f042 0201 	orr.w	r2, r2, #1
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	e000      	b.n	80085c2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	40012c00 	.word	0x40012c00
 80085d4:	40014000 	.word	0x40014000
 80085d8:	00010007 	.word	0x00010007

080085dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d101      	bne.n	80085ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	e049      	b.n	8008682 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d106      	bne.n	8008608 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7fb ff7c 	bl	8004500 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2202      	movs	r2, #2
 800860c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	3304      	adds	r3, #4
 8008618:	4619      	mov	r1, r3
 800861a:	4610      	mov	r0, r2
 800861c:	f000 fbfe 	bl	8008e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
	...

0800868c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d109      	bne.n	80086b0 <HAL_TIM_PWM_Start+0x24>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	bf14      	ite	ne
 80086a8:	2301      	movne	r3, #1
 80086aa:	2300      	moveq	r3, #0
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	e03c      	b.n	800872a <HAL_TIM_PWM_Start+0x9e>
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	2b04      	cmp	r3, #4
 80086b4:	d109      	bne.n	80086ca <HAL_TIM_PWM_Start+0x3e>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	2b01      	cmp	r3, #1
 80086c0:	bf14      	ite	ne
 80086c2:	2301      	movne	r3, #1
 80086c4:	2300      	moveq	r3, #0
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	e02f      	b.n	800872a <HAL_TIM_PWM_Start+0x9e>
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	2b08      	cmp	r3, #8
 80086ce:	d109      	bne.n	80086e4 <HAL_TIM_PWM_Start+0x58>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	2b01      	cmp	r3, #1
 80086da:	bf14      	ite	ne
 80086dc:	2301      	movne	r3, #1
 80086de:	2300      	moveq	r3, #0
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	e022      	b.n	800872a <HAL_TIM_PWM_Start+0x9e>
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	2b0c      	cmp	r3, #12
 80086e8:	d109      	bne.n	80086fe <HAL_TIM_PWM_Start+0x72>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	bf14      	ite	ne
 80086f6:	2301      	movne	r3, #1
 80086f8:	2300      	moveq	r3, #0
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	e015      	b.n	800872a <HAL_TIM_PWM_Start+0x9e>
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	2b10      	cmp	r3, #16
 8008702:	d109      	bne.n	8008718 <HAL_TIM_PWM_Start+0x8c>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800870a:	b2db      	uxtb	r3, r3
 800870c:	2b01      	cmp	r3, #1
 800870e:	bf14      	ite	ne
 8008710:	2301      	movne	r3, #1
 8008712:	2300      	moveq	r3, #0
 8008714:	b2db      	uxtb	r3, r3
 8008716:	e008      	b.n	800872a <HAL_TIM_PWM_Start+0x9e>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b01      	cmp	r3, #1
 8008722:	bf14      	ite	ne
 8008724:	2301      	movne	r3, #1
 8008726:	2300      	moveq	r3, #0
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b00      	cmp	r3, #0
 800872c:	d001      	beq.n	8008732 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e07e      	b.n	8008830 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d104      	bne.n	8008742 <HAL_TIM_PWM_Start+0xb6>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2202      	movs	r2, #2
 800873c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008740:	e023      	b.n	800878a <HAL_TIM_PWM_Start+0xfe>
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	2b04      	cmp	r3, #4
 8008746:	d104      	bne.n	8008752 <HAL_TIM_PWM_Start+0xc6>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2202      	movs	r2, #2
 800874c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008750:	e01b      	b.n	800878a <HAL_TIM_PWM_Start+0xfe>
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b08      	cmp	r3, #8
 8008756:	d104      	bne.n	8008762 <HAL_TIM_PWM_Start+0xd6>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2202      	movs	r2, #2
 800875c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008760:	e013      	b.n	800878a <HAL_TIM_PWM_Start+0xfe>
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	2b0c      	cmp	r3, #12
 8008766:	d104      	bne.n	8008772 <HAL_TIM_PWM_Start+0xe6>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2202      	movs	r2, #2
 800876c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008770:	e00b      	b.n	800878a <HAL_TIM_PWM_Start+0xfe>
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	2b10      	cmp	r3, #16
 8008776:	d104      	bne.n	8008782 <HAL_TIM_PWM_Start+0xf6>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2202      	movs	r2, #2
 800877c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008780:	e003      	b.n	800878a <HAL_TIM_PWM_Start+0xfe>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2202      	movs	r2, #2
 8008786:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2201      	movs	r2, #1
 8008790:	6839      	ldr	r1, [r7, #0]
 8008792:	4618      	mov	r0, r3
 8008794:	f000 fe24 	bl	80093e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a26      	ldr	r2, [pc, #152]	; (8008838 <HAL_TIM_PWM_Start+0x1ac>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d009      	beq.n	80087b6 <HAL_TIM_PWM_Start+0x12a>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a25      	ldr	r2, [pc, #148]	; (800883c <HAL_TIM_PWM_Start+0x1b0>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d004      	beq.n	80087b6 <HAL_TIM_PWM_Start+0x12a>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a23      	ldr	r2, [pc, #140]	; (8008840 <HAL_TIM_PWM_Start+0x1b4>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d101      	bne.n	80087ba <HAL_TIM_PWM_Start+0x12e>
 80087b6:	2301      	movs	r3, #1
 80087b8:	e000      	b.n	80087bc <HAL_TIM_PWM_Start+0x130>
 80087ba:	2300      	movs	r3, #0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d007      	beq.n	80087d0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a18      	ldr	r2, [pc, #96]	; (8008838 <HAL_TIM_PWM_Start+0x1ac>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d009      	beq.n	80087ee <HAL_TIM_PWM_Start+0x162>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e2:	d004      	beq.n	80087ee <HAL_TIM_PWM_Start+0x162>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a14      	ldr	r2, [pc, #80]	; (800883c <HAL_TIM_PWM_Start+0x1b0>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d115      	bne.n	800881a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	689a      	ldr	r2, [r3, #8]
 80087f4:	4b13      	ldr	r3, [pc, #76]	; (8008844 <HAL_TIM_PWM_Start+0x1b8>)
 80087f6:	4013      	ands	r3, r2
 80087f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2b06      	cmp	r3, #6
 80087fe:	d015      	beq.n	800882c <HAL_TIM_PWM_Start+0x1a0>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008806:	d011      	beq.n	800882c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f042 0201 	orr.w	r2, r2, #1
 8008816:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008818:	e008      	b.n	800882c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f042 0201 	orr.w	r2, r2, #1
 8008828:	601a      	str	r2, [r3, #0]
 800882a:	e000      	b.n	800882e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800882c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	40012c00 	.word	0x40012c00
 800883c:	40014000 	.word	0x40014000
 8008840:	40014400 	.word	0x40014400
 8008844:	00010007 	.word	0x00010007

08008848 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2200      	movs	r2, #0
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	4618      	mov	r0, r3
 800885c:	f000 fdc0 	bl	80093e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a39      	ldr	r2, [pc, #228]	; (800894c <HAL_TIM_PWM_Stop+0x104>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d009      	beq.n	800887e <HAL_TIM_PWM_Stop+0x36>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a38      	ldr	r2, [pc, #224]	; (8008950 <HAL_TIM_PWM_Stop+0x108>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d004      	beq.n	800887e <HAL_TIM_PWM_Stop+0x36>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a36      	ldr	r2, [pc, #216]	; (8008954 <HAL_TIM_PWM_Stop+0x10c>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d101      	bne.n	8008882 <HAL_TIM_PWM_Stop+0x3a>
 800887e:	2301      	movs	r3, #1
 8008880:	e000      	b.n	8008884 <HAL_TIM_PWM_Stop+0x3c>
 8008882:	2300      	movs	r3, #0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d017      	beq.n	80088b8 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6a1a      	ldr	r2, [r3, #32]
 800888e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008892:	4013      	ands	r3, r2
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10f      	bne.n	80088b8 <HAL_TIM_PWM_Stop+0x70>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	6a1a      	ldr	r2, [r3, #32]
 800889e:	f240 4344 	movw	r3, #1092	; 0x444
 80088a2:	4013      	ands	r3, r2
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d107      	bne.n	80088b8 <HAL_TIM_PWM_Stop+0x70>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6a1a      	ldr	r2, [r3, #32]
 80088be:	f241 1311 	movw	r3, #4369	; 0x1111
 80088c2:	4013      	ands	r3, r2
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10f      	bne.n	80088e8 <HAL_TIM_PWM_Stop+0xa0>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6a1a      	ldr	r2, [r3, #32]
 80088ce:	f240 4344 	movw	r3, #1092	; 0x444
 80088d2:	4013      	ands	r3, r2
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d107      	bne.n	80088e8 <HAL_TIM_PWM_Stop+0xa0>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 0201 	bic.w	r2, r2, #1
 80088e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d104      	bne.n	80088f8 <HAL_TIM_PWM_Stop+0xb0>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088f6:	e023      	b.n	8008940 <HAL_TIM_PWM_Stop+0xf8>
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	2b04      	cmp	r3, #4
 80088fc:	d104      	bne.n	8008908 <HAL_TIM_PWM_Stop+0xc0>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008906:	e01b      	b.n	8008940 <HAL_TIM_PWM_Stop+0xf8>
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	2b08      	cmp	r3, #8
 800890c:	d104      	bne.n	8008918 <HAL_TIM_PWM_Stop+0xd0>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008916:	e013      	b.n	8008940 <HAL_TIM_PWM_Stop+0xf8>
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	2b0c      	cmp	r3, #12
 800891c:	d104      	bne.n	8008928 <HAL_TIM_PWM_Stop+0xe0>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008926:	e00b      	b.n	8008940 <HAL_TIM_PWM_Stop+0xf8>
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2b10      	cmp	r3, #16
 800892c:	d104      	bne.n	8008938 <HAL_TIM_PWM_Stop+0xf0>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2201      	movs	r2, #1
 8008932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008936:	e003      	b.n	8008940 <HAL_TIM_PWM_Stop+0xf8>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3708      	adds	r7, #8
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	40012c00 	.word	0x40012c00
 8008950:	40014000 	.word	0x40014000
 8008954:	40014400 	.word	0x40014400

08008958 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	f003 0302 	and.w	r3, r3, #2
 800896a:	2b02      	cmp	r3, #2
 800896c:	d122      	bne.n	80089b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	f003 0302 	and.w	r3, r3, #2
 8008978:	2b02      	cmp	r3, #2
 800897a:	d11b      	bne.n	80089b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f06f 0202 	mvn.w	r2, #2
 8008984:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2201      	movs	r2, #1
 800898a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	f003 0303 	and.w	r3, r3, #3
 8008996:	2b00      	cmp	r3, #0
 8008998:	d003      	beq.n	80089a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fa20 	bl	8008de0 <HAL_TIM_IC_CaptureCallback>
 80089a0:	e005      	b.n	80089ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fa12 	bl	8008dcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fa23 	bl	8008df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	f003 0304 	and.w	r3, r3, #4
 80089be:	2b04      	cmp	r3, #4
 80089c0:	d122      	bne.n	8008a08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	f003 0304 	and.w	r3, r3, #4
 80089cc:	2b04      	cmp	r3, #4
 80089ce:	d11b      	bne.n	8008a08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f06f 0204 	mvn.w	r2, #4
 80089d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2202      	movs	r2, #2
 80089de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d003      	beq.n	80089f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f9f6 	bl	8008de0 <HAL_TIM_IC_CaptureCallback>
 80089f4:	e005      	b.n	8008a02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f9e8 	bl	8008dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 f9f9 	bl	8008df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	f003 0308 	and.w	r3, r3, #8
 8008a12:	2b08      	cmp	r3, #8
 8008a14:	d122      	bne.n	8008a5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	f003 0308 	and.w	r3, r3, #8
 8008a20:	2b08      	cmp	r3, #8
 8008a22:	d11b      	bne.n	8008a5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f06f 0208 	mvn.w	r2, #8
 8008a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2204      	movs	r2, #4
 8008a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	69db      	ldr	r3, [r3, #28]
 8008a3a:	f003 0303 	and.w	r3, r3, #3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d003      	beq.n	8008a4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f9cc 	bl	8008de0 <HAL_TIM_IC_CaptureCallback>
 8008a48:	e005      	b.n	8008a56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f9be 	bl	8008dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 f9cf 	bl	8008df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	f003 0310 	and.w	r3, r3, #16
 8008a66:	2b10      	cmp	r3, #16
 8008a68:	d122      	bne.n	8008ab0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	f003 0310 	and.w	r3, r3, #16
 8008a74:	2b10      	cmp	r3, #16
 8008a76:	d11b      	bne.n	8008ab0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f06f 0210 	mvn.w	r2, #16
 8008a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2208      	movs	r2, #8
 8008a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	69db      	ldr	r3, [r3, #28]
 8008a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d003      	beq.n	8008a9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f9a2 	bl	8008de0 <HAL_TIM_IC_CaptureCallback>
 8008a9c:	e005      	b.n	8008aaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f994 	bl	8008dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f9a5 	bl	8008df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	f003 0301 	and.w	r3, r3, #1
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d10e      	bne.n	8008adc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	f003 0301 	and.w	r3, r3, #1
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d107      	bne.n	8008adc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f06f 0201 	mvn.w	r2, #1
 8008ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f96e 	bl	8008db8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ae6:	2b80      	cmp	r3, #128	; 0x80
 8008ae8:	d10e      	bne.n	8008b08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008af4:	2b80      	cmp	r3, #128	; 0x80
 8008af6:	d107      	bne.n	8008b08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fd7a 	bl	80095fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b16:	d10e      	bne.n	8008b36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b22:	2b80      	cmp	r3, #128	; 0x80
 8008b24:	d107      	bne.n	8008b36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fd6d 	bl	8009610 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b40:	2b40      	cmp	r3, #64	; 0x40
 8008b42:	d10e      	bne.n	8008b62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b4e:	2b40      	cmp	r3, #64	; 0x40
 8008b50:	d107      	bne.n	8008b62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 f953 	bl	8008e08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	f003 0320 	and.w	r3, r3, #32
 8008b6c:	2b20      	cmp	r3, #32
 8008b6e:	d10e      	bne.n	8008b8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	f003 0320 	and.w	r3, r3, #32
 8008b7a:	2b20      	cmp	r3, #32
 8008b7c:	d107      	bne.n	8008b8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f06f 0220 	mvn.w	r2, #32
 8008b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fd2d 	bl	80095e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b8e:	bf00      	nop
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
	...

08008b98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d101      	bne.n	8008bb2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008bae:	2302      	movs	r3, #2
 8008bb0:	e0fd      	b.n	8008dae <HAL_TIM_PWM_ConfigChannel+0x216>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2b14      	cmp	r3, #20
 8008bbe:	f200 80f0 	bhi.w	8008da2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008bc2:	a201      	add	r2, pc, #4	; (adr r2, 8008bc8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc8:	08008c1d 	.word	0x08008c1d
 8008bcc:	08008da3 	.word	0x08008da3
 8008bd0:	08008da3 	.word	0x08008da3
 8008bd4:	08008da3 	.word	0x08008da3
 8008bd8:	08008c5d 	.word	0x08008c5d
 8008bdc:	08008da3 	.word	0x08008da3
 8008be0:	08008da3 	.word	0x08008da3
 8008be4:	08008da3 	.word	0x08008da3
 8008be8:	08008c9f 	.word	0x08008c9f
 8008bec:	08008da3 	.word	0x08008da3
 8008bf0:	08008da3 	.word	0x08008da3
 8008bf4:	08008da3 	.word	0x08008da3
 8008bf8:	08008cdf 	.word	0x08008cdf
 8008bfc:	08008da3 	.word	0x08008da3
 8008c00:	08008da3 	.word	0x08008da3
 8008c04:	08008da3 	.word	0x08008da3
 8008c08:	08008d21 	.word	0x08008d21
 8008c0c:	08008da3 	.word	0x08008da3
 8008c10:	08008da3 	.word	0x08008da3
 8008c14:	08008da3 	.word	0x08008da3
 8008c18:	08008d61 	.word	0x08008d61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	68b9      	ldr	r1, [r7, #8]
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 f95e 	bl	8008ee4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	699a      	ldr	r2, [r3, #24]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f042 0208 	orr.w	r2, r2, #8
 8008c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	699a      	ldr	r2, [r3, #24]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f022 0204 	bic.w	r2, r2, #4
 8008c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	6999      	ldr	r1, [r3, #24]
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	691a      	ldr	r2, [r3, #16]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	430a      	orrs	r2, r1
 8008c58:	619a      	str	r2, [r3, #24]
      break;
 8008c5a:	e0a3      	b.n	8008da4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68b9      	ldr	r1, [r7, #8]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 f9ba 	bl	8008fdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	699a      	ldr	r2, [r3, #24]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	699a      	ldr	r2, [r3, #24]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6999      	ldr	r1, [r3, #24]
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	021a      	lsls	r2, r3, #8
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	430a      	orrs	r2, r1
 8008c9a:	619a      	str	r2, [r3, #24]
      break;
 8008c9c:	e082      	b.n	8008da4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68b9      	ldr	r1, [r7, #8]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f000 fa13 	bl	80090d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	69da      	ldr	r2, [r3, #28]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f042 0208 	orr.w	r2, r2, #8
 8008cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	69da      	ldr	r2, [r3, #28]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f022 0204 	bic.w	r2, r2, #4
 8008cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	69d9      	ldr	r1, [r3, #28]
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	691a      	ldr	r2, [r3, #16]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	430a      	orrs	r2, r1
 8008cda:	61da      	str	r2, [r3, #28]
      break;
 8008cdc:	e062      	b.n	8008da4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	68b9      	ldr	r1, [r7, #8]
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f000 fa6b 	bl	80091c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	69da      	ldr	r2, [r3, #28]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	69da      	ldr	r2, [r3, #28]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	69d9      	ldr	r1, [r3, #28]
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	021a      	lsls	r2, r3, #8
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	430a      	orrs	r2, r1
 8008d1c:	61da      	str	r2, [r3, #28]
      break;
 8008d1e:	e041      	b.n	8008da4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68b9      	ldr	r1, [r7, #8]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f000 faa8 	bl	800927c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f042 0208 	orr.w	r2, r2, #8
 8008d3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f022 0204 	bic.w	r2, r2, #4
 8008d4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	691a      	ldr	r2, [r3, #16]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	430a      	orrs	r2, r1
 8008d5c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008d5e:	e021      	b.n	8008da4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68b9      	ldr	r1, [r7, #8]
 8008d66:	4618      	mov	r0, r3
 8008d68:	f000 fae0 	bl	800932c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	691b      	ldr	r3, [r3, #16]
 8008d96:	021a      	lsls	r2, r3, #8
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	430a      	orrs	r2, r1
 8008d9e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008da0:	e000      	b.n	8008da4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008da2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop

08008db8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008dd4:	bf00      	nop
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008de8:	bf00      	nop
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008dfc:	bf00      	nop
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e10:	bf00      	nop
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a2a      	ldr	r2, [pc, #168]	; (8008ed8 <TIM_Base_SetConfig+0xbc>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d003      	beq.n	8008e3c <TIM_Base_SetConfig+0x20>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e3a:	d108      	bne.n	8008e4e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a21      	ldr	r2, [pc, #132]	; (8008ed8 <TIM_Base_SetConfig+0xbc>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d00b      	beq.n	8008e6e <TIM_Base_SetConfig+0x52>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e5c:	d007      	beq.n	8008e6e <TIM_Base_SetConfig+0x52>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a1e      	ldr	r2, [pc, #120]	; (8008edc <TIM_Base_SetConfig+0xc0>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d003      	beq.n	8008e6e <TIM_Base_SetConfig+0x52>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a1d      	ldr	r2, [pc, #116]	; (8008ee0 <TIM_Base_SetConfig+0xc4>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d108      	bne.n	8008e80 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	695b      	ldr	r3, [r3, #20]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	689a      	ldr	r2, [r3, #8]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a0c      	ldr	r2, [pc, #48]	; (8008ed8 <TIM_Base_SetConfig+0xbc>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d007      	beq.n	8008ebc <TIM_Base_SetConfig+0xa0>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a0b      	ldr	r2, [pc, #44]	; (8008edc <TIM_Base_SetConfig+0xc0>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d003      	beq.n	8008ebc <TIM_Base_SetConfig+0xa0>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a0a      	ldr	r2, [pc, #40]	; (8008ee0 <TIM_Base_SetConfig+0xc4>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d103      	bne.n	8008ec4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	691a      	ldr	r2, [r3, #16]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	615a      	str	r2, [r3, #20]
}
 8008eca:	bf00      	nop
 8008ecc:	3714      	adds	r7, #20
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	40012c00 	.word	0x40012c00
 8008edc:	40014000 	.word	0x40014000
 8008ee0:	40014400 	.word	0x40014400

08008ee4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b087      	sub	sp, #28
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	f023 0201 	bic.w	r2, r3, #1
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a1b      	ldr	r3, [r3, #32]
 8008efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f023 0303 	bic.w	r3, r3, #3
 8008f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	f023 0302 	bic.w	r3, r3, #2
 8008f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a24      	ldr	r2, [pc, #144]	; (8008fd0 <TIM_OC1_SetConfig+0xec>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d007      	beq.n	8008f54 <TIM_OC1_SetConfig+0x70>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a23      	ldr	r2, [pc, #140]	; (8008fd4 <TIM_OC1_SetConfig+0xf0>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d003      	beq.n	8008f54 <TIM_OC1_SetConfig+0x70>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a22      	ldr	r2, [pc, #136]	; (8008fd8 <TIM_OC1_SetConfig+0xf4>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d10c      	bne.n	8008f6e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	f023 0308 	bic.w	r3, r3, #8
 8008f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	697a      	ldr	r2, [r7, #20]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	f023 0304 	bic.w	r3, r3, #4
 8008f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a17      	ldr	r2, [pc, #92]	; (8008fd0 <TIM_OC1_SetConfig+0xec>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d007      	beq.n	8008f86 <TIM_OC1_SetConfig+0xa2>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a16      	ldr	r2, [pc, #88]	; (8008fd4 <TIM_OC1_SetConfig+0xf0>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d003      	beq.n	8008f86 <TIM_OC1_SetConfig+0xa2>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4a15      	ldr	r2, [pc, #84]	; (8008fd8 <TIM_OC1_SetConfig+0xf4>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d111      	bne.n	8008faa <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	693a      	ldr	r2, [r7, #16]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	693a      	ldr	r2, [r7, #16]
 8008fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	685a      	ldr	r2, [r3, #4]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	697a      	ldr	r2, [r7, #20]
 8008fc2:	621a      	str	r2, [r3, #32]
}
 8008fc4:	bf00      	nop
 8008fc6:	371c      	adds	r7, #28
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr
 8008fd0:	40012c00 	.word	0x40012c00
 8008fd4:	40014000 	.word	0x40014000
 8008fd8:	40014400 	.word	0x40014400

08008fdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b087      	sub	sp, #28
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	f023 0210 	bic.w	r2, r3, #16
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800900a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800900e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	021b      	lsls	r3, r3, #8
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	4313      	orrs	r3, r2
 8009022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	f023 0320 	bic.w	r3, r3, #32
 800902a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	011b      	lsls	r3, r3, #4
 8009032:	697a      	ldr	r2, [r7, #20]
 8009034:	4313      	orrs	r3, r2
 8009036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a22      	ldr	r2, [pc, #136]	; (80090c4 <TIM_OC2_SetConfig+0xe8>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d10d      	bne.n	800905c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	011b      	lsls	r3, r3, #4
 800904e:	697a      	ldr	r2, [r7, #20]
 8009050:	4313      	orrs	r3, r2
 8009052:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800905a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a19      	ldr	r2, [pc, #100]	; (80090c4 <TIM_OC2_SetConfig+0xe8>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d007      	beq.n	8009074 <TIM_OC2_SetConfig+0x98>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a18      	ldr	r2, [pc, #96]	; (80090c8 <TIM_OC2_SetConfig+0xec>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d003      	beq.n	8009074 <TIM_OC2_SetConfig+0x98>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a17      	ldr	r2, [pc, #92]	; (80090cc <TIM_OC2_SetConfig+0xf0>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d113      	bne.n	800909c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800907a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009082:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	695b      	ldr	r3, [r3, #20]
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	693a      	ldr	r2, [r7, #16]
 800908c:	4313      	orrs	r3, r2
 800908e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	693a      	ldr	r2, [r7, #16]
 8009098:	4313      	orrs	r3, r2
 800909a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	693a      	ldr	r2, [r7, #16]
 80090a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	685a      	ldr	r2, [r3, #4]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	697a      	ldr	r2, [r7, #20]
 80090b4:	621a      	str	r2, [r3, #32]
}
 80090b6:	bf00      	nop
 80090b8:	371c      	adds	r7, #28
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	40012c00 	.word	0x40012c00
 80090c8:	40014000 	.word	0x40014000
 80090cc:	40014400 	.word	0x40014400

080090d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b087      	sub	sp, #28
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a1b      	ldr	r3, [r3, #32]
 80090ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	69db      	ldr	r3, [r3, #28]
 80090f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f023 0303 	bic.w	r3, r3, #3
 800910a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	4313      	orrs	r3, r2
 8009114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800911c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	021b      	lsls	r3, r3, #8
 8009124:	697a      	ldr	r2, [r7, #20]
 8009126:	4313      	orrs	r3, r2
 8009128:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a21      	ldr	r2, [pc, #132]	; (80091b4 <TIM_OC3_SetConfig+0xe4>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d10d      	bne.n	800914e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009138:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	021b      	lsls	r3, r3, #8
 8009140:	697a      	ldr	r2, [r7, #20]
 8009142:	4313      	orrs	r3, r2
 8009144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800914c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a18      	ldr	r2, [pc, #96]	; (80091b4 <TIM_OC3_SetConfig+0xe4>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d007      	beq.n	8009166 <TIM_OC3_SetConfig+0x96>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a17      	ldr	r2, [pc, #92]	; (80091b8 <TIM_OC3_SetConfig+0xe8>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d003      	beq.n	8009166 <TIM_OC3_SetConfig+0x96>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a16      	ldr	r2, [pc, #88]	; (80091bc <TIM_OC3_SetConfig+0xec>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d113      	bne.n	800918e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800916c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	695b      	ldr	r3, [r3, #20]
 800917a:	011b      	lsls	r3, r3, #4
 800917c:	693a      	ldr	r2, [r7, #16]
 800917e:	4313      	orrs	r3, r2
 8009180:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	011b      	lsls	r3, r3, #4
 8009188:	693a      	ldr	r2, [r7, #16]
 800918a:	4313      	orrs	r3, r2
 800918c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	685a      	ldr	r2, [r3, #4]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	697a      	ldr	r2, [r7, #20]
 80091a6:	621a      	str	r2, [r3, #32]
}
 80091a8:	bf00      	nop
 80091aa:	371c      	adds	r7, #28
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr
 80091b4:	40012c00 	.word	0x40012c00
 80091b8:	40014000 	.word	0x40014000
 80091bc:	40014400 	.word	0x40014400

080091c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b087      	sub	sp, #28
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a1b      	ldr	r3, [r3, #32]
 80091ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	69db      	ldr	r3, [r3, #28]
 80091e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	021b      	lsls	r3, r3, #8
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	4313      	orrs	r3, r2
 8009206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800920e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	031b      	lsls	r3, r3, #12
 8009216:	693a      	ldr	r2, [r7, #16]
 8009218:	4313      	orrs	r3, r2
 800921a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4a14      	ldr	r2, [pc, #80]	; (8009270 <TIM_OC4_SetConfig+0xb0>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d007      	beq.n	8009234 <TIM_OC4_SetConfig+0x74>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a13      	ldr	r2, [pc, #76]	; (8009274 <TIM_OC4_SetConfig+0xb4>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d003      	beq.n	8009234 <TIM_OC4_SetConfig+0x74>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a12      	ldr	r2, [pc, #72]	; (8009278 <TIM_OC4_SetConfig+0xb8>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d109      	bne.n	8009248 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800923a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	695b      	ldr	r3, [r3, #20]
 8009240:	019b      	lsls	r3, r3, #6
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	4313      	orrs	r3, r2
 8009246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	697a      	ldr	r2, [r7, #20]
 800924c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	685a      	ldr	r2, [r3, #4]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	693a      	ldr	r2, [r7, #16]
 8009260:	621a      	str	r2, [r3, #32]
}
 8009262:	bf00      	nop
 8009264:	371c      	adds	r7, #28
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	40012c00 	.word	0x40012c00
 8009274:	40014000 	.word	0x40014000
 8009278:	40014400 	.word	0x40014400

0800927c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800927c:	b480      	push	{r7}
 800927e:	b087      	sub	sp, #28
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a1b      	ldr	r3, [r3, #32]
 800928a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a1b      	ldr	r3, [r3, #32]
 8009296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	4313      	orrs	r3, r2
 80092b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80092c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	041b      	lsls	r3, r3, #16
 80092c8:	693a      	ldr	r2, [r7, #16]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4a13      	ldr	r2, [pc, #76]	; (8009320 <TIM_OC5_SetConfig+0xa4>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d007      	beq.n	80092e6 <TIM_OC5_SetConfig+0x6a>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4a12      	ldr	r2, [pc, #72]	; (8009324 <TIM_OC5_SetConfig+0xa8>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d003      	beq.n	80092e6 <TIM_OC5_SetConfig+0x6a>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a11      	ldr	r2, [pc, #68]	; (8009328 <TIM_OC5_SetConfig+0xac>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d109      	bne.n	80092fa <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	695b      	ldr	r3, [r3, #20]
 80092f2:	021b      	lsls	r3, r3, #8
 80092f4:	697a      	ldr	r2, [r7, #20]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	697a      	ldr	r2, [r7, #20]
 80092fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	68fa      	ldr	r2, [r7, #12]
 8009304:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	685a      	ldr	r2, [r3, #4]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	693a      	ldr	r2, [r7, #16]
 8009312:	621a      	str	r2, [r3, #32]
}
 8009314:	bf00      	nop
 8009316:	371c      	adds	r7, #28
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr
 8009320:	40012c00 	.word	0x40012c00
 8009324:	40014000 	.word	0x40014000
 8009328:	40014400 	.word	0x40014400

0800932c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800932c:	b480      	push	{r7}
 800932e:	b087      	sub	sp, #28
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a1b      	ldr	r3, [r3, #32]
 800933a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800935a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800935e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	021b      	lsls	r3, r3, #8
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	4313      	orrs	r3, r2
 800936a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009372:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	051b      	lsls	r3, r3, #20
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	4313      	orrs	r3, r2
 800937e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a14      	ldr	r2, [pc, #80]	; (80093d4 <TIM_OC6_SetConfig+0xa8>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d007      	beq.n	8009398 <TIM_OC6_SetConfig+0x6c>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a13      	ldr	r2, [pc, #76]	; (80093d8 <TIM_OC6_SetConfig+0xac>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d003      	beq.n	8009398 <TIM_OC6_SetConfig+0x6c>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a12      	ldr	r2, [pc, #72]	; (80093dc <TIM_OC6_SetConfig+0xb0>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d109      	bne.n	80093ac <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800939e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	695b      	ldr	r3, [r3, #20]
 80093a4:	029b      	lsls	r3, r3, #10
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	697a      	ldr	r2, [r7, #20]
 80093b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	685a      	ldr	r2, [r3, #4]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	693a      	ldr	r2, [r7, #16]
 80093c4:	621a      	str	r2, [r3, #32]
}
 80093c6:	bf00      	nop
 80093c8:	371c      	adds	r7, #28
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	40012c00 	.word	0x40012c00
 80093d8:	40014000 	.word	0x40014000
 80093dc:	40014400 	.word	0x40014400

080093e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b087      	sub	sp, #28
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	f003 031f 	and.w	r3, r3, #31
 80093f2:	2201      	movs	r2, #1
 80093f4:	fa02 f303 	lsl.w	r3, r2, r3
 80093f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6a1a      	ldr	r2, [r3, #32]
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	43db      	mvns	r3, r3
 8009402:	401a      	ands	r2, r3
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6a1a      	ldr	r2, [r3, #32]
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	f003 031f 	and.w	r3, r3, #31
 8009412:	6879      	ldr	r1, [r7, #4]
 8009414:	fa01 f303 	lsl.w	r3, r1, r3
 8009418:	431a      	orrs	r2, r3
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	621a      	str	r2, [r3, #32]
}
 800941e:	bf00      	nop
 8009420:	371c      	adds	r7, #28
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
	...

0800942c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800943c:	2b01      	cmp	r3, #1
 800943e:	d101      	bne.n	8009444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009440:	2302      	movs	r3, #2
 8009442:	e04f      	b.n	80094e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2202      	movs	r2, #2
 8009450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a21      	ldr	r2, [pc, #132]	; (80094f0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d108      	bne.n	8009480 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009474:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	4313      	orrs	r3, r2
 800947e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009486:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	4313      	orrs	r3, r2
 8009490:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a14      	ldr	r2, [pc, #80]	; (80094f0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d009      	beq.n	80094b8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ac:	d004      	beq.n	80094b8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a10      	ldr	r2, [pc, #64]	; (80094f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d10c      	bne.n	80094d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	68ba      	ldr	r2, [r7, #8]
 80094c6:	4313      	orrs	r3, r2
 80094c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	68ba      	ldr	r2, [r7, #8]
 80094d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3714      	adds	r7, #20
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr
 80094f0:	40012c00 	.word	0x40012c00
 80094f4:	40014000 	.word	0x40014000

080094f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009502:	2300      	movs	r3, #0
 8009504:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800950c:	2b01      	cmp	r3, #1
 800950e:	d101      	bne.n	8009514 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009510:	2302      	movs	r3, #2
 8009512:	e060      	b.n	80095d6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	4313      	orrs	r3, r2
 8009528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	4313      	orrs	r3, r2
 8009536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	4313      	orrs	r3, r2
 8009544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4313      	orrs	r3, r2
 8009552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	4313      	orrs	r3, r2
 8009560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	695b      	ldr	r3, [r3, #20]
 800956c:	4313      	orrs	r3, r2
 800956e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800957a:	4313      	orrs	r3, r2
 800957c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	041b      	lsls	r3, r3, #16
 800958a:	4313      	orrs	r3, r2
 800958c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a14      	ldr	r2, [pc, #80]	; (80095e4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d115      	bne.n	80095c4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a2:	051b      	lsls	r3, r3, #20
 80095a4:	4313      	orrs	r3, r2
 80095a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	69db      	ldr	r3, [r3, #28]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	6a1b      	ldr	r3, [r3, #32]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	40012c00 	.word	0x40012c00

080095e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009604:	bf00      	nop
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d101      	bne.n	8009636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	e040      	b.n	80096b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800963a:	2b00      	cmp	r3, #0
 800963c:	d106      	bne.n	800964c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f7fb f884 	bl	8004754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2224      	movs	r2, #36	; 0x24
 8009650:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f022 0201 	bic.w	r2, r2, #1
 8009660:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 f8c0 	bl	80097e8 <UART_SetConfig>
 8009668:	4603      	mov	r3, r0
 800966a:	2b01      	cmp	r3, #1
 800966c:	d101      	bne.n	8009672 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	e022      	b.n	80096b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009676:	2b00      	cmp	r3, #0
 8009678:	d002      	beq.n	8009680 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 fae2 	bl	8009c44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685a      	ldr	r2, [r3, #4]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800968e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	689a      	ldr	r2, [r3, #8]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800969e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f042 0201 	orr.w	r2, r2, #1
 80096ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 fb69 	bl	8009d88 <UART_CheckIdleState>
 80096b6:	4603      	mov	r3, r0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b08a      	sub	sp, #40	; 0x28
 80096c4:	af02      	add	r7, sp, #8
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	603b      	str	r3, [r7, #0]
 80096cc:	4613      	mov	r3, r2
 80096ce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096d4:	2b20      	cmp	r3, #32
 80096d6:	f040 8082 	bne.w	80097de <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d002      	beq.n	80096e6 <HAL_UART_Transmit+0x26>
 80096e0:	88fb      	ldrh	r3, [r7, #6]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d101      	bne.n	80096ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	e07a      	b.n	80097e0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d101      	bne.n	80096f8 <HAL_UART_Transmit+0x38>
 80096f4:	2302      	movs	r3, #2
 80096f6:	e073      	b.n	80097e0 <HAL_UART_Transmit+0x120>
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2200      	movs	r2, #0
 8009704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2221      	movs	r2, #33	; 0x21
 800970c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800970e:	f7fb f91d 	bl	800494c <HAL_GetTick>
 8009712:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	88fa      	ldrh	r2, [r7, #6]
 8009718:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	88fa      	ldrh	r2, [r7, #6]
 8009720:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800972c:	d108      	bne.n	8009740 <HAL_UART_Transmit+0x80>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d104      	bne.n	8009740 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009736:	2300      	movs	r3, #0
 8009738:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	61bb      	str	r3, [r7, #24]
 800973e:	e003      	b.n	8009748 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009744:	2300      	movs	r3, #0
 8009746:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009750:	e02d      	b.n	80097ae <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2200      	movs	r2, #0
 800975a:	2180      	movs	r1, #128	; 0x80
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f000 fb5c 	bl	8009e1a <UART_WaitOnFlagUntilTimeout>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d001      	beq.n	800976c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009768:	2303      	movs	r3, #3
 800976a:	e039      	b.n	80097e0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10b      	bne.n	800978a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	881a      	ldrh	r2, [r3, #0]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800977e:	b292      	uxth	r2, r2
 8009780:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	3302      	adds	r3, #2
 8009786:	61bb      	str	r3, [r7, #24]
 8009788:	e008      	b.n	800979c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	781a      	ldrb	r2, [r3, #0]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	b292      	uxth	r2, r2
 8009794:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	3301      	adds	r3, #1
 800979a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	3b01      	subs	r3, #1
 80097a6:	b29a      	uxth	r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1cb      	bne.n	8009752 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	2200      	movs	r2, #0
 80097c2:	2140      	movs	r1, #64	; 0x40
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f000 fb28 	bl	8009e1a <UART_WaitOnFlagUntilTimeout>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d001      	beq.n	80097d4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80097d0:	2303      	movs	r3, #3
 80097d2:	e005      	b.n	80097e0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2220      	movs	r2, #32
 80097d8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80097da:	2300      	movs	r3, #0
 80097dc:	e000      	b.n	80097e0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80097de:	2302      	movs	r3, #2
  }
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3720      	adds	r7, #32
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097ec:	b08a      	sub	sp, #40	; 0x28
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80097f2:	2300      	movs	r3, #0
 80097f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	689a      	ldr	r2, [r3, #8]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	431a      	orrs	r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	431a      	orrs	r2, r3
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	69db      	ldr	r3, [r3, #28]
 800980c:	4313      	orrs	r3, r2
 800980e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	4bb4      	ldr	r3, [pc, #720]	; (8009ae8 <UART_SetConfig+0x300>)
 8009818:	4013      	ands	r3, r2
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	6812      	ldr	r2, [r2, #0]
 800981e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009820:	430b      	orrs	r3, r1
 8009822:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	68da      	ldr	r2, [r3, #12]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	430a      	orrs	r2, r1
 8009838:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4aa9      	ldr	r2, [pc, #676]	; (8009aec <UART_SetConfig+0x304>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d004      	beq.n	8009854 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6a1b      	ldr	r3, [r3, #32]
 800984e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009850:	4313      	orrs	r3, r2
 8009852:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009864:	430a      	orrs	r2, r1
 8009866:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4aa0      	ldr	r2, [pc, #640]	; (8009af0 <UART_SetConfig+0x308>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d126      	bne.n	80098c0 <UART_SetConfig+0xd8>
 8009872:	4ba0      	ldr	r3, [pc, #640]	; (8009af4 <UART_SetConfig+0x30c>)
 8009874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009878:	f003 0303 	and.w	r3, r3, #3
 800987c:	2b03      	cmp	r3, #3
 800987e:	d81b      	bhi.n	80098b8 <UART_SetConfig+0xd0>
 8009880:	a201      	add	r2, pc, #4	; (adr r2, 8009888 <UART_SetConfig+0xa0>)
 8009882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009886:	bf00      	nop
 8009888:	08009899 	.word	0x08009899
 800988c:	080098a9 	.word	0x080098a9
 8009890:	080098a1 	.word	0x080098a1
 8009894:	080098b1 	.word	0x080098b1
 8009898:	2301      	movs	r3, #1
 800989a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800989e:	e080      	b.n	80099a2 <UART_SetConfig+0x1ba>
 80098a0:	2302      	movs	r3, #2
 80098a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098a6:	e07c      	b.n	80099a2 <UART_SetConfig+0x1ba>
 80098a8:	2304      	movs	r3, #4
 80098aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098ae:	e078      	b.n	80099a2 <UART_SetConfig+0x1ba>
 80098b0:	2308      	movs	r3, #8
 80098b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098b6:	e074      	b.n	80099a2 <UART_SetConfig+0x1ba>
 80098b8:	2310      	movs	r3, #16
 80098ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098be:	e070      	b.n	80099a2 <UART_SetConfig+0x1ba>
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a8c      	ldr	r2, [pc, #560]	; (8009af8 <UART_SetConfig+0x310>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d138      	bne.n	800993c <UART_SetConfig+0x154>
 80098ca:	4b8a      	ldr	r3, [pc, #552]	; (8009af4 <UART_SetConfig+0x30c>)
 80098cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098d0:	f003 030c 	and.w	r3, r3, #12
 80098d4:	2b0c      	cmp	r3, #12
 80098d6:	d82d      	bhi.n	8009934 <UART_SetConfig+0x14c>
 80098d8:	a201      	add	r2, pc, #4	; (adr r2, 80098e0 <UART_SetConfig+0xf8>)
 80098da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098de:	bf00      	nop
 80098e0:	08009915 	.word	0x08009915
 80098e4:	08009935 	.word	0x08009935
 80098e8:	08009935 	.word	0x08009935
 80098ec:	08009935 	.word	0x08009935
 80098f0:	08009925 	.word	0x08009925
 80098f4:	08009935 	.word	0x08009935
 80098f8:	08009935 	.word	0x08009935
 80098fc:	08009935 	.word	0x08009935
 8009900:	0800991d 	.word	0x0800991d
 8009904:	08009935 	.word	0x08009935
 8009908:	08009935 	.word	0x08009935
 800990c:	08009935 	.word	0x08009935
 8009910:	0800992d 	.word	0x0800992d
 8009914:	2300      	movs	r3, #0
 8009916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800991a:	e042      	b.n	80099a2 <UART_SetConfig+0x1ba>
 800991c:	2302      	movs	r3, #2
 800991e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009922:	e03e      	b.n	80099a2 <UART_SetConfig+0x1ba>
 8009924:	2304      	movs	r3, #4
 8009926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800992a:	e03a      	b.n	80099a2 <UART_SetConfig+0x1ba>
 800992c:	2308      	movs	r3, #8
 800992e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009932:	e036      	b.n	80099a2 <UART_SetConfig+0x1ba>
 8009934:	2310      	movs	r3, #16
 8009936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800993a:	e032      	b.n	80099a2 <UART_SetConfig+0x1ba>
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a6a      	ldr	r2, [pc, #424]	; (8009aec <UART_SetConfig+0x304>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d12a      	bne.n	800999c <UART_SetConfig+0x1b4>
 8009946:	4b6b      	ldr	r3, [pc, #428]	; (8009af4 <UART_SetConfig+0x30c>)
 8009948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800994c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009950:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009954:	d01a      	beq.n	800998c <UART_SetConfig+0x1a4>
 8009956:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800995a:	d81b      	bhi.n	8009994 <UART_SetConfig+0x1ac>
 800995c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009960:	d00c      	beq.n	800997c <UART_SetConfig+0x194>
 8009962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009966:	d815      	bhi.n	8009994 <UART_SetConfig+0x1ac>
 8009968:	2b00      	cmp	r3, #0
 800996a:	d003      	beq.n	8009974 <UART_SetConfig+0x18c>
 800996c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009970:	d008      	beq.n	8009984 <UART_SetConfig+0x19c>
 8009972:	e00f      	b.n	8009994 <UART_SetConfig+0x1ac>
 8009974:	2300      	movs	r3, #0
 8009976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800997a:	e012      	b.n	80099a2 <UART_SetConfig+0x1ba>
 800997c:	2302      	movs	r3, #2
 800997e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009982:	e00e      	b.n	80099a2 <UART_SetConfig+0x1ba>
 8009984:	2304      	movs	r3, #4
 8009986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800998a:	e00a      	b.n	80099a2 <UART_SetConfig+0x1ba>
 800998c:	2308      	movs	r3, #8
 800998e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009992:	e006      	b.n	80099a2 <UART_SetConfig+0x1ba>
 8009994:	2310      	movs	r3, #16
 8009996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800999a:	e002      	b.n	80099a2 <UART_SetConfig+0x1ba>
 800999c:	2310      	movs	r3, #16
 800999e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a51      	ldr	r2, [pc, #324]	; (8009aec <UART_SetConfig+0x304>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d17a      	bne.n	8009aa2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80099ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099b0:	2b08      	cmp	r3, #8
 80099b2:	d824      	bhi.n	80099fe <UART_SetConfig+0x216>
 80099b4:	a201      	add	r2, pc, #4	; (adr r2, 80099bc <UART_SetConfig+0x1d4>)
 80099b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ba:	bf00      	nop
 80099bc:	080099e1 	.word	0x080099e1
 80099c0:	080099ff 	.word	0x080099ff
 80099c4:	080099e9 	.word	0x080099e9
 80099c8:	080099ff 	.word	0x080099ff
 80099cc:	080099ef 	.word	0x080099ef
 80099d0:	080099ff 	.word	0x080099ff
 80099d4:	080099ff 	.word	0x080099ff
 80099d8:	080099ff 	.word	0x080099ff
 80099dc:	080099f7 	.word	0x080099f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099e0:	f7fe f9dc 	bl	8007d9c <HAL_RCC_GetPCLK1Freq>
 80099e4:	61f8      	str	r0, [r7, #28]
        break;
 80099e6:	e010      	b.n	8009a0a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099e8:	4b44      	ldr	r3, [pc, #272]	; (8009afc <UART_SetConfig+0x314>)
 80099ea:	61fb      	str	r3, [r7, #28]
        break;
 80099ec:	e00d      	b.n	8009a0a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099ee:	f7fe f93d 	bl	8007c6c <HAL_RCC_GetSysClockFreq>
 80099f2:	61f8      	str	r0, [r7, #28]
        break;
 80099f4:	e009      	b.n	8009a0a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099fa:	61fb      	str	r3, [r7, #28]
        break;
 80099fc:	e005      	b.n	8009a0a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80099fe:	2300      	movs	r3, #0
 8009a00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009a08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f000 8109 	beq.w	8009c24 <UART_SetConfig+0x43c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	685a      	ldr	r2, [r3, #4]
 8009a16:	4613      	mov	r3, r2
 8009a18:	005b      	lsls	r3, r3, #1
 8009a1a:	4413      	add	r3, r2
 8009a1c:	69fa      	ldr	r2, [r7, #28]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d305      	bcc.n	8009a2e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009a28:	69fa      	ldr	r2, [r7, #28]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d903      	bls.n	8009a36 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009a34:	e0f6      	b.n	8009c24 <UART_SetConfig+0x43c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009a36:	69fb      	ldr	r3, [r7, #28]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	461c      	mov	r4, r3
 8009a3c:	4615      	mov	r5, r2
 8009a3e:	f04f 0200 	mov.w	r2, #0
 8009a42:	f04f 0300 	mov.w	r3, #0
 8009a46:	022b      	lsls	r3, r5, #8
 8009a48:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009a4c:	0222      	lsls	r2, r4, #8
 8009a4e:	68f9      	ldr	r1, [r7, #12]
 8009a50:	6849      	ldr	r1, [r1, #4]
 8009a52:	0849      	lsrs	r1, r1, #1
 8009a54:	2000      	movs	r0, #0
 8009a56:	4688      	mov	r8, r1
 8009a58:	4681      	mov	r9, r0
 8009a5a:	eb12 0a08 	adds.w	sl, r2, r8
 8009a5e:	eb43 0b09 	adc.w	fp, r3, r9
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	603b      	str	r3, [r7, #0]
 8009a6a:	607a      	str	r2, [r7, #4]
 8009a6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a70:	4650      	mov	r0, sl
 8009a72:	4659      	mov	r1, fp
 8009a74:	f7f7 f8e8 	bl	8000c48 <__aeabi_uldivmod>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a86:	d308      	bcc.n	8009a9a <UART_SetConfig+0x2b2>
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a8e:	d204      	bcs.n	8009a9a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	69ba      	ldr	r2, [r7, #24]
 8009a96:	60da      	str	r2, [r3, #12]
 8009a98:	e0c4      	b.n	8009c24 <UART_SetConfig+0x43c>
        }
        else
        {
          ret = HAL_ERROR;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009aa0:	e0c0      	b.n	8009c24 <UART_SetConfig+0x43c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	69db      	ldr	r3, [r3, #28]
 8009aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009aaa:	d16b      	bne.n	8009b84 <UART_SetConfig+0x39c>
  {
    switch (clocksource)
 8009aac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ab0:	2b08      	cmp	r3, #8
 8009ab2:	d834      	bhi.n	8009b1e <UART_SetConfig+0x336>
 8009ab4:	a201      	add	r2, pc, #4	; (adr r2, 8009abc <UART_SetConfig+0x2d4>)
 8009ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aba:	bf00      	nop
 8009abc:	08009ae1 	.word	0x08009ae1
 8009ac0:	08009b01 	.word	0x08009b01
 8009ac4:	08009b09 	.word	0x08009b09
 8009ac8:	08009b1f 	.word	0x08009b1f
 8009acc:	08009b0f 	.word	0x08009b0f
 8009ad0:	08009b1f 	.word	0x08009b1f
 8009ad4:	08009b1f 	.word	0x08009b1f
 8009ad8:	08009b1f 	.word	0x08009b1f
 8009adc:	08009b17 	.word	0x08009b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ae0:	f7fe f95c 	bl	8007d9c <HAL_RCC_GetPCLK1Freq>
 8009ae4:	61f8      	str	r0, [r7, #28]
        break;
 8009ae6:	e020      	b.n	8009b2a <UART_SetConfig+0x342>
 8009ae8:	efff69f3 	.word	0xefff69f3
 8009aec:	40008000 	.word	0x40008000
 8009af0:	40013800 	.word	0x40013800
 8009af4:	40021000 	.word	0x40021000
 8009af8:	40004400 	.word	0x40004400
 8009afc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b00:	f7fe f962 	bl	8007dc8 <HAL_RCC_GetPCLK2Freq>
 8009b04:	61f8      	str	r0, [r7, #28]
        break;
 8009b06:	e010      	b.n	8009b2a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b08:	4b4d      	ldr	r3, [pc, #308]	; (8009c40 <UART_SetConfig+0x458>)
 8009b0a:	61fb      	str	r3, [r7, #28]
        break;
 8009b0c:	e00d      	b.n	8009b2a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b0e:	f7fe f8ad 	bl	8007c6c <HAL_RCC_GetSysClockFreq>
 8009b12:	61f8      	str	r0, [r7, #28]
        break;
 8009b14:	e009      	b.n	8009b2a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b1a:	61fb      	str	r3, [r7, #28]
        break;
 8009b1c:	e005      	b.n	8009b2a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009b28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d079      	beq.n	8009c24 <UART_SetConfig+0x43c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	005a      	lsls	r2, r3, #1
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	085b      	lsrs	r3, r3, #1
 8009b3a:	441a      	add	r2, r3
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	2b0f      	cmp	r3, #15
 8009b4c:	d916      	bls.n	8009b7c <UART_SetConfig+0x394>
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b54:	d212      	bcs.n	8009b7c <UART_SetConfig+0x394>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	f023 030f 	bic.w	r3, r3, #15
 8009b5e:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	085b      	lsrs	r3, r3, #1
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	f003 0307 	and.w	r3, r3, #7
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	8afb      	ldrh	r3, [r7, #22]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	8afa      	ldrh	r2, [r7, #22]
 8009b78:	60da      	str	r2, [r3, #12]
 8009b7a:	e053      	b.n	8009c24 <UART_SetConfig+0x43c>
      }
      else
      {
        ret = HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009b82:	e04f      	b.n	8009c24 <UART_SetConfig+0x43c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b88:	2b08      	cmp	r3, #8
 8009b8a:	d828      	bhi.n	8009bde <UART_SetConfig+0x3f6>
 8009b8c:	a201      	add	r2, pc, #4	; (adr r2, 8009b94 <UART_SetConfig+0x3ac>)
 8009b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b92:	bf00      	nop
 8009b94:	08009bb9 	.word	0x08009bb9
 8009b98:	08009bc1 	.word	0x08009bc1
 8009b9c:	08009bc9 	.word	0x08009bc9
 8009ba0:	08009bdf 	.word	0x08009bdf
 8009ba4:	08009bcf 	.word	0x08009bcf
 8009ba8:	08009bdf 	.word	0x08009bdf
 8009bac:	08009bdf 	.word	0x08009bdf
 8009bb0:	08009bdf 	.word	0x08009bdf
 8009bb4:	08009bd7 	.word	0x08009bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bb8:	f7fe f8f0 	bl	8007d9c <HAL_RCC_GetPCLK1Freq>
 8009bbc:	61f8      	str	r0, [r7, #28]
        break;
 8009bbe:	e014      	b.n	8009bea <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bc0:	f7fe f902 	bl	8007dc8 <HAL_RCC_GetPCLK2Freq>
 8009bc4:	61f8      	str	r0, [r7, #28]
        break;
 8009bc6:	e010      	b.n	8009bea <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bc8:	4b1d      	ldr	r3, [pc, #116]	; (8009c40 <UART_SetConfig+0x458>)
 8009bca:	61fb      	str	r3, [r7, #28]
        break;
 8009bcc:	e00d      	b.n	8009bea <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bce:	f7fe f84d 	bl	8007c6c <HAL_RCC_GetSysClockFreq>
 8009bd2:	61f8      	str	r0, [r7, #28]
        break;
 8009bd4:	e009      	b.n	8009bea <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bda:	61fb      	str	r3, [r7, #28]
        break;
 8009bdc:	e005      	b.n	8009bea <UART_SetConfig+0x402>
      default:
        pclk = 0U;
 8009bde:	2300      	movs	r3, #0
 8009be0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009be8:	bf00      	nop
    }

    if (pclk != 0U)
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d019      	beq.n	8009c24 <UART_SetConfig+0x43c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	085a      	lsrs	r2, r3, #1
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	441a      	add	r2, r3
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	2b0f      	cmp	r3, #15
 8009c0a:	d908      	bls.n	8009c1e <UART_SetConfig+0x436>
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c12:	d204      	bcs.n	8009c1e <UART_SetConfig+0x436>
      {
        huart->Instance->BRR = usartdiv;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	69ba      	ldr	r2, [r7, #24]
 8009c1a:	60da      	str	r2, [r3, #12]
 8009c1c:	e002      	b.n	8009c24 <UART_SetConfig+0x43c>
      }
      else
      {
        ret = HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2200      	movs	r2, #0
 8009c28:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009c30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3728      	adds	r7, #40	; 0x28
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c3e:	bf00      	nop
 8009c40:	00f42400 	.word	0x00f42400

08009c44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c50:	f003 0301 	and.w	r3, r3, #1
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00a      	beq.n	8009c6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	430a      	orrs	r2, r1
 8009c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c72:	f003 0302 	and.w	r3, r3, #2
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00a      	beq.n	8009c90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	430a      	orrs	r2, r1
 8009c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c94:	f003 0304 	and.w	r3, r3, #4
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00a      	beq.n	8009cb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	430a      	orrs	r2, r1
 8009cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb6:	f003 0308 	and.w	r3, r3, #8
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00a      	beq.n	8009cd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	430a      	orrs	r2, r1
 8009cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd8:	f003 0310 	and.w	r3, r3, #16
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00a      	beq.n	8009cf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	430a      	orrs	r2, r1
 8009cf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfa:	f003 0320 	and.w	r3, r3, #32
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00a      	beq.n	8009d18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	430a      	orrs	r2, r1
 8009d16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d01a      	beq.n	8009d5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	430a      	orrs	r2, r1
 8009d38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d42:	d10a      	bne.n	8009d5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	430a      	orrs	r2, r1
 8009d58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00a      	beq.n	8009d7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	430a      	orrs	r2, r1
 8009d7a:	605a      	str	r2, [r3, #4]
  }
}
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b086      	sub	sp, #24
 8009d8c:	af02      	add	r7, sp, #8
 8009d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d98:	f7fa fdd8 	bl	800494c <HAL_GetTick>
 8009d9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f003 0308 	and.w	r3, r3, #8
 8009da8:	2b08      	cmp	r3, #8
 8009daa:	d10e      	bne.n	8009dca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009dac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 f82d 	bl	8009e1a <UART_WaitOnFlagUntilTimeout>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d001      	beq.n	8009dca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009dc6:	2303      	movs	r3, #3
 8009dc8:	e023      	b.n	8009e12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f003 0304 	and.w	r3, r3, #4
 8009dd4:	2b04      	cmp	r3, #4
 8009dd6:	d10e      	bne.n	8009df6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009dd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ddc:	9300      	str	r3, [sp, #0]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f817 	bl	8009e1a <UART_WaitOnFlagUntilTimeout>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009df2:	2303      	movs	r3, #3
 8009df4:	e00d      	b.n	8009e12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2220      	movs	r2, #32
 8009dfa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2220      	movs	r2, #32
 8009e00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b084      	sub	sp, #16
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	60f8      	str	r0, [r7, #12]
 8009e22:	60b9      	str	r1, [r7, #8]
 8009e24:	603b      	str	r3, [r7, #0]
 8009e26:	4613      	mov	r3, r2
 8009e28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e2a:	e05e      	b.n	8009eea <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e32:	d05a      	beq.n	8009eea <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e34:	f7fa fd8a 	bl	800494c <HAL_GetTick>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	69ba      	ldr	r2, [r7, #24]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d302      	bcc.n	8009e4a <UART_WaitOnFlagUntilTimeout+0x30>
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d11b      	bne.n	8009e82 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009e58:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	689a      	ldr	r2, [r3, #8]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f022 0201 	bic.w	r2, r2, #1
 8009e68:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2220      	movs	r2, #32
 8009e6e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2220      	movs	r2, #32
 8009e74:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009e7e:	2303      	movs	r3, #3
 8009e80:	e043      	b.n	8009f0a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f003 0304 	and.w	r3, r3, #4
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d02c      	beq.n	8009eea <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	69db      	ldr	r3, [r3, #28]
 8009e96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e9e:	d124      	bne.n	8009eea <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ea8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009eb8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	689a      	ldr	r2, [r3, #8]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f022 0201 	bic.w	r2, r2, #1
 8009ec8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2220      	movs	r2, #32
 8009ece:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2220      	movs	r2, #32
 8009ed4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2220      	movs	r2, #32
 8009eda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	e00f      	b.n	8009f0a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	69da      	ldr	r2, [r3, #28]
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	4013      	ands	r3, r2
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	bf0c      	ite	eq
 8009efa:	2301      	moveq	r3, #1
 8009efc:	2300      	movne	r3, #0
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	461a      	mov	r2, r3
 8009f02:	79fb      	ldrb	r3, [r7, #7]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d091      	beq.n	8009e2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
	...

08009f14 <__errno>:
 8009f14:	4b01      	ldr	r3, [pc, #4]	; (8009f1c <__errno+0x8>)
 8009f16:	6818      	ldr	r0, [r3, #0]
 8009f18:	4770      	bx	lr
 8009f1a:	bf00      	nop
 8009f1c:	2000000c 	.word	0x2000000c

08009f20 <__libc_init_array>:
 8009f20:	b570      	push	{r4, r5, r6, lr}
 8009f22:	4d0d      	ldr	r5, [pc, #52]	; (8009f58 <__libc_init_array+0x38>)
 8009f24:	4c0d      	ldr	r4, [pc, #52]	; (8009f5c <__libc_init_array+0x3c>)
 8009f26:	1b64      	subs	r4, r4, r5
 8009f28:	10a4      	asrs	r4, r4, #2
 8009f2a:	2600      	movs	r6, #0
 8009f2c:	42a6      	cmp	r6, r4
 8009f2e:	d109      	bne.n	8009f44 <__libc_init_array+0x24>
 8009f30:	4d0b      	ldr	r5, [pc, #44]	; (8009f60 <__libc_init_array+0x40>)
 8009f32:	4c0c      	ldr	r4, [pc, #48]	; (8009f64 <__libc_init_array+0x44>)
 8009f34:	f002 fd4e 	bl	800c9d4 <_init>
 8009f38:	1b64      	subs	r4, r4, r5
 8009f3a:	10a4      	asrs	r4, r4, #2
 8009f3c:	2600      	movs	r6, #0
 8009f3e:	42a6      	cmp	r6, r4
 8009f40:	d105      	bne.n	8009f4e <__libc_init_array+0x2e>
 8009f42:	bd70      	pop	{r4, r5, r6, pc}
 8009f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f48:	4798      	blx	r3
 8009f4a:	3601      	adds	r6, #1
 8009f4c:	e7ee      	b.n	8009f2c <__libc_init_array+0xc>
 8009f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f52:	4798      	blx	r3
 8009f54:	3601      	adds	r6, #1
 8009f56:	e7f2      	b.n	8009f3e <__libc_init_array+0x1e>
 8009f58:	0800ce6c 	.word	0x0800ce6c
 8009f5c:	0800ce6c 	.word	0x0800ce6c
 8009f60:	0800ce6c 	.word	0x0800ce6c
 8009f64:	0800ce70 	.word	0x0800ce70

08009f68 <memset>:
 8009f68:	4402      	add	r2, r0
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d100      	bne.n	8009f72 <memset+0xa>
 8009f70:	4770      	bx	lr
 8009f72:	f803 1b01 	strb.w	r1, [r3], #1
 8009f76:	e7f9      	b.n	8009f6c <memset+0x4>

08009f78 <__cvt>:
 8009f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f7c:	ec55 4b10 	vmov	r4, r5, d0
 8009f80:	2d00      	cmp	r5, #0
 8009f82:	460e      	mov	r6, r1
 8009f84:	4619      	mov	r1, r3
 8009f86:	462b      	mov	r3, r5
 8009f88:	bfbb      	ittet	lt
 8009f8a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009f8e:	461d      	movlt	r5, r3
 8009f90:	2300      	movge	r3, #0
 8009f92:	232d      	movlt	r3, #45	; 0x2d
 8009f94:	700b      	strb	r3, [r1, #0]
 8009f96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009f9c:	4691      	mov	r9, r2
 8009f9e:	f023 0820 	bic.w	r8, r3, #32
 8009fa2:	bfbc      	itt	lt
 8009fa4:	4622      	movlt	r2, r4
 8009fa6:	4614      	movlt	r4, r2
 8009fa8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009fac:	d005      	beq.n	8009fba <__cvt+0x42>
 8009fae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009fb2:	d100      	bne.n	8009fb6 <__cvt+0x3e>
 8009fb4:	3601      	adds	r6, #1
 8009fb6:	2102      	movs	r1, #2
 8009fb8:	e000      	b.n	8009fbc <__cvt+0x44>
 8009fba:	2103      	movs	r1, #3
 8009fbc:	ab03      	add	r3, sp, #12
 8009fbe:	9301      	str	r3, [sp, #4]
 8009fc0:	ab02      	add	r3, sp, #8
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	ec45 4b10 	vmov	d0, r4, r5
 8009fc8:	4653      	mov	r3, sl
 8009fca:	4632      	mov	r2, r6
 8009fcc:	f000 fda4 	bl	800ab18 <_dtoa_r>
 8009fd0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009fd4:	4607      	mov	r7, r0
 8009fd6:	d102      	bne.n	8009fde <__cvt+0x66>
 8009fd8:	f019 0f01 	tst.w	r9, #1
 8009fdc:	d022      	beq.n	800a024 <__cvt+0xac>
 8009fde:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009fe2:	eb07 0906 	add.w	r9, r7, r6
 8009fe6:	d110      	bne.n	800a00a <__cvt+0x92>
 8009fe8:	783b      	ldrb	r3, [r7, #0]
 8009fea:	2b30      	cmp	r3, #48	; 0x30
 8009fec:	d10a      	bne.n	800a004 <__cvt+0x8c>
 8009fee:	2200      	movs	r2, #0
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	4629      	mov	r1, r5
 8009ff6:	f7f6 fd67 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ffa:	b918      	cbnz	r0, 800a004 <__cvt+0x8c>
 8009ffc:	f1c6 0601 	rsb	r6, r6, #1
 800a000:	f8ca 6000 	str.w	r6, [sl]
 800a004:	f8da 3000 	ldr.w	r3, [sl]
 800a008:	4499      	add	r9, r3
 800a00a:	2200      	movs	r2, #0
 800a00c:	2300      	movs	r3, #0
 800a00e:	4620      	mov	r0, r4
 800a010:	4629      	mov	r1, r5
 800a012:	f7f6 fd59 	bl	8000ac8 <__aeabi_dcmpeq>
 800a016:	b108      	cbz	r0, 800a01c <__cvt+0xa4>
 800a018:	f8cd 900c 	str.w	r9, [sp, #12]
 800a01c:	2230      	movs	r2, #48	; 0x30
 800a01e:	9b03      	ldr	r3, [sp, #12]
 800a020:	454b      	cmp	r3, r9
 800a022:	d307      	bcc.n	800a034 <__cvt+0xbc>
 800a024:	9b03      	ldr	r3, [sp, #12]
 800a026:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a028:	1bdb      	subs	r3, r3, r7
 800a02a:	4638      	mov	r0, r7
 800a02c:	6013      	str	r3, [r2, #0]
 800a02e:	b004      	add	sp, #16
 800a030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a034:	1c59      	adds	r1, r3, #1
 800a036:	9103      	str	r1, [sp, #12]
 800a038:	701a      	strb	r2, [r3, #0]
 800a03a:	e7f0      	b.n	800a01e <__cvt+0xa6>

0800a03c <__exponent>:
 800a03c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a03e:	4603      	mov	r3, r0
 800a040:	2900      	cmp	r1, #0
 800a042:	bfb8      	it	lt
 800a044:	4249      	neglt	r1, r1
 800a046:	f803 2b02 	strb.w	r2, [r3], #2
 800a04a:	bfb4      	ite	lt
 800a04c:	222d      	movlt	r2, #45	; 0x2d
 800a04e:	222b      	movge	r2, #43	; 0x2b
 800a050:	2909      	cmp	r1, #9
 800a052:	7042      	strb	r2, [r0, #1]
 800a054:	dd2a      	ble.n	800a0ac <__exponent+0x70>
 800a056:	f10d 0407 	add.w	r4, sp, #7
 800a05a:	46a4      	mov	ip, r4
 800a05c:	270a      	movs	r7, #10
 800a05e:	46a6      	mov	lr, r4
 800a060:	460a      	mov	r2, r1
 800a062:	fb91 f6f7 	sdiv	r6, r1, r7
 800a066:	fb07 1516 	mls	r5, r7, r6, r1
 800a06a:	3530      	adds	r5, #48	; 0x30
 800a06c:	2a63      	cmp	r2, #99	; 0x63
 800a06e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a072:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a076:	4631      	mov	r1, r6
 800a078:	dcf1      	bgt.n	800a05e <__exponent+0x22>
 800a07a:	3130      	adds	r1, #48	; 0x30
 800a07c:	f1ae 0502 	sub.w	r5, lr, #2
 800a080:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a084:	1c44      	adds	r4, r0, #1
 800a086:	4629      	mov	r1, r5
 800a088:	4561      	cmp	r1, ip
 800a08a:	d30a      	bcc.n	800a0a2 <__exponent+0x66>
 800a08c:	f10d 0209 	add.w	r2, sp, #9
 800a090:	eba2 020e 	sub.w	r2, r2, lr
 800a094:	4565      	cmp	r5, ip
 800a096:	bf88      	it	hi
 800a098:	2200      	movhi	r2, #0
 800a09a:	4413      	add	r3, r2
 800a09c:	1a18      	subs	r0, r3, r0
 800a09e:	b003      	add	sp, #12
 800a0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a0aa:	e7ed      	b.n	800a088 <__exponent+0x4c>
 800a0ac:	2330      	movs	r3, #48	; 0x30
 800a0ae:	3130      	adds	r1, #48	; 0x30
 800a0b0:	7083      	strb	r3, [r0, #2]
 800a0b2:	70c1      	strb	r1, [r0, #3]
 800a0b4:	1d03      	adds	r3, r0, #4
 800a0b6:	e7f1      	b.n	800a09c <__exponent+0x60>

0800a0b8 <_printf_float>:
 800a0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0bc:	ed2d 8b02 	vpush	{d8}
 800a0c0:	b08d      	sub	sp, #52	; 0x34
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a0c8:	4616      	mov	r6, r2
 800a0ca:	461f      	mov	r7, r3
 800a0cc:	4605      	mov	r5, r0
 800a0ce:	f001 fcc9 	bl	800ba64 <_localeconv_r>
 800a0d2:	f8d0 a000 	ldr.w	sl, [r0]
 800a0d6:	4650      	mov	r0, sl
 800a0d8:	f7f6 f87a 	bl	80001d0 <strlen>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	930a      	str	r3, [sp, #40]	; 0x28
 800a0e0:	6823      	ldr	r3, [r4, #0]
 800a0e2:	9305      	str	r3, [sp, #20]
 800a0e4:	f8d8 3000 	ldr.w	r3, [r8]
 800a0e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a0ec:	3307      	adds	r3, #7
 800a0ee:	f023 0307 	bic.w	r3, r3, #7
 800a0f2:	f103 0208 	add.w	r2, r3, #8
 800a0f6:	f8c8 2000 	str.w	r2, [r8]
 800a0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a102:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a106:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a10a:	9307      	str	r3, [sp, #28]
 800a10c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a110:	ee08 0a10 	vmov	s16, r0
 800a114:	4b9f      	ldr	r3, [pc, #636]	; (800a394 <_printf_float+0x2dc>)
 800a116:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a11a:	f04f 32ff 	mov.w	r2, #4294967295
 800a11e:	f7f6 fd05 	bl	8000b2c <__aeabi_dcmpun>
 800a122:	bb88      	cbnz	r0, 800a188 <_printf_float+0xd0>
 800a124:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a128:	4b9a      	ldr	r3, [pc, #616]	; (800a394 <_printf_float+0x2dc>)
 800a12a:	f04f 32ff 	mov.w	r2, #4294967295
 800a12e:	f7f6 fcdf 	bl	8000af0 <__aeabi_dcmple>
 800a132:	bb48      	cbnz	r0, 800a188 <_printf_float+0xd0>
 800a134:	2200      	movs	r2, #0
 800a136:	2300      	movs	r3, #0
 800a138:	4640      	mov	r0, r8
 800a13a:	4649      	mov	r1, r9
 800a13c:	f7f6 fcce 	bl	8000adc <__aeabi_dcmplt>
 800a140:	b110      	cbz	r0, 800a148 <_printf_float+0x90>
 800a142:	232d      	movs	r3, #45	; 0x2d
 800a144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a148:	4b93      	ldr	r3, [pc, #588]	; (800a398 <_printf_float+0x2e0>)
 800a14a:	4894      	ldr	r0, [pc, #592]	; (800a39c <_printf_float+0x2e4>)
 800a14c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a150:	bf94      	ite	ls
 800a152:	4698      	movls	r8, r3
 800a154:	4680      	movhi	r8, r0
 800a156:	2303      	movs	r3, #3
 800a158:	6123      	str	r3, [r4, #16]
 800a15a:	9b05      	ldr	r3, [sp, #20]
 800a15c:	f023 0204 	bic.w	r2, r3, #4
 800a160:	6022      	str	r2, [r4, #0]
 800a162:	f04f 0900 	mov.w	r9, #0
 800a166:	9700      	str	r7, [sp, #0]
 800a168:	4633      	mov	r3, r6
 800a16a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a16c:	4621      	mov	r1, r4
 800a16e:	4628      	mov	r0, r5
 800a170:	f000 f9d8 	bl	800a524 <_printf_common>
 800a174:	3001      	adds	r0, #1
 800a176:	f040 8090 	bne.w	800a29a <_printf_float+0x1e2>
 800a17a:	f04f 30ff 	mov.w	r0, #4294967295
 800a17e:	b00d      	add	sp, #52	; 0x34
 800a180:	ecbd 8b02 	vpop	{d8}
 800a184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a188:	4642      	mov	r2, r8
 800a18a:	464b      	mov	r3, r9
 800a18c:	4640      	mov	r0, r8
 800a18e:	4649      	mov	r1, r9
 800a190:	f7f6 fccc 	bl	8000b2c <__aeabi_dcmpun>
 800a194:	b140      	cbz	r0, 800a1a8 <_printf_float+0xf0>
 800a196:	464b      	mov	r3, r9
 800a198:	2b00      	cmp	r3, #0
 800a19a:	bfbc      	itt	lt
 800a19c:	232d      	movlt	r3, #45	; 0x2d
 800a19e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a1a2:	487f      	ldr	r0, [pc, #508]	; (800a3a0 <_printf_float+0x2e8>)
 800a1a4:	4b7f      	ldr	r3, [pc, #508]	; (800a3a4 <_printf_float+0x2ec>)
 800a1a6:	e7d1      	b.n	800a14c <_printf_float+0x94>
 800a1a8:	6863      	ldr	r3, [r4, #4]
 800a1aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a1ae:	9206      	str	r2, [sp, #24]
 800a1b0:	1c5a      	adds	r2, r3, #1
 800a1b2:	d13f      	bne.n	800a234 <_printf_float+0x17c>
 800a1b4:	2306      	movs	r3, #6
 800a1b6:	6063      	str	r3, [r4, #4]
 800a1b8:	9b05      	ldr	r3, [sp, #20]
 800a1ba:	6861      	ldr	r1, [r4, #4]
 800a1bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	9303      	str	r3, [sp, #12]
 800a1c4:	ab0a      	add	r3, sp, #40	; 0x28
 800a1c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a1ca:	ab09      	add	r3, sp, #36	; 0x24
 800a1cc:	ec49 8b10 	vmov	d0, r8, r9
 800a1d0:	9300      	str	r3, [sp, #0]
 800a1d2:	6022      	str	r2, [r4, #0]
 800a1d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a1d8:	4628      	mov	r0, r5
 800a1da:	f7ff fecd 	bl	8009f78 <__cvt>
 800a1de:	9b06      	ldr	r3, [sp, #24]
 800a1e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1e2:	2b47      	cmp	r3, #71	; 0x47
 800a1e4:	4680      	mov	r8, r0
 800a1e6:	d108      	bne.n	800a1fa <_printf_float+0x142>
 800a1e8:	1cc8      	adds	r0, r1, #3
 800a1ea:	db02      	blt.n	800a1f2 <_printf_float+0x13a>
 800a1ec:	6863      	ldr	r3, [r4, #4]
 800a1ee:	4299      	cmp	r1, r3
 800a1f0:	dd41      	ble.n	800a276 <_printf_float+0x1be>
 800a1f2:	f1ab 0b02 	sub.w	fp, fp, #2
 800a1f6:	fa5f fb8b 	uxtb.w	fp, fp
 800a1fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a1fe:	d820      	bhi.n	800a242 <_printf_float+0x18a>
 800a200:	3901      	subs	r1, #1
 800a202:	465a      	mov	r2, fp
 800a204:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a208:	9109      	str	r1, [sp, #36]	; 0x24
 800a20a:	f7ff ff17 	bl	800a03c <__exponent>
 800a20e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a210:	1813      	adds	r3, r2, r0
 800a212:	2a01      	cmp	r2, #1
 800a214:	4681      	mov	r9, r0
 800a216:	6123      	str	r3, [r4, #16]
 800a218:	dc02      	bgt.n	800a220 <_printf_float+0x168>
 800a21a:	6822      	ldr	r2, [r4, #0]
 800a21c:	07d2      	lsls	r2, r2, #31
 800a21e:	d501      	bpl.n	800a224 <_printf_float+0x16c>
 800a220:	3301      	adds	r3, #1
 800a222:	6123      	str	r3, [r4, #16]
 800a224:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d09c      	beq.n	800a166 <_printf_float+0xae>
 800a22c:	232d      	movs	r3, #45	; 0x2d
 800a22e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a232:	e798      	b.n	800a166 <_printf_float+0xae>
 800a234:	9a06      	ldr	r2, [sp, #24]
 800a236:	2a47      	cmp	r2, #71	; 0x47
 800a238:	d1be      	bne.n	800a1b8 <_printf_float+0x100>
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d1bc      	bne.n	800a1b8 <_printf_float+0x100>
 800a23e:	2301      	movs	r3, #1
 800a240:	e7b9      	b.n	800a1b6 <_printf_float+0xfe>
 800a242:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a246:	d118      	bne.n	800a27a <_printf_float+0x1c2>
 800a248:	2900      	cmp	r1, #0
 800a24a:	6863      	ldr	r3, [r4, #4]
 800a24c:	dd0b      	ble.n	800a266 <_printf_float+0x1ae>
 800a24e:	6121      	str	r1, [r4, #16]
 800a250:	b913      	cbnz	r3, 800a258 <_printf_float+0x1a0>
 800a252:	6822      	ldr	r2, [r4, #0]
 800a254:	07d0      	lsls	r0, r2, #31
 800a256:	d502      	bpl.n	800a25e <_printf_float+0x1a6>
 800a258:	3301      	adds	r3, #1
 800a25a:	440b      	add	r3, r1
 800a25c:	6123      	str	r3, [r4, #16]
 800a25e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a260:	f04f 0900 	mov.w	r9, #0
 800a264:	e7de      	b.n	800a224 <_printf_float+0x16c>
 800a266:	b913      	cbnz	r3, 800a26e <_printf_float+0x1b6>
 800a268:	6822      	ldr	r2, [r4, #0]
 800a26a:	07d2      	lsls	r2, r2, #31
 800a26c:	d501      	bpl.n	800a272 <_printf_float+0x1ba>
 800a26e:	3302      	adds	r3, #2
 800a270:	e7f4      	b.n	800a25c <_printf_float+0x1a4>
 800a272:	2301      	movs	r3, #1
 800a274:	e7f2      	b.n	800a25c <_printf_float+0x1a4>
 800a276:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a27a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a27c:	4299      	cmp	r1, r3
 800a27e:	db05      	blt.n	800a28c <_printf_float+0x1d4>
 800a280:	6823      	ldr	r3, [r4, #0]
 800a282:	6121      	str	r1, [r4, #16]
 800a284:	07d8      	lsls	r0, r3, #31
 800a286:	d5ea      	bpl.n	800a25e <_printf_float+0x1a6>
 800a288:	1c4b      	adds	r3, r1, #1
 800a28a:	e7e7      	b.n	800a25c <_printf_float+0x1a4>
 800a28c:	2900      	cmp	r1, #0
 800a28e:	bfd4      	ite	le
 800a290:	f1c1 0202 	rsble	r2, r1, #2
 800a294:	2201      	movgt	r2, #1
 800a296:	4413      	add	r3, r2
 800a298:	e7e0      	b.n	800a25c <_printf_float+0x1a4>
 800a29a:	6823      	ldr	r3, [r4, #0]
 800a29c:	055a      	lsls	r2, r3, #21
 800a29e:	d407      	bmi.n	800a2b0 <_printf_float+0x1f8>
 800a2a0:	6923      	ldr	r3, [r4, #16]
 800a2a2:	4642      	mov	r2, r8
 800a2a4:	4631      	mov	r1, r6
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	47b8      	blx	r7
 800a2aa:	3001      	adds	r0, #1
 800a2ac:	d12c      	bne.n	800a308 <_printf_float+0x250>
 800a2ae:	e764      	b.n	800a17a <_printf_float+0xc2>
 800a2b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a2b4:	f240 80e0 	bls.w	800a478 <_printf_float+0x3c0>
 800a2b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a2bc:	2200      	movs	r2, #0
 800a2be:	2300      	movs	r3, #0
 800a2c0:	f7f6 fc02 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	d034      	beq.n	800a332 <_printf_float+0x27a>
 800a2c8:	4a37      	ldr	r2, [pc, #220]	; (800a3a8 <_printf_float+0x2f0>)
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	4631      	mov	r1, r6
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	47b8      	blx	r7
 800a2d2:	3001      	adds	r0, #1
 800a2d4:	f43f af51 	beq.w	800a17a <_printf_float+0xc2>
 800a2d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	db02      	blt.n	800a2e6 <_printf_float+0x22e>
 800a2e0:	6823      	ldr	r3, [r4, #0]
 800a2e2:	07d8      	lsls	r0, r3, #31
 800a2e4:	d510      	bpl.n	800a308 <_printf_float+0x250>
 800a2e6:	ee18 3a10 	vmov	r3, s16
 800a2ea:	4652      	mov	r2, sl
 800a2ec:	4631      	mov	r1, r6
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	47b8      	blx	r7
 800a2f2:	3001      	adds	r0, #1
 800a2f4:	f43f af41 	beq.w	800a17a <_printf_float+0xc2>
 800a2f8:	f04f 0800 	mov.w	r8, #0
 800a2fc:	f104 091a 	add.w	r9, r4, #26
 800a300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a302:	3b01      	subs	r3, #1
 800a304:	4543      	cmp	r3, r8
 800a306:	dc09      	bgt.n	800a31c <_printf_float+0x264>
 800a308:	6823      	ldr	r3, [r4, #0]
 800a30a:	079b      	lsls	r3, r3, #30
 800a30c:	f100 8105 	bmi.w	800a51a <_printf_float+0x462>
 800a310:	68e0      	ldr	r0, [r4, #12]
 800a312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a314:	4298      	cmp	r0, r3
 800a316:	bfb8      	it	lt
 800a318:	4618      	movlt	r0, r3
 800a31a:	e730      	b.n	800a17e <_printf_float+0xc6>
 800a31c:	2301      	movs	r3, #1
 800a31e:	464a      	mov	r2, r9
 800a320:	4631      	mov	r1, r6
 800a322:	4628      	mov	r0, r5
 800a324:	47b8      	blx	r7
 800a326:	3001      	adds	r0, #1
 800a328:	f43f af27 	beq.w	800a17a <_printf_float+0xc2>
 800a32c:	f108 0801 	add.w	r8, r8, #1
 800a330:	e7e6      	b.n	800a300 <_printf_float+0x248>
 800a332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a334:	2b00      	cmp	r3, #0
 800a336:	dc39      	bgt.n	800a3ac <_printf_float+0x2f4>
 800a338:	4a1b      	ldr	r2, [pc, #108]	; (800a3a8 <_printf_float+0x2f0>)
 800a33a:	2301      	movs	r3, #1
 800a33c:	4631      	mov	r1, r6
 800a33e:	4628      	mov	r0, r5
 800a340:	47b8      	blx	r7
 800a342:	3001      	adds	r0, #1
 800a344:	f43f af19 	beq.w	800a17a <_printf_float+0xc2>
 800a348:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a34c:	4313      	orrs	r3, r2
 800a34e:	d102      	bne.n	800a356 <_printf_float+0x29e>
 800a350:	6823      	ldr	r3, [r4, #0]
 800a352:	07d9      	lsls	r1, r3, #31
 800a354:	d5d8      	bpl.n	800a308 <_printf_float+0x250>
 800a356:	ee18 3a10 	vmov	r3, s16
 800a35a:	4652      	mov	r2, sl
 800a35c:	4631      	mov	r1, r6
 800a35e:	4628      	mov	r0, r5
 800a360:	47b8      	blx	r7
 800a362:	3001      	adds	r0, #1
 800a364:	f43f af09 	beq.w	800a17a <_printf_float+0xc2>
 800a368:	f04f 0900 	mov.w	r9, #0
 800a36c:	f104 0a1a 	add.w	sl, r4, #26
 800a370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a372:	425b      	negs	r3, r3
 800a374:	454b      	cmp	r3, r9
 800a376:	dc01      	bgt.n	800a37c <_printf_float+0x2c4>
 800a378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a37a:	e792      	b.n	800a2a2 <_printf_float+0x1ea>
 800a37c:	2301      	movs	r3, #1
 800a37e:	4652      	mov	r2, sl
 800a380:	4631      	mov	r1, r6
 800a382:	4628      	mov	r0, r5
 800a384:	47b8      	blx	r7
 800a386:	3001      	adds	r0, #1
 800a388:	f43f aef7 	beq.w	800a17a <_printf_float+0xc2>
 800a38c:	f109 0901 	add.w	r9, r9, #1
 800a390:	e7ee      	b.n	800a370 <_printf_float+0x2b8>
 800a392:	bf00      	nop
 800a394:	7fefffff 	.word	0x7fefffff
 800a398:	0800ca90 	.word	0x0800ca90
 800a39c:	0800ca94 	.word	0x0800ca94
 800a3a0:	0800ca9c 	.word	0x0800ca9c
 800a3a4:	0800ca98 	.word	0x0800ca98
 800a3a8:	0800caa0 	.word	0x0800caa0
 800a3ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	bfa8      	it	ge
 800a3b4:	461a      	movge	r2, r3
 800a3b6:	2a00      	cmp	r2, #0
 800a3b8:	4691      	mov	r9, r2
 800a3ba:	dc37      	bgt.n	800a42c <_printf_float+0x374>
 800a3bc:	f04f 0b00 	mov.w	fp, #0
 800a3c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3c4:	f104 021a 	add.w	r2, r4, #26
 800a3c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a3ca:	9305      	str	r3, [sp, #20]
 800a3cc:	eba3 0309 	sub.w	r3, r3, r9
 800a3d0:	455b      	cmp	r3, fp
 800a3d2:	dc33      	bgt.n	800a43c <_printf_float+0x384>
 800a3d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	db3b      	blt.n	800a454 <_printf_float+0x39c>
 800a3dc:	6823      	ldr	r3, [r4, #0]
 800a3de:	07da      	lsls	r2, r3, #31
 800a3e0:	d438      	bmi.n	800a454 <_printf_float+0x39c>
 800a3e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3e4:	9a05      	ldr	r2, [sp, #20]
 800a3e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3e8:	1a9a      	subs	r2, r3, r2
 800a3ea:	eba3 0901 	sub.w	r9, r3, r1
 800a3ee:	4591      	cmp	r9, r2
 800a3f0:	bfa8      	it	ge
 800a3f2:	4691      	movge	r9, r2
 800a3f4:	f1b9 0f00 	cmp.w	r9, #0
 800a3f8:	dc35      	bgt.n	800a466 <_printf_float+0x3ae>
 800a3fa:	f04f 0800 	mov.w	r8, #0
 800a3fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a402:	f104 0a1a 	add.w	sl, r4, #26
 800a406:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a40a:	1a9b      	subs	r3, r3, r2
 800a40c:	eba3 0309 	sub.w	r3, r3, r9
 800a410:	4543      	cmp	r3, r8
 800a412:	f77f af79 	ble.w	800a308 <_printf_float+0x250>
 800a416:	2301      	movs	r3, #1
 800a418:	4652      	mov	r2, sl
 800a41a:	4631      	mov	r1, r6
 800a41c:	4628      	mov	r0, r5
 800a41e:	47b8      	blx	r7
 800a420:	3001      	adds	r0, #1
 800a422:	f43f aeaa 	beq.w	800a17a <_printf_float+0xc2>
 800a426:	f108 0801 	add.w	r8, r8, #1
 800a42a:	e7ec      	b.n	800a406 <_printf_float+0x34e>
 800a42c:	4613      	mov	r3, r2
 800a42e:	4631      	mov	r1, r6
 800a430:	4642      	mov	r2, r8
 800a432:	4628      	mov	r0, r5
 800a434:	47b8      	blx	r7
 800a436:	3001      	adds	r0, #1
 800a438:	d1c0      	bne.n	800a3bc <_printf_float+0x304>
 800a43a:	e69e      	b.n	800a17a <_printf_float+0xc2>
 800a43c:	2301      	movs	r3, #1
 800a43e:	4631      	mov	r1, r6
 800a440:	4628      	mov	r0, r5
 800a442:	9205      	str	r2, [sp, #20]
 800a444:	47b8      	blx	r7
 800a446:	3001      	adds	r0, #1
 800a448:	f43f ae97 	beq.w	800a17a <_printf_float+0xc2>
 800a44c:	9a05      	ldr	r2, [sp, #20]
 800a44e:	f10b 0b01 	add.w	fp, fp, #1
 800a452:	e7b9      	b.n	800a3c8 <_printf_float+0x310>
 800a454:	ee18 3a10 	vmov	r3, s16
 800a458:	4652      	mov	r2, sl
 800a45a:	4631      	mov	r1, r6
 800a45c:	4628      	mov	r0, r5
 800a45e:	47b8      	blx	r7
 800a460:	3001      	adds	r0, #1
 800a462:	d1be      	bne.n	800a3e2 <_printf_float+0x32a>
 800a464:	e689      	b.n	800a17a <_printf_float+0xc2>
 800a466:	9a05      	ldr	r2, [sp, #20]
 800a468:	464b      	mov	r3, r9
 800a46a:	4442      	add	r2, r8
 800a46c:	4631      	mov	r1, r6
 800a46e:	4628      	mov	r0, r5
 800a470:	47b8      	blx	r7
 800a472:	3001      	adds	r0, #1
 800a474:	d1c1      	bne.n	800a3fa <_printf_float+0x342>
 800a476:	e680      	b.n	800a17a <_printf_float+0xc2>
 800a478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a47a:	2a01      	cmp	r2, #1
 800a47c:	dc01      	bgt.n	800a482 <_printf_float+0x3ca>
 800a47e:	07db      	lsls	r3, r3, #31
 800a480:	d538      	bpl.n	800a4f4 <_printf_float+0x43c>
 800a482:	2301      	movs	r3, #1
 800a484:	4642      	mov	r2, r8
 800a486:	4631      	mov	r1, r6
 800a488:	4628      	mov	r0, r5
 800a48a:	47b8      	blx	r7
 800a48c:	3001      	adds	r0, #1
 800a48e:	f43f ae74 	beq.w	800a17a <_printf_float+0xc2>
 800a492:	ee18 3a10 	vmov	r3, s16
 800a496:	4652      	mov	r2, sl
 800a498:	4631      	mov	r1, r6
 800a49a:	4628      	mov	r0, r5
 800a49c:	47b8      	blx	r7
 800a49e:	3001      	adds	r0, #1
 800a4a0:	f43f ae6b 	beq.w	800a17a <_printf_float+0xc2>
 800a4a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	f7f6 fb0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4b0:	b9d8      	cbnz	r0, 800a4ea <_printf_float+0x432>
 800a4b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4b4:	f108 0201 	add.w	r2, r8, #1
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	4631      	mov	r1, r6
 800a4bc:	4628      	mov	r0, r5
 800a4be:	47b8      	blx	r7
 800a4c0:	3001      	adds	r0, #1
 800a4c2:	d10e      	bne.n	800a4e2 <_printf_float+0x42a>
 800a4c4:	e659      	b.n	800a17a <_printf_float+0xc2>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	4652      	mov	r2, sl
 800a4ca:	4631      	mov	r1, r6
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	47b8      	blx	r7
 800a4d0:	3001      	adds	r0, #1
 800a4d2:	f43f ae52 	beq.w	800a17a <_printf_float+0xc2>
 800a4d6:	f108 0801 	add.w	r8, r8, #1
 800a4da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	4543      	cmp	r3, r8
 800a4e0:	dcf1      	bgt.n	800a4c6 <_printf_float+0x40e>
 800a4e2:	464b      	mov	r3, r9
 800a4e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a4e8:	e6dc      	b.n	800a2a4 <_printf_float+0x1ec>
 800a4ea:	f04f 0800 	mov.w	r8, #0
 800a4ee:	f104 0a1a 	add.w	sl, r4, #26
 800a4f2:	e7f2      	b.n	800a4da <_printf_float+0x422>
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	4642      	mov	r2, r8
 800a4f8:	e7df      	b.n	800a4ba <_printf_float+0x402>
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	464a      	mov	r2, r9
 800a4fe:	4631      	mov	r1, r6
 800a500:	4628      	mov	r0, r5
 800a502:	47b8      	blx	r7
 800a504:	3001      	adds	r0, #1
 800a506:	f43f ae38 	beq.w	800a17a <_printf_float+0xc2>
 800a50a:	f108 0801 	add.w	r8, r8, #1
 800a50e:	68e3      	ldr	r3, [r4, #12]
 800a510:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a512:	1a5b      	subs	r3, r3, r1
 800a514:	4543      	cmp	r3, r8
 800a516:	dcf0      	bgt.n	800a4fa <_printf_float+0x442>
 800a518:	e6fa      	b.n	800a310 <_printf_float+0x258>
 800a51a:	f04f 0800 	mov.w	r8, #0
 800a51e:	f104 0919 	add.w	r9, r4, #25
 800a522:	e7f4      	b.n	800a50e <_printf_float+0x456>

0800a524 <_printf_common>:
 800a524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a528:	4616      	mov	r6, r2
 800a52a:	4699      	mov	r9, r3
 800a52c:	688a      	ldr	r2, [r1, #8]
 800a52e:	690b      	ldr	r3, [r1, #16]
 800a530:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a534:	4293      	cmp	r3, r2
 800a536:	bfb8      	it	lt
 800a538:	4613      	movlt	r3, r2
 800a53a:	6033      	str	r3, [r6, #0]
 800a53c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a540:	4607      	mov	r7, r0
 800a542:	460c      	mov	r4, r1
 800a544:	b10a      	cbz	r2, 800a54a <_printf_common+0x26>
 800a546:	3301      	adds	r3, #1
 800a548:	6033      	str	r3, [r6, #0]
 800a54a:	6823      	ldr	r3, [r4, #0]
 800a54c:	0699      	lsls	r1, r3, #26
 800a54e:	bf42      	ittt	mi
 800a550:	6833      	ldrmi	r3, [r6, #0]
 800a552:	3302      	addmi	r3, #2
 800a554:	6033      	strmi	r3, [r6, #0]
 800a556:	6825      	ldr	r5, [r4, #0]
 800a558:	f015 0506 	ands.w	r5, r5, #6
 800a55c:	d106      	bne.n	800a56c <_printf_common+0x48>
 800a55e:	f104 0a19 	add.w	sl, r4, #25
 800a562:	68e3      	ldr	r3, [r4, #12]
 800a564:	6832      	ldr	r2, [r6, #0]
 800a566:	1a9b      	subs	r3, r3, r2
 800a568:	42ab      	cmp	r3, r5
 800a56a:	dc26      	bgt.n	800a5ba <_printf_common+0x96>
 800a56c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a570:	1e13      	subs	r3, r2, #0
 800a572:	6822      	ldr	r2, [r4, #0]
 800a574:	bf18      	it	ne
 800a576:	2301      	movne	r3, #1
 800a578:	0692      	lsls	r2, r2, #26
 800a57a:	d42b      	bmi.n	800a5d4 <_printf_common+0xb0>
 800a57c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a580:	4649      	mov	r1, r9
 800a582:	4638      	mov	r0, r7
 800a584:	47c0      	blx	r8
 800a586:	3001      	adds	r0, #1
 800a588:	d01e      	beq.n	800a5c8 <_printf_common+0xa4>
 800a58a:	6823      	ldr	r3, [r4, #0]
 800a58c:	68e5      	ldr	r5, [r4, #12]
 800a58e:	6832      	ldr	r2, [r6, #0]
 800a590:	f003 0306 	and.w	r3, r3, #6
 800a594:	2b04      	cmp	r3, #4
 800a596:	bf08      	it	eq
 800a598:	1aad      	subeq	r5, r5, r2
 800a59a:	68a3      	ldr	r3, [r4, #8]
 800a59c:	6922      	ldr	r2, [r4, #16]
 800a59e:	bf0c      	ite	eq
 800a5a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5a4:	2500      	movne	r5, #0
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	bfc4      	itt	gt
 800a5aa:	1a9b      	subgt	r3, r3, r2
 800a5ac:	18ed      	addgt	r5, r5, r3
 800a5ae:	2600      	movs	r6, #0
 800a5b0:	341a      	adds	r4, #26
 800a5b2:	42b5      	cmp	r5, r6
 800a5b4:	d11a      	bne.n	800a5ec <_printf_common+0xc8>
 800a5b6:	2000      	movs	r0, #0
 800a5b8:	e008      	b.n	800a5cc <_printf_common+0xa8>
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	4652      	mov	r2, sl
 800a5be:	4649      	mov	r1, r9
 800a5c0:	4638      	mov	r0, r7
 800a5c2:	47c0      	blx	r8
 800a5c4:	3001      	adds	r0, #1
 800a5c6:	d103      	bne.n	800a5d0 <_printf_common+0xac>
 800a5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5d0:	3501      	adds	r5, #1
 800a5d2:	e7c6      	b.n	800a562 <_printf_common+0x3e>
 800a5d4:	18e1      	adds	r1, r4, r3
 800a5d6:	1c5a      	adds	r2, r3, #1
 800a5d8:	2030      	movs	r0, #48	; 0x30
 800a5da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5de:	4422      	add	r2, r4
 800a5e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5e8:	3302      	adds	r3, #2
 800a5ea:	e7c7      	b.n	800a57c <_printf_common+0x58>
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	4622      	mov	r2, r4
 800a5f0:	4649      	mov	r1, r9
 800a5f2:	4638      	mov	r0, r7
 800a5f4:	47c0      	blx	r8
 800a5f6:	3001      	adds	r0, #1
 800a5f8:	d0e6      	beq.n	800a5c8 <_printf_common+0xa4>
 800a5fa:	3601      	adds	r6, #1
 800a5fc:	e7d9      	b.n	800a5b2 <_printf_common+0x8e>
	...

0800a600 <_printf_i>:
 800a600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a604:	7e0f      	ldrb	r7, [r1, #24]
 800a606:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a608:	2f78      	cmp	r7, #120	; 0x78
 800a60a:	4691      	mov	r9, r2
 800a60c:	4680      	mov	r8, r0
 800a60e:	460c      	mov	r4, r1
 800a610:	469a      	mov	sl, r3
 800a612:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a616:	d807      	bhi.n	800a628 <_printf_i+0x28>
 800a618:	2f62      	cmp	r7, #98	; 0x62
 800a61a:	d80a      	bhi.n	800a632 <_printf_i+0x32>
 800a61c:	2f00      	cmp	r7, #0
 800a61e:	f000 80d8 	beq.w	800a7d2 <_printf_i+0x1d2>
 800a622:	2f58      	cmp	r7, #88	; 0x58
 800a624:	f000 80a3 	beq.w	800a76e <_printf_i+0x16e>
 800a628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a62c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a630:	e03a      	b.n	800a6a8 <_printf_i+0xa8>
 800a632:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a636:	2b15      	cmp	r3, #21
 800a638:	d8f6      	bhi.n	800a628 <_printf_i+0x28>
 800a63a:	a101      	add	r1, pc, #4	; (adr r1, 800a640 <_printf_i+0x40>)
 800a63c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a640:	0800a699 	.word	0x0800a699
 800a644:	0800a6ad 	.word	0x0800a6ad
 800a648:	0800a629 	.word	0x0800a629
 800a64c:	0800a629 	.word	0x0800a629
 800a650:	0800a629 	.word	0x0800a629
 800a654:	0800a629 	.word	0x0800a629
 800a658:	0800a6ad 	.word	0x0800a6ad
 800a65c:	0800a629 	.word	0x0800a629
 800a660:	0800a629 	.word	0x0800a629
 800a664:	0800a629 	.word	0x0800a629
 800a668:	0800a629 	.word	0x0800a629
 800a66c:	0800a7b9 	.word	0x0800a7b9
 800a670:	0800a6dd 	.word	0x0800a6dd
 800a674:	0800a79b 	.word	0x0800a79b
 800a678:	0800a629 	.word	0x0800a629
 800a67c:	0800a629 	.word	0x0800a629
 800a680:	0800a7db 	.word	0x0800a7db
 800a684:	0800a629 	.word	0x0800a629
 800a688:	0800a6dd 	.word	0x0800a6dd
 800a68c:	0800a629 	.word	0x0800a629
 800a690:	0800a629 	.word	0x0800a629
 800a694:	0800a7a3 	.word	0x0800a7a3
 800a698:	682b      	ldr	r3, [r5, #0]
 800a69a:	1d1a      	adds	r2, r3, #4
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	602a      	str	r2, [r5, #0]
 800a6a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e0a3      	b.n	800a7f4 <_printf_i+0x1f4>
 800a6ac:	6820      	ldr	r0, [r4, #0]
 800a6ae:	6829      	ldr	r1, [r5, #0]
 800a6b0:	0606      	lsls	r6, r0, #24
 800a6b2:	f101 0304 	add.w	r3, r1, #4
 800a6b6:	d50a      	bpl.n	800a6ce <_printf_i+0xce>
 800a6b8:	680e      	ldr	r6, [r1, #0]
 800a6ba:	602b      	str	r3, [r5, #0]
 800a6bc:	2e00      	cmp	r6, #0
 800a6be:	da03      	bge.n	800a6c8 <_printf_i+0xc8>
 800a6c0:	232d      	movs	r3, #45	; 0x2d
 800a6c2:	4276      	negs	r6, r6
 800a6c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6c8:	485e      	ldr	r0, [pc, #376]	; (800a844 <_printf_i+0x244>)
 800a6ca:	230a      	movs	r3, #10
 800a6cc:	e019      	b.n	800a702 <_printf_i+0x102>
 800a6ce:	680e      	ldr	r6, [r1, #0]
 800a6d0:	602b      	str	r3, [r5, #0]
 800a6d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a6d6:	bf18      	it	ne
 800a6d8:	b236      	sxthne	r6, r6
 800a6da:	e7ef      	b.n	800a6bc <_printf_i+0xbc>
 800a6dc:	682b      	ldr	r3, [r5, #0]
 800a6de:	6820      	ldr	r0, [r4, #0]
 800a6e0:	1d19      	adds	r1, r3, #4
 800a6e2:	6029      	str	r1, [r5, #0]
 800a6e4:	0601      	lsls	r1, r0, #24
 800a6e6:	d501      	bpl.n	800a6ec <_printf_i+0xec>
 800a6e8:	681e      	ldr	r6, [r3, #0]
 800a6ea:	e002      	b.n	800a6f2 <_printf_i+0xf2>
 800a6ec:	0646      	lsls	r6, r0, #25
 800a6ee:	d5fb      	bpl.n	800a6e8 <_printf_i+0xe8>
 800a6f0:	881e      	ldrh	r6, [r3, #0]
 800a6f2:	4854      	ldr	r0, [pc, #336]	; (800a844 <_printf_i+0x244>)
 800a6f4:	2f6f      	cmp	r7, #111	; 0x6f
 800a6f6:	bf0c      	ite	eq
 800a6f8:	2308      	moveq	r3, #8
 800a6fa:	230a      	movne	r3, #10
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a702:	6865      	ldr	r5, [r4, #4]
 800a704:	60a5      	str	r5, [r4, #8]
 800a706:	2d00      	cmp	r5, #0
 800a708:	bfa2      	ittt	ge
 800a70a:	6821      	ldrge	r1, [r4, #0]
 800a70c:	f021 0104 	bicge.w	r1, r1, #4
 800a710:	6021      	strge	r1, [r4, #0]
 800a712:	b90e      	cbnz	r6, 800a718 <_printf_i+0x118>
 800a714:	2d00      	cmp	r5, #0
 800a716:	d04d      	beq.n	800a7b4 <_printf_i+0x1b4>
 800a718:	4615      	mov	r5, r2
 800a71a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a71e:	fb03 6711 	mls	r7, r3, r1, r6
 800a722:	5dc7      	ldrb	r7, [r0, r7]
 800a724:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a728:	4637      	mov	r7, r6
 800a72a:	42bb      	cmp	r3, r7
 800a72c:	460e      	mov	r6, r1
 800a72e:	d9f4      	bls.n	800a71a <_printf_i+0x11a>
 800a730:	2b08      	cmp	r3, #8
 800a732:	d10b      	bne.n	800a74c <_printf_i+0x14c>
 800a734:	6823      	ldr	r3, [r4, #0]
 800a736:	07de      	lsls	r6, r3, #31
 800a738:	d508      	bpl.n	800a74c <_printf_i+0x14c>
 800a73a:	6923      	ldr	r3, [r4, #16]
 800a73c:	6861      	ldr	r1, [r4, #4]
 800a73e:	4299      	cmp	r1, r3
 800a740:	bfde      	ittt	le
 800a742:	2330      	movle	r3, #48	; 0x30
 800a744:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a748:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a74c:	1b52      	subs	r2, r2, r5
 800a74e:	6122      	str	r2, [r4, #16]
 800a750:	f8cd a000 	str.w	sl, [sp]
 800a754:	464b      	mov	r3, r9
 800a756:	aa03      	add	r2, sp, #12
 800a758:	4621      	mov	r1, r4
 800a75a:	4640      	mov	r0, r8
 800a75c:	f7ff fee2 	bl	800a524 <_printf_common>
 800a760:	3001      	adds	r0, #1
 800a762:	d14c      	bne.n	800a7fe <_printf_i+0x1fe>
 800a764:	f04f 30ff 	mov.w	r0, #4294967295
 800a768:	b004      	add	sp, #16
 800a76a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a76e:	4835      	ldr	r0, [pc, #212]	; (800a844 <_printf_i+0x244>)
 800a770:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a774:	6829      	ldr	r1, [r5, #0]
 800a776:	6823      	ldr	r3, [r4, #0]
 800a778:	f851 6b04 	ldr.w	r6, [r1], #4
 800a77c:	6029      	str	r1, [r5, #0]
 800a77e:	061d      	lsls	r5, r3, #24
 800a780:	d514      	bpl.n	800a7ac <_printf_i+0x1ac>
 800a782:	07df      	lsls	r7, r3, #31
 800a784:	bf44      	itt	mi
 800a786:	f043 0320 	orrmi.w	r3, r3, #32
 800a78a:	6023      	strmi	r3, [r4, #0]
 800a78c:	b91e      	cbnz	r6, 800a796 <_printf_i+0x196>
 800a78e:	6823      	ldr	r3, [r4, #0]
 800a790:	f023 0320 	bic.w	r3, r3, #32
 800a794:	6023      	str	r3, [r4, #0]
 800a796:	2310      	movs	r3, #16
 800a798:	e7b0      	b.n	800a6fc <_printf_i+0xfc>
 800a79a:	6823      	ldr	r3, [r4, #0]
 800a79c:	f043 0320 	orr.w	r3, r3, #32
 800a7a0:	6023      	str	r3, [r4, #0]
 800a7a2:	2378      	movs	r3, #120	; 0x78
 800a7a4:	4828      	ldr	r0, [pc, #160]	; (800a848 <_printf_i+0x248>)
 800a7a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7aa:	e7e3      	b.n	800a774 <_printf_i+0x174>
 800a7ac:	0659      	lsls	r1, r3, #25
 800a7ae:	bf48      	it	mi
 800a7b0:	b2b6      	uxthmi	r6, r6
 800a7b2:	e7e6      	b.n	800a782 <_printf_i+0x182>
 800a7b4:	4615      	mov	r5, r2
 800a7b6:	e7bb      	b.n	800a730 <_printf_i+0x130>
 800a7b8:	682b      	ldr	r3, [r5, #0]
 800a7ba:	6826      	ldr	r6, [r4, #0]
 800a7bc:	6961      	ldr	r1, [r4, #20]
 800a7be:	1d18      	adds	r0, r3, #4
 800a7c0:	6028      	str	r0, [r5, #0]
 800a7c2:	0635      	lsls	r5, r6, #24
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	d501      	bpl.n	800a7cc <_printf_i+0x1cc>
 800a7c8:	6019      	str	r1, [r3, #0]
 800a7ca:	e002      	b.n	800a7d2 <_printf_i+0x1d2>
 800a7cc:	0670      	lsls	r0, r6, #25
 800a7ce:	d5fb      	bpl.n	800a7c8 <_printf_i+0x1c8>
 800a7d0:	8019      	strh	r1, [r3, #0]
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	6123      	str	r3, [r4, #16]
 800a7d6:	4615      	mov	r5, r2
 800a7d8:	e7ba      	b.n	800a750 <_printf_i+0x150>
 800a7da:	682b      	ldr	r3, [r5, #0]
 800a7dc:	1d1a      	adds	r2, r3, #4
 800a7de:	602a      	str	r2, [r5, #0]
 800a7e0:	681d      	ldr	r5, [r3, #0]
 800a7e2:	6862      	ldr	r2, [r4, #4]
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	f7f5 fcfa 	bl	80001e0 <memchr>
 800a7ec:	b108      	cbz	r0, 800a7f2 <_printf_i+0x1f2>
 800a7ee:	1b40      	subs	r0, r0, r5
 800a7f0:	6060      	str	r0, [r4, #4]
 800a7f2:	6863      	ldr	r3, [r4, #4]
 800a7f4:	6123      	str	r3, [r4, #16]
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7fc:	e7a8      	b.n	800a750 <_printf_i+0x150>
 800a7fe:	6923      	ldr	r3, [r4, #16]
 800a800:	462a      	mov	r2, r5
 800a802:	4649      	mov	r1, r9
 800a804:	4640      	mov	r0, r8
 800a806:	47d0      	blx	sl
 800a808:	3001      	adds	r0, #1
 800a80a:	d0ab      	beq.n	800a764 <_printf_i+0x164>
 800a80c:	6823      	ldr	r3, [r4, #0]
 800a80e:	079b      	lsls	r3, r3, #30
 800a810:	d413      	bmi.n	800a83a <_printf_i+0x23a>
 800a812:	68e0      	ldr	r0, [r4, #12]
 800a814:	9b03      	ldr	r3, [sp, #12]
 800a816:	4298      	cmp	r0, r3
 800a818:	bfb8      	it	lt
 800a81a:	4618      	movlt	r0, r3
 800a81c:	e7a4      	b.n	800a768 <_printf_i+0x168>
 800a81e:	2301      	movs	r3, #1
 800a820:	4632      	mov	r2, r6
 800a822:	4649      	mov	r1, r9
 800a824:	4640      	mov	r0, r8
 800a826:	47d0      	blx	sl
 800a828:	3001      	adds	r0, #1
 800a82a:	d09b      	beq.n	800a764 <_printf_i+0x164>
 800a82c:	3501      	adds	r5, #1
 800a82e:	68e3      	ldr	r3, [r4, #12]
 800a830:	9903      	ldr	r1, [sp, #12]
 800a832:	1a5b      	subs	r3, r3, r1
 800a834:	42ab      	cmp	r3, r5
 800a836:	dcf2      	bgt.n	800a81e <_printf_i+0x21e>
 800a838:	e7eb      	b.n	800a812 <_printf_i+0x212>
 800a83a:	2500      	movs	r5, #0
 800a83c:	f104 0619 	add.w	r6, r4, #25
 800a840:	e7f5      	b.n	800a82e <_printf_i+0x22e>
 800a842:	bf00      	nop
 800a844:	0800caa2 	.word	0x0800caa2
 800a848:	0800cab3 	.word	0x0800cab3

0800a84c <iprintf>:
 800a84c:	b40f      	push	{r0, r1, r2, r3}
 800a84e:	4b0a      	ldr	r3, [pc, #40]	; (800a878 <iprintf+0x2c>)
 800a850:	b513      	push	{r0, r1, r4, lr}
 800a852:	681c      	ldr	r4, [r3, #0]
 800a854:	b124      	cbz	r4, 800a860 <iprintf+0x14>
 800a856:	69a3      	ldr	r3, [r4, #24]
 800a858:	b913      	cbnz	r3, 800a860 <iprintf+0x14>
 800a85a:	4620      	mov	r0, r4
 800a85c:	f001 f864 	bl	800b928 <__sinit>
 800a860:	ab05      	add	r3, sp, #20
 800a862:	9a04      	ldr	r2, [sp, #16]
 800a864:	68a1      	ldr	r1, [r4, #8]
 800a866:	9301      	str	r3, [sp, #4]
 800a868:	4620      	mov	r0, r4
 800a86a:	f001 fe21 	bl	800c4b0 <_vfiprintf_r>
 800a86e:	b002      	add	sp, #8
 800a870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a874:	b004      	add	sp, #16
 800a876:	4770      	bx	lr
 800a878:	2000000c 	.word	0x2000000c

0800a87c <__swbuf_r>:
 800a87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a87e:	460e      	mov	r6, r1
 800a880:	4614      	mov	r4, r2
 800a882:	4605      	mov	r5, r0
 800a884:	b118      	cbz	r0, 800a88e <__swbuf_r+0x12>
 800a886:	6983      	ldr	r3, [r0, #24]
 800a888:	b90b      	cbnz	r3, 800a88e <__swbuf_r+0x12>
 800a88a:	f001 f84d 	bl	800b928 <__sinit>
 800a88e:	4b21      	ldr	r3, [pc, #132]	; (800a914 <__swbuf_r+0x98>)
 800a890:	429c      	cmp	r4, r3
 800a892:	d12b      	bne.n	800a8ec <__swbuf_r+0x70>
 800a894:	686c      	ldr	r4, [r5, #4]
 800a896:	69a3      	ldr	r3, [r4, #24]
 800a898:	60a3      	str	r3, [r4, #8]
 800a89a:	89a3      	ldrh	r3, [r4, #12]
 800a89c:	071a      	lsls	r2, r3, #28
 800a89e:	d52f      	bpl.n	800a900 <__swbuf_r+0x84>
 800a8a0:	6923      	ldr	r3, [r4, #16]
 800a8a2:	b36b      	cbz	r3, 800a900 <__swbuf_r+0x84>
 800a8a4:	6923      	ldr	r3, [r4, #16]
 800a8a6:	6820      	ldr	r0, [r4, #0]
 800a8a8:	1ac0      	subs	r0, r0, r3
 800a8aa:	6963      	ldr	r3, [r4, #20]
 800a8ac:	b2f6      	uxtb	r6, r6
 800a8ae:	4283      	cmp	r3, r0
 800a8b0:	4637      	mov	r7, r6
 800a8b2:	dc04      	bgt.n	800a8be <__swbuf_r+0x42>
 800a8b4:	4621      	mov	r1, r4
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	f000 ffa2 	bl	800b800 <_fflush_r>
 800a8bc:	bb30      	cbnz	r0, 800a90c <__swbuf_r+0x90>
 800a8be:	68a3      	ldr	r3, [r4, #8]
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	60a3      	str	r3, [r4, #8]
 800a8c4:	6823      	ldr	r3, [r4, #0]
 800a8c6:	1c5a      	adds	r2, r3, #1
 800a8c8:	6022      	str	r2, [r4, #0]
 800a8ca:	701e      	strb	r6, [r3, #0]
 800a8cc:	6963      	ldr	r3, [r4, #20]
 800a8ce:	3001      	adds	r0, #1
 800a8d0:	4283      	cmp	r3, r0
 800a8d2:	d004      	beq.n	800a8de <__swbuf_r+0x62>
 800a8d4:	89a3      	ldrh	r3, [r4, #12]
 800a8d6:	07db      	lsls	r3, r3, #31
 800a8d8:	d506      	bpl.n	800a8e8 <__swbuf_r+0x6c>
 800a8da:	2e0a      	cmp	r6, #10
 800a8dc:	d104      	bne.n	800a8e8 <__swbuf_r+0x6c>
 800a8de:	4621      	mov	r1, r4
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	f000 ff8d 	bl	800b800 <_fflush_r>
 800a8e6:	b988      	cbnz	r0, 800a90c <__swbuf_r+0x90>
 800a8e8:	4638      	mov	r0, r7
 800a8ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8ec:	4b0a      	ldr	r3, [pc, #40]	; (800a918 <__swbuf_r+0x9c>)
 800a8ee:	429c      	cmp	r4, r3
 800a8f0:	d101      	bne.n	800a8f6 <__swbuf_r+0x7a>
 800a8f2:	68ac      	ldr	r4, [r5, #8]
 800a8f4:	e7cf      	b.n	800a896 <__swbuf_r+0x1a>
 800a8f6:	4b09      	ldr	r3, [pc, #36]	; (800a91c <__swbuf_r+0xa0>)
 800a8f8:	429c      	cmp	r4, r3
 800a8fa:	bf08      	it	eq
 800a8fc:	68ec      	ldreq	r4, [r5, #12]
 800a8fe:	e7ca      	b.n	800a896 <__swbuf_r+0x1a>
 800a900:	4621      	mov	r1, r4
 800a902:	4628      	mov	r0, r5
 800a904:	f000 f80c 	bl	800a920 <__swsetup_r>
 800a908:	2800      	cmp	r0, #0
 800a90a:	d0cb      	beq.n	800a8a4 <__swbuf_r+0x28>
 800a90c:	f04f 37ff 	mov.w	r7, #4294967295
 800a910:	e7ea      	b.n	800a8e8 <__swbuf_r+0x6c>
 800a912:	bf00      	nop
 800a914:	0800cb74 	.word	0x0800cb74
 800a918:	0800cb94 	.word	0x0800cb94
 800a91c:	0800cb54 	.word	0x0800cb54

0800a920 <__swsetup_r>:
 800a920:	4b32      	ldr	r3, [pc, #200]	; (800a9ec <__swsetup_r+0xcc>)
 800a922:	b570      	push	{r4, r5, r6, lr}
 800a924:	681d      	ldr	r5, [r3, #0]
 800a926:	4606      	mov	r6, r0
 800a928:	460c      	mov	r4, r1
 800a92a:	b125      	cbz	r5, 800a936 <__swsetup_r+0x16>
 800a92c:	69ab      	ldr	r3, [r5, #24]
 800a92e:	b913      	cbnz	r3, 800a936 <__swsetup_r+0x16>
 800a930:	4628      	mov	r0, r5
 800a932:	f000 fff9 	bl	800b928 <__sinit>
 800a936:	4b2e      	ldr	r3, [pc, #184]	; (800a9f0 <__swsetup_r+0xd0>)
 800a938:	429c      	cmp	r4, r3
 800a93a:	d10f      	bne.n	800a95c <__swsetup_r+0x3c>
 800a93c:	686c      	ldr	r4, [r5, #4]
 800a93e:	89a3      	ldrh	r3, [r4, #12]
 800a940:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a944:	0719      	lsls	r1, r3, #28
 800a946:	d42c      	bmi.n	800a9a2 <__swsetup_r+0x82>
 800a948:	06dd      	lsls	r5, r3, #27
 800a94a:	d411      	bmi.n	800a970 <__swsetup_r+0x50>
 800a94c:	2309      	movs	r3, #9
 800a94e:	6033      	str	r3, [r6, #0]
 800a950:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a954:	81a3      	strh	r3, [r4, #12]
 800a956:	f04f 30ff 	mov.w	r0, #4294967295
 800a95a:	e03e      	b.n	800a9da <__swsetup_r+0xba>
 800a95c:	4b25      	ldr	r3, [pc, #148]	; (800a9f4 <__swsetup_r+0xd4>)
 800a95e:	429c      	cmp	r4, r3
 800a960:	d101      	bne.n	800a966 <__swsetup_r+0x46>
 800a962:	68ac      	ldr	r4, [r5, #8]
 800a964:	e7eb      	b.n	800a93e <__swsetup_r+0x1e>
 800a966:	4b24      	ldr	r3, [pc, #144]	; (800a9f8 <__swsetup_r+0xd8>)
 800a968:	429c      	cmp	r4, r3
 800a96a:	bf08      	it	eq
 800a96c:	68ec      	ldreq	r4, [r5, #12]
 800a96e:	e7e6      	b.n	800a93e <__swsetup_r+0x1e>
 800a970:	0758      	lsls	r0, r3, #29
 800a972:	d512      	bpl.n	800a99a <__swsetup_r+0x7a>
 800a974:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a976:	b141      	cbz	r1, 800a98a <__swsetup_r+0x6a>
 800a978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a97c:	4299      	cmp	r1, r3
 800a97e:	d002      	beq.n	800a986 <__swsetup_r+0x66>
 800a980:	4630      	mov	r0, r6
 800a982:	f001 fc8b 	bl	800c29c <_free_r>
 800a986:	2300      	movs	r3, #0
 800a988:	6363      	str	r3, [r4, #52]	; 0x34
 800a98a:	89a3      	ldrh	r3, [r4, #12]
 800a98c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a990:	81a3      	strh	r3, [r4, #12]
 800a992:	2300      	movs	r3, #0
 800a994:	6063      	str	r3, [r4, #4]
 800a996:	6923      	ldr	r3, [r4, #16]
 800a998:	6023      	str	r3, [r4, #0]
 800a99a:	89a3      	ldrh	r3, [r4, #12]
 800a99c:	f043 0308 	orr.w	r3, r3, #8
 800a9a0:	81a3      	strh	r3, [r4, #12]
 800a9a2:	6923      	ldr	r3, [r4, #16]
 800a9a4:	b94b      	cbnz	r3, 800a9ba <__swsetup_r+0x9a>
 800a9a6:	89a3      	ldrh	r3, [r4, #12]
 800a9a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a9ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9b0:	d003      	beq.n	800a9ba <__swsetup_r+0x9a>
 800a9b2:	4621      	mov	r1, r4
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	f001 f881 	bl	800babc <__smakebuf_r>
 800a9ba:	89a0      	ldrh	r0, [r4, #12]
 800a9bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9c0:	f010 0301 	ands.w	r3, r0, #1
 800a9c4:	d00a      	beq.n	800a9dc <__swsetup_r+0xbc>
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	60a3      	str	r3, [r4, #8]
 800a9ca:	6963      	ldr	r3, [r4, #20]
 800a9cc:	425b      	negs	r3, r3
 800a9ce:	61a3      	str	r3, [r4, #24]
 800a9d0:	6923      	ldr	r3, [r4, #16]
 800a9d2:	b943      	cbnz	r3, 800a9e6 <__swsetup_r+0xc6>
 800a9d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a9d8:	d1ba      	bne.n	800a950 <__swsetup_r+0x30>
 800a9da:	bd70      	pop	{r4, r5, r6, pc}
 800a9dc:	0781      	lsls	r1, r0, #30
 800a9de:	bf58      	it	pl
 800a9e0:	6963      	ldrpl	r3, [r4, #20]
 800a9e2:	60a3      	str	r3, [r4, #8]
 800a9e4:	e7f4      	b.n	800a9d0 <__swsetup_r+0xb0>
 800a9e6:	2000      	movs	r0, #0
 800a9e8:	e7f7      	b.n	800a9da <__swsetup_r+0xba>
 800a9ea:	bf00      	nop
 800a9ec:	2000000c 	.word	0x2000000c
 800a9f0:	0800cb74 	.word	0x0800cb74
 800a9f4:	0800cb94 	.word	0x0800cb94
 800a9f8:	0800cb54 	.word	0x0800cb54

0800a9fc <quorem>:
 800a9fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa00:	6903      	ldr	r3, [r0, #16]
 800aa02:	690c      	ldr	r4, [r1, #16]
 800aa04:	42a3      	cmp	r3, r4
 800aa06:	4607      	mov	r7, r0
 800aa08:	f2c0 8081 	blt.w	800ab0e <quorem+0x112>
 800aa0c:	3c01      	subs	r4, #1
 800aa0e:	f101 0814 	add.w	r8, r1, #20
 800aa12:	f100 0514 	add.w	r5, r0, #20
 800aa16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa1a:	9301      	str	r3, [sp, #4]
 800aa1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa24:	3301      	adds	r3, #1
 800aa26:	429a      	cmp	r2, r3
 800aa28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aa2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa30:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa34:	d331      	bcc.n	800aa9a <quorem+0x9e>
 800aa36:	f04f 0e00 	mov.w	lr, #0
 800aa3a:	4640      	mov	r0, r8
 800aa3c:	46ac      	mov	ip, r5
 800aa3e:	46f2      	mov	sl, lr
 800aa40:	f850 2b04 	ldr.w	r2, [r0], #4
 800aa44:	b293      	uxth	r3, r2
 800aa46:	fb06 e303 	mla	r3, r6, r3, lr
 800aa4a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	ebaa 0303 	sub.w	r3, sl, r3
 800aa54:	f8dc a000 	ldr.w	sl, [ip]
 800aa58:	0c12      	lsrs	r2, r2, #16
 800aa5a:	fa13 f38a 	uxtah	r3, r3, sl
 800aa5e:	fb06 e202 	mla	r2, r6, r2, lr
 800aa62:	9300      	str	r3, [sp, #0]
 800aa64:	9b00      	ldr	r3, [sp, #0]
 800aa66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aa6a:	b292      	uxth	r2, r2
 800aa6c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800aa70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa74:	f8bd 3000 	ldrh.w	r3, [sp]
 800aa78:	4581      	cmp	r9, r0
 800aa7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa7e:	f84c 3b04 	str.w	r3, [ip], #4
 800aa82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aa86:	d2db      	bcs.n	800aa40 <quorem+0x44>
 800aa88:	f855 300b 	ldr.w	r3, [r5, fp]
 800aa8c:	b92b      	cbnz	r3, 800aa9a <quorem+0x9e>
 800aa8e:	9b01      	ldr	r3, [sp, #4]
 800aa90:	3b04      	subs	r3, #4
 800aa92:	429d      	cmp	r5, r3
 800aa94:	461a      	mov	r2, r3
 800aa96:	d32e      	bcc.n	800aaf6 <quorem+0xfa>
 800aa98:	613c      	str	r4, [r7, #16]
 800aa9a:	4638      	mov	r0, r7
 800aa9c:	f001 fae6 	bl	800c06c <__mcmp>
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	db24      	blt.n	800aaee <quorem+0xf2>
 800aaa4:	3601      	adds	r6, #1
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	f04f 0c00 	mov.w	ip, #0
 800aaac:	f858 2b04 	ldr.w	r2, [r8], #4
 800aab0:	f8d0 e000 	ldr.w	lr, [r0]
 800aab4:	b293      	uxth	r3, r2
 800aab6:	ebac 0303 	sub.w	r3, ip, r3
 800aaba:	0c12      	lsrs	r2, r2, #16
 800aabc:	fa13 f38e 	uxtah	r3, r3, lr
 800aac0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aac4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aace:	45c1      	cmp	r9, r8
 800aad0:	f840 3b04 	str.w	r3, [r0], #4
 800aad4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aad8:	d2e8      	bcs.n	800aaac <quorem+0xb0>
 800aada:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aade:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aae2:	b922      	cbnz	r2, 800aaee <quorem+0xf2>
 800aae4:	3b04      	subs	r3, #4
 800aae6:	429d      	cmp	r5, r3
 800aae8:	461a      	mov	r2, r3
 800aaea:	d30a      	bcc.n	800ab02 <quorem+0x106>
 800aaec:	613c      	str	r4, [r7, #16]
 800aaee:	4630      	mov	r0, r6
 800aaf0:	b003      	add	sp, #12
 800aaf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf6:	6812      	ldr	r2, [r2, #0]
 800aaf8:	3b04      	subs	r3, #4
 800aafa:	2a00      	cmp	r2, #0
 800aafc:	d1cc      	bne.n	800aa98 <quorem+0x9c>
 800aafe:	3c01      	subs	r4, #1
 800ab00:	e7c7      	b.n	800aa92 <quorem+0x96>
 800ab02:	6812      	ldr	r2, [r2, #0]
 800ab04:	3b04      	subs	r3, #4
 800ab06:	2a00      	cmp	r2, #0
 800ab08:	d1f0      	bne.n	800aaec <quorem+0xf0>
 800ab0a:	3c01      	subs	r4, #1
 800ab0c:	e7eb      	b.n	800aae6 <quorem+0xea>
 800ab0e:	2000      	movs	r0, #0
 800ab10:	e7ee      	b.n	800aaf0 <quorem+0xf4>
 800ab12:	0000      	movs	r0, r0
 800ab14:	0000      	movs	r0, r0
	...

0800ab18 <_dtoa_r>:
 800ab18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab1c:	ed2d 8b04 	vpush	{d8-d9}
 800ab20:	ec57 6b10 	vmov	r6, r7, d0
 800ab24:	b093      	sub	sp, #76	; 0x4c
 800ab26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ab28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ab2c:	9106      	str	r1, [sp, #24]
 800ab2e:	ee10 aa10 	vmov	sl, s0
 800ab32:	4604      	mov	r4, r0
 800ab34:	9209      	str	r2, [sp, #36]	; 0x24
 800ab36:	930c      	str	r3, [sp, #48]	; 0x30
 800ab38:	46bb      	mov	fp, r7
 800ab3a:	b975      	cbnz	r5, 800ab5a <_dtoa_r+0x42>
 800ab3c:	2010      	movs	r0, #16
 800ab3e:	f000 fffd 	bl	800bb3c <malloc>
 800ab42:	4602      	mov	r2, r0
 800ab44:	6260      	str	r0, [r4, #36]	; 0x24
 800ab46:	b920      	cbnz	r0, 800ab52 <_dtoa_r+0x3a>
 800ab48:	4ba7      	ldr	r3, [pc, #668]	; (800ade8 <_dtoa_r+0x2d0>)
 800ab4a:	21ea      	movs	r1, #234	; 0xea
 800ab4c:	48a7      	ldr	r0, [pc, #668]	; (800adec <_dtoa_r+0x2d4>)
 800ab4e:	f001 fe45 	bl	800c7dc <__assert_func>
 800ab52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ab56:	6005      	str	r5, [r0, #0]
 800ab58:	60c5      	str	r5, [r0, #12]
 800ab5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab5c:	6819      	ldr	r1, [r3, #0]
 800ab5e:	b151      	cbz	r1, 800ab76 <_dtoa_r+0x5e>
 800ab60:	685a      	ldr	r2, [r3, #4]
 800ab62:	604a      	str	r2, [r1, #4]
 800ab64:	2301      	movs	r3, #1
 800ab66:	4093      	lsls	r3, r2
 800ab68:	608b      	str	r3, [r1, #8]
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f001 f83c 	bl	800bbe8 <_Bfree>
 800ab70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab72:	2200      	movs	r2, #0
 800ab74:	601a      	str	r2, [r3, #0]
 800ab76:	1e3b      	subs	r3, r7, #0
 800ab78:	bfaa      	itet	ge
 800ab7a:	2300      	movge	r3, #0
 800ab7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ab80:	f8c8 3000 	strge.w	r3, [r8]
 800ab84:	4b9a      	ldr	r3, [pc, #616]	; (800adf0 <_dtoa_r+0x2d8>)
 800ab86:	bfbc      	itt	lt
 800ab88:	2201      	movlt	r2, #1
 800ab8a:	f8c8 2000 	strlt.w	r2, [r8]
 800ab8e:	ea33 030b 	bics.w	r3, r3, fp
 800ab92:	d11b      	bne.n	800abcc <_dtoa_r+0xb4>
 800ab94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab96:	f242 730f 	movw	r3, #9999	; 0x270f
 800ab9a:	6013      	str	r3, [r2, #0]
 800ab9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aba0:	4333      	orrs	r3, r6
 800aba2:	f000 8592 	beq.w	800b6ca <_dtoa_r+0xbb2>
 800aba6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aba8:	b963      	cbnz	r3, 800abc4 <_dtoa_r+0xac>
 800abaa:	4b92      	ldr	r3, [pc, #584]	; (800adf4 <_dtoa_r+0x2dc>)
 800abac:	e022      	b.n	800abf4 <_dtoa_r+0xdc>
 800abae:	4b92      	ldr	r3, [pc, #584]	; (800adf8 <_dtoa_r+0x2e0>)
 800abb0:	9301      	str	r3, [sp, #4]
 800abb2:	3308      	adds	r3, #8
 800abb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800abb6:	6013      	str	r3, [r2, #0]
 800abb8:	9801      	ldr	r0, [sp, #4]
 800abba:	b013      	add	sp, #76	; 0x4c
 800abbc:	ecbd 8b04 	vpop	{d8-d9}
 800abc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abc4:	4b8b      	ldr	r3, [pc, #556]	; (800adf4 <_dtoa_r+0x2dc>)
 800abc6:	9301      	str	r3, [sp, #4]
 800abc8:	3303      	adds	r3, #3
 800abca:	e7f3      	b.n	800abb4 <_dtoa_r+0x9c>
 800abcc:	2200      	movs	r2, #0
 800abce:	2300      	movs	r3, #0
 800abd0:	4650      	mov	r0, sl
 800abd2:	4659      	mov	r1, fp
 800abd4:	f7f5 ff78 	bl	8000ac8 <__aeabi_dcmpeq>
 800abd8:	ec4b ab19 	vmov	d9, sl, fp
 800abdc:	4680      	mov	r8, r0
 800abde:	b158      	cbz	r0, 800abf8 <_dtoa_r+0xe0>
 800abe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800abe2:	2301      	movs	r3, #1
 800abe4:	6013      	str	r3, [r2, #0]
 800abe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f000 856b 	beq.w	800b6c4 <_dtoa_r+0xbac>
 800abee:	4883      	ldr	r0, [pc, #524]	; (800adfc <_dtoa_r+0x2e4>)
 800abf0:	6018      	str	r0, [r3, #0]
 800abf2:	1e43      	subs	r3, r0, #1
 800abf4:	9301      	str	r3, [sp, #4]
 800abf6:	e7df      	b.n	800abb8 <_dtoa_r+0xa0>
 800abf8:	ec4b ab10 	vmov	d0, sl, fp
 800abfc:	aa10      	add	r2, sp, #64	; 0x40
 800abfe:	a911      	add	r1, sp, #68	; 0x44
 800ac00:	4620      	mov	r0, r4
 800ac02:	f001 fad9 	bl	800c1b8 <__d2b>
 800ac06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ac0a:	ee08 0a10 	vmov	s16, r0
 800ac0e:	2d00      	cmp	r5, #0
 800ac10:	f000 8084 	beq.w	800ad1c <_dtoa_r+0x204>
 800ac14:	ee19 3a90 	vmov	r3, s19
 800ac18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ac20:	4656      	mov	r6, sl
 800ac22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ac26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ac2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ac2e:	4b74      	ldr	r3, [pc, #464]	; (800ae00 <_dtoa_r+0x2e8>)
 800ac30:	2200      	movs	r2, #0
 800ac32:	4630      	mov	r0, r6
 800ac34:	4639      	mov	r1, r7
 800ac36:	f7f5 fb27 	bl	8000288 <__aeabi_dsub>
 800ac3a:	a365      	add	r3, pc, #404	; (adr r3, 800add0 <_dtoa_r+0x2b8>)
 800ac3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac40:	f7f5 fcda 	bl	80005f8 <__aeabi_dmul>
 800ac44:	a364      	add	r3, pc, #400	; (adr r3, 800add8 <_dtoa_r+0x2c0>)
 800ac46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4a:	f7f5 fb1f 	bl	800028c <__adddf3>
 800ac4e:	4606      	mov	r6, r0
 800ac50:	4628      	mov	r0, r5
 800ac52:	460f      	mov	r7, r1
 800ac54:	f7f5 fc66 	bl	8000524 <__aeabi_i2d>
 800ac58:	a361      	add	r3, pc, #388	; (adr r3, 800ade0 <_dtoa_r+0x2c8>)
 800ac5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5e:	f7f5 fccb 	bl	80005f8 <__aeabi_dmul>
 800ac62:	4602      	mov	r2, r0
 800ac64:	460b      	mov	r3, r1
 800ac66:	4630      	mov	r0, r6
 800ac68:	4639      	mov	r1, r7
 800ac6a:	f7f5 fb0f 	bl	800028c <__adddf3>
 800ac6e:	4606      	mov	r6, r0
 800ac70:	460f      	mov	r7, r1
 800ac72:	f7f5 ff71 	bl	8000b58 <__aeabi_d2iz>
 800ac76:	2200      	movs	r2, #0
 800ac78:	9000      	str	r0, [sp, #0]
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	4639      	mov	r1, r7
 800ac80:	f7f5 ff2c 	bl	8000adc <__aeabi_dcmplt>
 800ac84:	b150      	cbz	r0, 800ac9c <_dtoa_r+0x184>
 800ac86:	9800      	ldr	r0, [sp, #0]
 800ac88:	f7f5 fc4c 	bl	8000524 <__aeabi_i2d>
 800ac8c:	4632      	mov	r2, r6
 800ac8e:	463b      	mov	r3, r7
 800ac90:	f7f5 ff1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac94:	b910      	cbnz	r0, 800ac9c <_dtoa_r+0x184>
 800ac96:	9b00      	ldr	r3, [sp, #0]
 800ac98:	3b01      	subs	r3, #1
 800ac9a:	9300      	str	r3, [sp, #0]
 800ac9c:	9b00      	ldr	r3, [sp, #0]
 800ac9e:	2b16      	cmp	r3, #22
 800aca0:	d85a      	bhi.n	800ad58 <_dtoa_r+0x240>
 800aca2:	9a00      	ldr	r2, [sp, #0]
 800aca4:	4b57      	ldr	r3, [pc, #348]	; (800ae04 <_dtoa_r+0x2ec>)
 800aca6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acae:	ec51 0b19 	vmov	r0, r1, d9
 800acb2:	f7f5 ff13 	bl	8000adc <__aeabi_dcmplt>
 800acb6:	2800      	cmp	r0, #0
 800acb8:	d050      	beq.n	800ad5c <_dtoa_r+0x244>
 800acba:	9b00      	ldr	r3, [sp, #0]
 800acbc:	3b01      	subs	r3, #1
 800acbe:	9300      	str	r3, [sp, #0]
 800acc0:	2300      	movs	r3, #0
 800acc2:	930b      	str	r3, [sp, #44]	; 0x2c
 800acc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acc6:	1b5d      	subs	r5, r3, r5
 800acc8:	1e6b      	subs	r3, r5, #1
 800acca:	9305      	str	r3, [sp, #20]
 800accc:	bf45      	ittet	mi
 800acce:	f1c5 0301 	rsbmi	r3, r5, #1
 800acd2:	9304      	strmi	r3, [sp, #16]
 800acd4:	2300      	movpl	r3, #0
 800acd6:	2300      	movmi	r3, #0
 800acd8:	bf4c      	ite	mi
 800acda:	9305      	strmi	r3, [sp, #20]
 800acdc:	9304      	strpl	r3, [sp, #16]
 800acde:	9b00      	ldr	r3, [sp, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	db3d      	blt.n	800ad60 <_dtoa_r+0x248>
 800ace4:	9b05      	ldr	r3, [sp, #20]
 800ace6:	9a00      	ldr	r2, [sp, #0]
 800ace8:	920a      	str	r2, [sp, #40]	; 0x28
 800acea:	4413      	add	r3, r2
 800acec:	9305      	str	r3, [sp, #20]
 800acee:	2300      	movs	r3, #0
 800acf0:	9307      	str	r3, [sp, #28]
 800acf2:	9b06      	ldr	r3, [sp, #24]
 800acf4:	2b09      	cmp	r3, #9
 800acf6:	f200 8089 	bhi.w	800ae0c <_dtoa_r+0x2f4>
 800acfa:	2b05      	cmp	r3, #5
 800acfc:	bfc4      	itt	gt
 800acfe:	3b04      	subgt	r3, #4
 800ad00:	9306      	strgt	r3, [sp, #24]
 800ad02:	9b06      	ldr	r3, [sp, #24]
 800ad04:	f1a3 0302 	sub.w	r3, r3, #2
 800ad08:	bfcc      	ite	gt
 800ad0a:	2500      	movgt	r5, #0
 800ad0c:	2501      	movle	r5, #1
 800ad0e:	2b03      	cmp	r3, #3
 800ad10:	f200 8087 	bhi.w	800ae22 <_dtoa_r+0x30a>
 800ad14:	e8df f003 	tbb	[pc, r3]
 800ad18:	59383a2d 	.word	0x59383a2d
 800ad1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ad20:	441d      	add	r5, r3
 800ad22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ad26:	2b20      	cmp	r3, #32
 800ad28:	bfc1      	itttt	gt
 800ad2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ad2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ad32:	fa0b f303 	lslgt.w	r3, fp, r3
 800ad36:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ad3a:	bfda      	itte	le
 800ad3c:	f1c3 0320 	rsble	r3, r3, #32
 800ad40:	fa06 f003 	lslle.w	r0, r6, r3
 800ad44:	4318      	orrgt	r0, r3
 800ad46:	f7f5 fbdd 	bl	8000504 <__aeabi_ui2d>
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	4606      	mov	r6, r0
 800ad4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ad52:	3d01      	subs	r5, #1
 800ad54:	930e      	str	r3, [sp, #56]	; 0x38
 800ad56:	e76a      	b.n	800ac2e <_dtoa_r+0x116>
 800ad58:	2301      	movs	r3, #1
 800ad5a:	e7b2      	b.n	800acc2 <_dtoa_r+0x1aa>
 800ad5c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ad5e:	e7b1      	b.n	800acc4 <_dtoa_r+0x1ac>
 800ad60:	9b04      	ldr	r3, [sp, #16]
 800ad62:	9a00      	ldr	r2, [sp, #0]
 800ad64:	1a9b      	subs	r3, r3, r2
 800ad66:	9304      	str	r3, [sp, #16]
 800ad68:	4253      	negs	r3, r2
 800ad6a:	9307      	str	r3, [sp, #28]
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	930a      	str	r3, [sp, #40]	; 0x28
 800ad70:	e7bf      	b.n	800acf2 <_dtoa_r+0x1da>
 800ad72:	2300      	movs	r3, #0
 800ad74:	9308      	str	r3, [sp, #32]
 800ad76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	dc55      	bgt.n	800ae28 <_dtoa_r+0x310>
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ad82:	461a      	mov	r2, r3
 800ad84:	9209      	str	r2, [sp, #36]	; 0x24
 800ad86:	e00c      	b.n	800ada2 <_dtoa_r+0x28a>
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e7f3      	b.n	800ad74 <_dtoa_r+0x25c>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad90:	9308      	str	r3, [sp, #32]
 800ad92:	9b00      	ldr	r3, [sp, #0]
 800ad94:	4413      	add	r3, r2
 800ad96:	9302      	str	r3, [sp, #8]
 800ad98:	3301      	adds	r3, #1
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	9303      	str	r3, [sp, #12]
 800ad9e:	bfb8      	it	lt
 800ada0:	2301      	movlt	r3, #1
 800ada2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ada4:	2200      	movs	r2, #0
 800ada6:	6042      	str	r2, [r0, #4]
 800ada8:	2204      	movs	r2, #4
 800adaa:	f102 0614 	add.w	r6, r2, #20
 800adae:	429e      	cmp	r6, r3
 800adb0:	6841      	ldr	r1, [r0, #4]
 800adb2:	d93d      	bls.n	800ae30 <_dtoa_r+0x318>
 800adb4:	4620      	mov	r0, r4
 800adb6:	f000 fed7 	bl	800bb68 <_Balloc>
 800adba:	9001      	str	r0, [sp, #4]
 800adbc:	2800      	cmp	r0, #0
 800adbe:	d13b      	bne.n	800ae38 <_dtoa_r+0x320>
 800adc0:	4b11      	ldr	r3, [pc, #68]	; (800ae08 <_dtoa_r+0x2f0>)
 800adc2:	4602      	mov	r2, r0
 800adc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800adc8:	e6c0      	b.n	800ab4c <_dtoa_r+0x34>
 800adca:	2301      	movs	r3, #1
 800adcc:	e7df      	b.n	800ad8e <_dtoa_r+0x276>
 800adce:	bf00      	nop
 800add0:	636f4361 	.word	0x636f4361
 800add4:	3fd287a7 	.word	0x3fd287a7
 800add8:	8b60c8b3 	.word	0x8b60c8b3
 800addc:	3fc68a28 	.word	0x3fc68a28
 800ade0:	509f79fb 	.word	0x509f79fb
 800ade4:	3fd34413 	.word	0x3fd34413
 800ade8:	0800cad1 	.word	0x0800cad1
 800adec:	0800cae8 	.word	0x0800cae8
 800adf0:	7ff00000 	.word	0x7ff00000
 800adf4:	0800cacd 	.word	0x0800cacd
 800adf8:	0800cac4 	.word	0x0800cac4
 800adfc:	0800caa1 	.word	0x0800caa1
 800ae00:	3ff80000 	.word	0x3ff80000
 800ae04:	0800cc38 	.word	0x0800cc38
 800ae08:	0800cb43 	.word	0x0800cb43
 800ae0c:	2501      	movs	r5, #1
 800ae0e:	2300      	movs	r3, #0
 800ae10:	9306      	str	r3, [sp, #24]
 800ae12:	9508      	str	r5, [sp, #32]
 800ae14:	f04f 33ff 	mov.w	r3, #4294967295
 800ae18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	2312      	movs	r3, #18
 800ae20:	e7b0      	b.n	800ad84 <_dtoa_r+0x26c>
 800ae22:	2301      	movs	r3, #1
 800ae24:	9308      	str	r3, [sp, #32]
 800ae26:	e7f5      	b.n	800ae14 <_dtoa_r+0x2fc>
 800ae28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ae2e:	e7b8      	b.n	800ada2 <_dtoa_r+0x28a>
 800ae30:	3101      	adds	r1, #1
 800ae32:	6041      	str	r1, [r0, #4]
 800ae34:	0052      	lsls	r2, r2, #1
 800ae36:	e7b8      	b.n	800adaa <_dtoa_r+0x292>
 800ae38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae3a:	9a01      	ldr	r2, [sp, #4]
 800ae3c:	601a      	str	r2, [r3, #0]
 800ae3e:	9b03      	ldr	r3, [sp, #12]
 800ae40:	2b0e      	cmp	r3, #14
 800ae42:	f200 809d 	bhi.w	800af80 <_dtoa_r+0x468>
 800ae46:	2d00      	cmp	r5, #0
 800ae48:	f000 809a 	beq.w	800af80 <_dtoa_r+0x468>
 800ae4c:	9b00      	ldr	r3, [sp, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	dd32      	ble.n	800aeb8 <_dtoa_r+0x3a0>
 800ae52:	4ab7      	ldr	r2, [pc, #732]	; (800b130 <_dtoa_r+0x618>)
 800ae54:	f003 030f 	and.w	r3, r3, #15
 800ae58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ae5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae60:	9b00      	ldr	r3, [sp, #0]
 800ae62:	05d8      	lsls	r0, r3, #23
 800ae64:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ae68:	d516      	bpl.n	800ae98 <_dtoa_r+0x380>
 800ae6a:	4bb2      	ldr	r3, [pc, #712]	; (800b134 <_dtoa_r+0x61c>)
 800ae6c:	ec51 0b19 	vmov	r0, r1, d9
 800ae70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae74:	f7f5 fcea 	bl	800084c <__aeabi_ddiv>
 800ae78:	f007 070f 	and.w	r7, r7, #15
 800ae7c:	4682      	mov	sl, r0
 800ae7e:	468b      	mov	fp, r1
 800ae80:	2503      	movs	r5, #3
 800ae82:	4eac      	ldr	r6, [pc, #688]	; (800b134 <_dtoa_r+0x61c>)
 800ae84:	b957      	cbnz	r7, 800ae9c <_dtoa_r+0x384>
 800ae86:	4642      	mov	r2, r8
 800ae88:	464b      	mov	r3, r9
 800ae8a:	4650      	mov	r0, sl
 800ae8c:	4659      	mov	r1, fp
 800ae8e:	f7f5 fcdd 	bl	800084c <__aeabi_ddiv>
 800ae92:	4682      	mov	sl, r0
 800ae94:	468b      	mov	fp, r1
 800ae96:	e028      	b.n	800aeea <_dtoa_r+0x3d2>
 800ae98:	2502      	movs	r5, #2
 800ae9a:	e7f2      	b.n	800ae82 <_dtoa_r+0x36a>
 800ae9c:	07f9      	lsls	r1, r7, #31
 800ae9e:	d508      	bpl.n	800aeb2 <_dtoa_r+0x39a>
 800aea0:	4640      	mov	r0, r8
 800aea2:	4649      	mov	r1, r9
 800aea4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aea8:	f7f5 fba6 	bl	80005f8 <__aeabi_dmul>
 800aeac:	3501      	adds	r5, #1
 800aeae:	4680      	mov	r8, r0
 800aeb0:	4689      	mov	r9, r1
 800aeb2:	107f      	asrs	r7, r7, #1
 800aeb4:	3608      	adds	r6, #8
 800aeb6:	e7e5      	b.n	800ae84 <_dtoa_r+0x36c>
 800aeb8:	f000 809b 	beq.w	800aff2 <_dtoa_r+0x4da>
 800aebc:	9b00      	ldr	r3, [sp, #0]
 800aebe:	4f9d      	ldr	r7, [pc, #628]	; (800b134 <_dtoa_r+0x61c>)
 800aec0:	425e      	negs	r6, r3
 800aec2:	4b9b      	ldr	r3, [pc, #620]	; (800b130 <_dtoa_r+0x618>)
 800aec4:	f006 020f 	and.w	r2, r6, #15
 800aec8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed0:	ec51 0b19 	vmov	r0, r1, d9
 800aed4:	f7f5 fb90 	bl	80005f8 <__aeabi_dmul>
 800aed8:	1136      	asrs	r6, r6, #4
 800aeda:	4682      	mov	sl, r0
 800aedc:	468b      	mov	fp, r1
 800aede:	2300      	movs	r3, #0
 800aee0:	2502      	movs	r5, #2
 800aee2:	2e00      	cmp	r6, #0
 800aee4:	d17a      	bne.n	800afdc <_dtoa_r+0x4c4>
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d1d3      	bne.n	800ae92 <_dtoa_r+0x37a>
 800aeea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	f000 8082 	beq.w	800aff6 <_dtoa_r+0x4de>
 800aef2:	4b91      	ldr	r3, [pc, #580]	; (800b138 <_dtoa_r+0x620>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	4650      	mov	r0, sl
 800aef8:	4659      	mov	r1, fp
 800aefa:	f7f5 fdef 	bl	8000adc <__aeabi_dcmplt>
 800aefe:	2800      	cmp	r0, #0
 800af00:	d079      	beq.n	800aff6 <_dtoa_r+0x4de>
 800af02:	9b03      	ldr	r3, [sp, #12]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d076      	beq.n	800aff6 <_dtoa_r+0x4de>
 800af08:	9b02      	ldr	r3, [sp, #8]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	dd36      	ble.n	800af7c <_dtoa_r+0x464>
 800af0e:	9b00      	ldr	r3, [sp, #0]
 800af10:	4650      	mov	r0, sl
 800af12:	4659      	mov	r1, fp
 800af14:	1e5f      	subs	r7, r3, #1
 800af16:	2200      	movs	r2, #0
 800af18:	4b88      	ldr	r3, [pc, #544]	; (800b13c <_dtoa_r+0x624>)
 800af1a:	f7f5 fb6d 	bl	80005f8 <__aeabi_dmul>
 800af1e:	9e02      	ldr	r6, [sp, #8]
 800af20:	4682      	mov	sl, r0
 800af22:	468b      	mov	fp, r1
 800af24:	3501      	adds	r5, #1
 800af26:	4628      	mov	r0, r5
 800af28:	f7f5 fafc 	bl	8000524 <__aeabi_i2d>
 800af2c:	4652      	mov	r2, sl
 800af2e:	465b      	mov	r3, fp
 800af30:	f7f5 fb62 	bl	80005f8 <__aeabi_dmul>
 800af34:	4b82      	ldr	r3, [pc, #520]	; (800b140 <_dtoa_r+0x628>)
 800af36:	2200      	movs	r2, #0
 800af38:	f7f5 f9a8 	bl	800028c <__adddf3>
 800af3c:	46d0      	mov	r8, sl
 800af3e:	46d9      	mov	r9, fp
 800af40:	4682      	mov	sl, r0
 800af42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800af46:	2e00      	cmp	r6, #0
 800af48:	d158      	bne.n	800affc <_dtoa_r+0x4e4>
 800af4a:	4b7e      	ldr	r3, [pc, #504]	; (800b144 <_dtoa_r+0x62c>)
 800af4c:	2200      	movs	r2, #0
 800af4e:	4640      	mov	r0, r8
 800af50:	4649      	mov	r1, r9
 800af52:	f7f5 f999 	bl	8000288 <__aeabi_dsub>
 800af56:	4652      	mov	r2, sl
 800af58:	465b      	mov	r3, fp
 800af5a:	4680      	mov	r8, r0
 800af5c:	4689      	mov	r9, r1
 800af5e:	f7f5 fddb 	bl	8000b18 <__aeabi_dcmpgt>
 800af62:	2800      	cmp	r0, #0
 800af64:	f040 8295 	bne.w	800b492 <_dtoa_r+0x97a>
 800af68:	4652      	mov	r2, sl
 800af6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800af6e:	4640      	mov	r0, r8
 800af70:	4649      	mov	r1, r9
 800af72:	f7f5 fdb3 	bl	8000adc <__aeabi_dcmplt>
 800af76:	2800      	cmp	r0, #0
 800af78:	f040 8289 	bne.w	800b48e <_dtoa_r+0x976>
 800af7c:	ec5b ab19 	vmov	sl, fp, d9
 800af80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af82:	2b00      	cmp	r3, #0
 800af84:	f2c0 8148 	blt.w	800b218 <_dtoa_r+0x700>
 800af88:	9a00      	ldr	r2, [sp, #0]
 800af8a:	2a0e      	cmp	r2, #14
 800af8c:	f300 8144 	bgt.w	800b218 <_dtoa_r+0x700>
 800af90:	4b67      	ldr	r3, [pc, #412]	; (800b130 <_dtoa_r+0x618>)
 800af92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af96:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	f280 80d5 	bge.w	800b14c <_dtoa_r+0x634>
 800afa2:	9b03      	ldr	r3, [sp, #12]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	f300 80d1 	bgt.w	800b14c <_dtoa_r+0x634>
 800afaa:	f040 826f 	bne.w	800b48c <_dtoa_r+0x974>
 800afae:	4b65      	ldr	r3, [pc, #404]	; (800b144 <_dtoa_r+0x62c>)
 800afb0:	2200      	movs	r2, #0
 800afb2:	4640      	mov	r0, r8
 800afb4:	4649      	mov	r1, r9
 800afb6:	f7f5 fb1f 	bl	80005f8 <__aeabi_dmul>
 800afba:	4652      	mov	r2, sl
 800afbc:	465b      	mov	r3, fp
 800afbe:	f7f5 fda1 	bl	8000b04 <__aeabi_dcmpge>
 800afc2:	9e03      	ldr	r6, [sp, #12]
 800afc4:	4637      	mov	r7, r6
 800afc6:	2800      	cmp	r0, #0
 800afc8:	f040 8245 	bne.w	800b456 <_dtoa_r+0x93e>
 800afcc:	9d01      	ldr	r5, [sp, #4]
 800afce:	2331      	movs	r3, #49	; 0x31
 800afd0:	f805 3b01 	strb.w	r3, [r5], #1
 800afd4:	9b00      	ldr	r3, [sp, #0]
 800afd6:	3301      	adds	r3, #1
 800afd8:	9300      	str	r3, [sp, #0]
 800afda:	e240      	b.n	800b45e <_dtoa_r+0x946>
 800afdc:	07f2      	lsls	r2, r6, #31
 800afde:	d505      	bpl.n	800afec <_dtoa_r+0x4d4>
 800afe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afe4:	f7f5 fb08 	bl	80005f8 <__aeabi_dmul>
 800afe8:	3501      	adds	r5, #1
 800afea:	2301      	movs	r3, #1
 800afec:	1076      	asrs	r6, r6, #1
 800afee:	3708      	adds	r7, #8
 800aff0:	e777      	b.n	800aee2 <_dtoa_r+0x3ca>
 800aff2:	2502      	movs	r5, #2
 800aff4:	e779      	b.n	800aeea <_dtoa_r+0x3d2>
 800aff6:	9f00      	ldr	r7, [sp, #0]
 800aff8:	9e03      	ldr	r6, [sp, #12]
 800affa:	e794      	b.n	800af26 <_dtoa_r+0x40e>
 800affc:	9901      	ldr	r1, [sp, #4]
 800affe:	4b4c      	ldr	r3, [pc, #304]	; (800b130 <_dtoa_r+0x618>)
 800b000:	4431      	add	r1, r6
 800b002:	910d      	str	r1, [sp, #52]	; 0x34
 800b004:	9908      	ldr	r1, [sp, #32]
 800b006:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b00a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b00e:	2900      	cmp	r1, #0
 800b010:	d043      	beq.n	800b09a <_dtoa_r+0x582>
 800b012:	494d      	ldr	r1, [pc, #308]	; (800b148 <_dtoa_r+0x630>)
 800b014:	2000      	movs	r0, #0
 800b016:	f7f5 fc19 	bl	800084c <__aeabi_ddiv>
 800b01a:	4652      	mov	r2, sl
 800b01c:	465b      	mov	r3, fp
 800b01e:	f7f5 f933 	bl	8000288 <__aeabi_dsub>
 800b022:	9d01      	ldr	r5, [sp, #4]
 800b024:	4682      	mov	sl, r0
 800b026:	468b      	mov	fp, r1
 800b028:	4649      	mov	r1, r9
 800b02a:	4640      	mov	r0, r8
 800b02c:	f7f5 fd94 	bl	8000b58 <__aeabi_d2iz>
 800b030:	4606      	mov	r6, r0
 800b032:	f7f5 fa77 	bl	8000524 <__aeabi_i2d>
 800b036:	4602      	mov	r2, r0
 800b038:	460b      	mov	r3, r1
 800b03a:	4640      	mov	r0, r8
 800b03c:	4649      	mov	r1, r9
 800b03e:	f7f5 f923 	bl	8000288 <__aeabi_dsub>
 800b042:	3630      	adds	r6, #48	; 0x30
 800b044:	f805 6b01 	strb.w	r6, [r5], #1
 800b048:	4652      	mov	r2, sl
 800b04a:	465b      	mov	r3, fp
 800b04c:	4680      	mov	r8, r0
 800b04e:	4689      	mov	r9, r1
 800b050:	f7f5 fd44 	bl	8000adc <__aeabi_dcmplt>
 800b054:	2800      	cmp	r0, #0
 800b056:	d163      	bne.n	800b120 <_dtoa_r+0x608>
 800b058:	4642      	mov	r2, r8
 800b05a:	464b      	mov	r3, r9
 800b05c:	4936      	ldr	r1, [pc, #216]	; (800b138 <_dtoa_r+0x620>)
 800b05e:	2000      	movs	r0, #0
 800b060:	f7f5 f912 	bl	8000288 <__aeabi_dsub>
 800b064:	4652      	mov	r2, sl
 800b066:	465b      	mov	r3, fp
 800b068:	f7f5 fd38 	bl	8000adc <__aeabi_dcmplt>
 800b06c:	2800      	cmp	r0, #0
 800b06e:	f040 80b5 	bne.w	800b1dc <_dtoa_r+0x6c4>
 800b072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b074:	429d      	cmp	r5, r3
 800b076:	d081      	beq.n	800af7c <_dtoa_r+0x464>
 800b078:	4b30      	ldr	r3, [pc, #192]	; (800b13c <_dtoa_r+0x624>)
 800b07a:	2200      	movs	r2, #0
 800b07c:	4650      	mov	r0, sl
 800b07e:	4659      	mov	r1, fp
 800b080:	f7f5 faba 	bl	80005f8 <__aeabi_dmul>
 800b084:	4b2d      	ldr	r3, [pc, #180]	; (800b13c <_dtoa_r+0x624>)
 800b086:	4682      	mov	sl, r0
 800b088:	468b      	mov	fp, r1
 800b08a:	4640      	mov	r0, r8
 800b08c:	4649      	mov	r1, r9
 800b08e:	2200      	movs	r2, #0
 800b090:	f7f5 fab2 	bl	80005f8 <__aeabi_dmul>
 800b094:	4680      	mov	r8, r0
 800b096:	4689      	mov	r9, r1
 800b098:	e7c6      	b.n	800b028 <_dtoa_r+0x510>
 800b09a:	4650      	mov	r0, sl
 800b09c:	4659      	mov	r1, fp
 800b09e:	f7f5 faab 	bl	80005f8 <__aeabi_dmul>
 800b0a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0a4:	9d01      	ldr	r5, [sp, #4]
 800b0a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0a8:	4682      	mov	sl, r0
 800b0aa:	468b      	mov	fp, r1
 800b0ac:	4649      	mov	r1, r9
 800b0ae:	4640      	mov	r0, r8
 800b0b0:	f7f5 fd52 	bl	8000b58 <__aeabi_d2iz>
 800b0b4:	4606      	mov	r6, r0
 800b0b6:	f7f5 fa35 	bl	8000524 <__aeabi_i2d>
 800b0ba:	3630      	adds	r6, #48	; 0x30
 800b0bc:	4602      	mov	r2, r0
 800b0be:	460b      	mov	r3, r1
 800b0c0:	4640      	mov	r0, r8
 800b0c2:	4649      	mov	r1, r9
 800b0c4:	f7f5 f8e0 	bl	8000288 <__aeabi_dsub>
 800b0c8:	f805 6b01 	strb.w	r6, [r5], #1
 800b0cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0ce:	429d      	cmp	r5, r3
 800b0d0:	4680      	mov	r8, r0
 800b0d2:	4689      	mov	r9, r1
 800b0d4:	f04f 0200 	mov.w	r2, #0
 800b0d8:	d124      	bne.n	800b124 <_dtoa_r+0x60c>
 800b0da:	4b1b      	ldr	r3, [pc, #108]	; (800b148 <_dtoa_r+0x630>)
 800b0dc:	4650      	mov	r0, sl
 800b0de:	4659      	mov	r1, fp
 800b0e0:	f7f5 f8d4 	bl	800028c <__adddf3>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	4640      	mov	r0, r8
 800b0ea:	4649      	mov	r1, r9
 800b0ec:	f7f5 fd14 	bl	8000b18 <__aeabi_dcmpgt>
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	d173      	bne.n	800b1dc <_dtoa_r+0x6c4>
 800b0f4:	4652      	mov	r2, sl
 800b0f6:	465b      	mov	r3, fp
 800b0f8:	4913      	ldr	r1, [pc, #76]	; (800b148 <_dtoa_r+0x630>)
 800b0fa:	2000      	movs	r0, #0
 800b0fc:	f7f5 f8c4 	bl	8000288 <__aeabi_dsub>
 800b100:	4602      	mov	r2, r0
 800b102:	460b      	mov	r3, r1
 800b104:	4640      	mov	r0, r8
 800b106:	4649      	mov	r1, r9
 800b108:	f7f5 fce8 	bl	8000adc <__aeabi_dcmplt>
 800b10c:	2800      	cmp	r0, #0
 800b10e:	f43f af35 	beq.w	800af7c <_dtoa_r+0x464>
 800b112:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b114:	1e6b      	subs	r3, r5, #1
 800b116:	930f      	str	r3, [sp, #60]	; 0x3c
 800b118:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b11c:	2b30      	cmp	r3, #48	; 0x30
 800b11e:	d0f8      	beq.n	800b112 <_dtoa_r+0x5fa>
 800b120:	9700      	str	r7, [sp, #0]
 800b122:	e049      	b.n	800b1b8 <_dtoa_r+0x6a0>
 800b124:	4b05      	ldr	r3, [pc, #20]	; (800b13c <_dtoa_r+0x624>)
 800b126:	f7f5 fa67 	bl	80005f8 <__aeabi_dmul>
 800b12a:	4680      	mov	r8, r0
 800b12c:	4689      	mov	r9, r1
 800b12e:	e7bd      	b.n	800b0ac <_dtoa_r+0x594>
 800b130:	0800cc38 	.word	0x0800cc38
 800b134:	0800cc10 	.word	0x0800cc10
 800b138:	3ff00000 	.word	0x3ff00000
 800b13c:	40240000 	.word	0x40240000
 800b140:	401c0000 	.word	0x401c0000
 800b144:	40140000 	.word	0x40140000
 800b148:	3fe00000 	.word	0x3fe00000
 800b14c:	9d01      	ldr	r5, [sp, #4]
 800b14e:	4656      	mov	r6, sl
 800b150:	465f      	mov	r7, fp
 800b152:	4642      	mov	r2, r8
 800b154:	464b      	mov	r3, r9
 800b156:	4630      	mov	r0, r6
 800b158:	4639      	mov	r1, r7
 800b15a:	f7f5 fb77 	bl	800084c <__aeabi_ddiv>
 800b15e:	f7f5 fcfb 	bl	8000b58 <__aeabi_d2iz>
 800b162:	4682      	mov	sl, r0
 800b164:	f7f5 f9de 	bl	8000524 <__aeabi_i2d>
 800b168:	4642      	mov	r2, r8
 800b16a:	464b      	mov	r3, r9
 800b16c:	f7f5 fa44 	bl	80005f8 <__aeabi_dmul>
 800b170:	4602      	mov	r2, r0
 800b172:	460b      	mov	r3, r1
 800b174:	4630      	mov	r0, r6
 800b176:	4639      	mov	r1, r7
 800b178:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b17c:	f7f5 f884 	bl	8000288 <__aeabi_dsub>
 800b180:	f805 6b01 	strb.w	r6, [r5], #1
 800b184:	9e01      	ldr	r6, [sp, #4]
 800b186:	9f03      	ldr	r7, [sp, #12]
 800b188:	1bae      	subs	r6, r5, r6
 800b18a:	42b7      	cmp	r7, r6
 800b18c:	4602      	mov	r2, r0
 800b18e:	460b      	mov	r3, r1
 800b190:	d135      	bne.n	800b1fe <_dtoa_r+0x6e6>
 800b192:	f7f5 f87b 	bl	800028c <__adddf3>
 800b196:	4642      	mov	r2, r8
 800b198:	464b      	mov	r3, r9
 800b19a:	4606      	mov	r6, r0
 800b19c:	460f      	mov	r7, r1
 800b19e:	f7f5 fcbb 	bl	8000b18 <__aeabi_dcmpgt>
 800b1a2:	b9d0      	cbnz	r0, 800b1da <_dtoa_r+0x6c2>
 800b1a4:	4642      	mov	r2, r8
 800b1a6:	464b      	mov	r3, r9
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	4639      	mov	r1, r7
 800b1ac:	f7f5 fc8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1b0:	b110      	cbz	r0, 800b1b8 <_dtoa_r+0x6a0>
 800b1b2:	f01a 0f01 	tst.w	sl, #1
 800b1b6:	d110      	bne.n	800b1da <_dtoa_r+0x6c2>
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	ee18 1a10 	vmov	r1, s16
 800b1be:	f000 fd13 	bl	800bbe8 <_Bfree>
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	9800      	ldr	r0, [sp, #0]
 800b1c6:	702b      	strb	r3, [r5, #0]
 800b1c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1ca:	3001      	adds	r0, #1
 800b1cc:	6018      	str	r0, [r3, #0]
 800b1ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	f43f acf1 	beq.w	800abb8 <_dtoa_r+0xa0>
 800b1d6:	601d      	str	r5, [r3, #0]
 800b1d8:	e4ee      	b.n	800abb8 <_dtoa_r+0xa0>
 800b1da:	9f00      	ldr	r7, [sp, #0]
 800b1dc:	462b      	mov	r3, r5
 800b1de:	461d      	mov	r5, r3
 800b1e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1e4:	2a39      	cmp	r2, #57	; 0x39
 800b1e6:	d106      	bne.n	800b1f6 <_dtoa_r+0x6de>
 800b1e8:	9a01      	ldr	r2, [sp, #4]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d1f7      	bne.n	800b1de <_dtoa_r+0x6c6>
 800b1ee:	9901      	ldr	r1, [sp, #4]
 800b1f0:	2230      	movs	r2, #48	; 0x30
 800b1f2:	3701      	adds	r7, #1
 800b1f4:	700a      	strb	r2, [r1, #0]
 800b1f6:	781a      	ldrb	r2, [r3, #0]
 800b1f8:	3201      	adds	r2, #1
 800b1fa:	701a      	strb	r2, [r3, #0]
 800b1fc:	e790      	b.n	800b120 <_dtoa_r+0x608>
 800b1fe:	4ba6      	ldr	r3, [pc, #664]	; (800b498 <_dtoa_r+0x980>)
 800b200:	2200      	movs	r2, #0
 800b202:	f7f5 f9f9 	bl	80005f8 <__aeabi_dmul>
 800b206:	2200      	movs	r2, #0
 800b208:	2300      	movs	r3, #0
 800b20a:	4606      	mov	r6, r0
 800b20c:	460f      	mov	r7, r1
 800b20e:	f7f5 fc5b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b212:	2800      	cmp	r0, #0
 800b214:	d09d      	beq.n	800b152 <_dtoa_r+0x63a>
 800b216:	e7cf      	b.n	800b1b8 <_dtoa_r+0x6a0>
 800b218:	9a08      	ldr	r2, [sp, #32]
 800b21a:	2a00      	cmp	r2, #0
 800b21c:	f000 80d7 	beq.w	800b3ce <_dtoa_r+0x8b6>
 800b220:	9a06      	ldr	r2, [sp, #24]
 800b222:	2a01      	cmp	r2, #1
 800b224:	f300 80ba 	bgt.w	800b39c <_dtoa_r+0x884>
 800b228:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b22a:	2a00      	cmp	r2, #0
 800b22c:	f000 80b2 	beq.w	800b394 <_dtoa_r+0x87c>
 800b230:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b234:	9e07      	ldr	r6, [sp, #28]
 800b236:	9d04      	ldr	r5, [sp, #16]
 800b238:	9a04      	ldr	r2, [sp, #16]
 800b23a:	441a      	add	r2, r3
 800b23c:	9204      	str	r2, [sp, #16]
 800b23e:	9a05      	ldr	r2, [sp, #20]
 800b240:	2101      	movs	r1, #1
 800b242:	441a      	add	r2, r3
 800b244:	4620      	mov	r0, r4
 800b246:	9205      	str	r2, [sp, #20]
 800b248:	f000 fd86 	bl	800bd58 <__i2b>
 800b24c:	4607      	mov	r7, r0
 800b24e:	2d00      	cmp	r5, #0
 800b250:	dd0c      	ble.n	800b26c <_dtoa_r+0x754>
 800b252:	9b05      	ldr	r3, [sp, #20]
 800b254:	2b00      	cmp	r3, #0
 800b256:	dd09      	ble.n	800b26c <_dtoa_r+0x754>
 800b258:	42ab      	cmp	r3, r5
 800b25a:	9a04      	ldr	r2, [sp, #16]
 800b25c:	bfa8      	it	ge
 800b25e:	462b      	movge	r3, r5
 800b260:	1ad2      	subs	r2, r2, r3
 800b262:	9204      	str	r2, [sp, #16]
 800b264:	9a05      	ldr	r2, [sp, #20]
 800b266:	1aed      	subs	r5, r5, r3
 800b268:	1ad3      	subs	r3, r2, r3
 800b26a:	9305      	str	r3, [sp, #20]
 800b26c:	9b07      	ldr	r3, [sp, #28]
 800b26e:	b31b      	cbz	r3, 800b2b8 <_dtoa_r+0x7a0>
 800b270:	9b08      	ldr	r3, [sp, #32]
 800b272:	2b00      	cmp	r3, #0
 800b274:	f000 80af 	beq.w	800b3d6 <_dtoa_r+0x8be>
 800b278:	2e00      	cmp	r6, #0
 800b27a:	dd13      	ble.n	800b2a4 <_dtoa_r+0x78c>
 800b27c:	4639      	mov	r1, r7
 800b27e:	4632      	mov	r2, r6
 800b280:	4620      	mov	r0, r4
 800b282:	f000 fe29 	bl	800bed8 <__pow5mult>
 800b286:	ee18 2a10 	vmov	r2, s16
 800b28a:	4601      	mov	r1, r0
 800b28c:	4607      	mov	r7, r0
 800b28e:	4620      	mov	r0, r4
 800b290:	f000 fd78 	bl	800bd84 <__multiply>
 800b294:	ee18 1a10 	vmov	r1, s16
 800b298:	4680      	mov	r8, r0
 800b29a:	4620      	mov	r0, r4
 800b29c:	f000 fca4 	bl	800bbe8 <_Bfree>
 800b2a0:	ee08 8a10 	vmov	s16, r8
 800b2a4:	9b07      	ldr	r3, [sp, #28]
 800b2a6:	1b9a      	subs	r2, r3, r6
 800b2a8:	d006      	beq.n	800b2b8 <_dtoa_r+0x7a0>
 800b2aa:	ee18 1a10 	vmov	r1, s16
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	f000 fe12 	bl	800bed8 <__pow5mult>
 800b2b4:	ee08 0a10 	vmov	s16, r0
 800b2b8:	2101      	movs	r1, #1
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	f000 fd4c 	bl	800bd58 <__i2b>
 800b2c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	4606      	mov	r6, r0
 800b2c6:	f340 8088 	ble.w	800b3da <_dtoa_r+0x8c2>
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	4601      	mov	r1, r0
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	f000 fe02 	bl	800bed8 <__pow5mult>
 800b2d4:	9b06      	ldr	r3, [sp, #24]
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	4606      	mov	r6, r0
 800b2da:	f340 8081 	ble.w	800b3e0 <_dtoa_r+0x8c8>
 800b2de:	f04f 0800 	mov.w	r8, #0
 800b2e2:	6933      	ldr	r3, [r6, #16]
 800b2e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b2e8:	6918      	ldr	r0, [r3, #16]
 800b2ea:	f000 fce5 	bl	800bcb8 <__hi0bits>
 800b2ee:	f1c0 0020 	rsb	r0, r0, #32
 800b2f2:	9b05      	ldr	r3, [sp, #20]
 800b2f4:	4418      	add	r0, r3
 800b2f6:	f010 001f 	ands.w	r0, r0, #31
 800b2fa:	f000 8092 	beq.w	800b422 <_dtoa_r+0x90a>
 800b2fe:	f1c0 0320 	rsb	r3, r0, #32
 800b302:	2b04      	cmp	r3, #4
 800b304:	f340 808a 	ble.w	800b41c <_dtoa_r+0x904>
 800b308:	f1c0 001c 	rsb	r0, r0, #28
 800b30c:	9b04      	ldr	r3, [sp, #16]
 800b30e:	4403      	add	r3, r0
 800b310:	9304      	str	r3, [sp, #16]
 800b312:	9b05      	ldr	r3, [sp, #20]
 800b314:	4403      	add	r3, r0
 800b316:	4405      	add	r5, r0
 800b318:	9305      	str	r3, [sp, #20]
 800b31a:	9b04      	ldr	r3, [sp, #16]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	dd07      	ble.n	800b330 <_dtoa_r+0x818>
 800b320:	ee18 1a10 	vmov	r1, s16
 800b324:	461a      	mov	r2, r3
 800b326:	4620      	mov	r0, r4
 800b328:	f000 fe30 	bl	800bf8c <__lshift>
 800b32c:	ee08 0a10 	vmov	s16, r0
 800b330:	9b05      	ldr	r3, [sp, #20]
 800b332:	2b00      	cmp	r3, #0
 800b334:	dd05      	ble.n	800b342 <_dtoa_r+0x82a>
 800b336:	4631      	mov	r1, r6
 800b338:	461a      	mov	r2, r3
 800b33a:	4620      	mov	r0, r4
 800b33c:	f000 fe26 	bl	800bf8c <__lshift>
 800b340:	4606      	mov	r6, r0
 800b342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b344:	2b00      	cmp	r3, #0
 800b346:	d06e      	beq.n	800b426 <_dtoa_r+0x90e>
 800b348:	ee18 0a10 	vmov	r0, s16
 800b34c:	4631      	mov	r1, r6
 800b34e:	f000 fe8d 	bl	800c06c <__mcmp>
 800b352:	2800      	cmp	r0, #0
 800b354:	da67      	bge.n	800b426 <_dtoa_r+0x90e>
 800b356:	9b00      	ldr	r3, [sp, #0]
 800b358:	3b01      	subs	r3, #1
 800b35a:	ee18 1a10 	vmov	r1, s16
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	220a      	movs	r2, #10
 800b362:	2300      	movs	r3, #0
 800b364:	4620      	mov	r0, r4
 800b366:	f000 fc61 	bl	800bc2c <__multadd>
 800b36a:	9b08      	ldr	r3, [sp, #32]
 800b36c:	ee08 0a10 	vmov	s16, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	f000 81b1 	beq.w	800b6d8 <_dtoa_r+0xbc0>
 800b376:	2300      	movs	r3, #0
 800b378:	4639      	mov	r1, r7
 800b37a:	220a      	movs	r2, #10
 800b37c:	4620      	mov	r0, r4
 800b37e:	f000 fc55 	bl	800bc2c <__multadd>
 800b382:	9b02      	ldr	r3, [sp, #8]
 800b384:	2b00      	cmp	r3, #0
 800b386:	4607      	mov	r7, r0
 800b388:	f300 808e 	bgt.w	800b4a8 <_dtoa_r+0x990>
 800b38c:	9b06      	ldr	r3, [sp, #24]
 800b38e:	2b02      	cmp	r3, #2
 800b390:	dc51      	bgt.n	800b436 <_dtoa_r+0x91e>
 800b392:	e089      	b.n	800b4a8 <_dtoa_r+0x990>
 800b394:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b396:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b39a:	e74b      	b.n	800b234 <_dtoa_r+0x71c>
 800b39c:	9b03      	ldr	r3, [sp, #12]
 800b39e:	1e5e      	subs	r6, r3, #1
 800b3a0:	9b07      	ldr	r3, [sp, #28]
 800b3a2:	42b3      	cmp	r3, r6
 800b3a4:	bfbf      	itttt	lt
 800b3a6:	9b07      	ldrlt	r3, [sp, #28]
 800b3a8:	9607      	strlt	r6, [sp, #28]
 800b3aa:	1af2      	sublt	r2, r6, r3
 800b3ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b3ae:	bfb6      	itet	lt
 800b3b0:	189b      	addlt	r3, r3, r2
 800b3b2:	1b9e      	subge	r6, r3, r6
 800b3b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b3b6:	9b03      	ldr	r3, [sp, #12]
 800b3b8:	bfb8      	it	lt
 800b3ba:	2600      	movlt	r6, #0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	bfb7      	itett	lt
 800b3c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b3c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b3c8:	1a9d      	sublt	r5, r3, r2
 800b3ca:	2300      	movlt	r3, #0
 800b3cc:	e734      	b.n	800b238 <_dtoa_r+0x720>
 800b3ce:	9e07      	ldr	r6, [sp, #28]
 800b3d0:	9d04      	ldr	r5, [sp, #16]
 800b3d2:	9f08      	ldr	r7, [sp, #32]
 800b3d4:	e73b      	b.n	800b24e <_dtoa_r+0x736>
 800b3d6:	9a07      	ldr	r2, [sp, #28]
 800b3d8:	e767      	b.n	800b2aa <_dtoa_r+0x792>
 800b3da:	9b06      	ldr	r3, [sp, #24]
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	dc18      	bgt.n	800b412 <_dtoa_r+0x8fa>
 800b3e0:	f1ba 0f00 	cmp.w	sl, #0
 800b3e4:	d115      	bne.n	800b412 <_dtoa_r+0x8fa>
 800b3e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3ea:	b993      	cbnz	r3, 800b412 <_dtoa_r+0x8fa>
 800b3ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b3f0:	0d1b      	lsrs	r3, r3, #20
 800b3f2:	051b      	lsls	r3, r3, #20
 800b3f4:	b183      	cbz	r3, 800b418 <_dtoa_r+0x900>
 800b3f6:	9b04      	ldr	r3, [sp, #16]
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	9304      	str	r3, [sp, #16]
 800b3fc:	9b05      	ldr	r3, [sp, #20]
 800b3fe:	3301      	adds	r3, #1
 800b400:	9305      	str	r3, [sp, #20]
 800b402:	f04f 0801 	mov.w	r8, #1
 800b406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b408:	2b00      	cmp	r3, #0
 800b40a:	f47f af6a 	bne.w	800b2e2 <_dtoa_r+0x7ca>
 800b40e:	2001      	movs	r0, #1
 800b410:	e76f      	b.n	800b2f2 <_dtoa_r+0x7da>
 800b412:	f04f 0800 	mov.w	r8, #0
 800b416:	e7f6      	b.n	800b406 <_dtoa_r+0x8ee>
 800b418:	4698      	mov	r8, r3
 800b41a:	e7f4      	b.n	800b406 <_dtoa_r+0x8ee>
 800b41c:	f43f af7d 	beq.w	800b31a <_dtoa_r+0x802>
 800b420:	4618      	mov	r0, r3
 800b422:	301c      	adds	r0, #28
 800b424:	e772      	b.n	800b30c <_dtoa_r+0x7f4>
 800b426:	9b03      	ldr	r3, [sp, #12]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	dc37      	bgt.n	800b49c <_dtoa_r+0x984>
 800b42c:	9b06      	ldr	r3, [sp, #24]
 800b42e:	2b02      	cmp	r3, #2
 800b430:	dd34      	ble.n	800b49c <_dtoa_r+0x984>
 800b432:	9b03      	ldr	r3, [sp, #12]
 800b434:	9302      	str	r3, [sp, #8]
 800b436:	9b02      	ldr	r3, [sp, #8]
 800b438:	b96b      	cbnz	r3, 800b456 <_dtoa_r+0x93e>
 800b43a:	4631      	mov	r1, r6
 800b43c:	2205      	movs	r2, #5
 800b43e:	4620      	mov	r0, r4
 800b440:	f000 fbf4 	bl	800bc2c <__multadd>
 800b444:	4601      	mov	r1, r0
 800b446:	4606      	mov	r6, r0
 800b448:	ee18 0a10 	vmov	r0, s16
 800b44c:	f000 fe0e 	bl	800c06c <__mcmp>
 800b450:	2800      	cmp	r0, #0
 800b452:	f73f adbb 	bgt.w	800afcc <_dtoa_r+0x4b4>
 800b456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b458:	9d01      	ldr	r5, [sp, #4]
 800b45a:	43db      	mvns	r3, r3
 800b45c:	9300      	str	r3, [sp, #0]
 800b45e:	f04f 0800 	mov.w	r8, #0
 800b462:	4631      	mov	r1, r6
 800b464:	4620      	mov	r0, r4
 800b466:	f000 fbbf 	bl	800bbe8 <_Bfree>
 800b46a:	2f00      	cmp	r7, #0
 800b46c:	f43f aea4 	beq.w	800b1b8 <_dtoa_r+0x6a0>
 800b470:	f1b8 0f00 	cmp.w	r8, #0
 800b474:	d005      	beq.n	800b482 <_dtoa_r+0x96a>
 800b476:	45b8      	cmp	r8, r7
 800b478:	d003      	beq.n	800b482 <_dtoa_r+0x96a>
 800b47a:	4641      	mov	r1, r8
 800b47c:	4620      	mov	r0, r4
 800b47e:	f000 fbb3 	bl	800bbe8 <_Bfree>
 800b482:	4639      	mov	r1, r7
 800b484:	4620      	mov	r0, r4
 800b486:	f000 fbaf 	bl	800bbe8 <_Bfree>
 800b48a:	e695      	b.n	800b1b8 <_dtoa_r+0x6a0>
 800b48c:	2600      	movs	r6, #0
 800b48e:	4637      	mov	r7, r6
 800b490:	e7e1      	b.n	800b456 <_dtoa_r+0x93e>
 800b492:	9700      	str	r7, [sp, #0]
 800b494:	4637      	mov	r7, r6
 800b496:	e599      	b.n	800afcc <_dtoa_r+0x4b4>
 800b498:	40240000 	.word	0x40240000
 800b49c:	9b08      	ldr	r3, [sp, #32]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	f000 80ca 	beq.w	800b638 <_dtoa_r+0xb20>
 800b4a4:	9b03      	ldr	r3, [sp, #12]
 800b4a6:	9302      	str	r3, [sp, #8]
 800b4a8:	2d00      	cmp	r5, #0
 800b4aa:	dd05      	ble.n	800b4b8 <_dtoa_r+0x9a0>
 800b4ac:	4639      	mov	r1, r7
 800b4ae:	462a      	mov	r2, r5
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	f000 fd6b 	bl	800bf8c <__lshift>
 800b4b6:	4607      	mov	r7, r0
 800b4b8:	f1b8 0f00 	cmp.w	r8, #0
 800b4bc:	d05b      	beq.n	800b576 <_dtoa_r+0xa5e>
 800b4be:	6879      	ldr	r1, [r7, #4]
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	f000 fb51 	bl	800bb68 <_Balloc>
 800b4c6:	4605      	mov	r5, r0
 800b4c8:	b928      	cbnz	r0, 800b4d6 <_dtoa_r+0x9be>
 800b4ca:	4b87      	ldr	r3, [pc, #540]	; (800b6e8 <_dtoa_r+0xbd0>)
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b4d2:	f7ff bb3b 	b.w	800ab4c <_dtoa_r+0x34>
 800b4d6:	693a      	ldr	r2, [r7, #16]
 800b4d8:	3202      	adds	r2, #2
 800b4da:	0092      	lsls	r2, r2, #2
 800b4dc:	f107 010c 	add.w	r1, r7, #12
 800b4e0:	300c      	adds	r0, #12
 800b4e2:	f000 fb33 	bl	800bb4c <memcpy>
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	4629      	mov	r1, r5
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f000 fd4e 	bl	800bf8c <__lshift>
 800b4f0:	9b01      	ldr	r3, [sp, #4]
 800b4f2:	f103 0901 	add.w	r9, r3, #1
 800b4f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b4fa:	4413      	add	r3, r2
 800b4fc:	9305      	str	r3, [sp, #20]
 800b4fe:	f00a 0301 	and.w	r3, sl, #1
 800b502:	46b8      	mov	r8, r7
 800b504:	9304      	str	r3, [sp, #16]
 800b506:	4607      	mov	r7, r0
 800b508:	4631      	mov	r1, r6
 800b50a:	ee18 0a10 	vmov	r0, s16
 800b50e:	f7ff fa75 	bl	800a9fc <quorem>
 800b512:	4641      	mov	r1, r8
 800b514:	9002      	str	r0, [sp, #8]
 800b516:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b51a:	ee18 0a10 	vmov	r0, s16
 800b51e:	f000 fda5 	bl	800c06c <__mcmp>
 800b522:	463a      	mov	r2, r7
 800b524:	9003      	str	r0, [sp, #12]
 800b526:	4631      	mov	r1, r6
 800b528:	4620      	mov	r0, r4
 800b52a:	f000 fdbb 	bl	800c0a4 <__mdiff>
 800b52e:	68c2      	ldr	r2, [r0, #12]
 800b530:	f109 3bff 	add.w	fp, r9, #4294967295
 800b534:	4605      	mov	r5, r0
 800b536:	bb02      	cbnz	r2, 800b57a <_dtoa_r+0xa62>
 800b538:	4601      	mov	r1, r0
 800b53a:	ee18 0a10 	vmov	r0, s16
 800b53e:	f000 fd95 	bl	800c06c <__mcmp>
 800b542:	4602      	mov	r2, r0
 800b544:	4629      	mov	r1, r5
 800b546:	4620      	mov	r0, r4
 800b548:	9207      	str	r2, [sp, #28]
 800b54a:	f000 fb4d 	bl	800bbe8 <_Bfree>
 800b54e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b552:	ea43 0102 	orr.w	r1, r3, r2
 800b556:	9b04      	ldr	r3, [sp, #16]
 800b558:	430b      	orrs	r3, r1
 800b55a:	464d      	mov	r5, r9
 800b55c:	d10f      	bne.n	800b57e <_dtoa_r+0xa66>
 800b55e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b562:	d02a      	beq.n	800b5ba <_dtoa_r+0xaa2>
 800b564:	9b03      	ldr	r3, [sp, #12]
 800b566:	2b00      	cmp	r3, #0
 800b568:	dd02      	ble.n	800b570 <_dtoa_r+0xa58>
 800b56a:	9b02      	ldr	r3, [sp, #8]
 800b56c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b570:	f88b a000 	strb.w	sl, [fp]
 800b574:	e775      	b.n	800b462 <_dtoa_r+0x94a>
 800b576:	4638      	mov	r0, r7
 800b578:	e7ba      	b.n	800b4f0 <_dtoa_r+0x9d8>
 800b57a:	2201      	movs	r2, #1
 800b57c:	e7e2      	b.n	800b544 <_dtoa_r+0xa2c>
 800b57e:	9b03      	ldr	r3, [sp, #12]
 800b580:	2b00      	cmp	r3, #0
 800b582:	db04      	blt.n	800b58e <_dtoa_r+0xa76>
 800b584:	9906      	ldr	r1, [sp, #24]
 800b586:	430b      	orrs	r3, r1
 800b588:	9904      	ldr	r1, [sp, #16]
 800b58a:	430b      	orrs	r3, r1
 800b58c:	d122      	bne.n	800b5d4 <_dtoa_r+0xabc>
 800b58e:	2a00      	cmp	r2, #0
 800b590:	ddee      	ble.n	800b570 <_dtoa_r+0xa58>
 800b592:	ee18 1a10 	vmov	r1, s16
 800b596:	2201      	movs	r2, #1
 800b598:	4620      	mov	r0, r4
 800b59a:	f000 fcf7 	bl	800bf8c <__lshift>
 800b59e:	4631      	mov	r1, r6
 800b5a0:	ee08 0a10 	vmov	s16, r0
 800b5a4:	f000 fd62 	bl	800c06c <__mcmp>
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	dc03      	bgt.n	800b5b4 <_dtoa_r+0xa9c>
 800b5ac:	d1e0      	bne.n	800b570 <_dtoa_r+0xa58>
 800b5ae:	f01a 0f01 	tst.w	sl, #1
 800b5b2:	d0dd      	beq.n	800b570 <_dtoa_r+0xa58>
 800b5b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b5b8:	d1d7      	bne.n	800b56a <_dtoa_r+0xa52>
 800b5ba:	2339      	movs	r3, #57	; 0x39
 800b5bc:	f88b 3000 	strb.w	r3, [fp]
 800b5c0:	462b      	mov	r3, r5
 800b5c2:	461d      	mov	r5, r3
 800b5c4:	3b01      	subs	r3, #1
 800b5c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b5ca:	2a39      	cmp	r2, #57	; 0x39
 800b5cc:	d071      	beq.n	800b6b2 <_dtoa_r+0xb9a>
 800b5ce:	3201      	adds	r2, #1
 800b5d0:	701a      	strb	r2, [r3, #0]
 800b5d2:	e746      	b.n	800b462 <_dtoa_r+0x94a>
 800b5d4:	2a00      	cmp	r2, #0
 800b5d6:	dd07      	ble.n	800b5e8 <_dtoa_r+0xad0>
 800b5d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b5dc:	d0ed      	beq.n	800b5ba <_dtoa_r+0xaa2>
 800b5de:	f10a 0301 	add.w	r3, sl, #1
 800b5e2:	f88b 3000 	strb.w	r3, [fp]
 800b5e6:	e73c      	b.n	800b462 <_dtoa_r+0x94a>
 800b5e8:	9b05      	ldr	r3, [sp, #20]
 800b5ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b5ee:	4599      	cmp	r9, r3
 800b5f0:	d047      	beq.n	800b682 <_dtoa_r+0xb6a>
 800b5f2:	ee18 1a10 	vmov	r1, s16
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	220a      	movs	r2, #10
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	f000 fb16 	bl	800bc2c <__multadd>
 800b600:	45b8      	cmp	r8, r7
 800b602:	ee08 0a10 	vmov	s16, r0
 800b606:	f04f 0300 	mov.w	r3, #0
 800b60a:	f04f 020a 	mov.w	r2, #10
 800b60e:	4641      	mov	r1, r8
 800b610:	4620      	mov	r0, r4
 800b612:	d106      	bne.n	800b622 <_dtoa_r+0xb0a>
 800b614:	f000 fb0a 	bl	800bc2c <__multadd>
 800b618:	4680      	mov	r8, r0
 800b61a:	4607      	mov	r7, r0
 800b61c:	f109 0901 	add.w	r9, r9, #1
 800b620:	e772      	b.n	800b508 <_dtoa_r+0x9f0>
 800b622:	f000 fb03 	bl	800bc2c <__multadd>
 800b626:	4639      	mov	r1, r7
 800b628:	4680      	mov	r8, r0
 800b62a:	2300      	movs	r3, #0
 800b62c:	220a      	movs	r2, #10
 800b62e:	4620      	mov	r0, r4
 800b630:	f000 fafc 	bl	800bc2c <__multadd>
 800b634:	4607      	mov	r7, r0
 800b636:	e7f1      	b.n	800b61c <_dtoa_r+0xb04>
 800b638:	9b03      	ldr	r3, [sp, #12]
 800b63a:	9302      	str	r3, [sp, #8]
 800b63c:	9d01      	ldr	r5, [sp, #4]
 800b63e:	ee18 0a10 	vmov	r0, s16
 800b642:	4631      	mov	r1, r6
 800b644:	f7ff f9da 	bl	800a9fc <quorem>
 800b648:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b64c:	9b01      	ldr	r3, [sp, #4]
 800b64e:	f805 ab01 	strb.w	sl, [r5], #1
 800b652:	1aea      	subs	r2, r5, r3
 800b654:	9b02      	ldr	r3, [sp, #8]
 800b656:	4293      	cmp	r3, r2
 800b658:	dd09      	ble.n	800b66e <_dtoa_r+0xb56>
 800b65a:	ee18 1a10 	vmov	r1, s16
 800b65e:	2300      	movs	r3, #0
 800b660:	220a      	movs	r2, #10
 800b662:	4620      	mov	r0, r4
 800b664:	f000 fae2 	bl	800bc2c <__multadd>
 800b668:	ee08 0a10 	vmov	s16, r0
 800b66c:	e7e7      	b.n	800b63e <_dtoa_r+0xb26>
 800b66e:	9b02      	ldr	r3, [sp, #8]
 800b670:	2b00      	cmp	r3, #0
 800b672:	bfc8      	it	gt
 800b674:	461d      	movgt	r5, r3
 800b676:	9b01      	ldr	r3, [sp, #4]
 800b678:	bfd8      	it	le
 800b67a:	2501      	movle	r5, #1
 800b67c:	441d      	add	r5, r3
 800b67e:	f04f 0800 	mov.w	r8, #0
 800b682:	ee18 1a10 	vmov	r1, s16
 800b686:	2201      	movs	r2, #1
 800b688:	4620      	mov	r0, r4
 800b68a:	f000 fc7f 	bl	800bf8c <__lshift>
 800b68e:	4631      	mov	r1, r6
 800b690:	ee08 0a10 	vmov	s16, r0
 800b694:	f000 fcea 	bl	800c06c <__mcmp>
 800b698:	2800      	cmp	r0, #0
 800b69a:	dc91      	bgt.n	800b5c0 <_dtoa_r+0xaa8>
 800b69c:	d102      	bne.n	800b6a4 <_dtoa_r+0xb8c>
 800b69e:	f01a 0f01 	tst.w	sl, #1
 800b6a2:	d18d      	bne.n	800b5c0 <_dtoa_r+0xaa8>
 800b6a4:	462b      	mov	r3, r5
 800b6a6:	461d      	mov	r5, r3
 800b6a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6ac:	2a30      	cmp	r2, #48	; 0x30
 800b6ae:	d0fa      	beq.n	800b6a6 <_dtoa_r+0xb8e>
 800b6b0:	e6d7      	b.n	800b462 <_dtoa_r+0x94a>
 800b6b2:	9a01      	ldr	r2, [sp, #4]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d184      	bne.n	800b5c2 <_dtoa_r+0xaaa>
 800b6b8:	9b00      	ldr	r3, [sp, #0]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	9300      	str	r3, [sp, #0]
 800b6be:	2331      	movs	r3, #49	; 0x31
 800b6c0:	7013      	strb	r3, [r2, #0]
 800b6c2:	e6ce      	b.n	800b462 <_dtoa_r+0x94a>
 800b6c4:	4b09      	ldr	r3, [pc, #36]	; (800b6ec <_dtoa_r+0xbd4>)
 800b6c6:	f7ff ba95 	b.w	800abf4 <_dtoa_r+0xdc>
 800b6ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	f47f aa6e 	bne.w	800abae <_dtoa_r+0x96>
 800b6d2:	4b07      	ldr	r3, [pc, #28]	; (800b6f0 <_dtoa_r+0xbd8>)
 800b6d4:	f7ff ba8e 	b.w	800abf4 <_dtoa_r+0xdc>
 800b6d8:	9b02      	ldr	r3, [sp, #8]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	dcae      	bgt.n	800b63c <_dtoa_r+0xb24>
 800b6de:	9b06      	ldr	r3, [sp, #24]
 800b6e0:	2b02      	cmp	r3, #2
 800b6e2:	f73f aea8 	bgt.w	800b436 <_dtoa_r+0x91e>
 800b6e6:	e7a9      	b.n	800b63c <_dtoa_r+0xb24>
 800b6e8:	0800cb43 	.word	0x0800cb43
 800b6ec:	0800caa0 	.word	0x0800caa0
 800b6f0:	0800cac4 	.word	0x0800cac4

0800b6f4 <__sflush_r>:
 800b6f4:	898a      	ldrh	r2, [r1, #12]
 800b6f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6fa:	4605      	mov	r5, r0
 800b6fc:	0710      	lsls	r0, r2, #28
 800b6fe:	460c      	mov	r4, r1
 800b700:	d458      	bmi.n	800b7b4 <__sflush_r+0xc0>
 800b702:	684b      	ldr	r3, [r1, #4]
 800b704:	2b00      	cmp	r3, #0
 800b706:	dc05      	bgt.n	800b714 <__sflush_r+0x20>
 800b708:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	dc02      	bgt.n	800b714 <__sflush_r+0x20>
 800b70e:	2000      	movs	r0, #0
 800b710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b714:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b716:	2e00      	cmp	r6, #0
 800b718:	d0f9      	beq.n	800b70e <__sflush_r+0x1a>
 800b71a:	2300      	movs	r3, #0
 800b71c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b720:	682f      	ldr	r7, [r5, #0]
 800b722:	602b      	str	r3, [r5, #0]
 800b724:	d032      	beq.n	800b78c <__sflush_r+0x98>
 800b726:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b728:	89a3      	ldrh	r3, [r4, #12]
 800b72a:	075a      	lsls	r2, r3, #29
 800b72c:	d505      	bpl.n	800b73a <__sflush_r+0x46>
 800b72e:	6863      	ldr	r3, [r4, #4]
 800b730:	1ac0      	subs	r0, r0, r3
 800b732:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b734:	b10b      	cbz	r3, 800b73a <__sflush_r+0x46>
 800b736:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b738:	1ac0      	subs	r0, r0, r3
 800b73a:	2300      	movs	r3, #0
 800b73c:	4602      	mov	r2, r0
 800b73e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b740:	6a21      	ldr	r1, [r4, #32]
 800b742:	4628      	mov	r0, r5
 800b744:	47b0      	blx	r6
 800b746:	1c43      	adds	r3, r0, #1
 800b748:	89a3      	ldrh	r3, [r4, #12]
 800b74a:	d106      	bne.n	800b75a <__sflush_r+0x66>
 800b74c:	6829      	ldr	r1, [r5, #0]
 800b74e:	291d      	cmp	r1, #29
 800b750:	d82c      	bhi.n	800b7ac <__sflush_r+0xb8>
 800b752:	4a2a      	ldr	r2, [pc, #168]	; (800b7fc <__sflush_r+0x108>)
 800b754:	40ca      	lsrs	r2, r1
 800b756:	07d6      	lsls	r6, r2, #31
 800b758:	d528      	bpl.n	800b7ac <__sflush_r+0xb8>
 800b75a:	2200      	movs	r2, #0
 800b75c:	6062      	str	r2, [r4, #4]
 800b75e:	04d9      	lsls	r1, r3, #19
 800b760:	6922      	ldr	r2, [r4, #16]
 800b762:	6022      	str	r2, [r4, #0]
 800b764:	d504      	bpl.n	800b770 <__sflush_r+0x7c>
 800b766:	1c42      	adds	r2, r0, #1
 800b768:	d101      	bne.n	800b76e <__sflush_r+0x7a>
 800b76a:	682b      	ldr	r3, [r5, #0]
 800b76c:	b903      	cbnz	r3, 800b770 <__sflush_r+0x7c>
 800b76e:	6560      	str	r0, [r4, #84]	; 0x54
 800b770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b772:	602f      	str	r7, [r5, #0]
 800b774:	2900      	cmp	r1, #0
 800b776:	d0ca      	beq.n	800b70e <__sflush_r+0x1a>
 800b778:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b77c:	4299      	cmp	r1, r3
 800b77e:	d002      	beq.n	800b786 <__sflush_r+0x92>
 800b780:	4628      	mov	r0, r5
 800b782:	f000 fd8b 	bl	800c29c <_free_r>
 800b786:	2000      	movs	r0, #0
 800b788:	6360      	str	r0, [r4, #52]	; 0x34
 800b78a:	e7c1      	b.n	800b710 <__sflush_r+0x1c>
 800b78c:	6a21      	ldr	r1, [r4, #32]
 800b78e:	2301      	movs	r3, #1
 800b790:	4628      	mov	r0, r5
 800b792:	47b0      	blx	r6
 800b794:	1c41      	adds	r1, r0, #1
 800b796:	d1c7      	bne.n	800b728 <__sflush_r+0x34>
 800b798:	682b      	ldr	r3, [r5, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d0c4      	beq.n	800b728 <__sflush_r+0x34>
 800b79e:	2b1d      	cmp	r3, #29
 800b7a0:	d001      	beq.n	800b7a6 <__sflush_r+0xb2>
 800b7a2:	2b16      	cmp	r3, #22
 800b7a4:	d101      	bne.n	800b7aa <__sflush_r+0xb6>
 800b7a6:	602f      	str	r7, [r5, #0]
 800b7a8:	e7b1      	b.n	800b70e <__sflush_r+0x1a>
 800b7aa:	89a3      	ldrh	r3, [r4, #12]
 800b7ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7b0:	81a3      	strh	r3, [r4, #12]
 800b7b2:	e7ad      	b.n	800b710 <__sflush_r+0x1c>
 800b7b4:	690f      	ldr	r7, [r1, #16]
 800b7b6:	2f00      	cmp	r7, #0
 800b7b8:	d0a9      	beq.n	800b70e <__sflush_r+0x1a>
 800b7ba:	0793      	lsls	r3, r2, #30
 800b7bc:	680e      	ldr	r6, [r1, #0]
 800b7be:	bf08      	it	eq
 800b7c0:	694b      	ldreq	r3, [r1, #20]
 800b7c2:	600f      	str	r7, [r1, #0]
 800b7c4:	bf18      	it	ne
 800b7c6:	2300      	movne	r3, #0
 800b7c8:	eba6 0807 	sub.w	r8, r6, r7
 800b7cc:	608b      	str	r3, [r1, #8]
 800b7ce:	f1b8 0f00 	cmp.w	r8, #0
 800b7d2:	dd9c      	ble.n	800b70e <__sflush_r+0x1a>
 800b7d4:	6a21      	ldr	r1, [r4, #32]
 800b7d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b7d8:	4643      	mov	r3, r8
 800b7da:	463a      	mov	r2, r7
 800b7dc:	4628      	mov	r0, r5
 800b7de:	47b0      	blx	r6
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	dc06      	bgt.n	800b7f2 <__sflush_r+0xfe>
 800b7e4:	89a3      	ldrh	r3, [r4, #12]
 800b7e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7ea:	81a3      	strh	r3, [r4, #12]
 800b7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f0:	e78e      	b.n	800b710 <__sflush_r+0x1c>
 800b7f2:	4407      	add	r7, r0
 800b7f4:	eba8 0800 	sub.w	r8, r8, r0
 800b7f8:	e7e9      	b.n	800b7ce <__sflush_r+0xda>
 800b7fa:	bf00      	nop
 800b7fc:	20400001 	.word	0x20400001

0800b800 <_fflush_r>:
 800b800:	b538      	push	{r3, r4, r5, lr}
 800b802:	690b      	ldr	r3, [r1, #16]
 800b804:	4605      	mov	r5, r0
 800b806:	460c      	mov	r4, r1
 800b808:	b913      	cbnz	r3, 800b810 <_fflush_r+0x10>
 800b80a:	2500      	movs	r5, #0
 800b80c:	4628      	mov	r0, r5
 800b80e:	bd38      	pop	{r3, r4, r5, pc}
 800b810:	b118      	cbz	r0, 800b81a <_fflush_r+0x1a>
 800b812:	6983      	ldr	r3, [r0, #24]
 800b814:	b90b      	cbnz	r3, 800b81a <_fflush_r+0x1a>
 800b816:	f000 f887 	bl	800b928 <__sinit>
 800b81a:	4b14      	ldr	r3, [pc, #80]	; (800b86c <_fflush_r+0x6c>)
 800b81c:	429c      	cmp	r4, r3
 800b81e:	d11b      	bne.n	800b858 <_fflush_r+0x58>
 800b820:	686c      	ldr	r4, [r5, #4]
 800b822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d0ef      	beq.n	800b80a <_fflush_r+0xa>
 800b82a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b82c:	07d0      	lsls	r0, r2, #31
 800b82e:	d404      	bmi.n	800b83a <_fflush_r+0x3a>
 800b830:	0599      	lsls	r1, r3, #22
 800b832:	d402      	bmi.n	800b83a <_fflush_r+0x3a>
 800b834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b836:	f000 f91a 	bl	800ba6e <__retarget_lock_acquire_recursive>
 800b83a:	4628      	mov	r0, r5
 800b83c:	4621      	mov	r1, r4
 800b83e:	f7ff ff59 	bl	800b6f4 <__sflush_r>
 800b842:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b844:	07da      	lsls	r2, r3, #31
 800b846:	4605      	mov	r5, r0
 800b848:	d4e0      	bmi.n	800b80c <_fflush_r+0xc>
 800b84a:	89a3      	ldrh	r3, [r4, #12]
 800b84c:	059b      	lsls	r3, r3, #22
 800b84e:	d4dd      	bmi.n	800b80c <_fflush_r+0xc>
 800b850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b852:	f000 f90d 	bl	800ba70 <__retarget_lock_release_recursive>
 800b856:	e7d9      	b.n	800b80c <_fflush_r+0xc>
 800b858:	4b05      	ldr	r3, [pc, #20]	; (800b870 <_fflush_r+0x70>)
 800b85a:	429c      	cmp	r4, r3
 800b85c:	d101      	bne.n	800b862 <_fflush_r+0x62>
 800b85e:	68ac      	ldr	r4, [r5, #8]
 800b860:	e7df      	b.n	800b822 <_fflush_r+0x22>
 800b862:	4b04      	ldr	r3, [pc, #16]	; (800b874 <_fflush_r+0x74>)
 800b864:	429c      	cmp	r4, r3
 800b866:	bf08      	it	eq
 800b868:	68ec      	ldreq	r4, [r5, #12]
 800b86a:	e7da      	b.n	800b822 <_fflush_r+0x22>
 800b86c:	0800cb74 	.word	0x0800cb74
 800b870:	0800cb94 	.word	0x0800cb94
 800b874:	0800cb54 	.word	0x0800cb54

0800b878 <std>:
 800b878:	2300      	movs	r3, #0
 800b87a:	b510      	push	{r4, lr}
 800b87c:	4604      	mov	r4, r0
 800b87e:	e9c0 3300 	strd	r3, r3, [r0]
 800b882:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b886:	6083      	str	r3, [r0, #8]
 800b888:	8181      	strh	r1, [r0, #12]
 800b88a:	6643      	str	r3, [r0, #100]	; 0x64
 800b88c:	81c2      	strh	r2, [r0, #14]
 800b88e:	6183      	str	r3, [r0, #24]
 800b890:	4619      	mov	r1, r3
 800b892:	2208      	movs	r2, #8
 800b894:	305c      	adds	r0, #92	; 0x5c
 800b896:	f7fe fb67 	bl	8009f68 <memset>
 800b89a:	4b05      	ldr	r3, [pc, #20]	; (800b8b0 <std+0x38>)
 800b89c:	6263      	str	r3, [r4, #36]	; 0x24
 800b89e:	4b05      	ldr	r3, [pc, #20]	; (800b8b4 <std+0x3c>)
 800b8a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8a2:	4b05      	ldr	r3, [pc, #20]	; (800b8b8 <std+0x40>)
 800b8a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8a6:	4b05      	ldr	r3, [pc, #20]	; (800b8bc <std+0x44>)
 800b8a8:	6224      	str	r4, [r4, #32]
 800b8aa:	6323      	str	r3, [r4, #48]	; 0x30
 800b8ac:	bd10      	pop	{r4, pc}
 800b8ae:	bf00      	nop
 800b8b0:	0800c731 	.word	0x0800c731
 800b8b4:	0800c753 	.word	0x0800c753
 800b8b8:	0800c78b 	.word	0x0800c78b
 800b8bc:	0800c7af 	.word	0x0800c7af

0800b8c0 <_cleanup_r>:
 800b8c0:	4901      	ldr	r1, [pc, #4]	; (800b8c8 <_cleanup_r+0x8>)
 800b8c2:	f000 b8af 	b.w	800ba24 <_fwalk_reent>
 800b8c6:	bf00      	nop
 800b8c8:	0800b801 	.word	0x0800b801

0800b8cc <__sfmoreglue>:
 800b8cc:	b570      	push	{r4, r5, r6, lr}
 800b8ce:	2268      	movs	r2, #104	; 0x68
 800b8d0:	1e4d      	subs	r5, r1, #1
 800b8d2:	4355      	muls	r5, r2
 800b8d4:	460e      	mov	r6, r1
 800b8d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b8da:	f000 fd4b 	bl	800c374 <_malloc_r>
 800b8de:	4604      	mov	r4, r0
 800b8e0:	b140      	cbz	r0, 800b8f4 <__sfmoreglue+0x28>
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	e9c0 1600 	strd	r1, r6, [r0]
 800b8e8:	300c      	adds	r0, #12
 800b8ea:	60a0      	str	r0, [r4, #8]
 800b8ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b8f0:	f7fe fb3a 	bl	8009f68 <memset>
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	bd70      	pop	{r4, r5, r6, pc}

0800b8f8 <__sfp_lock_acquire>:
 800b8f8:	4801      	ldr	r0, [pc, #4]	; (800b900 <__sfp_lock_acquire+0x8>)
 800b8fa:	f000 b8b8 	b.w	800ba6e <__retarget_lock_acquire_recursive>
 800b8fe:	bf00      	nop
 800b900:	20000c0d 	.word	0x20000c0d

0800b904 <__sfp_lock_release>:
 800b904:	4801      	ldr	r0, [pc, #4]	; (800b90c <__sfp_lock_release+0x8>)
 800b906:	f000 b8b3 	b.w	800ba70 <__retarget_lock_release_recursive>
 800b90a:	bf00      	nop
 800b90c:	20000c0d 	.word	0x20000c0d

0800b910 <__sinit_lock_acquire>:
 800b910:	4801      	ldr	r0, [pc, #4]	; (800b918 <__sinit_lock_acquire+0x8>)
 800b912:	f000 b8ac 	b.w	800ba6e <__retarget_lock_acquire_recursive>
 800b916:	bf00      	nop
 800b918:	20000c0e 	.word	0x20000c0e

0800b91c <__sinit_lock_release>:
 800b91c:	4801      	ldr	r0, [pc, #4]	; (800b924 <__sinit_lock_release+0x8>)
 800b91e:	f000 b8a7 	b.w	800ba70 <__retarget_lock_release_recursive>
 800b922:	bf00      	nop
 800b924:	20000c0e 	.word	0x20000c0e

0800b928 <__sinit>:
 800b928:	b510      	push	{r4, lr}
 800b92a:	4604      	mov	r4, r0
 800b92c:	f7ff fff0 	bl	800b910 <__sinit_lock_acquire>
 800b930:	69a3      	ldr	r3, [r4, #24]
 800b932:	b11b      	cbz	r3, 800b93c <__sinit+0x14>
 800b934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b938:	f7ff bff0 	b.w	800b91c <__sinit_lock_release>
 800b93c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b940:	6523      	str	r3, [r4, #80]	; 0x50
 800b942:	4b13      	ldr	r3, [pc, #76]	; (800b990 <__sinit+0x68>)
 800b944:	4a13      	ldr	r2, [pc, #76]	; (800b994 <__sinit+0x6c>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	62a2      	str	r2, [r4, #40]	; 0x28
 800b94a:	42a3      	cmp	r3, r4
 800b94c:	bf04      	itt	eq
 800b94e:	2301      	moveq	r3, #1
 800b950:	61a3      	streq	r3, [r4, #24]
 800b952:	4620      	mov	r0, r4
 800b954:	f000 f820 	bl	800b998 <__sfp>
 800b958:	6060      	str	r0, [r4, #4]
 800b95a:	4620      	mov	r0, r4
 800b95c:	f000 f81c 	bl	800b998 <__sfp>
 800b960:	60a0      	str	r0, [r4, #8]
 800b962:	4620      	mov	r0, r4
 800b964:	f000 f818 	bl	800b998 <__sfp>
 800b968:	2200      	movs	r2, #0
 800b96a:	60e0      	str	r0, [r4, #12]
 800b96c:	2104      	movs	r1, #4
 800b96e:	6860      	ldr	r0, [r4, #4]
 800b970:	f7ff ff82 	bl	800b878 <std>
 800b974:	68a0      	ldr	r0, [r4, #8]
 800b976:	2201      	movs	r2, #1
 800b978:	2109      	movs	r1, #9
 800b97a:	f7ff ff7d 	bl	800b878 <std>
 800b97e:	68e0      	ldr	r0, [r4, #12]
 800b980:	2202      	movs	r2, #2
 800b982:	2112      	movs	r1, #18
 800b984:	f7ff ff78 	bl	800b878 <std>
 800b988:	2301      	movs	r3, #1
 800b98a:	61a3      	str	r3, [r4, #24]
 800b98c:	e7d2      	b.n	800b934 <__sinit+0xc>
 800b98e:	bf00      	nop
 800b990:	0800ca8c 	.word	0x0800ca8c
 800b994:	0800b8c1 	.word	0x0800b8c1

0800b998 <__sfp>:
 800b998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b99a:	4607      	mov	r7, r0
 800b99c:	f7ff ffac 	bl	800b8f8 <__sfp_lock_acquire>
 800b9a0:	4b1e      	ldr	r3, [pc, #120]	; (800ba1c <__sfp+0x84>)
 800b9a2:	681e      	ldr	r6, [r3, #0]
 800b9a4:	69b3      	ldr	r3, [r6, #24]
 800b9a6:	b913      	cbnz	r3, 800b9ae <__sfp+0x16>
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	f7ff ffbd 	bl	800b928 <__sinit>
 800b9ae:	3648      	adds	r6, #72	; 0x48
 800b9b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b9b4:	3b01      	subs	r3, #1
 800b9b6:	d503      	bpl.n	800b9c0 <__sfp+0x28>
 800b9b8:	6833      	ldr	r3, [r6, #0]
 800b9ba:	b30b      	cbz	r3, 800ba00 <__sfp+0x68>
 800b9bc:	6836      	ldr	r6, [r6, #0]
 800b9be:	e7f7      	b.n	800b9b0 <__sfp+0x18>
 800b9c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b9c4:	b9d5      	cbnz	r5, 800b9fc <__sfp+0x64>
 800b9c6:	4b16      	ldr	r3, [pc, #88]	; (800ba20 <__sfp+0x88>)
 800b9c8:	60e3      	str	r3, [r4, #12]
 800b9ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b9ce:	6665      	str	r5, [r4, #100]	; 0x64
 800b9d0:	f000 f84c 	bl	800ba6c <__retarget_lock_init_recursive>
 800b9d4:	f7ff ff96 	bl	800b904 <__sfp_lock_release>
 800b9d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b9dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b9e0:	6025      	str	r5, [r4, #0]
 800b9e2:	61a5      	str	r5, [r4, #24]
 800b9e4:	2208      	movs	r2, #8
 800b9e6:	4629      	mov	r1, r5
 800b9e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b9ec:	f7fe fabc 	bl	8009f68 <memset>
 800b9f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b9f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9fc:	3468      	adds	r4, #104	; 0x68
 800b9fe:	e7d9      	b.n	800b9b4 <__sfp+0x1c>
 800ba00:	2104      	movs	r1, #4
 800ba02:	4638      	mov	r0, r7
 800ba04:	f7ff ff62 	bl	800b8cc <__sfmoreglue>
 800ba08:	4604      	mov	r4, r0
 800ba0a:	6030      	str	r0, [r6, #0]
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	d1d5      	bne.n	800b9bc <__sfp+0x24>
 800ba10:	f7ff ff78 	bl	800b904 <__sfp_lock_release>
 800ba14:	230c      	movs	r3, #12
 800ba16:	603b      	str	r3, [r7, #0]
 800ba18:	e7ee      	b.n	800b9f8 <__sfp+0x60>
 800ba1a:	bf00      	nop
 800ba1c:	0800ca8c 	.word	0x0800ca8c
 800ba20:	ffff0001 	.word	0xffff0001

0800ba24 <_fwalk_reent>:
 800ba24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba28:	4606      	mov	r6, r0
 800ba2a:	4688      	mov	r8, r1
 800ba2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba30:	2700      	movs	r7, #0
 800ba32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba36:	f1b9 0901 	subs.w	r9, r9, #1
 800ba3a:	d505      	bpl.n	800ba48 <_fwalk_reent+0x24>
 800ba3c:	6824      	ldr	r4, [r4, #0]
 800ba3e:	2c00      	cmp	r4, #0
 800ba40:	d1f7      	bne.n	800ba32 <_fwalk_reent+0xe>
 800ba42:	4638      	mov	r0, r7
 800ba44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba48:	89ab      	ldrh	r3, [r5, #12]
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d907      	bls.n	800ba5e <_fwalk_reent+0x3a>
 800ba4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba52:	3301      	adds	r3, #1
 800ba54:	d003      	beq.n	800ba5e <_fwalk_reent+0x3a>
 800ba56:	4629      	mov	r1, r5
 800ba58:	4630      	mov	r0, r6
 800ba5a:	47c0      	blx	r8
 800ba5c:	4307      	orrs	r7, r0
 800ba5e:	3568      	adds	r5, #104	; 0x68
 800ba60:	e7e9      	b.n	800ba36 <_fwalk_reent+0x12>
	...

0800ba64 <_localeconv_r>:
 800ba64:	4800      	ldr	r0, [pc, #0]	; (800ba68 <_localeconv_r+0x4>)
 800ba66:	4770      	bx	lr
 800ba68:	20000160 	.word	0x20000160

0800ba6c <__retarget_lock_init_recursive>:
 800ba6c:	4770      	bx	lr

0800ba6e <__retarget_lock_acquire_recursive>:
 800ba6e:	4770      	bx	lr

0800ba70 <__retarget_lock_release_recursive>:
 800ba70:	4770      	bx	lr

0800ba72 <__swhatbuf_r>:
 800ba72:	b570      	push	{r4, r5, r6, lr}
 800ba74:	460e      	mov	r6, r1
 800ba76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba7a:	2900      	cmp	r1, #0
 800ba7c:	b096      	sub	sp, #88	; 0x58
 800ba7e:	4614      	mov	r4, r2
 800ba80:	461d      	mov	r5, r3
 800ba82:	da08      	bge.n	800ba96 <__swhatbuf_r+0x24>
 800ba84:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	602a      	str	r2, [r5, #0]
 800ba8c:	061a      	lsls	r2, r3, #24
 800ba8e:	d410      	bmi.n	800bab2 <__swhatbuf_r+0x40>
 800ba90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba94:	e00e      	b.n	800bab4 <__swhatbuf_r+0x42>
 800ba96:	466a      	mov	r2, sp
 800ba98:	f000 fee0 	bl	800c85c <_fstat_r>
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	dbf1      	blt.n	800ba84 <__swhatbuf_r+0x12>
 800baa0:	9a01      	ldr	r2, [sp, #4]
 800baa2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800baa6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800baaa:	425a      	negs	r2, r3
 800baac:	415a      	adcs	r2, r3
 800baae:	602a      	str	r2, [r5, #0]
 800bab0:	e7ee      	b.n	800ba90 <__swhatbuf_r+0x1e>
 800bab2:	2340      	movs	r3, #64	; 0x40
 800bab4:	2000      	movs	r0, #0
 800bab6:	6023      	str	r3, [r4, #0]
 800bab8:	b016      	add	sp, #88	; 0x58
 800baba:	bd70      	pop	{r4, r5, r6, pc}

0800babc <__smakebuf_r>:
 800babc:	898b      	ldrh	r3, [r1, #12]
 800babe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bac0:	079d      	lsls	r5, r3, #30
 800bac2:	4606      	mov	r6, r0
 800bac4:	460c      	mov	r4, r1
 800bac6:	d507      	bpl.n	800bad8 <__smakebuf_r+0x1c>
 800bac8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bacc:	6023      	str	r3, [r4, #0]
 800bace:	6123      	str	r3, [r4, #16]
 800bad0:	2301      	movs	r3, #1
 800bad2:	6163      	str	r3, [r4, #20]
 800bad4:	b002      	add	sp, #8
 800bad6:	bd70      	pop	{r4, r5, r6, pc}
 800bad8:	ab01      	add	r3, sp, #4
 800bada:	466a      	mov	r2, sp
 800badc:	f7ff ffc9 	bl	800ba72 <__swhatbuf_r>
 800bae0:	9900      	ldr	r1, [sp, #0]
 800bae2:	4605      	mov	r5, r0
 800bae4:	4630      	mov	r0, r6
 800bae6:	f000 fc45 	bl	800c374 <_malloc_r>
 800baea:	b948      	cbnz	r0, 800bb00 <__smakebuf_r+0x44>
 800baec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baf0:	059a      	lsls	r2, r3, #22
 800baf2:	d4ef      	bmi.n	800bad4 <__smakebuf_r+0x18>
 800baf4:	f023 0303 	bic.w	r3, r3, #3
 800baf8:	f043 0302 	orr.w	r3, r3, #2
 800bafc:	81a3      	strh	r3, [r4, #12]
 800bafe:	e7e3      	b.n	800bac8 <__smakebuf_r+0xc>
 800bb00:	4b0d      	ldr	r3, [pc, #52]	; (800bb38 <__smakebuf_r+0x7c>)
 800bb02:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb04:	89a3      	ldrh	r3, [r4, #12]
 800bb06:	6020      	str	r0, [r4, #0]
 800bb08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb0c:	81a3      	strh	r3, [r4, #12]
 800bb0e:	9b00      	ldr	r3, [sp, #0]
 800bb10:	6163      	str	r3, [r4, #20]
 800bb12:	9b01      	ldr	r3, [sp, #4]
 800bb14:	6120      	str	r0, [r4, #16]
 800bb16:	b15b      	cbz	r3, 800bb30 <__smakebuf_r+0x74>
 800bb18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	f000 feaf 	bl	800c880 <_isatty_r>
 800bb22:	b128      	cbz	r0, 800bb30 <__smakebuf_r+0x74>
 800bb24:	89a3      	ldrh	r3, [r4, #12]
 800bb26:	f023 0303 	bic.w	r3, r3, #3
 800bb2a:	f043 0301 	orr.w	r3, r3, #1
 800bb2e:	81a3      	strh	r3, [r4, #12]
 800bb30:	89a0      	ldrh	r0, [r4, #12]
 800bb32:	4305      	orrs	r5, r0
 800bb34:	81a5      	strh	r5, [r4, #12]
 800bb36:	e7cd      	b.n	800bad4 <__smakebuf_r+0x18>
 800bb38:	0800b8c1 	.word	0x0800b8c1

0800bb3c <malloc>:
 800bb3c:	4b02      	ldr	r3, [pc, #8]	; (800bb48 <malloc+0xc>)
 800bb3e:	4601      	mov	r1, r0
 800bb40:	6818      	ldr	r0, [r3, #0]
 800bb42:	f000 bc17 	b.w	800c374 <_malloc_r>
 800bb46:	bf00      	nop
 800bb48:	2000000c 	.word	0x2000000c

0800bb4c <memcpy>:
 800bb4c:	440a      	add	r2, r1
 800bb4e:	4291      	cmp	r1, r2
 800bb50:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb54:	d100      	bne.n	800bb58 <memcpy+0xc>
 800bb56:	4770      	bx	lr
 800bb58:	b510      	push	{r4, lr}
 800bb5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb62:	4291      	cmp	r1, r2
 800bb64:	d1f9      	bne.n	800bb5a <memcpy+0xe>
 800bb66:	bd10      	pop	{r4, pc}

0800bb68 <_Balloc>:
 800bb68:	b570      	push	{r4, r5, r6, lr}
 800bb6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb6c:	4604      	mov	r4, r0
 800bb6e:	460d      	mov	r5, r1
 800bb70:	b976      	cbnz	r6, 800bb90 <_Balloc+0x28>
 800bb72:	2010      	movs	r0, #16
 800bb74:	f7ff ffe2 	bl	800bb3c <malloc>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	6260      	str	r0, [r4, #36]	; 0x24
 800bb7c:	b920      	cbnz	r0, 800bb88 <_Balloc+0x20>
 800bb7e:	4b18      	ldr	r3, [pc, #96]	; (800bbe0 <_Balloc+0x78>)
 800bb80:	4818      	ldr	r0, [pc, #96]	; (800bbe4 <_Balloc+0x7c>)
 800bb82:	2166      	movs	r1, #102	; 0x66
 800bb84:	f000 fe2a 	bl	800c7dc <__assert_func>
 800bb88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb8c:	6006      	str	r6, [r0, #0]
 800bb8e:	60c6      	str	r6, [r0, #12]
 800bb90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb92:	68f3      	ldr	r3, [r6, #12]
 800bb94:	b183      	cbz	r3, 800bbb8 <_Balloc+0x50>
 800bb96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb98:	68db      	ldr	r3, [r3, #12]
 800bb9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb9e:	b9b8      	cbnz	r0, 800bbd0 <_Balloc+0x68>
 800bba0:	2101      	movs	r1, #1
 800bba2:	fa01 f605 	lsl.w	r6, r1, r5
 800bba6:	1d72      	adds	r2, r6, #5
 800bba8:	0092      	lsls	r2, r2, #2
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f000 fb60 	bl	800c270 <_calloc_r>
 800bbb0:	b160      	cbz	r0, 800bbcc <_Balloc+0x64>
 800bbb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bbb6:	e00e      	b.n	800bbd6 <_Balloc+0x6e>
 800bbb8:	2221      	movs	r2, #33	; 0x21
 800bbba:	2104      	movs	r1, #4
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	f000 fb57 	bl	800c270 <_calloc_r>
 800bbc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbc4:	60f0      	str	r0, [r6, #12]
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d1e4      	bne.n	800bb96 <_Balloc+0x2e>
 800bbcc:	2000      	movs	r0, #0
 800bbce:	bd70      	pop	{r4, r5, r6, pc}
 800bbd0:	6802      	ldr	r2, [r0, #0]
 800bbd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bbdc:	e7f7      	b.n	800bbce <_Balloc+0x66>
 800bbde:	bf00      	nop
 800bbe0:	0800cad1 	.word	0x0800cad1
 800bbe4:	0800cbb4 	.word	0x0800cbb4

0800bbe8 <_Bfree>:
 800bbe8:	b570      	push	{r4, r5, r6, lr}
 800bbea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bbec:	4605      	mov	r5, r0
 800bbee:	460c      	mov	r4, r1
 800bbf0:	b976      	cbnz	r6, 800bc10 <_Bfree+0x28>
 800bbf2:	2010      	movs	r0, #16
 800bbf4:	f7ff ffa2 	bl	800bb3c <malloc>
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	6268      	str	r0, [r5, #36]	; 0x24
 800bbfc:	b920      	cbnz	r0, 800bc08 <_Bfree+0x20>
 800bbfe:	4b09      	ldr	r3, [pc, #36]	; (800bc24 <_Bfree+0x3c>)
 800bc00:	4809      	ldr	r0, [pc, #36]	; (800bc28 <_Bfree+0x40>)
 800bc02:	218a      	movs	r1, #138	; 0x8a
 800bc04:	f000 fdea 	bl	800c7dc <__assert_func>
 800bc08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc0c:	6006      	str	r6, [r0, #0]
 800bc0e:	60c6      	str	r6, [r0, #12]
 800bc10:	b13c      	cbz	r4, 800bc22 <_Bfree+0x3a>
 800bc12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bc14:	6862      	ldr	r2, [r4, #4]
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc1c:	6021      	str	r1, [r4, #0]
 800bc1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc22:	bd70      	pop	{r4, r5, r6, pc}
 800bc24:	0800cad1 	.word	0x0800cad1
 800bc28:	0800cbb4 	.word	0x0800cbb4

0800bc2c <__multadd>:
 800bc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc30:	690d      	ldr	r5, [r1, #16]
 800bc32:	4607      	mov	r7, r0
 800bc34:	460c      	mov	r4, r1
 800bc36:	461e      	mov	r6, r3
 800bc38:	f101 0c14 	add.w	ip, r1, #20
 800bc3c:	2000      	movs	r0, #0
 800bc3e:	f8dc 3000 	ldr.w	r3, [ip]
 800bc42:	b299      	uxth	r1, r3
 800bc44:	fb02 6101 	mla	r1, r2, r1, r6
 800bc48:	0c1e      	lsrs	r6, r3, #16
 800bc4a:	0c0b      	lsrs	r3, r1, #16
 800bc4c:	fb02 3306 	mla	r3, r2, r6, r3
 800bc50:	b289      	uxth	r1, r1
 800bc52:	3001      	adds	r0, #1
 800bc54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc58:	4285      	cmp	r5, r0
 800bc5a:	f84c 1b04 	str.w	r1, [ip], #4
 800bc5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bc62:	dcec      	bgt.n	800bc3e <__multadd+0x12>
 800bc64:	b30e      	cbz	r6, 800bcaa <__multadd+0x7e>
 800bc66:	68a3      	ldr	r3, [r4, #8]
 800bc68:	42ab      	cmp	r3, r5
 800bc6a:	dc19      	bgt.n	800bca0 <__multadd+0x74>
 800bc6c:	6861      	ldr	r1, [r4, #4]
 800bc6e:	4638      	mov	r0, r7
 800bc70:	3101      	adds	r1, #1
 800bc72:	f7ff ff79 	bl	800bb68 <_Balloc>
 800bc76:	4680      	mov	r8, r0
 800bc78:	b928      	cbnz	r0, 800bc86 <__multadd+0x5a>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	4b0c      	ldr	r3, [pc, #48]	; (800bcb0 <__multadd+0x84>)
 800bc7e:	480d      	ldr	r0, [pc, #52]	; (800bcb4 <__multadd+0x88>)
 800bc80:	21b5      	movs	r1, #181	; 0xb5
 800bc82:	f000 fdab 	bl	800c7dc <__assert_func>
 800bc86:	6922      	ldr	r2, [r4, #16]
 800bc88:	3202      	adds	r2, #2
 800bc8a:	f104 010c 	add.w	r1, r4, #12
 800bc8e:	0092      	lsls	r2, r2, #2
 800bc90:	300c      	adds	r0, #12
 800bc92:	f7ff ff5b 	bl	800bb4c <memcpy>
 800bc96:	4621      	mov	r1, r4
 800bc98:	4638      	mov	r0, r7
 800bc9a:	f7ff ffa5 	bl	800bbe8 <_Bfree>
 800bc9e:	4644      	mov	r4, r8
 800bca0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bca4:	3501      	adds	r5, #1
 800bca6:	615e      	str	r6, [r3, #20]
 800bca8:	6125      	str	r5, [r4, #16]
 800bcaa:	4620      	mov	r0, r4
 800bcac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcb0:	0800cb43 	.word	0x0800cb43
 800bcb4:	0800cbb4 	.word	0x0800cbb4

0800bcb8 <__hi0bits>:
 800bcb8:	0c03      	lsrs	r3, r0, #16
 800bcba:	041b      	lsls	r3, r3, #16
 800bcbc:	b9d3      	cbnz	r3, 800bcf4 <__hi0bits+0x3c>
 800bcbe:	0400      	lsls	r0, r0, #16
 800bcc0:	2310      	movs	r3, #16
 800bcc2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bcc6:	bf04      	itt	eq
 800bcc8:	0200      	lsleq	r0, r0, #8
 800bcca:	3308      	addeq	r3, #8
 800bccc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bcd0:	bf04      	itt	eq
 800bcd2:	0100      	lsleq	r0, r0, #4
 800bcd4:	3304      	addeq	r3, #4
 800bcd6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bcda:	bf04      	itt	eq
 800bcdc:	0080      	lsleq	r0, r0, #2
 800bcde:	3302      	addeq	r3, #2
 800bce0:	2800      	cmp	r0, #0
 800bce2:	db05      	blt.n	800bcf0 <__hi0bits+0x38>
 800bce4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bce8:	f103 0301 	add.w	r3, r3, #1
 800bcec:	bf08      	it	eq
 800bcee:	2320      	moveq	r3, #32
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	4770      	bx	lr
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	e7e4      	b.n	800bcc2 <__hi0bits+0xa>

0800bcf8 <__lo0bits>:
 800bcf8:	6803      	ldr	r3, [r0, #0]
 800bcfa:	f013 0207 	ands.w	r2, r3, #7
 800bcfe:	4601      	mov	r1, r0
 800bd00:	d00b      	beq.n	800bd1a <__lo0bits+0x22>
 800bd02:	07da      	lsls	r2, r3, #31
 800bd04:	d423      	bmi.n	800bd4e <__lo0bits+0x56>
 800bd06:	0798      	lsls	r0, r3, #30
 800bd08:	bf49      	itett	mi
 800bd0a:	085b      	lsrmi	r3, r3, #1
 800bd0c:	089b      	lsrpl	r3, r3, #2
 800bd0e:	2001      	movmi	r0, #1
 800bd10:	600b      	strmi	r3, [r1, #0]
 800bd12:	bf5c      	itt	pl
 800bd14:	600b      	strpl	r3, [r1, #0]
 800bd16:	2002      	movpl	r0, #2
 800bd18:	4770      	bx	lr
 800bd1a:	b298      	uxth	r0, r3
 800bd1c:	b9a8      	cbnz	r0, 800bd4a <__lo0bits+0x52>
 800bd1e:	0c1b      	lsrs	r3, r3, #16
 800bd20:	2010      	movs	r0, #16
 800bd22:	b2da      	uxtb	r2, r3
 800bd24:	b90a      	cbnz	r2, 800bd2a <__lo0bits+0x32>
 800bd26:	3008      	adds	r0, #8
 800bd28:	0a1b      	lsrs	r3, r3, #8
 800bd2a:	071a      	lsls	r2, r3, #28
 800bd2c:	bf04      	itt	eq
 800bd2e:	091b      	lsreq	r3, r3, #4
 800bd30:	3004      	addeq	r0, #4
 800bd32:	079a      	lsls	r2, r3, #30
 800bd34:	bf04      	itt	eq
 800bd36:	089b      	lsreq	r3, r3, #2
 800bd38:	3002      	addeq	r0, #2
 800bd3a:	07da      	lsls	r2, r3, #31
 800bd3c:	d403      	bmi.n	800bd46 <__lo0bits+0x4e>
 800bd3e:	085b      	lsrs	r3, r3, #1
 800bd40:	f100 0001 	add.w	r0, r0, #1
 800bd44:	d005      	beq.n	800bd52 <__lo0bits+0x5a>
 800bd46:	600b      	str	r3, [r1, #0]
 800bd48:	4770      	bx	lr
 800bd4a:	4610      	mov	r0, r2
 800bd4c:	e7e9      	b.n	800bd22 <__lo0bits+0x2a>
 800bd4e:	2000      	movs	r0, #0
 800bd50:	4770      	bx	lr
 800bd52:	2020      	movs	r0, #32
 800bd54:	4770      	bx	lr
	...

0800bd58 <__i2b>:
 800bd58:	b510      	push	{r4, lr}
 800bd5a:	460c      	mov	r4, r1
 800bd5c:	2101      	movs	r1, #1
 800bd5e:	f7ff ff03 	bl	800bb68 <_Balloc>
 800bd62:	4602      	mov	r2, r0
 800bd64:	b928      	cbnz	r0, 800bd72 <__i2b+0x1a>
 800bd66:	4b05      	ldr	r3, [pc, #20]	; (800bd7c <__i2b+0x24>)
 800bd68:	4805      	ldr	r0, [pc, #20]	; (800bd80 <__i2b+0x28>)
 800bd6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bd6e:	f000 fd35 	bl	800c7dc <__assert_func>
 800bd72:	2301      	movs	r3, #1
 800bd74:	6144      	str	r4, [r0, #20]
 800bd76:	6103      	str	r3, [r0, #16]
 800bd78:	bd10      	pop	{r4, pc}
 800bd7a:	bf00      	nop
 800bd7c:	0800cb43 	.word	0x0800cb43
 800bd80:	0800cbb4 	.word	0x0800cbb4

0800bd84 <__multiply>:
 800bd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd88:	4691      	mov	r9, r2
 800bd8a:	690a      	ldr	r2, [r1, #16]
 800bd8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	bfb8      	it	lt
 800bd94:	460b      	movlt	r3, r1
 800bd96:	460c      	mov	r4, r1
 800bd98:	bfbc      	itt	lt
 800bd9a:	464c      	movlt	r4, r9
 800bd9c:	4699      	movlt	r9, r3
 800bd9e:	6927      	ldr	r7, [r4, #16]
 800bda0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bda4:	68a3      	ldr	r3, [r4, #8]
 800bda6:	6861      	ldr	r1, [r4, #4]
 800bda8:	eb07 060a 	add.w	r6, r7, sl
 800bdac:	42b3      	cmp	r3, r6
 800bdae:	b085      	sub	sp, #20
 800bdb0:	bfb8      	it	lt
 800bdb2:	3101      	addlt	r1, #1
 800bdb4:	f7ff fed8 	bl	800bb68 <_Balloc>
 800bdb8:	b930      	cbnz	r0, 800bdc8 <__multiply+0x44>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	4b44      	ldr	r3, [pc, #272]	; (800bed0 <__multiply+0x14c>)
 800bdbe:	4845      	ldr	r0, [pc, #276]	; (800bed4 <__multiply+0x150>)
 800bdc0:	f240 115d 	movw	r1, #349	; 0x15d
 800bdc4:	f000 fd0a 	bl	800c7dc <__assert_func>
 800bdc8:	f100 0514 	add.w	r5, r0, #20
 800bdcc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bdd0:	462b      	mov	r3, r5
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	4543      	cmp	r3, r8
 800bdd6:	d321      	bcc.n	800be1c <__multiply+0x98>
 800bdd8:	f104 0314 	add.w	r3, r4, #20
 800bddc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bde0:	f109 0314 	add.w	r3, r9, #20
 800bde4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bde8:	9202      	str	r2, [sp, #8]
 800bdea:	1b3a      	subs	r2, r7, r4
 800bdec:	3a15      	subs	r2, #21
 800bdee:	f022 0203 	bic.w	r2, r2, #3
 800bdf2:	3204      	adds	r2, #4
 800bdf4:	f104 0115 	add.w	r1, r4, #21
 800bdf8:	428f      	cmp	r7, r1
 800bdfa:	bf38      	it	cc
 800bdfc:	2204      	movcc	r2, #4
 800bdfe:	9201      	str	r2, [sp, #4]
 800be00:	9a02      	ldr	r2, [sp, #8]
 800be02:	9303      	str	r3, [sp, #12]
 800be04:	429a      	cmp	r2, r3
 800be06:	d80c      	bhi.n	800be22 <__multiply+0x9e>
 800be08:	2e00      	cmp	r6, #0
 800be0a:	dd03      	ble.n	800be14 <__multiply+0x90>
 800be0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be10:	2b00      	cmp	r3, #0
 800be12:	d05a      	beq.n	800beca <__multiply+0x146>
 800be14:	6106      	str	r6, [r0, #16]
 800be16:	b005      	add	sp, #20
 800be18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be1c:	f843 2b04 	str.w	r2, [r3], #4
 800be20:	e7d8      	b.n	800bdd4 <__multiply+0x50>
 800be22:	f8b3 a000 	ldrh.w	sl, [r3]
 800be26:	f1ba 0f00 	cmp.w	sl, #0
 800be2a:	d024      	beq.n	800be76 <__multiply+0xf2>
 800be2c:	f104 0e14 	add.w	lr, r4, #20
 800be30:	46a9      	mov	r9, r5
 800be32:	f04f 0c00 	mov.w	ip, #0
 800be36:	f85e 2b04 	ldr.w	r2, [lr], #4
 800be3a:	f8d9 1000 	ldr.w	r1, [r9]
 800be3e:	fa1f fb82 	uxth.w	fp, r2
 800be42:	b289      	uxth	r1, r1
 800be44:	fb0a 110b 	mla	r1, sl, fp, r1
 800be48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800be4c:	f8d9 2000 	ldr.w	r2, [r9]
 800be50:	4461      	add	r1, ip
 800be52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800be56:	fb0a c20b 	mla	r2, sl, fp, ip
 800be5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800be5e:	b289      	uxth	r1, r1
 800be60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800be64:	4577      	cmp	r7, lr
 800be66:	f849 1b04 	str.w	r1, [r9], #4
 800be6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800be6e:	d8e2      	bhi.n	800be36 <__multiply+0xb2>
 800be70:	9a01      	ldr	r2, [sp, #4]
 800be72:	f845 c002 	str.w	ip, [r5, r2]
 800be76:	9a03      	ldr	r2, [sp, #12]
 800be78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800be7c:	3304      	adds	r3, #4
 800be7e:	f1b9 0f00 	cmp.w	r9, #0
 800be82:	d020      	beq.n	800bec6 <__multiply+0x142>
 800be84:	6829      	ldr	r1, [r5, #0]
 800be86:	f104 0c14 	add.w	ip, r4, #20
 800be8a:	46ae      	mov	lr, r5
 800be8c:	f04f 0a00 	mov.w	sl, #0
 800be90:	f8bc b000 	ldrh.w	fp, [ip]
 800be94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800be98:	fb09 220b 	mla	r2, r9, fp, r2
 800be9c:	4492      	add	sl, r2
 800be9e:	b289      	uxth	r1, r1
 800bea0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bea4:	f84e 1b04 	str.w	r1, [lr], #4
 800bea8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800beac:	f8be 1000 	ldrh.w	r1, [lr]
 800beb0:	0c12      	lsrs	r2, r2, #16
 800beb2:	fb09 1102 	mla	r1, r9, r2, r1
 800beb6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800beba:	4567      	cmp	r7, ip
 800bebc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bec0:	d8e6      	bhi.n	800be90 <__multiply+0x10c>
 800bec2:	9a01      	ldr	r2, [sp, #4]
 800bec4:	50a9      	str	r1, [r5, r2]
 800bec6:	3504      	adds	r5, #4
 800bec8:	e79a      	b.n	800be00 <__multiply+0x7c>
 800beca:	3e01      	subs	r6, #1
 800becc:	e79c      	b.n	800be08 <__multiply+0x84>
 800bece:	bf00      	nop
 800bed0:	0800cb43 	.word	0x0800cb43
 800bed4:	0800cbb4 	.word	0x0800cbb4

0800bed8 <__pow5mult>:
 800bed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bedc:	4615      	mov	r5, r2
 800bede:	f012 0203 	ands.w	r2, r2, #3
 800bee2:	4606      	mov	r6, r0
 800bee4:	460f      	mov	r7, r1
 800bee6:	d007      	beq.n	800bef8 <__pow5mult+0x20>
 800bee8:	4c25      	ldr	r4, [pc, #148]	; (800bf80 <__pow5mult+0xa8>)
 800beea:	3a01      	subs	r2, #1
 800beec:	2300      	movs	r3, #0
 800beee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bef2:	f7ff fe9b 	bl	800bc2c <__multadd>
 800bef6:	4607      	mov	r7, r0
 800bef8:	10ad      	asrs	r5, r5, #2
 800befa:	d03d      	beq.n	800bf78 <__pow5mult+0xa0>
 800befc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800befe:	b97c      	cbnz	r4, 800bf20 <__pow5mult+0x48>
 800bf00:	2010      	movs	r0, #16
 800bf02:	f7ff fe1b 	bl	800bb3c <malloc>
 800bf06:	4602      	mov	r2, r0
 800bf08:	6270      	str	r0, [r6, #36]	; 0x24
 800bf0a:	b928      	cbnz	r0, 800bf18 <__pow5mult+0x40>
 800bf0c:	4b1d      	ldr	r3, [pc, #116]	; (800bf84 <__pow5mult+0xac>)
 800bf0e:	481e      	ldr	r0, [pc, #120]	; (800bf88 <__pow5mult+0xb0>)
 800bf10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bf14:	f000 fc62 	bl	800c7dc <__assert_func>
 800bf18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf1c:	6004      	str	r4, [r0, #0]
 800bf1e:	60c4      	str	r4, [r0, #12]
 800bf20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bf24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bf28:	b94c      	cbnz	r4, 800bf3e <__pow5mult+0x66>
 800bf2a:	f240 2171 	movw	r1, #625	; 0x271
 800bf2e:	4630      	mov	r0, r6
 800bf30:	f7ff ff12 	bl	800bd58 <__i2b>
 800bf34:	2300      	movs	r3, #0
 800bf36:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	6003      	str	r3, [r0, #0]
 800bf3e:	f04f 0900 	mov.w	r9, #0
 800bf42:	07eb      	lsls	r3, r5, #31
 800bf44:	d50a      	bpl.n	800bf5c <__pow5mult+0x84>
 800bf46:	4639      	mov	r1, r7
 800bf48:	4622      	mov	r2, r4
 800bf4a:	4630      	mov	r0, r6
 800bf4c:	f7ff ff1a 	bl	800bd84 <__multiply>
 800bf50:	4639      	mov	r1, r7
 800bf52:	4680      	mov	r8, r0
 800bf54:	4630      	mov	r0, r6
 800bf56:	f7ff fe47 	bl	800bbe8 <_Bfree>
 800bf5a:	4647      	mov	r7, r8
 800bf5c:	106d      	asrs	r5, r5, #1
 800bf5e:	d00b      	beq.n	800bf78 <__pow5mult+0xa0>
 800bf60:	6820      	ldr	r0, [r4, #0]
 800bf62:	b938      	cbnz	r0, 800bf74 <__pow5mult+0x9c>
 800bf64:	4622      	mov	r2, r4
 800bf66:	4621      	mov	r1, r4
 800bf68:	4630      	mov	r0, r6
 800bf6a:	f7ff ff0b 	bl	800bd84 <__multiply>
 800bf6e:	6020      	str	r0, [r4, #0]
 800bf70:	f8c0 9000 	str.w	r9, [r0]
 800bf74:	4604      	mov	r4, r0
 800bf76:	e7e4      	b.n	800bf42 <__pow5mult+0x6a>
 800bf78:	4638      	mov	r0, r7
 800bf7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf7e:	bf00      	nop
 800bf80:	0800cd00 	.word	0x0800cd00
 800bf84:	0800cad1 	.word	0x0800cad1
 800bf88:	0800cbb4 	.word	0x0800cbb4

0800bf8c <__lshift>:
 800bf8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf90:	460c      	mov	r4, r1
 800bf92:	6849      	ldr	r1, [r1, #4]
 800bf94:	6923      	ldr	r3, [r4, #16]
 800bf96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf9a:	68a3      	ldr	r3, [r4, #8]
 800bf9c:	4607      	mov	r7, r0
 800bf9e:	4691      	mov	r9, r2
 800bfa0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bfa4:	f108 0601 	add.w	r6, r8, #1
 800bfa8:	42b3      	cmp	r3, r6
 800bfaa:	db0b      	blt.n	800bfc4 <__lshift+0x38>
 800bfac:	4638      	mov	r0, r7
 800bfae:	f7ff fddb 	bl	800bb68 <_Balloc>
 800bfb2:	4605      	mov	r5, r0
 800bfb4:	b948      	cbnz	r0, 800bfca <__lshift+0x3e>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	4b2a      	ldr	r3, [pc, #168]	; (800c064 <__lshift+0xd8>)
 800bfba:	482b      	ldr	r0, [pc, #172]	; (800c068 <__lshift+0xdc>)
 800bfbc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bfc0:	f000 fc0c 	bl	800c7dc <__assert_func>
 800bfc4:	3101      	adds	r1, #1
 800bfc6:	005b      	lsls	r3, r3, #1
 800bfc8:	e7ee      	b.n	800bfa8 <__lshift+0x1c>
 800bfca:	2300      	movs	r3, #0
 800bfcc:	f100 0114 	add.w	r1, r0, #20
 800bfd0:	f100 0210 	add.w	r2, r0, #16
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	4553      	cmp	r3, sl
 800bfd8:	db37      	blt.n	800c04a <__lshift+0xbe>
 800bfda:	6920      	ldr	r0, [r4, #16]
 800bfdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bfe0:	f104 0314 	add.w	r3, r4, #20
 800bfe4:	f019 091f 	ands.w	r9, r9, #31
 800bfe8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bfec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bff0:	d02f      	beq.n	800c052 <__lshift+0xc6>
 800bff2:	f1c9 0e20 	rsb	lr, r9, #32
 800bff6:	468a      	mov	sl, r1
 800bff8:	f04f 0c00 	mov.w	ip, #0
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	fa02 f209 	lsl.w	r2, r2, r9
 800c002:	ea42 020c 	orr.w	r2, r2, ip
 800c006:	f84a 2b04 	str.w	r2, [sl], #4
 800c00a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c00e:	4298      	cmp	r0, r3
 800c010:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c014:	d8f2      	bhi.n	800bffc <__lshift+0x70>
 800c016:	1b03      	subs	r3, r0, r4
 800c018:	3b15      	subs	r3, #21
 800c01a:	f023 0303 	bic.w	r3, r3, #3
 800c01e:	3304      	adds	r3, #4
 800c020:	f104 0215 	add.w	r2, r4, #21
 800c024:	4290      	cmp	r0, r2
 800c026:	bf38      	it	cc
 800c028:	2304      	movcc	r3, #4
 800c02a:	f841 c003 	str.w	ip, [r1, r3]
 800c02e:	f1bc 0f00 	cmp.w	ip, #0
 800c032:	d001      	beq.n	800c038 <__lshift+0xac>
 800c034:	f108 0602 	add.w	r6, r8, #2
 800c038:	3e01      	subs	r6, #1
 800c03a:	4638      	mov	r0, r7
 800c03c:	612e      	str	r6, [r5, #16]
 800c03e:	4621      	mov	r1, r4
 800c040:	f7ff fdd2 	bl	800bbe8 <_Bfree>
 800c044:	4628      	mov	r0, r5
 800c046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c04a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c04e:	3301      	adds	r3, #1
 800c050:	e7c1      	b.n	800bfd6 <__lshift+0x4a>
 800c052:	3904      	subs	r1, #4
 800c054:	f853 2b04 	ldr.w	r2, [r3], #4
 800c058:	f841 2f04 	str.w	r2, [r1, #4]!
 800c05c:	4298      	cmp	r0, r3
 800c05e:	d8f9      	bhi.n	800c054 <__lshift+0xc8>
 800c060:	e7ea      	b.n	800c038 <__lshift+0xac>
 800c062:	bf00      	nop
 800c064:	0800cb43 	.word	0x0800cb43
 800c068:	0800cbb4 	.word	0x0800cbb4

0800c06c <__mcmp>:
 800c06c:	b530      	push	{r4, r5, lr}
 800c06e:	6902      	ldr	r2, [r0, #16]
 800c070:	690c      	ldr	r4, [r1, #16]
 800c072:	1b12      	subs	r2, r2, r4
 800c074:	d10e      	bne.n	800c094 <__mcmp+0x28>
 800c076:	f100 0314 	add.w	r3, r0, #20
 800c07a:	3114      	adds	r1, #20
 800c07c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c080:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c084:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c088:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c08c:	42a5      	cmp	r5, r4
 800c08e:	d003      	beq.n	800c098 <__mcmp+0x2c>
 800c090:	d305      	bcc.n	800c09e <__mcmp+0x32>
 800c092:	2201      	movs	r2, #1
 800c094:	4610      	mov	r0, r2
 800c096:	bd30      	pop	{r4, r5, pc}
 800c098:	4283      	cmp	r3, r0
 800c09a:	d3f3      	bcc.n	800c084 <__mcmp+0x18>
 800c09c:	e7fa      	b.n	800c094 <__mcmp+0x28>
 800c09e:	f04f 32ff 	mov.w	r2, #4294967295
 800c0a2:	e7f7      	b.n	800c094 <__mcmp+0x28>

0800c0a4 <__mdiff>:
 800c0a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a8:	460c      	mov	r4, r1
 800c0aa:	4606      	mov	r6, r0
 800c0ac:	4611      	mov	r1, r2
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	4690      	mov	r8, r2
 800c0b2:	f7ff ffdb 	bl	800c06c <__mcmp>
 800c0b6:	1e05      	subs	r5, r0, #0
 800c0b8:	d110      	bne.n	800c0dc <__mdiff+0x38>
 800c0ba:	4629      	mov	r1, r5
 800c0bc:	4630      	mov	r0, r6
 800c0be:	f7ff fd53 	bl	800bb68 <_Balloc>
 800c0c2:	b930      	cbnz	r0, 800c0d2 <__mdiff+0x2e>
 800c0c4:	4b3a      	ldr	r3, [pc, #232]	; (800c1b0 <__mdiff+0x10c>)
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	f240 2132 	movw	r1, #562	; 0x232
 800c0cc:	4839      	ldr	r0, [pc, #228]	; (800c1b4 <__mdiff+0x110>)
 800c0ce:	f000 fb85 	bl	800c7dc <__assert_func>
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c0d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0dc:	bfa4      	itt	ge
 800c0de:	4643      	movge	r3, r8
 800c0e0:	46a0      	movge	r8, r4
 800c0e2:	4630      	mov	r0, r6
 800c0e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c0e8:	bfa6      	itte	ge
 800c0ea:	461c      	movge	r4, r3
 800c0ec:	2500      	movge	r5, #0
 800c0ee:	2501      	movlt	r5, #1
 800c0f0:	f7ff fd3a 	bl	800bb68 <_Balloc>
 800c0f4:	b920      	cbnz	r0, 800c100 <__mdiff+0x5c>
 800c0f6:	4b2e      	ldr	r3, [pc, #184]	; (800c1b0 <__mdiff+0x10c>)
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c0fe:	e7e5      	b.n	800c0cc <__mdiff+0x28>
 800c100:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c104:	6926      	ldr	r6, [r4, #16]
 800c106:	60c5      	str	r5, [r0, #12]
 800c108:	f104 0914 	add.w	r9, r4, #20
 800c10c:	f108 0514 	add.w	r5, r8, #20
 800c110:	f100 0e14 	add.w	lr, r0, #20
 800c114:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c118:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c11c:	f108 0210 	add.w	r2, r8, #16
 800c120:	46f2      	mov	sl, lr
 800c122:	2100      	movs	r1, #0
 800c124:	f859 3b04 	ldr.w	r3, [r9], #4
 800c128:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c12c:	fa1f f883 	uxth.w	r8, r3
 800c130:	fa11 f18b 	uxtah	r1, r1, fp
 800c134:	0c1b      	lsrs	r3, r3, #16
 800c136:	eba1 0808 	sub.w	r8, r1, r8
 800c13a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c13e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c142:	fa1f f888 	uxth.w	r8, r8
 800c146:	1419      	asrs	r1, r3, #16
 800c148:	454e      	cmp	r6, r9
 800c14a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c14e:	f84a 3b04 	str.w	r3, [sl], #4
 800c152:	d8e7      	bhi.n	800c124 <__mdiff+0x80>
 800c154:	1b33      	subs	r3, r6, r4
 800c156:	3b15      	subs	r3, #21
 800c158:	f023 0303 	bic.w	r3, r3, #3
 800c15c:	3304      	adds	r3, #4
 800c15e:	3415      	adds	r4, #21
 800c160:	42a6      	cmp	r6, r4
 800c162:	bf38      	it	cc
 800c164:	2304      	movcc	r3, #4
 800c166:	441d      	add	r5, r3
 800c168:	4473      	add	r3, lr
 800c16a:	469e      	mov	lr, r3
 800c16c:	462e      	mov	r6, r5
 800c16e:	4566      	cmp	r6, ip
 800c170:	d30e      	bcc.n	800c190 <__mdiff+0xec>
 800c172:	f10c 0203 	add.w	r2, ip, #3
 800c176:	1b52      	subs	r2, r2, r5
 800c178:	f022 0203 	bic.w	r2, r2, #3
 800c17c:	3d03      	subs	r5, #3
 800c17e:	45ac      	cmp	ip, r5
 800c180:	bf38      	it	cc
 800c182:	2200      	movcc	r2, #0
 800c184:	441a      	add	r2, r3
 800c186:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c18a:	b17b      	cbz	r3, 800c1ac <__mdiff+0x108>
 800c18c:	6107      	str	r7, [r0, #16]
 800c18e:	e7a3      	b.n	800c0d8 <__mdiff+0x34>
 800c190:	f856 8b04 	ldr.w	r8, [r6], #4
 800c194:	fa11 f288 	uxtah	r2, r1, r8
 800c198:	1414      	asrs	r4, r2, #16
 800c19a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c19e:	b292      	uxth	r2, r2
 800c1a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c1a4:	f84e 2b04 	str.w	r2, [lr], #4
 800c1a8:	1421      	asrs	r1, r4, #16
 800c1aa:	e7e0      	b.n	800c16e <__mdiff+0xca>
 800c1ac:	3f01      	subs	r7, #1
 800c1ae:	e7ea      	b.n	800c186 <__mdiff+0xe2>
 800c1b0:	0800cb43 	.word	0x0800cb43
 800c1b4:	0800cbb4 	.word	0x0800cbb4

0800c1b8 <__d2b>:
 800c1b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1bc:	4689      	mov	r9, r1
 800c1be:	2101      	movs	r1, #1
 800c1c0:	ec57 6b10 	vmov	r6, r7, d0
 800c1c4:	4690      	mov	r8, r2
 800c1c6:	f7ff fccf 	bl	800bb68 <_Balloc>
 800c1ca:	4604      	mov	r4, r0
 800c1cc:	b930      	cbnz	r0, 800c1dc <__d2b+0x24>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	4b25      	ldr	r3, [pc, #148]	; (800c268 <__d2b+0xb0>)
 800c1d2:	4826      	ldr	r0, [pc, #152]	; (800c26c <__d2b+0xb4>)
 800c1d4:	f240 310a 	movw	r1, #778	; 0x30a
 800c1d8:	f000 fb00 	bl	800c7dc <__assert_func>
 800c1dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c1e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c1e4:	bb35      	cbnz	r5, 800c234 <__d2b+0x7c>
 800c1e6:	2e00      	cmp	r6, #0
 800c1e8:	9301      	str	r3, [sp, #4]
 800c1ea:	d028      	beq.n	800c23e <__d2b+0x86>
 800c1ec:	4668      	mov	r0, sp
 800c1ee:	9600      	str	r6, [sp, #0]
 800c1f0:	f7ff fd82 	bl	800bcf8 <__lo0bits>
 800c1f4:	9900      	ldr	r1, [sp, #0]
 800c1f6:	b300      	cbz	r0, 800c23a <__d2b+0x82>
 800c1f8:	9a01      	ldr	r2, [sp, #4]
 800c1fa:	f1c0 0320 	rsb	r3, r0, #32
 800c1fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c202:	430b      	orrs	r3, r1
 800c204:	40c2      	lsrs	r2, r0
 800c206:	6163      	str	r3, [r4, #20]
 800c208:	9201      	str	r2, [sp, #4]
 800c20a:	9b01      	ldr	r3, [sp, #4]
 800c20c:	61a3      	str	r3, [r4, #24]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	bf14      	ite	ne
 800c212:	2202      	movne	r2, #2
 800c214:	2201      	moveq	r2, #1
 800c216:	6122      	str	r2, [r4, #16]
 800c218:	b1d5      	cbz	r5, 800c250 <__d2b+0x98>
 800c21a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c21e:	4405      	add	r5, r0
 800c220:	f8c9 5000 	str.w	r5, [r9]
 800c224:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c228:	f8c8 0000 	str.w	r0, [r8]
 800c22c:	4620      	mov	r0, r4
 800c22e:	b003      	add	sp, #12
 800c230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c234:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c238:	e7d5      	b.n	800c1e6 <__d2b+0x2e>
 800c23a:	6161      	str	r1, [r4, #20]
 800c23c:	e7e5      	b.n	800c20a <__d2b+0x52>
 800c23e:	a801      	add	r0, sp, #4
 800c240:	f7ff fd5a 	bl	800bcf8 <__lo0bits>
 800c244:	9b01      	ldr	r3, [sp, #4]
 800c246:	6163      	str	r3, [r4, #20]
 800c248:	2201      	movs	r2, #1
 800c24a:	6122      	str	r2, [r4, #16]
 800c24c:	3020      	adds	r0, #32
 800c24e:	e7e3      	b.n	800c218 <__d2b+0x60>
 800c250:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c254:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c258:	f8c9 0000 	str.w	r0, [r9]
 800c25c:	6918      	ldr	r0, [r3, #16]
 800c25e:	f7ff fd2b 	bl	800bcb8 <__hi0bits>
 800c262:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c266:	e7df      	b.n	800c228 <__d2b+0x70>
 800c268:	0800cb43 	.word	0x0800cb43
 800c26c:	0800cbb4 	.word	0x0800cbb4

0800c270 <_calloc_r>:
 800c270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c272:	fba1 2402 	umull	r2, r4, r1, r2
 800c276:	b94c      	cbnz	r4, 800c28c <_calloc_r+0x1c>
 800c278:	4611      	mov	r1, r2
 800c27a:	9201      	str	r2, [sp, #4]
 800c27c:	f000 f87a 	bl	800c374 <_malloc_r>
 800c280:	9a01      	ldr	r2, [sp, #4]
 800c282:	4605      	mov	r5, r0
 800c284:	b930      	cbnz	r0, 800c294 <_calloc_r+0x24>
 800c286:	4628      	mov	r0, r5
 800c288:	b003      	add	sp, #12
 800c28a:	bd30      	pop	{r4, r5, pc}
 800c28c:	220c      	movs	r2, #12
 800c28e:	6002      	str	r2, [r0, #0]
 800c290:	2500      	movs	r5, #0
 800c292:	e7f8      	b.n	800c286 <_calloc_r+0x16>
 800c294:	4621      	mov	r1, r4
 800c296:	f7fd fe67 	bl	8009f68 <memset>
 800c29a:	e7f4      	b.n	800c286 <_calloc_r+0x16>

0800c29c <_free_r>:
 800c29c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c29e:	2900      	cmp	r1, #0
 800c2a0:	d044      	beq.n	800c32c <_free_r+0x90>
 800c2a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2a6:	9001      	str	r0, [sp, #4]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	f1a1 0404 	sub.w	r4, r1, #4
 800c2ae:	bfb8      	it	lt
 800c2b0:	18e4      	addlt	r4, r4, r3
 800c2b2:	f000 fb19 	bl	800c8e8 <__malloc_lock>
 800c2b6:	4a1e      	ldr	r2, [pc, #120]	; (800c330 <_free_r+0x94>)
 800c2b8:	9801      	ldr	r0, [sp, #4]
 800c2ba:	6813      	ldr	r3, [r2, #0]
 800c2bc:	b933      	cbnz	r3, 800c2cc <_free_r+0x30>
 800c2be:	6063      	str	r3, [r4, #4]
 800c2c0:	6014      	str	r4, [r2, #0]
 800c2c2:	b003      	add	sp, #12
 800c2c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2c8:	f000 bb14 	b.w	800c8f4 <__malloc_unlock>
 800c2cc:	42a3      	cmp	r3, r4
 800c2ce:	d908      	bls.n	800c2e2 <_free_r+0x46>
 800c2d0:	6825      	ldr	r5, [r4, #0]
 800c2d2:	1961      	adds	r1, r4, r5
 800c2d4:	428b      	cmp	r3, r1
 800c2d6:	bf01      	itttt	eq
 800c2d8:	6819      	ldreq	r1, [r3, #0]
 800c2da:	685b      	ldreq	r3, [r3, #4]
 800c2dc:	1949      	addeq	r1, r1, r5
 800c2de:	6021      	streq	r1, [r4, #0]
 800c2e0:	e7ed      	b.n	800c2be <_free_r+0x22>
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	b10b      	cbz	r3, 800c2ec <_free_r+0x50>
 800c2e8:	42a3      	cmp	r3, r4
 800c2ea:	d9fa      	bls.n	800c2e2 <_free_r+0x46>
 800c2ec:	6811      	ldr	r1, [r2, #0]
 800c2ee:	1855      	adds	r5, r2, r1
 800c2f0:	42a5      	cmp	r5, r4
 800c2f2:	d10b      	bne.n	800c30c <_free_r+0x70>
 800c2f4:	6824      	ldr	r4, [r4, #0]
 800c2f6:	4421      	add	r1, r4
 800c2f8:	1854      	adds	r4, r2, r1
 800c2fa:	42a3      	cmp	r3, r4
 800c2fc:	6011      	str	r1, [r2, #0]
 800c2fe:	d1e0      	bne.n	800c2c2 <_free_r+0x26>
 800c300:	681c      	ldr	r4, [r3, #0]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	6053      	str	r3, [r2, #4]
 800c306:	4421      	add	r1, r4
 800c308:	6011      	str	r1, [r2, #0]
 800c30a:	e7da      	b.n	800c2c2 <_free_r+0x26>
 800c30c:	d902      	bls.n	800c314 <_free_r+0x78>
 800c30e:	230c      	movs	r3, #12
 800c310:	6003      	str	r3, [r0, #0]
 800c312:	e7d6      	b.n	800c2c2 <_free_r+0x26>
 800c314:	6825      	ldr	r5, [r4, #0]
 800c316:	1961      	adds	r1, r4, r5
 800c318:	428b      	cmp	r3, r1
 800c31a:	bf04      	itt	eq
 800c31c:	6819      	ldreq	r1, [r3, #0]
 800c31e:	685b      	ldreq	r3, [r3, #4]
 800c320:	6063      	str	r3, [r4, #4]
 800c322:	bf04      	itt	eq
 800c324:	1949      	addeq	r1, r1, r5
 800c326:	6021      	streq	r1, [r4, #0]
 800c328:	6054      	str	r4, [r2, #4]
 800c32a:	e7ca      	b.n	800c2c2 <_free_r+0x26>
 800c32c:	b003      	add	sp, #12
 800c32e:	bd30      	pop	{r4, r5, pc}
 800c330:	20000c10 	.word	0x20000c10

0800c334 <sbrk_aligned>:
 800c334:	b570      	push	{r4, r5, r6, lr}
 800c336:	4e0e      	ldr	r6, [pc, #56]	; (800c370 <sbrk_aligned+0x3c>)
 800c338:	460c      	mov	r4, r1
 800c33a:	6831      	ldr	r1, [r6, #0]
 800c33c:	4605      	mov	r5, r0
 800c33e:	b911      	cbnz	r1, 800c346 <sbrk_aligned+0x12>
 800c340:	f000 f9e6 	bl	800c710 <_sbrk_r>
 800c344:	6030      	str	r0, [r6, #0]
 800c346:	4621      	mov	r1, r4
 800c348:	4628      	mov	r0, r5
 800c34a:	f000 f9e1 	bl	800c710 <_sbrk_r>
 800c34e:	1c43      	adds	r3, r0, #1
 800c350:	d00a      	beq.n	800c368 <sbrk_aligned+0x34>
 800c352:	1cc4      	adds	r4, r0, #3
 800c354:	f024 0403 	bic.w	r4, r4, #3
 800c358:	42a0      	cmp	r0, r4
 800c35a:	d007      	beq.n	800c36c <sbrk_aligned+0x38>
 800c35c:	1a21      	subs	r1, r4, r0
 800c35e:	4628      	mov	r0, r5
 800c360:	f000 f9d6 	bl	800c710 <_sbrk_r>
 800c364:	3001      	adds	r0, #1
 800c366:	d101      	bne.n	800c36c <sbrk_aligned+0x38>
 800c368:	f04f 34ff 	mov.w	r4, #4294967295
 800c36c:	4620      	mov	r0, r4
 800c36e:	bd70      	pop	{r4, r5, r6, pc}
 800c370:	20000c14 	.word	0x20000c14

0800c374 <_malloc_r>:
 800c374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c378:	1ccd      	adds	r5, r1, #3
 800c37a:	f025 0503 	bic.w	r5, r5, #3
 800c37e:	3508      	adds	r5, #8
 800c380:	2d0c      	cmp	r5, #12
 800c382:	bf38      	it	cc
 800c384:	250c      	movcc	r5, #12
 800c386:	2d00      	cmp	r5, #0
 800c388:	4607      	mov	r7, r0
 800c38a:	db01      	blt.n	800c390 <_malloc_r+0x1c>
 800c38c:	42a9      	cmp	r1, r5
 800c38e:	d905      	bls.n	800c39c <_malloc_r+0x28>
 800c390:	230c      	movs	r3, #12
 800c392:	603b      	str	r3, [r7, #0]
 800c394:	2600      	movs	r6, #0
 800c396:	4630      	mov	r0, r6
 800c398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c39c:	4e2e      	ldr	r6, [pc, #184]	; (800c458 <_malloc_r+0xe4>)
 800c39e:	f000 faa3 	bl	800c8e8 <__malloc_lock>
 800c3a2:	6833      	ldr	r3, [r6, #0]
 800c3a4:	461c      	mov	r4, r3
 800c3a6:	bb34      	cbnz	r4, 800c3f6 <_malloc_r+0x82>
 800c3a8:	4629      	mov	r1, r5
 800c3aa:	4638      	mov	r0, r7
 800c3ac:	f7ff ffc2 	bl	800c334 <sbrk_aligned>
 800c3b0:	1c43      	adds	r3, r0, #1
 800c3b2:	4604      	mov	r4, r0
 800c3b4:	d14d      	bne.n	800c452 <_malloc_r+0xde>
 800c3b6:	6834      	ldr	r4, [r6, #0]
 800c3b8:	4626      	mov	r6, r4
 800c3ba:	2e00      	cmp	r6, #0
 800c3bc:	d140      	bne.n	800c440 <_malloc_r+0xcc>
 800c3be:	6823      	ldr	r3, [r4, #0]
 800c3c0:	4631      	mov	r1, r6
 800c3c2:	4638      	mov	r0, r7
 800c3c4:	eb04 0803 	add.w	r8, r4, r3
 800c3c8:	f000 f9a2 	bl	800c710 <_sbrk_r>
 800c3cc:	4580      	cmp	r8, r0
 800c3ce:	d13a      	bne.n	800c446 <_malloc_r+0xd2>
 800c3d0:	6821      	ldr	r1, [r4, #0]
 800c3d2:	3503      	adds	r5, #3
 800c3d4:	1a6d      	subs	r5, r5, r1
 800c3d6:	f025 0503 	bic.w	r5, r5, #3
 800c3da:	3508      	adds	r5, #8
 800c3dc:	2d0c      	cmp	r5, #12
 800c3de:	bf38      	it	cc
 800c3e0:	250c      	movcc	r5, #12
 800c3e2:	4629      	mov	r1, r5
 800c3e4:	4638      	mov	r0, r7
 800c3e6:	f7ff ffa5 	bl	800c334 <sbrk_aligned>
 800c3ea:	3001      	adds	r0, #1
 800c3ec:	d02b      	beq.n	800c446 <_malloc_r+0xd2>
 800c3ee:	6823      	ldr	r3, [r4, #0]
 800c3f0:	442b      	add	r3, r5
 800c3f2:	6023      	str	r3, [r4, #0]
 800c3f4:	e00e      	b.n	800c414 <_malloc_r+0xa0>
 800c3f6:	6822      	ldr	r2, [r4, #0]
 800c3f8:	1b52      	subs	r2, r2, r5
 800c3fa:	d41e      	bmi.n	800c43a <_malloc_r+0xc6>
 800c3fc:	2a0b      	cmp	r2, #11
 800c3fe:	d916      	bls.n	800c42e <_malloc_r+0xba>
 800c400:	1961      	adds	r1, r4, r5
 800c402:	42a3      	cmp	r3, r4
 800c404:	6025      	str	r5, [r4, #0]
 800c406:	bf18      	it	ne
 800c408:	6059      	strne	r1, [r3, #4]
 800c40a:	6863      	ldr	r3, [r4, #4]
 800c40c:	bf08      	it	eq
 800c40e:	6031      	streq	r1, [r6, #0]
 800c410:	5162      	str	r2, [r4, r5]
 800c412:	604b      	str	r3, [r1, #4]
 800c414:	4638      	mov	r0, r7
 800c416:	f104 060b 	add.w	r6, r4, #11
 800c41a:	f000 fa6b 	bl	800c8f4 <__malloc_unlock>
 800c41e:	f026 0607 	bic.w	r6, r6, #7
 800c422:	1d23      	adds	r3, r4, #4
 800c424:	1af2      	subs	r2, r6, r3
 800c426:	d0b6      	beq.n	800c396 <_malloc_r+0x22>
 800c428:	1b9b      	subs	r3, r3, r6
 800c42a:	50a3      	str	r3, [r4, r2]
 800c42c:	e7b3      	b.n	800c396 <_malloc_r+0x22>
 800c42e:	6862      	ldr	r2, [r4, #4]
 800c430:	42a3      	cmp	r3, r4
 800c432:	bf0c      	ite	eq
 800c434:	6032      	streq	r2, [r6, #0]
 800c436:	605a      	strne	r2, [r3, #4]
 800c438:	e7ec      	b.n	800c414 <_malloc_r+0xa0>
 800c43a:	4623      	mov	r3, r4
 800c43c:	6864      	ldr	r4, [r4, #4]
 800c43e:	e7b2      	b.n	800c3a6 <_malloc_r+0x32>
 800c440:	4634      	mov	r4, r6
 800c442:	6876      	ldr	r6, [r6, #4]
 800c444:	e7b9      	b.n	800c3ba <_malloc_r+0x46>
 800c446:	230c      	movs	r3, #12
 800c448:	603b      	str	r3, [r7, #0]
 800c44a:	4638      	mov	r0, r7
 800c44c:	f000 fa52 	bl	800c8f4 <__malloc_unlock>
 800c450:	e7a1      	b.n	800c396 <_malloc_r+0x22>
 800c452:	6025      	str	r5, [r4, #0]
 800c454:	e7de      	b.n	800c414 <_malloc_r+0xa0>
 800c456:	bf00      	nop
 800c458:	20000c10 	.word	0x20000c10

0800c45c <__sfputc_r>:
 800c45c:	6893      	ldr	r3, [r2, #8]
 800c45e:	3b01      	subs	r3, #1
 800c460:	2b00      	cmp	r3, #0
 800c462:	b410      	push	{r4}
 800c464:	6093      	str	r3, [r2, #8]
 800c466:	da08      	bge.n	800c47a <__sfputc_r+0x1e>
 800c468:	6994      	ldr	r4, [r2, #24]
 800c46a:	42a3      	cmp	r3, r4
 800c46c:	db01      	blt.n	800c472 <__sfputc_r+0x16>
 800c46e:	290a      	cmp	r1, #10
 800c470:	d103      	bne.n	800c47a <__sfputc_r+0x1e>
 800c472:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c476:	f7fe ba01 	b.w	800a87c <__swbuf_r>
 800c47a:	6813      	ldr	r3, [r2, #0]
 800c47c:	1c58      	adds	r0, r3, #1
 800c47e:	6010      	str	r0, [r2, #0]
 800c480:	7019      	strb	r1, [r3, #0]
 800c482:	4608      	mov	r0, r1
 800c484:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c488:	4770      	bx	lr

0800c48a <__sfputs_r>:
 800c48a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c48c:	4606      	mov	r6, r0
 800c48e:	460f      	mov	r7, r1
 800c490:	4614      	mov	r4, r2
 800c492:	18d5      	adds	r5, r2, r3
 800c494:	42ac      	cmp	r4, r5
 800c496:	d101      	bne.n	800c49c <__sfputs_r+0x12>
 800c498:	2000      	movs	r0, #0
 800c49a:	e007      	b.n	800c4ac <__sfputs_r+0x22>
 800c49c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4a0:	463a      	mov	r2, r7
 800c4a2:	4630      	mov	r0, r6
 800c4a4:	f7ff ffda 	bl	800c45c <__sfputc_r>
 800c4a8:	1c43      	adds	r3, r0, #1
 800c4aa:	d1f3      	bne.n	800c494 <__sfputs_r+0xa>
 800c4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4b0 <_vfiprintf_r>:
 800c4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b4:	460d      	mov	r5, r1
 800c4b6:	b09d      	sub	sp, #116	; 0x74
 800c4b8:	4614      	mov	r4, r2
 800c4ba:	4698      	mov	r8, r3
 800c4bc:	4606      	mov	r6, r0
 800c4be:	b118      	cbz	r0, 800c4c8 <_vfiprintf_r+0x18>
 800c4c0:	6983      	ldr	r3, [r0, #24]
 800c4c2:	b90b      	cbnz	r3, 800c4c8 <_vfiprintf_r+0x18>
 800c4c4:	f7ff fa30 	bl	800b928 <__sinit>
 800c4c8:	4b89      	ldr	r3, [pc, #548]	; (800c6f0 <_vfiprintf_r+0x240>)
 800c4ca:	429d      	cmp	r5, r3
 800c4cc:	d11b      	bne.n	800c506 <_vfiprintf_r+0x56>
 800c4ce:	6875      	ldr	r5, [r6, #4]
 800c4d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4d2:	07d9      	lsls	r1, r3, #31
 800c4d4:	d405      	bmi.n	800c4e2 <_vfiprintf_r+0x32>
 800c4d6:	89ab      	ldrh	r3, [r5, #12]
 800c4d8:	059a      	lsls	r2, r3, #22
 800c4da:	d402      	bmi.n	800c4e2 <_vfiprintf_r+0x32>
 800c4dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4de:	f7ff fac6 	bl	800ba6e <__retarget_lock_acquire_recursive>
 800c4e2:	89ab      	ldrh	r3, [r5, #12]
 800c4e4:	071b      	lsls	r3, r3, #28
 800c4e6:	d501      	bpl.n	800c4ec <_vfiprintf_r+0x3c>
 800c4e8:	692b      	ldr	r3, [r5, #16]
 800c4ea:	b9eb      	cbnz	r3, 800c528 <_vfiprintf_r+0x78>
 800c4ec:	4629      	mov	r1, r5
 800c4ee:	4630      	mov	r0, r6
 800c4f0:	f7fe fa16 	bl	800a920 <__swsetup_r>
 800c4f4:	b1c0      	cbz	r0, 800c528 <_vfiprintf_r+0x78>
 800c4f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4f8:	07dc      	lsls	r4, r3, #31
 800c4fa:	d50e      	bpl.n	800c51a <_vfiprintf_r+0x6a>
 800c4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c500:	b01d      	add	sp, #116	; 0x74
 800c502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c506:	4b7b      	ldr	r3, [pc, #492]	; (800c6f4 <_vfiprintf_r+0x244>)
 800c508:	429d      	cmp	r5, r3
 800c50a:	d101      	bne.n	800c510 <_vfiprintf_r+0x60>
 800c50c:	68b5      	ldr	r5, [r6, #8]
 800c50e:	e7df      	b.n	800c4d0 <_vfiprintf_r+0x20>
 800c510:	4b79      	ldr	r3, [pc, #484]	; (800c6f8 <_vfiprintf_r+0x248>)
 800c512:	429d      	cmp	r5, r3
 800c514:	bf08      	it	eq
 800c516:	68f5      	ldreq	r5, [r6, #12]
 800c518:	e7da      	b.n	800c4d0 <_vfiprintf_r+0x20>
 800c51a:	89ab      	ldrh	r3, [r5, #12]
 800c51c:	0598      	lsls	r0, r3, #22
 800c51e:	d4ed      	bmi.n	800c4fc <_vfiprintf_r+0x4c>
 800c520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c522:	f7ff faa5 	bl	800ba70 <__retarget_lock_release_recursive>
 800c526:	e7e9      	b.n	800c4fc <_vfiprintf_r+0x4c>
 800c528:	2300      	movs	r3, #0
 800c52a:	9309      	str	r3, [sp, #36]	; 0x24
 800c52c:	2320      	movs	r3, #32
 800c52e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c532:	f8cd 800c 	str.w	r8, [sp, #12]
 800c536:	2330      	movs	r3, #48	; 0x30
 800c538:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c6fc <_vfiprintf_r+0x24c>
 800c53c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c540:	f04f 0901 	mov.w	r9, #1
 800c544:	4623      	mov	r3, r4
 800c546:	469a      	mov	sl, r3
 800c548:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c54c:	b10a      	cbz	r2, 800c552 <_vfiprintf_r+0xa2>
 800c54e:	2a25      	cmp	r2, #37	; 0x25
 800c550:	d1f9      	bne.n	800c546 <_vfiprintf_r+0x96>
 800c552:	ebba 0b04 	subs.w	fp, sl, r4
 800c556:	d00b      	beq.n	800c570 <_vfiprintf_r+0xc0>
 800c558:	465b      	mov	r3, fp
 800c55a:	4622      	mov	r2, r4
 800c55c:	4629      	mov	r1, r5
 800c55e:	4630      	mov	r0, r6
 800c560:	f7ff ff93 	bl	800c48a <__sfputs_r>
 800c564:	3001      	adds	r0, #1
 800c566:	f000 80aa 	beq.w	800c6be <_vfiprintf_r+0x20e>
 800c56a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c56c:	445a      	add	r2, fp
 800c56e:	9209      	str	r2, [sp, #36]	; 0x24
 800c570:	f89a 3000 	ldrb.w	r3, [sl]
 800c574:	2b00      	cmp	r3, #0
 800c576:	f000 80a2 	beq.w	800c6be <_vfiprintf_r+0x20e>
 800c57a:	2300      	movs	r3, #0
 800c57c:	f04f 32ff 	mov.w	r2, #4294967295
 800c580:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c584:	f10a 0a01 	add.w	sl, sl, #1
 800c588:	9304      	str	r3, [sp, #16]
 800c58a:	9307      	str	r3, [sp, #28]
 800c58c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c590:	931a      	str	r3, [sp, #104]	; 0x68
 800c592:	4654      	mov	r4, sl
 800c594:	2205      	movs	r2, #5
 800c596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c59a:	4858      	ldr	r0, [pc, #352]	; (800c6fc <_vfiprintf_r+0x24c>)
 800c59c:	f7f3 fe20 	bl	80001e0 <memchr>
 800c5a0:	9a04      	ldr	r2, [sp, #16]
 800c5a2:	b9d8      	cbnz	r0, 800c5dc <_vfiprintf_r+0x12c>
 800c5a4:	06d1      	lsls	r1, r2, #27
 800c5a6:	bf44      	itt	mi
 800c5a8:	2320      	movmi	r3, #32
 800c5aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5ae:	0713      	lsls	r3, r2, #28
 800c5b0:	bf44      	itt	mi
 800c5b2:	232b      	movmi	r3, #43	; 0x2b
 800c5b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5b8:	f89a 3000 	ldrb.w	r3, [sl]
 800c5bc:	2b2a      	cmp	r3, #42	; 0x2a
 800c5be:	d015      	beq.n	800c5ec <_vfiprintf_r+0x13c>
 800c5c0:	9a07      	ldr	r2, [sp, #28]
 800c5c2:	4654      	mov	r4, sl
 800c5c4:	2000      	movs	r0, #0
 800c5c6:	f04f 0c0a 	mov.w	ip, #10
 800c5ca:	4621      	mov	r1, r4
 800c5cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5d0:	3b30      	subs	r3, #48	; 0x30
 800c5d2:	2b09      	cmp	r3, #9
 800c5d4:	d94e      	bls.n	800c674 <_vfiprintf_r+0x1c4>
 800c5d6:	b1b0      	cbz	r0, 800c606 <_vfiprintf_r+0x156>
 800c5d8:	9207      	str	r2, [sp, #28]
 800c5da:	e014      	b.n	800c606 <_vfiprintf_r+0x156>
 800c5dc:	eba0 0308 	sub.w	r3, r0, r8
 800c5e0:	fa09 f303 	lsl.w	r3, r9, r3
 800c5e4:	4313      	orrs	r3, r2
 800c5e6:	9304      	str	r3, [sp, #16]
 800c5e8:	46a2      	mov	sl, r4
 800c5ea:	e7d2      	b.n	800c592 <_vfiprintf_r+0xe2>
 800c5ec:	9b03      	ldr	r3, [sp, #12]
 800c5ee:	1d19      	adds	r1, r3, #4
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	9103      	str	r1, [sp, #12]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	bfbb      	ittet	lt
 800c5f8:	425b      	neglt	r3, r3
 800c5fa:	f042 0202 	orrlt.w	r2, r2, #2
 800c5fe:	9307      	strge	r3, [sp, #28]
 800c600:	9307      	strlt	r3, [sp, #28]
 800c602:	bfb8      	it	lt
 800c604:	9204      	strlt	r2, [sp, #16]
 800c606:	7823      	ldrb	r3, [r4, #0]
 800c608:	2b2e      	cmp	r3, #46	; 0x2e
 800c60a:	d10c      	bne.n	800c626 <_vfiprintf_r+0x176>
 800c60c:	7863      	ldrb	r3, [r4, #1]
 800c60e:	2b2a      	cmp	r3, #42	; 0x2a
 800c610:	d135      	bne.n	800c67e <_vfiprintf_r+0x1ce>
 800c612:	9b03      	ldr	r3, [sp, #12]
 800c614:	1d1a      	adds	r2, r3, #4
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	9203      	str	r2, [sp, #12]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	bfb8      	it	lt
 800c61e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c622:	3402      	adds	r4, #2
 800c624:	9305      	str	r3, [sp, #20]
 800c626:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c70c <_vfiprintf_r+0x25c>
 800c62a:	7821      	ldrb	r1, [r4, #0]
 800c62c:	2203      	movs	r2, #3
 800c62e:	4650      	mov	r0, sl
 800c630:	f7f3 fdd6 	bl	80001e0 <memchr>
 800c634:	b140      	cbz	r0, 800c648 <_vfiprintf_r+0x198>
 800c636:	2340      	movs	r3, #64	; 0x40
 800c638:	eba0 000a 	sub.w	r0, r0, sl
 800c63c:	fa03 f000 	lsl.w	r0, r3, r0
 800c640:	9b04      	ldr	r3, [sp, #16]
 800c642:	4303      	orrs	r3, r0
 800c644:	3401      	adds	r4, #1
 800c646:	9304      	str	r3, [sp, #16]
 800c648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c64c:	482c      	ldr	r0, [pc, #176]	; (800c700 <_vfiprintf_r+0x250>)
 800c64e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c652:	2206      	movs	r2, #6
 800c654:	f7f3 fdc4 	bl	80001e0 <memchr>
 800c658:	2800      	cmp	r0, #0
 800c65a:	d03f      	beq.n	800c6dc <_vfiprintf_r+0x22c>
 800c65c:	4b29      	ldr	r3, [pc, #164]	; (800c704 <_vfiprintf_r+0x254>)
 800c65e:	bb1b      	cbnz	r3, 800c6a8 <_vfiprintf_r+0x1f8>
 800c660:	9b03      	ldr	r3, [sp, #12]
 800c662:	3307      	adds	r3, #7
 800c664:	f023 0307 	bic.w	r3, r3, #7
 800c668:	3308      	adds	r3, #8
 800c66a:	9303      	str	r3, [sp, #12]
 800c66c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c66e:	443b      	add	r3, r7
 800c670:	9309      	str	r3, [sp, #36]	; 0x24
 800c672:	e767      	b.n	800c544 <_vfiprintf_r+0x94>
 800c674:	fb0c 3202 	mla	r2, ip, r2, r3
 800c678:	460c      	mov	r4, r1
 800c67a:	2001      	movs	r0, #1
 800c67c:	e7a5      	b.n	800c5ca <_vfiprintf_r+0x11a>
 800c67e:	2300      	movs	r3, #0
 800c680:	3401      	adds	r4, #1
 800c682:	9305      	str	r3, [sp, #20]
 800c684:	4619      	mov	r1, r3
 800c686:	f04f 0c0a 	mov.w	ip, #10
 800c68a:	4620      	mov	r0, r4
 800c68c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c690:	3a30      	subs	r2, #48	; 0x30
 800c692:	2a09      	cmp	r2, #9
 800c694:	d903      	bls.n	800c69e <_vfiprintf_r+0x1ee>
 800c696:	2b00      	cmp	r3, #0
 800c698:	d0c5      	beq.n	800c626 <_vfiprintf_r+0x176>
 800c69a:	9105      	str	r1, [sp, #20]
 800c69c:	e7c3      	b.n	800c626 <_vfiprintf_r+0x176>
 800c69e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6a2:	4604      	mov	r4, r0
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	e7f0      	b.n	800c68a <_vfiprintf_r+0x1da>
 800c6a8:	ab03      	add	r3, sp, #12
 800c6aa:	9300      	str	r3, [sp, #0]
 800c6ac:	462a      	mov	r2, r5
 800c6ae:	4b16      	ldr	r3, [pc, #88]	; (800c708 <_vfiprintf_r+0x258>)
 800c6b0:	a904      	add	r1, sp, #16
 800c6b2:	4630      	mov	r0, r6
 800c6b4:	f7fd fd00 	bl	800a0b8 <_printf_float>
 800c6b8:	4607      	mov	r7, r0
 800c6ba:	1c78      	adds	r0, r7, #1
 800c6bc:	d1d6      	bne.n	800c66c <_vfiprintf_r+0x1bc>
 800c6be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6c0:	07d9      	lsls	r1, r3, #31
 800c6c2:	d405      	bmi.n	800c6d0 <_vfiprintf_r+0x220>
 800c6c4:	89ab      	ldrh	r3, [r5, #12]
 800c6c6:	059a      	lsls	r2, r3, #22
 800c6c8:	d402      	bmi.n	800c6d0 <_vfiprintf_r+0x220>
 800c6ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6cc:	f7ff f9d0 	bl	800ba70 <__retarget_lock_release_recursive>
 800c6d0:	89ab      	ldrh	r3, [r5, #12]
 800c6d2:	065b      	lsls	r3, r3, #25
 800c6d4:	f53f af12 	bmi.w	800c4fc <_vfiprintf_r+0x4c>
 800c6d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6da:	e711      	b.n	800c500 <_vfiprintf_r+0x50>
 800c6dc:	ab03      	add	r3, sp, #12
 800c6de:	9300      	str	r3, [sp, #0]
 800c6e0:	462a      	mov	r2, r5
 800c6e2:	4b09      	ldr	r3, [pc, #36]	; (800c708 <_vfiprintf_r+0x258>)
 800c6e4:	a904      	add	r1, sp, #16
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	f7fd ff8a 	bl	800a600 <_printf_i>
 800c6ec:	e7e4      	b.n	800c6b8 <_vfiprintf_r+0x208>
 800c6ee:	bf00      	nop
 800c6f0:	0800cb74 	.word	0x0800cb74
 800c6f4:	0800cb94 	.word	0x0800cb94
 800c6f8:	0800cb54 	.word	0x0800cb54
 800c6fc:	0800cd0c 	.word	0x0800cd0c
 800c700:	0800cd16 	.word	0x0800cd16
 800c704:	0800a0b9 	.word	0x0800a0b9
 800c708:	0800c48b 	.word	0x0800c48b
 800c70c:	0800cd12 	.word	0x0800cd12

0800c710 <_sbrk_r>:
 800c710:	b538      	push	{r3, r4, r5, lr}
 800c712:	4d06      	ldr	r5, [pc, #24]	; (800c72c <_sbrk_r+0x1c>)
 800c714:	2300      	movs	r3, #0
 800c716:	4604      	mov	r4, r0
 800c718:	4608      	mov	r0, r1
 800c71a:	602b      	str	r3, [r5, #0]
 800c71c:	f7f7 fd02 	bl	8004124 <_sbrk>
 800c720:	1c43      	adds	r3, r0, #1
 800c722:	d102      	bne.n	800c72a <_sbrk_r+0x1a>
 800c724:	682b      	ldr	r3, [r5, #0]
 800c726:	b103      	cbz	r3, 800c72a <_sbrk_r+0x1a>
 800c728:	6023      	str	r3, [r4, #0]
 800c72a:	bd38      	pop	{r3, r4, r5, pc}
 800c72c:	20000c18 	.word	0x20000c18

0800c730 <__sread>:
 800c730:	b510      	push	{r4, lr}
 800c732:	460c      	mov	r4, r1
 800c734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c738:	f000 f8e2 	bl	800c900 <_read_r>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	bfab      	itete	ge
 800c740:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c742:	89a3      	ldrhlt	r3, [r4, #12]
 800c744:	181b      	addge	r3, r3, r0
 800c746:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c74a:	bfac      	ite	ge
 800c74c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c74e:	81a3      	strhlt	r3, [r4, #12]
 800c750:	bd10      	pop	{r4, pc}

0800c752 <__swrite>:
 800c752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c756:	461f      	mov	r7, r3
 800c758:	898b      	ldrh	r3, [r1, #12]
 800c75a:	05db      	lsls	r3, r3, #23
 800c75c:	4605      	mov	r5, r0
 800c75e:	460c      	mov	r4, r1
 800c760:	4616      	mov	r6, r2
 800c762:	d505      	bpl.n	800c770 <__swrite+0x1e>
 800c764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c768:	2302      	movs	r3, #2
 800c76a:	2200      	movs	r2, #0
 800c76c:	f000 f898 	bl	800c8a0 <_lseek_r>
 800c770:	89a3      	ldrh	r3, [r4, #12]
 800c772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c77a:	81a3      	strh	r3, [r4, #12]
 800c77c:	4632      	mov	r2, r6
 800c77e:	463b      	mov	r3, r7
 800c780:	4628      	mov	r0, r5
 800c782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c786:	f000 b817 	b.w	800c7b8 <_write_r>

0800c78a <__sseek>:
 800c78a:	b510      	push	{r4, lr}
 800c78c:	460c      	mov	r4, r1
 800c78e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c792:	f000 f885 	bl	800c8a0 <_lseek_r>
 800c796:	1c43      	adds	r3, r0, #1
 800c798:	89a3      	ldrh	r3, [r4, #12]
 800c79a:	bf15      	itete	ne
 800c79c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c79e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c7a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c7a6:	81a3      	strheq	r3, [r4, #12]
 800c7a8:	bf18      	it	ne
 800c7aa:	81a3      	strhne	r3, [r4, #12]
 800c7ac:	bd10      	pop	{r4, pc}

0800c7ae <__sclose>:
 800c7ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7b2:	f000 b831 	b.w	800c818 <_close_r>
	...

0800c7b8 <_write_r>:
 800c7b8:	b538      	push	{r3, r4, r5, lr}
 800c7ba:	4d07      	ldr	r5, [pc, #28]	; (800c7d8 <_write_r+0x20>)
 800c7bc:	4604      	mov	r4, r0
 800c7be:	4608      	mov	r0, r1
 800c7c0:	4611      	mov	r1, r2
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	602a      	str	r2, [r5, #0]
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	f7f7 fc58 	bl	800407c <_write>
 800c7cc:	1c43      	adds	r3, r0, #1
 800c7ce:	d102      	bne.n	800c7d6 <_write_r+0x1e>
 800c7d0:	682b      	ldr	r3, [r5, #0]
 800c7d2:	b103      	cbz	r3, 800c7d6 <_write_r+0x1e>
 800c7d4:	6023      	str	r3, [r4, #0]
 800c7d6:	bd38      	pop	{r3, r4, r5, pc}
 800c7d8:	20000c18 	.word	0x20000c18

0800c7dc <__assert_func>:
 800c7dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7de:	4614      	mov	r4, r2
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	4b09      	ldr	r3, [pc, #36]	; (800c808 <__assert_func+0x2c>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4605      	mov	r5, r0
 800c7e8:	68d8      	ldr	r0, [r3, #12]
 800c7ea:	b14c      	cbz	r4, 800c800 <__assert_func+0x24>
 800c7ec:	4b07      	ldr	r3, [pc, #28]	; (800c80c <__assert_func+0x30>)
 800c7ee:	9100      	str	r1, [sp, #0]
 800c7f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c7f4:	4906      	ldr	r1, [pc, #24]	; (800c810 <__assert_func+0x34>)
 800c7f6:	462b      	mov	r3, r5
 800c7f8:	f000 f81e 	bl	800c838 <fiprintf>
 800c7fc:	f000 f89f 	bl	800c93e <abort>
 800c800:	4b04      	ldr	r3, [pc, #16]	; (800c814 <__assert_func+0x38>)
 800c802:	461c      	mov	r4, r3
 800c804:	e7f3      	b.n	800c7ee <__assert_func+0x12>
 800c806:	bf00      	nop
 800c808:	2000000c 	.word	0x2000000c
 800c80c:	0800cd1d 	.word	0x0800cd1d
 800c810:	0800cd2a 	.word	0x0800cd2a
 800c814:	0800cd58 	.word	0x0800cd58

0800c818 <_close_r>:
 800c818:	b538      	push	{r3, r4, r5, lr}
 800c81a:	4d06      	ldr	r5, [pc, #24]	; (800c834 <_close_r+0x1c>)
 800c81c:	2300      	movs	r3, #0
 800c81e:	4604      	mov	r4, r0
 800c820:	4608      	mov	r0, r1
 800c822:	602b      	str	r3, [r5, #0]
 800c824:	f7f7 fc4a 	bl	80040bc <_close>
 800c828:	1c43      	adds	r3, r0, #1
 800c82a:	d102      	bne.n	800c832 <_close_r+0x1a>
 800c82c:	682b      	ldr	r3, [r5, #0]
 800c82e:	b103      	cbz	r3, 800c832 <_close_r+0x1a>
 800c830:	6023      	str	r3, [r4, #0]
 800c832:	bd38      	pop	{r3, r4, r5, pc}
 800c834:	20000c18 	.word	0x20000c18

0800c838 <fiprintf>:
 800c838:	b40e      	push	{r1, r2, r3}
 800c83a:	b503      	push	{r0, r1, lr}
 800c83c:	4601      	mov	r1, r0
 800c83e:	ab03      	add	r3, sp, #12
 800c840:	4805      	ldr	r0, [pc, #20]	; (800c858 <fiprintf+0x20>)
 800c842:	f853 2b04 	ldr.w	r2, [r3], #4
 800c846:	6800      	ldr	r0, [r0, #0]
 800c848:	9301      	str	r3, [sp, #4]
 800c84a:	f7ff fe31 	bl	800c4b0 <_vfiprintf_r>
 800c84e:	b002      	add	sp, #8
 800c850:	f85d eb04 	ldr.w	lr, [sp], #4
 800c854:	b003      	add	sp, #12
 800c856:	4770      	bx	lr
 800c858:	2000000c 	.word	0x2000000c

0800c85c <_fstat_r>:
 800c85c:	b538      	push	{r3, r4, r5, lr}
 800c85e:	4d07      	ldr	r5, [pc, #28]	; (800c87c <_fstat_r+0x20>)
 800c860:	2300      	movs	r3, #0
 800c862:	4604      	mov	r4, r0
 800c864:	4608      	mov	r0, r1
 800c866:	4611      	mov	r1, r2
 800c868:	602b      	str	r3, [r5, #0]
 800c86a:	f7f7 fc33 	bl	80040d4 <_fstat>
 800c86e:	1c43      	adds	r3, r0, #1
 800c870:	d102      	bne.n	800c878 <_fstat_r+0x1c>
 800c872:	682b      	ldr	r3, [r5, #0]
 800c874:	b103      	cbz	r3, 800c878 <_fstat_r+0x1c>
 800c876:	6023      	str	r3, [r4, #0]
 800c878:	bd38      	pop	{r3, r4, r5, pc}
 800c87a:	bf00      	nop
 800c87c:	20000c18 	.word	0x20000c18

0800c880 <_isatty_r>:
 800c880:	b538      	push	{r3, r4, r5, lr}
 800c882:	4d06      	ldr	r5, [pc, #24]	; (800c89c <_isatty_r+0x1c>)
 800c884:	2300      	movs	r3, #0
 800c886:	4604      	mov	r4, r0
 800c888:	4608      	mov	r0, r1
 800c88a:	602b      	str	r3, [r5, #0]
 800c88c:	f7f7 fc32 	bl	80040f4 <_isatty>
 800c890:	1c43      	adds	r3, r0, #1
 800c892:	d102      	bne.n	800c89a <_isatty_r+0x1a>
 800c894:	682b      	ldr	r3, [r5, #0]
 800c896:	b103      	cbz	r3, 800c89a <_isatty_r+0x1a>
 800c898:	6023      	str	r3, [r4, #0]
 800c89a:	bd38      	pop	{r3, r4, r5, pc}
 800c89c:	20000c18 	.word	0x20000c18

0800c8a0 <_lseek_r>:
 800c8a0:	b538      	push	{r3, r4, r5, lr}
 800c8a2:	4d07      	ldr	r5, [pc, #28]	; (800c8c0 <_lseek_r+0x20>)
 800c8a4:	4604      	mov	r4, r0
 800c8a6:	4608      	mov	r0, r1
 800c8a8:	4611      	mov	r1, r2
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	602a      	str	r2, [r5, #0]
 800c8ae:	461a      	mov	r2, r3
 800c8b0:	f7f7 fc2b 	bl	800410a <_lseek>
 800c8b4:	1c43      	adds	r3, r0, #1
 800c8b6:	d102      	bne.n	800c8be <_lseek_r+0x1e>
 800c8b8:	682b      	ldr	r3, [r5, #0]
 800c8ba:	b103      	cbz	r3, 800c8be <_lseek_r+0x1e>
 800c8bc:	6023      	str	r3, [r4, #0]
 800c8be:	bd38      	pop	{r3, r4, r5, pc}
 800c8c0:	20000c18 	.word	0x20000c18

0800c8c4 <__ascii_mbtowc>:
 800c8c4:	b082      	sub	sp, #8
 800c8c6:	b901      	cbnz	r1, 800c8ca <__ascii_mbtowc+0x6>
 800c8c8:	a901      	add	r1, sp, #4
 800c8ca:	b142      	cbz	r2, 800c8de <__ascii_mbtowc+0x1a>
 800c8cc:	b14b      	cbz	r3, 800c8e2 <__ascii_mbtowc+0x1e>
 800c8ce:	7813      	ldrb	r3, [r2, #0]
 800c8d0:	600b      	str	r3, [r1, #0]
 800c8d2:	7812      	ldrb	r2, [r2, #0]
 800c8d4:	1e10      	subs	r0, r2, #0
 800c8d6:	bf18      	it	ne
 800c8d8:	2001      	movne	r0, #1
 800c8da:	b002      	add	sp, #8
 800c8dc:	4770      	bx	lr
 800c8de:	4610      	mov	r0, r2
 800c8e0:	e7fb      	b.n	800c8da <__ascii_mbtowc+0x16>
 800c8e2:	f06f 0001 	mvn.w	r0, #1
 800c8e6:	e7f8      	b.n	800c8da <__ascii_mbtowc+0x16>

0800c8e8 <__malloc_lock>:
 800c8e8:	4801      	ldr	r0, [pc, #4]	; (800c8f0 <__malloc_lock+0x8>)
 800c8ea:	f7ff b8c0 	b.w	800ba6e <__retarget_lock_acquire_recursive>
 800c8ee:	bf00      	nop
 800c8f0:	20000c0c 	.word	0x20000c0c

0800c8f4 <__malloc_unlock>:
 800c8f4:	4801      	ldr	r0, [pc, #4]	; (800c8fc <__malloc_unlock+0x8>)
 800c8f6:	f7ff b8bb 	b.w	800ba70 <__retarget_lock_release_recursive>
 800c8fa:	bf00      	nop
 800c8fc:	20000c0c 	.word	0x20000c0c

0800c900 <_read_r>:
 800c900:	b538      	push	{r3, r4, r5, lr}
 800c902:	4d07      	ldr	r5, [pc, #28]	; (800c920 <_read_r+0x20>)
 800c904:	4604      	mov	r4, r0
 800c906:	4608      	mov	r0, r1
 800c908:	4611      	mov	r1, r2
 800c90a:	2200      	movs	r2, #0
 800c90c:	602a      	str	r2, [r5, #0]
 800c90e:	461a      	mov	r2, r3
 800c910:	f7f7 fb96 	bl	8004040 <_read>
 800c914:	1c43      	adds	r3, r0, #1
 800c916:	d102      	bne.n	800c91e <_read_r+0x1e>
 800c918:	682b      	ldr	r3, [r5, #0]
 800c91a:	b103      	cbz	r3, 800c91e <_read_r+0x1e>
 800c91c:	6023      	str	r3, [r4, #0]
 800c91e:	bd38      	pop	{r3, r4, r5, pc}
 800c920:	20000c18 	.word	0x20000c18

0800c924 <__ascii_wctomb>:
 800c924:	b149      	cbz	r1, 800c93a <__ascii_wctomb+0x16>
 800c926:	2aff      	cmp	r2, #255	; 0xff
 800c928:	bf85      	ittet	hi
 800c92a:	238a      	movhi	r3, #138	; 0x8a
 800c92c:	6003      	strhi	r3, [r0, #0]
 800c92e:	700a      	strbls	r2, [r1, #0]
 800c930:	f04f 30ff 	movhi.w	r0, #4294967295
 800c934:	bf98      	it	ls
 800c936:	2001      	movls	r0, #1
 800c938:	4770      	bx	lr
 800c93a:	4608      	mov	r0, r1
 800c93c:	4770      	bx	lr

0800c93e <abort>:
 800c93e:	b508      	push	{r3, lr}
 800c940:	2006      	movs	r0, #6
 800c942:	f000 f82b 	bl	800c99c <raise>
 800c946:	2001      	movs	r0, #1
 800c948:	f7f7 fb70 	bl	800402c <_exit>

0800c94c <_raise_r>:
 800c94c:	291f      	cmp	r1, #31
 800c94e:	b538      	push	{r3, r4, r5, lr}
 800c950:	4604      	mov	r4, r0
 800c952:	460d      	mov	r5, r1
 800c954:	d904      	bls.n	800c960 <_raise_r+0x14>
 800c956:	2316      	movs	r3, #22
 800c958:	6003      	str	r3, [r0, #0]
 800c95a:	f04f 30ff 	mov.w	r0, #4294967295
 800c95e:	bd38      	pop	{r3, r4, r5, pc}
 800c960:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c962:	b112      	cbz	r2, 800c96a <_raise_r+0x1e>
 800c964:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c968:	b94b      	cbnz	r3, 800c97e <_raise_r+0x32>
 800c96a:	4620      	mov	r0, r4
 800c96c:	f000 f830 	bl	800c9d0 <_getpid_r>
 800c970:	462a      	mov	r2, r5
 800c972:	4601      	mov	r1, r0
 800c974:	4620      	mov	r0, r4
 800c976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c97a:	f000 b817 	b.w	800c9ac <_kill_r>
 800c97e:	2b01      	cmp	r3, #1
 800c980:	d00a      	beq.n	800c998 <_raise_r+0x4c>
 800c982:	1c59      	adds	r1, r3, #1
 800c984:	d103      	bne.n	800c98e <_raise_r+0x42>
 800c986:	2316      	movs	r3, #22
 800c988:	6003      	str	r3, [r0, #0]
 800c98a:	2001      	movs	r0, #1
 800c98c:	e7e7      	b.n	800c95e <_raise_r+0x12>
 800c98e:	2400      	movs	r4, #0
 800c990:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c994:	4628      	mov	r0, r5
 800c996:	4798      	blx	r3
 800c998:	2000      	movs	r0, #0
 800c99a:	e7e0      	b.n	800c95e <_raise_r+0x12>

0800c99c <raise>:
 800c99c:	4b02      	ldr	r3, [pc, #8]	; (800c9a8 <raise+0xc>)
 800c99e:	4601      	mov	r1, r0
 800c9a0:	6818      	ldr	r0, [r3, #0]
 800c9a2:	f7ff bfd3 	b.w	800c94c <_raise_r>
 800c9a6:	bf00      	nop
 800c9a8:	2000000c 	.word	0x2000000c

0800c9ac <_kill_r>:
 800c9ac:	b538      	push	{r3, r4, r5, lr}
 800c9ae:	4d07      	ldr	r5, [pc, #28]	; (800c9cc <_kill_r+0x20>)
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	4604      	mov	r4, r0
 800c9b4:	4608      	mov	r0, r1
 800c9b6:	4611      	mov	r1, r2
 800c9b8:	602b      	str	r3, [r5, #0]
 800c9ba:	f7f7 fb27 	bl	800400c <_kill>
 800c9be:	1c43      	adds	r3, r0, #1
 800c9c0:	d102      	bne.n	800c9c8 <_kill_r+0x1c>
 800c9c2:	682b      	ldr	r3, [r5, #0]
 800c9c4:	b103      	cbz	r3, 800c9c8 <_kill_r+0x1c>
 800c9c6:	6023      	str	r3, [r4, #0]
 800c9c8:	bd38      	pop	{r3, r4, r5, pc}
 800c9ca:	bf00      	nop
 800c9cc:	20000c18 	.word	0x20000c18

0800c9d0 <_getpid_r>:
 800c9d0:	f7f7 bb14 	b.w	8003ffc <_getpid>

0800c9d4 <_init>:
 800c9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9d6:	bf00      	nop
 800c9d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9da:	bc08      	pop	{r3}
 800c9dc:	469e      	mov	lr, r3
 800c9de:	4770      	bx	lr

0800c9e0 <_fini>:
 800c9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9e2:	bf00      	nop
 800c9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9e6:	bc08      	pop	{r3}
 800c9e8:	469e      	mov	lr, r3
 800c9ea:	4770      	bx	lr
