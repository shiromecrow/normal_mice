
normal_mice_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014c0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  08014da0  08014da0  00024da0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015394  08015394  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08015394  08015394  00025394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801539c  0801539c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801539c  0801539c  0002539c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080153a0  080153a0  000253a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080153a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cde8  200001dc  08015580  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000cfc4  08015580  0003cfc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb2c  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004acb  00000000  00000000  0004bd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001988  00000000  00000000  00050808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001738  00000000  00000000  00052190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002782f  00000000  00000000  000538c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024833  00000000  00000000  0007b0f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfaac  00000000  00000000  0009f92a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017f3d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b54  00000000  00000000  0017f428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014d84 	.word	0x08014d84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08014d84 	.word	0x08014d84

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <control_test_motor>:

char modeacc;
volatile char g_acc_flag;

void control_test_motor(uint8_t WallMode)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
//	mode.WallControlMode=0;
	mode.WallControlMode=WallMode;
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	72bb      	strb	r3, [r7, #10]
	pl_motor_standby(1);
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f001 fc10 	bl	80027cc <pl_motor_standby>
	pl_motor_start();
 8000fac:	f001 fc78 	bl	80028a0 <pl_motor_start>

//	float v_e=straight_table(-180, -100, -100, -500, 7000, mode);
	float v_e=straight_table(540, 200, 200, 600, 7000, mode);
 8000fb0:	68b8      	ldr	r0, [r7, #8]
 8000fb2:	ed9f 2a18 	vldr	s4, [pc, #96]	; 8001014 <control_test_motor+0x88>
 8000fb6:	eddf 1a18 	vldr	s3, [pc, #96]	; 8001018 <control_test_motor+0x8c>
 8000fba:	ed9f 1a18 	vldr	s2, [pc, #96]	; 800101c <control_test_motor+0x90>
 8000fbe:	eddf 0a17 	vldr	s1, [pc, #92]	; 800101c <control_test_motor+0x90>
 8000fc2:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8001020 <control_test_motor+0x94>
 8000fc6:	f000 fe13 	bl	8001bf0 <straight_table>
 8000fca:	ed87 0a03 	vstr	s0, [r7, #12]

//	float v_e=straight_table(180, 150, 600, 600, 7000);
//	slalom_table(v_e,90, 0, 0, 400, 7000);
//	v_e=straight_table(180, v_e, 150, 600, 7000);
	pl_motor_stop();
 8000fce:	f001 fc7b 	bl	80028c8 <pl_motor_stop>
	HAL_Delay(500);
 8000fd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fd6:	f00b fb2f 	bl	800c638 <HAL_Delay>

	pl_motor_start();
 8000fda:	f001 fc61 	bl	80028a0 <pl_motor_start>
	v_e=turning_table(360, 240, 240, 600, 7000);
 8000fde:	ed9f 2a0d 	vldr	s4, [pc, #52]	; 8001014 <control_test_motor+0x88>
 8000fe2:	eddf 1a0d 	vldr	s3, [pc, #52]	; 8001018 <control_test_motor+0x8c>
 8000fe6:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 8001024 <control_test_motor+0x98>
 8000fea:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8001024 <control_test_motor+0x98>
 8000fee:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001028 <control_test_motor+0x9c>
 8000ff2:	f000 fef7 	bl	8001de4 <turning_table>
 8000ff6:	ed87 0a03 	vstr	s0, [r7, #12]

	pl_motor_stop();
 8000ffa:	f001 fc65 	bl	80028c8 <pl_motor_stop>
	HAL_Delay(500);
 8000ffe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001002:	f00b fb19 	bl	800c638 <HAL_Delay>
	pl_motor_standby(0);
 8001006:	2000      	movs	r0, #0
 8001008:	f001 fbe0 	bl	80027cc <pl_motor_standby>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	45dac000 	.word	0x45dac000
 8001018:	44160000 	.word	0x44160000
 800101c:	43480000 	.word	0x43480000
 8001020:	44070000 	.word	0x44070000
 8001024:	43700000 	.word	0x43700000
 8001028:	43b40000 	.word	0x43b40000
 800102c:	00000000 	.word	0x00000000

08001030 <control_test_motor2>:

void control_test_motor2(uint8_t turn_mode,uint8_t WallMode,uint8_t count)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
 800103a:	460b      	mov	r3, r1
 800103c:	71bb      	strb	r3, [r7, #6]
 800103e:	4613      	mov	r3, r2
 8001040:	717b      	strb	r3, [r7, #5]
	MOTOR_MODE mode;
//	mode.WallControlMode=0;
	mode.WallControlMode=WallMode;
 8001042:	79bb      	ldrb	r3, [r7, #6]
 8001044:	733b      	strb	r3, [r7, #12]
	mode.WallControlStatus=0;
 8001046:	2300      	movs	r3, #0
 8001048:	737b      	strb	r3, [r7, #13]
	mode.WallCutMode=0;
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]
	mode.calMazeMode=0;
 800104e:	2300      	movs	r3, #0
 8001050:	73bb      	strb	r3, [r7, #14]

	pl_motor_start();
 8001052:	f001 fc25 	bl	80028a0 <pl_motor_start>

if(turn_mode==0){
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d139      	bne.n	80010d0 <control_test_motor2+0xa0>
	if(WallMode==2){
 800105c:	79bb      	ldrb	r3, [r7, #6]
 800105e:	2b02      	cmp	r3, #2
 8001060:	d120      	bne.n	80010a4 <control_test_motor2+0x74>
		straight_table(180*count*1.414, 100, 100, 600, 7000, mode);
 8001062:	797b      	ldrb	r3, [r7, #5]
 8001064:	22b4      	movs	r2, #180	; 0xb4
 8001066:	fb02 f303 	mul.w	r3, r2, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fa5a 	bl	8000524 <__aeabi_i2d>
 8001070:	a333      	add	r3, pc, #204	; (adr r3, 8001140 <control_test_motor2+0x110>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	f7ff fabf 	bl	80005f8 <__aeabi_dmul>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fdb1 	bl	8000be8 <__aeabi_d2f>
 8001086:	4603      	mov	r3, r0
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	ed9f 2a27 	vldr	s4, [pc, #156]	; 8001128 <control_test_motor2+0xf8>
 800108e:	eddf 1a27 	vldr	s3, [pc, #156]	; 800112c <control_test_motor2+0xfc>
 8001092:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8001130 <control_test_motor2+0x100>
 8001096:	eddf 0a26 	vldr	s1, [pc, #152]	; 8001130 <control_test_motor2+0x100>
 800109a:	ee00 3a10 	vmov	s0, r3
 800109e:	f000 fda7 	bl	8001bf0 <straight_table>
 80010a2:	e032      	b.n	800110a <control_test_motor2+0xda>
	}else{
		straight_table(180*count, 100, 100, 600, 7000, mode);
 80010a4:	797b      	ldrb	r3, [r7, #5]
 80010a6:	22b4      	movs	r2, #180	; 0xb4
 80010a8:	fb02 f303 	mul.w	r3, r2, r3
 80010ac:	ee07 3a90 	vmov	s15, r3
 80010b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	ed9f 2a1c 	vldr	s4, [pc, #112]	; 8001128 <control_test_motor2+0xf8>
 80010ba:	eddf 1a1c 	vldr	s3, [pc, #112]	; 800112c <control_test_motor2+0xfc>
 80010be:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8001130 <control_test_motor2+0x100>
 80010c2:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8001130 <control_test_motor2+0x100>
 80010c6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ca:	f000 fd91 	bl	8001bf0 <straight_table>
 80010ce:	e01c      	b.n	800110a <control_test_motor2+0xda>
	}
}else if (turn_mode==1){
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d10c      	bne.n	80010f0 <control_test_motor2+0xc0>
	turning_table(360*5, 120, 120, 600, 7000);
 80010d6:	ed9f 2a14 	vldr	s4, [pc, #80]	; 8001128 <control_test_motor2+0xf8>
 80010da:	eddf 1a14 	vldr	s3, [pc, #80]	; 800112c <control_test_motor2+0xfc>
 80010de:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8001134 <control_test_motor2+0x104>
 80010e2:	eddf 0a14 	vldr	s1, [pc, #80]	; 8001134 <control_test_motor2+0x104>
 80010e6:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8001138 <control_test_motor2+0x108>
 80010ea:	f000 fe7b 	bl	8001de4 <turning_table>
 80010ee:	e00c      	b.n	800110a <control_test_motor2+0xda>
}else{
	straight_table(BACK_TO_CENTER, 100, 100, 600, 7000, mode);
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	ed9f 2a0d 	vldr	s4, [pc, #52]	; 8001128 <control_test_motor2+0xf8>
 80010f6:	eddf 1a0d 	vldr	s3, [pc, #52]	; 800112c <control_test_motor2+0xfc>
 80010fa:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8001130 <control_test_motor2+0x100>
 80010fe:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8001130 <control_test_motor2+0x100>
 8001102:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800113c <control_test_motor2+0x10c>
 8001106:	f000 fd73 	bl	8001bf0 <straight_table>
}

	pl_motor_stop();
 800110a:	f001 fbdd 	bl	80028c8 <pl_motor_stop>
	HAL_Delay(500);
 800110e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001112:	f00b fa91 	bl	800c638 <HAL_Delay>
	pl_motor_standby(0);
 8001116:	2000      	movs	r0, #0
 8001118:	f001 fb58 	bl	80027cc <pl_motor_standby>
}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	f3af 8000 	nop.w
 8001128:	45dac000 	.word	0x45dac000
 800112c:	44160000 	.word	0x44160000
 8001130:	42c80000 	.word	0x42c80000
 8001134:	42f00000 	.word	0x42f00000
 8001138:	44e10000 	.word	0x44e10000
 800113c:	41f40000 	.word	0x41f40000
 8001140:	76c8b439 	.word	0x76c8b439
 8001144:	3ff69fbe 	.word	0x3ff69fbe

08001148 <motor_init>:
/*	モータの初期化					(pl_speaker_init)	*/
/*******************************************************************/
/*	モータの初期化する。						*/
/*******************************************************************/
void motor_init(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

	modeacc=0;
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <motor_init+0x1c>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
	g_acc_flag=0;
 8001152:	4b05      	ldr	r3, [pc, #20]	; (8001168 <motor_init+0x20>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]


}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000238 	.word	0x20000238
 8001168:	20000239 	.word	0x20000239
 800116c:	00000000 	.word	0x00000000

08001170 <interrupt_Motor>:



void interrupt_Motor(void){
 8001170:	b5b0      	push	{r4, r5, r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af02      	add	r7, sp, #8

	if (modeacc == 0) {
		//g_WallControl_mode=0;
		//g_acc_flag=0;
	}
	if (modeacc == 1) {
 8001176:	4bc4      	ldr	r3, [pc, #784]	; (8001488 <interrupt_Motor+0x318>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b01      	cmp	r3, #1
 800117c:	f040 8088 	bne.w	8001290 <interrupt_Motor+0x120>
		g_TargetStraight.displacement += g_TargetStraight.velocity*INTERRUPT_TIME;// + g_TargetStraight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8001180:	4bc2      	ldr	r3, [pc, #776]	; (800148c <interrupt_Motor+0x31c>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f9df 	bl	8000548 <__aeabi_f2d>
 800118a:	4604      	mov	r4, r0
 800118c:	460d      	mov	r5, r1
 800118e:	4bbf      	ldr	r3, [pc, #764]	; (800148c <interrupt_Motor+0x31c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f9d8 	bl	8000548 <__aeabi_f2d>
 8001198:	a3b5      	add	r3, pc, #724	; (adr r3, 8001470 <interrupt_Motor+0x300>)
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	f7ff fa2b 	bl	80005f8 <__aeabi_dmul>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4620      	mov	r0, r4
 80011a8:	4629      	mov	r1, r5
 80011aa:	f7ff f86f 	bl	800028c <__adddf3>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	f7ff fd17 	bl	8000be8 <__aeabi_d2f>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4ab3      	ldr	r2, [pc, #716]	; (800148c <interrupt_Motor+0x31c>)
 80011be:	6093      	str	r3, [r2, #8]
		g_TargetStraight.velocity += g_TargetStraight.acceleration*INTERRUPT_TIME;
 80011c0:	4bb2      	ldr	r3, [pc, #712]	; (800148c <interrupt_Motor+0x31c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f9bf 	bl	8000548 <__aeabi_f2d>
 80011ca:	4604      	mov	r4, r0
 80011cc:	460d      	mov	r5, r1
 80011ce:	4baf      	ldr	r3, [pc, #700]	; (800148c <interrupt_Motor+0x31c>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f9b8 	bl	8000548 <__aeabi_f2d>
 80011d8:	a3a5      	add	r3, pc, #660	; (adr r3, 8001470 <interrupt_Motor+0x300>)
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	f7ff fa0b 	bl	80005f8 <__aeabi_dmul>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4620      	mov	r0, r4
 80011e8:	4629      	mov	r1, r5
 80011ea:	f7ff f84f 	bl	800028c <__adddf3>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	f7ff fcf7 	bl	8000be8 <__aeabi_d2f>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4aa3      	ldr	r2, [pc, #652]	; (800148c <interrupt_Motor+0x31c>)
 80011fe:	6013      	str	r3, [r2, #0]
		g_TargetTurning.displacement += g_TargetTurning.velocity*INTERRUPT_TIME;// + g_TargetTurning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8001200:	4ba3      	ldr	r3, [pc, #652]	; (8001490 <interrupt_Motor+0x320>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f99f 	bl	8000548 <__aeabi_f2d>
 800120a:	4604      	mov	r4, r0
 800120c:	460d      	mov	r5, r1
 800120e:	4ba0      	ldr	r3, [pc, #640]	; (8001490 <interrupt_Motor+0x320>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f998 	bl	8000548 <__aeabi_f2d>
 8001218:	a395      	add	r3, pc, #596	; (adr r3, 8001470 <interrupt_Motor+0x300>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	f7ff f9eb 	bl	80005f8 <__aeabi_dmul>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4620      	mov	r0, r4
 8001228:	4629      	mov	r1, r5
 800122a:	f7ff f82f 	bl	800028c <__adddf3>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff fcd7 	bl	8000be8 <__aeabi_d2f>
 800123a:	4603      	mov	r3, r0
 800123c:	4a94      	ldr	r2, [pc, #592]	; (8001490 <interrupt_Motor+0x320>)
 800123e:	6093      	str	r3, [r2, #8]
		g_TargetTurning.velocity += g_TargetTurning.acceleration*INTERRUPT_TIME;
 8001240:	4b93      	ldr	r3, [pc, #588]	; (8001490 <interrupt_Motor+0x320>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f97f 	bl	8000548 <__aeabi_f2d>
 800124a:	4604      	mov	r4, r0
 800124c:	460d      	mov	r5, r1
 800124e:	4b90      	ldr	r3, [pc, #576]	; (8001490 <interrupt_Motor+0x320>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff f978 	bl	8000548 <__aeabi_f2d>
 8001258:	a385      	add	r3, pc, #532	; (adr r3, 8001470 <interrupt_Motor+0x300>)
 800125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125e:	f7ff f9cb 	bl	80005f8 <__aeabi_dmul>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4620      	mov	r0, r4
 8001268:	4629      	mov	r1, r5
 800126a:	f7ff f80f 	bl	800028c <__adddf3>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4610      	mov	r0, r2
 8001274:	4619      	mov	r1, r3
 8001276:	f7ff fcb7 	bl	8000be8 <__aeabi_d2f>
 800127a:	4603      	mov	r3, r0
 800127c:	4a84      	ldr	r2, [pc, #528]	; (8001490 <interrupt_Motor+0x320>)
 800127e:	6013      	str	r3, [r2, #0]
		cal_table(g_TrapezoidStraight,&g_TargetStraight);
 8001280:	4b84      	ldr	r3, [pc, #528]	; (8001494 <interrupt_Motor+0x324>)
 8001282:	4a82      	ldr	r2, [pc, #520]	; (800148c <interrupt_Motor+0x31c>)
 8001284:	9201      	str	r2, [sp, #4]
 8001286:	691a      	ldr	r2, [r3, #16]
 8001288:	9200      	str	r2, [sp, #0]
 800128a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800128c:	f000 f962 	bl	8001554 <cal_table>
	}
	if (modeacc == 2){
 8001290:	4b7d      	ldr	r3, [pc, #500]	; (8001488 <interrupt_Motor+0x318>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b02      	cmp	r3, #2
 8001296:	f040 808b 	bne.w	80013b0 <interrupt_Motor+0x240>
		g_WallControl_mode=0;
 800129a:	4b7f      	ldr	r3, [pc, #508]	; (8001498 <interrupt_Motor+0x328>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
		g_TargetStraight.displacement += g_TargetStraight.velocity*INTERRUPT_TIME;// + g_TargetStraight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80012a0:	4b7a      	ldr	r3, [pc, #488]	; (800148c <interrupt_Motor+0x31c>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f94f 	bl	8000548 <__aeabi_f2d>
 80012aa:	4604      	mov	r4, r0
 80012ac:	460d      	mov	r5, r1
 80012ae:	4b77      	ldr	r3, [pc, #476]	; (800148c <interrupt_Motor+0x31c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f948 	bl	8000548 <__aeabi_f2d>
 80012b8:	a36d      	add	r3, pc, #436	; (adr r3, 8001470 <interrupt_Motor+0x300>)
 80012ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012be:	f7ff f99b 	bl	80005f8 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4620      	mov	r0, r4
 80012c8:	4629      	mov	r1, r5
 80012ca:	f7fe ffdf 	bl	800028c <__adddf3>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	f7ff fc87 	bl	8000be8 <__aeabi_d2f>
 80012da:	4603      	mov	r3, r0
 80012dc:	4a6b      	ldr	r2, [pc, #428]	; (800148c <interrupt_Motor+0x31c>)
 80012de:	6093      	str	r3, [r2, #8]
		g_TargetStraight.velocity += g_TargetStraight.acceleration*INTERRUPT_TIME;
 80012e0:	4b6a      	ldr	r3, [pc, #424]	; (800148c <interrupt_Motor+0x31c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f92f 	bl	8000548 <__aeabi_f2d>
 80012ea:	4604      	mov	r4, r0
 80012ec:	460d      	mov	r5, r1
 80012ee:	4b67      	ldr	r3, [pc, #412]	; (800148c <interrupt_Motor+0x31c>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f928 	bl	8000548 <__aeabi_f2d>
 80012f8:	a35d      	add	r3, pc, #372	; (adr r3, 8001470 <interrupt_Motor+0x300>)
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	f7ff f97b 	bl	80005f8 <__aeabi_dmul>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4620      	mov	r0, r4
 8001308:	4629      	mov	r1, r5
 800130a:	f7fe ffbf 	bl	800028c <__adddf3>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fc67 	bl	8000be8 <__aeabi_d2f>
 800131a:	4603      	mov	r3, r0
 800131c:	4a5b      	ldr	r2, [pc, #364]	; (800148c <interrupt_Motor+0x31c>)
 800131e:	6013      	str	r3, [r2, #0]
		g_TargetTurning.displacement += g_TargetTurning.velocity*INTERRUPT_TIME;// + g_TargetTurning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8001320:	4b5b      	ldr	r3, [pc, #364]	; (8001490 <interrupt_Motor+0x320>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f90f 	bl	8000548 <__aeabi_f2d>
 800132a:	4604      	mov	r4, r0
 800132c:	460d      	mov	r5, r1
 800132e:	4b58      	ldr	r3, [pc, #352]	; (8001490 <interrupt_Motor+0x320>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f908 	bl	8000548 <__aeabi_f2d>
 8001338:	a34d      	add	r3, pc, #308	; (adr r3, 8001470 <interrupt_Motor+0x300>)
 800133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133e:	f7ff f95b 	bl	80005f8 <__aeabi_dmul>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4620      	mov	r0, r4
 8001348:	4629      	mov	r1, r5
 800134a:	f7fe ff9f 	bl	800028c <__adddf3>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4610      	mov	r0, r2
 8001354:	4619      	mov	r1, r3
 8001356:	f7ff fc47 	bl	8000be8 <__aeabi_d2f>
 800135a:	4603      	mov	r3, r0
 800135c:	4a4c      	ldr	r2, [pc, #304]	; (8001490 <interrupt_Motor+0x320>)
 800135e:	6093      	str	r3, [r2, #8]
		g_TargetTurning.velocity += g_TargetTurning.acceleration*INTERRUPT_TIME;
 8001360:	4b4b      	ldr	r3, [pc, #300]	; (8001490 <interrupt_Motor+0x320>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f8ef 	bl	8000548 <__aeabi_f2d>
 800136a:	4604      	mov	r4, r0
 800136c:	460d      	mov	r5, r1
 800136e:	4b48      	ldr	r3, [pc, #288]	; (8001490 <interrupt_Motor+0x320>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f8e8 	bl	8000548 <__aeabi_f2d>
 8001378:	a33d      	add	r3, pc, #244	; (adr r3, 8001470 <interrupt_Motor+0x300>)
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	f7ff f93b 	bl	80005f8 <__aeabi_dmul>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4620      	mov	r0, r4
 8001388:	4629      	mov	r1, r5
 800138a:	f7fe ff7f 	bl	800028c <__adddf3>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4610      	mov	r0, r2
 8001394:	4619      	mov	r1, r3
 8001396:	f7ff fc27 	bl	8000be8 <__aeabi_d2f>
 800139a:	4603      	mov	r3, r0
 800139c:	4a3c      	ldr	r2, [pc, #240]	; (8001490 <interrupt_Motor+0x320>)
 800139e:	6013      	str	r3, [r2, #0]
		cal_table(g_TrapezoidTurning,&g_TargetTurning);
 80013a0:	4b3e      	ldr	r3, [pc, #248]	; (800149c <interrupt_Motor+0x32c>)
 80013a2:	4a3b      	ldr	r2, [pc, #236]	; (8001490 <interrupt_Motor+0x320>)
 80013a4:	9201      	str	r2, [sp, #4]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	9200      	str	r2, [sp, #0]
 80013aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ac:	f000 f8d2 	bl	8001554 <cal_table>
	}
	float PID_wall = calWallConrol();
 80013b0:	f000 ffba 	bl	8002328 <calWallConrol>
 80013b4:	ed87 0a03 	vstr	s0, [r7, #12]
	float velocity_l = g_TargetStraight.velocity + g_TargetTurning.velocity * TREAD_WIDTH / 2 * M_PI / 180 + PID_wall;
 80013b8:	4b34      	ldr	r3, [pc, #208]	; (800148c <interrupt_Motor+0x31c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f8c3 	bl	8000548 <__aeabi_f2d>
 80013c2:	4604      	mov	r4, r0
 80013c4:	460d      	mov	r5, r1
 80013c6:	4b32      	ldr	r3, [pc, #200]	; (8001490 <interrupt_Motor+0x320>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f8bc 	bl	8000548 <__aeabi_f2d>
 80013d0:	a329      	add	r3, pc, #164	; (adr r3, 8001478 <interrupt_Motor+0x308>)
 80013d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d6:	f7ff f90f 	bl	80005f8 <__aeabi_dmul>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4610      	mov	r0, r2
 80013e0:	4619      	mov	r1, r3
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013ea:	f7ff fa2f 	bl	800084c <__aeabi_ddiv>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4610      	mov	r0, r2
 80013f4:	4619      	mov	r1, r3
 80013f6:	a322      	add	r3, pc, #136	; (adr r3, 8001480 <interrupt_Motor+0x310>)
 80013f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fc:	f7ff f8fc 	bl	80005f8 <__aeabi_dmul>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <interrupt_Motor+0x330>)
 800140e:	f7ff fa1d 	bl	800084c <__aeabi_ddiv>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4620      	mov	r0, r4
 8001418:	4629      	mov	r1, r5
 800141a:	f7fe ff37 	bl	800028c <__adddf3>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4614      	mov	r4, r2
 8001424:	461d      	mov	r5, r3
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f7ff f88e 	bl	8000548 <__aeabi_f2d>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4620      	mov	r0, r4
 8001432:	4629      	mov	r1, r5
 8001434:	f7fe ff2a 	bl	800028c <__adddf3>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fbd2 	bl	8000be8 <__aeabi_d2f>
 8001444:	4603      	mov	r3, r0
 8001446:	60bb      	str	r3, [r7, #8]
		pl_motor_mode_L(velocity_l);
 8001448:	ed97 0a02 	vldr	s0, [r7, #8]
 800144c:	f001 f9ea 	bl	8002824 <pl_motor_mode_L>
		pl_motor_count_L(velocity_l);
 8001450:	ed97 0a02 	vldr	s0, [r7, #8]
 8001454:	f001 fa48 	bl	80028e8 <pl_motor_count_L>
	float velocity_r = g_TargetStraight.velocity - g_TargetTurning.velocity * TREAD_WIDTH / 2 * M_PI / 180 - PID_wall;
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <interrupt_Motor+0x31c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f873 	bl	8000548 <__aeabi_f2d>
 8001462:	4604      	mov	r4, r0
 8001464:	460d      	mov	r5, r1
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <interrupt_Motor+0x320>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	e01b      	b.n	80014a4 <interrupt_Motor+0x334>
 800146c:	f3af 8000 	nop.w
 8001470:	d2f1a9fc 	.word	0xd2f1a9fc
 8001474:	3f50624d 	.word	0x3f50624d
 8001478:	147ae148 	.word	0x147ae148
 800147c:	405487ae 	.word	0x405487ae
 8001480:	54442d18 	.word	0x54442d18
 8001484:	400921fb 	.word	0x400921fb
 8001488:	20000238 	.word	0x20000238
 800148c:	200001f8 	.word	0x200001f8
 8001490:	20000204 	.word	0x20000204
 8001494:	20000210 	.word	0x20000210
 8001498:	2000039c 	.word	0x2000039c
 800149c:	20000224 	.word	0x20000224
 80014a0:	40668000 	.word	0x40668000
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f84f 	bl	8000548 <__aeabi_f2d>
 80014aa:	a326      	add	r3, pc, #152	; (adr r3, 8001544 <interrupt_Motor+0x3d4>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f8a2 	bl	80005f8 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014c4:	f7ff f9c2 	bl	800084c <__aeabi_ddiv>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	a31e      	add	r3, pc, #120	; (adr r3, 800154c <interrupt_Motor+0x3dc>)
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	f7ff f88f 	bl	80005f8 <__aeabi_dmul>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <interrupt_Motor+0x3d0>)
 80014e8:	f7ff f9b0 	bl	800084c <__aeabi_ddiv>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4620      	mov	r0, r4
 80014f2:	4629      	mov	r1, r5
 80014f4:	f7fe fec8 	bl	8000288 <__aeabi_dsub>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4614      	mov	r4, r2
 80014fe:	461d      	mov	r5, r3
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f7ff f821 	bl	8000548 <__aeabi_f2d>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4620      	mov	r0, r4
 800150c:	4629      	mov	r1, r5
 800150e:	f7fe febb 	bl	8000288 <__aeabi_dsub>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff fb65 	bl	8000be8 <__aeabi_d2f>
 800151e:	4603      	mov	r3, r0
 8001520:	607b      	str	r3, [r7, #4]
	    pl_motor_mode_R(velocity_r);
 8001522:	ed97 0a01 	vldr	s0, [r7, #4]
 8001526:	f001 f99d 	bl	8002864 <pl_motor_mode_R>
	    pl_motor_count_R(velocity_r);
 800152a:	ed97 0a01 	vldr	s0, [r7, #4]
 800152e:	f001 f9ef 	bl	8002910 <pl_motor_count_R>



}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bdb0      	pop	{r4, r5, r7, pc}
 800153a:	bf00      	nop
 800153c:	f3af 8000 	nop.w
 8001540:	40668000 	.word	0x40668000
 8001544:	147ae148 	.word	0x147ae148
 8001548:	405487ae 	.word	0x405487ae
 800154c:	54442d18 	.word	0x54442d18
 8001550:	400921fb 	.word	0x400921fb

08001554 <cal_table>:

void cal_table(TRAPEZOID input,TARGET *target){
 8001554:	b084      	sub	sp, #16
 8001556:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	f107 0420 	add.w	r4, r7, #32
 8001562:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 8001566:	edd7 7a08 	vldr	s15, [r7, #32]
 800156a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800156e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001572:	f2c0 819b 	blt.w	80018ac <cal_table+0x358>
	switch (g_acc_flag) {
 8001576:	4bcc      	ldr	r3, [pc, #816]	; (80018a8 <cal_table+0x354>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b06      	cmp	r3, #6
 800157e:	f200 832e 	bhi.w	8001bde <cal_table+0x68a>
 8001582:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <cal_table+0x34>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	08001bd9 	.word	0x08001bd9
 800158c:	080015a5 	.word	0x080015a5
 8001590:	08001717 	.word	0x08001717
 8001594:	08001835 	.word	0x08001835
 8001598:	08001bd9 	.word	0x08001bd9
 800159c:	08001861 	.word	0x08001861
 80015a0:	08001883 	.word	0x08001883
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 80015a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a6:	ed93 7a00 	vldr	s14, [r3]
 80015aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b6:	db0a      	blt.n	80015ce <cal_table+0x7a>
				target->velocity = input.count_velocity;
 80015b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015bc:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 80015be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 80015c6:	4bb8      	ldr	r3, [pc, #736]	; (80018a8 <cal_table+0x354>)
 80015c8:	2202      	movs	r2, #2
 80015ca:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 80015cc:	e307      	b.n	8001bde <cal_table+0x68a>
			else if((input.displacement <= (2*target->velocity*target->velocity
 80015ce:	ed97 7a08 	vldr	s14, [r7, #32]
 80015d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80015dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015de:	edd3 7a00 	vldr	s15, [r3]
 80015e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 80015e6:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80015ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80015ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80015f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 80015f6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80015fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80015fe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001602:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 8001606:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800160a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800160e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001612:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 8001616:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800161a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161e:	d900      	bls.n	8001622 <cal_table+0xce>
		break;
 8001620:	e2dd      	b.n	8001bde <cal_table+0x68a>
				time_over=((2*target->velocity*target->velocity
 8001622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001624:	edd3 7a00 	vldr	s15, [r3]
 8001628:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800162c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800162e:	edd3 7a00 	vldr	s15, [r3]
 8001632:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 8001636:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800163a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800163e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001642:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 8001646:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800164a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800164e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001652:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 8001656:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800165a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800165e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001666:	edd7 7a08 	vldr	s15, [r7, #32]
 800166a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800166e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001670:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 8001674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001678:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 800167c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe ff61 	bl	8000548 <__aeabi_f2d>
 8001686:	4604      	mov	r4, r0
 8001688:	460d      	mov	r5, r1
 800168a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff5b 	bl	8000548 <__aeabi_f2d>
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	f7fe ffad 	bl	80005f8 <__aeabi_dmul>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4690      	mov	r8, r2
 80016a4:	4699      	mov	r9, r3
 80016a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016ae:	ee17 0a90 	vmov	r0, s15
 80016b2:	f7fe ff49 	bl	8000548 <__aeabi_f2d>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4640      	mov	r0, r8
 80016bc:	4649      	mov	r1, r9
 80016be:	f7fe ff9b 	bl	80005f8 <__aeabi_dmul>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4620      	mov	r0, r4
 80016c8:	4629      	mov	r1, r5
 80016ca:	f7fe fddd 	bl	8000288 <__aeabi_dsub>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f7ff fa87 	bl	8000be8 <__aeabi_d2f>
 80016da:	4602      	mov	r2, r0
 80016dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016de:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 80016e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e2:	ed93 7a00 	vldr	s14, [r3]
 80016e6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80016ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016fc:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 8001700:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001704:	eef1 7a67 	vneg.f32	s15, s15
 8001708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800170a:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 800170e:	4b66      	ldr	r3, [pc, #408]	; (80018a8 <cal_table+0x354>)
 8001710:	2203      	movs	r2, #3
 8001712:	701a      	strb	r2, [r3, #0]
		break;
 8001714:	e263      	b.n	8001bde <cal_table+0x68a>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 8001716:	ed97 7a08 	vldr	s14, [r7, #32]
 800171a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001720:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8001724:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001728:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800172c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8001730:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001734:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001738:	ee66 7a27 	vmul.f32	s15, s12, s15
 800173c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001740:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001744:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8001748:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800174c:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 8001750:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001758:	d900      	bls.n	800175c <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 800175a:	e240      	b.n	8001bde <cal_table+0x68a>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 800175c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800175e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001762:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001766:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800176a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 800176e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001772:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001776:	ee66 7a27 	vmul.f32	s15, s12, s15
 800177a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800177e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001782:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 8001786:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800178a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 800178e:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 8001792:	edd7 7a08 	vldr	s15, [r7, #32]
 8001796:	ee77 6a67 	vsub.f32	s13, s14, s15
 800179a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800179c:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80017a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017a4:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 80017a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fecb 	bl	8000548 <__aeabi_f2d>
 80017b2:	4604      	mov	r4, r0
 80017b4:	460d      	mov	r5, r1
 80017b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fec5 	bl	8000548 <__aeabi_f2d>
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	f7fe ff17 	bl	80005f8 <__aeabi_dmul>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4690      	mov	r8, r2
 80017d0:	4699      	mov	r9, r3
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7fe feb8 	bl	8000548 <__aeabi_f2d>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4640      	mov	r0, r8
 80017de:	4649      	mov	r1, r9
 80017e0:	f7fe ff0a 	bl	80005f8 <__aeabi_dmul>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4620      	mov	r0, r4
 80017ea:	4629      	mov	r1, r5
 80017ec:	f7fe fd4c 	bl	8000288 <__aeabi_dsub>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	f7ff f9f6 	bl	8000be8 <__aeabi_d2f>
 80017fc:	4602      	mov	r2, r0
 80017fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001800:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 8001802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001804:	ed93 7a00 	vldr	s14, [r3]
 8001808:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800180c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001810:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001814:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800181a:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 800181e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001822:	eef1 7a67 	vneg.f32	s15, s15
 8001826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001828:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 800182c:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <cal_table+0x354>)
 800182e:	2203      	movs	r2, #3
 8001830:	701a      	strb	r2, [r3, #0]
		break;
 8001832:	e1d4      	b.n	8001bde <cal_table+0x68a>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 8001834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001836:	ed93 7a00 	vldr	s14, [r3]
 800183a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800183e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001846:	d900      	bls.n	800184a <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8001848:	e1c9      	b.n	8001bde <cal_table+0x68a>
			target->velocity = input.end_velocity;
 800184a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800184c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800184e:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8001850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <cal_table+0x354>)
 800185a:	2204      	movs	r2, #4
 800185c:	701a      	strb	r2, [r3, #0]
		break;
 800185e:	e1be      	b.n	8001bde <cal_table+0x68a>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 8001860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001862:	ed93 7a02 	vldr	s14, [r3, #8]
 8001866:	edd7 7a08 	vldr	s15, [r7, #32]
 800186a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800186e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001872:	db06      	blt.n	8001882 <cal_table+0x32e>
			target->acceleration = 0;
 8001874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800187c:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <cal_table+0x354>)
 800187e:	2204      	movs	r2, #4
 8001880:	701a      	strb	r2, [r3, #0]
		}
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 8001882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001884:	ed93 7a02 	vldr	s14, [r3, #8]
 8001888:	edd7 7a08 	vldr	s15, [r7, #32]
 800188c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001894:	da00      	bge.n	8001898 <cal_table+0x344>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8001896:	e1a2      	b.n	8001bde <cal_table+0x68a>
			target->acceleration = 0;
 8001898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80018a0:	4b01      	ldr	r3, [pc, #4]	; (80018a8 <cal_table+0x354>)
 80018a2:	2204      	movs	r2, #4
 80018a4:	701a      	strb	r2, [r3, #0]
		break;
 80018a6:	e19a      	b.n	8001bde <cal_table+0x68a>
 80018a8:	20000239 	.word	0x20000239
	}
}else{
	switch (g_acc_flag) {
 80018ac:	4bcf      	ldr	r3, [pc, #828]	; (8001bec <cal_table+0x698>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b06      	cmp	r3, #6
 80018b4:	f200 8193 	bhi.w	8001bde <cal_table+0x68a>
 80018b8:	a201      	add	r2, pc, #4	; (adr r2, 80018c0 <cal_table+0x36c>)
 80018ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018be:	bf00      	nop
 80018c0:	08001bdd 	.word	0x08001bdd
 80018c4:	080018dd 	.word	0x080018dd
 80018c8:	08001a4f 	.word	0x08001a4f
 80018cc:	08001b65 	.word	0x08001b65
 80018d0:	08001b91 	.word	0x08001b91
 80018d4:	08001b91 	.word	0x08001b91
 80018d8:	08001bb3 	.word	0x08001bb3
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 80018dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018de:	ed93 7a00 	vldr	s14, [r3]
 80018e2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80018e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ee:	d80a      	bhi.n	8001906 <cal_table+0x3b2>
				target->velocity = input.count_velocity;
 80018f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f4:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 80018f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 80018fe:	4bbb      	ldr	r3, [pc, #748]	; (8001bec <cal_table+0x698>)
 8001900:	2202      	movs	r2, #2
 8001902:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 8001904:	e16b      	b.n	8001bde <cal_table+0x68a>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 8001906:	edd7 7a08 	vldr	s15, [r7, #32]
 800190a:	eeb1 7a67 	vneg.f32	s14, s15
 800190e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001910:	edd3 7a00 	vldr	s15, [r3]
 8001914:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800191a:	edd3 7a00 	vldr	s15, [r3]
 800191e:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 8001922:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8001926:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800192a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800192e:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 8001932:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001936:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800193a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800193e:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 8001942:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001946:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800194a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800194e:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 8001952:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195a:	d900      	bls.n	800195e <cal_table+0x40a>
		break;
 800195c:	e13f      	b.n	8001bde <cal_table+0x68a>
				time_over=(-(2*target->velocity*target->velocity
 800195e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001960:	edd3 7a00 	vldr	s15, [r3]
 8001964:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 8001972:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001976:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800197a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800197e:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 8001982:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001986:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800198a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800198e:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 8001992:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 8001996:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800199a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800199e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80019aa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80019ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b0:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 80019b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019b8:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 80019bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fdc1 	bl	8000548 <__aeabi_f2d>
 80019c6:	4604      	mov	r4, r0
 80019c8:	460d      	mov	r5, r1
 80019ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fdbb 	bl	8000548 <__aeabi_f2d>
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	f7fe fe0d 	bl	80005f8 <__aeabi_dmul>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4690      	mov	r8, r2
 80019e4:	4699      	mov	r9, r3
 80019e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019ee:	ee17 0a90 	vmov	r0, s15
 80019f2:	f7fe fda9 	bl	8000548 <__aeabi_f2d>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4640      	mov	r0, r8
 80019fc:	4649      	mov	r1, r9
 80019fe:	f7fe fdfb 	bl	80005f8 <__aeabi_dmul>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4620      	mov	r0, r4
 8001a08:	4629      	mov	r1, r5
 8001a0a:	f7fe fc3f 	bl	800028c <__adddf3>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	f7ff f8e7 	bl	8000be8 <__aeabi_d2f>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a1e:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 8001a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a22:	ed93 7a00 	vldr	s14, [r3]
 8001a26:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001a2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3c:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 8001a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a44:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 8001a46:	4b69      	ldr	r3, [pc, #420]	; (8001bec <cal_table+0x698>)
 8001a48:	2203      	movs	r2, #3
 8001a4a:	701a      	strb	r2, [r3, #0]
		break;
 8001a4c:	e0c7      	b.n	8001bde <cal_table+0x68a>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 8001a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a50:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a54:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a58:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8001a5c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001a60:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001a64:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8001a68:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001a6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a70:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a78:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a7c:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8001a80:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001a84:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 8001a88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a90:	d900      	bls.n	8001a94 <cal_table+0x540>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 8001a92:	e0a4      	b.n	8001bde <cal_table+0x68a>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8001a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a96:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a9a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001a9e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001aa2:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 8001aa6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001aaa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001aae:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ab2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ab6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001aba:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 8001abe:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001ac2:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8001ac6:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 8001aca:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ace:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad4:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8001ad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001adc:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8001ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fd2f 	bl	8000548 <__aeabi_f2d>
 8001aea:	4604      	mov	r4, r0
 8001aec:	460d      	mov	r5, r1
 8001aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fd29 	bl	8000548 <__aeabi_f2d>
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	f7fe fd7b 	bl	80005f8 <__aeabi_dmul>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4690      	mov	r8, r2
 8001b08:	4699      	mov	r9, r3
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7fe fd1c 	bl	8000548 <__aeabi_f2d>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4640      	mov	r0, r8
 8001b16:	4649      	mov	r1, r9
 8001b18:	f7fe fd6e 	bl	80005f8 <__aeabi_dmul>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4620      	mov	r0, r4
 8001b22:	4629      	mov	r1, r5
 8001b24:	f7fe fbb2 	bl	800028c <__adddf3>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f7ff f85a 	bl	8000be8 <__aeabi_d2f>
 8001b34:	4602      	mov	r2, r0
 8001b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b38:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 8001b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b3c:	ed93 7a00 	vldr	s14, [r3]
 8001b40:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001b44:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b52:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 8001b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b5a:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 8001b5c:	4b23      	ldr	r3, [pc, #140]	; (8001bec <cal_table+0x698>)
 8001b5e:	2203      	movs	r2, #3
 8001b60:	701a      	strb	r2, [r3, #0]
		break;
 8001b62:	e03c      	b.n	8001bde <cal_table+0x68a>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 8001b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b66:	ed93 7a00 	vldr	s14, [r3]
 8001b6a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001b6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b76:	da00      	bge.n	8001b7a <cal_table+0x626>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8001b78:	e031      	b.n	8001bde <cal_table+0x68a>
			target->velocity = input.end_velocity;
 8001b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b7e:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8001b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001b88:	4b18      	ldr	r3, [pc, #96]	; (8001bec <cal_table+0x698>)
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	701a      	strb	r2, [r3, #0]
		break;
 8001b8e:	e026      	b.n	8001bde <cal_table+0x68a>
	case 4:
		//終了(0でもいいかも)
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 8001b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b92:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b96:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba2:	d806      	bhi.n	8001bb2 <cal_table+0x65e>
			target->acceleration = 0;
 8001ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001bac:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <cal_table+0x698>)
 8001bae:	2204      	movs	r2, #4
 8001bb0:	701a      	strb	r2, [r3, #0]
		}
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 8001bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bb8:	edd7 7a08 	vldr	s15, [r7, #32]
 8001bbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc4:	d900      	bls.n	8001bc8 <cal_table+0x674>
		}
	}

}

}
 8001bc6:	e00a      	b.n	8001bde <cal_table+0x68a>
			target->acceleration = 0;
 8001bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <cal_table+0x698>)
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	701a      	strb	r2, [r3, #0]
}
 8001bd6:	e002      	b.n	8001bde <cal_table+0x68a>
		break;
 8001bd8:	bf00      	nop
 8001bda:	e000      	b.n	8001bde <cal_table+0x68a>
		break;
 8001bdc:	bf00      	nop
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8001be8:	b004      	add	sp, #16
 8001bea:	4770      	bx	lr
 8001bec:	20000239 	.word	0x20000239

08001bf0 <straight_table>:


float straight_table(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration,MOTOR_MODE mode) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	ed87 0a05 	vstr	s0, [r7, #20]
 8001bfa:	edc7 0a04 	vstr	s1, [r7, #16]
 8001bfe:	ed87 1a03 	vstr	s2, [r7, #12]
 8001c02:	edc7 1a02 	vstr	s3, [r7, #8]
 8001c06:	ed87 2a01 	vstr	s4, [r7, #4]
 8001c0a:	6038      	str	r0, [r7, #0]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8001c0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c10:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8001c14:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c18:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8001c20:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001c24:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8001c28:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c30:	edc7 7a07 	vstr	s15, [r7, #28]

	g_WallControl_mode=mode.WallControlMode;
 8001c34:	783a      	ldrb	r2, [r7, #0]
 8001c36:	4b65      	ldr	r3, [pc, #404]	; (8001dcc <straight_table+0x1dc>)
 8001c38:	701a      	strb	r2, [r3, #0]
	//g_WallControlStatus=mode.WallControlStatus;
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8001c3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c46:	d505      	bpl.n	8001c54 <straight_table+0x64>
 8001c48:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c4c:	eef1 7a67 	vneg.f32	s15, s15
 8001c50:	edc7 7a01 	vstr	s15, [r7, #4]

	g_TrapezoidStraight.displacement = input_displacement;
 8001c54:	4a5e      	ldr	r2, [pc, #376]	; (8001dd0 <straight_table+0x1e0>)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	6013      	str	r3, [r2, #0]
	g_TrapezoidStraight.start_velocity = input_start_velocity;
 8001c5a:	4a5d      	ldr	r2, [pc, #372]	; (8001dd0 <straight_table+0x1e0>)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	6053      	str	r3, [r2, #4]
	g_TrapezoidStraight.end_velocity = input_end_velocity;
 8001c60:	4a5b      	ldr	r2, [pc, #364]	; (8001dd0 <straight_table+0x1e0>)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6093      	str	r3, [r2, #8]
	g_TrapezoidStraight.count_velocity = input_count_velocity;
 8001c66:	4a5a      	ldr	r2, [pc, #360]	; (8001dd0 <straight_table+0x1e0>)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	60d3      	str	r3, [r2, #12]
	g_TrapezoidStraight.acceleration = input_acceleration;
 8001c6c:	4a58      	ldr	r2, [pc, #352]	; (8001dd0 <straight_table+0x1e0>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){g_TargetStraight.acceleration = input_acceleration;
 8001c72:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7e:	db03      	blt.n	8001c88 <straight_table+0x98>
 8001c80:	4a54      	ldr	r2, [pc, #336]	; (8001dd4 <straight_table+0x1e4>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6053      	str	r3, [r2, #4]
 8001c86:	e006      	b.n	8001c96 <straight_table+0xa6>
	}else{g_TargetStraight.acceleration = -input_acceleration;}
 8001c88:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c8c:	eef1 7a67 	vneg.f32	s15, s15
 8001c90:	4b50      	ldr	r3, [pc, #320]	; (8001dd4 <straight_table+0x1e4>)
 8001c92:	edc3 7a01 	vstr	s15, [r3, #4]
	g_TargetStraight.velocity = input_start_velocity;
 8001c96:	4a4f      	ldr	r2, [pc, #316]	; (8001dd4 <straight_table+0x1e4>)
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	6013      	str	r3, [r2, #0]
	g_TargetStraight.displacement = 0;
 8001c9c:	4b4d      	ldr	r3, [pc, #308]	; (8001dd4 <straight_table+0x1e4>)
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
	g_TargetTurning.velocity = 0;
 8001ca4:	4b4c      	ldr	r3, [pc, #304]	; (8001dd8 <straight_table+0x1e8>)
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
	g_TargetTurning.acceleration = 0;
 8001cac:	4b4a      	ldr	r3, [pc, #296]	; (8001dd8 <straight_table+0x1e8>)
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	605a      	str	r2, [r3, #4]
	g_TargetTurning.displacement = 0;
 8001cb4:	4b48      	ldr	r3, [pc, #288]	; (8001dd8 <straight_table+0x1e8>)
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]

	g_acc_flag=1;
 8001cbc:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <straight_table+0x1ec>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;g_TargetStraight.acceleration = input_acceleration;}
 8001cc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cce:	dd0e      	ble.n	8001cee <straight_table+0xfe>
 8001cd0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce0:	dd05      	ble.n	8001cee <straight_table+0xfe>
 8001ce2:	4b3e      	ldr	r3, [pc, #248]	; (8001ddc <straight_table+0x1ec>)
 8001ce4:	2205      	movs	r2, #5
 8001ce6:	701a      	strb	r2, [r3, #0]
 8001ce8:	4a3a      	ldr	r2, [pc, #232]	; (8001dd4 <straight_table+0x1e4>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;g_TargetStraight.acceleration = -input_acceleration;}
 8001cee:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfa:	dd14      	ble.n	8001d26 <straight_table+0x136>
 8001cfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d00:	eef1 7a67 	vneg.f32	s15, s15
 8001d04:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d10:	d509      	bpl.n	8001d26 <straight_table+0x136>
 8001d12:	4b32      	ldr	r3, [pc, #200]	; (8001ddc <straight_table+0x1ec>)
 8001d14:	2206      	movs	r2, #6
 8001d16:	701a      	strb	r2, [r3, #0]
 8001d18:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d1c:	eef1 7a67 	vneg.f32	s15, s15
 8001d20:	4b2c      	ldr	r3, [pc, #176]	; (8001dd4 <straight_table+0x1e4>)
 8001d22:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;g_TargetStraight.acceleration = -input_acceleration;}
 8001d26:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d32:	d514      	bpl.n	8001d5e <straight_table+0x16e>
 8001d34:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d38:	eef1 7a67 	vneg.f32	s15, s15
 8001d3c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d48:	dd09      	ble.n	8001d5e <straight_table+0x16e>
 8001d4a:	4b24      	ldr	r3, [pc, #144]	; (8001ddc <straight_table+0x1ec>)
 8001d4c:	2205      	movs	r2, #5
 8001d4e:	701a      	strb	r2, [r3, #0]
 8001d50:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d54:	eef1 7a67 	vneg.f32	s15, s15
 8001d58:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <straight_table+0x1e4>)
 8001d5a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;g_TargetStraight.acceleration = input_acceleration;}
 8001d5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6a:	d50e      	bpl.n	8001d8a <straight_table+0x19a>
 8001d6c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d70:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7c:	d505      	bpl.n	8001d8a <straight_table+0x19a>
 8001d7e:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <straight_table+0x1ec>)
 8001d80:	2206      	movs	r2, #6
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	4a13      	ldr	r2, [pc, #76]	; (8001dd4 <straight_table+0x1e4>)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <straight_table+0x1f0>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	701a      	strb	r2, [r3, #0]



	//pl_motor_start();
	while (g_acc_flag!=4){
 8001d90:	e00a      	b.n	8001da8 <straight_table+0x1b8>
//		printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d\n", g_motorCount_l,g_motorCount_r,g_motorCount_l,g_motorCount_l);
		if(mode.calMazeMode==1){
 8001d92:	78bb      	ldrb	r3, [r7, #2]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d102      	bne.n	8001d9e <straight_table+0x1ae>
			maze_maker();
 8001d98:	f007 fe98 	bl	8009acc <maze_maker>
 8001d9c:	e004      	b.n	8001da8 <straight_table+0x1b8>
		}else if(mode.calMazeMode==2){
 8001d9e:	78bb      	ldrb	r3, [r7, #2]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d101      	bne.n	8001da8 <straight_table+0x1b8>
			maze_makerBack();
 8001da4:	f008 f85a 	bl	8009e5c <maze_makerBack>
	while (g_acc_flag!=4){
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <straight_table+0x1ec>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d1ef      	bne.n	8001d92 <straight_table+0x1a2>
		}
	}
	modeacc = 0;
 8001db2:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <straight_table+0x1f0>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]

	//pl_motor_stop();

	return g_TargetStraight.velocity;
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <straight_table+0x1e4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	ee07 3a90 	vmov	s15, r3
}
 8001dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc4:	3720      	adds	r7, #32
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	2000039c 	.word	0x2000039c
 8001dd0:	20000210 	.word	0x20000210
 8001dd4:	200001f8 	.word	0x200001f8
 8001dd8:	20000204 	.word	0x20000204
 8001ddc:	20000239 	.word	0x20000239
 8001de0:	20000238 	.word	0x20000238

08001de4 <turning_table>:


float turning_table(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	ed87 0a05 	vstr	s0, [r7, #20]
 8001dee:	edc7 0a04 	vstr	s1, [r7, #16]
 8001df2:	ed87 1a03 	vstr	s2, [r7, #12]
 8001df6:	edc7 1a02 	vstr	s3, [r7, #8]
 8001dfa:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8001dfe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e02:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8001e06:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e0a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e0e:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8001e12:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001e16:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8001e1a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e22:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8001e26:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e32:	d505      	bpl.n	8001e40 <turning_table+0x5c>
 8001e34:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e38:	eef1 7a67 	vneg.f32	s15, s15
 8001e3c:	edc7 7a01 	vstr	s15, [r7, #4]

	g_TrapezoidTurning.displacement = input_displacement;
 8001e40:	4a58      	ldr	r2, [pc, #352]	; (8001fa4 <turning_table+0x1c0>)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	6013      	str	r3, [r2, #0]
	g_TrapezoidTurning.start_velocity = input_start_velocity;
 8001e46:	4a57      	ldr	r2, [pc, #348]	; (8001fa4 <turning_table+0x1c0>)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	6053      	str	r3, [r2, #4]
	g_TrapezoidTurning.end_velocity = input_end_velocity;
 8001e4c:	4a55      	ldr	r2, [pc, #340]	; (8001fa4 <turning_table+0x1c0>)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6093      	str	r3, [r2, #8]
	g_TrapezoidTurning.count_velocity = input_count_velocity;
 8001e52:	4a54      	ldr	r2, [pc, #336]	; (8001fa4 <turning_table+0x1c0>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	60d3      	str	r3, [r2, #12]
	g_TrapezoidTurning.acceleration = input_acceleration;
 8001e58:	4a52      	ldr	r2, [pc, #328]	; (8001fa4 <turning_table+0x1c0>)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){g_TargetTurning.acceleration = input_acceleration;
 8001e5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6a:	db03      	blt.n	8001e74 <turning_table+0x90>
 8001e6c:	4a4e      	ldr	r2, [pc, #312]	; (8001fa8 <turning_table+0x1c4>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6053      	str	r3, [r2, #4]
 8001e72:	e006      	b.n	8001e82 <turning_table+0x9e>
	}else{g_TargetTurning.acceleration = -input_acceleration;}
 8001e74:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e78:	eef1 7a67 	vneg.f32	s15, s15
 8001e7c:	4b4a      	ldr	r3, [pc, #296]	; (8001fa8 <turning_table+0x1c4>)
 8001e7e:	edc3 7a01 	vstr	s15, [r3, #4]
	g_TargetTurning.velocity = input_start_velocity;
 8001e82:	4a49      	ldr	r2, [pc, #292]	; (8001fa8 <turning_table+0x1c4>)
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	6013      	str	r3, [r2, #0]
	g_TargetTurning.displacement = 0;
 8001e88:	4b47      	ldr	r3, [pc, #284]	; (8001fa8 <turning_table+0x1c4>)
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
	g_TargetStraight.velocity = 0;
 8001e90:	4b46      	ldr	r3, [pc, #280]	; (8001fac <turning_table+0x1c8>)
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
	g_TargetStraight.acceleration = 0;
 8001e98:	4b44      	ldr	r3, [pc, #272]	; (8001fac <turning_table+0x1c8>)
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	605a      	str	r2, [r3, #4]
	g_TargetStraight.displacement = 0;
 8001ea0:	4b42      	ldr	r3, [pc, #264]	; (8001fac <turning_table+0x1c8>)
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]

	g_acc_flag=1;
 8001ea8:	4b41      	ldr	r3, [pc, #260]	; (8001fb0 <turning_table+0x1cc>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;g_TargetTurning.acceleration = input_acceleration;}
 8001eae:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eba:	dd0e      	ble.n	8001eda <turning_table+0xf6>
 8001ebc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ec0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ec4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ecc:	dd05      	ble.n	8001eda <turning_table+0xf6>
 8001ece:	4b38      	ldr	r3, [pc, #224]	; (8001fb0 <turning_table+0x1cc>)
 8001ed0:	2205      	movs	r2, #5
 8001ed2:	701a      	strb	r2, [r3, #0]
 8001ed4:	4a34      	ldr	r2, [pc, #208]	; (8001fa8 <turning_table+0x1c4>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;g_TargetTurning.acceleration = -input_acceleration;}
 8001eda:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ede:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee6:	dd14      	ble.n	8001f12 <turning_table+0x12e>
 8001ee8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eec:	eef1 7a67 	vneg.f32	s15, s15
 8001ef0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ef4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efc:	d509      	bpl.n	8001f12 <turning_table+0x12e>
 8001efe:	4b2c      	ldr	r3, [pc, #176]	; (8001fb0 <turning_table+0x1cc>)
 8001f00:	2206      	movs	r2, #6
 8001f02:	701a      	strb	r2, [r3, #0]
 8001f04:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f08:	eef1 7a67 	vneg.f32	s15, s15
 8001f0c:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <turning_table+0x1c4>)
 8001f0e:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;g_TargetTurning.acceleration = -input_acceleration;}
 8001f12:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1e:	d514      	bpl.n	8001f4a <turning_table+0x166>
 8001f20:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f24:	eef1 7a67 	vneg.f32	s15, s15
 8001f28:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f34:	dd09      	ble.n	8001f4a <turning_table+0x166>
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <turning_table+0x1cc>)
 8001f38:	2205      	movs	r2, #5
 8001f3a:	701a      	strb	r2, [r3, #0]
 8001f3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f40:	eef1 7a67 	vneg.f32	s15, s15
 8001f44:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <turning_table+0x1c4>)
 8001f46:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;g_TargetTurning.acceleration = input_acceleration;}
 8001f4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f56:	d50e      	bpl.n	8001f76 <turning_table+0x192>
 8001f58:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f68:	d505      	bpl.n	8001f76 <turning_table+0x192>
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <turning_table+0x1cc>)
 8001f6c:	2206      	movs	r2, #6
 8001f6e:	701a      	strb	r2, [r3, #0]
 8001f70:	4a0d      	ldr	r2, [pc, #52]	; (8001fa8 <turning_table+0x1c4>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8001f76:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <turning_table+0x1d0>)
 8001f78:	2202      	movs	r2, #2
 8001f7a:	701a      	strb	r2, [r3, #0]


	//pl_motor_start();
	while (g_acc_flag!=4){
 8001f7c:	bf00      	nop
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <turning_table+0x1cc>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d1fa      	bne.n	8001f7e <turning_table+0x19a>

	}
	modeacc = 0;
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <turning_table+0x1d0>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	701a      	strb	r2, [r3, #0]

	//pl_motor_stop();

	return g_TargetTurning.velocity;
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <turning_table+0x1c4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	ee07 3a90 	vmov	s15, r3
}
 8001f96:	eeb0 0a67 	vmov.f32	s0, s15
 8001f9a:	3724      	adds	r7, #36	; 0x24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	20000224 	.word	0x20000224
 8001fa8:	20000204 	.word	0x20000204
 8001fac:	200001f8 	.word	0x200001f8
 8001fb0:	20000239 	.word	0x20000239
 8001fb4:	20000238 	.word	0x20000238

08001fb8 <slalom_table>:


float slalom_table(float input_center_velocity,float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8001fb8:	b480      	push	{r7}
 8001fba:	b089      	sub	sp, #36	; 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	ed87 0a05 	vstr	s0, [r7, #20]
 8001fc2:	edc7 0a04 	vstr	s1, [r7, #16]
 8001fc6:	ed87 1a03 	vstr	s2, [r7, #12]
 8001fca:	edc7 1a02 	vstr	s3, [r7, #8]
 8001fce:	ed87 2a01 	vstr	s4, [r7, #4]
 8001fd2:	edc7 2a00 	vstr	s5, [r7]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8001fd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fda:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8001fde:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fe2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001fe6:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8001fea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001fee:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8001ff2:	ed97 7a00 	vldr	s14, [r7]
 8001ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ffa:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8001ffe:	edd7 7a00 	vldr	s15, [r7]
 8002002:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800200a:	d505      	bpl.n	8002018 <slalom_table+0x60>
 800200c:	edd7 7a00 	vldr	s15, [r7]
 8002010:	eef1 7a67 	vneg.f32	s15, s15
 8002014:	edc7 7a00 	vstr	s15, [r7]

	g_TrapezoidTurning.displacement = input_displacement;
 8002018:	4a58      	ldr	r2, [pc, #352]	; (800217c <slalom_table+0x1c4>)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	6013      	str	r3, [r2, #0]
	g_TrapezoidTurning.start_velocity = input_start_velocity;
 800201e:	4a57      	ldr	r2, [pc, #348]	; (800217c <slalom_table+0x1c4>)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6053      	str	r3, [r2, #4]
	g_TrapezoidTurning.end_velocity = input_end_velocity;
 8002024:	4a55      	ldr	r2, [pc, #340]	; (800217c <slalom_table+0x1c4>)
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	6093      	str	r3, [r2, #8]
	g_TrapezoidTurning.count_velocity = input_count_velocity;
 800202a:	4a54      	ldr	r2, [pc, #336]	; (800217c <slalom_table+0x1c4>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	60d3      	str	r3, [r2, #12]
	g_TrapezoidTurning.acceleration = input_acceleration;
 8002030:	4a52      	ldr	r2, [pc, #328]	; (800217c <slalom_table+0x1c4>)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){g_TargetTurning.acceleration = input_acceleration;
 8002036:	edd7 7a01 	vldr	s15, [r7, #4]
 800203a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800203e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002042:	db03      	blt.n	800204c <slalom_table+0x94>
 8002044:	4a4e      	ldr	r2, [pc, #312]	; (8002180 <slalom_table+0x1c8>)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	6053      	str	r3, [r2, #4]
 800204a:	e006      	b.n	800205a <slalom_table+0xa2>
	}else{g_TargetTurning.acceleration = -input_acceleration;}
 800204c:	edd7 7a00 	vldr	s15, [r7]
 8002050:	eef1 7a67 	vneg.f32	s15, s15
 8002054:	4b4a      	ldr	r3, [pc, #296]	; (8002180 <slalom_table+0x1c8>)
 8002056:	edc3 7a01 	vstr	s15, [r3, #4]
	g_TargetTurning.velocity = input_start_velocity;
 800205a:	4a49      	ldr	r2, [pc, #292]	; (8002180 <slalom_table+0x1c8>)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6013      	str	r3, [r2, #0]
	g_TargetTurning.displacement = 0;
 8002060:	4b47      	ldr	r3, [pc, #284]	; (8002180 <slalom_table+0x1c8>)
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
	g_TargetStraight.velocity = input_center_velocity;
 8002068:	4a46      	ldr	r2, [pc, #280]	; (8002184 <slalom_table+0x1cc>)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	6013      	str	r3, [r2, #0]
	g_TargetStraight.acceleration = 0;
 800206e:	4b45      	ldr	r3, [pc, #276]	; (8002184 <slalom_table+0x1cc>)
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	605a      	str	r2, [r3, #4]
	g_TargetStraight.displacement = 0;
 8002076:	4b43      	ldr	r3, [pc, #268]	; (8002184 <slalom_table+0x1cc>)
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	609a      	str	r2, [r3, #8]

	g_acc_flag=1;
 800207e:	4b42      	ldr	r3, [pc, #264]	; (8002188 <slalom_table+0x1d0>)
 8002080:	2201      	movs	r2, #1
 8002082:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;g_TargetTurning.acceleration = input_acceleration;}
 8002084:	edd7 7a04 	vldr	s15, [r7, #16]
 8002088:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800208c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002090:	dd0e      	ble.n	80020b0 <slalom_table+0xf8>
 8002092:	ed97 7a07 	vldr	s14, [r7, #28]
 8002096:	edd7 7a04 	vldr	s15, [r7, #16]
 800209a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800209e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a2:	dd05      	ble.n	80020b0 <slalom_table+0xf8>
 80020a4:	4b38      	ldr	r3, [pc, #224]	; (8002188 <slalom_table+0x1d0>)
 80020a6:	2205      	movs	r2, #5
 80020a8:	701a      	strb	r2, [r3, #0]
 80020aa:	4a35      	ldr	r2, [pc, #212]	; (8002180 <slalom_table+0x1c8>)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;g_TargetTurning.acceleration = -input_acceleration;}
 80020b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80020b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020bc:	dd14      	ble.n	80020e8 <slalom_table+0x130>
 80020be:	edd7 7a04 	vldr	s15, [r7, #16]
 80020c2:	eef1 7a67 	vneg.f32	s15, s15
 80020c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80020ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d2:	d509      	bpl.n	80020e8 <slalom_table+0x130>
 80020d4:	4b2c      	ldr	r3, [pc, #176]	; (8002188 <slalom_table+0x1d0>)
 80020d6:	2206      	movs	r2, #6
 80020d8:	701a      	strb	r2, [r3, #0]
 80020da:	edd7 7a00 	vldr	s15, [r7]
 80020de:	eef1 7a67 	vneg.f32	s15, s15
 80020e2:	4b27      	ldr	r3, [pc, #156]	; (8002180 <slalom_table+0x1c8>)
 80020e4:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;g_TargetTurning.acceleration = -input_acceleration;}
 80020e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80020ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f4:	d514      	bpl.n	8002120 <slalom_table+0x168>
 80020f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80020fa:	eef1 7a67 	vneg.f32	s15, s15
 80020fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8002102:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210a:	dd09      	ble.n	8002120 <slalom_table+0x168>
 800210c:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <slalom_table+0x1d0>)
 800210e:	2205      	movs	r2, #5
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	edd7 7a00 	vldr	s15, [r7]
 8002116:	eef1 7a67 	vneg.f32	s15, s15
 800211a:	4b19      	ldr	r3, [pc, #100]	; (8002180 <slalom_table+0x1c8>)
 800211c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;g_TargetTurning.acceleration = input_acceleration;}
 8002120:	edd7 7a04 	vldr	s15, [r7, #16]
 8002124:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800212c:	d50e      	bpl.n	800214c <slalom_table+0x194>
 800212e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002132:	edd7 7a04 	vldr	s15, [r7, #16]
 8002136:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800213a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213e:	d505      	bpl.n	800214c <slalom_table+0x194>
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <slalom_table+0x1d0>)
 8002142:	2206      	movs	r2, #6
 8002144:	701a      	strb	r2, [r3, #0]
 8002146:	4a0e      	ldr	r2, [pc, #56]	; (8002180 <slalom_table+0x1c8>)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 800214c:	4b0f      	ldr	r3, [pc, #60]	; (800218c <slalom_table+0x1d4>)
 800214e:	2202      	movs	r2, #2
 8002150:	701a      	strb	r2, [r3, #0]


	//pl_motor_start();
	while (g_acc_flag!=4){
 8002152:	bf00      	nop
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <slalom_table+0x1d0>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b04      	cmp	r3, #4
 800215c:	d1fa      	bne.n	8002154 <slalom_table+0x19c>

	}
	modeacc = 0;
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <slalom_table+0x1d4>)
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]

	//pl_motor_stop();

	return g_TargetTurning.velocity;
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <slalom_table+0x1c8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	ee07 3a90 	vmov	s15, r3
}
 800216c:	eeb0 0a67 	vmov.f32	s0, s15
 8002170:	3724      	adds	r7, #36	; 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000224 	.word	0x20000224
 8002180:	20000204 	.word	0x20000204
 8002184:	200001f8 	.word	0x200001f8
 8002188:	20000239 	.word	0x20000239
 800218c:	20000238 	.word	0x20000238

08002190 <interrupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interrupt_calSensor(void){
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
	int j;

//	if (sensor_mode == 1) {
	for (j = 19; j >= 1; j--) {
 8002196:	2313      	movs	r3, #19
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	e02c      	b.n	80021f6 <interrupt_calSensor+0x66>
		g_sensor[0][j] = g_sensor[0][j - 1];
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	4a4d      	ldr	r2, [pc, #308]	; (80022d8 <interrupt_calSensor+0x148>)
 80021a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021a6:	494c      	ldr	r1, [pc, #304]	; (80022d8 <interrupt_calSensor+0x148>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3b01      	subs	r3, #1
 80021b2:	4a49      	ldr	r2, [pc, #292]	; (80022d8 <interrupt_calSensor+0x148>)
 80021b4:	3314      	adds	r3, #20
 80021b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021ba:	4947      	ldr	r1, [pc, #284]	; (80022d8 <interrupt_calSensor+0x148>)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3314      	adds	r3, #20
 80021c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	4a43      	ldr	r2, [pc, #268]	; (80022d8 <interrupt_calSensor+0x148>)
 80021ca:	3328      	adds	r3, #40	; 0x28
 80021cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021d0:	4941      	ldr	r1, [pc, #260]	; (80022d8 <interrupt_calSensor+0x148>)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3328      	adds	r3, #40	; 0x28
 80021d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3b01      	subs	r3, #1
 80021de:	4a3e      	ldr	r2, [pc, #248]	; (80022d8 <interrupt_calSensor+0x148>)
 80021e0:	333c      	adds	r3, #60	; 0x3c
 80021e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021e6:	493c      	ldr	r1, [pc, #240]	; (80022d8 <interrupt_calSensor+0x148>)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	333c      	adds	r3, #60	; 0x3c
 80021ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	dccf      	bgt.n	800219c <interrupt_calSensor+0xc>
	}
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 80021fc:	4b37      	ldr	r3, [pc, #220]	; (80022dc <interrupt_calSensor+0x14c>)
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	4b37      	ldr	r3, [pc, #220]	; (80022e0 <interrupt_calSensor+0x150>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	4a33      	ldr	r2, [pc, #204]	; (80022d8 <interrupt_calSensor+0x148>)
 800220a:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 800220c:	4b33      	ldr	r3, [pc, #204]	; (80022dc <interrupt_calSensor+0x14c>)
 800220e:	885b      	ldrh	r3, [r3, #2]
 8002210:	461a      	mov	r2, r3
 8002212:	4b33      	ldr	r3, [pc, #204]	; (80022e0 <interrupt_calSensor+0x150>)
 8002214:	885b      	ldrh	r3, [r3, #2]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	4a2f      	ldr	r2, [pc, #188]	; (80022d8 <interrupt_calSensor+0x148>)
 800221a:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 800221c:	4b2f      	ldr	r3, [pc, #188]	; (80022dc <interrupt_calSensor+0x14c>)
 800221e:	889b      	ldrh	r3, [r3, #4]
 8002220:	461a      	mov	r2, r3
 8002222:	4b2f      	ldr	r3, [pc, #188]	; (80022e0 <interrupt_calSensor+0x150>)
 8002224:	889b      	ldrh	r3, [r3, #4]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	4a2b      	ldr	r2, [pc, #172]	; (80022d8 <interrupt_calSensor+0x148>)
 800222a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 800222e:	4b2b      	ldr	r3, [pc, #172]	; (80022dc <interrupt_calSensor+0x14c>)
 8002230:	88db      	ldrh	r3, [r3, #6]
 8002232:	461a      	mov	r2, r3
 8002234:	4b2a      	ldr	r3, [pc, #168]	; (80022e0 <interrupt_calSensor+0x150>)
 8002236:	88db      	ldrh	r3, [r3, #6]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	4a27      	ldr	r2, [pc, #156]	; (80022d8 <interrupt_calSensor+0x148>)
 800223c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	for (j = 0; j <= 3; j++) {
 8002240:	2300      	movs	r3, #0
 8002242:	607b      	str	r3, [r7, #4]
 8002244:	e03d      	b.n	80022c2 <interrupt_calSensor+0x132>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 8002246:	4924      	ldr	r1, [pc, #144]	; (80022d8 <interrupt_calSensor+0x148>)
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	440b      	add	r3, r1
 8002254:	6819      	ldr	r1, [r3, #0]
 8002256:	4820      	ldr	r0, [pc, #128]	; (80022d8 <interrupt_calSensor+0x148>)
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	4403      	add	r3, r0
 8002264:	332c      	adds	r3, #44	; 0x2c
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	1aca      	subs	r2, r1, r3
 800226a:	491e      	ldr	r1, [pc, #120]	; (80022e4 <interrupt_calSensor+0x154>)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 8002272:	4919      	ldr	r1, [pc, #100]	; (80022d8 <interrupt_calSensor+0x148>)
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	440b      	add	r3, r1
 8002280:	6819      	ldr	r1, [r3, #0]
 8002282:	4815      	ldr	r0, [pc, #84]	; (80022d8 <interrupt_calSensor+0x148>)
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	4403      	add	r3, r0
 8002290:	3304      	adds	r3, #4
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4419      	add	r1, r3
 8002296:	4810      	ldr	r0, [pc, #64]	; (80022d8 <interrupt_calSensor+0x148>)
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	4403      	add	r3, r0
 80022a4:	3308      	adds	r3, #8
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	440b      	add	r3, r1
 80022aa:	4a0f      	ldr	r2, [pc, #60]	; (80022e8 <interrupt_calSensor+0x158>)
 80022ac:	fb82 1203 	smull	r1, r2, r2, r3
 80022b0:	17db      	asrs	r3, r3, #31
 80022b2:	1ad2      	subs	r2, r2, r3
 80022b4:	490d      	ldr	r1, [pc, #52]	; (80022ec <interrupt_calSensor+0x15c>)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 3; j++) {
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3301      	adds	r3, #1
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	ddbe      	ble.n	8002246 <interrupt_calSensor+0xb6>
	}


//	}

}
 80022c8:	bf00      	nop
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	2000023c 	.word	0x2000023c
 80022dc:	200003b0 	.word	0x200003b0
 80022e0:	200003b8 	.word	0x200003b8
 80022e4:	2000037c 	.word	0x2000037c
 80022e8:	55555556 	.word	0x55555556
 80022ec:	2000038c 	.word	0x2000038c

080022f0 <init_WallControl>:

uint8_t g_WallControl_mode;//0で壁制御なし、1で通常の壁制御、2で斜めの制御
uint8_t g_WallControlStatus;
uint8_t StabilityCount_L,StabilityCount_R;

void init_WallControl(void){
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
	g_WallControl_mode=0;
 80022f4:	4b08      	ldr	r3, [pc, #32]	; (8002318 <init_WallControl+0x28>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]
	g_WallControlStatus=0;
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <init_WallControl+0x2c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
	StabilityCount_L=0;
 8002300:	4b07      	ldr	r3, [pc, #28]	; (8002320 <init_WallControl+0x30>)
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
	StabilityCount_R=0;
 8002306:	4b07      	ldr	r3, [pc, #28]	; (8002324 <init_WallControl+0x34>)
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	2000039c 	.word	0x2000039c
 800231c:	2000039d 	.word	0x2000039d
 8002320:	2000039e 	.word	0x2000039e
 8002324:	2000039f 	.word	0x2000039f

08002328 <calWallConrol>:

float calWallConrol(void){
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
//	SensorDistanceR = -0.0000001684 * g_sensor[2][0] * g_sensor[2][0] * g_sensor[2][0]
//				+ 0.0004061427 * g_sensor[2][0] * g_sensor[2][0] - 0.3784837856 * g_sensor[2][0]
//				+ 197.1162;


    if(g_WallControl_mode == 0){
 800232e:	4baa      	ldr	r3, [pc, #680]	; (80025d8 <calWallConrol+0x2b0>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10c      	bne.n	8002350 <calWallConrol+0x28>
    	g_WallControlStatus=0;
 8002336:	4ba9      	ldr	r3, [pc, #676]	; (80025dc <calWallConrol+0x2b4>)
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
    	StabilityCount_L=0;
 800233c:	4ba8      	ldr	r3, [pc, #672]	; (80025e0 <calWallConrol+0x2b8>)
 800233e:	2200      	movs	r2, #0
 8002340:	701a      	strb	r2, [r3, #0]
    	StabilityCount_R=0;
 8002342:	4ba8      	ldr	r3, [pc, #672]	; (80025e4 <calWallConrol+0x2bc>)
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
    	PID_wall=0;
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	607b      	str	r3, [r7, #4]
 800234e:	e15b      	b.n	8002608 <calWallConrol+0x2e0>

    }else if (g_WallControl_mode == 1) {
 8002350:	4ba1      	ldr	r3, [pc, #644]	; (80025d8 <calWallConrol+0x2b0>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b01      	cmp	r3, #1
 8002356:	f040 80db 	bne.w	8002510 <calWallConrol+0x1e8>

		// 左壁の有無の判定
		if ((g_WallControlStatus >> 0) & 1 == 1){
 800235a:	4ba0      	ldr	r3, [pc, #640]	; (80025dc <calWallConrol+0x2b4>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00e      	beq.n	8002384 <calWallConrol+0x5c>
			//前回左壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_L || g_sensor_diff[SENSOR_LEFT] > CONTROLWALLCUT_THRESHOLD_L){
 8002366:	4ba0      	ldr	r3, [pc, #640]	; (80025e8 <calWallConrol+0x2c0>)
 8002368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800236a:	2b6d      	cmp	r3, #109	; 0x6d
 800236c:	dd03      	ble.n	8002376 <calWallConrol+0x4e>
 800236e:	4b9f      	ldr	r3, [pc, #636]	; (80025ec <calWallConrol+0x2c4>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b19      	cmp	r3, #25
 8002374:	dd22      	ble.n	80023bc <calWallConrol+0x94>
				g_WallControlStatus=g_WallControlStatus - 1;
 8002376:	4b99      	ldr	r3, [pc, #612]	; (80025dc <calWallConrol+0x2b4>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	3b01      	subs	r3, #1
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4b97      	ldr	r3, [pc, #604]	; (80025dc <calWallConrol+0x2b4>)
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	e01b      	b.n	80023bc <calWallConrol+0x94>
			}
		}else{
			//前回左壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_L && g_sensor_diff[SENSOR_LEFT] < CONTROLWALLCUT_THRESHOLD_L){
 8002384:	4b98      	ldr	r3, [pc, #608]	; (80025e8 <calWallConrol+0x2c0>)
 8002386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002388:	2b6e      	cmp	r3, #110	; 0x6e
 800238a:	dd0a      	ble.n	80023a2 <calWallConrol+0x7a>
 800238c:	4b97      	ldr	r3, [pc, #604]	; (80025ec <calWallConrol+0x2c4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b18      	cmp	r3, #24
 8002392:	dc06      	bgt.n	80023a2 <calWallConrol+0x7a>
				StabilityCount_L++;
 8002394:	4b92      	ldr	r3, [pc, #584]	; (80025e0 <calWallConrol+0x2b8>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	3301      	adds	r3, #1
 800239a:	b2da      	uxtb	r2, r3
 800239c:	4b90      	ldr	r3, [pc, #576]	; (80025e0 <calWallConrol+0x2b8>)
 800239e:	701a      	strb	r2, [r3, #0]
 80023a0:	e002      	b.n	80023a8 <calWallConrol+0x80>
			}else{
				StabilityCount_L=0;
 80023a2:	4b8f      	ldr	r3, [pc, #572]	; (80025e0 <calWallConrol+0x2b8>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
			}
			if(StabilityCount_L>=10){
 80023a8:	4b8d      	ldr	r3, [pc, #564]	; (80025e0 <calWallConrol+0x2b8>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b09      	cmp	r3, #9
 80023ae:	d905      	bls.n	80023bc <calWallConrol+0x94>
				g_WallControlStatus=g_WallControlStatus + 1;
 80023b0:	4b8a      	ldr	r3, [pc, #552]	; (80025dc <calWallConrol+0x2b4>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	3301      	adds	r3, #1
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	4b88      	ldr	r3, [pc, #544]	; (80025dc <calWallConrol+0x2b4>)
 80023ba:	701a      	strb	r2, [r3, #0]
			}
		}
		// 右壁の有無の判定
		if ((g_WallControlStatus >> 1)&1 == 1){
 80023bc:	4b87      	ldr	r3, [pc, #540]	; (80025dc <calWallConrol+0x2b4>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	085b      	lsrs	r3, r3, #1
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00f      	beq.n	80023ec <calWallConrol+0xc4>
			//前回右壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_R || g_sensor_diff[SENSOR_RIGHT] > CONTROLWALLCUT_THRESHOLD_R){
 80023cc:	4b86      	ldr	r3, [pc, #536]	; (80025e8 <calWallConrol+0x2c0>)
 80023ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80023d2:	2b6d      	cmp	r3, #109	; 0x6d
 80023d4:	dd03      	ble.n	80023de <calWallConrol+0xb6>
 80023d6:	4b85      	ldr	r3, [pc, #532]	; (80025ec <calWallConrol+0x2c4>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b19      	cmp	r3, #25
 80023dc:	dd23      	ble.n	8002426 <calWallConrol+0xfe>
				g_WallControlStatus=g_WallControlStatus - 2;
 80023de:	4b7f      	ldr	r3, [pc, #508]	; (80025dc <calWallConrol+0x2b4>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	3b02      	subs	r3, #2
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4b7d      	ldr	r3, [pc, #500]	; (80025dc <calWallConrol+0x2b4>)
 80023e8:	701a      	strb	r2, [r3, #0]
 80023ea:	e01c      	b.n	8002426 <calWallConrol+0xfe>
			}
		}else{
			//前回右壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_R && g_sensor_diff[SENSOR_RIGHT] < CONTROLWALLCUT_THRESHOLD_R){
 80023ec:	4b7e      	ldr	r3, [pc, #504]	; (80025e8 <calWallConrol+0x2c0>)
 80023ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80023f2:	2b6e      	cmp	r3, #110	; 0x6e
 80023f4:	dd0a      	ble.n	800240c <calWallConrol+0xe4>
 80023f6:	4b7d      	ldr	r3, [pc, #500]	; (80025ec <calWallConrol+0x2c4>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b18      	cmp	r3, #24
 80023fc:	dc06      	bgt.n	800240c <calWallConrol+0xe4>
				StabilityCount_R++;
 80023fe:	4b79      	ldr	r3, [pc, #484]	; (80025e4 <calWallConrol+0x2bc>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	3301      	adds	r3, #1
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4b77      	ldr	r3, [pc, #476]	; (80025e4 <calWallConrol+0x2bc>)
 8002408:	701a      	strb	r2, [r3, #0]
 800240a:	e002      	b.n	8002412 <calWallConrol+0xea>
			}else{
				StabilityCount_R=0;
 800240c:	4b75      	ldr	r3, [pc, #468]	; (80025e4 <calWallConrol+0x2bc>)
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
			}
			if(StabilityCount_R>=10){
 8002412:	4b74      	ldr	r3, [pc, #464]	; (80025e4 <calWallConrol+0x2bc>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b09      	cmp	r3, #9
 8002418:	d905      	bls.n	8002426 <calWallConrol+0xfe>
				g_WallControlStatus=g_WallControlStatus + 2;
 800241a:	4b70      	ldr	r3, [pc, #448]	; (80025dc <calWallConrol+0x2b4>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	3302      	adds	r3, #2
 8002420:	b2da      	uxtb	r2, r3
 8002422:	4b6e      	ldr	r3, [pc, #440]	; (80025dc <calWallConrol+0x2b4>)
 8002424:	701a      	strb	r2, [r3, #0]
			}
		}
		switch (g_WallControlStatus){
 8002426:	4b6d      	ldr	r3, [pc, #436]	; (80025dc <calWallConrol+0x2b4>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b03      	cmp	r3, #3
 800242c:	f200 80ec 	bhi.w	8002608 <calWallConrol+0x2e0>
 8002430:	a201      	add	r2, pc, #4	; (adr r2, 8002438 <calWallConrol+0x110>)
 8002432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002436:	bf00      	nop
 8002438:	08002449 	.word	0x08002449
 800243c:	08002451 	.word	0x08002451
 8002440:	08002489 	.word	0x08002489
 8002444:	080024c7 	.word	0x080024c7
		case 0://両壁なし
			PID_wall= 0;
 8002448:	f04f 0300 	mov.w	r3, #0
 800244c:	607b      	str	r3, [r7, #4]
		break;
 800244e:	e0db      	b.n	8002608 <calWallConrol+0x2e0>
		case 1://左壁のみ
			PID_wall= SENSOR_GAIN*(2*(float)(g_sensor[SENSOR_LEFT][0] - CENTER_L));
 8002450:	4b65      	ldr	r3, [pc, #404]	; (80025e8 <calWallConrol+0x2c0>)
 8002452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002454:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8002458:	ee07 3a90 	vmov	s15, r3
 800245c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002460:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002464:	ee17 0a90 	vmov	r0, s15
 8002468:	f7fe f86e 	bl	8000548 <__aeabi_f2d>
 800246c:	a356      	add	r3, pc, #344	; (adr r3, 80025c8 <calWallConrol+0x2a0>)
 800246e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002472:	f7fe f8c1 	bl	80005f8 <__aeabi_dmul>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4610      	mov	r0, r2
 800247c:	4619      	mov	r1, r3
 800247e:	f7fe fbb3 	bl	8000be8 <__aeabi_d2f>
 8002482:	4603      	mov	r3, r0
 8002484:	607b      	str	r3, [r7, #4]
		break;
 8002486:	e0bf      	b.n	8002608 <calWallConrol+0x2e0>
		case 2://右壁のみ
			PID_wall= SENSOR_GAIN * (-2 * (float)(g_sensor[SENSOR_RIGHT][0] - CENTER_R));
 8002488:	4b57      	ldr	r3, [pc, #348]	; (80025e8 <calWallConrol+0x2c0>)
 800248a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800248e:	f2a3 1347 	subw	r3, r3, #327	; 0x147
 8002492:	ee07 3a90 	vmov	s15, r3
 8002496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800249a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800249e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024a2:	ee17 0a90 	vmov	r0, s15
 80024a6:	f7fe f84f 	bl	8000548 <__aeabi_f2d>
 80024aa:	a347      	add	r3, pc, #284	; (adr r3, 80025c8 <calWallConrol+0x2a0>)
 80024ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b0:	f7fe f8a2 	bl	80005f8 <__aeabi_dmul>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	f7fe fb94 	bl	8000be8 <__aeabi_d2f>
 80024c0:	4603      	mov	r3, r0
 80024c2:	607b      	str	r3, [r7, #4]
		break;
 80024c4:	e0a0      	b.n	8002608 <calWallConrol+0x2e0>
		case 3://両壁あり
			PID_wall= SENSOR_GAIN * ((float)(g_sensor[SENSOR_LEFT][0] - CENTER_L)-(float)(g_sensor[SENSOR_RIGHT][0] - CENTER_R));
 80024c6:	4b48      	ldr	r3, [pc, #288]	; (80025e8 <calWallConrol+0x2c0>)
 80024c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ca:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80024ce:	ee07 3a90 	vmov	s15, r3
 80024d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024d6:	4b44      	ldr	r3, [pc, #272]	; (80025e8 <calWallConrol+0x2c0>)
 80024d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80024dc:	f2a3 1347 	subw	r3, r3, #327	; 0x147
 80024e0:	ee07 3a90 	vmov	s15, r3
 80024e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ec:	ee17 0a90 	vmov	r0, s15
 80024f0:	f7fe f82a 	bl	8000548 <__aeabi_f2d>
 80024f4:	a334      	add	r3, pc, #208	; (adr r3, 80025c8 <calWallConrol+0x2a0>)
 80024f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fa:	f7fe f87d 	bl	80005f8 <__aeabi_dmul>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	f7fe fb6f 	bl	8000be8 <__aeabi_d2f>
 800250a:	4603      	mov	r3, r0
 800250c:	607b      	str	r3, [r7, #4]
		break;
 800250e:	e07b      	b.n	8002608 <calWallConrol+0x2e0>
		}


	}else if (g_WallControl_mode == 2) {
 8002510:	4b31      	ldr	r3, [pc, #196]	; (80025d8 <calWallConrol+0x2b0>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d177      	bne.n	8002608 <calWallConrol+0x2e0>
// 斜めの制御
		if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_FRONT_L && g_sensor[SENSOR_FRONT_RIGHT][0] > CONTROLWALL_THRESHOLD_FRONT_R){
 8002518:	4b33      	ldr	r3, [pc, #204]	; (80025e8 <calWallConrol+0x2c0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b64      	cmp	r3, #100	; 0x64
 800251e:	dd08      	ble.n	8002532 <calWallConrol+0x20a>
 8002520:	4b31      	ldr	r3, [pc, #196]	; (80025e8 <calWallConrol+0x2c0>)
 8002522:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002526:	2b96      	cmp	r3, #150	; 0x96
 8002528:	dd03      	ble.n	8002532 <calWallConrol+0x20a>
			PID_wall= 0;
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	607b      	str	r3, [r7, #4]
 8002530:	e06a      	b.n	8002608 <calWallConrol+0x2e0>
		}
		else if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_FRONT_L && g_sensor[SENSOR_FRONT_RIGHT][0] <= CONTROLWALL_THRESHOLD_FRONT_R){
 8002532:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <calWallConrol+0x2c0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b64      	cmp	r3, #100	; 0x64
 8002538:	dd1d      	ble.n	8002576 <calWallConrol+0x24e>
 800253a:	4b2b      	ldr	r3, [pc, #172]	; (80025e8 <calWallConrol+0x2c0>)
 800253c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002540:	2b96      	cmp	r3, #150	; 0x96
 8002542:	dc18      	bgt.n	8002576 <calWallConrol+0x24e>
			PID_wall= SENSOR_GAIN_SLANT*((float)(g_sensor[SENSOR_FRONT_LEFT][0] - CONTROLWALL_THRESHOLD_FRONT_L));
 8002544:	4b28      	ldr	r3, [pc, #160]	; (80025e8 <calWallConrol+0x2c0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	3b64      	subs	r3, #100	; 0x64
 800254a:	ee07 3a90 	vmov	s15, r3
 800254e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002552:	ee17 0a90 	vmov	r0, s15
 8002556:	f7fd fff7 	bl	8000548 <__aeabi_f2d>
 800255a:	a31d      	add	r3, pc, #116	; (adr r3, 80025d0 <calWallConrol+0x2a8>)
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002560:	f7fe f84a 	bl	80005f8 <__aeabi_dmul>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4610      	mov	r0, r2
 800256a:	4619      	mov	r1, r3
 800256c:	f7fe fb3c 	bl	8000be8 <__aeabi_d2f>
 8002570:	4603      	mov	r3, r0
 8002572:	607b      	str	r3, [r7, #4]
 8002574:	e048      	b.n	8002608 <calWallConrol+0x2e0>
		}
		else if (g_sensor[SENSOR_FRONT_LEFT][0] <= CONTROLWALL_THRESHOLD_FRONT_L && g_sensor[SENSOR_FRONT_RIGHT][0] > CONTROLWALL_THRESHOLD_FRONT_R){
 8002576:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <calWallConrol+0x2c0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2b64      	cmp	r3, #100	; 0x64
 800257c:	dc38      	bgt.n	80025f0 <calWallConrol+0x2c8>
 800257e:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <calWallConrol+0x2c0>)
 8002580:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002584:	2b96      	cmp	r3, #150	; 0x96
 8002586:	dd33      	ble.n	80025f0 <calWallConrol+0x2c8>
			PID_wall= SENSOR_GAIN_SLANT*(-(float)(g_sensor[SENSOR_FRONT_RIGHT][0] - CONTROLWALL_THRESHOLD_FRONT_R));
 8002588:	4b17      	ldr	r3, [pc, #92]	; (80025e8 <calWallConrol+0x2c0>)
 800258a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800258e:	3b96      	subs	r3, #150	; 0x96
 8002590:	ee07 3a90 	vmov	s15, r3
 8002594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002598:	eef1 7a67 	vneg.f32	s15, s15
 800259c:	ee17 3a90 	vmov	r3, s15
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fd ffd1 	bl	8000548 <__aeabi_f2d>
 80025a6:	a30a      	add	r3, pc, #40	; (adr r3, 80025d0 <calWallConrol+0x2a8>)
 80025a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ac:	f7fe f824 	bl	80005f8 <__aeabi_dmul>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4610      	mov	r0, r2
 80025b6:	4619      	mov	r1, r3
 80025b8:	f7fe fb16 	bl	8000be8 <__aeabi_d2f>
 80025bc:	4603      	mov	r3, r0
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	e022      	b.n	8002608 <calWallConrol+0x2e0>
 80025c2:	bf00      	nop
 80025c4:	f3af 8000 	nop.w
 80025c8:	70a3d70a 	.word	0x70a3d70a
 80025cc:	3fb70a3d 	.word	0x3fb70a3d
 80025d0:	47ae147b 	.word	0x47ae147b
 80025d4:	3f847ae1 	.word	0x3f847ae1
 80025d8:	2000039c 	.word	0x2000039c
 80025dc:	2000039d 	.word	0x2000039d
 80025e0:	2000039e 	.word	0x2000039e
 80025e4:	2000039f 	.word	0x2000039f
 80025e8:	2000023c 	.word	0x2000023c
 80025ec:	2000037c 	.word	0x2000037c
		}
		else if (g_sensor[SENSOR_FRONT_LEFT][0] <= CONTROLWALL_THRESHOLD_FRONT_L && g_sensor[SENSOR_FRONT_RIGHT][0] <= CONTROLWALL_THRESHOLD_FRONT_R){
 80025f0:	4b09      	ldr	r3, [pc, #36]	; (8002618 <calWallConrol+0x2f0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b64      	cmp	r3, #100	; 0x64
 80025f6:	dc07      	bgt.n	8002608 <calWallConrol+0x2e0>
 80025f8:	4b07      	ldr	r3, [pc, #28]	; (8002618 <calWallConrol+0x2f0>)
 80025fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025fe:	2b96      	cmp	r3, #150	; 0x96
 8002600:	dc02      	bgt.n	8002608 <calWallConrol+0x2e0>
			PID_wall= 0;
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	607b      	str	r3, [r7, #4]
		}

	}

	return PID_wall;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	ee07 3a90 	vmov	s15, r3
}
 800260e:	eeb0 0a67 	vmov.f32	s0, s15
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	2000023c 	.word	0x2000023c

0800261c <lcd_cmd>:
#include "PL_lcd.h"
#include "i2c.h"


void lcd_cmd(uint8_t x)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af02      	add	r7, sp, #8
 8002622:	4603      	mov	r3, r0
 8002624:	71fb      	strb	r3, [r7, #7]
  uint8_t aTxBuffer[2] = { 0x00, x };
 8002626:	2300      	movs	r3, #0
 8002628:	733b      	strb	r3, [r7, #12]
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 800262e:	e007      	b.n	8002640 <lcd_cmd+0x24>
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8002630:	480c      	ldr	r0, [pc, #48]	; (8002664 <lcd_cmd+0x48>)
 8002632:	f00c fa07 	bl	800ea44 <HAL_I2C_GetError>
 8002636:	4603      	mov	r3, r0
 8002638:	2b04      	cmp	r3, #4
 800263a:	d001      	beq.n	8002640 <lcd_cmd+0x24>
    {
      Error_Handler();
 800263c:	f001 fed7 	bl	80043ee <Error_Handler>
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 8002640:	f107 020c 	add.w	r2, r7, #12
 8002644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	2302      	movs	r3, #2
 800264c:	217c      	movs	r1, #124	; 0x7c
 800264e:	4805      	ldr	r0, [pc, #20]	; (8002664 <lcd_cmd+0x48>)
 8002650:	f00c f904 	bl	800e85c <HAL_I2C_Master_Transmit>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1ea      	bne.n	8002630 <lcd_cmd+0x14>
    }
  }
}
 800265a:	bf00      	nop
 800265c:	bf00      	nop
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000a04 	.word	0x20000a04

08002668 <lcd_data>:

void lcd_data(uint8_t x)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af02      	add	r7, sp, #8
 800266e:	4603      	mov	r3, r0
 8002670:	71fb      	strb	r3, [r7, #7]
  uint8_t aTxBuffer[2] = { 0x40, x };
 8002672:	2340      	movs	r3, #64	; 0x40
 8002674:	733b      	strb	r3, [r7, #12]
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 800267a:	e007      	b.n	800268c <lcd_data+0x24>
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800267c:	480c      	ldr	r0, [pc, #48]	; (80026b0 <lcd_data+0x48>)
 800267e:	f00c f9e1 	bl	800ea44 <HAL_I2C_GetError>
 8002682:	4603      	mov	r3, r0
 8002684:	2b04      	cmp	r3, #4
 8002686:	d001      	beq.n	800268c <lcd_data+0x24>
    {
      Error_Handler();
 8002688:	f001 feb1 	bl	80043ee <Error_Handler>
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 800268c:	f107 020c 	add.w	r2, r7, #12
 8002690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	2302      	movs	r3, #2
 8002698:	217c      	movs	r1, #124	; 0x7c
 800269a:	4805      	ldr	r0, [pc, #20]	; (80026b0 <lcd_data+0x48>)
 800269c:	f00c f8de 	bl	800e85c <HAL_I2C_Master_Transmit>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1ea      	bne.n	800267c <lcd_data+0x14>
    }
  }
}
 80026a6:	bf00      	nop
 80026a8:	bf00      	nop
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20000a04 	.word	0x20000a04

080026b4 <pl_lcd_puts>:

void pl_lcd_puts(const char *s)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  while(*s) {
 80026bc:	e006      	b.n	80026cc <pl_lcd_puts+0x18>
	  lcd_data(*s++);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ffce 	bl	8002668 <lcd_data>
  while(*s) {
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1f4      	bne.n	80026be <pl_lcd_puts+0xa>
  }
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <pl_lcd_init>:

// param:
//  contrast: 0 ~ 63 (最初は大きくして調整)
void pl_lcd_init(void)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	af00      	add	r7, sp, #0
  // LCD initialize(裏面に記載)
  lcd_cmd(0x38); // function set
 80026e2:	2038      	movs	r0, #56	; 0x38
 80026e4:	f7ff ff9a 	bl	800261c <lcd_cmd>
  lcd_cmd(0x39); // function set
 80026e8:	2039      	movs	r0, #57	; 0x39
 80026ea:	f7ff ff97 	bl	800261c <lcd_cmd>
  lcd_cmd(0x14); // interval osc
 80026ee:	2014      	movs	r0, #20
 80026f0:	f7ff ff94 	bl	800261c <lcd_cmd>
  lcd_cmd(0x70); // contrast low
 80026f4:	2070      	movs	r0, #112	; 0x70
 80026f6:	f7ff ff91 	bl	800261c <lcd_cmd>
  lcd_cmd(0x56); // contrast high / icon / power
 80026fa:	2056      	movs	r0, #86	; 0x56
 80026fc:	f7ff ff8e 	bl	800261c <lcd_cmd>
  lcd_cmd(0x6c); // follower control
 8002700:	206c      	movs	r0, #108	; 0x6c
 8002702:	f7ff ff8b 	bl	800261c <lcd_cmd>
  HAL_Delay(300);
 8002706:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800270a:	f009 ff95 	bl	800c638 <HAL_Delay>
  lcd_cmd(0x38); // function set
 800270e:	2038      	movs	r0, #56	; 0x38
 8002710:	f7ff ff84 	bl	800261c <lcd_cmd>
  lcd_cmd(0x0c); // display on
 8002714:	200c      	movs	r0, #12
 8002716:	f7ff ff81 	bl	800261c <lcd_cmd>
  lcd_cmd(0x01); // clear display
 800271a:	2001      	movs	r0, #1
 800271c:	f7ff ff7e 	bl	800261c <lcd_cmd>
  HAL_Delay(2);
 8002720:	2002      	movs	r0, #2
 8002722:	f009 ff89 	bl	800c638 <HAL_Delay>
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}

0800272a <pl_lcd_pos>:

void pl_lcd_move(uint8_t pos){
  lcd_cmd(0x80 | pos);
}

void pl_lcd_pos(uint8_t raw, uint8_t col) {
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	4603      	mov	r3, r0
 8002732:	460a      	mov	r2, r1
 8002734:	71fb      	strb	r3, [r7, #7]
 8002736:	4613      	mov	r3, r2
 8002738:	71bb      	strb	r3, [r7, #6]
  lcd_cmd(0x80 | (raw << 6) | col);
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	019b      	lsls	r3, r3, #6
 800273e:	b2da      	uxtb	r2, r3
 8002740:	79bb      	ldrb	r3, [r7, #6]
 8002742:	4313      	orrs	r3, r2
 8002744:	b2db      	uxtb	r3, r3
 8002746:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800274a:	b2db      	uxtb	r3, r3
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff65 	bl	800261c <lcd_cmd>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <pl_lcd_clear>:

void pl_lcd_clear() {
 800275a:	b580      	push	{r7, lr}
 800275c:	af00      	add	r7, sp, #0
  lcd_cmd(0x01);
 800275e:	2001      	movs	r0, #1
 8002760:	f7ff ff5c 	bl	800261c <lcd_cmd>
  HAL_Delay(2);
 8002764:	2002      	movs	r0, #2
 8002766:	f009 ff67 	bl	800c638 <HAL_Delay>
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <write_LED>:


#include "PL_led.h"
#include "gpio.h"

void write_LED(char pin){
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(INTERFACELED_GPIO_Port,INTERFACELED_Pin,pin);
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	461a      	mov	r2, r3
 800277e:	2108      	movs	r1, #8
 8002780:	4803      	ldr	r0, [pc, #12]	; (8002790 <write_LED+0x20>)
 8002782:	f00b ffc3 	bl	800e70c <HAL_GPIO_WritePin>

}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	48000400 	.word	0x48000400

08002794 <pl_motor_init>:
/*	モータの初期化					(pl_speaker_init)	*/
/*******************************************************************/
/*	モータの初期化する。						*/
/*******************************************************************/
void pl_motor_init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0

	  HAL_TIM_Base_Start_IT(&htim1);//motor
 8002798:	480a      	ldr	r0, [pc, #40]	; (80027c4 <pl_motor_init+0x30>)
 800279a:	f00d fd35 	bl	8010208 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim1);//motor
 800279e:	4809      	ldr	r0, [pc, #36]	; (80027c4 <pl_motor_init+0x30>)
 80027a0:	f008 ff48 	bl	800b634 <HAL_TIM_PWM_MspInit>

	  HAL_TIM_Base_Start_IT(&htim2);//motor
 80027a4:	4808      	ldr	r0, [pc, #32]	; (80027c8 <pl_motor_init+0x34>)
 80027a6:	f00d fd2f 	bl	8010208 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim2);//motor
 80027aa:	4807      	ldr	r0, [pc, #28]	; (80027c8 <pl_motor_init+0x34>)
 80027ac:	f008 ff42 	bl	800b634 <HAL_TIM_PWM_MspInit>

	  pl_motor_mode_L(1);
 80027b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80027b4:	f000 f836 	bl	8002824 <pl_motor_mode_L>
	  pl_motor_mode_R(1);
 80027b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80027bc:	f000 f852 	bl	8002864 <pl_motor_mode_R>



}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	2000cdfc 	.word	0x2000cdfc
 80027c8:	2000ce48 	.word	0x2000ce48

080027cc <pl_motor_standby>:

void pl_motor_standby(int pin){
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MOTOR_ENABLE_GPIO_Port, MOTOR_ENABLE_Pin, pin);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e2:	f00b ff93 	bl	800e70c <HAL_GPIO_WritePin>
	pl_motor_mode_L(1);
 80027e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80027ea:	f000 f81b 	bl	8002824 <pl_motor_mode_L>
	pl_motor_mode_R(1);
 80027ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80027f2:	f000 f837 	bl	8002864 <pl_motor_mode_R>
	HAL_GPIO_WritePin(MD_RESET_GPIO_Port,MD_RESET_Pin,GPIO_PIN_SET);
 80027f6:	2201      	movs	r2, #1
 80027f8:	2120      	movs	r1, #32
 80027fa:	4809      	ldr	r0, [pc, #36]	; (8002820 <pl_motor_standby+0x54>)
 80027fc:	f00b ff86 	bl	800e70c <HAL_GPIO_WritePin>
	HAL_Delay(3);
 8002800:	2003      	movs	r0, #3
 8002802:	f009 ff19 	bl	800c638 <HAL_Delay>
	HAL_GPIO_WritePin(MD_RESET_GPIO_Port,MD_RESET_Pin,GPIO_PIN_RESET);
 8002806:	2200      	movs	r2, #0
 8002808:	2120      	movs	r1, #32
 800280a:	4805      	ldr	r0, [pc, #20]	; (8002820 <pl_motor_standby+0x54>)
 800280c:	f00b ff7e 	bl	800e70c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002810:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002814:	f009 ff10 	bl	800c638 <HAL_Delay>
}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	48000400 	.word	0x48000400

08002824 <pl_motor_mode_L>:

void pl_motor_mode_L(float velocity_l){
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (velocity_l>=0){
 800282e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002832:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800283a:	db07      	blt.n	800284c <pl_motor_mode_L+0x28>
		HAL_GPIO_WritePin(MOTOR_CW_CCW_L_GPIO_Port,MOTOR_CW_CCW_L_Pin,L_MOTOR_FRONT);
 800283c:	2200      	movs	r2, #0
 800283e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002846:	f00b ff61 	bl	800e70c <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(MOTOR_CW_CCW_L_GPIO_Port,MOTOR_CW_CCW_L_Pin,L_MOTOR_BACK);
	}
}
 800284a:	e006      	b.n	800285a <pl_motor_mode_L+0x36>
		HAL_GPIO_WritePin(MOTOR_CW_CCW_L_GPIO_Port,MOTOR_CW_CCW_L_Pin,L_MOTOR_BACK);
 800284c:	2201      	movs	r2, #1
 800284e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002856:	f00b ff59 	bl	800e70c <HAL_GPIO_WritePin>
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <pl_motor_mode_R>:

void pl_motor_mode_R(float velocity_r){
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (velocity_r>=0){
 800286e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002872:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287a:	db05      	blt.n	8002888 <pl_motor_mode_R+0x24>
		HAL_GPIO_WritePin(MOTOR_CW_CCW_R_GPIO_Port,MOTOR_CW_CCW_R_Pin,R_MOTOR_FRONT);
 800287c:	2201      	movs	r2, #1
 800287e:	2110      	movs	r1, #16
 8002880:	4806      	ldr	r0, [pc, #24]	; (800289c <pl_motor_mode_R+0x38>)
 8002882:	f00b ff43 	bl	800e70c <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(MOTOR_CW_CCW_R_GPIO_Port,MOTOR_CW_CCW_R_Pin,R_MOTOR_BACK);
	}
}
 8002886:	e004      	b.n	8002892 <pl_motor_mode_R+0x2e>
		HAL_GPIO_WritePin(MOTOR_CW_CCW_R_GPIO_Port,MOTOR_CW_CCW_R_Pin,R_MOTOR_BACK);
 8002888:	2200      	movs	r2, #0
 800288a:	2110      	movs	r1, #16
 800288c:	4803      	ldr	r0, [pc, #12]	; (800289c <pl_motor_mode_R+0x38>)
 800288e:	f00b ff3d 	bl	800e70c <HAL_GPIO_WritePin>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	48000400 	.word	0x48000400

080028a0 <pl_motor_start>:

void pl_motor_start(void){
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
	pl_interrupt_motor_count_L();
 80028a4:	f000 f848 	bl	8002938 <pl_interrupt_motor_count_L>
	pl_interrupt_motor_count_R();
 80028a8:	f000 f872 	bl	8002990 <pl_interrupt_motor_count_R>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80028ac:	2100      	movs	r1, #0
 80028ae:	4804      	ldr	r0, [pc, #16]	; (80028c0 <pl_motor_start+0x20>)
 80028b0:	f00d fd56 	bl	8010360 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80028b4:	2104      	movs	r1, #4
 80028b6:	4803      	ldr	r0, [pc, #12]	; (80028c4 <pl_motor_start+0x24>)
 80028b8:	f00d fd52 	bl	8010360 <HAL_TIM_PWM_Start>
}
 80028bc:	bf00      	nop
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	2000cdfc 	.word	0x2000cdfc
 80028c4:	2000ce48 	.word	0x2000ce48

080028c8 <pl_motor_stop>:

void pl_motor_stop(void){
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80028cc:	2100      	movs	r1, #0
 80028ce:	4804      	ldr	r0, [pc, #16]	; (80028e0 <pl_motor_stop+0x18>)
 80028d0:	f00d fe24 	bl	801051c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80028d4:	2104      	movs	r1, #4
 80028d6:	4803      	ldr	r0, [pc, #12]	; (80028e4 <pl_motor_stop+0x1c>)
 80028d8:	f00d fe20 	bl	801051c <HAL_TIM_PWM_Stop>
}
 80028dc:	bf00      	nop
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	2000cdfc 	.word	0x2000cdfc
 80028e4:	2000ce48 	.word	0x2000ce48

080028e8 <pl_motor_count_L>:

void pl_motor_count_L(float velocity_l){
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	ed87 0a01 	vstr	s0, [r7, #4]
//	uint16_t motorCount_l;
	g_motorCount_l = calMotorVelocityCount(velocity_l);
 80028f2:	ed97 0a01 	vldr	s0, [r7, #4]
 80028f6:	f000 f877 	bl	80029e8 <calMotorVelocityCount>
 80028fa:	4603      	mov	r3, r0
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b03      	ldr	r3, [pc, #12]	; (800290c <pl_motor_count_L+0x24>)
 8002900:	801a      	strh	r2, [r3, #0]
//	__HAL_TIM_SET_AUTORELOAD(&htim1, g_motorCount_l);
//	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,(uint16_t)((float)(g_motorCount_l)/2));
//	__HAL_TIM_SET_COUNTER(&htim1, 0);
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	200003a0 	.word	0x200003a0

08002910 <pl_motor_count_R>:

void pl_motor_count_R(float velocity_r){
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	ed87 0a01 	vstr	s0, [r7, #4]
//	uint16_t motorCount_r;
	g_motorCount_r = calMotorVelocityCount(velocity_r);
 800291a:	ed97 0a01 	vldr	s0, [r7, #4]
 800291e:	f000 f863 	bl	80029e8 <calMotorVelocityCount>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	4b03      	ldr	r3, [pc, #12]	; (8002934 <pl_motor_count_R+0x24>)
 8002928:	801a      	strh	r2, [r3, #0]
//	__HAL_TIM_SET_AUTORELOAD(&htim2, g_motorCount_r);
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,(uint16_t)((float)(g_motorCount_r)/2));
//	__HAL_TIM_SET_COUNTER(&htim2, 0);

}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	200003a2 	.word	0x200003a2

08002938 <pl_interrupt_motor_count_L>:

void pl_interrupt_motor_count_L(void){
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim1, g_motorCount_l);
 800293c:	4b12      	ldr	r3, [pc, #72]	; (8002988 <pl_interrupt_motor_count_L+0x50>)
 800293e:	881a      	ldrh	r2, [r3, #0]
 8002940:	4b12      	ldr	r3, [pc, #72]	; (800298c <pl_interrupt_motor_count_L+0x54>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	62da      	str	r2, [r3, #44]	; 0x2c
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <pl_interrupt_motor_count_L+0x50>)
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	4b0f      	ldr	r3, [pc, #60]	; (800298c <pl_interrupt_motor_count_L+0x54>)
 800294e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,(uint16_t)((float)(g_motorCount_l)/2));
 8002950:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <pl_interrupt_motor_count_L+0x50>)
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	ee07 3a90 	vmov	s15, r3
 8002958:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800295c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002960:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002968:	ee17 3a90 	vmov	r3, s15
 800296c:	b29a      	uxth	r2, r3
 800296e:	4b07      	ldr	r3, [pc, #28]	; (800298c <pl_interrupt_motor_count_L+0x54>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002974:	4b05      	ldr	r3, [pc, #20]	; (800298c <pl_interrupt_motor_count_L+0x54>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2200      	movs	r2, #0
 800297a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	200003a0 	.word	0x200003a0
 800298c:	2000cdfc 	.word	0x2000cdfc

08002990 <pl_interrupt_motor_count_R>:

void pl_interrupt_motor_count_R(void){
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim2, g_motorCount_r);
 8002994:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <pl_interrupt_motor_count_R+0x50>)
 8002996:	881a      	ldrh	r2, [r3, #0]
 8002998:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <pl_interrupt_motor_count_R+0x54>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	62da      	str	r2, [r3, #44]	; 0x2c
 800299e:	4b10      	ldr	r3, [pc, #64]	; (80029e0 <pl_interrupt_motor_count_R+0x50>)
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <pl_interrupt_motor_count_R+0x54>)
 80029a6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,(uint16_t)((float)(g_motorCount_r)/2));
 80029a8:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <pl_interrupt_motor_count_R+0x50>)
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	ee07 3a90 	vmov	s15, r3
 80029b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029b4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80029b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029c0:	ee17 3a90 	vmov	r3, s15
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <pl_interrupt_motor_count_R+0x54>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <pl_interrupt_motor_count_R+0x54>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2200      	movs	r2, #0
 80029d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	200003a2 	.word	0x200003a2
 80029e4:	2000ce48 	.word	0x2000ce48

080029e8 <calMotorVelocityCount>:
/*******************************************************************/
/*	速度からcycleCountへの変換					(calFrequencyCount)	*/
/*******************************************************************/
/*	速度からPWMに送るcycleCountを計算する．。						*/
/*******************************************************************/
uint16_t calMotorVelocityCount(float Velocity) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	ed87 0a01 	vstr	s0, [r7, #4]
	float f_MotorCount;
	uint16_t MotorCount;

	f_MotorCount=(10000000 * STEP_DEGREE * M_PI / 180 * TIRE_DIAMETER / 2 / fabs(Velocity));
 80029f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80029f6:	eef0 7ae7 	vabs.f32	s15, s15
 80029fa:	ee17 0a90 	vmov	r0, s15
 80029fe:	f7fd fda3 	bl	8000548 <__aeabi_f2d>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	a11d      	add	r1, pc, #116	; (adr r1, 8002a7c <calMotorVelocityCount+0x94>)
 8002a08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a0c:	f7fd ff1e 	bl	800084c <__aeabi_ddiv>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4610      	mov	r0, r2
 8002a16:	4619      	mov	r1, r3
 8002a18:	f7fe f8e6 	bl	8000be8 <__aeabi_d2f>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	60bb      	str	r3, [r7, #8]
	if (Velocity == 0 || f_MotorCount > 65535 || f_MotorCount < 0) {
 8002a20:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a24:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2c:	d00f      	beq.n	8002a4e <calMotorVelocityCount+0x66>
 8002a2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a32:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002a78 <calMotorVelocityCount+0x90>
 8002a36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3e:	dc06      	bgt.n	8002a4e <calMotorVelocityCount+0x66>
 8002a40:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a4c:	d503      	bpl.n	8002a56 <calMotorVelocityCount+0x6e>
		MotorCount = 30535 - 1;
 8002a4e:	f247 7346 	movw	r3, #30534	; 0x7746
 8002a52:	81fb      	strh	r3, [r7, #14]
 8002a54:	e008      	b.n	8002a68 <calMotorVelocityCount+0x80>
	} else {
		MotorCount = (uint16_t) (f_MotorCount)-1;
 8002a56:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a5e:	ee17 3a90 	vmov	r3, s15
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	81fb      	strh	r3, [r7, #14]
	}

	return MotorCount;
 8002a68:	89fb      	ldrh	r3, [r7, #14]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	f3af 8000 	nop.w
 8002a78:	477fff00 	.word	0x477fff00
 8002a7c:	536aad35 	.word	0x536aad35
 8002a80:	414e7ff6 	.word	0x414e7ff6
 8002a84:	00000000 	.word	0x00000000

08002a88 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 8002a8e:	4828      	ldr	r0, [pc, #160]	; (8002b30 <pl_getbatt+0xa8>)
 8002a90:	f00a f954 	bl	800cd3c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 8002a94:	2132      	movs	r1, #50	; 0x32
 8002a96:	4826      	ldr	r0, [pc, #152]	; (8002b30 <pl_getbatt+0xa8>)
 8002a98:	f00a f9e6 	bl	800ce68 <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 8002a9c:	4824      	ldr	r0, [pc, #144]	; (8002b30 <pl_getbatt+0xa8>)
 8002a9e:	f00a fb58 	bl	800d152 <HAL_ADC_GetValue>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 8002aa6:	4822      	ldr	r0, [pc, #136]	; (8002b30 <pl_getbatt+0xa8>)
 8002aa8:	f00a f9ab 	bl	800ce02 <HAL_ADC_Stop>
	batt = 3.3  * (float) battAD / 1023.0 * (100.0 + 22.0) / 22.0;
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	ee07 3a90 	vmov	s15, r3
 8002ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab6:	ee17 0a90 	vmov	r0, s15
 8002aba:	f7fd fd45 	bl	8000548 <__aeabi_f2d>
 8002abe:	a318      	add	r3, pc, #96	; (adr r3, 8002b20 <pl_getbatt+0x98>)
 8002ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac4:	f7fd fd98 	bl	80005f8 <__aeabi_dmul>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4610      	mov	r0, r2
 8002ace:	4619      	mov	r1, r3
 8002ad0:	a315      	add	r3, pc, #84	; (adr r3, 8002b28 <pl_getbatt+0xa0>)
 8002ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad6:	f7fd feb9 	bl	800084c <__aeabi_ddiv>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4610      	mov	r0, r2
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <pl_getbatt+0xac>)
 8002ae8:	f7fd fd86 	bl	80005f8 <__aeabi_dmul>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4610      	mov	r0, r2
 8002af2:	4619      	mov	r1, r3
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <pl_getbatt+0xb0>)
 8002afa:	f7fd fea7 	bl	800084c <__aeabi_ddiv>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4610      	mov	r0, r2
 8002b04:	4619      	mov	r1, r3
 8002b06:	f7fe f86f 	bl	8000be8 <__aeabi_d2f>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	603b      	str	r3, [r7, #0]


return batt;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	ee07 3a90 	vmov	s15, r3
}
 8002b14:	eeb0 0a67 	vmov.f32	s0, s15
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	66666666 	.word	0x66666666
 8002b24:	400a6666 	.word	0x400a6666
 8002b28:	00000000 	.word	0x00000000
 8002b2c:	408ff800 	.word	0x408ff800
 8002b30:	20000958 	.word	0x20000958
 8002b34:	405e8000 	.word	0x405e8000
 8002b38:	40360000 	.word	0x40360000
 8002b3c:	00000000 	.word	0x00000000

08002b40 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 8002b46:	4862      	ldr	r0, [pc, #392]	; (8002cd0 <pl_callback_getSensor+0x190>)
 8002b48:	f00a faa2 	bl	800d090 <HAL_ADC_Stop_DMA>
	switch (AD_step) {
 8002b4c:	4b61      	ldr	r3, [pc, #388]	; (8002cd4 <pl_callback_getSensor+0x194>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d042      	beq.n	8002bda <pl_callback_getSensor+0x9a>
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	dc66      	bgt.n	8002c26 <pl_callback_getSensor+0xe6>
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <pl_callback_getSensor+0x22>
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d016      	beq.n	8002b8e <pl_callback_getSensor+0x4e>
 8002b60:	e061      	b.n	8002c26 <pl_callback_getSensor+0xe6>
		case 0:
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_SET);
 8002b62:	2201      	movs	r2, #1
 8002b64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b68:	485b      	ldr	r0, [pc, #364]	; (8002cd8 <pl_callback_getSensor+0x198>)
 8002b6a:	f00b fdcf 	bl	800e70c <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_RESET);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b74:	4858      	ldr	r0, [pc, #352]	; (8002cd8 <pl_callback_getSensor+0x198>)
 8002b76:	f00b fdc9 	bl	800e70c <HAL_GPIO_WritePin>
					for (j = 0; j <= 100; j++) {
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	607b      	str	r3, [r7, #4]
 8002b7e:	e002      	b.n	8002b86 <pl_callback_getSensor+0x46>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3301      	adds	r3, #1
 8002b84:	607b      	str	r3, [r7, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b64      	cmp	r3, #100	; 0x64
 8002b8a:	ddf9      	ble.n	8002b80 <pl_callback_getSensor+0x40>
					}
			break;
 8002b8c:	e04b      	b.n	8002c26 <pl_callback_getSensor+0xe6>
		case 1:
			g_sensor_on[0] = g_ADCBuffer[1];
 8002b8e:	4b53      	ldr	r3, [pc, #332]	; (8002cdc <pl_callback_getSensor+0x19c>)
 8002b90:	885a      	ldrh	r2, [r3, #2]
 8002b92:	4b53      	ldr	r3, [pc, #332]	; (8002ce0 <pl_callback_getSensor+0x1a0>)
 8002b94:	801a      	strh	r2, [r3, #0]
			g_sensor_on[1] = g_ADCBuffer[2];
 8002b96:	4b51      	ldr	r3, [pc, #324]	; (8002cdc <pl_callback_getSensor+0x19c>)
 8002b98:	889a      	ldrh	r2, [r3, #4]
 8002b9a:	4b51      	ldr	r3, [pc, #324]	; (8002ce0 <pl_callback_getSensor+0x1a0>)
 8002b9c:	805a      	strh	r2, [r3, #2]
			g_sensor_off[2] = g_ADCBuffer[3];
 8002b9e:	4b4f      	ldr	r3, [pc, #316]	; (8002cdc <pl_callback_getSensor+0x19c>)
 8002ba0:	88da      	ldrh	r2, [r3, #6]
 8002ba2:	4b50      	ldr	r3, [pc, #320]	; (8002ce4 <pl_callback_getSensor+0x1a4>)
 8002ba4:	809a      	strh	r2, [r3, #4]
			g_sensor_off[3] = g_ADCBuffer[4];
 8002ba6:	4b4d      	ldr	r3, [pc, #308]	; (8002cdc <pl_callback_getSensor+0x19c>)
 8002ba8:	891a      	ldrh	r2, [r3, #8]
 8002baa:	4b4e      	ldr	r3, [pc, #312]	; (8002ce4 <pl_callback_getSensor+0x1a4>)
 8002bac:	80da      	strh	r2, [r3, #6]
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_RESET);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bb4:	4848      	ldr	r0, [pc, #288]	; (8002cd8 <pl_callback_getSensor+0x198>)
 8002bb6:	f00b fda9 	bl	800e70c <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_SET);
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bc0:	4845      	ldr	r0, [pc, #276]	; (8002cd8 <pl_callback_getSensor+0x198>)
 8002bc2:	f00b fda3 	bl	800e70c <HAL_GPIO_WritePin>
					for (j = 0; j <= 100; j++) {
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	e002      	b.n	8002bd2 <pl_callback_getSensor+0x92>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	607b      	str	r3, [r7, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b64      	cmp	r3, #100	; 0x64
 8002bd6:	ddf9      	ble.n	8002bcc <pl_callback_getSensor+0x8c>
					}
			break;
 8002bd8:	e025      	b.n	8002c26 <pl_callback_getSensor+0xe6>
		case 2:
			g_sensor_off[0] = g_ADCBuffer[1];
 8002bda:	4b40      	ldr	r3, [pc, #256]	; (8002cdc <pl_callback_getSensor+0x19c>)
 8002bdc:	885a      	ldrh	r2, [r3, #2]
 8002bde:	4b41      	ldr	r3, [pc, #260]	; (8002ce4 <pl_callback_getSensor+0x1a4>)
 8002be0:	801a      	strh	r2, [r3, #0]
			g_sensor_off[1] = g_ADCBuffer[2];
 8002be2:	4b3e      	ldr	r3, [pc, #248]	; (8002cdc <pl_callback_getSensor+0x19c>)
 8002be4:	889a      	ldrh	r2, [r3, #4]
 8002be6:	4b3f      	ldr	r3, [pc, #252]	; (8002ce4 <pl_callback_getSensor+0x1a4>)
 8002be8:	805a      	strh	r2, [r3, #2]
			g_sensor_on[2] = g_ADCBuffer[3];
 8002bea:	4b3c      	ldr	r3, [pc, #240]	; (8002cdc <pl_callback_getSensor+0x19c>)
 8002bec:	88da      	ldrh	r2, [r3, #6]
 8002bee:	4b3c      	ldr	r3, [pc, #240]	; (8002ce0 <pl_callback_getSensor+0x1a0>)
 8002bf0:	809a      	strh	r2, [r3, #4]
			g_sensor_on[3] = g_ADCBuffer[4];
 8002bf2:	4b3a      	ldr	r3, [pc, #232]	; (8002cdc <pl_callback_getSensor+0x19c>)
 8002bf4:	891a      	ldrh	r2, [r3, #8]
 8002bf6:	4b3a      	ldr	r3, [pc, #232]	; (8002ce0 <pl_callback_getSensor+0x1a0>)
 8002bf8:	80da      	strh	r2, [r3, #6]
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_RESET);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c00:	4835      	ldr	r0, [pc, #212]	; (8002cd8 <pl_callback_getSensor+0x198>)
 8002c02:	f00b fd83 	bl	800e70c <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_RESET);
 8002c06:	2200      	movs	r2, #0
 8002c08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c0c:	4832      	ldr	r0, [pc, #200]	; (8002cd8 <pl_callback_getSensor+0x198>)
 8002c0e:	f00b fd7d 	bl	800e70c <HAL_GPIO_WritePin>
					for (j = 0; j <= 10; j++) {
 8002c12:	2300      	movs	r3, #0
 8002c14:	607b      	str	r3, [r7, #4]
 8002c16:	e002      	b.n	8002c1e <pl_callback_getSensor+0xde>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	607b      	str	r3, [r7, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b0a      	cmp	r3, #10
 8002c22:	ddf9      	ble.n	8002c18 <pl_callback_getSensor+0xd8>
					}
			break;
 8002c24:	bf00      	nop
	}
	V_battAD = g_ADCBuffer[0];
 8002c26:	4b2d      	ldr	r3, [pc, #180]	; (8002cdc <pl_callback_getSensor+0x19c>)
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 1023.0 * (100.0 + 22.0) / 22.0;
 8002c2c:	887b      	ldrh	r3, [r7, #2]
 8002c2e:	ee07 3a90 	vmov	s15, r3
 8002c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c36:	ee17 0a90 	vmov	r0, s15
 8002c3a:	f7fd fc85 	bl	8000548 <__aeabi_f2d>
 8002c3e:	a320      	add	r3, pc, #128	; (adr r3, 8002cc0 <pl_callback_getSensor+0x180>)
 8002c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c44:	f7fd fcd8 	bl	80005f8 <__aeabi_dmul>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	4619      	mov	r1, r3
 8002c50:	a31d      	add	r3, pc, #116	; (adr r3, 8002cc8 <pl_callback_getSensor+0x188>)
 8002c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c56:	f7fd fdf9 	bl	800084c <__aeabi_ddiv>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4610      	mov	r0, r2
 8002c60:	4619      	mov	r1, r3
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	4b20      	ldr	r3, [pc, #128]	; (8002ce8 <pl_callback_getSensor+0x1a8>)
 8002c68:	f7fd fcc6 	bl	80005f8 <__aeabi_dmul>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <pl_callback_getSensor+0x1ac>)
 8002c7a:	f7fd fde7 	bl	800084c <__aeabi_ddiv>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4610      	mov	r0, r2
 8002c84:	4619      	mov	r1, r3
 8002c86:	f7fd ffaf 	bl	8000be8 <__aeabi_d2f>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	4a18      	ldr	r2, [pc, #96]	; (8002cf0 <pl_callback_getSensor+0x1b0>)
 8002c8e:	6013      	str	r3, [r2, #0]
		AD_step++;
 8002c90:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <pl_callback_getSensor+0x194>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	3301      	adds	r3, #1
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <pl_callback_getSensor+0x194>)
 8002c9a:	701a      	strb	r2, [r3, #0]

		if (AD_step != 3) {
 8002c9c:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <pl_callback_getSensor+0x194>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d005      	beq.n	8002cb0 <pl_callback_getSensor+0x170>
			HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
 8002ca4:	2205      	movs	r2, #5
 8002ca6:	490d      	ldr	r1, [pc, #52]	; (8002cdc <pl_callback_getSensor+0x19c>)
 8002ca8:	4809      	ldr	r0, [pc, #36]	; (8002cd0 <pl_callback_getSensor+0x190>)
 8002caa:	f00a f96d 	bl	800cf88 <HAL_ADC_Start_DMA>

			AD_step = 0;

		}

}
 8002cae:	e002      	b.n	8002cb6 <pl_callback_getSensor+0x176>
			AD_step = 0;
 8002cb0:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <pl_callback_getSensor+0x194>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	701a      	strb	r2, [r3, #0]
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	66666666 	.word	0x66666666
 8002cc4:	400a6666 	.word	0x400a6666
 8002cc8:	00000000 	.word	0x00000000
 8002ccc:	408ff800 	.word	0x408ff800
 8002cd0:	20000958 	.word	0x20000958
 8002cd4:	200003ae 	.word	0x200003ae
 8002cd8:	48000800 	.word	0x48000800
 8002cdc:	200003a4 	.word	0x200003a4
 8002ce0:	200003b0 	.word	0x200003b0
 8002ce4:	200003b8 	.word	0x200003b8
 8002ce8:	405e8000 	.word	0x405e8000
 8002cec:	40360000 	.word	0x40360000
 8002cf0:	200003c0 	.word	0x200003c0

08002cf4 <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
 8002cf8:	2205      	movs	r2, #5
 8002cfa:	4903      	ldr	r1, [pc, #12]	; (8002d08 <pl_interupt_getSensor+0x14>)
 8002cfc:	4803      	ldr	r0, [pc, #12]	; (8002d0c <pl_interupt_getSensor+0x18>)
 8002cfe:	f00a f943 	bl	800cf88 <HAL_ADC_Start_DMA>
				sizeof(g_ADCBuffer) / sizeof(uint16_t));


}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	200003a4 	.word	0x200003a4
 8002d0c:	20000958 	.word	0x20000958

08002d10 <pl_test_speaker>:

soundData seria[seriaNUM];
soundData Zelda_nazo[Zelda_nazoNUM];

void pl_test_speaker(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
	for(int count=1;count<15;count++){
 8002d16:	2301      	movs	r3, #1
 8002d18:	607b      	str	r3, [r7, #4]
 8002d1a:	e007      	b.n	8002d2c <pl_test_speaker+0x1c>
		pl_play_oneSound(count);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 f861 	bl	8002de8 <pl_play_oneSound>
	for(int count=1;count<15;count++){
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	607b      	str	r3, [r7, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b0e      	cmp	r3, #14
 8002d30:	ddf4      	ble.n	8002d1c <pl_test_speaker+0xc>
		}

	pl_play_Music(8, Zelda_nazo);
 8002d32:	4906      	ldr	r1, [pc, #24]	; (8002d4c <pl_test_speaker+0x3c>)
 8002d34:	2008      	movs	r0, #8
 8002d36:	f000 f8c3 	bl	8002ec0 <pl_play_Music>
	pl_play_Music(169, seria);
 8002d3a:	4905      	ldr	r1, [pc, #20]	; (8002d50 <pl_test_speaker+0x40>)
 8002d3c:	20a9      	movs	r0, #169	; 0xa9
 8002d3e:	f000 f8bf 	bl	8002ec0 <pl_play_Music>


}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000914 	.word	0x20000914
 8002d50:	200003c4 	.word	0x200003c4

08002d54 <pl_speaker_init>:
/*	スピーカーの初期化					(pl_speaker_init)	*/
/*******************************************************************/
/*	スピーカーの初期化する。						*/
/*******************************************************************/
void pl_speaker_init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0

	  HAL_TIM_Base_Start_IT(&htim15);//speaker
 8002d58:	4805      	ldr	r0, [pc, #20]	; (8002d70 <pl_speaker_init+0x1c>)
 8002d5a:	f00d fa55 	bl	8010208 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim15);//speaker
 8002d5e:	4804      	ldr	r0, [pc, #16]	; (8002d70 <pl_speaker_init+0x1c>)
 8002d60:	f008 fc68 	bl	800b634 <HAL_TIM_PWM_MspInit>

	  inputseria();
 8002d64:	f000 f95a 	bl	800301c <inputseria>
	  inputZelda_nazo();
 8002d68:	f000 f90e 	bl	8002f88 <inputZelda_nazo>


}
 8002d6c:	bf00      	nop
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	2000cee0 	.word	0x2000cee0
 8002d74:	00000000 	.word	0x00000000

08002d78 <calFrequencyCount>:
/*******************************************************************/
/*	周波数からcycleCountへの変換					(calFrequencyCount)	*/
/*******************************************************************/
/*	周波数からPWMに送るcycleCountを計算する．。						*/
/*******************************************************************/
uint16_t calFrequencyCount(float tarHz) {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t tarCount;
	if (tarHz == 0) {
 8002d82:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d86:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8e:	d102      	bne.n	8002d96 <calFrequencyCount+0x1e>
		tarCount = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	81fb      	strh	r3, [r7, #14]
 8002d94:	e01a      	b.n	8002dcc <calFrequencyCount+0x54>
	} else {
		tarCount = (uint16_t) (1000000.0 / tarHz - 1.0);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7fd fbd6 	bl	8000548 <__aeabi_f2d>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	a10e      	add	r1, pc, #56	; (adr r1, 8002ddc <calFrequencyCount+0x64>)
 8002da2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002da6:	f7fd fd51 	bl	800084c <__aeabi_ddiv>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <calFrequencyCount+0x60>)
 8002db8:	f7fd fa66 	bl	8000288 <__aeabi_dsub>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	f7fd fef0 	bl	8000ba8 <__aeabi_d2uiz>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	81fb      	strh	r3, [r7, #14]
	}
	return tarCount;
 8002dcc:	89fb      	ldrh	r3, [r7, #14]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	3ff00000 	.word	0x3ff00000
 8002ddc:	00000000 	.word	0x00000000
 8002de0:	412e8480 	.word	0x412e8480
 8002de4:	00000000 	.word	0x00000000

08002de8 <pl_play_oneSound>:
/*******************************************************************/
/*	任意の周波数の一音を出力					(pl_play_oneSound)	*/
/*******************************************************************/
/*	scaleにあわせた周波数での一音を出力する．．						*/
/*******************************************************************/
void pl_play_oneSound(char scale) {
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	71fb      	strb	r3, [r7, #7]
	uint16_t cycleCount, j;
	float Hz;
	Hz = 1.0;
 8002df2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002df6:	613b      	str	r3, [r7, #16]
	for (j = 0; j < scale; j++) {
 8002df8:	2300      	movs	r3, #0
 8002dfa:	82fb      	strh	r3, [r7, #22]
 8002dfc:	e012      	b.n	8002e24 <pl_play_oneSound+0x3c>
		Hz = Hz * 1.0595;
 8002dfe:	6938      	ldr	r0, [r7, #16]
 8002e00:	f7fd fba2 	bl	8000548 <__aeabi_f2d>
 8002e04:	a32c      	add	r3, pc, #176	; (adr r3, 8002eb8 <pl_play_oneSound+0xd0>)
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	f7fd fbf5 	bl	80005f8 <__aeabi_dmul>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4610      	mov	r0, r2
 8002e14:	4619      	mov	r1, r3
 8002e16:	f7fd fee7 	bl	8000be8 <__aeabi_d2f>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	613b      	str	r3, [r7, #16]
	for (j = 0; j < scale; j++) {
 8002e1e:	8afb      	ldrh	r3, [r7, #22]
 8002e20:	3301      	adds	r3, #1
 8002e22:	82fb      	strh	r3, [r7, #22]
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	8afa      	ldrh	r2, [r7, #22]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d3e7      	bcc.n	8002dfe <pl_play_oneSound+0x16>
	}
	cycleCount = calFrequencyCount(440 * 0.6 * Hz);
 8002e2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e32:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002eb0 <pl_play_oneSound+0xc8>
 8002e36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e3e:	f7ff ff9b 	bl	8002d78 <calFrequencyCount>
 8002e42:	4603      	mov	r3, r0
 8002e44:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_AUTORELOAD(&htim15, cycleCount);
 8002e46:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <pl_play_oneSound+0xcc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	89fa      	ldrh	r2, [r7, #14]
 8002e4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e4e:	89fb      	ldrh	r3, [r7, #14]
 8002e50:	4a18      	ldr	r2, [pc, #96]	; (8002eb4 <pl_play_oneSound+0xcc>)
 8002e52:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2,cycleCount * SPEAKER_LOUDNESS);
 8002e54:	89fb      	ldrh	r3, [r7, #14]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd fb64 	bl	8000524 <__aeabi_i2d>
 8002e5c:	a312      	add	r3, pc, #72	; (adr r3, 8002ea8 <pl_play_oneSound+0xc0>)
 8002e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e62:	f7fd fbc9 	bl	80005f8 <__aeabi_dmul>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4912      	ldr	r1, [pc, #72]	; (8002eb4 <pl_play_oneSound+0xcc>)
 8002e6c:	680c      	ldr	r4, [r1, #0]
 8002e6e:	4610      	mov	r0, r2
 8002e70:	4619      	mov	r1, r3
 8002e72:	f7fd fe99 	bl	8000ba8 <__aeabi_d2uiz>
 8002e76:	4603      	mov	r3, r0
 8002e78:	63a3      	str	r3, [r4, #56]	; 0x38

	__HAL_TIM_SET_COUNTER(&htim15, 0);
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <pl_play_oneSound+0xcc>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8002e82:	2104      	movs	r1, #4
 8002e84:	480b      	ldr	r0, [pc, #44]	; (8002eb4 <pl_play_oneSound+0xcc>)
 8002e86:	f00d fa6b 	bl	8010360 <HAL_TIM_PWM_Start>
	HAL_Delay(600);
 8002e8a:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002e8e:	f009 fbd3 	bl	800c638 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 8002e92:	2104      	movs	r1, #4
 8002e94:	4807      	ldr	r0, [pc, #28]	; (8002eb4 <pl_play_oneSound+0xcc>)
 8002e96:	f00d fb41 	bl	801051c <HAL_TIM_PWM_Stop>

}
 8002e9a:	bf00      	nop
 8002e9c:	371c      	adds	r7, #28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd90      	pop	{r4, r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	f3af 8000 	nop.w
 8002ea8:	47ae147b 	.word	0x47ae147b
 8002eac:	3f747ae1 	.word	0x3f747ae1
 8002eb0:	43840000 	.word	0x43840000
 8002eb4:	2000cee0 	.word	0x2000cee0
 8002eb8:	45a1cac1 	.word	0x45a1cac1
 8002ebc:	3ff0f3b6 	.word	0x3ff0f3b6

08002ec0 <pl_play_Music>:
/*******************************************************************/
/*	任意の音楽を出力					(pl_play_Music)	*/
/*******************************************************************/
/*	playDataの音楽を出力する．						*/
/*******************************************************************/
void pl_play_Music(uint16_t dataMaxNum, soundData *playData) {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	6039      	str	r1, [r7, #0]
 8002eca:	80fb      	strh	r3, [r7, #6]

	uint16_t i;
	uint16_t cycleCount, cycleCount_f;

	for (i = 0; i < dataMaxNum; i++) {
 8002ecc:	2300      	movs	r3, #0
 8002ece:	81fb      	strh	r3, [r7, #14]
 8002ed0:	e043      	b.n	8002f5a <pl_play_Music+0x9a>
		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 8002ed2:	2104      	movs	r1, #4
 8002ed4:	482a      	ldr	r0, [pc, #168]	; (8002f80 <pl_play_Music+0xc0>)
 8002ed6:	f00d fb21 	bl	801051c <HAL_TIM_PWM_Stop>

		cycleCount = calFrequencyCount(playData[i].interval);
 8002eda:	89fb      	ldrh	r3, [r7, #14]
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	edd3 7a00 	vldr	s15, [r3]
 8002ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8002eea:	f7ff ff45 	bl	8002d78 <calFrequencyCount>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	81bb      	strh	r3, [r7, #12]
		cycleCount_f = (int) ((float) (cycleCount) * SPEAKER_LOUDNESS);
 8002ef2:	89bb      	ldrh	r3, [r7, #12]
 8002ef4:	ee07 3a90 	vmov	s15, r3
 8002ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efc:	ee17 0a90 	vmov	r0, s15
 8002f00:	f7fd fb22 	bl	8000548 <__aeabi_f2d>
 8002f04:	a31c      	add	r3, pc, #112	; (adr r3, 8002f78 <pl_play_Music+0xb8>)
 8002f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0a:	f7fd fb75 	bl	80005f8 <__aeabi_dmul>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	f7fd fe1f 	bl	8000b58 <__aeabi_d2iz>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	817b      	strh	r3, [r7, #10]
		__HAL_TIM_SET_AUTORELOAD(&htim15, cycleCount);
 8002f1e:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <pl_play_Music+0xc0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	89ba      	ldrh	r2, [r7, #12]
 8002f24:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f26:	89bb      	ldrh	r3, [r7, #12]
 8002f28:	4a15      	ldr	r2, [pc, #84]	; (8002f80 <pl_play_Music+0xc0>)
 8002f2a:	60d3      	str	r3, [r2, #12]

		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2,cycleCount_f);
 8002f2c:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <pl_play_Music+0xc0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	897a      	ldrh	r2, [r7, #10]
 8002f32:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002f34:	4b13      	ldr	r3, [pc, #76]	; (8002f84 <pl_play_Music+0xc4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8002f3c:	2104      	movs	r1, #4
 8002f3e:	4810      	ldr	r0, [pc, #64]	; (8002f80 <pl_play_Music+0xc0>)
 8002f40:	f00d fa0e 	bl	8010360 <HAL_TIM_PWM_Start>
		HAL_Delay(playData[i].waittime);
 8002f44:	89fb      	ldrh	r3, [r7, #14]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	889b      	ldrh	r3, [r3, #4]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f009 fb72 	bl	800c638 <HAL_Delay>
	for (i = 0; i < dataMaxNum; i++) {
 8002f54:	89fb      	ldrh	r3, [r7, #14]
 8002f56:	3301      	adds	r3, #1
 8002f58:	81fb      	strh	r3, [r7, #14]
 8002f5a:	89fa      	ldrh	r2, [r7, #14]
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d3b7      	bcc.n	8002ed2 <pl_play_Music+0x12>
	}
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 8002f62:	2104      	movs	r1, #4
 8002f64:	4806      	ldr	r0, [pc, #24]	; (8002f80 <pl_play_Music+0xc0>)
 8002f66:	f00d fad9 	bl	801051c <HAL_TIM_PWM_Stop>
}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	f3af 8000 	nop.w
 8002f78:	47ae147b 	.word	0x47ae147b
 8002f7c:	3f747ae1 	.word	0x3f747ae1
 8002f80:	2000cee0 	.word	0x2000cee0
 8002f84:	2000ce48 	.word	0x2000ce48

08002f88 <inputZelda_nazo>:
/*******************************************************************/
/*	音楽用構造体配列の入力					(input)	*/
/*******************************************************************/
/*	音楽用の構造体を定義してる．						*/
/*******************************************************************/
void inputZelda_nazo(void) {
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
	Zelda_nazo[0].interval = 1480;
 8002f8c:	4b1a      	ldr	r3, [pc, #104]	; (8002ff8 <inputZelda_nazo+0x70>)
 8002f8e:	4a1b      	ldr	r2, [pc, #108]	; (8002ffc <inputZelda_nazo+0x74>)
 8002f90:	601a      	str	r2, [r3, #0]
	Zelda_nazo[0].waittime = 19 * 7;
 8002f92:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <inputZelda_nazo+0x70>)
 8002f94:	2285      	movs	r2, #133	; 0x85
 8002f96:	809a      	strh	r2, [r3, #4]
	Zelda_nazo[1].interval = 1397;
 8002f98:	4b17      	ldr	r3, [pc, #92]	; (8002ff8 <inputZelda_nazo+0x70>)
 8002f9a:	4a19      	ldr	r2, [pc, #100]	; (8003000 <inputZelda_nazo+0x78>)
 8002f9c:	609a      	str	r2, [r3, #8]
	Zelda_nazo[1].waittime = 19 * 7;
 8002f9e:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <inputZelda_nazo+0x70>)
 8002fa0:	2285      	movs	r2, #133	; 0x85
 8002fa2:	819a      	strh	r2, [r3, #12]
	Zelda_nazo[2].interval = 1175;
 8002fa4:	4b14      	ldr	r3, [pc, #80]	; (8002ff8 <inputZelda_nazo+0x70>)
 8002fa6:	4a17      	ldr	r2, [pc, #92]	; (8003004 <inputZelda_nazo+0x7c>)
 8002fa8:	611a      	str	r2, [r3, #16]
	Zelda_nazo[2].waittime = 19 * 7;
 8002faa:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <inputZelda_nazo+0x70>)
 8002fac:	2285      	movs	r2, #133	; 0x85
 8002fae:	829a      	strh	r2, [r3, #20]
	Zelda_nazo[3].interval = 831;
 8002fb0:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <inputZelda_nazo+0x70>)
 8002fb2:	4a15      	ldr	r2, [pc, #84]	; (8003008 <inputZelda_nazo+0x80>)
 8002fb4:	619a      	str	r2, [r3, #24]
	Zelda_nazo[3].waittime = 19 * 7;
 8002fb6:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <inputZelda_nazo+0x70>)
 8002fb8:	2285      	movs	r2, #133	; 0x85
 8002fba:	839a      	strh	r2, [r3, #28]
	Zelda_nazo[4].interval = 784;
 8002fbc:	4b0e      	ldr	r3, [pc, #56]	; (8002ff8 <inputZelda_nazo+0x70>)
 8002fbe:	4a13      	ldr	r2, [pc, #76]	; (800300c <inputZelda_nazo+0x84>)
 8002fc0:	621a      	str	r2, [r3, #32]
	Zelda_nazo[4].waittime = 19 * 7;
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <inputZelda_nazo+0x70>)
 8002fc4:	2285      	movs	r2, #133	; 0x85
 8002fc6:	849a      	strh	r2, [r3, #36]	; 0x24
	Zelda_nazo[5].interval = 1245;
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <inputZelda_nazo+0x70>)
 8002fca:	4a11      	ldr	r2, [pc, #68]	; (8003010 <inputZelda_nazo+0x88>)
 8002fcc:	629a      	str	r2, [r3, #40]	; 0x28
	Zelda_nazo[5].waittime = 19 * 7;
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <inputZelda_nazo+0x70>)
 8002fd0:	2285      	movs	r2, #133	; 0x85
 8002fd2:	859a      	strh	r2, [r3, #44]	; 0x2c
	Zelda_nazo[6].interval = 1568;
 8002fd4:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <inputZelda_nazo+0x70>)
 8002fd6:	4a0f      	ldr	r2, [pc, #60]	; (8003014 <inputZelda_nazo+0x8c>)
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30
	Zelda_nazo[6].waittime = 19 * 7;
 8002fda:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <inputZelda_nazo+0x70>)
 8002fdc:	2285      	movs	r2, #133	; 0x85
 8002fde:	869a      	strh	r2, [r3, #52]	; 0x34
	Zelda_nazo[7].interval = 1976;
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <inputZelda_nazo+0x70>)
 8002fe2:	4a0d      	ldr	r2, [pc, #52]	; (8003018 <inputZelda_nazo+0x90>)
 8002fe4:	639a      	str	r2, [r3, #56]	; 0x38
	Zelda_nazo[7].waittime = 99 * 7;
 8002fe6:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <inputZelda_nazo+0x70>)
 8002fe8:	f240 22b5 	movw	r2, #693	; 0x2b5
 8002fec:	879a      	strh	r2, [r3, #60]	; 0x3c

}
 8002fee:	bf00      	nop
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	20000914 	.word	0x20000914
 8002ffc:	44b90000 	.word	0x44b90000
 8003000:	44aea000 	.word	0x44aea000
 8003004:	4492e000 	.word	0x4492e000
 8003008:	444fc000 	.word	0x444fc000
 800300c:	44440000 	.word	0x44440000
 8003010:	449ba000 	.word	0x449ba000
 8003014:	44c40000 	.word	0x44c40000
 8003018:	44f70000 	.word	0x44f70000

0800301c <inputseria>:


void inputseria(void) {
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
	seria[0].interval = 698;
 8003020:	4bad      	ldr	r3, [pc, #692]	; (80032d8 <inputseria+0x2bc>)
 8003022:	4aae      	ldr	r2, [pc, #696]	; (80032dc <inputseria+0x2c0>)
 8003024:	601a      	str	r2, [r3, #0]
	seria[0].waittime = 224;
 8003026:	4bac      	ldr	r3, [pc, #688]	; (80032d8 <inputseria+0x2bc>)
 8003028:	22e0      	movs	r2, #224	; 0xe0
 800302a:	809a      	strh	r2, [r3, #4]
	seria[1].interval = 880;
 800302c:	4baa      	ldr	r3, [pc, #680]	; (80032d8 <inputseria+0x2bc>)
 800302e:	4aac      	ldr	r2, [pc, #688]	; (80032e0 <inputseria+0x2c4>)
 8003030:	609a      	str	r2, [r3, #8]
	seria[1].waittime = 224;
 8003032:	4ba9      	ldr	r3, [pc, #676]	; (80032d8 <inputseria+0x2bc>)
 8003034:	22e0      	movs	r2, #224	; 0xe0
 8003036:	819a      	strh	r2, [r3, #12]
	seria[2].interval = 988;
 8003038:	4ba7      	ldr	r3, [pc, #668]	; (80032d8 <inputseria+0x2bc>)
 800303a:	4aaa      	ldr	r2, [pc, #680]	; (80032e4 <inputseria+0x2c8>)
 800303c:	611a      	str	r2, [r3, #16]
	seria[2].waittime = 462;
 800303e:	4ba6      	ldr	r3, [pc, #664]	; (80032d8 <inputseria+0x2bc>)
 8003040:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003044:	829a      	strh	r2, [r3, #20]
	seria[3].interval = 698;
 8003046:	4ba4      	ldr	r3, [pc, #656]	; (80032d8 <inputseria+0x2bc>)
 8003048:	4aa4      	ldr	r2, [pc, #656]	; (80032dc <inputseria+0x2c0>)
 800304a:	619a      	str	r2, [r3, #24]
	seria[3].waittime = 224;
 800304c:	4ba2      	ldr	r3, [pc, #648]	; (80032d8 <inputseria+0x2bc>)
 800304e:	22e0      	movs	r2, #224	; 0xe0
 8003050:	839a      	strh	r2, [r3, #28]
	seria[4].interval = 880;
 8003052:	4ba1      	ldr	r3, [pc, #644]	; (80032d8 <inputseria+0x2bc>)
 8003054:	4aa2      	ldr	r2, [pc, #648]	; (80032e0 <inputseria+0x2c4>)
 8003056:	621a      	str	r2, [r3, #32]
	seria[4].waittime = 224;
 8003058:	4b9f      	ldr	r3, [pc, #636]	; (80032d8 <inputseria+0x2bc>)
 800305a:	22e0      	movs	r2, #224	; 0xe0
 800305c:	849a      	strh	r2, [r3, #36]	; 0x24
	seria[5].interval = 988;
 800305e:	4b9e      	ldr	r3, [pc, #632]	; (80032d8 <inputseria+0x2bc>)
 8003060:	4aa0      	ldr	r2, [pc, #640]	; (80032e4 <inputseria+0x2c8>)
 8003062:	629a      	str	r2, [r3, #40]	; 0x28
	seria[5].waittime = 462;
 8003064:	4b9c      	ldr	r3, [pc, #624]	; (80032d8 <inputseria+0x2bc>)
 8003066:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800306a:	859a      	strh	r2, [r3, #44]	; 0x2c
	seria[6].interval = 698;
 800306c:	4b9a      	ldr	r3, [pc, #616]	; (80032d8 <inputseria+0x2bc>)
 800306e:	4a9b      	ldr	r2, [pc, #620]	; (80032dc <inputseria+0x2c0>)
 8003070:	631a      	str	r2, [r3, #48]	; 0x30
	seria[6].waittime = 224;
 8003072:	4b99      	ldr	r3, [pc, #612]	; (80032d8 <inputseria+0x2bc>)
 8003074:	22e0      	movs	r2, #224	; 0xe0
 8003076:	869a      	strh	r2, [r3, #52]	; 0x34
	seria[7].interval = 880;
 8003078:	4b97      	ldr	r3, [pc, #604]	; (80032d8 <inputseria+0x2bc>)
 800307a:	4a99      	ldr	r2, [pc, #612]	; (80032e0 <inputseria+0x2c4>)
 800307c:	639a      	str	r2, [r3, #56]	; 0x38
	seria[7].waittime = 224;
 800307e:	4b96      	ldr	r3, [pc, #600]	; (80032d8 <inputseria+0x2bc>)
 8003080:	22e0      	movs	r2, #224	; 0xe0
 8003082:	879a      	strh	r2, [r3, #60]	; 0x3c
	seria[8].interval = 988;
 8003084:	4b94      	ldr	r3, [pc, #592]	; (80032d8 <inputseria+0x2bc>)
 8003086:	4a97      	ldr	r2, [pc, #604]	; (80032e4 <inputseria+0x2c8>)
 8003088:	641a      	str	r2, [r3, #64]	; 0x40
	seria[8].waittime = 224;
 800308a:	4b93      	ldr	r3, [pc, #588]	; (80032d8 <inputseria+0x2bc>)
 800308c:	22e0      	movs	r2, #224	; 0xe0
 800308e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	seria[9].interval = 1319;
 8003092:	4b91      	ldr	r3, [pc, #580]	; (80032d8 <inputseria+0x2bc>)
 8003094:	4a94      	ldr	r2, [pc, #592]	; (80032e8 <inputseria+0x2cc>)
 8003096:	649a      	str	r2, [r3, #72]	; 0x48
	seria[9].waittime = 224;
 8003098:	4b8f      	ldr	r3, [pc, #572]	; (80032d8 <inputseria+0x2bc>)
 800309a:	22e0      	movs	r2, #224	; 0xe0
 800309c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	seria[10].interval = 1175;
 80030a0:	4b8d      	ldr	r3, [pc, #564]	; (80032d8 <inputseria+0x2bc>)
 80030a2:	4a92      	ldr	r2, [pc, #584]	; (80032ec <inputseria+0x2d0>)
 80030a4:	651a      	str	r2, [r3, #80]	; 0x50
	seria[10].waittime = 462;
 80030a6:	4b8c      	ldr	r3, [pc, #560]	; (80032d8 <inputseria+0x2bc>)
 80030a8:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80030ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	seria[11].interval = 988;
 80030b0:	4b89      	ldr	r3, [pc, #548]	; (80032d8 <inputseria+0x2bc>)
 80030b2:	4a8c      	ldr	r2, [pc, #560]	; (80032e4 <inputseria+0x2c8>)
 80030b4:	659a      	str	r2, [r3, #88]	; 0x58
	seria[11].waittime = 224;
 80030b6:	4b88      	ldr	r3, [pc, #544]	; (80032d8 <inputseria+0x2bc>)
 80030b8:	22e0      	movs	r2, #224	; 0xe0
 80030ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	seria[12].interval = 1047;
 80030be:	4b86      	ldr	r3, [pc, #536]	; (80032d8 <inputseria+0x2bc>)
 80030c0:	4a8b      	ldr	r2, [pc, #556]	; (80032f0 <inputseria+0x2d4>)
 80030c2:	661a      	str	r2, [r3, #96]	; 0x60
	seria[12].waittime = 224;
 80030c4:	4b84      	ldr	r3, [pc, #528]	; (80032d8 <inputseria+0x2bc>)
 80030c6:	22e0      	movs	r2, #224	; 0xe0
 80030c8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	seria[13].interval = 988;
 80030cc:	4b82      	ldr	r3, [pc, #520]	; (80032d8 <inputseria+0x2bc>)
 80030ce:	4a85      	ldr	r2, [pc, #532]	; (80032e4 <inputseria+0x2c8>)
 80030d0:	669a      	str	r2, [r3, #104]	; 0x68
	seria[13].waittime = 224;
 80030d2:	4b81      	ldr	r3, [pc, #516]	; (80032d8 <inputseria+0x2bc>)
 80030d4:	22e0      	movs	r2, #224	; 0xe0
 80030d6:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	seria[14].interval = 784;
 80030da:	4b7f      	ldr	r3, [pc, #508]	; (80032d8 <inputseria+0x2bc>)
 80030dc:	4a85      	ldr	r2, [pc, #532]	; (80032f4 <inputseria+0x2d8>)
 80030de:	671a      	str	r2, [r3, #112]	; 0x70
	seria[14].waittime = 224;
 80030e0:	4b7d      	ldr	r3, [pc, #500]	; (80032d8 <inputseria+0x2bc>)
 80030e2:	22e0      	movs	r2, #224	; 0xe0
 80030e4:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	seria[15].interval = 659;
 80030e8:	4b7b      	ldr	r3, [pc, #492]	; (80032d8 <inputseria+0x2bc>)
 80030ea:	4a83      	ldr	r2, [pc, #524]	; (80032f8 <inputseria+0x2dc>)
 80030ec:	679a      	str	r2, [r3, #120]	; 0x78
	seria[15].waittime = 1169;
 80030ee:	4b7a      	ldr	r3, [pc, #488]	; (80032d8 <inputseria+0x2bc>)
 80030f0:	f240 4291 	movw	r2, #1169	; 0x491
 80030f4:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	seria[16].interval = 587;
 80030f8:	4b77      	ldr	r3, [pc, #476]	; (80032d8 <inputseria+0x2bc>)
 80030fa:	4a80      	ldr	r2, [pc, #512]	; (80032fc <inputseria+0x2e0>)
 80030fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	seria[16].waittime = 224;
 8003100:	4b75      	ldr	r3, [pc, #468]	; (80032d8 <inputseria+0x2bc>)
 8003102:	22e0      	movs	r2, #224	; 0xe0
 8003104:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	seria[17].interval = 659;
 8003108:	4b73      	ldr	r3, [pc, #460]	; (80032d8 <inputseria+0x2bc>)
 800310a:	4a7b      	ldr	r2, [pc, #492]	; (80032f8 <inputseria+0x2dc>)
 800310c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	seria[17].waittime = 224;
 8003110:	4b71      	ldr	r3, [pc, #452]	; (80032d8 <inputseria+0x2bc>)
 8003112:	22e0      	movs	r2, #224	; 0xe0
 8003114:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	seria[18].interval = 784;
 8003118:	4b6f      	ldr	r3, [pc, #444]	; (80032d8 <inputseria+0x2bc>)
 800311a:	4a76      	ldr	r2, [pc, #472]	; (80032f4 <inputseria+0x2d8>)
 800311c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	seria[18].waittime = 224;
 8003120:	4b6d      	ldr	r3, [pc, #436]	; (80032d8 <inputseria+0x2bc>)
 8003122:	22e0      	movs	r2, #224	; 0xe0
 8003124:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	seria[19].interval = 659;
 8003128:	4b6b      	ldr	r3, [pc, #428]	; (80032d8 <inputseria+0x2bc>)
 800312a:	4a73      	ldr	r2, [pc, #460]	; (80032f8 <inputseria+0x2dc>)
 800312c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	seria[19].waittime = 1400;
 8003130:	4b69      	ldr	r3, [pc, #420]	; (80032d8 <inputseria+0x2bc>)
 8003132:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003136:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	seria[20].interval = 698;
 800313a:	4b67      	ldr	r3, [pc, #412]	; (80032d8 <inputseria+0x2bc>)
 800313c:	4a67      	ldr	r2, [pc, #412]	; (80032dc <inputseria+0x2c0>)
 800313e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	seria[20].waittime = 224;
 8003142:	4b65      	ldr	r3, [pc, #404]	; (80032d8 <inputseria+0x2bc>)
 8003144:	22e0      	movs	r2, #224	; 0xe0
 8003146:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	seria[21].interval = 880;
 800314a:	4b63      	ldr	r3, [pc, #396]	; (80032d8 <inputseria+0x2bc>)
 800314c:	4a64      	ldr	r2, [pc, #400]	; (80032e0 <inputseria+0x2c4>)
 800314e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	seria[21].waittime = 224;
 8003152:	4b61      	ldr	r3, [pc, #388]	; (80032d8 <inputseria+0x2bc>)
 8003154:	22e0      	movs	r2, #224	; 0xe0
 8003156:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	seria[22].interval = 988;
 800315a:	4b5f      	ldr	r3, [pc, #380]	; (80032d8 <inputseria+0x2bc>)
 800315c:	4a61      	ldr	r2, [pc, #388]	; (80032e4 <inputseria+0x2c8>)
 800315e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	seria[22].waittime = 462;
 8003162:	4b5d      	ldr	r3, [pc, #372]	; (80032d8 <inputseria+0x2bc>)
 8003164:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003168:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	seria[23].interval = 698;
 800316c:	4b5a      	ldr	r3, [pc, #360]	; (80032d8 <inputseria+0x2bc>)
 800316e:	4a5b      	ldr	r2, [pc, #364]	; (80032dc <inputseria+0x2c0>)
 8003170:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	seria[23].waittime = 224;
 8003174:	4b58      	ldr	r3, [pc, #352]	; (80032d8 <inputseria+0x2bc>)
 8003176:	22e0      	movs	r2, #224	; 0xe0
 8003178:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
	seria[24].interval = 880;
 800317c:	4b56      	ldr	r3, [pc, #344]	; (80032d8 <inputseria+0x2bc>)
 800317e:	4a58      	ldr	r2, [pc, #352]	; (80032e0 <inputseria+0x2c4>)
 8003180:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	seria[24].waittime = 224;
 8003184:	4b54      	ldr	r3, [pc, #336]	; (80032d8 <inputseria+0x2bc>)
 8003186:	22e0      	movs	r2, #224	; 0xe0
 8003188:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	seria[25].interval = 988;
 800318c:	4b52      	ldr	r3, [pc, #328]	; (80032d8 <inputseria+0x2bc>)
 800318e:	4a55      	ldr	r2, [pc, #340]	; (80032e4 <inputseria+0x2c8>)
 8003190:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	seria[25].waittime = 462;
 8003194:	4b50      	ldr	r3, [pc, #320]	; (80032d8 <inputseria+0x2bc>)
 8003196:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800319a:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
	seria[26].interval = 698;
 800319e:	4b4e      	ldr	r3, [pc, #312]	; (80032d8 <inputseria+0x2bc>)
 80031a0:	4a4e      	ldr	r2, [pc, #312]	; (80032dc <inputseria+0x2c0>)
 80031a2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	seria[26].waittime = 224;
 80031a6:	4b4c      	ldr	r3, [pc, #304]	; (80032d8 <inputseria+0x2bc>)
 80031a8:	22e0      	movs	r2, #224	; 0xe0
 80031aa:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
	seria[27].interval = 880;
 80031ae:	4b4a      	ldr	r3, [pc, #296]	; (80032d8 <inputseria+0x2bc>)
 80031b0:	4a4b      	ldr	r2, [pc, #300]	; (80032e0 <inputseria+0x2c4>)
 80031b2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	seria[27].waittime = 224;
 80031b6:	4b48      	ldr	r3, [pc, #288]	; (80032d8 <inputseria+0x2bc>)
 80031b8:	22e0      	movs	r2, #224	; 0xe0
 80031ba:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	seria[28].interval = 988;
 80031be:	4b46      	ldr	r3, [pc, #280]	; (80032d8 <inputseria+0x2bc>)
 80031c0:	4a48      	ldr	r2, [pc, #288]	; (80032e4 <inputseria+0x2c8>)
 80031c2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	seria[28].waittime = 224;
 80031c6:	4b44      	ldr	r3, [pc, #272]	; (80032d8 <inputseria+0x2bc>)
 80031c8:	22e0      	movs	r2, #224	; 0xe0
 80031ca:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	seria[29].interval = 1319;
 80031ce:	4b42      	ldr	r3, [pc, #264]	; (80032d8 <inputseria+0x2bc>)
 80031d0:	4a45      	ldr	r2, [pc, #276]	; (80032e8 <inputseria+0x2cc>)
 80031d2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	seria[29].waittime = 224;
 80031d6:	4b40      	ldr	r3, [pc, #256]	; (80032d8 <inputseria+0x2bc>)
 80031d8:	22e0      	movs	r2, #224	; 0xe0
 80031da:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
	seria[30].interval = 1175;
 80031de:	4b3e      	ldr	r3, [pc, #248]	; (80032d8 <inputseria+0x2bc>)
 80031e0:	4a42      	ldr	r2, [pc, #264]	; (80032ec <inputseria+0x2d0>)
 80031e2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	seria[30].waittime = 462;
 80031e6:	4b3c      	ldr	r3, [pc, #240]	; (80032d8 <inputseria+0x2bc>)
 80031e8:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80031ec:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
	seria[31].interval = 988;
 80031f0:	4b39      	ldr	r3, [pc, #228]	; (80032d8 <inputseria+0x2bc>)
 80031f2:	4a3c      	ldr	r2, [pc, #240]	; (80032e4 <inputseria+0x2c8>)
 80031f4:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	seria[31].waittime = 224;
 80031f8:	4b37      	ldr	r3, [pc, #220]	; (80032d8 <inputseria+0x2bc>)
 80031fa:	22e0      	movs	r2, #224	; 0xe0
 80031fc:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
	seria[32].interval = 1047;
 8003200:	4b35      	ldr	r3, [pc, #212]	; (80032d8 <inputseria+0x2bc>)
 8003202:	4a3b      	ldr	r2, [pc, #236]	; (80032f0 <inputseria+0x2d4>)
 8003204:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	seria[32].waittime = 224;
 8003208:	4b33      	ldr	r3, [pc, #204]	; (80032d8 <inputseria+0x2bc>)
 800320a:	22e0      	movs	r2, #224	; 0xe0
 800320c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	seria[33].interval = 1319;
 8003210:	4b31      	ldr	r3, [pc, #196]	; (80032d8 <inputseria+0x2bc>)
 8003212:	4a35      	ldr	r2, [pc, #212]	; (80032e8 <inputseria+0x2cc>)
 8003214:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	seria[33].waittime = 224;
 8003218:	4b2f      	ldr	r3, [pc, #188]	; (80032d8 <inputseria+0x2bc>)
 800321a:	22e0      	movs	r2, #224	; 0xe0
 800321c:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	seria[34].interval = 988;
 8003220:	4b2d      	ldr	r3, [pc, #180]	; (80032d8 <inputseria+0x2bc>)
 8003222:	4a30      	ldr	r2, [pc, #192]	; (80032e4 <inputseria+0x2c8>)
 8003224:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	seria[34].waittime = 224;
 8003228:	4b2b      	ldr	r3, [pc, #172]	; (80032d8 <inputseria+0x2bc>)
 800322a:	22e0      	movs	r2, #224	; 0xe0
 800322c:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
	seria[35].interval = 784;
 8003230:	4b29      	ldr	r3, [pc, #164]	; (80032d8 <inputseria+0x2bc>)
 8003232:	4a30      	ldr	r2, [pc, #192]	; (80032f4 <inputseria+0x2d8>)
 8003234:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	seria[35].waittime = 1169;
 8003238:	4b27      	ldr	r3, [pc, #156]	; (80032d8 <inputseria+0x2bc>)
 800323a:	f240 4291 	movw	r2, #1169	; 0x491
 800323e:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
	seria[36].interval = 988;
 8003242:	4b25      	ldr	r3, [pc, #148]	; (80032d8 <inputseria+0x2bc>)
 8003244:	4a27      	ldr	r2, [pc, #156]	; (80032e4 <inputseria+0x2c8>)
 8003246:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	seria[36].waittime = 224;
 800324a:	4b23      	ldr	r3, [pc, #140]	; (80032d8 <inputseria+0x2bc>)
 800324c:	22e0      	movs	r2, #224	; 0xe0
 800324e:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
	seria[37].interval = 784;
 8003252:	4b21      	ldr	r3, [pc, #132]	; (80032d8 <inputseria+0x2bc>)
 8003254:	4a27      	ldr	r2, [pc, #156]	; (80032f4 <inputseria+0x2d8>)
 8003256:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	seria[37].waittime = 224;
 800325a:	4b1f      	ldr	r3, [pc, #124]	; (80032d8 <inputseria+0x2bc>)
 800325c:	22e0      	movs	r2, #224	; 0xe0
 800325e:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
	seria[38].interval = 587;
 8003262:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <inputseria+0x2bc>)
 8003264:	4a25      	ldr	r2, [pc, #148]	; (80032fc <inputseria+0x2e0>)
 8003266:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	seria[38].waittime = 224;
 800326a:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <inputseria+0x2bc>)
 800326c:	22e0      	movs	r2, #224	; 0xe0
 800326e:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	seria[39].interval = 659;
 8003272:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <inputseria+0x2bc>)
 8003274:	4a20      	ldr	r2, [pc, #128]	; (80032f8 <inputseria+0x2dc>)
 8003276:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	seria[39].waittime = 1400;
 800327a:	4b17      	ldr	r3, [pc, #92]	; (80032d8 <inputseria+0x2bc>)
 800327c:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003280:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
	seria[40].interval = 294;
 8003284:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <inputseria+0x2bc>)
 8003286:	4a1e      	ldr	r2, [pc, #120]	; (8003300 <inputseria+0x2e4>)
 8003288:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	seria[40].waittime = 224;
 800328c:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <inputseria+0x2bc>)
 800328e:	22e0      	movs	r2, #224	; 0xe0
 8003290:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
	seria[41].interval = 330;
 8003294:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <inputseria+0x2bc>)
 8003296:	4a1b      	ldr	r2, [pc, #108]	; (8003304 <inputseria+0x2e8>)
 8003298:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	seria[41].waittime = 224;
 800329c:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <inputseria+0x2bc>)
 800329e:	22e0      	movs	r2, #224	; 0xe0
 80032a0:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
	seria[42].interval = 349;
 80032a4:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <inputseria+0x2bc>)
 80032a6:	4a18      	ldr	r2, [pc, #96]	; (8003308 <inputseria+0x2ec>)
 80032a8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	seria[42].waittime = 462;
 80032ac:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <inputseria+0x2bc>)
 80032ae:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80032b2:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	seria[43].interval = 392;
 80032b6:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <inputseria+0x2bc>)
 80032b8:	4a14      	ldr	r2, [pc, #80]	; (800330c <inputseria+0x2f0>)
 80032ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	seria[43].waittime = 224;
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <inputseria+0x2bc>)
 80032c0:	22e0      	movs	r2, #224	; 0xe0
 80032c2:	f8a3 215c 	strh.w	r2, [r3, #348]	; 0x15c
	seria[44].interval = 440;
 80032c6:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <inputseria+0x2bc>)
 80032c8:	4a11      	ldr	r2, [pc, #68]	; (8003310 <inputseria+0x2f4>)
 80032ca:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	seria[44].waittime = 224;
 80032ce:	4b02      	ldr	r3, [pc, #8]	; (80032d8 <inputseria+0x2bc>)
 80032d0:	22e0      	movs	r2, #224	; 0xe0
 80032d2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 80032d6:	e01d      	b.n	8003314 <inputseria+0x2f8>
 80032d8:	200003c4 	.word	0x200003c4
 80032dc:	442e8000 	.word	0x442e8000
 80032e0:	445c0000 	.word	0x445c0000
 80032e4:	44770000 	.word	0x44770000
 80032e8:	44a4e000 	.word	0x44a4e000
 80032ec:	4492e000 	.word	0x4492e000
 80032f0:	4482e000 	.word	0x4482e000
 80032f4:	44440000 	.word	0x44440000
 80032f8:	4424c000 	.word	0x4424c000
 80032fc:	4412c000 	.word	0x4412c000
 8003300:	43930000 	.word	0x43930000
 8003304:	43a50000 	.word	0x43a50000
 8003308:	43ae8000 	.word	0x43ae8000
 800330c:	43c40000 	.word	0x43c40000
 8003310:	43dc0000 	.word	0x43dc0000
	seria[45].interval = 494;
 8003314:	4bb9      	ldr	r3, [pc, #740]	; (80035fc <inputseria+0x5e0>)
 8003316:	4aba      	ldr	r2, [pc, #744]	; (8003600 <inputseria+0x5e4>)
 8003318:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	seria[45].waittime = 462;
 800331c:	4bb7      	ldr	r3, [pc, #732]	; (80035fc <inputseria+0x5e0>)
 800331e:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003322:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
	seria[46].interval = 523;
 8003326:	4bb5      	ldr	r3, [pc, #724]	; (80035fc <inputseria+0x5e0>)
 8003328:	4ab6      	ldr	r2, [pc, #728]	; (8003604 <inputseria+0x5e8>)
 800332a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	seria[46].waittime = 224;
 800332e:	4bb3      	ldr	r3, [pc, #716]	; (80035fc <inputseria+0x5e0>)
 8003330:	22e0      	movs	r2, #224	; 0xe0
 8003332:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	seria[47].interval = 494;
 8003336:	4bb1      	ldr	r3, [pc, #708]	; (80035fc <inputseria+0x5e0>)
 8003338:	4ab1      	ldr	r2, [pc, #708]	; (8003600 <inputseria+0x5e4>)
 800333a:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	seria[47].waittime = 224;
 800333e:	4baf      	ldr	r3, [pc, #700]	; (80035fc <inputseria+0x5e0>)
 8003340:	22e0      	movs	r2, #224	; 0xe0
 8003342:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	seria[48].interval = 330;
 8003346:	4bad      	ldr	r3, [pc, #692]	; (80035fc <inputseria+0x5e0>)
 8003348:	4aaf      	ldr	r2, [pc, #700]	; (8003608 <inputseria+0x5ec>)
 800334a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	seria[48].waittime = 1400;
 800334e:	4bab      	ldr	r3, [pc, #684]	; (80035fc <inputseria+0x5e0>)
 8003350:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003354:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184
	seria[49].interval = 698;
 8003358:	4ba8      	ldr	r3, [pc, #672]	; (80035fc <inputseria+0x5e0>)
 800335a:	4aac      	ldr	r2, [pc, #688]	; (800360c <inputseria+0x5f0>)
 800335c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	seria[49].waittime = 224;
 8003360:	4ba6      	ldr	r3, [pc, #664]	; (80035fc <inputseria+0x5e0>)
 8003362:	22e0      	movs	r2, #224	; 0xe0
 8003364:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
	seria[50].interval = 784;
 8003368:	4ba4      	ldr	r3, [pc, #656]	; (80035fc <inputseria+0x5e0>)
 800336a:	4aa9      	ldr	r2, [pc, #676]	; (8003610 <inputseria+0x5f4>)
 800336c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	seria[50].waittime = 224;
 8003370:	4ba2      	ldr	r3, [pc, #648]	; (80035fc <inputseria+0x5e0>)
 8003372:	22e0      	movs	r2, #224	; 0xe0
 8003374:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
	seria[51].interval = 880;
 8003378:	4ba0      	ldr	r3, [pc, #640]	; (80035fc <inputseria+0x5e0>)
 800337a:	4aa6      	ldr	r2, [pc, #664]	; (8003614 <inputseria+0x5f8>)
 800337c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	seria[51].waittime = 462;
 8003380:	4b9e      	ldr	r3, [pc, #632]	; (80035fc <inputseria+0x5e0>)
 8003382:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003386:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
	seria[52].interval = 988;
 800338a:	4b9c      	ldr	r3, [pc, #624]	; (80035fc <inputseria+0x5e0>)
 800338c:	4aa2      	ldr	r2, [pc, #648]	; (8003618 <inputseria+0x5fc>)
 800338e:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	seria[52].waittime = 224;
 8003392:	4b9a      	ldr	r3, [pc, #616]	; (80035fc <inputseria+0x5e0>)
 8003394:	22e0      	movs	r2, #224	; 0xe0
 8003396:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
	seria[53].interval = 1047;
 800339a:	4b98      	ldr	r3, [pc, #608]	; (80035fc <inputseria+0x5e0>)
 800339c:	4a9f      	ldr	r2, [pc, #636]	; (800361c <inputseria+0x600>)
 800339e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	seria[53].waittime = 224;
 80033a2:	4b96      	ldr	r3, [pc, #600]	; (80035fc <inputseria+0x5e0>)
 80033a4:	22e0      	movs	r2, #224	; 0xe0
 80033a6:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
	seria[54].interval = 1175;
 80033aa:	4b94      	ldr	r3, [pc, #592]	; (80035fc <inputseria+0x5e0>)
 80033ac:	4a9c      	ldr	r2, [pc, #624]	; (8003620 <inputseria+0x604>)
 80033ae:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	seria[54].waittime = 462;
 80033b2:	4b92      	ldr	r3, [pc, #584]	; (80035fc <inputseria+0x5e0>)
 80033b4:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80033b8:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
	seria[55].interval = 1319;
 80033bc:	4b8f      	ldr	r3, [pc, #572]	; (80035fc <inputseria+0x5e0>)
 80033be:	4a99      	ldr	r2, [pc, #612]	; (8003624 <inputseria+0x608>)
 80033c0:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	seria[55].waittime = 224;
 80033c4:	4b8d      	ldr	r3, [pc, #564]	; (80035fc <inputseria+0x5e0>)
 80033c6:	22e0      	movs	r2, #224	; 0xe0
 80033c8:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
	seria[56].interval = 1397;
 80033cc:	4b8b      	ldr	r3, [pc, #556]	; (80035fc <inputseria+0x5e0>)
 80033ce:	4a96      	ldr	r2, [pc, #600]	; (8003628 <inputseria+0x60c>)
 80033d0:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
	seria[56].waittime = 224;
 80033d4:	4b89      	ldr	r3, [pc, #548]	; (80035fc <inputseria+0x5e0>)
 80033d6:	22e0      	movs	r2, #224	; 0xe0
 80033d8:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
	seria[57].interval = 1568;
 80033dc:	4b87      	ldr	r3, [pc, #540]	; (80035fc <inputseria+0x5e0>)
 80033de:	4a93      	ldr	r2, [pc, #588]	; (800362c <inputseria+0x610>)
 80033e0:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
	seria[57].waittime = 1400;
 80033e4:	4b85      	ldr	r3, [pc, #532]	; (80035fc <inputseria+0x5e0>)
 80033e6:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80033ea:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
	seria[58].interval = 294;
 80033ee:	4b83      	ldr	r3, [pc, #524]	; (80035fc <inputseria+0x5e0>)
 80033f0:	4a8f      	ldr	r2, [pc, #572]	; (8003630 <inputseria+0x614>)
 80033f2:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	seria[58].waittime = 224;
 80033f6:	4b81      	ldr	r3, [pc, #516]	; (80035fc <inputseria+0x5e0>)
 80033f8:	22e0      	movs	r2, #224	; 0xe0
 80033fa:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
	seria[59].interval = 330;
 80033fe:	4b7f      	ldr	r3, [pc, #508]	; (80035fc <inputseria+0x5e0>)
 8003400:	4a81      	ldr	r2, [pc, #516]	; (8003608 <inputseria+0x5ec>)
 8003402:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	seria[59].waittime = 224;
 8003406:	4b7d      	ldr	r3, [pc, #500]	; (80035fc <inputseria+0x5e0>)
 8003408:	22e0      	movs	r2, #224	; 0xe0
 800340a:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
	seria[60].interval = 349;
 800340e:	4b7b      	ldr	r3, [pc, #492]	; (80035fc <inputseria+0x5e0>)
 8003410:	4a88      	ldr	r2, [pc, #544]	; (8003634 <inputseria+0x618>)
 8003412:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	seria[60].waittime = 462;
 8003416:	4b79      	ldr	r3, [pc, #484]	; (80035fc <inputseria+0x5e0>)
 8003418:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800341c:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
	seria[61].interval = 392;
 8003420:	4b76      	ldr	r3, [pc, #472]	; (80035fc <inputseria+0x5e0>)
 8003422:	4a85      	ldr	r2, [pc, #532]	; (8003638 <inputseria+0x61c>)
 8003424:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	seria[61].waittime = 224;
 8003428:	4b74      	ldr	r3, [pc, #464]	; (80035fc <inputseria+0x5e0>)
 800342a:	22e0      	movs	r2, #224	; 0xe0
 800342c:	f8a3 21ec 	strh.w	r2, [r3, #492]	; 0x1ec
	seria[62].interval = 440;
 8003430:	4b72      	ldr	r3, [pc, #456]	; (80035fc <inputseria+0x5e0>)
 8003432:	4a82      	ldr	r2, [pc, #520]	; (800363c <inputseria+0x620>)
 8003434:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	seria[62].waittime = 224;
 8003438:	4b70      	ldr	r3, [pc, #448]	; (80035fc <inputseria+0x5e0>)
 800343a:	22e0      	movs	r2, #224	; 0xe0
 800343c:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
	seria[63].interval = 494;
 8003440:	4b6e      	ldr	r3, [pc, #440]	; (80035fc <inputseria+0x5e0>)
 8003442:	4a6f      	ldr	r2, [pc, #444]	; (8003600 <inputseria+0x5e4>)
 8003444:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	seria[63].waittime = 462;
 8003448:	4b6c      	ldr	r3, [pc, #432]	; (80035fc <inputseria+0x5e0>)
 800344a:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800344e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	seria[64].interval = 523;
 8003452:	4b6a      	ldr	r3, [pc, #424]	; (80035fc <inputseria+0x5e0>)
 8003454:	4a6b      	ldr	r2, [pc, #428]	; (8003604 <inputseria+0x5e8>)
 8003456:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	seria[64].waittime = 224;
 800345a:	4b68      	ldr	r3, [pc, #416]	; (80035fc <inputseria+0x5e0>)
 800345c:	22e0      	movs	r2, #224	; 0xe0
 800345e:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	seria[65].interval = 494;
 8003462:	4b66      	ldr	r3, [pc, #408]	; (80035fc <inputseria+0x5e0>)
 8003464:	4a66      	ldr	r2, [pc, #408]	; (8003600 <inputseria+0x5e4>)
 8003466:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	seria[65].waittime = 224;
 800346a:	4b64      	ldr	r3, [pc, #400]	; (80035fc <inputseria+0x5e0>)
 800346c:	22e0      	movs	r2, #224	; 0xe0
 800346e:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
	seria[66].interval = 330;
 8003472:	4b62      	ldr	r3, [pc, #392]	; (80035fc <inputseria+0x5e0>)
 8003474:	4a64      	ldr	r2, [pc, #400]	; (8003608 <inputseria+0x5ec>)
 8003476:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	seria[66].waittime = 1400;
 800347a:	4b60      	ldr	r3, [pc, #384]	; (80035fc <inputseria+0x5e0>)
 800347c:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003480:	f8a3 2214 	strh.w	r2, [r3, #532]	; 0x214
	seria[67].interval = 698;
 8003484:	4b5d      	ldr	r3, [pc, #372]	; (80035fc <inputseria+0x5e0>)
 8003486:	4a61      	ldr	r2, [pc, #388]	; (800360c <inputseria+0x5f0>)
 8003488:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	seria[67].waittime = 224;
 800348c:	4b5b      	ldr	r3, [pc, #364]	; (80035fc <inputseria+0x5e0>)
 800348e:	22e0      	movs	r2, #224	; 0xe0
 8003490:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
	seria[68].interval = 659;
 8003494:	4b59      	ldr	r3, [pc, #356]	; (80035fc <inputseria+0x5e0>)
 8003496:	4a6a      	ldr	r2, [pc, #424]	; (8003640 <inputseria+0x624>)
 8003498:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	seria[68].waittime = 105;
 800349c:	4b57      	ldr	r3, [pc, #348]	; (80035fc <inputseria+0x5e0>)
 800349e:	2269      	movs	r2, #105	; 0x69
 80034a0:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
	seria[69].interval = 880;
 80034a4:	4b55      	ldr	r3, [pc, #340]	; (80035fc <inputseria+0x5e0>)
 80034a6:	4a5b      	ldr	r2, [pc, #364]	; (8003614 <inputseria+0x5f8>)
 80034a8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	seria[69].waittime = 224;
 80034ac:	4b53      	ldr	r3, [pc, #332]	; (80035fc <inputseria+0x5e0>)
 80034ae:	22e0      	movs	r2, #224	; 0xe0
 80034b0:	f8a3 222c 	strh.w	r2, [r3, #556]	; 0x22c
	seria[70].interval = 784;
 80034b4:	4b51      	ldr	r3, [pc, #324]	; (80035fc <inputseria+0x5e0>)
 80034b6:	4a56      	ldr	r2, [pc, #344]	; (8003610 <inputseria+0x5f4>)
 80034b8:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	seria[70].waittime = 105;
 80034bc:	4b4f      	ldr	r3, [pc, #316]	; (80035fc <inputseria+0x5e0>)
 80034be:	2269      	movs	r2, #105	; 0x69
 80034c0:	f8a3 2234 	strh.w	r2, [r3, #564]	; 0x234
	seria[71].interval = 988;
 80034c4:	4b4d      	ldr	r3, [pc, #308]	; (80035fc <inputseria+0x5e0>)
 80034c6:	4a54      	ldr	r2, [pc, #336]	; (8003618 <inputseria+0x5fc>)
 80034c8:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	seria[71].waittime = 224;
 80034cc:	4b4b      	ldr	r3, [pc, #300]	; (80035fc <inputseria+0x5e0>)
 80034ce:	22e0      	movs	r2, #224	; 0xe0
 80034d0:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
	seria[72].interval = 880;
 80034d4:	4b49      	ldr	r3, [pc, #292]	; (80035fc <inputseria+0x5e0>)
 80034d6:	4a4f      	ldr	r2, [pc, #316]	; (8003614 <inputseria+0x5f8>)
 80034d8:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	seria[72].waittime = 105;
 80034dc:	4b47      	ldr	r3, [pc, #284]	; (80035fc <inputseria+0x5e0>)
 80034de:	2269      	movs	r2, #105	; 0x69
 80034e0:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
	seria[73].interval = 1047;
 80034e4:	4b45      	ldr	r3, [pc, #276]	; (80035fc <inputseria+0x5e0>)
 80034e6:	4a4d      	ldr	r2, [pc, #308]	; (800361c <inputseria+0x600>)
 80034e8:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	seria[73].waittime = 224;
 80034ec:	4b43      	ldr	r3, [pc, #268]	; (80035fc <inputseria+0x5e0>)
 80034ee:	22e0      	movs	r2, #224	; 0xe0
 80034f0:	f8a3 224c 	strh.w	r2, [r3, #588]	; 0x24c
	seria[74].interval = 988;
 80034f4:	4b41      	ldr	r3, [pc, #260]	; (80035fc <inputseria+0x5e0>)
 80034f6:	4a48      	ldr	r2, [pc, #288]	; (8003618 <inputseria+0x5fc>)
 80034f8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	seria[74].waittime = 105;
 80034fc:	4b3f      	ldr	r3, [pc, #252]	; (80035fc <inputseria+0x5e0>)
 80034fe:	2269      	movs	r2, #105	; 0x69
 8003500:	f8a3 2254 	strh.w	r2, [r3, #596]	; 0x254
	seria[75].interval = 1175;
 8003504:	4b3d      	ldr	r3, [pc, #244]	; (80035fc <inputseria+0x5e0>)
 8003506:	4a46      	ldr	r2, [pc, #280]	; (8003620 <inputseria+0x604>)
 8003508:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	seria[75].waittime = 224;
 800350c:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <inputseria+0x5e0>)
 800350e:	22e0      	movs	r2, #224	; 0xe0
 8003510:	f8a3 225c 	strh.w	r2, [r3, #604]	; 0x25c
	seria[76].interval = 1047;
 8003514:	4b39      	ldr	r3, [pc, #228]	; (80035fc <inputseria+0x5e0>)
 8003516:	4a41      	ldr	r2, [pc, #260]	; (800361c <inputseria+0x600>)
 8003518:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	seria[76].waittime = 105;
 800351c:	4b37      	ldr	r3, [pc, #220]	; (80035fc <inputseria+0x5e0>)
 800351e:	2269      	movs	r2, #105	; 0x69
 8003520:	f8a3 2264 	strh.w	r2, [r3, #612]	; 0x264
	seria[77].interval = 1319;
 8003524:	4b35      	ldr	r3, [pc, #212]	; (80035fc <inputseria+0x5e0>)
 8003526:	4a3f      	ldr	r2, [pc, #252]	; (8003624 <inputseria+0x608>)
 8003528:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	seria[77].waittime = 224;
 800352c:	4b33      	ldr	r3, [pc, #204]	; (80035fc <inputseria+0x5e0>)
 800352e:	22e0      	movs	r2, #224	; 0xe0
 8003530:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
	seria[78].interval = 1175;
 8003534:	4b31      	ldr	r3, [pc, #196]	; (80035fc <inputseria+0x5e0>)
 8003536:	4a3a      	ldr	r2, [pc, #232]	; (8003620 <inputseria+0x604>)
 8003538:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	seria[78].waittime = 105;
 800353c:	4b2f      	ldr	r3, [pc, #188]	; (80035fc <inputseria+0x5e0>)
 800353e:	2269      	movs	r2, #105	; 0x69
 8003540:	f8a3 2274 	strh.w	r2, [r3, #628]	; 0x274
	seria[79].interval = 1397;
 8003544:	4b2d      	ldr	r3, [pc, #180]	; (80035fc <inputseria+0x5e0>)
 8003546:	4a38      	ldr	r2, [pc, #224]	; (8003628 <inputseria+0x60c>)
 8003548:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	seria[79].waittime = 224;
 800354c:	4b2b      	ldr	r3, [pc, #172]	; (80035fc <inputseria+0x5e0>)
 800354e:	22e0      	movs	r2, #224	; 0xe0
 8003550:	f8a3 227c 	strh.w	r2, [r3, #636]	; 0x27c
	seria[80].interval = 1319;
 8003554:	4b29      	ldr	r3, [pc, #164]	; (80035fc <inputseria+0x5e0>)
 8003556:	4a33      	ldr	r2, [pc, #204]	; (8003624 <inputseria+0x608>)
 8003558:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	seria[80].waittime = 105;
 800355c:	4b27      	ldr	r3, [pc, #156]	; (80035fc <inputseria+0x5e0>)
 800355e:	2269      	movs	r2, #105	; 0x69
 8003560:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	seria[81].interval = 988;
 8003564:	4b25      	ldr	r3, [pc, #148]	; (80035fc <inputseria+0x5e0>)
 8003566:	4a2c      	ldr	r2, [pc, #176]	; (8003618 <inputseria+0x5fc>)
 8003568:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	seria[81].waittime = 105;
 800356c:	4b23      	ldr	r3, [pc, #140]	; (80035fc <inputseria+0x5e0>)
 800356e:	2269      	movs	r2, #105	; 0x69
 8003570:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
	seria[82].interval = 1047;
 8003574:	4b21      	ldr	r3, [pc, #132]	; (80035fc <inputseria+0x5e0>)
 8003576:	4a29      	ldr	r2, [pc, #164]	; (800361c <inputseria+0x600>)
 8003578:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	seria[82].waittime = 105;
 800357c:	4b1f      	ldr	r3, [pc, #124]	; (80035fc <inputseria+0x5e0>)
 800357e:	2269      	movs	r2, #105	; 0x69
 8003580:	f8a3 2294 	strh.w	r2, [r3, #660]	; 0x294
	seria[83].interval = 880;
 8003584:	4b1d      	ldr	r3, [pc, #116]	; (80035fc <inputseria+0x5e0>)
 8003586:	4a23      	ldr	r2, [pc, #140]	; (8003614 <inputseria+0x5f8>)
 8003588:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	seria[83].waittime = 105;
 800358c:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <inputseria+0x5e0>)
 800358e:	2269      	movs	r2, #105	; 0x69
 8003590:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
	seria[84].interval = 988;
 8003594:	4b19      	ldr	r3, [pc, #100]	; (80035fc <inputseria+0x5e0>)
 8003596:	4a20      	ldr	r2, [pc, #128]	; (8003618 <inputseria+0x5fc>)
 8003598:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	seria[84].waittime = 2576;
 800359c:	4b17      	ldr	r3, [pc, #92]	; (80035fc <inputseria+0x5e0>)
 800359e:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 80035a2:	f8a3 22a4 	strh.w	r2, [r3, #676]	; 0x2a4
	seria[85].interval = 698;
 80035a6:	4b15      	ldr	r3, [pc, #84]	; (80035fc <inputseria+0x5e0>)
 80035a8:	4a18      	ldr	r2, [pc, #96]	; (800360c <inputseria+0x5f0>)
 80035aa:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	seria[85].waittime = 224;
 80035ae:	4b13      	ldr	r3, [pc, #76]	; (80035fc <inputseria+0x5e0>)
 80035b0:	22e0      	movs	r2, #224	; 0xe0
 80035b2:	f8a3 22ac 	strh.w	r2, [r3, #684]	; 0x2ac
	seria[86].interval = 880;
 80035b6:	4b11      	ldr	r3, [pc, #68]	; (80035fc <inputseria+0x5e0>)
 80035b8:	4a16      	ldr	r2, [pc, #88]	; (8003614 <inputseria+0x5f8>)
 80035ba:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
	seria[86].waittime = 224;
 80035be:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <inputseria+0x5e0>)
 80035c0:	22e0      	movs	r2, #224	; 0xe0
 80035c2:	f8a3 22b4 	strh.w	r2, [r3, #692]	; 0x2b4
	seria[87].interval = 988;
 80035c6:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <inputseria+0x5e0>)
 80035c8:	4a13      	ldr	r2, [pc, #76]	; (8003618 <inputseria+0x5fc>)
 80035ca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
	seria[87].waittime = 462;
 80035ce:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <inputseria+0x5e0>)
 80035d0:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80035d4:	f8a3 22bc 	strh.w	r2, [r3, #700]	; 0x2bc
	seria[88].interval = 698;
 80035d8:	4b08      	ldr	r3, [pc, #32]	; (80035fc <inputseria+0x5e0>)
 80035da:	4a0c      	ldr	r2, [pc, #48]	; (800360c <inputseria+0x5f0>)
 80035dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
	seria[88].waittime = 224;
 80035e0:	4b06      	ldr	r3, [pc, #24]	; (80035fc <inputseria+0x5e0>)
 80035e2:	22e0      	movs	r2, #224	; 0xe0
 80035e4:	f8a3 22c4 	strh.w	r2, [r3, #708]	; 0x2c4
	seria[89].interval = 880;
 80035e8:	4b04      	ldr	r3, [pc, #16]	; (80035fc <inputseria+0x5e0>)
 80035ea:	4a0a      	ldr	r2, [pc, #40]	; (8003614 <inputseria+0x5f8>)
 80035ec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
	seria[89].waittime = 224;
 80035f0:	4b02      	ldr	r3, [pc, #8]	; (80035fc <inputseria+0x5e0>)
 80035f2:	22e0      	movs	r2, #224	; 0xe0
 80035f4:	f8a3 22cc 	strh.w	r2, [r3, #716]	; 0x2cc
 80035f8:	e024      	b.n	8003644 <inputseria+0x628>
 80035fa:	bf00      	nop
 80035fc:	200003c4 	.word	0x200003c4
 8003600:	43f70000 	.word	0x43f70000
 8003604:	4402c000 	.word	0x4402c000
 8003608:	43a50000 	.word	0x43a50000
 800360c:	442e8000 	.word	0x442e8000
 8003610:	44440000 	.word	0x44440000
 8003614:	445c0000 	.word	0x445c0000
 8003618:	44770000 	.word	0x44770000
 800361c:	4482e000 	.word	0x4482e000
 8003620:	4492e000 	.word	0x4492e000
 8003624:	44a4e000 	.word	0x44a4e000
 8003628:	44aea000 	.word	0x44aea000
 800362c:	44c40000 	.word	0x44c40000
 8003630:	43930000 	.word	0x43930000
 8003634:	43ae8000 	.word	0x43ae8000
 8003638:	43c40000 	.word	0x43c40000
 800363c:	43dc0000 	.word	0x43dc0000
 8003640:	4424c000 	.word	0x4424c000
	seria[90].interval = 988;
 8003644:	4bb9      	ldr	r3, [pc, #740]	; (800392c <inputseria+0x910>)
 8003646:	4aba      	ldr	r2, [pc, #744]	; (8003930 <inputseria+0x914>)
 8003648:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
	seria[90].waittime = 462;
 800364c:	4bb7      	ldr	r3, [pc, #732]	; (800392c <inputseria+0x910>)
 800364e:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003652:	f8a3 22d4 	strh.w	r2, [r3, #724]	; 0x2d4
	seria[91].interval = 698;
 8003656:	4bb5      	ldr	r3, [pc, #724]	; (800392c <inputseria+0x910>)
 8003658:	4ab6      	ldr	r2, [pc, #728]	; (8003934 <inputseria+0x918>)
 800365a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
	seria[91].waittime = 224;
 800365e:	4bb3      	ldr	r3, [pc, #716]	; (800392c <inputseria+0x910>)
 8003660:	22e0      	movs	r2, #224	; 0xe0
 8003662:	f8a3 22dc 	strh.w	r2, [r3, #732]	; 0x2dc
	seria[92].interval = 880;
 8003666:	4bb1      	ldr	r3, [pc, #708]	; (800392c <inputseria+0x910>)
 8003668:	4ab3      	ldr	r2, [pc, #716]	; (8003938 <inputseria+0x91c>)
 800366a:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
	seria[92].waittime = 224;
 800366e:	4baf      	ldr	r3, [pc, #700]	; (800392c <inputseria+0x910>)
 8003670:	22e0      	movs	r2, #224	; 0xe0
 8003672:	f8a3 22e4 	strh.w	r2, [r3, #740]	; 0x2e4
	seria[93].interval = 988;
 8003676:	4bad      	ldr	r3, [pc, #692]	; (800392c <inputseria+0x910>)
 8003678:	4aad      	ldr	r2, [pc, #692]	; (8003930 <inputseria+0x914>)
 800367a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
	seria[93].waittime = 224;
 800367e:	4bab      	ldr	r3, [pc, #684]	; (800392c <inputseria+0x910>)
 8003680:	22e0      	movs	r2, #224	; 0xe0
 8003682:	f8a3 22ec 	strh.w	r2, [r3, #748]	; 0x2ec
	seria[94].interval = 1319;
 8003686:	4ba9      	ldr	r3, [pc, #676]	; (800392c <inputseria+0x910>)
 8003688:	4aac      	ldr	r2, [pc, #688]	; (800393c <inputseria+0x920>)
 800368a:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
	seria[94].waittime = 224;
 800368e:	4ba7      	ldr	r3, [pc, #668]	; (800392c <inputseria+0x910>)
 8003690:	22e0      	movs	r2, #224	; 0xe0
 8003692:	f8a3 22f4 	strh.w	r2, [r3, #756]	; 0x2f4
	seria[95].interval = 1175;
 8003696:	4ba5      	ldr	r3, [pc, #660]	; (800392c <inputseria+0x910>)
 8003698:	4aa9      	ldr	r2, [pc, #676]	; (8003940 <inputseria+0x924>)
 800369a:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	seria[95].waittime = 462;
 800369e:	4ba3      	ldr	r3, [pc, #652]	; (800392c <inputseria+0x910>)
 80036a0:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80036a4:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
	seria[96].interval = 988;
 80036a8:	4ba0      	ldr	r3, [pc, #640]	; (800392c <inputseria+0x910>)
 80036aa:	4aa1      	ldr	r2, [pc, #644]	; (8003930 <inputseria+0x914>)
 80036ac:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
	seria[96].waittime = 224;
 80036b0:	4b9e      	ldr	r3, [pc, #632]	; (800392c <inputseria+0x910>)
 80036b2:	22e0      	movs	r2, #224	; 0xe0
 80036b4:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
	seria[97].interval = 1047;
 80036b8:	4b9c      	ldr	r3, [pc, #624]	; (800392c <inputseria+0x910>)
 80036ba:	4aa2      	ldr	r2, [pc, #648]	; (8003944 <inputseria+0x928>)
 80036bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	seria[97].waittime = 224;
 80036c0:	4b9a      	ldr	r3, [pc, #616]	; (800392c <inputseria+0x910>)
 80036c2:	22e0      	movs	r2, #224	; 0xe0
 80036c4:	f8a3 230c 	strh.w	r2, [r3, #780]	; 0x30c
	seria[98].interval = 988;
 80036c8:	4b98      	ldr	r3, [pc, #608]	; (800392c <inputseria+0x910>)
 80036ca:	4a99      	ldr	r2, [pc, #612]	; (8003930 <inputseria+0x914>)
 80036cc:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
	seria[98].waittime = 224;
 80036d0:	4b96      	ldr	r3, [pc, #600]	; (800392c <inputseria+0x910>)
 80036d2:	22e0      	movs	r2, #224	; 0xe0
 80036d4:	f8a3 2314 	strh.w	r2, [r3, #788]	; 0x314
	seria[99].interval = 784;
 80036d8:	4b94      	ldr	r3, [pc, #592]	; (800392c <inputseria+0x910>)
 80036da:	4a9b      	ldr	r2, [pc, #620]	; (8003948 <inputseria+0x92c>)
 80036dc:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
	seria[99].waittime = 224;
 80036e0:	4b92      	ldr	r3, [pc, #584]	; (800392c <inputseria+0x910>)
 80036e2:	22e0      	movs	r2, #224	; 0xe0
 80036e4:	f8a3 231c 	strh.w	r2, [r3, #796]	; 0x31c
	seria[100].interval = 659;
 80036e8:	4b90      	ldr	r3, [pc, #576]	; (800392c <inputseria+0x910>)
 80036ea:	4a98      	ldr	r2, [pc, #608]	; (800394c <inputseria+0x930>)
 80036ec:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
	seria[100].waittime = 1169;
 80036f0:	4b8e      	ldr	r3, [pc, #568]	; (800392c <inputseria+0x910>)
 80036f2:	f240 4291 	movw	r2, #1169	; 0x491
 80036f6:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324
	seria[101].interval = 587;
 80036fa:	4b8c      	ldr	r3, [pc, #560]	; (800392c <inputseria+0x910>)
 80036fc:	4a94      	ldr	r2, [pc, #592]	; (8003950 <inputseria+0x934>)
 80036fe:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	seria[101].waittime = 224;
 8003702:	4b8a      	ldr	r3, [pc, #552]	; (800392c <inputseria+0x910>)
 8003704:	22e0      	movs	r2, #224	; 0xe0
 8003706:	f8a3 232c 	strh.w	r2, [r3, #812]	; 0x32c
	seria[102].interval = 659;
 800370a:	4b88      	ldr	r3, [pc, #544]	; (800392c <inputseria+0x910>)
 800370c:	4a8f      	ldr	r2, [pc, #572]	; (800394c <inputseria+0x930>)
 800370e:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
	seria[102].waittime = 224;
 8003712:	4b86      	ldr	r3, [pc, #536]	; (800392c <inputseria+0x910>)
 8003714:	22e0      	movs	r2, #224	; 0xe0
 8003716:	f8a3 2334 	strh.w	r2, [r3, #820]	; 0x334
	seria[103].interval = 784;
 800371a:	4b84      	ldr	r3, [pc, #528]	; (800392c <inputseria+0x910>)
 800371c:	4a8a      	ldr	r2, [pc, #552]	; (8003948 <inputseria+0x92c>)
 800371e:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
	seria[103].waittime = 224;
 8003722:	4b82      	ldr	r3, [pc, #520]	; (800392c <inputseria+0x910>)
 8003724:	22e0      	movs	r2, #224	; 0xe0
 8003726:	f8a3 233c 	strh.w	r2, [r3, #828]	; 0x33c
	seria[104].interval = 659;
 800372a:	4b80      	ldr	r3, [pc, #512]	; (800392c <inputseria+0x910>)
 800372c:	4a87      	ldr	r2, [pc, #540]	; (800394c <inputseria+0x930>)
 800372e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
	seria[104].waittime = 1400;
 8003732:	4b7e      	ldr	r3, [pc, #504]	; (800392c <inputseria+0x910>)
 8003734:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003738:	f8a3 2344 	strh.w	r2, [r3, #836]	; 0x344
	seria[105].interval = 698;
 800373c:	4b7b      	ldr	r3, [pc, #492]	; (800392c <inputseria+0x910>)
 800373e:	4a7d      	ldr	r2, [pc, #500]	; (8003934 <inputseria+0x918>)
 8003740:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	seria[105].waittime = 224;
 8003744:	4b79      	ldr	r3, [pc, #484]	; (800392c <inputseria+0x910>)
 8003746:	22e0      	movs	r2, #224	; 0xe0
 8003748:	f8a3 234c 	strh.w	r2, [r3, #844]	; 0x34c
	seria[106].interval = 880;
 800374c:	4b77      	ldr	r3, [pc, #476]	; (800392c <inputseria+0x910>)
 800374e:	4a7a      	ldr	r2, [pc, #488]	; (8003938 <inputseria+0x91c>)
 8003750:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
	seria[106].waittime = 224;
 8003754:	4b75      	ldr	r3, [pc, #468]	; (800392c <inputseria+0x910>)
 8003756:	22e0      	movs	r2, #224	; 0xe0
 8003758:	f8a3 2354 	strh.w	r2, [r3, #852]	; 0x354
	seria[107].interval = 988;
 800375c:	4b73      	ldr	r3, [pc, #460]	; (800392c <inputseria+0x910>)
 800375e:	4a74      	ldr	r2, [pc, #464]	; (8003930 <inputseria+0x914>)
 8003760:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
	seria[107].waittime = 462;
 8003764:	4b71      	ldr	r3, [pc, #452]	; (800392c <inputseria+0x910>)
 8003766:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800376a:	f8a3 235c 	strh.w	r2, [r3, #860]	; 0x35c
	seria[108].interval = 698;
 800376e:	4b6f      	ldr	r3, [pc, #444]	; (800392c <inputseria+0x910>)
 8003770:	4a70      	ldr	r2, [pc, #448]	; (8003934 <inputseria+0x918>)
 8003772:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
	seria[108].waittime = 224;
 8003776:	4b6d      	ldr	r3, [pc, #436]	; (800392c <inputseria+0x910>)
 8003778:	22e0      	movs	r2, #224	; 0xe0
 800377a:	f8a3 2364 	strh.w	r2, [r3, #868]	; 0x364
	seria[109].interval = 880;
 800377e:	4b6b      	ldr	r3, [pc, #428]	; (800392c <inputseria+0x910>)
 8003780:	4a6d      	ldr	r2, [pc, #436]	; (8003938 <inputseria+0x91c>)
 8003782:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
	seria[109].waittime = 224;
 8003786:	4b69      	ldr	r3, [pc, #420]	; (800392c <inputseria+0x910>)
 8003788:	22e0      	movs	r2, #224	; 0xe0
 800378a:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
	seria[110].interval = 988;
 800378e:	4b67      	ldr	r3, [pc, #412]	; (800392c <inputseria+0x910>)
 8003790:	4a67      	ldr	r2, [pc, #412]	; (8003930 <inputseria+0x914>)
 8003792:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
	seria[110].waittime = 462;
 8003796:	4b65      	ldr	r3, [pc, #404]	; (800392c <inputseria+0x910>)
 8003798:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800379c:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
	seria[111].interval = 698;
 80037a0:	4b62      	ldr	r3, [pc, #392]	; (800392c <inputseria+0x910>)
 80037a2:	4a64      	ldr	r2, [pc, #400]	; (8003934 <inputseria+0x918>)
 80037a4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
	seria[111].waittime = 224;
 80037a8:	4b60      	ldr	r3, [pc, #384]	; (800392c <inputseria+0x910>)
 80037aa:	22e0      	movs	r2, #224	; 0xe0
 80037ac:	f8a3 237c 	strh.w	r2, [r3, #892]	; 0x37c
	seria[112].interval = 880;
 80037b0:	4b5e      	ldr	r3, [pc, #376]	; (800392c <inputseria+0x910>)
 80037b2:	4a61      	ldr	r2, [pc, #388]	; (8003938 <inputseria+0x91c>)
 80037b4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
	seria[112].waittime = 224;
 80037b8:	4b5c      	ldr	r3, [pc, #368]	; (800392c <inputseria+0x910>)
 80037ba:	22e0      	movs	r2, #224	; 0xe0
 80037bc:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
	seria[113].interval = 988;
 80037c0:	4b5a      	ldr	r3, [pc, #360]	; (800392c <inputseria+0x910>)
 80037c2:	4a5b      	ldr	r2, [pc, #364]	; (8003930 <inputseria+0x914>)
 80037c4:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	seria[113].waittime = 224;
 80037c8:	4b58      	ldr	r3, [pc, #352]	; (800392c <inputseria+0x910>)
 80037ca:	22e0      	movs	r2, #224	; 0xe0
 80037cc:	f8a3 238c 	strh.w	r2, [r3, #908]	; 0x38c
	seria[114].interval = 1319;
 80037d0:	4b56      	ldr	r3, [pc, #344]	; (800392c <inputseria+0x910>)
 80037d2:	4a5a      	ldr	r2, [pc, #360]	; (800393c <inputseria+0x920>)
 80037d4:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
	seria[114].waittime = 224;
 80037d8:	4b54      	ldr	r3, [pc, #336]	; (800392c <inputseria+0x910>)
 80037da:	22e0      	movs	r2, #224	; 0xe0
 80037dc:	f8a3 2394 	strh.w	r2, [r3, #916]	; 0x394
	seria[115].interval = 1175;
 80037e0:	4b52      	ldr	r3, [pc, #328]	; (800392c <inputseria+0x910>)
 80037e2:	4a57      	ldr	r2, [pc, #348]	; (8003940 <inputseria+0x924>)
 80037e4:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
	seria[115].waittime = 462;
 80037e8:	4b50      	ldr	r3, [pc, #320]	; (800392c <inputseria+0x910>)
 80037ea:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80037ee:	f8a3 239c 	strh.w	r2, [r3, #924]	; 0x39c
	seria[116].interval = 988;
 80037f2:	4b4e      	ldr	r3, [pc, #312]	; (800392c <inputseria+0x910>)
 80037f4:	4a4e      	ldr	r2, [pc, #312]	; (8003930 <inputseria+0x914>)
 80037f6:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	seria[116].waittime = 224;
 80037fa:	4b4c      	ldr	r3, [pc, #304]	; (800392c <inputseria+0x910>)
 80037fc:	22e0      	movs	r2, #224	; 0xe0
 80037fe:	f8a3 23a4 	strh.w	r2, [r3, #932]	; 0x3a4
	seria[117].interval = 1047;
 8003802:	4b4a      	ldr	r3, [pc, #296]	; (800392c <inputseria+0x910>)
 8003804:	4a4f      	ldr	r2, [pc, #316]	; (8003944 <inputseria+0x928>)
 8003806:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
	seria[117].waittime = 224;
 800380a:	4b48      	ldr	r3, [pc, #288]	; (800392c <inputseria+0x910>)
 800380c:	22e0      	movs	r2, #224	; 0xe0
 800380e:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
	seria[118].interval = 1319;
 8003812:	4b46      	ldr	r3, [pc, #280]	; (800392c <inputseria+0x910>)
 8003814:	4a49      	ldr	r2, [pc, #292]	; (800393c <inputseria+0x920>)
 8003816:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
	seria[118].waittime = 224;
 800381a:	4b44      	ldr	r3, [pc, #272]	; (800392c <inputseria+0x910>)
 800381c:	22e0      	movs	r2, #224	; 0xe0
 800381e:	f8a3 23b4 	strh.w	r2, [r3, #948]	; 0x3b4
	seria[119].interval = 988;
 8003822:	4b42      	ldr	r3, [pc, #264]	; (800392c <inputseria+0x910>)
 8003824:	4a42      	ldr	r2, [pc, #264]	; (8003930 <inputseria+0x914>)
 8003826:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
	seria[119].waittime = 224;
 800382a:	4b40      	ldr	r3, [pc, #256]	; (800392c <inputseria+0x910>)
 800382c:	22e0      	movs	r2, #224	; 0xe0
 800382e:	f8a3 23bc 	strh.w	r2, [r3, #956]	; 0x3bc
	seria[120].interval = 784;
 8003832:	4b3e      	ldr	r3, [pc, #248]	; (800392c <inputseria+0x910>)
 8003834:	4a44      	ldr	r2, [pc, #272]	; (8003948 <inputseria+0x92c>)
 8003836:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
	seria[120].waittime = 1169;
 800383a:	4b3c      	ldr	r3, [pc, #240]	; (800392c <inputseria+0x910>)
 800383c:	f240 4291 	movw	r2, #1169	; 0x491
 8003840:	f8a3 23c4 	strh.w	r2, [r3, #964]	; 0x3c4
	seria[121].interval = 988;
 8003844:	4b39      	ldr	r3, [pc, #228]	; (800392c <inputseria+0x910>)
 8003846:	4a3a      	ldr	r2, [pc, #232]	; (8003930 <inputseria+0x914>)
 8003848:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
	seria[121].waittime = 224;
 800384c:	4b37      	ldr	r3, [pc, #220]	; (800392c <inputseria+0x910>)
 800384e:	22e0      	movs	r2, #224	; 0xe0
 8003850:	f8a3 23cc 	strh.w	r2, [r3, #972]	; 0x3cc
	seria[122].interval = 784;
 8003854:	4b35      	ldr	r3, [pc, #212]	; (800392c <inputseria+0x910>)
 8003856:	4a3c      	ldr	r2, [pc, #240]	; (8003948 <inputseria+0x92c>)
 8003858:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
	seria[122].waittime = 224;
 800385c:	4b33      	ldr	r3, [pc, #204]	; (800392c <inputseria+0x910>)
 800385e:	22e0      	movs	r2, #224	; 0xe0
 8003860:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4
	seria[123].interval = 587;
 8003864:	4b31      	ldr	r3, [pc, #196]	; (800392c <inputseria+0x910>)
 8003866:	4a3a      	ldr	r2, [pc, #232]	; (8003950 <inputseria+0x934>)
 8003868:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
	seria[123].waittime = 224;
 800386c:	4b2f      	ldr	r3, [pc, #188]	; (800392c <inputseria+0x910>)
 800386e:	22e0      	movs	r2, #224	; 0xe0
 8003870:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
	seria[124].interval = 659;
 8003874:	4b2d      	ldr	r3, [pc, #180]	; (800392c <inputseria+0x910>)
 8003876:	4a35      	ldr	r2, [pc, #212]	; (800394c <inputseria+0x930>)
 8003878:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
	seria[124].waittime = 1400;
 800387c:	4b2b      	ldr	r3, [pc, #172]	; (800392c <inputseria+0x910>)
 800387e:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003882:	f8a3 23e4 	strh.w	r2, [r3, #996]	; 0x3e4
	seria[125].interval = 294;
 8003886:	4b29      	ldr	r3, [pc, #164]	; (800392c <inputseria+0x910>)
 8003888:	4a32      	ldr	r2, [pc, #200]	; (8003954 <inputseria+0x938>)
 800388a:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
	seria[125].waittime = 224;
 800388e:	4b27      	ldr	r3, [pc, #156]	; (800392c <inputseria+0x910>)
 8003890:	22e0      	movs	r2, #224	; 0xe0
 8003892:	f8a3 23ec 	strh.w	r2, [r3, #1004]	; 0x3ec
	seria[126].interval = 330;
 8003896:	4b25      	ldr	r3, [pc, #148]	; (800392c <inputseria+0x910>)
 8003898:	4a2f      	ldr	r2, [pc, #188]	; (8003958 <inputseria+0x93c>)
 800389a:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
	seria[126].waittime = 224;
 800389e:	4b23      	ldr	r3, [pc, #140]	; (800392c <inputseria+0x910>)
 80038a0:	22e0      	movs	r2, #224	; 0xe0
 80038a2:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4
	seria[127].interval = 349;
 80038a6:	4b21      	ldr	r3, [pc, #132]	; (800392c <inputseria+0x910>)
 80038a8:	4a2c      	ldr	r2, [pc, #176]	; (800395c <inputseria+0x940>)
 80038aa:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
	seria[127].waittime = 462;
 80038ae:	4b1f      	ldr	r3, [pc, #124]	; (800392c <inputseria+0x910>)
 80038b0:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80038b4:	f8a3 23fc 	strh.w	r2, [r3, #1020]	; 0x3fc
	seria[128].interval = 392;
 80038b8:	4b1c      	ldr	r3, [pc, #112]	; (800392c <inputseria+0x910>)
 80038ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038be:	4a28      	ldr	r2, [pc, #160]	; (8003960 <inputseria+0x944>)
 80038c0:	601a      	str	r2, [r3, #0]
	seria[128].waittime = 224;
 80038c2:	4b1a      	ldr	r3, [pc, #104]	; (800392c <inputseria+0x910>)
 80038c4:	22e0      	movs	r2, #224	; 0xe0
 80038c6:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	seria[129].interval = 440;
 80038ca:	4b18      	ldr	r3, [pc, #96]	; (800392c <inputseria+0x910>)
 80038cc:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80038d0:	4a24      	ldr	r2, [pc, #144]	; (8003964 <inputseria+0x948>)
 80038d2:	601a      	str	r2, [r3, #0]
	seria[129].waittime = 224;
 80038d4:	4b15      	ldr	r3, [pc, #84]	; (800392c <inputseria+0x910>)
 80038d6:	22e0      	movs	r2, #224	; 0xe0
 80038d8:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
	seria[130].interval = 494;
 80038dc:	4b13      	ldr	r3, [pc, #76]	; (800392c <inputseria+0x910>)
 80038de:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80038e2:	4a21      	ldr	r2, [pc, #132]	; (8003968 <inputseria+0x94c>)
 80038e4:	601a      	str	r2, [r3, #0]
	seria[130].waittime = 462;
 80038e6:	4b11      	ldr	r3, [pc, #68]	; (800392c <inputseria+0x910>)
 80038e8:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80038ec:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
	seria[131].interval = 523;
 80038f0:	4b0e      	ldr	r3, [pc, #56]	; (800392c <inputseria+0x910>)
 80038f2:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80038f6:	4a1d      	ldr	r2, [pc, #116]	; (800396c <inputseria+0x950>)
 80038f8:	601a      	str	r2, [r3, #0]
	seria[131].waittime = 224;
 80038fa:	4b0c      	ldr	r3, [pc, #48]	; (800392c <inputseria+0x910>)
 80038fc:	22e0      	movs	r2, #224	; 0xe0
 80038fe:	f8a3 241c 	strh.w	r2, [r3, #1052]	; 0x41c
	seria[132].interval = 494;
 8003902:	4b0a      	ldr	r3, [pc, #40]	; (800392c <inputseria+0x910>)
 8003904:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8003908:	4a17      	ldr	r2, [pc, #92]	; (8003968 <inputseria+0x94c>)
 800390a:	601a      	str	r2, [r3, #0]
	seria[132].waittime = 224;
 800390c:	4b07      	ldr	r3, [pc, #28]	; (800392c <inputseria+0x910>)
 800390e:	22e0      	movs	r2, #224	; 0xe0
 8003910:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
	seria[133].interval = 330;
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <inputseria+0x910>)
 8003916:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800391a:	4a0f      	ldr	r2, [pc, #60]	; (8003958 <inputseria+0x93c>)
 800391c:	601a      	str	r2, [r3, #0]
	seria[133].waittime = 1400;
 800391e:	4b03      	ldr	r3, [pc, #12]	; (800392c <inputseria+0x910>)
 8003920:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003924:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
 8003928:	e022      	b.n	8003970 <inputseria+0x954>
 800392a:	bf00      	nop
 800392c:	200003c4 	.word	0x200003c4
 8003930:	44770000 	.word	0x44770000
 8003934:	442e8000 	.word	0x442e8000
 8003938:	445c0000 	.word	0x445c0000
 800393c:	44a4e000 	.word	0x44a4e000
 8003940:	4492e000 	.word	0x4492e000
 8003944:	4482e000 	.word	0x4482e000
 8003948:	44440000 	.word	0x44440000
 800394c:	4424c000 	.word	0x4424c000
 8003950:	4412c000 	.word	0x4412c000
 8003954:	43930000 	.word	0x43930000
 8003958:	43a50000 	.word	0x43a50000
 800395c:	43ae8000 	.word	0x43ae8000
 8003960:	43c40000 	.word	0x43c40000
 8003964:	43dc0000 	.word	0x43dc0000
 8003968:	43f70000 	.word	0x43f70000
 800396c:	4402c000 	.word	0x4402c000
	seria[134].interval = 698;
 8003970:	4ba7      	ldr	r3, [pc, #668]	; (8003c10 <inputseria+0xbf4>)
 8003972:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8003976:	4aa7      	ldr	r2, [pc, #668]	; (8003c14 <inputseria+0xbf8>)
 8003978:	601a      	str	r2, [r3, #0]
	seria[134].waittime = 224;
 800397a:	4ba5      	ldr	r3, [pc, #660]	; (8003c10 <inputseria+0xbf4>)
 800397c:	22e0      	movs	r2, #224	; 0xe0
 800397e:	f8a3 2434 	strh.w	r2, [r3, #1076]	; 0x434
	seria[135].interval = 784;
 8003982:	4ba3      	ldr	r3, [pc, #652]	; (8003c10 <inputseria+0xbf4>)
 8003984:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8003988:	4aa3      	ldr	r2, [pc, #652]	; (8003c18 <inputseria+0xbfc>)
 800398a:	601a      	str	r2, [r3, #0]
	seria[135].waittime = 224;
 800398c:	4ba0      	ldr	r3, [pc, #640]	; (8003c10 <inputseria+0xbf4>)
 800398e:	22e0      	movs	r2, #224	; 0xe0
 8003990:	f8a3 243c 	strh.w	r2, [r3, #1084]	; 0x43c
	seria[136].interval = 880;
 8003994:	4b9e      	ldr	r3, [pc, #632]	; (8003c10 <inputseria+0xbf4>)
 8003996:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800399a:	4aa0      	ldr	r2, [pc, #640]	; (8003c1c <inputseria+0xc00>)
 800399c:	601a      	str	r2, [r3, #0]
	seria[136].waittime = 462;
 800399e:	4b9c      	ldr	r3, [pc, #624]	; (8003c10 <inputseria+0xbf4>)
 80039a0:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80039a4:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444
	seria[137].interval = 988;
 80039a8:	4b99      	ldr	r3, [pc, #612]	; (8003c10 <inputseria+0xbf4>)
 80039aa:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80039ae:	4a9c      	ldr	r2, [pc, #624]	; (8003c20 <inputseria+0xc04>)
 80039b0:	601a      	str	r2, [r3, #0]
	seria[137].waittime = 224;
 80039b2:	4b97      	ldr	r3, [pc, #604]	; (8003c10 <inputseria+0xbf4>)
 80039b4:	22e0      	movs	r2, #224	; 0xe0
 80039b6:	f8a3 244c 	strh.w	r2, [r3, #1100]	; 0x44c
	seria[138].interval = 1047;
 80039ba:	4b95      	ldr	r3, [pc, #596]	; (8003c10 <inputseria+0xbf4>)
 80039bc:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80039c0:	4a98      	ldr	r2, [pc, #608]	; (8003c24 <inputseria+0xc08>)
 80039c2:	601a      	str	r2, [r3, #0]
	seria[138].waittime = 224;
 80039c4:	4b92      	ldr	r3, [pc, #584]	; (8003c10 <inputseria+0xbf4>)
 80039c6:	22e0      	movs	r2, #224	; 0xe0
 80039c8:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
	seria[139].interval = 1175;
 80039cc:	4b90      	ldr	r3, [pc, #576]	; (8003c10 <inputseria+0xbf4>)
 80039ce:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 80039d2:	4a95      	ldr	r2, [pc, #596]	; (8003c28 <inputseria+0xc0c>)
 80039d4:	601a      	str	r2, [r3, #0]
	seria[139].waittime = 462;
 80039d6:	4b8e      	ldr	r3, [pc, #568]	; (8003c10 <inputseria+0xbf4>)
 80039d8:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80039dc:	f8a3 245c 	strh.w	r2, [r3, #1116]	; 0x45c
	seria[140].interval = 1319;
 80039e0:	4b8b      	ldr	r3, [pc, #556]	; (8003c10 <inputseria+0xbf4>)
 80039e2:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 80039e6:	4a91      	ldr	r2, [pc, #580]	; (8003c2c <inputseria+0xc10>)
 80039e8:	601a      	str	r2, [r3, #0]
	seria[140].waittime = 224;
 80039ea:	4b89      	ldr	r3, [pc, #548]	; (8003c10 <inputseria+0xbf4>)
 80039ec:	22e0      	movs	r2, #224	; 0xe0
 80039ee:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464
	seria[141].interval = 1397;
 80039f2:	4b87      	ldr	r3, [pc, #540]	; (8003c10 <inputseria+0xbf4>)
 80039f4:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 80039f8:	4a8d      	ldr	r2, [pc, #564]	; (8003c30 <inputseria+0xc14>)
 80039fa:	601a      	str	r2, [r3, #0]
	seria[141].waittime = 224;
 80039fc:	4b84      	ldr	r3, [pc, #528]	; (8003c10 <inputseria+0xbf4>)
 80039fe:	22e0      	movs	r2, #224	; 0xe0
 8003a00:	f8a3 246c 	strh.w	r2, [r3, #1132]	; 0x46c
	seria[142].interval = 1568;
 8003a04:	4b82      	ldr	r3, [pc, #520]	; (8003c10 <inputseria+0xbf4>)
 8003a06:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8003a0a:	4a8a      	ldr	r2, [pc, #552]	; (8003c34 <inputseria+0xc18>)
 8003a0c:	601a      	str	r2, [r3, #0]
	seria[142].waittime = 1400;
 8003a0e:	4b80      	ldr	r3, [pc, #512]	; (8003c10 <inputseria+0xbf4>)
 8003a10:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003a14:	f8a3 2474 	strh.w	r2, [r3, #1140]	; 0x474
	seria[143].interval = 294;
 8003a18:	4b7d      	ldr	r3, [pc, #500]	; (8003c10 <inputseria+0xbf4>)
 8003a1a:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8003a1e:	4a86      	ldr	r2, [pc, #536]	; (8003c38 <inputseria+0xc1c>)
 8003a20:	601a      	str	r2, [r3, #0]
	seria[143].waittime = 224;
 8003a22:	4b7b      	ldr	r3, [pc, #492]	; (8003c10 <inputseria+0xbf4>)
 8003a24:	22e0      	movs	r2, #224	; 0xe0
 8003a26:	f8a3 247c 	strh.w	r2, [r3, #1148]	; 0x47c
	seria[144].interval = 330;
 8003a2a:	4b79      	ldr	r3, [pc, #484]	; (8003c10 <inputseria+0xbf4>)
 8003a2c:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8003a30:	4a82      	ldr	r2, [pc, #520]	; (8003c3c <inputseria+0xc20>)
 8003a32:	601a      	str	r2, [r3, #0]
	seria[144].waittime = 224;
 8003a34:	4b76      	ldr	r3, [pc, #472]	; (8003c10 <inputseria+0xbf4>)
 8003a36:	22e0      	movs	r2, #224	; 0xe0
 8003a38:	f8a3 2484 	strh.w	r2, [r3, #1156]	; 0x484
	seria[145].interval = 349;
 8003a3c:	4b74      	ldr	r3, [pc, #464]	; (8003c10 <inputseria+0xbf4>)
 8003a3e:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8003a42:	4a7f      	ldr	r2, [pc, #508]	; (8003c40 <inputseria+0xc24>)
 8003a44:	601a      	str	r2, [r3, #0]
	seria[145].waittime = 462;
 8003a46:	4b72      	ldr	r3, [pc, #456]	; (8003c10 <inputseria+0xbf4>)
 8003a48:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003a4c:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
	seria[146].interval = 392;
 8003a50:	4b6f      	ldr	r3, [pc, #444]	; (8003c10 <inputseria+0xbf4>)
 8003a52:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8003a56:	4a7b      	ldr	r2, [pc, #492]	; (8003c44 <inputseria+0xc28>)
 8003a58:	601a      	str	r2, [r3, #0]
	seria[146].waittime = 224;
 8003a5a:	4b6d      	ldr	r3, [pc, #436]	; (8003c10 <inputseria+0xbf4>)
 8003a5c:	22e0      	movs	r2, #224	; 0xe0
 8003a5e:	f8a3 2494 	strh.w	r2, [r3, #1172]	; 0x494
	seria[147].interval = 440;
 8003a62:	4b6b      	ldr	r3, [pc, #428]	; (8003c10 <inputseria+0xbf4>)
 8003a64:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8003a68:	4a77      	ldr	r2, [pc, #476]	; (8003c48 <inputseria+0xc2c>)
 8003a6a:	601a      	str	r2, [r3, #0]
	seria[147].waittime = 224;
 8003a6c:	4b68      	ldr	r3, [pc, #416]	; (8003c10 <inputseria+0xbf4>)
 8003a6e:	22e0      	movs	r2, #224	; 0xe0
 8003a70:	f8a3 249c 	strh.w	r2, [r3, #1180]	; 0x49c
	seria[148].interval = 494;
 8003a74:	4b66      	ldr	r3, [pc, #408]	; (8003c10 <inputseria+0xbf4>)
 8003a76:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8003a7a:	4a74      	ldr	r2, [pc, #464]	; (8003c4c <inputseria+0xc30>)
 8003a7c:	601a      	str	r2, [r3, #0]
	seria[148].waittime = 462;
 8003a7e:	4b64      	ldr	r3, [pc, #400]	; (8003c10 <inputseria+0xbf4>)
 8003a80:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003a84:	f8a3 24a4 	strh.w	r2, [r3, #1188]	; 0x4a4
	seria[149].interval = 523;
 8003a88:	4b61      	ldr	r3, [pc, #388]	; (8003c10 <inputseria+0xbf4>)
 8003a8a:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 8003a8e:	4a70      	ldr	r2, [pc, #448]	; (8003c50 <inputseria+0xc34>)
 8003a90:	601a      	str	r2, [r3, #0]
	seria[149].waittime = 224;
 8003a92:	4b5f      	ldr	r3, [pc, #380]	; (8003c10 <inputseria+0xbf4>)
 8003a94:	22e0      	movs	r2, #224	; 0xe0
 8003a96:	f8a3 24ac 	strh.w	r2, [r3, #1196]	; 0x4ac
	seria[150].interval = 494;
 8003a9a:	4b5d      	ldr	r3, [pc, #372]	; (8003c10 <inputseria+0xbf4>)
 8003a9c:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8003aa0:	4a6a      	ldr	r2, [pc, #424]	; (8003c4c <inputseria+0xc30>)
 8003aa2:	601a      	str	r2, [r3, #0]
	seria[150].waittime = 224;
 8003aa4:	4b5a      	ldr	r3, [pc, #360]	; (8003c10 <inputseria+0xbf4>)
 8003aa6:	22e0      	movs	r2, #224	; 0xe0
 8003aa8:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
	seria[151].interval = 330;
 8003aac:	4b58      	ldr	r3, [pc, #352]	; (8003c10 <inputseria+0xbf4>)
 8003aae:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8003ab2:	4a62      	ldr	r2, [pc, #392]	; (8003c3c <inputseria+0xc20>)
 8003ab4:	601a      	str	r2, [r3, #0]
	seria[151].waittime = 1400;
 8003ab6:	4b56      	ldr	r3, [pc, #344]	; (8003c10 <inputseria+0xbf4>)
 8003ab8:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003abc:	f8a3 24bc 	strh.w	r2, [r3, #1212]	; 0x4bc
	seria[152].interval = 698;
 8003ac0:	4b53      	ldr	r3, [pc, #332]	; (8003c10 <inputseria+0xbf4>)
 8003ac2:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8003ac6:	4a53      	ldr	r2, [pc, #332]	; (8003c14 <inputseria+0xbf8>)
 8003ac8:	601a      	str	r2, [r3, #0]
	seria[152].waittime = 224;
 8003aca:	4b51      	ldr	r3, [pc, #324]	; (8003c10 <inputseria+0xbf4>)
 8003acc:	22e0      	movs	r2, #224	; 0xe0
 8003ace:	f8a3 24c4 	strh.w	r2, [r3, #1220]	; 0x4c4
	seria[153].interval = 659;
 8003ad2:	4b4f      	ldr	r3, [pc, #316]	; (8003c10 <inputseria+0xbf4>)
 8003ad4:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8003ad8:	4a5e      	ldr	r2, [pc, #376]	; (8003c54 <inputseria+0xc38>)
 8003ada:	601a      	str	r2, [r3, #0]
	seria[153].waittime = 105;
 8003adc:	4b4c      	ldr	r3, [pc, #304]	; (8003c10 <inputseria+0xbf4>)
 8003ade:	2269      	movs	r2, #105	; 0x69
 8003ae0:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
	seria[154].interval = 880;
 8003ae4:	4b4a      	ldr	r3, [pc, #296]	; (8003c10 <inputseria+0xbf4>)
 8003ae6:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8003aea:	4a4c      	ldr	r2, [pc, #304]	; (8003c1c <inputseria+0xc00>)
 8003aec:	601a      	str	r2, [r3, #0]
	seria[154].waittime = 224;
 8003aee:	4b48      	ldr	r3, [pc, #288]	; (8003c10 <inputseria+0xbf4>)
 8003af0:	22e0      	movs	r2, #224	; 0xe0
 8003af2:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4
	seria[155].interval = 784;
 8003af6:	4b46      	ldr	r3, [pc, #280]	; (8003c10 <inputseria+0xbf4>)
 8003af8:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8003afc:	4a46      	ldr	r2, [pc, #280]	; (8003c18 <inputseria+0xbfc>)
 8003afe:	601a      	str	r2, [r3, #0]
	seria[155].waittime = 105;
 8003b00:	4b43      	ldr	r3, [pc, #268]	; (8003c10 <inputseria+0xbf4>)
 8003b02:	2269      	movs	r2, #105	; 0x69
 8003b04:	f8a3 24dc 	strh.w	r2, [r3, #1244]	; 0x4dc
	seria[156].interval = 988;
 8003b08:	4b41      	ldr	r3, [pc, #260]	; (8003c10 <inputseria+0xbf4>)
 8003b0a:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8003b0e:	4a44      	ldr	r2, [pc, #272]	; (8003c20 <inputseria+0xc04>)
 8003b10:	601a      	str	r2, [r3, #0]
	seria[156].waittime = 224;
 8003b12:	4b3f      	ldr	r3, [pc, #252]	; (8003c10 <inputseria+0xbf4>)
 8003b14:	22e0      	movs	r2, #224	; 0xe0
 8003b16:	f8a3 24e4 	strh.w	r2, [r3, #1252]	; 0x4e4
	seria[157].interval = 880;
 8003b1a:	4b3d      	ldr	r3, [pc, #244]	; (8003c10 <inputseria+0xbf4>)
 8003b1c:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 8003b20:	4a3e      	ldr	r2, [pc, #248]	; (8003c1c <inputseria+0xc00>)
 8003b22:	601a      	str	r2, [r3, #0]
	seria[157].waittime = 105;
 8003b24:	4b3a      	ldr	r3, [pc, #232]	; (8003c10 <inputseria+0xbf4>)
 8003b26:	2269      	movs	r2, #105	; 0x69
 8003b28:	f8a3 24ec 	strh.w	r2, [r3, #1260]	; 0x4ec
	seria[158].interval = 1047;
 8003b2c:	4b38      	ldr	r3, [pc, #224]	; (8003c10 <inputseria+0xbf4>)
 8003b2e:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8003b32:	4a3c      	ldr	r2, [pc, #240]	; (8003c24 <inputseria+0xc08>)
 8003b34:	601a      	str	r2, [r3, #0]
	seria[158].waittime = 224;
 8003b36:	4b36      	ldr	r3, [pc, #216]	; (8003c10 <inputseria+0xbf4>)
 8003b38:	22e0      	movs	r2, #224	; 0xe0
 8003b3a:	f8a3 24f4 	strh.w	r2, [r3, #1268]	; 0x4f4
	seria[159].interval = 988;
 8003b3e:	4b34      	ldr	r3, [pc, #208]	; (8003c10 <inputseria+0xbf4>)
 8003b40:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
 8003b44:	4a36      	ldr	r2, [pc, #216]	; (8003c20 <inputseria+0xc04>)
 8003b46:	601a      	str	r2, [r3, #0]
	seria[159].waittime = 105;
 8003b48:	4b31      	ldr	r3, [pc, #196]	; (8003c10 <inputseria+0xbf4>)
 8003b4a:	2269      	movs	r2, #105	; 0x69
 8003b4c:	f8a3 24fc 	strh.w	r2, [r3, #1276]	; 0x4fc
	seria[160].interval = 1175;
 8003b50:	4b2f      	ldr	r3, [pc, #188]	; (8003c10 <inputseria+0xbf4>)
 8003b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b56:	4a34      	ldr	r2, [pc, #208]	; (8003c28 <inputseria+0xc0c>)
 8003b58:	601a      	str	r2, [r3, #0]
	seria[160].waittime = 224;
 8003b5a:	4b2d      	ldr	r3, [pc, #180]	; (8003c10 <inputseria+0xbf4>)
 8003b5c:	22e0      	movs	r2, #224	; 0xe0
 8003b5e:	f8a3 2504 	strh.w	r2, [r3, #1284]	; 0x504
	seria[161].interval = 1047;
 8003b62:	4b2b      	ldr	r3, [pc, #172]	; (8003c10 <inputseria+0xbf4>)
 8003b64:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003b68:	4a2e      	ldr	r2, [pc, #184]	; (8003c24 <inputseria+0xc08>)
 8003b6a:	601a      	str	r2, [r3, #0]
	seria[161].waittime = 105;
 8003b6c:	4b28      	ldr	r3, [pc, #160]	; (8003c10 <inputseria+0xbf4>)
 8003b6e:	2269      	movs	r2, #105	; 0x69
 8003b70:	f8a3 250c 	strh.w	r2, [r3, #1292]	; 0x50c
	seria[162].interval = 1319;
 8003b74:	4b26      	ldr	r3, [pc, #152]	; (8003c10 <inputseria+0xbf4>)
 8003b76:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003b7a:	4a2c      	ldr	r2, [pc, #176]	; (8003c2c <inputseria+0xc10>)
 8003b7c:	601a      	str	r2, [r3, #0]
	seria[162].waittime = 224;
 8003b7e:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <inputseria+0xbf4>)
 8003b80:	22e0      	movs	r2, #224	; 0xe0
 8003b82:	f8a3 2514 	strh.w	r2, [r3, #1300]	; 0x514
	seria[163].interval = 1175;
 8003b86:	4b22      	ldr	r3, [pc, #136]	; (8003c10 <inputseria+0xbf4>)
 8003b88:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8003b8c:	4a26      	ldr	r2, [pc, #152]	; (8003c28 <inputseria+0xc0c>)
 8003b8e:	601a      	str	r2, [r3, #0]
	seria[163].waittime = 105;
 8003b90:	4b1f      	ldr	r3, [pc, #124]	; (8003c10 <inputseria+0xbf4>)
 8003b92:	2269      	movs	r2, #105	; 0x69
 8003b94:	f8a3 251c 	strh.w	r2, [r3, #1308]	; 0x51c
	seria[164].interval = 1397;
 8003b98:	4b1d      	ldr	r3, [pc, #116]	; (8003c10 <inputseria+0xbf4>)
 8003b9a:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8003b9e:	4a24      	ldr	r2, [pc, #144]	; (8003c30 <inputseria+0xc14>)
 8003ba0:	601a      	str	r2, [r3, #0]
	seria[164].waittime = 224;
 8003ba2:	4b1b      	ldr	r3, [pc, #108]	; (8003c10 <inputseria+0xbf4>)
 8003ba4:	22e0      	movs	r2, #224	; 0xe0
 8003ba6:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
	seria[165].interval = 1319;
 8003baa:	4b19      	ldr	r3, [pc, #100]	; (8003c10 <inputseria+0xbf4>)
 8003bac:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8003bb0:	4a1e      	ldr	r2, [pc, #120]	; (8003c2c <inputseria+0xc10>)
 8003bb2:	601a      	str	r2, [r3, #0]
	seria[165].waittime = 105;
 8003bb4:	4b16      	ldr	r3, [pc, #88]	; (8003c10 <inputseria+0xbf4>)
 8003bb6:	2269      	movs	r2, #105	; 0x69
 8003bb8:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
	seria[166].interval = 988;
 8003bbc:	4b14      	ldr	r3, [pc, #80]	; (8003c10 <inputseria+0xbf4>)
 8003bbe:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8003bc2:	4a17      	ldr	r2, [pc, #92]	; (8003c20 <inputseria+0xc04>)
 8003bc4:	601a      	str	r2, [r3, #0]
	seria[166].waittime = 105;
 8003bc6:	4b12      	ldr	r3, [pc, #72]	; (8003c10 <inputseria+0xbf4>)
 8003bc8:	2269      	movs	r2, #105	; 0x69
 8003bca:	f8a3 2534 	strh.w	r2, [r3, #1332]	; 0x534
	seria[167].interval = 1047;
 8003bce:	4b10      	ldr	r3, [pc, #64]	; (8003c10 <inputseria+0xbf4>)
 8003bd0:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8003bd4:	4a13      	ldr	r2, [pc, #76]	; (8003c24 <inputseria+0xc08>)
 8003bd6:	601a      	str	r2, [r3, #0]
	seria[167].waittime = 105;
 8003bd8:	4b0d      	ldr	r3, [pc, #52]	; (8003c10 <inputseria+0xbf4>)
 8003bda:	2269      	movs	r2, #105	; 0x69
 8003bdc:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
	seria[168].interval = 880;
 8003be0:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <inputseria+0xbf4>)
 8003be2:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 8003be6:	4a0d      	ldr	r2, [pc, #52]	; (8003c1c <inputseria+0xc00>)
 8003be8:	601a      	str	r2, [r3, #0]
	seria[168].waittime = 105;
 8003bea:	4b09      	ldr	r3, [pc, #36]	; (8003c10 <inputseria+0xbf4>)
 8003bec:	2269      	movs	r2, #105	; 0x69
 8003bee:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
	seria[169].interval = 988;
 8003bf2:	4b07      	ldr	r3, [pc, #28]	; (8003c10 <inputseria+0xbf4>)
 8003bf4:	f503 63a9 	add.w	r3, r3, #1352	; 0x548
 8003bf8:	4a09      	ldr	r2, [pc, #36]	; (8003c20 <inputseria+0xc04>)
 8003bfa:	601a      	str	r2, [r3, #0]
	seria[169].waittime = 2576;
 8003bfc:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <inputseria+0xbf4>)
 8003bfe:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 8003c02:	f8a3 254c 	strh.w	r2, [r3, #1356]	; 0x54c

}
 8003c06:	bf00      	nop
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	200003c4 	.word	0x200003c4
 8003c14:	442e8000 	.word	0x442e8000
 8003c18:	44440000 	.word	0x44440000
 8003c1c:	445c0000 	.word	0x445c0000
 8003c20:	44770000 	.word	0x44770000
 8003c24:	4482e000 	.word	0x4482e000
 8003c28:	4492e000 	.word	0x4492e000
 8003c2c:	44a4e000 	.word	0x44a4e000
 8003c30:	44aea000 	.word	0x44aea000
 8003c34:	44c40000 	.word	0x44c40000
 8003c38:	43930000 	.word	0x43930000
 8003c3c:	43a50000 	.word	0x43a50000
 8003c40:	43ae8000 	.word	0x43ae8000
 8003c44:	43c40000 	.word	0x43c40000
 8003c48:	43dc0000 	.word	0x43dc0000
 8003c4c:	43f70000 	.word	0x43f70000
 8003c50:	4402c000 	.word	0x4402c000
 8003c54:	4424c000 	.word	0x4424c000

08003c58 <read_switch1>:


#include "PL_switch.h"
#include "gpio.h"

char read_switch1(void){
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0

	char check=(HAL_GPIO_ReadPin(SWITCH_1_GPIO_Port,SWITCH_1_Pin)==0);
 8003c5e:	2140      	movs	r1, #64	; 0x40
 8003c60:	4807      	ldr	r0, [pc, #28]	; (8003c80 <read_switch1+0x28>)
 8003c62:	f00a fd3b 	bl	800e6dc <HAL_GPIO_ReadPin>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	bf0c      	ite	eq
 8003c6c:	2301      	moveq	r3, #1
 8003c6e:	2300      	movne	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	71fb      	strb	r3, [r7, #7]


return check;
 8003c74:	79fb      	ldrb	r3, [r7, #7]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	48000400 	.word	0x48000400

08003c84 <read_switch2>:

char read_switch2(void){
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0

	char check=(HAL_GPIO_ReadPin(SWITCH_2_GPIO_Port,SWITCH_2_Pin)==0);
 8003c8a:	2180      	movs	r1, #128	; 0x80
 8003c8c:	4807      	ldr	r0, [pc, #28]	; (8003cac <read_switch2+0x28>)
 8003c8e:	f00a fd25 	bl	800e6dc <HAL_GPIO_ReadPin>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	71fb      	strb	r3, [r7, #7]


return check;
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	48000400 	.word	0x48000400

08003cb0 <pl_timer_init>:
#include "tim.h"

volatile uint32_t g_timCount;


void pl_timer_init(void){
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8003cb4:	4802      	ldr	r0, [pc, #8]	; (8003cc0 <pl_timer_init+0x10>)
 8003cb6:	f00c faa7 	bl	8010208 <HAL_TIM_Base_Start_IT>
}
 8003cba:	bf00      	nop
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	2000ce94 	.word	0x2000ce94

08003cc4 <pl_timer_count>:

void pl_timer_count(void){
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
	 g_timCount++;
 8003cc8:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <pl_timer_count+0x18>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	4a03      	ldr	r2, [pc, #12]	; (8003cdc <pl_timer_count+0x18>)
 8003cd0:	6013      	str	r3, [r2, #0]
}
 8003cd2:	bf00      	nop
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	20000954 	.word	0x20000954

08003ce0 <wait_ms>:


void wait_ms(uint32_t wait_time) {
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8003ce8:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <wait_ms+0x30>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 8003cee:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <wait_ms+0x34>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	625a      	str	r2, [r3, #36]	; 0x24
        while (g_timCount < wait_time) {
 8003cf6:	bf00      	nop
 8003cf8:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <wait_ms+0x30>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d8fa      	bhi.n	8003cf8 <wait_ms+0x18>
        }

}
 8003d02:	bf00      	nop
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	20000954 	.word	0x20000954
 8003d14:	2000ce94 	.word	0x2000ce94

08003d18 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003d1e:	463b      	mov	r3, r7
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	605a      	str	r2, [r3, #4]
 8003d26:	609a      	str	r2, [r3, #8]
 8003d28:	60da      	str	r2, [r3, #12]
 8003d2a:	611a      	str	r2, [r3, #16]
 8003d2c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003d2e:	4b46      	ldr	r3, [pc, #280]	; (8003e48 <MX_ADC1_Init+0x130>)
 8003d30:	4a46      	ldr	r2, [pc, #280]	; (8003e4c <MX_ADC1_Init+0x134>)
 8003d32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8003d34:	4b44      	ldr	r3, [pc, #272]	; (8003e48 <MX_ADC1_Init+0x130>)
 8003d36:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8003d3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8003d3c:	4b42      	ldr	r3, [pc, #264]	; (8003e48 <MX_ADC1_Init+0x130>)
 8003d3e:	2208      	movs	r2, #8
 8003d40:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d42:	4b41      	ldr	r3, [pc, #260]	; (8003e48 <MX_ADC1_Init+0x130>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003d48:	4b3f      	ldr	r3, [pc, #252]	; (8003e48 <MX_ADC1_Init+0x130>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003d4e:	4b3e      	ldr	r3, [pc, #248]	; (8003e48 <MX_ADC1_Init+0x130>)
 8003d50:	2204      	movs	r2, #4
 8003d52:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003d54:	4b3c      	ldr	r3, [pc, #240]	; (8003e48 <MX_ADC1_Init+0x130>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003d5a:	4b3b      	ldr	r3, [pc, #236]	; (8003e48 <MX_ADC1_Init+0x130>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8003d60:	4b39      	ldr	r3, [pc, #228]	; (8003e48 <MX_ADC1_Init+0x130>)
 8003d62:	2205      	movs	r2, #5
 8003d64:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003d66:	4b38      	ldr	r3, [pc, #224]	; (8003e48 <MX_ADC1_Init+0x130>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003d6e:	4b36      	ldr	r3, [pc, #216]	; (8003e48 <MX_ADC1_Init+0x130>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003d74:	4b34      	ldr	r3, [pc, #208]	; (8003e48 <MX_ADC1_Init+0x130>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003d7a:	4b33      	ldr	r3, [pc, #204]	; (8003e48 <MX_ADC1_Init+0x130>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003d82:	4b31      	ldr	r3, [pc, #196]	; (8003e48 <MX_ADC1_Init+0x130>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003d88:	4b2f      	ldr	r3, [pc, #188]	; (8003e48 <MX_ADC1_Init+0x130>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003d90:	482d      	ldr	r0, [pc, #180]	; (8003e48 <MX_ADC1_Init+0x130>)
 8003d92:	f008 fe8b 	bl	800caac <HAL_ADC_Init>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8003d9c:	f000 fb27 	bl	80043ee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8003da0:	4b2b      	ldr	r3, [pc, #172]	; (8003e50 <MX_ADC1_Init+0x138>)
 8003da2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003da4:	2306      	movs	r3, #6
 8003da6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8003da8:	2301      	movs	r3, #1
 8003daa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003dac:	237f      	movs	r3, #127	; 0x7f
 8003dae:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003db0:	2304      	movs	r3, #4
 8003db2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003db8:	463b      	mov	r3, r7
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4822      	ldr	r0, [pc, #136]	; (8003e48 <MX_ADC1_Init+0x130>)
 8003dbe:	f009 f9e9 	bl	800d194 <HAL_ADC_ConfigChannel>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8003dc8:	f000 fb11 	bl	80043ee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003dcc:	4b21      	ldr	r3, [pc, #132]	; (8003e54 <MX_ADC1_Init+0x13c>)
 8003dce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003dd0:	230c      	movs	r3, #12
 8003dd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003dd4:	463b      	mov	r3, r7
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	481b      	ldr	r0, [pc, #108]	; (8003e48 <MX_ADC1_Init+0x130>)
 8003dda:	f009 f9db 	bl	800d194 <HAL_ADC_ConfigChannel>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8003de4:	f000 fb03 	bl	80043ee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003de8:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <MX_ADC1_Init+0x140>)
 8003dea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003dec:	2312      	movs	r3, #18
 8003dee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003df0:	463b      	mov	r3, r7
 8003df2:	4619      	mov	r1, r3
 8003df4:	4814      	ldr	r0, [pc, #80]	; (8003e48 <MX_ADC1_Init+0x130>)
 8003df6:	f009 f9cd 	bl	800d194 <HAL_ADC_ConfigChannel>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8003e00:	f000 faf5 	bl	80043ee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003e04:	4b15      	ldr	r3, [pc, #84]	; (8003e5c <MX_ADC1_Init+0x144>)
 8003e06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003e08:	2318      	movs	r3, #24
 8003e0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e0c:	463b      	mov	r3, r7
 8003e0e:	4619      	mov	r1, r3
 8003e10:	480d      	ldr	r0, [pc, #52]	; (8003e48 <MX_ADC1_Init+0x130>)
 8003e12:	f009 f9bf 	bl	800d194 <HAL_ADC_ConfigChannel>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8003e1c:	f000 fae7 	bl	80043ee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003e20:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <MX_ADC1_Init+0x148>)
 8003e22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8003e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e28:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e2a:	463b      	mov	r3, r7
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4806      	ldr	r0, [pc, #24]	; (8003e48 <MX_ADC1_Init+0x130>)
 8003e30:	f009 f9b0 	bl	800d194 <HAL_ADC_ConfigChannel>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8003e3a:	f000 fad8 	bl	80043ee <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003e3e:	bf00      	nop
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20000958 	.word	0x20000958
 8003e4c:	50040000 	.word	0x50040000
 8003e50:	43210000 	.word	0x43210000
 8003e54:	3ef08000 	.word	0x3ef08000
 8003e58:	32601000 	.word	0x32601000
 8003e5c:	2e300800 	.word	0x2e300800
 8003e60:	2a000400 	.word	0x2a000400

08003e64 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b0a0      	sub	sp, #128	; 0x80
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e6c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	605a      	str	r2, [r3, #4]
 8003e76:	609a      	str	r2, [r3, #8]
 8003e78:	60da      	str	r2, [r3, #12]
 8003e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e7c:	f107 0318 	add.w	r3, r7, #24
 8003e80:	2254      	movs	r2, #84	; 0x54
 8003e82:	2100      	movs	r1, #0
 8003e84:	4618      	mov	r0, r3
 8003e86:	f00d fee7 	bl	8011c58 <memset>
  if(adcHandle->Instance==ADC1)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a47      	ldr	r2, [pc, #284]	; (8003fac <HAL_ADC_MspInit+0x148>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	f040 8087 	bne.w	8003fa4 <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003e96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003e9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003ea0:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 3;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8003eaa:	2310      	movs	r3, #16
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003eae:	2307      	movs	r3, #7
 8003eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003eba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ebe:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ec0:	f107 0318 	add.w	r3, r7, #24
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f00b fe5f 	bl	800fb88 <HAL_RCCEx_PeriphCLKConfig>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8003ed0:	f000 fa8d 	bl	80043ee <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003ed4:	4b36      	ldr	r3, [pc, #216]	; (8003fb0 <HAL_ADC_MspInit+0x14c>)
 8003ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed8:	4a35      	ldr	r2, [pc, #212]	; (8003fb0 <HAL_ADC_MspInit+0x14c>)
 8003eda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ede:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ee0:	4b33      	ldr	r3, [pc, #204]	; (8003fb0 <HAL_ADC_MspInit+0x14c>)
 8003ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eec:	4b30      	ldr	r3, [pc, #192]	; (8003fb0 <HAL_ADC_MspInit+0x14c>)
 8003eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef0:	4a2f      	ldr	r2, [pc, #188]	; (8003fb0 <HAL_ADC_MspInit+0x14c>)
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ef8:	4b2d      	ldr	r3, [pc, #180]	; (8003fb0 <HAL_ADC_MspInit+0x14c>)
 8003efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f04:	4b2a      	ldr	r3, [pc, #168]	; (8003fb0 <HAL_ADC_MspInit+0x14c>)
 8003f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f08:	4a29      	ldr	r2, [pc, #164]	; (8003fb0 <HAL_ADC_MspInit+0x14c>)
 8003f0a:	f043 0302 	orr.w	r3, r3, #2
 8003f0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f10:	4b27      	ldr	r3, [pc, #156]	; (8003fb0 <HAL_ADC_MspInit+0x14c>)
 8003f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = SENSOR_4_Pin|SENSOR_3_Pin|SENSOR_2_Pin;
 8003f1c:	23e0      	movs	r3, #224	; 0xe0
 8003f1e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003f20:	230b      	movs	r3, #11
 8003f22:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f28:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f32:	f00a fa69 	bl	800e408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR_1_Pin|BATTERY_Pin;
 8003f36:	2303      	movs	r3, #3
 8003f38:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003f3a:	230b      	movs	r3, #11
 8003f3c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f42:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f46:	4619      	mov	r1, r3
 8003f48:	481a      	ldr	r0, [pc, #104]	; (8003fb4 <HAL_ADC_MspInit+0x150>)
 8003f4a:	f00a fa5d 	bl	800e408 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003f4e:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <HAL_ADC_MspInit+0x154>)
 8003f50:	4a1a      	ldr	r2, [pc, #104]	; (8003fbc <HAL_ADC_MspInit+0x158>)
 8003f52:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003f54:	4b18      	ldr	r3, [pc, #96]	; (8003fb8 <HAL_ADC_MspInit+0x154>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f5a:	4b17      	ldr	r3, [pc, #92]	; (8003fb8 <HAL_ADC_MspInit+0x154>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f60:	4b15      	ldr	r3, [pc, #84]	; (8003fb8 <HAL_ADC_MspInit+0x154>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003f66:	4b14      	ldr	r3, [pc, #80]	; (8003fb8 <HAL_ADC_MspInit+0x154>)
 8003f68:	2280      	movs	r2, #128	; 0x80
 8003f6a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f6c:	4b12      	ldr	r3, [pc, #72]	; (8003fb8 <HAL_ADC_MspInit+0x154>)
 8003f6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f72:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f74:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <HAL_ADC_MspInit+0x154>)
 8003f76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f7a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003f7c:	4b0e      	ldr	r3, [pc, #56]	; (8003fb8 <HAL_ADC_MspInit+0x154>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003f82:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <HAL_ADC_MspInit+0x154>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003f88:	480b      	ldr	r0, [pc, #44]	; (8003fb8 <HAL_ADC_MspInit+0x154>)
 8003f8a:	f00a f807 	bl	800df9c <HAL_DMA_Init>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8003f94:	f000 fa2b 	bl	80043ee <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a07      	ldr	r2, [pc, #28]	; (8003fb8 <HAL_ADC_MspInit+0x154>)
 8003f9c:	64da      	str	r2, [r3, #76]	; 0x4c
 8003f9e:	4a06      	ldr	r2, [pc, #24]	; (8003fb8 <HAL_ADC_MspInit+0x154>)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003fa4:	bf00      	nop
 8003fa6:	3780      	adds	r7, #128	; 0x80
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	50040000 	.word	0x50040000
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	48000400 	.word	0x48000400
 8003fb8:	200009bc 	.word	0x200009bc
 8003fbc:	40020008 	.word	0x40020008

08003fc0 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 8003fc8:	f7fe fdba 	bl	8002b40 <pl_callback_getSensor>

}
 8003fcc:	bf00      	nop
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003fda:	4b0c      	ldr	r3, [pc, #48]	; (800400c <MX_DMA_Init+0x38>)
 8003fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fde:	4a0b      	ldr	r2, [pc, #44]	; (800400c <MX_DMA_Init+0x38>)
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	6493      	str	r3, [r2, #72]	; 0x48
 8003fe6:	4b09      	ldr	r3, [pc, #36]	; (800400c <MX_DMA_Init+0x38>)
 8003fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	607b      	str	r3, [r7, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	200b      	movs	r0, #11
 8003ff8:	f009 ff99 	bl	800df2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003ffc:	200b      	movs	r0, #11
 8003ffe:	f009 ffb2 	bl	800df66 <HAL_NVIC_EnableIRQ>

}
 8004002:	bf00      	nop
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40021000 	.word	0x40021000

08004010 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004016:	f107 030c 	add.w	r3, r7, #12
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	605a      	str	r2, [r3, #4]
 8004020:	609a      	str	r2, [r3, #8]
 8004022:	60da      	str	r2, [r3, #12]
 8004024:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004026:	4b39      	ldr	r3, [pc, #228]	; (800410c <MX_GPIO_Init+0xfc>)
 8004028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800402a:	4a38      	ldr	r2, [pc, #224]	; (800410c <MX_GPIO_Init+0xfc>)
 800402c:	f043 0304 	orr.w	r3, r3, #4
 8004030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004032:	4b36      	ldr	r3, [pc, #216]	; (800410c <MX_GPIO_Init+0xfc>)
 8004034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800403e:	4b33      	ldr	r3, [pc, #204]	; (800410c <MX_GPIO_Init+0xfc>)
 8004040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004042:	4a32      	ldr	r2, [pc, #200]	; (800410c <MX_GPIO_Init+0xfc>)
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800404a:	4b30      	ldr	r3, [pc, #192]	; (800410c <MX_GPIO_Init+0xfc>)
 800404c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	607b      	str	r3, [r7, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004056:	4b2d      	ldr	r3, [pc, #180]	; (800410c <MX_GPIO_Init+0xfc>)
 8004058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405a:	4a2c      	ldr	r2, [pc, #176]	; (800410c <MX_GPIO_Init+0xfc>)
 800405c:	f043 0302 	orr.w	r3, r3, #2
 8004060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004062:	4b2a      	ldr	r3, [pc, #168]	; (800410c <MX_GPIO_Init+0xfc>)
 8004064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSORLED_1_Pin|SENSORLED_2_Pin, GPIO_PIN_RESET);
 800406e:	2200      	movs	r2, #0
 8004070:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8004074:	4826      	ldr	r0, [pc, #152]	; (8004110 <MX_GPIO_Init+0x100>)
 8004076:	f00a fb49 	bl	800e70c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_ENABLE_Pin|MOTOR_CW_CCW_L_Pin, GPIO_PIN_RESET);
 800407a:	2200      	movs	r2, #0
 800407c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004084:	f00a fb42 	bl	800e70c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INTERFACELED_Pin|MOTOR_CW_CCW_R_Pin|MD_RESET_Pin, GPIO_PIN_RESET);
 8004088:	2200      	movs	r2, #0
 800408a:	2138      	movs	r1, #56	; 0x38
 800408c:	4821      	ldr	r0, [pc, #132]	; (8004114 <MX_GPIO_Init+0x104>)
 800408e:	f00a fb3d 	bl	800e70c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SENSORLED_1_Pin|SENSORLED_2_Pin;
 8004092:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004096:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004098:	2301      	movs	r3, #1
 800409a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409c:	2300      	movs	r3, #0
 800409e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040a4:	f107 030c 	add.w	r3, r7, #12
 80040a8:	4619      	mov	r1, r3
 80040aa:	4819      	ldr	r0, [pc, #100]	; (8004110 <MX_GPIO_Init+0x100>)
 80040ac:	f00a f9ac 	bl	800e408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_ENABLE_Pin|MOTOR_CW_CCW_L_Pin;
 80040b0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80040b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040b6:	2301      	movs	r3, #1
 80040b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040be:	2300      	movs	r3, #0
 80040c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040c2:	f107 030c 	add.w	r3, r7, #12
 80040c6:	4619      	mov	r1, r3
 80040c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040cc:	f00a f99c 	bl	800e408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = INTERFACELED_Pin|MOTOR_CW_CCW_R_Pin|MD_RESET_Pin;
 80040d0:	2338      	movs	r3, #56	; 0x38
 80040d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040d4:	2301      	movs	r3, #1
 80040d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040dc:	2300      	movs	r3, #0
 80040de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040e0:	f107 030c 	add.w	r3, r7, #12
 80040e4:	4619      	mov	r1, r3
 80040e6:	480b      	ldr	r0, [pc, #44]	; (8004114 <MX_GPIO_Init+0x104>)
 80040e8:	f00a f98e 	bl	800e408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SWITCH_1_Pin|SWITCH_2_Pin;
 80040ec:	23c0      	movs	r3, #192	; 0xc0
 80040ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040f0:	2300      	movs	r3, #0
 80040f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040f4:	2301      	movs	r3, #1
 80040f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040f8:	f107 030c 	add.w	r3, r7, #12
 80040fc:	4619      	mov	r1, r3
 80040fe:	4805      	ldr	r0, [pc, #20]	; (8004114 <MX_GPIO_Init+0x104>)
 8004100:	f00a f982 	bl	800e408 <HAL_GPIO_Init>

}
 8004104:	bf00      	nop
 8004106:	3720      	adds	r7, #32
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40021000 	.word	0x40021000
 8004110:	48000800 	.word	0x48000800
 8004114:	48000400 	.word	0x48000400

08004118 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800411c:	4b1b      	ldr	r3, [pc, #108]	; (800418c <MX_I2C1_Init+0x74>)
 800411e:	4a1c      	ldr	r2, [pc, #112]	; (8004190 <MX_I2C1_Init+0x78>)
 8004120:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8004122:	4b1a      	ldr	r3, [pc, #104]	; (800418c <MX_I2C1_Init+0x74>)
 8004124:	4a1b      	ldr	r2, [pc, #108]	; (8004194 <MX_I2C1_Init+0x7c>)
 8004126:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004128:	4b18      	ldr	r3, [pc, #96]	; (800418c <MX_I2C1_Init+0x74>)
 800412a:	2200      	movs	r2, #0
 800412c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800412e:	4b17      	ldr	r3, [pc, #92]	; (800418c <MX_I2C1_Init+0x74>)
 8004130:	2201      	movs	r2, #1
 8004132:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004134:	4b15      	ldr	r3, [pc, #84]	; (800418c <MX_I2C1_Init+0x74>)
 8004136:	2200      	movs	r2, #0
 8004138:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800413a:	4b14      	ldr	r3, [pc, #80]	; (800418c <MX_I2C1_Init+0x74>)
 800413c:	2200      	movs	r2, #0
 800413e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004140:	4b12      	ldr	r3, [pc, #72]	; (800418c <MX_I2C1_Init+0x74>)
 8004142:	2200      	movs	r2, #0
 8004144:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004146:	4b11      	ldr	r3, [pc, #68]	; (800418c <MX_I2C1_Init+0x74>)
 8004148:	2200      	movs	r2, #0
 800414a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800414c:	4b0f      	ldr	r3, [pc, #60]	; (800418c <MX_I2C1_Init+0x74>)
 800414e:	2200      	movs	r2, #0
 8004150:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004152:	480e      	ldr	r0, [pc, #56]	; (800418c <MX_I2C1_Init+0x74>)
 8004154:	f00a faf2 	bl	800e73c <HAL_I2C_Init>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800415e:	f000 f946 	bl	80043ee <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004162:	2100      	movs	r1, #0
 8004164:	4809      	ldr	r0, [pc, #36]	; (800418c <MX_I2C1_Init+0x74>)
 8004166:	f00a fded 	bl	800ed44 <HAL_I2CEx_ConfigAnalogFilter>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004170:	f000 f93d 	bl	80043ee <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004174:	2100      	movs	r1, #0
 8004176:	4805      	ldr	r0, [pc, #20]	; (800418c <MX_I2C1_Init+0x74>)
 8004178:	f00a fe2f 	bl	800edda <HAL_I2CEx_ConfigDigitalFilter>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004182:	f000 f934 	bl	80043ee <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004186:	bf00      	nop
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20000a04 	.word	0x20000a04
 8004190:	40005400 	.word	0x40005400
 8004194:	10909cec 	.word	0x10909cec

08004198 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b09e      	sub	sp, #120	; 0x78
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	609a      	str	r2, [r3, #8]
 80041ac:	60da      	str	r2, [r3, #12]
 80041ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80041b0:	f107 0310 	add.w	r3, r7, #16
 80041b4:	2254      	movs	r2, #84	; 0x54
 80041b6:	2100      	movs	r1, #0
 80041b8:	4618      	mov	r0, r3
 80041ba:	f00d fd4d 	bl	8011c58 <memset>
  if(i2cHandle->Instance==I2C1)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1f      	ldr	r2, [pc, #124]	; (8004240 <HAL_I2C_MspInit+0xa8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d137      	bne.n	8004238 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80041c8:	2340      	movs	r3, #64	; 0x40
 80041ca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80041cc:	2300      	movs	r3, #0
 80041ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041d0:	f107 0310 	add.w	r3, r7, #16
 80041d4:	4618      	mov	r0, r3
 80041d6:	f00b fcd7 	bl	800fb88 <HAL_RCCEx_PeriphCLKConfig>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80041e0:	f000 f905 	bl	80043ee <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041e4:	4b17      	ldr	r3, [pc, #92]	; (8004244 <HAL_I2C_MspInit+0xac>)
 80041e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e8:	4a16      	ldr	r2, [pc, #88]	; (8004244 <HAL_I2C_MspInit+0xac>)
 80041ea:	f043 0301 	orr.w	r3, r3, #1
 80041ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041f0:	4b14      	ldr	r3, [pc, #80]	; (8004244 <HAL_I2C_MspInit+0xac>)
 80041f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80041fc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004200:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004202:	2312      	movs	r3, #18
 8004204:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004206:	2301      	movs	r3, #1
 8004208:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800420a:	2303      	movs	r3, #3
 800420c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800420e:	2304      	movs	r3, #4
 8004210:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004212:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004216:	4619      	mov	r1, r3
 8004218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800421c:	f00a f8f4 	bl	800e408 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004220:	4b08      	ldr	r3, [pc, #32]	; (8004244 <HAL_I2C_MspInit+0xac>)
 8004222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004224:	4a07      	ldr	r2, [pc, #28]	; (8004244 <HAL_I2C_MspInit+0xac>)
 8004226:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800422a:	6593      	str	r3, [r2, #88]	; 0x58
 800422c:	4b05      	ldr	r3, [pc, #20]	; (8004244 <HAL_I2C_MspInit+0xac>)
 800422e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004238:	bf00      	nop
 800423a:	3778      	adds	r7, #120	; 0x78
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40005400 	.word	0x40005400
 8004244:	40021000 	.word	0x40021000

08004248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800424e:	f008 f97e 	bl	800c54e <HAL_Init>
  /* USER CODE BEGIN Init */
 // setbuf(stdout, NULL);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004252:	f000 f87d 	bl	8004350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004256:	f7ff fedb 	bl	8004010 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800425a:	f008 f8b5 	bl	800c3c8 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800425e:	f007 f92d 	bl	800b4bc <MX_TIM6_Init>
  MX_I2C1_Init();
 8004262:	f7ff ff59 	bl	8004118 <MX_I2C1_Init>
  MX_DMA_Init();
 8004266:	f7ff feb5 	bl	8003fd4 <MX_DMA_Init>
  MX_ADC1_Init();
 800426a:	f7ff fd55 	bl	8003d18 <MX_ADC1_Init>
  MX_TIM15_Init();
 800426e:	f007 f95b 	bl	800b528 <MX_TIM15_Init>
  MX_TIM1_Init();
 8004272:	f007 f839 	bl	800b2e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8004276:	f007 f8c7 	bl	800b408 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  init_WallControl();
 800427a:	f7fe f839 	bl	80022f0 <init_WallControl>
  pl_motor_init();
 800427e:	f7fe fa89 	bl	8002794 <pl_motor_init>
  pl_speaker_init();
 8004282:	f7fe fd67 	bl	8002d54 <pl_speaker_init>
  pl_timer_init();
 8004286:	f7ff fd13 	bl	8003cb0 <pl_timer_init>
  pl_lcd_init();
 800428a:	f7fe fa28 	bl	80026de <pl_lcd_init>
  motor_init();
 800428e:	f7fc ff5b 	bl	8001148 <motor_init>
  record_reset();
 8004292:	f006 fe0b 	bl	800aeac <record_reset>
  input_parameter();
 8004296:	f007 fac7 	bl	800b828 <input_parameter>

  pl_lcd_puts("Hello");
 800429a:	4829      	ldr	r0, [pc, #164]	; (8004340 <main+0xf8>)
 800429c:	f7fe fa0a 	bl	80026b4 <pl_lcd_puts>
  pl_lcd_pos(1, 0);
 80042a0:	2100      	movs	r1, #0
 80042a2:	2001      	movs	r0, #1
 80042a4:	f7fe fa41 	bl	800272a <pl_lcd_pos>
  pl_lcd_puts("   STM32");
 80042a8:	4826      	ldr	r0, [pc, #152]	; (8004344 <main+0xfc>)
 80042aa:	f7fe fa03 	bl	80026b4 <pl_lcd_puts>
  HAL_Delay(500);
 80042ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042b2:	f008 f9c1 	bl	800c638 <HAL_Delay>
  pl_lcd_clear();
 80042b6:	f7fe fa50 	bl	800275a <pl_lcd_clear>

  if(pl_getbatt() < LIPO_LIMIT){
 80042ba:	f7fe fbe5 	bl	8002a88 <pl_getbatt>
 80042be:	ee10 3a10 	vmov	r3, s0
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fc f940 	bl	8000548 <__aeabi_f2d>
 80042c8:	a31b      	add	r3, pc, #108	; (adr r3, 8004338 <main+0xf0>)
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	f7fc fc05 	bl	8000adc <__aeabi_dcmplt>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d013      	beq.n	8004300 <main+0xb8>
	  pl_lcd_clear();
 80042d8:	f7fe fa3f 	bl	800275a <pl_lcd_clear>
	  pl_lcd_pos(0, 0);
 80042dc:	2100      	movs	r1, #0
 80042de:	2000      	movs	r0, #0
 80042e0:	f7fe fa23 	bl	800272a <pl_lcd_pos>
	  pl_lcd_puts("LIPO");
 80042e4:	4818      	ldr	r0, [pc, #96]	; (8004348 <main+0x100>)
 80042e6:	f7fe f9e5 	bl	80026b4 <pl_lcd_puts>
	  pl_lcd_pos(1, 0);
 80042ea:	2100      	movs	r1, #0
 80042ec:	2001      	movs	r0, #1
 80042ee:	f7fe fa1c 	bl	800272a <pl_lcd_pos>
	  pl_lcd_puts("error");
 80042f2:	4816      	ldr	r0, [pc, #88]	; (800434c <main+0x104>)
 80042f4:	f7fe f9de 	bl	80026b4 <pl_lcd_puts>
	  HAL_Delay(10000);
 80042f8:	f242 7010 	movw	r0, #10000	; 0x2710
 80042fc:	f008 f99c 	bl	800c638 <HAL_Delay>
  }

  uint16_t cnt = 0;
 8004300:	2300      	movs	r3, #0
 8004302:	80bb      	strh	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  mode1=mode_decision(0,mode1);
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	4619      	mov	r1, r3
 8004308:	2000      	movs	r0, #0
 800430a:	f006 f8df 	bl	800a4cc <mode_decision>
 800430e:	4603      	mov	r3, r0
 8004310:	71fb      	strb	r3, [r7, #7]
	  wait_ms(1000);
 8004312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004316:	f7ff fce3 	bl	8003ce0 <wait_ms>
	  mode2=mode_decision(1,mode2);
 800431a:	79bb      	ldrb	r3, [r7, #6]
 800431c:	4619      	mov	r1, r3
 800431e:	2001      	movs	r0, #1
 8004320:	f006 f8d4 	bl	800a4cc <mode_decision>
 8004324:	4603      	mov	r3, r0
 8004326:	71bb      	strb	r3, [r7, #6]
	  mode_execution(mode1,mode2);
 8004328:	79ba      	ldrb	r2, [r7, #6]
 800432a:	79fb      	ldrb	r3, [r7, #7]
 800432c:	4611      	mov	r1, r2
 800432e:	4618      	mov	r0, r3
 8004330:	f006 f9de 	bl	800a6f0 <mode_execution>
	  mode1=mode_decision(0,mode1);
 8004334:	e7e6      	b.n	8004304 <main+0xbc>
 8004336:	bf00      	nop
 8004338:	9999999a 	.word	0x9999999a
 800433c:	40269999 	.word	0x40269999
 8004340:	08014da0 	.word	0x08014da0
 8004344:	08014da8 	.word	0x08014da8
 8004348:	08014db4 	.word	0x08014db4
 800434c:	08014dbc 	.word	0x08014dbc

08004350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b096      	sub	sp, #88	; 0x58
 8004354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004356:	f107 0314 	add.w	r3, r7, #20
 800435a:	2244      	movs	r2, #68	; 0x44
 800435c:	2100      	movs	r1, #0
 800435e:	4618      	mov	r0, r3
 8004360:	f00d fc7a 	bl	8011c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004364:	463b      	mov	r3, r7
 8004366:	2200      	movs	r2, #0
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	605a      	str	r2, [r3, #4]
 800436c:	609a      	str	r2, [r3, #8]
 800436e:	60da      	str	r2, [r3, #12]
 8004370:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004372:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004376:	f00a fd8b 	bl	800ee90 <HAL_PWREx_ControlVoltageScaling>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8004380:	f000 f835 	bl	80043ee <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004384:	2301      	movs	r3, #1
 8004386:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004388:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800438c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800438e:	2302      	movs	r3, #2
 8004390:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004392:	2303      	movs	r3, #3
 8004394:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 3;
 8004396:	2303      	movs	r3, #3
 8004398:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800439a:	2328      	movs	r3, #40	; 0x28
 800439c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800439e:	2307      	movs	r3, #7
 80043a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80043a2:	2302      	movs	r3, #2
 80043a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80043a6:	2302      	movs	r3, #2
 80043a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043aa:	f107 0314 	add.w	r3, r7, #20
 80043ae:	4618      	mov	r0, r3
 80043b0:	f00a fdc4 	bl	800ef3c <HAL_RCC_OscConfig>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80043ba:	f000 f818 	bl	80043ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80043be:	230f      	movs	r3, #15
 80043c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80043c2:	2303      	movs	r3, #3
 80043c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80043c6:	2300      	movs	r3, #0
 80043c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80043ce:	2300      	movs	r3, #0
 80043d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80043d2:	463b      	mov	r3, r7
 80043d4:	2104      	movs	r1, #4
 80043d6:	4618      	mov	r0, r3
 80043d8:	f00b f9d0 	bl	800f77c <HAL_RCC_ClockConfig>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80043e2:	f000 f804 	bl	80043ee <Error_Handler>
  }
}
 80043e6:	bf00      	nop
 80043e8:	3758      	adds	r7, #88	; 0x58
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043ee:	b480      	push	{r7}
 80043f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043f2:	b672      	cpsid	i
}
 80043f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043f6:	e7fe      	b.n	80043f6 <Error_Handler+0x8>

080043f8 <test_motor_start>:
parameter_speed speed1000_shortest;




void test_motor_start(MOTOR_MODE *wallmode){
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
	wallmode->WallControlMode=1;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	701a      	strb	r2, [r3, #0]
	wallmode->WallControlStatus=0;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	705a      	strb	r2, [r3, #1]
	wallmode->WallCutMode=0;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	70da      	strb	r2, [r3, #3]
	wallmode->calMazeMode=0;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	709a      	strb	r2, [r3, #2]
	pl_motor_standby(1);
 8004418:	2001      	movs	r0, #1
 800441a:	f7fe f9d7 	bl	80027cc <pl_motor_standby>
	HAL_Delay(500);
 800441e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004422:	f008 f909 	bl	800c638 <HAL_Delay>
	pl_motor_start();
 8004426:	f7fe fa3b 	bl	80028a0 <pl_motor_start>

}
 800442a:	bf00      	nop
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <test_motor_stop>:

void test_motor_stop(void){
 8004432:	b580      	push	{r7, lr}
 8004434:	af00      	add	r7, sp, #0
	pl_motor_stop();
 8004436:	f7fe fa47 	bl	80028c8 <pl_motor_stop>
	HAL_Delay(500);
 800443a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800443e:	f008 f8fb 	bl	800c638 <HAL_Delay>
	pl_motor_standby(0);
 8004442:	2000      	movs	r0, #0
 8004444:	f7fe f9c2 	bl	80027cc <pl_motor_standby>
}
 8004448:	bf00      	nop
 800444a:	bd80      	pop	{r7, pc}

0800444c <slalomR>:

void slalomR(parameter turnpara,char test_mode,char shortest_mode) {
 800444c:	b084      	sub	sp, #16
 800444e:	b580      	push	{r7, lr}
 8004450:	b082      	sub	sp, #8
 8004452:	af00      	add	r7, sp, #0
 8004454:	f107 0c10 	add.w	ip, r7, #16
 8004458:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800445c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004460:	2b01      	cmp	r3, #1
 8004462:	f040 80b2 	bne.w	80045ca <slalomR+0x17e>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 8004466:	1d3b      	adds	r3, r7, #4
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff ffc5 	bl	80043f8 <test_motor_start>
		straight_table(BACK_TO_CENTER + 270, 100, turnpara.g_speed, turnpara.g_speed,
 800446e:	edd7 6a04 	vldr	s13, [r7, #16]
 8004472:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8004476:	ed97 7a04 	vldr	s14, [r7, #16]
 800447a:	edd7 7a04 	vldr	s15, [r7, #16]
 800447e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004482:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8004486:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 270, 100, turnpara.g_speed, turnpara.g_speed,
 800448a:	eddf 5a86 	vldr	s11, [pc, #536]	; 80046a4 <slalomR+0x258>
 800448e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	eeb0 2a47 	vmov.f32	s4, s14
 8004498:	eef0 1a46 	vmov.f32	s3, s12
 800449c:	eeb0 1a66 	vmov.f32	s2, s13
 80044a0:	eddf 0a81 	vldr	s1, [pc, #516]	; 80046a8 <slalomR+0x25c>
 80044a4:	ed9f 0a81 	vldr	s0, [pc, #516]	; 80046ac <slalomR+0x260>
 80044a8:	f7fd fba2 	bl	8001bf0 <straight_table>
		wallmode.WallCutMode=0;
 80044ac:	2300      	movs	r3, #0
 80044ae:	71fb      	strb	r3, [r7, #7]
		if(shortest_mode==0){
 80044b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d127      	bne.n	8004508 <slalomR+0xbc>
			straight_table(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80044b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80044bc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80044c0:	ee77 6a87 	vadd.f32	s13, s15, s14
 80044c4:	ed97 6a04 	vldr	s12, [r7, #16]
 80044c8:	edd7 5a04 	vldr	s11, [r7, #16]
 80044cc:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 80044d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80044d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80044d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044dc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80044e0:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80044e4:	eddf 4a6f 	vldr	s9, [pc, #444]	; 80046a4 <slalomR+0x258>
 80044e8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	eeb0 2a47 	vmov.f32	s4, s14
 80044f2:	eef0 1a45 	vmov.f32	s3, s10
 80044f6:	eeb0 1a65 	vmov.f32	s2, s11
 80044fa:	eef0 0a46 	vmov.f32	s1, s12
 80044fe:	eeb0 0a66 	vmov.f32	s0, s13
 8004502:	f7fd fb75 	bl	8001bf0 <straight_table>
 8004506:	e022      	b.n	800454e <slalomR+0x102>
		}else{
			straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004508:	edd7 6a05 	vldr	s13, [r7, #20]
 800450c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004510:	edd7 5a04 	vldr	s11, [r7, #16]
 8004514:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8004518:	ed97 7a04 	vldr	s14, [r7, #16]
 800451c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004520:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004524:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004528:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800452c:	eddf 4a5d 	vldr	s9, [pc, #372]	; 80046a4 <slalomR+0x258>
 8004530:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	eeb0 2a47 	vmov.f32	s4, s14
 800453a:	eef0 1a45 	vmov.f32	s3, s10
 800453e:	eeb0 1a65 	vmov.f32	s2, s11
 8004542:	eef0 0a46 	vmov.f32	s1, s12
 8004546:	eeb0 0a66 	vmov.f32	s0, s13
 800454a:	f7fd fb51 	bl	8001bf0 <straight_table>
		}

		slalom_table(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800454e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004552:	ed97 7a07 	vldr	s14, [r7, #28]
 8004556:	edd7 6a08 	vldr	s13, [r7, #32]
 800455a:	eef0 2a66 	vmov.f32	s5, s13
 800455e:	eeb0 2a47 	vmov.f32	s4, s14
 8004562:	eddf 1a53 	vldr	s3, [pc, #332]	; 80046b0 <slalomR+0x264>
 8004566:	ed9f 1a52 	vldr	s2, [pc, #328]	; 80046b0 <slalomR+0x264>
 800456a:	eddf 0a4e 	vldr	s1, [pc, #312]	; 80046a4 <slalomR+0x258>
 800456e:	eeb0 0a67 	vmov.f32	s0, s15
 8004572:	f7fd fd21 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 8004576:	2300      	movs	r3, #0
 8004578:	713b      	strb	r3, [r7, #4]
		straight_table(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800457a:	edd7 7a06 	vldr	s15, [r7, #24]
 800457e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80046a4 <slalomR+0x258>
 8004582:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004586:	ed97 6a04 	vldr	s12, [r7, #16]
 800458a:	edd7 5a04 	vldr	s11, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 800458e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004592:	edd7 7a04 	vldr	s15, [r7, #16]
 8004596:	ee27 7a27 	vmul.f32	s14, s14, s15
 800459a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800459e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80045a2:	ed9f 5a40 	vldr	s10, [pc, #256]	; 80046a4 <slalomR+0x258>
 80045a6:	ee87 7a85 	vdiv.f32	s14, s15, s10
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	eeb0 2a47 	vmov.f32	s4, s14
 80045b0:	eef0 1a65 	vmov.f32	s3, s11
 80045b4:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 80046b0 <slalomR+0x264>
 80045b8:	eef0 0a46 	vmov.f32	s1, s12
 80045bc:	eeb0 0a66 	vmov.f32	s0, s13
 80045c0:	f7fd fb16 	bl	8001bf0 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 80045c4:	f7ff ff35 	bl	8004432 <test_motor_stop>
		wallmode.WallCutMode=0;
				straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);

	}
}
 80045c8:	e065      	b.n	8004696 <slalomR+0x24a>
		wallmode.WallControlMode=0;
 80045ca:	2300      	movs	r3, #0
 80045cc:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 80045ce:	2300      	movs	r3, #0
 80045d0:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 80045d6:	2300      	movs	r3, #0
 80045d8:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80045da:	edd7 6a05 	vldr	s13, [r7, #20]
 80045de:	ed97 6a04 	vldr	s12, [r7, #16]
 80045e2:	edd7 5a04 	vldr	s11, [r7, #16]
 80045e6:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 80045ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80045ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80045f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045f6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80045fa:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80045fe:	eddf 4a29 	vldr	s9, [pc, #164]	; 80046a4 <slalomR+0x258>
 8004602:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	eeb0 2a47 	vmov.f32	s4, s14
 800460c:	eef0 1a45 	vmov.f32	s3, s10
 8004610:	eeb0 1a65 	vmov.f32	s2, s11
 8004614:	eef0 0a46 	vmov.f32	s1, s12
 8004618:	eeb0 0a66 	vmov.f32	s0, s13
 800461c:	f7fd fae8 	bl	8001bf0 <straight_table>
		slalom_table(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 8004620:	edd7 7a04 	vldr	s15, [r7, #16]
 8004624:	ed97 7a07 	vldr	s14, [r7, #28]
 8004628:	edd7 6a08 	vldr	s13, [r7, #32]
 800462c:	eef0 2a66 	vmov.f32	s5, s13
 8004630:	eeb0 2a47 	vmov.f32	s4, s14
 8004634:	eddf 1a1e 	vldr	s3, [pc, #120]	; 80046b0 <slalomR+0x264>
 8004638:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 80046b0 <slalomR+0x264>
 800463c:	eddf 0a19 	vldr	s1, [pc, #100]	; 80046a4 <slalomR+0x258>
 8004640:	eeb0 0a67 	vmov.f32	s0, s15
 8004644:	f7fd fcb8 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 8004648:	2300      	movs	r3, #0
 800464a:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 800464c:	2300      	movs	r3, #0
 800464e:	71fb      	strb	r3, [r7, #7]
				straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004650:	edd7 6a06 	vldr	s13, [r7, #24]
 8004654:	ed97 6a04 	vldr	s12, [r7, #16]
 8004658:	edd7 5a04 	vldr	s11, [r7, #16]
 800465c:	ed97 5a04 	vldr	s10, [r7, #16]
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8004660:	ed97 7a04 	vldr	s14, [r7, #16]
 8004664:	edd7 7a04 	vldr	s15, [r7, #16]
 8004668:	ee27 7a27 	vmul.f32	s14, s14, s15
 800466c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004670:	eec7 7a24 	vdiv.f32	s15, s14, s9
				straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004674:	eddf 4a0b 	vldr	s9, [pc, #44]	; 80046a4 <slalomR+0x258>
 8004678:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	eeb0 2a47 	vmov.f32	s4, s14
 8004682:	eef0 1a45 	vmov.f32	s3, s10
 8004686:	eeb0 1a65 	vmov.f32	s2, s11
 800468a:	eef0 0a46 	vmov.f32	s1, s12
 800468e:	eeb0 0a66 	vmov.f32	s0, s13
 8004692:	f7fd faad 	bl	8001bf0 <straight_table>
}
 8004696:	bf00      	nop
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046a0:	b004      	add	sp, #16
 80046a2:	4770      	bx	lr
 80046a4:	42b40000 	.word	0x42b40000
 80046a8:	42c80000 	.word	0x42c80000
 80046ac:	43964000 	.word	0x43964000
 80046b0:	00000000 	.word	0x00000000

080046b4 <slalomL>:

void slalomL(parameter turnpara,char test_mode,char shortest_mode) {
 80046b4:	b084      	sub	sp, #16
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	f107 0c10 	add.w	ip, r7, #16
 80046c0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 80046c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	f040 80b4 	bne.w	8004836 <slalomL+0x182>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 80046ce:	1d3b      	adds	r3, r7, #4
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff fe91 	bl	80043f8 <test_motor_start>
		straight_table(BACK_TO_CENTER + 270, 100, turnpara.g_speed, turnpara.g_speed,
 80046d6:	edd7 6a04 	vldr	s13, [r7, #16]
 80046da:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 80046de:	ed97 7a04 	vldr	s14, [r7, #16]
 80046e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80046e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046ea:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80046ee:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 270, 100, turnpara.g_speed, turnpara.g_speed,
 80046f2:	eddf 5a88 	vldr	s11, [pc, #544]	; 8004914 <slalomL+0x260>
 80046f6:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	eeb0 2a47 	vmov.f32	s4, s14
 8004700:	eef0 1a46 	vmov.f32	s3, s12
 8004704:	eeb0 1a66 	vmov.f32	s2, s13
 8004708:	eddf 0a83 	vldr	s1, [pc, #524]	; 8004918 <slalomL+0x264>
 800470c:	ed9f 0a83 	vldr	s0, [pc, #524]	; 800491c <slalomL+0x268>
 8004710:	f7fd fa6e 	bl	8001bf0 <straight_table>
		wallmode.WallCutMode=0;
 8004714:	2300      	movs	r3, #0
 8004716:	71fb      	strb	r3, [r7, #7]
		if(shortest_mode==0){
 8004718:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800471c:	2b00      	cmp	r3, #0
 800471e:	d127      	bne.n	8004770 <slalomL+0xbc>
			straight_table(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004720:	edd7 7a05 	vldr	s15, [r7, #20]
 8004724:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004728:	ee77 6a87 	vadd.f32	s13, s15, s14
 800472c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004730:	edd7 5a04 	vldr	s11, [r7, #16]
 8004734:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8004738:	ed97 7a04 	vldr	s14, [r7, #16]
 800473c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004740:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004744:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004748:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800474c:	eddf 4a71 	vldr	s9, [pc, #452]	; 8004914 <slalomL+0x260>
 8004750:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	eeb0 2a47 	vmov.f32	s4, s14
 800475a:	eef0 1a45 	vmov.f32	s3, s10
 800475e:	eeb0 1a65 	vmov.f32	s2, s11
 8004762:	eef0 0a46 	vmov.f32	s1, s12
 8004766:	eeb0 0a66 	vmov.f32	s0, s13
 800476a:	f7fd fa41 	bl	8001bf0 <straight_table>
 800476e:	e022      	b.n	80047b6 <slalomL+0x102>
		}else{
			straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004770:	edd7 6a05 	vldr	s13, [r7, #20]
 8004774:	ed97 6a04 	vldr	s12, [r7, #16]
 8004778:	edd7 5a04 	vldr	s11, [r7, #16]
 800477c:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8004780:	ed97 7a04 	vldr	s14, [r7, #16]
 8004784:	edd7 7a04 	vldr	s15, [r7, #16]
 8004788:	ee27 7a27 	vmul.f32	s14, s14, s15
 800478c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004790:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004794:	eddf 4a5f 	vldr	s9, [pc, #380]	; 8004914 <slalomL+0x260>
 8004798:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	eeb0 2a47 	vmov.f32	s4, s14
 80047a2:	eef0 1a45 	vmov.f32	s3, s10
 80047a6:	eeb0 1a65 	vmov.f32	s2, s11
 80047aa:	eef0 0a46 	vmov.f32	s1, s12
 80047ae:	eeb0 0a66 	vmov.f32	s0, s13
 80047b2:	f7fd fa1d 	bl	8001bf0 <straight_table>
		}

		slalom_table(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 80047b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80047ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80047be:	eef1 7a67 	vneg.f32	s15, s15
 80047c2:	edd7 6a08 	vldr	s13, [r7, #32]
 80047c6:	eef0 2a66 	vmov.f32	s5, s13
 80047ca:	eeb0 2a67 	vmov.f32	s4, s15
 80047ce:	eddf 1a54 	vldr	s3, [pc, #336]	; 8004920 <slalomL+0x26c>
 80047d2:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8004920 <slalomL+0x26c>
 80047d6:	eddf 0a53 	vldr	s1, [pc, #332]	; 8004924 <slalomL+0x270>
 80047da:	eeb0 0a47 	vmov.f32	s0, s14
 80047de:	f7fd fbeb 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 80047e2:	2300      	movs	r3, #0
 80047e4:	713b      	strb	r3, [r7, #4]
		straight_table(90 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 80047e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80047ea:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8004914 <slalomL+0x260>
 80047ee:	ee77 6a87 	vadd.f32	s13, s15, s14
 80047f2:	ed97 6a04 	vldr	s12, [r7, #16]
 80047f6:	edd7 5a04 	vldr	s11, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 80047fa:	ed97 7a04 	vldr	s14, [r7, #16]
 80047fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8004802:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004806:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800480a:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(90 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 800480e:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8004914 <slalomL+0x260>
 8004812:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	eeb0 2a47 	vmov.f32	s4, s14
 800481c:	eef0 1a65 	vmov.f32	s3, s11
 8004820:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 8004918 <slalomL+0x264>
 8004824:	eef0 0a46 	vmov.f32	s1, s12
 8004828:	eeb0 0a66 	vmov.f32	s0, s13
 800482c:	f7fd f9e0 	bl	8001bf0 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 8004830:	f7ff fdff 	bl	8004432 <test_motor_stop>
		wallmode.WallCutMode=0;
				straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);

	}
}
 8004834:	e067      	b.n	8004906 <slalomL+0x252>
		wallmode.WallControlMode=0;
 8004836:	2300      	movs	r3, #0
 8004838:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 800483a:	2300      	movs	r3, #0
 800483c:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=0;
 800483e:	2300      	movs	r3, #0
 8004840:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8004842:	2300      	movs	r3, #0
 8004844:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004846:	edd7 6a05 	vldr	s13, [r7, #20]
 800484a:	ed97 6a04 	vldr	s12, [r7, #16]
 800484e:	edd7 5a04 	vldr	s11, [r7, #16]
 8004852:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8004856:	ed97 7a04 	vldr	s14, [r7, #16]
 800485a:	edd7 7a04 	vldr	s15, [r7, #16]
 800485e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004862:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004866:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800486a:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8004914 <slalomL+0x260>
 800486e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	eeb0 2a47 	vmov.f32	s4, s14
 8004878:	eef0 1a45 	vmov.f32	s3, s10
 800487c:	eeb0 1a65 	vmov.f32	s2, s11
 8004880:	eef0 0a46 	vmov.f32	s1, s12
 8004884:	eeb0 0a66 	vmov.f32	s0, s13
 8004888:	f7fd f9b2 	bl	8001bf0 <straight_table>
		slalom_table(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800488c:	ed97 7a04 	vldr	s14, [r7, #16]
 8004890:	edd7 7a07 	vldr	s15, [r7, #28]
 8004894:	eef1 7a67 	vneg.f32	s15, s15
 8004898:	edd7 6a08 	vldr	s13, [r7, #32]
 800489c:	eef0 2a66 	vmov.f32	s5, s13
 80048a0:	eeb0 2a67 	vmov.f32	s4, s15
 80048a4:	eddf 1a1e 	vldr	s3, [pc, #120]	; 8004920 <slalomL+0x26c>
 80048a8:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8004920 <slalomL+0x26c>
 80048ac:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8004924 <slalomL+0x270>
 80048b0:	eeb0 0a47 	vmov.f32	s0, s14
 80048b4:	f7fd fb80 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 80048bc:	2300      	movs	r3, #0
 80048be:	71fb      	strb	r3, [r7, #7]
				straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80048c0:	edd7 6a06 	vldr	s13, [r7, #24]
 80048c4:	ed97 6a04 	vldr	s12, [r7, #16]
 80048c8:	edd7 5a04 	vldr	s11, [r7, #16]
 80048cc:	ed97 5a04 	vldr	s10, [r7, #16]
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 80048d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80048d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80048d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048dc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80048e0:	eec7 7a24 	vdiv.f32	s15, s14, s9
				straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80048e4:	eddf 4a0b 	vldr	s9, [pc, #44]	; 8004914 <slalomL+0x260>
 80048e8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	eeb0 2a47 	vmov.f32	s4, s14
 80048f2:	eef0 1a45 	vmov.f32	s3, s10
 80048f6:	eeb0 1a65 	vmov.f32	s2, s11
 80048fa:	eef0 0a46 	vmov.f32	s1, s12
 80048fe:	eeb0 0a66 	vmov.f32	s0, s13
 8004902:	f7fd f975 	bl	8001bf0 <straight_table>
}
 8004906:	bf00      	nop
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004910:	b004      	add	sp, #16
 8004912:	4770      	bx	lr
 8004914:	42b40000 	.word	0x42b40000
 8004918:	42c80000 	.word	0x42c80000
 800491c:	43964000 	.word	0x43964000
 8004920:	00000000 	.word	0x00000000
 8004924:	c2b40000 	.word	0xc2b40000

08004928 <turn90R>:



void turn90R(parameter turnpara, char test_mode) {
 8004928:	b084      	sub	sp, #16
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	f107 0c10 	add.w	ip, r7, #16
 8004934:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8004938:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800493c:	2b01      	cmp	r3, #1
 800493e:	f040 8086 	bne.w	8004a4e <turn90R+0x126>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 8004942:	1d3b      	adds	r3, r7, #4
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff fd57 	bl	80043f8 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 800494a:	edd7 6a04 	vldr	s13, [r7, #16]
 800494e:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed / 2 / 90,wallmode);
 8004952:	ed97 7a04 	vldr	s14, [r7, #16]
 8004956:	edd7 7a04 	vldr	s15, [r7, #16]
 800495a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800495e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8004962:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8004966:	eddf 5a70 	vldr	s11, [pc, #448]	; 8004b28 <turn90R+0x200>
 800496a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	eeb0 2a47 	vmov.f32	s4, s14
 8004974:	eef0 1a46 	vmov.f32	s3, s12
 8004978:	eeb0 1a66 	vmov.f32	s2, s13
 800497c:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8004b2c <turn90R+0x204>
 8004980:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8004b30 <turn90R+0x208>
 8004984:	f7fd f934 	bl	8001bf0 <straight_table>
		wallmode.WallCutMode=1;
 8004988:	2301      	movs	r3, #1
 800498a:	71fb      	strb	r3, [r7, #7]

		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800498c:	edd7 6a05 	vldr	s13, [r7, #20]
 8004990:	ed97 6a04 	vldr	s12, [r7, #16]
 8004994:	edd7 5a04 	vldr	s11, [r7, #16]
 8004998:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 800499c:	ed97 7a04 	vldr	s14, [r7, #16]
 80049a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80049a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049a8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80049ac:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80049b0:	eddf 4a5d 	vldr	s9, [pc, #372]	; 8004b28 <turn90R+0x200>
 80049b4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	eeb0 2a47 	vmov.f32	s4, s14
 80049be:	eef0 1a45 	vmov.f32	s3, s10
 80049c2:	eeb0 1a65 	vmov.f32	s2, s11
 80049c6:	eef0 0a46 	vmov.f32	s1, s12
 80049ca:	eeb0 0a66 	vmov.f32	s0, s13
 80049ce:	f7fd f90f 	bl	8001bf0 <straight_table>

		slalom_table(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 80049d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80049d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80049da:	edd7 6a08 	vldr	s13, [r7, #32]
 80049de:	eef0 2a66 	vmov.f32	s5, s13
 80049e2:	eeb0 2a47 	vmov.f32	s4, s14
 80049e6:	eddf 1a53 	vldr	s3, [pc, #332]	; 8004b34 <turn90R+0x20c>
 80049ea:	ed9f 1a52 	vldr	s2, [pc, #328]	; 8004b34 <turn90R+0x20c>
 80049ee:	eddf 0a4e 	vldr	s1, [pc, #312]	; 8004b28 <turn90R+0x200>
 80049f2:	eeb0 0a67 	vmov.f32	s0, s15
 80049f6:	f7fd fadf 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 80049fa:	2300      	movs	r3, #0
 80049fc:	713b      	strb	r3, [r7, #4]
		straight_table(180 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 80049fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a02:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8004b38 <turn90R+0x210>
 8004a06:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004a0a:	ed97 6a04 	vldr	s12, [r7, #16]
 8004a0e:	edd7 5a04 	vldr	s11, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8004a12:	ed97 7a04 	vldr	s14, [r7, #16]
 8004a16:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a1e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8004a22:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(180 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 8004a26:	ed9f 5a40 	vldr	s10, [pc, #256]	; 8004b28 <turn90R+0x200>
 8004a2a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	eeb0 2a47 	vmov.f32	s4, s14
 8004a34:	eef0 1a65 	vmov.f32	s3, s11
 8004a38:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 8004b2c <turn90R+0x204>
 8004a3c:	eef0 0a46 	vmov.f32	s1, s12
 8004a40:	eeb0 0a66 	vmov.f32	s0, s13
 8004a44:	f7fd f8d4 	bl	8001bf0 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 8004a48:	f7ff fcf3 	bl	8004432 <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);

	}
}
 8004a4c:	e065      	b.n	8004b1a <turn90R+0x1f2>
		wallmode.WallControlMode=0;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8004a52:	2300      	movs	r3, #0
 8004a54:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=1;
 8004a56:	2301      	movs	r3, #1
 8004a58:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004a5e:	edd7 6a05 	vldr	s13, [r7, #20]
 8004a62:	ed97 6a04 	vldr	s12, [r7, #16]
 8004a66:	edd7 5a04 	vldr	s11, [r7, #16]
 8004a6a:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8004a6e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004a72:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a7a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004a7e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004a82:	eddf 4a29 	vldr	s9, [pc, #164]	; 8004b28 <turn90R+0x200>
 8004a86:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	eeb0 2a47 	vmov.f32	s4, s14
 8004a90:	eef0 1a45 	vmov.f32	s3, s10
 8004a94:	eeb0 1a65 	vmov.f32	s2, s11
 8004a98:	eef0 0a46 	vmov.f32	s1, s12
 8004a9c:	eeb0 0a66 	vmov.f32	s0, s13
 8004aa0:	f7fd f8a6 	bl	8001bf0 <straight_table>
		slalom_table(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 8004aa4:	edd7 7a04 	vldr	s15, [r7, #16]
 8004aa8:	ed97 7a07 	vldr	s14, [r7, #28]
 8004aac:	edd7 6a08 	vldr	s13, [r7, #32]
 8004ab0:	eef0 2a66 	vmov.f32	s5, s13
 8004ab4:	eeb0 2a47 	vmov.f32	s4, s14
 8004ab8:	eddf 1a1e 	vldr	s3, [pc, #120]	; 8004b34 <turn90R+0x20c>
 8004abc:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8004b34 <turn90R+0x20c>
 8004ac0:	eddf 0a19 	vldr	s1, [pc, #100]	; 8004b28 <turn90R+0x200>
 8004ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ac8:	f7fd fa76 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 8004acc:	2300      	movs	r3, #0
 8004ace:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004ad4:	edd7 6a06 	vldr	s13, [r7, #24]
 8004ad8:	ed97 6a04 	vldr	s12, [r7, #16]
 8004adc:	edd7 5a04 	vldr	s11, [r7, #16]
 8004ae0:	ed97 5a04 	vldr	s10, [r7, #16]
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8004ae4:	ed97 7a04 	vldr	s14, [r7, #16]
 8004ae8:	edd7 7a04 	vldr	s15, [r7, #16]
 8004aec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004af0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004af4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004af8:	eddf 4a0b 	vldr	s9, [pc, #44]	; 8004b28 <turn90R+0x200>
 8004afc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	eeb0 2a47 	vmov.f32	s4, s14
 8004b06:	eef0 1a45 	vmov.f32	s3, s10
 8004b0a:	eeb0 1a65 	vmov.f32	s2, s11
 8004b0e:	eef0 0a46 	vmov.f32	s1, s12
 8004b12:	eeb0 0a66 	vmov.f32	s0, s13
 8004b16:	f7fd f86b 	bl	8001bf0 <straight_table>
}
 8004b1a:	bf00      	nop
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b24:	b004      	add	sp, #16
 8004b26:	4770      	bx	lr
 8004b28:	42b40000 	.word	0x42b40000
 8004b2c:	42c80000 	.word	0x42c80000
 8004b30:	43528000 	.word	0x43528000
 8004b34:	00000000 	.word	0x00000000
 8004b38:	43340000 	.word	0x43340000

08004b3c <turn90L>:

void turn90L(parameter turnpara, char test_mode) {
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b082      	sub	sp, #8
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	f107 0c10 	add.w	ip, r7, #16
 8004b48:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8004b4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	f040 8088 	bne.w	8004c66 <turn90L+0x12a>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 8004b56:	1d3b      	adds	r3, r7, #4
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff fc4d 	bl	80043f8 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8004b5e:	edd7 6a04 	vldr	s13, [r7, #16]
 8004b62:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8004b66:	ed97 7a04 	vldr	s14, [r7, #16]
 8004b6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b72:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8004b76:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8004b7a:	eddf 5a72 	vldr	s11, [pc, #456]	; 8004d44 <turn90L+0x208>
 8004b7e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	eeb0 2a47 	vmov.f32	s4, s14
 8004b88:	eef0 1a46 	vmov.f32	s3, s12
 8004b8c:	eeb0 1a66 	vmov.f32	s2, s13
 8004b90:	eddf 0a6d 	vldr	s1, [pc, #436]	; 8004d48 <turn90L+0x20c>
 8004b94:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8004d4c <turn90L+0x210>
 8004b98:	f7fd f82a 	bl	8001bf0 <straight_table>
		wallmode.WallCutMode=1;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	71fb      	strb	r3, [r7, #7]

		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004ba0:	edd7 6a05 	vldr	s13, [r7, #20]
 8004ba4:	ed97 6a04 	vldr	s12, [r7, #16]
 8004ba8:	edd7 5a04 	vldr	s11, [r7, #16]
 8004bac:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8004bb0:	ed97 7a04 	vldr	s14, [r7, #16]
 8004bb4:	edd7 7a04 	vldr	s15, [r7, #16]
 8004bb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bbc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004bc0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004bc4:	eddf 4a5f 	vldr	s9, [pc, #380]	; 8004d44 <turn90L+0x208>
 8004bc8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	eeb0 2a47 	vmov.f32	s4, s14
 8004bd2:	eef0 1a45 	vmov.f32	s3, s10
 8004bd6:	eeb0 1a65 	vmov.f32	s2, s11
 8004bda:	eef0 0a46 	vmov.f32	s1, s12
 8004bde:	eeb0 0a66 	vmov.f32	s0, s13
 8004be2:	f7fd f805 	bl	8001bf0 <straight_table>

		slalom_table(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8004be6:	ed97 7a04 	vldr	s14, [r7, #16]
 8004bea:	edd7 7a07 	vldr	s15, [r7, #28]
 8004bee:	eef1 7a67 	vneg.f32	s15, s15
 8004bf2:	edd7 6a08 	vldr	s13, [r7, #32]
 8004bf6:	eef0 2a66 	vmov.f32	s5, s13
 8004bfa:	eeb0 2a67 	vmov.f32	s4, s15
 8004bfe:	eddf 1a54 	vldr	s3, [pc, #336]	; 8004d50 <turn90L+0x214>
 8004c02:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8004d50 <turn90L+0x214>
 8004c06:	eddf 0a53 	vldr	s1, [pc, #332]	; 8004d54 <turn90L+0x218>
 8004c0a:	eeb0 0a47 	vmov.f32	s0, s14
 8004c0e:	f7fd f9d3 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	713b      	strb	r3, [r7, #4]
		straight_table(180 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 8004c16:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c1a:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004d58 <turn90L+0x21c>
 8004c1e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004c22:	ed97 6a04 	vldr	s12, [r7, #16]
 8004c26:	edd7 5a04 	vldr	s11, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8004c2a:	ed97 7a04 	vldr	s14, [r7, #16]
 8004c2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c36:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8004c3a:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(180 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 8004c3e:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8004d44 <turn90L+0x208>
 8004c42:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	eeb0 2a47 	vmov.f32	s4, s14
 8004c4c:	eef0 1a65 	vmov.f32	s3, s11
 8004c50:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 8004d48 <turn90L+0x20c>
 8004c54:	eef0 0a46 	vmov.f32	s1, s12
 8004c58:	eeb0 0a66 	vmov.f32	s0, s13
 8004c5c:	f7fc ffc8 	bl	8001bf0 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 8004c60:	f7ff fbe7 	bl	8004432 <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);

	}
}
 8004c64:	e067      	b.n	8004d36 <turn90L+0x1fa>
		wallmode.WallControlMode=0;
 8004c66:	2300      	movs	r3, #0
 8004c68:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=1;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8004c72:	2300      	movs	r3, #0
 8004c74:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004c76:	edd7 6a05 	vldr	s13, [r7, #20]
 8004c7a:	ed97 6a04 	vldr	s12, [r7, #16]
 8004c7e:	edd7 5a04 	vldr	s11, [r7, #16]
 8004c82:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8004c86:	ed97 7a04 	vldr	s14, [r7, #16]
 8004c8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c92:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004c96:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004c9a:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8004d44 <turn90L+0x208>
 8004c9e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	eeb0 2a47 	vmov.f32	s4, s14
 8004ca8:	eef0 1a45 	vmov.f32	s3, s10
 8004cac:	eeb0 1a65 	vmov.f32	s2, s11
 8004cb0:	eef0 0a46 	vmov.f32	s1, s12
 8004cb4:	eeb0 0a66 	vmov.f32	s0, s13
 8004cb8:	f7fc ff9a 	bl	8001bf0 <straight_table>
		slalom_table(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8004cbc:	ed97 7a04 	vldr	s14, [r7, #16]
 8004cc0:	edd7 7a07 	vldr	s15, [r7, #28]
 8004cc4:	eef1 7a67 	vneg.f32	s15, s15
 8004cc8:	edd7 6a08 	vldr	s13, [r7, #32]
 8004ccc:	eef0 2a66 	vmov.f32	s5, s13
 8004cd0:	eeb0 2a67 	vmov.f32	s4, s15
 8004cd4:	eddf 1a1e 	vldr	s3, [pc, #120]	; 8004d50 <turn90L+0x214>
 8004cd8:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8004d50 <turn90L+0x214>
 8004cdc:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8004d54 <turn90L+0x218>
 8004ce0:	eeb0 0a47 	vmov.f32	s0, s14
 8004ce4:	f7fd f968 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 8004cec:	2300      	movs	r3, #0
 8004cee:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004cf0:	edd7 6a06 	vldr	s13, [r7, #24]
 8004cf4:	ed97 6a04 	vldr	s12, [r7, #16]
 8004cf8:	edd7 5a04 	vldr	s11, [r7, #16]
 8004cfc:	ed97 5a04 	vldr	s10, [r7, #16]
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8004d00:	ed97 7a04 	vldr	s14, [r7, #16]
 8004d04:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d0c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004d10:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004d14:	eddf 4a0b 	vldr	s9, [pc, #44]	; 8004d44 <turn90L+0x208>
 8004d18:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	eeb0 2a47 	vmov.f32	s4, s14
 8004d22:	eef0 1a45 	vmov.f32	s3, s10
 8004d26:	eeb0 1a65 	vmov.f32	s2, s11
 8004d2a:	eef0 0a46 	vmov.f32	s1, s12
 8004d2e:	eeb0 0a66 	vmov.f32	s0, s13
 8004d32:	f7fc ff5d 	bl	8001bf0 <straight_table>
}
 8004d36:	bf00      	nop
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d40:	b004      	add	sp, #16
 8004d42:	4770      	bx	lr
 8004d44:	42b40000 	.word	0x42b40000
 8004d48:	42c80000 	.word	0x42c80000
 8004d4c:	43528000 	.word	0x43528000
 8004d50:	00000000 	.word	0x00000000
 8004d54:	c2b40000 	.word	0xc2b40000
 8004d58:	43340000 	.word	0x43340000

08004d5c <turn180R>:


void turn180R(parameter turnpara, char test_mode) {
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b082      	sub	sp, #8
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	f107 0c10 	add.w	ip, r7, #16
 8004d68:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8004d6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	f040 8086 	bne.w	8004e82 <turn180R+0x126>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 8004d76:	1d3b      	adds	r3, r7, #4
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff fb3d 	bl	80043f8 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8004d7e:	edd7 6a04 	vldr	s13, [r7, #16]
 8004d82:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8004d86:	ed97 7a04 	vldr	s14, [r7, #16]
 8004d8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d92:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8004d96:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8004d9a:	eddf 5a70 	vldr	s11, [pc, #448]	; 8004f5c <turn180R+0x200>
 8004d9e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	eeb0 2a47 	vmov.f32	s4, s14
 8004da8:	eef0 1a46 	vmov.f32	s3, s12
 8004dac:	eeb0 1a66 	vmov.f32	s2, s13
 8004db0:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8004f60 <turn180R+0x204>
 8004db4:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8004f64 <turn180R+0x208>
 8004db8:	f7fc ff1a 	bl	8001bf0 <straight_table>
		wallmode.WallCutMode=1;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	71fb      	strb	r3, [r7, #7]

		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004dc0:	edd7 6a05 	vldr	s13, [r7, #20]
 8004dc4:	ed97 6a04 	vldr	s12, [r7, #16]
 8004dc8:	edd7 5a04 	vldr	s11, [r7, #16]
 8004dcc:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8004dd0:	ed97 7a04 	vldr	s14, [r7, #16]
 8004dd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8004dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ddc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004de0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004de4:	eddf 4a5d 	vldr	s9, [pc, #372]	; 8004f5c <turn180R+0x200>
 8004de8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	eeb0 2a47 	vmov.f32	s4, s14
 8004df2:	eef0 1a45 	vmov.f32	s3, s10
 8004df6:	eeb0 1a65 	vmov.f32	s2, s11
 8004dfa:	eef0 0a46 	vmov.f32	s1, s12
 8004dfe:	eeb0 0a66 	vmov.f32	s0, s13
 8004e02:	f7fc fef5 	bl	8001bf0 <straight_table>

		slalom_table(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 8004e06:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e0a:	ed97 7a07 	vldr	s14, [r7, #28]
 8004e0e:	edd7 6a08 	vldr	s13, [r7, #32]
 8004e12:	eef0 2a66 	vmov.f32	s5, s13
 8004e16:	eeb0 2a47 	vmov.f32	s4, s14
 8004e1a:	eddf 1a53 	vldr	s3, [pc, #332]	; 8004f68 <turn180R+0x20c>
 8004e1e:	ed9f 1a52 	vldr	s2, [pc, #328]	; 8004f68 <turn180R+0x20c>
 8004e22:	eddf 0a52 	vldr	s1, [pc, #328]	; 8004f6c <turn180R+0x210>
 8004e26:	eeb0 0a67 	vmov.f32	s0, s15
 8004e2a:	f7fd f8c5 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	713b      	strb	r3, [r7, #4]
		straight_table(180 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 8004e32:	edd7 7a06 	vldr	s15, [r7, #24]
 8004e36:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8004f6c <turn180R+0x210>
 8004e3a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004e3e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004e42:	edd7 5a04 	vldr	s11, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8004e46:	ed97 7a04 	vldr	s14, [r7, #16]
 8004e4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e52:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8004e56:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(180 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 8004e5a:	ed9f 5a40 	vldr	s10, [pc, #256]	; 8004f5c <turn180R+0x200>
 8004e5e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	eeb0 2a47 	vmov.f32	s4, s14
 8004e68:	eef0 1a65 	vmov.f32	s3, s11
 8004e6c:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 8004f60 <turn180R+0x204>
 8004e70:	eef0 0a46 	vmov.f32	s1, s12
 8004e74:	eeb0 0a66 	vmov.f32	s0, s13
 8004e78:	f7fc feba 	bl	8001bf0 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 8004e7c:	f7ff fad9 	bl	8004432 <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);

	}
}
 8004e80:	e065      	b.n	8004f4e <turn180R+0x1f2>
		wallmode.WallControlMode=0;
 8004e82:	2300      	movs	r3, #0
 8004e84:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8004e86:	2300      	movs	r3, #0
 8004e88:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=1;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004e92:	edd7 6a05 	vldr	s13, [r7, #20]
 8004e96:	ed97 6a04 	vldr	s12, [r7, #16]
 8004e9a:	edd7 5a04 	vldr	s11, [r7, #16]
 8004e9e:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8004ea2:	ed97 7a04 	vldr	s14, [r7, #16]
 8004ea6:	edd7 7a04 	vldr	s15, [r7, #16]
 8004eaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004eae:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004eb2:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004eb6:	eddf 4a29 	vldr	s9, [pc, #164]	; 8004f5c <turn180R+0x200>
 8004eba:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	eeb0 2a47 	vmov.f32	s4, s14
 8004ec4:	eef0 1a45 	vmov.f32	s3, s10
 8004ec8:	eeb0 1a65 	vmov.f32	s2, s11
 8004ecc:	eef0 0a46 	vmov.f32	s1, s12
 8004ed0:	eeb0 0a66 	vmov.f32	s0, s13
 8004ed4:	f7fc fe8c 	bl	8001bf0 <straight_table>
		slalom_table(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 8004ed8:	edd7 7a04 	vldr	s15, [r7, #16]
 8004edc:	ed97 7a07 	vldr	s14, [r7, #28]
 8004ee0:	edd7 6a08 	vldr	s13, [r7, #32]
 8004ee4:	eef0 2a66 	vmov.f32	s5, s13
 8004ee8:	eeb0 2a47 	vmov.f32	s4, s14
 8004eec:	eddf 1a1e 	vldr	s3, [pc, #120]	; 8004f68 <turn180R+0x20c>
 8004ef0:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8004f68 <turn180R+0x20c>
 8004ef4:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8004f6c <turn180R+0x210>
 8004ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8004efc:	f7fd f85c 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004f08:	edd7 6a06 	vldr	s13, [r7, #24]
 8004f0c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004f10:	edd7 5a04 	vldr	s11, [r7, #16]
 8004f14:	ed97 5a04 	vldr	s10, [r7, #16]
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8004f18:	ed97 7a04 	vldr	s14, [r7, #16]
 8004f1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004f20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f24:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004f28:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004f2c:	eddf 4a0b 	vldr	s9, [pc, #44]	; 8004f5c <turn180R+0x200>
 8004f30:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	eeb0 2a47 	vmov.f32	s4, s14
 8004f3a:	eef0 1a45 	vmov.f32	s3, s10
 8004f3e:	eeb0 1a65 	vmov.f32	s2, s11
 8004f42:	eef0 0a46 	vmov.f32	s1, s12
 8004f46:	eeb0 0a66 	vmov.f32	s0, s13
 8004f4a:	f7fc fe51 	bl	8001bf0 <straight_table>
}
 8004f4e:	bf00      	nop
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f58:	b004      	add	sp, #16
 8004f5a:	4770      	bx	lr
 8004f5c:	42b40000 	.word	0x42b40000
 8004f60:	42c80000 	.word	0x42c80000
 8004f64:	43528000 	.word	0x43528000
 8004f68:	00000000 	.word	0x00000000
 8004f6c:	43340000 	.word	0x43340000

08004f70 <turn180L>:

void turn180L(parameter turnpara, char test_mode) {
 8004f70:	b084      	sub	sp, #16
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	f107 0c10 	add.w	ip, r7, #16
 8004f7c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8004f80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	f040 8088 	bne.w	800509a <turn180L+0x12a>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 8004f8a:	1d3b      	adds	r3, r7, #4
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7ff fa33 	bl	80043f8 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8004f92:	edd7 6a04 	vldr	s13, [r7, #16]
 8004f96:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8004f9a:	ed97 7a04 	vldr	s14, [r7, #16]
 8004f9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004fa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fa6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8004faa:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8004fae:	eddf 5a72 	vldr	s11, [pc, #456]	; 8005178 <turn180L+0x208>
 8004fb2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	eeb0 2a47 	vmov.f32	s4, s14
 8004fbc:	eef0 1a46 	vmov.f32	s3, s12
 8004fc0:	eeb0 1a66 	vmov.f32	s2, s13
 8004fc4:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800517c <turn180L+0x20c>
 8004fc8:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8005180 <turn180L+0x210>
 8004fcc:	f7fc fe10 	bl	8001bf0 <straight_table>
		wallmode.WallCutMode=1;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	71fb      	strb	r3, [r7, #7]

		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004fd4:	edd7 6a05 	vldr	s13, [r7, #20]
 8004fd8:	ed97 6a04 	vldr	s12, [r7, #16]
 8004fdc:	edd7 5a04 	vldr	s11, [r7, #16]
 8004fe0:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8004fe4:	ed97 7a04 	vldr	s14, [r7, #16]
 8004fe8:	edd7 7a04 	vldr	s15, [r7, #16]
 8004fec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ff0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004ff4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004ff8:	eddf 4a5f 	vldr	s9, [pc, #380]	; 8005178 <turn180L+0x208>
 8004ffc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	eeb0 2a47 	vmov.f32	s4, s14
 8005006:	eef0 1a45 	vmov.f32	s3, s10
 800500a:	eeb0 1a65 	vmov.f32	s2, s11
 800500e:	eef0 0a46 	vmov.f32	s1, s12
 8005012:	eeb0 0a66 	vmov.f32	s0, s13
 8005016:	f7fc fdeb 	bl	8001bf0 <straight_table>

		slalom_table(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800501a:	ed97 7a04 	vldr	s14, [r7, #16]
 800501e:	edd7 7a07 	vldr	s15, [r7, #28]
 8005022:	eef1 7a67 	vneg.f32	s15, s15
 8005026:	edd7 6a08 	vldr	s13, [r7, #32]
 800502a:	eef0 2a66 	vmov.f32	s5, s13
 800502e:	eeb0 2a67 	vmov.f32	s4, s15
 8005032:	eddf 1a54 	vldr	s3, [pc, #336]	; 8005184 <turn180L+0x214>
 8005036:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8005184 <turn180L+0x214>
 800503a:	eddf 0a53 	vldr	s1, [pc, #332]	; 8005188 <turn180L+0x218>
 800503e:	eeb0 0a47 	vmov.f32	s0, s14
 8005042:	f7fc ffb9 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 8005046:	2300      	movs	r3, #0
 8005048:	713b      	strb	r3, [r7, #4]
		straight_table(180 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 800504a:	edd7 7a06 	vldr	s15, [r7, #24]
 800504e:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800518c <turn180L+0x21c>
 8005052:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005056:	ed97 6a04 	vldr	s12, [r7, #16]
 800505a:	edd7 5a04 	vldr	s11, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 800505e:	ed97 7a04 	vldr	s14, [r7, #16]
 8005062:	edd7 7a04 	vldr	s15, [r7, #16]
 8005066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800506a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800506e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(180 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 8005072:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8005178 <turn180L+0x208>
 8005076:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	eeb0 2a47 	vmov.f32	s4, s14
 8005080:	eef0 1a65 	vmov.f32	s3, s11
 8005084:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 800517c <turn180L+0x20c>
 8005088:	eef0 0a46 	vmov.f32	s1, s12
 800508c:	eeb0 0a66 	vmov.f32	s0, s13
 8005090:	f7fc fdae 	bl	8001bf0 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 8005094:	f7ff f9cd 	bl	8004432 <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);

	}
}
 8005098:	e067      	b.n	800516a <turn180L+0x1fa>
		wallmode.WallControlMode=0;
 800509a:	2300      	movs	r3, #0
 800509c:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 800509e:	2300      	movs	r3, #0
 80050a0:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=1;
 80050a2:	2301      	movs	r3, #1
 80050a4:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 80050a6:	2300      	movs	r3, #0
 80050a8:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80050aa:	edd7 6a05 	vldr	s13, [r7, #20]
 80050ae:	ed97 6a04 	vldr	s12, [r7, #16]
 80050b2:	edd7 5a04 	vldr	s11, [r7, #16]
 80050b6:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 80050ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80050be:	edd7 7a04 	vldr	s15, [r7, #16]
 80050c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050c6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80050ca:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80050ce:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8005178 <turn180L+0x208>
 80050d2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	eeb0 2a47 	vmov.f32	s4, s14
 80050dc:	eef0 1a45 	vmov.f32	s3, s10
 80050e0:	eeb0 1a65 	vmov.f32	s2, s11
 80050e4:	eef0 0a46 	vmov.f32	s1, s12
 80050e8:	eeb0 0a66 	vmov.f32	s0, s13
 80050ec:	f7fc fd80 	bl	8001bf0 <straight_table>
		slalom_table(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 80050f0:	ed97 7a04 	vldr	s14, [r7, #16]
 80050f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80050f8:	eef1 7a67 	vneg.f32	s15, s15
 80050fc:	edd7 6a08 	vldr	s13, [r7, #32]
 8005100:	eef0 2a66 	vmov.f32	s5, s13
 8005104:	eeb0 2a67 	vmov.f32	s4, s15
 8005108:	eddf 1a1e 	vldr	s3, [pc, #120]	; 8005184 <turn180L+0x214>
 800510c:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8005184 <turn180L+0x214>
 8005110:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8005188 <turn180L+0x218>
 8005114:	eeb0 0a47 	vmov.f32	s0, s14
 8005118:	f7fc ff4e 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 800511c:	2300      	movs	r3, #0
 800511e:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 8005120:	2300      	movs	r3, #0
 8005122:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005124:	edd7 6a06 	vldr	s13, [r7, #24]
 8005128:	ed97 6a04 	vldr	s12, [r7, #16]
 800512c:	edd7 5a04 	vldr	s11, [r7, #16]
 8005130:	ed97 5a04 	vldr	s10, [r7, #16]
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8005134:	ed97 7a04 	vldr	s14, [r7, #16]
 8005138:	edd7 7a04 	vldr	s15, [r7, #16]
 800513c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005140:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8005144:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005148:	eddf 4a0b 	vldr	s9, [pc, #44]	; 8005178 <turn180L+0x208>
 800514c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	eeb0 2a47 	vmov.f32	s4, s14
 8005156:	eef0 1a45 	vmov.f32	s3, s10
 800515a:	eeb0 1a65 	vmov.f32	s2, s11
 800515e:	eef0 0a46 	vmov.f32	s1, s12
 8005162:	eeb0 0a66 	vmov.f32	s0, s13
 8005166:	f7fc fd43 	bl	8001bf0 <straight_table>
}
 800516a:	bf00      	nop
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005174:	b004      	add	sp, #16
 8005176:	4770      	bx	lr
 8005178:	42b40000 	.word	0x42b40000
 800517c:	42c80000 	.word	0x42c80000
 8005180:	43528000 	.word	0x43528000
 8005184:	00000000 	.word	0x00000000
 8005188:	c3340000 	.word	0xc3340000
 800518c:	43340000 	.word	0x43340000

08005190 <turn45inR>:



void turn45inR(parameter turnpara, char test_mode) {
 8005190:	b084      	sub	sp, #16
 8005192:	b580      	push	{r7, lr}
 8005194:	b082      	sub	sp, #8
 8005196:	af00      	add	r7, sp, #0
 8005198:	f107 0c10 	add.w	ip, r7, #16
 800519c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 80051a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	f040 8090 	bne.w	80052ca <turn45inR+0x13a>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 80051aa:	1d3b      	adds	r3, r7, #4
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff f923 	bl	80043f8 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 80051b2:	edd7 6a04 	vldr	s13, [r7, #16]
 80051b6:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 80051ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80051be:	edd7 7a04 	vldr	s15, [r7, #16]
 80051c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051c6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80051ca:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 80051ce:	eddf 5abc 	vldr	s11, [pc, #752]	; 80054c0 <turn45inR+0x330>
 80051d2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	eeb0 2a47 	vmov.f32	s4, s14
 80051dc:	eef0 1a46 	vmov.f32	s3, s12
 80051e0:	eeb0 1a66 	vmov.f32	s2, s13
 80051e4:	eddf 0ab7 	vldr	s1, [pc, #732]	; 80054c4 <turn45inR+0x334>
 80051e8:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 80054c8 <turn45inR+0x338>
 80051ec:	f7fc fd00 	bl	8001bf0 <straight_table>
		wallmode.WallCutMode=1;
 80051f0:	2301      	movs	r3, #1
 80051f2:	71fb      	strb	r3, [r7, #7]

		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80051f4:	edd7 6a05 	vldr	s13, [r7, #20]
 80051f8:	ed97 6a04 	vldr	s12, [r7, #16]
 80051fc:	edd7 5a04 	vldr	s11, [r7, #16]
 8005200:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8005204:	ed97 7a04 	vldr	s14, [r7, #16]
 8005208:	edd7 7a04 	vldr	s15, [r7, #16]
 800520c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005210:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8005214:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005218:	eddf 4aa9 	vldr	s9, [pc, #676]	; 80054c0 <turn45inR+0x330>
 800521c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	eeb0 2a47 	vmov.f32	s4, s14
 8005226:	eef0 1a45 	vmov.f32	s3, s10
 800522a:	eeb0 1a65 	vmov.f32	s2, s11
 800522e:	eef0 0a46 	vmov.f32	s1, s12
 8005232:	eeb0 0a66 	vmov.f32	s0, s13
 8005236:	f7fc fcdb 	bl	8001bf0 <straight_table>

		slalom_table(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800523a:	edd7 7a04 	vldr	s15, [r7, #16]
 800523e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005242:	edd7 6a08 	vldr	s13, [r7, #32]
 8005246:	eef0 2a66 	vmov.f32	s5, s13
 800524a:	eeb0 2a47 	vmov.f32	s4, s14
 800524e:	eddf 1a9f 	vldr	s3, [pc, #636]	; 80054cc <turn45inR+0x33c>
 8005252:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 80054cc <turn45inR+0x33c>
 8005256:	eddf 0a9e 	vldr	s1, [pc, #632]	; 80054d0 <turn45inR+0x340>
 800525a:	eeb0 0a67 	vmov.f32	s0, s15
 800525e:	f7fc feab 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 8005262:	2300      	movs	r3, #0
 8005264:	713b      	strb	r3, [r7, #4]
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	4618      	mov	r0, r3
 800526a:	f7fb f96d 	bl	8000548 <__aeabi_f2d>
 800526e:	a392      	add	r3, pc, #584	; (adr r3, 80054b8 <turn45inR+0x328>)
 8005270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005274:	f7fb f80a 	bl	800028c <__adddf3>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4610      	mov	r0, r2
 800527e:	4619      	mov	r1, r3
 8005280:	f7fb fcb2 	bl	8000be8 <__aeabi_d2f>
 8005284:	4603      	mov	r3, r0
 8005286:	edd7 6a04 	vldr	s13, [r7, #16]
 800528a:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 800528e:	ed97 7a04 	vldr	s14, [r7, #16]
 8005292:	edd7 7a04 	vldr	s15, [r7, #16]
 8005296:	ee27 7a27 	vmul.f32	s14, s14, s15
 800529a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800529e:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 80052a2:	eddf 5a87 	vldr	s11, [pc, #540]	; 80054c0 <turn45inR+0x330>
 80052a6:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	eeb0 2a47 	vmov.f32	s4, s14
 80052b0:	eef0 1a46 	vmov.f32	s3, s12
 80052b4:	ed9f 1a83 	vldr	s2, [pc, #524]	; 80054c4 <turn45inR+0x334>
 80052b8:	eef0 0a66 	vmov.f32	s1, s13
 80052bc:	ee00 3a10 	vmov	s0, r3
 80052c0:	f7fc fc96 	bl	8001bf0 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 80052c4:	f7ff f8b5 	bl	8004432 <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);

	}
}
 80052c8:	e0ec      	b.n	80054a4 <turn45inR+0x314>
	} else if(test_mode == 2){
 80052ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	f040 8082 	bne.w	80053d8 <turn45inR+0x248>
		test_motor_start(&wallmode);
 80052d4:	1d3b      	adds	r3, r7, #4
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff f88e 	bl	80043f8 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 80052dc:	edd7 6a04 	vldr	s13, [r7, #16]
 80052e0:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 80052e4:	ed97 7a04 	vldr	s14, [r7, #16]
 80052e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80052ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052f0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80052f4:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 80052f8:	eddf 5a71 	vldr	s11, [pc, #452]	; 80054c0 <turn45inR+0x330>
 80052fc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	eeb0 2a47 	vmov.f32	s4, s14
 8005306:	eef0 1a46 	vmov.f32	s3, s12
 800530a:	eeb0 1a66 	vmov.f32	s2, s13
 800530e:	eddf 0a6d 	vldr	s1, [pc, #436]	; 80054c4 <turn45inR+0x334>
 8005312:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80054c8 <turn45inR+0x338>
 8005316:	f7fc fc6b 	bl	8001bf0 <straight_table>
		wallmode.WallCutMode=1;
 800531a:	2301      	movs	r3, #1
 800531c:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800531e:	edd7 6a05 	vldr	s13, [r7, #20]
 8005322:	ed97 6a04 	vldr	s12, [r7, #16]
 8005326:	edd7 5a04 	vldr	s11, [r7, #16]
 800532a:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 800532e:	ed97 7a04 	vldr	s14, [r7, #16]
 8005332:	edd7 7a04 	vldr	s15, [r7, #16]
 8005336:	ee27 7a27 	vmul.f32	s14, s14, s15
 800533a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800533e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005342:	eddf 4a5f 	vldr	s9, [pc, #380]	; 80054c0 <turn45inR+0x330>
 8005346:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	eeb0 2a47 	vmov.f32	s4, s14
 8005350:	eef0 1a45 	vmov.f32	s3, s10
 8005354:	eeb0 1a65 	vmov.f32	s2, s11
 8005358:	eef0 0a46 	vmov.f32	s1, s12
 800535c:	eeb0 0a66 	vmov.f32	s0, s13
 8005360:	f7fc fc46 	bl	8001bf0 <straight_table>
		slalom_table(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 8005364:	edd7 7a04 	vldr	s15, [r7, #16]
 8005368:	ed97 7a07 	vldr	s14, [r7, #28]
 800536c:	edd7 6a08 	vldr	s13, [r7, #32]
 8005370:	eef0 2a66 	vmov.f32	s5, s13
 8005374:	eeb0 2a47 	vmov.f32	s4, s14
 8005378:	eddf 1a54 	vldr	s3, [pc, #336]	; 80054cc <turn45inR+0x33c>
 800537c:	ed9f 1a53 	vldr	s2, [pc, #332]	; 80054cc <turn45inR+0x33c>
 8005380:	eddf 0a53 	vldr	s1, [pc, #332]	; 80054d0 <turn45inR+0x340>
 8005384:	eeb0 0a67 	vmov.f32	s0, s15
 8005388:	f7fc fe16 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 800538c:	2300      	movs	r3, #0
 800538e:	713b      	strb	r3, [r7, #4]
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005390:	edd7 6a06 	vldr	s13, [r7, #24]
 8005394:	ed97 6a04 	vldr	s12, [r7, #16]
 8005398:	edd7 5a04 	vldr	s11, [r7, #16]
 800539c:	ed97 5a04 	vldr	s10, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 80053a0:	ed97 7a04 	vldr	s14, [r7, #16]
 80053a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80053a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053ac:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80053b0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80053b4:	eddf 4a42 	vldr	s9, [pc, #264]	; 80054c0 <turn45inR+0x330>
 80053b8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	eeb0 2a47 	vmov.f32	s4, s14
 80053c2:	eef0 1a45 	vmov.f32	s3, s10
 80053c6:	eeb0 1a65 	vmov.f32	s2, s11
 80053ca:	eef0 0a46 	vmov.f32	s1, s12
 80053ce:	eeb0 0a66 	vmov.f32	s0, s13
 80053d2:	f7fc fc0d 	bl	8001bf0 <straight_table>
}
 80053d6:	e065      	b.n	80054a4 <turn45inR+0x314>
		wallmode.WallControlMode=0;
 80053d8:	2300      	movs	r3, #0
 80053da:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 80053dc:	2300      	movs	r3, #0
 80053de:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=1;
 80053e0:	2301      	movs	r3, #1
 80053e2:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 80053e4:	2300      	movs	r3, #0
 80053e6:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80053e8:	edd7 6a05 	vldr	s13, [r7, #20]
 80053ec:	ed97 6a04 	vldr	s12, [r7, #16]
 80053f0:	edd7 5a04 	vldr	s11, [r7, #16]
 80053f4:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 80053f8:	ed97 7a04 	vldr	s14, [r7, #16]
 80053fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8005400:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005404:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8005408:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800540c:	eddf 4a2c 	vldr	s9, [pc, #176]	; 80054c0 <turn45inR+0x330>
 8005410:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	eeb0 2a47 	vmov.f32	s4, s14
 800541a:	eef0 1a45 	vmov.f32	s3, s10
 800541e:	eeb0 1a65 	vmov.f32	s2, s11
 8005422:	eef0 0a46 	vmov.f32	s1, s12
 8005426:	eeb0 0a66 	vmov.f32	s0, s13
 800542a:	f7fc fbe1 	bl	8001bf0 <straight_table>
		slalom_table(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800542e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005432:	ed97 7a07 	vldr	s14, [r7, #28]
 8005436:	edd7 6a08 	vldr	s13, [r7, #32]
 800543a:	eef0 2a66 	vmov.f32	s5, s13
 800543e:	eeb0 2a47 	vmov.f32	s4, s14
 8005442:	eddf 1a22 	vldr	s3, [pc, #136]	; 80054cc <turn45inR+0x33c>
 8005446:	ed9f 1a21 	vldr	s2, [pc, #132]	; 80054cc <turn45inR+0x33c>
 800544a:	eddf 0a21 	vldr	s1, [pc, #132]	; 80054d0 <turn45inR+0x340>
 800544e:	eeb0 0a67 	vmov.f32	s0, s15
 8005452:	f7fc fdb1 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 8005456:	2300      	movs	r3, #0
 8005458:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 800545a:	2300      	movs	r3, #0
 800545c:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800545e:	edd7 6a06 	vldr	s13, [r7, #24]
 8005462:	ed97 6a04 	vldr	s12, [r7, #16]
 8005466:	edd7 5a04 	vldr	s11, [r7, #16]
 800546a:	ed97 5a04 	vldr	s10, [r7, #16]
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 800546e:	ed97 7a04 	vldr	s14, [r7, #16]
 8005472:	edd7 7a04 	vldr	s15, [r7, #16]
 8005476:	ee27 7a27 	vmul.f32	s14, s14, s15
 800547a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800547e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005482:	eddf 4a0f 	vldr	s9, [pc, #60]	; 80054c0 <turn45inR+0x330>
 8005486:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	eeb0 2a47 	vmov.f32	s4, s14
 8005490:	eef0 1a45 	vmov.f32	s3, s10
 8005494:	eeb0 1a65 	vmov.f32	s2, s11
 8005498:	eef0 0a46 	vmov.f32	s1, s12
 800549c:	eeb0 0a66 	vmov.f32	s0, s13
 80054a0:	f7fc fba6 	bl	8001bf0 <straight_table>
}
 80054a4:	bf00      	nop
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054ae:	b004      	add	sp, #16
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	f3af 8000 	nop.w
 80054b8:	c083126e 	.word	0xc083126e
 80054bc:	406fd1ca 	.word	0x406fd1ca
 80054c0:	42b40000 	.word	0x42b40000
 80054c4:	42c80000 	.word	0x42c80000
 80054c8:	43528000 	.word	0x43528000
 80054cc:	00000000 	.word	0x00000000
 80054d0:	42340000 	.word	0x42340000
 80054d4:	00000000 	.word	0x00000000

080054d8 <turn45inL>:

void turn45inL(parameter turnpara, char test_mode) {
 80054d8:	b084      	sub	sp, #16
 80054da:	b580      	push	{r7, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	af00      	add	r7, sp, #0
 80054e0:	f107 0c10 	add.w	ip, r7, #16
 80054e4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 80054e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	f040 8092 	bne.w	8005616 <turn45inL+0x13e>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 80054f2:	1d3b      	adds	r3, r7, #4
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fe ff7f 	bl	80043f8 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 80054fa:	edd7 6a04 	vldr	s13, [r7, #16]
 80054fe:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8005502:	ed97 7a04 	vldr	s14, [r7, #16]
 8005506:	edd7 7a04 	vldr	s15, [r7, #16]
 800550a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800550e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8005512:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8005516:	eddf 5abe 	vldr	s11, [pc, #760]	; 8005810 <turn45inL+0x338>
 800551a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	eeb0 2a47 	vmov.f32	s4, s14
 8005524:	eef0 1a46 	vmov.f32	s3, s12
 8005528:	eeb0 1a66 	vmov.f32	s2, s13
 800552c:	eddf 0ab9 	vldr	s1, [pc, #740]	; 8005814 <turn45inL+0x33c>
 8005530:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8005818 <turn45inL+0x340>
 8005534:	f7fc fb5c 	bl	8001bf0 <straight_table>
		wallmode.WallCutMode=1;
 8005538:	2301      	movs	r3, #1
 800553a:	71fb      	strb	r3, [r7, #7]

		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800553c:	edd7 6a05 	vldr	s13, [r7, #20]
 8005540:	ed97 6a04 	vldr	s12, [r7, #16]
 8005544:	edd7 5a04 	vldr	s11, [r7, #16]
 8005548:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 800554c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005550:	edd7 7a04 	vldr	s15, [r7, #16]
 8005554:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005558:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800555c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005560:	eddf 4aab 	vldr	s9, [pc, #684]	; 8005810 <turn45inL+0x338>
 8005564:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	eeb0 2a47 	vmov.f32	s4, s14
 800556e:	eef0 1a45 	vmov.f32	s3, s10
 8005572:	eeb0 1a65 	vmov.f32	s2, s11
 8005576:	eef0 0a46 	vmov.f32	s1, s12
 800557a:	eeb0 0a66 	vmov.f32	s0, s13
 800557e:	f7fc fb37 	bl	8001bf0 <straight_table>

		slalom_table(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8005582:	ed97 7a04 	vldr	s14, [r7, #16]
 8005586:	edd7 7a07 	vldr	s15, [r7, #28]
 800558a:	eef1 7a67 	vneg.f32	s15, s15
 800558e:	edd7 6a08 	vldr	s13, [r7, #32]
 8005592:	eef0 2a66 	vmov.f32	s5, s13
 8005596:	eeb0 2a67 	vmov.f32	s4, s15
 800559a:	eddf 1aa0 	vldr	s3, [pc, #640]	; 800581c <turn45inL+0x344>
 800559e:	ed9f 1a9f 	vldr	s2, [pc, #636]	; 800581c <turn45inL+0x344>
 80055a2:	eddf 0a9f 	vldr	s1, [pc, #636]	; 8005820 <turn45inL+0x348>
 80055a6:	eeb0 0a47 	vmov.f32	s0, s14
 80055aa:	f7fc fd05 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 80055ae:	2300      	movs	r3, #0
 80055b0:	713b      	strb	r3, [r7, #4]
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fa ffc7 	bl	8000548 <__aeabi_f2d>
 80055ba:	a393      	add	r3, pc, #588	; (adr r3, 8005808 <turn45inL+0x330>)
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f7fa fe64 	bl	800028c <__adddf3>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	4610      	mov	r0, r2
 80055ca:	4619      	mov	r1, r3
 80055cc:	f7fb fb0c 	bl	8000be8 <__aeabi_d2f>
 80055d0:	4603      	mov	r3, r0
 80055d2:	edd7 6a04 	vldr	s13, [r7, #16]
 80055d6:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 80055da:	ed97 7a04 	vldr	s14, [r7, #16]
 80055de:	edd7 7a04 	vldr	s15, [r7, #16]
 80055e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055e6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80055ea:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 80055ee:	eddf 5a88 	vldr	s11, [pc, #544]	; 8005810 <turn45inL+0x338>
 80055f2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	eeb0 2a47 	vmov.f32	s4, s14
 80055fc:	eef0 1a46 	vmov.f32	s3, s12
 8005600:	ed9f 1a84 	vldr	s2, [pc, #528]	; 8005814 <turn45inL+0x33c>
 8005604:	eef0 0a66 	vmov.f32	s1, s13
 8005608:	ee00 3a10 	vmov	s0, r3
 800560c:	f7fc faf0 	bl	8001bf0 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 8005610:	f7fe ff0f 	bl	8004432 <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);

	}
}
 8005614:	e0f0      	b.n	80057f8 <turn45inL+0x320>
	} else if(test_mode == 2){
 8005616:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800561a:	2b02      	cmp	r3, #2
 800561c:	f040 8084 	bne.w	8005728 <turn45inL+0x250>
		test_motor_start(&wallmode);
 8005620:	1d3b      	adds	r3, r7, #4
 8005622:	4618      	mov	r0, r3
 8005624:	f7fe fee8 	bl	80043f8 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8005628:	edd7 6a04 	vldr	s13, [r7, #16]
 800562c:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8005630:	ed97 7a04 	vldr	s14, [r7, #16]
 8005634:	edd7 7a04 	vldr	s15, [r7, #16]
 8005638:	ee27 7a27 	vmul.f32	s14, s14, s15
 800563c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8005640:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8005644:	eddf 5a72 	vldr	s11, [pc, #456]	; 8005810 <turn45inL+0x338>
 8005648:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	eeb0 2a47 	vmov.f32	s4, s14
 8005652:	eef0 1a46 	vmov.f32	s3, s12
 8005656:	eeb0 1a66 	vmov.f32	s2, s13
 800565a:	eddf 0a6e 	vldr	s1, [pc, #440]	; 8005814 <turn45inL+0x33c>
 800565e:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 8005818 <turn45inL+0x340>
 8005662:	f7fc fac5 	bl	8001bf0 <straight_table>
		wallmode.WallCutMode=1;
 8005666:	2301      	movs	r3, #1
 8005668:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800566a:	edd7 6a05 	vldr	s13, [r7, #20]
 800566e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005672:	edd7 5a04 	vldr	s11, [r7, #16]
 8005676:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 800567a:	ed97 7a04 	vldr	s14, [r7, #16]
 800567e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005682:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005686:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800568a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800568e:	eddf 4a60 	vldr	s9, [pc, #384]	; 8005810 <turn45inL+0x338>
 8005692:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	eeb0 2a47 	vmov.f32	s4, s14
 800569c:	eef0 1a45 	vmov.f32	s3, s10
 80056a0:	eeb0 1a65 	vmov.f32	s2, s11
 80056a4:	eef0 0a46 	vmov.f32	s1, s12
 80056a8:	eeb0 0a66 	vmov.f32	s0, s13
 80056ac:	f7fc faa0 	bl	8001bf0 <straight_table>
		slalom_table(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 80056b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80056b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80056b8:	eef1 7a67 	vneg.f32	s15, s15
 80056bc:	edd7 6a08 	vldr	s13, [r7, #32]
 80056c0:	eef0 2a66 	vmov.f32	s5, s13
 80056c4:	eeb0 2a67 	vmov.f32	s4, s15
 80056c8:	eddf 1a54 	vldr	s3, [pc, #336]	; 800581c <turn45inL+0x344>
 80056cc:	ed9f 1a53 	vldr	s2, [pc, #332]	; 800581c <turn45inL+0x344>
 80056d0:	eddf 0a53 	vldr	s1, [pc, #332]	; 8005820 <turn45inL+0x348>
 80056d4:	eeb0 0a47 	vmov.f32	s0, s14
 80056d8:	f7fc fc6e 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 80056dc:	2300      	movs	r3, #0
 80056de:	713b      	strb	r3, [r7, #4]
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80056e0:	edd7 6a06 	vldr	s13, [r7, #24]
 80056e4:	ed97 6a04 	vldr	s12, [r7, #16]
 80056e8:	edd7 5a04 	vldr	s11, [r7, #16]
 80056ec:	ed97 5a04 	vldr	s10, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 80056f0:	ed97 7a04 	vldr	s14, [r7, #16]
 80056f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80056f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056fc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8005700:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005704:	eddf 4a42 	vldr	s9, [pc, #264]	; 8005810 <turn45inL+0x338>
 8005708:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	eeb0 2a47 	vmov.f32	s4, s14
 8005712:	eef0 1a45 	vmov.f32	s3, s10
 8005716:	eeb0 1a65 	vmov.f32	s2, s11
 800571a:	eef0 0a46 	vmov.f32	s1, s12
 800571e:	eeb0 0a66 	vmov.f32	s0, s13
 8005722:	f7fc fa65 	bl	8001bf0 <straight_table>
}
 8005726:	e067      	b.n	80057f8 <turn45inL+0x320>
		wallmode.WallControlMode=0;
 8005728:	2300      	movs	r3, #0
 800572a:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 800572c:	2300      	movs	r3, #0
 800572e:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=1;
 8005730:	2301      	movs	r3, #1
 8005732:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8005734:	2300      	movs	r3, #0
 8005736:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005738:	edd7 6a05 	vldr	s13, [r7, #20]
 800573c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005740:	edd7 5a04 	vldr	s11, [r7, #16]
 8005744:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8005748:	ed97 7a04 	vldr	s14, [r7, #16]
 800574c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005750:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005754:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8005758:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800575c:	eddf 4a2c 	vldr	s9, [pc, #176]	; 8005810 <turn45inL+0x338>
 8005760:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	eeb0 2a47 	vmov.f32	s4, s14
 800576a:	eef0 1a45 	vmov.f32	s3, s10
 800576e:	eeb0 1a65 	vmov.f32	s2, s11
 8005772:	eef0 0a46 	vmov.f32	s1, s12
 8005776:	eeb0 0a66 	vmov.f32	s0, s13
 800577a:	f7fc fa39 	bl	8001bf0 <straight_table>
		slalom_table(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800577e:	ed97 7a04 	vldr	s14, [r7, #16]
 8005782:	edd7 7a07 	vldr	s15, [r7, #28]
 8005786:	eef1 7a67 	vneg.f32	s15, s15
 800578a:	edd7 6a08 	vldr	s13, [r7, #32]
 800578e:	eef0 2a66 	vmov.f32	s5, s13
 8005792:	eeb0 2a67 	vmov.f32	s4, s15
 8005796:	eddf 1a21 	vldr	s3, [pc, #132]	; 800581c <turn45inL+0x344>
 800579a:	ed9f 1a20 	vldr	s2, [pc, #128]	; 800581c <turn45inL+0x344>
 800579e:	eddf 0a20 	vldr	s1, [pc, #128]	; 8005820 <turn45inL+0x348>
 80057a2:	eeb0 0a47 	vmov.f32	s0, s14
 80057a6:	f7fc fc07 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 80057aa:	2300      	movs	r3, #0
 80057ac:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 80057ae:	2300      	movs	r3, #0
 80057b0:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80057b2:	edd7 6a06 	vldr	s13, [r7, #24]
 80057b6:	ed97 6a04 	vldr	s12, [r7, #16]
 80057ba:	edd7 5a04 	vldr	s11, [r7, #16]
 80057be:	ed97 5a04 	vldr	s10, [r7, #16]
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 80057c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80057c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80057ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057ce:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80057d2:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80057d6:	eddf 4a0e 	vldr	s9, [pc, #56]	; 8005810 <turn45inL+0x338>
 80057da:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	eeb0 2a47 	vmov.f32	s4, s14
 80057e4:	eef0 1a45 	vmov.f32	s3, s10
 80057e8:	eeb0 1a65 	vmov.f32	s2, s11
 80057ec:	eef0 0a46 	vmov.f32	s1, s12
 80057f0:	eeb0 0a66 	vmov.f32	s0, s13
 80057f4:	f7fc f9fc 	bl	8001bf0 <straight_table>
}
 80057f8:	bf00      	nop
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005802:	b004      	add	sp, #16
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	c083126e 	.word	0xc083126e
 800580c:	406fd1ca 	.word	0x406fd1ca
 8005810:	42b40000 	.word	0x42b40000
 8005814:	42c80000 	.word	0x42c80000
 8005818:	43528000 	.word	0x43528000
 800581c:	00000000 	.word	0x00000000
 8005820:	c2340000 	.word	0xc2340000
 8005824:	00000000 	.word	0x00000000

08005828 <turn135inR>:



void turn135inR(parameter turnpara, char test_mode) {
 8005828:	b084      	sub	sp, #16
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	f107 0c10 	add.w	ip, r7, #16
 8005834:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8005838:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800583c:	2b01      	cmp	r3, #1
 800583e:	f040 8090 	bne.w	8005962 <turn135inR+0x13a>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 8005842:	1d3b      	adds	r3, r7, #4
 8005844:	4618      	mov	r0, r3
 8005846:	f7fe fdd7 	bl	80043f8 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 800584a:	edd7 6a04 	vldr	s13, [r7, #16]
 800584e:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8005852:	ed97 7a04 	vldr	s14, [r7, #16]
 8005856:	edd7 7a04 	vldr	s15, [r7, #16]
 800585a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800585e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8005862:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8005866:	eddf 5aba 	vldr	s11, [pc, #744]	; 8005b50 <turn135inR+0x328>
 800586a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	eeb0 2a47 	vmov.f32	s4, s14
 8005874:	eef0 1a46 	vmov.f32	s3, s12
 8005878:	eeb0 1a66 	vmov.f32	s2, s13
 800587c:	eddf 0ab5 	vldr	s1, [pc, #724]	; 8005b54 <turn135inR+0x32c>
 8005880:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8005b58 <turn135inR+0x330>
 8005884:	f7fc f9b4 	bl	8001bf0 <straight_table>
		wallmode.WallCutMode=1;
 8005888:	2301      	movs	r3, #1
 800588a:	71fb      	strb	r3, [r7, #7]

		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800588c:	edd7 6a05 	vldr	s13, [r7, #20]
 8005890:	ed97 6a04 	vldr	s12, [r7, #16]
 8005894:	edd7 5a04 	vldr	s11, [r7, #16]
 8005898:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 800589c:	ed97 7a04 	vldr	s14, [r7, #16]
 80058a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80058a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058a8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80058ac:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80058b0:	eddf 4aa7 	vldr	s9, [pc, #668]	; 8005b50 <turn135inR+0x328>
 80058b4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	eeb0 2a47 	vmov.f32	s4, s14
 80058be:	eef0 1a45 	vmov.f32	s3, s10
 80058c2:	eeb0 1a65 	vmov.f32	s2, s11
 80058c6:	eef0 0a46 	vmov.f32	s1, s12
 80058ca:	eeb0 0a66 	vmov.f32	s0, s13
 80058ce:	f7fc f98f 	bl	8001bf0 <straight_table>

		slalom_table(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 80058d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80058d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80058da:	edd7 6a08 	vldr	s13, [r7, #32]
 80058de:	eef0 2a66 	vmov.f32	s5, s13
 80058e2:	eeb0 2a47 	vmov.f32	s4, s14
 80058e6:	eddf 1a9d 	vldr	s3, [pc, #628]	; 8005b5c <turn135inR+0x334>
 80058ea:	ed9f 1a9c 	vldr	s2, [pc, #624]	; 8005b5c <turn135inR+0x334>
 80058ee:	eddf 0a9c 	vldr	s1, [pc, #624]	; 8005b60 <turn135inR+0x338>
 80058f2:	eeb0 0a67 	vmov.f32	s0, s15
 80058f6:	f7fc fb5f 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 80058fa:	2300      	movs	r3, #0
 80058fc:	713b      	strb	r3, [r7, #4]
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	4618      	mov	r0, r3
 8005902:	f7fa fe21 	bl	8000548 <__aeabi_f2d>
 8005906:	a390      	add	r3, pc, #576	; (adr r3, 8005b48 <turn135inR+0x320>)
 8005908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590c:	f7fa fcbe 	bl	800028c <__adddf3>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4610      	mov	r0, r2
 8005916:	4619      	mov	r1, r3
 8005918:	f7fb f966 	bl	8000be8 <__aeabi_d2f>
 800591c:	4603      	mov	r3, r0
 800591e:	edd7 6a04 	vldr	s13, [r7, #16]
 8005922:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8005926:	ed97 7a04 	vldr	s14, [r7, #16]
 800592a:	edd7 7a04 	vldr	s15, [r7, #16]
 800592e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005932:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8005936:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 800593a:	eddf 5a85 	vldr	s11, [pc, #532]	; 8005b50 <turn135inR+0x328>
 800593e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	eeb0 2a47 	vmov.f32	s4, s14
 8005948:	eef0 1a46 	vmov.f32	s3, s12
 800594c:	ed9f 1a81 	vldr	s2, [pc, #516]	; 8005b54 <turn135inR+0x32c>
 8005950:	eef0 0a66 	vmov.f32	s1, s13
 8005954:	ee00 3a10 	vmov	s0, r3
 8005958:	f7fc f94a 	bl	8001bf0 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 800595c:	f7fe fd69 	bl	8004432 <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);

	}
}
 8005960:	e0ea      	b.n	8005b38 <turn135inR+0x310>
	} else if(test_mode == 2){
 8005962:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005966:	2b02      	cmp	r3, #2
 8005968:	f040 8082 	bne.w	8005a70 <turn135inR+0x248>
		test_motor_start(&wallmode);
 800596c:	1d3b      	adds	r3, r7, #4
 800596e:	4618      	mov	r0, r3
 8005970:	f7fe fd42 	bl	80043f8 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8005974:	edd7 6a04 	vldr	s13, [r7, #16]
 8005978:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 800597c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005980:	edd7 7a04 	vldr	s15, [r7, #16]
 8005984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005988:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800598c:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8005990:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005b50 <turn135inR+0x328>
 8005994:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	eeb0 2a47 	vmov.f32	s4, s14
 800599e:	eef0 1a46 	vmov.f32	s3, s12
 80059a2:	eeb0 1a66 	vmov.f32	s2, s13
 80059a6:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8005b54 <turn135inR+0x32c>
 80059aa:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8005b58 <turn135inR+0x330>
 80059ae:	f7fc f91f 	bl	8001bf0 <straight_table>
		wallmode.WallCutMode=1;
 80059b2:	2301      	movs	r3, #1
 80059b4:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80059b6:	edd7 6a05 	vldr	s13, [r7, #20]
 80059ba:	ed97 6a04 	vldr	s12, [r7, #16]
 80059be:	edd7 5a04 	vldr	s11, [r7, #16]
 80059c2:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 80059c6:	ed97 7a04 	vldr	s14, [r7, #16]
 80059ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80059ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059d2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80059d6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80059da:	eddf 4a5d 	vldr	s9, [pc, #372]	; 8005b50 <turn135inR+0x328>
 80059de:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	eeb0 2a47 	vmov.f32	s4, s14
 80059e8:	eef0 1a45 	vmov.f32	s3, s10
 80059ec:	eeb0 1a65 	vmov.f32	s2, s11
 80059f0:	eef0 0a46 	vmov.f32	s1, s12
 80059f4:	eeb0 0a66 	vmov.f32	s0, s13
 80059f8:	f7fc f8fa 	bl	8001bf0 <straight_table>
		slalom_table(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 80059fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a00:	ed97 7a07 	vldr	s14, [r7, #28]
 8005a04:	edd7 6a08 	vldr	s13, [r7, #32]
 8005a08:	eef0 2a66 	vmov.f32	s5, s13
 8005a0c:	eeb0 2a47 	vmov.f32	s4, s14
 8005a10:	eddf 1a52 	vldr	s3, [pc, #328]	; 8005b5c <turn135inR+0x334>
 8005a14:	ed9f 1a51 	vldr	s2, [pc, #324]	; 8005b5c <turn135inR+0x334>
 8005a18:	eddf 0a51 	vldr	s1, [pc, #324]	; 8005b60 <turn135inR+0x338>
 8005a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8005a20:	f7fc faca 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 8005a24:	2300      	movs	r3, #0
 8005a26:	713b      	strb	r3, [r7, #4]
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005a28:	edd7 6a06 	vldr	s13, [r7, #24]
 8005a2c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005a30:	edd7 5a04 	vldr	s11, [r7, #16]
 8005a34:	ed97 5a04 	vldr	s10, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8005a38:	ed97 7a04 	vldr	s14, [r7, #16]
 8005a3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a44:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8005a48:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005a4c:	eddf 4a40 	vldr	s9, [pc, #256]	; 8005b50 <turn135inR+0x328>
 8005a50:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	eeb0 2a47 	vmov.f32	s4, s14
 8005a5a:	eef0 1a45 	vmov.f32	s3, s10
 8005a5e:	eeb0 1a65 	vmov.f32	s2, s11
 8005a62:	eef0 0a46 	vmov.f32	s1, s12
 8005a66:	eeb0 0a66 	vmov.f32	s0, s13
 8005a6a:	f7fc f8c1 	bl	8001bf0 <straight_table>
}
 8005a6e:	e063      	b.n	8005b38 <turn135inR+0x310>
		wallmode.WallControlMode=0;
 8005a70:	2300      	movs	r3, #0
 8005a72:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8005a74:	2300      	movs	r3, #0
 8005a76:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=1;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005a80:	edd7 6a05 	vldr	s13, [r7, #20]
 8005a84:	ed97 6a04 	vldr	s12, [r7, #16]
 8005a88:	edd7 5a04 	vldr	s11, [r7, #16]
 8005a8c:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8005a90:	ed97 7a04 	vldr	s14, [r7, #16]
 8005a94:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a9c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8005aa0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005aa4:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8005b50 <turn135inR+0x328>
 8005aa8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	eeb0 2a47 	vmov.f32	s4, s14
 8005ab2:	eef0 1a45 	vmov.f32	s3, s10
 8005ab6:	eeb0 1a65 	vmov.f32	s2, s11
 8005aba:	eef0 0a46 	vmov.f32	s1, s12
 8005abe:	eeb0 0a66 	vmov.f32	s0, s13
 8005ac2:	f7fc f895 	bl	8001bf0 <straight_table>
		slalom_table(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 8005ac6:	edd7 7a04 	vldr	s15, [r7, #16]
 8005aca:	ed97 7a07 	vldr	s14, [r7, #28]
 8005ace:	edd7 6a08 	vldr	s13, [r7, #32]
 8005ad2:	eef0 2a66 	vmov.f32	s5, s13
 8005ad6:	eeb0 2a47 	vmov.f32	s4, s14
 8005ada:	eddf 1a20 	vldr	s3, [pc, #128]	; 8005b5c <turn135inR+0x334>
 8005ade:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8005b5c <turn135inR+0x334>
 8005ae2:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8005b60 <turn135inR+0x338>
 8005ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8005aea:	f7fc fa65 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 8005aee:	2300      	movs	r3, #0
 8005af0:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 8005af2:	2300      	movs	r3, #0
 8005af4:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8005af6:	edd7 6a06 	vldr	s13, [r7, #24]
 8005afa:	ed97 6a04 	vldr	s12, [r7, #16]
 8005afe:	edd7 5a04 	vldr	s11, [r7, #16]
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8005b02:	ed97 7a04 	vldr	s14, [r7, #16]
 8005b06:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b0e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8005b12:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8005b16:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 8005b50 <turn135inR+0x328>
 8005b1a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	eeb0 2a47 	vmov.f32	s4, s14
 8005b24:	eef0 1a65 	vmov.f32	s3, s11
 8005b28:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8005b5c <turn135inR+0x334>
 8005b2c:	eef0 0a46 	vmov.f32	s1, s12
 8005b30:	eeb0 0a66 	vmov.f32	s0, s13
 8005b34:	f7fc f85c 	bl	8001bf0 <straight_table>
}
 8005b38:	bf00      	nop
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b42:	b004      	add	sp, #16
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	c083126e 	.word	0xc083126e
 8005b4c:	406fd1ca 	.word	0x406fd1ca
 8005b50:	42b40000 	.word	0x42b40000
 8005b54:	42c80000 	.word	0x42c80000
 8005b58:	43528000 	.word	0x43528000
 8005b5c:	00000000 	.word	0x00000000
 8005b60:	43070000 	.word	0x43070000
 8005b64:	00000000 	.word	0x00000000

08005b68 <turn135inL>:

void turn135inL(parameter turnpara, char test_mode) {
 8005b68:	b084      	sub	sp, #16
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b082      	sub	sp, #8
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	f107 0c10 	add.w	ip, r7, #16
 8005b74:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8005b78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	f040 8092 	bne.w	8005ca6 <turn135inL+0x13e>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 8005b82:	1d3b      	adds	r3, r7, #4
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7fe fc37 	bl	80043f8 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8005b8a:	edd7 6a04 	vldr	s13, [r7, #16]
 8005b8e:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8005b92:	ed97 7a04 	vldr	s14, [r7, #16]
 8005b96:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b9e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8005ba2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8005ba6:	eddf 5abe 	vldr	s11, [pc, #760]	; 8005ea0 <turn135inL+0x338>
 8005baa:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	eeb0 2a47 	vmov.f32	s4, s14
 8005bb4:	eef0 1a46 	vmov.f32	s3, s12
 8005bb8:	eeb0 1a66 	vmov.f32	s2, s13
 8005bbc:	eddf 0ab9 	vldr	s1, [pc, #740]	; 8005ea4 <turn135inL+0x33c>
 8005bc0:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8005ea8 <turn135inL+0x340>
 8005bc4:	f7fc f814 	bl	8001bf0 <straight_table>
		wallmode.WallCutMode=1;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	71fb      	strb	r3, [r7, #7]

		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005bcc:	edd7 6a05 	vldr	s13, [r7, #20]
 8005bd0:	ed97 6a04 	vldr	s12, [r7, #16]
 8005bd4:	edd7 5a04 	vldr	s11, [r7, #16]
 8005bd8:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8005bdc:	ed97 7a04 	vldr	s14, [r7, #16]
 8005be0:	edd7 7a04 	vldr	s15, [r7, #16]
 8005be4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005be8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8005bec:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005bf0:	eddf 4aab 	vldr	s9, [pc, #684]	; 8005ea0 <turn135inL+0x338>
 8005bf4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	eeb0 2a47 	vmov.f32	s4, s14
 8005bfe:	eef0 1a45 	vmov.f32	s3, s10
 8005c02:	eeb0 1a65 	vmov.f32	s2, s11
 8005c06:	eef0 0a46 	vmov.f32	s1, s12
 8005c0a:	eeb0 0a66 	vmov.f32	s0, s13
 8005c0e:	f7fb ffef 	bl	8001bf0 <straight_table>

		slalom_table(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8005c12:	ed97 7a04 	vldr	s14, [r7, #16]
 8005c16:	edd7 7a07 	vldr	s15, [r7, #28]
 8005c1a:	eef1 7a67 	vneg.f32	s15, s15
 8005c1e:	edd7 6a08 	vldr	s13, [r7, #32]
 8005c22:	eef0 2a66 	vmov.f32	s5, s13
 8005c26:	eeb0 2a67 	vmov.f32	s4, s15
 8005c2a:	eddf 1aa0 	vldr	s3, [pc, #640]	; 8005eac <turn135inL+0x344>
 8005c2e:	ed9f 1a9f 	vldr	s2, [pc, #636]	; 8005eac <turn135inL+0x344>
 8005c32:	eddf 0a9f 	vldr	s1, [pc, #636]	; 8005eb0 <turn135inL+0x348>
 8005c36:	eeb0 0a47 	vmov.f32	s0, s14
 8005c3a:	f7fc f9bd 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	713b      	strb	r3, [r7, #4]
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7fa fc7f 	bl	8000548 <__aeabi_f2d>
 8005c4a:	a393      	add	r3, pc, #588	; (adr r3, 8005e98 <turn135inL+0x330>)
 8005c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c50:	f7fa fb1c 	bl	800028c <__adddf3>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4610      	mov	r0, r2
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	f7fa ffc4 	bl	8000be8 <__aeabi_d2f>
 8005c60:	4603      	mov	r3, r0
 8005c62:	edd7 6a04 	vldr	s13, [r7, #16]
 8005c66:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8005c6a:	ed97 7a04 	vldr	s14, [r7, #16]
 8005c6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c76:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8005c7a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 8005c7e:	eddf 5a88 	vldr	s11, [pc, #544]	; 8005ea0 <turn135inL+0x338>
 8005c82:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	eeb0 2a47 	vmov.f32	s4, s14
 8005c8c:	eef0 1a46 	vmov.f32	s3, s12
 8005c90:	ed9f 1a84 	vldr	s2, [pc, #528]	; 8005ea4 <turn135inL+0x33c>
 8005c94:	eef0 0a66 	vmov.f32	s1, s13
 8005c98:	ee00 3a10 	vmov	s0, r3
 8005c9c:	f7fb ffa8 	bl	8001bf0 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 8005ca0:	f7fe fbc7 	bl	8004432 <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);

	}
}
 8005ca4:	e0f0      	b.n	8005e88 <turn135inL+0x320>
	} else if(test_mode == 2){
 8005ca6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	f040 8084 	bne.w	8005db8 <turn135inL+0x250>
		test_motor_start(&wallmode);
 8005cb0:	1d3b      	adds	r3, r7, #4
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fe fba0 	bl	80043f8 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8005cb8:	edd7 6a04 	vldr	s13, [r7, #16]
 8005cbc:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8005cc0:	ed97 7a04 	vldr	s14, [r7, #16]
 8005cc4:	edd7 7a04 	vldr	s15, [r7, #16]
 8005cc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ccc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8005cd0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8005cd4:	eddf 5a72 	vldr	s11, [pc, #456]	; 8005ea0 <turn135inL+0x338>
 8005cd8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	eeb0 2a47 	vmov.f32	s4, s14
 8005ce2:	eef0 1a46 	vmov.f32	s3, s12
 8005ce6:	eeb0 1a66 	vmov.f32	s2, s13
 8005cea:	eddf 0a6e 	vldr	s1, [pc, #440]	; 8005ea4 <turn135inL+0x33c>
 8005cee:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 8005ea8 <turn135inL+0x340>
 8005cf2:	f7fb ff7d 	bl	8001bf0 <straight_table>
		wallmode.WallCutMode=1;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005cfa:	edd7 6a05 	vldr	s13, [r7, #20]
 8005cfe:	ed97 6a04 	vldr	s12, [r7, #16]
 8005d02:	edd7 5a04 	vldr	s11, [r7, #16]
 8005d06:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8005d0a:	ed97 7a04 	vldr	s14, [r7, #16]
 8005d0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d16:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8005d1a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005d1e:	eddf 4a60 	vldr	s9, [pc, #384]	; 8005ea0 <turn135inL+0x338>
 8005d22:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	eeb0 2a47 	vmov.f32	s4, s14
 8005d2c:	eef0 1a45 	vmov.f32	s3, s10
 8005d30:	eeb0 1a65 	vmov.f32	s2, s11
 8005d34:	eef0 0a46 	vmov.f32	s1, s12
 8005d38:	eeb0 0a66 	vmov.f32	s0, s13
 8005d3c:	f7fb ff58 	bl	8001bf0 <straight_table>
		slalom_table(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8005d40:	ed97 7a04 	vldr	s14, [r7, #16]
 8005d44:	edd7 7a07 	vldr	s15, [r7, #28]
 8005d48:	eef1 7a67 	vneg.f32	s15, s15
 8005d4c:	edd7 6a08 	vldr	s13, [r7, #32]
 8005d50:	eef0 2a66 	vmov.f32	s5, s13
 8005d54:	eeb0 2a67 	vmov.f32	s4, s15
 8005d58:	eddf 1a54 	vldr	s3, [pc, #336]	; 8005eac <turn135inL+0x344>
 8005d5c:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8005eac <turn135inL+0x344>
 8005d60:	eddf 0a53 	vldr	s1, [pc, #332]	; 8005eb0 <turn135inL+0x348>
 8005d64:	eeb0 0a47 	vmov.f32	s0, s14
 8005d68:	f7fc f926 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	713b      	strb	r3, [r7, #4]
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005d70:	edd7 6a06 	vldr	s13, [r7, #24]
 8005d74:	ed97 6a04 	vldr	s12, [r7, #16]
 8005d78:	edd7 5a04 	vldr	s11, [r7, #16]
 8005d7c:	ed97 5a04 	vldr	s10, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8005d80:	ed97 7a04 	vldr	s14, [r7, #16]
 8005d84:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d8c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8005d90:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005d94:	eddf 4a42 	vldr	s9, [pc, #264]	; 8005ea0 <turn135inL+0x338>
 8005d98:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	eeb0 2a47 	vmov.f32	s4, s14
 8005da2:	eef0 1a45 	vmov.f32	s3, s10
 8005da6:	eeb0 1a65 	vmov.f32	s2, s11
 8005daa:	eef0 0a46 	vmov.f32	s1, s12
 8005dae:	eeb0 0a66 	vmov.f32	s0, s13
 8005db2:	f7fb ff1d 	bl	8001bf0 <straight_table>
}
 8005db6:	e067      	b.n	8005e88 <turn135inL+0x320>
		wallmode.WallControlMode=0;
 8005db8:	2300      	movs	r3, #0
 8005dba:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=1;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005dc8:	edd7 6a05 	vldr	s13, [r7, #20]
 8005dcc:	ed97 6a04 	vldr	s12, [r7, #16]
 8005dd0:	edd7 5a04 	vldr	s11, [r7, #16]
 8005dd4:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8005dd8:	ed97 7a04 	vldr	s14, [r7, #16]
 8005ddc:	edd7 7a04 	vldr	s15, [r7, #16]
 8005de0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005de4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8005de8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005dec:	eddf 4a2c 	vldr	s9, [pc, #176]	; 8005ea0 <turn135inL+0x338>
 8005df0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	eeb0 2a47 	vmov.f32	s4, s14
 8005dfa:	eef0 1a45 	vmov.f32	s3, s10
 8005dfe:	eeb0 1a65 	vmov.f32	s2, s11
 8005e02:	eef0 0a46 	vmov.f32	s1, s12
 8005e06:	eeb0 0a66 	vmov.f32	s0, s13
 8005e0a:	f7fb fef1 	bl	8001bf0 <straight_table>
		slalom_table(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8005e0e:	ed97 7a04 	vldr	s14, [r7, #16]
 8005e12:	edd7 7a07 	vldr	s15, [r7, #28]
 8005e16:	eef1 7a67 	vneg.f32	s15, s15
 8005e1a:	edd7 6a08 	vldr	s13, [r7, #32]
 8005e1e:	eef0 2a66 	vmov.f32	s5, s13
 8005e22:	eeb0 2a67 	vmov.f32	s4, s15
 8005e26:	eddf 1a21 	vldr	s3, [pc, #132]	; 8005eac <turn135inL+0x344>
 8005e2a:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8005eac <turn135inL+0x344>
 8005e2e:	eddf 0a20 	vldr	s1, [pc, #128]	; 8005eb0 <turn135inL+0x348>
 8005e32:	eeb0 0a47 	vmov.f32	s0, s14
 8005e36:	f7fc f8bf 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005e42:	edd7 6a06 	vldr	s13, [r7, #24]
 8005e46:	ed97 6a04 	vldr	s12, [r7, #16]
 8005e4a:	edd7 5a04 	vldr	s11, [r7, #16]
 8005e4e:	ed97 5a04 	vldr	s10, [r7, #16]
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8005e52:	ed97 7a04 	vldr	s14, [r7, #16]
 8005e56:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e5e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8005e62:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005e66:	eddf 4a0e 	vldr	s9, [pc, #56]	; 8005ea0 <turn135inL+0x338>
 8005e6a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	eeb0 2a47 	vmov.f32	s4, s14
 8005e74:	eef0 1a45 	vmov.f32	s3, s10
 8005e78:	eeb0 1a65 	vmov.f32	s2, s11
 8005e7c:	eef0 0a46 	vmov.f32	s1, s12
 8005e80:	eeb0 0a66 	vmov.f32	s0, s13
 8005e84:	f7fb feb4 	bl	8001bf0 <straight_table>
}
 8005e88:	bf00      	nop
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e92:	b004      	add	sp, #16
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	c083126e 	.word	0xc083126e
 8005e9c:	406fd1ca 	.word	0x406fd1ca
 8005ea0:	42b40000 	.word	0x42b40000
 8005ea4:	42c80000 	.word	0x42c80000
 8005ea8:	43528000 	.word	0x43528000
 8005eac:	00000000 	.word	0x00000000
 8005eb0:	c3070000 	.word	0xc3070000
 8005eb4:	00000000 	.word	0x00000000

08005eb8 <turn45outR>:



void turn45outR(parameter turnpara, char test_mode) {
 8005eb8:	b084      	sub	sp, #16
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b082      	sub	sp, #8
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	f107 0c10 	add.w	ip, r7, #16
 8005ec4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8005ec8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d172      	bne.n	8005fb6 <turn45outR+0xfe>
//		highspeed_mode = 1;
//		record_mode = 1;
		wallmode.WallControlMode=0;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=2;
 8005ed8:	2302      	movs	r3, #2
 8005eda:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8005edc:	2300      	movs	r3, #0
 8005ede:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005ee0:	edd7 6a05 	vldr	s13, [r7, #20]
 8005ee4:	ed97 6a04 	vldr	s12, [r7, #16]
 8005ee8:	edd7 5a04 	vldr	s11, [r7, #16]
 8005eec:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8005ef0:	ed97 7a04 	vldr	s14, [r7, #16]
 8005ef4:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ef8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005efc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8005f00:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005f04:	eddf 4a64 	vldr	s9, [pc, #400]	; 8006098 <turn45outR+0x1e0>
 8005f08:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	eeb0 2a47 	vmov.f32	s4, s14
 8005f12:	eef0 1a45 	vmov.f32	s3, s10
 8005f16:	eeb0 1a65 	vmov.f32	s2, s11
 8005f1a:	eef0 0a46 	vmov.f32	s1, s12
 8005f1e:	eeb0 0a66 	vmov.f32	s0, s13
 8005f22:	f7fb fe65 	bl	8001bf0 <straight_table>

		slalom_table(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 8005f26:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f2a:	ed97 7a07 	vldr	s14, [r7, #28]
 8005f2e:	edd7 6a08 	vldr	s13, [r7, #32]
 8005f32:	eef0 2a66 	vmov.f32	s5, s13
 8005f36:	eeb0 2a47 	vmov.f32	s4, s14
 8005f3a:	eddf 1a58 	vldr	s3, [pc, #352]	; 800609c <turn45outR+0x1e4>
 8005f3e:	ed9f 1a57 	vldr	s2, [pc, #348]	; 800609c <turn45outR+0x1e4>
 8005f42:	eddf 0a57 	vldr	s1, [pc, #348]	; 80060a0 <turn45outR+0x1e8>
 8005f46:	eeb0 0a67 	vmov.f32	s0, s15
 8005f4a:	f7fc f835 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	713b      	strb	r3, [r7, #4]
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7fa faf7 	bl	8000548 <__aeabi_f2d>
 8005f5a:	a34d      	add	r3, pc, #308	; (adr r3, 8006090 <turn45outR+0x1d8>)
 8005f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f60:	f7fa f994 	bl	800028c <__adddf3>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	4610      	mov	r0, r2
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	f7fa fe3c 	bl	8000be8 <__aeabi_d2f>
 8005f70:	4603      	mov	r3, r0
 8005f72:	edd7 6a04 	vldr	s13, [r7, #16]
 8005f76:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8005f7a:	ed97 7a04 	vldr	s14, [r7, #16]
 8005f7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f86:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8005f8a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 8005f8e:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006098 <turn45outR+0x1e0>
 8005f92:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	eeb0 2a47 	vmov.f32	s4, s14
 8005f9c:	eef0 1a46 	vmov.f32	s3, s12
 8005fa0:	ed9f 1a40 	vldr	s2, [pc, #256]	; 80060a4 <turn45outR+0x1ec>
 8005fa4:	eef0 0a66 	vmov.f32	s1, s13
 8005fa8:	ee00 3a10 	vmov	s0, r3
 8005fac:	f7fb fe20 	bl	8001bf0 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 8005fb0:	f7fe fa3f 	bl	8004432 <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);

	}
}
 8005fb4:	e065      	b.n	8006082 <turn45outR+0x1ca>
		wallmode.WallControlMode=0;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=2;
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005fc6:	edd7 6a05 	vldr	s13, [r7, #20]
 8005fca:	ed97 6a04 	vldr	s12, [r7, #16]
 8005fce:	edd7 5a04 	vldr	s11, [r7, #16]
 8005fd2:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8005fd6:	ed97 7a04 	vldr	s14, [r7, #16]
 8005fda:	edd7 7a04 	vldr	s15, [r7, #16]
 8005fde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005fe2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8005fe6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005fea:	eddf 4a2b 	vldr	s9, [pc, #172]	; 8006098 <turn45outR+0x1e0>
 8005fee:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	eeb0 2a47 	vmov.f32	s4, s14
 8005ff8:	eef0 1a45 	vmov.f32	s3, s10
 8005ffc:	eeb0 1a65 	vmov.f32	s2, s11
 8006000:	eef0 0a46 	vmov.f32	s1, s12
 8006004:	eeb0 0a66 	vmov.f32	s0, s13
 8006008:	f7fb fdf2 	bl	8001bf0 <straight_table>
		slalom_table(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800600c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006010:	ed97 7a07 	vldr	s14, [r7, #28]
 8006014:	edd7 6a08 	vldr	s13, [r7, #32]
 8006018:	eef0 2a66 	vmov.f32	s5, s13
 800601c:	eeb0 2a47 	vmov.f32	s4, s14
 8006020:	eddf 1a1e 	vldr	s3, [pc, #120]	; 800609c <turn45outR+0x1e4>
 8006024:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 800609c <turn45outR+0x1e4>
 8006028:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80060a0 <turn45outR+0x1e8>
 800602c:	eeb0 0a67 	vmov.f32	s0, s15
 8006030:	f7fb ffc2 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 8006034:	2300      	movs	r3, #0
 8006036:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 8006038:	2300      	movs	r3, #0
 800603a:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800603c:	edd7 6a06 	vldr	s13, [r7, #24]
 8006040:	ed97 6a04 	vldr	s12, [r7, #16]
 8006044:	edd7 5a04 	vldr	s11, [r7, #16]
 8006048:	ed97 5a04 	vldr	s10, [r7, #16]
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 800604c:	ed97 7a04 	vldr	s14, [r7, #16]
 8006050:	edd7 7a04 	vldr	s15, [r7, #16]
 8006054:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006058:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800605c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006060:	eddf 4a0d 	vldr	s9, [pc, #52]	; 8006098 <turn45outR+0x1e0>
 8006064:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	eeb0 2a47 	vmov.f32	s4, s14
 800606e:	eef0 1a45 	vmov.f32	s3, s10
 8006072:	eeb0 1a65 	vmov.f32	s2, s11
 8006076:	eef0 0a46 	vmov.f32	s1, s12
 800607a:	eeb0 0a66 	vmov.f32	s0, s13
 800607e:	f7fb fdb7 	bl	8001bf0 <straight_table>
}
 8006082:	bf00      	nop
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800608c:	b004      	add	sp, #16
 800608e:	4770      	bx	lr
 8006090:	c083126e 	.word	0xc083126e
 8006094:	406fd1ca 	.word	0x406fd1ca
 8006098:	42b40000 	.word	0x42b40000
 800609c:	00000000 	.word	0x00000000
 80060a0:	42340000 	.word	0x42340000
 80060a4:	42c80000 	.word	0x42c80000

080060a8 <turn45outL>:


void turn45outL(parameter turnpara, char test_mode) {
 80060a8:	b084      	sub	sp, #16
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b082      	sub	sp, #8
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	f107 0c10 	add.w	ip, r7, #16
 80060b4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 80060b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d174      	bne.n	80061aa <turn45outL+0x102>
//		highspeed_mode = 1;
//		record_mode = 1;
		wallmode.WallControlMode=0;
 80060c0:	2300      	movs	r3, #0
 80060c2:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 80060c4:	2300      	movs	r3, #0
 80060c6:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=2;
 80060c8:	2302      	movs	r3, #2
 80060ca:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 80060cc:	2300      	movs	r3, #0
 80060ce:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80060d0:	edd7 6a05 	vldr	s13, [r7, #20]
 80060d4:	ed97 6a04 	vldr	s12, [r7, #16]
 80060d8:	edd7 5a04 	vldr	s11, [r7, #16]
 80060dc:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 80060e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80060e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80060e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060ec:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80060f0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80060f4:	eddf 4a66 	vldr	s9, [pc, #408]	; 8006290 <turn45outL+0x1e8>
 80060f8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	eeb0 2a47 	vmov.f32	s4, s14
 8006102:	eef0 1a45 	vmov.f32	s3, s10
 8006106:	eeb0 1a65 	vmov.f32	s2, s11
 800610a:	eef0 0a46 	vmov.f32	s1, s12
 800610e:	eeb0 0a66 	vmov.f32	s0, s13
 8006112:	f7fb fd6d 	bl	8001bf0 <straight_table>

		slalom_table(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8006116:	ed97 7a04 	vldr	s14, [r7, #16]
 800611a:	edd7 7a07 	vldr	s15, [r7, #28]
 800611e:	eef1 7a67 	vneg.f32	s15, s15
 8006122:	edd7 6a08 	vldr	s13, [r7, #32]
 8006126:	eef0 2a66 	vmov.f32	s5, s13
 800612a:	eeb0 2a67 	vmov.f32	s4, s15
 800612e:	eddf 1a59 	vldr	s3, [pc, #356]	; 8006294 <turn45outL+0x1ec>
 8006132:	ed9f 1a58 	vldr	s2, [pc, #352]	; 8006294 <turn45outL+0x1ec>
 8006136:	eddf 0a58 	vldr	s1, [pc, #352]	; 8006298 <turn45outL+0x1f0>
 800613a:	eeb0 0a47 	vmov.f32	s0, s14
 800613e:	f7fb ff3b 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 8006142:	2300      	movs	r3, #0
 8006144:	713b      	strb	r3, [r7, #4]
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	4618      	mov	r0, r3
 800614a:	f7fa f9fd 	bl	8000548 <__aeabi_f2d>
 800614e:	a34e      	add	r3, pc, #312	; (adr r3, 8006288 <turn45outL+0x1e0>)
 8006150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006154:	f7fa f89a 	bl	800028c <__adddf3>
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	4610      	mov	r0, r2
 800615e:	4619      	mov	r1, r3
 8006160:	f7fa fd42 	bl	8000be8 <__aeabi_d2f>
 8006164:	4603      	mov	r3, r0
 8006166:	edd7 6a04 	vldr	s13, [r7, #16]
 800616a:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 800616e:	ed97 7a04 	vldr	s14, [r7, #16]
 8006172:	edd7 7a04 	vldr	s15, [r7, #16]
 8006176:	ee27 7a27 	vmul.f32	s14, s14, s15
 800617a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800617e:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 8006182:	eddf 5a43 	vldr	s11, [pc, #268]	; 8006290 <turn45outL+0x1e8>
 8006186:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	eeb0 2a47 	vmov.f32	s4, s14
 8006190:	eef0 1a46 	vmov.f32	s3, s12
 8006194:	ed9f 1a41 	vldr	s2, [pc, #260]	; 800629c <turn45outL+0x1f4>
 8006198:	eef0 0a66 	vmov.f32	s1, s13
 800619c:	ee00 3a10 	vmov	s0, r3
 80061a0:	f7fb fd26 	bl	8001bf0 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 80061a4:	f7fe f945 	bl	8004432 <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);

	}
}
 80061a8:	e067      	b.n	800627a <turn45outL+0x1d2>
		wallmode.WallControlMode=0;
 80061aa:	2300      	movs	r3, #0
 80061ac:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 80061ae:	2300      	movs	r3, #0
 80061b0:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=2;
 80061b2:	2302      	movs	r3, #2
 80061b4:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 80061b6:	2300      	movs	r3, #0
 80061b8:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80061ba:	edd7 6a05 	vldr	s13, [r7, #20]
 80061be:	ed97 6a04 	vldr	s12, [r7, #16]
 80061c2:	edd7 5a04 	vldr	s11, [r7, #16]
 80061c6:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 80061ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80061ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80061d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061d6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80061da:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80061de:	eddf 4a2c 	vldr	s9, [pc, #176]	; 8006290 <turn45outL+0x1e8>
 80061e2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	eeb0 2a47 	vmov.f32	s4, s14
 80061ec:	eef0 1a45 	vmov.f32	s3, s10
 80061f0:	eeb0 1a65 	vmov.f32	s2, s11
 80061f4:	eef0 0a46 	vmov.f32	s1, s12
 80061f8:	eeb0 0a66 	vmov.f32	s0, s13
 80061fc:	f7fb fcf8 	bl	8001bf0 <straight_table>
		slalom_table(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8006200:	ed97 7a04 	vldr	s14, [r7, #16]
 8006204:	edd7 7a07 	vldr	s15, [r7, #28]
 8006208:	eef1 7a67 	vneg.f32	s15, s15
 800620c:	edd7 6a08 	vldr	s13, [r7, #32]
 8006210:	eef0 2a66 	vmov.f32	s5, s13
 8006214:	eeb0 2a67 	vmov.f32	s4, s15
 8006218:	eddf 1a1e 	vldr	s3, [pc, #120]	; 8006294 <turn45outL+0x1ec>
 800621c:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8006294 <turn45outL+0x1ec>
 8006220:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8006298 <turn45outL+0x1f0>
 8006224:	eeb0 0a47 	vmov.f32	s0, s14
 8006228:	f7fb fec6 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 800622c:	2300      	movs	r3, #0
 800622e:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 8006230:	2300      	movs	r3, #0
 8006232:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006234:	edd7 6a06 	vldr	s13, [r7, #24]
 8006238:	ed97 6a04 	vldr	s12, [r7, #16]
 800623c:	edd7 5a04 	vldr	s11, [r7, #16]
 8006240:	ed97 5a04 	vldr	s10, [r7, #16]
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8006244:	ed97 7a04 	vldr	s14, [r7, #16]
 8006248:	edd7 7a04 	vldr	s15, [r7, #16]
 800624c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006250:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8006254:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006258:	eddf 4a0d 	vldr	s9, [pc, #52]	; 8006290 <turn45outL+0x1e8>
 800625c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	eeb0 2a47 	vmov.f32	s4, s14
 8006266:	eef0 1a45 	vmov.f32	s3, s10
 800626a:	eeb0 1a65 	vmov.f32	s2, s11
 800626e:	eef0 0a46 	vmov.f32	s1, s12
 8006272:	eeb0 0a66 	vmov.f32	s0, s13
 8006276:	f7fb fcbb 	bl	8001bf0 <straight_table>
}
 800627a:	bf00      	nop
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006284:	b004      	add	sp, #16
 8006286:	4770      	bx	lr
 8006288:	c083126e 	.word	0xc083126e
 800628c:	406fd1ca 	.word	0x406fd1ca
 8006290:	42b40000 	.word	0x42b40000
 8006294:	00000000 	.word	0x00000000
 8006298:	c2340000 	.word	0xc2340000
 800629c:	42c80000 	.word	0x42c80000

080062a0 <turn135outR>:

void turn135outR(parameter turnpara, char test_mode) {
 80062a0:	b084      	sub	sp, #16
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b082      	sub	sp, #8
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	f107 0c10 	add.w	ip, r7, #16
 80062ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 80062b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d172      	bne.n	800639e <turn135outR+0xfe>
//		highspeed_mode = 1;
//		record_mode = 1;
		wallmode.WallControlMode=0;
 80062b8:	2300      	movs	r3, #0
 80062ba:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 80062bc:	2300      	movs	r3, #0
 80062be:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=2;
 80062c0:	2302      	movs	r3, #2
 80062c2:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 80062c4:	2300      	movs	r3, #0
 80062c6:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80062c8:	edd7 6a05 	vldr	s13, [r7, #20]
 80062cc:	ed97 6a04 	vldr	s12, [r7, #16]
 80062d0:	edd7 5a04 	vldr	s11, [r7, #16]
 80062d4:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 80062d8:	ed97 7a04 	vldr	s14, [r7, #16]
 80062dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80062e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062e4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80062e8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80062ec:	eddf 4a64 	vldr	s9, [pc, #400]	; 8006480 <turn135outR+0x1e0>
 80062f0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	eeb0 2a47 	vmov.f32	s4, s14
 80062fa:	eef0 1a45 	vmov.f32	s3, s10
 80062fe:	eeb0 1a65 	vmov.f32	s2, s11
 8006302:	eef0 0a46 	vmov.f32	s1, s12
 8006306:	eeb0 0a66 	vmov.f32	s0, s13
 800630a:	f7fb fc71 	bl	8001bf0 <straight_table>

		slalom_table(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800630e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006312:	ed97 7a07 	vldr	s14, [r7, #28]
 8006316:	edd7 6a08 	vldr	s13, [r7, #32]
 800631a:	eef0 2a66 	vmov.f32	s5, s13
 800631e:	eeb0 2a47 	vmov.f32	s4, s14
 8006322:	eddf 1a58 	vldr	s3, [pc, #352]	; 8006484 <turn135outR+0x1e4>
 8006326:	ed9f 1a57 	vldr	s2, [pc, #348]	; 8006484 <turn135outR+0x1e4>
 800632a:	eddf 0a57 	vldr	s1, [pc, #348]	; 8006488 <turn135outR+0x1e8>
 800632e:	eeb0 0a67 	vmov.f32	s0, s15
 8006332:	f7fb fe41 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 8006336:	2300      	movs	r3, #0
 8006338:	713b      	strb	r3, [r7, #4]
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	4618      	mov	r0, r3
 800633e:	f7fa f903 	bl	8000548 <__aeabi_f2d>
 8006342:	a34d      	add	r3, pc, #308	; (adr r3, 8006478 <turn135outR+0x1d8>)
 8006344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006348:	f7f9 ffa0 	bl	800028c <__adddf3>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4610      	mov	r0, r2
 8006352:	4619      	mov	r1, r3
 8006354:	f7fa fc48 	bl	8000be8 <__aeabi_d2f>
 8006358:	4603      	mov	r3, r0
 800635a:	edd7 6a04 	vldr	s13, [r7, #16]
 800635e:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8006362:	ed97 7a04 	vldr	s14, [r7, #16]
 8006366:	edd7 7a04 	vldr	s15, [r7, #16]
 800636a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800636e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8006372:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 8006376:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006480 <turn135outR+0x1e0>
 800637a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	eeb0 2a47 	vmov.f32	s4, s14
 8006384:	eef0 1a46 	vmov.f32	s3, s12
 8006388:	ed9f 1a40 	vldr	s2, [pc, #256]	; 800648c <turn135outR+0x1ec>
 800638c:	eef0 0a66 	vmov.f32	s1, s13
 8006390:	ee00 3a10 	vmov	s0, r3
 8006394:	f7fb fc2c 	bl	8001bf0 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 8006398:	f7fe f84b 	bl	8004432 <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);

	}
}
 800639c:	e065      	b.n	800646a <turn135outR+0x1ca>
		wallmode.WallControlMode=0;
 800639e:	2300      	movs	r3, #0
 80063a0:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 80063a2:	2300      	movs	r3, #0
 80063a4:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=2;
 80063a6:	2302      	movs	r3, #2
 80063a8:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 80063aa:	2300      	movs	r3, #0
 80063ac:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80063ae:	edd7 6a05 	vldr	s13, [r7, #20]
 80063b2:	ed97 6a04 	vldr	s12, [r7, #16]
 80063b6:	edd7 5a04 	vldr	s11, [r7, #16]
 80063ba:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 80063be:	ed97 7a04 	vldr	s14, [r7, #16]
 80063c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80063c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063ca:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80063ce:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80063d2:	eddf 4a2b 	vldr	s9, [pc, #172]	; 8006480 <turn135outR+0x1e0>
 80063d6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	eeb0 2a47 	vmov.f32	s4, s14
 80063e0:	eef0 1a45 	vmov.f32	s3, s10
 80063e4:	eeb0 1a65 	vmov.f32	s2, s11
 80063e8:	eef0 0a46 	vmov.f32	s1, s12
 80063ec:	eeb0 0a66 	vmov.f32	s0, s13
 80063f0:	f7fb fbfe 	bl	8001bf0 <straight_table>
		slalom_table(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 80063f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80063f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80063fc:	edd7 6a08 	vldr	s13, [r7, #32]
 8006400:	eef0 2a66 	vmov.f32	s5, s13
 8006404:	eeb0 2a47 	vmov.f32	s4, s14
 8006408:	eddf 1a1e 	vldr	s3, [pc, #120]	; 8006484 <turn135outR+0x1e4>
 800640c:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8006484 <turn135outR+0x1e4>
 8006410:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8006488 <turn135outR+0x1e8>
 8006414:	eeb0 0a67 	vmov.f32	s0, s15
 8006418:	f7fb fdce 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 800641c:	2300      	movs	r3, #0
 800641e:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 8006420:	2300      	movs	r3, #0
 8006422:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006424:	edd7 6a06 	vldr	s13, [r7, #24]
 8006428:	ed97 6a04 	vldr	s12, [r7, #16]
 800642c:	edd7 5a04 	vldr	s11, [r7, #16]
 8006430:	ed97 5a04 	vldr	s10, [r7, #16]
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8006434:	ed97 7a04 	vldr	s14, [r7, #16]
 8006438:	edd7 7a04 	vldr	s15, [r7, #16]
 800643c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006440:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8006444:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006448:	eddf 4a0d 	vldr	s9, [pc, #52]	; 8006480 <turn135outR+0x1e0>
 800644c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	eeb0 2a47 	vmov.f32	s4, s14
 8006456:	eef0 1a45 	vmov.f32	s3, s10
 800645a:	eeb0 1a65 	vmov.f32	s2, s11
 800645e:	eef0 0a46 	vmov.f32	s1, s12
 8006462:	eeb0 0a66 	vmov.f32	s0, s13
 8006466:	f7fb fbc3 	bl	8001bf0 <straight_table>
}
 800646a:	bf00      	nop
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006474:	b004      	add	sp, #16
 8006476:	4770      	bx	lr
 8006478:	c083126e 	.word	0xc083126e
 800647c:	406fd1ca 	.word	0x406fd1ca
 8006480:	42b40000 	.word	0x42b40000
 8006484:	00000000 	.word	0x00000000
 8006488:	43070000 	.word	0x43070000
 800648c:	42c80000 	.word	0x42c80000

08006490 <turn135outL>:


void turn135outL(parameter turnpara, char test_mode) {
 8006490:	b084      	sub	sp, #16
 8006492:	b580      	push	{r7, lr}
 8006494:	b082      	sub	sp, #8
 8006496:	af00      	add	r7, sp, #0
 8006498:	f107 0c10 	add.w	ip, r7, #16
 800649c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 80064a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d174      	bne.n	8006592 <turn135outL+0x102>
//		highspeed_mode = 1;
//		record_mode = 1;
		wallmode.WallControlMode=0;
 80064a8:	2300      	movs	r3, #0
 80064aa:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=2;
 80064b0:	2302      	movs	r3, #2
 80064b2:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 80064b4:	2300      	movs	r3, #0
 80064b6:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80064b8:	edd7 6a05 	vldr	s13, [r7, #20]
 80064bc:	ed97 6a04 	vldr	s12, [r7, #16]
 80064c0:	edd7 5a04 	vldr	s11, [r7, #16]
 80064c4:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 80064c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80064cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80064d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064d4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80064d8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80064dc:	eddf 4a66 	vldr	s9, [pc, #408]	; 8006678 <turn135outL+0x1e8>
 80064e0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	eeb0 2a47 	vmov.f32	s4, s14
 80064ea:	eef0 1a45 	vmov.f32	s3, s10
 80064ee:	eeb0 1a65 	vmov.f32	s2, s11
 80064f2:	eef0 0a46 	vmov.f32	s1, s12
 80064f6:	eeb0 0a66 	vmov.f32	s0, s13
 80064fa:	f7fb fb79 	bl	8001bf0 <straight_table>

		slalom_table(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 80064fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8006502:	edd7 7a07 	vldr	s15, [r7, #28]
 8006506:	eef1 7a67 	vneg.f32	s15, s15
 800650a:	edd7 6a08 	vldr	s13, [r7, #32]
 800650e:	eef0 2a66 	vmov.f32	s5, s13
 8006512:	eeb0 2a67 	vmov.f32	s4, s15
 8006516:	eddf 1a59 	vldr	s3, [pc, #356]	; 800667c <turn135outL+0x1ec>
 800651a:	ed9f 1a58 	vldr	s2, [pc, #352]	; 800667c <turn135outL+0x1ec>
 800651e:	eddf 0a58 	vldr	s1, [pc, #352]	; 8006680 <turn135outL+0x1f0>
 8006522:	eeb0 0a47 	vmov.f32	s0, s14
 8006526:	f7fb fd47 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 800652a:	2300      	movs	r3, #0
 800652c:	713b      	strb	r3, [r7, #4]
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	4618      	mov	r0, r3
 8006532:	f7fa f809 	bl	8000548 <__aeabi_f2d>
 8006536:	a34e      	add	r3, pc, #312	; (adr r3, 8006670 <turn135outL+0x1e0>)
 8006538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653c:	f7f9 fea6 	bl	800028c <__adddf3>
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	4610      	mov	r0, r2
 8006546:	4619      	mov	r1, r3
 8006548:	f7fa fb4e 	bl	8000be8 <__aeabi_d2f>
 800654c:	4603      	mov	r3, r0
 800654e:	edd7 6a04 	vldr	s13, [r7, #16]
 8006552:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8006556:	ed97 7a04 	vldr	s14, [r7, #16]
 800655a:	edd7 7a04 	vldr	s15, [r7, #16]
 800655e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006562:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8006566:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 800656a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8006678 <turn135outL+0x1e8>
 800656e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	eeb0 2a47 	vmov.f32	s4, s14
 8006578:	eef0 1a46 	vmov.f32	s3, s12
 800657c:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8006684 <turn135outL+0x1f4>
 8006580:	eef0 0a66 	vmov.f32	s1, s13
 8006584:	ee00 3a10 	vmov	s0, r3
 8006588:	f7fb fb32 	bl	8001bf0 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 800658c:	f7fd ff51 	bl	8004432 <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);

	}
}
 8006590:	e067      	b.n	8006662 <turn135outL+0x1d2>
		wallmode.WallControlMode=0;
 8006592:	2300      	movs	r3, #0
 8006594:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8006596:	2300      	movs	r3, #0
 8006598:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=2;
 800659a:	2302      	movs	r3, #2
 800659c:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 800659e:	2300      	movs	r3, #0
 80065a0:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80065a2:	edd7 6a05 	vldr	s13, [r7, #20]
 80065a6:	ed97 6a04 	vldr	s12, [r7, #16]
 80065aa:	edd7 5a04 	vldr	s11, [r7, #16]
 80065ae:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 80065b2:	ed97 7a04 	vldr	s14, [r7, #16]
 80065b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80065ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065be:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80065c2:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80065c6:	eddf 4a2c 	vldr	s9, [pc, #176]	; 8006678 <turn135outL+0x1e8>
 80065ca:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	eeb0 2a47 	vmov.f32	s4, s14
 80065d4:	eef0 1a45 	vmov.f32	s3, s10
 80065d8:	eeb0 1a65 	vmov.f32	s2, s11
 80065dc:	eef0 0a46 	vmov.f32	s1, s12
 80065e0:	eeb0 0a66 	vmov.f32	s0, s13
 80065e4:	f7fb fb04 	bl	8001bf0 <straight_table>
		slalom_table(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 80065e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80065ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80065f0:	eef1 7a67 	vneg.f32	s15, s15
 80065f4:	edd7 6a08 	vldr	s13, [r7, #32]
 80065f8:	eef0 2a66 	vmov.f32	s5, s13
 80065fc:	eeb0 2a67 	vmov.f32	s4, s15
 8006600:	eddf 1a1e 	vldr	s3, [pc, #120]	; 800667c <turn135outL+0x1ec>
 8006604:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 800667c <turn135outL+0x1ec>
 8006608:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8006680 <turn135outL+0x1f0>
 800660c:	eeb0 0a47 	vmov.f32	s0, s14
 8006610:	f7fb fcd2 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 8006614:	2300      	movs	r3, #0
 8006616:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 8006618:	2300      	movs	r3, #0
 800661a:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800661c:	edd7 6a06 	vldr	s13, [r7, #24]
 8006620:	ed97 6a04 	vldr	s12, [r7, #16]
 8006624:	edd7 5a04 	vldr	s11, [r7, #16]
 8006628:	ed97 5a04 	vldr	s10, [r7, #16]
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 800662c:	ed97 7a04 	vldr	s14, [r7, #16]
 8006630:	edd7 7a04 	vldr	s15, [r7, #16]
 8006634:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006638:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800663c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006640:	eddf 4a0d 	vldr	s9, [pc, #52]	; 8006678 <turn135outL+0x1e8>
 8006644:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	eeb0 2a47 	vmov.f32	s4, s14
 800664e:	eef0 1a45 	vmov.f32	s3, s10
 8006652:	eeb0 1a65 	vmov.f32	s2, s11
 8006656:	eef0 0a46 	vmov.f32	s1, s12
 800665a:	eeb0 0a66 	vmov.f32	s0, s13
 800665e:	f7fb fac7 	bl	8001bf0 <straight_table>
}
 8006662:	bf00      	nop
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800666c:	b004      	add	sp, #16
 800666e:	4770      	bx	lr
 8006670:	c083126e 	.word	0xc083126e
 8006674:	406fd1ca 	.word	0x406fd1ca
 8006678:	42b40000 	.word	0x42b40000
 800667c:	00000000 	.word	0x00000000
 8006680:	c3070000 	.word	0xc3070000
 8006684:	42c80000 	.word	0x42c80000

08006688 <V90R>:

void V90R(parameter turnpara, char test_mode) {
 8006688:	b084      	sub	sp, #16
 800668a:	b580      	push	{r7, lr}
 800668c:	b082      	sub	sp, #8
 800668e:	af00      	add	r7, sp, #0
 8006690:	f107 0c10 	add.w	ip, r7, #16
 8006694:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8006698:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800669c:	2b01      	cmp	r3, #1
 800669e:	d172      	bne.n	8006786 <V90R+0xfe>
//		highspeed_mode = 1;
//		record_mode = 1;
		wallmode.WallControlMode=0;
 80066a0:	2300      	movs	r3, #0
 80066a2:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 80066a4:	2300      	movs	r3, #0
 80066a6:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=2;
 80066a8:	2302      	movs	r3, #2
 80066aa:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 80066ac:	2300      	movs	r3, #0
 80066ae:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80066b0:	edd7 6a05 	vldr	s13, [r7, #20]
 80066b4:	ed97 6a04 	vldr	s12, [r7, #16]
 80066b8:	edd7 5a04 	vldr	s11, [r7, #16]
 80066bc:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 80066c0:	ed97 7a04 	vldr	s14, [r7, #16]
 80066c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80066c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066cc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80066d0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80066d4:	eddf 4a64 	vldr	s9, [pc, #400]	; 8006868 <V90R+0x1e0>
 80066d8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	eeb0 2a47 	vmov.f32	s4, s14
 80066e2:	eef0 1a45 	vmov.f32	s3, s10
 80066e6:	eeb0 1a65 	vmov.f32	s2, s11
 80066ea:	eef0 0a46 	vmov.f32	s1, s12
 80066ee:	eeb0 0a66 	vmov.f32	s0, s13
 80066f2:	f7fb fa7d 	bl	8001bf0 <straight_table>

		slalom_table(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 80066f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80066fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80066fe:	edd7 6a08 	vldr	s13, [r7, #32]
 8006702:	eef0 2a66 	vmov.f32	s5, s13
 8006706:	eeb0 2a47 	vmov.f32	s4, s14
 800670a:	eddf 1a58 	vldr	s3, [pc, #352]	; 800686c <V90R+0x1e4>
 800670e:	ed9f 1a57 	vldr	s2, [pc, #348]	; 800686c <V90R+0x1e4>
 8006712:	eddf 0a55 	vldr	s1, [pc, #340]	; 8006868 <V90R+0x1e0>
 8006716:	eeb0 0a67 	vmov.f32	s0, s15
 800671a:	f7fb fc4d 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 800671e:	2300      	movs	r3, #0
 8006720:	713b      	strb	r3, [r7, #4]
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	4618      	mov	r0, r3
 8006726:	f7f9 ff0f 	bl	8000548 <__aeabi_f2d>
 800672a:	a34d      	add	r3, pc, #308	; (adr r3, 8006860 <V90R+0x1d8>)
 800672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006730:	f7f9 fdac 	bl	800028c <__adddf3>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	4610      	mov	r0, r2
 800673a:	4619      	mov	r1, r3
 800673c:	f7fa fa54 	bl	8000be8 <__aeabi_d2f>
 8006740:	4603      	mov	r3, r0
 8006742:	edd7 6a04 	vldr	s13, [r7, #16]
 8006746:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 800674a:	ed97 7a04 	vldr	s14, [r7, #16]
 800674e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006752:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006756:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800675a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 800675e:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006868 <V90R+0x1e0>
 8006762:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	eeb0 2a47 	vmov.f32	s4, s14
 800676c:	eef0 1a46 	vmov.f32	s3, s12
 8006770:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 8006870 <V90R+0x1e8>
 8006774:	eef0 0a66 	vmov.f32	s1, s13
 8006778:	ee00 3a10 	vmov	s0, r3
 800677c:	f7fb fa38 	bl	8001bf0 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 8006780:	f7fd fe57 	bl	8004432 <test_motor_stop>
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);

	}

}
 8006784:	e065      	b.n	8006852 <V90R+0x1ca>
		wallmode.WallControlMode=0;
 8006786:	2300      	movs	r3, #0
 8006788:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 800678a:	2300      	movs	r3, #0
 800678c:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=2;
 800678e:	2302      	movs	r3, #2
 8006790:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8006792:	2300      	movs	r3, #0
 8006794:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006796:	edd7 6a05 	vldr	s13, [r7, #20]
 800679a:	ed97 6a04 	vldr	s12, [r7, #16]
 800679e:	edd7 5a04 	vldr	s11, [r7, #16]
 80067a2:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 80067a6:	ed97 7a04 	vldr	s14, [r7, #16]
 80067aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80067ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067b2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80067b6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80067ba:	eddf 4a2b 	vldr	s9, [pc, #172]	; 8006868 <V90R+0x1e0>
 80067be:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	eeb0 2a47 	vmov.f32	s4, s14
 80067c8:	eef0 1a45 	vmov.f32	s3, s10
 80067cc:	eeb0 1a65 	vmov.f32	s2, s11
 80067d0:	eef0 0a46 	vmov.f32	s1, s12
 80067d4:	eeb0 0a66 	vmov.f32	s0, s13
 80067d8:	f7fb fa0a 	bl	8001bf0 <straight_table>
		slalom_table(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 80067dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80067e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80067e4:	edd7 6a08 	vldr	s13, [r7, #32]
 80067e8:	eef0 2a66 	vmov.f32	s5, s13
 80067ec:	eeb0 2a47 	vmov.f32	s4, s14
 80067f0:	eddf 1a1e 	vldr	s3, [pc, #120]	; 800686c <V90R+0x1e4>
 80067f4:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 800686c <V90R+0x1e4>
 80067f8:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8006868 <V90R+0x1e0>
 80067fc:	eeb0 0a67 	vmov.f32	s0, s15
 8006800:	f7fb fbda 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 8006804:	2300      	movs	r3, #0
 8006806:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 8006808:	2300      	movs	r3, #0
 800680a:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800680c:	edd7 6a06 	vldr	s13, [r7, #24]
 8006810:	ed97 6a04 	vldr	s12, [r7, #16]
 8006814:	edd7 5a04 	vldr	s11, [r7, #16]
 8006818:	ed97 5a04 	vldr	s10, [r7, #16]
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 800681c:	ed97 7a04 	vldr	s14, [r7, #16]
 8006820:	edd7 7a04 	vldr	s15, [r7, #16]
 8006824:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006828:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800682c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006830:	eddf 4a0d 	vldr	s9, [pc, #52]	; 8006868 <V90R+0x1e0>
 8006834:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	eeb0 2a47 	vmov.f32	s4, s14
 800683e:	eef0 1a45 	vmov.f32	s3, s10
 8006842:	eeb0 1a65 	vmov.f32	s2, s11
 8006846:	eef0 0a46 	vmov.f32	s1, s12
 800684a:	eeb0 0a66 	vmov.f32	s0, s13
 800684e:	f7fb f9cf 	bl	8001bf0 <straight_table>
}
 8006852:	bf00      	nop
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800685c:	b004      	add	sp, #16
 800685e:	4770      	bx	lr
 8006860:	c083126e 	.word	0xc083126e
 8006864:	406fd1ca 	.word	0x406fd1ca
 8006868:	42b40000 	.word	0x42b40000
 800686c:	00000000 	.word	0x00000000
 8006870:	42c80000 	.word	0x42c80000
 8006874:	00000000 	.word	0x00000000

08006878 <V90L>:

void V90L(parameter turnpara, char test_mode) {
 8006878:	b084      	sub	sp, #16
 800687a:	b580      	push	{r7, lr}
 800687c:	b082      	sub	sp, #8
 800687e:	af00      	add	r7, sp, #0
 8006880:	f107 0c10 	add.w	ip, r7, #16
 8006884:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8006888:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800688c:	2b01      	cmp	r3, #1
 800688e:	d174      	bne.n	800697a <V90L+0x102>
//		highspeed_mode = 1;
//		record_mode = 1;
		wallmode.WallControlMode=0;
 8006890:	2300      	movs	r3, #0
 8006892:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8006894:	2300      	movs	r3, #0
 8006896:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=2;
 8006898:	2302      	movs	r3, #2
 800689a:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 800689c:	2300      	movs	r3, #0
 800689e:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80068a0:	edd7 6a05 	vldr	s13, [r7, #20]
 80068a4:	ed97 6a04 	vldr	s12, [r7, #16]
 80068a8:	edd7 5a04 	vldr	s11, [r7, #16]
 80068ac:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 80068b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80068b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80068b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80068bc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80068c0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80068c4:	eddf 4a66 	vldr	s9, [pc, #408]	; 8006a60 <V90L+0x1e8>
 80068c8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	eeb0 2a47 	vmov.f32	s4, s14
 80068d2:	eef0 1a45 	vmov.f32	s3, s10
 80068d6:	eeb0 1a65 	vmov.f32	s2, s11
 80068da:	eef0 0a46 	vmov.f32	s1, s12
 80068de:	eeb0 0a66 	vmov.f32	s0, s13
 80068e2:	f7fb f985 	bl	8001bf0 <straight_table>

		slalom_table(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 80068e6:	ed97 7a04 	vldr	s14, [r7, #16]
 80068ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80068ee:	eef1 7a67 	vneg.f32	s15, s15
 80068f2:	edd7 6a08 	vldr	s13, [r7, #32]
 80068f6:	eef0 2a66 	vmov.f32	s5, s13
 80068fa:	eeb0 2a67 	vmov.f32	s4, s15
 80068fe:	eddf 1a59 	vldr	s3, [pc, #356]	; 8006a64 <V90L+0x1ec>
 8006902:	ed9f 1a58 	vldr	s2, [pc, #352]	; 8006a64 <V90L+0x1ec>
 8006906:	eddf 0a58 	vldr	s1, [pc, #352]	; 8006a68 <V90L+0x1f0>
 800690a:	eeb0 0a47 	vmov.f32	s0, s14
 800690e:	f7fb fb53 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 8006912:	2300      	movs	r3, #0
 8006914:	713b      	strb	r3, [r7, #4]
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	4618      	mov	r0, r3
 800691a:	f7f9 fe15 	bl	8000548 <__aeabi_f2d>
 800691e:	a34e      	add	r3, pc, #312	; (adr r3, 8006a58 <V90L+0x1e0>)
 8006920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006924:	f7f9 fcb2 	bl	800028c <__adddf3>
 8006928:	4602      	mov	r2, r0
 800692a:	460b      	mov	r3, r1
 800692c:	4610      	mov	r0, r2
 800692e:	4619      	mov	r1, r3
 8006930:	f7fa f95a 	bl	8000be8 <__aeabi_d2f>
 8006934:	4603      	mov	r3, r0
 8006936:	edd7 6a04 	vldr	s13, [r7, #16]
 800693a:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 800693e:	ed97 7a04 	vldr	s14, [r7, #16]
 8006942:	edd7 7a04 	vldr	s15, [r7, #16]
 8006946:	ee27 7a27 	vmul.f32	s14, s14, s15
 800694a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800694e:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 100, turnpara.g_speed,
 8006952:	eddf 5a43 	vldr	s11, [pc, #268]	; 8006a60 <V90L+0x1e8>
 8006956:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	eeb0 2a47 	vmov.f32	s4, s14
 8006960:	eef0 1a46 	vmov.f32	s3, s12
 8006964:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8006a6c <V90L+0x1f4>
 8006968:	eef0 0a66 	vmov.f32	s1, s13
 800696c:	ee00 3a10 	vmov	s0, r3
 8006970:	f7fb f93e 	bl	8001bf0 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 8006974:	f7fd fd5d 	bl	8004432 <test_motor_stop>
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);

	}

}
 8006978:	e067      	b.n	8006a4a <V90L+0x1d2>
		wallmode.WallControlMode=0;
 800697a:	2300      	movs	r3, #0
 800697c:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 800697e:	2300      	movs	r3, #0
 8006980:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=2;
 8006982:	2302      	movs	r3, #2
 8006984:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8006986:	2300      	movs	r3, #0
 8006988:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800698a:	edd7 6a05 	vldr	s13, [r7, #20]
 800698e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006992:	edd7 5a04 	vldr	s11, [r7, #16]
 8006996:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 800699a:	ed97 7a04 	vldr	s14, [r7, #16]
 800699e:	edd7 7a04 	vldr	s15, [r7, #16]
 80069a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80069a6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80069aa:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80069ae:	eddf 4a2c 	vldr	s9, [pc, #176]	; 8006a60 <V90L+0x1e8>
 80069b2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	eeb0 2a47 	vmov.f32	s4, s14
 80069bc:	eef0 1a45 	vmov.f32	s3, s10
 80069c0:	eeb0 1a65 	vmov.f32	s2, s11
 80069c4:	eef0 0a46 	vmov.f32	s1, s12
 80069c8:	eeb0 0a66 	vmov.f32	s0, s13
 80069cc:	f7fb f910 	bl	8001bf0 <straight_table>
		slalom_table(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 80069d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80069d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80069d8:	eef1 7a67 	vneg.f32	s15, s15
 80069dc:	edd7 6a08 	vldr	s13, [r7, #32]
 80069e0:	eef0 2a66 	vmov.f32	s5, s13
 80069e4:	eeb0 2a67 	vmov.f32	s4, s15
 80069e8:	eddf 1a1e 	vldr	s3, [pc, #120]	; 8006a64 <V90L+0x1ec>
 80069ec:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8006a64 <V90L+0x1ec>
 80069f0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8006a68 <V90L+0x1f0>
 80069f4:	eeb0 0a47 	vmov.f32	s0, s14
 80069f8:	f7fb fade 	bl	8001fb8 <slalom_table>
		wallmode.WallControlMode=0;
 80069fc:	2300      	movs	r3, #0
 80069fe:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 8006a00:	2300      	movs	r3, #0
 8006a02:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006a04:	edd7 6a06 	vldr	s13, [r7, #24]
 8006a08:	ed97 6a04 	vldr	s12, [r7, #16]
 8006a0c:	edd7 5a04 	vldr	s11, [r7, #16]
 8006a10:	ed97 5a04 	vldr	s10, [r7, #16]
						turnpara.g_speed * turnpara.g_speed  / 2 / 90,wallmode);
 8006a14:	ed97 7a04 	vldr	s14, [r7, #16]
 8006a18:	edd7 7a04 	vldr	s15, [r7, #16]
 8006a1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006a20:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8006a24:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006a28:	eddf 4a0d 	vldr	s9, [pc, #52]	; 8006a60 <V90L+0x1e8>
 8006a2c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	eeb0 2a47 	vmov.f32	s4, s14
 8006a36:	eef0 1a45 	vmov.f32	s3, s10
 8006a3a:	eeb0 1a65 	vmov.f32	s2, s11
 8006a3e:	eef0 0a46 	vmov.f32	s1, s12
 8006a42:	eeb0 0a66 	vmov.f32	s0, s13
 8006a46:	f7fb f8d3 	bl	8001bf0 <straight_table>
}
 8006a4a:	bf00      	nop
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a54:	b004      	add	sp, #16
 8006a56:	4770      	bx	lr
 8006a58:	c083126e 	.word	0xc083126e
 8006a5c:	406fd1ca 	.word	0x406fd1ca
 8006a60:	42b40000 	.word	0x42b40000
 8006a64:	00000000 	.word	0x00000000
 8006a68:	c2b40000 	.word	0xc2b40000
 8006a6c:	42c80000 	.word	0x42c80000

08006a70 <testturning>:


void testturning(parameter_speed Howspeed,int turnmode,char shortest_mode){
 8006a70:	b084      	sub	sp, #16
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b084      	sub	sp, #16
 8006a76:	af04      	add	r7, sp, #16
 8006a78:	f107 0c08 	add.w	ip, r7, #8
 8006a7c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//0=slalomR,1=slalomL,2=90R,3=90L,4=180R,5=180L,6=in45R,7=in45L,8=in135R,9=in135L
	//10=out45R,11=out45L,12=out135R,13=out135L,14=V90R,15=V90L

	if(turnmode==0){slalomR(Howspeed.slalom_R,ON,shortest_mode);}
 8006a80:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10b      	bne.n	8006aa0 <testturning+0x30>
 8006a88:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006a8c:	9302      	str	r3, [sp, #8]
 8006a8e:	2301      	movs	r3, #1
 8006a90:	9301      	str	r3, [sp, #4]
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	f107 0310 	add.w	r3, r7, #16
 8006a9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a9c:	f7fd fcd6 	bl	800444c <slalomR>
	if(turnmode==1){slalomL(Howspeed.slalom_L,ON,shortest_mode);}
 8006aa0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d10b      	bne.n	8006ac0 <testturning+0x50>
 8006aa8:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006aac:	9302      	str	r3, [sp, #8]
 8006aae:	2301      	movs	r3, #1
 8006ab0:	9301      	str	r3, [sp, #4]
 8006ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006aba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006abc:	f7fd fdfa 	bl	80046b4 <slalomL>
	if(turnmode==2){turn90R(Howspeed.turn90_R,ON);}
 8006ac0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d108      	bne.n	8006ada <testturning+0x6a>
 8006ac8:	2301      	movs	r3, #1
 8006aca:	9301      	str	r3, [sp, #4]
 8006acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006ad4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ad6:	f7fd ff27 	bl	8004928 <turn90R>
	if(turnmode==3){turn90L(Howspeed.turn90_L,ON);}
 8006ada:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d108      	bne.n	8006af4 <testturning+0x84>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	9301      	str	r3, [sp, #4]
 8006ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006aee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006af0:	f7fe f824 	bl	8004b3c <turn90L>
	if(turnmode==4){turn180R(Howspeed.turn180_R,ON);}
 8006af4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006af8:	2b04      	cmp	r3, #4
 8006afa:	d108      	bne.n	8006b0e <testturning+0x9e>
 8006afc:	2301      	movs	r3, #1
 8006afe:	9301      	str	r3, [sp, #4]
 8006b00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006b08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b0a:	f7fe f927 	bl	8004d5c <turn180R>
	if(turnmode==5){turn180L(Howspeed.turn180_L,ON);}
 8006b0e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006b12:	2b05      	cmp	r3, #5
 8006b14:	d109      	bne.n	8006b2a <testturning+0xba>
 8006b16:	2301      	movs	r3, #1
 8006b18:	9301      	str	r3, [sp, #4]
 8006b1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b26:	f7fe fa23 	bl	8004f70 <turn180L>
	if(turnmode==6){turn45inR(Howspeed.turn45in_R,ON);}
 8006b2a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006b2e:	2b06      	cmp	r3, #6
 8006b30:	d109      	bne.n	8006b46 <testturning+0xd6>
 8006b32:	2301      	movs	r3, #1
 8006b34:	9301      	str	r3, [sp, #4]
 8006b36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006b40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b42:	f7fe fb25 	bl	8005190 <turn45inR>
	if(turnmode==7){turn45inL(Howspeed.turn45in_L,ON);}
 8006b46:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006b4a:	2b07      	cmp	r3, #7
 8006b4c:	d109      	bne.n	8006b62 <testturning+0xf2>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	9301      	str	r3, [sp, #4]
 8006b52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006b5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b5e:	f7fe fcbb 	bl	80054d8 <turn45inL>
	if(turnmode==8){turn135inR(Howspeed.turn135in_R,ON);}
 8006b62:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006b66:	2b08      	cmp	r3, #8
 8006b68:	d109      	bne.n	8006b7e <testturning+0x10e>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	9301      	str	r3, [sp, #4]
 8006b6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006b78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b7a:	f7fe fe55 	bl	8005828 <turn135inR>
	if(turnmode==9){turn135inL(Howspeed.turn135in_L,ON);}
 8006b7e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006b82:	2b09      	cmp	r3, #9
 8006b84:	d109      	bne.n	8006b9a <testturning+0x12a>
 8006b86:	2301      	movs	r3, #1
 8006b88:	9301      	str	r3, [sp, #4]
 8006b8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006b94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b96:	f7fe ffe7 	bl	8005b68 <turn135inL>
	if(turnmode==10){turn45inL(Howspeed.turn45in_L, CONNECT);turn45outR(Howspeed.turn45out_R,ON);}
 8006b9a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006b9e:	2b0a      	cmp	r3, #10
 8006ba0:	d113      	bne.n	8006bca <testturning+0x15a>
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	9301      	str	r3, [sp, #4]
 8006ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006bb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006bb2:	f7fe fc91 	bl	80054d8 <turn45inL>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	9301      	str	r3, [sp, #4]
 8006bba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006bc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006bc6:	f7ff f977 	bl	8005eb8 <turn45outR>
	if(turnmode==11){turn45inR(Howspeed.turn45in_R, CONNECT);turn45outL(Howspeed.turn45out_L,ON);}
 8006bca:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006bce:	2b0b      	cmp	r3, #11
 8006bd0:	d113      	bne.n	8006bfa <testturning+0x18a>
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	9301      	str	r3, [sp, #4]
 8006bd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006be0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006be2:	f7fe fad5 	bl	8005190 <turn45inR>
 8006be6:	2301      	movs	r3, #1
 8006be8:	9301      	str	r3, [sp, #4]
 8006bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006bf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006bf6:	f7ff fa57 	bl	80060a8 <turn45outL>
	if(turnmode==12){turn135inL(Howspeed.turn135in_L, CONNECT);turn135outR(Howspeed.turn135out_R,ON);}
 8006bfa:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006bfe:	2b0c      	cmp	r3, #12
 8006c00:	d113      	bne.n	8006c2a <testturning+0x1ba>
 8006c02:	2302      	movs	r3, #2
 8006c04:	9301      	str	r3, [sp, #4]
 8006c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006c10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c12:	f7fe ffa9 	bl	8005b68 <turn135inL>
 8006c16:	2301      	movs	r3, #1
 8006c18:	9301      	str	r3, [sp, #4]
 8006c1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006c24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c26:	f7ff fb3b 	bl	80062a0 <turn135outR>
	if(turnmode==13){turn135inR(Howspeed.turn135in_R, CONNECT);turn135outL(Howspeed.turn135out_L,ON);}
 8006c2a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006c2e:	2b0d      	cmp	r3, #13
 8006c30:	d113      	bne.n	8006c5a <testturning+0x1ea>
 8006c32:	2302      	movs	r3, #2
 8006c34:	9301      	str	r3, [sp, #4]
 8006c36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006c40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c42:	f7fe fdf1 	bl	8005828 <turn135inR>
 8006c46:	2301      	movs	r3, #1
 8006c48:	9301      	str	r3, [sp, #4]
 8006c4a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8006c54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c56:	f7ff fc1b 	bl	8006490 <turn135outL>
	if(turnmode==14){turn45inL(Howspeed.turn45in_L, CONNECT);V90R(Howspeed.V90_R,ON);}
 8006c5a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006c5e:	2b0e      	cmp	r3, #14
 8006c60:	d113      	bne.n	8006c8a <testturning+0x21a>
 8006c62:	2302      	movs	r3, #2
 8006c64:	9301      	str	r3, [sp, #4]
 8006c66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006c70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c72:	f7fe fc31 	bl	80054d8 <turn45inL>
 8006c76:	2301      	movs	r3, #1
 8006c78:	9301      	str	r3, [sp, #4]
 8006c7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006c84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c86:	f7ff fcff 	bl	8006688 <V90R>
	if(turnmode==15){turn45inR(Howspeed.turn45in_R, CONNECT);V90L(Howspeed.V90_L,ON);}
 8006c8a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006c8e:	2b0f      	cmp	r3, #15
 8006c90:	d113      	bne.n	8006cba <testturning+0x24a>
 8006c92:	2302      	movs	r3, #2
 8006c94:	9301      	str	r3, [sp, #4]
 8006c96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006ca0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ca2:	f7fe fa75 	bl	8005190 <turn45inR>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	9301      	str	r3, [sp, #4]
 8006caa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8006cb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006cb6:	f7ff fddf 	bl	8006878 <V90L>

	HAL_Delay(500);
 8006cba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006cbe:	f005 fcbb 	bl	800c638 <HAL_Delay>

}
 8006cc2:	bf00      	nop
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cca:	b004      	add	sp, #16
 8006ccc:	4770      	bx	lr
	...

08006cd0 <AdatiWayReturn>:
//}



void AdatiWayReturn(float input_StraightVelocity, float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration) {
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08e      	sub	sp, #56	; 0x38
 8006cd4:	af04      	add	r7, sp, #16
 8006cd6:	ed87 0a03 	vstr	s0, [r7, #12]
 8006cda:	edc7 0a02 	vstr	s1, [r7, #8]
 8006cde:	ed87 1a01 	vstr	s2, [r7, #4]
 8006ce2:	edc7 1a00 	vstr	s3, [r7]

	unsigned short front_count, right_count, back_count, left_count;
	float v_e,v_ea;
//初期化
	x=0;
 8006ce6:	4b5f      	ldr	r3, [pc, #380]	; (8006e64 <AdatiWayReturn+0x194>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]
	y=0;
 8006cec:	4b5e      	ldr	r3, [pc, #376]	; (8006e68 <AdatiWayReturn+0x198>)
 8006cee:	2200      	movs	r2, #0
 8006cf0:	601a      	str	r2, [r3, #0]
	direction=1;
 8006cf2:	4b5e      	ldr	r3, [pc, #376]	; (8006e6c <AdatiWayReturn+0x19c>)
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	601a      	str	r2, [r3, #0]
//	maze_mode = 1;
	MOTOR_MODE mode;
	mode.WallControlMode=1;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 8006d00:	2300      	movs	r3, #0
 8006d02:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 8006d04:	2300      	movs	r3, #0
 8006d06:	75bb      	strb	r3, [r7, #22]


	pl_motor_standby(1);
 8006d08:	2001      	movs	r0, #1
 8006d0a:	f7fb fd5f 	bl	80027cc <pl_motor_standby>
	HAL_Delay(500);
 8006d0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d12:	f005 fc91 	bl	800c638 <HAL_Delay>
//初期位置のセンサー確認
	front_wall=((int)((float)(g_sensor_mean[0]+g_sensor_mean[3])/2) >= F_PRESENCE);
 8006d16:	4b56      	ldr	r3, [pc, #344]	; (8006e70 <AdatiWayReturn+0x1a0>)
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	4b55      	ldr	r3, [pc, #340]	; (8006e70 <AdatiWayReturn+0x1a0>)
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	4413      	add	r3, r2
 8006d20:	ee07 3a90 	vmov	s15, r3
 8006d24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d28:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006d2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d34:	ee17 3a90 	vmov	r3, s15
 8006d38:	2b2c      	cmp	r3, #44	; 0x2c
 8006d3a:	bfcc      	ite	gt
 8006d3c:	2301      	movgt	r3, #1
 8006d3e:	2300      	movle	r3, #0
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	4b4c      	ldr	r3, [pc, #304]	; (8006e74 <AdatiWayReturn+0x1a4>)
 8006d44:	701a      	strb	r2, [r3, #0]
	right_wall=(g_sensor_mean[2] >= R_PRESENCE);
 8006d46:	4b4a      	ldr	r3, [pc, #296]	; (8006e70 <AdatiWayReturn+0x1a0>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	2b63      	cmp	r3, #99	; 0x63
 8006d4c:	bfcc      	ite	gt
 8006d4e:	2301      	movgt	r3, #1
 8006d50:	2300      	movle	r3, #0
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	4b48      	ldr	r3, [pc, #288]	; (8006e78 <AdatiWayReturn+0x1a8>)
 8006d56:	701a      	strb	r2, [r3, #0]
	left_wall=(g_sensor_mean[1] >= L_PRESENCE);
 8006d58:	4b45      	ldr	r3, [pc, #276]	; (8006e70 <AdatiWayReturn+0x1a0>)
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	2b63      	cmp	r3, #99	; 0x63
 8006d5e:	bfcc      	ite	gt
 8006d60:	2301      	movgt	r3, #1
 8006d62:	2300      	movle	r3, #0
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	4b45      	ldr	r3, [pc, #276]	; (8006e7c <AdatiWayReturn+0x1ac>)
 8006d68:	701a      	strb	r2, [r3, #0]
//初期位置での迷路展開
	maze_maker();
 8006d6a:	f002 feaf 	bl	8009acc <maze_maker>

	HAL_Delay(100);
 8006d6e:	2064      	movs	r0, #100	; 0x64
 8006d70:	f005 fc62 	bl	800c638 <HAL_Delay>

	pl_motor_start();
 8006d74:	f7fb fd94 	bl	80028a0 <pl_motor_start>
	v_e=straight_table(90+BACK_TO_CENTER, 120,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 8006d78:	6978      	ldr	r0, [r7, #20]
 8006d7a:	ed97 2a01 	vldr	s4, [r7, #4]
 8006d7e:	edd7 1a03 	vldr	s3, [r7, #12]
 8006d82:	ed97 1a03 	vldr	s2, [r7, #12]
 8006d86:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8006e80 <AdatiWayReturn+0x1b0>
 8006d8a:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8006e84 <AdatiWayReturn+0x1b4>
 8006d8e:	f7fa ff2f 	bl	8001bf0 <straight_table>
 8006d92:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	while (1) {

		update_coordinate();
 8006d96:	f000 fd99 	bl	80078cc <update_coordinate>

		front_wall=((int)((float)(g_sensor_mean[0]+g_sensor_mean[3])/2) >= F_PRESENCE);
 8006d9a:	4b35      	ldr	r3, [pc, #212]	; (8006e70 <AdatiWayReturn+0x1a0>)
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	4b34      	ldr	r3, [pc, #208]	; (8006e70 <AdatiWayReturn+0x1a0>)
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	4413      	add	r3, r2
 8006da4:	ee07 3a90 	vmov	s15, r3
 8006da8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006dac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006db0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006db4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006db8:	ee17 3a90 	vmov	r3, s15
 8006dbc:	2b2c      	cmp	r3, #44	; 0x2c
 8006dbe:	bfcc      	ite	gt
 8006dc0:	2301      	movgt	r3, #1
 8006dc2:	2300      	movle	r3, #0
 8006dc4:	b2da      	uxtb	r2, r3
 8006dc6:	4b2b      	ldr	r3, [pc, #172]	; (8006e74 <AdatiWayReturn+0x1a4>)
 8006dc8:	701a      	strb	r2, [r3, #0]
		right_wall=(g_sensor_mean[2] >= R_PRESENCE);
 8006dca:	4b29      	ldr	r3, [pc, #164]	; (8006e70 <AdatiWayReturn+0x1a0>)
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	2b63      	cmp	r3, #99	; 0x63
 8006dd0:	bfcc      	ite	gt
 8006dd2:	2301      	movgt	r3, #1
 8006dd4:	2300      	movle	r3, #0
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	4b27      	ldr	r3, [pc, #156]	; (8006e78 <AdatiWayReturn+0x1a8>)
 8006dda:	701a      	strb	r2, [r3, #0]
		left_wall=(g_sensor_mean[1] >= L_PRESENCE);
 8006ddc:	4b24      	ldr	r3, [pc, #144]	; (8006e70 <AdatiWayReturn+0x1a0>)
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	2b63      	cmp	r3, #99	; 0x63
 8006de2:	bfcc      	ite	gt
 8006de4:	2301      	movgt	r3, #1
 8006de6:	2300      	movle	r3, #0
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	4b24      	ldr	r3, [pc, #144]	; (8006e7c <AdatiWayReturn+0x1ac>)
 8006dec:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=1;
 8006dee:	2301      	movs	r3, #1
 8006df0:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 8006df2:	2301      	movs	r3, #1
 8006df4:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 8006df6:	2300      	movs	r3, #0
 8006df8:	75fb      	strb	r3, [r7, #23]
		v_e=straight_table(MAZE_OFFSET, v_e,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 8006dfa:	6978      	ldr	r0, [r7, #20]
 8006dfc:	ed97 2a01 	vldr	s4, [r7, #4]
 8006e00:	edd7 1a03 	vldr	s3, [r7, #12]
 8006e04:	ed97 1a03 	vldr	s2, [r7, #12]
 8006e08:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8006e0c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8006e10:	f7fa feee 	bl	8001bf0 <straight_table>
 8006e14:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count);
 8006e18:	f107 0318 	add.w	r3, r7, #24
 8006e1c:	f107 021a 	add.w	r2, r7, #26
 8006e20:	f107 011c 	add.w	r1, r7, #28
 8006e24:	f107 001e 	add.w	r0, r7, #30
 8006e28:	f002 fcb2 	bl	8009790 <search_AroundWalkCount>

		if (x == 0 && y == 0) {
 8006e2c:	4b0d      	ldr	r3, [pc, #52]	; (8006e64 <AdatiWayReturn+0x194>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d104      	bne.n	8006e3e <AdatiWayReturn+0x16e>
 8006e34:	4b0c      	ldr	r3, [pc, #48]	; (8006e68 <AdatiWayReturn+0x198>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 82b8 	beq.w	80073ae <AdatiWayReturn+0x6de>
			break;
		}
		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 8006e3e:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <AdatiWayReturn+0x194>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d004      	beq.n	8006e50 <AdatiWayReturn+0x180>
 8006e46:	4b07      	ldr	r3, [pc, #28]	; (8006e64 <AdatiWayReturn+0x194>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b04      	cmp	r3, #4
 8006e4c:	f040 810e 	bne.w	800706c <AdatiWayReturn+0x39c>
 8006e50:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <AdatiWayReturn+0x198>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b03      	cmp	r3, #3
 8006e56:	d079      	beq.n	8006f4c <AdatiWayReturn+0x27c>
 8006e58:	4b03      	ldr	r3, [pc, #12]	; (8006e68 <AdatiWayReturn+0x198>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b04      	cmp	r3, #4
 8006e5e:	f040 8105 	bne.w	800706c <AdatiWayReturn+0x39c>
			while (front_wall==0) {
 8006e62:	e073      	b.n	8006f4c <AdatiWayReturn+0x27c>
 8006e64:	20000f70 	.word	0x20000f70
 8006e68:	20000f74 	.word	0x20000f74
 8006e6c:	20000f78 	.word	0x20000f78
 8006e70:	2000038c 	.word	0x2000038c
 8006e74:	20000f7c 	.word	0x20000f7c
 8006e78:	20000f7d 	.word	0x20000f7d
 8006e7c:	20000f7e 	.word	0x20000f7e
 8006e80:	42f00000 	.word	0x42f00000
 8006e84:	42f10000 	.word	0x42f10000
 8006e88:	43200000 	.word	0x43200000
				//直進
				mode.WallControlMode=1;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 8006e90:	2300      	movs	r3, #0
 8006e92:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 8006e94:	2300      	movs	r3, #0
 8006e96:	75fb      	strb	r3, [r7, #23]
				v_e=straight_table(180-MAZE_OFFSET, v_e,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 8006e98:	6978      	ldr	r0, [r7, #20]
 8006e9a:	ed97 2a01 	vldr	s4, [r7, #4]
 8006e9e:	edd7 1a03 	vldr	s3, [r7, #12]
 8006ea2:	ed97 1a03 	vldr	s2, [r7, #12]
 8006ea6:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8006eaa:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 8006e88 <AdatiWayReturn+0x1b8>
 8006eae:	f7fa fe9f 	bl	8001bf0 <straight_table>
 8006eb2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24


				update_coordinate();
 8006eb6:	f000 fd09 	bl	80078cc <update_coordinate>

				front_wall=((int)((float)(g_sensor_mean[0]+g_sensor_mean[3])/2) >= F_PRESENCE);
 8006eba:	4b60      	ldr	r3, [pc, #384]	; (800703c <AdatiWayReturn+0x36c>)
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	4b5f      	ldr	r3, [pc, #380]	; (800703c <AdatiWayReturn+0x36c>)
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	ee07 3a90 	vmov	s15, r3
 8006ec8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ecc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006ed0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ed8:	ee17 3a90 	vmov	r3, s15
 8006edc:	2b2c      	cmp	r3, #44	; 0x2c
 8006ede:	bfcc      	ite	gt
 8006ee0:	2301      	movgt	r3, #1
 8006ee2:	2300      	movle	r3, #0
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	4b56      	ldr	r3, [pc, #344]	; (8007040 <AdatiWayReturn+0x370>)
 8006ee8:	701a      	strb	r2, [r3, #0]
				right_wall=(g_sensor_mean[2] >= R_PRESENCE);
 8006eea:	4b54      	ldr	r3, [pc, #336]	; (800703c <AdatiWayReturn+0x36c>)
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	2b63      	cmp	r3, #99	; 0x63
 8006ef0:	bfcc      	ite	gt
 8006ef2:	2301      	movgt	r3, #1
 8006ef4:	2300      	movle	r3, #0
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	4b52      	ldr	r3, [pc, #328]	; (8007044 <AdatiWayReturn+0x374>)
 8006efa:	701a      	strb	r2, [r3, #0]
				left_wall=(g_sensor_mean[1] >= L_PRESENCE);
 8006efc:	4b4f      	ldr	r3, [pc, #316]	; (800703c <AdatiWayReturn+0x36c>)
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	2b63      	cmp	r3, #99	; 0x63
 8006f02:	bfcc      	ite	gt
 8006f04:	2301      	movgt	r3, #1
 8006f06:	2300      	movle	r3, #0
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	4b4f      	ldr	r3, [pc, #316]	; (8007048 <AdatiWayReturn+0x378>)
 8006f0c:	701a      	strb	r2, [r3, #0]

				mode.WallControlMode=1;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 8006f12:	2301      	movs	r3, #1
 8006f14:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 8006f16:	2300      	movs	r3, #0
 8006f18:	75fb      	strb	r3, [r7, #23]
				v_e=straight_table(MAZE_OFFSET, v_e,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 8006f1a:	6978      	ldr	r0, [r7, #20]
 8006f1c:	ed97 2a01 	vldr	s4, [r7, #4]
 8006f20:	edd7 1a03 	vldr	s3, [r7, #12]
 8006f24:	ed97 1a03 	vldr	s2, [r7, #12]
 8006f28:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8006f2c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8006f30:	f7fa fe5e 	bl	8001bf0 <straight_table>
 8006f34:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

				search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count);
 8006f38:	f107 0318 	add.w	r3, r7, #24
 8006f3c:	f107 021a 	add.w	r2, r7, #26
 8006f40:	f107 011c 	add.w	r1, r7, #28
 8006f44:	f107 001e 	add.w	r0, r7, #30
 8006f48:	f002 fc22 	bl	8009790 <search_AroundWalkCount>
			while (front_wall==0) {
 8006f4c:	4b3c      	ldr	r3, [pc, #240]	; (8007040 <AdatiWayReturn+0x370>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	f083 0301 	eor.w	r3, r3, #1
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d198      	bne.n	8006e8c <AdatiWayReturn+0x1bc>

			}
			mode.WallControlMode=0;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 8006f62:	2300      	movs	r3, #0
 8006f64:	75fb      	strb	r3, [r7, #23]
			v_e=straight_table(90-MAZE_OFFSET, v_e,100,input_StraightVelocity,input_StraightAcceleration, mode);
 8006f66:	6978      	ldr	r0, [r7, #20]
 8006f68:	ed97 2a01 	vldr	s4, [r7, #4]
 8006f6c:	edd7 1a03 	vldr	s3, [r7, #12]
 8006f70:	ed9f 1a36 	vldr	s2, [pc, #216]	; 800704c <AdatiWayReturn+0x37c>
 8006f74:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8006f78:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8007050 <AdatiWayReturn+0x380>
 8006f7c:	f7fa fe38 	bl	8001bf0 <straight_table>
 8006f80:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
			pl_motor_stop();
 8006f84:	f7fb fca0 	bl	80028c8 <pl_motor_stop>
			wait_ms(300);
 8006f88:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006f8c:	f7fc fea8 	bl	8003ce0 <wait_ms>
			pl_motor_start();
 8006f90:	f7fb fc86 	bl	80028a0 <pl_motor_start>
			v_ea=turning_table(180, 120,120,input_TurningVelocity,input_TurningAcceleration);
 8006f94:	ed97 2a00 	vldr	s4, [r7]
 8006f98:	edd7 1a02 	vldr	s3, [r7, #8]
 8006f9c:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8007054 <AdatiWayReturn+0x384>
 8006fa0:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8007054 <AdatiWayReturn+0x384>
 8006fa4:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8007058 <AdatiWayReturn+0x388>
 8006fa8:	f7fa ff1c 	bl	8001de4 <turning_table>
 8006fac:	ed87 0a08 	vstr	s0, [r7, #32]
			pl_motor_stop();
 8006fb0:	f7fb fc8a 	bl	80028c8 <pl_motor_stop>
			wait_ms(300);
 8006fb4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006fb8:	f7fc fe92 	bl	8003ce0 <wait_ms>
			pl_motor_start();
 8006fbc:	f7fb fc70 	bl	80028a0 <pl_motor_start>
			v_e=straight_table(-90, -v_e,-100,-200,input_StraightAcceleration, mode);
 8006fc0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006fc4:	eef1 7a67 	vneg.f32	s15, s15
 8006fc8:	6978      	ldr	r0, [r7, #20]
 8006fca:	ed97 2a01 	vldr	s4, [r7, #4]
 8006fce:	eddf 1a23 	vldr	s3, [pc, #140]	; 800705c <AdatiWayReturn+0x38c>
 8006fd2:	ed9f 1a23 	vldr	s2, [pc, #140]	; 8007060 <AdatiWayReturn+0x390>
 8006fd6:	eef0 0a67 	vmov.f32	s1, s15
 8006fda:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8007064 <AdatiWayReturn+0x394>
 8006fde:	f7fa fe07 	bl	8001bf0 <straight_table>
 8006fe2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
			pl_motor_stop();
 8006fe6:	f7fb fc6f 	bl	80028c8 <pl_motor_stop>
			wait_ms(600);
 8006fea:	f44f 7016 	mov.w	r0, #600	; 0x258
 8006fee:	f7fc fe77 	bl	8003ce0 <wait_ms>

			direction = direction + 2;
 8006ff2:	4b1d      	ldr	r3, [pc, #116]	; (8007068 <AdatiWayReturn+0x398>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3302      	adds	r3, #2
 8006ff8:	4a1b      	ldr	r2, [pc, #108]	; (8007068 <AdatiWayReturn+0x398>)
 8006ffa:	6013      	str	r3, [r2, #0]

			if (direction == 5) {
 8006ffc:	4b1a      	ldr	r3, [pc, #104]	; (8007068 <AdatiWayReturn+0x398>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2b05      	cmp	r3, #5
 8007002:	d102      	bne.n	800700a <AdatiWayReturn+0x33a>
				direction = 1;
 8007004:	4b18      	ldr	r3, [pc, #96]	; (8007068 <AdatiWayReturn+0x398>)
 8007006:	2201      	movs	r2, #1
 8007008:	601a      	str	r2, [r3, #0]
			}
			if (direction == 6) {
 800700a:	4b17      	ldr	r3, [pc, #92]	; (8007068 <AdatiWayReturn+0x398>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b06      	cmp	r3, #6
 8007010:	d102      	bne.n	8007018 <AdatiWayReturn+0x348>
				direction = 2;
 8007012:	4b15      	ldr	r3, [pc, #84]	; (8007068 <AdatiWayReturn+0x398>)
 8007014:	2202      	movs	r2, #2
 8007016:	601a      	str	r2, [r3, #0]
			}
			if (direction == 0) {
 8007018:	4b13      	ldr	r3, [pc, #76]	; (8007068 <AdatiWayReturn+0x398>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d102      	bne.n	8007026 <AdatiWayReturn+0x356>
				direction = 4;
 8007020:	4b11      	ldr	r3, [pc, #68]	; (8007068 <AdatiWayReturn+0x398>)
 8007022:	2204      	movs	r2, #4
 8007024:	601a      	str	r2, [r3, #0]
			}
			if (direction == -1) {
 8007026:	4b10      	ldr	r3, [pc, #64]	; (8007068 <AdatiWayReturn+0x398>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702e:	f040 81c0 	bne.w	80073b2 <AdatiWayReturn+0x6e2>
				direction = 3;
 8007032:	4b0d      	ldr	r3, [pc, #52]	; (8007068 <AdatiWayReturn+0x398>)
 8007034:	2203      	movs	r2, #3
 8007036:	601a      	str	r2, [r3, #0]
			}
			break;
 8007038:	e1bb      	b.n	80073b2 <AdatiWayReturn+0x6e2>
 800703a:	bf00      	nop
 800703c:	2000038c 	.word	0x2000038c
 8007040:	20000f7c 	.word	0x20000f7c
 8007044:	20000f7d 	.word	0x20000f7d
 8007048:	20000f7e 	.word	0x20000f7e
 800704c:	42c80000 	.word	0x42c80000
 8007050:	428c0000 	.word	0x428c0000
 8007054:	42f00000 	.word	0x42f00000
 8007058:	43340000 	.word	0x43340000
 800705c:	c3480000 	.word	0xc3480000
 8007060:	c2c80000 	.word	0xc2c80000
 8007064:	c2b40000 	.word	0xc2b40000
 8007068:	20000f78 	.word	0x20000f78
		}



			if (front_wall) {
 800706c:	4b7e      	ldr	r3, [pc, #504]	; (8007268 <AdatiWayReturn+0x598>)
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <AdatiWayReturn+0x3a8>
				front_count = MAX_WALKCOUNT;
 8007074:	23ff      	movs	r3, #255	; 0xff
 8007076:	83fb      	strh	r3, [r7, #30]
			}
			if (right_wall) {
 8007078:	4b7c      	ldr	r3, [pc, #496]	; (800726c <AdatiWayReturn+0x59c>)
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <AdatiWayReturn+0x3b4>
				right_count = MAX_WALKCOUNT;
 8007080:	23ff      	movs	r3, #255	; 0xff
 8007082:	83bb      	strh	r3, [r7, #28]
			}
			if (left_wall) {
 8007084:	4b7a      	ldr	r3, [pc, #488]	; (8007270 <AdatiWayReturn+0x5a0>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <AdatiWayReturn+0x3c0>
				left_count = MAX_WALKCOUNT;
 800708c:	23ff      	movs	r3, #255	; 0xff
 800708e:	833b      	strh	r3, [r7, #24]
			}
// 移動の優先順位 ： 前→右→左→後
			if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 8007090:	8bfb      	ldrh	r3, [r7, #30]
 8007092:	2bff      	cmp	r3, #255	; 0xff
 8007094:	d109      	bne.n	80070aa <AdatiWayReturn+0x3da>
 8007096:	8bbb      	ldrh	r3, [r7, #28]
 8007098:	2bff      	cmp	r3, #255	; 0xff
 800709a:	d106      	bne.n	80070aa <AdatiWayReturn+0x3da>
 800709c:	8b3b      	ldrh	r3, [r7, #24]
 800709e:	2bff      	cmp	r3, #255	; 0xff
 80070a0:	d103      	bne.n	80070aa <AdatiWayReturn+0x3da>
 80070a2:	8b7b      	ldrh	r3, [r7, #26]
 80070a4:	2bff      	cmp	r3, #255	; 0xff
 80070a6:	f000 8186 	beq.w	80073b6 <AdatiWayReturn+0x6e6>
				break;
			}

			if (front_count <= right_count && front_count <= left_count
 80070aa:	8bfa      	ldrh	r2, [r7, #30]
 80070ac:	8bbb      	ldrh	r3, [r7, #28]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d81c      	bhi.n	80070ec <AdatiWayReturn+0x41c>
 80070b2:	8bfa      	ldrh	r2, [r7, #30]
 80070b4:	8b3b      	ldrh	r3, [r7, #24]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d818      	bhi.n	80070ec <AdatiWayReturn+0x41c>
					&& front_count <= back_count){
 80070ba:	8bfa      	ldrh	r2, [r7, #30]
 80070bc:	8b7b      	ldrh	r3, [r7, #26]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d814      	bhi.n	80070ec <AdatiWayReturn+0x41c>
				//直進
				mode.WallControlMode=1;
 80070c2:	2301      	movs	r3, #1
 80070c4:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 80070ca:	2300      	movs	r3, #0
 80070cc:	75fb      	strb	r3, [r7, #23]
				v_e=straight_table(180-MAZE_OFFSET, v_e,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 80070ce:	6978      	ldr	r0, [r7, #20]
 80070d0:	ed97 2a01 	vldr	s4, [r7, #4]
 80070d4:	edd7 1a03 	vldr	s3, [r7, #12]
 80070d8:	ed97 1a03 	vldr	s2, [r7, #12]
 80070dc:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80070e0:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8007274 <AdatiWayReturn+0x5a4>
 80070e4:	f7fa fd84 	bl	8001bf0 <straight_table>
 80070e8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

			}
			if(right_count < front_count && right_count <= left_count
 80070ec:	8bba      	ldrh	r2, [r7, #28]
 80070ee:	8bfb      	ldrh	r3, [r7, #30]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d21d      	bcs.n	8007130 <AdatiWayReturn+0x460>
 80070f4:	8bba      	ldrh	r2, [r7, #28]
 80070f6:	8b3b      	ldrh	r3, [r7, #24]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d819      	bhi.n	8007130 <AdatiWayReturn+0x460>
					&& right_count <= back_count){
 80070fc:	8bba      	ldrh	r2, [r7, #28]
 80070fe:	8b7b      	ldrh	r3, [r7, #26]
 8007100:	429a      	cmp	r2, r3
 8007102:	d815      	bhi.n	8007130 <AdatiWayReturn+0x460>
				//右旋回
				mode.WallControlMode=0;
 8007104:	2300      	movs	r3, #0
 8007106:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 8007108:	2300      	movs	r3, #0
 800710a:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=1;
 800710c:	2301      	movs	r3, #1
 800710e:	75fb      	strb	r3, [r7, #23]
				slalomR(speed500_exploration.slalom_R, OFF,EXPLORATION);
 8007110:	4b59      	ldr	r3, [pc, #356]	; (8007278 <AdatiWayReturn+0x5a8>)
 8007112:	2200      	movs	r2, #0
 8007114:	9202      	str	r2, [sp, #8]
 8007116:	2200      	movs	r2, #0
 8007118:	9201      	str	r2, [sp, #4]
 800711a:	699a      	ldr	r2, [r3, #24]
 800711c:	9200      	str	r2, [sp, #0]
 800711e:	3308      	adds	r3, #8
 8007120:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007122:	f7fd f993 	bl	800444c <slalomR>
				direction++;
 8007126:	4b55      	ldr	r3, [pc, #340]	; (800727c <AdatiWayReturn+0x5ac>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3301      	adds	r3, #1
 800712c:	4a53      	ldr	r2, [pc, #332]	; (800727c <AdatiWayReturn+0x5ac>)
 800712e:	6013      	str	r3, [r2, #0]

			}
			if(left_count < front_count && left_count < right_count
 8007130:	8b3a      	ldrh	r2, [r7, #24]
 8007132:	8bfb      	ldrh	r3, [r7, #30]
 8007134:	429a      	cmp	r2, r3
 8007136:	d21d      	bcs.n	8007174 <AdatiWayReturn+0x4a4>
 8007138:	8b3a      	ldrh	r2, [r7, #24]
 800713a:	8bbb      	ldrh	r3, [r7, #28]
 800713c:	429a      	cmp	r2, r3
 800713e:	d219      	bcs.n	8007174 <AdatiWayReturn+0x4a4>
					&& left_count <= back_count){
 8007140:	8b3a      	ldrh	r2, [r7, #24]
 8007142:	8b7b      	ldrh	r3, [r7, #26]
 8007144:	429a      	cmp	r2, r3
 8007146:	d815      	bhi.n	8007174 <AdatiWayReturn+0x4a4>
				mode.WallControlMode=0;
 8007148:	2300      	movs	r3, #0
 800714a:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800714c:	2300      	movs	r3, #0
 800714e:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=1;
 8007150:	2301      	movs	r3, #1
 8007152:	75fb      	strb	r3, [r7, #23]
				slalomL(speed500_exploration.slalom_L, OFF,EXPLORATION);
 8007154:	4b48      	ldr	r3, [pc, #288]	; (8007278 <AdatiWayReturn+0x5a8>)
 8007156:	2200      	movs	r2, #0
 8007158:	9202      	str	r2, [sp, #8]
 800715a:	2200      	movs	r2, #0
 800715c:	9201      	str	r2, [sp, #4]
 800715e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007160:	9200      	str	r2, [sp, #0]
 8007162:	331c      	adds	r3, #28
 8007164:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007166:	f7fd faa5 	bl	80046b4 <slalomL>
				direction--;
 800716a:	4b44      	ldr	r3, [pc, #272]	; (800727c <AdatiWayReturn+0x5ac>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3b01      	subs	r3, #1
 8007170:	4a42      	ldr	r2, [pc, #264]	; (800727c <AdatiWayReturn+0x5ac>)
 8007172:	6013      	str	r3, [r2, #0]
			}
			if(back_count < front_count && back_count < right_count
 8007174:	8b7a      	ldrh	r2, [r7, #26]
 8007176:	8bfb      	ldrh	r3, [r7, #30]
 8007178:	429a      	cmp	r2, r3
 800717a:	f080 80f9 	bcs.w	8007370 <AdatiWayReturn+0x6a0>
 800717e:	8b7a      	ldrh	r2, [r7, #26]
 8007180:	8bbb      	ldrh	r3, [r7, #28]
 8007182:	429a      	cmp	r2, r3
 8007184:	f080 80f4 	bcs.w	8007370 <AdatiWayReturn+0x6a0>
					&& back_count < left_count){
 8007188:	8b7a      	ldrh	r2, [r7, #26]
 800718a:	8b3b      	ldrh	r3, [r7, #24]
 800718c:	429a      	cmp	r2, r3
 800718e:	f080 80ef 	bcs.w	8007370 <AdatiWayReturn+0x6a0>

				if (front_wall){
 8007192:	4b35      	ldr	r3, [pc, #212]	; (8007268 <AdatiWayReturn+0x598>)
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 8084 	beq.w	80072a4 <AdatiWayReturn+0x5d4>
					mode.WallControlMode=0;
 800719c:	2300      	movs	r3, #0
 800719e:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 80071a0:	2300      	movs	r3, #0
 80071a2:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 80071a4:	2300      	movs	r3, #0
 80071a6:	75fb      	strb	r3, [r7, #23]
					v_e=straight_table(90-MAZE_OFFSET, v_e,100,input_StraightVelocity,input_StraightAcceleration, mode);
 80071a8:	6978      	ldr	r0, [r7, #20]
 80071aa:	ed97 2a01 	vldr	s4, [r7, #4]
 80071ae:	edd7 1a03 	vldr	s3, [r7, #12]
 80071b2:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8007284 <AdatiWayReturn+0x5b4>
 80071b6:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80071ba:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8007288 <AdatiWayReturn+0x5b8>
 80071be:	f7fa fd17 	bl	8001bf0 <straight_table>
 80071c2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
					pl_motor_stop();
 80071c6:	f7fb fb7f 	bl	80028c8 <pl_motor_stop>
					wait_ms(300);
 80071ca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80071ce:	f7fc fd87 	bl	8003ce0 <wait_ms>
					pl_motor_start();
 80071d2:	f7fb fb65 	bl	80028a0 <pl_motor_start>
					v_ea=turning_table(180, 120,120,input_TurningVelocity,input_TurningAcceleration);
 80071d6:	ed97 2a00 	vldr	s4, [r7]
 80071da:	edd7 1a02 	vldr	s3, [r7, #8]
 80071de:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800729c <AdatiWayReturn+0x5cc>
 80071e2:	eddf 0a2e 	vldr	s1, [pc, #184]	; 800729c <AdatiWayReturn+0x5cc>
 80071e6:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800728c <AdatiWayReturn+0x5bc>
 80071ea:	f7fa fdfb 	bl	8001de4 <turning_table>
 80071ee:	ed87 0a08 	vstr	s0, [r7, #32]
					pl_motor_stop();
 80071f2:	f7fb fb69 	bl	80028c8 <pl_motor_stop>
					wait_ms(300);
 80071f6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80071fa:	f7fc fd71 	bl	8003ce0 <wait_ms>
					pl_motor_start();
 80071fe:	f7fb fb4f 	bl	80028a0 <pl_motor_start>
					v_e=straight_table(-90, -v_e,-100,-200,input_StraightAcceleration, mode);
 8007202:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007206:	eef1 7a67 	vneg.f32	s15, s15
 800720a:	6978      	ldr	r0, [r7, #20]
 800720c:	ed97 2a01 	vldr	s4, [r7, #4]
 8007210:	eddf 1a1f 	vldr	s3, [pc, #124]	; 8007290 <AdatiWayReturn+0x5c0>
 8007214:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8007294 <AdatiWayReturn+0x5c4>
 8007218:	eef0 0a67 	vmov.f32	s1, s15
 800721c:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007280 <AdatiWayReturn+0x5b0>
 8007220:	f7fa fce6 	bl	8001bf0 <straight_table>
 8007224:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
					pl_motor_stop();
 8007228:	f7fb fb4e 	bl	80028c8 <pl_motor_stop>
					wait_ms(600);
 800722c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8007230:	f7fc fd56 	bl	8003ce0 <wait_ms>
					mode.WallControlMode=1;
 8007234:	2301      	movs	r3, #1
 8007236:	753b      	strb	r3, [r7, #20]
					pl_motor_start();
 8007238:	f7fb fb32 	bl	80028a0 <pl_motor_start>
					v_e=straight_table(90+BACK_TO_CENTER, 120,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800723c:	6978      	ldr	r0, [r7, #20]
 800723e:	ed97 2a01 	vldr	s4, [r7, #4]
 8007242:	edd7 1a03 	vldr	s3, [r7, #12]
 8007246:	ed97 1a03 	vldr	s2, [r7, #12]
 800724a:	eddf 0a14 	vldr	s1, [pc, #80]	; 800729c <AdatiWayReturn+0x5cc>
 800724e:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80072a0 <AdatiWayReturn+0x5d0>
 8007252:	f7fa fccd 	bl	8001bf0 <straight_table>
 8007256:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
					direction = direction + 2;
 800725a:	4b08      	ldr	r3, [pc, #32]	; (800727c <AdatiWayReturn+0x5ac>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3302      	adds	r3, #2
 8007260:	4a06      	ldr	r2, [pc, #24]	; (800727c <AdatiWayReturn+0x5ac>)
 8007262:	6013      	str	r3, [r2, #0]
 8007264:	e084      	b.n	8007370 <AdatiWayReturn+0x6a0>
 8007266:	bf00      	nop
 8007268:	20000f7c 	.word	0x20000f7c
 800726c:	20000f7d 	.word	0x20000f7d
 8007270:	20000f7e 	.word	0x20000f7e
 8007274:	43200000 	.word	0x43200000
 8007278:	20000a50 	.word	0x20000a50
 800727c:	20000f78 	.word	0x20000f78
 8007280:	c2b40000 	.word	0xc2b40000
 8007284:	42c80000 	.word	0x42c80000
 8007288:	428c0000 	.word	0x428c0000
 800728c:	43340000 	.word	0x43340000
 8007290:	c3480000 	.word	0xc3480000
 8007294:	c2c80000 	.word	0xc2c80000
 8007298:	c1f40000 	.word	0xc1f40000
 800729c:	42f00000 	.word	0x42f00000
 80072a0:	42f10000 	.word	0x42f10000
				}else{
					mode.WallControlMode=0;
 80072a4:	2300      	movs	r3, #0
 80072a6:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 80072a8:	2300      	movs	r3, #0
 80072aa:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	75fb      	strb	r3, [r7, #23]
					pl_motor_start();
 80072b0:	f7fb faf6 	bl	80028a0 <pl_motor_start>
					v_e=straight_table(90-MAZE_OFFSET, v_e,100,input_StraightVelocity,input_StraightAcceleration, mode);
 80072b4:	6978      	ldr	r0, [r7, #20]
 80072b6:	ed97 2a01 	vldr	s4, [r7, #4]
 80072ba:	edd7 1a03 	vldr	s3, [r7, #12]
 80072be:	ed1f 1a0f 	vldr	s2, [pc, #-60]	; 8007284 <AdatiWayReturn+0x5b4>
 80072c2:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80072c6:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 8007288 <AdatiWayReturn+0x5b8>
 80072ca:	f7fa fc91 	bl	8001bf0 <straight_table>
 80072ce:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
					pl_motor_stop();
 80072d2:	f7fb faf9 	bl	80028c8 <pl_motor_stop>
					wait_ms(300);
 80072d6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80072da:	f7fc fd01 	bl	8003ce0 <wait_ms>
					pl_motor_start();
 80072de:	f7fb fadf 	bl	80028a0 <pl_motor_start>
					v_ea=turning_table(180, 120,120,input_TurningVelocity,input_TurningAcceleration);
 80072e2:	ed97 2a00 	vldr	s4, [r7]
 80072e6:	edd7 1a02 	vldr	s3, [r7, #8]
 80072ea:	ed1f 1a14 	vldr	s2, [pc, #-80]	; 800729c <AdatiWayReturn+0x5cc>
 80072ee:	ed5f 0a15 	vldr	s1, [pc, #-84]	; 800729c <AdatiWayReturn+0x5cc>
 80072f2:	ed1f 0a1a 	vldr	s0, [pc, #-104]	; 800728c <AdatiWayReturn+0x5bc>
 80072f6:	f7fa fd75 	bl	8001de4 <turning_table>
 80072fa:	ed87 0a08 	vstr	s0, [r7, #32]
					pl_motor_stop();
 80072fe:	f7fb fae3 	bl	80028c8 <pl_motor_stop>
					wait_ms(300);
 8007302:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007306:	f7fc fceb 	bl	8003ce0 <wait_ms>
					pl_motor_start();
 800730a:	f7fb fac9 	bl	80028a0 <pl_motor_start>
					v_e=straight_table(-BACK_TO_CENTER, -v_e,-100,-200,input_StraightAcceleration, mode);
 800730e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007312:	eef1 7a67 	vneg.f32	s15, s15
 8007316:	6978      	ldr	r0, [r7, #20]
 8007318:	ed97 2a01 	vldr	s4, [r7, #4]
 800731c:	ed5f 1a24 	vldr	s3, [pc, #-144]	; 8007290 <AdatiWayReturn+0x5c0>
 8007320:	ed1f 1a24 	vldr	s2, [pc, #-144]	; 8007294 <AdatiWayReturn+0x5c4>
 8007324:	eef0 0a67 	vmov.f32	s1, s15
 8007328:	ed1f 0a25 	vldr	s0, [pc, #-148]	; 8007298 <AdatiWayReturn+0x5c8>
 800732c:	f7fa fc60 	bl	8001bf0 <straight_table>
 8007330:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
					pl_motor_stop();
 8007334:	f7fb fac8 	bl	80028c8 <pl_motor_stop>
					wait_ms(600);
 8007338:	f44f 7016 	mov.w	r0, #600	; 0x258
 800733c:	f7fc fcd0 	bl	8003ce0 <wait_ms>
					mode.WallControlMode=1;
 8007340:	2301      	movs	r3, #1
 8007342:	753b      	strb	r3, [r7, #20]
					pl_motor_start();
 8007344:	f7fb faac 	bl	80028a0 <pl_motor_start>
					v_e=straight_table(90+BACK_TO_CENTER, 120,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 8007348:	6978      	ldr	r0, [r7, #20]
 800734a:	ed97 2a01 	vldr	s4, [r7, #4]
 800734e:	edd7 1a03 	vldr	s3, [r7, #12]
 8007352:	ed97 1a03 	vldr	s2, [r7, #12]
 8007356:	ed5f 0a2f 	vldr	s1, [pc, #-188]	; 800729c <AdatiWayReturn+0x5cc>
 800735a:	ed1f 0a2f 	vldr	s0, [pc, #-188]	; 80072a0 <AdatiWayReturn+0x5d0>
 800735e:	f7fa fc47 	bl	8001bf0 <straight_table>
 8007362:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
					direction = direction + 2;
 8007366:	4b72      	ldr	r3, [pc, #456]	; (8007530 <AdatiWayReturn+0x860>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	3302      	adds	r3, #2
 800736c:	4a70      	ldr	r2, [pc, #448]	; (8007530 <AdatiWayReturn+0x860>)
 800736e:	6013      	str	r3, [r2, #0]

				}

			}

		if (direction == 5) {
 8007370:	4b6f      	ldr	r3, [pc, #444]	; (8007530 <AdatiWayReturn+0x860>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b05      	cmp	r3, #5
 8007376:	d102      	bne.n	800737e <AdatiWayReturn+0x6ae>
			direction = 1;
 8007378:	4b6d      	ldr	r3, [pc, #436]	; (8007530 <AdatiWayReturn+0x860>)
 800737a:	2201      	movs	r2, #1
 800737c:	601a      	str	r2, [r3, #0]
		}
		if (direction == 6) {
 800737e:	4b6c      	ldr	r3, [pc, #432]	; (8007530 <AdatiWayReturn+0x860>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b06      	cmp	r3, #6
 8007384:	d102      	bne.n	800738c <AdatiWayReturn+0x6bc>
			direction = 2;
 8007386:	4b6a      	ldr	r3, [pc, #424]	; (8007530 <AdatiWayReturn+0x860>)
 8007388:	2202      	movs	r2, #2
 800738a:	601a      	str	r2, [r3, #0]
		}
		if (direction == 0) {
 800738c:	4b68      	ldr	r3, [pc, #416]	; (8007530 <AdatiWayReturn+0x860>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d102      	bne.n	800739a <AdatiWayReturn+0x6ca>
			direction = 4;
 8007394:	4b66      	ldr	r3, [pc, #408]	; (8007530 <AdatiWayReturn+0x860>)
 8007396:	2204      	movs	r2, #4
 8007398:	601a      	str	r2, [r3, #0]
		}
		if (direction == -1) {
 800739a:	4b65      	ldr	r3, [pc, #404]	; (8007530 <AdatiWayReturn+0x860>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a2:	f47f acf8 	bne.w	8006d96 <AdatiWayReturn+0xc6>
			direction = 3;
 80073a6:	4b62      	ldr	r3, [pc, #392]	; (8007530 <AdatiWayReturn+0x860>)
 80073a8:	2203      	movs	r2, #3
 80073aa:	601a      	str	r2, [r3, #0]
		update_coordinate();
 80073ac:	e4f3      	b.n	8006d96 <AdatiWayReturn+0xc6>
			break;
 80073ae:	bf00      	nop
 80073b0:	e002      	b.n	80073b8 <AdatiWayReturn+0x6e8>
			break;
 80073b2:	bf00      	nop
 80073b4:	e000      	b.n	80073b8 <AdatiWayReturn+0x6e8>
				break;
 80073b6:	bf00      	nop
		}

	}

//	record_in();
	pl_motor_start();
 80073b8:	f7fb fa72 	bl	80028a0 <pl_motor_start>
	v_e=straight_table(90+BACK_TO_CENTER, 120,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 80073bc:	6978      	ldr	r0, [r7, #20]
 80073be:	ed97 2a01 	vldr	s4, [r7, #4]
 80073c2:	edd7 1a03 	vldr	s3, [r7, #12]
 80073c6:	ed97 1a03 	vldr	s2, [r7, #12]
 80073ca:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8007534 <AdatiWayReturn+0x864>
 80073ce:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8007538 <AdatiWayReturn+0x868>
 80073d2:	f7fa fc0d 	bl	8001bf0 <straight_table>
 80073d6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	while (1) {

		update_coordinate();
 80073da:	f000 fa77 	bl	80078cc <update_coordinate>

		front_wall=((int)((float)(g_sensor_mean[0]+g_sensor_mean[3])/2) >= F_PRESENCE);
 80073de:	4b57      	ldr	r3, [pc, #348]	; (800753c <AdatiWayReturn+0x86c>)
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	4b56      	ldr	r3, [pc, #344]	; (800753c <AdatiWayReturn+0x86c>)
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	ee07 3a90 	vmov	s15, r3
 80073ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80073f0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80073f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073fc:	ee17 3a90 	vmov	r3, s15
 8007400:	2b2c      	cmp	r3, #44	; 0x2c
 8007402:	bfcc      	ite	gt
 8007404:	2301      	movgt	r3, #1
 8007406:	2300      	movle	r3, #0
 8007408:	b2da      	uxtb	r2, r3
 800740a:	4b4d      	ldr	r3, [pc, #308]	; (8007540 <AdatiWayReturn+0x870>)
 800740c:	701a      	strb	r2, [r3, #0]
		right_wall=(g_sensor_mean[2] >= R_PRESENCE);
 800740e:	4b4b      	ldr	r3, [pc, #300]	; (800753c <AdatiWayReturn+0x86c>)
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	2b63      	cmp	r3, #99	; 0x63
 8007414:	bfcc      	ite	gt
 8007416:	2301      	movgt	r3, #1
 8007418:	2300      	movle	r3, #0
 800741a:	b2da      	uxtb	r2, r3
 800741c:	4b49      	ldr	r3, [pc, #292]	; (8007544 <AdatiWayReturn+0x874>)
 800741e:	701a      	strb	r2, [r3, #0]
		left_wall=(g_sensor_mean[1] >= L_PRESENCE);
 8007420:	4b46      	ldr	r3, [pc, #280]	; (800753c <AdatiWayReturn+0x86c>)
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	2b63      	cmp	r3, #99	; 0x63
 8007426:	bfcc      	ite	gt
 8007428:	2301      	movgt	r3, #1
 800742a:	2300      	movle	r3, #0
 800742c:	b2da      	uxtb	r2, r3
 800742e:	4b46      	ldr	r3, [pc, #280]	; (8007548 <AdatiWayReturn+0x878>)
 8007430:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=1;
 8007432:	2301      	movs	r3, #1
 8007434:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=2;
 8007436:	2302      	movs	r3, #2
 8007438:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800743a:	2300      	movs	r3, #0
 800743c:	75fb      	strb	r3, [r7, #23]
		v_e=straight_table(MAZE_OFFSET, v_e,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800743e:	6978      	ldr	r0, [r7, #20]
 8007440:	ed97 2a01 	vldr	s4, [r7, #4]
 8007444:	edd7 1a03 	vldr	s3, [r7, #12]
 8007448:	ed97 1a03 	vldr	s2, [r7, #12]
 800744c:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8007450:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8007454:	f7fa fbcc 	bl	8001bf0 <straight_table>
 8007458:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count);
 800745c:	f107 0318 	add.w	r3, r7, #24
 8007460:	f107 021a 	add.w	r2, r7, #26
 8007464:	f107 011c 	add.w	r1, r7, #28
 8007468:	f107 001e 	add.w	r0, r7, #30
 800746c:	f002 f990 	bl	8009790 <search_AroundWalkCount>

		if (x == 0 && y == 0) { ///////goal************************
 8007470:	4b36      	ldr	r3, [pc, #216]	; (800754c <AdatiWayReturn+0x87c>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d173      	bne.n	8007560 <AdatiWayReturn+0x890>
 8007478:	4b35      	ldr	r3, [pc, #212]	; (8007550 <AdatiWayReturn+0x880>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d16f      	bne.n	8007560 <AdatiWayReturn+0x890>
			mode.WallControlMode=0;
 8007480:	2300      	movs	r3, #0
 8007482:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 8007484:	2300      	movs	r3, #0
 8007486:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 8007488:	2300      	movs	r3, #0
 800748a:	75fb      	strb	r3, [r7, #23]
			v_e=straight_table(90-MAZE_OFFSET, v_e,100,input_StraightVelocity,input_StraightAcceleration, mode);
 800748c:	6978      	ldr	r0, [r7, #20]
 800748e:	ed97 2a01 	vldr	s4, [r7, #4]
 8007492:	edd7 1a03 	vldr	s3, [r7, #12]
 8007496:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8007554 <AdatiWayReturn+0x884>
 800749a:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 800749e:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8007558 <AdatiWayReturn+0x888>
 80074a2:	f7fa fba5 	bl	8001bf0 <straight_table>
 80074a6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
			pl_motor_stop();
 80074aa:	f7fb fa0d 	bl	80028c8 <pl_motor_stop>
			wait_ms(300);
 80074ae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80074b2:	f7fc fc15 	bl	8003ce0 <wait_ms>
			pl_motor_start();
 80074b6:	f7fb f9f3 	bl	80028a0 <pl_motor_start>
			v_ea=turning_table(180, 120,120,input_TurningVelocity,input_TurningAcceleration);
 80074ba:	ed97 2a00 	vldr	s4, [r7]
 80074be:	edd7 1a02 	vldr	s3, [r7, #8]
 80074c2:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8007534 <AdatiWayReturn+0x864>
 80074c6:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8007534 <AdatiWayReturn+0x864>
 80074ca:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800755c <AdatiWayReturn+0x88c>
 80074ce:	f7fa fc89 	bl	8001de4 <turning_table>
 80074d2:	ed87 0a08 	vstr	s0, [r7, #32]
			pl_motor_stop();
 80074d6:	f7fb f9f7 	bl	80028c8 <pl_motor_stop>
			wait_ms(300);
 80074da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80074de:	f7fc fbff 	bl	8003ce0 <wait_ms>

			maze_display();
 80074e2:	f002 fe6b 	bl	800a1bc <maze_display>
			direction = direction + 2;
 80074e6:	4b12      	ldr	r3, [pc, #72]	; (8007530 <AdatiWayReturn+0x860>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3302      	adds	r3, #2
 80074ec:	4a10      	ldr	r2, [pc, #64]	; (8007530 <AdatiWayReturn+0x860>)
 80074ee:	6013      	str	r3, [r2, #0]

			if (direction == 5) {
 80074f0:	4b0f      	ldr	r3, [pc, #60]	; (8007530 <AdatiWayReturn+0x860>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b05      	cmp	r3, #5
 80074f6:	d102      	bne.n	80074fe <AdatiWayReturn+0x82e>
				direction = 1;
 80074f8:	4b0d      	ldr	r3, [pc, #52]	; (8007530 <AdatiWayReturn+0x860>)
 80074fa:	2201      	movs	r2, #1
 80074fc:	601a      	str	r2, [r3, #0]
			}
			if (direction == 6) {
 80074fe:	4b0c      	ldr	r3, [pc, #48]	; (8007530 <AdatiWayReturn+0x860>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2b06      	cmp	r3, #6
 8007504:	d102      	bne.n	800750c <AdatiWayReturn+0x83c>
				direction = 2;
 8007506:	4b0a      	ldr	r3, [pc, #40]	; (8007530 <AdatiWayReturn+0x860>)
 8007508:	2202      	movs	r2, #2
 800750a:	601a      	str	r2, [r3, #0]
			}
			if (direction == 0) {
 800750c:	4b08      	ldr	r3, [pc, #32]	; (8007530 <AdatiWayReturn+0x860>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d102      	bne.n	800751a <AdatiWayReturn+0x84a>
				direction = 4;
 8007514:	4b06      	ldr	r3, [pc, #24]	; (8007530 <AdatiWayReturn+0x860>)
 8007516:	2204      	movs	r2, #4
 8007518:	601a      	str	r2, [r3, #0]
			}
			if (direction == -1) {
 800751a:	4b05      	ldr	r3, [pc, #20]	; (8007530 <AdatiWayReturn+0x860>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007522:	f040 81be 	bne.w	80078a2 <AdatiWayReturn+0xbd2>
				direction = 3;
 8007526:	4b02      	ldr	r3, [pc, #8]	; (8007530 <AdatiWayReturn+0x860>)
 8007528:	2203      	movs	r2, #3
 800752a:	601a      	str	r2, [r3, #0]
			}

			break;
 800752c:	e1b9      	b.n	80078a2 <AdatiWayReturn+0xbd2>
 800752e:	bf00      	nop
 8007530:	20000f78 	.word	0x20000f78
 8007534:	42f00000 	.word	0x42f00000
 8007538:	42f10000 	.word	0x42f10000
 800753c:	2000038c 	.word	0x2000038c
 8007540:	20000f7c 	.word	0x20000f7c
 8007544:	20000f7d 	.word	0x20000f7d
 8007548:	20000f7e 	.word	0x20000f7e
 800754c:	20000f70 	.word	0x20000f70
 8007550:	20000f74 	.word	0x20000f74
 8007554:	42c80000 	.word	0x42c80000
 8007558:	428c0000 	.word	0x428c0000
 800755c:	43340000 	.word	0x43340000
		}


		if (front_wall) {
 8007560:	4b7e      	ldr	r3, [pc, #504]	; (800775c <AdatiWayReturn+0xa8c>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <AdatiWayReturn+0x89c>
			front_count = MAX_WALKCOUNT;
 8007568:	23ff      	movs	r3, #255	; 0xff
 800756a:	83fb      	strh	r3, [r7, #30]
		}
		if (right_wall) {
 800756c:	4b7c      	ldr	r3, [pc, #496]	; (8007760 <AdatiWayReturn+0xa90>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d001      	beq.n	8007578 <AdatiWayReturn+0x8a8>
			right_count = MAX_WALKCOUNT;
 8007574:	23ff      	movs	r3, #255	; 0xff
 8007576:	83bb      	strh	r3, [r7, #28]
		}
		if (left_wall) {
 8007578:	4b7a      	ldr	r3, [pc, #488]	; (8007764 <AdatiWayReturn+0xa94>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <AdatiWayReturn+0x8b4>
			left_count = MAX_WALKCOUNT;
 8007580:	23ff      	movs	r3, #255	; 0xff
 8007582:	833b      	strh	r3, [r7, #24]
		}
// 移動の優先順位 ： 前→右→左→後
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 8007584:	8bfb      	ldrh	r3, [r7, #30]
 8007586:	2bff      	cmp	r3, #255	; 0xff
 8007588:	d109      	bne.n	800759e <AdatiWayReturn+0x8ce>
 800758a:	8bbb      	ldrh	r3, [r7, #28]
 800758c:	2bff      	cmp	r3, #255	; 0xff
 800758e:	d106      	bne.n	800759e <AdatiWayReturn+0x8ce>
 8007590:	8b3b      	ldrh	r3, [r7, #24]
 8007592:	2bff      	cmp	r3, #255	; 0xff
 8007594:	d103      	bne.n	800759e <AdatiWayReturn+0x8ce>
 8007596:	8b7b      	ldrh	r3, [r7, #26]
 8007598:	2bff      	cmp	r3, #255	; 0xff
 800759a:	f000 8184 	beq.w	80078a6 <AdatiWayReturn+0xbd6>
			break;
		}

		if (front_count <= right_count && front_count <= left_count
 800759e:	8bfa      	ldrh	r2, [r7, #30]
 80075a0:	8bbb      	ldrh	r3, [r7, #28]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d81c      	bhi.n	80075e0 <AdatiWayReturn+0x910>
 80075a6:	8bfa      	ldrh	r2, [r7, #30]
 80075a8:	8b3b      	ldrh	r3, [r7, #24]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d818      	bhi.n	80075e0 <AdatiWayReturn+0x910>
				&& front_count <= back_count){
 80075ae:	8bfa      	ldrh	r2, [r7, #30]
 80075b0:	8b7b      	ldrh	r3, [r7, #26]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d814      	bhi.n	80075e0 <AdatiWayReturn+0x910>
			//直進
			mode.WallControlMode=1;
 80075b6:	2301      	movs	r3, #1
 80075b8:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 80075ba:	2300      	movs	r3, #0
 80075bc:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 80075be:	2300      	movs	r3, #0
 80075c0:	75fb      	strb	r3, [r7, #23]
			v_e=straight_table(180-MAZE_OFFSET, v_e,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 80075c2:	6978      	ldr	r0, [r7, #20]
 80075c4:	ed97 2a01 	vldr	s4, [r7, #4]
 80075c8:	edd7 1a03 	vldr	s3, [r7, #12]
 80075cc:	ed97 1a03 	vldr	s2, [r7, #12]
 80075d0:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80075d4:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8007768 <AdatiWayReturn+0xa98>
 80075d8:	f7fa fb0a 	bl	8001bf0 <straight_table>
 80075dc:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

		}
		if(right_count < front_count && right_count <= left_count
 80075e0:	8bba      	ldrh	r2, [r7, #28]
 80075e2:	8bfb      	ldrh	r3, [r7, #30]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d21d      	bcs.n	8007624 <AdatiWayReturn+0x954>
 80075e8:	8bba      	ldrh	r2, [r7, #28]
 80075ea:	8b3b      	ldrh	r3, [r7, #24]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d819      	bhi.n	8007624 <AdatiWayReturn+0x954>
				&& right_count <= back_count){
 80075f0:	8bba      	ldrh	r2, [r7, #28]
 80075f2:	8b7b      	ldrh	r3, [r7, #26]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d815      	bhi.n	8007624 <AdatiWayReturn+0x954>
			//右旋回
			mode.WallControlMode=0;
 80075f8:	2300      	movs	r3, #0
 80075fa:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 80075fc:	2300      	movs	r3, #0
 80075fe:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=1;
 8007600:	2301      	movs	r3, #1
 8007602:	75fb      	strb	r3, [r7, #23]
			slalomR(speed500_exploration.slalom_R, OFF,EXPLORATION);
 8007604:	4b59      	ldr	r3, [pc, #356]	; (800776c <AdatiWayReturn+0xa9c>)
 8007606:	2200      	movs	r2, #0
 8007608:	9202      	str	r2, [sp, #8]
 800760a:	2200      	movs	r2, #0
 800760c:	9201      	str	r2, [sp, #4]
 800760e:	699a      	ldr	r2, [r3, #24]
 8007610:	9200      	str	r2, [sp, #0]
 8007612:	3308      	adds	r3, #8
 8007614:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007616:	f7fc ff19 	bl	800444c <slalomR>
			direction++;
 800761a:	4b55      	ldr	r3, [pc, #340]	; (8007770 <AdatiWayReturn+0xaa0>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3301      	adds	r3, #1
 8007620:	4a53      	ldr	r2, [pc, #332]	; (8007770 <AdatiWayReturn+0xaa0>)
 8007622:	6013      	str	r3, [r2, #0]

		}
		if(left_count < front_count && left_count < right_count
 8007624:	8b3a      	ldrh	r2, [r7, #24]
 8007626:	8bfb      	ldrh	r3, [r7, #30]
 8007628:	429a      	cmp	r2, r3
 800762a:	d21d      	bcs.n	8007668 <AdatiWayReturn+0x998>
 800762c:	8b3a      	ldrh	r2, [r7, #24]
 800762e:	8bbb      	ldrh	r3, [r7, #28]
 8007630:	429a      	cmp	r2, r3
 8007632:	d219      	bcs.n	8007668 <AdatiWayReturn+0x998>
				&& left_count <= back_count){
 8007634:	8b3a      	ldrh	r2, [r7, #24]
 8007636:	8b7b      	ldrh	r3, [r7, #26]
 8007638:	429a      	cmp	r2, r3
 800763a:	d815      	bhi.n	8007668 <AdatiWayReturn+0x998>
			mode.WallControlMode=0;
 800763c:	2300      	movs	r3, #0
 800763e:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 8007640:	2300      	movs	r3, #0
 8007642:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=1;
 8007644:	2301      	movs	r3, #1
 8007646:	75fb      	strb	r3, [r7, #23]
			slalomL(speed500_exploration.slalom_L, OFF,EXPLORATION);
 8007648:	4b48      	ldr	r3, [pc, #288]	; (800776c <AdatiWayReturn+0xa9c>)
 800764a:	2200      	movs	r2, #0
 800764c:	9202      	str	r2, [sp, #8]
 800764e:	2200      	movs	r2, #0
 8007650:	9201      	str	r2, [sp, #4]
 8007652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007654:	9200      	str	r2, [sp, #0]
 8007656:	331c      	adds	r3, #28
 8007658:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800765a:	f7fd f82b 	bl	80046b4 <slalomL>
			direction--;
 800765e:	4b44      	ldr	r3, [pc, #272]	; (8007770 <AdatiWayReturn+0xaa0>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3b01      	subs	r3, #1
 8007664:	4a42      	ldr	r2, [pc, #264]	; (8007770 <AdatiWayReturn+0xaa0>)
 8007666:	6013      	str	r3, [r2, #0]
		}
		if(back_count < front_count && back_count < right_count
 8007668:	8b7a      	ldrh	r2, [r7, #26]
 800766a:	8bfb      	ldrh	r3, [r7, #30]
 800766c:	429a      	cmp	r2, r3
 800766e:	f080 80f9 	bcs.w	8007864 <AdatiWayReturn+0xb94>
 8007672:	8b7a      	ldrh	r2, [r7, #26]
 8007674:	8bbb      	ldrh	r3, [r7, #28]
 8007676:	429a      	cmp	r2, r3
 8007678:	f080 80f4 	bcs.w	8007864 <AdatiWayReturn+0xb94>
				&& back_count < left_count){
 800767c:	8b7a      	ldrh	r2, [r7, #26]
 800767e:	8b3b      	ldrh	r3, [r7, #24]
 8007680:	429a      	cmp	r2, r3
 8007682:	f080 80ef 	bcs.w	8007864 <AdatiWayReturn+0xb94>

			if (front_wall){
 8007686:	4b35      	ldr	r3, [pc, #212]	; (800775c <AdatiWayReturn+0xa8c>)
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	f000 8084 	beq.w	8007798 <AdatiWayReturn+0xac8>
				mode.WallControlMode=0;
 8007690:	2300      	movs	r3, #0
 8007692:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 8007694:	2300      	movs	r3, #0
 8007696:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 8007698:	2300      	movs	r3, #0
 800769a:	75fb      	strb	r3, [r7, #23]
				v_e=straight_table(90-MAZE_OFFSET, v_e,100,input_StraightVelocity,input_StraightAcceleration, mode);
 800769c:	6978      	ldr	r0, [r7, #20]
 800769e:	ed97 2a01 	vldr	s4, [r7, #4]
 80076a2:	edd7 1a03 	vldr	s3, [r7, #12]
 80076a6:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8007778 <AdatiWayReturn+0xaa8>
 80076aa:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80076ae:	ed9f 0a33 	vldr	s0, [pc, #204]	; 800777c <AdatiWayReturn+0xaac>
 80076b2:	f7fa fa9d 	bl	8001bf0 <straight_table>
 80076b6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
				pl_motor_stop();
 80076ba:	f7fb f905 	bl	80028c8 <pl_motor_stop>
				wait_ms(300);
 80076be:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80076c2:	f7fc fb0d 	bl	8003ce0 <wait_ms>
				pl_motor_start();
 80076c6:	f7fb f8eb 	bl	80028a0 <pl_motor_start>
				v_ea=turning_table(180, 120,120,input_TurningVelocity,input_TurningAcceleration);
 80076ca:	ed97 2a00 	vldr	s4, [r7]
 80076ce:	edd7 1a02 	vldr	s3, [r7, #8]
 80076d2:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8007790 <AdatiWayReturn+0xac0>
 80076d6:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8007790 <AdatiWayReturn+0xac0>
 80076da:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8007780 <AdatiWayReturn+0xab0>
 80076de:	f7fa fb81 	bl	8001de4 <turning_table>
 80076e2:	ed87 0a08 	vstr	s0, [r7, #32]
				pl_motor_stop();
 80076e6:	f7fb f8ef 	bl	80028c8 <pl_motor_stop>
				wait_ms(300);
 80076ea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80076ee:	f7fc faf7 	bl	8003ce0 <wait_ms>
				pl_motor_start();
 80076f2:	f7fb f8d5 	bl	80028a0 <pl_motor_start>
				v_e=straight_table(-90, -v_e,-100,-200,input_StraightAcceleration, mode);
 80076f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80076fa:	eef1 7a67 	vneg.f32	s15, s15
 80076fe:	6978      	ldr	r0, [r7, #20]
 8007700:	ed97 2a01 	vldr	s4, [r7, #4]
 8007704:	eddf 1a1f 	vldr	s3, [pc, #124]	; 8007784 <AdatiWayReturn+0xab4>
 8007708:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8007788 <AdatiWayReturn+0xab8>
 800770c:	eef0 0a67 	vmov.f32	s1, s15
 8007710:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007774 <AdatiWayReturn+0xaa4>
 8007714:	f7fa fa6c 	bl	8001bf0 <straight_table>
 8007718:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
				pl_motor_stop();
 800771c:	f7fb f8d4 	bl	80028c8 <pl_motor_stop>
				wait_ms(600);
 8007720:	f44f 7016 	mov.w	r0, #600	; 0x258
 8007724:	f7fc fadc 	bl	8003ce0 <wait_ms>
				mode.WallControlMode=1;
 8007728:	2301      	movs	r3, #1
 800772a:	753b      	strb	r3, [r7, #20]
				pl_motor_start();
 800772c:	f7fb f8b8 	bl	80028a0 <pl_motor_start>
				v_e=straight_table(90+BACK_TO_CENTER, 120,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 8007730:	6978      	ldr	r0, [r7, #20]
 8007732:	ed97 2a01 	vldr	s4, [r7, #4]
 8007736:	edd7 1a03 	vldr	s3, [r7, #12]
 800773a:	ed97 1a03 	vldr	s2, [r7, #12]
 800773e:	eddf 0a14 	vldr	s1, [pc, #80]	; 8007790 <AdatiWayReturn+0xac0>
 8007742:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8007794 <AdatiWayReturn+0xac4>
 8007746:	f7fa fa53 	bl	8001bf0 <straight_table>
 800774a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
				direction = direction + 2;
 800774e:	4b08      	ldr	r3, [pc, #32]	; (8007770 <AdatiWayReturn+0xaa0>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	3302      	adds	r3, #2
 8007754:	4a06      	ldr	r2, [pc, #24]	; (8007770 <AdatiWayReturn+0xaa0>)
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	e084      	b.n	8007864 <AdatiWayReturn+0xb94>
 800775a:	bf00      	nop
 800775c:	20000f7c 	.word	0x20000f7c
 8007760:	20000f7d 	.word	0x20000f7d
 8007764:	20000f7e 	.word	0x20000f7e
 8007768:	43200000 	.word	0x43200000
 800776c:	20000a50 	.word	0x20000a50
 8007770:	20000f78 	.word	0x20000f78
 8007774:	c2b40000 	.word	0xc2b40000
 8007778:	42c80000 	.word	0x42c80000
 800777c:	428c0000 	.word	0x428c0000
 8007780:	43340000 	.word	0x43340000
 8007784:	c3480000 	.word	0xc3480000
 8007788:	c2c80000 	.word	0xc2c80000
 800778c:	c1f40000 	.word	0xc1f40000
 8007790:	42f00000 	.word	0x42f00000
 8007794:	42f10000 	.word	0x42f10000
			}else{
				mode.WallControlMode=0;
 8007798:	2300      	movs	r3, #0
 800779a:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800779c:	2300      	movs	r3, #0
 800779e:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 80077a0:	2300      	movs	r3, #0
 80077a2:	75fb      	strb	r3, [r7, #23]
				pl_motor_start();
 80077a4:	f7fb f87c 	bl	80028a0 <pl_motor_start>
				v_e=straight_table(90-MAZE_OFFSET, v_e,100,input_StraightVelocity,input_StraightAcceleration, mode);
 80077a8:	6978      	ldr	r0, [r7, #20]
 80077aa:	ed97 2a01 	vldr	s4, [r7, #4]
 80077ae:	edd7 1a03 	vldr	s3, [r7, #12]
 80077b2:	ed1f 1a0f 	vldr	s2, [pc, #-60]	; 8007778 <AdatiWayReturn+0xaa8>
 80077b6:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80077ba:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 800777c <AdatiWayReturn+0xaac>
 80077be:	f7fa fa17 	bl	8001bf0 <straight_table>
 80077c2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
				pl_motor_stop();
 80077c6:	f7fb f87f 	bl	80028c8 <pl_motor_stop>
				wait_ms(300);
 80077ca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80077ce:	f7fc fa87 	bl	8003ce0 <wait_ms>
				pl_motor_start();
 80077d2:	f7fb f865 	bl	80028a0 <pl_motor_start>
				v_ea=turning_table(180, 120,120,input_TurningVelocity,input_TurningAcceleration);
 80077d6:	ed97 2a00 	vldr	s4, [r7]
 80077da:	edd7 1a02 	vldr	s3, [r7, #8]
 80077de:	ed1f 1a14 	vldr	s2, [pc, #-80]	; 8007790 <AdatiWayReturn+0xac0>
 80077e2:	ed5f 0a15 	vldr	s1, [pc, #-84]	; 8007790 <AdatiWayReturn+0xac0>
 80077e6:	ed1f 0a1a 	vldr	s0, [pc, #-104]	; 8007780 <AdatiWayReturn+0xab0>
 80077ea:	f7fa fafb 	bl	8001de4 <turning_table>
 80077ee:	ed87 0a08 	vstr	s0, [r7, #32]
				pl_motor_stop();
 80077f2:	f7fb f869 	bl	80028c8 <pl_motor_stop>
				wait_ms(300);
 80077f6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80077fa:	f7fc fa71 	bl	8003ce0 <wait_ms>
				pl_motor_start();
 80077fe:	f7fb f84f 	bl	80028a0 <pl_motor_start>
				v_e=straight_table(-BACK_TO_CENTER, -v_e,-100,-200,input_StraightAcceleration, mode);
 8007802:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007806:	eef1 7a67 	vneg.f32	s15, s15
 800780a:	6978      	ldr	r0, [r7, #20]
 800780c:	ed97 2a01 	vldr	s4, [r7, #4]
 8007810:	ed5f 1a24 	vldr	s3, [pc, #-144]	; 8007784 <AdatiWayReturn+0xab4>
 8007814:	ed1f 1a24 	vldr	s2, [pc, #-144]	; 8007788 <AdatiWayReturn+0xab8>
 8007818:	eef0 0a67 	vmov.f32	s1, s15
 800781c:	ed1f 0a25 	vldr	s0, [pc, #-148]	; 800778c <AdatiWayReturn+0xabc>
 8007820:	f7fa f9e6 	bl	8001bf0 <straight_table>
 8007824:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
				pl_motor_stop();
 8007828:	f7fb f84e 	bl	80028c8 <pl_motor_stop>
				wait_ms(600);
 800782c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8007830:	f7fc fa56 	bl	8003ce0 <wait_ms>
				mode.WallControlMode=1;
 8007834:	2301      	movs	r3, #1
 8007836:	753b      	strb	r3, [r7, #20]
				pl_motor_start();
 8007838:	f7fb f832 	bl	80028a0 <pl_motor_start>
				v_e=straight_table(90+BACK_TO_CENTER, 120,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800783c:	6978      	ldr	r0, [r7, #20]
 800783e:	ed97 2a01 	vldr	s4, [r7, #4]
 8007842:	edd7 1a03 	vldr	s3, [r7, #12]
 8007846:	ed97 1a03 	vldr	s2, [r7, #12]
 800784a:	ed5f 0a2f 	vldr	s1, [pc, #-188]	; 8007790 <AdatiWayReturn+0xac0>
 800784e:	ed1f 0a2f 	vldr	s0, [pc, #-188]	; 8007794 <AdatiWayReturn+0xac4>
 8007852:	f7fa f9cd 	bl	8001bf0 <straight_table>
 8007856:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
				direction = direction + 2;
 800785a:	4b1b      	ldr	r3, [pc, #108]	; (80078c8 <AdatiWayReturn+0xbf8>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3302      	adds	r3, #2
 8007860:	4a19      	ldr	r2, [pc, #100]	; (80078c8 <AdatiWayReturn+0xbf8>)
 8007862:	6013      	str	r3, [r2, #0]
			}

		}


		if (direction == 5) {
 8007864:	4b18      	ldr	r3, [pc, #96]	; (80078c8 <AdatiWayReturn+0xbf8>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b05      	cmp	r3, #5
 800786a:	d102      	bne.n	8007872 <AdatiWayReturn+0xba2>
			direction = 1;
 800786c:	4b16      	ldr	r3, [pc, #88]	; (80078c8 <AdatiWayReturn+0xbf8>)
 800786e:	2201      	movs	r2, #1
 8007870:	601a      	str	r2, [r3, #0]
		}
		if (direction == 6) {
 8007872:	4b15      	ldr	r3, [pc, #84]	; (80078c8 <AdatiWayReturn+0xbf8>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b06      	cmp	r3, #6
 8007878:	d102      	bne.n	8007880 <AdatiWayReturn+0xbb0>
			direction = 2;
 800787a:	4b13      	ldr	r3, [pc, #76]	; (80078c8 <AdatiWayReturn+0xbf8>)
 800787c:	2202      	movs	r2, #2
 800787e:	601a      	str	r2, [r3, #0]
		}
		if (direction == 0) {
 8007880:	4b11      	ldr	r3, [pc, #68]	; (80078c8 <AdatiWayReturn+0xbf8>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d102      	bne.n	800788e <AdatiWayReturn+0xbbe>
			direction = 4;
 8007888:	4b0f      	ldr	r3, [pc, #60]	; (80078c8 <AdatiWayReturn+0xbf8>)
 800788a:	2204      	movs	r2, #4
 800788c:	601a      	str	r2, [r3, #0]
		}
		if (direction == -1) {
 800788e:	4b0e      	ldr	r3, [pc, #56]	; (80078c8 <AdatiWayReturn+0xbf8>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007896:	f47f ada0 	bne.w	80073da <AdatiWayReturn+0x70a>
			direction = 3;
 800789a:	4b0b      	ldr	r3, [pc, #44]	; (80078c8 <AdatiWayReturn+0xbf8>)
 800789c:	2203      	movs	r2, #3
 800789e:	601a      	str	r2, [r3, #0]
		update_coordinate();
 80078a0:	e59b      	b.n	80073da <AdatiWayReturn+0x70a>
			break;
 80078a2:	bf00      	nop
 80078a4:	e000      	b.n	80078a8 <AdatiWayReturn+0xbd8>
			break;
 80078a6:	bf00      	nop
//			}
//			while (green_switch == 0) {
//			}

	}
	pl_motor_stop();
 80078a8:	f7fb f80e 	bl	80028c8 <pl_motor_stop>
	wait_ms(500);
 80078ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80078b0:	f7fc fa16 	bl	8003ce0 <wait_ms>
	pl_motor_standby(0);
 80078b4:	2000      	movs	r0, #0
 80078b6:	f7fa ff89 	bl	80027cc <pl_motor_standby>
	maze_display();
 80078ba:	f002 fc7f 	bl	800a1bc <maze_display>


}
 80078be:	bf00      	nop
 80078c0:	3728      	adds	r7, #40	; 0x28
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	20000f78 	.word	0x20000f78

080078cc <update_coordinate>:

void update_coordinate(void){
 80078cc:	b480      	push	{r7}
 80078ce:	af00      	add	r7, sp, #0
// int direction,int *x_coordinate,int *y_coordinate
	switch (direction) {
 80078d0:	4b16      	ldr	r3, [pc, #88]	; (800792c <update_coordinate+0x60>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	3b01      	subs	r3, #1
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	d822      	bhi.n	8007920 <update_coordinate+0x54>
 80078da:	a201      	add	r2, pc, #4	; (adr r2, 80078e0 <update_coordinate+0x14>)
 80078dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e0:	080078f1 	.word	0x080078f1
 80078e4:	080078fd 	.word	0x080078fd
 80078e8:	08007909 	.word	0x08007909
 80078ec:	08007915 	.word	0x08007915
	case 1://北
		y = y + 1;
 80078f0:	4b0f      	ldr	r3, [pc, #60]	; (8007930 <update_coordinate+0x64>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3301      	adds	r3, #1
 80078f6:	4a0e      	ldr	r2, [pc, #56]	; (8007930 <update_coordinate+0x64>)
 80078f8:	6013      	str	r3, [r2, #0]
		break;
 80078fa:	e011      	b.n	8007920 <update_coordinate+0x54>
	case 2://東
		x = x + 1;
 80078fc:	4b0d      	ldr	r3, [pc, #52]	; (8007934 <update_coordinate+0x68>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3301      	adds	r3, #1
 8007902:	4a0c      	ldr	r2, [pc, #48]	; (8007934 <update_coordinate+0x68>)
 8007904:	6013      	str	r3, [r2, #0]
		break;
 8007906:	e00b      	b.n	8007920 <update_coordinate+0x54>
	case 3://南
		y = y - 1;
 8007908:	4b09      	ldr	r3, [pc, #36]	; (8007930 <update_coordinate+0x64>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	3b01      	subs	r3, #1
 800790e:	4a08      	ldr	r2, [pc, #32]	; (8007930 <update_coordinate+0x64>)
 8007910:	6013      	str	r3, [r2, #0]
		break;
 8007912:	e005      	b.n	8007920 <update_coordinate+0x54>
	case 4://西
		x = x - 1;
 8007914:	4b07      	ldr	r3, [pc, #28]	; (8007934 <update_coordinate+0x68>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	3b01      	subs	r3, #1
 800791a:	4a06      	ldr	r2, [pc, #24]	; (8007934 <update_coordinate+0x68>)
 800791c:	6013      	str	r3, [r2, #0]
		break;
 800791e:	bf00      	nop
	}

}
 8007920:	bf00      	nop
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	20000f78 	.word	0x20000f78
 8007930:	20000f74 	.word	0x20000f74
 8007934:	20000f70 	.word	0x20000f70

08007938 <ShortestWay>:



void ShortestWay(float input_StraightVelocity, float input_StraightAcceleration,parameter_speed input_turn,char slant_mode){
 8007938:	b084      	sub	sp, #16
 800793a:	b590      	push	{r4, r7, lr}
 800793c:	f2ad 4d44 	subw	sp, sp, #1092	; 0x444
 8007940:	af04      	add	r7, sp, #16
 8007942:	f507 6486 	add.w	r4, r7, #1072	; 0x430
 8007946:	f2a4 442c 	subw	r4, r4, #1068	; 0x42c
 800794a:	ed84 0a00 	vstr	s0, [r4]
 800794e:	f507 6486 	add.w	r4, r7, #1072	; 0x430
 8007952:	f5a4 6486 	sub.w	r4, r4, #1072	; 0x430
 8007956:	edc4 0a00 	vstr	s1, [r4]
 800795a:	f507 6488 	add.w	r4, r7, #1088	; 0x440
 800795e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int pass[255];
	unsigned char slant_count;
	int slant_direction;
	_Bool north_wall,east_wall,south_wall,west_wall;
	unsigned short front_count, right_count, back_count, left_count;
	unsigned short pass_count = 0;
 8007962:	2300      	movs	r3, #0
 8007964:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
	int t=0;
 8007968:	2300      	movs	r3, #0
 800796a:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	x = 0;
 800796e:	4bb6      	ldr	r3, [pc, #728]	; (8007c48 <ShortestWay+0x310>)
 8007970:	2200      	movs	r2, #0
 8007972:	601a      	str	r2, [r3, #0]
	y = 0;
 8007974:	4bb5      	ldr	r3, [pc, #724]	; (8007c4c <ShortestWay+0x314>)
 8007976:	2200      	movs	r2, #0
 8007978:	601a      	str	r2, [r3, #0]
	direction = 1;
 800797a:	4bb5      	ldr	r3, [pc, #724]	; (8007c50 <ShortestWay+0x318>)
 800797c:	2201      	movs	r2, #1
 800797e:	601a      	str	r2, [r3, #0]
	slant_direction = -2;
 8007980:	f06f 0301 	mvn.w	r3, #1
 8007984:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428

	//highspeed_mode = 1;
	while (t <= 255) {
 8007988:	e00d      	b.n	80079a6 <ShortestWay+0x6e>
		pass[t] = 0;
 800798a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800798e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007992:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8007996:	2100      	movs	r1, #0
 8007998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		t++;
 800799c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80079a0:	3301      	adds	r3, #1
 80079a2:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (t <= 255) {
 80079a6:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80079aa:	2bff      	cmp	r3, #255	; 0xff
 80079ac:	dded      	ble.n	800798a <ShortestWay+0x52>
	}
	t = 0;
 80079ae:	2300      	movs	r3, #0
 80079b0:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (t <= 14) {
 80079b4:	e01d      	b.n	80079f2 <ShortestWay+0xba>
		record.row[t] = wall.row[t];
 80079b6:	4aa7      	ldr	r2, [pc, #668]	; (8007c54 <ShortestWay+0x31c>)
 80079b8:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80079bc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80079c0:	4aa5      	ldr	r2, [pc, #660]	; (8007c58 <ShortestWay+0x320>)
 80079c2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80079c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[t] = wall.column[t];
 80079ca:	4aa2      	ldr	r2, [pc, #648]	; (8007c54 <ShortestWay+0x31c>)
 80079cc:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80079d0:	330c      	adds	r3, #12
 80079d2:	005b      	lsls	r3, r3, #1
 80079d4:	4413      	add	r3, r2
 80079d6:	88d9      	ldrh	r1, [r3, #6]
 80079d8:	4a9f      	ldr	r2, [pc, #636]	; (8007c58 <ShortestWay+0x320>)
 80079da:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80079de:	330c      	adds	r3, #12
 80079e0:	005b      	lsls	r3, r3, #1
 80079e2:	4413      	add	r3, r2
 80079e4:	460a      	mov	r2, r1
 80079e6:	80da      	strh	r2, [r3, #6]
		t++;
 80079e8:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80079ec:	3301      	adds	r3, #1
 80079ee:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (t <= 14) {
 80079f2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80079f6:	2b0e      	cmp	r3, #14
 80079f8:	dddd      	ble.n	80079b6 <ShortestWay+0x7e>
	}
	t = 0;
 80079fa:	2300      	movs	r3, #0
 80079fc:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (t <= 14) {
 8007a00:	e022      	b.n	8007a48 <ShortestWay+0x110>
		record.row_look[t] = wall.row_look[t];
 8007a02:	4a94      	ldr	r2, [pc, #592]	; (8007c54 <ShortestWay+0x31c>)
 8007a04:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007a08:	331c      	adds	r3, #28
 8007a0a:	005b      	lsls	r3, r3, #1
 8007a0c:	4413      	add	r3, r2
 8007a0e:	8899      	ldrh	r1, [r3, #4]
 8007a10:	4a91      	ldr	r2, [pc, #580]	; (8007c58 <ShortestWay+0x320>)
 8007a12:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007a16:	331c      	adds	r3, #28
 8007a18:	005b      	lsls	r3, r3, #1
 8007a1a:	4413      	add	r3, r2
 8007a1c:	460a      	mov	r2, r1
 8007a1e:	809a      	strh	r2, [r3, #4]
		record.column_look[t] = wall.column_look[t];
 8007a20:	4a8c      	ldr	r2, [pc, #560]	; (8007c54 <ShortestWay+0x31c>)
 8007a22:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007a26:	332c      	adds	r3, #44	; 0x2c
 8007a28:	005b      	lsls	r3, r3, #1
 8007a2a:	4413      	add	r3, r2
 8007a2c:	8859      	ldrh	r1, [r3, #2]
 8007a2e:	4a8a      	ldr	r2, [pc, #552]	; (8007c58 <ShortestWay+0x320>)
 8007a30:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007a34:	332c      	adds	r3, #44	; 0x2c
 8007a36:	005b      	lsls	r3, r3, #1
 8007a38:	4413      	add	r3, r2
 8007a3a:	460a      	mov	r2, r1
 8007a3c:	805a      	strh	r2, [r3, #2]
		t++;
 8007a3e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007a42:	3301      	adds	r3, #1
 8007a44:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (t <= 14) {
 8007a48:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007a4c:	2b0e      	cmp	r3, #14
 8007a4e:	ddd8      	ble.n	8007a02 <ShortestWay+0xca>
	}
	t = 0;
 8007a50:	2300      	movs	r3, #0
 8007a52:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (t <= 14) {
 8007a56:	e039      	b.n	8007acc <ShortestWay+0x194>
		wall.row[t] = wall.row[t] | ~wall.row_look[t];
 8007a58:	4a7e      	ldr	r2, [pc, #504]	; (8007c54 <ShortestWay+0x31c>)
 8007a5a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007a5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a62:	b21a      	sxth	r2, r3
 8007a64:	497b      	ldr	r1, [pc, #492]	; (8007c54 <ShortestWay+0x31c>)
 8007a66:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007a6a:	331c      	adds	r3, #28
 8007a6c:	005b      	lsls	r3, r3, #1
 8007a6e:	440b      	add	r3, r1
 8007a70:	889b      	ldrh	r3, [r3, #4]
 8007a72:	b21b      	sxth	r3, r3
 8007a74:	43db      	mvns	r3, r3
 8007a76:	b21b      	sxth	r3, r3
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	b21b      	sxth	r3, r3
 8007a7c:	b299      	uxth	r1, r3
 8007a7e:	4a75      	ldr	r2, [pc, #468]	; (8007c54 <ShortestWay+0x31c>)
 8007a80:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007a84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = wall.column[t] | ~wall.column_look[t];
 8007a88:	4a72      	ldr	r2, [pc, #456]	; (8007c54 <ShortestWay+0x31c>)
 8007a8a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007a8e:	330c      	adds	r3, #12
 8007a90:	005b      	lsls	r3, r3, #1
 8007a92:	4413      	add	r3, r2
 8007a94:	88db      	ldrh	r3, [r3, #6]
 8007a96:	b21a      	sxth	r2, r3
 8007a98:	496e      	ldr	r1, [pc, #440]	; (8007c54 <ShortestWay+0x31c>)
 8007a9a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007a9e:	332c      	adds	r3, #44	; 0x2c
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	440b      	add	r3, r1
 8007aa4:	885b      	ldrh	r3, [r3, #2]
 8007aa6:	b21b      	sxth	r3, r3
 8007aa8:	43db      	mvns	r3, r3
 8007aaa:	b21b      	sxth	r3, r3
 8007aac:	4313      	orrs	r3, r2
 8007aae:	b21b      	sxth	r3, r3
 8007ab0:	b299      	uxth	r1, r3
 8007ab2:	4a68      	ldr	r2, [pc, #416]	; (8007c54 <ShortestWay+0x31c>)
 8007ab4:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007ab8:	330c      	adds	r3, #12
 8007aba:	005b      	lsls	r3, r3, #1
 8007abc:	4413      	add	r3, r2
 8007abe:	460a      	mov	r2, r1
 8007ac0:	80da      	strh	r2, [r3, #6]
		t++;
 8007ac2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (t <= 14) {
 8007acc:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007ad0:	2b0e      	cmp	r3, #14
 8007ad2:	ddc1      	ble.n	8007a58 <ShortestWay+0x120>
	}

	pass_count = 0;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
//	maze_makerhosuu(direction, x, y);
//	maze_makerST(stmass);//あとで修正
	maze_maker0(0,1);
 8007ada:	2101      	movs	r1, #1
 8007adc:	2000      	movs	r0, #0
 8007ade:	f001 fef9 	bl	80098d4 <maze_maker0>
	maze_display();
 8007ae2:	f002 fb6b 	bl	800a1bc <maze_display>

	pass[0] = 1;
 8007ae6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007aea:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007aee:	2201      	movs	r2, #1
 8007af0:	601a      	str	r2, [r3, #0]
	while (1) {
//		if (mode_safty == 1) {
//
//			break;
//		}
		update_coordinate();
 8007af2:	f7ff feeb 	bl	80078cc <update_coordinate>
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count);
 8007af6:	f107 0310 	add.w	r3, r7, #16
 8007afa:	f107 0212 	add.w	r2, r7, #18
 8007afe:	f107 0114 	add.w	r1, r7, #20
 8007b02:	f107 0016 	add.w	r0, r7, #22
 8007b06:	f001 fe43 	bl	8009790 <search_AroundWalkCount>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 8007b0a:	4b4f      	ldr	r3, [pc, #316]	; (8007c48 <ShortestWay+0x310>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	d003      	beq.n	8007b1a <ShortestWay+0x1e2>
 8007b12:	4b4d      	ldr	r3, [pc, #308]	; (8007c48 <ShortestWay+0x310>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b04      	cmp	r3, #4
 8007b18:	d109      	bne.n	8007b2e <ShortestWay+0x1f6>
 8007b1a:	4b4c      	ldr	r3, [pc, #304]	; (8007c4c <ShortestWay+0x314>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	f000 81bd 	beq.w	8007e9e <ShortestWay+0x566>
 8007b24:	4b49      	ldr	r3, [pc, #292]	; (8007c4c <ShortestWay+0x314>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b04      	cmp	r3, #4
 8007b2a:	f000 81b8 	beq.w	8007e9e <ShortestWay+0x566>
//			pass[pass_count] = pass[pass_count] + 1;

			break;
		}

		if (y <= 14) {
 8007b2e:	4b47      	ldr	r3, [pc, #284]	; (8007c4c <ShortestWay+0x314>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b0e      	cmp	r3, #14
 8007b34:	dc14      	bgt.n	8007b60 <ShortestWay+0x228>
			north_wall = wall.column[y] & (1 << x);
 8007b36:	4b45      	ldr	r3, [pc, #276]	; (8007c4c <ShortestWay+0x314>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a46      	ldr	r2, [pc, #280]	; (8007c54 <ShortestWay+0x31c>)
 8007b3c:	330c      	adds	r3, #12
 8007b3e:	005b      	lsls	r3, r3, #1
 8007b40:	4413      	add	r3, r2
 8007b42:	88db      	ldrh	r3, [r3, #6]
 8007b44:	4619      	mov	r1, r3
 8007b46:	4b40      	ldr	r3, [pc, #256]	; (8007c48 <ShortestWay+0x310>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b50:	400b      	ands	r3, r1
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	bf14      	ite	ne
 8007b56:	2301      	movne	r3, #1
 8007b58:	2300      	moveq	r3, #0
 8007b5a:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
 8007b5e:	e002      	b.n	8007b66 <ShortestWay+0x22e>
		} else {
			north_wall = 1;
 8007b60:	2301      	movs	r3, #1
 8007b62:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
		}

		if (y >= 1) {
 8007b66:	4b39      	ldr	r3, [pc, #228]	; (8007c4c <ShortestWay+0x314>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	dd15      	ble.n	8007b9a <ShortestWay+0x262>
			south_wall = wall.column[y - 1] & (1 << x);
 8007b6e:	4b37      	ldr	r3, [pc, #220]	; (8007c4c <ShortestWay+0x314>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	3b01      	subs	r3, #1
 8007b74:	4a37      	ldr	r2, [pc, #220]	; (8007c54 <ShortestWay+0x31c>)
 8007b76:	330c      	adds	r3, #12
 8007b78:	005b      	lsls	r3, r3, #1
 8007b7a:	4413      	add	r3, r2
 8007b7c:	88db      	ldrh	r3, [r3, #6]
 8007b7e:	4619      	mov	r1, r3
 8007b80:	4b31      	ldr	r3, [pc, #196]	; (8007c48 <ShortestWay+0x310>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2201      	movs	r2, #1
 8007b86:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8a:	400b      	ands	r3, r1
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	bf14      	ite	ne
 8007b90:	2301      	movne	r3, #1
 8007b92:	2300      	moveq	r3, #0
 8007b94:	f887 3425 	strb.w	r3, [r7, #1061]	; 0x425
 8007b98:	e002      	b.n	8007ba0 <ShortestWay+0x268>
		} else {
			south_wall = 1;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	f887 3425 	strb.w	r3, [r7, #1061]	; 0x425
		}

		if (x <= 14) {
 8007ba0:	4b29      	ldr	r3, [pc, #164]	; (8007c48 <ShortestWay+0x310>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b0e      	cmp	r3, #14
 8007ba6:	dc12      	bgt.n	8007bce <ShortestWay+0x296>
			east_wall = wall.row[x] & (1 << y);
 8007ba8:	4b27      	ldr	r3, [pc, #156]	; (8007c48 <ShortestWay+0x310>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a29      	ldr	r2, [pc, #164]	; (8007c54 <ShortestWay+0x31c>)
 8007bae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	4b25      	ldr	r3, [pc, #148]	; (8007c4c <ShortestWay+0x314>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	fa02 f303 	lsl.w	r3, r2, r3
 8007bbe:	400b      	ands	r3, r1
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	bf14      	ite	ne
 8007bc4:	2301      	movne	r3, #1
 8007bc6:	2300      	moveq	r3, #0
 8007bc8:	f887 3426 	strb.w	r3, [r7, #1062]	; 0x426
 8007bcc:	e002      	b.n	8007bd4 <ShortestWay+0x29c>
		} else {
			east_wall = 1;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	f887 3426 	strb.w	r3, [r7, #1062]	; 0x426
		}

		if (x >= 1) {
 8007bd4:	4b1c      	ldr	r3, [pc, #112]	; (8007c48 <ShortestWay+0x310>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	dd13      	ble.n	8007c04 <ShortestWay+0x2cc>
			west_wall = wall.row[x - 1] & (1 << y);
 8007bdc:	4b1a      	ldr	r3, [pc, #104]	; (8007c48 <ShortestWay+0x310>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	3b01      	subs	r3, #1
 8007be2:	4a1c      	ldr	r2, [pc, #112]	; (8007c54 <ShortestWay+0x31c>)
 8007be4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007be8:	4619      	mov	r1, r3
 8007bea:	4b18      	ldr	r3, [pc, #96]	; (8007c4c <ShortestWay+0x314>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf4:	400b      	ands	r3, r1
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	bf14      	ite	ne
 8007bfa:	2301      	movne	r3, #1
 8007bfc:	2300      	moveq	r3, #0
 8007bfe:	f887 3424 	strb.w	r3, [r7, #1060]	; 0x424
 8007c02:	e002      	b.n	8007c0a <ShortestWay+0x2d2>
		} else {
			west_wall = 1;
 8007c04:	2301      	movs	r3, #1
 8007c06:	f887 3424 	strb.w	r3, [r7, #1060]	; 0x424
		}

		switch (direction) {
 8007c0a:	4b11      	ldr	r3, [pc, #68]	; (8007c50 <ShortestWay+0x318>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	2b03      	cmp	r3, #3
 8007c12:	d850      	bhi.n	8007cb6 <ShortestWay+0x37e>
 8007c14:	a201      	add	r2, pc, #4	; (adr r2, 8007c1c <ShortestWay+0x2e4>)
 8007c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1a:	bf00      	nop
 8007c1c:	08007c2d 	.word	0x08007c2d
 8007c20:	08007c69 	.word	0x08007c69
 8007c24:	08007c83 	.word	0x08007c83
 8007c28:	08007c9d 	.word	0x08007c9d
		case 1:
			front_wall = north_wall;
 8007c2c:	4a0b      	ldr	r2, [pc, #44]	; (8007c5c <ShortestWay+0x324>)
 8007c2e:	f897 3427 	ldrb.w	r3, [r7, #1063]	; 0x427
 8007c32:	7013      	strb	r3, [r2, #0]
			left_wall = west_wall;
 8007c34:	4a0a      	ldr	r2, [pc, #40]	; (8007c60 <ShortestWay+0x328>)
 8007c36:	f897 3424 	ldrb.w	r3, [r7, #1060]	; 0x424
 8007c3a:	7013      	strb	r3, [r2, #0]
			right_wall = east_wall;
 8007c3c:	4a09      	ldr	r2, [pc, #36]	; (8007c64 <ShortestWay+0x32c>)
 8007c3e:	f897 3426 	ldrb.w	r3, [r7, #1062]	; 0x426
 8007c42:	7013      	strb	r3, [r2, #0]
			break;
 8007c44:	e037      	b.n	8007cb6 <ShortestWay+0x37e>
 8007c46:	bf00      	nop
 8007c48:	20000f70 	.word	0x20000f70
 8007c4c:	20000f74 	.word	0x20000f74
 8007c50:	20000f78 	.word	0x20000f78
 8007c54:	20000f80 	.word	0x20000f80
 8007c58:	20000ff8 	.word	0x20000ff8
 8007c5c:	20000f7c 	.word	0x20000f7c
 8007c60:	20000f7e 	.word	0x20000f7e
 8007c64:	20000f7d 	.word	0x20000f7d
		case 2:
			front_wall = east_wall;
 8007c68:	4a88      	ldr	r2, [pc, #544]	; (8007e8c <ShortestWay+0x554>)
 8007c6a:	f897 3426 	ldrb.w	r3, [r7, #1062]	; 0x426
 8007c6e:	7013      	strb	r3, [r2, #0]
			left_wall = north_wall;
 8007c70:	4a87      	ldr	r2, [pc, #540]	; (8007e90 <ShortestWay+0x558>)
 8007c72:	f897 3427 	ldrb.w	r3, [r7, #1063]	; 0x427
 8007c76:	7013      	strb	r3, [r2, #0]
			right_wall = south_wall;
 8007c78:	4a86      	ldr	r2, [pc, #536]	; (8007e94 <ShortestWay+0x55c>)
 8007c7a:	f897 3425 	ldrb.w	r3, [r7, #1061]	; 0x425
 8007c7e:	7013      	strb	r3, [r2, #0]
			break;
 8007c80:	e019      	b.n	8007cb6 <ShortestWay+0x37e>
		case 3:
			front_wall = south_wall;
 8007c82:	4a82      	ldr	r2, [pc, #520]	; (8007e8c <ShortestWay+0x554>)
 8007c84:	f897 3425 	ldrb.w	r3, [r7, #1061]	; 0x425
 8007c88:	7013      	strb	r3, [r2, #0]
			left_wall = east_wall;
 8007c8a:	4a81      	ldr	r2, [pc, #516]	; (8007e90 <ShortestWay+0x558>)
 8007c8c:	f897 3426 	ldrb.w	r3, [r7, #1062]	; 0x426
 8007c90:	7013      	strb	r3, [r2, #0]
			right_wall = west_wall;
 8007c92:	4a80      	ldr	r2, [pc, #512]	; (8007e94 <ShortestWay+0x55c>)
 8007c94:	f897 3424 	ldrb.w	r3, [r7, #1060]	; 0x424
 8007c98:	7013      	strb	r3, [r2, #0]

			break;
 8007c9a:	e00c      	b.n	8007cb6 <ShortestWay+0x37e>
		case 4:
			front_wall = west_wall;
 8007c9c:	4a7b      	ldr	r2, [pc, #492]	; (8007e8c <ShortestWay+0x554>)
 8007c9e:	f897 3424 	ldrb.w	r3, [r7, #1060]	; 0x424
 8007ca2:	7013      	strb	r3, [r2, #0]
			left_wall = south_wall;
 8007ca4:	4a7a      	ldr	r2, [pc, #488]	; (8007e90 <ShortestWay+0x558>)
 8007ca6:	f897 3425 	ldrb.w	r3, [r7, #1061]	; 0x425
 8007caa:	7013      	strb	r3, [r2, #0]
			right_wall = north_wall;
 8007cac:	4a79      	ldr	r2, [pc, #484]	; (8007e94 <ShortestWay+0x55c>)
 8007cae:	f897 3427 	ldrb.w	r3, [r7, #1063]	; 0x427
 8007cb2:	7013      	strb	r3, [r2, #0]
			break;
 8007cb4:	bf00      	nop

		}
		if (front_wall) {
 8007cb6:	4b75      	ldr	r3, [pc, #468]	; (8007e8c <ShortestWay+0x554>)
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d005      	beq.n	8007cca <ShortestWay+0x392>
			front_count = MAX_WALKCOUNT;
 8007cbe:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007cc2:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 8007cc6:	22ff      	movs	r2, #255	; 0xff
 8007cc8:	801a      	strh	r2, [r3, #0]
		}
		if (right_wall) {
 8007cca:	4b72      	ldr	r3, [pc, #456]	; (8007e94 <ShortestWay+0x55c>)
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d005      	beq.n	8007cde <ShortestWay+0x3a6>
			right_count = MAX_WALKCOUNT;
 8007cd2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007cd6:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8007cda:	22ff      	movs	r2, #255	; 0xff
 8007cdc:	801a      	strh	r2, [r3, #0]
		}
		if (left_wall) {
 8007cde:	4b6c      	ldr	r3, [pc, #432]	; (8007e90 <ShortestWay+0x558>)
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d005      	beq.n	8007cf2 <ShortestWay+0x3ba>
			left_count = MAX_WALKCOUNT;
 8007ce6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007cea:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8007cee:	22ff      	movs	r2, #255	; 0xff
 8007cf0:	801a      	strh	r2, [r3, #0]
		}

		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 8007cf2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007cf6:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	2bff      	cmp	r3, #255	; 0xff
 8007cfe:	d115      	bne.n	8007d2c <ShortestWay+0x3f4>
 8007d00:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007d04:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8007d08:	881b      	ldrh	r3, [r3, #0]
 8007d0a:	2bff      	cmp	r3, #255	; 0xff
 8007d0c:	d10e      	bne.n	8007d2c <ShortestWay+0x3f4>
 8007d0e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007d12:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8007d16:	881b      	ldrh	r3, [r3, #0]
 8007d18:	2bff      	cmp	r3, #255	; 0xff
 8007d1a:	d107      	bne.n	8007d2c <ShortestWay+0x3f4>
 8007d1c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007d20:	f2a3 431e 	subw	r3, r3, #1054	; 0x41e
 8007d24:	881b      	ldrh	r3, [r3, #0]
 8007d26:	2bff      	cmp	r3, #255	; 0xff
 8007d28:	f000 80b8 	beq.w	8007e9c <ShortestWay+0x564>
			break;
		}

		if (front_count <= right_count && front_count <= left_count){
 8007d2c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007d30:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 8007d34:	881a      	ldrh	r2, [r3, #0]
 8007d36:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007d3a:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8007d3e:	881b      	ldrh	r3, [r3, #0]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d82b      	bhi.n	8007d9c <ShortestWay+0x464>
 8007d44:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007d48:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 8007d4c:	881a      	ldrh	r2, [r3, #0]
 8007d4e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007d52:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8007d56:	881b      	ldrh	r3, [r3, #0]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d81f      	bhi.n	8007d9c <ShortestWay+0x464>
			//直進
			if (pass[pass_count] >= 0) {
 8007d5c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007d60:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007d64:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	da04      	bge.n	8007d7a <ShortestWay+0x442>
			} else {
				pass_count++;
 8007d70:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8007d74:	3301      	adds	r3, #1
 8007d76:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
			}
			pass[pass_count] = pass[pass_count] + 2;
 8007d7a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007d7e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007d82:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d8a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007d8e:	1c99      	adds	r1, r3, #2
 8007d90:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007d94:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}
		if(right_count < front_count && right_count <= left_count){
 8007d9c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007da0:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8007da4:	881a      	ldrh	r2, [r3, #0]
 8007da6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007daa:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 8007dae:	881b      	ldrh	r3, [r3, #0]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d21f      	bcs.n	8007df4 <ShortestWay+0x4bc>
 8007db4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007db8:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8007dbc:	881a      	ldrh	r2, [r3, #0]
 8007dbe:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007dc2:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8007dc6:	881b      	ldrh	r3, [r3, #0]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d813      	bhi.n	8007df4 <ShortestWay+0x4bc>
			//右旋回
			pass_count++;
 8007dcc:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
			pass[pass_count] = -2;
 8007dd6:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007dda:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007dde:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007de2:	f06f 0101 	mvn.w	r1, #1
 8007de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			direction++;
 8007dea:	4b2b      	ldr	r3, [pc, #172]	; (8007e98 <ShortestWay+0x560>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3301      	adds	r3, #1
 8007df0:	4a29      	ldr	r2, [pc, #164]	; (8007e98 <ShortestWay+0x560>)
 8007df2:	6013      	str	r3, [r2, #0]

		}
		if(left_count < front_count && left_count < right_count){
 8007df4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007df8:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8007dfc:	881a      	ldrh	r2, [r3, #0]
 8007dfe:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007e02:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d21f      	bcs.n	8007e4c <ShortestWay+0x514>
 8007e0c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007e10:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8007e14:	881a      	ldrh	r2, [r3, #0]
 8007e16:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007e1a:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8007e1e:	881b      	ldrh	r3, [r3, #0]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d213      	bcs.n	8007e4c <ShortestWay+0x514>
			//左旋回
			pass_count++;
 8007e24:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8007e28:	3301      	adds	r3, #1
 8007e2a:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
			pass[pass_count] = -3;
 8007e2e:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007e32:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007e36:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007e3a:	f06f 0102 	mvn.w	r1, #2
 8007e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			direction--;
 8007e42:	4b15      	ldr	r3, [pc, #84]	; (8007e98 <ShortestWay+0x560>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	3b01      	subs	r3, #1
 8007e48:	4a13      	ldr	r2, [pc, #76]	; (8007e98 <ShortestWay+0x560>)
 8007e4a:	6013      	str	r3, [r2, #0]
		}

		if (direction == 5) {
 8007e4c:	4b12      	ldr	r3, [pc, #72]	; (8007e98 <ShortestWay+0x560>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b05      	cmp	r3, #5
 8007e52:	d102      	bne.n	8007e5a <ShortestWay+0x522>
			direction = 1;
 8007e54:	4b10      	ldr	r3, [pc, #64]	; (8007e98 <ShortestWay+0x560>)
 8007e56:	2201      	movs	r2, #1
 8007e58:	601a      	str	r2, [r3, #0]
		}
		if (direction == 6) {
 8007e5a:	4b0f      	ldr	r3, [pc, #60]	; (8007e98 <ShortestWay+0x560>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b06      	cmp	r3, #6
 8007e60:	d102      	bne.n	8007e68 <ShortestWay+0x530>
			direction = 2;
 8007e62:	4b0d      	ldr	r3, [pc, #52]	; (8007e98 <ShortestWay+0x560>)
 8007e64:	2202      	movs	r2, #2
 8007e66:	601a      	str	r2, [r3, #0]
		}
		if (direction == 0) {
 8007e68:	4b0b      	ldr	r3, [pc, #44]	; (8007e98 <ShortestWay+0x560>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d102      	bne.n	8007e76 <ShortestWay+0x53e>
			direction = 4;
 8007e70:	4b09      	ldr	r3, [pc, #36]	; (8007e98 <ShortestWay+0x560>)
 8007e72:	2204      	movs	r2, #4
 8007e74:	601a      	str	r2, [r3, #0]
		}
		if (direction == -1) {
 8007e76:	4b08      	ldr	r3, [pc, #32]	; (8007e98 <ShortestWay+0x560>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e7e:	f47f ae38 	bne.w	8007af2 <ShortestWay+0x1ba>
			direction = 3;
 8007e82:	4b05      	ldr	r3, [pc, #20]	; (8007e98 <ShortestWay+0x560>)
 8007e84:	2203      	movs	r2, #3
 8007e86:	601a      	str	r2, [r3, #0]
		update_coordinate();
 8007e88:	e633      	b.n	8007af2 <ShortestWay+0x1ba>
 8007e8a:	bf00      	nop
 8007e8c:	20000f7c 	.word	0x20000f7c
 8007e90:	20000f7e 	.word	0x20000f7e
 8007e94:	20000f7d 	.word	0x20000f7d
 8007e98:	20000f78 	.word	0x20000f78
			break;
 8007e9c:	bf00      	nop
		}

	}
	pass_count = 1;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
	while (1) {		//パス圧縮
//		if (mode_safty == 1) {
//
//			break;
//		}
		if (pass[pass_count] == 0) {
 8007ea4:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007ea8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007eac:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 8198 	beq.w	80081ea <ShortestWay+0x8b2>
			break;
		}

		if (pass[pass_count] == -2 && pass[pass_count - 1] >= 1	//右90度大回りの条件
 8007eba:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007ebe:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007ec2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eca:	f113 0f02 	cmn.w	r3, #2
 8007ece:	d145      	bne.n	8007f5c <ShortestWay+0x624>
 8007ed0:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8007ed4:	1e5a      	subs	r2, r3, #1
 8007ed6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007eda:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	dd3a      	ble.n	8007f5c <ShortestWay+0x624>
		&& pass[pass_count + 1] >= 1) {
 8007ee6:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8007eea:	1c5a      	adds	r2, r3, #1
 8007eec:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007ef0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	dd2f      	ble.n	8007f5c <ShortestWay+0x624>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 8007efc:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8007f00:	1e5a      	subs	r2, r3, #1
 8007f02:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007f06:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f0e:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007f12:	3a01      	subs	r2, #1
 8007f14:	1e59      	subs	r1, r3, #1
 8007f16:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007f1a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 8007f22:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8007f26:	1c5a      	adds	r2, r3, #1
 8007f28:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007f2c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f34:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007f38:	3201      	adds	r2, #1
 8007f3a:	1e59      	subs	r1, r3, #1
 8007f3c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007f40:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pass[pass_count] = -4;		//右90度大回り
 8007f48:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007f4c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007f50:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007f54:	f06f 0103 	mvn.w	r1, #3
 8007f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		}
		if (pass[pass_count] == -3 && pass[pass_count - 1] >= 1	//左90度大回りの条件
 8007f5c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007f60:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007f64:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f6c:	f113 0f03 	cmn.w	r3, #3
 8007f70:	d145      	bne.n	8007ffe <ShortestWay+0x6c6>
 8007f72:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8007f76:	1e5a      	subs	r2, r3, #1
 8007f78:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007f7c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	dd3a      	ble.n	8007ffe <ShortestWay+0x6c6>
		&& pass[pass_count + 1] >= 1) {
 8007f88:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8007f8c:	1c5a      	adds	r2, r3, #1
 8007f8e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007f92:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	dd2f      	ble.n	8007ffe <ShortestWay+0x6c6>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 8007f9e:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8007fa2:	1e5a      	subs	r2, r3, #1
 8007fa4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007fa8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb0:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007fb4:	3a01      	subs	r2, #1
 8007fb6:	1e59      	subs	r1, r3, #1
 8007fb8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007fbc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 8007fc4:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8007fc8:	1c5a      	adds	r2, r3, #1
 8007fca:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007fce:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd6:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007fda:	3201      	adds	r2, #1
 8007fdc:	1e59      	subs	r1, r3, #1
 8007fde:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007fe2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pass[pass_count] = -5;		//左90度大回り
 8007fea:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007fee:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007ff2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007ff6:	f06f 0104 	mvn.w	r1, #4
 8007ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -2
 8007ffe:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008002:	1e5a      	subs	r2, r3, #1
 8008004:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008008:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800800c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008010:	2b00      	cmp	r3, #0
 8008012:	dd5c      	ble.n	80080ce <ShortestWay+0x796>
 8008014:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008018:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800801c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008024:	f113 0f02 	cmn.w	r3, #2
 8008028:	d151      	bne.n	80080ce <ShortestWay+0x796>
				&& pass[pass_count + 1] == -2 && pass[pass_count + 2] >= 1) {//右180度大回りの条件
 800802a:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 800802e:	1c5a      	adds	r2, r3, #1
 8008030:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008034:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800803c:	f113 0f02 	cmn.w	r3, #2
 8008040:	d145      	bne.n	80080ce <ShortestWay+0x796>
 8008042:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008046:	1c9a      	adds	r2, r3, #2
 8008048:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800804c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008054:	2b00      	cmp	r3, #0
 8008056:	dd3a      	ble.n	80080ce <ShortestWay+0x796>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 8008058:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 800805c:	1e5a      	subs	r2, r3, #1
 800805e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008062:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800806a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800806e:	3a01      	subs	r2, #1
 8008070:	1e59      	subs	r1, r3, #1
 8008072:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008076:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800807a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pass[pass_count] = -6;
 800807e:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008082:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008086:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800808a:	f06f 0105 	mvn.w	r1, #5
 800808e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pass[pass_count + 1] = -1;
 8008092:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008096:	1c5a      	adds	r2, r3, #1
 8008098:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800809c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80080a0:	f04f 31ff 	mov.w	r1, #4294967295
 80080a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 80080a8:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80080ac:	1c9a      	adds	r2, r3, #2
 80080ae:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80080b2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80080b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ba:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80080be:	3202      	adds	r2, #2
 80080c0:	1e59      	subs	r1, r3, #1
 80080c2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80080c6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80080ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -3
 80080ce:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80080d2:	1e5a      	subs	r2, r3, #1
 80080d4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80080d8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80080dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	dd5c      	ble.n	800819e <ShortestWay+0x866>
 80080e4:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80080e8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80080ec:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80080f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080f4:	f113 0f03 	cmn.w	r3, #3
 80080f8:	d151      	bne.n	800819e <ShortestWay+0x866>
				&& pass[pass_count + 1] == -3 && pass[pass_count + 2] >= 1) {//左180度大回りの条件
 80080fa:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80080fe:	1c5a      	adds	r2, r3, #1
 8008100:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008104:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800810c:	f113 0f03 	cmn.w	r3, #3
 8008110:	d145      	bne.n	800819e <ShortestWay+0x866>
 8008112:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008116:	1c9a      	adds	r2, r3, #2
 8008118:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800811c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008124:	2b00      	cmp	r3, #0
 8008126:	dd3a      	ble.n	800819e <ShortestWay+0x866>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 8008128:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 800812c:	1e5a      	subs	r2, r3, #1
 800812e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008132:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800813e:	3a01      	subs	r2, #1
 8008140:	1e59      	subs	r1, r3, #1
 8008142:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008146:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800814a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pass[pass_count] = -7;
 800814e:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008152:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008156:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800815a:	f06f 0106 	mvn.w	r1, #6
 800815e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pass[pass_count + 1] = -1;
 8008162:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008166:	1c5a      	adds	r2, r3, #1
 8008168:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800816c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008170:	f04f 31ff 	mov.w	r1, #4294967295
 8008174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 8008178:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 800817c:	1c9a      	adds	r2, r3, #2
 800817e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008182:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800818a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800818e:	3202      	adds	r2, #2
 8008190:	1e59      	subs	r1, r3, #1
 8008192:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008196:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800819a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}
		if (pass[pass_count] == -2 && pass[pass_count - 1] == -3	//左90度大回りの条件
 800819e:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80081a2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80081a6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80081aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ae:	f113 0f02 	cmn.w	r3, #2

				) {
		}
		if (pass[pass_count - 1] == 0) {
 80081b2:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80081b6:	1e5a      	subs	r2, r3, #1
 80081b8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80081bc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80081c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10a      	bne.n	80081de <ShortestWay+0x8a6>
			pass[pass_count - 1] = -1;		//passが0になってしまったときの対策
 80081c8:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80081cc:	1e5a      	subs	r2, r3, #1
 80081ce:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80081d2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80081d6:	f04f 31ff 	mov.w	r1, #4294967295
 80081da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}

		pass_count++;
 80081de:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80081e2:	3301      	adds	r3, #1
 80081e4:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		if (pass[pass_count] == 0) {
 80081e8:	e65c      	b.n	8007ea4 <ShortestWay+0x56c>
			break;
 80081ea:	bf00      	nop
	}

	pass_count = 1;
 80081ec:	2301      	movs	r3, #1
 80081ee:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
	if (slant_mode == 1) {
 80081f2:	f897 3588 	ldrb.w	r3, [r7, #1416]	; 0x588
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	f040 8417 	bne.w	8008a2a <ShortestWay+0x10f2>
		while (1) {		//斜め入出の圧縮
			if (pass[pass_count] == 0) {
 80081fc:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008200:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008204:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 827f 	beq.w	8008710 <ShortestWay+0xdd8>
				break;
			}

			if (pass[pass_count - 1] >= 1) {
 8008212:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008216:	1e5a      	subs	r2, r3, #1
 8008218:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800821c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008224:	2b00      	cmp	r3, #0
 8008226:	f340 826d 	ble.w	8008704 <ShortestWay+0xdcc>
				if (pass[pass_count] == -2 || pass[pass_count] == -3) {
 800822a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800822e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008232:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800823a:	f113 0f02 	cmn.w	r3, #2
 800823e:	d00b      	beq.n	8008258 <ShortestWay+0x920>
 8008240:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008244:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008248:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800824c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008250:	f113 0f03 	cmn.w	r3, #3
 8008254:	f040 8256 	bne.w	8008704 <ShortestWay+0xdcc>
//***************************************************************************************入りのモーションstart
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -3) {
 8008258:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800825c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008260:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008268:	f113 0f02 	cmn.w	r3, #2
 800826c:	d13e      	bne.n	80082ec <ShortestWay+0x9b4>
 800826e:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008272:	1c5a      	adds	r2, r3, #1
 8008274:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008278:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800827c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008280:	f113 0f03 	cmn.w	r3, #3
 8008284:	d132      	bne.n	80082ec <ShortestWay+0x9b4>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 8008286:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 800828a:	1e5a      	subs	r2, r3, #1
 800828c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008290:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008298:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800829c:	3a01      	subs	r2, #1
 800829e:	1e59      	subs	r1, r3, #1
 80082a0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80082a4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80082a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						if (pass[pass_count - 1] == 0) {
 80082ac:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80082b0:	1e5a      	subs	r2, r3, #1
 80082b2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80082b6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80082ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10a      	bne.n	80082d8 <ShortestWay+0x9a0>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 80082c2:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80082c6:	1e5a      	subs	r2, r3, #1
 80082c8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80082cc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80082d0:	f04f 31ff 	mov.w	r1, #4294967295
 80082d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						}
						pass[pass_count] = -8;		//右45
 80082d8:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80082dc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80082e0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80082e4:	f06f 0107 	mvn.w	r1, #7
 80082e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -2) {
 80082ec:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80082f0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80082f4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80082f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082fc:	f113 0f03 	cmn.w	r3, #3
 8008300:	d13e      	bne.n	8008380 <ShortestWay+0xa48>
 8008302:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008306:	1c5a      	adds	r2, r3, #1
 8008308:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800830c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008314:	f113 0f02 	cmn.w	r3, #2
 8008318:	d132      	bne.n	8008380 <ShortestWay+0xa48>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800831a:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 800831e:	1e5a      	subs	r2, r3, #1
 8008320:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008324:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800832c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008330:	3a01      	subs	r2, #1
 8008332:	1e59      	subs	r1, r3, #1
 8008334:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008338:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800833c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						if (pass[pass_count - 1] == 0) {
 8008340:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008344:	1e5a      	subs	r2, r3, #1
 8008346:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800834a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800834e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10a      	bne.n	800836c <ShortestWay+0xa34>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 8008356:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 800835a:	1e5a      	subs	r2, r3, #1
 800835c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008360:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008364:	f04f 31ff 	mov.w	r1, #4294967295
 8008368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						}
						pass[pass_count] = -9;		//左45
 800836c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008370:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008374:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008378:	f06f 0108 	mvn.w	r1, #8
 800837c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					}
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -2) {
 8008380:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008384:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008388:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800838c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008390:	f113 0f02 	cmn.w	r3, #2
 8008394:	d149      	bne.n	800842a <ShortestWay+0xaf2>
 8008396:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 800839a:	1c5a      	adds	r2, r3, #1
 800839c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80083a0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80083a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a8:	f113 0f02 	cmn.w	r3, #2
 80083ac:	d13d      	bne.n	800842a <ShortestWay+0xaf2>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 80083ae:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80083b2:	1e5a      	subs	r2, r3, #1
 80083b4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80083b8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80083bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c0:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80083c4:	3a01      	subs	r2, #1
 80083c6:	1e59      	subs	r1, r3, #1
 80083c8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80083cc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80083d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						if (pass[pass_count - 1] == 0) {
 80083d4:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80083d8:	1e5a      	subs	r2, r3, #1
 80083da:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80083de:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80083e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10a      	bne.n	8008400 <ShortestWay+0xac8>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 80083ea:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80083ee:	1e5a      	subs	r2, r3, #1
 80083f0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80083f4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80083f8:	f04f 31ff 	mov.w	r1, #4294967295
 80083fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						}
						pass[pass_count] = -10;		//右135
 8008400:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008404:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008408:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800840c:	f06f 0109 	mvn.w	r1, #9
 8008410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						pass[pass_count + 1] = -1;
 8008414:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008418:	1c5a      	adds	r2, r3, #1
 800841a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800841e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008422:	f04f 31ff 	mov.w	r1, #4294967295
 8008426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -3) {
 800842a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800842e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008432:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800843a:	f113 0f03 	cmn.w	r3, #3
 800843e:	d14f      	bne.n	80084e0 <ShortestWay+0xba8>
 8008440:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008444:	1c5a      	adds	r2, r3, #1
 8008446:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800844a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800844e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008452:	f113 0f03 	cmn.w	r3, #3
 8008456:	d143      	bne.n	80084e0 <ShortestWay+0xba8>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 8008458:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 800845c:	1e5a      	subs	r2, r3, #1
 800845e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008462:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800846a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800846e:	3a01      	subs	r2, #1
 8008470:	1e59      	subs	r1, r3, #1
 8008472:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008476:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800847a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800847e:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008482:	1e5a      	subs	r2, r3, #1
 8008484:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008488:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800848c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10a      	bne.n	80084aa <ShortestWay+0xb72>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 8008494:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008498:	1e5a      	subs	r2, r3, #1
 800849a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800849e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80084a2:	f04f 31ff 	mov.w	r1, #4294967295
 80084a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						}
						pass[pass_count] = -11;		//左135
 80084aa:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80084ae:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80084b2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80084b6:	f06f 010a 	mvn.w	r1, #10
 80084ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						pass[pass_count + 1] = -1;
 80084be:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80084c2:	1c5a      	adds	r2, r3, #1
 80084c4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80084c8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80084cc:	f04f 31ff 	mov.w	r1, #4294967295
 80084d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					}
//***************************************************************************************入りのモーションend

//***************************************************************************************途中のモーションstart
					while (pass[pass_count] <= -1) {
 80084d4:	e004      	b.n	80084e0 <ShortestWay+0xba8>
						pass_count++;
 80084d6:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80084da:	3301      	adds	r3, #1
 80084dc:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
					while (pass[pass_count] <= -1) {
 80084e0:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80084e4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80084e8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80084ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	dbf0      	blt.n	80084d6 <ShortestWay+0xb9e>
					}
//***************************************************************************************途中のモーションend

//***************************************************************************************出のモーションstart
					if (pass[pass_count - 1] == -2) {
 80084f4:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80084f8:	1e5a      	subs	r2, r3, #1
 80084fa:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80084fe:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008506:	f113 0f02 	cmn.w	r3, #2
 800850a:	d177      	bne.n	80085fc <ShortestWay+0xcc4>
						if (pass[pass_count - 2] == -2) {
 800850c:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008510:	1e9a      	subs	r2, r3, #2
 8008512:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008516:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800851a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800851e:	f113 0f02 	cmn.w	r3, #2
 8008522:	d13b      	bne.n	800859c <ShortestWay+0xc64>
							pass[pass_count] = pass[pass_count] - 1;
 8008524:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008528:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800852c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008534:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008538:	1e59      	subs	r1, r3, #1
 800853a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800853e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							if (pass[pass_count] == 0) {
 8008546:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800854a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800854e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d109      	bne.n	800856e <ShortestWay+0xc36>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800855a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800855e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008562:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008566:	f04f 31ff 	mov.w	r1, #4294967295
 800856a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							}
							pass[pass_count - 1] = -14;		//右135
 800856e:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008572:	1e5a      	subs	r2, r3, #1
 8008574:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008578:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800857c:	f06f 010d 	mvn.w	r1, #13
 8008580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							pass[pass_count - 2] = -1;
 8008584:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008588:	1e9a      	subs	r2, r3, #2
 800858a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800858e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008592:	f04f 31ff 	mov.w	r1, #4294967295
 8008596:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800859a:	e02f      	b.n	80085fc <ShortestWay+0xcc4>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800859c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80085a0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80085a4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80085a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ac:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80085b0:	1e59      	subs	r1, r3, #1
 80085b2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80085b6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80085ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							if (pass[pass_count] == 0) {
 80085be:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80085c2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80085c6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80085ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d109      	bne.n	80085e6 <ShortestWay+0xcae>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 80085d2:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80085d6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80085da:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80085de:	f04f 31ff 	mov.w	r1, #4294967295
 80085e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							}
							pass[pass_count - 1] = -12;		//右45
 80085e6:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80085ea:	1e5a      	subs	r2, r3, #1
 80085ec:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80085f0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80085f4:	f06f 010b 	mvn.w	r1, #11
 80085f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						}

					}
					if (pass[pass_count - 1] == -3) {
 80085fc:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008600:	1e5a      	subs	r2, r3, #1
 8008602:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008606:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800860a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800860e:	f113 0f03 	cmn.w	r3, #3
 8008612:	d177      	bne.n	8008704 <ShortestWay+0xdcc>
						if (pass[pass_count - 2] == -3) {
 8008614:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008618:	1e9a      	subs	r2, r3, #2
 800861a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800861e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008626:	f113 0f03 	cmn.w	r3, #3
 800862a:	d13b      	bne.n	80086a4 <ShortestWay+0xd6c>
							pass[pass_count] = pass[pass_count] - 1;
 800862c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008630:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008634:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800863c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008640:	1e59      	subs	r1, r3, #1
 8008642:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008646:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800864a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							if (pass[pass_count] == 0) {
 800864e:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008652:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008656:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800865a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d109      	bne.n	8008676 <ShortestWay+0xd3e>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 8008662:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008666:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800866a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800866e:	f04f 31ff 	mov.w	r1, #4294967295
 8008672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							}
							pass[pass_count - 1] = -15;		//左135
 8008676:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 800867a:	1e5a      	subs	r2, r3, #1
 800867c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008680:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008684:	f06f 010e 	mvn.w	r1, #14
 8008688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							pass[pass_count - 2] = -1;
 800868c:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008690:	1e9a      	subs	r2, r3, #2
 8008692:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008696:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800869a:	f04f 31ff 	mov.w	r1, #4294967295
 800869e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80086a2:	e02f      	b.n	8008704 <ShortestWay+0xdcc>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 80086a4:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80086a8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80086ac:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80086b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b4:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80086b8:	1e59      	subs	r1, r3, #1
 80086ba:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80086be:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80086c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							if (pass[pass_count] == 0) {
 80086c6:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80086ca:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80086ce:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80086d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d109      	bne.n	80086ee <ShortestWay+0xdb6>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 80086da:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80086de:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80086e2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80086e6:	f04f 31ff 	mov.w	r1, #4294967295
 80086ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							}
							pass[pass_count - 1] = -13;		//左45
 80086ee:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80086f2:	1e5a      	subs	r2, r3, #1
 80086f4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80086f8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80086fc:	f06f 010c 	mvn.w	r1, #12
 8008700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					}
//***************************************************************************************出のモーションend
				}
			}

			pass_count++;
 8008704:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008708:	3301      	adds	r3, #1
 800870a:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
			if (pass[pass_count] == 0) {
 800870e:	e575      	b.n	80081fc <ShortestWay+0x8c4>
				break;
 8008710:	bf00      	nop
		}

		pass_count = 1;
 8008712:	2301      	movs	r3, #1
 8008714:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		while (1) {		//斜の圧縮
			if (pass[pass_count] == 0) {
 8008718:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800871c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008720:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 817d 	beq.w	8008a28 <ShortestWay+0x10f0>
				break;
			}

			if (pass[pass_count] == -8 || pass[pass_count] == -9
 800872e:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008732:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008736:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800873a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800873e:	f113 0f08 	cmn.w	r3, #8
 8008742:	d021      	beq.n	8008788 <ShortestWay+0xe50>
 8008744:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008748:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800874c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008754:	f113 0f09 	cmn.w	r3, #9
 8008758:	d016      	beq.n	8008788 <ShortestWay+0xe50>
					|| pass[pass_count] == -10 || pass[pass_count] == -11) {
 800875a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800875e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008762:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800876a:	f113 0f0a 	cmn.w	r3, #10
 800876e:	d00b      	beq.n	8008788 <ShortestWay+0xe50>
 8008770:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008774:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008778:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800877c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008780:	f113 0f0b 	cmn.w	r3, #11
 8008784:	f040 814a 	bne.w	8008a1c <ShortestWay+0x10e4>
				if (pass[pass_count] == -8 || pass[pass_count] == -10) {
 8008788:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800878c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008790:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008798:	f113 0f08 	cmn.w	r3, #8
 800879c:	d00a      	beq.n	80087b4 <ShortestWay+0xe7c>
 800879e:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80087a2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80087a6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80087aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ae:	f113 0f0a 	cmn.w	r3, #10
 80087b2:	d103      	bne.n	80087bc <ShortestWay+0xe84>
					slant_direction = -3;
 80087b4:	f06f 0302 	mvn.w	r3, #2
 80087b8:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
				}
				if (pass[pass_count] == -9 || pass[pass_count] == -11) {
 80087bc:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80087c0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80087c4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80087c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087cc:	f113 0f09 	cmn.w	r3, #9
 80087d0:	d00a      	beq.n	80087e8 <ShortestWay+0xeb0>
 80087d2:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80087d6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80087da:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80087de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e2:	f113 0f0b 	cmn.w	r3, #11
 80087e6:	d103      	bne.n	80087f0 <ShortestWay+0xeb8>
					slant_direction = -2;
 80087e8:	f06f 0301 	mvn.w	r3, #1
 80087ec:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
				}
				pass_count++;
 80087f0:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80087f4:	3301      	adds	r3, #1
 80087f6:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 80087fa:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80087fe:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008802:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800880a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880e:	d104      	bne.n	800881a <ShortestWay+0xee2>
					pass_count++;
 8008810:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008814:	3301      	adds	r3, #1
 8008816:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
				}
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800881a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800881e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008822:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800882a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882e:	d104      	bne.n	800883a <ShortestWay+0xf02>
					pass_count++;
 8008830:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008834:	3301      	adds	r3, #1
 8008836:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
				}
				if (pass[pass_count] >= -3) {
 800883a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800883e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008842:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800884a:	f113 0f03 	cmn.w	r3, #3
 800884e:	f2c0 80d9 	blt.w	8008a04 <ShortestWay+0x10cc>
					slant_count = pass_count;
 8008852:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008856:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
					pass[slant_count] = 51;
 800885a:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 800885e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008862:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008866:	2133      	movs	r1, #51	; 0x33
 8008868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					pass_count++;
 800886c:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008870:	3301      	adds	r3, #1
 8008872:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
				}

				//***************************************************************************************途中のモーションstart
				while (pass[pass_count] >= -3) {
 8008876:	e0c5      	b.n	8008a04 <ShortestWay+0x10cc>
					if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 8008878:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800887c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008880:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800888c:	d104      	bne.n	8008898 <ShortestWay+0xf60>
						pass_count++;
 800888e:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008892:	3301      	adds	r3, #1
 8008894:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
					}
					if (pass[pass_count] == -12 || pass[pass_count] == -13
 8008898:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800889c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80088a0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80088a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a8:	f113 0f0c 	cmn.w	r3, #12
 80088ac:	f000 80b6 	beq.w	8008a1c <ShortestWay+0x10e4>
 80088b0:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80088b4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80088b8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80088bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c0:	f113 0f0d 	cmn.w	r3, #13
 80088c4:	f000 80aa 	beq.w	8008a1c <ShortestWay+0x10e4>
							|| pass[pass_count] == -14
 80088c8:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80088cc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80088d0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80088d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d8:	f113 0f0e 	cmn.w	r3, #14
 80088dc:	f000 809e 	beq.w	8008a1c <ShortestWay+0x10e4>
							|| pass[pass_count] == -15) {
 80088e0:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80088e4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80088e8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80088ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f0:	f113 0f0f 	cmn.w	r3, #15
 80088f4:	f000 8092 	beq.w	8008a1c <ShortestWay+0x10e4>
						break;
					}
					if (pass[pass_count] == slant_direction) {
 80088f8:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80088fc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008900:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008908:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 800890c:	429a      	cmp	r2, r3
 800890e:	d133      	bne.n	8008978 <ShortestWay+0x1040>
						pass[slant_count] = pass[slant_count] - 1;
 8008910:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 8008914:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008918:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800891c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008920:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 8008924:	1e59      	subs	r1, r3, #1
 8008926:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800892a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800892e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						slant_count = pass_count;
 8008932:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008936:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
						if (slant_direction == -2) {
 800893a:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800893e:	f113 0f02 	cmn.w	r3, #2
 8008942:	d109      	bne.n	8008958 <ShortestWay+0x1020>
							pass[pass_count] = -16;
 8008944:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008948:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800894c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008950:	f06f 010f 	mvn.w	r1, #15
 8008954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						}
						if (slant_direction == -3) {
 8008958:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800895c:	f113 0f03 	cmn.w	r3, #3
 8008960:	d14b      	bne.n	80089fa <ShortestWay+0x10c2>
							pass[pass_count] = -17;
 8008962:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008966:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800896a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800896e:	f06f 0110 	mvn.w	r1, #16
 8008972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008976:	e040      	b.n	80089fa <ShortestWay+0x10c2>
						}

					} else {
						if (pass[slant_count] >= 50) {
 8008978:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 800897c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008980:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008988:	2b31      	cmp	r3, #49	; 0x31
 800898a:	dd0a      	ble.n	80089a2 <ShortestWay+0x106a>
							pass[pass_count] = -1;
 800898c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008990:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008994:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008998:	f04f 31ff 	mov.w	r1, #4294967295
 800899c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80089a0:	e00c      	b.n	80089bc <ShortestWay+0x1084>
						} else {
							slant_count = pass_count;
 80089a2:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80089a6:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
							pass[slant_count] = 50;
 80089aa:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 80089ae:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80089b2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80089b6:	2132      	movs	r1, #50	; 0x32
 80089b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						}
						pass[slant_count] = pass[slant_count] + 1;
 80089bc:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 80089c0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80089c4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80089c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089cc:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 80089d0:	1c59      	adds	r1, r3, #1
 80089d2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80089d6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80089da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						if (slant_direction == -2) {
 80089de:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 80089e2:	f113 0f02 	cmn.w	r3, #2
 80089e6:	d104      	bne.n	80089f2 <ShortestWay+0x10ba>
							slant_direction = -3;
 80089e8:	f06f 0302 	mvn.w	r3, #2
 80089ec:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 80089f0:	e003      	b.n	80089fa <ShortestWay+0x10c2>
						} else {
							slant_direction = -2;
 80089f2:	f06f 0301 	mvn.w	r3, #1
 80089f6:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
						}

					}

					pass_count++;
 80089fa:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80089fe:	3301      	adds	r3, #1
 8008a00:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
				while (pass[pass_count] >= -3) {
 8008a04:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008a08:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008a0c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a14:	f113 0f03 	cmn.w	r3, #3
 8008a18:	f6bf af2e 	bge.w	8008878 <ShortestWay+0xf40>

			}

			//		if(){}

			pass_count++;
 8008a1c:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008a20:	3301      	adds	r3, #1
 8008a22:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
			if (pass[pass_count] == 0) {
 8008a26:	e677      	b.n	8008718 <ShortestWay+0xde0>
				break;
 8008a28:	bf00      	nop
		}
	}
	t = 0;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (pass[t] != 0) {
 8008a30:	e012      	b.n	8008a58 <ShortestWay+0x1120>
		printf("pass_count %d pass %d\n", t, pass[t]);
 8008a32:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008a36:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008a3a:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8008a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a42:	461a      	mov	r2, r3
 8008a44:	f8d7 141c 	ldr.w	r1, [r7, #1052]	; 0x41c
 8008a48:	482d      	ldr	r0, [pc, #180]	; (8008b00 <ShortestWay+0x11c8>)
 8008a4a:	f009 fd77 	bl	801253c <iprintf>
		t++;
 8008a4e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8008a52:	3301      	adds	r3, #1
 8008a54:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (pass[t] != 0) {
 8008a58:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008a5c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008a60:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8008a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1e2      	bne.n	8008a32 <ShortestWay+0x10fa>
	}
wait_ms(1000);
 8008a6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008a70:	f7fb f936 	bl	8003ce0 <wait_ms>
// 最短走行の実行
	MOTOR_MODE mode;
	float v_start,v_end;
	mode.WallControlMode=1;
 8008a74:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008a78:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	701a      	strb	r2, [r3, #0]
	mode.WallControlStatus=0;
 8008a80:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008a84:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8008a88:	2200      	movs	r2, #0
 8008a8a:	705a      	strb	r2, [r3, #1]
	mode.WallCutMode=0;
 8008a8c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008a90:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8008a94:	2200      	movs	r2, #0
 8008a96:	70da      	strb	r2, [r3, #3]
	mode.calMazeMode=0;
 8008a98:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008a9c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	709a      	strb	r2, [r3, #2]
	pl_motor_standby(1);
 8008aa4:	2001      	movs	r0, #1
 8008aa6:	f7f9 fe91 	bl	80027cc <pl_motor_standby>
	HAL_Delay(500);
 8008aaa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008aae:	f003 fdc3 	bl	800c638 <HAL_Delay>
	pl_motor_start();
 8008ab2:	f7f9 fef5 	bl	80028a0 <pl_motor_start>

//	maze_mode = 1;
//	highspeed_mode = 1;
//	Avespeed = 1400;
//	wall_control = 0;
	pass_count = 0;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
//	} else {
//		v_e=straight_table(BACK_TO_CENTER, 120,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
//		//straight_table(39.5, 0, howspeed.turn90_R.g_speed,howspeed.turn90_R.g_speed,howspeed.turn90_R.g_speed * howspeed.turn90_R.g_speed / 39.5);
//	}
	//v_start=straight_table(BACK_TO_CENTER, 200,input_turn.TurnCentervelocity,input_turn.TurnCentervelocity,(input_turn.TurnCentervelocity * input_turn.TurnCentervelocity-200*200)/ 2 / BACK_TO_CENTER, mode);
	v_start=straight_table(BACK_TO_CENTER, 100,input_turn.TurnCentervelocity,input_turn.TurnCentervelocity,input_StraightAcceleration, mode);
 8008abc:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8008ac0:	edd3 7a00 	vldr	s15, [r3]
 8008ac4:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8008ac8:	ed93 7a00 	vldr	s14, [r3]
 8008acc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008ad0:	f2a3 4224 	subw	r2, r3, #1060	; 0x424
 8008ad4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008ad8:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8008adc:	6810      	ldr	r0, [r2, #0]
 8008ade:	ed93 2a00 	vldr	s4, [r3]
 8008ae2:	eef0 1a47 	vmov.f32	s3, s14
 8008ae6:	eeb0 1a67 	vmov.f32	s2, s15
 8008aea:	eddf 0a06 	vldr	s1, [pc, #24]	; 8008b04 <ShortestWay+0x11cc>
 8008aee:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8008b08 <ShortestWay+0x11d0>
 8008af2:	f7f9 f87d 	bl	8001bf0 <straight_table>
 8008af6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8008afa:	ed83 0a00 	vstr	s0, [r3]

	while (pass_count <= 255) {
 8008afe:	e2a3      	b.n	8009048 <ShortestWay+0x1710>
 8008b00:	08014dc4 	.word	0x08014dc4
 8008b04:	42c80000 	.word	0x42c80000
 8008b08:	41f40000 	.word	0x41f40000

		if (pass[pass_count] == -1) {
 8008b0c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008b10:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008b14:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b20:	d104      	bne.n	8008b2c <ShortestWay+0x11f4>
			pass_count++;
 8008b22:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008b26:	3301      	adds	r3, #1
 8008b28:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -2) {
 8008b2c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008b30:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008b34:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b3c:	f113 0f02 	cmn.w	r3, #2
 8008b40:	d110      	bne.n	8008b64 <ShortestWay+0x122c>
			slalomR(input_turn.slalom_R, OFF,SHORTEST);
 8008b42:	2301      	movs	r3, #1
 8008b44:	9302      	str	r3, [sp, #8]
 8008b46:	2300      	movs	r3, #0
 8008b48:	9301      	str	r3, [sp, #4]
 8008b4a:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8008b54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b56:	f7fb fc79 	bl	800444c <slalomR>
			pass_count++;
 8008b5a:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008b5e:	3301      	adds	r3, #1
 8008b60:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -3) {
 8008b64:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008b68:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008b6c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b74:	f113 0f03 	cmn.w	r3, #3
 8008b78:	d110      	bne.n	8008b9c <ShortestWay+0x1264>
			slalomL(input_turn.slalom_L, OFF,SHORTEST);
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	9302      	str	r3, [sp, #8]
 8008b7e:	2300      	movs	r3, #0
 8008b80:	9301      	str	r3, [sp, #4]
 8008b82:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8008b86:	9300      	str	r3, [sp, #0]
 8008b88:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8008b8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b8e:	f7fb fd91 	bl	80046b4 <slalomL>
			pass_count++;
 8008b92:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008b96:	3301      	adds	r3, #1
 8008b98:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -4) {
 8008b9c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008ba0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008ba4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bac:	f113 0f04 	cmn.w	r3, #4
 8008bb0:	d10e      	bne.n	8008bd0 <ShortestWay+0x1298>
			turn90R(input_turn.turn90_R, OFF);
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	9301      	str	r3, [sp, #4]
 8008bb6:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8008bba:	9300      	str	r3, [sp, #0]
 8008bbc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8008bc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008bc2:	f7fb feb1 	bl	8004928 <turn90R>
			pass_count++;
 8008bc6:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008bca:	3301      	adds	r3, #1
 8008bcc:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -5) {
 8008bd0:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008bd4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008bd8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be0:	f113 0f05 	cmn.w	r3, #5
 8008be4:	d10e      	bne.n	8008c04 <ShortestWay+0x12cc>
			turn90L(input_turn.turn90_L, OFF);
 8008be6:	2300      	movs	r3, #0
 8008be8:	9301      	str	r3, [sp, #4]
 8008bea:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8008bf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008bf6:	f7fb ffa1 	bl	8004b3c <turn90L>
			pass_count++;
 8008bfa:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008bfe:	3301      	adds	r3, #1
 8008c00:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -6) {
 8008c04:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008c08:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008c0c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c14:	f113 0f06 	cmn.w	r3, #6
 8008c18:	d10e      	bne.n	8008c38 <ShortestWay+0x1300>
			turn180R(input_turn.turn180_R, OFF);
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	9301      	str	r3, [sp, #4]
 8008c1e:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8008c28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c2a:	f7fc f897 	bl	8004d5c <turn180R>
			pass_count++;
 8008c2e:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008c32:	3301      	adds	r3, #1
 8008c34:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -7) {
 8008c38:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008c3c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008c40:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c48:	f113 0f07 	cmn.w	r3, #7
 8008c4c:	d10e      	bne.n	8008c6c <ShortestWay+0x1334>
			turn180L(input_turn.turn180_L, OFF);
 8008c4e:	2300      	movs	r3, #0
 8008c50:	9301      	str	r3, [sp, #4]
 8008c52:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8008c5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c5e:	f7fc f987 	bl	8004f70 <turn180L>
			pass_count++;
 8008c62:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008c66:	3301      	adds	r3, #1
 8008c68:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -8) { //入り45R
 8008c6c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008c70:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008c74:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c7c:	f113 0f08 	cmn.w	r3, #8
 8008c80:	d10e      	bne.n	8008ca0 <ShortestWay+0x1368>
			turn45inR(input_turn.turn45in_R, OFF);
 8008c82:	2300      	movs	r3, #0
 8008c84:	9301      	str	r3, [sp, #4]
 8008c86:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8008c90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c92:	f7fc fa7d 	bl	8005190 <turn45inR>
			pass_count++;
 8008c96:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -9) { //入り45L
 8008ca0:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008ca4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008ca8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb0:	f113 0f09 	cmn.w	r3, #9
 8008cb4:	d10e      	bne.n	8008cd4 <ShortestWay+0x139c>
			turn45inL(input_turn.turn45in_L, OFF);
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	9301      	str	r3, [sp, #4]
 8008cba:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	f207 43d4 	addw	r3, r7, #1236	; 0x4d4
 8008cc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008cc6:	f7fc fc07 	bl	80054d8 <turn45inL>
			pass_count++;
 8008cca:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008cce:	3301      	adds	r3, #1
 8008cd0:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -10) { //入り135R
 8008cd4:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008cd8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008cdc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce4:	f113 0f0a 	cmn.w	r3, #10
 8008ce8:	d10e      	bne.n	8008d08 <ShortestWay+0x13d0>
			turn135inR(input_turn.turn135in_R, OFF);
 8008cea:	2300      	movs	r3, #0
 8008cec:	9301      	str	r3, [sp, #4]
 8008cee:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 8008cf2:	9300      	str	r3, [sp, #0]
 8008cf4:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8008cf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008cfa:	f7fc fd95 	bl	8005828 <turn135inR>
			pass_count++;
 8008cfe:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008d02:	3301      	adds	r3, #1
 8008d04:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -11) { //入り135L
 8008d08:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008d0c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008d10:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d18:	f113 0f0b 	cmn.w	r3, #11
 8008d1c:	d10e      	bne.n	8008d3c <ShortestWay+0x1404>
			turn135inL(input_turn.turn135in_L, OFF);
 8008d1e:	2300      	movs	r3, #0
 8008d20:	9301      	str	r3, [sp, #4]
 8008d22:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8008d26:	9300      	str	r3, [sp, #0]
 8008d28:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 8008d2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d2e:	f7fc ff1b 	bl	8005b68 <turn135inL>
			pass_count++;
 8008d32:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008d36:	3301      	adds	r3, #1
 8008d38:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -12) { //出り45R
 8008d3c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008d40:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008d44:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d4c:	f113 0f0c 	cmn.w	r3, #12
 8008d50:	d10e      	bne.n	8008d70 <ShortestWay+0x1438>
			turn45outR(input_turn.turn45out_R, OFF);
 8008d52:	2300      	movs	r3, #0
 8008d54:	9301      	str	r3, [sp, #4]
 8008d56:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8008d5a:	9300      	str	r3, [sp, #0]
 8008d5c:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8008d60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d62:	f7fd f8a9 	bl	8005eb8 <turn45outR>
			pass_count++;
 8008d66:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -13) { //出り45L
 8008d70:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008d74:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008d78:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d80:	f113 0f0d 	cmn.w	r3, #13
 8008d84:	d10e      	bne.n	8008da4 <ShortestWay+0x146c>
			turn45outL(input_turn.turn45out_L, OFF);
 8008d86:	2300      	movs	r3, #0
 8008d88:	9301      	str	r3, [sp, #4]
 8008d8a:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8008d8e:	9300      	str	r3, [sp, #0]
 8008d90:	f207 5324 	addw	r3, r7, #1316	; 0x524
 8008d94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d96:	f7fd f987 	bl	80060a8 <turn45outL>
			pass_count++;
 8008d9a:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008d9e:	3301      	adds	r3, #1
 8008da0:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -14) { //出り135R
 8008da4:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008da8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008dac:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008db4:	f113 0f0e 	cmn.w	r3, #14
 8008db8:	d10e      	bne.n	8008dd8 <ShortestWay+0x14a0>
			turn135outR(input_turn.turn135out_R, OFF);
 8008dba:	2300      	movs	r3, #0
 8008dbc:	9301      	str	r3, [sp, #4]
 8008dbe:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 8008dc2:	9300      	str	r3, [sp, #0]
 8008dc4:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8008dc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008dca:	f7fd fa69 	bl	80062a0 <turn135outR>
			pass_count++;
 8008dce:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -15) { //出り135L
 8008dd8:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008ddc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008de0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008de8:	f113 0f0f 	cmn.w	r3, #15
 8008dec:	d10e      	bne.n	8008e0c <ShortestWay+0x14d4>
			turn135outL(input_turn.turn135out_L, OFF);
 8008dee:	2300      	movs	r3, #0
 8008df0:	9301      	str	r3, [sp, #4]
 8008df2:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8008df6:	9300      	str	r3, [sp, #0]
 8008df8:	f207 534c 	addw	r3, r7, #1356	; 0x54c
 8008dfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008dfe:	f7fd fb47 	bl	8006490 <turn135outL>
			pass_count++;
 8008e02:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008e06:	3301      	adds	r3, #1
 8008e08:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -16) { //V90R
 8008e0c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008e10:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008e14:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e1c:	f113 0f10 	cmn.w	r3, #16
 8008e20:	d10e      	bne.n	8008e40 <ShortestWay+0x1508>
			V90R(input_turn.V90_R, OFF);
 8008e22:	2300      	movs	r3, #0
 8008e24:	9301      	str	r3, [sp, #4]
 8008e26:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8008e2a:	9300      	str	r3, [sp, #0]
 8008e2c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8008e30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008e32:	f7fd fc29 	bl	8006688 <V90R>
			pass_count++;
 8008e36:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -17) { //V90L
 8008e40:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008e44:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008e48:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e50:	f113 0f11 	cmn.w	r3, #17
 8008e54:	d10e      	bne.n	8008e74 <ShortestWay+0x153c>
			V90L(input_turn.V90_L, OFF);
 8008e56:	2300      	movs	r3, #0
 8008e58:	9301      	str	r3, [sp, #4]
 8008e5a:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	f207 5374 	addw	r3, r7, #1396	; 0x574
 8008e64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008e66:	f7fd fd07 	bl	8006878 <V90L>
			pass_count++;
 8008e6a:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008e6e:	3301      	adds	r3, #1
 8008e70:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] >= 1) {
 8008e74:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008e78:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008e7c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f340 80cd 	ble.w	8009024 <ShortestWay+0x16ec>
			v_end = input_turn.TurnCentervelocity;
 8008e8a:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8008e94:	6013      	str	r3, [r2, #0]
			if (pass[pass_count + 1] == -2 || pass[pass_count + 1] == -3) {
 8008e96:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008e9a:	1c5a      	adds	r2, r3, #1
 8008e9c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008ea0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea8:	f113 0f02 	cmn.w	r3, #2
 8008eac:	d00b      	beq.n	8008ec6 <ShortestWay+0x158e>
 8008eae:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008eb2:	1c5a      	adds	r2, r3, #1
 8008eb4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008eb8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec0:	f113 0f03 	cmn.w	r3, #3
 8008ec4:	d105      	bne.n	8008ed2 <ShortestWay+0x159a>
				v_end = input_turn.SlalomCentervelocity;
 8008ec6:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8008ed0:	6013      	str	r3, [r2, #0]
			}
			if (pass[pass_count] >= 50) {
 8008ed2:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008ed6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008eda:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee2:	2b31      	cmp	r3, #49	; 0x31
 8008ee4:	dd51      	ble.n	8008f8a <ShortestWay+0x1652>
				//wall_control_mode = 2;
				mode.WallControlMode=2;
 8008ee6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008eea:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8008eee:	2202      	movs	r2, #2
 8008ef0:	701a      	strb	r2, [r3, #0]
				mode.WallControlStatus=0;
 8008ef2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008ef6:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8008efa:	2200      	movs	r2, #0
 8008efc:	705a      	strb	r2, [r3, #1]
				mode.WallCutMode=0;
 8008efe:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008f02:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8008f06:	2200      	movs	r2, #0
 8008f08:	70da      	strb	r2, [r3, #3]
				mode.calMazeMode=0;
 8008f0a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008f0e:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8008f12:	2200      	movs	r2, #0
 8008f14:	709a      	strb	r2, [r3, #2]
				v_start=straight_table((90 * 1.414 * (pass[pass_count] - 50)), v_start,v_end,input_StraightVelocity,input_StraightAcceleration, mode);
 8008f16:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008f1a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008f1e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f26:	3b32      	subs	r3, #50	; 0x32
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7f7 fafb 	bl	8000524 <__aeabi_i2d>
 8008f2e:	a38e      	add	r3, pc, #568	; (adr r3, 8009168 <ShortestWay+0x1830>)
 8008f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f34:	f7f7 fb60 	bl	80005f8 <__aeabi_dmul>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	4619      	mov	r1, r3
 8008f40:	f7f7 fe52 	bl	8000be8 <__aeabi_d2f>
 8008f44:	4604      	mov	r4, r0
 8008f46:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008f4a:	f2a3 4124 	subw	r1, r3, #1060	; 0x424
 8008f4e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008f52:	f5a3 6286 	sub.w	r2, r3, #1072	; 0x430
 8008f56:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008f5a:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8008f5e:	6808      	ldr	r0, [r1, #0]
 8008f60:	ed92 2a00 	vldr	s4, [r2]
 8008f64:	edd3 1a00 	vldr	s3, [r3]
 8008f68:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8008f6c:	ed93 1a00 	vldr	s2, [r3]
 8008f70:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8008f74:	edd3 0a00 	vldr	s1, [r3]
 8008f78:	ee00 4a10 	vmov	s0, r4
 8008f7c:	f7f8 fe38 	bl	8001bf0 <straight_table>
 8008f80:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8008f84:	ed83 0a00 	vstr	s0, [r3]
 8008f88:	e047      	b.n	800901a <ShortestWay+0x16e2>
			} else {
				//wall_control_mode = 1;
				//straight_table((90 * pass[pass_count]), first_v, last_v,inspeed, inacc);
				mode.WallControlMode=1;
 8008f8a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008f8e:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8008f92:	2201      	movs	r2, #1
 8008f94:	701a      	strb	r2, [r3, #0]
				mode.WallControlStatus=0;
 8008f96:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008f9a:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	705a      	strb	r2, [r3, #1]
				mode.WallCutMode=0;
 8008fa2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008fa6:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8008faa:	2200      	movs	r2, #0
 8008fac:	70da      	strb	r2, [r3, #3]
				mode.calMazeMode=0;
 8008fae:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008fb2:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	709a      	strb	r2, [r3, #2]
				v_start=straight_table((90 * pass[pass_count]), v_start,v_end,input_StraightVelocity,input_StraightAcceleration, mode);
 8008fba:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008fbe:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008fc2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fca:	225a      	movs	r2, #90	; 0x5a
 8008fcc:	fb02 f303 	mul.w	r3, r2, r3
 8008fd0:	ee07 3a90 	vmov	s15, r3
 8008fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fd8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008fdc:	f2a3 4124 	subw	r1, r3, #1060	; 0x424
 8008fe0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008fe4:	f5a3 6286 	sub.w	r2, r3, #1072	; 0x430
 8008fe8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008fec:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8008ff0:	6808      	ldr	r0, [r1, #0]
 8008ff2:	ed92 2a00 	vldr	s4, [r2]
 8008ff6:	edd3 1a00 	vldr	s3, [r3]
 8008ffa:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8008ffe:	ed93 1a00 	vldr	s2, [r3]
 8009002:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8009006:	edd3 0a00 	vldr	s1, [r3]
 800900a:	eeb0 0a67 	vmov.f32	s0, s15
 800900e:	f7f8 fdef 	bl	8001bf0 <straight_table>
 8009012:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8009016:	ed83 0a00 	vstr	s0, [r3]

			}
			pass_count++;
 800901a:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 800901e:	3301      	adds	r3, #1
 8009020:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}

		if (pass[pass_count] == 0) {
 8009024:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8009028:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800902c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8009030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00d      	beq.n	8009054 <ShortestWay+0x171c>
			break;
		}

		if (x == 0 && y == 0) {
 8009038:	4b41      	ldr	r3, [pc, #260]	; (8009140 <ShortestWay+0x1808>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d103      	bne.n	8009048 <ShortestWay+0x1710>
 8009040:	4b40      	ldr	r3, [pc, #256]	; (8009144 <ShortestWay+0x180c>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d007      	beq.n	8009058 <ShortestWay+0x1720>
	while (pass_count <= 255) {
 8009048:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 800904c:	2bff      	cmp	r3, #255	; 0xff
 800904e:	f67f ad5d 	bls.w	8008b0c <ShortestWay+0x11d4>
 8009052:	e002      	b.n	800905a <ShortestWay+0x1722>
			break;
 8009054:	bf00      	nop
 8009056:	e000      	b.n	800905a <ShortestWay+0x1722>
			break;
 8009058:	bf00      	nop
		}

	}
	v_start=straight_table(90, v_start,100,input_StraightVelocity,input_StraightAcceleration, mode);
 800905a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800905e:	f2a3 4124 	subw	r1, r3, #1060	; 0x424
 8009062:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8009066:	f5a3 6286 	sub.w	r2, r3, #1072	; 0x430
 800906a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800906e:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8009072:	6808      	ldr	r0, [r1, #0]
 8009074:	ed92 2a00 	vldr	s4, [r2]
 8009078:	edd3 1a00 	vldr	s3, [r3]
 800907c:	ed9f 1a32 	vldr	s2, [pc, #200]	; 8009148 <ShortestWay+0x1810>
 8009080:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8009084:	edd3 0a00 	vldr	s1, [r3]
 8009088:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800914c <ShortestWay+0x1814>
 800908c:	f7f8 fdb0 	bl	8001bf0 <straight_table>
 8009090:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8009094:	ed83 0a00 	vstr	s0, [r3]
	pl_motor_stop();
 8009098:	f7f9 fc16 	bl	80028c8 <pl_motor_stop>
	if (x == 0 && y == 0) {
 800909c:	4b28      	ldr	r3, [pc, #160]	; (8009140 <ShortestWay+0x1808>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d103      	bne.n	80090ac <ShortestWay+0x1774>
 80090a4:	4b27      	ldr	r3, [pc, #156]	; (8009144 <ShortestWay+0x180c>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d011      	beq.n	80090d0 <ShortestWay+0x1798>
	} else {
//		straight_table(180, (E_speedR + E_speedL) / 2, 0,(E_speedR + E_speedL) / 2, inacc);
		HAL_Delay(700);
 80090ac:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80090b0:	f003 fac2 	bl	800c638 <HAL_Delay>
		pl_motor_start();
 80090b4:	f7f9 fbf4 	bl	80028a0 <pl_motor_start>
		turning_table(180, 0, 0, 400, 5000);
 80090b8:	ed9f 2a25 	vldr	s4, [pc, #148]	; 8009150 <ShortestWay+0x1818>
 80090bc:	eddf 1a25 	vldr	s3, [pc, #148]	; 8009154 <ShortestWay+0x181c>
 80090c0:	ed9f 1a25 	vldr	s2, [pc, #148]	; 8009158 <ShortestWay+0x1820>
 80090c4:	eddf 0a24 	vldr	s1, [pc, #144]	; 8009158 <ShortestWay+0x1820>
 80090c8:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800915c <ShortestWay+0x1824>
 80090cc:	f7f8 fe8a 	bl	8001de4 <turning_table>
	}
	pl_motor_stop();
 80090d0:	f7f9 fbfa 	bl	80028c8 <pl_motor_stop>
	HAL_Delay(500);
 80090d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80090d8:	f003 faae 	bl	800c638 <HAL_Delay>
	pl_motor_standby(0);
 80090dc:	2000      	movs	r0, #0
 80090de:	f7f9 fb75 	bl	80027cc <pl_motor_standby>



	t = 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (t <= 14) {
 80090e8:	e01d      	b.n	8009126 <ShortestWay+0x17ee>
		wall.row[t] = record.row[t];
 80090ea:	4a1d      	ldr	r2, [pc, #116]	; (8009160 <ShortestWay+0x1828>)
 80090ec:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80090f0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80090f4:	4a1b      	ldr	r2, [pc, #108]	; (8009164 <ShortestWay+0x182c>)
 80090f6:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80090fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 80090fe:	4a18      	ldr	r2, [pc, #96]	; (8009160 <ShortestWay+0x1828>)
 8009100:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8009104:	330c      	adds	r3, #12
 8009106:	005b      	lsls	r3, r3, #1
 8009108:	4413      	add	r3, r2
 800910a:	88d9      	ldrh	r1, [r3, #6]
 800910c:	4a15      	ldr	r2, [pc, #84]	; (8009164 <ShortestWay+0x182c>)
 800910e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8009112:	330c      	adds	r3, #12
 8009114:	005b      	lsls	r3, r3, #1
 8009116:	4413      	add	r3, r2
 8009118:	460a      	mov	r2, r1
 800911a:	80da      	strh	r2, [r3, #6]
		t++;
 800911c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8009120:	3301      	adds	r3, #1
 8009122:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (t <= 14) {
 8009126:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800912a:	2b0e      	cmp	r3, #14
 800912c:	dddd      	ble.n	80090ea <ShortestWay+0x17b2>
	}

}
 800912e:	bf00      	nop
 8009130:	bf00      	nop
 8009132:	f207 4734 	addw	r7, r7, #1076	; 0x434
 8009136:	46bd      	mov	sp, r7
 8009138:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800913c:	b004      	add	sp, #16
 800913e:	4770      	bx	lr
 8009140:	20000f70 	.word	0x20000f70
 8009144:	20000f74 	.word	0x20000f74
 8009148:	42c80000 	.word	0x42c80000
 800914c:	42b40000 	.word	0x42b40000
 8009150:	459c4000 	.word	0x459c4000
 8009154:	43c80000 	.word	0x43c80000
 8009158:	00000000 	.word	0x00000000
 800915c:	43340000 	.word	0x43340000
 8009160:	20000ff8 	.word	0x20000ff8
 8009164:	20000f80 	.word	0x20000f80
 8009168:	d70a3d70 	.word	0xd70a3d70
 800916c:	405fd0a3 	.word	0x405fd0a3

08009170 <update_wall>:

//kokomade

}

void update_wall(void){
 8009170:	b480      	push	{r7}
 8009172:	af00      	add	r7, sp, #0


	switch (direction) {
 8009174:	4b5e      	ldr	r3, [pc, #376]	; (80092f0 <update_wall+0x180>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	3b01      	subs	r3, #1
 800917a:	2b03      	cmp	r3, #3
 800917c:	f200 82f7 	bhi.w	800976e <update_wall+0x5fe>
 8009180:	a201      	add	r2, pc, #4	; (adr r2, 8009188 <update_wall+0x18>)
 8009182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009186:	bf00      	nop
 8009188:	08009199 	.word	0x08009199
 800918c:	0800930d 	.word	0x0800930d
 8009190:	08009485 	.word	0x08009485
 8009194:	080095fd 	.word	0x080095fd
	case 1:
		if (y <= 14) {
 8009198:	4b56      	ldr	r3, [pc, #344]	; (80092f4 <update_wall+0x184>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2b0e      	cmp	r3, #14
 800919e:	dc35      	bgt.n	800920c <update_wall+0x9c>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 80091a0:	4b54      	ldr	r3, [pc, #336]	; (80092f4 <update_wall+0x184>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a54      	ldr	r2, [pc, #336]	; (80092f8 <update_wall+0x188>)
 80091a6:	332c      	adds	r3, #44	; 0x2c
 80091a8:	005b      	lsls	r3, r3, #1
 80091aa:	4413      	add	r3, r2
 80091ac:	885b      	ldrh	r3, [r3, #2]
 80091ae:	b21a      	sxth	r2, r3
 80091b0:	4b52      	ldr	r3, [pc, #328]	; (80092fc <update_wall+0x18c>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2101      	movs	r1, #1
 80091b6:	fa01 f303 	lsl.w	r3, r1, r3
 80091ba:	b21b      	sxth	r3, r3
 80091bc:	4313      	orrs	r3, r2
 80091be:	b21a      	sxth	r2, r3
 80091c0:	4b4c      	ldr	r3, [pc, #304]	; (80092f4 <update_wall+0x184>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	b291      	uxth	r1, r2
 80091c6:	4a4c      	ldr	r2, [pc, #304]	; (80092f8 <update_wall+0x188>)
 80091c8:	332c      	adds	r3, #44	; 0x2c
 80091ca:	005b      	lsls	r3, r3, #1
 80091cc:	4413      	add	r3, r2
 80091ce:	460a      	mov	r2, r1
 80091d0:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y] = wall.column[y] | (1 << x);}
 80091d2:	4b4b      	ldr	r3, [pc, #300]	; (8009300 <update_wall+0x190>)
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d018      	beq.n	800920c <update_wall+0x9c>
 80091da:	4b46      	ldr	r3, [pc, #280]	; (80092f4 <update_wall+0x184>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a46      	ldr	r2, [pc, #280]	; (80092f8 <update_wall+0x188>)
 80091e0:	330c      	adds	r3, #12
 80091e2:	005b      	lsls	r3, r3, #1
 80091e4:	4413      	add	r3, r2
 80091e6:	88db      	ldrh	r3, [r3, #6]
 80091e8:	b21a      	sxth	r2, r3
 80091ea:	4b44      	ldr	r3, [pc, #272]	; (80092fc <update_wall+0x18c>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2101      	movs	r1, #1
 80091f0:	fa01 f303 	lsl.w	r3, r1, r3
 80091f4:	b21b      	sxth	r3, r3
 80091f6:	4313      	orrs	r3, r2
 80091f8:	b21a      	sxth	r2, r3
 80091fa:	4b3e      	ldr	r3, [pc, #248]	; (80092f4 <update_wall+0x184>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	b291      	uxth	r1, r2
 8009200:	4a3d      	ldr	r2, [pc, #244]	; (80092f8 <update_wall+0x188>)
 8009202:	330c      	adds	r3, #12
 8009204:	005b      	lsls	r3, r3, #1
 8009206:	4413      	add	r3, r2
 8009208:	460a      	mov	r2, r1
 800920a:	80da      	strh	r2, [r3, #6]
		}

		if (x >= 1) {
 800920c:	4b3b      	ldr	r3, [pc, #236]	; (80092fc <update_wall+0x18c>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	dd34      	ble.n	800927e <update_wall+0x10e>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8009214:	4b39      	ldr	r3, [pc, #228]	; (80092fc <update_wall+0x18c>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	3b01      	subs	r3, #1
 800921a:	4a37      	ldr	r2, [pc, #220]	; (80092f8 <update_wall+0x188>)
 800921c:	331c      	adds	r3, #28
 800921e:	005b      	lsls	r3, r3, #1
 8009220:	4413      	add	r3, r2
 8009222:	889b      	ldrh	r3, [r3, #4]
 8009224:	b21a      	sxth	r2, r3
 8009226:	4b33      	ldr	r3, [pc, #204]	; (80092f4 <update_wall+0x184>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2101      	movs	r1, #1
 800922c:	fa01 f303 	lsl.w	r3, r1, r3
 8009230:	b21b      	sxth	r3, r3
 8009232:	4313      	orrs	r3, r2
 8009234:	b21a      	sxth	r2, r3
 8009236:	4b31      	ldr	r3, [pc, #196]	; (80092fc <update_wall+0x18c>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	3b01      	subs	r3, #1
 800923c:	b291      	uxth	r1, r2
 800923e:	4a2e      	ldr	r2, [pc, #184]	; (80092f8 <update_wall+0x188>)
 8009240:	331c      	adds	r3, #28
 8009242:	005b      	lsls	r3, r3, #1
 8009244:	4413      	add	r3, r2
 8009246:	460a      	mov	r2, r1
 8009248:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 800924a:	4b2e      	ldr	r3, [pc, #184]	; (8009304 <update_wall+0x194>)
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d015      	beq.n	800927e <update_wall+0x10e>
 8009252:	4b2a      	ldr	r3, [pc, #168]	; (80092fc <update_wall+0x18c>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	3b01      	subs	r3, #1
 8009258:	4a27      	ldr	r2, [pc, #156]	; (80092f8 <update_wall+0x188>)
 800925a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800925e:	b21a      	sxth	r2, r3
 8009260:	4b24      	ldr	r3, [pc, #144]	; (80092f4 <update_wall+0x184>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2101      	movs	r1, #1
 8009266:	fa01 f303 	lsl.w	r3, r1, r3
 800926a:	b21b      	sxth	r3, r3
 800926c:	4313      	orrs	r3, r2
 800926e:	b21a      	sxth	r2, r3
 8009270:	4b22      	ldr	r3, [pc, #136]	; (80092fc <update_wall+0x18c>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	3b01      	subs	r3, #1
 8009276:	b291      	uxth	r1, r2
 8009278:	4a1f      	ldr	r2, [pc, #124]	; (80092f8 <update_wall+0x188>)
 800927a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x <= 14) {
 800927e:	4b1f      	ldr	r3, [pc, #124]	; (80092fc <update_wall+0x18c>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2b0e      	cmp	r3, #14
 8009284:	f300 826c 	bgt.w	8009760 <update_wall+0x5f0>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8009288:	4b1c      	ldr	r3, [pc, #112]	; (80092fc <update_wall+0x18c>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a1a      	ldr	r2, [pc, #104]	; (80092f8 <update_wall+0x188>)
 800928e:	331c      	adds	r3, #28
 8009290:	005b      	lsls	r3, r3, #1
 8009292:	4413      	add	r3, r2
 8009294:	889b      	ldrh	r3, [r3, #4]
 8009296:	b21a      	sxth	r2, r3
 8009298:	4b16      	ldr	r3, [pc, #88]	; (80092f4 <update_wall+0x184>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2101      	movs	r1, #1
 800929e:	fa01 f303 	lsl.w	r3, r1, r3
 80092a2:	b21b      	sxth	r3, r3
 80092a4:	4313      	orrs	r3, r2
 80092a6:	b21a      	sxth	r2, r3
 80092a8:	4b14      	ldr	r3, [pc, #80]	; (80092fc <update_wall+0x18c>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	b291      	uxth	r1, r2
 80092ae:	4a12      	ldr	r2, [pc, #72]	; (80092f8 <update_wall+0x188>)
 80092b0:	331c      	adds	r3, #28
 80092b2:	005b      	lsls	r3, r3, #1
 80092b4:	4413      	add	r3, r2
 80092b6:	460a      	mov	r2, r1
 80092b8:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x] = wall.row[x] | (1 << y);}
 80092ba:	4b13      	ldr	r3, [pc, #76]	; (8009308 <update_wall+0x198>)
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f000 824e 	beq.w	8009760 <update_wall+0x5f0>
 80092c4:	4b0d      	ldr	r3, [pc, #52]	; (80092fc <update_wall+0x18c>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a0b      	ldr	r2, [pc, #44]	; (80092f8 <update_wall+0x188>)
 80092ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092ce:	b21a      	sxth	r2, r3
 80092d0:	4b08      	ldr	r3, [pc, #32]	; (80092f4 <update_wall+0x184>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2101      	movs	r1, #1
 80092d6:	fa01 f303 	lsl.w	r3, r1, r3
 80092da:	b21b      	sxth	r3, r3
 80092dc:	4313      	orrs	r3, r2
 80092de:	b21a      	sxth	r2, r3
 80092e0:	4b06      	ldr	r3, [pc, #24]	; (80092fc <update_wall+0x18c>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	b291      	uxth	r1, r2
 80092e6:	4a04      	ldr	r2, [pc, #16]	; (80092f8 <update_wall+0x188>)
 80092e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 80092ec:	e238      	b.n	8009760 <update_wall+0x5f0>
 80092ee:	bf00      	nop
 80092f0:	20000f78 	.word	0x20000f78
 80092f4:	20000f74 	.word	0x20000f74
 80092f8:	20000f80 	.word	0x20000f80
 80092fc:	20000f70 	.word	0x20000f70
 8009300:	20000f7c 	.word	0x20000f7c
 8009304:	20000f7e 	.word	0x20000f7e
 8009308:	20000f7d 	.word	0x20000f7d
	case 2:
		if (x <= 14) {
 800930c:	4b57      	ldr	r3, [pc, #348]	; (800946c <update_wall+0x2fc>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2b0e      	cmp	r3, #14
 8009312:	dc30      	bgt.n	8009376 <update_wall+0x206>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8009314:	4b55      	ldr	r3, [pc, #340]	; (800946c <update_wall+0x2fc>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a55      	ldr	r2, [pc, #340]	; (8009470 <update_wall+0x300>)
 800931a:	331c      	adds	r3, #28
 800931c:	005b      	lsls	r3, r3, #1
 800931e:	4413      	add	r3, r2
 8009320:	889b      	ldrh	r3, [r3, #4]
 8009322:	b21a      	sxth	r2, r3
 8009324:	4b53      	ldr	r3, [pc, #332]	; (8009474 <update_wall+0x304>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2101      	movs	r1, #1
 800932a:	fa01 f303 	lsl.w	r3, r1, r3
 800932e:	b21b      	sxth	r3, r3
 8009330:	4313      	orrs	r3, r2
 8009332:	b21a      	sxth	r2, r3
 8009334:	4b4d      	ldr	r3, [pc, #308]	; (800946c <update_wall+0x2fc>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	b291      	uxth	r1, r2
 800933a:	4a4d      	ldr	r2, [pc, #308]	; (8009470 <update_wall+0x300>)
 800933c:	331c      	adds	r3, #28
 800933e:	005b      	lsls	r3, r3, #1
 8009340:	4413      	add	r3, r2
 8009342:	460a      	mov	r2, r1
 8009344:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8009346:	4b4c      	ldr	r3, [pc, #304]	; (8009478 <update_wall+0x308>)
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d013      	beq.n	8009376 <update_wall+0x206>
 800934e:	4b47      	ldr	r3, [pc, #284]	; (800946c <update_wall+0x2fc>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a47      	ldr	r2, [pc, #284]	; (8009470 <update_wall+0x300>)
 8009354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009358:	b21a      	sxth	r2, r3
 800935a:	4b46      	ldr	r3, [pc, #280]	; (8009474 <update_wall+0x304>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2101      	movs	r1, #1
 8009360:	fa01 f303 	lsl.w	r3, r1, r3
 8009364:	b21b      	sxth	r3, r3
 8009366:	4313      	orrs	r3, r2
 8009368:	b21a      	sxth	r2, r3
 800936a:	4b40      	ldr	r3, [pc, #256]	; (800946c <update_wall+0x2fc>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	b291      	uxth	r1, r2
 8009370:	4a3f      	ldr	r2, [pc, #252]	; (8009470 <update_wall+0x300>)
 8009372:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y <= 14) {
 8009376:	4b3f      	ldr	r3, [pc, #252]	; (8009474 <update_wall+0x304>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b0e      	cmp	r3, #14
 800937c:	dc35      	bgt.n	80093ea <update_wall+0x27a>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 800937e:	4b3d      	ldr	r3, [pc, #244]	; (8009474 <update_wall+0x304>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a3b      	ldr	r2, [pc, #236]	; (8009470 <update_wall+0x300>)
 8009384:	332c      	adds	r3, #44	; 0x2c
 8009386:	005b      	lsls	r3, r3, #1
 8009388:	4413      	add	r3, r2
 800938a:	885b      	ldrh	r3, [r3, #2]
 800938c:	b21a      	sxth	r2, r3
 800938e:	4b37      	ldr	r3, [pc, #220]	; (800946c <update_wall+0x2fc>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2101      	movs	r1, #1
 8009394:	fa01 f303 	lsl.w	r3, r1, r3
 8009398:	b21b      	sxth	r3, r3
 800939a:	4313      	orrs	r3, r2
 800939c:	b21a      	sxth	r2, r3
 800939e:	4b35      	ldr	r3, [pc, #212]	; (8009474 <update_wall+0x304>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	b291      	uxth	r1, r2
 80093a4:	4a32      	ldr	r2, [pc, #200]	; (8009470 <update_wall+0x300>)
 80093a6:	332c      	adds	r3, #44	; 0x2c
 80093a8:	005b      	lsls	r3, r3, #1
 80093aa:	4413      	add	r3, r2
 80093ac:	460a      	mov	r2, r1
 80093ae:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y] = wall.column[y] | (1 << x);}
 80093b0:	4b32      	ldr	r3, [pc, #200]	; (800947c <update_wall+0x30c>)
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d018      	beq.n	80093ea <update_wall+0x27a>
 80093b8:	4b2e      	ldr	r3, [pc, #184]	; (8009474 <update_wall+0x304>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a2c      	ldr	r2, [pc, #176]	; (8009470 <update_wall+0x300>)
 80093be:	330c      	adds	r3, #12
 80093c0:	005b      	lsls	r3, r3, #1
 80093c2:	4413      	add	r3, r2
 80093c4:	88db      	ldrh	r3, [r3, #6]
 80093c6:	b21a      	sxth	r2, r3
 80093c8:	4b28      	ldr	r3, [pc, #160]	; (800946c <update_wall+0x2fc>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2101      	movs	r1, #1
 80093ce:	fa01 f303 	lsl.w	r3, r1, r3
 80093d2:	b21b      	sxth	r3, r3
 80093d4:	4313      	orrs	r3, r2
 80093d6:	b21a      	sxth	r2, r3
 80093d8:	4b26      	ldr	r3, [pc, #152]	; (8009474 <update_wall+0x304>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	b291      	uxth	r1, r2
 80093de:	4a24      	ldr	r2, [pc, #144]	; (8009470 <update_wall+0x300>)
 80093e0:	330c      	adds	r3, #12
 80093e2:	005b      	lsls	r3, r3, #1
 80093e4:	4413      	add	r3, r2
 80093e6:	460a      	mov	r2, r1
 80093e8:	80da      	strh	r2, [r3, #6]
		}

		if (y >= 1) {
 80093ea:	4b22      	ldr	r3, [pc, #136]	; (8009474 <update_wall+0x304>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f340 81b8 	ble.w	8009764 <update_wall+0x5f4>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 80093f4:	4b1f      	ldr	r3, [pc, #124]	; (8009474 <update_wall+0x304>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	3b01      	subs	r3, #1
 80093fa:	4a1d      	ldr	r2, [pc, #116]	; (8009470 <update_wall+0x300>)
 80093fc:	332c      	adds	r3, #44	; 0x2c
 80093fe:	005b      	lsls	r3, r3, #1
 8009400:	4413      	add	r3, r2
 8009402:	885b      	ldrh	r3, [r3, #2]
 8009404:	b21a      	sxth	r2, r3
 8009406:	4b19      	ldr	r3, [pc, #100]	; (800946c <update_wall+0x2fc>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2101      	movs	r1, #1
 800940c:	fa01 f303 	lsl.w	r3, r1, r3
 8009410:	b21b      	sxth	r3, r3
 8009412:	4313      	orrs	r3, r2
 8009414:	b21a      	sxth	r2, r3
 8009416:	4b17      	ldr	r3, [pc, #92]	; (8009474 <update_wall+0x304>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	3b01      	subs	r3, #1
 800941c:	b291      	uxth	r1, r2
 800941e:	4a14      	ldr	r2, [pc, #80]	; (8009470 <update_wall+0x300>)
 8009420:	332c      	adds	r3, #44	; 0x2c
 8009422:	005b      	lsls	r3, r3, #1
 8009424:	4413      	add	r3, r2
 8009426:	460a      	mov	r2, r1
 8009428:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 800942a:	4b15      	ldr	r3, [pc, #84]	; (8009480 <update_wall+0x310>)
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	f000 8198 	beq.w	8009764 <update_wall+0x5f4>
 8009434:	4b0f      	ldr	r3, [pc, #60]	; (8009474 <update_wall+0x304>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	3b01      	subs	r3, #1
 800943a:	4a0d      	ldr	r2, [pc, #52]	; (8009470 <update_wall+0x300>)
 800943c:	330c      	adds	r3, #12
 800943e:	005b      	lsls	r3, r3, #1
 8009440:	4413      	add	r3, r2
 8009442:	88db      	ldrh	r3, [r3, #6]
 8009444:	b21a      	sxth	r2, r3
 8009446:	4b09      	ldr	r3, [pc, #36]	; (800946c <update_wall+0x2fc>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2101      	movs	r1, #1
 800944c:	fa01 f303 	lsl.w	r3, r1, r3
 8009450:	b21b      	sxth	r3, r3
 8009452:	4313      	orrs	r3, r2
 8009454:	b21a      	sxth	r2, r3
 8009456:	4b07      	ldr	r3, [pc, #28]	; (8009474 <update_wall+0x304>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	3b01      	subs	r3, #1
 800945c:	b291      	uxth	r1, r2
 800945e:	4a04      	ldr	r2, [pc, #16]	; (8009470 <update_wall+0x300>)
 8009460:	330c      	adds	r3, #12
 8009462:	005b      	lsls	r3, r3, #1
 8009464:	4413      	add	r3, r2
 8009466:	460a      	mov	r2, r1
 8009468:	80da      	strh	r2, [r3, #6]
		}

		break;
 800946a:	e17b      	b.n	8009764 <update_wall+0x5f4>
 800946c:	20000f70 	.word	0x20000f70
 8009470:	20000f80 	.word	0x20000f80
 8009474:	20000f74 	.word	0x20000f74
 8009478:	20000f7c 	.word	0x20000f7c
 800947c:	20000f7e 	.word	0x20000f7e
 8009480:	20000f7d 	.word	0x20000f7d
	case 3:
		if (y >= 1) {
 8009484:	4b57      	ldr	r3, [pc, #348]	; (80095e4 <update_wall+0x474>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	dd39      	ble.n	8009500 <update_wall+0x390>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 800948c:	4b55      	ldr	r3, [pc, #340]	; (80095e4 <update_wall+0x474>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	3b01      	subs	r3, #1
 8009492:	4a55      	ldr	r2, [pc, #340]	; (80095e8 <update_wall+0x478>)
 8009494:	332c      	adds	r3, #44	; 0x2c
 8009496:	005b      	lsls	r3, r3, #1
 8009498:	4413      	add	r3, r2
 800949a:	885b      	ldrh	r3, [r3, #2]
 800949c:	b21a      	sxth	r2, r3
 800949e:	4b53      	ldr	r3, [pc, #332]	; (80095ec <update_wall+0x47c>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2101      	movs	r1, #1
 80094a4:	fa01 f303 	lsl.w	r3, r1, r3
 80094a8:	b21b      	sxth	r3, r3
 80094aa:	4313      	orrs	r3, r2
 80094ac:	b21a      	sxth	r2, r3
 80094ae:	4b4d      	ldr	r3, [pc, #308]	; (80095e4 <update_wall+0x474>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	3b01      	subs	r3, #1
 80094b4:	b291      	uxth	r1, r2
 80094b6:	4a4c      	ldr	r2, [pc, #304]	; (80095e8 <update_wall+0x478>)
 80094b8:	332c      	adds	r3, #44	; 0x2c
 80094ba:	005b      	lsls	r3, r3, #1
 80094bc:	4413      	add	r3, r2
 80094be:	460a      	mov	r2, r1
 80094c0:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 80094c2:	4b4b      	ldr	r3, [pc, #300]	; (80095f0 <update_wall+0x480>)
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d01a      	beq.n	8009500 <update_wall+0x390>
 80094ca:	4b46      	ldr	r3, [pc, #280]	; (80095e4 <update_wall+0x474>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	3b01      	subs	r3, #1
 80094d0:	4a45      	ldr	r2, [pc, #276]	; (80095e8 <update_wall+0x478>)
 80094d2:	330c      	adds	r3, #12
 80094d4:	005b      	lsls	r3, r3, #1
 80094d6:	4413      	add	r3, r2
 80094d8:	88db      	ldrh	r3, [r3, #6]
 80094da:	b21a      	sxth	r2, r3
 80094dc:	4b43      	ldr	r3, [pc, #268]	; (80095ec <update_wall+0x47c>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2101      	movs	r1, #1
 80094e2:	fa01 f303 	lsl.w	r3, r1, r3
 80094e6:	b21b      	sxth	r3, r3
 80094e8:	4313      	orrs	r3, r2
 80094ea:	b21a      	sxth	r2, r3
 80094ec:	4b3d      	ldr	r3, [pc, #244]	; (80095e4 <update_wall+0x474>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	3b01      	subs	r3, #1
 80094f2:	b291      	uxth	r1, r2
 80094f4:	4a3c      	ldr	r2, [pc, #240]	; (80095e8 <update_wall+0x478>)
 80094f6:	330c      	adds	r3, #12
 80094f8:	005b      	lsls	r3, r3, #1
 80094fa:	4413      	add	r3, r2
 80094fc:	460a      	mov	r2, r1
 80094fe:	80da      	strh	r2, [r3, #6]
		}

		if (x <= 14) {
 8009500:	4b3a      	ldr	r3, [pc, #232]	; (80095ec <update_wall+0x47c>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b0e      	cmp	r3, #14
 8009506:	dc30      	bgt.n	800956a <update_wall+0x3fa>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8009508:	4b38      	ldr	r3, [pc, #224]	; (80095ec <update_wall+0x47c>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a36      	ldr	r2, [pc, #216]	; (80095e8 <update_wall+0x478>)
 800950e:	331c      	adds	r3, #28
 8009510:	005b      	lsls	r3, r3, #1
 8009512:	4413      	add	r3, r2
 8009514:	889b      	ldrh	r3, [r3, #4]
 8009516:	b21a      	sxth	r2, r3
 8009518:	4b32      	ldr	r3, [pc, #200]	; (80095e4 <update_wall+0x474>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2101      	movs	r1, #1
 800951e:	fa01 f303 	lsl.w	r3, r1, r3
 8009522:	b21b      	sxth	r3, r3
 8009524:	4313      	orrs	r3, r2
 8009526:	b21a      	sxth	r2, r3
 8009528:	4b30      	ldr	r3, [pc, #192]	; (80095ec <update_wall+0x47c>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	b291      	uxth	r1, r2
 800952e:	4a2e      	ldr	r2, [pc, #184]	; (80095e8 <update_wall+0x478>)
 8009530:	331c      	adds	r3, #28
 8009532:	005b      	lsls	r3, r3, #1
 8009534:	4413      	add	r3, r2
 8009536:	460a      	mov	r2, r1
 8009538:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x] = wall.row[x] | (1 << y);}
 800953a:	4b2e      	ldr	r3, [pc, #184]	; (80095f4 <update_wall+0x484>)
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d013      	beq.n	800956a <update_wall+0x3fa>
 8009542:	4b2a      	ldr	r3, [pc, #168]	; (80095ec <update_wall+0x47c>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a28      	ldr	r2, [pc, #160]	; (80095e8 <update_wall+0x478>)
 8009548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800954c:	b21a      	sxth	r2, r3
 800954e:	4b25      	ldr	r3, [pc, #148]	; (80095e4 <update_wall+0x474>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2101      	movs	r1, #1
 8009554:	fa01 f303 	lsl.w	r3, r1, r3
 8009558:	b21b      	sxth	r3, r3
 800955a:	4313      	orrs	r3, r2
 800955c:	b21a      	sxth	r2, r3
 800955e:	4b23      	ldr	r3, [pc, #140]	; (80095ec <update_wall+0x47c>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	b291      	uxth	r1, r2
 8009564:	4a20      	ldr	r2, [pc, #128]	; (80095e8 <update_wall+0x478>)
 8009566:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x >= 1) {
 800956a:	4b20      	ldr	r3, [pc, #128]	; (80095ec <update_wall+0x47c>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	f340 80fa 	ble.w	8009768 <update_wall+0x5f8>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8009574:	4b1d      	ldr	r3, [pc, #116]	; (80095ec <update_wall+0x47c>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	3b01      	subs	r3, #1
 800957a:	4a1b      	ldr	r2, [pc, #108]	; (80095e8 <update_wall+0x478>)
 800957c:	331c      	adds	r3, #28
 800957e:	005b      	lsls	r3, r3, #1
 8009580:	4413      	add	r3, r2
 8009582:	889b      	ldrh	r3, [r3, #4]
 8009584:	b21a      	sxth	r2, r3
 8009586:	4b17      	ldr	r3, [pc, #92]	; (80095e4 <update_wall+0x474>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2101      	movs	r1, #1
 800958c:	fa01 f303 	lsl.w	r3, r1, r3
 8009590:	b21b      	sxth	r3, r3
 8009592:	4313      	orrs	r3, r2
 8009594:	b21a      	sxth	r2, r3
 8009596:	4b15      	ldr	r3, [pc, #84]	; (80095ec <update_wall+0x47c>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	3b01      	subs	r3, #1
 800959c:	b291      	uxth	r1, r2
 800959e:	4a12      	ldr	r2, [pc, #72]	; (80095e8 <update_wall+0x478>)
 80095a0:	331c      	adds	r3, #28
 80095a2:	005b      	lsls	r3, r3, #1
 80095a4:	4413      	add	r3, r2
 80095a6:	460a      	mov	r2, r1
 80095a8:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 80095aa:	4b13      	ldr	r3, [pc, #76]	; (80095f8 <update_wall+0x488>)
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f000 80da 	beq.w	8009768 <update_wall+0x5f8>
 80095b4:	4b0d      	ldr	r3, [pc, #52]	; (80095ec <update_wall+0x47c>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	3b01      	subs	r3, #1
 80095ba:	4a0b      	ldr	r2, [pc, #44]	; (80095e8 <update_wall+0x478>)
 80095bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095c0:	b21a      	sxth	r2, r3
 80095c2:	4b08      	ldr	r3, [pc, #32]	; (80095e4 <update_wall+0x474>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2101      	movs	r1, #1
 80095c8:	fa01 f303 	lsl.w	r3, r1, r3
 80095cc:	b21b      	sxth	r3, r3
 80095ce:	4313      	orrs	r3, r2
 80095d0:	b21a      	sxth	r2, r3
 80095d2:	4b06      	ldr	r3, [pc, #24]	; (80095ec <update_wall+0x47c>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	3b01      	subs	r3, #1
 80095d8:	b291      	uxth	r1, r2
 80095da:	4a03      	ldr	r2, [pc, #12]	; (80095e8 <update_wall+0x478>)
 80095dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 80095e0:	e0c2      	b.n	8009768 <update_wall+0x5f8>
 80095e2:	bf00      	nop
 80095e4:	20000f74 	.word	0x20000f74
 80095e8:	20000f80 	.word	0x20000f80
 80095ec:	20000f70 	.word	0x20000f70
 80095f0:	20000f7c 	.word	0x20000f7c
 80095f4:	20000f7e 	.word	0x20000f7e
 80095f8:	20000f7d 	.word	0x20000f7d
	case 4:
		if (x >= 1) {
 80095fc:	4b5e      	ldr	r3, [pc, #376]	; (8009778 <update_wall+0x608>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	dd34      	ble.n	800966e <update_wall+0x4fe>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8009604:	4b5c      	ldr	r3, [pc, #368]	; (8009778 <update_wall+0x608>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	3b01      	subs	r3, #1
 800960a:	4a5c      	ldr	r2, [pc, #368]	; (800977c <update_wall+0x60c>)
 800960c:	331c      	adds	r3, #28
 800960e:	005b      	lsls	r3, r3, #1
 8009610:	4413      	add	r3, r2
 8009612:	889b      	ldrh	r3, [r3, #4]
 8009614:	b21a      	sxth	r2, r3
 8009616:	4b5a      	ldr	r3, [pc, #360]	; (8009780 <update_wall+0x610>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2101      	movs	r1, #1
 800961c:	fa01 f303 	lsl.w	r3, r1, r3
 8009620:	b21b      	sxth	r3, r3
 8009622:	4313      	orrs	r3, r2
 8009624:	b21a      	sxth	r2, r3
 8009626:	4b54      	ldr	r3, [pc, #336]	; (8009778 <update_wall+0x608>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	3b01      	subs	r3, #1
 800962c:	b291      	uxth	r1, r2
 800962e:	4a53      	ldr	r2, [pc, #332]	; (800977c <update_wall+0x60c>)
 8009630:	331c      	adds	r3, #28
 8009632:	005b      	lsls	r3, r3, #1
 8009634:	4413      	add	r3, r2
 8009636:	460a      	mov	r2, r1
 8009638:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 800963a:	4b52      	ldr	r3, [pc, #328]	; (8009784 <update_wall+0x614>)
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d015      	beq.n	800966e <update_wall+0x4fe>
 8009642:	4b4d      	ldr	r3, [pc, #308]	; (8009778 <update_wall+0x608>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	3b01      	subs	r3, #1
 8009648:	4a4c      	ldr	r2, [pc, #304]	; (800977c <update_wall+0x60c>)
 800964a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800964e:	b21a      	sxth	r2, r3
 8009650:	4b4b      	ldr	r3, [pc, #300]	; (8009780 <update_wall+0x610>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2101      	movs	r1, #1
 8009656:	fa01 f303 	lsl.w	r3, r1, r3
 800965a:	b21b      	sxth	r3, r3
 800965c:	4313      	orrs	r3, r2
 800965e:	b21a      	sxth	r2, r3
 8009660:	4b45      	ldr	r3, [pc, #276]	; (8009778 <update_wall+0x608>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	3b01      	subs	r3, #1
 8009666:	b291      	uxth	r1, r2
 8009668:	4a44      	ldr	r2, [pc, #272]	; (800977c <update_wall+0x60c>)
 800966a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y >= 1) {
 800966e:	4b44      	ldr	r3, [pc, #272]	; (8009780 <update_wall+0x610>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	dd39      	ble.n	80096ea <update_wall+0x57a>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8009676:	4b42      	ldr	r3, [pc, #264]	; (8009780 <update_wall+0x610>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3b01      	subs	r3, #1
 800967c:	4a3f      	ldr	r2, [pc, #252]	; (800977c <update_wall+0x60c>)
 800967e:	332c      	adds	r3, #44	; 0x2c
 8009680:	005b      	lsls	r3, r3, #1
 8009682:	4413      	add	r3, r2
 8009684:	885b      	ldrh	r3, [r3, #2]
 8009686:	b21a      	sxth	r2, r3
 8009688:	4b3b      	ldr	r3, [pc, #236]	; (8009778 <update_wall+0x608>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2101      	movs	r1, #1
 800968e:	fa01 f303 	lsl.w	r3, r1, r3
 8009692:	b21b      	sxth	r3, r3
 8009694:	4313      	orrs	r3, r2
 8009696:	b21a      	sxth	r2, r3
 8009698:	4b39      	ldr	r3, [pc, #228]	; (8009780 <update_wall+0x610>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	3b01      	subs	r3, #1
 800969e:	b291      	uxth	r1, r2
 80096a0:	4a36      	ldr	r2, [pc, #216]	; (800977c <update_wall+0x60c>)
 80096a2:	332c      	adds	r3, #44	; 0x2c
 80096a4:	005b      	lsls	r3, r3, #1
 80096a6:	4413      	add	r3, r2
 80096a8:	460a      	mov	r2, r1
 80096aa:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 80096ac:	4b36      	ldr	r3, [pc, #216]	; (8009788 <update_wall+0x618>)
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d01a      	beq.n	80096ea <update_wall+0x57a>
 80096b4:	4b32      	ldr	r3, [pc, #200]	; (8009780 <update_wall+0x610>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	3b01      	subs	r3, #1
 80096ba:	4a30      	ldr	r2, [pc, #192]	; (800977c <update_wall+0x60c>)
 80096bc:	330c      	adds	r3, #12
 80096be:	005b      	lsls	r3, r3, #1
 80096c0:	4413      	add	r3, r2
 80096c2:	88db      	ldrh	r3, [r3, #6]
 80096c4:	b21a      	sxth	r2, r3
 80096c6:	4b2c      	ldr	r3, [pc, #176]	; (8009778 <update_wall+0x608>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2101      	movs	r1, #1
 80096cc:	fa01 f303 	lsl.w	r3, r1, r3
 80096d0:	b21b      	sxth	r3, r3
 80096d2:	4313      	orrs	r3, r2
 80096d4:	b21a      	sxth	r2, r3
 80096d6:	4b2a      	ldr	r3, [pc, #168]	; (8009780 <update_wall+0x610>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	3b01      	subs	r3, #1
 80096dc:	b291      	uxth	r1, r2
 80096de:	4a27      	ldr	r2, [pc, #156]	; (800977c <update_wall+0x60c>)
 80096e0:	330c      	adds	r3, #12
 80096e2:	005b      	lsls	r3, r3, #1
 80096e4:	4413      	add	r3, r2
 80096e6:	460a      	mov	r2, r1
 80096e8:	80da      	strh	r2, [r3, #6]
		}

		if (y <= 14) {
 80096ea:	4b25      	ldr	r3, [pc, #148]	; (8009780 <update_wall+0x610>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2b0e      	cmp	r3, #14
 80096f0:	dc3c      	bgt.n	800976c <update_wall+0x5fc>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 80096f2:	4b23      	ldr	r3, [pc, #140]	; (8009780 <update_wall+0x610>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a21      	ldr	r2, [pc, #132]	; (800977c <update_wall+0x60c>)
 80096f8:	332c      	adds	r3, #44	; 0x2c
 80096fa:	005b      	lsls	r3, r3, #1
 80096fc:	4413      	add	r3, r2
 80096fe:	885b      	ldrh	r3, [r3, #2]
 8009700:	b21a      	sxth	r2, r3
 8009702:	4b1d      	ldr	r3, [pc, #116]	; (8009778 <update_wall+0x608>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2101      	movs	r1, #1
 8009708:	fa01 f303 	lsl.w	r3, r1, r3
 800970c:	b21b      	sxth	r3, r3
 800970e:	4313      	orrs	r3, r2
 8009710:	b21a      	sxth	r2, r3
 8009712:	4b1b      	ldr	r3, [pc, #108]	; (8009780 <update_wall+0x610>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	b291      	uxth	r1, r2
 8009718:	4a18      	ldr	r2, [pc, #96]	; (800977c <update_wall+0x60c>)
 800971a:	332c      	adds	r3, #44	; 0x2c
 800971c:	005b      	lsls	r3, r3, #1
 800971e:	4413      	add	r3, r2
 8009720:	460a      	mov	r2, r1
 8009722:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8009724:	4b19      	ldr	r3, [pc, #100]	; (800978c <update_wall+0x61c>)
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d01f      	beq.n	800976c <update_wall+0x5fc>
 800972c:	4b14      	ldr	r3, [pc, #80]	; (8009780 <update_wall+0x610>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a12      	ldr	r2, [pc, #72]	; (800977c <update_wall+0x60c>)
 8009732:	330c      	adds	r3, #12
 8009734:	005b      	lsls	r3, r3, #1
 8009736:	4413      	add	r3, r2
 8009738:	88db      	ldrh	r3, [r3, #6]
 800973a:	b21a      	sxth	r2, r3
 800973c:	4b0e      	ldr	r3, [pc, #56]	; (8009778 <update_wall+0x608>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2101      	movs	r1, #1
 8009742:	fa01 f303 	lsl.w	r3, r1, r3
 8009746:	b21b      	sxth	r3, r3
 8009748:	4313      	orrs	r3, r2
 800974a:	b21a      	sxth	r2, r3
 800974c:	4b0c      	ldr	r3, [pc, #48]	; (8009780 <update_wall+0x610>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	b291      	uxth	r1, r2
 8009752:	4a0a      	ldr	r2, [pc, #40]	; (800977c <update_wall+0x60c>)
 8009754:	330c      	adds	r3, #12
 8009756:	005b      	lsls	r3, r3, #1
 8009758:	4413      	add	r3, r2
 800975a:	460a      	mov	r2, r1
 800975c:	80da      	strh	r2, [r3, #6]
		}

		break;
 800975e:	e005      	b.n	800976c <update_wall+0x5fc>
		break;
 8009760:	bf00      	nop
 8009762:	e004      	b.n	800976e <update_wall+0x5fe>
		break;
 8009764:	bf00      	nop
 8009766:	e002      	b.n	800976e <update_wall+0x5fe>
		break;
 8009768:	bf00      	nop
 800976a:	e000      	b.n	800976e <update_wall+0x5fe>
		break;
 800976c:	bf00      	nop

	}


}
 800976e:	bf00      	nop
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr
 8009778:	20000f70 	.word	0x20000f70
 800977c:	20000f80 	.word	0x20000f80
 8009780:	20000f74 	.word	0x20000f74
 8009784:	20000f7c 	.word	0x20000f7c
 8009788:	20000f7e 	.word	0x20000f7e
 800978c:	20000f7d 	.word	0x20000f7d

08009790 <search_AroundWalkCount>:


void search_AroundWalkCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count){
 8009790:	b480      	push	{r7}
 8009792:	b087      	sub	sp, #28
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	607a      	str	r2, [r7, #4]
 800979c:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = MAX_WALKCOUNT;}
 800979e:	4b49      	ldr	r3, [pc, #292]	; (80098c4 <search_AroundWalkCount+0x134>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2b0e      	cmp	r3, #14
 80097a4:	dd02      	ble.n	80097ac <search_AroundWalkCount+0x1c>
 80097a6:	23ff      	movs	r3, #255	; 0xff
 80097a8:	82fb      	strh	r3, [r7, #22]
 80097aa:	e00a      	b.n	80097c2 <search_AroundWalkCount+0x32>
	else {north_count = walk_count[16 * x + y + 1];}
 80097ac:	4b46      	ldr	r3, [pc, #280]	; (80098c8 <search_AroundWalkCount+0x138>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	011a      	lsls	r2, r3, #4
 80097b2:	4b44      	ldr	r3, [pc, #272]	; (80098c4 <search_AroundWalkCount+0x134>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4413      	add	r3, r2
 80097b8:	3301      	adds	r3, #1
 80097ba:	4a44      	ldr	r2, [pc, #272]	; (80098cc <search_AroundWalkCount+0x13c>)
 80097bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097c0:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = MAX_WALKCOUNT;}
 80097c2:	4b41      	ldr	r3, [pc, #260]	; (80098c8 <search_AroundWalkCount+0x138>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2b0e      	cmp	r3, #14
 80097c8:	dd02      	ble.n	80097d0 <search_AroundWalkCount+0x40>
 80097ca:	23ff      	movs	r3, #255	; 0xff
 80097cc:	82bb      	strh	r3, [r7, #20]
 80097ce:	e00a      	b.n	80097e6 <search_AroundWalkCount+0x56>
	else {east_count = walk_count[16 * (x + 1) + y];}
 80097d0:	4b3d      	ldr	r3, [pc, #244]	; (80098c8 <search_AroundWalkCount+0x138>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	3301      	adds	r3, #1
 80097d6:	011a      	lsls	r2, r3, #4
 80097d8:	4b3a      	ldr	r3, [pc, #232]	; (80098c4 <search_AroundWalkCount+0x134>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4413      	add	r3, r2
 80097de:	4a3b      	ldr	r2, [pc, #236]	; (80098cc <search_AroundWalkCount+0x13c>)
 80097e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097e4:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = MAX_WALKCOUNT;}
 80097e6:	4b37      	ldr	r3, [pc, #220]	; (80098c4 <search_AroundWalkCount+0x134>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	dc02      	bgt.n	80097f4 <search_AroundWalkCount+0x64>
 80097ee:	23ff      	movs	r3, #255	; 0xff
 80097f0:	827b      	strh	r3, [r7, #18]
 80097f2:	e00a      	b.n	800980a <search_AroundWalkCount+0x7a>
	else {south_count = walk_count[16 * x + y - 1];}
 80097f4:	4b34      	ldr	r3, [pc, #208]	; (80098c8 <search_AroundWalkCount+0x138>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	011a      	lsls	r2, r3, #4
 80097fa:	4b32      	ldr	r3, [pc, #200]	; (80098c4 <search_AroundWalkCount+0x134>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4413      	add	r3, r2
 8009800:	3b01      	subs	r3, #1
 8009802:	4a32      	ldr	r2, [pc, #200]	; (80098cc <search_AroundWalkCount+0x13c>)
 8009804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009808:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = MAX_WALKCOUNT;}
 800980a:	4b2f      	ldr	r3, [pc, #188]	; (80098c8 <search_AroundWalkCount+0x138>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	dc02      	bgt.n	8009818 <search_AroundWalkCount+0x88>
 8009812:	23ff      	movs	r3, #255	; 0xff
 8009814:	823b      	strh	r3, [r7, #16]
 8009816:	e00a      	b.n	800982e <search_AroundWalkCount+0x9e>
	else {west_count = walk_count[16 * (x - 1) + y];}
 8009818:	4b2b      	ldr	r3, [pc, #172]	; (80098c8 <search_AroundWalkCount+0x138>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	3b01      	subs	r3, #1
 800981e:	011a      	lsls	r2, r3, #4
 8009820:	4b28      	ldr	r3, [pc, #160]	; (80098c4 <search_AroundWalkCount+0x134>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4413      	add	r3, r2
 8009826:	4a29      	ldr	r2, [pc, #164]	; (80098cc <search_AroundWalkCount+0x13c>)
 8009828:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800982c:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 800982e:	4b28      	ldr	r3, [pc, #160]	; (80098d0 <search_AroundWalkCount+0x140>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	3b01      	subs	r3, #1
 8009834:	2b03      	cmp	r3, #3
 8009836:	d83f      	bhi.n	80098b8 <search_AroundWalkCount+0x128>
 8009838:	a201      	add	r2, pc, #4	; (adr r2, 8009840 <search_AroundWalkCount+0xb0>)
 800983a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800983e:	bf00      	nop
 8009840:	08009851 	.word	0x08009851
 8009844:	0800986b 	.word	0x0800986b
 8009848:	08009885 	.word	0x08009885
 800984c:	0800989f 	.word	0x0800989f
	case 1:
		*front_count = north_count;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	8afa      	ldrh	r2, [r7, #22]
 8009854:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	8aba      	ldrh	r2, [r7, #20]
 800985a:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	8a7a      	ldrh	r2, [r7, #18]
 8009860:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	8a3a      	ldrh	r2, [r7, #16]
 8009866:	801a      	strh	r2, [r3, #0]
		break;
 8009868:	e026      	b.n	80098b8 <search_AroundWalkCount+0x128>
	case 2:
		*front_count = east_count;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	8aba      	ldrh	r2, [r7, #20]
 800986e:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	8a7a      	ldrh	r2, [r7, #18]
 8009874:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	8a3a      	ldrh	r2, [r7, #16]
 800987a:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	8afa      	ldrh	r2, [r7, #22]
 8009880:	801a      	strh	r2, [r3, #0]
		break;
 8009882:	e019      	b.n	80098b8 <search_AroundWalkCount+0x128>
	case 3:
		*front_count = south_count;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	8a7a      	ldrh	r2, [r7, #18]
 8009888:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	8a3a      	ldrh	r2, [r7, #16]
 800988e:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	8afa      	ldrh	r2, [r7, #22]
 8009894:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	8aba      	ldrh	r2, [r7, #20]
 800989a:	801a      	strh	r2, [r3, #0]
		break;
 800989c:	e00c      	b.n	80098b8 <search_AroundWalkCount+0x128>
	case 4:
		*front_count = west_count;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	8a3a      	ldrh	r2, [r7, #16]
 80098a2:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	8afa      	ldrh	r2, [r7, #22]
 80098a8:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	8aba      	ldrh	r2, [r7, #20]
 80098ae:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	8a7a      	ldrh	r2, [r7, #18]
 80098b4:	801a      	strh	r2, [r3, #0]
		break;
 80098b6:	bf00      	nop

	}


}
 80098b8:	bf00      	nop
 80098ba:	371c      	adds	r7, #28
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	20000f74 	.word	0x20000f74
 80098c8:	20000f70 	.word	0x20000f70
 80098cc:	20001070 	.word	0x20001070
 80098d0:	20000f78 	.word	0x20000f78

080098d4 <maze_maker0>:



void maze_maker0(_Bool WallUpdataMode,_Bool WalkUpdataMode) {
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b088      	sub	sp, #32
 80098d8:	af00      	add	r7, sp, #0
 80098da:	4603      	mov	r3, r0
 80098dc:	460a      	mov	r2, r1
 80098de:	71fb      	strb	r3, [r7, #7]
 80098e0:	4613      	mov	r3, r2
 80098e2:	71bb      	strb	r3, [r7, #6]
	if(WallUpdataMode){
 80098e4:	79fb      	ldrb	r3, [r7, #7]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d001      	beq.n	80098ee <maze_maker0+0x1a>
	update_wall();
 80098ea:	f7ff fc41 	bl	8009170 <update_wall>
	}

	if(WalkUpdataMode){
 80098ee:	79bb      	ldrb	r3, [r7, #6]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f000 80e2 	beq.w	8009aba <maze_maker0+0x1e6>
//	歩数マップを作成　*************************************
	int tt = 0;
 80098f6:	2300      	movs	r3, #0
 80098f8:	61fb      	str	r3, [r7, #28]
	while (tt <= 255) {
 80098fa:	e007      	b.n	800990c <maze_maker0+0x38>
		walk_count[tt] = 255;
 80098fc:	4a71      	ldr	r2, [pc, #452]	; (8009ac4 <maze_maker0+0x1f0>)
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	21ff      	movs	r1, #255	; 0xff
 8009902:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		tt++;
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	3301      	adds	r3, #1
 800990a:	61fb      	str	r3, [r7, #28]
	while (tt <= 255) {
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	2bff      	cmp	r3, #255	; 0xff
 8009910:	ddf4      	ble.n	80098fc <maze_maker0+0x28>
	}
//　ゴール座標の歩数を0にする
	walk_count[(GOAL_X * 16) + GOAL_Y] = 0;
 8009912:	4b6c      	ldr	r3, [pc, #432]	; (8009ac4 <maze_maker0+0x1f0>)
 8009914:	2200      	movs	r2, #0
 8009916:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	walk_count[((GOAL_X + 1) * 16) + GOAL_Y] = 0;
 800991a:	4b6a      	ldr	r3, [pc, #424]	; (8009ac4 <maze_maker0+0x1f0>)
 800991c:	2200      	movs	r2, #0
 800991e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	walk_count[(GOAL_X * 16) + GOAL_Y + 1] = 0;
 8009922:	4b68      	ldr	r3, [pc, #416]	; (8009ac4 <maze_maker0+0x1f0>)
 8009924:	2200      	movs	r2, #0
 8009926:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	walk_count[((GOAL_X + 1) * 16) + GOAL_Y + 1] = 0;
 800992a:	4b66      	ldr	r3, [pc, #408]	; (8009ac4 <maze_maker0+0x1f0>)
 800992c:	2200      	movs	r2, #0
 800992e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	unsigned short coordinate;
	unsigned short count_number = 1;
 8009932:	2301      	movs	r3, #1
 8009934:	833b      	strh	r3, [r7, #24]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north,wall_south,wall_east,wall_west;
	while (count_number <= 255) {
 8009936:	e0ba      	b.n	8009aae <maze_maker0+0x1da>
		coordinate = 0;
 8009938:	2300      	movs	r3, #0
 800993a:	837b      	strh	r3, [r7, #26]
		while (coordinate <= 255) {
 800993c:	e0ab      	b.n	8009a96 <maze_maker0+0x1c2>
			if (walk_count[coordinate] == count_number - 1) {
 800993e:	8b7b      	ldrh	r3, [r7, #26]
 8009940:	4a60      	ldr	r2, [pc, #384]	; (8009ac4 <maze_maker0+0x1f0>)
 8009942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009946:	461a      	mov	r2, r3
 8009948:	8b3b      	ldrh	r3, [r7, #24]
 800994a:	3b01      	subs	r3, #1
 800994c:	429a      	cmp	r2, r3
 800994e:	f040 809c 	bne.w	8009a8a <maze_maker0+0x1b6>
				Xcoordinate = (coordinate & 0xf0) >> 4;
 8009952:	8b7b      	ldrh	r3, [r7, #26]
 8009954:	111b      	asrs	r3, r3, #4
 8009956:	b29b      	uxth	r3, r3
 8009958:	f003 030f 	and.w	r3, r3, #15
 800995c:	81fb      	strh	r3, [r7, #14]
				Ycoordinate = coordinate & 0x0f;
 800995e:	8b7b      	ldrh	r3, [r7, #26]
 8009960:	f003 030f 	and.w	r3, r3, #15
 8009964:	81bb      	strh	r3, [r7, #12]

//壁情報のときに使う

				if (Ycoordinate <= 14) {
 8009966:	89bb      	ldrh	r3, [r7, #12]
 8009968:	2b0e      	cmp	r3, #14
 800996a:	d80e      	bhi.n	800998a <maze_maker0+0xb6>
					wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 800996c:	89bb      	ldrh	r3, [r7, #12]
 800996e:	4a56      	ldr	r2, [pc, #344]	; (8009ac8 <maze_maker0+0x1f4>)
 8009970:	330c      	adds	r3, #12
 8009972:	005b      	lsls	r3, r3, #1
 8009974:	4413      	add	r3, r2
 8009976:	88db      	ldrh	r3, [r3, #6]
 8009978:	b21a      	sxth	r2, r3
 800997a:	89fb      	ldrh	r3, [r7, #14]
 800997c:	2101      	movs	r1, #1
 800997e:	fa01 f303 	lsl.w	r3, r1, r3
 8009982:	b21b      	sxth	r3, r3
 8009984:	4013      	ands	r3, r2
 8009986:	b21b      	sxth	r3, r3
 8009988:	82fb      	strh	r3, [r7, #22]
				}
				if (Ycoordinate >= 1) {
 800998a:	89bb      	ldrh	r3, [r7, #12]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d00f      	beq.n	80099b0 <maze_maker0+0xdc>
					wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8009990:	89bb      	ldrh	r3, [r7, #12]
 8009992:	3b01      	subs	r3, #1
 8009994:	4a4c      	ldr	r2, [pc, #304]	; (8009ac8 <maze_maker0+0x1f4>)
 8009996:	330c      	adds	r3, #12
 8009998:	005b      	lsls	r3, r3, #1
 800999a:	4413      	add	r3, r2
 800999c:	88db      	ldrh	r3, [r3, #6]
 800999e:	b21a      	sxth	r2, r3
 80099a0:	89fb      	ldrh	r3, [r7, #14]
 80099a2:	2101      	movs	r1, #1
 80099a4:	fa01 f303 	lsl.w	r3, r1, r3
 80099a8:	b21b      	sxth	r3, r3
 80099aa:	4013      	ands	r3, r2
 80099ac:	b21b      	sxth	r3, r3
 80099ae:	82bb      	strh	r3, [r7, #20]
				}
				if (Xcoordinate <= 14) {
 80099b0:	89fb      	ldrh	r3, [r7, #14]
 80099b2:	2b0e      	cmp	r3, #14
 80099b4:	d80c      	bhi.n	80099d0 <maze_maker0+0xfc>
					wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 80099b6:	89fb      	ldrh	r3, [r7, #14]
 80099b8:	4a43      	ldr	r2, [pc, #268]	; (8009ac8 <maze_maker0+0x1f4>)
 80099ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099be:	b21a      	sxth	r2, r3
 80099c0:	89bb      	ldrh	r3, [r7, #12]
 80099c2:	2101      	movs	r1, #1
 80099c4:	fa01 f303 	lsl.w	r3, r1, r3
 80099c8:	b21b      	sxth	r3, r3
 80099ca:	4013      	ands	r3, r2
 80099cc:	b21b      	sxth	r3, r3
 80099ce:	827b      	strh	r3, [r7, #18]
				}
				if (Xcoordinate >= 1) {
 80099d0:	89fb      	ldrh	r3, [r7, #14]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00d      	beq.n	80099f2 <maze_maker0+0x11e>
					wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 80099d6:	89fb      	ldrh	r3, [r7, #14]
 80099d8:	3b01      	subs	r3, #1
 80099da:	4a3b      	ldr	r2, [pc, #236]	; (8009ac8 <maze_maker0+0x1f4>)
 80099dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099e0:	b21a      	sxth	r2, r3
 80099e2:	89bb      	ldrh	r3, [r7, #12]
 80099e4:	2101      	movs	r1, #1
 80099e6:	fa01 f303 	lsl.w	r3, r1, r3
 80099ea:	b21b      	sxth	r3, r3
 80099ec:	4013      	ands	r3, r2
 80099ee:	b21b      	sxth	r3, r3
 80099f0:	823b      	strh	r3, [r7, #16]
				}

				if (walk_count[coordinate + 1] <= 254 || Ycoordinate == 15
 80099f2:	8b7b      	ldrh	r3, [r7, #26]
 80099f4:	3301      	adds	r3, #1
 80099f6:	4a33      	ldr	r2, [pc, #204]	; (8009ac4 <maze_maker0+0x1f0>)
 80099f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099fc:	2bfe      	cmp	r3, #254	; 0xfe
 80099fe:	d90b      	bls.n	8009a18 <maze_maker0+0x144>
 8009a00:	89bb      	ldrh	r3, [r7, #12]
 8009a02:	2b0f      	cmp	r3, #15
 8009a04:	d008      	beq.n	8009a18 <maze_maker0+0x144>
						|| wall_north >= 1) {
 8009a06:	8afb      	ldrh	r3, [r7, #22]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d105      	bne.n	8009a18 <maze_maker0+0x144>
				} else {
					walk_count[coordinate + 1] = count_number;
 8009a0c:	8b7b      	ldrh	r3, [r7, #26]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	492c      	ldr	r1, [pc, #176]	; (8009ac4 <maze_maker0+0x1f0>)
 8009a12:	8b3a      	ldrh	r2, [r7, #24]
 8009a14:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				}
				if (walk_count[coordinate - 1] <= 254 || Ycoordinate == 0
 8009a18:	8b7b      	ldrh	r3, [r7, #26]
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	4a29      	ldr	r2, [pc, #164]	; (8009ac4 <maze_maker0+0x1f0>)
 8009a1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a22:	2bfe      	cmp	r3, #254	; 0xfe
 8009a24:	d90b      	bls.n	8009a3e <maze_maker0+0x16a>
 8009a26:	89bb      	ldrh	r3, [r7, #12]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d008      	beq.n	8009a3e <maze_maker0+0x16a>
						|| wall_south >= 1) {
 8009a2c:	8abb      	ldrh	r3, [r7, #20]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d105      	bne.n	8009a3e <maze_maker0+0x16a>
				} else {
					walk_count[coordinate - 1] = count_number;
 8009a32:	8b7b      	ldrh	r3, [r7, #26]
 8009a34:	3b01      	subs	r3, #1
 8009a36:	4923      	ldr	r1, [pc, #140]	; (8009ac4 <maze_maker0+0x1f0>)
 8009a38:	8b3a      	ldrh	r2, [r7, #24]
 8009a3a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				}
				if (walk_count[coordinate + 16] <= 254 || Xcoordinate == 15
 8009a3e:	8b7b      	ldrh	r3, [r7, #26]
 8009a40:	3310      	adds	r3, #16
 8009a42:	4a20      	ldr	r2, [pc, #128]	; (8009ac4 <maze_maker0+0x1f0>)
 8009a44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a48:	2bfe      	cmp	r3, #254	; 0xfe
 8009a4a:	d90b      	bls.n	8009a64 <maze_maker0+0x190>
 8009a4c:	89fb      	ldrh	r3, [r7, #14]
 8009a4e:	2b0f      	cmp	r3, #15
 8009a50:	d008      	beq.n	8009a64 <maze_maker0+0x190>
						|| wall_east >= 1) {
 8009a52:	8a7b      	ldrh	r3, [r7, #18]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d105      	bne.n	8009a64 <maze_maker0+0x190>
				} else {
					walk_count[coordinate + 16] = count_number;
 8009a58:	8b7b      	ldrh	r3, [r7, #26]
 8009a5a:	3310      	adds	r3, #16
 8009a5c:	4919      	ldr	r1, [pc, #100]	; (8009ac4 <maze_maker0+0x1f0>)
 8009a5e:	8b3a      	ldrh	r2, [r7, #24]
 8009a60:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				}
				if (walk_count[coordinate - 16] <= 254 || Xcoordinate == 0
 8009a64:	8b7b      	ldrh	r3, [r7, #26]
 8009a66:	3b10      	subs	r3, #16
 8009a68:	4a16      	ldr	r2, [pc, #88]	; (8009ac4 <maze_maker0+0x1f0>)
 8009a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a6e:	2bfe      	cmp	r3, #254	; 0xfe
 8009a70:	d90b      	bls.n	8009a8a <maze_maker0+0x1b6>
 8009a72:	89fb      	ldrh	r3, [r7, #14]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d008      	beq.n	8009a8a <maze_maker0+0x1b6>
						|| wall_west >= 1) {
 8009a78:	8a3b      	ldrh	r3, [r7, #16]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d105      	bne.n	8009a8a <maze_maker0+0x1b6>
				} else {
					walk_count[coordinate - 16] = count_number;
 8009a7e:	8b7b      	ldrh	r3, [r7, #26]
 8009a80:	3b10      	subs	r3, #16
 8009a82:	4910      	ldr	r1, [pc, #64]	; (8009ac4 <maze_maker0+0x1f0>)
 8009a84:	8b3a      	ldrh	r2, [r7, #24]
 8009a86:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				}

			}
			if (coordinate == 255) {break;}
 8009a8a:	8b7b      	ldrh	r3, [r7, #26]
 8009a8c:	2bff      	cmp	r3, #255	; 0xff
 8009a8e:	d007      	beq.n	8009aa0 <maze_maker0+0x1cc>
			coordinate++;
 8009a90:	8b7b      	ldrh	r3, [r7, #26]
 8009a92:	3301      	adds	r3, #1
 8009a94:	837b      	strh	r3, [r7, #26]
		while (coordinate <= 255) {
 8009a96:	8b7b      	ldrh	r3, [r7, #26]
 8009a98:	2bff      	cmp	r3, #255	; 0xff
 8009a9a:	f67f af50 	bls.w	800993e <maze_maker0+0x6a>
 8009a9e:	e000      	b.n	8009aa2 <maze_maker0+0x1ce>
			if (coordinate == 255) {break;}
 8009aa0:	bf00      	nop
		}
		if (count_number == 255) {break;}
 8009aa2:	8b3b      	ldrh	r3, [r7, #24]
 8009aa4:	2bff      	cmp	r3, #255	; 0xff
 8009aa6:	d007      	beq.n	8009ab8 <maze_maker0+0x1e4>
		count_number++;
 8009aa8:	8b3b      	ldrh	r3, [r7, #24]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	833b      	strh	r3, [r7, #24]
	while (count_number <= 255) {
 8009aae:	8b3b      	ldrh	r3, [r7, #24]
 8009ab0:	2bff      	cmp	r3, #255	; 0xff
 8009ab2:	f67f af41 	bls.w	8009938 <maze_maker0+0x64>
	}
	}

}
 8009ab6:	e000      	b.n	8009aba <maze_maker0+0x1e6>
		if (count_number == 255) {break;}
 8009ab8:	bf00      	nop
}
 8009aba:	bf00      	nop
 8009abc:	3720      	adds	r7, #32
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	20001070 	.word	0x20001070
 8009ac8:	20000f80 	.word	0x20000f80

08009acc <maze_maker>:

//試験用歩数マップ作成短縮方法＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊

void maze_maker(void) {
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b0ae      	sub	sp, #184	; 0xb8
 8009ad0:	af00      	add	r7, sp, #0

	update_wall();
 8009ad2:	f7ff fb4d 	bl	8009170 <update_wall>

//ここから歩数マップを作る．*************************************
	int tt = 0;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	unsigned short count_box[40];
	unsigned short count_boxnext[40];
	while (tt <= 255) {
 8009adc:	e00a      	b.n	8009af4 <maze_maker+0x28>
		walk_count[tt] = 255;
 8009ade:	4ac1      	ldr	r2, [pc, #772]	; (8009de4 <maze_maker+0x318>)
 8009ae0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009ae4:	21ff      	movs	r1, #255	; 0xff
 8009ae6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		tt++;
 8009aea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009aee:	3301      	adds	r3, #1
 8009af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (tt <= 255) {
 8009af4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009af8:	2bff      	cmp	r3, #255	; 0xff
 8009afa:	ddf0      	ble.n	8009ade <maze_maker+0x12>
	}
	tt = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (tt <= 39) {
 8009b02:	e016      	b.n	8009b32 <maze_maker+0x66>
		count_box[tt] = 256;
 8009b04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b08:	005b      	lsls	r3, r3, #1
 8009b0a:	33b8      	adds	r3, #184	; 0xb8
 8009b0c:	443b      	add	r3, r7
 8009b0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b12:	f823 2c68 	strh.w	r2, [r3, #-104]
		count_boxnext[tt] = 256;
 8009b16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b1a:	005b      	lsls	r3, r3, #1
 8009b1c:	33b8      	adds	r3, #184	; 0xb8
 8009b1e:	443b      	add	r3, r7
 8009b20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b24:	f823 2cb8 	strh.w	r2, [r3, #-184]
		tt++;
 8009b28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (tt <= 39) {
 8009b32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b36:	2b27      	cmp	r3, #39	; 0x27
 8009b38:	dde4      	ble.n	8009b04 <maze_maker+0x38>
	}

	walk_count[(GOAL_X * 16) + GOAL_Y] = 0;
 8009b3a:	4baa      	ldr	r3, [pc, #680]	; (8009de4 <maze_maker+0x318>)
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	walk_count[((GOAL_X + 1) * 16) + GOAL_Y] = 0;
 8009b42:	4ba8      	ldr	r3, [pc, #672]	; (8009de4 <maze_maker+0x318>)
 8009b44:	2200      	movs	r2, #0
 8009b46:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	walk_count[(GOAL_X * 16) + GOAL_Y + 1] = 0;
 8009b4a:	4ba6      	ldr	r3, [pc, #664]	; (8009de4 <maze_maker+0x318>)
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	walk_count[((GOAL_X + 1) * 16) + GOAL_Y + 1] = 0;
 8009b52:	4ba4      	ldr	r3, [pc, #656]	; (8009de4 <maze_maker+0x318>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	count_box[0] = (GOAL_X * 16) + GOAL_Y;
 8009b5a:	2333      	movs	r3, #51	; 0x33
 8009b5c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	count_box[1] = ((GOAL_X + 1) * 16) + GOAL_Y;
 8009b60:	2343      	movs	r3, #67	; 0x43
 8009b62:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	count_box[2] = (GOAL_X * 16) + GOAL_Y + 1;
 8009b66:	2334      	movs	r3, #52	; 0x34
 8009b68:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	count_box[3] = ((GOAL_X + 1) * 16) + GOAL_Y + 1;
 8009b6c:	2344      	movs	r3, #68	; 0x44
 8009b6e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	unsigned short coordinate;
	unsigned short count_number = 1;
 8009b72:	2301      	movs	r3, #1
 8009b74:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north,wall_south,wall_east,wall_west;
	unsigned short box,boxnext;
	while (count_number <= 255) {
 8009b78:	e166      	b.n	8009e48 <maze_maker+0x37c>
		box=0;boxnext=0;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8009b80:	2300      	movs	r3, #0
 8009b82:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6

		while (box <= 39) {
 8009b86:	e11f      	b.n	8009dc8 <maze_maker+0x2fc>

			coordinate = count_box[box];
 8009b88:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009b8c:	005b      	lsls	r3, r3, #1
 8009b8e:	33b8      	adds	r3, #184	; 0xb8
 8009b90:	443b      	add	r3, r7
 8009b92:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 8009b96:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
			Xcoordinate = (coordinate & 0xf0) >> 4;
 8009b9a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009b9e:	111b      	asrs	r3, r3, #4
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	f003 030f 	and.w	r3, r3, #15
 8009ba6:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
			Ycoordinate = coordinate & 0x0f;
 8009baa:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009bae:	f003 030f 	and.w	r3, r3, #15
 8009bb2:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
//壁情報のときに使う
			if (Ycoordinate <= 14) {
 8009bb6:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009bba:	2b0e      	cmp	r3, #14
 8009bbc:	d811      	bhi.n	8009be2 <maze_maker+0x116>
				wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8009bbe:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009bc2:	4a89      	ldr	r2, [pc, #548]	; (8009de8 <maze_maker+0x31c>)
 8009bc4:	330c      	adds	r3, #12
 8009bc6:	005b      	lsls	r3, r3, #1
 8009bc8:	4413      	add	r3, r2
 8009bca:	88db      	ldrh	r3, [r3, #6]
 8009bcc:	b21a      	sxth	r2, r3
 8009bce:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009bd2:	2101      	movs	r1, #1
 8009bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd8:	b21b      	sxth	r3, r3
 8009bda:	4013      	ands	r3, r2
 8009bdc:	b21b      	sxth	r3, r3
 8009bde:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
			}
			if (Ycoordinate >= 1) {
 8009be2:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d012      	beq.n	8009c10 <maze_maker+0x144>
				wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8009bea:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	4a7d      	ldr	r2, [pc, #500]	; (8009de8 <maze_maker+0x31c>)
 8009bf2:	330c      	adds	r3, #12
 8009bf4:	005b      	lsls	r3, r3, #1
 8009bf6:	4413      	add	r3, r2
 8009bf8:	88db      	ldrh	r3, [r3, #6]
 8009bfa:	b21a      	sxth	r2, r3
 8009bfc:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009c00:	2101      	movs	r1, #1
 8009c02:	fa01 f303 	lsl.w	r3, r1, r3
 8009c06:	b21b      	sxth	r3, r3
 8009c08:	4013      	ands	r3, r2
 8009c0a:	b21b      	sxth	r3, r3
 8009c0c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
			}
			if (Xcoordinate <= 14) {
 8009c10:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009c14:	2b0e      	cmp	r3, #14
 8009c16:	d80f      	bhi.n	8009c38 <maze_maker+0x16c>
				wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8009c18:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009c1c:	4a72      	ldr	r2, [pc, #456]	; (8009de8 <maze_maker+0x31c>)
 8009c1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c22:	b21a      	sxth	r2, r3
 8009c24:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009c28:	2101      	movs	r1, #1
 8009c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8009c2e:	b21b      	sxth	r3, r3
 8009c30:	4013      	ands	r3, r2
 8009c32:	b21b      	sxth	r3, r3
 8009c34:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
			}
			if (Xcoordinate >= 1) {
 8009c38:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d010      	beq.n	8009c62 <maze_maker+0x196>
				wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 8009c40:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009c44:	3b01      	subs	r3, #1
 8009c46:	4a68      	ldr	r2, [pc, #416]	; (8009de8 <maze_maker+0x31c>)
 8009c48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c4c:	b21a      	sxth	r2, r3
 8009c4e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009c52:	2101      	movs	r1, #1
 8009c54:	fa01 f303 	lsl.w	r3, r1, r3
 8009c58:	b21b      	sxth	r3, r3
 8009c5a:	4013      	ands	r3, r2
 8009c5c:	b21b      	sxth	r3, r3
 8009c5e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			}

			if (walk_count[coordinate + 1] <= 254 || Ycoordinate == 15
 8009c62:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009c66:	3301      	adds	r3, #1
 8009c68:	4a5e      	ldr	r2, [pc, #376]	; (8009de4 <maze_maker+0x318>)
 8009c6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c6e:	2bfe      	cmp	r3, #254	; 0xfe
 8009c70:	d91f      	bls.n	8009cb2 <maze_maker+0x1e6>
 8009c72:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009c76:	2b0f      	cmp	r3, #15
 8009c78:	d01b      	beq.n	8009cb2 <maze_maker+0x1e6>
					|| wall_north >= 1) {} else {
 8009c7a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d117      	bne.n	8009cb2 <maze_maker+0x1e6>
				walk_count[coordinate + 1] = count_number;
 8009c82:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009c86:	3301      	adds	r3, #1
 8009c88:	4956      	ldr	r1, [pc, #344]	; (8009de4 <maze_maker+0x318>)
 8009c8a:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8009c8e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				count_boxnext[boxnext] = coordinate + 1;
 8009c92:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009c96:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009c9a:	3201      	adds	r2, #1
 8009c9c:	b292      	uxth	r2, r2
 8009c9e:	005b      	lsls	r3, r3, #1
 8009ca0:	33b8      	adds	r3, #184	; 0xb8
 8009ca2:	443b      	add	r3, r7
 8009ca4:	f823 2cb8 	strh.w	r2, [r3, #-184]
				boxnext++;
 8009ca8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009cac:	3301      	adds	r3, #1
 8009cae:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			}
			if (walk_count[coordinate - 1] <= 254 || Ycoordinate == 0
 8009cb2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	4a4a      	ldr	r2, [pc, #296]	; (8009de4 <maze_maker+0x318>)
 8009cba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cbe:	2bfe      	cmp	r3, #254	; 0xfe
 8009cc0:	d91f      	bls.n	8009d02 <maze_maker+0x236>
 8009cc2:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d01b      	beq.n	8009d02 <maze_maker+0x236>
					|| wall_south >= 1) {} else {
 8009cca:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d117      	bne.n	8009d02 <maze_maker+0x236>
				walk_count[coordinate - 1] = count_number;
 8009cd2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009cd6:	3b01      	subs	r3, #1
 8009cd8:	4942      	ldr	r1, [pc, #264]	; (8009de4 <maze_maker+0x318>)
 8009cda:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8009cde:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				count_boxnext[boxnext] = coordinate - 1;
 8009ce2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009ce6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009cea:	3a01      	subs	r2, #1
 8009cec:	b292      	uxth	r2, r2
 8009cee:	005b      	lsls	r3, r3, #1
 8009cf0:	33b8      	adds	r3, #184	; 0xb8
 8009cf2:	443b      	add	r3, r7
 8009cf4:	f823 2cb8 	strh.w	r2, [r3, #-184]
				boxnext++;
 8009cf8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			}
			if (walk_count[coordinate + 16] <= 254 || Xcoordinate == 15
 8009d02:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009d06:	3310      	adds	r3, #16
 8009d08:	4a36      	ldr	r2, [pc, #216]	; (8009de4 <maze_maker+0x318>)
 8009d0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d0e:	2bfe      	cmp	r3, #254	; 0xfe
 8009d10:	d91f      	bls.n	8009d52 <maze_maker+0x286>
 8009d12:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009d16:	2b0f      	cmp	r3, #15
 8009d18:	d01b      	beq.n	8009d52 <maze_maker+0x286>
					|| wall_east >= 1) {} else {
 8009d1a:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d117      	bne.n	8009d52 <maze_maker+0x286>
				walk_count[coordinate + 16] = count_number;
 8009d22:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009d26:	3310      	adds	r3, #16
 8009d28:	492e      	ldr	r1, [pc, #184]	; (8009de4 <maze_maker+0x318>)
 8009d2a:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8009d2e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				count_boxnext[boxnext] = coordinate + 16;
 8009d32:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009d36:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009d3a:	3210      	adds	r2, #16
 8009d3c:	b292      	uxth	r2, r2
 8009d3e:	005b      	lsls	r3, r3, #1
 8009d40:	33b8      	adds	r3, #184	; 0xb8
 8009d42:	443b      	add	r3, r7
 8009d44:	f823 2cb8 	strh.w	r2, [r3, #-184]
				boxnext++;
 8009d48:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			}
			if (walk_count[coordinate - 16] <= 254 || Xcoordinate == 0
 8009d52:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009d56:	3b10      	subs	r3, #16
 8009d58:	4a22      	ldr	r2, [pc, #136]	; (8009de4 <maze_maker+0x318>)
 8009d5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d5e:	2bfe      	cmp	r3, #254	; 0xfe
 8009d60:	d91f      	bls.n	8009da2 <maze_maker+0x2d6>
 8009d62:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d01b      	beq.n	8009da2 <maze_maker+0x2d6>
					|| wall_west >= 1) {} else {
 8009d6a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d117      	bne.n	8009da2 <maze_maker+0x2d6>
				walk_count[coordinate - 16] = count_number;
 8009d72:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009d76:	3b10      	subs	r3, #16
 8009d78:	491a      	ldr	r1, [pc, #104]	; (8009de4 <maze_maker+0x318>)
 8009d7a:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8009d7e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				count_boxnext[boxnext] = coordinate - 16;
 8009d82:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009d86:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009d8a:	3a10      	subs	r2, #16
 8009d8c:	b292      	uxth	r2, r2
 8009d8e:	005b      	lsls	r3, r3, #1
 8009d90:	33b8      	adds	r3, #184	; 0xb8
 8009d92:	443b      	add	r3, r7
 8009d94:	f823 2cb8 	strh.w	r2, [r3, #-184]
				boxnext++;
 8009d98:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			}
			if (box == 39) {break;}
 8009da2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009da6:	2b27      	cmp	r3, #39	; 0x27
 8009da8:	d014      	beq.n	8009dd4 <maze_maker+0x308>
			box++;
 8009daa:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009dae:	3301      	adds	r3, #1
 8009db0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
			if (count_box[box] == 256) {break;}
 8009db4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009db8:	005b      	lsls	r3, r3, #1
 8009dba:	33b8      	adds	r3, #184	; 0xb8
 8009dbc:	443b      	add	r3, r7
 8009dbe:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 8009dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dc6:	d007      	beq.n	8009dd8 <maze_maker+0x30c>
		while (box <= 39) {
 8009dc8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009dcc:	2b27      	cmp	r3, #39	; 0x27
 8009dce:	f67f aedb 	bls.w	8009b88 <maze_maker+0xbc>
 8009dd2:	e002      	b.n	8009dda <maze_maker+0x30e>
			if (box == 39) {break;}
 8009dd4:	bf00      	nop
 8009dd6:	e000      	b.n	8009dda <maze_maker+0x30e>
			if (count_box[box] == 256) {break;}
 8009dd8:	bf00      	nop
		}

		tt = 0;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		while (tt <= 39) {
 8009de0:	e020      	b.n	8009e24 <maze_maker+0x358>
 8009de2:	bf00      	nop
 8009de4:	20001070 	.word	0x20001070
 8009de8:	20000f80 	.word	0x20000f80
			count_box[tt] = count_boxnext[tt];
 8009dec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009df0:	005b      	lsls	r3, r3, #1
 8009df2:	33b8      	adds	r3, #184	; 0xb8
 8009df4:	443b      	add	r3, r7
 8009df6:	f833 2cb8 	ldrh.w	r2, [r3, #-184]
 8009dfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009dfe:	005b      	lsls	r3, r3, #1
 8009e00:	33b8      	adds	r3, #184	; 0xb8
 8009e02:	443b      	add	r3, r7
 8009e04:	f823 2c68 	strh.w	r2, [r3, #-104]
			count_boxnext[tt] = 256;
 8009e08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e0c:	005b      	lsls	r3, r3, #1
 8009e0e:	33b8      	adds	r3, #184	; 0xb8
 8009e10:	443b      	add	r3, r7
 8009e12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e16:	f823 2cb8 	strh.w	r2, [r3, #-184]
			tt++;
 8009e1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e1e:	3301      	adds	r3, #1
 8009e20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		while (tt <= 39) {
 8009e24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e28:	2b27      	cmp	r3, #39	; 0x27
 8009e2a:	dddf      	ble.n	8009dec <maze_maker+0x320>
		}
		if (count_number == 255 || count_box[0] == 256) {break;}
 8009e2c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009e30:	2bff      	cmp	r3, #255	; 0xff
 8009e32:	d00e      	beq.n	8009e52 <maze_maker+0x386>
 8009e34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e3c:	d009      	beq.n	8009e52 <maze_maker+0x386>
		count_number++;
 8009e3e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009e42:	3301      	adds	r3, #1
 8009e44:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	while (count_number <= 255) {
 8009e48:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009e4c:	2bff      	cmp	r3, #255	; 0xff
 8009e4e:	f67f ae94 	bls.w	8009b7a <maze_maker+0xae>
	}

}
 8009e52:	bf00      	nop
 8009e54:	37b8      	adds	r7, #184	; 0xb8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop

08009e5c <maze_makerBack>:


void maze_makerBack(void) {
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b0ae      	sub	sp, #184	; 0xb8
 8009e60:	af00      	add	r7, sp, #0
	update_wall();
 8009e62:	f7ff f985 	bl	8009170 <update_wall>

//ここから歩数マップを作る．*************************************
	int tt = 0;
 8009e66:	2300      	movs	r3, #0
 8009e68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	unsigned short count_box[40];
	unsigned short count_boxnext[40];
	while (tt <= 255) {
 8009e6c:	e00a      	b.n	8009e84 <maze_makerBack+0x28>
		walk_count[tt] = 255;
 8009e6e:	4ad1      	ldr	r2, [pc, #836]	; (800a1b4 <maze_makerBack+0x358>)
 8009e70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e74:	21ff      	movs	r1, #255	; 0xff
 8009e76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		tt++;
 8009e7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e7e:	3301      	adds	r3, #1
 8009e80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (tt <= 255) {
 8009e84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e88:	2bff      	cmp	r3, #255	; 0xff
 8009e8a:	ddf0      	ble.n	8009e6e <maze_makerBack+0x12>
	}
	tt = 0;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (tt <= 39) {
 8009e92:	e016      	b.n	8009ec2 <maze_makerBack+0x66>
		count_box[tt] = 256;
 8009e94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e98:	005b      	lsls	r3, r3, #1
 8009e9a:	33b8      	adds	r3, #184	; 0xb8
 8009e9c:	443b      	add	r3, r7
 8009e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ea2:	f823 2c68 	strh.w	r2, [r3, #-104]
		count_boxnext[tt] = 256;
 8009ea6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009eaa:	005b      	lsls	r3, r3, #1
 8009eac:	33b8      	adds	r3, #184	; 0xb8
 8009eae:	443b      	add	r3, r7
 8009eb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009eb4:	f823 2cb8 	strh.w	r2, [r3, #-184]
		tt++;
 8009eb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (tt <= 39) {
 8009ec2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009ec6:	2b27      	cmp	r3, #39	; 0x27
 8009ec8:	dde4      	ble.n	8009e94 <maze_makerBack+0x38>
	}

	walk_count[0] = 0;
 8009eca:	4bba      	ldr	r3, [pc, #744]	; (800a1b4 <maze_makerBack+0x358>)
 8009ecc:	2200      	movs	r2, #0
 8009ece:	801a      	strh	r2, [r3, #0]
	count_box[0] = 0;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	unsigned short coordinate;
	unsigned short count_number = 1;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north,wall_south,wall_east,wall_west;
	unsigned short box,boxnext;
	while (count_number <= 255) {
 8009edc:	e161      	b.n	800a1a2 <maze_makerBack+0x346>
		box=0;boxnext=0;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6

		while (box <= 39) {
 8009eea:	e11f      	b.n	800a12c <maze_makerBack+0x2d0>

			coordinate = count_box[box];
 8009eec:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009ef0:	005b      	lsls	r3, r3, #1
 8009ef2:	33b8      	adds	r3, #184	; 0xb8
 8009ef4:	443b      	add	r3, r7
 8009ef6:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 8009efa:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
			Xcoordinate = (coordinate & 0xf0) >> 4;
 8009efe:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009f02:	111b      	asrs	r3, r3, #4
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	f003 030f 	and.w	r3, r3, #15
 8009f0a:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
			Ycoordinate = coordinate & 0x0f;
 8009f0e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009f12:	f003 030f 	and.w	r3, r3, #15
 8009f16:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
//壁情報のときに使う
			if (Ycoordinate <= 14) {
 8009f1a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009f1e:	2b0e      	cmp	r3, #14
 8009f20:	d811      	bhi.n	8009f46 <maze_makerBack+0xea>
				wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8009f22:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009f26:	4aa4      	ldr	r2, [pc, #656]	; (800a1b8 <maze_makerBack+0x35c>)
 8009f28:	330c      	adds	r3, #12
 8009f2a:	005b      	lsls	r3, r3, #1
 8009f2c:	4413      	add	r3, r2
 8009f2e:	88db      	ldrh	r3, [r3, #6]
 8009f30:	b21a      	sxth	r2, r3
 8009f32:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009f36:	2101      	movs	r1, #1
 8009f38:	fa01 f303 	lsl.w	r3, r1, r3
 8009f3c:	b21b      	sxth	r3, r3
 8009f3e:	4013      	ands	r3, r2
 8009f40:	b21b      	sxth	r3, r3
 8009f42:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
			}
			if (Ycoordinate >= 1) {
 8009f46:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d012      	beq.n	8009f74 <maze_makerBack+0x118>
				wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8009f4e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009f52:	3b01      	subs	r3, #1
 8009f54:	4a98      	ldr	r2, [pc, #608]	; (800a1b8 <maze_makerBack+0x35c>)
 8009f56:	330c      	adds	r3, #12
 8009f58:	005b      	lsls	r3, r3, #1
 8009f5a:	4413      	add	r3, r2
 8009f5c:	88db      	ldrh	r3, [r3, #6]
 8009f5e:	b21a      	sxth	r2, r3
 8009f60:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009f64:	2101      	movs	r1, #1
 8009f66:	fa01 f303 	lsl.w	r3, r1, r3
 8009f6a:	b21b      	sxth	r3, r3
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	b21b      	sxth	r3, r3
 8009f70:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
			}
			if (Xcoordinate <= 14) {
 8009f74:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009f78:	2b0e      	cmp	r3, #14
 8009f7a:	d80f      	bhi.n	8009f9c <maze_makerBack+0x140>
				wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8009f7c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009f80:	4a8d      	ldr	r2, [pc, #564]	; (800a1b8 <maze_makerBack+0x35c>)
 8009f82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f86:	b21a      	sxth	r2, r3
 8009f88:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009f8c:	2101      	movs	r1, #1
 8009f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8009f92:	b21b      	sxth	r3, r3
 8009f94:	4013      	ands	r3, r2
 8009f96:	b21b      	sxth	r3, r3
 8009f98:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
			}
			if (Xcoordinate >= 1) {
 8009f9c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d010      	beq.n	8009fc6 <maze_makerBack+0x16a>
				wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 8009fa4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	4a83      	ldr	r2, [pc, #524]	; (800a1b8 <maze_makerBack+0x35c>)
 8009fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fb0:	b21a      	sxth	r2, r3
 8009fb2:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009fb6:	2101      	movs	r1, #1
 8009fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8009fbc:	b21b      	sxth	r3, r3
 8009fbe:	4013      	ands	r3, r2
 8009fc0:	b21b      	sxth	r3, r3
 8009fc2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			}

			if (walk_count[coordinate + 1] <= 254 || Ycoordinate == 15
 8009fc6:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009fca:	3301      	adds	r3, #1
 8009fcc:	4a79      	ldr	r2, [pc, #484]	; (800a1b4 <maze_makerBack+0x358>)
 8009fce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fd2:	2bfe      	cmp	r3, #254	; 0xfe
 8009fd4:	d91f      	bls.n	800a016 <maze_makerBack+0x1ba>
 8009fd6:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009fda:	2b0f      	cmp	r3, #15
 8009fdc:	d01b      	beq.n	800a016 <maze_makerBack+0x1ba>
					|| wall_north >= 1) {} else {
 8009fde:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d117      	bne.n	800a016 <maze_makerBack+0x1ba>
				walk_count[coordinate + 1] = count_number;
 8009fe6:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009fea:	3301      	adds	r3, #1
 8009fec:	4971      	ldr	r1, [pc, #452]	; (800a1b4 <maze_makerBack+0x358>)
 8009fee:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8009ff2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				count_boxnext[boxnext] = coordinate + 1;
 8009ff6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009ffa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009ffe:	3201      	adds	r2, #1
 800a000:	b292      	uxth	r2, r2
 800a002:	005b      	lsls	r3, r3, #1
 800a004:	33b8      	adds	r3, #184	; 0xb8
 800a006:	443b      	add	r3, r7
 800a008:	f823 2cb8 	strh.w	r2, [r3, #-184]
				boxnext++;
 800a00c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a010:	3301      	adds	r3, #1
 800a012:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			}
			if (walk_count[coordinate - 1] <= 254 || Ycoordinate == 0
 800a016:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800a01a:	3b01      	subs	r3, #1
 800a01c:	4a65      	ldr	r2, [pc, #404]	; (800a1b4 <maze_makerBack+0x358>)
 800a01e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a022:	2bfe      	cmp	r3, #254	; 0xfe
 800a024:	d91f      	bls.n	800a066 <maze_makerBack+0x20a>
 800a026:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d01b      	beq.n	800a066 <maze_makerBack+0x20a>
					|| wall_south >= 1) {} else {
 800a02e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800a032:	2b00      	cmp	r3, #0
 800a034:	d117      	bne.n	800a066 <maze_makerBack+0x20a>
				walk_count[coordinate - 1] = count_number;
 800a036:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800a03a:	3b01      	subs	r3, #1
 800a03c:	495d      	ldr	r1, [pc, #372]	; (800a1b4 <maze_makerBack+0x358>)
 800a03e:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 800a042:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				count_boxnext[boxnext] = coordinate - 1;
 800a046:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a04a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800a04e:	3a01      	subs	r2, #1
 800a050:	b292      	uxth	r2, r2
 800a052:	005b      	lsls	r3, r3, #1
 800a054:	33b8      	adds	r3, #184	; 0xb8
 800a056:	443b      	add	r3, r7
 800a058:	f823 2cb8 	strh.w	r2, [r3, #-184]
				boxnext++;
 800a05c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a060:	3301      	adds	r3, #1
 800a062:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			}
			if (walk_count[coordinate + 16] <= 254 || Xcoordinate == 15
 800a066:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800a06a:	3310      	adds	r3, #16
 800a06c:	4a51      	ldr	r2, [pc, #324]	; (800a1b4 <maze_makerBack+0x358>)
 800a06e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a072:	2bfe      	cmp	r3, #254	; 0xfe
 800a074:	d91f      	bls.n	800a0b6 <maze_makerBack+0x25a>
 800a076:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800a07a:	2b0f      	cmp	r3, #15
 800a07c:	d01b      	beq.n	800a0b6 <maze_makerBack+0x25a>
					|| wall_east >= 1) {} else {
 800a07e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800a082:	2b00      	cmp	r3, #0
 800a084:	d117      	bne.n	800a0b6 <maze_makerBack+0x25a>
				walk_count[coordinate + 16] = count_number;
 800a086:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800a08a:	3310      	adds	r3, #16
 800a08c:	4949      	ldr	r1, [pc, #292]	; (800a1b4 <maze_makerBack+0x358>)
 800a08e:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 800a092:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				count_boxnext[boxnext] = coordinate + 16;
 800a096:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a09a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800a09e:	3210      	adds	r2, #16
 800a0a0:	b292      	uxth	r2, r2
 800a0a2:	005b      	lsls	r3, r3, #1
 800a0a4:	33b8      	adds	r3, #184	; 0xb8
 800a0a6:	443b      	add	r3, r7
 800a0a8:	f823 2cb8 	strh.w	r2, [r3, #-184]
				boxnext++;
 800a0ac:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			}
			if (walk_count[coordinate - 16] <= 254 || Xcoordinate == 0
 800a0b6:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800a0ba:	3b10      	subs	r3, #16
 800a0bc:	4a3d      	ldr	r2, [pc, #244]	; (800a1b4 <maze_makerBack+0x358>)
 800a0be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0c2:	2bfe      	cmp	r3, #254	; 0xfe
 800a0c4:	d91f      	bls.n	800a106 <maze_makerBack+0x2aa>
 800a0c6:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d01b      	beq.n	800a106 <maze_makerBack+0x2aa>
					|| wall_west >= 1) {} else {
 800a0ce:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d117      	bne.n	800a106 <maze_makerBack+0x2aa>
				walk_count[coordinate - 16] = count_number;
 800a0d6:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800a0da:	3b10      	subs	r3, #16
 800a0dc:	4935      	ldr	r1, [pc, #212]	; (800a1b4 <maze_makerBack+0x358>)
 800a0de:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 800a0e2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				count_boxnext[boxnext] = coordinate - 16;
 800a0e6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a0ea:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800a0ee:	3a10      	subs	r2, #16
 800a0f0:	b292      	uxth	r2, r2
 800a0f2:	005b      	lsls	r3, r3, #1
 800a0f4:	33b8      	adds	r3, #184	; 0xb8
 800a0f6:	443b      	add	r3, r7
 800a0f8:	f823 2cb8 	strh.w	r2, [r3, #-184]
				boxnext++;
 800a0fc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a100:	3301      	adds	r3, #1
 800a102:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			}
			if (box == 39) {break;}
 800a106:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800a10a:	2b27      	cmp	r3, #39	; 0x27
 800a10c:	d014      	beq.n	800a138 <maze_makerBack+0x2dc>
			box++;
 800a10e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800a112:	3301      	adds	r3, #1
 800a114:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
			if (count_box[box] == 256) {break;}
 800a118:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800a11c:	005b      	lsls	r3, r3, #1
 800a11e:	33b8      	adds	r3, #184	; 0xb8
 800a120:	443b      	add	r3, r7
 800a122:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 800a126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a12a:	d007      	beq.n	800a13c <maze_makerBack+0x2e0>
		while (box <= 39) {
 800a12c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800a130:	2b27      	cmp	r3, #39	; 0x27
 800a132:	f67f aedb 	bls.w	8009eec <maze_makerBack+0x90>
 800a136:	e002      	b.n	800a13e <maze_makerBack+0x2e2>
			if (box == 39) {break;}
 800a138:	bf00      	nop
 800a13a:	e000      	b.n	800a13e <maze_makerBack+0x2e2>
			if (count_box[box] == 256) {break;}
 800a13c:	bf00      	nop
		}

		tt = 0;
 800a13e:	2300      	movs	r3, #0
 800a140:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		while (tt <= 39) {
 800a144:	e01b      	b.n	800a17e <maze_makerBack+0x322>
			count_box[tt] = count_boxnext[tt];
 800a146:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a14a:	005b      	lsls	r3, r3, #1
 800a14c:	33b8      	adds	r3, #184	; 0xb8
 800a14e:	443b      	add	r3, r7
 800a150:	f833 2cb8 	ldrh.w	r2, [r3, #-184]
 800a154:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a158:	005b      	lsls	r3, r3, #1
 800a15a:	33b8      	adds	r3, #184	; 0xb8
 800a15c:	443b      	add	r3, r7
 800a15e:	f823 2c68 	strh.w	r2, [r3, #-104]
			count_boxnext[tt] = 256;
 800a162:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a166:	005b      	lsls	r3, r3, #1
 800a168:	33b8      	adds	r3, #184	; 0xb8
 800a16a:	443b      	add	r3, r7
 800a16c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a170:	f823 2cb8 	strh.w	r2, [r3, #-184]
			tt++;
 800a174:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a178:	3301      	adds	r3, #1
 800a17a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		while (tt <= 39) {
 800a17e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a182:	2b27      	cmp	r3, #39	; 0x27
 800a184:	dddf      	ble.n	800a146 <maze_makerBack+0x2ea>
		}
		if (count_number == 255 || count_box[0] == 256) {break;}
 800a186:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800a18a:	2bff      	cmp	r3, #255	; 0xff
 800a18c:	d00e      	beq.n	800a1ac <maze_makerBack+0x350>
 800a18e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a196:	d009      	beq.n	800a1ac <maze_makerBack+0x350>
		count_number++;
 800a198:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800a19c:	3301      	adds	r3, #1
 800a19e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	while (count_number <= 255) {
 800a1a2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800a1a6:	2bff      	cmp	r3, #255	; 0xff
 800a1a8:	f67f ae99 	bls.w	8009ede <maze_makerBack+0x82>
	}

}
 800a1ac:	bf00      	nop
 800a1ae:	37b8      	adds	r7, #184	; 0xb8
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	20001070 	.word	0x20001070
 800a1b8:	20000f80 	.word	0x20000f80

0800a1bc <maze_display>:

void maze_display(void) {
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b08a      	sub	sp, #40	; 0x28
 800a1c0:	af00      	add	r7, sp, #0
	int ss;
	int tt = 14;
 800a1c2:	230e      	movs	r3, #14
 800a1c4:	623b      	str	r3, [r7, #32]
	unsigned short presence[16];

	printf(
 800a1c6:	48a6      	ldr	r0, [pc, #664]	; (800a460 <maze_display+0x2a4>)
 800a1c8:	f008 fa54 	bl	8012674 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	while (tt >= -1) { //ttはｙ軸
 800a1cc:	e0a3      	b.n	800a316 <maze_display+0x15a>
		ss = 0;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	627b      	str	r3, [r7, #36]	; 0x24
		printf("|%5d", walk_count[tt + 1]);
 800a1d2:	6a3b      	ldr	r3, [r7, #32]
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	4aa3      	ldr	r2, [pc, #652]	; (800a464 <maze_display+0x2a8>)
 800a1d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1dc:	4619      	mov	r1, r3
 800a1de:	48a2      	ldr	r0, [pc, #648]	; (800a468 <maze_display+0x2ac>)
 800a1e0:	f008 f9ac 	bl	801253c <iprintf>
		while (ss < 15) {
 800a1e4:	e039      	b.n	800a25a <maze_display+0x9e>
			presence[ss] = wall.row[ss] & (1 << (tt + 1));
 800a1e6:	4aa1      	ldr	r2, [pc, #644]	; (800a46c <maze_display+0x2b0>)
 800a1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1ee:	b21a      	sxth	r2, r3
 800a1f0:	6a3b      	ldr	r3, [r7, #32]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	2101      	movs	r1, #1
 800a1f6:	fa01 f303 	lsl.w	r3, r1, r3
 800a1fa:	b21b      	sxth	r3, r3
 800a1fc:	4013      	ands	r3, r2
 800a1fe:	b21b      	sxth	r3, r3
 800a200:	b29a      	uxth	r2, r3
 800a202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a204:	005b      	lsls	r3, r3, #1
 800a206:	3328      	adds	r3, #40	; 0x28
 800a208:	443b      	add	r3, r7
 800a20a:	f823 2c28 	strh.w	r2, [r3, #-40]
			if (presence[ss] == 0) {
 800a20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a210:	005b      	lsls	r3, r3, #1
 800a212:	3328      	adds	r3, #40	; 0x28
 800a214:	443b      	add	r3, r7
 800a216:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d10d      	bne.n	800a23a <maze_display+0x7e>
				printf(" %5d", walk_count[tt + 1 + (ss + 1) * 16]);
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	1c5a      	adds	r2, r3, #1
 800a222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a224:	3301      	adds	r3, #1
 800a226:	011b      	lsls	r3, r3, #4
 800a228:	4413      	add	r3, r2
 800a22a:	4a8e      	ldr	r2, [pc, #568]	; (800a464 <maze_display+0x2a8>)
 800a22c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a230:	4619      	mov	r1, r3
 800a232:	488f      	ldr	r0, [pc, #572]	; (800a470 <maze_display+0x2b4>)
 800a234:	f008 f982 	bl	801253c <iprintf>
 800a238:	e00c      	b.n	800a254 <maze_display+0x98>
			} else {
				printf("|%5d", walk_count[tt + 1 + (ss + 1) * 16]);
 800a23a:	6a3b      	ldr	r3, [r7, #32]
 800a23c:	1c5a      	adds	r2, r3, #1
 800a23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a240:	3301      	adds	r3, #1
 800a242:	011b      	lsls	r3, r3, #4
 800a244:	4413      	add	r3, r2
 800a246:	4a87      	ldr	r2, [pc, #540]	; (800a464 <maze_display+0x2a8>)
 800a248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a24c:	4619      	mov	r1, r3
 800a24e:	4886      	ldr	r0, [pc, #536]	; (800a468 <maze_display+0x2ac>)
 800a250:	f008 f974 	bl	801253c <iprintf>
			}
			ss++;
 800a254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a256:	3301      	adds	r3, #1
 800a258:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss < 15) {
 800a25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25c:	2b0e      	cmp	r3, #14
 800a25e:	ddc2      	ble.n	800a1e6 <maze_display+0x2a>
		}
		printf("|\n");
 800a260:	4884      	ldr	r0, [pc, #528]	; (800a474 <maze_display+0x2b8>)
 800a262:	f008 fa07 	bl	8012674 <puts>
		ss = 0;
 800a266:	2300      	movs	r3, #0
 800a268:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss <= 15) { // all clear***************************************
 800a26a:	e009      	b.n	800a280 <maze_display+0xc4>
			presence[ss] = 0;
 800a26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26e:	005b      	lsls	r3, r3, #1
 800a270:	3328      	adds	r3, #40	; 0x28
 800a272:	443b      	add	r3, r7
 800a274:	2200      	movs	r2, #0
 800a276:	f823 2c28 	strh.w	r2, [r3, #-40]
			ss++;
 800a27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27c:	3301      	adds	r3, #1
 800a27e:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss <= 15) { // all clear***************************************
 800a280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a282:	2b0f      	cmp	r3, #15
 800a284:	ddf2      	ble.n	800a26c <maze_display+0xb0>
		}
		ss = 0; // all clear***************************************
 800a286:	2300      	movs	r3, #0
 800a288:	627b      	str	r3, [r7, #36]	; 0x24
		if (tt <= -1) {
 800a28a:	6a3b      	ldr	r3, [r7, #32]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	db48      	blt.n	800a322 <maze_display+0x166>
			break;
		}
		while (ss <= 15) {
 800a290:	e026      	b.n	800a2e0 <maze_display+0x124>
			presence[ss] = wall.column[tt] & (1 << ss);
 800a292:	4a76      	ldr	r2, [pc, #472]	; (800a46c <maze_display+0x2b0>)
 800a294:	6a3b      	ldr	r3, [r7, #32]
 800a296:	330c      	adds	r3, #12
 800a298:	005b      	lsls	r3, r3, #1
 800a29a:	4413      	add	r3, r2
 800a29c:	88db      	ldrh	r3, [r3, #6]
 800a29e:	b21a      	sxth	r2, r3
 800a2a0:	2101      	movs	r1, #1
 800a2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a4:	fa01 f303 	lsl.w	r3, r1, r3
 800a2a8:	b21b      	sxth	r3, r3
 800a2aa:	4013      	ands	r3, r2
 800a2ac:	b21b      	sxth	r3, r3
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b2:	005b      	lsls	r3, r3, #1
 800a2b4:	3328      	adds	r3, #40	; 0x28
 800a2b6:	443b      	add	r3, r7
 800a2b8:	f823 2c28 	strh.w	r2, [r3, #-40]

			if (presence[ss] == 0) {
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2be:	005b      	lsls	r3, r3, #1
 800a2c0:	3328      	adds	r3, #40	; 0x28
 800a2c2:	443b      	add	r3, r7
 800a2c4:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d103      	bne.n	800a2d4 <maze_display+0x118>
				printf("+     ");
 800a2cc:	486a      	ldr	r0, [pc, #424]	; (800a478 <maze_display+0x2bc>)
 800a2ce:	f008 f935 	bl	801253c <iprintf>
 800a2d2:	e002      	b.n	800a2da <maze_display+0x11e>
			} else {
				printf("+-----");
 800a2d4:	4869      	ldr	r0, [pc, #420]	; (800a47c <maze_display+0x2c0>)
 800a2d6:	f008 f931 	bl	801253c <iprintf>
			}
			ss++;
 800a2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2dc:	3301      	adds	r3, #1
 800a2de:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss <= 15) {
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e2:	2b0f      	cmp	r3, #15
 800a2e4:	ddd5      	ble.n	800a292 <maze_display+0xd6>
		}

		printf("+\n");
 800a2e6:	4866      	ldr	r0, [pc, #408]	; (800a480 <maze_display+0x2c4>)
 800a2e8:	f008 f9c4 	bl	8012674 <puts>

		ss = 0;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	627b      	str	r3, [r7, #36]	; 0x24

		while (ss <= 15) { // all clear***************************************
 800a2f0:	e009      	b.n	800a306 <maze_display+0x14a>
			presence[ss] = 0;
 800a2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f4:	005b      	lsls	r3, r3, #1
 800a2f6:	3328      	adds	r3, #40	; 0x28
 800a2f8:	443b      	add	r3, r7
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f823 2c28 	strh.w	r2, [r3, #-40]

			ss++;
 800a300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a302:	3301      	adds	r3, #1
 800a304:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss <= 15) { // all clear***************************************
 800a306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a308:	2b0f      	cmp	r3, #15
 800a30a:	ddf2      	ble.n	800a2f2 <maze_display+0x136>
		}
		ss = 0; // all clear***************************************
 800a30c:	2300      	movs	r3, #0
 800a30e:	627b      	str	r3, [r7, #36]	; 0x24

		tt--;
 800a310:	6a3b      	ldr	r3, [r7, #32]
 800a312:	3b01      	subs	r3, #1
 800a314:	623b      	str	r3, [r7, #32]
	while (tt >= -1) { //ttはｙ軸
 800a316:	6a3b      	ldr	r3, [r7, #32]
 800a318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a31c:	f6bf af57 	bge.w	800a1ce <maze_display+0x12>
 800a320:	e000      	b.n	800a324 <maze_display+0x168>
			break;
 800a322:	bf00      	nop
	}

	printf(
 800a324:	4857      	ldr	r0, [pc, #348]	; (800a484 <maze_display+0x2c8>)
 800a326:	f008 f9a5 	bl	8012674 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");

	tt = 14;
 800a32a:	230e      	movs	r3, #14
 800a32c:	623b      	str	r3, [r7, #32]
	printf(
 800a32e:	484c      	ldr	r0, [pc, #304]	; (800a460 <maze_display+0x2a4>)
 800a330:	f008 f9a0 	bl	8012674 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");

	while (tt >= -1) { //ttはｙ軸
 800a334:	e0ba      	b.n	800a4ac <maze_display+0x2f0>


		ss = 0;
 800a336:	2300      	movs	r3, #0
 800a338:	627b      	str	r3, [r7, #36]	; 0x24
		printf("|%5d", walk_count[tt + 1]);
 800a33a:	6a3b      	ldr	r3, [r7, #32]
 800a33c:	3301      	adds	r3, #1
 800a33e:	4a49      	ldr	r2, [pc, #292]	; (800a464 <maze_display+0x2a8>)
 800a340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a344:	4619      	mov	r1, r3
 800a346:	4848      	ldr	r0, [pc, #288]	; (800a468 <maze_display+0x2ac>)
 800a348:	f008 f8f8 	bl	801253c <iprintf>
		while (ss < 15) {
 800a34c:	e03b      	b.n	800a3c6 <maze_display+0x20a>
			presence[ss] = wall.row_look[ss] & (1 << (tt + 1));
 800a34e:	4a47      	ldr	r2, [pc, #284]	; (800a46c <maze_display+0x2b0>)
 800a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a352:	331c      	adds	r3, #28
 800a354:	005b      	lsls	r3, r3, #1
 800a356:	4413      	add	r3, r2
 800a358:	889b      	ldrh	r3, [r3, #4]
 800a35a:	b21a      	sxth	r2, r3
 800a35c:	6a3b      	ldr	r3, [r7, #32]
 800a35e:	3301      	adds	r3, #1
 800a360:	2101      	movs	r1, #1
 800a362:	fa01 f303 	lsl.w	r3, r1, r3
 800a366:	b21b      	sxth	r3, r3
 800a368:	4013      	ands	r3, r2
 800a36a:	b21b      	sxth	r3, r3
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a370:	005b      	lsls	r3, r3, #1
 800a372:	3328      	adds	r3, #40	; 0x28
 800a374:	443b      	add	r3, r7
 800a376:	f823 2c28 	strh.w	r2, [r3, #-40]
			if (presence[ss] == 0) {
 800a37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37c:	005b      	lsls	r3, r3, #1
 800a37e:	3328      	adds	r3, #40	; 0x28
 800a380:	443b      	add	r3, r7
 800a382:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d10d      	bne.n	800a3a6 <maze_display+0x1ea>
				printf(" %5d", walk_count[tt + 1 + (ss + 1) * 16]);
 800a38a:	6a3b      	ldr	r3, [r7, #32]
 800a38c:	1c5a      	adds	r2, r3, #1
 800a38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a390:	3301      	adds	r3, #1
 800a392:	011b      	lsls	r3, r3, #4
 800a394:	4413      	add	r3, r2
 800a396:	4a33      	ldr	r2, [pc, #204]	; (800a464 <maze_display+0x2a8>)
 800a398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a39c:	4619      	mov	r1, r3
 800a39e:	4834      	ldr	r0, [pc, #208]	; (800a470 <maze_display+0x2b4>)
 800a3a0:	f008 f8cc 	bl	801253c <iprintf>
 800a3a4:	e00c      	b.n	800a3c0 <maze_display+0x204>
			} else {
				printf("|%5d", walk_count[tt + 1 + (ss + 1) * 16]);
 800a3a6:	6a3b      	ldr	r3, [r7, #32]
 800a3a8:	1c5a      	adds	r2, r3, #1
 800a3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	011b      	lsls	r3, r3, #4
 800a3b0:	4413      	add	r3, r2
 800a3b2:	4a2c      	ldr	r2, [pc, #176]	; (800a464 <maze_display+0x2a8>)
 800a3b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	482b      	ldr	r0, [pc, #172]	; (800a468 <maze_display+0x2ac>)
 800a3bc:	f008 f8be 	bl	801253c <iprintf>
			}
			ss++;
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss < 15) {
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c8:	2b0e      	cmp	r3, #14
 800a3ca:	ddc0      	ble.n	800a34e <maze_display+0x192>
		}
		printf("|\n");
 800a3cc:	4829      	ldr	r0, [pc, #164]	; (800a474 <maze_display+0x2b8>)
 800a3ce:	f008 f951 	bl	8012674 <puts>
		ss = 0;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss <= 15) { // all clear***************************************
 800a3d6:	e009      	b.n	800a3ec <maze_display+0x230>
			presence[ss] = 0;
 800a3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3da:	005b      	lsls	r3, r3, #1
 800a3dc:	3328      	adds	r3, #40	; 0x28
 800a3de:	443b      	add	r3, r7
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f823 2c28 	strh.w	r2, [r3, #-40]

			ss++;
 800a3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss <= 15) { // all clear***************************************
 800a3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ee:	2b0f      	cmp	r3, #15
 800a3f0:	ddf2      	ble.n	800a3d8 <maze_display+0x21c>
		}
		ss = 0; // all clear***************************************
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	627b      	str	r3, [r7, #36]	; 0x24
		if (tt <= -1) {
 800a3f6:	6a3b      	ldr	r3, [r7, #32]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	db5d      	blt.n	800a4b8 <maze_display+0x2fc>
			break;
		}
		while (ss <= 15) {
 800a3fc:	e026      	b.n	800a44c <maze_display+0x290>
			presence[ss] = wall.column_look[tt] & (1 << ss);
 800a3fe:	4a1b      	ldr	r2, [pc, #108]	; (800a46c <maze_display+0x2b0>)
 800a400:	6a3b      	ldr	r3, [r7, #32]
 800a402:	332c      	adds	r3, #44	; 0x2c
 800a404:	005b      	lsls	r3, r3, #1
 800a406:	4413      	add	r3, r2
 800a408:	885b      	ldrh	r3, [r3, #2]
 800a40a:	b21a      	sxth	r2, r3
 800a40c:	2101      	movs	r1, #1
 800a40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a410:	fa01 f303 	lsl.w	r3, r1, r3
 800a414:	b21b      	sxth	r3, r3
 800a416:	4013      	ands	r3, r2
 800a418:	b21b      	sxth	r3, r3
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41e:	005b      	lsls	r3, r3, #1
 800a420:	3328      	adds	r3, #40	; 0x28
 800a422:	443b      	add	r3, r7
 800a424:	f823 2c28 	strh.w	r2, [r3, #-40]

			if (presence[ss] == 0) {
 800a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42a:	005b      	lsls	r3, r3, #1
 800a42c:	3328      	adds	r3, #40	; 0x28
 800a42e:	443b      	add	r3, r7
 800a430:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d103      	bne.n	800a440 <maze_display+0x284>
				printf("+     ");
 800a438:	480f      	ldr	r0, [pc, #60]	; (800a478 <maze_display+0x2bc>)
 800a43a:	f008 f87f 	bl	801253c <iprintf>
 800a43e:	e002      	b.n	800a446 <maze_display+0x28a>
			} else {
				printf("+-----");
 800a440:	480e      	ldr	r0, [pc, #56]	; (800a47c <maze_display+0x2c0>)
 800a442:	f008 f87b 	bl	801253c <iprintf>
			}
			ss++;
 800a446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a448:	3301      	adds	r3, #1
 800a44a:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss <= 15) {
 800a44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44e:	2b0f      	cmp	r3, #15
 800a450:	ddd5      	ble.n	800a3fe <maze_display+0x242>
		}

		printf("+\n");
 800a452:	480b      	ldr	r0, [pc, #44]	; (800a480 <maze_display+0x2c4>)
 800a454:	f008 f90e 	bl	8012674 <puts>

		ss = 0;
 800a458:	2300      	movs	r3, #0
 800a45a:	627b      	str	r3, [r7, #36]	; 0x24

		while (ss <= 15) { // all clear***************************************
 800a45c:	e01e      	b.n	800a49c <maze_display+0x2e0>
 800a45e:	bf00      	nop
 800a460:	08014ddc 	.word	0x08014ddc
 800a464:	20001070 	.word	0x20001070
 800a468:	08014e40 	.word	0x08014e40
 800a46c:	20000f80 	.word	0x20000f80
 800a470:	08014e48 	.word	0x08014e48
 800a474:	08014e50 	.word	0x08014e50
 800a478:	08014e54 	.word	0x08014e54
 800a47c:	08014e5c 	.word	0x08014e5c
 800a480:	08014e64 	.word	0x08014e64
 800a484:	08014e68 	.word	0x08014e68
			presence[ss] = 0;
 800a488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48a:	005b      	lsls	r3, r3, #1
 800a48c:	3328      	adds	r3, #40	; 0x28
 800a48e:	443b      	add	r3, r7
 800a490:	2200      	movs	r2, #0
 800a492:	f823 2c28 	strh.w	r2, [r3, #-40]

			ss++;
 800a496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a498:	3301      	adds	r3, #1
 800a49a:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss <= 15) { // all clear***************************************
 800a49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49e:	2b0f      	cmp	r3, #15
 800a4a0:	ddf2      	ble.n	800a488 <maze_display+0x2cc>
		}
		ss = 0; // all clear***************************************
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	627b      	str	r3, [r7, #36]	; 0x24

		tt--;
 800a4a6:	6a3b      	ldr	r3, [r7, #32]
 800a4a8:	3b01      	subs	r3, #1
 800a4aa:	623b      	str	r3, [r7, #32]
	while (tt >= -1) { //ttはｙ軸
 800a4ac:	6a3b      	ldr	r3, [r7, #32]
 800a4ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4b2:	f6bf af40 	bge.w	800a336 <maze_display+0x17a>
 800a4b6:	e000      	b.n	800a4ba <maze_display+0x2fe>
			break;
 800a4b8:	bf00      	nop
	}

	printf(
 800a4ba:	4803      	ldr	r0, [pc, #12]	; (800a4c8 <maze_display+0x30c>)
 800a4bc:	f008 f8da 	bl	8012674 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");

}
 800a4c0:	bf00      	nop
 800a4c2:	3728      	adds	r7, #40	; 0x28
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	08014e68 	.word	0x08014e68

0800a4cc <mode_decision>:
#include "maze_Turning.h"
#include "maze_strategy.h"



unsigned char mode_decision(unsigned char select,unsigned char now_mode){
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	460a      	mov	r2, r1
 800a4d6:	71fb      	strb	r3, [r7, #7]
 800a4d8:	4613      	mov	r3, r2
 800a4da:	71bb      	strb	r3, [r7, #6]

//LCDで現在のモード番号を表示
switch (select){
 800a4dc:	79fb      	ldrb	r3, [r7, #7]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d002      	beq.n	800a4e8 <mode_decision+0x1c>
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d005      	beq.n	800a4f2 <mode_decision+0x26>
 800a4e6:	e009      	b.n	800a4fc <mode_decision+0x30>
case 0:
mode_display0(now_mode);
 800a4e8:	79bb      	ldrb	r3, [r7, #6]
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f000 f884 	bl	800a5f8 <mode_display0>
break;
 800a4f0:	e004      	b.n	800a4fc <mode_decision+0x30>
case 1:
mode_display1(now_mode);
 800a4f2:	79bb      	ldrb	r3, [r7, #6]
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f000 f8cd 	bl	800a694 <mode_display1>
break;
 800a4fa:	bf00      	nop
}


while (g_sensor_on[0]<=SENSOR_FINGER_0){
 800a4fc:	e061      	b.n	800a5c2 <mode_decision+0xf6>
	if(read_switch1()==1){
 800a4fe:	f7f9 fbab 	bl	8003c58 <read_switch1>
 800a502:	4603      	mov	r3, r0
 800a504:	2b01      	cmp	r3, #1
 800a506:	d12b      	bne.n	800a560 <mode_decision+0x94>
		if(select==0 && now_mode > MAX_MODE0){now_mode=0;}
 800a508:	79fb      	ldrb	r3, [r7, #7]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d105      	bne.n	800a51a <mode_decision+0x4e>
 800a50e:	79bb      	ldrb	r3, [r7, #6]
 800a510:	2b05      	cmp	r3, #5
 800a512:	d902      	bls.n	800a51a <mode_decision+0x4e>
 800a514:	2300      	movs	r3, #0
 800a516:	71bb      	strb	r3, [r7, #6]
 800a518:	e00b      	b.n	800a532 <mode_decision+0x66>
		else if(select==1 && now_mode > MAX_MODE1){now_mode=0;}
 800a51a:	79fb      	ldrb	r3, [r7, #7]
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d105      	bne.n	800a52c <mode_decision+0x60>
 800a520:	79bb      	ldrb	r3, [r7, #6]
 800a522:	2b0f      	cmp	r3, #15
 800a524:	d902      	bls.n	800a52c <mode_decision+0x60>
 800a526:	2300      	movs	r3, #0
 800a528:	71bb      	strb	r3, [r7, #6]
 800a52a:	e002      	b.n	800a532 <mode_decision+0x66>
		else{now_mode++;}
 800a52c:	79bb      	ldrb	r3, [r7, #6]
 800a52e:	3301      	adds	r3, #1
 800a530:	71bb      	strb	r3, [r7, #6]

		switch (select){
 800a532:	79fb      	ldrb	r3, [r7, #7]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d002      	beq.n	800a53e <mode_decision+0x72>
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d005      	beq.n	800a548 <mode_decision+0x7c>
 800a53c:	e009      	b.n	800a552 <mode_decision+0x86>
		case 0:
		mode_display0(now_mode);
 800a53e:	79bb      	ldrb	r3, [r7, #6]
 800a540:	4618      	mov	r0, r3
 800a542:	f000 f859 	bl	800a5f8 <mode_display0>
		break;
 800a546:	e004      	b.n	800a552 <mode_decision+0x86>
		case 1:
		mode_display1(now_mode);
 800a548:	79bb      	ldrb	r3, [r7, #6]
 800a54a:	4618      	mov	r0, r3
 800a54c:	f000 f8a2 	bl	800a694 <mode_display1>
		break;
 800a550:	bf00      	nop
		}
		pl_play_oneSound(now_mode);
 800a552:	79bb      	ldrb	r3, [r7, #6]
 800a554:	4618      	mov	r0, r3
 800a556:	f7f8 fc47 	bl	8002de8 <pl_play_oneSound>
		wait_ms(100);
 800a55a:	2064      	movs	r0, #100	; 0x64
 800a55c:	f7f9 fbc0 	bl	8003ce0 <wait_ms>
	}
	if(read_switch2()==1){
 800a560:	f7f9 fb90 	bl	8003c84 <read_switch2>
 800a564:	4603      	mov	r3, r0
 800a566:	2b01      	cmp	r3, #1
 800a568:	d12b      	bne.n	800a5c2 <mode_decision+0xf6>
		if(select==0 && now_mode == 0){now_mode=MAX_MODE0+1;}
 800a56a:	79fb      	ldrb	r3, [r7, #7]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d105      	bne.n	800a57c <mode_decision+0xb0>
 800a570:	79bb      	ldrb	r3, [r7, #6]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d102      	bne.n	800a57c <mode_decision+0xb0>
 800a576:	2306      	movs	r3, #6
 800a578:	71bb      	strb	r3, [r7, #6]
 800a57a:	e00b      	b.n	800a594 <mode_decision+0xc8>
		else if(select==1 && now_mode == 0){now_mode=MAX_MODE1+1;}
 800a57c:	79fb      	ldrb	r3, [r7, #7]
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d105      	bne.n	800a58e <mode_decision+0xc2>
 800a582:	79bb      	ldrb	r3, [r7, #6]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d102      	bne.n	800a58e <mode_decision+0xc2>
 800a588:	2310      	movs	r3, #16
 800a58a:	71bb      	strb	r3, [r7, #6]
 800a58c:	e002      	b.n	800a594 <mode_decision+0xc8>
		else{now_mode--;}
 800a58e:	79bb      	ldrb	r3, [r7, #6]
 800a590:	3b01      	subs	r3, #1
 800a592:	71bb      	strb	r3, [r7, #6]

		switch (select){
 800a594:	79fb      	ldrb	r3, [r7, #7]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d002      	beq.n	800a5a0 <mode_decision+0xd4>
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d005      	beq.n	800a5aa <mode_decision+0xde>
 800a59e:	e009      	b.n	800a5b4 <mode_decision+0xe8>
		case 0:
		mode_display0(now_mode);
 800a5a0:	79bb      	ldrb	r3, [r7, #6]
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f000 f828 	bl	800a5f8 <mode_display0>
		break;
 800a5a8:	e004      	b.n	800a5b4 <mode_decision+0xe8>
		case 1:
		mode_display1(now_mode);
 800a5aa:	79bb      	ldrb	r3, [r7, #6]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f000 f871 	bl	800a694 <mode_display1>
		break;
 800a5b2:	bf00      	nop
		}
		pl_play_oneSound(now_mode);
 800a5b4:	79bb      	ldrb	r3, [r7, #6]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7f8 fc16 	bl	8002de8 <pl_play_oneSound>
		wait_ms(100);
 800a5bc:	2064      	movs	r0, #100	; 0x64
 800a5be:	f7f9 fb8f 	bl	8003ce0 <wait_ms>
while (g_sensor_on[0]<=SENSOR_FINGER_0){
 800a5c2:	4b0b      	ldr	r3, [pc, #44]	; (800a5f0 <mode_decision+0x124>)
 800a5c4:	881b      	ldrh	r3, [r3, #0]
 800a5c6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a5ca:	d998      	bls.n	800a4fe <mode_decision+0x32>
	}


}

while (g_sensor_on[0]>=SENSOR_FINGER_0){
 800a5cc:	e002      	b.n	800a5d4 <mode_decision+0x108>
	wait_ms(1);
 800a5ce:	2001      	movs	r0, #1
 800a5d0:	f7f9 fb86 	bl	8003ce0 <wait_ms>
while (g_sensor_on[0]>=SENSOR_FINGER_0){
 800a5d4:	4b06      	ldr	r3, [pc, #24]	; (800a5f0 <mode_decision+0x124>)
 800a5d6:	881b      	ldrh	r3, [r3, #0]
 800a5d8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a5dc:	d2f7      	bcs.n	800a5ce <mode_decision+0x102>
}
pl_play_Music(8, Zelda_nazo);
 800a5de:	4905      	ldr	r1, [pc, #20]	; (800a5f4 <mode_decision+0x128>)
 800a5e0:	2008      	movs	r0, #8
 800a5e2:	f7f8 fc6d 	bl	8002ec0 <pl_play_Music>

return now_mode;
 800a5e6:	79bb      	ldrb	r3, [r7, #6]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3708      	adds	r7, #8
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	200003b0 	.word	0x200003b0
 800a5f4:	20000914 	.word	0x20000914

0800a5f8 <mode_display0>:

void mode_display0(int mode){
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
	pl_lcd_clear();
 800a600:	f7f8 f8ab 	bl	800275a <pl_lcd_clear>
	pl_lcd_pos(0, 0);
 800a604:	2100      	movs	r1, #0
 800a606:	2000      	movs	r0, #0
 800a608:	f7f8 f88f 	bl	800272a <pl_lcd_pos>
	switch(mode){
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2b05      	cmp	r3, #5
 800a610:	d826      	bhi.n	800a660 <mode_display0+0x68>
 800a612:	a201      	add	r2, pc, #4	; (adr r2, 800a618 <mode_display0+0x20>)
 800a614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a618:	0800a631 	.word	0x0800a631
 800a61c:	0800a639 	.word	0x0800a639
 800a620:	0800a641 	.word	0x0800a641
 800a624:	0800a649 	.word	0x0800a649
 800a628:	0800a651 	.word	0x0800a651
 800a62c:	0800a659 	.word	0x0800a659
	case 0:
		pl_lcd_puts("test");
 800a630:	4811      	ldr	r0, [pc, #68]	; (800a678 <mode_display0+0x80>)
 800a632:	f7f8 f83f 	bl	80026b4 <pl_lcd_puts>
	break;
 800a636:	e013      	b.n	800a660 <mode_display0+0x68>
	case 1:
		pl_lcd_puts("run");
 800a638:	4810      	ldr	r0, [pc, #64]	; (800a67c <mode_display0+0x84>)
 800a63a:	f7f8 f83b 	bl	80026b4 <pl_lcd_puts>
	break;
 800a63e:	e00f      	b.n	800a660 <mode_display0+0x68>
	case 2:
		pl_lcd_puts("tune");
 800a640:	480f      	ldr	r0, [pc, #60]	; (800a680 <mode_display0+0x88>)
 800a642:	f7f8 f837 	bl	80026b4 <pl_lcd_puts>
	break;
 800a646:	e00b      	b.n	800a660 <mode_display0+0x68>
	case 3:
		pl_lcd_puts("log");
 800a648:	480e      	ldr	r0, [pc, #56]	; (800a684 <mode_display0+0x8c>)
 800a64a:	f7f8 f833 	bl	80026b4 <pl_lcd_puts>
	break;
 800a64e:	e007      	b.n	800a660 <mode_display0+0x68>
	case 4:
		pl_lcd_puts("endure");
 800a650:	480d      	ldr	r0, [pc, #52]	; (800a688 <mode_display0+0x90>)
 800a652:	f7f8 f82f 	bl	80026b4 <pl_lcd_puts>
	break;
 800a656:	e003      	b.n	800a660 <mode_display0+0x68>
	case 5:
		pl_lcd_puts("short");
 800a658:	480c      	ldr	r0, [pc, #48]	; (800a68c <mode_display0+0x94>)
 800a65a:	f7f8 f82b 	bl	80026b4 <pl_lcd_puts>
	break;
 800a65e:	bf00      	nop
	}

	pl_lcd_pos(1, 0);
 800a660:	2100      	movs	r1, #0
 800a662:	2001      	movs	r0, #1
 800a664:	f7f8 f861 	bl	800272a <pl_lcd_pos>
	pl_lcd_puts("mode");
 800a668:	4809      	ldr	r0, [pc, #36]	; (800a690 <mode_display0+0x98>)
 800a66a:	f7f8 f823 	bl	80026b4 <pl_lcd_puts>

}
 800a66e:	bf00      	nop
 800a670:	3708      	adds	r7, #8
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	08014ecc 	.word	0x08014ecc
 800a67c:	08014ed4 	.word	0x08014ed4
 800a680:	08014ed8 	.word	0x08014ed8
 800a684:	08014ee0 	.word	0x08014ee0
 800a688:	08014ee4 	.word	0x08014ee4
 800a68c:	08014eec 	.word	0x08014eec
 800a690:	08014ef4 	.word	0x08014ef4

0800a694 <mode_display1>:


void mode_display1(int mode){
 800a694:	b580      	push	{r7, lr}
 800a696:	b088      	sub	sp, #32
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
	pl_lcd_clear();
 800a69c:	f7f8 f85d 	bl	800275a <pl_lcd_clear>
	pl_lcd_pos(0, 0);
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	2000      	movs	r0, #0
 800a6a4:	f7f8 f841 	bl	800272a <pl_lcd_pos>
	pl_lcd_puts("mode");
 800a6a8:	480f      	ldr	r0, [pc, #60]	; (800a6e8 <mode_display1+0x54>)
 800a6aa:	f7f8 f803 	bl	80026b4 <pl_lcd_puts>
	char strBuffer[17] = {0};
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	60fb      	str	r3, [r7, #12]
 800a6b2:	f107 0310 	add.w	r3, r7, #16
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	601a      	str	r2, [r3, #0]
 800a6ba:	605a      	str	r2, [r3, #4]
 800a6bc:	609a      	str	r2, [r3, #8]
 800a6be:	731a      	strb	r2, [r3, #12]
	sprintf(strBuffer, "CNT=%04d", mode);
 800a6c0:	f107 030c 	add.w	r3, r7, #12
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	4909      	ldr	r1, [pc, #36]	; (800a6ec <mode_display1+0x58>)
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f008 f8a9 	bl	8012820 <siprintf>
	pl_lcd_pos(1, 0);
 800a6ce:	2100      	movs	r1, #0
 800a6d0:	2001      	movs	r0, #1
 800a6d2:	f7f8 f82a 	bl	800272a <pl_lcd_pos>
	pl_lcd_puts(strBuffer);
 800a6d6:	f107 030c 	add.w	r3, r7, #12
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7f7 ffea 	bl	80026b4 <pl_lcd_puts>

}
 800a6e0:	bf00      	nop
 800a6e2:	3720      	adds	r7, #32
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	08014ef4 	.word	0x08014ef4
 800a6ec:	08014efc 	.word	0x08014efc

0800a6f0 <mode_execution>:





void mode_execution(unsigned char now_mode1,unsigned char now_mode2){
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	460a      	mov	r2, r1
 800a6fa:	71fb      	strb	r3, [r7, #7]
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	71bb      	strb	r3, [r7, #6]
	pl_lcd_clear();
 800a700:	f7f8 f82b 	bl	800275a <pl_lcd_clear>
	pl_lcd_pos(0, 0);
 800a704:	2100      	movs	r1, #0
 800a706:	2000      	movs	r0, #0
 800a708:	f7f8 f80f 	bl	800272a <pl_lcd_pos>
	pl_lcd_puts("mode");
 800a70c:	482f      	ldr	r0, [pc, #188]	; (800a7cc <mode_execution+0xdc>)
 800a70e:	f7f7 ffd1 	bl	80026b4 <pl_lcd_puts>
	pl_lcd_pos(1, 0);
 800a712:	2100      	movs	r1, #0
 800a714:	2001      	movs	r0, #1
 800a716:	f7f8 f808 	bl	800272a <pl_lcd_pos>
	pl_lcd_puts("select");
 800a71a:	482d      	ldr	r0, [pc, #180]	; (800a7d0 <mode_execution+0xe0>)
 800a71c:	f7f7 ffca 	bl	80026b4 <pl_lcd_puts>
	while (g_sensor_on[3]<=SENSOR_FINGER_3){
 800a720:	e00f      	b.n	800a742 <mode_execution+0x52>
		wait_ms(1);
 800a722:	2001      	movs	r0, #1
 800a724:	f7f9 fadc 	bl	8003ce0 <wait_ms>
		if(read_switch1()==1 && read_switch2()==1){
 800a728:	f7f9 fa96 	bl	8003c58 <read_switch1>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d107      	bne.n	800a742 <mode_execution+0x52>
 800a732:	f7f9 faa7 	bl	8003c84 <read_switch2>
 800a736:	4603      	mov	r3, r0
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d102      	bne.n	800a742 <mode_execution+0x52>
			now_mode1=100;
 800a73c:	2364      	movs	r3, #100	; 0x64
 800a73e:	71fb      	strb	r3, [r7, #7]
			break;
 800a740:	e004      	b.n	800a74c <mode_execution+0x5c>
	while (g_sensor_on[3]<=SENSOR_FINGER_3){
 800a742:	4b24      	ldr	r3, [pc, #144]	; (800a7d4 <mode_execution+0xe4>)
 800a744:	88db      	ldrh	r3, [r3, #6]
 800a746:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a74a:	d9ea      	bls.n	800a722 <mode_execution+0x32>
		}
	}
	pl_play_Music(8, Zelda_nazo);
 800a74c:	4922      	ldr	r1, [pc, #136]	; (800a7d8 <mode_execution+0xe8>)
 800a74e:	2008      	movs	r0, #8
 800a750:	f7f8 fbb6 	bl	8002ec0 <pl_play_Music>

switch (now_mode1) {
 800a754:	79fb      	ldrb	r3, [r7, #7]
 800a756:	2b05      	cmp	r3, #5
 800a758:	dc12      	bgt.n	800a780 <mode_execution+0x90>
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	db31      	blt.n	800a7c2 <mode_execution+0xd2>
 800a75e:	2b05      	cmp	r3, #5
 800a760:	d82f      	bhi.n	800a7c2 <mode_execution+0xd2>
 800a762:	a201      	add	r2, pc, #4	; (adr r2, 800a768 <mode_execution+0x78>)
 800a764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a768:	0800a787 	.word	0x0800a787
 800a76c:	0800a791 	.word	0x0800a791
 800a770:	0800a79b 	.word	0x0800a79b
 800a774:	0800a7a5 	.word	0x0800a7a5
 800a778:	0800a7c1 	.word	0x0800a7c1
 800a77c:	0800a7af 	.word	0x0800a7af
 800a780:	2b64      	cmp	r3, #100	; 0x64
 800a782:	d019      	beq.n	800a7b8 <mode_execution+0xc8>
	case 100://エラー脱出
		wait_ms(10);
	break;

	}
}
 800a784:	e01d      	b.n	800a7c2 <mode_execution+0xd2>
		mode_PLtest(now_mode2);
 800a786:	79bb      	ldrb	r3, [r7, #6]
 800a788:	4618      	mov	r0, r3
 800a78a:	f000 f827 	bl	800a7dc <mode_PLtest>
	break;
 800a78e:	e018      	b.n	800a7c2 <mode_execution+0xd2>
		mode_Running(now_mode2);
 800a790:	79bb      	ldrb	r3, [r7, #6]
 800a792:	4618      	mov	r0, r3
 800a794:	f000 f93c 	bl	800aa10 <mode_Running>
	break;
 800a798:	e013      	b.n	800a7c2 <mode_execution+0xd2>
		mode_Tuning(now_mode2);
 800a79a:	79bb      	ldrb	r3, [r7, #6]
 800a79c:	4618      	mov	r0, r3
 800a79e:	f000 f985 	bl	800aaac <mode_Tuning>
	break;
 800a7a2:	e00e      	b.n	800a7c2 <mode_execution+0xd2>
		mode_Log(now_mode2);
 800a7a4:	79bb      	ldrb	r3, [r7, #6]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f000 face 	bl	800ad48 <mode_Log>
	break;
 800a7ac:	e009      	b.n	800a7c2 <mode_execution+0xd2>
		mode_Tuning_shortest(now_mode2);
 800a7ae:	79bb      	ldrb	r3, [r7, #6]
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f000 fb49 	bl	800ae48 <mode_Tuning_shortest>
	break;
 800a7b6:	e004      	b.n	800a7c2 <mode_execution+0xd2>
		wait_ms(10);
 800a7b8:	200a      	movs	r0, #10
 800a7ba:	f7f9 fa91 	bl	8003ce0 <wait_ms>
	break;
 800a7be:	e000      	b.n	800a7c2 <mode_execution+0xd2>
	break;
 800a7c0:	bf00      	nop
}
 800a7c2:	bf00      	nop
 800a7c4:	3708      	adds	r7, #8
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	08014ef4 	.word	0x08014ef4
 800a7d0:	08014f08 	.word	0x08014f08
 800a7d4:	200003b0 	.word	0x200003b0
 800a7d8:	20000914 	.word	0x20000914

0800a7dc <mode_PLtest>:

void mode_PLtest(unsigned char now_mode2){
 800a7dc:	b590      	push	{r4, r7, lr}
 800a7de:	b091      	sub	sp, #68	; 0x44
 800a7e0:	af02      	add	r7, sp, #8
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	71fb      	strb	r3, [r7, #7]
	uint8_t Pin=0;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t hello[] = "Hello World\n\r";
 800a7ec:	4b7e      	ldr	r3, [pc, #504]	; (800a9e8 <mode_PLtest+0x20c>)
 800a7ee:	f107 0420 	add.w	r4, r7, #32
 800a7f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a7f4:	c407      	stmia	r4!, {r0, r1, r2}
 800a7f6:	8023      	strh	r3, [r4, #0]
	char strBuffer[17] = {0};
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	60fb      	str	r3, [r7, #12]
 800a7fc:	f107 0310 	add.w	r3, r7, #16
 800a800:	2200      	movs	r2, #0
 800a802:	601a      	str	r2, [r3, #0]
 800a804:	605a      	str	r2, [r3, #4]
 800a806:	609a      	str	r2, [r3, #8]
 800a808:	731a      	strb	r2, [r3, #12]


	switch (now_mode2) {
 800a80a:	79fb      	ldrb	r3, [r7, #7]
 800a80c:	2b0c      	cmp	r3, #12
 800a80e:	f200 80e7 	bhi.w	800a9e0 <mode_PLtest+0x204>
 800a812:	a201      	add	r2, pc, #4	; (adr r2, 800a818 <mode_PLtest+0x3c>)
 800a814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a818:	0800a869 	.word	0x0800a869
 800a81c:	0800a8b9 	.word	0x0800a8b9
 800a820:	0800a905 	.word	0x0800a905
 800a824:	0800a92d 	.word	0x0800a92d
 800a828:	0800a95f 	.word	0x0800a95f
 800a82c:	0800a96b 	.word	0x0800a96b
 800a830:	0800a99d 	.word	0x0800a99d
 800a834:	0800a9a9 	.word	0x0800a9a9
 800a838:	0800a9b1 	.word	0x0800a9b1
 800a83c:	0800a9b9 	.word	0x0800a9b9
 800a840:	0800a9df 	.word	0x0800a9df
 800a844:	0800a9df 	.word	0x0800a9df
 800a848:	0800a9df 	.word	0x0800a9df
		case 0://LED
			while(read_switch1()==0){
			write_LED(1);
 800a84c:	2001      	movs	r0, #1
 800a84e:	f7f7 ff8f 	bl	8002770 <write_LED>
			HAL_Delay(500);
 800a852:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a856:	f001 feef 	bl	800c638 <HAL_Delay>
			write_LED(0);
 800a85a:	2000      	movs	r0, #0
 800a85c:	f7f7 ff88 	bl	8002770 <write_LED>
			HAL_Delay(500);
 800a860:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a864:	f001 fee8 	bl	800c638 <HAL_Delay>
			while(read_switch1()==0){
 800a868:	f7f9 f9f6 	bl	8003c58 <read_switch1>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d0ec      	beq.n	800a84c <mode_PLtest+0x70>
			}
		break;
 800a872:	e0b5      	b.n	800a9e0 <mode_PLtest+0x204>
		case 1://SWITCH
			while(read_switch1()==0){
			if (read_switch2()==1 && Pin==0){
 800a874:	f7f9 fa06 	bl	8003c84 <read_switch2>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d10a      	bne.n	800a894 <mode_PLtest+0xb8>
 800a87e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a882:	2b00      	cmp	r3, #0
 800a884:	d106      	bne.n	800a894 <mode_PLtest+0xb8>
				Pin=1;
 800a886:	2301      	movs	r3, #1
 800a888:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				HAL_Delay(100);
 800a88c:	2064      	movs	r0, #100	; 0x64
 800a88e:	f001 fed3 	bl	800c638 <HAL_Delay>
 800a892:	e00e      	b.n	800a8b2 <mode_PLtest+0xd6>
			}else if(read_switch2()==1 && Pin==1){
 800a894:	f7f9 f9f6 	bl	8003c84 <read_switch2>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d109      	bne.n	800a8b2 <mode_PLtest+0xd6>
 800a89e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d105      	bne.n	800a8b2 <mode_PLtest+0xd6>
				Pin=0;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				HAL_Delay(100);
 800a8ac:	2064      	movs	r0, #100	; 0x64
 800a8ae:	f001 fec3 	bl	800c638 <HAL_Delay>
			}
			write_LED(1);
 800a8b2:	2001      	movs	r0, #1
 800a8b4:	f7f7 ff5c 	bl	8002770 <write_LED>
			while(read_switch1()==0){
 800a8b8:	f7f9 f9ce 	bl	8003c58 <read_switch1>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d0d8      	beq.n	800a874 <mode_PLtest+0x98>
			}
		break;
 800a8c2:	e08d      	b.n	800a9e0 <mode_PLtest+0x204>
		case 2://USART

			while(read_switch1()==0){
			// test USART2
			setbuf(stdout, NULL);
 800a8c4:	4b49      	ldr	r3, [pc, #292]	; (800a9ec <mode_PLtest+0x210>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	2100      	movs	r1, #0
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f007 fed9 	bl	8012684 <setbuf>
			printf("hello=%s", hello);
 800a8d2:	f107 0320 	add.w	r3, r7, #32
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	4845      	ldr	r0, [pc, #276]	; (800a9f0 <mode_PLtest+0x214>)
 800a8da:	f007 fe2f 	bl	801253c <iprintf>
			uint8_t hoge = 3;
 800a8de:	2303      	movs	r3, #3
 800a8e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			float PI=3.14;
 800a8e4:	4b43      	ldr	r3, [pc, #268]	; (800a9f4 <mode_PLtest+0x218>)
 800a8e6:	633b      	str	r3, [r7, #48]	; 0x30
			printf("hoge=%d\n", hoge);
 800a8e8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	4842      	ldr	r0, [pc, #264]	; (800a9f8 <mode_PLtest+0x21c>)
 800a8f0:	f007 fe24 	bl	801253c <iprintf>
			printf("M_PI=%f\n", PI); // @suppress("Float formatting support")
 800a8f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8f6:	f7f5 fe27 	bl	8000548 <__aeabi_f2d>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	483f      	ldr	r0, [pc, #252]	; (800a9fc <mode_PLtest+0x220>)
 800a900:	f007 fe1c 	bl	801253c <iprintf>
			while(read_switch1()==0){
 800a904:	f7f9 f9a8 	bl	8003c58 <read_switch1>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d0da      	beq.n	800a8c4 <mode_PLtest+0xe8>
			}
		break;
 800a90e:	e067      	b.n	800a9e0 <mode_PLtest+0x204>
		case 3://timer
			while(read_switch1()==0){
				write_LED(1);
 800a910:	2001      	movs	r0, #1
 800a912:	f7f7 ff2d 	bl	8002770 <write_LED>
				wait_ms(500);
 800a916:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a91a:	f7f9 f9e1 	bl	8003ce0 <wait_ms>
				write_LED(0);
 800a91e:	2000      	movs	r0, #0
 800a920:	f7f7 ff26 	bl	8002770 <write_LED>
				wait_ms(500);
 800a924:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a928:	f7f9 f9da 	bl	8003ce0 <wait_ms>
			while(read_switch1()==0){
 800a92c:	f7f9 f994 	bl	8003c58 <read_switch1>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d0ec      	beq.n	800a910 <mode_PLtest+0x134>
				}
		break;
 800a936:	e053      	b.n	800a9e0 <mode_PLtest+0x204>
		case 4://sensor
			// sensor test
			while(read_switch1()==0){
			//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer) / sizeof(uint16_t));
			//printf("BATT=%f\n",g_V_batt);
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d\n", g_sensor[0][0],g_sensor[1][0],g_sensor[2][0],g_sensor[3][0]);
 800a938:	4b31      	ldr	r3, [pc, #196]	; (800aa00 <mode_PLtest+0x224>)
 800a93a:	6819      	ldr	r1, [r3, #0]
 800a93c:	4b30      	ldr	r3, [pc, #192]	; (800aa00 <mode_PLtest+0x224>)
 800a93e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a940:	4b2f      	ldr	r3, [pc, #188]	; (800aa00 <mode_PLtest+0x224>)
 800a942:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800a946:	4b2e      	ldr	r3, [pc, #184]	; (800aa00 <mode_PLtest+0x224>)
 800a948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a94c:	9300      	str	r3, [sp, #0]
 800a94e:	4603      	mov	r3, r0
 800a950:	482c      	ldr	r0, [pc, #176]	; (800aa04 <mode_PLtest+0x228>)
 800a952:	f007 fdf3 	bl	801253c <iprintf>
			wait_ms(500);
 800a956:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a95a:	f7f9 f9c1 	bl	8003ce0 <wait_ms>
			while(read_switch1()==0){
 800a95e:	f7f9 f97b 	bl	8003c58 <read_switch1>
 800a962:	4603      	mov	r3, r0
 800a964:	2b00      	cmp	r3, #0
 800a966:	d0e7      	beq.n	800a938 <mode_PLtest+0x15c>
			}
		break;
 800a968:	e03a      	b.n	800a9e0 <mode_PLtest+0x204>
		case 5://speaker
			pl_test_speaker();
 800a96a:	f7f8 f9d1 	bl	8002d10 <pl_test_speaker>
		break;
 800a96e:	e037      	b.n	800a9e0 <mode_PLtest+0x204>
		case 6://LCD
			while(read_switch1()==0){
			sprintf(strBuffer, "CNT=%04d", Pin);
 800a970:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a974:	f107 030c 	add.w	r3, r7, #12
 800a978:	4923      	ldr	r1, [pc, #140]	; (800aa08 <mode_PLtest+0x22c>)
 800a97a:	4618      	mov	r0, r3
 800a97c:	f007 ff50 	bl	8012820 <siprintf>
			Pin++;
 800a980:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a984:	3301      	adds	r3, #1
 800a986:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			pl_lcd_pos(1, 0);
 800a98a:	2100      	movs	r1, #0
 800a98c:	2001      	movs	r0, #1
 800a98e:	f7f7 fecc 	bl	800272a <pl_lcd_pos>
			pl_lcd_puts(strBuffer);
 800a992:	f107 030c 	add.w	r3, r7, #12
 800a996:	4618      	mov	r0, r3
 800a998:	f7f7 fe8c 	bl	80026b4 <pl_lcd_puts>
			while(read_switch1()==0){
 800a99c:	f7f9 f95c 	bl	8003c58 <read_switch1>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d0e4      	beq.n	800a970 <mode_PLtest+0x194>
			}
		break;
 800a9a6:	e01b      	b.n	800a9e0 <mode_PLtest+0x204>
		case 7://motor
		    control_test_motor(0);
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	f7f6 faef 	bl	8000f8c <control_test_motor>
		break;
 800a9ae:	e017      	b.n	800a9e0 <mode_PLtest+0x204>
		case 8://motor+sensor
			control_test_motor(1);
 800a9b0:	2001      	movs	r0, #1
 800a9b2:	f7f6 faeb 	bl	8000f8c <control_test_motor>
		break;
 800a9b6:	e013      	b.n	800a9e0 <mode_PLtest+0x204>
		case 9://record
			record_mode=1;
 800a9b8:	4b14      	ldr	r3, [pc, #80]	; (800aa0c <mode_PLtest+0x230>)
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	701a      	strb	r2, [r3, #0]
			wait_ms(1000);
 800a9be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a9c2:	f7f9 f98d 	bl	8003ce0 <wait_ms>
			while(read_switch1()==0){
 800a9c6:	e002      	b.n	800a9ce <mode_PLtest+0x1f2>
			record_mode=0;
 800a9c8:	4b10      	ldr	r3, [pc, #64]	; (800aa0c <mode_PLtest+0x230>)
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	701a      	strb	r2, [r3, #0]
			while(read_switch1()==0){
 800a9ce:	f7f9 f943 	bl	8003c58 <read_switch1>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d0f7      	beq.n	800a9c8 <mode_PLtest+0x1ec>
			}
			record_print();
 800a9d8:	f000 fab8 	bl	800af4c <record_print>
		break;
 800a9dc:	e000      	b.n	800a9e0 <mode_PLtest+0x204>
		case 10://flash
		break;
 800a9de:	bf00      	nop
		break;
		case 12://PLname
		break;
	}

}
 800a9e0:	bf00      	nop
 800a9e2:	373c      	adds	r7, #60	; 0x3c
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd90      	pop	{r4, r7, pc}
 800a9e8:	08014f58 	.word	0x08014f58
 800a9ec:	2000000c 	.word	0x2000000c
 800a9f0:	08014f10 	.word	0x08014f10
 800a9f4:	4048f5c3 	.word	0x4048f5c3
 800a9f8:	08014f1c 	.word	0x08014f1c
 800a9fc:	08014f28 	.word	0x08014f28
 800aa00:	2000023c 	.word	0x2000023c
 800aa04:	08014f34 	.word	0x08014f34
 800aa08:	08014efc 	.word	0x08014efc
 800aa0c:	2000cdf0 	.word	0x2000cdf0

0800aa10 <mode_Running>:

void mode_Running(unsigned char now_mode2){
 800aa10:	b590      	push	{r4, r7, lr}
 800aa12:	b0d3      	sub	sp, #332	; 0x14c
 800aa14:	af50      	add	r7, sp, #320	; 0x140
 800aa16:	4603      	mov	r3, r0
 800aa18:	71fb      	strb	r3, [r7, #7]

	switch (now_mode2) {
 800aa1a:	79fb      	ldrb	r3, [r7, #7]
 800aa1c:	2b07      	cmp	r3, #7
 800aa1e:	d836      	bhi.n	800aa8e <mode_Running+0x7e>
 800aa20:	a201      	add	r2, pc, #4	; (adr r2, 800aa28 <mode_Running+0x18>)
 800aa22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa26:	bf00      	nop
 800aa28:	0800aa49 	.word	0x0800aa49
 800aa2c:	0800aa4f 	.word	0x0800aa4f
 800aa30:	0800aa8d 	.word	0x0800aa8d
 800aa34:	0800aa65 	.word	0x0800aa65
 800aa38:	0800aa8d 	.word	0x0800aa8d
 800aa3c:	0800aa8d 	.word	0x0800aa8d
 800aa40:	0800aa8d 	.word	0x0800aa8d
 800aa44:	0800aa8d 	.word	0x0800aa8d
		case 0://迷路情報の可視化
			maze_display();
 800aa48:	f7ff fbb8 	bl	800a1bc <maze_display>
		break;
 800aa4c:	e01f      	b.n	800aa8e <mode_Running+0x7e>
		case 1://足立法
			AdatiWayReturn(500, 500, 7000,7000);
 800aa4e:	eddf 1a12 	vldr	s3, [pc, #72]	; 800aa98 <mode_Running+0x88>
 800aa52:	ed9f 1a11 	vldr	s2, [pc, #68]	; 800aa98 <mode_Running+0x88>
 800aa56:	eddf 0a11 	vldr	s1, [pc, #68]	; 800aa9c <mode_Running+0x8c>
 800aa5a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800aa9c <mode_Running+0x8c>
 800aa5e:	f7fc f937 	bl	8006cd0 <AdatiWayReturn>
		break;
 800aa62:	e014      	b.n	800aa8e <mode_Running+0x7e>
		case 2://足立法(帰りあり)
		break;
		case 3://最短走行(パス圧縮なし)
			ShortestWay(750,5000,speed700_shortest,0);
 800aa64:	4c0e      	ldr	r4, [pc, #56]	; (800aaa0 <mode_Running+0x90>)
 800aa66:	2300      	movs	r3, #0
 800aa68:	934e      	str	r3, [sp, #312]	; 0x138
 800aa6a:	4668      	mov	r0, sp
 800aa6c:	f104 0310 	add.w	r3, r4, #16
 800aa70:	f44f 729c 	mov.w	r2, #312	; 0x138
 800aa74:	4619      	mov	r1, r3
 800aa76:	f007 f8e1 	bl	8011c3c <memcpy>
 800aa7a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800aa7e:	eddf 0a09 	vldr	s1, [pc, #36]	; 800aaa4 <mode_Running+0x94>
 800aa82:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800aaa8 <mode_Running+0x98>
 800aa86:	f7fc ff57 	bl	8007938 <ShortestWay>
		break;
 800aa8a:	e000      	b.n	800aa8e <mode_Running+0x7e>
		break;
 800aa8c:	bf00      	nop
		break;
		case 7://Runname
		break;
	}

}
 800aa8e:	bf00      	nop
 800aa90:	370c      	adds	r7, #12
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd90      	pop	{r4, r7, pc}
 800aa96:	bf00      	nop
 800aa98:	45dac000 	.word	0x45dac000
 800aa9c:	43fa0000 	.word	0x43fa0000
 800aaa0:	20000b98 	.word	0x20000b98
 800aaa4:	459c4000 	.word	0x459c4000
 800aaa8:	443b8000 	.word	0x443b8000

0800aaac <mode_Tuning>:


void mode_Tuning(unsigned char now_mode2){
 800aaac:	b590      	push	{r4, r7, lr}
 800aaae:	b0d3      	sub	sp, #332	; 0x14c
 800aab0:	af50      	add	r7, sp, #320	; 0x140
 800aab2:	4603      	mov	r3, r0
 800aab4:	71fb      	strb	r3, [r7, #7]

	pl_motor_standby(1);
 800aab6:	2001      	movs	r0, #1
 800aab8:	f7f7 fe88 	bl	80027cc <pl_motor_standby>
	while(read_switch1()==0 || read_switch2()==0){
 800aabc:	e002      	b.n	800aac4 <mode_Tuning+0x18>
		wait_ms(1);
 800aabe:	2001      	movs	r0, #1
 800aac0:	f7f9 f90e 	bl	8003ce0 <wait_ms>
	while(read_switch1()==0 || read_switch2()==0){
 800aac4:	f7f9 f8c8 	bl	8003c58 <read_switch1>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d0f7      	beq.n	800aabe <mode_Tuning+0x12>
 800aace:	f7f9 f8d9 	bl	8003c84 <read_switch2>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d0f2      	beq.n	800aabe <mode_Tuning+0x12>
		}
	wait_ms(2000);
 800aad8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aadc:	f7f9 f900 	bl	8003ce0 <wait_ms>
	switch (now_mode2) {
 800aae0:	79fb      	ldrb	r3, [r7, #7]
 800aae2:	2b10      	cmp	r3, #16
 800aae4:	f200 8128 	bhi.w	800ad38 <mode_Tuning+0x28c>
 800aae8:	a201      	add	r2, pc, #4	; (adr r2, 800aaf0 <mode_Tuning+0x44>)
 800aaea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaee:	bf00      	nop
 800aaf0:	0800ab35 	.word	0x0800ab35
 800aaf4:	0800ab41 	.word	0x0800ab41
 800aaf8:	0800ab4d 	.word	0x0800ab4d
 800aafc:	0800ab59 	.word	0x0800ab59
 800ab00:	0800ab7d 	.word	0x0800ab7d
 800ab04:	0800aba1 	.word	0x0800aba1
 800ab08:	0800abad 	.word	0x0800abad
 800ab0c:	0800abd1 	.word	0x0800abd1
 800ab10:	0800abf5 	.word	0x0800abf5
 800ab14:	0800ac19 	.word	0x0800ac19
 800ab18:	0800ac3d 	.word	0x0800ac3d
 800ab1c:	0800ac61 	.word	0x0800ac61
 800ab20:	0800ac85 	.word	0x0800ac85
 800ab24:	0800aca9 	.word	0x0800aca9
 800ab28:	0800accd 	.word	0x0800accd
 800ab2c:	0800acf1 	.word	0x0800acf1
 800ab30:	0800ad15 	.word	0x0800ad15
		case 0://タイヤ径
			control_test_motor2(0,0,10);
 800ab34:	220a      	movs	r2, #10
 800ab36:	2100      	movs	r1, #0
 800ab38:	2000      	movs	r0, #0
 800ab3a:	f7f6 fa79 	bl	8001030 <control_test_motor2>
		break;
 800ab3e:	e0fb      	b.n	800ad38 <mode_Tuning+0x28c>
		case 1://トレッド幅
			control_test_motor2(1,0,5);
 800ab40:	2205      	movs	r2, #5
 800ab42:	2100      	movs	r1, #0
 800ab44:	2001      	movs	r0, #1
 800ab46:	f7f6 fa73 	bl	8001030 <control_test_motor2>
		break;
 800ab4a:	e0f5      	b.n	800ad38 <mode_Tuning+0x28c>
		case 2://壁制御
			control_test_motor2(0,1,6);
 800ab4c:	2206      	movs	r2, #6
 800ab4e:	2101      	movs	r1, #1
 800ab50:	2000      	movs	r0, #0
 800ab52:	f7f6 fa6d 	bl	8001030 <control_test_motor2>
		break;
 800ab56:	e0ef      	b.n	800ad38 <mode_Tuning+0x28c>
		case 3://右スラローム(探索)
			testturning(speed500_exploration,0,0);
 800ab58:	4c79      	ldr	r4, [pc, #484]	; (800ad40 <mode_Tuning+0x294>)
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	934f      	str	r3, [sp, #316]	; 0x13c
 800ab5e:	2300      	movs	r3, #0
 800ab60:	934e      	str	r3, [sp, #312]	; 0x138
 800ab62:	4668      	mov	r0, sp
 800ab64:	f104 0310 	add.w	r3, r4, #16
 800ab68:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	f007 f865 	bl	8011c3c <memcpy>
 800ab72:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ab76:	f7fb ff7b 	bl	8006a70 <testturning>
		break;
 800ab7a:	e0dd      	b.n	800ad38 <mode_Tuning+0x28c>
		case 4://左スラローム(探索)
			testturning(speed500_exploration,1,0);
 800ab7c:	4c70      	ldr	r4, [pc, #448]	; (800ad40 <mode_Tuning+0x294>)
 800ab7e:	2300      	movs	r3, #0
 800ab80:	934f      	str	r3, [sp, #316]	; 0x13c
 800ab82:	2301      	movs	r3, #1
 800ab84:	934e      	str	r3, [sp, #312]	; 0x138
 800ab86:	4668      	mov	r0, sp
 800ab88:	f104 0310 	add.w	r3, r4, #16
 800ab8c:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ab90:	4619      	mov	r1, r3
 800ab92:	f007 f853 	bl	8011c3c <memcpy>
 800ab96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ab9a:	f7fb ff69 	bl	8006a70 <testturning>
		break;
 800ab9e:	e0cb      	b.n	800ad38 <mode_Tuning+0x28c>
		case 5://斜め直進
			control_test_motor2(0,2,4);
 800aba0:	2204      	movs	r2, #4
 800aba2:	2102      	movs	r1, #2
 800aba4:	2000      	movs	r0, #0
 800aba6:	f7f6 fa43 	bl	8001030 <control_test_motor2>
		break;
 800abaa:	e0c5      	b.n	800ad38 <mode_Tuning+0x28c>
		case 6://左スラローム
			testturning(speed900_shortest,1,1);
 800abac:	4c65      	ldr	r4, [pc, #404]	; (800ad44 <mode_Tuning+0x298>)
 800abae:	2301      	movs	r3, #1
 800abb0:	934f      	str	r3, [sp, #316]	; 0x13c
 800abb2:	2301      	movs	r3, #1
 800abb4:	934e      	str	r3, [sp, #312]	; 0x138
 800abb6:	4668      	mov	r0, sp
 800abb8:	f104 0310 	add.w	r3, r4, #16
 800abbc:	f44f 729c 	mov.w	r2, #312	; 0x138
 800abc0:	4619      	mov	r1, r3
 800abc2:	f007 f83b 	bl	8011c3c <memcpy>
 800abc6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800abca:	f7fb ff51 	bl	8006a70 <testturning>
		break;
 800abce:	e0b3      	b.n	800ad38 <mode_Tuning+0x28c>
		case 7://右壁切れ
			testturning(speed900_shortest,2,1);
 800abd0:	4c5c      	ldr	r4, [pc, #368]	; (800ad44 <mode_Tuning+0x298>)
 800abd2:	2301      	movs	r3, #1
 800abd4:	934f      	str	r3, [sp, #316]	; 0x13c
 800abd6:	2302      	movs	r3, #2
 800abd8:	934e      	str	r3, [sp, #312]	; 0x138
 800abda:	4668      	mov	r0, sp
 800abdc:	f104 0310 	add.w	r3, r4, #16
 800abe0:	f44f 729c 	mov.w	r2, #312	; 0x138
 800abe4:	4619      	mov	r1, r3
 800abe6:	f007 f829 	bl	8011c3c <memcpy>
 800abea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800abee:	f7fb ff3f 	bl	8006a70 <testturning>
		break;
 800abf2:	e0a1      	b.n	800ad38 <mode_Tuning+0x28c>
		case 8://左壁切れ
			testturning(speed900_shortest,3,1);
 800abf4:	4c53      	ldr	r4, [pc, #332]	; (800ad44 <mode_Tuning+0x298>)
 800abf6:	2301      	movs	r3, #1
 800abf8:	934f      	str	r3, [sp, #316]	; 0x13c
 800abfa:	2303      	movs	r3, #3
 800abfc:	934e      	str	r3, [sp, #312]	; 0x138
 800abfe:	4668      	mov	r0, sp
 800ac00:	f104 0310 	add.w	r3, r4, #16
 800ac04:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ac08:	4619      	mov	r1, r3
 800ac0a:	f007 f817 	bl	8011c3c <memcpy>
 800ac0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ac12:	f7fb ff2d 	bl	8006a70 <testturning>
		break;
 800ac16:	e08f      	b.n	800ad38 <mode_Tuning+0x28c>
		case 9://右大回り90
			testturning(speed900_shortest,4,1);
 800ac18:	4c4a      	ldr	r4, [pc, #296]	; (800ad44 <mode_Tuning+0x298>)
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	934f      	str	r3, [sp, #316]	; 0x13c
 800ac1e:	2304      	movs	r3, #4
 800ac20:	934e      	str	r3, [sp, #312]	; 0x138
 800ac22:	4668      	mov	r0, sp
 800ac24:	f104 0310 	add.w	r3, r4, #16
 800ac28:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	f007 f805 	bl	8011c3c <memcpy>
 800ac32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ac36:	f7fb ff1b 	bl	8006a70 <testturning>
		break;
 800ac3a:	e07d      	b.n	800ad38 <mode_Tuning+0x28c>
		case 10://左大回り90
			testturning(speed900_shortest,5,1);
 800ac3c:	4c41      	ldr	r4, [pc, #260]	; (800ad44 <mode_Tuning+0x298>)
 800ac3e:	2301      	movs	r3, #1
 800ac40:	934f      	str	r3, [sp, #316]	; 0x13c
 800ac42:	2305      	movs	r3, #5
 800ac44:	934e      	str	r3, [sp, #312]	; 0x138
 800ac46:	4668      	mov	r0, sp
 800ac48:	f104 0310 	add.w	r3, r4, #16
 800ac4c:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ac50:	4619      	mov	r1, r3
 800ac52:	f006 fff3 	bl	8011c3c <memcpy>
 800ac56:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ac5a:	f7fb ff09 	bl	8006a70 <testturning>
		break;
 800ac5e:	e06b      	b.n	800ad38 <mode_Tuning+0x28c>
		case 11://右大回り180
			testturning(speed900_shortest,6,1);
 800ac60:	4c38      	ldr	r4, [pc, #224]	; (800ad44 <mode_Tuning+0x298>)
 800ac62:	2301      	movs	r3, #1
 800ac64:	934f      	str	r3, [sp, #316]	; 0x13c
 800ac66:	2306      	movs	r3, #6
 800ac68:	934e      	str	r3, [sp, #312]	; 0x138
 800ac6a:	4668      	mov	r0, sp
 800ac6c:	f104 0310 	add.w	r3, r4, #16
 800ac70:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ac74:	4619      	mov	r1, r3
 800ac76:	f006 ffe1 	bl	8011c3c <memcpy>
 800ac7a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ac7e:	f7fb fef7 	bl	8006a70 <testturning>
		break;
 800ac82:	e059      	b.n	800ad38 <mode_Tuning+0x28c>
		case 12://左大回り180
			testturning(speed900_shortest,7,1);
 800ac84:	4c2f      	ldr	r4, [pc, #188]	; (800ad44 <mode_Tuning+0x298>)
 800ac86:	2301      	movs	r3, #1
 800ac88:	934f      	str	r3, [sp, #316]	; 0x13c
 800ac8a:	2307      	movs	r3, #7
 800ac8c:	934e      	str	r3, [sp, #312]	; 0x138
 800ac8e:	4668      	mov	r0, sp
 800ac90:	f104 0310 	add.w	r3, r4, #16
 800ac94:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ac98:	4619      	mov	r1, r3
 800ac9a:	f006 ffcf 	bl	8011c3c <memcpy>
 800ac9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800aca2:	f7fb fee5 	bl	8006a70 <testturning>
		break;
 800aca6:	e047      	b.n	800ad38 <mode_Tuning+0x28c>
		case 13://右斜め45
			testturning(speed900_shortest,8,1);
 800aca8:	4c26      	ldr	r4, [pc, #152]	; (800ad44 <mode_Tuning+0x298>)
 800acaa:	2301      	movs	r3, #1
 800acac:	934f      	str	r3, [sp, #316]	; 0x13c
 800acae:	2308      	movs	r3, #8
 800acb0:	934e      	str	r3, [sp, #312]	; 0x138
 800acb2:	4668      	mov	r0, sp
 800acb4:	f104 0310 	add.w	r3, r4, #16
 800acb8:	f44f 729c 	mov.w	r2, #312	; 0x138
 800acbc:	4619      	mov	r1, r3
 800acbe:	f006 ffbd 	bl	8011c3c <memcpy>
 800acc2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800acc6:	f7fb fed3 	bl	8006a70 <testturning>
		break;
 800acca:	e035      	b.n	800ad38 <mode_Tuning+0x28c>
		case 14://左斜め45
			testturning(speed900_shortest,9,1);
 800accc:	4c1d      	ldr	r4, [pc, #116]	; (800ad44 <mode_Tuning+0x298>)
 800acce:	2301      	movs	r3, #1
 800acd0:	934f      	str	r3, [sp, #316]	; 0x13c
 800acd2:	2309      	movs	r3, #9
 800acd4:	934e      	str	r3, [sp, #312]	; 0x138
 800acd6:	4668      	mov	r0, sp
 800acd8:	f104 0310 	add.w	r3, r4, #16
 800acdc:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ace0:	4619      	mov	r1, r3
 800ace2:	f006 ffab 	bl	8011c3c <memcpy>
 800ace6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800acea:	f7fb fec1 	bl	8006a70 <testturning>
		break;
 800acee:	e023      	b.n	800ad38 <mode_Tuning+0x28c>
		case 15://右斜め135
			testturning(speed900_shortest,10,1);
 800acf0:	4c14      	ldr	r4, [pc, #80]	; (800ad44 <mode_Tuning+0x298>)
 800acf2:	2301      	movs	r3, #1
 800acf4:	934f      	str	r3, [sp, #316]	; 0x13c
 800acf6:	230a      	movs	r3, #10
 800acf8:	934e      	str	r3, [sp, #312]	; 0x138
 800acfa:	4668      	mov	r0, sp
 800acfc:	f104 0310 	add.w	r3, r4, #16
 800ad00:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ad04:	4619      	mov	r1, r3
 800ad06:	f006 ff99 	bl	8011c3c <memcpy>
 800ad0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ad0e:	f7fb feaf 	bl	8006a70 <testturning>
		break;
 800ad12:	e011      	b.n	800ad38 <mode_Tuning+0x28c>
		case 16://左斜め135
			testturning(speed900_shortest,11,1);
 800ad14:	4c0b      	ldr	r4, [pc, #44]	; (800ad44 <mode_Tuning+0x298>)
 800ad16:	2301      	movs	r3, #1
 800ad18:	934f      	str	r3, [sp, #316]	; 0x13c
 800ad1a:	230b      	movs	r3, #11
 800ad1c:	934e      	str	r3, [sp, #312]	; 0x138
 800ad1e:	4668      	mov	r0, sp
 800ad20:	f104 0310 	add.w	r3, r4, #16
 800ad24:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ad28:	4619      	mov	r1, r3
 800ad2a:	f006 ff87 	bl	8011c3c <memcpy>
 800ad2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ad32:	f7fb fe9d 	bl	8006a70 <testturning>
		break;
 800ad36:	bf00      	nop
	}

}
 800ad38:	bf00      	nop
 800ad3a:	370c      	adds	r7, #12
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd90      	pop	{r4, r7, pc}
 800ad40:	20000a50 	.word	0x20000a50
 800ad44:	20000ce0 	.word	0x20000ce0

0800ad48 <mode_Log>:

void mode_Log(unsigned char now_mode2){
 800ad48:	b590      	push	{r4, r7, lr}
 800ad4a:	b0d3      	sub	sp, #332	; 0x14c
 800ad4c:	af50      	add	r7, sp, #320	; 0x140
 800ad4e:	4603      	mov	r3, r0
 800ad50:	71fb      	strb	r3, [r7, #7]

	pl_motor_standby(1);
 800ad52:	2001      	movs	r0, #1
 800ad54:	f7f7 fd3a 	bl	80027cc <pl_motor_standby>

	switch (now_mode2) {
 800ad58:	79fb      	ldrb	r3, [r7, #7]
 800ad5a:	2b10      	cmp	r3, #16
 800ad5c:	d86b      	bhi.n	800ae36 <mode_Log+0xee>
 800ad5e:	a201      	add	r2, pc, #4	; (adr r2, 800ad64 <mode_Log+0x1c>)
 800ad60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad64:	0800ada9 	.word	0x0800ada9
 800ad68:	0800ae35 	.word	0x0800ae35
 800ad6c:	0800ae35 	.word	0x0800ae35
 800ad70:	0800ade1 	.word	0x0800ade1
 800ad74:	0800ae05 	.word	0x0800ae05
 800ad78:	0800ae29 	.word	0x0800ae29
 800ad7c:	0800ae35 	.word	0x0800ae35
 800ad80:	0800ae35 	.word	0x0800ae35
 800ad84:	0800ae35 	.word	0x0800ae35
 800ad88:	0800ae35 	.word	0x0800ae35
 800ad8c:	0800ae35 	.word	0x0800ae35
 800ad90:	0800ae35 	.word	0x0800ae35
 800ad94:	0800ae35 	.word	0x0800ae35
 800ad98:	0800ae35 	.word	0x0800ae35
 800ad9c:	0800ae35 	.word	0x0800ae35
 800ada0:	0800ae35 	.word	0x0800ae35
 800ada4:	0800ae35 	.word	0x0800ae35
		case 0://タイヤ径
			record_mode=1;
 800ada8:	4b25      	ldr	r3, [pc, #148]	; (800ae40 <mode_Log+0xf8>)
 800adaa:	2201      	movs	r2, #1
 800adac:	701a      	strb	r2, [r3, #0]
			control_test_motor2(0,1,5);
 800adae:	2205      	movs	r2, #5
 800adb0:	2101      	movs	r1, #1
 800adb2:	2000      	movs	r0, #0
 800adb4:	f7f6 f93c 	bl	8001030 <control_test_motor2>
			record_mode=0;
 800adb8:	4b21      	ldr	r3, [pc, #132]	; (800ae40 <mode_Log+0xf8>)
 800adba:	2200      	movs	r2, #0
 800adbc:	701a      	strb	r2, [r3, #0]
			while(read_switch1()==0 || read_switch2()==0){
 800adbe:	e002      	b.n	800adc6 <mode_Log+0x7e>
				wait_ms(1);
 800adc0:	2001      	movs	r0, #1
 800adc2:	f7f8 ff8d 	bl	8003ce0 <wait_ms>
			while(read_switch1()==0 || read_switch2()==0){
 800adc6:	f7f8 ff47 	bl	8003c58 <read_switch1>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d0f7      	beq.n	800adc0 <mode_Log+0x78>
 800add0:	f7f8 ff58 	bl	8003c84 <read_switch2>
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	d0f2      	beq.n	800adc0 <mode_Log+0x78>
				}
			record_print();
 800adda:	f000 f8b7 	bl	800af4c <record_print>
		break;
 800adde:	e02a      	b.n	800ae36 <mode_Log+0xee>
		case 1://トレッド幅
		break;
		case 2://壁制御
		break;
		case 3://右スラローム(探索)
			testturning(speed500_exploration,0,0);
 800ade0:	4c18      	ldr	r4, [pc, #96]	; (800ae44 <mode_Log+0xfc>)
 800ade2:	2300      	movs	r3, #0
 800ade4:	934f      	str	r3, [sp, #316]	; 0x13c
 800ade6:	2300      	movs	r3, #0
 800ade8:	934e      	str	r3, [sp, #312]	; 0x138
 800adea:	4668      	mov	r0, sp
 800adec:	f104 0310 	add.w	r3, r4, #16
 800adf0:	f44f 729c 	mov.w	r2, #312	; 0x138
 800adf4:	4619      	mov	r1, r3
 800adf6:	f006 ff21 	bl	8011c3c <memcpy>
 800adfa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800adfe:	f7fb fe37 	bl	8006a70 <testturning>
		break;
 800ae02:	e018      	b.n	800ae36 <mode_Log+0xee>
		case 4://左スラローム(探索)
			testturning(speed500_exploration,1,0);
 800ae04:	4c0f      	ldr	r4, [pc, #60]	; (800ae44 <mode_Log+0xfc>)
 800ae06:	2300      	movs	r3, #0
 800ae08:	934f      	str	r3, [sp, #316]	; 0x13c
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	934e      	str	r3, [sp, #312]	; 0x138
 800ae0e:	4668      	mov	r0, sp
 800ae10:	f104 0310 	add.w	r3, r4, #16
 800ae14:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ae18:	4619      	mov	r1, r3
 800ae1a:	f006 ff0f 	bl	8011c3c <memcpy>
 800ae1e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ae22:	f7fb fe25 	bl	8006a70 <testturning>
		break;
 800ae26:	e006      	b.n	800ae36 <mode_Log+0xee>
		case 5://右スラローム
			control_test_motor2(2,1,0);
 800ae28:	2200      	movs	r2, #0
 800ae2a:	2101      	movs	r1, #1
 800ae2c:	2002      	movs	r0, #2
 800ae2e:	f7f6 f8ff 	bl	8001030 <control_test_motor2>
		break;
 800ae32:	e000      	b.n	800ae36 <mode_Log+0xee>
		break;
 800ae34:	bf00      	nop
		break;
		case 16://左斜め135
		break;
	}

}
 800ae36:	bf00      	nop
 800ae38:	370c      	adds	r7, #12
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd90      	pop	{r4, r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	2000cdf0 	.word	0x2000cdf0
 800ae44:	20000a50 	.word	0x20000a50

0800ae48 <mode_Tuning_shortest>:

void mode_Tuning_shortest(unsigned char now_mode2){
 800ae48:	b590      	push	{r4, r7, lr}
 800ae4a:	b0d3      	sub	sp, #332	; 0x14c
 800ae4c:	af50      	add	r7, sp, #320	; 0x140
 800ae4e:	4603      	mov	r3, r0
 800ae50:	71fb      	strb	r3, [r7, #7]

	pl_motor_standby(1);
 800ae52:	2001      	movs	r0, #1
 800ae54:	f7f7 fcba 	bl	80027cc <pl_motor_standby>
	while(read_switch1()==0 || read_switch2()==0){
 800ae58:	e002      	b.n	800ae60 <mode_Tuning_shortest+0x18>
		wait_ms(1);
 800ae5a:	2001      	movs	r0, #1
 800ae5c:	f7f8 ff40 	bl	8003ce0 <wait_ms>
	while(read_switch1()==0 || read_switch2()==0){
 800ae60:	f7f8 fefa 	bl	8003c58 <read_switch1>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d0f7      	beq.n	800ae5a <mode_Tuning_shortest+0x12>
 800ae6a:	f7f8 ff0b 	bl	8003c84 <read_switch2>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d0f2      	beq.n	800ae5a <mode_Tuning_shortest+0x12>
		}
	wait_ms(2000);
 800ae74:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ae78:	f7f8 ff32 	bl	8003ce0 <wait_ms>
	testturning(speed700_shortest,now_mode2,SHORTEST);
 800ae7c:	79fb      	ldrb	r3, [r7, #7]
 800ae7e:	4c0a      	ldr	r4, [pc, #40]	; (800aea8 <mode_Tuning_shortest+0x60>)
 800ae80:	2201      	movs	r2, #1
 800ae82:	924f      	str	r2, [sp, #316]	; 0x13c
 800ae84:	934e      	str	r3, [sp, #312]	; 0x138
 800ae86:	4668      	mov	r0, sp
 800ae88:	f104 0310 	add.w	r3, r4, #16
 800ae8c:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ae90:	4619      	mov	r1, r3
 800ae92:	f006 fed3 	bl	8011c3c <memcpy>
 800ae96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ae9a:	f7fb fde9 	bl	8006a70 <testturning>

}
 800ae9e:	bf00      	nop
 800aea0:	370c      	adds	r7, #12
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd90      	pop	{r4, r7, pc}
 800aea6:	bf00      	nop
 800aea8:	20000b98 	.word	0x20000b98

0800aeac <record_reset>:
//int SEN_record[5][15];
//int SEN_recordD[5][15];



void record_reset(void) {
 800aeac:	b480      	push	{r7}
 800aeae:	af00      	add	r7, sp, #0
	record_mode=0;
 800aeb0:	4b05      	ldr	r3, [pc, #20]	; (800aec8 <record_reset+0x1c>)
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	701a      	strb	r2, [r3, #0]
	record_time = 0;
 800aeb6:	4b05      	ldr	r3, [pc, #20]	; (800aecc <record_reset+0x20>)
 800aeb8:	2200      	movs	r2, #0
 800aeba:	601a      	str	r2, [r3, #0]
}
 800aebc:	bf00      	nop
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr
 800aec6:	bf00      	nop
 800aec8:	2000cdf0 	.word	0x2000cdf0
 800aecc:	2000cdf4 	.word	0x2000cdf4

0800aed0 <record_data>:



void record_data(float *input_record_data, int numlen) {
 800aed0:	b490      	push	{r4, r7}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
	if (record_mode == 1) {
 800aeda:	4b19      	ldr	r3, [pc, #100]	; (800af40 <record_data+0x70>)
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d128      	bne.n	800af34 <record_data+0x64>
		for (int record_count = 0; record_count < numlen; record_count++) {
 800aee2:	2300      	movs	r3, #0
 800aee4:	60fb      	str	r3, [r7, #12]
 800aee6:	e013      	b.n	800af10 <record_data+0x40>
		record_value[record_count][record_time] = input_record_data[record_count];
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	441a      	add	r2, r3
 800aef0:	4b14      	ldr	r3, [pc, #80]	; (800af44 <record_data+0x74>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	6812      	ldr	r2, [r2, #0]
 800aef6:	4814      	ldr	r0, [pc, #80]	; (800af48 <record_data+0x78>)
 800aef8:	68f9      	ldr	r1, [r7, #12]
 800aefa:	f640 34b8 	movw	r4, #3000	; 0xbb8
 800aefe:	fb04 f101 	mul.w	r1, r4, r1
 800af02:	440b      	add	r3, r1
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	4403      	add	r3, r0
 800af08:	601a      	str	r2, [r3, #0]
		for (int record_count = 0; record_count < numlen; record_count++) {
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	3301      	adds	r3, #1
 800af0e:	60fb      	str	r3, [r7, #12]
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	429a      	cmp	r2, r3
 800af16:	dbe7      	blt.n	800aee8 <record_data+0x18>
		}


		record_time++;
 800af18:	4b0a      	ldr	r3, [pc, #40]	; (800af44 <record_data+0x74>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	3301      	adds	r3, #1
 800af1e:	4a09      	ldr	r2, [pc, #36]	; (800af44 <record_data+0x74>)
 800af20:	6013      	str	r3, [r2, #0]
		if (record_time >= max_record_time) {
 800af22:	4b08      	ldr	r3, [pc, #32]	; (800af44 <record_data+0x74>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800af2a:	4293      	cmp	r3, r2
 800af2c:	dd02      	ble.n	800af34 <record_data+0x64>
					record_mode = 0;
 800af2e:	4b04      	ldr	r3, [pc, #16]	; (800af40 <record_data+0x70>)
 800af30:	2200      	movs	r2, #0
 800af32:	701a      	strb	r2, [r3, #0]
				}
	}
}
 800af34:	bf00      	nop
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bc90      	pop	{r4, r7}
 800af3c:	4770      	bx	lr
 800af3e:	bf00      	nop
 800af40:	2000cdf0 	.word	0x2000cdf0
 800af44:	2000cdf4 	.word	0x2000cdf4
 800af48:	20001270 	.word	0x20001270

0800af4c <record_print>:

void record_print(void) {
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
	int a;
	for (a = 0; a <= record_time; a++) {
 800af52:	2300      	movs	r3, #0
 800af54:	607b      	str	r3, [r7, #4]
 800af56:	e025      	b.n	800afa4 <record_print+0x58>
		printf("%d", a);
 800af58:	6879      	ldr	r1, [r7, #4]
 800af5a:	4817      	ldr	r0, [pc, #92]	; (800afb8 <record_print+0x6c>)
 800af5c:	f007 faee 	bl	801253c <iprintf>
		for (int record_count = 0; record_count < max_record_num; record_count++) {
 800af60:	2300      	movs	r3, #0
 800af62:	603b      	str	r3, [r7, #0]
 800af64:	e015      	b.n	800af92 <record_print+0x46>
		printf(",%f", record_value[record_count][a]);
 800af66:	4915      	ldr	r1, [pc, #84]	; (800afbc <record_print+0x70>)
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800af6e:	fb03 f202 	mul.w	r2, r3, r2
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4413      	add	r3, r2
 800af76:	009b      	lsls	r3, r3, #2
 800af78:	440b      	add	r3, r1
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7f5 fae3 	bl	8000548 <__aeabi_f2d>
 800af82:	4602      	mov	r2, r0
 800af84:	460b      	mov	r3, r1
 800af86:	480e      	ldr	r0, [pc, #56]	; (800afc0 <record_print+0x74>)
 800af88:	f007 fad8 	bl	801253c <iprintf>
		for (int record_count = 0; record_count < max_record_num; record_count++) {
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	3301      	adds	r3, #1
 800af90:	603b      	str	r3, [r7, #0]
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	2b03      	cmp	r3, #3
 800af96:	dde6      	ble.n	800af66 <record_print+0x1a>
		}
		printf("\n");
 800af98:	200a      	movs	r0, #10
 800af9a:	f007 fae7 	bl	801256c <putchar>
	for (a = 0; a <= record_time; a++) {
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	3301      	adds	r3, #1
 800afa2:	607b      	str	r3, [r7, #4]
 800afa4:	4b07      	ldr	r3, [pc, #28]	; (800afc4 <record_print+0x78>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	429a      	cmp	r2, r3
 800afac:	ddd4      	ble.n	800af58 <record_print+0xc>
	}
}
 800afae:	bf00      	nop
 800afb0:	bf00      	nop
 800afb2:	3708      	adds	r7, #8
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	08014f68 	.word	0x08014f68
 800afbc:	20001270 	.word	0x20001270
 800afc0:	08014f6c 	.word	0x08014f6c
 800afc4:	2000cdf4 	.word	0x2000cdf4

0800afc8 <interrupt_record>:

void interrupt_record(void){
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0

	float r_data[max_record_num]={(float)(g_sensor[0][0]),(float)(g_sensor[1][0]),(float)(g_sensor[2][0]),(float)(g_sensor[3][0])};
 800afce:	4b15      	ldr	r3, [pc, #84]	; (800b024 <interrupt_record+0x5c>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	ee07 3a90 	vmov	s15, r3
 800afd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afda:	edc7 7a00 	vstr	s15, [r7]
 800afde:	4b11      	ldr	r3, [pc, #68]	; (800b024 <interrupt_record+0x5c>)
 800afe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afe2:	ee07 3a90 	vmov	s15, r3
 800afe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afea:	edc7 7a01 	vstr	s15, [r7, #4]
 800afee:	4b0d      	ldr	r3, [pc, #52]	; (800b024 <interrupt_record+0x5c>)
 800aff0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aff4:	ee07 3a90 	vmov	s15, r3
 800aff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800affc:	edc7 7a02 	vstr	s15, [r7, #8]
 800b000:	4b08      	ldr	r3, [pc, #32]	; (800b024 <interrupt_record+0x5c>)
 800b002:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b006:	ee07 3a90 	vmov	s15, r3
 800b00a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b00e:	edc7 7a03 	vstr	s15, [r7, #12]
	//	float r_data[max_record_num]={g_TargetStraight.velocity};
	record_data(r_data, max_record_num);
 800b012:	463b      	mov	r3, r7
 800b014:	2104      	movs	r1, #4
 800b016:	4618      	mov	r0, r3
 800b018:	f7ff ff5a 	bl	800aed0 <record_data>



}
 800b01c:	bf00      	nop
 800b01e:	3710      	adds	r7, #16
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}
 800b024:	2000023c 	.word	0x2000023c

0800b028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b02e:	4b0f      	ldr	r3, [pc, #60]	; (800b06c <HAL_MspInit+0x44>)
 800b030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b032:	4a0e      	ldr	r2, [pc, #56]	; (800b06c <HAL_MspInit+0x44>)
 800b034:	f043 0301 	orr.w	r3, r3, #1
 800b038:	6613      	str	r3, [r2, #96]	; 0x60
 800b03a:	4b0c      	ldr	r3, [pc, #48]	; (800b06c <HAL_MspInit+0x44>)
 800b03c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b03e:	f003 0301 	and.w	r3, r3, #1
 800b042:	607b      	str	r3, [r7, #4]
 800b044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b046:	4b09      	ldr	r3, [pc, #36]	; (800b06c <HAL_MspInit+0x44>)
 800b048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b04a:	4a08      	ldr	r2, [pc, #32]	; (800b06c <HAL_MspInit+0x44>)
 800b04c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b050:	6593      	str	r3, [r2, #88]	; 0x58
 800b052:	4b06      	ldr	r3, [pc, #24]	; (800b06c <HAL_MspInit+0x44>)
 800b054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b05a:	603b      	str	r3, [r7, #0]
 800b05c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b05e:	bf00      	nop
 800b060:	370c      	adds	r7, #12
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop
 800b06c:	40021000 	.word	0x40021000

0800b070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b070:	b480      	push	{r7}
 800b072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b074:	e7fe      	b.n	800b074 <NMI_Handler+0x4>

0800b076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b076:	b480      	push	{r7}
 800b078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b07a:	e7fe      	b.n	800b07a <HardFault_Handler+0x4>

0800b07c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b07c:	b480      	push	{r7}
 800b07e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b080:	e7fe      	b.n	800b080 <MemManage_Handler+0x4>

0800b082 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b082:	b480      	push	{r7}
 800b084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b086:	e7fe      	b.n	800b086 <BusFault_Handler+0x4>

0800b088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b088:	b480      	push	{r7}
 800b08a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b08c:	e7fe      	b.n	800b08c <UsageFault_Handler+0x4>

0800b08e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b08e:	b480      	push	{r7}
 800b090:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b092:	bf00      	nop
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b09c:	b480      	push	{r7}
 800b09e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b0a0:	bf00      	nop
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr

0800b0aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b0aa:	b480      	push	{r7}
 800b0ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b0ae:	bf00      	nop
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b0bc:	f001 fa9c 	bl	800c5f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b0c0:	bf00      	nop
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800b0c8:	4802      	ldr	r0, [pc, #8]	; (800b0d4 <DMA1_Channel1_IRQHandler+0x10>)
 800b0ca:	f003 f8bd 	bl	800e248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800b0ce:	bf00      	nop
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	200009bc 	.word	0x200009bc

0800b0d8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	  pl_interrupt_motor_count_L();
 800b0dc:	f7f7 fc2c 	bl	8002938 <pl_interrupt_motor_count_L>
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b0e0:	4802      	ldr	r0, [pc, #8]	; (800b0ec <TIM1_UP_TIM16_IRQHandler+0x14>)
 800b0e2:	f005 faa3 	bl	801062c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800b0e6:	bf00      	nop
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	2000cdfc 	.word	0x2000cdfc

0800b0f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	  pl_interrupt_motor_count_R();
 800b0f4:	f7f7 fc4c 	bl	8002990 <pl_interrupt_motor_count_R>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b0f8:	4802      	ldr	r0, [pc, #8]	; (800b104 <TIM2_IRQHandler+0x14>)
 800b0fa:	f005 fa97 	bl	801062c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800b0fe:	bf00      	nop
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	2000ce48 	.word	0x2000ce48

0800b108 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b10c:	4807      	ldr	r0, [pc, #28]	; (800b12c <TIM6_DAC_IRQHandler+0x24>)
 800b10e:	f005 fa8d 	bl	801062c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  pl_timer_count();
 800b112:	f7f8 fdd7 	bl	8003cc4 <pl_timer_count>
  pl_interupt_getSensor();
 800b116:	f7f7 fded 	bl	8002cf4 <pl_interupt_getSensor>
  interrupt_calSensor();
 800b11a:	f7f7 f839 	bl	8002190 <interrupt_calSensor>
  interrupt_Motor();
 800b11e:	f7f6 f827 	bl	8001170 <interrupt_Motor>
  interrupt_record();
 800b122:	f7ff ff51 	bl	800afc8 <interrupt_record>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b126:	bf00      	nop
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	2000ce94 	.word	0x2000ce94

0800b130 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b130:	b480      	push	{r7}
 800b132:	af00      	add	r7, sp, #0
	return 1;
 800b134:	2301      	movs	r3, #1
}
 800b136:	4618      	mov	r0, r3
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <_kill>:

int _kill(int pid, int sig)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b14a:	f006 fd4d 	bl	8011be8 <__errno>
 800b14e:	4603      	mov	r3, r0
 800b150:	2216      	movs	r2, #22
 800b152:	601a      	str	r2, [r3, #0]
	return -1;
 800b154:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <_exit>:

void _exit (int status)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b168:	f04f 31ff 	mov.w	r1, #4294967295
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f7ff ffe7 	bl	800b140 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b172:	e7fe      	b.n	800b172 <_exit+0x12>

0800b174 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b086      	sub	sp, #24
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b180:	2300      	movs	r3, #0
 800b182:	617b      	str	r3, [r7, #20]
 800b184:	e00a      	b.n	800b19c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b186:	f3af 8000 	nop.w
 800b18a:	4601      	mov	r1, r0
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	1c5a      	adds	r2, r3, #1
 800b190:	60ba      	str	r2, [r7, #8]
 800b192:	b2ca      	uxtb	r2, r1
 800b194:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	3301      	adds	r3, #1
 800b19a:	617b      	str	r3, [r7, #20]
 800b19c:	697a      	ldr	r2, [r7, #20]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	dbf0      	blt.n	800b186 <_read+0x12>
	}

return len;
 800b1a4:	687b      	ldr	r3, [r7, #4]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3718      	adds	r7, #24
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
	...

0800b1b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b086      	sub	sp, #24
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	60f8      	str	r0, [r7, #12]
 800b1b8:	60b9      	str	r1, [r7, #8]
 800b1ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b1bc:	2300      	movs	r3, #0
 800b1be:	617b      	str	r3, [r7, #20]
 800b1c0:	e00a      	b.n	800b1d8 <_write+0x28>
	{
		HAL_UART_Transmit(&huart2, ptr++, 1, 1);
 800b1c2:	68b9      	ldr	r1, [r7, #8]
 800b1c4:	1c4b      	adds	r3, r1, #1
 800b1c6:	60bb      	str	r3, [r7, #8]
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	4807      	ldr	r0, [pc, #28]	; (800b1ec <_write+0x3c>)
 800b1ce:	f006 f8e1 	bl	8011394 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	617b      	str	r3, [r7, #20]
 800b1d8:	697a      	ldr	r2, [r7, #20]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	dbf0      	blt.n	800b1c2 <_write+0x12>
	}
	return len;
 800b1e0:	687b      	ldr	r3, [r7, #4]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3718      	adds	r7, #24
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	2000cf2c 	.word	0x2000cf2c

0800b1f0 <_close>:

int _close(int file)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
	return -1;
 800b1f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	370c      	adds	r7, #12
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b218:	605a      	str	r2, [r3, #4]
	return 0;
 800b21a:	2300      	movs	r3, #0
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <_isatty>:

int _isatty(int file)
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
	return 1;
 800b230:	2301      	movs	r3, #1
}
 800b232:	4618      	mov	r0, r3
 800b234:	370c      	adds	r7, #12
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr

0800b23e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b23e:	b480      	push	{r7}
 800b240:	b085      	sub	sp, #20
 800b242:	af00      	add	r7, sp, #0
 800b244:	60f8      	str	r0, [r7, #12]
 800b246:	60b9      	str	r1, [r7, #8]
 800b248:	607a      	str	r2, [r7, #4]
	return 0;
 800b24a:	2300      	movs	r3, #0
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3714      	adds	r7, #20
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b086      	sub	sp, #24
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b260:	4a14      	ldr	r2, [pc, #80]	; (800b2b4 <_sbrk+0x5c>)
 800b262:	4b15      	ldr	r3, [pc, #84]	; (800b2b8 <_sbrk+0x60>)
 800b264:	1ad3      	subs	r3, r2, r3
 800b266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b26c:	4b13      	ldr	r3, [pc, #76]	; (800b2bc <_sbrk+0x64>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d102      	bne.n	800b27a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b274:	4b11      	ldr	r3, [pc, #68]	; (800b2bc <_sbrk+0x64>)
 800b276:	4a12      	ldr	r2, [pc, #72]	; (800b2c0 <_sbrk+0x68>)
 800b278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b27a:	4b10      	ldr	r3, [pc, #64]	; (800b2bc <_sbrk+0x64>)
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4413      	add	r3, r2
 800b282:	693a      	ldr	r2, [r7, #16]
 800b284:	429a      	cmp	r2, r3
 800b286:	d207      	bcs.n	800b298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b288:	f006 fcae 	bl	8011be8 <__errno>
 800b28c:	4603      	mov	r3, r0
 800b28e:	220c      	movs	r2, #12
 800b290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b292:	f04f 33ff 	mov.w	r3, #4294967295
 800b296:	e009      	b.n	800b2ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b298:	4b08      	ldr	r3, [pc, #32]	; (800b2bc <_sbrk+0x64>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b29e:	4b07      	ldr	r3, [pc, #28]	; (800b2bc <_sbrk+0x64>)
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	4a05      	ldr	r2, [pc, #20]	; (800b2bc <_sbrk+0x64>)
 800b2a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3718      	adds	r7, #24
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	20010000 	.word	0x20010000
 800b2b8:	00000400 	.word	0x00000400
 800b2bc:	2000cdf8 	.word	0x2000cdf8
 800b2c0:	2000cfc8 	.word	0x2000cfc8

0800b2c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800b2c8:	4b06      	ldr	r3, [pc, #24]	; (800b2e4 <SystemInit+0x20>)
 800b2ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2ce:	4a05      	ldr	r2, [pc, #20]	; (800b2e4 <SystemInit+0x20>)
 800b2d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b2d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800b2d8:	bf00      	nop
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	e000ed00 	.word	0xe000ed00

0800b2e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b096      	sub	sp, #88	; 0x58
 800b2ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b2ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	601a      	str	r2, [r3, #0]
 800b2f6:	605a      	str	r2, [r3, #4]
 800b2f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b2fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b2fe:	2200      	movs	r2, #0
 800b300:	601a      	str	r2, [r3, #0]
 800b302:	605a      	str	r2, [r3, #4]
 800b304:	609a      	str	r2, [r3, #8]
 800b306:	60da      	str	r2, [r3, #12]
 800b308:	611a      	str	r2, [r3, #16]
 800b30a:	615a      	str	r2, [r3, #20]
 800b30c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800b30e:	1d3b      	adds	r3, r7, #4
 800b310:	222c      	movs	r2, #44	; 0x2c
 800b312:	2100      	movs	r1, #0
 800b314:	4618      	mov	r0, r3
 800b316:	f006 fc9f 	bl	8011c58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800b31a:	4b39      	ldr	r3, [pc, #228]	; (800b400 <MX_TIM1_Init+0x118>)
 800b31c:	4a39      	ldr	r2, [pc, #228]	; (800b404 <MX_TIM1_Init+0x11c>)
 800b31e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 800b320:	4b37      	ldr	r3, [pc, #220]	; (800b400 <MX_TIM1_Init+0x118>)
 800b322:	2207      	movs	r2, #7
 800b324:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b326:	4b36      	ldr	r3, [pc, #216]	; (800b400 <MX_TIM1_Init+0x118>)
 800b328:	2200      	movs	r2, #0
 800b32a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 800b32c:	4b34      	ldr	r3, [pc, #208]	; (800b400 <MX_TIM1_Init+0x118>)
 800b32e:	f242 720f 	movw	r2, #9999	; 0x270f
 800b332:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b334:	4b32      	ldr	r3, [pc, #200]	; (800b400 <MX_TIM1_Init+0x118>)
 800b336:	2200      	movs	r2, #0
 800b338:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800b33a:	4b31      	ldr	r3, [pc, #196]	; (800b400 <MX_TIM1_Init+0x118>)
 800b33c:	2200      	movs	r2, #0
 800b33e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b340:	4b2f      	ldr	r3, [pc, #188]	; (800b400 <MX_TIM1_Init+0x118>)
 800b342:	2200      	movs	r2, #0
 800b344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800b346:	482e      	ldr	r0, [pc, #184]	; (800b400 <MX_TIM1_Init+0x118>)
 800b348:	f004 ffb2 	bl	80102b0 <HAL_TIM_PWM_Init>
 800b34c:	4603      	mov	r3, r0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d001      	beq.n	800b356 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800b352:	f7f9 f84c 	bl	80043ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b356:	2300      	movs	r3, #0
 800b358:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800b35a:	2300      	movs	r3, #0
 800b35c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b35e:	2300      	movs	r3, #0
 800b360:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800b362:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b366:	4619      	mov	r1, r3
 800b368:	4825      	ldr	r0, [pc, #148]	; (800b400 <MX_TIM1_Init+0x118>)
 800b36a:	f005 fec9 	bl	8011100 <HAL_TIMEx_MasterConfigSynchronization>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	d001      	beq.n	800b378 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800b374:	f7f9 f83b 	bl	80043ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b378:	2360      	movs	r3, #96	; 0x60
 800b37a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 5000-1;
 800b37c:	f241 3387 	movw	r3, #4999	; 0x1387
 800b380:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b382:	2300      	movs	r3, #0
 800b384:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800b386:	2300      	movs	r3, #0
 800b388:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b38a:	2300      	movs	r3, #0
 800b38c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800b38e:	2300      	movs	r3, #0
 800b390:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800b392:	2300      	movs	r3, #0
 800b394:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b396:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b39a:	2200      	movs	r2, #0
 800b39c:	4619      	mov	r1, r3
 800b39e:	4818      	ldr	r0, [pc, #96]	; (800b400 <MX_TIM1_Init+0x118>)
 800b3a0:	f005 fa64 	bl	801086c <HAL_TIM_PWM_ConfigChannel>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d001      	beq.n	800b3ae <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800b3aa:	f7f9 f820 	bl	80043ee <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800b3c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b3c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800b3d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b3d4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800b3de:	1d3b      	adds	r3, r7, #4
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	4807      	ldr	r0, [pc, #28]	; (800b400 <MX_TIM1_Init+0x118>)
 800b3e4:	f005 fef2 	bl	80111cc <HAL_TIMEx_ConfigBreakDeadTime>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d001      	beq.n	800b3f2 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800b3ee:	f7f8 fffe 	bl	80043ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800b3f2:	4803      	ldr	r0, [pc, #12]	; (800b400 <MX_TIM1_Init+0x118>)
 800b3f4:	f000 f998 	bl	800b728 <HAL_TIM_MspPostInit>

}
 800b3f8:	bf00      	nop
 800b3fa:	3758      	adds	r7, #88	; 0x58
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}
 800b400:	2000cdfc 	.word	0x2000cdfc
 800b404:	40012c00 	.word	0x40012c00

0800b408 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b08a      	sub	sp, #40	; 0x28
 800b40c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b40e:	f107 031c 	add.w	r3, r7, #28
 800b412:	2200      	movs	r2, #0
 800b414:	601a      	str	r2, [r3, #0]
 800b416:	605a      	str	r2, [r3, #4]
 800b418:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b41a:	463b      	mov	r3, r7
 800b41c:	2200      	movs	r2, #0
 800b41e:	601a      	str	r2, [r3, #0]
 800b420:	605a      	str	r2, [r3, #4]
 800b422:	609a      	str	r2, [r3, #8]
 800b424:	60da      	str	r2, [r3, #12]
 800b426:	611a      	str	r2, [r3, #16]
 800b428:	615a      	str	r2, [r3, #20]
 800b42a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b42c:	4b22      	ldr	r3, [pc, #136]	; (800b4b8 <MX_TIM2_Init+0xb0>)
 800b42e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b432:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 800b434:	4b20      	ldr	r3, [pc, #128]	; (800b4b8 <MX_TIM2_Init+0xb0>)
 800b436:	2207      	movs	r2, #7
 800b438:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b43a:	4b1f      	ldr	r3, [pc, #124]	; (800b4b8 <MX_TIM2_Init+0xb0>)
 800b43c:	2200      	movs	r2, #0
 800b43e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800b440:	4b1d      	ldr	r3, [pc, #116]	; (800b4b8 <MX_TIM2_Init+0xb0>)
 800b442:	f242 720f 	movw	r2, #9999	; 0x270f
 800b446:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b448:	4b1b      	ldr	r3, [pc, #108]	; (800b4b8 <MX_TIM2_Init+0xb0>)
 800b44a:	2200      	movs	r2, #0
 800b44c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b44e:	4b1a      	ldr	r3, [pc, #104]	; (800b4b8 <MX_TIM2_Init+0xb0>)
 800b450:	2200      	movs	r2, #0
 800b452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800b454:	4818      	ldr	r0, [pc, #96]	; (800b4b8 <MX_TIM2_Init+0xb0>)
 800b456:	f004 ff2b 	bl	80102b0 <HAL_TIM_PWM_Init>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d001      	beq.n	800b464 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800b460:	f7f8 ffc5 	bl	80043ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b464:	2300      	movs	r3, #0
 800b466:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b468:	2300      	movs	r3, #0
 800b46a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b46c:	f107 031c 	add.w	r3, r7, #28
 800b470:	4619      	mov	r1, r3
 800b472:	4811      	ldr	r0, [pc, #68]	; (800b4b8 <MX_TIM2_Init+0xb0>)
 800b474:	f005 fe44 	bl	8011100 <HAL_TIMEx_MasterConfigSynchronization>
 800b478:	4603      	mov	r3, r0
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d001      	beq.n	800b482 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800b47e:	f7f8 ffb6 	bl	80043ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b482:	2360      	movs	r3, #96	; 0x60
 800b484:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000-1;
 800b486:	f241 3387 	movw	r3, #4999	; 0x1387
 800b48a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b48c:	2300      	movs	r3, #0
 800b48e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b490:	2300      	movs	r3, #0
 800b492:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b494:	463b      	mov	r3, r7
 800b496:	2204      	movs	r2, #4
 800b498:	4619      	mov	r1, r3
 800b49a:	4807      	ldr	r0, [pc, #28]	; (800b4b8 <MX_TIM2_Init+0xb0>)
 800b49c:	f005 f9e6 	bl	801086c <HAL_TIM_PWM_ConfigChannel>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d001      	beq.n	800b4aa <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800b4a6:	f7f8 ffa2 	bl	80043ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800b4aa:	4803      	ldr	r0, [pc, #12]	; (800b4b8 <MX_TIM2_Init+0xb0>)
 800b4ac:	f000 f93c 	bl	800b728 <HAL_TIM_MspPostInit>

}
 800b4b0:	bf00      	nop
 800b4b2:	3728      	adds	r7, #40	; 0x28
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	2000ce48 	.word	0x2000ce48

0800b4bc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b4c2:	1d3b      	adds	r3, r7, #4
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	601a      	str	r2, [r3, #0]
 800b4c8:	605a      	str	r2, [r3, #4]
 800b4ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800b4cc:	4b14      	ldr	r3, [pc, #80]	; (800b520 <MX_TIM6_Init+0x64>)
 800b4ce:	4a15      	ldr	r2, [pc, #84]	; (800b524 <MX_TIM6_Init+0x68>)
 800b4d0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 800b4d2:	4b13      	ldr	r3, [pc, #76]	; (800b520 <MX_TIM6_Init+0x64>)
 800b4d4:	224f      	movs	r2, #79	; 0x4f
 800b4d6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b4d8:	4b11      	ldr	r3, [pc, #68]	; (800b520 <MX_TIM6_Init+0x64>)
 800b4da:	2200      	movs	r2, #0
 800b4dc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800b4de:	4b10      	ldr	r3, [pc, #64]	; (800b520 <MX_TIM6_Init+0x64>)
 800b4e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b4e4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800b4e6:	4b0e      	ldr	r3, [pc, #56]	; (800b520 <MX_TIM6_Init+0x64>)
 800b4e8:	2280      	movs	r2, #128	; 0x80
 800b4ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800b4ec:	480c      	ldr	r0, [pc, #48]	; (800b520 <MX_TIM6_Init+0x64>)
 800b4ee:	f004 fe33 	bl	8010158 <HAL_TIM_Base_Init>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d001      	beq.n	800b4fc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800b4f8:	f7f8 ff79 	bl	80043ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b500:	2300      	movs	r3, #0
 800b502:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800b504:	1d3b      	adds	r3, r7, #4
 800b506:	4619      	mov	r1, r3
 800b508:	4805      	ldr	r0, [pc, #20]	; (800b520 <MX_TIM6_Init+0x64>)
 800b50a:	f005 fdf9 	bl	8011100 <HAL_TIMEx_MasterConfigSynchronization>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b00      	cmp	r3, #0
 800b512:	d001      	beq.n	800b518 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800b514:	f7f8 ff6b 	bl	80043ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800b518:	bf00      	nop
 800b51a:	3710      	adds	r7, #16
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	2000ce94 	.word	0x2000ce94
 800b524:	40001000 	.word	0x40001000

0800b528 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b096      	sub	sp, #88	; 0x58
 800b52c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b52e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b532:	2200      	movs	r2, #0
 800b534:	601a      	str	r2, [r3, #0]
 800b536:	605a      	str	r2, [r3, #4]
 800b538:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b53a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b53e:	2200      	movs	r2, #0
 800b540:	601a      	str	r2, [r3, #0]
 800b542:	605a      	str	r2, [r3, #4]
 800b544:	609a      	str	r2, [r3, #8]
 800b546:	60da      	str	r2, [r3, #12]
 800b548:	611a      	str	r2, [r3, #16]
 800b54a:	615a      	str	r2, [r3, #20]
 800b54c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800b54e:	1d3b      	adds	r3, r7, #4
 800b550:	222c      	movs	r2, #44	; 0x2c
 800b552:	2100      	movs	r1, #0
 800b554:	4618      	mov	r0, r3
 800b556:	f006 fb7f 	bl	8011c58 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800b55a:	4b34      	ldr	r3, [pc, #208]	; (800b62c <MX_TIM15_Init+0x104>)
 800b55c:	4a34      	ldr	r2, [pc, #208]	; (800b630 <MX_TIM15_Init+0x108>)
 800b55e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 800b560:	4b32      	ldr	r3, [pc, #200]	; (800b62c <MX_TIM15_Init+0x104>)
 800b562:	224f      	movs	r2, #79	; 0x4f
 800b564:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b566:	4b31      	ldr	r3, [pc, #196]	; (800b62c <MX_TIM15_Init+0x104>)
 800b568:	2200      	movs	r2, #0
 800b56a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 5000-1;
 800b56c:	4b2f      	ldr	r3, [pc, #188]	; (800b62c <MX_TIM15_Init+0x104>)
 800b56e:	f241 3287 	movw	r2, #4999	; 0x1387
 800b572:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b574:	4b2d      	ldr	r3, [pc, #180]	; (800b62c <MX_TIM15_Init+0x104>)
 800b576:	2200      	movs	r2, #0
 800b578:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800b57a:	4b2c      	ldr	r3, [pc, #176]	; (800b62c <MX_TIM15_Init+0x104>)
 800b57c:	2200      	movs	r2, #0
 800b57e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b580:	4b2a      	ldr	r3, [pc, #168]	; (800b62c <MX_TIM15_Init+0x104>)
 800b582:	2200      	movs	r2, #0
 800b584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800b586:	4829      	ldr	r0, [pc, #164]	; (800b62c <MX_TIM15_Init+0x104>)
 800b588:	f004 fe92 	bl	80102b0 <HAL_TIM_PWM_Init>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d001      	beq.n	800b596 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800b592:	f7f8 ff2c 	bl	80043ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b596:	2300      	movs	r3, #0
 800b598:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b59a:	2300      	movs	r3, #0
 800b59c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800b59e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	4821      	ldr	r0, [pc, #132]	; (800b62c <MX_TIM15_Init+0x104>)
 800b5a6:	f005 fdab 	bl	8011100 <HAL_TIMEx_MasterConfigSynchronization>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d001      	beq.n	800b5b4 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800b5b0:	f7f8 ff1d 	bl	80043ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b5b4:	2360      	movs	r3, #96	; 0x60
 800b5b6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 2500-1;
 800b5b8:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800b5bc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b5d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b5d6:	2204      	movs	r2, #4
 800b5d8:	4619      	mov	r1, r3
 800b5da:	4814      	ldr	r0, [pc, #80]	; (800b62c <MX_TIM15_Init+0x104>)
 800b5dc:	f005 f946 	bl	801086c <HAL_TIM_PWM_ConfigChannel>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d001      	beq.n	800b5ea <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 800b5e6:	f7f8 ff02 	bl	80043ee <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800b5fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b602:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800b604:	2300      	movs	r3, #0
 800b606:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800b608:	1d3b      	adds	r3, r7, #4
 800b60a:	4619      	mov	r1, r3
 800b60c:	4807      	ldr	r0, [pc, #28]	; (800b62c <MX_TIM15_Init+0x104>)
 800b60e:	f005 fddd 	bl	80111cc <HAL_TIMEx_ConfigBreakDeadTime>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d001      	beq.n	800b61c <MX_TIM15_Init+0xf4>
  {
    Error_Handler();
 800b618:	f7f8 fee9 	bl	80043ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800b61c:	4803      	ldr	r0, [pc, #12]	; (800b62c <MX_TIM15_Init+0x104>)
 800b61e:	f000 f883 	bl	800b728 <HAL_TIM_MspPostInit>

}
 800b622:	bf00      	nop
 800b624:	3758      	adds	r7, #88	; 0x58
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	2000cee0 	.word	0x2000cee0
 800b630:	40014000 	.word	0x40014000

0800b634 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b086      	sub	sp, #24
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4a23      	ldr	r2, [pc, #140]	; (800b6d0 <HAL_TIM_PWM_MspInit+0x9c>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d114      	bne.n	800b670 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b646:	4b23      	ldr	r3, [pc, #140]	; (800b6d4 <HAL_TIM_PWM_MspInit+0xa0>)
 800b648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b64a:	4a22      	ldr	r2, [pc, #136]	; (800b6d4 <HAL_TIM_PWM_MspInit+0xa0>)
 800b64c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b650:	6613      	str	r3, [r2, #96]	; 0x60
 800b652:	4b20      	ldr	r3, [pc, #128]	; (800b6d4 <HAL_TIM_PWM_MspInit+0xa0>)
 800b654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b65a:	617b      	str	r3, [r7, #20]
 800b65c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800b65e:	2200      	movs	r2, #0
 800b660:	2100      	movs	r1, #0
 800b662:	2019      	movs	r0, #25
 800b664:	f002 fc63 	bl	800df2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800b668:	2019      	movs	r0, #25
 800b66a:	f002 fc7c 	bl	800df66 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800b66e:	e02a      	b.n	800b6c6 <HAL_TIM_PWM_MspInit+0x92>
  else if(tim_pwmHandle->Instance==TIM2)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b678:	d114      	bne.n	800b6a4 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b67a:	4b16      	ldr	r3, [pc, #88]	; (800b6d4 <HAL_TIM_PWM_MspInit+0xa0>)
 800b67c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b67e:	4a15      	ldr	r2, [pc, #84]	; (800b6d4 <HAL_TIM_PWM_MspInit+0xa0>)
 800b680:	f043 0301 	orr.w	r3, r3, #1
 800b684:	6593      	str	r3, [r2, #88]	; 0x58
 800b686:	4b13      	ldr	r3, [pc, #76]	; (800b6d4 <HAL_TIM_PWM_MspInit+0xa0>)
 800b688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b68a:	f003 0301 	and.w	r3, r3, #1
 800b68e:	613b      	str	r3, [r7, #16]
 800b690:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b692:	2200      	movs	r2, #0
 800b694:	2100      	movs	r1, #0
 800b696:	201c      	movs	r0, #28
 800b698:	f002 fc49 	bl	800df2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b69c:	201c      	movs	r0, #28
 800b69e:	f002 fc62 	bl	800df66 <HAL_NVIC_EnableIRQ>
}
 800b6a2:	e010      	b.n	800b6c6 <HAL_TIM_PWM_MspInit+0x92>
  else if(tim_pwmHandle->Instance==TIM15)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4a0b      	ldr	r2, [pc, #44]	; (800b6d8 <HAL_TIM_PWM_MspInit+0xa4>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d10b      	bne.n	800b6c6 <HAL_TIM_PWM_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800b6ae:	4b09      	ldr	r3, [pc, #36]	; (800b6d4 <HAL_TIM_PWM_MspInit+0xa0>)
 800b6b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6b2:	4a08      	ldr	r2, [pc, #32]	; (800b6d4 <HAL_TIM_PWM_MspInit+0xa0>)
 800b6b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b6b8:	6613      	str	r3, [r2, #96]	; 0x60
 800b6ba:	4b06      	ldr	r3, [pc, #24]	; (800b6d4 <HAL_TIM_PWM_MspInit+0xa0>)
 800b6bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b6c2:	60fb      	str	r3, [r7, #12]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
}
 800b6c6:	bf00      	nop
 800b6c8:	3718      	adds	r7, #24
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	40012c00 	.word	0x40012c00
 800b6d4:	40021000 	.word	0x40021000
 800b6d8:	40014000 	.word	0x40014000

0800b6dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a0d      	ldr	r2, [pc, #52]	; (800b720 <HAL_TIM_Base_MspInit+0x44>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d113      	bne.n	800b716 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800b6ee:	4b0d      	ldr	r3, [pc, #52]	; (800b724 <HAL_TIM_Base_MspInit+0x48>)
 800b6f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6f2:	4a0c      	ldr	r2, [pc, #48]	; (800b724 <HAL_TIM_Base_MspInit+0x48>)
 800b6f4:	f043 0310 	orr.w	r3, r3, #16
 800b6f8:	6593      	str	r3, [r2, #88]	; 0x58
 800b6fa:	4b0a      	ldr	r3, [pc, #40]	; (800b724 <HAL_TIM_Base_MspInit+0x48>)
 800b6fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6fe:	f003 0310 	and.w	r3, r3, #16
 800b702:	60fb      	str	r3, [r7, #12]
 800b704:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 4, 0);
 800b706:	2200      	movs	r2, #0
 800b708:	2104      	movs	r1, #4
 800b70a:	2036      	movs	r0, #54	; 0x36
 800b70c:	f002 fc0f 	bl	800df2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b710:	2036      	movs	r0, #54	; 0x36
 800b712:	f002 fc28 	bl	800df66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800b716:	bf00      	nop
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	40001000 	.word	0x40001000
 800b724:	40021000 	.word	0x40021000

0800b728 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b08a      	sub	sp, #40	; 0x28
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b730:	f107 0314 	add.w	r3, r7, #20
 800b734:	2200      	movs	r2, #0
 800b736:	601a      	str	r2, [r3, #0]
 800b738:	605a      	str	r2, [r3, #4]
 800b73a:	609a      	str	r2, [r3, #8]
 800b73c:	60da      	str	r2, [r3, #12]
 800b73e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a35      	ldr	r2, [pc, #212]	; (800b81c <HAL_TIM_MspPostInit+0xf4>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d11e      	bne.n	800b788 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b74a:	4b35      	ldr	r3, [pc, #212]	; (800b820 <HAL_TIM_MspPostInit+0xf8>)
 800b74c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b74e:	4a34      	ldr	r2, [pc, #208]	; (800b820 <HAL_TIM_MspPostInit+0xf8>)
 800b750:	f043 0301 	orr.w	r3, r3, #1
 800b754:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b756:	4b32      	ldr	r3, [pc, #200]	; (800b820 <HAL_TIM_MspPostInit+0xf8>)
 800b758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b75a:	f003 0301 	and.w	r3, r3, #1
 800b75e:	613b      	str	r3, [r7, #16]
 800b760:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_CLOCK_L_Pin;
 800b762:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b768:	2302      	movs	r3, #2
 800b76a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b76c:	2300      	movs	r3, #0
 800b76e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b770:	2300      	movs	r3, #0
 800b772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800b774:	2301      	movs	r3, #1
 800b776:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_CLOCK_L_GPIO_Port, &GPIO_InitStruct);
 800b778:	f107 0314 	add.w	r3, r7, #20
 800b77c:	4619      	mov	r1, r3
 800b77e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b782:	f002 fe41 	bl	800e408 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800b786:	e044      	b.n	800b812 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM2)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b790:	d11d      	bne.n	800b7ce <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b792:	4b23      	ldr	r3, [pc, #140]	; (800b820 <HAL_TIM_MspPostInit+0xf8>)
 800b794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b796:	4a22      	ldr	r2, [pc, #136]	; (800b820 <HAL_TIM_MspPostInit+0xf8>)
 800b798:	f043 0301 	orr.w	r3, r3, #1
 800b79c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b79e:	4b20      	ldr	r3, [pc, #128]	; (800b820 <HAL_TIM_MspPostInit+0xf8>)
 800b7a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7a2:	f003 0301 	and.w	r3, r3, #1
 800b7a6:	60fb      	str	r3, [r7, #12]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_CLOCK_R_Pin;
 800b7aa:	2302      	movs	r3, #2
 800b7ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7ae:	2302      	movs	r3, #2
 800b7b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_CLOCK_R_GPIO_Port, &GPIO_InitStruct);
 800b7be:	f107 0314 	add.w	r3, r7, #20
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b7c8:	f002 fe1e 	bl	800e408 <HAL_GPIO_Init>
}
 800b7cc:	e021      	b.n	800b812 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM15)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a14      	ldr	r2, [pc, #80]	; (800b824 <HAL_TIM_MspPostInit+0xfc>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d11c      	bne.n	800b812 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b7d8:	4b11      	ldr	r3, [pc, #68]	; (800b820 <HAL_TIM_MspPostInit+0xf8>)
 800b7da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7dc:	4a10      	ldr	r2, [pc, #64]	; (800b820 <HAL_TIM_MspPostInit+0xf8>)
 800b7de:	f043 0301 	orr.w	r3, r3, #1
 800b7e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b7e4:	4b0e      	ldr	r3, [pc, #56]	; (800b820 <HAL_TIM_MspPostInit+0xf8>)
 800b7e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7e8:	f003 0301 	and.w	r3, r3, #1
 800b7ec:	60bb      	str	r3, [r7, #8]
 800b7ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPEAKER_Pin;
 800b7f0:	2308      	movs	r3, #8
 800b7f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800b800:	230e      	movs	r3, #14
 800b802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPEAKER_GPIO_Port, &GPIO_InitStruct);
 800b804:	f107 0314 	add.w	r3, r7, #20
 800b808:	4619      	mov	r1, r3
 800b80a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b80e:	f002 fdfb 	bl	800e408 <HAL_GPIO_Init>
}
 800b812:	bf00      	nop
 800b814:	3728      	adds	r7, #40	; 0x28
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	40012c00 	.word	0x40012c00
 800b820:	40021000 	.word	0x40021000
 800b824:	40014000 	.word	0x40014000

0800b828 <input_parameter>:

#include "turning_parameter.h"
#include "maze_Turning.h"


void input_parameter(void){
 800b828:	b480      	push	{r7}
 800b82a:	af00      	add	r7, sp, #0

speed500_exploration.SlalomCentervelocity=500;
 800b82c:	4b97      	ldr	r3, [pc, #604]	; (800ba8c <input_parameter+0x264>)
 800b82e:	4a98      	ldr	r2, [pc, #608]	; (800ba90 <input_parameter+0x268>)
 800b830:	601a      	str	r2, [r3, #0]
speed500_exploration.TurnCentervelocity=500;
 800b832:	4b96      	ldr	r3, [pc, #600]	; (800ba8c <input_parameter+0x264>)
 800b834:	4a96      	ldr	r2, [pc, #600]	; (800ba90 <input_parameter+0x268>)
 800b836:	605a      	str	r2, [r3, #4]

speed500_exploration.slalom_R.g_speed=speed500_exploration.SlalomCentervelocity;
 800b838:	4b94      	ldr	r3, [pc, #592]	; (800ba8c <input_parameter+0x264>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a93      	ldr	r2, [pc, #588]	; (800ba8c <input_parameter+0x264>)
 800b83e:	6093      	str	r3, [r2, #8]
speed500_exploration.slalom_R.t_speed=550;
 800b840:	4b92      	ldr	r3, [pc, #584]	; (800ba8c <input_parameter+0x264>)
 800b842:	4a94      	ldr	r2, [pc, #592]	; (800ba94 <input_parameter+0x26c>)
 800b844:	615a      	str	r2, [r3, #20]
speed500_exploration.slalom_R.t_acc=10000;
 800b846:	4b91      	ldr	r3, [pc, #580]	; (800ba8c <input_parameter+0x264>)
 800b848:	4a93      	ldr	r2, [pc, #588]	; (800ba98 <input_parameter+0x270>)
 800b84a:	619a      	str	r2, [r3, #24]
speed500_exploration.slalom_R.f_ofset=4;//55;
 800b84c:	4b8f      	ldr	r3, [pc, #572]	; (800ba8c <input_parameter+0x264>)
 800b84e:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800b852:	60da      	str	r2, [r3, #12]
speed500_exploration.slalom_R.e_ofset=25;
 800b854:	4b8d      	ldr	r3, [pc, #564]	; (800ba8c <input_parameter+0x264>)
 800b856:	4a91      	ldr	r2, [pc, #580]	; (800ba9c <input_parameter+0x274>)
 800b858:	611a      	str	r2, [r3, #16]

speed500_exploration.slalom_L.g_speed=speed500_exploration.SlalomCentervelocity;
 800b85a:	4b8c      	ldr	r3, [pc, #560]	; (800ba8c <input_parameter+0x264>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a8b      	ldr	r2, [pc, #556]	; (800ba8c <input_parameter+0x264>)
 800b860:	61d3      	str	r3, [r2, #28]
speed500_exploration.slalom_L.t_speed=550;
 800b862:	4b8a      	ldr	r3, [pc, #552]	; (800ba8c <input_parameter+0x264>)
 800b864:	4a8b      	ldr	r2, [pc, #556]	; (800ba94 <input_parameter+0x26c>)
 800b866:	629a      	str	r2, [r3, #40]	; 0x28
speed500_exploration.slalom_L.t_acc=10000;
 800b868:	4b88      	ldr	r3, [pc, #544]	; (800ba8c <input_parameter+0x264>)
 800b86a:	4a8b      	ldr	r2, [pc, #556]	; (800ba98 <input_parameter+0x270>)
 800b86c:	62da      	str	r2, [r3, #44]	; 0x2c
speed500_exploration.slalom_L.f_ofset=1;//50;
 800b86e:	4b87      	ldr	r3, [pc, #540]	; (800ba8c <input_parameter+0x264>)
 800b870:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b874:	621a      	str	r2, [r3, #32]
speed500_exploration.slalom_L.e_ofset=19;
 800b876:	4b85      	ldr	r3, [pc, #532]	; (800ba8c <input_parameter+0x264>)
 800b878:	4a89      	ldr	r2, [pc, #548]	; (800baa0 <input_parameter+0x278>)
 800b87a:	625a      	str	r2, [r3, #36]	; 0x24


speed500_exploration.turn90_R.g_speed=speed500_exploration.TurnCentervelocity;
 800b87c:	4b83      	ldr	r3, [pc, #524]	; (800ba8c <input_parameter+0x264>)
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	4a82      	ldr	r2, [pc, #520]	; (800ba8c <input_parameter+0x264>)
 800b882:	6313      	str	r3, [r2, #48]	; 0x30
speed500_exploration.turn90_R.t_speed=650;
 800b884:	4b81      	ldr	r3, [pc, #516]	; (800ba8c <input_parameter+0x264>)
 800b886:	4a87      	ldr	r2, [pc, #540]	; (800baa4 <input_parameter+0x27c>)
 800b888:	63da      	str	r2, [r3, #60]	; 0x3c
speed500_exploration.turn90_R.t_acc=10000;
 800b88a:	4b80      	ldr	r3, [pc, #512]	; (800ba8c <input_parameter+0x264>)
 800b88c:	4a82      	ldr	r2, [pc, #520]	; (800ba98 <input_parameter+0x270>)
 800b88e:	641a      	str	r2, [r3, #64]	; 0x40
speed500_exploration.turn90_R.f_ofset=45;
 800b890:	4b7e      	ldr	r3, [pc, #504]	; (800ba8c <input_parameter+0x264>)
 800b892:	4a85      	ldr	r2, [pc, #532]	; (800baa8 <input_parameter+0x280>)
 800b894:	635a      	str	r2, [r3, #52]	; 0x34
speed500_exploration.turn90_R.e_ofset=46;
 800b896:	4b7d      	ldr	r3, [pc, #500]	; (800ba8c <input_parameter+0x264>)
 800b898:	4a84      	ldr	r2, [pc, #528]	; (800baac <input_parameter+0x284>)
 800b89a:	639a      	str	r2, [r3, #56]	; 0x38

speed500_exploration.turn90_L.g_speed=speed500_exploration.TurnCentervelocity;
 800b89c:	4b7b      	ldr	r3, [pc, #492]	; (800ba8c <input_parameter+0x264>)
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	4a7a      	ldr	r2, [pc, #488]	; (800ba8c <input_parameter+0x264>)
 800b8a2:	6453      	str	r3, [r2, #68]	; 0x44
speed500_exploration.turn90_L.t_speed=650;
 800b8a4:	4b79      	ldr	r3, [pc, #484]	; (800ba8c <input_parameter+0x264>)
 800b8a6:	4a7f      	ldr	r2, [pc, #508]	; (800baa4 <input_parameter+0x27c>)
 800b8a8:	651a      	str	r2, [r3, #80]	; 0x50
speed500_exploration.turn90_L.t_acc=10000;
 800b8aa:	4b78      	ldr	r3, [pc, #480]	; (800ba8c <input_parameter+0x264>)
 800b8ac:	4a7a      	ldr	r2, [pc, #488]	; (800ba98 <input_parameter+0x270>)
 800b8ae:	655a      	str	r2, [r3, #84]	; 0x54
speed500_exploration.turn90_L.f_ofset=50;
 800b8b0:	4b76      	ldr	r3, [pc, #472]	; (800ba8c <input_parameter+0x264>)
 800b8b2:	4a7f      	ldr	r2, [pc, #508]	; (800bab0 <input_parameter+0x288>)
 800b8b4:	649a      	str	r2, [r3, #72]	; 0x48
speed500_exploration.turn90_L.e_ofset=47;
 800b8b6:	4b75      	ldr	r3, [pc, #468]	; (800ba8c <input_parameter+0x264>)
 800b8b8:	4a7e      	ldr	r2, [pc, #504]	; (800bab4 <input_parameter+0x28c>)
 800b8ba:	64da      	str	r2, [r3, #76]	; 0x4c

speed500_exploration.turn180_R.g_speed=speed500_exploration.TurnCentervelocity;
 800b8bc:	4b73      	ldr	r3, [pc, #460]	; (800ba8c <input_parameter+0x264>)
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	4a72      	ldr	r2, [pc, #456]	; (800ba8c <input_parameter+0x264>)
 800b8c2:	6593      	str	r3, [r2, #88]	; 0x58
speed500_exploration.turn180_R.t_speed=800;
 800b8c4:	4b71      	ldr	r3, [pc, #452]	; (800ba8c <input_parameter+0x264>)
 800b8c6:	4a7c      	ldr	r2, [pc, #496]	; (800bab8 <input_parameter+0x290>)
 800b8c8:	665a      	str	r2, [r3, #100]	; 0x64
speed500_exploration.turn180_R.t_acc=8000;
 800b8ca:	4b70      	ldr	r3, [pc, #448]	; (800ba8c <input_parameter+0x264>)
 800b8cc:	4a7b      	ldr	r2, [pc, #492]	; (800babc <input_parameter+0x294>)
 800b8ce:	669a      	str	r2, [r3, #104]	; 0x68
speed500_exploration.turn180_R.f_ofset=20;
 800b8d0:	4b6e      	ldr	r3, [pc, #440]	; (800ba8c <input_parameter+0x264>)
 800b8d2:	4a7b      	ldr	r2, [pc, #492]	; (800bac0 <input_parameter+0x298>)
 800b8d4:	65da      	str	r2, [r3, #92]	; 0x5c
speed500_exploration.turn180_R.e_ofset=30;
 800b8d6:	4b6d      	ldr	r3, [pc, #436]	; (800ba8c <input_parameter+0x264>)
 800b8d8:	4a7a      	ldr	r2, [pc, #488]	; (800bac4 <input_parameter+0x29c>)
 800b8da:	661a      	str	r2, [r3, #96]	; 0x60

speed500_exploration.turn180_L.g_speed=speed500_exploration.TurnCentervelocity;
 800b8dc:	4b6b      	ldr	r3, [pc, #428]	; (800ba8c <input_parameter+0x264>)
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	4a6a      	ldr	r2, [pc, #424]	; (800ba8c <input_parameter+0x264>)
 800b8e2:	66d3      	str	r3, [r2, #108]	; 0x6c
speed500_exploration.turn180_L.t_speed=780;
 800b8e4:	4b69      	ldr	r3, [pc, #420]	; (800ba8c <input_parameter+0x264>)
 800b8e6:	4a78      	ldr	r2, [pc, #480]	; (800bac8 <input_parameter+0x2a0>)
 800b8e8:	679a      	str	r2, [r3, #120]	; 0x78
speed500_exploration.turn180_L.t_acc=8000;
 800b8ea:	4b68      	ldr	r3, [pc, #416]	; (800ba8c <input_parameter+0x264>)
 800b8ec:	4a73      	ldr	r2, [pc, #460]	; (800babc <input_parameter+0x294>)
 800b8ee:	67da      	str	r2, [r3, #124]	; 0x7c
speed500_exploration.turn180_L.f_ofset=20;
 800b8f0:	4b66      	ldr	r3, [pc, #408]	; (800ba8c <input_parameter+0x264>)
 800b8f2:	4a73      	ldr	r2, [pc, #460]	; (800bac0 <input_parameter+0x298>)
 800b8f4:	671a      	str	r2, [r3, #112]	; 0x70
speed500_exploration.turn180_L.e_ofset=40;
 800b8f6:	4b65      	ldr	r3, [pc, #404]	; (800ba8c <input_parameter+0x264>)
 800b8f8:	4a74      	ldr	r2, [pc, #464]	; (800bacc <input_parameter+0x2a4>)
 800b8fa:	675a      	str	r2, [r3, #116]	; 0x74

speed500_exploration.turn45in_R.g_speed=speed500_exploration.TurnCentervelocity;
 800b8fc:	4b63      	ldr	r3, [pc, #396]	; (800ba8c <input_parameter+0x264>)
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	4a62      	ldr	r2, [pc, #392]	; (800ba8c <input_parameter+0x264>)
 800b902:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
speed500_exploration.turn45in_R.t_speed=900;
 800b906:	4b61      	ldr	r3, [pc, #388]	; (800ba8c <input_parameter+0x264>)
 800b908:	4a71      	ldr	r2, [pc, #452]	; (800bad0 <input_parameter+0x2a8>)
 800b90a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
speed500_exploration.turn45in_R.t_acc=13000;
 800b90e:	4b5f      	ldr	r3, [pc, #380]	; (800ba8c <input_parameter+0x264>)
 800b910:	4a70      	ldr	r2, [pc, #448]	; (800bad4 <input_parameter+0x2ac>)
 800b912:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
speed500_exploration.turn45in_R.f_ofset=25;
 800b916:	4b5d      	ldr	r3, [pc, #372]	; (800ba8c <input_parameter+0x264>)
 800b918:	4a60      	ldr	r2, [pc, #384]	; (800ba9c <input_parameter+0x274>)
 800b91a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
speed500_exploration.turn45in_R.e_ofset=60;
 800b91e:	4b5b      	ldr	r3, [pc, #364]	; (800ba8c <input_parameter+0x264>)
 800b920:	4a6d      	ldr	r2, [pc, #436]	; (800bad8 <input_parameter+0x2b0>)
 800b922:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

speed500_exploration.turn45in_L.g_speed=speed500_exploration.TurnCentervelocity;
 800b926:	4b59      	ldr	r3, [pc, #356]	; (800ba8c <input_parameter+0x264>)
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	4a58      	ldr	r2, [pc, #352]	; (800ba8c <input_parameter+0x264>)
 800b92c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
speed500_exploration.turn45in_L.t_speed=900;
 800b930:	4b56      	ldr	r3, [pc, #344]	; (800ba8c <input_parameter+0x264>)
 800b932:	4a67      	ldr	r2, [pc, #412]	; (800bad0 <input_parameter+0x2a8>)
 800b934:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
speed500_exploration.turn45in_L.t_acc=13000;
 800b938:	4b54      	ldr	r3, [pc, #336]	; (800ba8c <input_parameter+0x264>)
 800b93a:	4a66      	ldr	r2, [pc, #408]	; (800bad4 <input_parameter+0x2ac>)
 800b93c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
speed500_exploration.turn45in_L.f_ofset=32;
 800b940:	4b52      	ldr	r3, [pc, #328]	; (800ba8c <input_parameter+0x264>)
 800b942:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 800b946:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
speed500_exploration.turn45in_L.e_ofset=60;
 800b94a:	4b50      	ldr	r3, [pc, #320]	; (800ba8c <input_parameter+0x264>)
 800b94c:	4a62      	ldr	r2, [pc, #392]	; (800bad8 <input_parameter+0x2b0>)
 800b94e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

speed500_exploration.turn135in_R.g_speed=speed500_exploration.TurnCentervelocity;
 800b952:	4b4e      	ldr	r3, [pc, #312]	; (800ba8c <input_parameter+0x264>)
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	4a4d      	ldr	r2, [pc, #308]	; (800ba8c <input_parameter+0x264>)
 800b958:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
speed500_exploration.turn135in_R.t_speed=900;
 800b95c:	4b4b      	ldr	r3, [pc, #300]	; (800ba8c <input_parameter+0x264>)
 800b95e:	4a5c      	ldr	r2, [pc, #368]	; (800bad0 <input_parameter+0x2a8>)
 800b960:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
speed500_exploration.turn135in_R.t_acc=12000;
 800b964:	4b49      	ldr	r3, [pc, #292]	; (800ba8c <input_parameter+0x264>)
 800b966:	4a5d      	ldr	r2, [pc, #372]	; (800badc <input_parameter+0x2b4>)
 800b968:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
speed500_exploration.turn135in_R.f_ofset=53;
 800b96c:	4b47      	ldr	r3, [pc, #284]	; (800ba8c <input_parameter+0x264>)
 800b96e:	4a5c      	ldr	r2, [pc, #368]	; (800bae0 <input_parameter+0x2b8>)
 800b970:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
speed500_exploration.turn135in_R.e_ofset=47;
 800b974:	4b45      	ldr	r3, [pc, #276]	; (800ba8c <input_parameter+0x264>)
 800b976:	4a4f      	ldr	r2, [pc, #316]	; (800bab4 <input_parameter+0x28c>)
 800b978:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

speed500_exploration.turn135in_L.g_speed=speed500_exploration.TurnCentervelocity;
 800b97c:	4b43      	ldr	r3, [pc, #268]	; (800ba8c <input_parameter+0x264>)
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	4a42      	ldr	r2, [pc, #264]	; (800ba8c <input_parameter+0x264>)
 800b982:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
speed500_exploration.turn135in_L.t_speed=900;
 800b986:	4b41      	ldr	r3, [pc, #260]	; (800ba8c <input_parameter+0x264>)
 800b988:	4a51      	ldr	r2, [pc, #324]	; (800bad0 <input_parameter+0x2a8>)
 800b98a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
speed500_exploration.turn135in_L.t_acc=12000;
 800b98e:	4b3f      	ldr	r3, [pc, #252]	; (800ba8c <input_parameter+0x264>)
 800b990:	4a52      	ldr	r2, [pc, #328]	; (800badc <input_parameter+0x2b4>)
 800b992:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
speed500_exploration.turn135in_L.f_ofset=40;
 800b996:	4b3d      	ldr	r3, [pc, #244]	; (800ba8c <input_parameter+0x264>)
 800b998:	4a4c      	ldr	r2, [pc, #304]	; (800bacc <input_parameter+0x2a4>)
 800b99a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
speed500_exploration.turn135in_L.e_ofset=55;
 800b99e:	4b3b      	ldr	r3, [pc, #236]	; (800ba8c <input_parameter+0x264>)
 800b9a0:	4a50      	ldr	r2, [pc, #320]	; (800bae4 <input_parameter+0x2bc>)
 800b9a2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

speed500_exploration.turn45out_R.g_speed=speed500_exploration.TurnCentervelocity;
 800b9a6:	4b39      	ldr	r3, [pc, #228]	; (800ba8c <input_parameter+0x264>)
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	4a38      	ldr	r2, [pc, #224]	; (800ba8c <input_parameter+0x264>)
 800b9ac:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
speed500_exploration.turn45out_R.t_speed=900;
 800b9b0:	4b36      	ldr	r3, [pc, #216]	; (800ba8c <input_parameter+0x264>)
 800b9b2:	4a47      	ldr	r2, [pc, #284]	; (800bad0 <input_parameter+0x2a8>)
 800b9b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
speed500_exploration.turn45out_R.t_acc=10000;
 800b9b8:	4b34      	ldr	r3, [pc, #208]	; (800ba8c <input_parameter+0x264>)
 800b9ba:	4a37      	ldr	r2, [pc, #220]	; (800ba98 <input_parameter+0x270>)
 800b9bc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
speed500_exploration.turn45out_R.f_ofset=45;
 800b9c0:	4b32      	ldr	r3, [pc, #200]	; (800ba8c <input_parameter+0x264>)
 800b9c2:	4a39      	ldr	r2, [pc, #228]	; (800baa8 <input_parameter+0x280>)
 800b9c4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
speed500_exploration.turn45out_R.e_ofset=10;
 800b9c8:	4b30      	ldr	r3, [pc, #192]	; (800ba8c <input_parameter+0x264>)
 800b9ca:	4a47      	ldr	r2, [pc, #284]	; (800bae8 <input_parameter+0x2c0>)
 800b9cc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

speed500_exploration.turn45out_L.g_speed=speed500_exploration.TurnCentervelocity;
 800b9d0:	4b2e      	ldr	r3, [pc, #184]	; (800ba8c <input_parameter+0x264>)
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	4a2d      	ldr	r2, [pc, #180]	; (800ba8c <input_parameter+0x264>)
 800b9d6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
speed500_exploration.turn45out_L.t_speed=900;
 800b9da:	4b2c      	ldr	r3, [pc, #176]	; (800ba8c <input_parameter+0x264>)
 800b9dc:	4a3c      	ldr	r2, [pc, #240]	; (800bad0 <input_parameter+0x2a8>)
 800b9de:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
speed500_exploration.turn45out_L.t_acc=10000;
 800b9e2:	4b2a      	ldr	r3, [pc, #168]	; (800ba8c <input_parameter+0x264>)
 800b9e4:	4a2c      	ldr	r2, [pc, #176]	; (800ba98 <input_parameter+0x270>)
 800b9e6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
speed500_exploration.turn45out_L.f_ofset=40;
 800b9ea:	4b28      	ldr	r3, [pc, #160]	; (800ba8c <input_parameter+0x264>)
 800b9ec:	4a37      	ldr	r2, [pc, #220]	; (800bacc <input_parameter+0x2a4>)
 800b9ee:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
speed500_exploration.turn45out_L.e_ofset=10;
 800b9f2:	4b26      	ldr	r3, [pc, #152]	; (800ba8c <input_parameter+0x264>)
 800b9f4:	4a3c      	ldr	r2, [pc, #240]	; (800bae8 <input_parameter+0x2c0>)
 800b9f6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

speed500_exploration.turn135out_R.g_speed=speed500_exploration.TurnCentervelocity;
 800b9fa:	4b24      	ldr	r3, [pc, #144]	; (800ba8c <input_parameter+0x264>)
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	4a23      	ldr	r2, [pc, #140]	; (800ba8c <input_parameter+0x264>)
 800ba00:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
speed500_exploration.turn135out_R.t_speed=1000;
 800ba04:	4b21      	ldr	r3, [pc, #132]	; (800ba8c <input_parameter+0x264>)
 800ba06:	4a39      	ldr	r2, [pc, #228]	; (800baec <input_parameter+0x2c4>)
 800ba08:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
speed500_exploration.turn135out_R.t_acc=12000;
 800ba0c:	4b1f      	ldr	r3, [pc, #124]	; (800ba8c <input_parameter+0x264>)
 800ba0e:	4a33      	ldr	r2, [pc, #204]	; (800badc <input_parameter+0x2b4>)
 800ba10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
speed500_exploration.turn135out_R.f_ofset=25;
 800ba14:	4b1d      	ldr	r3, [pc, #116]	; (800ba8c <input_parameter+0x264>)
 800ba16:	4a21      	ldr	r2, [pc, #132]	; (800ba9c <input_parameter+0x274>)
 800ba18:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
speed500_exploration.turn135out_R.e_ofset=90;
 800ba1c:	4b1b      	ldr	r3, [pc, #108]	; (800ba8c <input_parameter+0x264>)
 800ba1e:	4a34      	ldr	r2, [pc, #208]	; (800baf0 <input_parameter+0x2c8>)
 800ba20:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

speed500_exploration.turn135out_L.g_speed=speed500_exploration.TurnCentervelocity;
 800ba24:	4b19      	ldr	r3, [pc, #100]	; (800ba8c <input_parameter+0x264>)
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	4a18      	ldr	r2, [pc, #96]	; (800ba8c <input_parameter+0x264>)
 800ba2a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
speed500_exploration.turn135out_L.t_speed=1000;
 800ba2e:	4b17      	ldr	r3, [pc, #92]	; (800ba8c <input_parameter+0x264>)
 800ba30:	4a2e      	ldr	r2, [pc, #184]	; (800baec <input_parameter+0x2c4>)
 800ba32:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
speed500_exploration.turn135out_L.t_acc=12000;
 800ba36:	4b15      	ldr	r3, [pc, #84]	; (800ba8c <input_parameter+0x264>)
 800ba38:	4a28      	ldr	r2, [pc, #160]	; (800badc <input_parameter+0x2b4>)
 800ba3a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
speed500_exploration.turn135out_L.f_ofset=40;
 800ba3e:	4b13      	ldr	r3, [pc, #76]	; (800ba8c <input_parameter+0x264>)
 800ba40:	4a22      	ldr	r2, [pc, #136]	; (800bacc <input_parameter+0x2a4>)
 800ba42:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
speed500_exploration.turn135out_L.e_ofset=95;
 800ba46:	4b11      	ldr	r3, [pc, #68]	; (800ba8c <input_parameter+0x264>)
 800ba48:	4a2a      	ldr	r2, [pc, #168]	; (800baf4 <input_parameter+0x2cc>)
 800ba4a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

speed500_exploration.V90_R.g_speed=speed500_exploration.TurnCentervelocity;
 800ba4e:	4b0f      	ldr	r3, [pc, #60]	; (800ba8c <input_parameter+0x264>)
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	4a0e      	ldr	r2, [pc, #56]	; (800ba8c <input_parameter+0x264>)
 800ba54:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
speed500_exploration.V90_R.t_speed=1650;
 800ba58:	4b0c      	ldr	r3, [pc, #48]	; (800ba8c <input_parameter+0x264>)
 800ba5a:	4a27      	ldr	r2, [pc, #156]	; (800baf8 <input_parameter+0x2d0>)
 800ba5c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
speed500_exploration.V90_R.t_acc=24500;
 800ba60:	4b0a      	ldr	r3, [pc, #40]	; (800ba8c <input_parameter+0x264>)
 800ba62:	4a26      	ldr	r2, [pc, #152]	; (800bafc <input_parameter+0x2d4>)
 800ba64:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
speed500_exploration.V90_R.f_ofset=50;
 800ba68:	4b08      	ldr	r3, [pc, #32]	; (800ba8c <input_parameter+0x264>)
 800ba6a:	4a11      	ldr	r2, [pc, #68]	; (800bab0 <input_parameter+0x288>)
 800ba6c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
speed500_exploration.V90_R.e_ofset=65;
 800ba70:	4b06      	ldr	r3, [pc, #24]	; (800ba8c <input_parameter+0x264>)
 800ba72:	4a23      	ldr	r2, [pc, #140]	; (800bb00 <input_parameter+0x2d8>)
 800ba74:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

speed500_exploration.V90_L.g_speed=speed500_exploration.TurnCentervelocity;
 800ba78:	4b04      	ldr	r3, [pc, #16]	; (800ba8c <input_parameter+0x264>)
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	4a03      	ldr	r2, [pc, #12]	; (800ba8c <input_parameter+0x264>)
 800ba7e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
speed500_exploration.V90_L.t_speed=1550;
 800ba82:	4b02      	ldr	r3, [pc, #8]	; (800ba8c <input_parameter+0x264>)
 800ba84:	4a1f      	ldr	r2, [pc, #124]	; (800bb04 <input_parameter+0x2dc>)
 800ba86:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800ba8a:	e03d      	b.n	800bb08 <input_parameter+0x2e0>
 800ba8c:	20000a50 	.word	0x20000a50
 800ba90:	43fa0000 	.word	0x43fa0000
 800ba94:	44098000 	.word	0x44098000
 800ba98:	461c4000 	.word	0x461c4000
 800ba9c:	41c80000 	.word	0x41c80000
 800baa0:	41980000 	.word	0x41980000
 800baa4:	44228000 	.word	0x44228000
 800baa8:	42340000 	.word	0x42340000
 800baac:	42380000 	.word	0x42380000
 800bab0:	42480000 	.word	0x42480000
 800bab4:	423c0000 	.word	0x423c0000
 800bab8:	44480000 	.word	0x44480000
 800babc:	45fa0000 	.word	0x45fa0000
 800bac0:	41a00000 	.word	0x41a00000
 800bac4:	41f00000 	.word	0x41f00000
 800bac8:	44430000 	.word	0x44430000
 800bacc:	42200000 	.word	0x42200000
 800bad0:	44610000 	.word	0x44610000
 800bad4:	464b2000 	.word	0x464b2000
 800bad8:	42700000 	.word	0x42700000
 800badc:	463b8000 	.word	0x463b8000
 800bae0:	42540000 	.word	0x42540000
 800bae4:	425c0000 	.word	0x425c0000
 800bae8:	41200000 	.word	0x41200000
 800baec:	447a0000 	.word	0x447a0000
 800baf0:	42b40000 	.word	0x42b40000
 800baf4:	42be0000 	.word	0x42be0000
 800baf8:	44ce4000 	.word	0x44ce4000
 800bafc:	46bf6800 	.word	0x46bf6800
 800bb00:	42820000 	.word	0x42820000
 800bb04:	44c1c000 	.word	0x44c1c000
speed500_exploration.V90_L.t_acc=22000;
 800bb08:	4b97      	ldr	r3, [pc, #604]	; (800bd68 <input_parameter+0x540>)
 800bb0a:	4a98      	ldr	r2, [pc, #608]	; (800bd6c <input_parameter+0x544>)
 800bb0c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
speed500_exploration.V90_L.f_ofset=28;
 800bb10:	4b95      	ldr	r3, [pc, #596]	; (800bd68 <input_parameter+0x540>)
 800bb12:	4a97      	ldr	r2, [pc, #604]	; (800bd70 <input_parameter+0x548>)
 800bb14:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
speed500_exploration.V90_L.e_ofset=55;
 800bb18:	4b93      	ldr	r3, [pc, #588]	; (800bd68 <input_parameter+0x540>)
 800bb1a:	4a96      	ldr	r2, [pc, #600]	; (800bd74 <input_parameter+0x54c>)
 800bb1c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



//*********************************600********************************************

speed700_shortest.SlalomCentervelocity=600;
 800bb20:	4b95      	ldr	r3, [pc, #596]	; (800bd78 <input_parameter+0x550>)
 800bb22:	4a96      	ldr	r2, [pc, #600]	; (800bd7c <input_parameter+0x554>)
 800bb24:	601a      	str	r2, [r3, #0]
speed700_shortest.TurnCentervelocity=700;
 800bb26:	4b94      	ldr	r3, [pc, #592]	; (800bd78 <input_parameter+0x550>)
 800bb28:	4a95      	ldr	r2, [pc, #596]	; (800bd80 <input_parameter+0x558>)
 800bb2a:	605a      	str	r2, [r3, #4]


speed700_shortest.slalom_R.g_speed=speed700_shortest.SlalomCentervelocity;
 800bb2c:	4b92      	ldr	r3, [pc, #584]	; (800bd78 <input_parameter+0x550>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4a91      	ldr	r2, [pc, #580]	; (800bd78 <input_parameter+0x550>)
 800bb32:	6093      	str	r3, [r2, #8]
speed700_shortest.slalom_R.t_speed=550;
 800bb34:	4b90      	ldr	r3, [pc, #576]	; (800bd78 <input_parameter+0x550>)
 800bb36:	4a93      	ldr	r2, [pc, #588]	; (800bd84 <input_parameter+0x55c>)
 800bb38:	615a      	str	r2, [r3, #20]
speed700_shortest.slalom_R.t_acc=10000;
 800bb3a:	4b8f      	ldr	r3, [pc, #572]	; (800bd78 <input_parameter+0x550>)
 800bb3c:	4a92      	ldr	r2, [pc, #584]	; (800bd88 <input_parameter+0x560>)
 800bb3e:	619a      	str	r2, [r3, #24]
speed700_shortest.slalom_R.f_ofset=4;
 800bb40:	4b8d      	ldr	r3, [pc, #564]	; (800bd78 <input_parameter+0x550>)
 800bb42:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800bb46:	60da      	str	r2, [r3, #12]
speed700_shortest.slalom_R.e_ofset=12;
 800bb48:	4b8b      	ldr	r3, [pc, #556]	; (800bd78 <input_parameter+0x550>)
 800bb4a:	4a90      	ldr	r2, [pc, #576]	; (800bd8c <input_parameter+0x564>)
 800bb4c:	611a      	str	r2, [r3, #16]

speed700_shortest.slalom_L.g_speed=speed700_shortest.SlalomCentervelocity;
 800bb4e:	4b8a      	ldr	r3, [pc, #552]	; (800bd78 <input_parameter+0x550>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4a89      	ldr	r2, [pc, #548]	; (800bd78 <input_parameter+0x550>)
 800bb54:	61d3      	str	r3, [r2, #28]
speed700_shortest.slalom_L.t_speed=550;
 800bb56:	4b88      	ldr	r3, [pc, #544]	; (800bd78 <input_parameter+0x550>)
 800bb58:	4a8a      	ldr	r2, [pc, #552]	; (800bd84 <input_parameter+0x55c>)
 800bb5a:	629a      	str	r2, [r3, #40]	; 0x28
speed700_shortest.slalom_L.t_acc=10000;
 800bb5c:	4b86      	ldr	r3, [pc, #536]	; (800bd78 <input_parameter+0x550>)
 800bb5e:	4a8a      	ldr	r2, [pc, #552]	; (800bd88 <input_parameter+0x560>)
 800bb60:	62da      	str	r2, [r3, #44]	; 0x2c
speed700_shortest.slalom_L.f_ofset=0;
 800bb62:	4b85      	ldr	r3, [pc, #532]	; (800bd78 <input_parameter+0x550>)
 800bb64:	f04f 0200 	mov.w	r2, #0
 800bb68:	621a      	str	r2, [r3, #32]
speed700_shortest.slalom_L.e_ofset=15;
 800bb6a:	4b83      	ldr	r3, [pc, #524]	; (800bd78 <input_parameter+0x550>)
 800bb6c:	4a88      	ldr	r2, [pc, #544]	; (800bd90 <input_parameter+0x568>)
 800bb6e:	625a      	str	r2, [r3, #36]	; 0x24

speed700_shortest.turn90_R.g_speed=speed700_shortest.TurnCentervelocity;
 800bb70:	4b81      	ldr	r3, [pc, #516]	; (800bd78 <input_parameter+0x550>)
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	4a80      	ldr	r2, [pc, #512]	; (800bd78 <input_parameter+0x550>)
 800bb76:	6313      	str	r3, [r2, #48]	; 0x30
speed700_shortest.turn90_R.t_speed=430;
 800bb78:	4b7f      	ldr	r3, [pc, #508]	; (800bd78 <input_parameter+0x550>)
 800bb7a:	4a86      	ldr	r2, [pc, #536]	; (800bd94 <input_parameter+0x56c>)
 800bb7c:	63da      	str	r2, [r3, #60]	; 0x3c
speed700_shortest.turn90_R.t_acc=10000;
 800bb7e:	4b7e      	ldr	r3, [pc, #504]	; (800bd78 <input_parameter+0x550>)
 800bb80:	4a81      	ldr	r2, [pc, #516]	; (800bd88 <input_parameter+0x560>)
 800bb82:	641a      	str	r2, [r3, #64]	; 0x40
speed700_shortest.turn90_R.f_ofset=63;
 800bb84:	4b7c      	ldr	r3, [pc, #496]	; (800bd78 <input_parameter+0x550>)
 800bb86:	4a84      	ldr	r2, [pc, #528]	; (800bd98 <input_parameter+0x570>)
 800bb88:	635a      	str	r2, [r3, #52]	; 0x34
speed700_shortest.turn90_R.e_ofset=67;
 800bb8a:	4b7b      	ldr	r3, [pc, #492]	; (800bd78 <input_parameter+0x550>)
 800bb8c:	4a83      	ldr	r2, [pc, #524]	; (800bd9c <input_parameter+0x574>)
 800bb8e:	639a      	str	r2, [r3, #56]	; 0x38

speed700_shortest.turn90_L.g_speed=speed700_shortest.TurnCentervelocity;
 800bb90:	4b79      	ldr	r3, [pc, #484]	; (800bd78 <input_parameter+0x550>)
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	4a78      	ldr	r2, [pc, #480]	; (800bd78 <input_parameter+0x550>)
 800bb96:	6453      	str	r3, [r2, #68]	; 0x44
speed700_shortest.turn90_L.t_speed=430;
 800bb98:	4b77      	ldr	r3, [pc, #476]	; (800bd78 <input_parameter+0x550>)
 800bb9a:	4a7e      	ldr	r2, [pc, #504]	; (800bd94 <input_parameter+0x56c>)
 800bb9c:	651a      	str	r2, [r3, #80]	; 0x50
speed700_shortest.turn90_L.t_acc=10000;
 800bb9e:	4b76      	ldr	r3, [pc, #472]	; (800bd78 <input_parameter+0x550>)
 800bba0:	4a79      	ldr	r2, [pc, #484]	; (800bd88 <input_parameter+0x560>)
 800bba2:	655a      	str	r2, [r3, #84]	; 0x54
speed700_shortest.turn90_L.f_ofset=59;
 800bba4:	4b74      	ldr	r3, [pc, #464]	; (800bd78 <input_parameter+0x550>)
 800bba6:	4a7e      	ldr	r2, [pc, #504]	; (800bda0 <input_parameter+0x578>)
 800bba8:	649a      	str	r2, [r3, #72]	; 0x48
speed700_shortest.turn90_L.e_ofset=70;
 800bbaa:	4b73      	ldr	r3, [pc, #460]	; (800bd78 <input_parameter+0x550>)
 800bbac:	4a7d      	ldr	r2, [pc, #500]	; (800bda4 <input_parameter+0x57c>)
 800bbae:	64da      	str	r2, [r3, #76]	; 0x4c

speed700_shortest.turn180_R.g_speed=speed700_shortest.TurnCentervelocity;
 800bbb0:	4b71      	ldr	r3, [pc, #452]	; (800bd78 <input_parameter+0x550>)
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	4a70      	ldr	r2, [pc, #448]	; (800bd78 <input_parameter+0x550>)
 800bbb6:	6593      	str	r3, [r2, #88]	; 0x58
speed700_shortest.turn180_R.t_speed=480;
 800bbb8:	4b6f      	ldr	r3, [pc, #444]	; (800bd78 <input_parameter+0x550>)
 800bbba:	4a7b      	ldr	r2, [pc, #492]	; (800bda8 <input_parameter+0x580>)
 800bbbc:	665a      	str	r2, [r3, #100]	; 0x64
speed700_shortest.turn180_R.t_acc=10000;
 800bbbe:	4b6e      	ldr	r3, [pc, #440]	; (800bd78 <input_parameter+0x550>)
 800bbc0:	4a71      	ldr	r2, [pc, #452]	; (800bd88 <input_parameter+0x560>)
 800bbc2:	669a      	str	r2, [r3, #104]	; 0x68
speed700_shortest.turn180_R.f_ofset=60;
 800bbc4:	4b6c      	ldr	r3, [pc, #432]	; (800bd78 <input_parameter+0x550>)
 800bbc6:	4a79      	ldr	r2, [pc, #484]	; (800bdac <input_parameter+0x584>)
 800bbc8:	65da      	str	r2, [r3, #92]	; 0x5c
speed700_shortest.turn180_R.e_ofset=82;
 800bbca:	4b6b      	ldr	r3, [pc, #428]	; (800bd78 <input_parameter+0x550>)
 800bbcc:	4a78      	ldr	r2, [pc, #480]	; (800bdb0 <input_parameter+0x588>)
 800bbce:	661a      	str	r2, [r3, #96]	; 0x60

speed700_shortest.turn180_L.g_speed=speed700_shortest.TurnCentervelocity;
 800bbd0:	4b69      	ldr	r3, [pc, #420]	; (800bd78 <input_parameter+0x550>)
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	4a68      	ldr	r2, [pc, #416]	; (800bd78 <input_parameter+0x550>)
 800bbd6:	66d3      	str	r3, [r2, #108]	; 0x6c
speed700_shortest.turn180_L.t_speed=480;
 800bbd8:	4b67      	ldr	r3, [pc, #412]	; (800bd78 <input_parameter+0x550>)
 800bbda:	4a73      	ldr	r2, [pc, #460]	; (800bda8 <input_parameter+0x580>)
 800bbdc:	679a      	str	r2, [r3, #120]	; 0x78
speed700_shortest.turn180_L.t_acc=10000;
 800bbde:	4b66      	ldr	r3, [pc, #408]	; (800bd78 <input_parameter+0x550>)
 800bbe0:	4a69      	ldr	r2, [pc, #420]	; (800bd88 <input_parameter+0x560>)
 800bbe2:	67da      	str	r2, [r3, #124]	; 0x7c
speed700_shortest.turn180_L.f_ofset=60;
 800bbe4:	4b64      	ldr	r3, [pc, #400]	; (800bd78 <input_parameter+0x550>)
 800bbe6:	4a71      	ldr	r2, [pc, #452]	; (800bdac <input_parameter+0x584>)
 800bbe8:	671a      	str	r2, [r3, #112]	; 0x70
speed700_shortest.turn180_L.e_ofset=80;
 800bbea:	4b63      	ldr	r3, [pc, #396]	; (800bd78 <input_parameter+0x550>)
 800bbec:	4a71      	ldr	r2, [pc, #452]	; (800bdb4 <input_parameter+0x58c>)
 800bbee:	675a      	str	r2, [r3, #116]	; 0x74

speed700_shortest.turn45in_R.g_speed=speed700_shortest.TurnCentervelocity;
 800bbf0:	4b61      	ldr	r3, [pc, #388]	; (800bd78 <input_parameter+0x550>)
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	4a60      	ldr	r2, [pc, #384]	; (800bd78 <input_parameter+0x550>)
 800bbf6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
speed700_shortest.turn45in_R.t_speed=450;
 800bbfa:	4b5f      	ldr	r3, [pc, #380]	; (800bd78 <input_parameter+0x550>)
 800bbfc:	4a6e      	ldr	r2, [pc, #440]	; (800bdb8 <input_parameter+0x590>)
 800bbfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
speed700_shortest.turn45in_R.t_acc=10000;
 800bc02:	4b5d      	ldr	r3, [pc, #372]	; (800bd78 <input_parameter+0x550>)
 800bc04:	4a60      	ldr	r2, [pc, #384]	; (800bd88 <input_parameter+0x560>)
 800bc06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
speed700_shortest.turn45in_R.f_ofset=28;
 800bc0a:	4b5b      	ldr	r3, [pc, #364]	; (800bd78 <input_parameter+0x550>)
 800bc0c:	4a58      	ldr	r2, [pc, #352]	; (800bd70 <input_parameter+0x548>)
 800bc0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
speed700_shortest.turn45in_R.e_ofset=70;
 800bc12:	4b59      	ldr	r3, [pc, #356]	; (800bd78 <input_parameter+0x550>)
 800bc14:	4a63      	ldr	r2, [pc, #396]	; (800bda4 <input_parameter+0x57c>)
 800bc16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

speed700_shortest.turn45in_L.g_speed=speed700_shortest.TurnCentervelocity;
 800bc1a:	4b57      	ldr	r3, [pc, #348]	; (800bd78 <input_parameter+0x550>)
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	4a56      	ldr	r2, [pc, #344]	; (800bd78 <input_parameter+0x550>)
 800bc20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
speed700_shortest.turn45in_L.t_speed=450;
 800bc24:	4b54      	ldr	r3, [pc, #336]	; (800bd78 <input_parameter+0x550>)
 800bc26:	4a64      	ldr	r2, [pc, #400]	; (800bdb8 <input_parameter+0x590>)
 800bc28:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
speed700_shortest.turn45in_L.t_acc=10000;
 800bc2c:	4b52      	ldr	r3, [pc, #328]	; (800bd78 <input_parameter+0x550>)
 800bc2e:	4a56      	ldr	r2, [pc, #344]	; (800bd88 <input_parameter+0x560>)
 800bc30:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
speed700_shortest.turn45in_L.f_ofset=27;
 800bc34:	4b50      	ldr	r3, [pc, #320]	; (800bd78 <input_parameter+0x550>)
 800bc36:	4a61      	ldr	r2, [pc, #388]	; (800bdbc <input_parameter+0x594>)
 800bc38:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
speed700_shortest.turn45in_L.e_ofset=68;
 800bc3c:	4b4e      	ldr	r3, [pc, #312]	; (800bd78 <input_parameter+0x550>)
 800bc3e:	4a60      	ldr	r2, [pc, #384]	; (800bdc0 <input_parameter+0x598>)
 800bc40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

speed700_shortest.turn135in_R.g_speed=speed700_shortest.TurnCentervelocity;
 800bc44:	4b4c      	ldr	r3, [pc, #304]	; (800bd78 <input_parameter+0x550>)
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	4a4b      	ldr	r2, [pc, #300]	; (800bd78 <input_parameter+0x550>)
 800bc4a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
speed700_shortest.turn135in_R.t_speed=500;
 800bc4e:	4b4a      	ldr	r3, [pc, #296]	; (800bd78 <input_parameter+0x550>)
 800bc50:	4a5c      	ldr	r2, [pc, #368]	; (800bdc4 <input_parameter+0x59c>)
 800bc52:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
speed700_shortest.turn135in_R.t_acc=10000;
 800bc56:	4b48      	ldr	r3, [pc, #288]	; (800bd78 <input_parameter+0x550>)
 800bc58:	4a4b      	ldr	r2, [pc, #300]	; (800bd88 <input_parameter+0x560>)
 800bc5a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
speed700_shortest.turn135in_R.f_ofset=36;
 800bc5e:	4b46      	ldr	r3, [pc, #280]	; (800bd78 <input_parameter+0x550>)
 800bc60:	4a59      	ldr	r2, [pc, #356]	; (800bdc8 <input_parameter+0x5a0>)
 800bc62:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
speed700_shortest.turn135in_R.e_ofset=57;
 800bc66:	4b44      	ldr	r3, [pc, #272]	; (800bd78 <input_parameter+0x550>)
 800bc68:	4a58      	ldr	r2, [pc, #352]	; (800bdcc <input_parameter+0x5a4>)
 800bc6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

speed700_shortest.turn135in_L.g_speed=speed700_shortest.TurnCentervelocity;
 800bc6e:	4b42      	ldr	r3, [pc, #264]	; (800bd78 <input_parameter+0x550>)
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	4a41      	ldr	r2, [pc, #260]	; (800bd78 <input_parameter+0x550>)
 800bc74:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
speed700_shortest.turn135in_L.t_speed=500;
 800bc78:	4b3f      	ldr	r3, [pc, #252]	; (800bd78 <input_parameter+0x550>)
 800bc7a:	4a52      	ldr	r2, [pc, #328]	; (800bdc4 <input_parameter+0x59c>)
 800bc7c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
speed700_shortest.turn135in_L.t_acc=10000;
 800bc80:	4b3d      	ldr	r3, [pc, #244]	; (800bd78 <input_parameter+0x550>)
 800bc82:	4a41      	ldr	r2, [pc, #260]	; (800bd88 <input_parameter+0x560>)
 800bc84:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
speed700_shortest.turn135in_L.f_ofset=37;
 800bc88:	4b3b      	ldr	r3, [pc, #236]	; (800bd78 <input_parameter+0x550>)
 800bc8a:	4a51      	ldr	r2, [pc, #324]	; (800bdd0 <input_parameter+0x5a8>)
 800bc8c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
speed700_shortest.turn135in_L.e_ofset=37;
 800bc90:	4b39      	ldr	r3, [pc, #228]	; (800bd78 <input_parameter+0x550>)
 800bc92:	4a4f      	ldr	r2, [pc, #316]	; (800bdd0 <input_parameter+0x5a8>)
 800bc94:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

speed700_shortest.turn45out_R.g_speed=speed700_shortest.TurnCentervelocity;
 800bc98:	4b37      	ldr	r3, [pc, #220]	; (800bd78 <input_parameter+0x550>)
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	4a36      	ldr	r2, [pc, #216]	; (800bd78 <input_parameter+0x550>)
 800bc9e:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
speed700_shortest.turn45out_R.t_speed=450;
 800bca2:	4b35      	ldr	r3, [pc, #212]	; (800bd78 <input_parameter+0x550>)
 800bca4:	4a44      	ldr	r2, [pc, #272]	; (800bdb8 <input_parameter+0x590>)
 800bca6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
speed700_shortest.turn45out_R.t_acc=10000;
 800bcaa:	4b33      	ldr	r3, [pc, #204]	; (800bd78 <input_parameter+0x550>)
 800bcac:	4a36      	ldr	r2, [pc, #216]	; (800bd88 <input_parameter+0x560>)
 800bcae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
speed700_shortest.turn45out_R.f_ofset=42;
 800bcb2:	4b31      	ldr	r3, [pc, #196]	; (800bd78 <input_parameter+0x550>)
 800bcb4:	4a47      	ldr	r2, [pc, #284]	; (800bdd4 <input_parameter+0x5ac>)
 800bcb6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
speed700_shortest.turn45out_R.e_ofset=12;
 800bcba:	4b2f      	ldr	r3, [pc, #188]	; (800bd78 <input_parameter+0x550>)
 800bcbc:	4a33      	ldr	r2, [pc, #204]	; (800bd8c <input_parameter+0x564>)
 800bcbe:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

speed700_shortest.turn45out_L.g_speed=speed700_shortest.TurnCentervelocity;
 800bcc2:	4b2d      	ldr	r3, [pc, #180]	; (800bd78 <input_parameter+0x550>)
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	4a2c      	ldr	r2, [pc, #176]	; (800bd78 <input_parameter+0x550>)
 800bcc8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
speed700_shortest.turn45out_L.t_speed=450;
 800bccc:	4b2a      	ldr	r3, [pc, #168]	; (800bd78 <input_parameter+0x550>)
 800bcce:	4a3a      	ldr	r2, [pc, #232]	; (800bdb8 <input_parameter+0x590>)
 800bcd0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
speed700_shortest.turn45out_L.t_acc=10000;
 800bcd4:	4b28      	ldr	r3, [pc, #160]	; (800bd78 <input_parameter+0x550>)
 800bcd6:	4a2c      	ldr	r2, [pc, #176]	; (800bd88 <input_parameter+0x560>)
 800bcd8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
speed700_shortest.turn45out_L.f_ofset=40;
 800bcdc:	4b26      	ldr	r3, [pc, #152]	; (800bd78 <input_parameter+0x550>)
 800bcde:	4a3e      	ldr	r2, [pc, #248]	; (800bdd8 <input_parameter+0x5b0>)
 800bce0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
speed700_shortest.turn45out_L.e_ofset=10;
 800bce4:	4b24      	ldr	r3, [pc, #144]	; (800bd78 <input_parameter+0x550>)
 800bce6:	4a3d      	ldr	r2, [pc, #244]	; (800bddc <input_parameter+0x5b4>)
 800bce8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

speed700_shortest.turn135out_R.g_speed=speed700_shortest.TurnCentervelocity;
 800bcec:	4b22      	ldr	r3, [pc, #136]	; (800bd78 <input_parameter+0x550>)
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	4a21      	ldr	r2, [pc, #132]	; (800bd78 <input_parameter+0x550>)
 800bcf2:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
speed700_shortest.turn135out_R.t_speed=500;
 800bcf6:	4b20      	ldr	r3, [pc, #128]	; (800bd78 <input_parameter+0x550>)
 800bcf8:	4a32      	ldr	r2, [pc, #200]	; (800bdc4 <input_parameter+0x59c>)
 800bcfa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
speed700_shortest.turn135out_R.t_acc=10000;
 800bcfe:	4b1e      	ldr	r3, [pc, #120]	; (800bd78 <input_parameter+0x550>)
 800bd00:	4a21      	ldr	r2, [pc, #132]	; (800bd88 <input_parameter+0x560>)
 800bd02:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
speed700_shortest.turn135out_R.f_ofset=25;
 800bd06:	4b1c      	ldr	r3, [pc, #112]	; (800bd78 <input_parameter+0x550>)
 800bd08:	4a35      	ldr	r2, [pc, #212]	; (800bde0 <input_parameter+0x5b8>)
 800bd0a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
speed700_shortest.turn135out_R.e_ofset=90;
 800bd0e:	4b1a      	ldr	r3, [pc, #104]	; (800bd78 <input_parameter+0x550>)
 800bd10:	4a34      	ldr	r2, [pc, #208]	; (800bde4 <input_parameter+0x5bc>)
 800bd12:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

speed700_shortest.turn135out_L.g_speed=speed700_shortest.TurnCentervelocity;
 800bd16:	4b18      	ldr	r3, [pc, #96]	; (800bd78 <input_parameter+0x550>)
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	4a17      	ldr	r2, [pc, #92]	; (800bd78 <input_parameter+0x550>)
 800bd1c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
speed700_shortest.turn135out_L.t_speed=500;
 800bd20:	4b15      	ldr	r3, [pc, #84]	; (800bd78 <input_parameter+0x550>)
 800bd22:	4a28      	ldr	r2, [pc, #160]	; (800bdc4 <input_parameter+0x59c>)
 800bd24:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
speed700_shortest.turn135out_L.t_acc=10000;
 800bd28:	4b13      	ldr	r3, [pc, #76]	; (800bd78 <input_parameter+0x550>)
 800bd2a:	4a17      	ldr	r2, [pc, #92]	; (800bd88 <input_parameter+0x560>)
 800bd2c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
speed700_shortest.turn135out_L.f_ofset=40;
 800bd30:	4b11      	ldr	r3, [pc, #68]	; (800bd78 <input_parameter+0x550>)
 800bd32:	4a29      	ldr	r2, [pc, #164]	; (800bdd8 <input_parameter+0x5b0>)
 800bd34:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
speed700_shortest.turn135out_L.e_ofset=95;
 800bd38:	4b0f      	ldr	r3, [pc, #60]	; (800bd78 <input_parameter+0x550>)
 800bd3a:	4a2b      	ldr	r2, [pc, #172]	; (800bde8 <input_parameter+0x5c0>)
 800bd3c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

speed700_shortest.V90_R.g_speed=speed700_shortest.TurnCentervelocity;
 800bd40:	4b0d      	ldr	r3, [pc, #52]	; (800bd78 <input_parameter+0x550>)
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	4a0c      	ldr	r2, [pc, #48]	; (800bd78 <input_parameter+0x550>)
 800bd46:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
speed700_shortest.V90_R.t_speed=550;
 800bd4a:	4b0b      	ldr	r3, [pc, #44]	; (800bd78 <input_parameter+0x550>)
 800bd4c:	4a0d      	ldr	r2, [pc, #52]	; (800bd84 <input_parameter+0x55c>)
 800bd4e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
speed700_shortest.V90_R.t_acc=24500;
 800bd52:	4b09      	ldr	r3, [pc, #36]	; (800bd78 <input_parameter+0x550>)
 800bd54:	4a25      	ldr	r2, [pc, #148]	; (800bdec <input_parameter+0x5c4>)
 800bd56:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
speed700_shortest.V90_R.f_ofset=50;
 800bd5a:	4b07      	ldr	r3, [pc, #28]	; (800bd78 <input_parameter+0x550>)
 800bd5c:	4a24      	ldr	r2, [pc, #144]	; (800bdf0 <input_parameter+0x5c8>)
 800bd5e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
speed700_shortest.V90_R.e_ofset=65;
 800bd62:	4b05      	ldr	r3, [pc, #20]	; (800bd78 <input_parameter+0x550>)
 800bd64:	e046      	b.n	800bdf4 <input_parameter+0x5cc>
 800bd66:	bf00      	nop
 800bd68:	20000a50 	.word	0x20000a50
 800bd6c:	46abe000 	.word	0x46abe000
 800bd70:	41e00000 	.word	0x41e00000
 800bd74:	425c0000 	.word	0x425c0000
 800bd78:	20000b98 	.word	0x20000b98
 800bd7c:	44160000 	.word	0x44160000
 800bd80:	442f0000 	.word	0x442f0000
 800bd84:	44098000 	.word	0x44098000
 800bd88:	461c4000 	.word	0x461c4000
 800bd8c:	41400000 	.word	0x41400000
 800bd90:	41700000 	.word	0x41700000
 800bd94:	43d70000 	.word	0x43d70000
 800bd98:	427c0000 	.word	0x427c0000
 800bd9c:	42860000 	.word	0x42860000
 800bda0:	426c0000 	.word	0x426c0000
 800bda4:	428c0000 	.word	0x428c0000
 800bda8:	43f00000 	.word	0x43f00000
 800bdac:	42700000 	.word	0x42700000
 800bdb0:	42a40000 	.word	0x42a40000
 800bdb4:	42a00000 	.word	0x42a00000
 800bdb8:	43e10000 	.word	0x43e10000
 800bdbc:	41d80000 	.word	0x41d80000
 800bdc0:	42880000 	.word	0x42880000
 800bdc4:	43fa0000 	.word	0x43fa0000
 800bdc8:	42100000 	.word	0x42100000
 800bdcc:	42640000 	.word	0x42640000
 800bdd0:	42140000 	.word	0x42140000
 800bdd4:	42280000 	.word	0x42280000
 800bdd8:	42200000 	.word	0x42200000
 800bddc:	41200000 	.word	0x41200000
 800bde0:	41c80000 	.word	0x41c80000
 800bde4:	42b40000 	.word	0x42b40000
 800bde8:	42be0000 	.word	0x42be0000
 800bdec:	46bf6800 	.word	0x46bf6800
 800bdf0:	42480000 	.word	0x42480000
 800bdf4:	4a96      	ldr	r2, [pc, #600]	; (800c050 <input_parameter+0x828>)
 800bdf6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

speed700_shortest.V90_L.g_speed=speed700_shortest.TurnCentervelocity;
 800bdfa:	4b96      	ldr	r3, [pc, #600]	; (800c054 <input_parameter+0x82c>)
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	4a95      	ldr	r2, [pc, #596]	; (800c054 <input_parameter+0x82c>)
 800be00:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
speed700_shortest.V90_L.t_speed=550;
 800be04:	4b93      	ldr	r3, [pc, #588]	; (800c054 <input_parameter+0x82c>)
 800be06:	4a94      	ldr	r2, [pc, #592]	; (800c058 <input_parameter+0x830>)
 800be08:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
speed700_shortest.V90_L.t_acc=22000;
 800be0c:	4b91      	ldr	r3, [pc, #580]	; (800c054 <input_parameter+0x82c>)
 800be0e:	4a93      	ldr	r2, [pc, #588]	; (800c05c <input_parameter+0x834>)
 800be10:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
speed700_shortest.V90_L.f_ofset=28;
 800be14:	4b8f      	ldr	r3, [pc, #572]	; (800c054 <input_parameter+0x82c>)
 800be16:	4a92      	ldr	r2, [pc, #584]	; (800c060 <input_parameter+0x838>)
 800be18:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
speed700_shortest.V90_L.e_ofset=55;
 800be1c:	4b8d      	ldr	r3, [pc, #564]	; (800c054 <input_parameter+0x82c>)
 800be1e:	4a91      	ldr	r2, [pc, #580]	; (800c064 <input_parameter+0x83c>)
 800be20:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


//*********************************900********************************************

speed900_shortest.SlalomCentervelocity=700;
 800be24:	4b90      	ldr	r3, [pc, #576]	; (800c068 <input_parameter+0x840>)
 800be26:	4a91      	ldr	r2, [pc, #580]	; (800c06c <input_parameter+0x844>)
 800be28:	601a      	str	r2, [r3, #0]
speed900_shortest.TurnCentervelocity=900;
 800be2a:	4b8f      	ldr	r3, [pc, #572]	; (800c068 <input_parameter+0x840>)
 800be2c:	4a90      	ldr	r2, [pc, #576]	; (800c070 <input_parameter+0x848>)
 800be2e:	605a      	str	r2, [r3, #4]


speed900_shortest.slalom_R.g_speed=speed900_shortest.SlalomCentervelocity;
 800be30:	4b8d      	ldr	r3, [pc, #564]	; (800c068 <input_parameter+0x840>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	4a8c      	ldr	r2, [pc, #560]	; (800c068 <input_parameter+0x840>)
 800be36:	6093      	str	r3, [r2, #8]
speed900_shortest.slalom_R.t_speed=700;
 800be38:	4b8b      	ldr	r3, [pc, #556]	; (800c068 <input_parameter+0x840>)
 800be3a:	4a8c      	ldr	r2, [pc, #560]	; (800c06c <input_parameter+0x844>)
 800be3c:	615a      	str	r2, [r3, #20]
speed900_shortest.slalom_R.t_acc=12000;
 800be3e:	4b8a      	ldr	r3, [pc, #552]	; (800c068 <input_parameter+0x840>)
 800be40:	4a8c      	ldr	r2, [pc, #560]	; (800c074 <input_parameter+0x84c>)
 800be42:	619a      	str	r2, [r3, #24]
speed900_shortest.slalom_R.f_ofset=5;
 800be44:	4b88      	ldr	r3, [pc, #544]	; (800c068 <input_parameter+0x840>)
 800be46:	4a8c      	ldr	r2, [pc, #560]	; (800c078 <input_parameter+0x850>)
 800be48:	60da      	str	r2, [r3, #12]
speed900_shortest.slalom_R.e_ofset=5;
 800be4a:	4b87      	ldr	r3, [pc, #540]	; (800c068 <input_parameter+0x840>)
 800be4c:	4a8a      	ldr	r2, [pc, #552]	; (800c078 <input_parameter+0x850>)
 800be4e:	611a      	str	r2, [r3, #16]

speed900_shortest.slalom_L.g_speed=speed900_shortest.SlalomCentervelocity;
 800be50:	4b85      	ldr	r3, [pc, #532]	; (800c068 <input_parameter+0x840>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4a84      	ldr	r2, [pc, #528]	; (800c068 <input_parameter+0x840>)
 800be56:	61d3      	str	r3, [r2, #28]
speed900_shortest.slalom_L.t_speed=700;
 800be58:	4b83      	ldr	r3, [pc, #524]	; (800c068 <input_parameter+0x840>)
 800be5a:	4a84      	ldr	r2, [pc, #528]	; (800c06c <input_parameter+0x844>)
 800be5c:	629a      	str	r2, [r3, #40]	; 0x28
speed900_shortest.slalom_L.t_acc=12000;
 800be5e:	4b82      	ldr	r3, [pc, #520]	; (800c068 <input_parameter+0x840>)
 800be60:	4a84      	ldr	r2, [pc, #528]	; (800c074 <input_parameter+0x84c>)
 800be62:	62da      	str	r2, [r3, #44]	; 0x2c
speed900_shortest.slalom_L.f_ofset=5;
 800be64:	4b80      	ldr	r3, [pc, #512]	; (800c068 <input_parameter+0x840>)
 800be66:	4a84      	ldr	r2, [pc, #528]	; (800c078 <input_parameter+0x850>)
 800be68:	621a      	str	r2, [r3, #32]
speed900_shortest.slalom_L.e_ofset=5;
 800be6a:	4b7f      	ldr	r3, [pc, #508]	; (800c068 <input_parameter+0x840>)
 800be6c:	4a82      	ldr	r2, [pc, #520]	; (800c078 <input_parameter+0x850>)
 800be6e:	625a      	str	r2, [r3, #36]	; 0x24

speed900_shortest.turn90_R.g_speed=speed900_shortest.TurnCentervelocity;
 800be70:	4b7d      	ldr	r3, [pc, #500]	; (800c068 <input_parameter+0x840>)
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	4a7c      	ldr	r2, [pc, #496]	; (800c068 <input_parameter+0x840>)
 800be76:	6313      	str	r3, [r2, #48]	; 0x30
speed900_shortest.turn90_R.t_speed=500;
 800be78:	4b7b      	ldr	r3, [pc, #492]	; (800c068 <input_parameter+0x840>)
 800be7a:	4a80      	ldr	r2, [pc, #512]	; (800c07c <input_parameter+0x854>)
 800be7c:	63da      	str	r2, [r3, #60]	; 0x3c
speed900_shortest.turn90_R.t_acc=10000;
 800be7e:	4b7a      	ldr	r3, [pc, #488]	; (800c068 <input_parameter+0x840>)
 800be80:	4a7f      	ldr	r2, [pc, #508]	; (800c080 <input_parameter+0x858>)
 800be82:	641a      	str	r2, [r3, #64]	; 0x40
speed900_shortest.turn90_R.f_ofset=48;
 800be84:	4b78      	ldr	r3, [pc, #480]	; (800c068 <input_parameter+0x840>)
 800be86:	4a7f      	ldr	r2, [pc, #508]	; (800c084 <input_parameter+0x85c>)
 800be88:	635a      	str	r2, [r3, #52]	; 0x34
speed900_shortest.turn90_R.e_ofset=62;
 800be8a:	4b77      	ldr	r3, [pc, #476]	; (800c068 <input_parameter+0x840>)
 800be8c:	4a7e      	ldr	r2, [pc, #504]	; (800c088 <input_parameter+0x860>)
 800be8e:	639a      	str	r2, [r3, #56]	; 0x38

speed900_shortest.turn90_L.g_speed=speed900_shortest.TurnCentervelocity;
 800be90:	4b75      	ldr	r3, [pc, #468]	; (800c068 <input_parameter+0x840>)
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	4a74      	ldr	r2, [pc, #464]	; (800c068 <input_parameter+0x840>)
 800be96:	6453      	str	r3, [r2, #68]	; 0x44
speed900_shortest.turn90_L.t_speed=500;
 800be98:	4b73      	ldr	r3, [pc, #460]	; (800c068 <input_parameter+0x840>)
 800be9a:	4a78      	ldr	r2, [pc, #480]	; (800c07c <input_parameter+0x854>)
 800be9c:	651a      	str	r2, [r3, #80]	; 0x50
speed900_shortest.turn90_L.t_acc=10000;
 800be9e:	4b72      	ldr	r3, [pc, #456]	; (800c068 <input_parameter+0x840>)
 800bea0:	4a77      	ldr	r2, [pc, #476]	; (800c080 <input_parameter+0x858>)
 800bea2:	655a      	str	r2, [r3, #84]	; 0x54
speed900_shortest.turn90_L.f_ofset=38;
 800bea4:	4b70      	ldr	r3, [pc, #448]	; (800c068 <input_parameter+0x840>)
 800bea6:	4a79      	ldr	r2, [pc, #484]	; (800c08c <input_parameter+0x864>)
 800bea8:	649a      	str	r2, [r3, #72]	; 0x48
speed900_shortest.turn90_L.e_ofset=60;
 800beaa:	4b6f      	ldr	r3, [pc, #444]	; (800c068 <input_parameter+0x840>)
 800beac:	4a78      	ldr	r2, [pc, #480]	; (800c090 <input_parameter+0x868>)
 800beae:	64da      	str	r2, [r3, #76]	; 0x4c

speed900_shortest.turn180_R.g_speed=speed900_shortest.TurnCentervelocity;
 800beb0:	4b6d      	ldr	r3, [pc, #436]	; (800c068 <input_parameter+0x840>)
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	4a6c      	ldr	r2, [pc, #432]	; (800c068 <input_parameter+0x840>)
 800beb6:	6593      	str	r3, [r2, #88]	; 0x58
speed900_shortest.turn180_R.t_speed=550;
 800beb8:	4b6b      	ldr	r3, [pc, #428]	; (800c068 <input_parameter+0x840>)
 800beba:	4a67      	ldr	r2, [pc, #412]	; (800c058 <input_parameter+0x830>)
 800bebc:	665a      	str	r2, [r3, #100]	; 0x64
speed900_shortest.turn180_R.t_acc=10000;
 800bebe:	4b6a      	ldr	r3, [pc, #424]	; (800c068 <input_parameter+0x840>)
 800bec0:	4a6f      	ldr	r2, [pc, #444]	; (800c080 <input_parameter+0x858>)
 800bec2:	669a      	str	r2, [r3, #104]	; 0x68
speed900_shortest.turn180_R.f_ofset=40;
 800bec4:	4b68      	ldr	r3, [pc, #416]	; (800c068 <input_parameter+0x840>)
 800bec6:	4a73      	ldr	r2, [pc, #460]	; (800c094 <input_parameter+0x86c>)
 800bec8:	65da      	str	r2, [r3, #92]	; 0x5c
speed900_shortest.turn180_R.e_ofset=40;
 800beca:	4b67      	ldr	r3, [pc, #412]	; (800c068 <input_parameter+0x840>)
 800becc:	4a71      	ldr	r2, [pc, #452]	; (800c094 <input_parameter+0x86c>)
 800bece:	661a      	str	r2, [r3, #96]	; 0x60

speed900_shortest.turn180_L.g_speed=speed900_shortest.TurnCentervelocity;
 800bed0:	4b65      	ldr	r3, [pc, #404]	; (800c068 <input_parameter+0x840>)
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	4a64      	ldr	r2, [pc, #400]	; (800c068 <input_parameter+0x840>)
 800bed6:	66d3      	str	r3, [r2, #108]	; 0x6c
speed900_shortest.turn180_L.t_speed=550;
 800bed8:	4b63      	ldr	r3, [pc, #396]	; (800c068 <input_parameter+0x840>)
 800beda:	4a5f      	ldr	r2, [pc, #380]	; (800c058 <input_parameter+0x830>)
 800bedc:	679a      	str	r2, [r3, #120]	; 0x78
speed900_shortest.turn180_L.t_acc=10000;
 800bede:	4b62      	ldr	r3, [pc, #392]	; (800c068 <input_parameter+0x840>)
 800bee0:	4a67      	ldr	r2, [pc, #412]	; (800c080 <input_parameter+0x858>)
 800bee2:	67da      	str	r2, [r3, #124]	; 0x7c
speed900_shortest.turn180_L.f_ofset=40;
 800bee4:	4b60      	ldr	r3, [pc, #384]	; (800c068 <input_parameter+0x840>)
 800bee6:	4a6b      	ldr	r2, [pc, #428]	; (800c094 <input_parameter+0x86c>)
 800bee8:	671a      	str	r2, [r3, #112]	; 0x70
speed900_shortest.turn180_L.e_ofset=40;
 800beea:	4b5f      	ldr	r3, [pc, #380]	; (800c068 <input_parameter+0x840>)
 800beec:	4a69      	ldr	r2, [pc, #420]	; (800c094 <input_parameter+0x86c>)
 800beee:	675a      	str	r2, [r3, #116]	; 0x74

speed900_shortest.turn45in_R.g_speed=speed900_shortest.TurnCentervelocity;
 800bef0:	4b5d      	ldr	r3, [pc, #372]	; (800c068 <input_parameter+0x840>)
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	4a5c      	ldr	r2, [pc, #368]	; (800c068 <input_parameter+0x840>)
 800bef6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
speed900_shortest.turn45in_R.t_speed=500;
 800befa:	4b5b      	ldr	r3, [pc, #364]	; (800c068 <input_parameter+0x840>)
 800befc:	4a5f      	ldr	r2, [pc, #380]	; (800c07c <input_parameter+0x854>)
 800befe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
speed900_shortest.turn45in_R.t_acc=10000;
 800bf02:	4b59      	ldr	r3, [pc, #356]	; (800c068 <input_parameter+0x840>)
 800bf04:	4a5e      	ldr	r2, [pc, #376]	; (800c080 <input_parameter+0x858>)
 800bf06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
speed900_shortest.turn45in_R.f_ofset=25;
 800bf0a:	4b57      	ldr	r3, [pc, #348]	; (800c068 <input_parameter+0x840>)
 800bf0c:	4a62      	ldr	r2, [pc, #392]	; (800c098 <input_parameter+0x870>)
 800bf0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
speed900_shortest.turn45in_R.e_ofset=60;
 800bf12:	4b55      	ldr	r3, [pc, #340]	; (800c068 <input_parameter+0x840>)
 800bf14:	4a5e      	ldr	r2, [pc, #376]	; (800c090 <input_parameter+0x868>)
 800bf16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

speed900_shortest.turn45in_L.g_speed=speed900_shortest.TurnCentervelocity;
 800bf1a:	4b53      	ldr	r3, [pc, #332]	; (800c068 <input_parameter+0x840>)
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	4a52      	ldr	r2, [pc, #328]	; (800c068 <input_parameter+0x840>)
 800bf20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
speed900_shortest.turn45in_L.t_speed=500;
 800bf24:	4b50      	ldr	r3, [pc, #320]	; (800c068 <input_parameter+0x840>)
 800bf26:	4a55      	ldr	r2, [pc, #340]	; (800c07c <input_parameter+0x854>)
 800bf28:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
speed900_shortest.turn45in_L.t_acc=10000;
 800bf2c:	4b4e      	ldr	r3, [pc, #312]	; (800c068 <input_parameter+0x840>)
 800bf2e:	4a54      	ldr	r2, [pc, #336]	; (800c080 <input_parameter+0x858>)
 800bf30:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
speed900_shortest.turn45in_L.f_ofset=32;
 800bf34:	4b4c      	ldr	r3, [pc, #304]	; (800c068 <input_parameter+0x840>)
 800bf36:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 800bf3a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
speed900_shortest.turn45in_L.e_ofset=60;
 800bf3e:	4b4a      	ldr	r3, [pc, #296]	; (800c068 <input_parameter+0x840>)
 800bf40:	4a53      	ldr	r2, [pc, #332]	; (800c090 <input_parameter+0x868>)
 800bf42:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

speed900_shortest.turn135in_R.g_speed=speed900_shortest.TurnCentervelocity;
 800bf46:	4b48      	ldr	r3, [pc, #288]	; (800c068 <input_parameter+0x840>)
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	4a47      	ldr	r2, [pc, #284]	; (800c068 <input_parameter+0x840>)
 800bf4c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
speed900_shortest.turn135in_R.t_speed=500;
 800bf50:	4b45      	ldr	r3, [pc, #276]	; (800c068 <input_parameter+0x840>)
 800bf52:	4a4a      	ldr	r2, [pc, #296]	; (800c07c <input_parameter+0x854>)
 800bf54:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
speed900_shortest.turn135in_R.t_acc=10000;
 800bf58:	4b43      	ldr	r3, [pc, #268]	; (800c068 <input_parameter+0x840>)
 800bf5a:	4a49      	ldr	r2, [pc, #292]	; (800c080 <input_parameter+0x858>)
 800bf5c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
speed900_shortest.turn135in_R.f_ofset=53;
 800bf60:	4b41      	ldr	r3, [pc, #260]	; (800c068 <input_parameter+0x840>)
 800bf62:	4a4e      	ldr	r2, [pc, #312]	; (800c09c <input_parameter+0x874>)
 800bf64:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
speed900_shortest.turn135in_R.e_ofset=47;
 800bf68:	4b3f      	ldr	r3, [pc, #252]	; (800c068 <input_parameter+0x840>)
 800bf6a:	4a4d      	ldr	r2, [pc, #308]	; (800c0a0 <input_parameter+0x878>)
 800bf6c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

speed900_shortest.turn135in_L.g_speed=speed900_shortest.TurnCentervelocity;
 800bf70:	4b3d      	ldr	r3, [pc, #244]	; (800c068 <input_parameter+0x840>)
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	4a3c      	ldr	r2, [pc, #240]	; (800c068 <input_parameter+0x840>)
 800bf76:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
speed900_shortest.turn135in_L.t_speed=500;
 800bf7a:	4b3b      	ldr	r3, [pc, #236]	; (800c068 <input_parameter+0x840>)
 800bf7c:	4a3f      	ldr	r2, [pc, #252]	; (800c07c <input_parameter+0x854>)
 800bf7e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
speed900_shortest.turn135in_L.t_acc=10000;
 800bf82:	4b39      	ldr	r3, [pc, #228]	; (800c068 <input_parameter+0x840>)
 800bf84:	4a3e      	ldr	r2, [pc, #248]	; (800c080 <input_parameter+0x858>)
 800bf86:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
speed900_shortest.turn135in_L.f_ofset=40;
 800bf8a:	4b37      	ldr	r3, [pc, #220]	; (800c068 <input_parameter+0x840>)
 800bf8c:	4a41      	ldr	r2, [pc, #260]	; (800c094 <input_parameter+0x86c>)
 800bf8e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
speed900_shortest.turn135in_L.e_ofset=55;
 800bf92:	4b35      	ldr	r3, [pc, #212]	; (800c068 <input_parameter+0x840>)
 800bf94:	4a33      	ldr	r2, [pc, #204]	; (800c064 <input_parameter+0x83c>)
 800bf96:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

speed900_shortest.turn45out_R.g_speed=speed900_shortest.TurnCentervelocity;
 800bf9a:	4b33      	ldr	r3, [pc, #204]	; (800c068 <input_parameter+0x840>)
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	4a32      	ldr	r2, [pc, #200]	; (800c068 <input_parameter+0x840>)
 800bfa0:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
speed900_shortest.turn45out_R.t_speed=500;
 800bfa4:	4b30      	ldr	r3, [pc, #192]	; (800c068 <input_parameter+0x840>)
 800bfa6:	4a35      	ldr	r2, [pc, #212]	; (800c07c <input_parameter+0x854>)
 800bfa8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
speed900_shortest.turn45out_R.t_acc=10000;
 800bfac:	4b2e      	ldr	r3, [pc, #184]	; (800c068 <input_parameter+0x840>)
 800bfae:	4a34      	ldr	r2, [pc, #208]	; (800c080 <input_parameter+0x858>)
 800bfb0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
speed900_shortest.turn45out_R.f_ofset=45;
 800bfb4:	4b2c      	ldr	r3, [pc, #176]	; (800c068 <input_parameter+0x840>)
 800bfb6:	4a3b      	ldr	r2, [pc, #236]	; (800c0a4 <input_parameter+0x87c>)
 800bfb8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
speed900_shortest.turn45out_R.e_ofset=10;
 800bfbc:	4b2a      	ldr	r3, [pc, #168]	; (800c068 <input_parameter+0x840>)
 800bfbe:	4a3a      	ldr	r2, [pc, #232]	; (800c0a8 <input_parameter+0x880>)
 800bfc0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

speed900_shortest.turn45out_L.g_speed=speed900_shortest.TurnCentervelocity;
 800bfc4:	4b28      	ldr	r3, [pc, #160]	; (800c068 <input_parameter+0x840>)
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	4a27      	ldr	r2, [pc, #156]	; (800c068 <input_parameter+0x840>)
 800bfca:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
speed900_shortest.turn45out_L.t_speed=500;
 800bfce:	4b26      	ldr	r3, [pc, #152]	; (800c068 <input_parameter+0x840>)
 800bfd0:	4a2a      	ldr	r2, [pc, #168]	; (800c07c <input_parameter+0x854>)
 800bfd2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
speed900_shortest.turn45out_L.t_acc=10000;
 800bfd6:	4b24      	ldr	r3, [pc, #144]	; (800c068 <input_parameter+0x840>)
 800bfd8:	4a29      	ldr	r2, [pc, #164]	; (800c080 <input_parameter+0x858>)
 800bfda:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
speed900_shortest.turn45out_L.f_ofset=40;
 800bfde:	4b22      	ldr	r3, [pc, #136]	; (800c068 <input_parameter+0x840>)
 800bfe0:	4a2c      	ldr	r2, [pc, #176]	; (800c094 <input_parameter+0x86c>)
 800bfe2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
speed900_shortest.turn45out_L.e_ofset=10;
 800bfe6:	4b20      	ldr	r3, [pc, #128]	; (800c068 <input_parameter+0x840>)
 800bfe8:	4a2f      	ldr	r2, [pc, #188]	; (800c0a8 <input_parameter+0x880>)
 800bfea:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

speed900_shortest.turn135out_R.g_speed=speed900_shortest.TurnCentervelocity;
 800bfee:	4b1e      	ldr	r3, [pc, #120]	; (800c068 <input_parameter+0x840>)
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	4a1d      	ldr	r2, [pc, #116]	; (800c068 <input_parameter+0x840>)
 800bff4:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
speed900_shortest.turn135out_R.t_speed=500;
 800bff8:	4b1b      	ldr	r3, [pc, #108]	; (800c068 <input_parameter+0x840>)
 800bffa:	4a20      	ldr	r2, [pc, #128]	; (800c07c <input_parameter+0x854>)
 800bffc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
speed900_shortest.turn135out_R.t_acc=10000;
 800c000:	4b19      	ldr	r3, [pc, #100]	; (800c068 <input_parameter+0x840>)
 800c002:	4a1f      	ldr	r2, [pc, #124]	; (800c080 <input_parameter+0x858>)
 800c004:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
speed900_shortest.turn135out_R.f_ofset=25;
 800c008:	4b17      	ldr	r3, [pc, #92]	; (800c068 <input_parameter+0x840>)
 800c00a:	4a23      	ldr	r2, [pc, #140]	; (800c098 <input_parameter+0x870>)
 800c00c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
speed900_shortest.turn135out_R.e_ofset=90;
 800c010:	4b15      	ldr	r3, [pc, #84]	; (800c068 <input_parameter+0x840>)
 800c012:	4a26      	ldr	r2, [pc, #152]	; (800c0ac <input_parameter+0x884>)
 800c014:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

speed900_shortest.turn135out_L.g_speed=speed900_shortest.TurnCentervelocity;
 800c018:	4b13      	ldr	r3, [pc, #76]	; (800c068 <input_parameter+0x840>)
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	4a12      	ldr	r2, [pc, #72]	; (800c068 <input_parameter+0x840>)
 800c01e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
speed900_shortest.turn135out_L.t_speed=500;
 800c022:	4b11      	ldr	r3, [pc, #68]	; (800c068 <input_parameter+0x840>)
 800c024:	4a15      	ldr	r2, [pc, #84]	; (800c07c <input_parameter+0x854>)
 800c026:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
speed900_shortest.turn135out_L.t_acc=10000;
 800c02a:	4b0f      	ldr	r3, [pc, #60]	; (800c068 <input_parameter+0x840>)
 800c02c:	4a14      	ldr	r2, [pc, #80]	; (800c080 <input_parameter+0x858>)
 800c02e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
speed900_shortest.turn135out_L.f_ofset=40;
 800c032:	4b0d      	ldr	r3, [pc, #52]	; (800c068 <input_parameter+0x840>)
 800c034:	4a17      	ldr	r2, [pc, #92]	; (800c094 <input_parameter+0x86c>)
 800c036:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
speed900_shortest.turn135out_L.e_ofset=95;
 800c03a:	4b0b      	ldr	r3, [pc, #44]	; (800c068 <input_parameter+0x840>)
 800c03c:	4a1c      	ldr	r2, [pc, #112]	; (800c0b0 <input_parameter+0x888>)
 800c03e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

speed900_shortest.V90_R.g_speed=speed900_shortest.TurnCentervelocity;
 800c042:	4b09      	ldr	r3, [pc, #36]	; (800c068 <input_parameter+0x840>)
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	4a08      	ldr	r2, [pc, #32]	; (800c068 <input_parameter+0x840>)
 800c048:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
speed900_shortest.V90_R.t_speed=550;
 800c04c:	4b06      	ldr	r3, [pc, #24]	; (800c068 <input_parameter+0x840>)
 800c04e:	e031      	b.n	800c0b4 <input_parameter+0x88c>
 800c050:	42820000 	.word	0x42820000
 800c054:	20000b98 	.word	0x20000b98
 800c058:	44098000 	.word	0x44098000
 800c05c:	46abe000 	.word	0x46abe000
 800c060:	41e00000 	.word	0x41e00000
 800c064:	425c0000 	.word	0x425c0000
 800c068:	20000ce0 	.word	0x20000ce0
 800c06c:	442f0000 	.word	0x442f0000
 800c070:	44610000 	.word	0x44610000
 800c074:	463b8000 	.word	0x463b8000
 800c078:	40a00000 	.word	0x40a00000
 800c07c:	43fa0000 	.word	0x43fa0000
 800c080:	461c4000 	.word	0x461c4000
 800c084:	42400000 	.word	0x42400000
 800c088:	42780000 	.word	0x42780000
 800c08c:	42180000 	.word	0x42180000
 800c090:	42700000 	.word	0x42700000
 800c094:	42200000 	.word	0x42200000
 800c098:	41c80000 	.word	0x41c80000
 800c09c:	42540000 	.word	0x42540000
 800c0a0:	423c0000 	.word	0x423c0000
 800c0a4:	42340000 	.word	0x42340000
 800c0a8:	41200000 	.word	0x41200000
 800c0ac:	42b40000 	.word	0x42b40000
 800c0b0:	42be0000 	.word	0x42be0000
 800c0b4:	4a99      	ldr	r2, [pc, #612]	; (800c31c <input_parameter+0xaf4>)
 800c0b6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
speed900_shortest.V90_R.t_acc=24500;
 800c0ba:	4b99      	ldr	r3, [pc, #612]	; (800c320 <input_parameter+0xaf8>)
 800c0bc:	4a99      	ldr	r2, [pc, #612]	; (800c324 <input_parameter+0xafc>)
 800c0be:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
speed900_shortest.V90_R.f_ofset=50;
 800c0c2:	4b97      	ldr	r3, [pc, #604]	; (800c320 <input_parameter+0xaf8>)
 800c0c4:	4a98      	ldr	r2, [pc, #608]	; (800c328 <input_parameter+0xb00>)
 800c0c6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
speed900_shortest.V90_R.e_ofset=65;
 800c0ca:	4b95      	ldr	r3, [pc, #596]	; (800c320 <input_parameter+0xaf8>)
 800c0cc:	4a97      	ldr	r2, [pc, #604]	; (800c32c <input_parameter+0xb04>)
 800c0ce:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

speed900_shortest.V90_L.g_speed=speed900_shortest.TurnCentervelocity;
 800c0d2:	4b93      	ldr	r3, [pc, #588]	; (800c320 <input_parameter+0xaf8>)
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	4a92      	ldr	r2, [pc, #584]	; (800c320 <input_parameter+0xaf8>)
 800c0d8:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
speed900_shortest.V90_L.t_speed=550;
 800c0dc:	4b90      	ldr	r3, [pc, #576]	; (800c320 <input_parameter+0xaf8>)
 800c0de:	4a8f      	ldr	r2, [pc, #572]	; (800c31c <input_parameter+0xaf4>)
 800c0e0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
speed900_shortest.V90_L.t_acc=22000;
 800c0e4:	4b8e      	ldr	r3, [pc, #568]	; (800c320 <input_parameter+0xaf8>)
 800c0e6:	4a92      	ldr	r2, [pc, #584]	; (800c330 <input_parameter+0xb08>)
 800c0e8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
speed900_shortest.V90_L.f_ofset=28;
 800c0ec:	4b8c      	ldr	r3, [pc, #560]	; (800c320 <input_parameter+0xaf8>)
 800c0ee:	4a91      	ldr	r2, [pc, #580]	; (800c334 <input_parameter+0xb0c>)
 800c0f0:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
speed900_shortest.V90_L.e_ofset=55;
 800c0f4:	4b8a      	ldr	r3, [pc, #552]	; (800c320 <input_parameter+0xaf8>)
 800c0f6:	4a90      	ldr	r2, [pc, #576]	; (800c338 <input_parameter+0xb10>)
 800c0f8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

//*********************************1000********************************************

speed1000_shortest.slalom_R.g_speed=1000;
 800c0fc:	4b8f      	ldr	r3, [pc, #572]	; (800c33c <input_parameter+0xb14>)
 800c0fe:	4a90      	ldr	r2, [pc, #576]	; (800c340 <input_parameter+0xb18>)
 800c100:	609a      	str	r2, [r3, #8]
speed1000_shortest.slalom_R.t_speed=550;
 800c102:	4b8e      	ldr	r3, [pc, #568]	; (800c33c <input_parameter+0xb14>)
 800c104:	4a85      	ldr	r2, [pc, #532]	; (800c31c <input_parameter+0xaf4>)
 800c106:	615a      	str	r2, [r3, #20]
speed1000_shortest.slalom_R.t_acc=12000;
 800c108:	4b8c      	ldr	r3, [pc, #560]	; (800c33c <input_parameter+0xb14>)
 800c10a:	4a8e      	ldr	r2, [pc, #568]	; (800c344 <input_parameter+0xb1c>)
 800c10c:	619a      	str	r2, [r3, #24]
speed1000_shortest.slalom_R.f_ofset=30;
 800c10e:	4b8b      	ldr	r3, [pc, #556]	; (800c33c <input_parameter+0xb14>)
 800c110:	4a8d      	ldr	r2, [pc, #564]	; (800c348 <input_parameter+0xb20>)
 800c112:	60da      	str	r2, [r3, #12]
speed1000_shortest.slalom_R.e_ofset=60;
 800c114:	4b89      	ldr	r3, [pc, #548]	; (800c33c <input_parameter+0xb14>)
 800c116:	4a8d      	ldr	r2, [pc, #564]	; (800c34c <input_parameter+0xb24>)
 800c118:	611a      	str	r2, [r3, #16]

speed1000_shortest.slalom_L.g_speed=1000;
 800c11a:	4b88      	ldr	r3, [pc, #544]	; (800c33c <input_parameter+0xb14>)
 800c11c:	4a88      	ldr	r2, [pc, #544]	; (800c340 <input_parameter+0xb18>)
 800c11e:	61da      	str	r2, [r3, #28]
speed1000_shortest.slalom_L.t_speed=550;
 800c120:	4b86      	ldr	r3, [pc, #536]	; (800c33c <input_parameter+0xb14>)
 800c122:	4a7e      	ldr	r2, [pc, #504]	; (800c31c <input_parameter+0xaf4>)
 800c124:	629a      	str	r2, [r3, #40]	; 0x28
speed1000_shortest.slalom_L.t_acc=12000;
 800c126:	4b85      	ldr	r3, [pc, #532]	; (800c33c <input_parameter+0xb14>)
 800c128:	4a86      	ldr	r2, [pc, #536]	; (800c344 <input_parameter+0xb1c>)
 800c12a:	62da      	str	r2, [r3, #44]	; 0x2c
speed1000_shortest.slalom_L.f_ofset=30;
 800c12c:	4b83      	ldr	r3, [pc, #524]	; (800c33c <input_parameter+0xb14>)
 800c12e:	4a86      	ldr	r2, [pc, #536]	; (800c348 <input_parameter+0xb20>)
 800c130:	621a      	str	r2, [r3, #32]
speed1000_shortest.slalom_L.e_ofset=60;
 800c132:	4b82      	ldr	r3, [pc, #520]	; (800c33c <input_parameter+0xb14>)
 800c134:	4a85      	ldr	r2, [pc, #532]	; (800c34c <input_parameter+0xb24>)
 800c136:	625a      	str	r2, [r3, #36]	; 0x24

speed1000_shortest.turn90_R.g_speed=1000;
 800c138:	4b80      	ldr	r3, [pc, #512]	; (800c33c <input_parameter+0xb14>)
 800c13a:	4a81      	ldr	r2, [pc, #516]	; (800c340 <input_parameter+0xb18>)
 800c13c:	631a      	str	r2, [r3, #48]	; 0x30
speed1000_shortest.turn90_R.t_speed=400;
 800c13e:	4b7f      	ldr	r3, [pc, #508]	; (800c33c <input_parameter+0xb14>)
 800c140:	4a83      	ldr	r2, [pc, #524]	; (800c350 <input_parameter+0xb28>)
 800c142:	63da      	str	r2, [r3, #60]	; 0x3c
speed1000_shortest.turn90_R.t_acc=12000;
 800c144:	4b7d      	ldr	r3, [pc, #500]	; (800c33c <input_parameter+0xb14>)
 800c146:	4a7f      	ldr	r2, [pc, #508]	; (800c344 <input_parameter+0xb1c>)
 800c148:	641a      	str	r2, [r3, #64]	; 0x40
speed1000_shortest.turn90_R.f_ofset=30;
 800c14a:	4b7c      	ldr	r3, [pc, #496]	; (800c33c <input_parameter+0xb14>)
 800c14c:	4a7e      	ldr	r2, [pc, #504]	; (800c348 <input_parameter+0xb20>)
 800c14e:	635a      	str	r2, [r3, #52]	; 0x34
speed1000_shortest.turn90_R.e_ofset=60;
 800c150:	4b7a      	ldr	r3, [pc, #488]	; (800c33c <input_parameter+0xb14>)
 800c152:	4a7e      	ldr	r2, [pc, #504]	; (800c34c <input_parameter+0xb24>)
 800c154:	639a      	str	r2, [r3, #56]	; 0x38

speed1000_shortest.turn90_L.g_speed=1000;
 800c156:	4b79      	ldr	r3, [pc, #484]	; (800c33c <input_parameter+0xb14>)
 800c158:	4a79      	ldr	r2, [pc, #484]	; (800c340 <input_parameter+0xb18>)
 800c15a:	645a      	str	r2, [r3, #68]	; 0x44
speed1000_shortest.turn90_L.t_speed=400;
 800c15c:	4b77      	ldr	r3, [pc, #476]	; (800c33c <input_parameter+0xb14>)
 800c15e:	4a7c      	ldr	r2, [pc, #496]	; (800c350 <input_parameter+0xb28>)
 800c160:	651a      	str	r2, [r3, #80]	; 0x50
speed1000_shortest.turn90_L.t_acc=12000;
 800c162:	4b76      	ldr	r3, [pc, #472]	; (800c33c <input_parameter+0xb14>)
 800c164:	4a77      	ldr	r2, [pc, #476]	; (800c344 <input_parameter+0xb1c>)
 800c166:	655a      	str	r2, [r3, #84]	; 0x54
speed1000_shortest.turn90_L.f_ofset=30;
 800c168:	4b74      	ldr	r3, [pc, #464]	; (800c33c <input_parameter+0xb14>)
 800c16a:	4a77      	ldr	r2, [pc, #476]	; (800c348 <input_parameter+0xb20>)
 800c16c:	649a      	str	r2, [r3, #72]	; 0x48
speed1000_shortest.turn90_L.e_ofset=60;
 800c16e:	4b73      	ldr	r3, [pc, #460]	; (800c33c <input_parameter+0xb14>)
 800c170:	4a76      	ldr	r2, [pc, #472]	; (800c34c <input_parameter+0xb24>)
 800c172:	64da      	str	r2, [r3, #76]	; 0x4c

speed1000_shortest.turn180_R.g_speed=1000;
 800c174:	4b71      	ldr	r3, [pc, #452]	; (800c33c <input_parameter+0xb14>)
 800c176:	4a72      	ldr	r2, [pc, #456]	; (800c340 <input_parameter+0xb18>)
 800c178:	659a      	str	r2, [r3, #88]	; 0x58
speed1000_shortest.turn180_R.t_speed=500;
 800c17a:	4b70      	ldr	r3, [pc, #448]	; (800c33c <input_parameter+0xb14>)
 800c17c:	4a75      	ldr	r2, [pc, #468]	; (800c354 <input_parameter+0xb2c>)
 800c17e:	665a      	str	r2, [r3, #100]	; 0x64
speed1000_shortest.turn180_R.t_acc=10000;
 800c180:	4b6e      	ldr	r3, [pc, #440]	; (800c33c <input_parameter+0xb14>)
 800c182:	4a75      	ldr	r2, [pc, #468]	; (800c358 <input_parameter+0xb30>)
 800c184:	669a      	str	r2, [r3, #104]	; 0x68
speed1000_shortest.turn180_R.f_ofset=30;
 800c186:	4b6d      	ldr	r3, [pc, #436]	; (800c33c <input_parameter+0xb14>)
 800c188:	4a6f      	ldr	r2, [pc, #444]	; (800c348 <input_parameter+0xb20>)
 800c18a:	65da      	str	r2, [r3, #92]	; 0x5c
speed1000_shortest.turn180_R.e_ofset=70;
 800c18c:	4b6b      	ldr	r3, [pc, #428]	; (800c33c <input_parameter+0xb14>)
 800c18e:	4a73      	ldr	r2, [pc, #460]	; (800c35c <input_parameter+0xb34>)
 800c190:	661a      	str	r2, [r3, #96]	; 0x60

speed1000_shortest.turn180_L.g_speed=1000;
 800c192:	4b6a      	ldr	r3, [pc, #424]	; (800c33c <input_parameter+0xb14>)
 800c194:	4a6a      	ldr	r2, [pc, #424]	; (800c340 <input_parameter+0xb18>)
 800c196:	66da      	str	r2, [r3, #108]	; 0x6c
speed1000_shortest.turn180_L.t_speed=500;
 800c198:	4b68      	ldr	r3, [pc, #416]	; (800c33c <input_parameter+0xb14>)
 800c19a:	4a6e      	ldr	r2, [pc, #440]	; (800c354 <input_parameter+0xb2c>)
 800c19c:	679a      	str	r2, [r3, #120]	; 0x78
speed1000_shortest.turn180_L.t_acc=10000;
 800c19e:	4b67      	ldr	r3, [pc, #412]	; (800c33c <input_parameter+0xb14>)
 800c1a0:	4a6d      	ldr	r2, [pc, #436]	; (800c358 <input_parameter+0xb30>)
 800c1a2:	67da      	str	r2, [r3, #124]	; 0x7c
speed1000_shortest.turn180_L.f_ofset=30;
 800c1a4:	4b65      	ldr	r3, [pc, #404]	; (800c33c <input_parameter+0xb14>)
 800c1a6:	4a68      	ldr	r2, [pc, #416]	; (800c348 <input_parameter+0xb20>)
 800c1a8:	671a      	str	r2, [r3, #112]	; 0x70
speed1000_shortest.turn180_L.e_ofset=70;
 800c1aa:	4b64      	ldr	r3, [pc, #400]	; (800c33c <input_parameter+0xb14>)
 800c1ac:	4a6b      	ldr	r2, [pc, #428]	; (800c35c <input_parameter+0xb34>)
 800c1ae:	675a      	str	r2, [r3, #116]	; 0x74

speed1000_shortest.turn45in_R.g_speed=1000;
 800c1b0:	4b62      	ldr	r3, [pc, #392]	; (800c33c <input_parameter+0xb14>)
 800c1b2:	4a63      	ldr	r2, [pc, #396]	; (800c340 <input_parameter+0xb18>)
 800c1b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
speed1000_shortest.turn45in_R.t_speed=750;
 800c1b8:	4b60      	ldr	r3, [pc, #384]	; (800c33c <input_parameter+0xb14>)
 800c1ba:	4a69      	ldr	r2, [pc, #420]	; (800c360 <input_parameter+0xb38>)
 800c1bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
speed1000_shortest.turn45in_R.t_acc=12000;
 800c1c0:	4b5e      	ldr	r3, [pc, #376]	; (800c33c <input_parameter+0xb14>)
 800c1c2:	4a60      	ldr	r2, [pc, #384]	; (800c344 <input_parameter+0xb1c>)
 800c1c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
speed1000_shortest.turn45in_R.f_ofset=20;
 800c1c8:	4b5c      	ldr	r3, [pc, #368]	; (800c33c <input_parameter+0xb14>)
 800c1ca:	4a66      	ldr	r2, [pc, #408]	; (800c364 <input_parameter+0xb3c>)
 800c1cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
speed1000_shortest.turn45in_R.e_ofset=70;
 800c1d0:	4b5a      	ldr	r3, [pc, #360]	; (800c33c <input_parameter+0xb14>)
 800c1d2:	4a62      	ldr	r2, [pc, #392]	; (800c35c <input_parameter+0xb34>)
 800c1d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

speed1000_shortest.turn45in_L.g_speed=1000;
 800c1d8:	4b58      	ldr	r3, [pc, #352]	; (800c33c <input_parameter+0xb14>)
 800c1da:	4a59      	ldr	r2, [pc, #356]	; (800c340 <input_parameter+0xb18>)
 800c1dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
speed1000_shortest.turn45in_L.t_speed=750;
 800c1e0:	4b56      	ldr	r3, [pc, #344]	; (800c33c <input_parameter+0xb14>)
 800c1e2:	4a5f      	ldr	r2, [pc, #380]	; (800c360 <input_parameter+0xb38>)
 800c1e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
speed1000_shortest.turn45in_L.t_acc=12000;
 800c1e8:	4b54      	ldr	r3, [pc, #336]	; (800c33c <input_parameter+0xb14>)
 800c1ea:	4a56      	ldr	r2, [pc, #344]	; (800c344 <input_parameter+0xb1c>)
 800c1ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
speed1000_shortest.turn45in_L.f_ofset=20;
 800c1f0:	4b52      	ldr	r3, [pc, #328]	; (800c33c <input_parameter+0xb14>)
 800c1f2:	4a5c      	ldr	r2, [pc, #368]	; (800c364 <input_parameter+0xb3c>)
 800c1f4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
speed1000_shortest.turn45in_L.e_ofset=70;
 800c1f8:	4b50      	ldr	r3, [pc, #320]	; (800c33c <input_parameter+0xb14>)
 800c1fa:	4a58      	ldr	r2, [pc, #352]	; (800c35c <input_parameter+0xb34>)
 800c1fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

speed1000_shortest.turn135in_R.g_speed=1000;
 800c200:	4b4e      	ldr	r3, [pc, #312]	; (800c33c <input_parameter+0xb14>)
 800c202:	4a4f      	ldr	r2, [pc, #316]	; (800c340 <input_parameter+0xb18>)
 800c204:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
speed1000_shortest.turn135in_R.t_speed=680;
 800c208:	4b4c      	ldr	r3, [pc, #304]	; (800c33c <input_parameter+0xb14>)
 800c20a:	4a57      	ldr	r2, [pc, #348]	; (800c368 <input_parameter+0xb40>)
 800c20c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
speed1000_shortest.turn135in_R.t_acc=14000;
 800c210:	4b4a      	ldr	r3, [pc, #296]	; (800c33c <input_parameter+0xb14>)
 800c212:	4a56      	ldr	r2, [pc, #344]	; (800c36c <input_parameter+0xb44>)
 800c214:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
speed1000_shortest.turn135in_R.f_ofset=20;
 800c218:	4b48      	ldr	r3, [pc, #288]	; (800c33c <input_parameter+0xb14>)
 800c21a:	4a52      	ldr	r2, [pc, #328]	; (800c364 <input_parameter+0xb3c>)
 800c21c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
speed1000_shortest.turn135in_R.e_ofset=50;
 800c220:	4b46      	ldr	r3, [pc, #280]	; (800c33c <input_parameter+0xb14>)
 800c222:	4a41      	ldr	r2, [pc, #260]	; (800c328 <input_parameter+0xb00>)
 800c224:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

speed1000_shortest.turn135in_L.g_speed=1000;
 800c228:	4b44      	ldr	r3, [pc, #272]	; (800c33c <input_parameter+0xb14>)
 800c22a:	4a45      	ldr	r2, [pc, #276]	; (800c340 <input_parameter+0xb18>)
 800c22c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
speed1000_shortest.turn135in_L.t_speed=680;
 800c230:	4b42      	ldr	r3, [pc, #264]	; (800c33c <input_parameter+0xb14>)
 800c232:	4a4d      	ldr	r2, [pc, #308]	; (800c368 <input_parameter+0xb40>)
 800c234:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
speed1000_shortest.turn135in_L.t_acc=14000;
 800c238:	4b40      	ldr	r3, [pc, #256]	; (800c33c <input_parameter+0xb14>)
 800c23a:	4a4c      	ldr	r2, [pc, #304]	; (800c36c <input_parameter+0xb44>)
 800c23c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
speed1000_shortest.turn135in_L.f_ofset=20;
 800c240:	4b3e      	ldr	r3, [pc, #248]	; (800c33c <input_parameter+0xb14>)
 800c242:	4a48      	ldr	r2, [pc, #288]	; (800c364 <input_parameter+0xb3c>)
 800c244:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
speed1000_shortest.turn135in_L.e_ofset=50;
 800c248:	4b3c      	ldr	r3, [pc, #240]	; (800c33c <input_parameter+0xb14>)
 800c24a:	4a37      	ldr	r2, [pc, #220]	; (800c328 <input_parameter+0xb00>)
 800c24c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

speed1000_shortest.turn45out_R.g_speed=1000;
 800c250:	4b3a      	ldr	r3, [pc, #232]	; (800c33c <input_parameter+0xb14>)
 800c252:	4a3b      	ldr	r2, [pc, #236]	; (800c340 <input_parameter+0xb18>)
 800c254:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
speed1000_shortest.turn45out_R.t_speed=750;
 800c258:	4b38      	ldr	r3, [pc, #224]	; (800c33c <input_parameter+0xb14>)
 800c25a:	4a41      	ldr	r2, [pc, #260]	; (800c360 <input_parameter+0xb38>)
 800c25c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
speed1000_shortest.turn45out_R.t_acc=14000;
 800c260:	4b36      	ldr	r3, [pc, #216]	; (800c33c <input_parameter+0xb14>)
 800c262:	4a42      	ldr	r2, [pc, #264]	; (800c36c <input_parameter+0xb44>)
 800c264:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
speed1000_shortest.turn45out_R.f_ofset=50;
 800c268:	4b34      	ldr	r3, [pc, #208]	; (800c33c <input_parameter+0xb14>)
 800c26a:	4a2f      	ldr	r2, [pc, #188]	; (800c328 <input_parameter+0xb00>)
 800c26c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
speed1000_shortest.turn45out_R.e_ofset=50;
 800c270:	4b32      	ldr	r3, [pc, #200]	; (800c33c <input_parameter+0xb14>)
 800c272:	4a2d      	ldr	r2, [pc, #180]	; (800c328 <input_parameter+0xb00>)
 800c274:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

speed1000_shortest.turn45out_L.g_speed=1000;
 800c278:	4b30      	ldr	r3, [pc, #192]	; (800c33c <input_parameter+0xb14>)
 800c27a:	4a31      	ldr	r2, [pc, #196]	; (800c340 <input_parameter+0xb18>)
 800c27c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
speed1000_shortest.turn45out_L.t_speed=750;
 800c280:	4b2e      	ldr	r3, [pc, #184]	; (800c33c <input_parameter+0xb14>)
 800c282:	4a37      	ldr	r2, [pc, #220]	; (800c360 <input_parameter+0xb38>)
 800c284:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
speed1000_shortest.turn45out_L.t_acc=14000;
 800c288:	4b2c      	ldr	r3, [pc, #176]	; (800c33c <input_parameter+0xb14>)
 800c28a:	4a38      	ldr	r2, [pc, #224]	; (800c36c <input_parameter+0xb44>)
 800c28c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
speed1000_shortest.turn45out_L.f_ofset=50;
 800c290:	4b2a      	ldr	r3, [pc, #168]	; (800c33c <input_parameter+0xb14>)
 800c292:	4a25      	ldr	r2, [pc, #148]	; (800c328 <input_parameter+0xb00>)
 800c294:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
speed1000_shortest.turn45out_L.e_ofset=50;
 800c298:	4b28      	ldr	r3, [pc, #160]	; (800c33c <input_parameter+0xb14>)
 800c29a:	4a23      	ldr	r2, [pc, #140]	; (800c328 <input_parameter+0xb00>)
 800c29c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

speed1000_shortest.turn135out_R.g_speed=1000;
 800c2a0:	4b26      	ldr	r3, [pc, #152]	; (800c33c <input_parameter+0xb14>)
 800c2a2:	4a27      	ldr	r2, [pc, #156]	; (800c340 <input_parameter+0xb18>)
 800c2a4:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
speed1000_shortest.turn135out_R.t_speed=770;
 800c2a8:	4b24      	ldr	r3, [pc, #144]	; (800c33c <input_parameter+0xb14>)
 800c2aa:	4a31      	ldr	r2, [pc, #196]	; (800c370 <input_parameter+0xb48>)
 800c2ac:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
speed1000_shortest.turn135out_R.t_acc=14000;
 800c2b0:	4b22      	ldr	r3, [pc, #136]	; (800c33c <input_parameter+0xb14>)
 800c2b2:	4a2e      	ldr	r2, [pc, #184]	; (800c36c <input_parameter+0xb44>)
 800c2b4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
speed1000_shortest.turn135out_R.f_ofset=30;
 800c2b8:	4b20      	ldr	r3, [pc, #128]	; (800c33c <input_parameter+0xb14>)
 800c2ba:	4a23      	ldr	r2, [pc, #140]	; (800c348 <input_parameter+0xb20>)
 800c2bc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
speed1000_shortest.turn135out_R.e_ofset=90;
 800c2c0:	4b1e      	ldr	r3, [pc, #120]	; (800c33c <input_parameter+0xb14>)
 800c2c2:	4a2c      	ldr	r2, [pc, #176]	; (800c374 <input_parameter+0xb4c>)
 800c2c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

speed1000_shortest.turn135out_L.g_speed=1000;
 800c2c8:	4b1c      	ldr	r3, [pc, #112]	; (800c33c <input_parameter+0xb14>)
 800c2ca:	4a1d      	ldr	r2, [pc, #116]	; (800c340 <input_parameter+0xb18>)
 800c2cc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
speed1000_shortest.turn135out_L.t_speed=770;
 800c2d0:	4b1a      	ldr	r3, [pc, #104]	; (800c33c <input_parameter+0xb14>)
 800c2d2:	4a27      	ldr	r2, [pc, #156]	; (800c370 <input_parameter+0xb48>)
 800c2d4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
speed1000_shortest.turn135out_L.t_acc=14000;
 800c2d8:	4b18      	ldr	r3, [pc, #96]	; (800c33c <input_parameter+0xb14>)
 800c2da:	4a24      	ldr	r2, [pc, #144]	; (800c36c <input_parameter+0xb44>)
 800c2dc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
speed1000_shortest.turn135out_L.f_ofset=30;
 800c2e0:	4b16      	ldr	r3, [pc, #88]	; (800c33c <input_parameter+0xb14>)
 800c2e2:	4a19      	ldr	r2, [pc, #100]	; (800c348 <input_parameter+0xb20>)
 800c2e4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
speed1000_shortest.turn135out_L.e_ofset=90;
 800c2e8:	4b14      	ldr	r3, [pc, #80]	; (800c33c <input_parameter+0xb14>)
 800c2ea:	4a22      	ldr	r2, [pc, #136]	; (800c374 <input_parameter+0xb4c>)
 800c2ec:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

speed1000_shortest.V90_R.g_speed=1000;
 800c2f0:	4b12      	ldr	r3, [pc, #72]	; (800c33c <input_parameter+0xb14>)
 800c2f2:	4a13      	ldr	r2, [pc, #76]	; (800c340 <input_parameter+0xb18>)
 800c2f4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
speed1000_shortest.V90_R.t_speed=950;
 800c2f8:	4b10      	ldr	r3, [pc, #64]	; (800c33c <input_parameter+0xb14>)
 800c2fa:	4a1f      	ldr	r2, [pc, #124]	; (800c378 <input_parameter+0xb50>)
 800c2fc:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
speed1000_shortest.V90_R.t_acc=18000;
 800c300:	4b0e      	ldr	r3, [pc, #56]	; (800c33c <input_parameter+0xb14>)
 800c302:	4a1e      	ldr	r2, [pc, #120]	; (800c37c <input_parameter+0xb54>)
 800c304:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
speed1000_shortest.V90_R.f_ofset=20;
 800c308:	4b0c      	ldr	r3, [pc, #48]	; (800c33c <input_parameter+0xb14>)
 800c30a:	4a16      	ldr	r2, [pc, #88]	; (800c364 <input_parameter+0xb3c>)
 800c30c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
speed1000_shortest.V90_R.e_ofset=60;
 800c310:	4b0a      	ldr	r3, [pc, #40]	; (800c33c <input_parameter+0xb14>)
 800c312:	4a0e      	ldr	r2, [pc, #56]	; (800c34c <input_parameter+0xb24>)
 800c314:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

speed1000_shortest.V90_L.g_speed=1000;
 800c318:	4b08      	ldr	r3, [pc, #32]	; (800c33c <input_parameter+0xb14>)
 800c31a:	e031      	b.n	800c380 <input_parameter+0xb58>
 800c31c:	44098000 	.word	0x44098000
 800c320:	20000ce0 	.word	0x20000ce0
 800c324:	46bf6800 	.word	0x46bf6800
 800c328:	42480000 	.word	0x42480000
 800c32c:	42820000 	.word	0x42820000
 800c330:	46abe000 	.word	0x46abe000
 800c334:	41e00000 	.word	0x41e00000
 800c338:	425c0000 	.word	0x425c0000
 800c33c:	20000e28 	.word	0x20000e28
 800c340:	447a0000 	.word	0x447a0000
 800c344:	463b8000 	.word	0x463b8000
 800c348:	41f00000 	.word	0x41f00000
 800c34c:	42700000 	.word	0x42700000
 800c350:	43c80000 	.word	0x43c80000
 800c354:	43fa0000 	.word	0x43fa0000
 800c358:	461c4000 	.word	0x461c4000
 800c35c:	428c0000 	.word	0x428c0000
 800c360:	443b8000 	.word	0x443b8000
 800c364:	41a00000 	.word	0x41a00000
 800c368:	442a0000 	.word	0x442a0000
 800c36c:	465ac000 	.word	0x465ac000
 800c370:	44408000 	.word	0x44408000
 800c374:	42b40000 	.word	0x42b40000
 800c378:	446d8000 	.word	0x446d8000
 800c37c:	468ca000 	.word	0x468ca000
 800c380:	4a0b      	ldr	r2, [pc, #44]	; (800c3b0 <input_parameter+0xb88>)
 800c382:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
speed1000_shortest.V90_L.t_speed=950;
 800c386:	4b0b      	ldr	r3, [pc, #44]	; (800c3b4 <input_parameter+0xb8c>)
 800c388:	4a0b      	ldr	r2, [pc, #44]	; (800c3b8 <input_parameter+0xb90>)
 800c38a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
speed1000_shortest.V90_L.t_acc=18000;
 800c38e:	4b09      	ldr	r3, [pc, #36]	; (800c3b4 <input_parameter+0xb8c>)
 800c390:	4a0a      	ldr	r2, [pc, #40]	; (800c3bc <input_parameter+0xb94>)
 800c392:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
speed1000_shortest.V90_L.f_ofset=20;
 800c396:	4b07      	ldr	r3, [pc, #28]	; (800c3b4 <input_parameter+0xb8c>)
 800c398:	4a09      	ldr	r2, [pc, #36]	; (800c3c0 <input_parameter+0xb98>)
 800c39a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
speed1000_shortest.V90_L.e_ofset=60;
 800c39e:	4b05      	ldr	r3, [pc, #20]	; (800c3b4 <input_parameter+0xb8c>)
 800c3a0:	4a08      	ldr	r2, [pc, #32]	; (800c3c4 <input_parameter+0xb9c>)
 800c3a2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c




}
 800c3a6:	bf00      	nop
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr
 800c3b0:	447a0000 	.word	0x447a0000
 800c3b4:	20000e28 	.word	0x20000e28
 800c3b8:	446d8000 	.word	0x446d8000
 800c3bc:	468ca000 	.word	0x468ca000
 800c3c0:	41a00000 	.word	0x41a00000
 800c3c4:	42700000 	.word	0x42700000

0800c3c8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800c3cc:	4b14      	ldr	r3, [pc, #80]	; (800c420 <MX_USART2_UART_Init+0x58>)
 800c3ce:	4a15      	ldr	r2, [pc, #84]	; (800c424 <MX_USART2_UART_Init+0x5c>)
 800c3d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800c3d2:	4b13      	ldr	r3, [pc, #76]	; (800c420 <MX_USART2_UART_Init+0x58>)
 800c3d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c3d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c3da:	4b11      	ldr	r3, [pc, #68]	; (800c420 <MX_USART2_UART_Init+0x58>)
 800c3dc:	2200      	movs	r2, #0
 800c3de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800c3e0:	4b0f      	ldr	r3, [pc, #60]	; (800c420 <MX_USART2_UART_Init+0x58>)
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800c3e6:	4b0e      	ldr	r3, [pc, #56]	; (800c420 <MX_USART2_UART_Init+0x58>)
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800c3ec:	4b0c      	ldr	r3, [pc, #48]	; (800c420 <MX_USART2_UART_Init+0x58>)
 800c3ee:	220c      	movs	r2, #12
 800c3f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c3f2:	4b0b      	ldr	r3, [pc, #44]	; (800c420 <MX_USART2_UART_Init+0x58>)
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800c3f8:	4b09      	ldr	r3, [pc, #36]	; (800c420 <MX_USART2_UART_Init+0x58>)
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c3fe:	4b08      	ldr	r3, [pc, #32]	; (800c420 <MX_USART2_UART_Init+0x58>)
 800c400:	2200      	movs	r2, #0
 800c402:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c404:	4b06      	ldr	r3, [pc, #24]	; (800c420 <MX_USART2_UART_Init+0x58>)
 800c406:	2200      	movs	r2, #0
 800c408:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800c40a:	4805      	ldr	r0, [pc, #20]	; (800c420 <MX_USART2_UART_Init+0x58>)
 800c40c:	f004 ff74 	bl	80112f8 <HAL_UART_Init>
 800c410:	4603      	mov	r3, r0
 800c412:	2b00      	cmp	r3, #0
 800c414:	d001      	beq.n	800c41a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800c416:	f7f7 ffea 	bl	80043ee <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800c41a:	bf00      	nop
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	2000cf2c 	.word	0x2000cf2c
 800c424:	40004400 	.word	0x40004400

0800c428 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b09e      	sub	sp, #120	; 0x78
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c430:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800c434:	2200      	movs	r2, #0
 800c436:	601a      	str	r2, [r3, #0]
 800c438:	605a      	str	r2, [r3, #4]
 800c43a:	609a      	str	r2, [r3, #8]
 800c43c:	60da      	str	r2, [r3, #12]
 800c43e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c440:	f107 0310 	add.w	r3, r7, #16
 800c444:	2254      	movs	r2, #84	; 0x54
 800c446:	2100      	movs	r1, #0
 800c448:	4618      	mov	r0, r3
 800c44a:	f005 fc05 	bl	8011c58 <memset>
  if(uartHandle->Instance==USART2)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4a28      	ldr	r2, [pc, #160]	; (800c4f4 <HAL_UART_MspInit+0xcc>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d148      	bne.n	800c4ea <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800c458:	2302      	movs	r3, #2
 800c45a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800c45c:	2300      	movs	r3, #0
 800c45e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c460:	f107 0310 	add.w	r3, r7, #16
 800c464:	4618      	mov	r0, r3
 800c466:	f003 fb8f 	bl	800fb88 <HAL_RCCEx_PeriphCLKConfig>
 800c46a:	4603      	mov	r3, r0
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d001      	beq.n	800c474 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800c470:	f7f7 ffbd 	bl	80043ee <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800c474:	4b20      	ldr	r3, [pc, #128]	; (800c4f8 <HAL_UART_MspInit+0xd0>)
 800c476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c478:	4a1f      	ldr	r2, [pc, #124]	; (800c4f8 <HAL_UART_MspInit+0xd0>)
 800c47a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c47e:	6593      	str	r3, [r2, #88]	; 0x58
 800c480:	4b1d      	ldr	r3, [pc, #116]	; (800c4f8 <HAL_UART_MspInit+0xd0>)
 800c482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c488:	60fb      	str	r3, [r7, #12]
 800c48a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c48c:	4b1a      	ldr	r3, [pc, #104]	; (800c4f8 <HAL_UART_MspInit+0xd0>)
 800c48e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c490:	4a19      	ldr	r2, [pc, #100]	; (800c4f8 <HAL_UART_MspInit+0xd0>)
 800c492:	f043 0301 	orr.w	r3, r3, #1
 800c496:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c498:	4b17      	ldr	r3, [pc, #92]	; (800c4f8 <HAL_UART_MspInit+0xd0>)
 800c49a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c49c:	f003 0301 	and.w	r3, r3, #1
 800c4a0:	60bb      	str	r3, [r7, #8]
 800c4a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800c4a4:	2304      	movs	r3, #4
 800c4a6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4a8:	2302      	movs	r3, #2
 800c4aa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c4b0:	2303      	movs	r3, #3
 800c4b2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800c4b4:	2307      	movs	r3, #7
 800c4b6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800c4b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800c4bc:	4619      	mov	r1, r3
 800c4be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c4c2:	f001 ffa1 	bl	800e408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800c4c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4ca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4cc:	2302      	movs	r3, #2
 800c4ce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c4d4:	2303      	movs	r3, #3
 800c4d6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800c4d8:	2303      	movs	r3, #3
 800c4da:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800c4dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c4e6:	f001 ff8f 	bl	800e408 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800c4ea:	bf00      	nop
 800c4ec:	3778      	adds	r7, #120	; 0x78
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	40004400 	.word	0x40004400
 800c4f8:	40021000 	.word	0x40021000

0800c4fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800c4fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c534 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800c500:	f7fe fee0 	bl	800b2c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800c504:	480c      	ldr	r0, [pc, #48]	; (800c538 <LoopForever+0x6>)
  ldr r1, =_edata
 800c506:	490d      	ldr	r1, [pc, #52]	; (800c53c <LoopForever+0xa>)
  ldr r2, =_sidata
 800c508:	4a0d      	ldr	r2, [pc, #52]	; (800c540 <LoopForever+0xe>)
  movs r3, #0
 800c50a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c50c:	e002      	b.n	800c514 <LoopCopyDataInit>

0800c50e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c50e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c512:	3304      	adds	r3, #4

0800c514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c518:	d3f9      	bcc.n	800c50e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c51a:	4a0a      	ldr	r2, [pc, #40]	; (800c544 <LoopForever+0x12>)
  ldr r4, =_ebss
 800c51c:	4c0a      	ldr	r4, [pc, #40]	; (800c548 <LoopForever+0x16>)
  movs r3, #0
 800c51e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c520:	e001      	b.n	800c526 <LoopFillZerobss>

0800c522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c524:	3204      	adds	r2, #4

0800c526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c528:	d3fb      	bcc.n	800c522 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800c52a:	f005 fb63 	bl	8011bf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800c52e:	f7f7 fe8b 	bl	8004248 <main>

0800c532 <LoopForever>:

LoopForever:
    b LoopForever
 800c532:	e7fe      	b.n	800c532 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800c534:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800c538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c53c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800c540:	080153a4 	.word	0x080153a4
  ldr r2, =_sbss
 800c544:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800c548:	2000cfc4 	.word	0x2000cfc4

0800c54c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800c54c:	e7fe      	b.n	800c54c <ADC1_IRQHandler>

0800c54e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c54e:	b580      	push	{r7, lr}
 800c550:	b082      	sub	sp, #8
 800c552:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800c554:	2300      	movs	r3, #0
 800c556:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c558:	2003      	movs	r0, #3
 800c55a:	f001 fcdd 	bl	800df18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800c55e:	2000      	movs	r0, #0
 800c560:	f000 f80e 	bl	800c580 <HAL_InitTick>
 800c564:	4603      	mov	r3, r0
 800c566:	2b00      	cmp	r3, #0
 800c568:	d002      	beq.n	800c570 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800c56a:	2301      	movs	r3, #1
 800c56c:	71fb      	strb	r3, [r7, #7]
 800c56e:	e001      	b.n	800c574 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800c570:	f7fe fd5a 	bl	800b028 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800c574:	79fb      	ldrb	r3, [r7, #7]
}
 800c576:	4618      	mov	r0, r3
 800c578:	3708      	adds	r7, #8
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
	...

0800c580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b084      	sub	sp, #16
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800c588:	2300      	movs	r3, #0
 800c58a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800c58c:	4b17      	ldr	r3, [pc, #92]	; (800c5ec <HAL_InitTick+0x6c>)
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d023      	beq.n	800c5dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800c594:	4b16      	ldr	r3, [pc, #88]	; (800c5f0 <HAL_InitTick+0x70>)
 800c596:	681a      	ldr	r2, [r3, #0]
 800c598:	4b14      	ldr	r3, [pc, #80]	; (800c5ec <HAL_InitTick+0x6c>)
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	4619      	mov	r1, r3
 800c59e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c5a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800c5a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f001 fce9 	bl	800df82 <HAL_SYSTICK_Config>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d10f      	bne.n	800c5d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2b0f      	cmp	r3, #15
 800c5ba:	d809      	bhi.n	800c5d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c5bc:	2200      	movs	r2, #0
 800c5be:	6879      	ldr	r1, [r7, #4]
 800c5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5c4:	f001 fcb3 	bl	800df2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800c5c8:	4a0a      	ldr	r2, [pc, #40]	; (800c5f4 <HAL_InitTick+0x74>)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6013      	str	r3, [r2, #0]
 800c5ce:	e007      	b.n	800c5e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	73fb      	strb	r3, [r7, #15]
 800c5d4:	e004      	b.n	800c5e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	73fb      	strb	r3, [r7, #15]
 800c5da:	e001      	b.n	800c5e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800c5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	20000008 	.word	0x20000008
 800c5f0:	20000000 	.word	0x20000000
 800c5f4:	20000004 	.word	0x20000004

0800c5f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800c5fc:	4b06      	ldr	r3, [pc, #24]	; (800c618 <HAL_IncTick+0x20>)
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	461a      	mov	r2, r3
 800c602:	4b06      	ldr	r3, [pc, #24]	; (800c61c <HAL_IncTick+0x24>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4413      	add	r3, r2
 800c608:	4a04      	ldr	r2, [pc, #16]	; (800c61c <HAL_IncTick+0x24>)
 800c60a:	6013      	str	r3, [r2, #0]
}
 800c60c:	bf00      	nop
 800c60e:	46bd      	mov	sp, r7
 800c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c614:	4770      	bx	lr
 800c616:	bf00      	nop
 800c618:	20000008 	.word	0x20000008
 800c61c:	2000cfb0 	.word	0x2000cfb0

0800c620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c620:	b480      	push	{r7}
 800c622:	af00      	add	r7, sp, #0
  return uwTick;
 800c624:	4b03      	ldr	r3, [pc, #12]	; (800c634 <HAL_GetTick+0x14>)
 800c626:	681b      	ldr	r3, [r3, #0]
}
 800c628:	4618      	mov	r0, r3
 800c62a:	46bd      	mov	sp, r7
 800c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c630:	4770      	bx	lr
 800c632:	bf00      	nop
 800c634:	2000cfb0 	.word	0x2000cfb0

0800c638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c640:	f7ff ffee 	bl	800c620 <HAL_GetTick>
 800c644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c650:	d005      	beq.n	800c65e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800c652:	4b0a      	ldr	r3, [pc, #40]	; (800c67c <HAL_Delay+0x44>)
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	461a      	mov	r2, r3
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	4413      	add	r3, r2
 800c65c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800c65e:	bf00      	nop
 800c660:	f7ff ffde 	bl	800c620 <HAL_GetTick>
 800c664:	4602      	mov	r2, r0
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	1ad3      	subs	r3, r2, r3
 800c66a:	68fa      	ldr	r2, [r7, #12]
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d8f7      	bhi.n	800c660 <HAL_Delay+0x28>
  {
  }
}
 800c670:	bf00      	nop
 800c672:	bf00      	nop
 800c674:	3710      	adds	r7, #16
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	20000008 	.word	0x20000008

0800c680 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800c680:	b480      	push	{r7}
 800c682:	b083      	sub	sp, #12
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	689b      	ldr	r3, [r3, #8]
 800c68e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	431a      	orrs	r2, r3
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	609a      	str	r2, [r3, #8]
}
 800c69a:	bf00      	nop
 800c69c:	370c      	adds	r7, #12
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr

0800c6a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800c6a6:	b480      	push	{r7}
 800c6a8:	b083      	sub	sp, #12
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	6078      	str	r0, [r7, #4]
 800c6ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	431a      	orrs	r2, r3
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	609a      	str	r2, [r3, #8]
}
 800c6c0:	bf00      	nop
 800c6c2:	370c      	adds	r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr

0800c6cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b083      	sub	sp, #12
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	689b      	ldr	r3, [r3, #8]
 800c6d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	370c      	adds	r7, #12
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr

0800c6e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b087      	sub	sp, #28
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	607a      	str	r2, [r7, #4]
 800c6f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	3360      	adds	r3, #96	; 0x60
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	009b      	lsls	r3, r3, #2
 800c700:	4413      	add	r3, r2
 800c702:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	681a      	ldr	r2, [r3, #0]
 800c708:	4b08      	ldr	r3, [pc, #32]	; (800c72c <LL_ADC_SetOffset+0x44>)
 800c70a:	4013      	ands	r3, r2
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800c712:	683a      	ldr	r2, [r7, #0]
 800c714:	430a      	orrs	r2, r1
 800c716:	4313      	orrs	r3, r2
 800c718:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800c720:	bf00      	nop
 800c722:	371c      	adds	r7, #28
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr
 800c72c:	03fff000 	.word	0x03fff000

0800c730 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800c730:	b480      	push	{r7}
 800c732:	b085      	sub	sp, #20
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	3360      	adds	r3, #96	; 0x60
 800c73e:	461a      	mov	r2, r3
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	009b      	lsls	r3, r3, #2
 800c744:	4413      	add	r3, r2
 800c746:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800c750:	4618      	mov	r0, r3
 800c752:	3714      	adds	r7, #20
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr

0800c75c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b087      	sub	sp, #28
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	60b9      	str	r1, [r7, #8]
 800c766:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	3360      	adds	r3, #96	; 0x60
 800c76c:	461a      	mov	r2, r3
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	009b      	lsls	r3, r3, #2
 800c772:	4413      	add	r3, r2
 800c774:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	431a      	orrs	r2, r3
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800c786:	bf00      	nop
 800c788:	371c      	adds	r7, #28
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr

0800c792 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800c792:	b480      	push	{r7}
 800c794:	b083      	sub	sp, #12
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d101      	bne.n	800c7aa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	e000      	b.n	800c7ac <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800c7aa:	2300      	movs	r3, #0
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	370c      	adds	r7, #12
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr

0800c7b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b087      	sub	sp, #28
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	60b9      	str	r1, [r7, #8]
 800c7c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	3330      	adds	r3, #48	; 0x30
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	0a1b      	lsrs	r3, r3, #8
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	f003 030c 	and.w	r3, r3, #12
 800c7d4:	4413      	add	r3, r2
 800c7d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	681a      	ldr	r2, [r3, #0]
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	f003 031f 	and.w	r3, r3, #31
 800c7e2:	211f      	movs	r1, #31
 800c7e4:	fa01 f303 	lsl.w	r3, r1, r3
 800c7e8:	43db      	mvns	r3, r3
 800c7ea:	401a      	ands	r2, r3
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	0e9b      	lsrs	r3, r3, #26
 800c7f0:	f003 011f 	and.w	r1, r3, #31
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	f003 031f 	and.w	r3, r3, #31
 800c7fa:	fa01 f303 	lsl.w	r3, r1, r3
 800c7fe:	431a      	orrs	r2, r3
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800c804:	bf00      	nop
 800c806:	371c      	adds	r7, #28
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr

0800c810 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800c810:	b480      	push	{r7}
 800c812:	b087      	sub	sp, #28
 800c814:	af00      	add	r7, sp, #0
 800c816:	60f8      	str	r0, [r7, #12]
 800c818:	60b9      	str	r1, [r7, #8]
 800c81a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	3314      	adds	r3, #20
 800c820:	461a      	mov	r2, r3
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	0e5b      	lsrs	r3, r3, #25
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	f003 0304 	and.w	r3, r3, #4
 800c82c:	4413      	add	r3, r2
 800c82e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	0d1b      	lsrs	r3, r3, #20
 800c838:	f003 031f 	and.w	r3, r3, #31
 800c83c:	2107      	movs	r1, #7
 800c83e:	fa01 f303 	lsl.w	r3, r1, r3
 800c842:	43db      	mvns	r3, r3
 800c844:	401a      	ands	r2, r3
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	0d1b      	lsrs	r3, r3, #20
 800c84a:	f003 031f 	and.w	r3, r3, #31
 800c84e:	6879      	ldr	r1, [r7, #4]
 800c850:	fa01 f303 	lsl.w	r3, r1, r3
 800c854:	431a      	orrs	r2, r3
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800c85a:	bf00      	nop
 800c85c:	371c      	adds	r7, #28
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr
	...

0800c868 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800c868:	b480      	push	{r7}
 800c86a:	b085      	sub	sp, #20
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c880:	43db      	mvns	r3, r3
 800c882:	401a      	ands	r2, r3
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f003 0318 	and.w	r3, r3, #24
 800c88a:	4908      	ldr	r1, [pc, #32]	; (800c8ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800c88c:	40d9      	lsrs	r1, r3
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	400b      	ands	r3, r1
 800c892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c896:	431a      	orrs	r2, r3
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800c89e:	bf00      	nop
 800c8a0:	3714      	adds	r7, #20
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	0007ffff 	.word	0x0007ffff

0800c8b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b083      	sub	sp, #12
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	689b      	ldr	r3, [r3, #8]
 800c8bc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800c8c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c8c4:	687a      	ldr	r2, [r7, #4]
 800c8c6:	6093      	str	r3, [r2, #8]
}
 800c8c8:	bf00      	nop
 800c8ca:	370c      	adds	r7, #12
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr

0800c8d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b083      	sub	sp, #12
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	689b      	ldr	r3, [r3, #8]
 800c8e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8e8:	d101      	bne.n	800c8ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	e000      	b.n	800c8f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800c8ee:	2300      	movs	r3, #0
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	370c      	adds	r7, #12
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr

0800c8fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b083      	sub	sp, #12
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	689b      	ldr	r3, [r3, #8]
 800c908:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800c90c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c910:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800c918:	bf00      	nop
 800c91a:	370c      	adds	r7, #12
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr

0800c924 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800c924:	b480      	push	{r7}
 800c926:	b083      	sub	sp, #12
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	689b      	ldr	r3, [r3, #8]
 800c930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c934:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c938:	d101      	bne.n	800c93e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800c93a:	2301      	movs	r3, #1
 800c93c:	e000      	b.n	800c940 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800c93e:	2300      	movs	r3, #0
}
 800c940:	4618      	mov	r0, r3
 800c942:	370c      	adds	r7, #12
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr

0800c94c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b083      	sub	sp, #12
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c95c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c960:	f043 0201 	orr.w	r2, r3, #1
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800c968:	bf00      	nop
 800c96a:	370c      	adds	r7, #12
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr

0800c974 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800c974:	b480      	push	{r7}
 800c976:	b083      	sub	sp, #12
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	689b      	ldr	r3, [r3, #8]
 800c980:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c984:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c988:	f043 0202 	orr.w	r2, r3, #2
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800c990:	bf00      	nop
 800c992:	370c      	adds	r7, #12
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr

0800c99c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	f003 0301 	and.w	r3, r3, #1
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	d101      	bne.n	800c9b4 <LL_ADC_IsEnabled+0x18>
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	e000      	b.n	800c9b6 <LL_ADC_IsEnabled+0x1a>
 800c9b4:	2300      	movs	r3, #0
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	370c      	adds	r7, #12
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr

0800c9c2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800c9c2:	b480      	push	{r7}
 800c9c4:	b083      	sub	sp, #12
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	689b      	ldr	r3, [r3, #8]
 800c9ce:	f003 0302 	and.w	r3, r3, #2
 800c9d2:	2b02      	cmp	r3, #2
 800c9d4:	d101      	bne.n	800c9da <LL_ADC_IsDisableOngoing+0x18>
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	e000      	b.n	800c9dc <LL_ADC_IsDisableOngoing+0x1a>
 800c9da:	2300      	movs	r3, #0
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c9f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c9fc:	f043 0204 	orr.w	r2, r3, #4
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800ca04:	bf00      	nop
 800ca06:	370c      	adds	r7, #12
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr

0800ca10 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b083      	sub	sp, #12
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800ca24:	f043 0210 	orr.w	r2, r3, #16
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800ca2c:	bf00      	nop
 800ca2e:	370c      	adds	r7, #12
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b083      	sub	sp, #12
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	689b      	ldr	r3, [r3, #8]
 800ca44:	f003 0304 	and.w	r3, r3, #4
 800ca48:	2b04      	cmp	r3, #4
 800ca4a:	d101      	bne.n	800ca50 <LL_ADC_REG_IsConversionOngoing+0x18>
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	e000      	b.n	800ca52 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800ca50:	2300      	movs	r3, #0
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	370c      	adds	r7, #12
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr

0800ca5e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800ca5e:	b480      	push	{r7}
 800ca60:	b083      	sub	sp, #12
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800ca72:	f043 0220 	orr.w	r2, r3, #32
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800ca7a:	bf00      	nop
 800ca7c:	370c      	adds	r7, #12
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr

0800ca86 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800ca86:	b480      	push	{r7}
 800ca88:	b083      	sub	sp, #12
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	689b      	ldr	r3, [r3, #8]
 800ca92:	f003 0308 	and.w	r3, r3, #8
 800ca96:	2b08      	cmp	r3, #8
 800ca98:	d101      	bne.n	800ca9e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	e000      	b.n	800caa0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800ca9e:	2300      	movs	r3, #0
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	370c      	adds	r7, #12
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr

0800caac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b088      	sub	sp, #32
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800cab4:	2300      	movs	r3, #0
 800cab6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800cab8:	2300      	movs	r3, #0
 800caba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d101      	bne.n	800cac6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800cac2:	2301      	movs	r3, #1
 800cac4:	e12c      	b.n	800cd20 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	691b      	ldr	r3, [r3, #16]
 800caca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d109      	bne.n	800cae8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f7f7 f9c5 	bl	8003e64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2200      	movs	r2, #0
 800cade:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2200      	movs	r2, #0
 800cae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4618      	mov	r0, r3
 800caee:	f7ff fef1 	bl	800c8d4 <LL_ADC_IsDeepPowerDownEnabled>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d004      	beq.n	800cb02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7ff fed7 	bl	800c8b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4618      	mov	r0, r3
 800cb08:	f7ff ff0c 	bl	800c924 <LL_ADC_IsInternalRegulatorEnabled>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d115      	bne.n	800cb3e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7ff fef0 	bl	800c8fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800cb1c:	4b82      	ldr	r3, [pc, #520]	; (800cd28 <HAL_ADC_Init+0x27c>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	099b      	lsrs	r3, r3, #6
 800cb22:	4a82      	ldr	r2, [pc, #520]	; (800cd2c <HAL_ADC_Init+0x280>)
 800cb24:	fba2 2303 	umull	r2, r3, r2, r3
 800cb28:	099b      	lsrs	r3, r3, #6
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	005b      	lsls	r3, r3, #1
 800cb2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800cb30:	e002      	b.n	800cb38 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	3b01      	subs	r3, #1
 800cb36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d1f9      	bne.n	800cb32 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7ff feee 	bl	800c924 <LL_ADC_IsInternalRegulatorEnabled>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d10d      	bne.n	800cb6a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb52:	f043 0210 	orr.w	r2, r3, #16
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb5e:	f043 0201 	orr.w	r2, r3, #1
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800cb66:	2301      	movs	r3, #1
 800cb68:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7ff ff62 	bl	800ca38 <LL_ADC_REG_IsConversionOngoing>
 800cb74:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb7a:	f003 0310 	and.w	r3, r3, #16
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	f040 80c5 	bne.w	800cd0e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	f040 80c1 	bne.w	800cd0e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb90:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800cb94:	f043 0202 	orr.w	r2, r3, #2
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4618      	mov	r0, r3
 800cba2:	f7ff fefb 	bl	800c99c <LL_ADC_IsEnabled>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d10b      	bne.n	800cbc4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800cbac:	4860      	ldr	r0, [pc, #384]	; (800cd30 <HAL_ADC_Init+0x284>)
 800cbae:	f7ff fef5 	bl	800c99c <LL_ADC_IsEnabled>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d105      	bne.n	800cbc4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	485d      	ldr	r0, [pc, #372]	; (800cd34 <HAL_ADC_Init+0x288>)
 800cbc0:	f7ff fd5e 	bl	800c680 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	7e5b      	ldrb	r3, [r3, #25]
 800cbc8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800cbce:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800cbd4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800cbda:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cbe2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cbee:	2b01      	cmp	r3, #1
 800cbf0:	d106      	bne.n	800cc00 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf6:	3b01      	subs	r3, #1
 800cbf8:	045b      	lsls	r3, r3, #17
 800cbfa:	69ba      	ldr	r2, [r7, #24]
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d009      	beq.n	800cc1c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc0c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc14:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800cc16:	69ba      	ldr	r2, [r7, #24]
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	68da      	ldr	r2, [r3, #12]
 800cc22:	4b45      	ldr	r3, [pc, #276]	; (800cd38 <HAL_ADC_Init+0x28c>)
 800cc24:	4013      	ands	r3, r2
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	6812      	ldr	r2, [r2, #0]
 800cc2a:	69b9      	ldr	r1, [r7, #24]
 800cc2c:	430b      	orrs	r3, r1
 800cc2e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7ff feff 	bl	800ca38 <LL_ADC_REG_IsConversionOngoing>
 800cc3a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7ff ff20 	bl	800ca86 <LL_ADC_INJ_IsConversionOngoing>
 800cc46:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d13d      	bne.n	800ccca <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d13a      	bne.n	800ccca <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800cc58:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cc60:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800cc62:	4313      	orrs	r3, r2
 800cc64:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc70:	f023 0302 	bic.w	r3, r3, #2
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	6812      	ldr	r2, [r2, #0]
 800cc78:	69b9      	ldr	r1, [r7, #24]
 800cc7a:	430b      	orrs	r3, r1
 800cc7c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d118      	bne.n	800ccba <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	691b      	ldr	r3, [r3, #16]
 800cc8e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cc92:	f023 0304 	bic.w	r3, r3, #4
 800cc96:	687a      	ldr	r2, [r7, #4]
 800cc98:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800cc9e:	4311      	orrs	r1, r2
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800cca4:	4311      	orrs	r1, r2
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ccaa:	430a      	orrs	r2, r1
 800ccac:	431a      	orrs	r2, r3
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f042 0201 	orr.w	r2, r2, #1
 800ccb6:	611a      	str	r2, [r3, #16]
 800ccb8:	e007      	b.n	800ccca <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	691a      	ldr	r2, [r3, #16]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f022 0201 	bic.w	r2, r2, #1
 800ccc8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	691b      	ldr	r3, [r3, #16]
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	d10c      	bne.n	800ccec <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccd8:	f023 010f 	bic.w	r1, r3, #15
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	69db      	ldr	r3, [r3, #28]
 800cce0:	1e5a      	subs	r2, r3, #1
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	430a      	orrs	r2, r1
 800cce8:	631a      	str	r2, [r3, #48]	; 0x30
 800ccea:	e007      	b.n	800ccfc <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f022 020f 	bic.w	r2, r2, #15
 800ccfa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd00:	f023 0303 	bic.w	r3, r3, #3
 800cd04:	f043 0201 	orr.w	r2, r3, #1
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	655a      	str	r2, [r3, #84]	; 0x54
 800cd0c:	e007      	b.n	800cd1e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd12:	f043 0210 	orr.w	r2, r3, #16
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800cd1e:	7ffb      	ldrb	r3, [r7, #31]
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3720      	adds	r7, #32
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	20000000 	.word	0x20000000
 800cd2c:	053e2d63 	.word	0x053e2d63
 800cd30:	50040000 	.word	0x50040000
 800cd34:	50040300 	.word	0x50040300
 800cd38:	fff0c007 	.word	0xfff0c007

0800cd3c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f7ff fe75 	bl	800ca38 <LL_ADC_REG_IsConversionOngoing>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d14f      	bne.n	800cdf4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d101      	bne.n	800cd62 <HAL_ADC_Start+0x26>
 800cd5e:	2302      	movs	r3, #2
 800cd60:	e04b      	b.n	800cdfa <HAL_ADC_Start+0xbe>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2201      	movs	r2, #1
 800cd66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 feae 	bl	800dacc <ADC_Enable>
 800cd70:	4603      	mov	r3, r0
 800cd72:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800cd74:	7bfb      	ldrb	r3, [r7, #15]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d137      	bne.n	800cdea <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800cd82:	f023 0301 	bic.w	r3, r3, #1
 800cd86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cd96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd9a:	d106      	bne.n	800cdaa <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cda0:	f023 0206 	bic.w	r2, r3, #6
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	659a      	str	r2, [r3, #88]	; 0x58
 800cda8:	e002      	b.n	800cdb0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2200      	movs	r2, #0
 800cdae:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	221c      	movs	r2, #28
 800cdb6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	68db      	ldr	r3, [r3, #12]
 800cdc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d007      	beq.n	800cdde <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800cdd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7ff fe00 	bl	800c9e8 <LL_ADC_REG_StartConversion>
 800cde8:	e006      	b.n	800cdf8 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2200      	movs	r2, #0
 800cdee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800cdf2:	e001      	b.n	800cdf8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800cdf4:	2302      	movs	r3, #2
 800cdf6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800cdf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b084      	sub	sp, #16
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d101      	bne.n	800ce18 <HAL_ADC_Stop+0x16>
 800ce14:	2302      	movs	r3, #2
 800ce16:	e023      	b.n	800ce60 <HAL_ADC_Stop+0x5e>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800ce20:	2103      	movs	r1, #3
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 fd96 	bl	800d954 <ADC_ConversionStop>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800ce2c:	7bfb      	ldrb	r3, [r7, #15]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d111      	bne.n	800ce56 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f000 feac 	bl	800db90 <ADC_Disable>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800ce3c:	7bfb      	ldrb	r3, [r7, #15]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d109      	bne.n	800ce56 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800ce4a:	f023 0301 	bic.w	r3, r3, #1
 800ce4e:	f043 0201 	orr.w	r2, r3, #1
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800ce5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3710      	adds	r7, #16
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b086      	sub	sp, #24
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	695b      	ldr	r3, [r3, #20]
 800ce76:	2b08      	cmp	r3, #8
 800ce78:	d102      	bne.n	800ce80 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800ce7a:	2308      	movs	r3, #8
 800ce7c:	617b      	str	r3, [r7, #20]
 800ce7e:	e010      	b.n	800cea2 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	68db      	ldr	r3, [r3, #12]
 800ce86:	f003 0301 	and.w	r3, r3, #1
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d007      	beq.n	800ce9e <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce92:	f043 0220 	orr.w	r2, r3, #32
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	e06f      	b.n	800cf7e <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800ce9e:	2304      	movs	r3, #4
 800cea0:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800cea2:	f7ff fbbd 	bl	800c620 <HAL_GetTick>
 800cea6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800cea8:	e021      	b.n	800ceee <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceb0:	d01d      	beq.n	800ceee <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800ceb2:	f7ff fbb5 	bl	800c620 <HAL_GetTick>
 800ceb6:	4602      	mov	r2, r0
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	1ad3      	subs	r3, r2, r3
 800cebc:	683a      	ldr	r2, [r7, #0]
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d302      	bcc.n	800cec8 <HAL_ADC_PollForConversion+0x60>
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d112      	bne.n	800ceee <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	681a      	ldr	r2, [r3, #0]
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	4013      	ands	r3, r2
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d10b      	bne.n	800ceee <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ceda:	f043 0204 	orr.w	r2, r3, #4
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2200      	movs	r2, #0
 800cee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800ceea:	2303      	movs	r3, #3
 800ceec:	e047      	b.n	800cf7e <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	4013      	ands	r3, r2
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d0d6      	beq.n	800ceaa <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7ff fc40 	bl	800c792 <LL_ADC_REG_IsTriggerSourceSWStart>
 800cf12:	4603      	mov	r3, r0
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d01c      	beq.n	800cf52 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	7e5b      	ldrb	r3, [r3, #25]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d118      	bne.n	800cf52 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f003 0308 	and.w	r3, r3, #8
 800cf2a:	2b08      	cmp	r3, #8
 800cf2c:	d111      	bne.n	800cf52 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d105      	bne.n	800cf52 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf4a:	f043 0201 	orr.w	r2, r3, #1
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	68db      	ldr	r3, [r3, #12]
 800cf58:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	2b08      	cmp	r3, #8
 800cf5e:	d104      	bne.n	800cf6a <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2208      	movs	r2, #8
 800cf66:	601a      	str	r2, [r3, #0]
 800cf68:	e008      	b.n	800cf7c <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d103      	bne.n	800cf7c <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	220c      	movs	r2, #12
 800cf7a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800cf7c:	2300      	movs	r3, #0
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3718      	adds	r7, #24
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
	...

0800cf88 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b086      	sub	sp, #24
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	60b9      	str	r1, [r7, #8]
 800cf92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7ff fd4d 	bl	800ca38 <LL_ADC_REG_IsConversionOngoing>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d167      	bne.n	800d074 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cfaa:	2b01      	cmp	r3, #1
 800cfac:	d101      	bne.n	800cfb2 <HAL_ADC_Start_DMA+0x2a>
 800cfae:	2302      	movs	r3, #2
 800cfb0:	e063      	b.n	800d07a <HAL_ADC_Start_DMA+0xf2>
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800cfba:	68f8      	ldr	r0, [r7, #12]
 800cfbc:	f000 fd86 	bl	800dacc <ADC_Enable>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800cfc4:	7dfb      	ldrb	r3, [r7, #23]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d14f      	bne.n	800d06a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800cfd2:	f023 0301 	bic.w	r3, r3, #1
 800cfd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfe2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d006      	beq.n	800cff8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfee:	f023 0206 	bic.w	r2, r3, #6
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	659a      	str	r2, [r3, #88]	; 0x58
 800cff6:	e002      	b.n	800cffe <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2200      	movs	r2, #0
 800cffc:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d002:	4a20      	ldr	r2, [pc, #128]	; (800d084 <HAL_ADC_Start_DMA+0xfc>)
 800d004:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d00a:	4a1f      	ldr	r2, [pc, #124]	; (800d088 <HAL_ADC_Start_DMA+0x100>)
 800d00c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d012:	4a1e      	ldr	r2, [pc, #120]	; (800d08c <HAL_ADC_Start_DMA+0x104>)
 800d014:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	221c      	movs	r2, #28
 800d01c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2200      	movs	r2, #0
 800d022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	685a      	ldr	r2, [r3, #4]
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f042 0210 	orr.w	r2, r2, #16
 800d034:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	68da      	ldr	r2, [r3, #12]
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f042 0201 	orr.w	r2, r2, #1
 800d044:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	3340      	adds	r3, #64	; 0x40
 800d050:	4619      	mov	r1, r3
 800d052:	68ba      	ldr	r2, [r7, #8]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f001 f859 	bl	800e10c <HAL_DMA_Start_IT>
 800d05a:	4603      	mov	r3, r0
 800d05c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	4618      	mov	r0, r3
 800d064:	f7ff fcc0 	bl	800c9e8 <LL_ADC_REG_StartConversion>
 800d068:	e006      	b.n	800d078 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2200      	movs	r2, #0
 800d06e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800d072:	e001      	b.n	800d078 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800d074:	2302      	movs	r3, #2
 800d076:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800d078:	7dfb      	ldrb	r3, [r7, #23]
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3718      	adds	r7, #24
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	0800dc4f 	.word	0x0800dc4f
 800d088:	0800dd27 	.word	0x0800dd27
 800d08c:	0800dd43 	.word	0x0800dd43

0800d090 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b084      	sub	sp, #16
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	d101      	bne.n	800d0a6 <HAL_ADC_Stop_DMA+0x16>
 800d0a2:	2302      	movs	r3, #2
 800d0a4:	e051      	b.n	800d14a <HAL_ADC_Stop_DMA+0xba>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2201      	movs	r2, #1
 800d0aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800d0ae:	2103      	movs	r1, #3
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f000 fc4f 	bl	800d954 <ADC_ConversionStop>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800d0ba:	7bfb      	ldrb	r3, [r7, #15]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d13f      	bne.n	800d140 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	68da      	ldr	r2, [r3, #12]
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f022 0201 	bic.w	r2, r2, #1
 800d0ce:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d0d8:	b2db      	uxtb	r3, r3
 800d0da:	2b02      	cmp	r3, #2
 800d0dc:	d10f      	bne.n	800d0fe <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f001 f872 	bl	800e1cc <HAL_DMA_Abort>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800d0ec:	7bfb      	ldrb	r3, [r7, #15]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d005      	beq.n	800d0fe <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	685a      	ldr	r2, [r3, #4]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f022 0210 	bic.w	r2, r2, #16
 800d10c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800d10e:	7bfb      	ldrb	r3, [r7, #15]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d105      	bne.n	800d120 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 fd3b 	bl	800db90 <ADC_Disable>
 800d11a:	4603      	mov	r3, r0
 800d11c:	73fb      	strb	r3, [r7, #15]
 800d11e:	e002      	b.n	800d126 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f000 fd35 	bl	800db90 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800d126:	7bfb      	ldrb	r3, [r7, #15]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d109      	bne.n	800d140 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d130:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800d134:	f023 0301 	bic.w	r3, r3, #1
 800d138:	f043 0201 	orr.w	r2, r3, #1
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2200      	movs	r2, #0
 800d144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800d148:	7bfb      	ldrb	r3, [r7, #15]
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3710      	adds	r7, #16
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}

0800d152 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800d152:	b480      	push	{r7}
 800d154:	b083      	sub	sp, #12
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800d160:	4618      	mov	r0, r3
 800d162:	370c      	adds	r7, #12
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr

0800d16c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b083      	sub	sp, #12
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800d174:	bf00      	nop
 800d176:	370c      	adds	r7, #12
 800d178:	46bd      	mov	sp, r7
 800d17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17e:	4770      	bx	lr

0800d180 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800d180:	b480      	push	{r7}
 800d182:	b083      	sub	sp, #12
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800d188:	bf00      	nop
 800d18a:	370c      	adds	r7, #12
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr

0800d194 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b0b6      	sub	sp, #216	; 0xd8
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d1ae:	2b01      	cmp	r3, #1
 800d1b0:	d101      	bne.n	800d1b6 <HAL_ADC_ConfigChannel+0x22>
 800d1b2:	2302      	movs	r3, #2
 800d1b4:	e3b9      	b.n	800d92a <HAL_ADC_ConfigChannel+0x796>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7ff fc38 	bl	800ca38 <LL_ADC_REG_IsConversionOngoing>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	f040 839e 	bne.w	800d90c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	685b      	ldr	r3, [r3, #4]
 800d1d4:	2b05      	cmp	r3, #5
 800d1d6:	d824      	bhi.n	800d222 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	3b02      	subs	r3, #2
 800d1de:	2b03      	cmp	r3, #3
 800d1e0:	d81b      	bhi.n	800d21a <HAL_ADC_ConfigChannel+0x86>
 800d1e2:	a201      	add	r2, pc, #4	; (adr r2, 800d1e8 <HAL_ADC_ConfigChannel+0x54>)
 800d1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1e8:	0800d1f9 	.word	0x0800d1f9
 800d1ec:	0800d201 	.word	0x0800d201
 800d1f0:	0800d209 	.word	0x0800d209
 800d1f4:	0800d211 	.word	0x0800d211
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	220c      	movs	r2, #12
 800d1fc:	605a      	str	r2, [r3, #4]
          break;
 800d1fe:	e011      	b.n	800d224 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	2212      	movs	r2, #18
 800d204:	605a      	str	r2, [r3, #4]
          break;
 800d206:	e00d      	b.n	800d224 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	2218      	movs	r2, #24
 800d20c:	605a      	str	r2, [r3, #4]
          break;
 800d20e:	e009      	b.n	800d224 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d216:	605a      	str	r2, [r3, #4]
          break;
 800d218:	e004      	b.n	800d224 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	2206      	movs	r2, #6
 800d21e:	605a      	str	r2, [r3, #4]
          break;
 800d220:	e000      	b.n	800d224 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800d222:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6818      	ldr	r0, [r3, #0]
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	6859      	ldr	r1, [r3, #4]
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	461a      	mov	r2, r3
 800d232:	f7ff fac1 	bl	800c7b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7ff fbfc 	bl	800ca38 <LL_ADC_REG_IsConversionOngoing>
 800d240:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4618      	mov	r0, r3
 800d24a:	f7ff fc1c 	bl	800ca86 <LL_ADC_INJ_IsConversionOngoing>
 800d24e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800d252:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d256:	2b00      	cmp	r3, #0
 800d258:	f040 81a6 	bne.w	800d5a8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800d25c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d260:	2b00      	cmp	r3, #0
 800d262:	f040 81a1 	bne.w	800d5a8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6818      	ldr	r0, [r3, #0]
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	6819      	ldr	r1, [r3, #0]
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	689b      	ldr	r3, [r3, #8]
 800d272:	461a      	mov	r2, r3
 800d274:	f7ff facc 	bl	800c810 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	695a      	ldr	r2, [r3, #20]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	68db      	ldr	r3, [r3, #12]
 800d282:	08db      	lsrs	r3, r3, #3
 800d284:	f003 0303 	and.w	r3, r3, #3
 800d288:	005b      	lsls	r3, r3, #1
 800d28a:	fa02 f303 	lsl.w	r3, r2, r3
 800d28e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	691b      	ldr	r3, [r3, #16]
 800d296:	2b04      	cmp	r3, #4
 800d298:	d00a      	beq.n	800d2b0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6818      	ldr	r0, [r3, #0]
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	6919      	ldr	r1, [r3, #16]
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	681a      	ldr	r2, [r3, #0]
 800d2a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d2aa:	f7ff fa1d 	bl	800c6e8 <LL_ADC_SetOffset>
 800d2ae:	e17b      	b.n	800d5a8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	2100      	movs	r1, #0
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7ff fa3a 	bl	800c730 <LL_ADC_GetOffsetChannel>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d10a      	bne.n	800d2dc <HAL_ADC_ConfigChannel+0x148>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	2100      	movs	r1, #0
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f7ff fa2f 	bl	800c730 <LL_ADC_GetOffsetChannel>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	0e9b      	lsrs	r3, r3, #26
 800d2d6:	f003 021f 	and.w	r2, r3, #31
 800d2da:	e01e      	b.n	800d31a <HAL_ADC_ConfigChannel+0x186>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	2100      	movs	r1, #0
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f7ff fa24 	bl	800c730 <LL_ADC_GetOffsetChannel>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d2ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d2f2:	fa93 f3a3 	rbit	r3, r3
 800d2f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800d2fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d2fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800d302:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d306:	2b00      	cmp	r3, #0
 800d308:	d101      	bne.n	800d30e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800d30a:	2320      	movs	r3, #32
 800d30c:	e004      	b.n	800d318 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800d30e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d312:	fab3 f383 	clz	r3, r3
 800d316:	b2db      	uxtb	r3, r3
 800d318:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d322:	2b00      	cmp	r3, #0
 800d324:	d105      	bne.n	800d332 <HAL_ADC_ConfigChannel+0x19e>
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	0e9b      	lsrs	r3, r3, #26
 800d32c:	f003 031f 	and.w	r3, r3, #31
 800d330:	e018      	b.n	800d364 <HAL_ADC_ConfigChannel+0x1d0>
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d33a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d33e:	fa93 f3a3 	rbit	r3, r3
 800d342:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800d346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d34a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800d34e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d352:	2b00      	cmp	r3, #0
 800d354:	d101      	bne.n	800d35a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800d356:	2320      	movs	r3, #32
 800d358:	e004      	b.n	800d364 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800d35a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d35e:	fab3 f383 	clz	r3, r3
 800d362:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800d364:	429a      	cmp	r2, r3
 800d366:	d106      	bne.n	800d376 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2200      	movs	r2, #0
 800d36e:	2100      	movs	r1, #0
 800d370:	4618      	mov	r0, r3
 800d372:	f7ff f9f3 	bl	800c75c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	2101      	movs	r1, #1
 800d37c:	4618      	mov	r0, r3
 800d37e:	f7ff f9d7 	bl	800c730 <LL_ADC_GetOffsetChannel>
 800d382:	4603      	mov	r3, r0
 800d384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d10a      	bne.n	800d3a2 <HAL_ADC_ConfigChannel+0x20e>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	2101      	movs	r1, #1
 800d392:	4618      	mov	r0, r3
 800d394:	f7ff f9cc 	bl	800c730 <LL_ADC_GetOffsetChannel>
 800d398:	4603      	mov	r3, r0
 800d39a:	0e9b      	lsrs	r3, r3, #26
 800d39c:	f003 021f 	and.w	r2, r3, #31
 800d3a0:	e01e      	b.n	800d3e0 <HAL_ADC_ConfigChannel+0x24c>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	2101      	movs	r1, #1
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f7ff f9c1 	bl	800c730 <LL_ADC_GetOffsetChannel>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d3b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d3b8:	fa93 f3a3 	rbit	r3, r3
 800d3bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800d3c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d3c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800d3c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d101      	bne.n	800d3d4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800d3d0:	2320      	movs	r3, #32
 800d3d2:	e004      	b.n	800d3de <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800d3d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d3d8:	fab3 f383 	clz	r3, r3
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d105      	bne.n	800d3f8 <HAL_ADC_ConfigChannel+0x264>
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	0e9b      	lsrs	r3, r3, #26
 800d3f2:	f003 031f 	and.w	r3, r3, #31
 800d3f6:	e018      	b.n	800d42a <HAL_ADC_ConfigChannel+0x296>
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d400:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d404:	fa93 f3a3 	rbit	r3, r3
 800d408:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800d40c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d410:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800d414:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d101      	bne.n	800d420 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800d41c:	2320      	movs	r3, #32
 800d41e:	e004      	b.n	800d42a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800d420:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d424:	fab3 f383 	clz	r3, r3
 800d428:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d106      	bne.n	800d43c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	2200      	movs	r2, #0
 800d434:	2101      	movs	r1, #1
 800d436:	4618      	mov	r0, r3
 800d438:	f7ff f990 	bl	800c75c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	2102      	movs	r1, #2
 800d442:	4618      	mov	r0, r3
 800d444:	f7ff f974 	bl	800c730 <LL_ADC_GetOffsetChannel>
 800d448:	4603      	mov	r3, r0
 800d44a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d10a      	bne.n	800d468 <HAL_ADC_ConfigChannel+0x2d4>
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	2102      	movs	r1, #2
 800d458:	4618      	mov	r0, r3
 800d45a:	f7ff f969 	bl	800c730 <LL_ADC_GetOffsetChannel>
 800d45e:	4603      	mov	r3, r0
 800d460:	0e9b      	lsrs	r3, r3, #26
 800d462:	f003 021f 	and.w	r2, r3, #31
 800d466:	e01e      	b.n	800d4a6 <HAL_ADC_ConfigChannel+0x312>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	2102      	movs	r1, #2
 800d46e:	4618      	mov	r0, r3
 800d470:	f7ff f95e 	bl	800c730 <LL_ADC_GetOffsetChannel>
 800d474:	4603      	mov	r3, r0
 800d476:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d47a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d47e:	fa93 f3a3 	rbit	r3, r3
 800d482:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800d486:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d48a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800d48e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d492:	2b00      	cmp	r3, #0
 800d494:	d101      	bne.n	800d49a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800d496:	2320      	movs	r3, #32
 800d498:	e004      	b.n	800d4a4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800d49a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d49e:	fab3 f383 	clz	r3, r3
 800d4a2:	b2db      	uxtb	r3, r3
 800d4a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d105      	bne.n	800d4be <HAL_ADC_ConfigChannel+0x32a>
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	0e9b      	lsrs	r3, r3, #26
 800d4b8:	f003 031f 	and.w	r3, r3, #31
 800d4bc:	e016      	b.n	800d4ec <HAL_ADC_ConfigChannel+0x358>
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d4c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d4ca:	fa93 f3a3 	rbit	r3, r3
 800d4ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800d4d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d4d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800d4d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d101      	bne.n	800d4e2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800d4de:	2320      	movs	r3, #32
 800d4e0:	e004      	b.n	800d4ec <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800d4e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d4e6:	fab3 f383 	clz	r3, r3
 800d4ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d106      	bne.n	800d4fe <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	2102      	movs	r1, #2
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7ff f92f 	bl	800c75c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	2103      	movs	r1, #3
 800d504:	4618      	mov	r0, r3
 800d506:	f7ff f913 	bl	800c730 <LL_ADC_GetOffsetChannel>
 800d50a:	4603      	mov	r3, r0
 800d50c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d510:	2b00      	cmp	r3, #0
 800d512:	d10a      	bne.n	800d52a <HAL_ADC_ConfigChannel+0x396>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	2103      	movs	r1, #3
 800d51a:	4618      	mov	r0, r3
 800d51c:	f7ff f908 	bl	800c730 <LL_ADC_GetOffsetChannel>
 800d520:	4603      	mov	r3, r0
 800d522:	0e9b      	lsrs	r3, r3, #26
 800d524:	f003 021f 	and.w	r2, r3, #31
 800d528:	e017      	b.n	800d55a <HAL_ADC_ConfigChannel+0x3c6>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	2103      	movs	r1, #3
 800d530:	4618      	mov	r0, r3
 800d532:	f7ff f8fd 	bl	800c730 <LL_ADC_GetOffsetChannel>
 800d536:	4603      	mov	r3, r0
 800d538:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d53a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d53c:	fa93 f3a3 	rbit	r3, r3
 800d540:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800d542:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d544:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800d546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d101      	bne.n	800d550 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800d54c:	2320      	movs	r3, #32
 800d54e:	e003      	b.n	800d558 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800d550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d552:	fab3 f383 	clz	r3, r3
 800d556:	b2db      	uxtb	r3, r3
 800d558:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d562:	2b00      	cmp	r3, #0
 800d564:	d105      	bne.n	800d572 <HAL_ADC_ConfigChannel+0x3de>
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	0e9b      	lsrs	r3, r3, #26
 800d56c:	f003 031f 	and.w	r3, r3, #31
 800d570:	e011      	b.n	800d596 <HAL_ADC_ConfigChannel+0x402>
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d578:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d57a:	fa93 f3a3 	rbit	r3, r3
 800d57e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800d580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d582:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800d584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d586:	2b00      	cmp	r3, #0
 800d588:	d101      	bne.n	800d58e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800d58a:	2320      	movs	r3, #32
 800d58c:	e003      	b.n	800d596 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800d58e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d590:	fab3 f383 	clz	r3, r3
 800d594:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800d596:	429a      	cmp	r2, r3
 800d598:	d106      	bne.n	800d5a8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	2103      	movs	r1, #3
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7ff f8da 	bl	800c75c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f7ff f9f5 	bl	800c99c <LL_ADC_IsEnabled>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f040 813f 	bne.w	800d838 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6818      	ldr	r0, [r3, #0]
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	6819      	ldr	r1, [r3, #0]
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	68db      	ldr	r3, [r3, #12]
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	f7ff f94e 	bl	800c868 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	4a8e      	ldr	r2, [pc, #568]	; (800d80c <HAL_ADC_ConfigChannel+0x678>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	f040 8130 	bne.w	800d838 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d10b      	bne.n	800d600 <HAL_ADC_ConfigChannel+0x46c>
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	0e9b      	lsrs	r3, r3, #26
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	f003 031f 	and.w	r3, r3, #31
 800d5f4:	2b09      	cmp	r3, #9
 800d5f6:	bf94      	ite	ls
 800d5f8:	2301      	movls	r3, #1
 800d5fa:	2300      	movhi	r3, #0
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	e019      	b.n	800d634 <HAL_ADC_ConfigChannel+0x4a0>
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d608:	fa93 f3a3 	rbit	r3, r3
 800d60c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800d60e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d610:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800d612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d614:	2b00      	cmp	r3, #0
 800d616:	d101      	bne.n	800d61c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800d618:	2320      	movs	r3, #32
 800d61a:	e003      	b.n	800d624 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800d61c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d61e:	fab3 f383 	clz	r3, r3
 800d622:	b2db      	uxtb	r3, r3
 800d624:	3301      	adds	r3, #1
 800d626:	f003 031f 	and.w	r3, r3, #31
 800d62a:	2b09      	cmp	r3, #9
 800d62c:	bf94      	ite	ls
 800d62e:	2301      	movls	r3, #1
 800d630:	2300      	movhi	r3, #0
 800d632:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800d634:	2b00      	cmp	r3, #0
 800d636:	d079      	beq.n	800d72c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d640:	2b00      	cmp	r3, #0
 800d642:	d107      	bne.n	800d654 <HAL_ADC_ConfigChannel+0x4c0>
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	0e9b      	lsrs	r3, r3, #26
 800d64a:	3301      	adds	r3, #1
 800d64c:	069b      	lsls	r3, r3, #26
 800d64e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800d652:	e015      	b.n	800d680 <HAL_ADC_ConfigChannel+0x4ec>
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d65a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d65c:	fa93 f3a3 	rbit	r3, r3
 800d660:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800d662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d664:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800d666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d101      	bne.n	800d670 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800d66c:	2320      	movs	r3, #32
 800d66e:	e003      	b.n	800d678 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800d670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d672:	fab3 f383 	clz	r3, r3
 800d676:	b2db      	uxtb	r3, r3
 800d678:	3301      	adds	r3, #1
 800d67a:	069b      	lsls	r3, r3, #26
 800d67c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d109      	bne.n	800d6a0 <HAL_ADC_ConfigChannel+0x50c>
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	0e9b      	lsrs	r3, r3, #26
 800d692:	3301      	adds	r3, #1
 800d694:	f003 031f 	and.w	r3, r3, #31
 800d698:	2101      	movs	r1, #1
 800d69a:	fa01 f303 	lsl.w	r3, r1, r3
 800d69e:	e017      	b.n	800d6d0 <HAL_ADC_ConfigChannel+0x53c>
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d6a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6a8:	fa93 f3a3 	rbit	r3, r3
 800d6ac:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800d6ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800d6b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d101      	bne.n	800d6bc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800d6b8:	2320      	movs	r3, #32
 800d6ba:	e003      	b.n	800d6c4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800d6bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6be:	fab3 f383 	clz	r3, r3
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	f003 031f 	and.w	r3, r3, #31
 800d6ca:	2101      	movs	r1, #1
 800d6cc:	fa01 f303 	lsl.w	r3, r1, r3
 800d6d0:	ea42 0103 	orr.w	r1, r2, r3
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d10a      	bne.n	800d6f6 <HAL_ADC_ConfigChannel+0x562>
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	0e9b      	lsrs	r3, r3, #26
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	f003 021f 	and.w	r2, r3, #31
 800d6ec:	4613      	mov	r3, r2
 800d6ee:	005b      	lsls	r3, r3, #1
 800d6f0:	4413      	add	r3, r2
 800d6f2:	051b      	lsls	r3, r3, #20
 800d6f4:	e018      	b.n	800d728 <HAL_ADC_ConfigChannel+0x594>
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6fe:	fa93 f3a3 	rbit	r3, r3
 800d702:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800d704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d706:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800d708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d101      	bne.n	800d712 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800d70e:	2320      	movs	r3, #32
 800d710:	e003      	b.n	800d71a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800d712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d714:	fab3 f383 	clz	r3, r3
 800d718:	b2db      	uxtb	r3, r3
 800d71a:	3301      	adds	r3, #1
 800d71c:	f003 021f 	and.w	r2, r3, #31
 800d720:	4613      	mov	r3, r2
 800d722:	005b      	lsls	r3, r3, #1
 800d724:	4413      	add	r3, r2
 800d726:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800d728:	430b      	orrs	r3, r1
 800d72a:	e080      	b.n	800d82e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d734:	2b00      	cmp	r3, #0
 800d736:	d107      	bne.n	800d748 <HAL_ADC_ConfigChannel+0x5b4>
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	0e9b      	lsrs	r3, r3, #26
 800d73e:	3301      	adds	r3, #1
 800d740:	069b      	lsls	r3, r3, #26
 800d742:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800d746:	e015      	b.n	800d774 <HAL_ADC_ConfigChannel+0x5e0>
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d750:	fa93 f3a3 	rbit	r3, r3
 800d754:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800d756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d758:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800d75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d101      	bne.n	800d764 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800d760:	2320      	movs	r3, #32
 800d762:	e003      	b.n	800d76c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800d764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d766:	fab3 f383 	clz	r3, r3
 800d76a:	b2db      	uxtb	r3, r3
 800d76c:	3301      	adds	r3, #1
 800d76e:	069b      	lsls	r3, r3, #26
 800d770:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d109      	bne.n	800d794 <HAL_ADC_ConfigChannel+0x600>
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	0e9b      	lsrs	r3, r3, #26
 800d786:	3301      	adds	r3, #1
 800d788:	f003 031f 	and.w	r3, r3, #31
 800d78c:	2101      	movs	r1, #1
 800d78e:	fa01 f303 	lsl.w	r3, r1, r3
 800d792:	e017      	b.n	800d7c4 <HAL_ADC_ConfigChannel+0x630>
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d79a:	6a3b      	ldr	r3, [r7, #32]
 800d79c:	fa93 f3a3 	rbit	r3, r3
 800d7a0:	61fb      	str	r3, [r7, #28]
  return result;
 800d7a2:	69fb      	ldr	r3, [r7, #28]
 800d7a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800d7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d101      	bne.n	800d7b0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800d7ac:	2320      	movs	r3, #32
 800d7ae:	e003      	b.n	800d7b8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800d7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b2:	fab3 f383 	clz	r3, r3
 800d7b6:	b2db      	uxtb	r3, r3
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	f003 031f 	and.w	r3, r3, #31
 800d7be:	2101      	movs	r1, #1
 800d7c0:	fa01 f303 	lsl.w	r3, r1, r3
 800d7c4:	ea42 0103 	orr.w	r1, r2, r3
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d10d      	bne.n	800d7f0 <HAL_ADC_ConfigChannel+0x65c>
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	0e9b      	lsrs	r3, r3, #26
 800d7da:	3301      	adds	r3, #1
 800d7dc:	f003 021f 	and.w	r2, r3, #31
 800d7e0:	4613      	mov	r3, r2
 800d7e2:	005b      	lsls	r3, r3, #1
 800d7e4:	4413      	add	r3, r2
 800d7e6:	3b1e      	subs	r3, #30
 800d7e8:	051b      	lsls	r3, r3, #20
 800d7ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d7ee:	e01d      	b.n	800d82c <HAL_ADC_ConfigChannel+0x698>
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	fa93 f3a3 	rbit	r3, r3
 800d7fc:	613b      	str	r3, [r7, #16]
  return result;
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800d802:	69bb      	ldr	r3, [r7, #24]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d103      	bne.n	800d810 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800d808:	2320      	movs	r3, #32
 800d80a:	e005      	b.n	800d818 <HAL_ADC_ConfigChannel+0x684>
 800d80c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800d810:	69bb      	ldr	r3, [r7, #24]
 800d812:	fab3 f383 	clz	r3, r3
 800d816:	b2db      	uxtb	r3, r3
 800d818:	3301      	adds	r3, #1
 800d81a:	f003 021f 	and.w	r2, r3, #31
 800d81e:	4613      	mov	r3, r2
 800d820:	005b      	lsls	r3, r3, #1
 800d822:	4413      	add	r3, r2
 800d824:	3b1e      	subs	r3, #30
 800d826:	051b      	lsls	r3, r3, #20
 800d828:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800d82c:	430b      	orrs	r3, r1
 800d82e:	683a      	ldr	r2, [r7, #0]
 800d830:	6892      	ldr	r2, [r2, #8]
 800d832:	4619      	mov	r1, r3
 800d834:	f7fe ffec 	bl	800c810 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	681a      	ldr	r2, [r3, #0]
 800d83c:	4b3d      	ldr	r3, [pc, #244]	; (800d934 <HAL_ADC_ConfigChannel+0x7a0>)
 800d83e:	4013      	ands	r3, r2
 800d840:	2b00      	cmp	r3, #0
 800d842:	d06c      	beq.n	800d91e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800d844:	483c      	ldr	r0, [pc, #240]	; (800d938 <HAL_ADC_ConfigChannel+0x7a4>)
 800d846:	f7fe ff41 	bl	800c6cc <LL_ADC_GetCommonPathInternalCh>
 800d84a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	4a3a      	ldr	r2, [pc, #232]	; (800d93c <HAL_ADC_ConfigChannel+0x7a8>)
 800d854:	4293      	cmp	r3, r2
 800d856:	d127      	bne.n	800d8a8 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800d858:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d85c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d860:	2b00      	cmp	r3, #0
 800d862:	d121      	bne.n	800d8a8 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	4a35      	ldr	r2, [pc, #212]	; (800d940 <HAL_ADC_ConfigChannel+0x7ac>)
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d157      	bne.n	800d91e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d86e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d872:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d876:	4619      	mov	r1, r3
 800d878:	482f      	ldr	r0, [pc, #188]	; (800d938 <HAL_ADC_ConfigChannel+0x7a4>)
 800d87a:	f7fe ff14 	bl	800c6a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800d87e:	4b31      	ldr	r3, [pc, #196]	; (800d944 <HAL_ADC_ConfigChannel+0x7b0>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	099b      	lsrs	r3, r3, #6
 800d884:	4a30      	ldr	r2, [pc, #192]	; (800d948 <HAL_ADC_ConfigChannel+0x7b4>)
 800d886:	fba2 2303 	umull	r2, r3, r2, r3
 800d88a:	099b      	lsrs	r3, r3, #6
 800d88c:	1c5a      	adds	r2, r3, #1
 800d88e:	4613      	mov	r3, r2
 800d890:	005b      	lsls	r3, r3, #1
 800d892:	4413      	add	r3, r2
 800d894:	009b      	lsls	r3, r3, #2
 800d896:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800d898:	e002      	b.n	800d8a0 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	3b01      	subs	r3, #1
 800d89e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d1f9      	bne.n	800d89a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800d8a6:	e03a      	b.n	800d91e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4a27      	ldr	r2, [pc, #156]	; (800d94c <HAL_ADC_ConfigChannel+0x7b8>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d113      	bne.n	800d8da <HAL_ADC_ConfigChannel+0x746>
 800d8b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d8b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d10d      	bne.n	800d8da <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	4a1f      	ldr	r2, [pc, #124]	; (800d940 <HAL_ADC_ConfigChannel+0x7ac>)
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	d12a      	bne.n	800d91e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d8c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d8cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d8d0:	4619      	mov	r1, r3
 800d8d2:	4819      	ldr	r0, [pc, #100]	; (800d938 <HAL_ADC_ConfigChannel+0x7a4>)
 800d8d4:	f7fe fee7 	bl	800c6a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800d8d8:	e021      	b.n	800d91e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4a1c      	ldr	r2, [pc, #112]	; (800d950 <HAL_ADC_ConfigChannel+0x7bc>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d11c      	bne.n	800d91e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800d8e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d8e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d116      	bne.n	800d91e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4a12      	ldr	r2, [pc, #72]	; (800d940 <HAL_ADC_ConfigChannel+0x7ac>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d111      	bne.n	800d91e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d8fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d8fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d902:	4619      	mov	r1, r3
 800d904:	480c      	ldr	r0, [pc, #48]	; (800d938 <HAL_ADC_ConfigChannel+0x7a4>)
 800d906:	f7fe fece 	bl	800c6a6 <LL_ADC_SetCommonPathInternalCh>
 800d90a:	e008      	b.n	800d91e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d910:	f043 0220 	orr.w	r2, r3, #32
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800d918:	2301      	movs	r3, #1
 800d91a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2200      	movs	r2, #0
 800d922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800d926:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	37d8      	adds	r7, #216	; 0xd8
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}
 800d932:	bf00      	nop
 800d934:	80080000 	.word	0x80080000
 800d938:	50040300 	.word	0x50040300
 800d93c:	c7520000 	.word	0xc7520000
 800d940:	50040000 	.word	0x50040000
 800d944:	20000000 	.word	0x20000000
 800d948:	053e2d63 	.word	0x053e2d63
 800d94c:	cb840000 	.word	0xcb840000
 800d950:	80000001 	.word	0x80000001

0800d954 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b088      	sub	sp, #32
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800d95e:	2300      	movs	r3, #0
 800d960:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4618      	mov	r0, r3
 800d96c:	f7ff f864 	bl	800ca38 <LL_ADC_REG_IsConversionOngoing>
 800d970:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4618      	mov	r0, r3
 800d978:	f7ff f885 	bl	800ca86 <LL_ADC_INJ_IsConversionOngoing>
 800d97c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d103      	bne.n	800d98c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	2b00      	cmp	r3, #0
 800d988:	f000 8098 	beq.w	800dabc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	68db      	ldr	r3, [r3, #12]
 800d992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d996:	2b00      	cmp	r3, #0
 800d998:	d02a      	beq.n	800d9f0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	7e5b      	ldrb	r3, [r3, #25]
 800d99e:	2b01      	cmp	r3, #1
 800d9a0:	d126      	bne.n	800d9f0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	7e1b      	ldrb	r3, [r3, #24]
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	d122      	bne.n	800d9f0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800d9ae:	e014      	b.n	800d9da <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	4a45      	ldr	r2, [pc, #276]	; (800dac8 <ADC_ConversionStop+0x174>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d90d      	bls.n	800d9d4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9bc:	f043 0210 	orr.w	r2, r3, #16
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9c8:	f043 0201 	orr.w	r2, r3, #1
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	e074      	b.n	800dabe <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800d9d4:	69fb      	ldr	r3, [r7, #28]
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9e4:	2b40      	cmp	r3, #64	; 0x40
 800d9e6:	d1e3      	bne.n	800d9b0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	2240      	movs	r2, #64	; 0x40
 800d9ee:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800d9f0:	69bb      	ldr	r3, [r7, #24]
 800d9f2:	2b02      	cmp	r3, #2
 800d9f4:	d014      	beq.n	800da20 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f7ff f81c 	bl	800ca38 <LL_ADC_REG_IsConversionOngoing>
 800da00:	4603      	mov	r3, r0
 800da02:	2b00      	cmp	r3, #0
 800da04:	d00c      	beq.n	800da20 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7fe ffd9 	bl	800c9c2 <LL_ADC_IsDisableOngoing>
 800da10:	4603      	mov	r3, r0
 800da12:	2b00      	cmp	r3, #0
 800da14:	d104      	bne.n	800da20 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fe fff8 	bl	800ca10 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800da20:	69bb      	ldr	r3, [r7, #24]
 800da22:	2b01      	cmp	r3, #1
 800da24:	d014      	beq.n	800da50 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	4618      	mov	r0, r3
 800da2c:	f7ff f82b 	bl	800ca86 <LL_ADC_INJ_IsConversionOngoing>
 800da30:	4603      	mov	r3, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	d00c      	beq.n	800da50 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7fe ffc1 	bl	800c9c2 <LL_ADC_IsDisableOngoing>
 800da40:	4603      	mov	r3, r0
 800da42:	2b00      	cmp	r3, #0
 800da44:	d104      	bne.n	800da50 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7ff f807 	bl	800ca5e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800da50:	69bb      	ldr	r3, [r7, #24]
 800da52:	2b02      	cmp	r3, #2
 800da54:	d005      	beq.n	800da62 <ADC_ConversionStop+0x10e>
 800da56:	69bb      	ldr	r3, [r7, #24]
 800da58:	2b03      	cmp	r3, #3
 800da5a:	d105      	bne.n	800da68 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800da5c:	230c      	movs	r3, #12
 800da5e:	617b      	str	r3, [r7, #20]
        break;
 800da60:	e005      	b.n	800da6e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800da62:	2308      	movs	r3, #8
 800da64:	617b      	str	r3, [r7, #20]
        break;
 800da66:	e002      	b.n	800da6e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800da68:	2304      	movs	r3, #4
 800da6a:	617b      	str	r3, [r7, #20]
        break;
 800da6c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800da6e:	f7fe fdd7 	bl	800c620 <HAL_GetTick>
 800da72:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800da74:	e01b      	b.n	800daae <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800da76:	f7fe fdd3 	bl	800c620 <HAL_GetTick>
 800da7a:	4602      	mov	r2, r0
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	1ad3      	subs	r3, r2, r3
 800da80:	2b05      	cmp	r3, #5
 800da82:	d914      	bls.n	800daae <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	689a      	ldr	r2, [r3, #8]
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	4013      	ands	r3, r2
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d00d      	beq.n	800daae <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da96:	f043 0210 	orr.w	r2, r3, #16
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800daa2:	f043 0201 	orr.w	r2, r3, #1
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800daaa:	2301      	movs	r3, #1
 800daac:	e007      	b.n	800dabe <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	689a      	ldr	r2, [r3, #8]
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	4013      	ands	r3, r2
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d1dc      	bne.n	800da76 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800dabc:	2300      	movs	r3, #0
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3720      	adds	r7, #32
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	a33fffff 	.word	0xa33fffff

0800dacc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b084      	sub	sp, #16
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	4618      	mov	r0, r3
 800dada:	f7fe ff5f 	bl	800c99c <LL_ADC_IsEnabled>
 800dade:	4603      	mov	r3, r0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d14d      	bne.n	800db80 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	689a      	ldr	r2, [r3, #8]
 800daea:	4b28      	ldr	r3, [pc, #160]	; (800db8c <ADC_Enable+0xc0>)
 800daec:	4013      	ands	r3, r2
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d00d      	beq.n	800db0e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daf6:	f043 0210 	orr.w	r2, r3, #16
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db02:	f043 0201 	orr.w	r2, r3, #1
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800db0a:	2301      	movs	r3, #1
 800db0c:	e039      	b.n	800db82 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	4618      	mov	r0, r3
 800db14:	f7fe ff1a 	bl	800c94c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800db18:	f7fe fd82 	bl	800c620 <HAL_GetTick>
 800db1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800db1e:	e028      	b.n	800db72 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	4618      	mov	r0, r3
 800db26:	f7fe ff39 	bl	800c99c <LL_ADC_IsEnabled>
 800db2a:	4603      	mov	r3, r0
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d104      	bne.n	800db3a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4618      	mov	r0, r3
 800db36:	f7fe ff09 	bl	800c94c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800db3a:	f7fe fd71 	bl	800c620 <HAL_GetTick>
 800db3e:	4602      	mov	r2, r0
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	1ad3      	subs	r3, r2, r3
 800db44:	2b02      	cmp	r3, #2
 800db46:	d914      	bls.n	800db72 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f003 0301 	and.w	r3, r3, #1
 800db52:	2b01      	cmp	r3, #1
 800db54:	d00d      	beq.n	800db72 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db5a:	f043 0210 	orr.w	r2, r3, #16
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db66:	f043 0201 	orr.w	r2, r3, #1
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800db6e:	2301      	movs	r3, #1
 800db70:	e007      	b.n	800db82 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f003 0301 	and.w	r3, r3, #1
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d1cf      	bne.n	800db20 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800db80:	2300      	movs	r3, #0
}
 800db82:	4618      	mov	r0, r3
 800db84:	3710      	adds	r7, #16
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}
 800db8a:	bf00      	nop
 800db8c:	8000003f 	.word	0x8000003f

0800db90 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7fe ff10 	bl	800c9c2 <LL_ADC_IsDisableOngoing>
 800dba2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f7fe fef7 	bl	800c99c <LL_ADC_IsEnabled>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d047      	beq.n	800dc44 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d144      	bne.n	800dc44 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	689b      	ldr	r3, [r3, #8]
 800dbc0:	f003 030d 	and.w	r3, r3, #13
 800dbc4:	2b01      	cmp	r3, #1
 800dbc6:	d10c      	bne.n	800dbe2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f7fe fed1 	bl	800c974 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	2203      	movs	r2, #3
 800dbd8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800dbda:	f7fe fd21 	bl	800c620 <HAL_GetTick>
 800dbde:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800dbe0:	e029      	b.n	800dc36 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbe6:	f043 0210 	orr.w	r2, r3, #16
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbf2:	f043 0201 	orr.w	r2, r3, #1
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	e023      	b.n	800dc46 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800dbfe:	f7fe fd0f 	bl	800c620 <HAL_GetTick>
 800dc02:	4602      	mov	r2, r0
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	1ad3      	subs	r3, r2, r3
 800dc08:	2b02      	cmp	r3, #2
 800dc0a:	d914      	bls.n	800dc36 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	689b      	ldr	r3, [r3, #8]
 800dc12:	f003 0301 	and.w	r3, r3, #1
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d00d      	beq.n	800dc36 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc1e:	f043 0210 	orr.w	r2, r3, #16
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc2a:	f043 0201 	orr.w	r2, r3, #1
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800dc32:	2301      	movs	r3, #1
 800dc34:	e007      	b.n	800dc46 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	689b      	ldr	r3, [r3, #8]
 800dc3c:	f003 0301 	and.w	r3, r3, #1
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d1dc      	bne.n	800dbfe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800dc44:	2300      	movs	r3, #0
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3710      	adds	r7, #16
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}

0800dc4e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800dc4e:	b580      	push	{r7, lr}
 800dc50:	b084      	sub	sp, #16
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc5a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d14b      	bne.n	800dd00 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc6c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	f003 0308 	and.w	r3, r3, #8
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d021      	beq.n	800dcc6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7fe fd83 	bl	800c792 <LL_ADC_REG_IsTriggerSourceSWStart>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d032      	beq.n	800dcf8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	68db      	ldr	r3, [r3, #12]
 800dc98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d12b      	bne.n	800dcf8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dca4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d11f      	bne.n	800dcf8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcbc:	f043 0201 	orr.w	r2, r3, #1
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	655a      	str	r2, [r3, #84]	; 0x54
 800dcc4:	e018      	b.n	800dcf8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	68db      	ldr	r3, [r3, #12]
 800dccc:	f003 0302 	and.w	r3, r3, #2
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d111      	bne.n	800dcf8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d105      	bne.n	800dcf8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcf0:	f043 0201 	orr.w	r2, r3, #1
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800dcf8:	68f8      	ldr	r0, [r7, #12]
 800dcfa:	f7f6 f961 	bl	8003fc0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800dcfe:	e00e      	b.n	800dd1e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd04:	f003 0310 	and.w	r3, r3, #16
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d003      	beq.n	800dd14 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800dd0c:	68f8      	ldr	r0, [r7, #12]
 800dd0e:	f7ff fa37 	bl	800d180 <HAL_ADC_ErrorCallback>
}
 800dd12:	e004      	b.n	800dd1e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	4798      	blx	r3
}
 800dd1e:	bf00      	nop
 800dd20:	3710      	adds	r7, #16
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}

0800dd26 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800dd26:	b580      	push	{r7, lr}
 800dd28:	b084      	sub	sp, #16
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd32:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800dd34:	68f8      	ldr	r0, [r7, #12]
 800dd36:	f7ff fa19 	bl	800d16c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800dd3a:	bf00      	nop
 800dd3c:	3710      	adds	r7, #16
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}

0800dd42 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800dd42:	b580      	push	{r7, lr}
 800dd44:	b084      	sub	sp, #16
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd4e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd60:	f043 0204 	orr.w	r2, r3, #4
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800dd68:	68f8      	ldr	r0, [r7, #12]
 800dd6a:	f7ff fa09 	bl	800d180 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800dd6e:	bf00      	nop
 800dd70:	3710      	adds	r7, #16
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
	...

0800dd78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b085      	sub	sp, #20
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f003 0307 	and.w	r3, r3, #7
 800dd86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800dd88:	4b0c      	ldr	r3, [pc, #48]	; (800ddbc <__NVIC_SetPriorityGrouping+0x44>)
 800dd8a:	68db      	ldr	r3, [r3, #12]
 800dd8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800dd8e:	68ba      	ldr	r2, [r7, #8]
 800dd90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800dd94:	4013      	ands	r3, r2
 800dd96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800dda0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800dda4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dda8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ddaa:	4a04      	ldr	r2, [pc, #16]	; (800ddbc <__NVIC_SetPriorityGrouping+0x44>)
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	60d3      	str	r3, [r2, #12]
}
 800ddb0:	bf00      	nop
 800ddb2:	3714      	adds	r7, #20
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr
 800ddbc:	e000ed00 	.word	0xe000ed00

0800ddc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ddc4:	4b04      	ldr	r3, [pc, #16]	; (800ddd8 <__NVIC_GetPriorityGrouping+0x18>)
 800ddc6:	68db      	ldr	r3, [r3, #12]
 800ddc8:	0a1b      	lsrs	r3, r3, #8
 800ddca:	f003 0307 	and.w	r3, r3, #7
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr
 800ddd8:	e000ed00 	.word	0xe000ed00

0800dddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dddc:	b480      	push	{r7}
 800ddde:	b083      	sub	sp, #12
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	4603      	mov	r3, r0
 800dde4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dde6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	db0b      	blt.n	800de06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ddee:	79fb      	ldrb	r3, [r7, #7]
 800ddf0:	f003 021f 	and.w	r2, r3, #31
 800ddf4:	4907      	ldr	r1, [pc, #28]	; (800de14 <__NVIC_EnableIRQ+0x38>)
 800ddf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ddfa:	095b      	lsrs	r3, r3, #5
 800ddfc:	2001      	movs	r0, #1
 800ddfe:	fa00 f202 	lsl.w	r2, r0, r2
 800de02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800de06:	bf00      	nop
 800de08:	370c      	adds	r7, #12
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr
 800de12:	bf00      	nop
 800de14:	e000e100 	.word	0xe000e100

0800de18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800de18:	b480      	push	{r7}
 800de1a:	b083      	sub	sp, #12
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	4603      	mov	r3, r0
 800de20:	6039      	str	r1, [r7, #0]
 800de22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800de24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	db0a      	blt.n	800de42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	b2da      	uxtb	r2, r3
 800de30:	490c      	ldr	r1, [pc, #48]	; (800de64 <__NVIC_SetPriority+0x4c>)
 800de32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de36:	0112      	lsls	r2, r2, #4
 800de38:	b2d2      	uxtb	r2, r2
 800de3a:	440b      	add	r3, r1
 800de3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800de40:	e00a      	b.n	800de58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	b2da      	uxtb	r2, r3
 800de46:	4908      	ldr	r1, [pc, #32]	; (800de68 <__NVIC_SetPriority+0x50>)
 800de48:	79fb      	ldrb	r3, [r7, #7]
 800de4a:	f003 030f 	and.w	r3, r3, #15
 800de4e:	3b04      	subs	r3, #4
 800de50:	0112      	lsls	r2, r2, #4
 800de52:	b2d2      	uxtb	r2, r2
 800de54:	440b      	add	r3, r1
 800de56:	761a      	strb	r2, [r3, #24]
}
 800de58:	bf00      	nop
 800de5a:	370c      	adds	r7, #12
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr
 800de64:	e000e100 	.word	0xe000e100
 800de68:	e000ed00 	.word	0xe000ed00

0800de6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800de6c:	b480      	push	{r7}
 800de6e:	b089      	sub	sp, #36	; 0x24
 800de70:	af00      	add	r7, sp, #0
 800de72:	60f8      	str	r0, [r7, #12]
 800de74:	60b9      	str	r1, [r7, #8]
 800de76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f003 0307 	and.w	r3, r3, #7
 800de7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800de80:	69fb      	ldr	r3, [r7, #28]
 800de82:	f1c3 0307 	rsb	r3, r3, #7
 800de86:	2b04      	cmp	r3, #4
 800de88:	bf28      	it	cs
 800de8a:	2304      	movcs	r3, #4
 800de8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800de8e:	69fb      	ldr	r3, [r7, #28]
 800de90:	3304      	adds	r3, #4
 800de92:	2b06      	cmp	r3, #6
 800de94:	d902      	bls.n	800de9c <NVIC_EncodePriority+0x30>
 800de96:	69fb      	ldr	r3, [r7, #28]
 800de98:	3b03      	subs	r3, #3
 800de9a:	e000      	b.n	800de9e <NVIC_EncodePriority+0x32>
 800de9c:	2300      	movs	r3, #0
 800de9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dea0:	f04f 32ff 	mov.w	r2, #4294967295
 800dea4:	69bb      	ldr	r3, [r7, #24]
 800dea6:	fa02 f303 	lsl.w	r3, r2, r3
 800deaa:	43da      	mvns	r2, r3
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	401a      	ands	r2, r3
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800deb4:	f04f 31ff 	mov.w	r1, #4294967295
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	fa01 f303 	lsl.w	r3, r1, r3
 800debe:	43d9      	mvns	r1, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dec4:	4313      	orrs	r3, r2
         );
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3724      	adds	r7, #36	; 0x24
 800deca:	46bd      	mov	sp, r7
 800decc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded0:	4770      	bx	lr
	...

0800ded4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b082      	sub	sp, #8
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	3b01      	subs	r3, #1
 800dee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800dee4:	d301      	bcc.n	800deea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800dee6:	2301      	movs	r3, #1
 800dee8:	e00f      	b.n	800df0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800deea:	4a0a      	ldr	r2, [pc, #40]	; (800df14 <SysTick_Config+0x40>)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	3b01      	subs	r3, #1
 800def0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800def2:	210f      	movs	r1, #15
 800def4:	f04f 30ff 	mov.w	r0, #4294967295
 800def8:	f7ff ff8e 	bl	800de18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800defc:	4b05      	ldr	r3, [pc, #20]	; (800df14 <SysTick_Config+0x40>)
 800defe:	2200      	movs	r2, #0
 800df00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800df02:	4b04      	ldr	r3, [pc, #16]	; (800df14 <SysTick_Config+0x40>)
 800df04:	2207      	movs	r2, #7
 800df06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800df08:	2300      	movs	r3, #0
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3708      	adds	r7, #8
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	e000e010 	.word	0xe000e010

0800df18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b082      	sub	sp, #8
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f7ff ff29 	bl	800dd78 <__NVIC_SetPriorityGrouping>
}
 800df26:	bf00      	nop
 800df28:	3708      	adds	r7, #8
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}

0800df2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800df2e:	b580      	push	{r7, lr}
 800df30:	b086      	sub	sp, #24
 800df32:	af00      	add	r7, sp, #0
 800df34:	4603      	mov	r3, r0
 800df36:	60b9      	str	r1, [r7, #8]
 800df38:	607a      	str	r2, [r7, #4]
 800df3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800df3c:	2300      	movs	r3, #0
 800df3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800df40:	f7ff ff3e 	bl	800ddc0 <__NVIC_GetPriorityGrouping>
 800df44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800df46:	687a      	ldr	r2, [r7, #4]
 800df48:	68b9      	ldr	r1, [r7, #8]
 800df4a:	6978      	ldr	r0, [r7, #20]
 800df4c:	f7ff ff8e 	bl	800de6c <NVIC_EncodePriority>
 800df50:	4602      	mov	r2, r0
 800df52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df56:	4611      	mov	r1, r2
 800df58:	4618      	mov	r0, r3
 800df5a:	f7ff ff5d 	bl	800de18 <__NVIC_SetPriority>
}
 800df5e:	bf00      	nop
 800df60:	3718      	adds	r7, #24
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}

0800df66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800df66:	b580      	push	{r7, lr}
 800df68:	b082      	sub	sp, #8
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	4603      	mov	r3, r0
 800df6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800df70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df74:	4618      	mov	r0, r3
 800df76:	f7ff ff31 	bl	800dddc <__NVIC_EnableIRQ>
}
 800df7a:	bf00      	nop
 800df7c:	3708      	adds	r7, #8
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}

0800df82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800df82:	b580      	push	{r7, lr}
 800df84:	b082      	sub	sp, #8
 800df86:	af00      	add	r7, sp, #0
 800df88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f7ff ffa2 	bl	800ded4 <SysTick_Config>
 800df90:	4603      	mov	r3, r0
}
 800df92:	4618      	mov	r0, r3
 800df94:	3708      	adds	r7, #8
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
	...

0800df9c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800df9c:	b480      	push	{r7}
 800df9e:	b085      	sub	sp, #20
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d101      	bne.n	800dfae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800dfaa:	2301      	movs	r3, #1
 800dfac:	e098      	b.n	800e0e0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	4b4d      	ldr	r3, [pc, #308]	; (800e0ec <HAL_DMA_Init+0x150>)
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d80f      	bhi.n	800dfda <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	4b4b      	ldr	r3, [pc, #300]	; (800e0f0 <HAL_DMA_Init+0x154>)
 800dfc2:	4413      	add	r3, r2
 800dfc4:	4a4b      	ldr	r2, [pc, #300]	; (800e0f4 <HAL_DMA_Init+0x158>)
 800dfc6:	fba2 2303 	umull	r2, r3, r2, r3
 800dfca:	091b      	lsrs	r3, r3, #4
 800dfcc:	009a      	lsls	r2, r3, #2
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	4a48      	ldr	r2, [pc, #288]	; (800e0f8 <HAL_DMA_Init+0x15c>)
 800dfd6:	641a      	str	r2, [r3, #64]	; 0x40
 800dfd8:	e00e      	b.n	800dff8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	461a      	mov	r2, r3
 800dfe0:	4b46      	ldr	r3, [pc, #280]	; (800e0fc <HAL_DMA_Init+0x160>)
 800dfe2:	4413      	add	r3, r2
 800dfe4:	4a43      	ldr	r2, [pc, #268]	; (800e0f4 <HAL_DMA_Init+0x158>)
 800dfe6:	fba2 2303 	umull	r2, r3, r2, r3
 800dfea:	091b      	lsrs	r3, r3, #4
 800dfec:	009a      	lsls	r2, r3, #2
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	4a42      	ldr	r2, [pc, #264]	; (800e100 <HAL_DMA_Init+0x164>)
 800dff6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2202      	movs	r2, #2
 800dffc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800e00e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e012:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800e01c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	691b      	ldr	r3, [r3, #16]
 800e022:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e028:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	699b      	ldr	r3, [r3, #24]
 800e02e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e034:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6a1b      	ldr	r3, [r3, #32]
 800e03a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800e03c:	68fa      	ldr	r2, [r7, #12]
 800e03e:	4313      	orrs	r3, r2
 800e040:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	68fa      	ldr	r2, [r7, #12]
 800e048:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	689b      	ldr	r3, [r3, #8]
 800e04e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e052:	d039      	beq.n	800e0c8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e058:	4a27      	ldr	r2, [pc, #156]	; (800e0f8 <HAL_DMA_Init+0x15c>)
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d11a      	bne.n	800e094 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800e05e:	4b29      	ldr	r3, [pc, #164]	; (800e104 <HAL_DMA_Init+0x168>)
 800e060:	681a      	ldr	r2, [r3, #0]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e066:	f003 031c 	and.w	r3, r3, #28
 800e06a:	210f      	movs	r1, #15
 800e06c:	fa01 f303 	lsl.w	r3, r1, r3
 800e070:	43db      	mvns	r3, r3
 800e072:	4924      	ldr	r1, [pc, #144]	; (800e104 <HAL_DMA_Init+0x168>)
 800e074:	4013      	ands	r3, r2
 800e076:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800e078:	4b22      	ldr	r3, [pc, #136]	; (800e104 <HAL_DMA_Init+0x168>)
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6859      	ldr	r1, [r3, #4]
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e084:	f003 031c 	and.w	r3, r3, #28
 800e088:	fa01 f303 	lsl.w	r3, r1, r3
 800e08c:	491d      	ldr	r1, [pc, #116]	; (800e104 <HAL_DMA_Init+0x168>)
 800e08e:	4313      	orrs	r3, r2
 800e090:	600b      	str	r3, [r1, #0]
 800e092:	e019      	b.n	800e0c8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800e094:	4b1c      	ldr	r3, [pc, #112]	; (800e108 <HAL_DMA_Init+0x16c>)
 800e096:	681a      	ldr	r2, [r3, #0]
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e09c:	f003 031c 	and.w	r3, r3, #28
 800e0a0:	210f      	movs	r1, #15
 800e0a2:	fa01 f303 	lsl.w	r3, r1, r3
 800e0a6:	43db      	mvns	r3, r3
 800e0a8:	4917      	ldr	r1, [pc, #92]	; (800e108 <HAL_DMA_Init+0x16c>)
 800e0aa:	4013      	ands	r3, r2
 800e0ac:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800e0ae:	4b16      	ldr	r3, [pc, #88]	; (800e108 <HAL_DMA_Init+0x16c>)
 800e0b0:	681a      	ldr	r2, [r3, #0]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6859      	ldr	r1, [r3, #4]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0ba:	f003 031c 	and.w	r3, r3, #28
 800e0be:	fa01 f303 	lsl.w	r3, r1, r3
 800e0c2:	4911      	ldr	r1, [pc, #68]	; (800e108 <HAL_DMA_Init+0x16c>)
 800e0c4:	4313      	orrs	r3, r2
 800e0c6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800e0de:	2300      	movs	r3, #0
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3714      	adds	r7, #20
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	4770      	bx	lr
 800e0ec:	40020407 	.word	0x40020407
 800e0f0:	bffdfff8 	.word	0xbffdfff8
 800e0f4:	cccccccd 	.word	0xcccccccd
 800e0f8:	40020000 	.word	0x40020000
 800e0fc:	bffdfbf8 	.word	0xbffdfbf8
 800e100:	40020400 	.word	0x40020400
 800e104:	400200a8 	.word	0x400200a8
 800e108:	400204a8 	.word	0x400204a8

0800e10c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b086      	sub	sp, #24
 800e110:	af00      	add	r7, sp, #0
 800e112:	60f8      	str	r0, [r7, #12]
 800e114:	60b9      	str	r1, [r7, #8]
 800e116:	607a      	str	r2, [r7, #4]
 800e118:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e11a:	2300      	movs	r3, #0
 800e11c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e124:	2b01      	cmp	r3, #1
 800e126:	d101      	bne.n	800e12c <HAL_DMA_Start_IT+0x20>
 800e128:	2302      	movs	r3, #2
 800e12a:	e04b      	b.n	800e1c4 <HAL_DMA_Start_IT+0xb8>
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2201      	movs	r2, #1
 800e130:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e13a:	b2db      	uxtb	r3, r3
 800e13c:	2b01      	cmp	r3, #1
 800e13e:	d13a      	bne.n	800e1b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2202      	movs	r2, #2
 800e144:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2200      	movs	r2, #0
 800e14c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	681a      	ldr	r2, [r3, #0]
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f022 0201 	bic.w	r2, r2, #1
 800e15c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	68b9      	ldr	r1, [r7, #8]
 800e164:	68f8      	ldr	r0, [r7, #12]
 800e166:	f000 f91e 	bl	800e3a6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d008      	beq.n	800e184 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	681a      	ldr	r2, [r3, #0]
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f042 020e 	orr.w	r2, r2, #14
 800e180:	601a      	str	r2, [r3, #0]
 800e182:	e00f      	b.n	800e1a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	681a      	ldr	r2, [r3, #0]
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	f022 0204 	bic.w	r2, r2, #4
 800e192:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	681a      	ldr	r2, [r3, #0]
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f042 020a 	orr.w	r2, r2, #10
 800e1a2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	681a      	ldr	r2, [r3, #0]
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f042 0201 	orr.w	r2, r2, #1
 800e1b2:	601a      	str	r2, [r3, #0]
 800e1b4:	e005      	b.n	800e1c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800e1be:	2302      	movs	r3, #2
 800e1c0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800e1c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3718      	adds	r7, #24
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	b085      	sub	sp, #20
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e1de:	b2db      	uxtb	r3, r3
 800e1e0:	2b02      	cmp	r3, #2
 800e1e2:	d008      	beq.n	800e1f6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2204      	movs	r2, #4
 800e1e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	e022      	b.n	800e23c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	681a      	ldr	r2, [r3, #0]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	f022 020e 	bic.w	r2, r2, #14
 800e204:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	681a      	ldr	r2, [r3, #0]
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	f022 0201 	bic.w	r2, r2, #1
 800e214:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e21a:	f003 021c 	and.w	r2, r3, #28
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e222:	2101      	movs	r1, #1
 800e224:	fa01 f202 	lsl.w	r2, r1, r2
 800e228:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2201      	movs	r2, #1
 800e22e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2200      	movs	r2, #0
 800e236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800e23a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3714      	adds	r7, #20
 800e240:	46bd      	mov	sp, r7
 800e242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e246:	4770      	bx	lr

0800e248 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b084      	sub	sp, #16
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e264:	f003 031c 	and.w	r3, r3, #28
 800e268:	2204      	movs	r2, #4
 800e26a:	409a      	lsls	r2, r3
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	4013      	ands	r3, r2
 800e270:	2b00      	cmp	r3, #0
 800e272:	d026      	beq.n	800e2c2 <HAL_DMA_IRQHandler+0x7a>
 800e274:	68bb      	ldr	r3, [r7, #8]
 800e276:	f003 0304 	and.w	r3, r3, #4
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d021      	beq.n	800e2c2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	f003 0320 	and.w	r3, r3, #32
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d107      	bne.n	800e29c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	681a      	ldr	r2, [r3, #0]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f022 0204 	bic.w	r2, r2, #4
 800e29a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2a0:	f003 021c 	and.w	r2, r3, #28
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2a8:	2104      	movs	r1, #4
 800e2aa:	fa01 f202 	lsl.w	r2, r1, r2
 800e2ae:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d071      	beq.n	800e39c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800e2c0:	e06c      	b.n	800e39c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2c6:	f003 031c 	and.w	r3, r3, #28
 800e2ca:	2202      	movs	r2, #2
 800e2cc:	409a      	lsls	r2, r3
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	4013      	ands	r3, r2
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d02e      	beq.n	800e334 <HAL_DMA_IRQHandler+0xec>
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	f003 0302 	and.w	r3, r3, #2
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d029      	beq.n	800e334 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	f003 0320 	and.w	r3, r3, #32
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d10b      	bne.n	800e306 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	681a      	ldr	r2, [r3, #0]
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f022 020a 	bic.w	r2, r2, #10
 800e2fc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2201      	movs	r2, #1
 800e302:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e30a:	f003 021c 	and.w	r2, r3, #28
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e312:	2102      	movs	r1, #2
 800e314:	fa01 f202 	lsl.w	r2, r1, r2
 800e318:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2200      	movs	r2, #0
 800e31e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e326:	2b00      	cmp	r3, #0
 800e328:	d038      	beq.n	800e39c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800e332:	e033      	b.n	800e39c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e338:	f003 031c 	and.w	r3, r3, #28
 800e33c:	2208      	movs	r2, #8
 800e33e:	409a      	lsls	r2, r3
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	4013      	ands	r3, r2
 800e344:	2b00      	cmp	r3, #0
 800e346:	d02a      	beq.n	800e39e <HAL_DMA_IRQHandler+0x156>
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	f003 0308 	and.w	r3, r3, #8
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d025      	beq.n	800e39e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	681a      	ldr	r2, [r3, #0]
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	f022 020e 	bic.w	r2, r2, #14
 800e360:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e366:	f003 021c 	and.w	r2, r3, #28
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e36e:	2101      	movs	r1, #1
 800e370:	fa01 f202 	lsl.w	r2, r1, r2
 800e374:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2201      	movs	r2, #1
 800e37a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2201      	movs	r2, #1
 800e380:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2200      	movs	r2, #0
 800e388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e390:	2b00      	cmp	r3, #0
 800e392:	d004      	beq.n	800e39e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800e39c:	bf00      	nop
 800e39e:	bf00      	nop
}
 800e3a0:	3710      	adds	r7, #16
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}

0800e3a6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e3a6:	b480      	push	{r7}
 800e3a8:	b085      	sub	sp, #20
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	60f8      	str	r0, [r7, #12]
 800e3ae:	60b9      	str	r1, [r7, #8]
 800e3b0:	607a      	str	r2, [r7, #4]
 800e3b2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3b8:	f003 021c 	and.w	r2, r3, #28
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3c0:	2101      	movs	r1, #1
 800e3c2:	fa01 f202 	lsl.w	r2, r1, r2
 800e3c6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	683a      	ldr	r2, [r7, #0]
 800e3ce:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	689b      	ldr	r3, [r3, #8]
 800e3d4:	2b10      	cmp	r3, #16
 800e3d6:	d108      	bne.n	800e3ea <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	687a      	ldr	r2, [r7, #4]
 800e3de:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	68ba      	ldr	r2, [r7, #8]
 800e3e6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800e3e8:	e007      	b.n	800e3fa <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	68ba      	ldr	r2, [r7, #8]
 800e3f0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	687a      	ldr	r2, [r7, #4]
 800e3f8:	60da      	str	r2, [r3, #12]
}
 800e3fa:	bf00      	nop
 800e3fc:	3714      	adds	r7, #20
 800e3fe:	46bd      	mov	sp, r7
 800e400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e404:	4770      	bx	lr
	...

0800e408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e408:	b480      	push	{r7}
 800e40a:	b087      	sub	sp, #28
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800e412:	2300      	movs	r3, #0
 800e414:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e416:	e148      	b.n	800e6aa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	681a      	ldr	r2, [r3, #0]
 800e41c:	2101      	movs	r1, #1
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	fa01 f303 	lsl.w	r3, r1, r3
 800e424:	4013      	ands	r3, r2
 800e426:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	f000 813a 	beq.w	800e6a4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	685b      	ldr	r3, [r3, #4]
 800e434:	2b01      	cmp	r3, #1
 800e436:	d00b      	beq.n	800e450 <HAL_GPIO_Init+0x48>
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	685b      	ldr	r3, [r3, #4]
 800e43c:	2b02      	cmp	r3, #2
 800e43e:	d007      	beq.n	800e450 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800e444:	2b11      	cmp	r3, #17
 800e446:	d003      	beq.n	800e450 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	685b      	ldr	r3, [r3, #4]
 800e44c:	2b12      	cmp	r3, #18
 800e44e:	d130      	bne.n	800e4b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	689b      	ldr	r3, [r3, #8]
 800e454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800e456:	697b      	ldr	r3, [r7, #20]
 800e458:	005b      	lsls	r3, r3, #1
 800e45a:	2203      	movs	r2, #3
 800e45c:	fa02 f303 	lsl.w	r3, r2, r3
 800e460:	43db      	mvns	r3, r3
 800e462:	693a      	ldr	r2, [r7, #16]
 800e464:	4013      	ands	r3, r2
 800e466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	68da      	ldr	r2, [r3, #12]
 800e46c:	697b      	ldr	r3, [r7, #20]
 800e46e:	005b      	lsls	r3, r3, #1
 800e470:	fa02 f303 	lsl.w	r3, r2, r3
 800e474:	693a      	ldr	r2, [r7, #16]
 800e476:	4313      	orrs	r3, r2
 800e478:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	693a      	ldr	r2, [r7, #16]
 800e47e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	685b      	ldr	r3, [r3, #4]
 800e484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e486:	2201      	movs	r2, #1
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	fa02 f303 	lsl.w	r3, r2, r3
 800e48e:	43db      	mvns	r3, r3
 800e490:	693a      	ldr	r2, [r7, #16]
 800e492:	4013      	ands	r3, r2
 800e494:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	685b      	ldr	r3, [r3, #4]
 800e49a:	091b      	lsrs	r3, r3, #4
 800e49c:	f003 0201 	and.w	r2, r3, #1
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	fa02 f303 	lsl.w	r3, r2, r3
 800e4a6:	693a      	ldr	r2, [r7, #16]
 800e4a8:	4313      	orrs	r3, r2
 800e4aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	693a      	ldr	r2, [r7, #16]
 800e4b0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	68db      	ldr	r3, [r3, #12]
 800e4b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	005b      	lsls	r3, r3, #1
 800e4bc:	2203      	movs	r2, #3
 800e4be:	fa02 f303 	lsl.w	r3, r2, r3
 800e4c2:	43db      	mvns	r3, r3
 800e4c4:	693a      	ldr	r2, [r7, #16]
 800e4c6:	4013      	ands	r3, r2
 800e4c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	689a      	ldr	r2, [r3, #8]
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	005b      	lsls	r3, r3, #1
 800e4d2:	fa02 f303 	lsl.w	r3, r2, r3
 800e4d6:	693a      	ldr	r2, [r7, #16]
 800e4d8:	4313      	orrs	r3, r2
 800e4da:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	693a      	ldr	r2, [r7, #16]
 800e4e0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	685b      	ldr	r3, [r3, #4]
 800e4e6:	2b02      	cmp	r3, #2
 800e4e8:	d003      	beq.n	800e4f2 <HAL_GPIO_Init+0xea>
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	685b      	ldr	r3, [r3, #4]
 800e4ee:	2b12      	cmp	r3, #18
 800e4f0:	d123      	bne.n	800e53a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	08da      	lsrs	r2, r3, #3
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	3208      	adds	r2, #8
 800e4fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	f003 0307 	and.w	r3, r3, #7
 800e506:	009b      	lsls	r3, r3, #2
 800e508:	220f      	movs	r2, #15
 800e50a:	fa02 f303 	lsl.w	r3, r2, r3
 800e50e:	43db      	mvns	r3, r3
 800e510:	693a      	ldr	r2, [r7, #16]
 800e512:	4013      	ands	r3, r2
 800e514:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	691a      	ldr	r2, [r3, #16]
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	f003 0307 	and.w	r3, r3, #7
 800e520:	009b      	lsls	r3, r3, #2
 800e522:	fa02 f303 	lsl.w	r3, r2, r3
 800e526:	693a      	ldr	r2, [r7, #16]
 800e528:	4313      	orrs	r3, r2
 800e52a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	08da      	lsrs	r2, r3, #3
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	3208      	adds	r2, #8
 800e534:	6939      	ldr	r1, [r7, #16]
 800e536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	005b      	lsls	r3, r3, #1
 800e544:	2203      	movs	r2, #3
 800e546:	fa02 f303 	lsl.w	r3, r2, r3
 800e54a:	43db      	mvns	r3, r3
 800e54c:	693a      	ldr	r2, [r7, #16]
 800e54e:	4013      	ands	r3, r2
 800e550:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	685b      	ldr	r3, [r3, #4]
 800e556:	f003 0203 	and.w	r2, r3, #3
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	005b      	lsls	r3, r3, #1
 800e55e:	fa02 f303 	lsl.w	r3, r2, r3
 800e562:	693a      	ldr	r2, [r7, #16]
 800e564:	4313      	orrs	r3, r2
 800e566:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	693a      	ldr	r2, [r7, #16]
 800e56c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e576:	2b00      	cmp	r3, #0
 800e578:	f000 8094 	beq.w	800e6a4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e57c:	4b52      	ldr	r3, [pc, #328]	; (800e6c8 <HAL_GPIO_Init+0x2c0>)
 800e57e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e580:	4a51      	ldr	r2, [pc, #324]	; (800e6c8 <HAL_GPIO_Init+0x2c0>)
 800e582:	f043 0301 	orr.w	r3, r3, #1
 800e586:	6613      	str	r3, [r2, #96]	; 0x60
 800e588:	4b4f      	ldr	r3, [pc, #316]	; (800e6c8 <HAL_GPIO_Init+0x2c0>)
 800e58a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e58c:	f003 0301 	and.w	r3, r3, #1
 800e590:	60bb      	str	r3, [r7, #8]
 800e592:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800e594:	4a4d      	ldr	r2, [pc, #308]	; (800e6cc <HAL_GPIO_Init+0x2c4>)
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	089b      	lsrs	r3, r3, #2
 800e59a:	3302      	adds	r3, #2
 800e59c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	f003 0303 	and.w	r3, r3, #3
 800e5a8:	009b      	lsls	r3, r3, #2
 800e5aa:	220f      	movs	r2, #15
 800e5ac:	fa02 f303 	lsl.w	r3, r2, r3
 800e5b0:	43db      	mvns	r3, r3
 800e5b2:	693a      	ldr	r2, [r7, #16]
 800e5b4:	4013      	ands	r3, r2
 800e5b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800e5be:	d00d      	beq.n	800e5dc <HAL_GPIO_Init+0x1d4>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	4a43      	ldr	r2, [pc, #268]	; (800e6d0 <HAL_GPIO_Init+0x2c8>)
 800e5c4:	4293      	cmp	r3, r2
 800e5c6:	d007      	beq.n	800e5d8 <HAL_GPIO_Init+0x1d0>
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	4a42      	ldr	r2, [pc, #264]	; (800e6d4 <HAL_GPIO_Init+0x2cc>)
 800e5cc:	4293      	cmp	r3, r2
 800e5ce:	d101      	bne.n	800e5d4 <HAL_GPIO_Init+0x1cc>
 800e5d0:	2302      	movs	r3, #2
 800e5d2:	e004      	b.n	800e5de <HAL_GPIO_Init+0x1d6>
 800e5d4:	2307      	movs	r3, #7
 800e5d6:	e002      	b.n	800e5de <HAL_GPIO_Init+0x1d6>
 800e5d8:	2301      	movs	r3, #1
 800e5da:	e000      	b.n	800e5de <HAL_GPIO_Init+0x1d6>
 800e5dc:	2300      	movs	r3, #0
 800e5de:	697a      	ldr	r2, [r7, #20]
 800e5e0:	f002 0203 	and.w	r2, r2, #3
 800e5e4:	0092      	lsls	r2, r2, #2
 800e5e6:	4093      	lsls	r3, r2
 800e5e8:	693a      	ldr	r2, [r7, #16]
 800e5ea:	4313      	orrs	r3, r2
 800e5ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800e5ee:	4937      	ldr	r1, [pc, #220]	; (800e6cc <HAL_GPIO_Init+0x2c4>)
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	089b      	lsrs	r3, r3, #2
 800e5f4:	3302      	adds	r3, #2
 800e5f6:	693a      	ldr	r2, [r7, #16]
 800e5f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800e5fc:	4b36      	ldr	r3, [pc, #216]	; (800e6d8 <HAL_GPIO_Init+0x2d0>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	43db      	mvns	r3, r3
 800e606:	693a      	ldr	r2, [r7, #16]
 800e608:	4013      	ands	r3, r2
 800e60a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	685b      	ldr	r3, [r3, #4]
 800e610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e614:	2b00      	cmp	r3, #0
 800e616:	d003      	beq.n	800e620 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800e618:	693a      	ldr	r2, [r7, #16]
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	4313      	orrs	r3, r2
 800e61e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800e620:	4a2d      	ldr	r2, [pc, #180]	; (800e6d8 <HAL_GPIO_Init+0x2d0>)
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800e626:	4b2c      	ldr	r3, [pc, #176]	; (800e6d8 <HAL_GPIO_Init+0x2d0>)
 800e628:	685b      	ldr	r3, [r3, #4]
 800e62a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	43db      	mvns	r3, r3
 800e630:	693a      	ldr	r2, [r7, #16]
 800e632:	4013      	ands	r3, r2
 800e634:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d003      	beq.n	800e64a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800e642:	693a      	ldr	r2, [r7, #16]
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	4313      	orrs	r3, r2
 800e648:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800e64a:	4a23      	ldr	r2, [pc, #140]	; (800e6d8 <HAL_GPIO_Init+0x2d0>)
 800e64c:	693b      	ldr	r3, [r7, #16]
 800e64e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e650:	4b21      	ldr	r3, [pc, #132]	; (800e6d8 <HAL_GPIO_Init+0x2d0>)
 800e652:	689b      	ldr	r3, [r3, #8]
 800e654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	43db      	mvns	r3, r3
 800e65a:	693a      	ldr	r2, [r7, #16]
 800e65c:	4013      	ands	r3, r2
 800e65e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d003      	beq.n	800e674 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800e66c:	693a      	ldr	r2, [r7, #16]
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	4313      	orrs	r3, r2
 800e672:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800e674:	4a18      	ldr	r2, [pc, #96]	; (800e6d8 <HAL_GPIO_Init+0x2d0>)
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800e67a:	4b17      	ldr	r3, [pc, #92]	; (800e6d8 <HAL_GPIO_Init+0x2d0>)
 800e67c:	68db      	ldr	r3, [r3, #12]
 800e67e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	43db      	mvns	r3, r3
 800e684:	693a      	ldr	r2, [r7, #16]
 800e686:	4013      	ands	r3, r2
 800e688:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	685b      	ldr	r3, [r3, #4]
 800e68e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e692:	2b00      	cmp	r3, #0
 800e694:	d003      	beq.n	800e69e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800e696:	693a      	ldr	r2, [r7, #16]
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	4313      	orrs	r3, r2
 800e69c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800e69e:	4a0e      	ldr	r2, [pc, #56]	; (800e6d8 <HAL_GPIO_Init+0x2d0>)
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	3301      	adds	r3, #1
 800e6a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	681a      	ldr	r2, [r3, #0]
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	fa22 f303 	lsr.w	r3, r2, r3
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	f47f aeaf 	bne.w	800e418 <HAL_GPIO_Init+0x10>
  }
}
 800e6ba:	bf00      	nop
 800e6bc:	bf00      	nop
 800e6be:	371c      	adds	r7, #28
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c6:	4770      	bx	lr
 800e6c8:	40021000 	.word	0x40021000
 800e6cc:	40010000 	.word	0x40010000
 800e6d0:	48000400 	.word	0x48000400
 800e6d4:	48000800 	.word	0x48000800
 800e6d8:	40010400 	.word	0x40010400

0800e6dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e6dc:	b480      	push	{r7}
 800e6de:	b085      	sub	sp, #20
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	460b      	mov	r3, r1
 800e6e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	691a      	ldr	r2, [r3, #16]
 800e6ec:	887b      	ldrh	r3, [r7, #2]
 800e6ee:	4013      	ands	r3, r2
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d002      	beq.n	800e6fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	73fb      	strb	r3, [r7, #15]
 800e6f8:	e001      	b.n	800e6fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e6fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800e700:	4618      	mov	r0, r3
 800e702:	3714      	adds	r7, #20
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr

0800e70c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b083      	sub	sp, #12
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	460b      	mov	r3, r1
 800e716:	807b      	strh	r3, [r7, #2]
 800e718:	4613      	mov	r3, r2
 800e71a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e71c:	787b      	ldrb	r3, [r7, #1]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d003      	beq.n	800e72a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800e722:	887a      	ldrh	r2, [r7, #2]
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800e728:	e002      	b.n	800e730 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800e72a:	887a      	ldrh	r2, [r7, #2]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800e730:	bf00      	nop
 800e732:	370c      	adds	r7, #12
 800e734:	46bd      	mov	sp, r7
 800e736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73a:	4770      	bx	lr

0800e73c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b082      	sub	sp, #8
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d101      	bne.n	800e74e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e74a:	2301      	movs	r3, #1
 800e74c:	e081      	b.n	800e852 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e754:	b2db      	uxtb	r3, r3
 800e756:	2b00      	cmp	r3, #0
 800e758:	d106      	bne.n	800e768 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2200      	movs	r2, #0
 800e75e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f7f5 fd18 	bl	8004198 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2224      	movs	r2, #36	; 0x24
 800e76c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	681a      	ldr	r2, [r3, #0]
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f022 0201 	bic.w	r2, r2, #1
 800e77e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	685a      	ldr	r2, [r3, #4]
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800e78c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	689a      	ldr	r2, [r3, #8]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e79c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	68db      	ldr	r3, [r3, #12]
 800e7a2:	2b01      	cmp	r3, #1
 800e7a4:	d107      	bne.n	800e7b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	689a      	ldr	r2, [r3, #8]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e7b2:	609a      	str	r2, [r3, #8]
 800e7b4:	e006      	b.n	800e7c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	689a      	ldr	r2, [r3, #8]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800e7c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	68db      	ldr	r3, [r3, #12]
 800e7c8:	2b02      	cmp	r3, #2
 800e7ca:	d104      	bne.n	800e7d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e7d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	685b      	ldr	r3, [r3, #4]
 800e7dc:	687a      	ldr	r2, [r7, #4]
 800e7de:	6812      	ldr	r2, [r2, #0]
 800e7e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e7e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e7e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	68da      	ldr	r2, [r3, #12]
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e7f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	691a      	ldr	r2, [r3, #16]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	695b      	ldr	r3, [r3, #20]
 800e802:	ea42 0103 	orr.w	r1, r2, r3
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	699b      	ldr	r3, [r3, #24]
 800e80a:	021a      	lsls	r2, r3, #8
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	430a      	orrs	r2, r1
 800e812:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	69d9      	ldr	r1, [r3, #28]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	6a1a      	ldr	r2, [r3, #32]
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	430a      	orrs	r2, r1
 800e822:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	681a      	ldr	r2, [r3, #0]
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	f042 0201 	orr.w	r2, r2, #1
 800e832:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2200      	movs	r2, #0
 800e838:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2220      	movs	r2, #32
 800e83e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2200      	movs	r2, #0
 800e846:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2200      	movs	r2, #0
 800e84c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800e850:	2300      	movs	r3, #0
}
 800e852:	4618      	mov	r0, r3
 800e854:	3708      	adds	r7, #8
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
	...

0800e85c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b088      	sub	sp, #32
 800e860:	af02      	add	r7, sp, #8
 800e862:	60f8      	str	r0, [r7, #12]
 800e864:	607a      	str	r2, [r7, #4]
 800e866:	461a      	mov	r2, r3
 800e868:	460b      	mov	r3, r1
 800e86a:	817b      	strh	r3, [r7, #10]
 800e86c:	4613      	mov	r3, r2
 800e86e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e876:	b2db      	uxtb	r3, r3
 800e878:	2b20      	cmp	r3, #32
 800e87a:	f040 80da 	bne.w	800ea32 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e884:	2b01      	cmp	r3, #1
 800e886:	d101      	bne.n	800e88c <HAL_I2C_Master_Transmit+0x30>
 800e888:	2302      	movs	r3, #2
 800e88a:	e0d3      	b.n	800ea34 <HAL_I2C_Master_Transmit+0x1d8>
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	2201      	movs	r2, #1
 800e890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e894:	f7fd fec4 	bl	800c620 <HAL_GetTick>
 800e898:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	9300      	str	r3, [sp, #0]
 800e89e:	2319      	movs	r3, #25
 800e8a0:	2201      	movs	r2, #1
 800e8a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e8a6:	68f8      	ldr	r0, [r7, #12]
 800e8a8:	f000 f8fc 	bl	800eaa4 <I2C_WaitOnFlagUntilTimeout>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d001      	beq.n	800e8b6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	e0be      	b.n	800ea34 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2221      	movs	r2, #33	; 0x21
 800e8ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	2210      	movs	r2, #16
 800e8c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	687a      	ldr	r2, [r7, #4]
 800e8d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	893a      	ldrh	r2, [r7, #8]
 800e8d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	2200      	movs	r2, #0
 800e8dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e8e2:	b29b      	uxth	r3, r3
 800e8e4:	2bff      	cmp	r3, #255	; 0xff
 800e8e6:	d90e      	bls.n	800e906 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	22ff      	movs	r2, #255	; 0xff
 800e8ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8f2:	b2da      	uxtb	r2, r3
 800e8f4:	8979      	ldrh	r1, [r7, #10]
 800e8f6:	4b51      	ldr	r3, [pc, #324]	; (800ea3c <HAL_I2C_Master_Transmit+0x1e0>)
 800e8f8:	9300      	str	r3, [sp, #0]
 800e8fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e8fe:	68f8      	ldr	r0, [r7, #12]
 800e900:	f000 f9f2 	bl	800ece8 <I2C_TransferConfig>
 800e904:	e06c      	b.n	800e9e0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e90a:	b29a      	uxth	r2, r3
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e914:	b2da      	uxtb	r2, r3
 800e916:	8979      	ldrh	r1, [r7, #10]
 800e918:	4b48      	ldr	r3, [pc, #288]	; (800ea3c <HAL_I2C_Master_Transmit+0x1e0>)
 800e91a:	9300      	str	r3, [sp, #0]
 800e91c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e920:	68f8      	ldr	r0, [r7, #12]
 800e922:	f000 f9e1 	bl	800ece8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800e926:	e05b      	b.n	800e9e0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e928:	697a      	ldr	r2, [r7, #20]
 800e92a:	6a39      	ldr	r1, [r7, #32]
 800e92c:	68f8      	ldr	r0, [r7, #12]
 800e92e:	f000 f8f9 	bl	800eb24 <I2C_WaitOnTXISFlagUntilTimeout>
 800e932:	4603      	mov	r3, r0
 800e934:	2b00      	cmp	r3, #0
 800e936:	d001      	beq.n	800e93c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800e938:	2301      	movs	r3, #1
 800e93a:	e07b      	b.n	800ea34 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e940:	781a      	ldrb	r2, [r3, #0]
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e94c:	1c5a      	adds	r2, r3, #1
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e956:	b29b      	uxth	r3, r3
 800e958:	3b01      	subs	r3, #1
 800e95a:	b29a      	uxth	r2, r3
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e964:	3b01      	subs	r3, #1
 800e966:	b29a      	uxth	r2, r3
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e970:	b29b      	uxth	r3, r3
 800e972:	2b00      	cmp	r3, #0
 800e974:	d034      	beq.n	800e9e0 <HAL_I2C_Master_Transmit+0x184>
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d130      	bne.n	800e9e0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	9300      	str	r3, [sp, #0]
 800e982:	6a3b      	ldr	r3, [r7, #32]
 800e984:	2200      	movs	r2, #0
 800e986:	2180      	movs	r1, #128	; 0x80
 800e988:	68f8      	ldr	r0, [r7, #12]
 800e98a:	f000 f88b 	bl	800eaa4 <I2C_WaitOnFlagUntilTimeout>
 800e98e:	4603      	mov	r3, r0
 800e990:	2b00      	cmp	r3, #0
 800e992:	d001      	beq.n	800e998 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800e994:	2301      	movs	r3, #1
 800e996:	e04d      	b.n	800ea34 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	2bff      	cmp	r3, #255	; 0xff
 800e9a0:	d90e      	bls.n	800e9c0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	22ff      	movs	r2, #255	; 0xff
 800e9a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e9ac:	b2da      	uxtb	r2, r3
 800e9ae:	8979      	ldrh	r1, [r7, #10]
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	9300      	str	r3, [sp, #0]
 800e9b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e9b8:	68f8      	ldr	r0, [r7, #12]
 800e9ba:	f000 f995 	bl	800ece8 <I2C_TransferConfig>
 800e9be:	e00f      	b.n	800e9e0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e9c4:	b29a      	uxth	r2, r3
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e9ce:	b2da      	uxtb	r2, r3
 800e9d0:	8979      	ldrh	r1, [r7, #10]
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	9300      	str	r3, [sp, #0]
 800e9d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e9da:	68f8      	ldr	r0, [r7, #12]
 800e9dc:	f000 f984 	bl	800ece8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e9e4:	b29b      	uxth	r3, r3
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d19e      	bne.n	800e928 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e9ea:	697a      	ldr	r2, [r7, #20]
 800e9ec:	6a39      	ldr	r1, [r7, #32]
 800e9ee:	68f8      	ldr	r0, [r7, #12]
 800e9f0:	f000 f8d8 	bl	800eba4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d001      	beq.n	800e9fe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	e01a      	b.n	800ea34 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	2220      	movs	r2, #32
 800ea04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	6859      	ldr	r1, [r3, #4]
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	681a      	ldr	r2, [r3, #0]
 800ea10:	4b0b      	ldr	r3, [pc, #44]	; (800ea40 <HAL_I2C_Master_Transmit+0x1e4>)
 800ea12:	400b      	ands	r3, r1
 800ea14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	2220      	movs	r2, #32
 800ea1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	2200      	movs	r2, #0
 800ea22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	2200      	movs	r2, #0
 800ea2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	e000      	b.n	800ea34 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800ea32:	2302      	movs	r3, #2
  }
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3718      	adds	r7, #24
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	80002000 	.word	0x80002000
 800ea40:	fe00e800 	.word	0xfe00e800

0800ea44 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800ea44:	b480      	push	{r7}
 800ea46:	b083      	sub	sp, #12
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	370c      	adds	r7, #12
 800ea54:	46bd      	mov	sp, r7
 800ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5a:	4770      	bx	lr

0800ea5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b083      	sub	sp, #12
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	699b      	ldr	r3, [r3, #24]
 800ea6a:	f003 0302 	and.w	r3, r3, #2
 800ea6e:	2b02      	cmp	r3, #2
 800ea70:	d103      	bne.n	800ea7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	2200      	movs	r2, #0
 800ea78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	699b      	ldr	r3, [r3, #24]
 800ea80:	f003 0301 	and.w	r3, r3, #1
 800ea84:	2b01      	cmp	r3, #1
 800ea86:	d007      	beq.n	800ea98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	699a      	ldr	r2, [r3, #24]
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	f042 0201 	orr.w	r2, r2, #1
 800ea96:	619a      	str	r2, [r3, #24]
  }
}
 800ea98:	bf00      	nop
 800ea9a:	370c      	adds	r7, #12
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa2:	4770      	bx	lr

0800eaa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b084      	sub	sp, #16
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	60f8      	str	r0, [r7, #12]
 800eaac:	60b9      	str	r1, [r7, #8]
 800eaae:	603b      	str	r3, [r7, #0]
 800eab0:	4613      	mov	r3, r2
 800eab2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800eab4:	e022      	b.n	800eafc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eabc:	d01e      	beq.n	800eafc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eabe:	f7fd fdaf 	bl	800c620 <HAL_GetTick>
 800eac2:	4602      	mov	r2, r0
 800eac4:	69bb      	ldr	r3, [r7, #24]
 800eac6:	1ad3      	subs	r3, r2, r3
 800eac8:	683a      	ldr	r2, [r7, #0]
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d302      	bcc.n	800ead4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d113      	bne.n	800eafc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ead8:	f043 0220 	orr.w	r2, r3, #32
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	2220      	movs	r2, #32
 800eae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2200      	movs	r2, #0
 800eaec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800eaf8:	2301      	movs	r3, #1
 800eafa:	e00f      	b.n	800eb1c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	699a      	ldr	r2, [r3, #24]
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	4013      	ands	r3, r2
 800eb06:	68ba      	ldr	r2, [r7, #8]
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	bf0c      	ite	eq
 800eb0c:	2301      	moveq	r3, #1
 800eb0e:	2300      	movne	r3, #0
 800eb10:	b2db      	uxtb	r3, r3
 800eb12:	461a      	mov	r2, r3
 800eb14:	79fb      	ldrb	r3, [r7, #7]
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d0cd      	beq.n	800eab6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800eb1a:	2300      	movs	r3, #0
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3710      	adds	r7, #16
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b084      	sub	sp, #16
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800eb30:	e02c      	b.n	800eb8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800eb32:	687a      	ldr	r2, [r7, #4]
 800eb34:	68b9      	ldr	r1, [r7, #8]
 800eb36:	68f8      	ldr	r0, [r7, #12]
 800eb38:	f000 f870 	bl	800ec1c <I2C_IsAcknowledgeFailed>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d001      	beq.n	800eb46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800eb42:	2301      	movs	r3, #1
 800eb44:	e02a      	b.n	800eb9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb4c:	d01e      	beq.n	800eb8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb4e:	f7fd fd67 	bl	800c620 <HAL_GetTick>
 800eb52:	4602      	mov	r2, r0
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	1ad3      	subs	r3, r2, r3
 800eb58:	68ba      	ldr	r2, [r7, #8]
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d302      	bcc.n	800eb64 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d113      	bne.n	800eb8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb68:	f043 0220 	orr.w	r2, r3, #32
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	2220      	movs	r2, #32
 800eb74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	2200      	movs	r2, #0
 800eb84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800eb88:	2301      	movs	r3, #1
 800eb8a:	e007      	b.n	800eb9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	699b      	ldr	r3, [r3, #24]
 800eb92:	f003 0302 	and.w	r3, r3, #2
 800eb96:	2b02      	cmp	r3, #2
 800eb98:	d1cb      	bne.n	800eb32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800eb9a:	2300      	movs	r3, #0
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3710      	adds	r7, #16
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b084      	sub	sp, #16
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	60f8      	str	r0, [r7, #12]
 800ebac:	60b9      	str	r1, [r7, #8]
 800ebae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ebb0:	e028      	b.n	800ec04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800ebb2:	687a      	ldr	r2, [r7, #4]
 800ebb4:	68b9      	ldr	r1, [r7, #8]
 800ebb6:	68f8      	ldr	r0, [r7, #12]
 800ebb8:	f000 f830 	bl	800ec1c <I2C_IsAcknowledgeFailed>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d001      	beq.n	800ebc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	e026      	b.n	800ec14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ebc6:	f7fd fd2b 	bl	800c620 <HAL_GetTick>
 800ebca:	4602      	mov	r2, r0
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	1ad3      	subs	r3, r2, r3
 800ebd0:	68ba      	ldr	r2, [r7, #8]
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d302      	bcc.n	800ebdc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d113      	bne.n	800ec04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebe0:	f043 0220 	orr.w	r2, r3, #32
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2220      	movs	r2, #32
 800ebec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ec00:	2301      	movs	r3, #1
 800ec02:	e007      	b.n	800ec14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	699b      	ldr	r3, [r3, #24]
 800ec0a:	f003 0320 	and.w	r3, r3, #32
 800ec0e:	2b20      	cmp	r3, #32
 800ec10:	d1cf      	bne.n	800ebb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ec12:	2300      	movs	r3, #0
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3710      	adds	r7, #16
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b084      	sub	sp, #16
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	60f8      	str	r0, [r7, #12]
 800ec24:	60b9      	str	r1, [r7, #8]
 800ec26:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	699b      	ldr	r3, [r3, #24]
 800ec2e:	f003 0310 	and.w	r3, r3, #16
 800ec32:	2b10      	cmp	r3, #16
 800ec34:	d151      	bne.n	800ecda <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ec36:	e022      	b.n	800ec7e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec3e:	d01e      	beq.n	800ec7e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ec40:	f7fd fcee 	bl	800c620 <HAL_GetTick>
 800ec44:	4602      	mov	r2, r0
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	1ad3      	subs	r3, r2, r3
 800ec4a:	68ba      	ldr	r2, [r7, #8]
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d302      	bcc.n	800ec56 <I2C_IsAcknowledgeFailed+0x3a>
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d113      	bne.n	800ec7e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec5a:	f043 0220 	orr.w	r2, r3, #32
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2220      	movs	r2, #32
 800ec66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	2200      	movs	r2, #0
 800ec76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	e02e      	b.n	800ecdc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	699b      	ldr	r3, [r3, #24]
 800ec84:	f003 0320 	and.w	r3, r3, #32
 800ec88:	2b20      	cmp	r3, #32
 800ec8a:	d1d5      	bne.n	800ec38 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	2210      	movs	r2, #16
 800ec92:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	2220      	movs	r2, #32
 800ec9a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ec9c:	68f8      	ldr	r0, [r7, #12]
 800ec9e:	f7ff fedd 	bl	800ea5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	6859      	ldr	r1, [r3, #4]
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	681a      	ldr	r2, [r3, #0]
 800ecac:	4b0d      	ldr	r3, [pc, #52]	; (800ece4 <I2C_IsAcknowledgeFailed+0xc8>)
 800ecae:	400b      	ands	r3, r1
 800ecb0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecb6:	f043 0204 	orr.w	r2, r3, #4
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	2220      	movs	r2, #32
 800ecc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	e000      	b.n	800ecdc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800ecda:	2300      	movs	r3, #0
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3710      	adds	r7, #16
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}
 800ece4:	fe00e800 	.word	0xfe00e800

0800ece8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b085      	sub	sp, #20
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	60f8      	str	r0, [r7, #12]
 800ecf0:	607b      	str	r3, [r7, #4]
 800ecf2:	460b      	mov	r3, r1
 800ecf4:	817b      	strh	r3, [r7, #10]
 800ecf6:	4613      	mov	r3, r2
 800ecf8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	685a      	ldr	r2, [r3, #4]
 800ed00:	69bb      	ldr	r3, [r7, #24]
 800ed02:	0d5b      	lsrs	r3, r3, #21
 800ed04:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ed08:	4b0d      	ldr	r3, [pc, #52]	; (800ed40 <I2C_TransferConfig+0x58>)
 800ed0a:	430b      	orrs	r3, r1
 800ed0c:	43db      	mvns	r3, r3
 800ed0e:	ea02 0103 	and.w	r1, r2, r3
 800ed12:	897b      	ldrh	r3, [r7, #10]
 800ed14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ed18:	7a7b      	ldrb	r3, [r7, #9]
 800ed1a:	041b      	lsls	r3, r3, #16
 800ed1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ed20:	431a      	orrs	r2, r3
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	431a      	orrs	r2, r3
 800ed26:	69bb      	ldr	r3, [r7, #24]
 800ed28:	431a      	orrs	r2, r3
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	430a      	orrs	r2, r1
 800ed30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800ed32:	bf00      	nop
 800ed34:	3714      	adds	r7, #20
 800ed36:	46bd      	mov	sp, r7
 800ed38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3c:	4770      	bx	lr
 800ed3e:	bf00      	nop
 800ed40:	03ff63ff 	.word	0x03ff63ff

0800ed44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ed44:	b480      	push	{r7}
 800ed46:	b083      	sub	sp, #12
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ed54:	b2db      	uxtb	r3, r3
 800ed56:	2b20      	cmp	r3, #32
 800ed58:	d138      	bne.n	800edcc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ed60:	2b01      	cmp	r3, #1
 800ed62:	d101      	bne.n	800ed68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ed64:	2302      	movs	r3, #2
 800ed66:	e032      	b.n	800edce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2224      	movs	r2, #36	; 0x24
 800ed74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	f022 0201 	bic.w	r2, r2, #1
 800ed86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	681a      	ldr	r2, [r3, #0]
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ed96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	6819      	ldr	r1, [r3, #0]
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	683a      	ldr	r2, [r7, #0]
 800eda4:	430a      	orrs	r2, r1
 800eda6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	681a      	ldr	r2, [r3, #0]
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	f042 0201 	orr.w	r2, r2, #1
 800edb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2220      	movs	r2, #32
 800edbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2200      	movs	r2, #0
 800edc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800edc8:	2300      	movs	r3, #0
 800edca:	e000      	b.n	800edce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800edcc:	2302      	movs	r3, #2
  }
}
 800edce:	4618      	mov	r0, r3
 800edd0:	370c      	adds	r7, #12
 800edd2:	46bd      	mov	sp, r7
 800edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd8:	4770      	bx	lr

0800edda <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800edda:	b480      	push	{r7}
 800eddc:	b085      	sub	sp, #20
 800edde:	af00      	add	r7, sp, #0
 800ede0:	6078      	str	r0, [r7, #4]
 800ede2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800edea:	b2db      	uxtb	r3, r3
 800edec:	2b20      	cmp	r3, #32
 800edee:	d139      	bne.n	800ee64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800edf6:	2b01      	cmp	r3, #1
 800edf8:	d101      	bne.n	800edfe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800edfa:	2302      	movs	r3, #2
 800edfc:	e033      	b.n	800ee66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2201      	movs	r2, #1
 800ee02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2224      	movs	r2, #36	; 0x24
 800ee0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	681a      	ldr	r2, [r3, #0]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	f022 0201 	bic.w	r2, r2, #1
 800ee1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ee2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	021b      	lsls	r3, r3, #8
 800ee32:	68fa      	ldr	r2, [r7, #12]
 800ee34:	4313      	orrs	r3, r2
 800ee36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	68fa      	ldr	r2, [r7, #12]
 800ee3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	681a      	ldr	r2, [r3, #0]
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	f042 0201 	orr.w	r2, r2, #1
 800ee4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2220      	movs	r2, #32
 800ee54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ee60:	2300      	movs	r3, #0
 800ee62:	e000      	b.n	800ee66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ee64:	2302      	movs	r3, #2
  }
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3714      	adds	r7, #20
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee70:	4770      	bx	lr
	...

0800ee74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800ee74:	b480      	push	{r7}
 800ee76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800ee78:	4b04      	ldr	r3, [pc, #16]	; (800ee8c <HAL_PWREx_GetVoltageRange+0x18>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	46bd      	mov	sp, r7
 800ee84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee88:	4770      	bx	lr
 800ee8a:	bf00      	nop
 800ee8c:	40007000 	.word	0x40007000

0800ee90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ee90:	b480      	push	{r7}
 800ee92:	b085      	sub	sp, #20
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee9e:	d130      	bne.n	800ef02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800eea0:	4b23      	ldr	r3, [pc, #140]	; (800ef30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800eea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eeac:	d038      	beq.n	800ef20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800eeae:	4b20      	ldr	r3, [pc, #128]	; (800ef30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800eeb6:	4a1e      	ldr	r2, [pc, #120]	; (800ef30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800eeb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800eebc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800eebe:	4b1d      	ldr	r3, [pc, #116]	; (800ef34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	2232      	movs	r2, #50	; 0x32
 800eec4:	fb02 f303 	mul.w	r3, r2, r3
 800eec8:	4a1b      	ldr	r2, [pc, #108]	; (800ef38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800eeca:	fba2 2303 	umull	r2, r3, r2, r3
 800eece:	0c9b      	lsrs	r3, r3, #18
 800eed0:	3301      	adds	r3, #1
 800eed2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800eed4:	e002      	b.n	800eedc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	3b01      	subs	r3, #1
 800eeda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800eedc:	4b14      	ldr	r3, [pc, #80]	; (800ef30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800eede:	695b      	ldr	r3, [r3, #20]
 800eee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eee8:	d102      	bne.n	800eef0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d1f2      	bne.n	800eed6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800eef0:	4b0f      	ldr	r3, [pc, #60]	; (800ef30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800eef2:	695b      	ldr	r3, [r3, #20]
 800eef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eefc:	d110      	bne.n	800ef20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800eefe:	2303      	movs	r3, #3
 800ef00:	e00f      	b.n	800ef22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800ef02:	4b0b      	ldr	r3, [pc, #44]	; (800ef30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ef0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef0e:	d007      	beq.n	800ef20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ef10:	4b07      	ldr	r3, [pc, #28]	; (800ef30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ef18:	4a05      	ldr	r2, [pc, #20]	; (800ef30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ef1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ef1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800ef20:	2300      	movs	r3, #0
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3714      	adds	r7, #20
 800ef26:	46bd      	mov	sp, r7
 800ef28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2c:	4770      	bx	lr
 800ef2e:	bf00      	nop
 800ef30:	40007000 	.word	0x40007000
 800ef34:	20000000 	.word	0x20000000
 800ef38:	431bde83 	.word	0x431bde83

0800ef3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b088      	sub	sp, #32
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d102      	bne.n	800ef50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	f000 bc10 	b.w	800f770 <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ef50:	4b96      	ldr	r3, [pc, #600]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800ef52:	689b      	ldr	r3, [r3, #8]
 800ef54:	f003 030c 	and.w	r3, r3, #12
 800ef58:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ef5a:	4b94      	ldr	r3, [pc, #592]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800ef5c:	68db      	ldr	r3, [r3, #12]
 800ef5e:	f003 0303 	and.w	r3, r3, #3
 800ef62:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f003 0310 	and.w	r3, r3, #16
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	f000 80e4 	beq.w	800f13a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ef72:	69bb      	ldr	r3, [r7, #24]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d007      	beq.n	800ef88 <HAL_RCC_OscConfig+0x4c>
 800ef78:	69bb      	ldr	r3, [r7, #24]
 800ef7a:	2b0c      	cmp	r3, #12
 800ef7c:	f040 808b 	bne.w	800f096 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	2b01      	cmp	r3, #1
 800ef84:	f040 8087 	bne.w	800f096 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ef88:	4b88      	ldr	r3, [pc, #544]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	f003 0302 	and.w	r3, r3, #2
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d005      	beq.n	800efa0 <HAL_RCC_OscConfig+0x64>
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	699b      	ldr	r3, [r3, #24]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d101      	bne.n	800efa0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800ef9c:	2301      	movs	r3, #1
 800ef9e:	e3e7      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6a1a      	ldr	r2, [r3, #32]
 800efa4:	4b81      	ldr	r3, [pc, #516]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	f003 0308 	and.w	r3, r3, #8
 800efac:	2b00      	cmp	r3, #0
 800efae:	d004      	beq.n	800efba <HAL_RCC_OscConfig+0x7e>
 800efb0:	4b7e      	ldr	r3, [pc, #504]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800efb8:	e005      	b.n	800efc6 <HAL_RCC_OscConfig+0x8a>
 800efba:	4b7c      	ldr	r3, [pc, #496]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800efbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800efc0:	091b      	lsrs	r3, r3, #4
 800efc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800efc6:	4293      	cmp	r3, r2
 800efc8:	d223      	bcs.n	800f012 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6a1b      	ldr	r3, [r3, #32]
 800efce:	4618      	mov	r0, r3
 800efd0:	f000 fd7a 	bl	800fac8 <RCC_SetFlashLatencyFromMSIRange>
 800efd4:	4603      	mov	r3, r0
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d001      	beq.n	800efde <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800efda:	2301      	movs	r3, #1
 800efdc:	e3c8      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800efde:	4b73      	ldr	r3, [pc, #460]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	4a72      	ldr	r2, [pc, #456]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800efe4:	f043 0308 	orr.w	r3, r3, #8
 800efe8:	6013      	str	r3, [r2, #0]
 800efea:	4b70      	ldr	r3, [pc, #448]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	6a1b      	ldr	r3, [r3, #32]
 800eff6:	496d      	ldr	r1, [pc, #436]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800eff8:	4313      	orrs	r3, r2
 800effa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800effc:	4b6b      	ldr	r3, [pc, #428]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800effe:	685b      	ldr	r3, [r3, #4]
 800f000:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	69db      	ldr	r3, [r3, #28]
 800f008:	021b      	lsls	r3, r3, #8
 800f00a:	4968      	ldr	r1, [pc, #416]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f00c:	4313      	orrs	r3, r2
 800f00e:	604b      	str	r3, [r1, #4]
 800f010:	e025      	b.n	800f05e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f012:	4b66      	ldr	r3, [pc, #408]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	4a65      	ldr	r2, [pc, #404]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f018:	f043 0308 	orr.w	r3, r3, #8
 800f01c:	6013      	str	r3, [r2, #0]
 800f01e:	4b63      	ldr	r3, [pc, #396]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6a1b      	ldr	r3, [r3, #32]
 800f02a:	4960      	ldr	r1, [pc, #384]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f02c:	4313      	orrs	r3, r2
 800f02e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f030:	4b5e      	ldr	r3, [pc, #376]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f032:	685b      	ldr	r3, [r3, #4]
 800f034:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	69db      	ldr	r3, [r3, #28]
 800f03c:	021b      	lsls	r3, r3, #8
 800f03e:	495b      	ldr	r1, [pc, #364]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f040:	4313      	orrs	r3, r2
 800f042:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f044:	69bb      	ldr	r3, [r7, #24]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d109      	bne.n	800f05e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6a1b      	ldr	r3, [r3, #32]
 800f04e:	4618      	mov	r0, r3
 800f050:	f000 fd3a 	bl	800fac8 <RCC_SetFlashLatencyFromMSIRange>
 800f054:	4603      	mov	r3, r0
 800f056:	2b00      	cmp	r3, #0
 800f058:	d001      	beq.n	800f05e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800f05a:	2301      	movs	r3, #1
 800f05c:	e388      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800f05e:	f000 fc6f 	bl	800f940 <HAL_RCC_GetSysClockFreq>
 800f062:	4602      	mov	r2, r0
 800f064:	4b51      	ldr	r3, [pc, #324]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f066:	689b      	ldr	r3, [r3, #8]
 800f068:	091b      	lsrs	r3, r3, #4
 800f06a:	f003 030f 	and.w	r3, r3, #15
 800f06e:	4950      	ldr	r1, [pc, #320]	; (800f1b0 <HAL_RCC_OscConfig+0x274>)
 800f070:	5ccb      	ldrb	r3, [r1, r3]
 800f072:	f003 031f 	and.w	r3, r3, #31
 800f076:	fa22 f303 	lsr.w	r3, r2, r3
 800f07a:	4a4e      	ldr	r2, [pc, #312]	; (800f1b4 <HAL_RCC_OscConfig+0x278>)
 800f07c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800f07e:	4b4e      	ldr	r3, [pc, #312]	; (800f1b8 <HAL_RCC_OscConfig+0x27c>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	4618      	mov	r0, r3
 800f084:	f7fd fa7c 	bl	800c580 <HAL_InitTick>
 800f088:	4603      	mov	r3, r0
 800f08a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800f08c:	7bfb      	ldrb	r3, [r7, #15]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d052      	beq.n	800f138 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800f092:	7bfb      	ldrb	r3, [r7, #15]
 800f094:	e36c      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	699b      	ldr	r3, [r3, #24]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d032      	beq.n	800f104 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800f09e:	4b43      	ldr	r3, [pc, #268]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	4a42      	ldr	r2, [pc, #264]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f0a4:	f043 0301 	orr.w	r3, r3, #1
 800f0a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f0aa:	f7fd fab9 	bl	800c620 <HAL_GetTick>
 800f0ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f0b0:	e008      	b.n	800f0c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f0b2:	f7fd fab5 	bl	800c620 <HAL_GetTick>
 800f0b6:	4602      	mov	r2, r0
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	1ad3      	subs	r3, r2, r3
 800f0bc:	2b02      	cmp	r3, #2
 800f0be:	d901      	bls.n	800f0c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800f0c0:	2303      	movs	r3, #3
 800f0c2:	e355      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f0c4:	4b39      	ldr	r3, [pc, #228]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f003 0302 	and.w	r3, r3, #2
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d0f0      	beq.n	800f0b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f0d0:	4b36      	ldr	r3, [pc, #216]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	4a35      	ldr	r2, [pc, #212]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f0d6:	f043 0308 	orr.w	r3, r3, #8
 800f0da:	6013      	str	r3, [r2, #0]
 800f0dc:	4b33      	ldr	r3, [pc, #204]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6a1b      	ldr	r3, [r3, #32]
 800f0e8:	4930      	ldr	r1, [pc, #192]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f0ea:	4313      	orrs	r3, r2
 800f0ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f0ee:	4b2f      	ldr	r3, [pc, #188]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f0f0:	685b      	ldr	r3, [r3, #4]
 800f0f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	69db      	ldr	r3, [r3, #28]
 800f0fa:	021b      	lsls	r3, r3, #8
 800f0fc:	492b      	ldr	r1, [pc, #172]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f0fe:	4313      	orrs	r3, r2
 800f100:	604b      	str	r3, [r1, #4]
 800f102:	e01a      	b.n	800f13a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800f104:	4b29      	ldr	r3, [pc, #164]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	4a28      	ldr	r2, [pc, #160]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f10a:	f023 0301 	bic.w	r3, r3, #1
 800f10e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f110:	f7fd fa86 	bl	800c620 <HAL_GetTick>
 800f114:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f116:	e008      	b.n	800f12a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f118:	f7fd fa82 	bl	800c620 <HAL_GetTick>
 800f11c:	4602      	mov	r2, r0
 800f11e:	693b      	ldr	r3, [r7, #16]
 800f120:	1ad3      	subs	r3, r2, r3
 800f122:	2b02      	cmp	r3, #2
 800f124:	d901      	bls.n	800f12a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800f126:	2303      	movs	r3, #3
 800f128:	e322      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f12a:	4b20      	ldr	r3, [pc, #128]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	f003 0302 	and.w	r3, r3, #2
 800f132:	2b00      	cmp	r3, #0
 800f134:	d1f0      	bne.n	800f118 <HAL_RCC_OscConfig+0x1dc>
 800f136:	e000      	b.n	800f13a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f138:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	f003 0301 	and.w	r3, r3, #1
 800f142:	2b00      	cmp	r3, #0
 800f144:	d073      	beq.n	800f22e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800f146:	69bb      	ldr	r3, [r7, #24]
 800f148:	2b08      	cmp	r3, #8
 800f14a:	d005      	beq.n	800f158 <HAL_RCC_OscConfig+0x21c>
 800f14c:	69bb      	ldr	r3, [r7, #24]
 800f14e:	2b0c      	cmp	r3, #12
 800f150:	d10e      	bne.n	800f170 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	2b03      	cmp	r3, #3
 800f156:	d10b      	bne.n	800f170 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f158:	4b14      	ldr	r3, [pc, #80]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f160:	2b00      	cmp	r3, #0
 800f162:	d063      	beq.n	800f22c <HAL_RCC_OscConfig+0x2f0>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	685b      	ldr	r3, [r3, #4]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d15f      	bne.n	800f22c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800f16c:	2301      	movs	r3, #1
 800f16e:	e2ff      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	685b      	ldr	r3, [r3, #4]
 800f174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f178:	d106      	bne.n	800f188 <HAL_RCC_OscConfig+0x24c>
 800f17a:	4b0c      	ldr	r3, [pc, #48]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	4a0b      	ldr	r2, [pc, #44]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f184:	6013      	str	r3, [r2, #0]
 800f186:	e025      	b.n	800f1d4 <HAL_RCC_OscConfig+0x298>
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	685b      	ldr	r3, [r3, #4]
 800f18c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f190:	d114      	bne.n	800f1bc <HAL_RCC_OscConfig+0x280>
 800f192:	4b06      	ldr	r3, [pc, #24]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	4a05      	ldr	r2, [pc, #20]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f19c:	6013      	str	r3, [r2, #0]
 800f19e:	4b03      	ldr	r3, [pc, #12]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	4a02      	ldr	r2, [pc, #8]	; (800f1ac <HAL_RCC_OscConfig+0x270>)
 800f1a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f1a8:	6013      	str	r3, [r2, #0]
 800f1aa:	e013      	b.n	800f1d4 <HAL_RCC_OscConfig+0x298>
 800f1ac:	40021000 	.word	0x40021000
 800f1b0:	08014f70 	.word	0x08014f70
 800f1b4:	20000000 	.word	0x20000000
 800f1b8:	20000004 	.word	0x20000004
 800f1bc:	4ba0      	ldr	r3, [pc, #640]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	4a9f      	ldr	r2, [pc, #636]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f1c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f1c6:	6013      	str	r3, [r2, #0]
 800f1c8:	4b9d      	ldr	r3, [pc, #628]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	4a9c      	ldr	r2, [pc, #624]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f1ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f1d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	685b      	ldr	r3, [r3, #4]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d013      	beq.n	800f204 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f1dc:	f7fd fa20 	bl	800c620 <HAL_GetTick>
 800f1e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f1e2:	e008      	b.n	800f1f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f1e4:	f7fd fa1c 	bl	800c620 <HAL_GetTick>
 800f1e8:	4602      	mov	r2, r0
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	1ad3      	subs	r3, r2, r3
 800f1ee:	2b64      	cmp	r3, #100	; 0x64
 800f1f0:	d901      	bls.n	800f1f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800f1f2:	2303      	movs	r3, #3
 800f1f4:	e2bc      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f1f6:	4b92      	ldr	r3, [pc, #584]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d0f0      	beq.n	800f1e4 <HAL_RCC_OscConfig+0x2a8>
 800f202:	e014      	b.n	800f22e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f204:	f7fd fa0c 	bl	800c620 <HAL_GetTick>
 800f208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f20a:	e008      	b.n	800f21e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f20c:	f7fd fa08 	bl	800c620 <HAL_GetTick>
 800f210:	4602      	mov	r2, r0
 800f212:	693b      	ldr	r3, [r7, #16]
 800f214:	1ad3      	subs	r3, r2, r3
 800f216:	2b64      	cmp	r3, #100	; 0x64
 800f218:	d901      	bls.n	800f21e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800f21a:	2303      	movs	r3, #3
 800f21c:	e2a8      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f21e:	4b88      	ldr	r3, [pc, #544]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f226:	2b00      	cmp	r3, #0
 800f228:	d1f0      	bne.n	800f20c <HAL_RCC_OscConfig+0x2d0>
 800f22a:	e000      	b.n	800f22e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f22c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f003 0302 	and.w	r3, r3, #2
 800f236:	2b00      	cmp	r3, #0
 800f238:	d060      	beq.n	800f2fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800f23a:	69bb      	ldr	r3, [r7, #24]
 800f23c:	2b04      	cmp	r3, #4
 800f23e:	d005      	beq.n	800f24c <HAL_RCC_OscConfig+0x310>
 800f240:	69bb      	ldr	r3, [r7, #24]
 800f242:	2b0c      	cmp	r3, #12
 800f244:	d119      	bne.n	800f27a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	2b02      	cmp	r3, #2
 800f24a:	d116      	bne.n	800f27a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f24c:	4b7c      	ldr	r3, [pc, #496]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f254:	2b00      	cmp	r3, #0
 800f256:	d005      	beq.n	800f264 <HAL_RCC_OscConfig+0x328>
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	68db      	ldr	r3, [r3, #12]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d101      	bne.n	800f264 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800f260:	2301      	movs	r3, #1
 800f262:	e285      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f264:	4b76      	ldr	r3, [pc, #472]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f266:	685b      	ldr	r3, [r3, #4]
 800f268:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	691b      	ldr	r3, [r3, #16]
 800f270:	061b      	lsls	r3, r3, #24
 800f272:	4973      	ldr	r1, [pc, #460]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f274:	4313      	orrs	r3, r2
 800f276:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f278:	e040      	b.n	800f2fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	68db      	ldr	r3, [r3, #12]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d023      	beq.n	800f2ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f282:	4b6f      	ldr	r3, [pc, #444]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	4a6e      	ldr	r2, [pc, #440]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f28c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f28e:	f7fd f9c7 	bl	800c620 <HAL_GetTick>
 800f292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f294:	e008      	b.n	800f2a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f296:	f7fd f9c3 	bl	800c620 <HAL_GetTick>
 800f29a:	4602      	mov	r2, r0
 800f29c:	693b      	ldr	r3, [r7, #16]
 800f29e:	1ad3      	subs	r3, r2, r3
 800f2a0:	2b02      	cmp	r3, #2
 800f2a2:	d901      	bls.n	800f2a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800f2a4:	2303      	movs	r3, #3
 800f2a6:	e263      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f2a8:	4b65      	ldr	r3, [pc, #404]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d0f0      	beq.n	800f296 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f2b4:	4b62      	ldr	r3, [pc, #392]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f2b6:	685b      	ldr	r3, [r3, #4]
 800f2b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	691b      	ldr	r3, [r3, #16]
 800f2c0:	061b      	lsls	r3, r3, #24
 800f2c2:	495f      	ldr	r1, [pc, #380]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f2c4:	4313      	orrs	r3, r2
 800f2c6:	604b      	str	r3, [r1, #4]
 800f2c8:	e018      	b.n	800f2fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f2ca:	4b5d      	ldr	r3, [pc, #372]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	4a5c      	ldr	r2, [pc, #368]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f2d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f2d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f2d6:	f7fd f9a3 	bl	800c620 <HAL_GetTick>
 800f2da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800f2dc:	e008      	b.n	800f2f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f2de:	f7fd f99f 	bl	800c620 <HAL_GetTick>
 800f2e2:	4602      	mov	r2, r0
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	1ad3      	subs	r3, r2, r3
 800f2e8:	2b02      	cmp	r3, #2
 800f2ea:	d901      	bls.n	800f2f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800f2ec:	2303      	movs	r3, #3
 800f2ee:	e23f      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800f2f0:	4b53      	ldr	r3, [pc, #332]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d1f0      	bne.n	800f2de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	f003 0308 	and.w	r3, r3, #8
 800f304:	2b00      	cmp	r3, #0
 800f306:	d03c      	beq.n	800f382 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	695b      	ldr	r3, [r3, #20]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d01c      	beq.n	800f34a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f310:	4b4b      	ldr	r3, [pc, #300]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f316:	4a4a      	ldr	r2, [pc, #296]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f318:	f043 0301 	orr.w	r3, r3, #1
 800f31c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f320:	f7fd f97e 	bl	800c620 <HAL_GetTick>
 800f324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800f326:	e008      	b.n	800f33a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f328:	f7fd f97a 	bl	800c620 <HAL_GetTick>
 800f32c:	4602      	mov	r2, r0
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	1ad3      	subs	r3, r2, r3
 800f332:	2b02      	cmp	r3, #2
 800f334:	d901      	bls.n	800f33a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800f336:	2303      	movs	r3, #3
 800f338:	e21a      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800f33a:	4b41      	ldr	r3, [pc, #260]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f33c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f340:	f003 0302 	and.w	r3, r3, #2
 800f344:	2b00      	cmp	r3, #0
 800f346:	d0ef      	beq.n	800f328 <HAL_RCC_OscConfig+0x3ec>
 800f348:	e01b      	b.n	800f382 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f34a:	4b3d      	ldr	r3, [pc, #244]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f34c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f350:	4a3b      	ldr	r2, [pc, #236]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f352:	f023 0301 	bic.w	r3, r3, #1
 800f356:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f35a:	f7fd f961 	bl	800c620 <HAL_GetTick>
 800f35e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f360:	e008      	b.n	800f374 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f362:	f7fd f95d 	bl	800c620 <HAL_GetTick>
 800f366:	4602      	mov	r2, r0
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	1ad3      	subs	r3, r2, r3
 800f36c:	2b02      	cmp	r3, #2
 800f36e:	d901      	bls.n	800f374 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800f370:	2303      	movs	r3, #3
 800f372:	e1fd      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f374:	4b32      	ldr	r3, [pc, #200]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f37a:	f003 0302 	and.w	r3, r3, #2
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d1ef      	bne.n	800f362 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	f003 0304 	and.w	r3, r3, #4
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	f000 80a6 	beq.w	800f4dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f390:	2300      	movs	r3, #0
 800f392:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800f394:	4b2a      	ldr	r3, [pc, #168]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d10d      	bne.n	800f3bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f3a0:	4b27      	ldr	r3, [pc, #156]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f3a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3a4:	4a26      	ldr	r2, [pc, #152]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f3a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f3aa:	6593      	str	r3, [r2, #88]	; 0x58
 800f3ac:	4b24      	ldr	r3, [pc, #144]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f3ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f3b4:	60bb      	str	r3, [r7, #8]
 800f3b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f3bc:	4b21      	ldr	r3, [pc, #132]	; (800f444 <HAL_RCC_OscConfig+0x508>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d118      	bne.n	800f3fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f3c8:	4b1e      	ldr	r3, [pc, #120]	; (800f444 <HAL_RCC_OscConfig+0x508>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	4a1d      	ldr	r2, [pc, #116]	; (800f444 <HAL_RCC_OscConfig+0x508>)
 800f3ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f3d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f3d4:	f7fd f924 	bl	800c620 <HAL_GetTick>
 800f3d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f3da:	e008      	b.n	800f3ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f3dc:	f7fd f920 	bl	800c620 <HAL_GetTick>
 800f3e0:	4602      	mov	r2, r0
 800f3e2:	693b      	ldr	r3, [r7, #16]
 800f3e4:	1ad3      	subs	r3, r2, r3
 800f3e6:	2b02      	cmp	r3, #2
 800f3e8:	d901      	bls.n	800f3ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800f3ea:	2303      	movs	r3, #3
 800f3ec:	e1c0      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f3ee:	4b15      	ldr	r3, [pc, #84]	; (800f444 <HAL_RCC_OscConfig+0x508>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d0f0      	beq.n	800f3dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	689b      	ldr	r3, [r3, #8]
 800f3fe:	2b01      	cmp	r3, #1
 800f400:	d108      	bne.n	800f414 <HAL_RCC_OscConfig+0x4d8>
 800f402:	4b0f      	ldr	r3, [pc, #60]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f408:	4a0d      	ldr	r2, [pc, #52]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f40a:	f043 0301 	orr.w	r3, r3, #1
 800f40e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f412:	e029      	b.n	800f468 <HAL_RCC_OscConfig+0x52c>
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	689b      	ldr	r3, [r3, #8]
 800f418:	2b05      	cmp	r3, #5
 800f41a:	d115      	bne.n	800f448 <HAL_RCC_OscConfig+0x50c>
 800f41c:	4b08      	ldr	r3, [pc, #32]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f41e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f422:	4a07      	ldr	r2, [pc, #28]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f424:	f043 0304 	orr.w	r3, r3, #4
 800f428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f42c:	4b04      	ldr	r3, [pc, #16]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f42e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f432:	4a03      	ldr	r2, [pc, #12]	; (800f440 <HAL_RCC_OscConfig+0x504>)
 800f434:	f043 0301 	orr.w	r3, r3, #1
 800f438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f43c:	e014      	b.n	800f468 <HAL_RCC_OscConfig+0x52c>
 800f43e:	bf00      	nop
 800f440:	40021000 	.word	0x40021000
 800f444:	40007000 	.word	0x40007000
 800f448:	4b9a      	ldr	r3, [pc, #616]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f44a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f44e:	4a99      	ldr	r2, [pc, #612]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f450:	f023 0301 	bic.w	r3, r3, #1
 800f454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f458:	4b96      	ldr	r3, [pc, #600]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f45a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f45e:	4a95      	ldr	r2, [pc, #596]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f460:	f023 0304 	bic.w	r3, r3, #4
 800f464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	689b      	ldr	r3, [r3, #8]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d016      	beq.n	800f49e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f470:	f7fd f8d6 	bl	800c620 <HAL_GetTick>
 800f474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f476:	e00a      	b.n	800f48e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f478:	f7fd f8d2 	bl	800c620 <HAL_GetTick>
 800f47c:	4602      	mov	r2, r0
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	1ad3      	subs	r3, r2, r3
 800f482:	f241 3288 	movw	r2, #5000	; 0x1388
 800f486:	4293      	cmp	r3, r2
 800f488:	d901      	bls.n	800f48e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800f48a:	2303      	movs	r3, #3
 800f48c:	e170      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f48e:	4b89      	ldr	r3, [pc, #548]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f494:	f003 0302 	and.w	r3, r3, #2
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d0ed      	beq.n	800f478 <HAL_RCC_OscConfig+0x53c>
 800f49c:	e015      	b.n	800f4ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f49e:	f7fd f8bf 	bl	800c620 <HAL_GetTick>
 800f4a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800f4a4:	e00a      	b.n	800f4bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f4a6:	f7fd f8bb 	bl	800c620 <HAL_GetTick>
 800f4aa:	4602      	mov	r2, r0
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	1ad3      	subs	r3, r2, r3
 800f4b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f4b4:	4293      	cmp	r3, r2
 800f4b6:	d901      	bls.n	800f4bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800f4b8:	2303      	movs	r3, #3
 800f4ba:	e159      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800f4bc:	4b7d      	ldr	r3, [pc, #500]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f4be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f4c2:	f003 0302 	and.w	r3, r3, #2
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d1ed      	bne.n	800f4a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f4ca:	7ffb      	ldrb	r3, [r7, #31]
 800f4cc:	2b01      	cmp	r3, #1
 800f4ce:	d105      	bne.n	800f4dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f4d0:	4b78      	ldr	r3, [pc, #480]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f4d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f4d4:	4a77      	ldr	r2, [pc, #476]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f4d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f4da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	f003 0320 	and.w	r3, r3, #32
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d03c      	beq.n	800f562 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d01c      	beq.n	800f52a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800f4f0:	4b70      	ldr	r3, [pc, #448]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f4f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f4f6:	4a6f      	ldr	r2, [pc, #444]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f4f8:	f043 0301 	orr.w	r3, r3, #1
 800f4fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f500:	f7fd f88e 	bl	800c620 <HAL_GetTick>
 800f504:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800f506:	e008      	b.n	800f51a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f508:	f7fd f88a 	bl	800c620 <HAL_GetTick>
 800f50c:	4602      	mov	r2, r0
 800f50e:	693b      	ldr	r3, [r7, #16]
 800f510:	1ad3      	subs	r3, r2, r3
 800f512:	2b02      	cmp	r3, #2
 800f514:	d901      	bls.n	800f51a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800f516:	2303      	movs	r3, #3
 800f518:	e12a      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800f51a:	4b66      	ldr	r3, [pc, #408]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f51c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f520:	f003 0302 	and.w	r3, r3, #2
 800f524:	2b00      	cmp	r3, #0
 800f526:	d0ef      	beq.n	800f508 <HAL_RCC_OscConfig+0x5cc>
 800f528:	e01b      	b.n	800f562 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800f52a:	4b62      	ldr	r3, [pc, #392]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f52c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f530:	4a60      	ldr	r2, [pc, #384]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f532:	f023 0301 	bic.w	r3, r3, #1
 800f536:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f53a:	f7fd f871 	bl	800c620 <HAL_GetTick>
 800f53e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800f540:	e008      	b.n	800f554 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f542:	f7fd f86d 	bl	800c620 <HAL_GetTick>
 800f546:	4602      	mov	r2, r0
 800f548:	693b      	ldr	r3, [r7, #16]
 800f54a:	1ad3      	subs	r3, r2, r3
 800f54c:	2b02      	cmp	r3, #2
 800f54e:	d901      	bls.n	800f554 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800f550:	2303      	movs	r3, #3
 800f552:	e10d      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800f554:	4b57      	ldr	r3, [pc, #348]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f556:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f55a:	f003 0302 	and.w	r3, r3, #2
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d1ef      	bne.n	800f542 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f566:	2b00      	cmp	r3, #0
 800f568:	f000 8101 	beq.w	800f76e <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f570:	2b02      	cmp	r3, #2
 800f572:	f040 80c9 	bne.w	800f708 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800f576:	4b4f      	ldr	r3, [pc, #316]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f578:	68db      	ldr	r3, [r3, #12]
 800f57a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	f003 0203 	and.w	r2, r3, #3
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f586:	429a      	cmp	r2, r3
 800f588:	d12c      	bne.n	800f5e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f594:	3b01      	subs	r3, #1
 800f596:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800f598:	429a      	cmp	r2, r3
 800f59a:	d123      	bne.n	800f5e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800f59c:	697b      	ldr	r3, [r7, #20]
 800f59e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5a6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	d11b      	bne.n	800f5e4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5b6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d113      	bne.n	800f5e4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f5bc:	697b      	ldr	r3, [r7, #20]
 800f5be:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5c6:	085b      	lsrs	r3, r3, #1
 800f5c8:	3b01      	subs	r3, #1
 800f5ca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	d109      	bne.n	800f5e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5da:	085b      	lsrs	r3, r3, #1
 800f5dc:	3b01      	subs	r3, #1
 800f5de:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d06b      	beq.n	800f6bc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800f5e4:	69bb      	ldr	r3, [r7, #24]
 800f5e6:	2b0c      	cmp	r3, #12
 800f5e8:	d062      	beq.n	800f6b0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800f5ea:	4b32      	ldr	r3, [pc, #200]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d001      	beq.n	800f5fa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	e0ba      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800f5fa:	4b2e      	ldr	r3, [pc, #184]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	4a2d      	ldr	r2, [pc, #180]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f600:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f604:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800f606:	f7fd f80b 	bl	800c620 <HAL_GetTick>
 800f60a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f60c:	e008      	b.n	800f620 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f60e:	f7fd f807 	bl	800c620 <HAL_GetTick>
 800f612:	4602      	mov	r2, r0
 800f614:	693b      	ldr	r3, [r7, #16]
 800f616:	1ad3      	subs	r3, r2, r3
 800f618:	2b02      	cmp	r3, #2
 800f61a:	d901      	bls.n	800f620 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800f61c:	2303      	movs	r3, #3
 800f61e:	e0a7      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f620:	4b24      	ldr	r3, [pc, #144]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d1f0      	bne.n	800f60e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f62c:	4b21      	ldr	r3, [pc, #132]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f62e:	68da      	ldr	r2, [r3, #12]
 800f630:	4b21      	ldr	r3, [pc, #132]	; (800f6b8 <HAL_RCC_OscConfig+0x77c>)
 800f632:	4013      	ands	r3, r2
 800f634:	687a      	ldr	r2, [r7, #4]
 800f636:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800f638:	687a      	ldr	r2, [r7, #4]
 800f63a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f63c:	3a01      	subs	r2, #1
 800f63e:	0112      	lsls	r2, r2, #4
 800f640:	4311      	orrs	r1, r2
 800f642:	687a      	ldr	r2, [r7, #4]
 800f644:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f646:	0212      	lsls	r2, r2, #8
 800f648:	4311      	orrs	r1, r2
 800f64a:	687a      	ldr	r2, [r7, #4]
 800f64c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800f64e:	0852      	lsrs	r2, r2, #1
 800f650:	3a01      	subs	r2, #1
 800f652:	0552      	lsls	r2, r2, #21
 800f654:	4311      	orrs	r1, r2
 800f656:	687a      	ldr	r2, [r7, #4]
 800f658:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f65a:	0852      	lsrs	r2, r2, #1
 800f65c:	3a01      	subs	r2, #1
 800f65e:	0652      	lsls	r2, r2, #25
 800f660:	4311      	orrs	r1, r2
 800f662:	687a      	ldr	r2, [r7, #4]
 800f664:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f666:	06d2      	lsls	r2, r2, #27
 800f668:	430a      	orrs	r2, r1
 800f66a:	4912      	ldr	r1, [pc, #72]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f66c:	4313      	orrs	r3, r2
 800f66e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800f670:	4b10      	ldr	r3, [pc, #64]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	4a0f      	ldr	r2, [pc, #60]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f67a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f67c:	4b0d      	ldr	r3, [pc, #52]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f67e:	68db      	ldr	r3, [r3, #12]
 800f680:	4a0c      	ldr	r2, [pc, #48]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f686:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800f688:	f7fc ffca 	bl	800c620 <HAL_GetTick>
 800f68c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f68e:	e008      	b.n	800f6a2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f690:	f7fc ffc6 	bl	800c620 <HAL_GetTick>
 800f694:	4602      	mov	r2, r0
 800f696:	693b      	ldr	r3, [r7, #16]
 800f698:	1ad3      	subs	r3, r2, r3
 800f69a:	2b02      	cmp	r3, #2
 800f69c:	d901      	bls.n	800f6a2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800f69e:	2303      	movs	r3, #3
 800f6a0:	e066      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f6a2:	4b04      	ldr	r3, [pc, #16]	; (800f6b4 <HAL_RCC_OscConfig+0x778>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d0f0      	beq.n	800f690 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800f6ae:	e05e      	b.n	800f76e <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800f6b0:	2301      	movs	r3, #1
 800f6b2:	e05d      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
 800f6b4:	40021000 	.word	0x40021000
 800f6b8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f6bc:	4b2e      	ldr	r3, [pc, #184]	; (800f778 <HAL_RCC_OscConfig+0x83c>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d152      	bne.n	800f76e <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800f6c8:	4b2b      	ldr	r3, [pc, #172]	; (800f778 <HAL_RCC_OscConfig+0x83c>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	4a2a      	ldr	r2, [pc, #168]	; (800f778 <HAL_RCC_OscConfig+0x83c>)
 800f6ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f6d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f6d4:	4b28      	ldr	r3, [pc, #160]	; (800f778 <HAL_RCC_OscConfig+0x83c>)
 800f6d6:	68db      	ldr	r3, [r3, #12]
 800f6d8:	4a27      	ldr	r2, [pc, #156]	; (800f778 <HAL_RCC_OscConfig+0x83c>)
 800f6da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f6de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f6e0:	f7fc ff9e 	bl	800c620 <HAL_GetTick>
 800f6e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f6e6:	e008      	b.n	800f6fa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f6e8:	f7fc ff9a 	bl	800c620 <HAL_GetTick>
 800f6ec:	4602      	mov	r2, r0
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	1ad3      	subs	r3, r2, r3
 800f6f2:	2b02      	cmp	r3, #2
 800f6f4:	d901      	bls.n	800f6fa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800f6f6:	2303      	movs	r3, #3
 800f6f8:	e03a      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f6fa:	4b1f      	ldr	r3, [pc, #124]	; (800f778 <HAL_RCC_OscConfig+0x83c>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f702:	2b00      	cmp	r3, #0
 800f704:	d0f0      	beq.n	800f6e8 <HAL_RCC_OscConfig+0x7ac>
 800f706:	e032      	b.n	800f76e <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800f708:	69bb      	ldr	r3, [r7, #24]
 800f70a:	2b0c      	cmp	r3, #12
 800f70c:	d02d      	beq.n	800f76a <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f70e:	4b1a      	ldr	r3, [pc, #104]	; (800f778 <HAL_RCC_OscConfig+0x83c>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	4a19      	ldr	r2, [pc, #100]	; (800f778 <HAL_RCC_OscConfig+0x83c>)
 800f714:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f718:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800f71a:	4b17      	ldr	r3, [pc, #92]	; (800f778 <HAL_RCC_OscConfig+0x83c>)
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f722:	2b00      	cmp	r3, #0
 800f724:	d105      	bne.n	800f732 <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800f726:	4b14      	ldr	r3, [pc, #80]	; (800f778 <HAL_RCC_OscConfig+0x83c>)
 800f728:	68db      	ldr	r3, [r3, #12]
 800f72a:	4a13      	ldr	r2, [pc, #76]	; (800f778 <HAL_RCC_OscConfig+0x83c>)
 800f72c:	f023 0303 	bic.w	r3, r3, #3
 800f730:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800f732:	4b11      	ldr	r3, [pc, #68]	; (800f778 <HAL_RCC_OscConfig+0x83c>)
 800f734:	68db      	ldr	r3, [r3, #12]
 800f736:	4a10      	ldr	r2, [pc, #64]	; (800f778 <HAL_RCC_OscConfig+0x83c>)
 800f738:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800f73c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f740:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f742:	f7fc ff6d 	bl	800c620 <HAL_GetTick>
 800f746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f748:	e008      	b.n	800f75c <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f74a:	f7fc ff69 	bl	800c620 <HAL_GetTick>
 800f74e:	4602      	mov	r2, r0
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	1ad3      	subs	r3, r2, r3
 800f754:	2b02      	cmp	r3, #2
 800f756:	d901      	bls.n	800f75c <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 800f758:	2303      	movs	r3, #3
 800f75a:	e009      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f75c:	4b06      	ldr	r3, [pc, #24]	; (800f778 <HAL_RCC_OscConfig+0x83c>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f764:	2b00      	cmp	r3, #0
 800f766:	d1f0      	bne.n	800f74a <HAL_RCC_OscConfig+0x80e>
 800f768:	e001      	b.n	800f76e <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800f76a:	2301      	movs	r3, #1
 800f76c:	e000      	b.n	800f770 <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 800f76e:	2300      	movs	r3, #0
}
 800f770:	4618      	mov	r0, r3
 800f772:	3720      	adds	r7, #32
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}
 800f778:	40021000 	.word	0x40021000

0800f77c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b084      	sub	sp, #16
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d101      	bne.n	800f790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f78c:	2301      	movs	r3, #1
 800f78e:	e0c8      	b.n	800f922 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f790:	4b66      	ldr	r3, [pc, #408]	; (800f92c <HAL_RCC_ClockConfig+0x1b0>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	f003 0307 	and.w	r3, r3, #7
 800f798:	683a      	ldr	r2, [r7, #0]
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d910      	bls.n	800f7c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f79e:	4b63      	ldr	r3, [pc, #396]	; (800f92c <HAL_RCC_ClockConfig+0x1b0>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f023 0207 	bic.w	r2, r3, #7
 800f7a6:	4961      	ldr	r1, [pc, #388]	; (800f92c <HAL_RCC_ClockConfig+0x1b0>)
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	4313      	orrs	r3, r2
 800f7ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f7ae:	4b5f      	ldr	r3, [pc, #380]	; (800f92c <HAL_RCC_ClockConfig+0x1b0>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	f003 0307 	and.w	r3, r3, #7
 800f7b6:	683a      	ldr	r2, [r7, #0]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d001      	beq.n	800f7c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800f7bc:	2301      	movs	r3, #1
 800f7be:	e0b0      	b.n	800f922 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	f003 0301 	and.w	r3, r3, #1
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d04c      	beq.n	800f866 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	685b      	ldr	r3, [r3, #4]
 800f7d0:	2b03      	cmp	r3, #3
 800f7d2:	d107      	bne.n	800f7e4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f7d4:	4b56      	ldr	r3, [pc, #344]	; (800f930 <HAL_RCC_ClockConfig+0x1b4>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d121      	bne.n	800f824 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	e09e      	b.n	800f922 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	685b      	ldr	r3, [r3, #4]
 800f7e8:	2b02      	cmp	r3, #2
 800f7ea:	d107      	bne.n	800f7fc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f7ec:	4b50      	ldr	r3, [pc, #320]	; (800f930 <HAL_RCC_ClockConfig+0x1b4>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d115      	bne.n	800f824 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	e092      	b.n	800f922 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	685b      	ldr	r3, [r3, #4]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d107      	bne.n	800f814 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f804:	4b4a      	ldr	r3, [pc, #296]	; (800f930 <HAL_RCC_ClockConfig+0x1b4>)
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	f003 0302 	and.w	r3, r3, #2
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d109      	bne.n	800f824 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800f810:	2301      	movs	r3, #1
 800f812:	e086      	b.n	800f922 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f814:	4b46      	ldr	r3, [pc, #280]	; (800f930 <HAL_RCC_ClockConfig+0x1b4>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d101      	bne.n	800f824 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800f820:	2301      	movs	r3, #1
 800f822:	e07e      	b.n	800f922 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f824:	4b42      	ldr	r3, [pc, #264]	; (800f930 <HAL_RCC_ClockConfig+0x1b4>)
 800f826:	689b      	ldr	r3, [r3, #8]
 800f828:	f023 0203 	bic.w	r2, r3, #3
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	685b      	ldr	r3, [r3, #4]
 800f830:	493f      	ldr	r1, [pc, #252]	; (800f930 <HAL_RCC_ClockConfig+0x1b4>)
 800f832:	4313      	orrs	r3, r2
 800f834:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f836:	f7fc fef3 	bl	800c620 <HAL_GetTick>
 800f83a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f83c:	e00a      	b.n	800f854 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f83e:	f7fc feef 	bl	800c620 <HAL_GetTick>
 800f842:	4602      	mov	r2, r0
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	1ad3      	subs	r3, r2, r3
 800f848:	f241 3288 	movw	r2, #5000	; 0x1388
 800f84c:	4293      	cmp	r3, r2
 800f84e:	d901      	bls.n	800f854 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800f850:	2303      	movs	r3, #3
 800f852:	e066      	b.n	800f922 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f854:	4b36      	ldr	r3, [pc, #216]	; (800f930 <HAL_RCC_ClockConfig+0x1b4>)
 800f856:	689b      	ldr	r3, [r3, #8]
 800f858:	f003 020c 	and.w	r2, r3, #12
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	685b      	ldr	r3, [r3, #4]
 800f860:	009b      	lsls	r3, r3, #2
 800f862:	429a      	cmp	r2, r3
 800f864:	d1eb      	bne.n	800f83e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	f003 0302 	and.w	r3, r3, #2
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d008      	beq.n	800f884 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f872:	4b2f      	ldr	r3, [pc, #188]	; (800f930 <HAL_RCC_ClockConfig+0x1b4>)
 800f874:	689b      	ldr	r3, [r3, #8]
 800f876:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	689b      	ldr	r3, [r3, #8]
 800f87e:	492c      	ldr	r1, [pc, #176]	; (800f930 <HAL_RCC_ClockConfig+0x1b4>)
 800f880:	4313      	orrs	r3, r2
 800f882:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f884:	4b29      	ldr	r3, [pc, #164]	; (800f92c <HAL_RCC_ClockConfig+0x1b0>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	f003 0307 	and.w	r3, r3, #7
 800f88c:	683a      	ldr	r2, [r7, #0]
 800f88e:	429a      	cmp	r2, r3
 800f890:	d210      	bcs.n	800f8b4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f892:	4b26      	ldr	r3, [pc, #152]	; (800f92c <HAL_RCC_ClockConfig+0x1b0>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	f023 0207 	bic.w	r2, r3, #7
 800f89a:	4924      	ldr	r1, [pc, #144]	; (800f92c <HAL_RCC_ClockConfig+0x1b0>)
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	4313      	orrs	r3, r2
 800f8a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f8a2:	4b22      	ldr	r3, [pc, #136]	; (800f92c <HAL_RCC_ClockConfig+0x1b0>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	f003 0307 	and.w	r3, r3, #7
 800f8aa:	683a      	ldr	r2, [r7, #0]
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d001      	beq.n	800f8b4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800f8b0:	2301      	movs	r3, #1
 800f8b2:	e036      	b.n	800f922 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	f003 0304 	and.w	r3, r3, #4
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d008      	beq.n	800f8d2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f8c0:	4b1b      	ldr	r3, [pc, #108]	; (800f930 <HAL_RCC_ClockConfig+0x1b4>)
 800f8c2:	689b      	ldr	r3, [r3, #8]
 800f8c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	68db      	ldr	r3, [r3, #12]
 800f8cc:	4918      	ldr	r1, [pc, #96]	; (800f930 <HAL_RCC_ClockConfig+0x1b4>)
 800f8ce:	4313      	orrs	r3, r2
 800f8d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	f003 0308 	and.w	r3, r3, #8
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d009      	beq.n	800f8f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f8de:	4b14      	ldr	r3, [pc, #80]	; (800f930 <HAL_RCC_ClockConfig+0x1b4>)
 800f8e0:	689b      	ldr	r3, [r3, #8]
 800f8e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	691b      	ldr	r3, [r3, #16]
 800f8ea:	00db      	lsls	r3, r3, #3
 800f8ec:	4910      	ldr	r1, [pc, #64]	; (800f930 <HAL_RCC_ClockConfig+0x1b4>)
 800f8ee:	4313      	orrs	r3, r2
 800f8f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800f8f2:	f000 f825 	bl	800f940 <HAL_RCC_GetSysClockFreq>
 800f8f6:	4602      	mov	r2, r0
 800f8f8:	4b0d      	ldr	r3, [pc, #52]	; (800f930 <HAL_RCC_ClockConfig+0x1b4>)
 800f8fa:	689b      	ldr	r3, [r3, #8]
 800f8fc:	091b      	lsrs	r3, r3, #4
 800f8fe:	f003 030f 	and.w	r3, r3, #15
 800f902:	490c      	ldr	r1, [pc, #48]	; (800f934 <HAL_RCC_ClockConfig+0x1b8>)
 800f904:	5ccb      	ldrb	r3, [r1, r3]
 800f906:	f003 031f 	and.w	r3, r3, #31
 800f90a:	fa22 f303 	lsr.w	r3, r2, r3
 800f90e:	4a0a      	ldr	r2, [pc, #40]	; (800f938 <HAL_RCC_ClockConfig+0x1bc>)
 800f910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800f912:	4b0a      	ldr	r3, [pc, #40]	; (800f93c <HAL_RCC_ClockConfig+0x1c0>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	4618      	mov	r0, r3
 800f918:	f7fc fe32 	bl	800c580 <HAL_InitTick>
 800f91c:	4603      	mov	r3, r0
 800f91e:	72fb      	strb	r3, [r7, #11]

  return status;
 800f920:	7afb      	ldrb	r3, [r7, #11]
}
 800f922:	4618      	mov	r0, r3
 800f924:	3710      	adds	r7, #16
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}
 800f92a:	bf00      	nop
 800f92c:	40022000 	.word	0x40022000
 800f930:	40021000 	.word	0x40021000
 800f934:	08014f70 	.word	0x08014f70
 800f938:	20000000 	.word	0x20000000
 800f93c:	20000004 	.word	0x20000004

0800f940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f940:	b480      	push	{r7}
 800f942:	b089      	sub	sp, #36	; 0x24
 800f944:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800f946:	2300      	movs	r3, #0
 800f948:	61fb      	str	r3, [r7, #28]
 800f94a:	2300      	movs	r3, #0
 800f94c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f94e:	4b3e      	ldr	r3, [pc, #248]	; (800fa48 <HAL_RCC_GetSysClockFreq+0x108>)
 800f950:	689b      	ldr	r3, [r3, #8]
 800f952:	f003 030c 	and.w	r3, r3, #12
 800f956:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f958:	4b3b      	ldr	r3, [pc, #236]	; (800fa48 <HAL_RCC_GetSysClockFreq+0x108>)
 800f95a:	68db      	ldr	r3, [r3, #12]
 800f95c:	f003 0303 	and.w	r3, r3, #3
 800f960:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800f962:	693b      	ldr	r3, [r7, #16]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d005      	beq.n	800f974 <HAL_RCC_GetSysClockFreq+0x34>
 800f968:	693b      	ldr	r3, [r7, #16]
 800f96a:	2b0c      	cmp	r3, #12
 800f96c:	d121      	bne.n	800f9b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	2b01      	cmp	r3, #1
 800f972:	d11e      	bne.n	800f9b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800f974:	4b34      	ldr	r3, [pc, #208]	; (800fa48 <HAL_RCC_GetSysClockFreq+0x108>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	f003 0308 	and.w	r3, r3, #8
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d107      	bne.n	800f990 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800f980:	4b31      	ldr	r3, [pc, #196]	; (800fa48 <HAL_RCC_GetSysClockFreq+0x108>)
 800f982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f986:	0a1b      	lsrs	r3, r3, #8
 800f988:	f003 030f 	and.w	r3, r3, #15
 800f98c:	61fb      	str	r3, [r7, #28]
 800f98e:	e005      	b.n	800f99c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800f990:	4b2d      	ldr	r3, [pc, #180]	; (800fa48 <HAL_RCC_GetSysClockFreq+0x108>)
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	091b      	lsrs	r3, r3, #4
 800f996:	f003 030f 	and.w	r3, r3, #15
 800f99a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800f99c:	4a2b      	ldr	r2, [pc, #172]	; (800fa4c <HAL_RCC_GetSysClockFreq+0x10c>)
 800f99e:	69fb      	ldr	r3, [r7, #28]
 800f9a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d10d      	bne.n	800f9c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800f9ac:	69fb      	ldr	r3, [r7, #28]
 800f9ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f9b0:	e00a      	b.n	800f9c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	2b04      	cmp	r3, #4
 800f9b6:	d102      	bne.n	800f9be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800f9b8:	4b25      	ldr	r3, [pc, #148]	; (800fa50 <HAL_RCC_GetSysClockFreq+0x110>)
 800f9ba:	61bb      	str	r3, [r7, #24]
 800f9bc:	e004      	b.n	800f9c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	2b08      	cmp	r3, #8
 800f9c2:	d101      	bne.n	800f9c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800f9c4:	4b23      	ldr	r3, [pc, #140]	; (800fa54 <HAL_RCC_GetSysClockFreq+0x114>)
 800f9c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800f9c8:	693b      	ldr	r3, [r7, #16]
 800f9ca:	2b0c      	cmp	r3, #12
 800f9cc:	d134      	bne.n	800fa38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800f9ce:	4b1e      	ldr	r3, [pc, #120]	; (800fa48 <HAL_RCC_GetSysClockFreq+0x108>)
 800f9d0:	68db      	ldr	r3, [r3, #12]
 800f9d2:	f003 0303 	and.w	r3, r3, #3
 800f9d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	2b02      	cmp	r3, #2
 800f9dc:	d003      	beq.n	800f9e6 <HAL_RCC_GetSysClockFreq+0xa6>
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	2b03      	cmp	r3, #3
 800f9e2:	d003      	beq.n	800f9ec <HAL_RCC_GetSysClockFreq+0xac>
 800f9e4:	e005      	b.n	800f9f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800f9e6:	4b1a      	ldr	r3, [pc, #104]	; (800fa50 <HAL_RCC_GetSysClockFreq+0x110>)
 800f9e8:	617b      	str	r3, [r7, #20]
      break;
 800f9ea:	e005      	b.n	800f9f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800f9ec:	4b19      	ldr	r3, [pc, #100]	; (800fa54 <HAL_RCC_GetSysClockFreq+0x114>)
 800f9ee:	617b      	str	r3, [r7, #20]
      break;
 800f9f0:	e002      	b.n	800f9f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800f9f2:	69fb      	ldr	r3, [r7, #28]
 800f9f4:	617b      	str	r3, [r7, #20]
      break;
 800f9f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800f9f8:	4b13      	ldr	r3, [pc, #76]	; (800fa48 <HAL_RCC_GetSysClockFreq+0x108>)
 800f9fa:	68db      	ldr	r3, [r3, #12]
 800f9fc:	091b      	lsrs	r3, r3, #4
 800f9fe:	f003 0307 	and.w	r3, r3, #7
 800fa02:	3301      	adds	r3, #1
 800fa04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800fa06:	4b10      	ldr	r3, [pc, #64]	; (800fa48 <HAL_RCC_GetSysClockFreq+0x108>)
 800fa08:	68db      	ldr	r3, [r3, #12]
 800fa0a:	0a1b      	lsrs	r3, r3, #8
 800fa0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa10:	697a      	ldr	r2, [r7, #20]
 800fa12:	fb03 f202 	mul.w	r2, r3, r2
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800fa1e:	4b0a      	ldr	r3, [pc, #40]	; (800fa48 <HAL_RCC_GetSysClockFreq+0x108>)
 800fa20:	68db      	ldr	r3, [r3, #12]
 800fa22:	0e5b      	lsrs	r3, r3, #25
 800fa24:	f003 0303 	and.w	r3, r3, #3
 800fa28:	3301      	adds	r3, #1
 800fa2a:	005b      	lsls	r3, r3, #1
 800fa2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800fa2e:	697a      	ldr	r2, [r7, #20]
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800fa38:	69bb      	ldr	r3, [r7, #24]
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	3724      	adds	r7, #36	; 0x24
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa44:	4770      	bx	lr
 800fa46:	bf00      	nop
 800fa48:	40021000 	.word	0x40021000
 800fa4c:	08014f88 	.word	0x08014f88
 800fa50:	00f42400 	.word	0x00f42400
 800fa54:	00b71b00 	.word	0x00b71b00

0800fa58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fa58:	b480      	push	{r7}
 800fa5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800fa5c:	4b03      	ldr	r3, [pc, #12]	; (800fa6c <HAL_RCC_GetHCLKFreq+0x14>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	46bd      	mov	sp, r7
 800fa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa68:	4770      	bx	lr
 800fa6a:	bf00      	nop
 800fa6c:	20000000 	.word	0x20000000

0800fa70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800fa74:	f7ff fff0 	bl	800fa58 <HAL_RCC_GetHCLKFreq>
 800fa78:	4602      	mov	r2, r0
 800fa7a:	4b06      	ldr	r3, [pc, #24]	; (800fa94 <HAL_RCC_GetPCLK1Freq+0x24>)
 800fa7c:	689b      	ldr	r3, [r3, #8]
 800fa7e:	0a1b      	lsrs	r3, r3, #8
 800fa80:	f003 0307 	and.w	r3, r3, #7
 800fa84:	4904      	ldr	r1, [pc, #16]	; (800fa98 <HAL_RCC_GetPCLK1Freq+0x28>)
 800fa86:	5ccb      	ldrb	r3, [r1, r3]
 800fa88:	f003 031f 	and.w	r3, r3, #31
 800fa8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fa90:	4618      	mov	r0, r3
 800fa92:	bd80      	pop	{r7, pc}
 800fa94:	40021000 	.word	0x40021000
 800fa98:	08014f80 	.word	0x08014f80

0800fa9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800faa0:	f7ff ffda 	bl	800fa58 <HAL_RCC_GetHCLKFreq>
 800faa4:	4602      	mov	r2, r0
 800faa6:	4b06      	ldr	r3, [pc, #24]	; (800fac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800faa8:	689b      	ldr	r3, [r3, #8]
 800faaa:	0adb      	lsrs	r3, r3, #11
 800faac:	f003 0307 	and.w	r3, r3, #7
 800fab0:	4904      	ldr	r1, [pc, #16]	; (800fac4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800fab2:	5ccb      	ldrb	r3, [r1, r3]
 800fab4:	f003 031f 	and.w	r3, r3, #31
 800fab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	bd80      	pop	{r7, pc}
 800fac0:	40021000 	.word	0x40021000
 800fac4:	08014f80 	.word	0x08014f80

0800fac8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b086      	sub	sp, #24
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800fad0:	2300      	movs	r3, #0
 800fad2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800fad4:	4b2a      	ldr	r3, [pc, #168]	; (800fb80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800fad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d003      	beq.n	800fae8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800fae0:	f7ff f9c8 	bl	800ee74 <HAL_PWREx_GetVoltageRange>
 800fae4:	6178      	str	r0, [r7, #20]
 800fae6:	e014      	b.n	800fb12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800fae8:	4b25      	ldr	r3, [pc, #148]	; (800fb80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800faea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800faec:	4a24      	ldr	r2, [pc, #144]	; (800fb80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800faee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800faf2:	6593      	str	r3, [r2, #88]	; 0x58
 800faf4:	4b22      	ldr	r3, [pc, #136]	; (800fb80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800faf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800faf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fafc:	60fb      	str	r3, [r7, #12]
 800fafe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800fb00:	f7ff f9b8 	bl	800ee74 <HAL_PWREx_GetVoltageRange>
 800fb04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800fb06:	4b1e      	ldr	r3, [pc, #120]	; (800fb80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800fb08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb0a:	4a1d      	ldr	r2, [pc, #116]	; (800fb80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800fb0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fb10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb18:	d10b      	bne.n	800fb32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2b80      	cmp	r3, #128	; 0x80
 800fb1e:	d919      	bls.n	800fb54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2ba0      	cmp	r3, #160	; 0xa0
 800fb24:	d902      	bls.n	800fb2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800fb26:	2302      	movs	r3, #2
 800fb28:	613b      	str	r3, [r7, #16]
 800fb2a:	e013      	b.n	800fb54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	613b      	str	r3, [r7, #16]
 800fb30:	e010      	b.n	800fb54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2b80      	cmp	r3, #128	; 0x80
 800fb36:	d902      	bls.n	800fb3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800fb38:	2303      	movs	r3, #3
 800fb3a:	613b      	str	r3, [r7, #16]
 800fb3c:	e00a      	b.n	800fb54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2b80      	cmp	r3, #128	; 0x80
 800fb42:	d102      	bne.n	800fb4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800fb44:	2302      	movs	r3, #2
 800fb46:	613b      	str	r3, [r7, #16]
 800fb48:	e004      	b.n	800fb54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2b70      	cmp	r3, #112	; 0x70
 800fb4e:	d101      	bne.n	800fb54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800fb50:	2301      	movs	r3, #1
 800fb52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800fb54:	4b0b      	ldr	r3, [pc, #44]	; (800fb84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	f023 0207 	bic.w	r2, r3, #7
 800fb5c:	4909      	ldr	r1, [pc, #36]	; (800fb84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	4313      	orrs	r3, r2
 800fb62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800fb64:	4b07      	ldr	r3, [pc, #28]	; (800fb84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	f003 0307 	and.w	r3, r3, #7
 800fb6c:	693a      	ldr	r2, [r7, #16]
 800fb6e:	429a      	cmp	r2, r3
 800fb70:	d001      	beq.n	800fb76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800fb72:	2301      	movs	r3, #1
 800fb74:	e000      	b.n	800fb78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800fb76:	2300      	movs	r3, #0
}
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3718      	adds	r7, #24
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}
 800fb80:	40021000 	.word	0x40021000
 800fb84:	40022000 	.word	0x40022000

0800fb88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b086      	sub	sp, #24
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800fb90:	2300      	movs	r3, #0
 800fb92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800fb94:	2300      	movs	r3, #0
 800fb96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d031      	beq.n	800fc08 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fba8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800fbac:	d01a      	beq.n	800fbe4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800fbae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800fbb2:	d814      	bhi.n	800fbde <HAL_RCCEx_PeriphCLKConfig+0x56>
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d009      	beq.n	800fbcc <HAL_RCCEx_PeriphCLKConfig+0x44>
 800fbb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fbbc:	d10f      	bne.n	800fbde <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800fbbe:	4b5d      	ldr	r3, [pc, #372]	; (800fd34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fbc0:	68db      	ldr	r3, [r3, #12]
 800fbc2:	4a5c      	ldr	r2, [pc, #368]	; (800fd34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fbc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fbc8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800fbca:	e00c      	b.n	800fbe6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	3304      	adds	r3, #4
 800fbd0:	2100      	movs	r1, #0
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f000 f9ce 	bl	800ff74 <RCCEx_PLLSAI1_Config>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800fbdc:	e003      	b.n	800fbe6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fbde:	2301      	movs	r3, #1
 800fbe0:	74fb      	strb	r3, [r7, #19]
      break;
 800fbe2:	e000      	b.n	800fbe6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800fbe4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fbe6:	7cfb      	ldrb	r3, [r7, #19]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d10b      	bne.n	800fc04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800fbec:	4b51      	ldr	r3, [pc, #324]	; (800fd34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fbee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fbf2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbfa:	494e      	ldr	r1, [pc, #312]	; (800fd34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fbfc:	4313      	orrs	r3, r2
 800fbfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800fc02:	e001      	b.n	800fc08 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc04:	7cfb      	ldrb	r3, [r7, #19]
 800fc06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	f000 809e 	beq.w	800fd52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fc16:	2300      	movs	r3, #0
 800fc18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800fc1a:	4b46      	ldr	r3, [pc, #280]	; (800fd34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fc1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d101      	bne.n	800fc2a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800fc26:	2301      	movs	r3, #1
 800fc28:	e000      	b.n	800fc2c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d00d      	beq.n	800fc4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fc30:	4b40      	ldr	r3, [pc, #256]	; (800fd34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fc32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc34:	4a3f      	ldr	r2, [pc, #252]	; (800fd34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fc36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc3a:	6593      	str	r3, [r2, #88]	; 0x58
 800fc3c:	4b3d      	ldr	r3, [pc, #244]	; (800fd34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fc3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc44:	60bb      	str	r3, [r7, #8]
 800fc46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800fc48:	2301      	movs	r3, #1
 800fc4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fc4c:	4b3a      	ldr	r3, [pc, #232]	; (800fd38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	4a39      	ldr	r2, [pc, #228]	; (800fd38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800fc52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fc56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800fc58:	f7fc fce2 	bl	800c620 <HAL_GetTick>
 800fc5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800fc5e:	e009      	b.n	800fc74 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fc60:	f7fc fcde 	bl	800c620 <HAL_GetTick>
 800fc64:	4602      	mov	r2, r0
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	1ad3      	subs	r3, r2, r3
 800fc6a:	2b02      	cmp	r3, #2
 800fc6c:	d902      	bls.n	800fc74 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800fc6e:	2303      	movs	r3, #3
 800fc70:	74fb      	strb	r3, [r7, #19]
        break;
 800fc72:	e005      	b.n	800fc80 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800fc74:	4b30      	ldr	r3, [pc, #192]	; (800fd38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d0ef      	beq.n	800fc60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800fc80:	7cfb      	ldrb	r3, [r7, #19]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d15a      	bne.n	800fd3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800fc86:	4b2b      	ldr	r3, [pc, #172]	; (800fd34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fc88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fc90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d01e      	beq.n	800fcd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc9c:	697a      	ldr	r2, [r7, #20]
 800fc9e:	429a      	cmp	r2, r3
 800fca0:	d019      	beq.n	800fcd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800fca2:	4b24      	ldr	r3, [pc, #144]	; (800fd34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fcac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800fcae:	4b21      	ldr	r3, [pc, #132]	; (800fd34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fcb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcb4:	4a1f      	ldr	r2, [pc, #124]	; (800fd34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fcb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fcba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800fcbe:	4b1d      	ldr	r3, [pc, #116]	; (800fd34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fcc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcc4:	4a1b      	ldr	r2, [pc, #108]	; (800fd34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fcc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fcca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800fcce:	4a19      	ldr	r2, [pc, #100]	; (800fd34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fcd0:	697b      	ldr	r3, [r7, #20]
 800fcd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800fcd6:	697b      	ldr	r3, [r7, #20]
 800fcd8:	f003 0301 	and.w	r3, r3, #1
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d016      	beq.n	800fd0e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fce0:	f7fc fc9e 	bl	800c620 <HAL_GetTick>
 800fce4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fce6:	e00b      	b.n	800fd00 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fce8:	f7fc fc9a 	bl	800c620 <HAL_GetTick>
 800fcec:	4602      	mov	r2, r0
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	1ad3      	subs	r3, r2, r3
 800fcf2:	f241 3288 	movw	r2, #5000	; 0x1388
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	d902      	bls.n	800fd00 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800fcfa:	2303      	movs	r3, #3
 800fcfc:	74fb      	strb	r3, [r7, #19]
            break;
 800fcfe:	e006      	b.n	800fd0e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fd00:	4b0c      	ldr	r3, [pc, #48]	; (800fd34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fd02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd06:	f003 0302 	and.w	r3, r3, #2
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d0ec      	beq.n	800fce8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800fd0e:	7cfb      	ldrb	r3, [r7, #19]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d10b      	bne.n	800fd2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800fd14:	4b07      	ldr	r3, [pc, #28]	; (800fd34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fd16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd22:	4904      	ldr	r1, [pc, #16]	; (800fd34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fd24:	4313      	orrs	r3, r2
 800fd26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800fd2a:	e009      	b.n	800fd40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800fd2c:	7cfb      	ldrb	r3, [r7, #19]
 800fd2e:	74bb      	strb	r3, [r7, #18]
 800fd30:	e006      	b.n	800fd40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800fd32:	bf00      	nop
 800fd34:	40021000 	.word	0x40021000
 800fd38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd3c:	7cfb      	ldrb	r3, [r7, #19]
 800fd3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800fd40:	7c7b      	ldrb	r3, [r7, #17]
 800fd42:	2b01      	cmp	r3, #1
 800fd44:	d105      	bne.n	800fd52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fd46:	4b8a      	ldr	r3, [pc, #552]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fd48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd4a:	4a89      	ldr	r2, [pc, #548]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fd4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fd50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	f003 0301 	and.w	r3, r3, #1
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d00a      	beq.n	800fd74 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800fd5e:	4b84      	ldr	r3, [pc, #528]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fd60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd64:	f023 0203 	bic.w	r2, r3, #3
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6a1b      	ldr	r3, [r3, #32]
 800fd6c:	4980      	ldr	r1, [pc, #512]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fd6e:	4313      	orrs	r3, r2
 800fd70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	f003 0302 	and.w	r3, r3, #2
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d00a      	beq.n	800fd96 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800fd80:	4b7b      	ldr	r3, [pc, #492]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fd82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd86:	f023 020c 	bic.w	r2, r3, #12
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd8e:	4978      	ldr	r1, [pc, #480]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fd90:	4313      	orrs	r3, r2
 800fd92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f003 0320 	and.w	r3, r3, #32
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d00a      	beq.n	800fdb8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800fda2:	4b73      	ldr	r3, [pc, #460]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fda4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fda8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdb0:	496f      	ldr	r1, [pc, #444]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fdb2:	4313      	orrs	r3, r2
 800fdb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d00a      	beq.n	800fdda <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800fdc4:	4b6a      	ldr	r3, [pc, #424]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fdc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fdca:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdd2:	4967      	ldr	r1, [pc, #412]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fdd4:	4313      	orrs	r3, r2
 800fdd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d00a      	beq.n	800fdfc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800fde6:	4b62      	ldr	r3, [pc, #392]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fde8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fdec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdf4:	495e      	ldr	r1, [pc, #376]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fdf6:	4313      	orrs	r3, r2
 800fdf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d00a      	beq.n	800fe1e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800fe08:	4b59      	ldr	r3, [pc, #356]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fe0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe16:	4956      	ldr	r1, [pc, #344]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fe18:	4313      	orrs	r3, r2
 800fe1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d00a      	beq.n	800fe40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800fe2a:	4b51      	ldr	r3, [pc, #324]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fe2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe38:	494d      	ldr	r1, [pc, #308]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fe3a:	4313      	orrs	r3, r2
 800fe3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d028      	beq.n	800fe9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800fe4c:	4b48      	ldr	r3, [pc, #288]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fe4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe5a:	4945      	ldr	r1, [pc, #276]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fe5c:	4313      	orrs	r3, r2
 800fe5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fe6a:	d106      	bne.n	800fe7a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800fe6c:	4b40      	ldr	r3, [pc, #256]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fe6e:	68db      	ldr	r3, [r3, #12]
 800fe70:	4a3f      	ldr	r2, [pc, #252]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fe72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fe76:	60d3      	str	r3, [r2, #12]
 800fe78:	e011      	b.n	800fe9e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fe82:	d10c      	bne.n	800fe9e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	3304      	adds	r3, #4
 800fe88:	2101      	movs	r1, #1
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f000 f872 	bl	800ff74 <RCCEx_PLLSAI1_Config>
 800fe90:	4603      	mov	r3, r0
 800fe92:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800fe94:	7cfb      	ldrb	r3, [r7, #19]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d001      	beq.n	800fe9e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800fe9a:	7cfb      	ldrb	r3, [r7, #19]
 800fe9c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d028      	beq.n	800fefc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800feaa:	4b31      	ldr	r3, [pc, #196]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800feac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800feb0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800feb8:	492d      	ldr	r1, [pc, #180]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800feba:	4313      	orrs	r3, r2
 800febc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fec8:	d106      	bne.n	800fed8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800feca:	4b29      	ldr	r3, [pc, #164]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fecc:	68db      	ldr	r3, [r3, #12]
 800fece:	4a28      	ldr	r2, [pc, #160]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fed0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fed4:	60d3      	str	r3, [r2, #12]
 800fed6:	e011      	b.n	800fefc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fedc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fee0:	d10c      	bne.n	800fefc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	3304      	adds	r3, #4
 800fee6:	2101      	movs	r1, #1
 800fee8:	4618      	mov	r0, r3
 800feea:	f000 f843 	bl	800ff74 <RCCEx_PLLSAI1_Config>
 800feee:	4603      	mov	r3, r0
 800fef0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800fef2:	7cfb      	ldrb	r3, [r7, #19]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d001      	beq.n	800fefc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800fef8:	7cfb      	ldrb	r3, [r7, #19]
 800fefa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d01c      	beq.n	800ff42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ff08:	4b19      	ldr	r3, [pc, #100]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ff0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff16:	4916      	ldr	r1, [pc, #88]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ff18:	4313      	orrs	r3, r2
 800ff1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ff26:	d10c      	bne.n	800ff42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	3304      	adds	r3, #4
 800ff2c:	2102      	movs	r1, #2
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f000 f820 	bl	800ff74 <RCCEx_PLLSAI1_Config>
 800ff34:	4603      	mov	r3, r0
 800ff36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ff38:	7cfb      	ldrb	r3, [r7, #19]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d001      	beq.n	800ff42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800ff3e:	7cfb      	ldrb	r3, [r7, #19]
 800ff40:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d00a      	beq.n	800ff64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ff4e:	4b08      	ldr	r3, [pc, #32]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ff50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff54:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff5c:	4904      	ldr	r1, [pc, #16]	; (800ff70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ff5e:	4313      	orrs	r3, r2
 800ff60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800ff64:	7cbb      	ldrb	r3, [r7, #18]
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	3718      	adds	r7, #24
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}
 800ff6e:	bf00      	nop
 800ff70:	40021000 	.word	0x40021000

0800ff74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b084      	sub	sp, #16
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ff82:	4b74      	ldr	r3, [pc, #464]	; (8010154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ff84:	68db      	ldr	r3, [r3, #12]
 800ff86:	f003 0303 	and.w	r3, r3, #3
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d018      	beq.n	800ffc0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800ff8e:	4b71      	ldr	r3, [pc, #452]	; (8010154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ff90:	68db      	ldr	r3, [r3, #12]
 800ff92:	f003 0203 	and.w	r2, r3, #3
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d10d      	bne.n	800ffba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
       ||
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d009      	beq.n	800ffba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800ffa6:	4b6b      	ldr	r3, [pc, #428]	; (8010154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ffa8:	68db      	ldr	r3, [r3, #12]
 800ffaa:	091b      	lsrs	r3, r3, #4
 800ffac:	f003 0307 	and.w	r3, r3, #7
 800ffb0:	1c5a      	adds	r2, r3, #1
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	685b      	ldr	r3, [r3, #4]
       ||
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	d047      	beq.n	801004a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800ffba:	2301      	movs	r3, #1
 800ffbc:	73fb      	strb	r3, [r7, #15]
 800ffbe:	e044      	b.n	801004a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	2b03      	cmp	r3, #3
 800ffc6:	d018      	beq.n	800fffa <RCCEx_PLLSAI1_Config+0x86>
 800ffc8:	2b03      	cmp	r3, #3
 800ffca:	d825      	bhi.n	8010018 <RCCEx_PLLSAI1_Config+0xa4>
 800ffcc:	2b01      	cmp	r3, #1
 800ffce:	d002      	beq.n	800ffd6 <RCCEx_PLLSAI1_Config+0x62>
 800ffd0:	2b02      	cmp	r3, #2
 800ffd2:	d009      	beq.n	800ffe8 <RCCEx_PLLSAI1_Config+0x74>
 800ffd4:	e020      	b.n	8010018 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ffd6:	4b5f      	ldr	r3, [pc, #380]	; (8010154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	f003 0302 	and.w	r3, r3, #2
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d11d      	bne.n	801001e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ffe6:	e01a      	b.n	801001e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ffe8:	4b5a      	ldr	r3, [pc, #360]	; (8010154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d116      	bne.n	8010022 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800fff4:	2301      	movs	r3, #1
 800fff6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fff8:	e013      	b.n	8010022 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800fffa:	4b56      	ldr	r3, [pc, #344]	; (8010154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010002:	2b00      	cmp	r3, #0
 8010004:	d10f      	bne.n	8010026 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8010006:	4b53      	ldr	r3, [pc, #332]	; (8010154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801000e:	2b00      	cmp	r3, #0
 8010010:	d109      	bne.n	8010026 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8010012:	2301      	movs	r3, #1
 8010014:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010016:	e006      	b.n	8010026 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8010018:	2301      	movs	r3, #1
 801001a:	73fb      	strb	r3, [r7, #15]
      break;
 801001c:	e004      	b.n	8010028 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801001e:	bf00      	nop
 8010020:	e002      	b.n	8010028 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8010022:	bf00      	nop
 8010024:	e000      	b.n	8010028 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8010026:	bf00      	nop
    }

    if(status == HAL_OK)
 8010028:	7bfb      	ldrb	r3, [r7, #15]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d10d      	bne.n	801004a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 801002e:	4b49      	ldr	r3, [pc, #292]	; (8010154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010030:	68db      	ldr	r3, [r3, #12]
 8010032:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6819      	ldr	r1, [r3, #0]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	685b      	ldr	r3, [r3, #4]
 801003e:	3b01      	subs	r3, #1
 8010040:	011b      	lsls	r3, r3, #4
 8010042:	430b      	orrs	r3, r1
 8010044:	4943      	ldr	r1, [pc, #268]	; (8010154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010046:	4313      	orrs	r3, r2
 8010048:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 801004a:	7bfb      	ldrb	r3, [r7, #15]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d17c      	bne.n	801014a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8010050:	4b40      	ldr	r3, [pc, #256]	; (8010154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	4a3f      	ldr	r2, [pc, #252]	; (8010154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010056:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801005a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801005c:	f7fc fae0 	bl	800c620 <HAL_GetTick>
 8010060:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8010062:	e009      	b.n	8010078 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010064:	f7fc fadc 	bl	800c620 <HAL_GetTick>
 8010068:	4602      	mov	r2, r0
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	1ad3      	subs	r3, r2, r3
 801006e:	2b02      	cmp	r3, #2
 8010070:	d902      	bls.n	8010078 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8010072:	2303      	movs	r3, #3
 8010074:	73fb      	strb	r3, [r7, #15]
        break;
 8010076:	e005      	b.n	8010084 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8010078:	4b36      	ldr	r3, [pc, #216]	; (8010154 <RCCEx_PLLSAI1_Config+0x1e0>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010080:	2b00      	cmp	r3, #0
 8010082:	d1ef      	bne.n	8010064 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8010084:	7bfb      	ldrb	r3, [r7, #15]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d15f      	bne.n	801014a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d110      	bne.n	80100b2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010090:	4b30      	ldr	r3, [pc, #192]	; (8010154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010092:	691b      	ldr	r3, [r3, #16]
 8010094:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8010098:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801009c:	687a      	ldr	r2, [r7, #4]
 801009e:	6892      	ldr	r2, [r2, #8]
 80100a0:	0211      	lsls	r1, r2, #8
 80100a2:	687a      	ldr	r2, [r7, #4]
 80100a4:	68d2      	ldr	r2, [r2, #12]
 80100a6:	06d2      	lsls	r2, r2, #27
 80100a8:	430a      	orrs	r2, r1
 80100aa:	492a      	ldr	r1, [pc, #168]	; (8010154 <RCCEx_PLLSAI1_Config+0x1e0>)
 80100ac:	4313      	orrs	r3, r2
 80100ae:	610b      	str	r3, [r1, #16]
 80100b0:	e027      	b.n	8010102 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	2b01      	cmp	r3, #1
 80100b6:	d112      	bne.n	80100de <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80100b8:	4b26      	ldr	r3, [pc, #152]	; (8010154 <RCCEx_PLLSAI1_Config+0x1e0>)
 80100ba:	691b      	ldr	r3, [r3, #16]
 80100bc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80100c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80100c4:	687a      	ldr	r2, [r7, #4]
 80100c6:	6892      	ldr	r2, [r2, #8]
 80100c8:	0211      	lsls	r1, r2, #8
 80100ca:	687a      	ldr	r2, [r7, #4]
 80100cc:	6912      	ldr	r2, [r2, #16]
 80100ce:	0852      	lsrs	r2, r2, #1
 80100d0:	3a01      	subs	r2, #1
 80100d2:	0552      	lsls	r2, r2, #21
 80100d4:	430a      	orrs	r2, r1
 80100d6:	491f      	ldr	r1, [pc, #124]	; (8010154 <RCCEx_PLLSAI1_Config+0x1e0>)
 80100d8:	4313      	orrs	r3, r2
 80100da:	610b      	str	r3, [r1, #16]
 80100dc:	e011      	b.n	8010102 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80100de:	4b1d      	ldr	r3, [pc, #116]	; (8010154 <RCCEx_PLLSAI1_Config+0x1e0>)
 80100e0:	691b      	ldr	r3, [r3, #16]
 80100e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80100e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80100ea:	687a      	ldr	r2, [r7, #4]
 80100ec:	6892      	ldr	r2, [r2, #8]
 80100ee:	0211      	lsls	r1, r2, #8
 80100f0:	687a      	ldr	r2, [r7, #4]
 80100f2:	6952      	ldr	r2, [r2, #20]
 80100f4:	0852      	lsrs	r2, r2, #1
 80100f6:	3a01      	subs	r2, #1
 80100f8:	0652      	lsls	r2, r2, #25
 80100fa:	430a      	orrs	r2, r1
 80100fc:	4915      	ldr	r1, [pc, #84]	; (8010154 <RCCEx_PLLSAI1_Config+0x1e0>)
 80100fe:	4313      	orrs	r3, r2
 8010100:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8010102:	4b14      	ldr	r3, [pc, #80]	; (8010154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	4a13      	ldr	r2, [pc, #76]	; (8010154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010108:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801010c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801010e:	f7fc fa87 	bl	800c620 <HAL_GetTick>
 8010112:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8010114:	e009      	b.n	801012a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010116:	f7fc fa83 	bl	800c620 <HAL_GetTick>
 801011a:	4602      	mov	r2, r0
 801011c:	68bb      	ldr	r3, [r7, #8]
 801011e:	1ad3      	subs	r3, r2, r3
 8010120:	2b02      	cmp	r3, #2
 8010122:	d902      	bls.n	801012a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8010124:	2303      	movs	r3, #3
 8010126:	73fb      	strb	r3, [r7, #15]
          break;
 8010128:	e005      	b.n	8010136 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801012a:	4b0a      	ldr	r3, [pc, #40]	; (8010154 <RCCEx_PLLSAI1_Config+0x1e0>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010132:	2b00      	cmp	r3, #0
 8010134:	d0ef      	beq.n	8010116 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8010136:	7bfb      	ldrb	r3, [r7, #15]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d106      	bne.n	801014a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 801013c:	4b05      	ldr	r3, [pc, #20]	; (8010154 <RCCEx_PLLSAI1_Config+0x1e0>)
 801013e:	691a      	ldr	r2, [r3, #16]
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	699b      	ldr	r3, [r3, #24]
 8010144:	4903      	ldr	r1, [pc, #12]	; (8010154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010146:	4313      	orrs	r3, r2
 8010148:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 801014a:	7bfb      	ldrb	r3, [r7, #15]
}
 801014c:	4618      	mov	r0, r3
 801014e:	3710      	adds	r7, #16
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}
 8010154:	40021000 	.word	0x40021000

08010158 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b082      	sub	sp, #8
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d101      	bne.n	801016a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010166:	2301      	movs	r3, #1
 8010168:	e049      	b.n	80101fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010170:	b2db      	uxtb	r3, r3
 8010172:	2b00      	cmp	r3, #0
 8010174:	d106      	bne.n	8010184 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2200      	movs	r2, #0
 801017a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f7fb faac 	bl	800b6dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2202      	movs	r2, #2
 8010188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681a      	ldr	r2, [r3, #0]
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	3304      	adds	r3, #4
 8010194:	4619      	mov	r1, r3
 8010196:	4610      	mov	r0, r2
 8010198:	f000 fcaa 	bl	8010af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2201      	movs	r2, #1
 80101a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2201      	movs	r2, #1
 80101a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2201      	movs	r2, #1
 80101b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2201      	movs	r2, #1
 80101b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2201      	movs	r2, #1
 80101c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2201      	movs	r2, #1
 80101c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2201      	movs	r2, #1
 80101d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2201      	movs	r2, #1
 80101d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2201      	movs	r2, #1
 80101e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2201      	movs	r2, #1
 80101e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2201      	movs	r2, #1
 80101f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2201      	movs	r2, #1
 80101f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80101fc:	2300      	movs	r3, #0
}
 80101fe:	4618      	mov	r0, r3
 8010200:	3708      	adds	r7, #8
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}
	...

08010208 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010208:	b480      	push	{r7}
 801020a:	b085      	sub	sp, #20
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010216:	b2db      	uxtb	r3, r3
 8010218:	2b01      	cmp	r3, #1
 801021a:	d001      	beq.n	8010220 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801021c:	2301      	movs	r3, #1
 801021e:	e03b      	b.n	8010298 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2202      	movs	r2, #2
 8010224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	68da      	ldr	r2, [r3, #12]
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	f042 0201 	orr.w	r2, r2, #1
 8010236:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	4a19      	ldr	r2, [pc, #100]	; (80102a4 <HAL_TIM_Base_Start_IT+0x9c>)
 801023e:	4293      	cmp	r3, r2
 8010240:	d009      	beq.n	8010256 <HAL_TIM_Base_Start_IT+0x4e>
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801024a:	d004      	beq.n	8010256 <HAL_TIM_Base_Start_IT+0x4e>
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	4a15      	ldr	r2, [pc, #84]	; (80102a8 <HAL_TIM_Base_Start_IT+0xa0>)
 8010252:	4293      	cmp	r3, r2
 8010254:	d115      	bne.n	8010282 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	689a      	ldr	r2, [r3, #8]
 801025c:	4b13      	ldr	r3, [pc, #76]	; (80102ac <HAL_TIM_Base_Start_IT+0xa4>)
 801025e:	4013      	ands	r3, r2
 8010260:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	2b06      	cmp	r3, #6
 8010266:	d015      	beq.n	8010294 <HAL_TIM_Base_Start_IT+0x8c>
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801026e:	d011      	beq.n	8010294 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	681a      	ldr	r2, [r3, #0]
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	f042 0201 	orr.w	r2, r2, #1
 801027e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010280:	e008      	b.n	8010294 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	681a      	ldr	r2, [r3, #0]
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	f042 0201 	orr.w	r2, r2, #1
 8010290:	601a      	str	r2, [r3, #0]
 8010292:	e000      	b.n	8010296 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010294:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010296:	2300      	movs	r3, #0
}
 8010298:	4618      	mov	r0, r3
 801029a:	3714      	adds	r7, #20
 801029c:	46bd      	mov	sp, r7
 801029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a2:	4770      	bx	lr
 80102a4:	40012c00 	.word	0x40012c00
 80102a8:	40014000 	.word	0x40014000
 80102ac:	00010007 	.word	0x00010007

080102b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b082      	sub	sp, #8
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d101      	bne.n	80102c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80102be:	2301      	movs	r3, #1
 80102c0:	e049      	b.n	8010356 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80102c8:	b2db      	uxtb	r3, r3
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d106      	bne.n	80102dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2200      	movs	r2, #0
 80102d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f7fb f9ac 	bl	800b634 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2202      	movs	r2, #2
 80102e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681a      	ldr	r2, [r3, #0]
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	3304      	adds	r3, #4
 80102ec:	4619      	mov	r1, r3
 80102ee:	4610      	mov	r0, r2
 80102f0:	f000 fbfe 	bl	8010af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2201      	movs	r2, #1
 80102f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2201      	movs	r2, #1
 8010300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2201      	movs	r2, #1
 8010308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2201      	movs	r2, #1
 8010310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2201      	movs	r2, #1
 8010318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2201      	movs	r2, #1
 8010320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2201      	movs	r2, #1
 8010328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2201      	movs	r2, #1
 8010330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2201      	movs	r2, #1
 8010338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2201      	movs	r2, #1
 8010340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2201      	movs	r2, #1
 8010348:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2201      	movs	r2, #1
 8010350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010354:	2300      	movs	r3, #0
}
 8010356:	4618      	mov	r0, r3
 8010358:	3708      	adds	r7, #8
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}
	...

08010360 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b084      	sub	sp, #16
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
 8010368:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d109      	bne.n	8010384 <HAL_TIM_PWM_Start+0x24>
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010376:	b2db      	uxtb	r3, r3
 8010378:	2b01      	cmp	r3, #1
 801037a:	bf14      	ite	ne
 801037c:	2301      	movne	r3, #1
 801037e:	2300      	moveq	r3, #0
 8010380:	b2db      	uxtb	r3, r3
 8010382:	e03c      	b.n	80103fe <HAL_TIM_PWM_Start+0x9e>
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	2b04      	cmp	r3, #4
 8010388:	d109      	bne.n	801039e <HAL_TIM_PWM_Start+0x3e>
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010390:	b2db      	uxtb	r3, r3
 8010392:	2b01      	cmp	r3, #1
 8010394:	bf14      	ite	ne
 8010396:	2301      	movne	r3, #1
 8010398:	2300      	moveq	r3, #0
 801039a:	b2db      	uxtb	r3, r3
 801039c:	e02f      	b.n	80103fe <HAL_TIM_PWM_Start+0x9e>
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	2b08      	cmp	r3, #8
 80103a2:	d109      	bne.n	80103b8 <HAL_TIM_PWM_Start+0x58>
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80103aa:	b2db      	uxtb	r3, r3
 80103ac:	2b01      	cmp	r3, #1
 80103ae:	bf14      	ite	ne
 80103b0:	2301      	movne	r3, #1
 80103b2:	2300      	moveq	r3, #0
 80103b4:	b2db      	uxtb	r3, r3
 80103b6:	e022      	b.n	80103fe <HAL_TIM_PWM_Start+0x9e>
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	2b0c      	cmp	r3, #12
 80103bc:	d109      	bne.n	80103d2 <HAL_TIM_PWM_Start+0x72>
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80103c4:	b2db      	uxtb	r3, r3
 80103c6:	2b01      	cmp	r3, #1
 80103c8:	bf14      	ite	ne
 80103ca:	2301      	movne	r3, #1
 80103cc:	2300      	moveq	r3, #0
 80103ce:	b2db      	uxtb	r3, r3
 80103d0:	e015      	b.n	80103fe <HAL_TIM_PWM_Start+0x9e>
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	2b10      	cmp	r3, #16
 80103d6:	d109      	bne.n	80103ec <HAL_TIM_PWM_Start+0x8c>
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80103de:	b2db      	uxtb	r3, r3
 80103e0:	2b01      	cmp	r3, #1
 80103e2:	bf14      	ite	ne
 80103e4:	2301      	movne	r3, #1
 80103e6:	2300      	moveq	r3, #0
 80103e8:	b2db      	uxtb	r3, r3
 80103ea:	e008      	b.n	80103fe <HAL_TIM_PWM_Start+0x9e>
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80103f2:	b2db      	uxtb	r3, r3
 80103f4:	2b01      	cmp	r3, #1
 80103f6:	bf14      	ite	ne
 80103f8:	2301      	movne	r3, #1
 80103fa:	2300      	moveq	r3, #0
 80103fc:	b2db      	uxtb	r3, r3
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d001      	beq.n	8010406 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8010402:	2301      	movs	r3, #1
 8010404:	e07e      	b.n	8010504 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d104      	bne.n	8010416 <HAL_TIM_PWM_Start+0xb6>
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2202      	movs	r2, #2
 8010410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010414:	e023      	b.n	801045e <HAL_TIM_PWM_Start+0xfe>
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	2b04      	cmp	r3, #4
 801041a:	d104      	bne.n	8010426 <HAL_TIM_PWM_Start+0xc6>
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2202      	movs	r2, #2
 8010420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010424:	e01b      	b.n	801045e <HAL_TIM_PWM_Start+0xfe>
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	2b08      	cmp	r3, #8
 801042a:	d104      	bne.n	8010436 <HAL_TIM_PWM_Start+0xd6>
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2202      	movs	r2, #2
 8010430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010434:	e013      	b.n	801045e <HAL_TIM_PWM_Start+0xfe>
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	2b0c      	cmp	r3, #12
 801043a:	d104      	bne.n	8010446 <HAL_TIM_PWM_Start+0xe6>
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2202      	movs	r2, #2
 8010440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010444:	e00b      	b.n	801045e <HAL_TIM_PWM_Start+0xfe>
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	2b10      	cmp	r3, #16
 801044a:	d104      	bne.n	8010456 <HAL_TIM_PWM_Start+0xf6>
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2202      	movs	r2, #2
 8010450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010454:	e003      	b.n	801045e <HAL_TIM_PWM_Start+0xfe>
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	2202      	movs	r2, #2
 801045a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	2201      	movs	r2, #1
 8010464:	6839      	ldr	r1, [r7, #0]
 8010466:	4618      	mov	r0, r3
 8010468:	f000 fe24 	bl	80110b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	4a26      	ldr	r2, [pc, #152]	; (801050c <HAL_TIM_PWM_Start+0x1ac>)
 8010472:	4293      	cmp	r3, r2
 8010474:	d009      	beq.n	801048a <HAL_TIM_PWM_Start+0x12a>
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	4a25      	ldr	r2, [pc, #148]	; (8010510 <HAL_TIM_PWM_Start+0x1b0>)
 801047c:	4293      	cmp	r3, r2
 801047e:	d004      	beq.n	801048a <HAL_TIM_PWM_Start+0x12a>
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	4a23      	ldr	r2, [pc, #140]	; (8010514 <HAL_TIM_PWM_Start+0x1b4>)
 8010486:	4293      	cmp	r3, r2
 8010488:	d101      	bne.n	801048e <HAL_TIM_PWM_Start+0x12e>
 801048a:	2301      	movs	r3, #1
 801048c:	e000      	b.n	8010490 <HAL_TIM_PWM_Start+0x130>
 801048e:	2300      	movs	r3, #0
 8010490:	2b00      	cmp	r3, #0
 8010492:	d007      	beq.n	80104a4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80104a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	4a18      	ldr	r2, [pc, #96]	; (801050c <HAL_TIM_PWM_Start+0x1ac>)
 80104aa:	4293      	cmp	r3, r2
 80104ac:	d009      	beq.n	80104c2 <HAL_TIM_PWM_Start+0x162>
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80104b6:	d004      	beq.n	80104c2 <HAL_TIM_PWM_Start+0x162>
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	4a14      	ldr	r2, [pc, #80]	; (8010510 <HAL_TIM_PWM_Start+0x1b0>)
 80104be:	4293      	cmp	r3, r2
 80104c0:	d115      	bne.n	80104ee <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	689a      	ldr	r2, [r3, #8]
 80104c8:	4b13      	ldr	r3, [pc, #76]	; (8010518 <HAL_TIM_PWM_Start+0x1b8>)
 80104ca:	4013      	ands	r3, r2
 80104cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	2b06      	cmp	r3, #6
 80104d2:	d015      	beq.n	8010500 <HAL_TIM_PWM_Start+0x1a0>
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80104da:	d011      	beq.n	8010500 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	681a      	ldr	r2, [r3, #0]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	f042 0201 	orr.w	r2, r2, #1
 80104ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80104ec:	e008      	b.n	8010500 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	681a      	ldr	r2, [r3, #0]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	f042 0201 	orr.w	r2, r2, #1
 80104fc:	601a      	str	r2, [r3, #0]
 80104fe:	e000      	b.n	8010502 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010500:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010502:	2300      	movs	r3, #0
}
 8010504:	4618      	mov	r0, r3
 8010506:	3710      	adds	r7, #16
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}
 801050c:	40012c00 	.word	0x40012c00
 8010510:	40014000 	.word	0x40014000
 8010514:	40014400 	.word	0x40014400
 8010518:	00010007 	.word	0x00010007

0801051c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b082      	sub	sp, #8
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
 8010524:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	2200      	movs	r2, #0
 801052c:	6839      	ldr	r1, [r7, #0]
 801052e:	4618      	mov	r0, r3
 8010530:	f000 fdc0 	bl	80110b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	4a39      	ldr	r2, [pc, #228]	; (8010620 <HAL_TIM_PWM_Stop+0x104>)
 801053a:	4293      	cmp	r3, r2
 801053c:	d009      	beq.n	8010552 <HAL_TIM_PWM_Stop+0x36>
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	4a38      	ldr	r2, [pc, #224]	; (8010624 <HAL_TIM_PWM_Stop+0x108>)
 8010544:	4293      	cmp	r3, r2
 8010546:	d004      	beq.n	8010552 <HAL_TIM_PWM_Stop+0x36>
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	4a36      	ldr	r2, [pc, #216]	; (8010628 <HAL_TIM_PWM_Stop+0x10c>)
 801054e:	4293      	cmp	r3, r2
 8010550:	d101      	bne.n	8010556 <HAL_TIM_PWM_Stop+0x3a>
 8010552:	2301      	movs	r3, #1
 8010554:	e000      	b.n	8010558 <HAL_TIM_PWM_Stop+0x3c>
 8010556:	2300      	movs	r3, #0
 8010558:	2b00      	cmp	r3, #0
 801055a:	d017      	beq.n	801058c <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	6a1a      	ldr	r2, [r3, #32]
 8010562:	f241 1311 	movw	r3, #4369	; 0x1111
 8010566:	4013      	ands	r3, r2
 8010568:	2b00      	cmp	r3, #0
 801056a:	d10f      	bne.n	801058c <HAL_TIM_PWM_Stop+0x70>
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	6a1a      	ldr	r2, [r3, #32]
 8010572:	f240 4344 	movw	r3, #1092	; 0x444
 8010576:	4013      	ands	r3, r2
 8010578:	2b00      	cmp	r3, #0
 801057a:	d107      	bne.n	801058c <HAL_TIM_PWM_Stop+0x70>
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801058a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	6a1a      	ldr	r2, [r3, #32]
 8010592:	f241 1311 	movw	r3, #4369	; 0x1111
 8010596:	4013      	ands	r3, r2
 8010598:	2b00      	cmp	r3, #0
 801059a:	d10f      	bne.n	80105bc <HAL_TIM_PWM_Stop+0xa0>
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	6a1a      	ldr	r2, [r3, #32]
 80105a2:	f240 4344 	movw	r3, #1092	; 0x444
 80105a6:	4013      	ands	r3, r2
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d107      	bne.n	80105bc <HAL_TIM_PWM_Stop+0xa0>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	681a      	ldr	r2, [r3, #0]
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	f022 0201 	bic.w	r2, r2, #1
 80105ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d104      	bne.n	80105cc <HAL_TIM_PWM_Stop+0xb0>
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2201      	movs	r2, #1
 80105c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80105ca:	e023      	b.n	8010614 <HAL_TIM_PWM_Stop+0xf8>
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	2b04      	cmp	r3, #4
 80105d0:	d104      	bne.n	80105dc <HAL_TIM_PWM_Stop+0xc0>
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	2201      	movs	r2, #1
 80105d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80105da:	e01b      	b.n	8010614 <HAL_TIM_PWM_Stop+0xf8>
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	2b08      	cmp	r3, #8
 80105e0:	d104      	bne.n	80105ec <HAL_TIM_PWM_Stop+0xd0>
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2201      	movs	r2, #1
 80105e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80105ea:	e013      	b.n	8010614 <HAL_TIM_PWM_Stop+0xf8>
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	2b0c      	cmp	r3, #12
 80105f0:	d104      	bne.n	80105fc <HAL_TIM_PWM_Stop+0xe0>
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2201      	movs	r2, #1
 80105f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80105fa:	e00b      	b.n	8010614 <HAL_TIM_PWM_Stop+0xf8>
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	2b10      	cmp	r3, #16
 8010600:	d104      	bne.n	801060c <HAL_TIM_PWM_Stop+0xf0>
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	2201      	movs	r2, #1
 8010606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801060a:	e003      	b.n	8010614 <HAL_TIM_PWM_Stop+0xf8>
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2201      	movs	r2, #1
 8010610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8010614:	2300      	movs	r3, #0
}
 8010616:	4618      	mov	r0, r3
 8010618:	3708      	adds	r7, #8
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}
 801061e:	bf00      	nop
 8010620:	40012c00 	.word	0x40012c00
 8010624:	40014000 	.word	0x40014000
 8010628:	40014400 	.word	0x40014400

0801062c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b082      	sub	sp, #8
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	691b      	ldr	r3, [r3, #16]
 801063a:	f003 0302 	and.w	r3, r3, #2
 801063e:	2b02      	cmp	r3, #2
 8010640:	d122      	bne.n	8010688 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	68db      	ldr	r3, [r3, #12]
 8010648:	f003 0302 	and.w	r3, r3, #2
 801064c:	2b02      	cmp	r3, #2
 801064e:	d11b      	bne.n	8010688 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	f06f 0202 	mvn.w	r2, #2
 8010658:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2201      	movs	r2, #1
 801065e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	699b      	ldr	r3, [r3, #24]
 8010666:	f003 0303 	and.w	r3, r3, #3
 801066a:	2b00      	cmp	r3, #0
 801066c:	d003      	beq.n	8010676 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801066e:	6878      	ldr	r0, [r7, #4]
 8010670:	f000 fa20 	bl	8010ab4 <HAL_TIM_IC_CaptureCallback>
 8010674:	e005      	b.n	8010682 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f000 fa12 	bl	8010aa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f000 fa23 	bl	8010ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	2200      	movs	r2, #0
 8010686:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	691b      	ldr	r3, [r3, #16]
 801068e:	f003 0304 	and.w	r3, r3, #4
 8010692:	2b04      	cmp	r3, #4
 8010694:	d122      	bne.n	80106dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	68db      	ldr	r3, [r3, #12]
 801069c:	f003 0304 	and.w	r3, r3, #4
 80106a0:	2b04      	cmp	r3, #4
 80106a2:	d11b      	bne.n	80106dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	f06f 0204 	mvn.w	r2, #4
 80106ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2202      	movs	r2, #2
 80106b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	699b      	ldr	r3, [r3, #24]
 80106ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d003      	beq.n	80106ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f000 f9f6 	bl	8010ab4 <HAL_TIM_IC_CaptureCallback>
 80106c8:	e005      	b.n	80106d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f000 f9e8 	bl	8010aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80106d0:	6878      	ldr	r0, [r7, #4]
 80106d2:	f000 f9f9 	bl	8010ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2200      	movs	r2, #0
 80106da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	691b      	ldr	r3, [r3, #16]
 80106e2:	f003 0308 	and.w	r3, r3, #8
 80106e6:	2b08      	cmp	r3, #8
 80106e8:	d122      	bne.n	8010730 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	68db      	ldr	r3, [r3, #12]
 80106f0:	f003 0308 	and.w	r3, r3, #8
 80106f4:	2b08      	cmp	r3, #8
 80106f6:	d11b      	bne.n	8010730 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	f06f 0208 	mvn.w	r2, #8
 8010700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	2204      	movs	r2, #4
 8010706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	69db      	ldr	r3, [r3, #28]
 801070e:	f003 0303 	and.w	r3, r3, #3
 8010712:	2b00      	cmp	r3, #0
 8010714:	d003      	beq.n	801071e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f000 f9cc 	bl	8010ab4 <HAL_TIM_IC_CaptureCallback>
 801071c:	e005      	b.n	801072a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	f000 f9be 	bl	8010aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f000 f9cf 	bl	8010ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	2200      	movs	r2, #0
 801072e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	691b      	ldr	r3, [r3, #16]
 8010736:	f003 0310 	and.w	r3, r3, #16
 801073a:	2b10      	cmp	r3, #16
 801073c:	d122      	bne.n	8010784 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	68db      	ldr	r3, [r3, #12]
 8010744:	f003 0310 	and.w	r3, r3, #16
 8010748:	2b10      	cmp	r3, #16
 801074a:	d11b      	bne.n	8010784 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	f06f 0210 	mvn.w	r2, #16
 8010754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	2208      	movs	r2, #8
 801075a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	69db      	ldr	r3, [r3, #28]
 8010762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010766:	2b00      	cmp	r3, #0
 8010768:	d003      	beq.n	8010772 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801076a:	6878      	ldr	r0, [r7, #4]
 801076c:	f000 f9a2 	bl	8010ab4 <HAL_TIM_IC_CaptureCallback>
 8010770:	e005      	b.n	801077e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010772:	6878      	ldr	r0, [r7, #4]
 8010774:	f000 f994 	bl	8010aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	f000 f9a5 	bl	8010ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2200      	movs	r2, #0
 8010782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	691b      	ldr	r3, [r3, #16]
 801078a:	f003 0301 	and.w	r3, r3, #1
 801078e:	2b01      	cmp	r3, #1
 8010790:	d10e      	bne.n	80107b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	68db      	ldr	r3, [r3, #12]
 8010798:	f003 0301 	and.w	r3, r3, #1
 801079c:	2b01      	cmp	r3, #1
 801079e:	d107      	bne.n	80107b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	f06f 0201 	mvn.w	r2, #1
 80107a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80107aa:	6878      	ldr	r0, [r7, #4]
 80107ac:	f000 f96e 	bl	8010a8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	691b      	ldr	r3, [r3, #16]
 80107b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107ba:	2b80      	cmp	r3, #128	; 0x80
 80107bc:	d10e      	bne.n	80107dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	68db      	ldr	r3, [r3, #12]
 80107c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107c8:	2b80      	cmp	r3, #128	; 0x80
 80107ca:	d107      	bne.n	80107dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80107d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80107d6:	6878      	ldr	r0, [r7, #4]
 80107d8:	f000 fd7a 	bl	80112d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	691b      	ldr	r3, [r3, #16]
 80107e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107ea:	d10e      	bne.n	801080a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	68db      	ldr	r3, [r3, #12]
 80107f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107f6:	2b80      	cmp	r3, #128	; 0x80
 80107f8:	d107      	bne.n	801080a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f000 fd6d 	bl	80112e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	691b      	ldr	r3, [r3, #16]
 8010810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010814:	2b40      	cmp	r3, #64	; 0x40
 8010816:	d10e      	bne.n	8010836 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	68db      	ldr	r3, [r3, #12]
 801081e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010822:	2b40      	cmp	r3, #64	; 0x40
 8010824:	d107      	bne.n	8010836 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801082e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f000 f953 	bl	8010adc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	691b      	ldr	r3, [r3, #16]
 801083c:	f003 0320 	and.w	r3, r3, #32
 8010840:	2b20      	cmp	r3, #32
 8010842:	d10e      	bne.n	8010862 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	68db      	ldr	r3, [r3, #12]
 801084a:	f003 0320 	and.w	r3, r3, #32
 801084e:	2b20      	cmp	r3, #32
 8010850:	d107      	bne.n	8010862 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	f06f 0220 	mvn.w	r2, #32
 801085a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801085c:	6878      	ldr	r0, [r7, #4]
 801085e:	f000 fd2d 	bl	80112bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010862:	bf00      	nop
 8010864:	3708      	adds	r7, #8
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}
	...

0801086c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b084      	sub	sp, #16
 8010870:	af00      	add	r7, sp, #0
 8010872:	60f8      	str	r0, [r7, #12]
 8010874:	60b9      	str	r1, [r7, #8]
 8010876:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801087e:	2b01      	cmp	r3, #1
 8010880:	d101      	bne.n	8010886 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8010882:	2302      	movs	r3, #2
 8010884:	e0fd      	b.n	8010a82 <HAL_TIM_PWM_ConfigChannel+0x216>
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	2201      	movs	r2, #1
 801088a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	2b14      	cmp	r3, #20
 8010892:	f200 80f0 	bhi.w	8010a76 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8010896:	a201      	add	r2, pc, #4	; (adr r2, 801089c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8010898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801089c:	080108f1 	.word	0x080108f1
 80108a0:	08010a77 	.word	0x08010a77
 80108a4:	08010a77 	.word	0x08010a77
 80108a8:	08010a77 	.word	0x08010a77
 80108ac:	08010931 	.word	0x08010931
 80108b0:	08010a77 	.word	0x08010a77
 80108b4:	08010a77 	.word	0x08010a77
 80108b8:	08010a77 	.word	0x08010a77
 80108bc:	08010973 	.word	0x08010973
 80108c0:	08010a77 	.word	0x08010a77
 80108c4:	08010a77 	.word	0x08010a77
 80108c8:	08010a77 	.word	0x08010a77
 80108cc:	080109b3 	.word	0x080109b3
 80108d0:	08010a77 	.word	0x08010a77
 80108d4:	08010a77 	.word	0x08010a77
 80108d8:	08010a77 	.word	0x08010a77
 80108dc:	080109f5 	.word	0x080109f5
 80108e0:	08010a77 	.word	0x08010a77
 80108e4:	08010a77 	.word	0x08010a77
 80108e8:	08010a77 	.word	0x08010a77
 80108ec:	08010a35 	.word	0x08010a35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	68b9      	ldr	r1, [r7, #8]
 80108f6:	4618      	mov	r0, r3
 80108f8:	f000 f95e 	bl	8010bb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	699a      	ldr	r2, [r3, #24]
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	f042 0208 	orr.w	r2, r2, #8
 801090a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	699a      	ldr	r2, [r3, #24]
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	f022 0204 	bic.w	r2, r2, #4
 801091a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	6999      	ldr	r1, [r3, #24]
 8010922:	68bb      	ldr	r3, [r7, #8]
 8010924:	691a      	ldr	r2, [r3, #16]
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	430a      	orrs	r2, r1
 801092c:	619a      	str	r2, [r3, #24]
      break;
 801092e:	e0a3      	b.n	8010a78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	68b9      	ldr	r1, [r7, #8]
 8010936:	4618      	mov	r0, r3
 8010938:	f000 f9ba 	bl	8010cb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	699a      	ldr	r2, [r3, #24]
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801094a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	699a      	ldr	r2, [r3, #24]
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801095a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	6999      	ldr	r1, [r3, #24]
 8010962:	68bb      	ldr	r3, [r7, #8]
 8010964:	691b      	ldr	r3, [r3, #16]
 8010966:	021a      	lsls	r2, r3, #8
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	430a      	orrs	r2, r1
 801096e:	619a      	str	r2, [r3, #24]
      break;
 8010970:	e082      	b.n	8010a78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	68b9      	ldr	r1, [r7, #8]
 8010978:	4618      	mov	r0, r3
 801097a:	f000 fa13 	bl	8010da4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	69da      	ldr	r2, [r3, #28]
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	f042 0208 	orr.w	r2, r2, #8
 801098c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	69da      	ldr	r2, [r3, #28]
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	f022 0204 	bic.w	r2, r2, #4
 801099c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	69d9      	ldr	r1, [r3, #28]
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	691a      	ldr	r2, [r3, #16]
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	430a      	orrs	r2, r1
 80109ae:	61da      	str	r2, [r3, #28]
      break;
 80109b0:	e062      	b.n	8010a78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	68b9      	ldr	r1, [r7, #8]
 80109b8:	4618      	mov	r0, r3
 80109ba:	f000 fa6b 	bl	8010e94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	69da      	ldr	r2, [r3, #28]
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80109cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	69da      	ldr	r2, [r3, #28]
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80109dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	69d9      	ldr	r1, [r3, #28]
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	691b      	ldr	r3, [r3, #16]
 80109e8:	021a      	lsls	r2, r3, #8
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	430a      	orrs	r2, r1
 80109f0:	61da      	str	r2, [r3, #28]
      break;
 80109f2:	e041      	b.n	8010a78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	68b9      	ldr	r1, [r7, #8]
 80109fa:	4618      	mov	r0, r3
 80109fc:	f000 faa8 	bl	8010f50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	f042 0208 	orr.w	r2, r2, #8
 8010a0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	f022 0204 	bic.w	r2, r2, #4
 8010a1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	691a      	ldr	r2, [r3, #16]
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	430a      	orrs	r2, r1
 8010a30:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010a32:	e021      	b.n	8010a78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	68b9      	ldr	r1, [r7, #8]
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f000 fae0 	bl	8011000 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010a4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010a5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	691b      	ldr	r3, [r3, #16]
 8010a6a:	021a      	lsls	r2, r3, #8
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	430a      	orrs	r2, r1
 8010a72:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010a74:	e000      	b.n	8010a78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8010a76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010a80:	2300      	movs	r3, #0
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	3710      	adds	r7, #16
 8010a86:	46bd      	mov	sp, r7
 8010a88:	bd80      	pop	{r7, pc}
 8010a8a:	bf00      	nop

08010a8c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	b083      	sub	sp, #12
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010a94:	bf00      	nop
 8010a96:	370c      	adds	r7, #12
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9e:	4770      	bx	lr

08010aa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010aa0:	b480      	push	{r7}
 8010aa2:	b083      	sub	sp, #12
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010aa8:	bf00      	nop
 8010aaa:	370c      	adds	r7, #12
 8010aac:	46bd      	mov	sp, r7
 8010aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab2:	4770      	bx	lr

08010ab4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010ab4:	b480      	push	{r7}
 8010ab6:	b083      	sub	sp, #12
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010abc:	bf00      	nop
 8010abe:	370c      	adds	r7, #12
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac6:	4770      	bx	lr

08010ac8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010ac8:	b480      	push	{r7}
 8010aca:	b083      	sub	sp, #12
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010ad0:	bf00      	nop
 8010ad2:	370c      	adds	r7, #12
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ada:	4770      	bx	lr

08010adc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010adc:	b480      	push	{r7}
 8010ade:	b083      	sub	sp, #12
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010ae4:	bf00      	nop
 8010ae6:	370c      	adds	r7, #12
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aee:	4770      	bx	lr

08010af0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010af0:	b480      	push	{r7}
 8010af2:	b085      	sub	sp, #20
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	4a2a      	ldr	r2, [pc, #168]	; (8010bac <TIM_Base_SetConfig+0xbc>)
 8010b04:	4293      	cmp	r3, r2
 8010b06:	d003      	beq.n	8010b10 <TIM_Base_SetConfig+0x20>
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b0e:	d108      	bne.n	8010b22 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	685b      	ldr	r3, [r3, #4]
 8010b1c:	68fa      	ldr	r2, [r7, #12]
 8010b1e:	4313      	orrs	r3, r2
 8010b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	4a21      	ldr	r2, [pc, #132]	; (8010bac <TIM_Base_SetConfig+0xbc>)
 8010b26:	4293      	cmp	r3, r2
 8010b28:	d00b      	beq.n	8010b42 <TIM_Base_SetConfig+0x52>
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b30:	d007      	beq.n	8010b42 <TIM_Base_SetConfig+0x52>
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	4a1e      	ldr	r2, [pc, #120]	; (8010bb0 <TIM_Base_SetConfig+0xc0>)
 8010b36:	4293      	cmp	r3, r2
 8010b38:	d003      	beq.n	8010b42 <TIM_Base_SetConfig+0x52>
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	4a1d      	ldr	r2, [pc, #116]	; (8010bb4 <TIM_Base_SetConfig+0xc4>)
 8010b3e:	4293      	cmp	r3, r2
 8010b40:	d108      	bne.n	8010b54 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	68db      	ldr	r3, [r3, #12]
 8010b4e:	68fa      	ldr	r2, [r7, #12]
 8010b50:	4313      	orrs	r3, r2
 8010b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	695b      	ldr	r3, [r3, #20]
 8010b5e:	4313      	orrs	r3, r2
 8010b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	68fa      	ldr	r2, [r7, #12]
 8010b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	689a      	ldr	r2, [r3, #8]
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010b70:	683b      	ldr	r3, [r7, #0]
 8010b72:	681a      	ldr	r2, [r3, #0]
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	4a0c      	ldr	r2, [pc, #48]	; (8010bac <TIM_Base_SetConfig+0xbc>)
 8010b7c:	4293      	cmp	r3, r2
 8010b7e:	d007      	beq.n	8010b90 <TIM_Base_SetConfig+0xa0>
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	4a0b      	ldr	r2, [pc, #44]	; (8010bb0 <TIM_Base_SetConfig+0xc0>)
 8010b84:	4293      	cmp	r3, r2
 8010b86:	d003      	beq.n	8010b90 <TIM_Base_SetConfig+0xa0>
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	4a0a      	ldr	r2, [pc, #40]	; (8010bb4 <TIM_Base_SetConfig+0xc4>)
 8010b8c:	4293      	cmp	r3, r2
 8010b8e:	d103      	bne.n	8010b98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	691a      	ldr	r2, [r3, #16]
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2201      	movs	r2, #1
 8010b9c:	615a      	str	r2, [r3, #20]
}
 8010b9e:	bf00      	nop
 8010ba0:	3714      	adds	r7, #20
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba8:	4770      	bx	lr
 8010baa:	bf00      	nop
 8010bac:	40012c00 	.word	0x40012c00
 8010bb0:	40014000 	.word	0x40014000
 8010bb4:	40014400 	.word	0x40014400

08010bb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010bb8:	b480      	push	{r7}
 8010bba:	b087      	sub	sp, #28
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
 8010bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	6a1b      	ldr	r3, [r3, #32]
 8010bc6:	f023 0201 	bic.w	r2, r3, #1
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6a1b      	ldr	r3, [r3, #32]
 8010bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	685b      	ldr	r3, [r3, #4]
 8010bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	699b      	ldr	r3, [r3, #24]
 8010bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	f023 0303 	bic.w	r3, r3, #3
 8010bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	68fa      	ldr	r2, [r7, #12]
 8010bfa:	4313      	orrs	r3, r2
 8010bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	f023 0302 	bic.w	r3, r3, #2
 8010c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010c06:	683b      	ldr	r3, [r7, #0]
 8010c08:	689b      	ldr	r3, [r3, #8]
 8010c0a:	697a      	ldr	r2, [r7, #20]
 8010c0c:	4313      	orrs	r3, r2
 8010c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	4a24      	ldr	r2, [pc, #144]	; (8010ca4 <TIM_OC1_SetConfig+0xec>)
 8010c14:	4293      	cmp	r3, r2
 8010c16:	d007      	beq.n	8010c28 <TIM_OC1_SetConfig+0x70>
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	4a23      	ldr	r2, [pc, #140]	; (8010ca8 <TIM_OC1_SetConfig+0xf0>)
 8010c1c:	4293      	cmp	r3, r2
 8010c1e:	d003      	beq.n	8010c28 <TIM_OC1_SetConfig+0x70>
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	4a22      	ldr	r2, [pc, #136]	; (8010cac <TIM_OC1_SetConfig+0xf4>)
 8010c24:	4293      	cmp	r3, r2
 8010c26:	d10c      	bne.n	8010c42 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010c28:	697b      	ldr	r3, [r7, #20]
 8010c2a:	f023 0308 	bic.w	r3, r3, #8
 8010c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010c30:	683b      	ldr	r3, [r7, #0]
 8010c32:	68db      	ldr	r3, [r3, #12]
 8010c34:	697a      	ldr	r2, [r7, #20]
 8010c36:	4313      	orrs	r3, r2
 8010c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	f023 0304 	bic.w	r3, r3, #4
 8010c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	4a17      	ldr	r2, [pc, #92]	; (8010ca4 <TIM_OC1_SetConfig+0xec>)
 8010c46:	4293      	cmp	r3, r2
 8010c48:	d007      	beq.n	8010c5a <TIM_OC1_SetConfig+0xa2>
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	4a16      	ldr	r2, [pc, #88]	; (8010ca8 <TIM_OC1_SetConfig+0xf0>)
 8010c4e:	4293      	cmp	r3, r2
 8010c50:	d003      	beq.n	8010c5a <TIM_OC1_SetConfig+0xa2>
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	4a15      	ldr	r2, [pc, #84]	; (8010cac <TIM_OC1_SetConfig+0xf4>)
 8010c56:	4293      	cmp	r3, r2
 8010c58:	d111      	bne.n	8010c7e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010c5a:	693b      	ldr	r3, [r7, #16]
 8010c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010c60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010c62:	693b      	ldr	r3, [r7, #16]
 8010c64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010c68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010c6a:	683b      	ldr	r3, [r7, #0]
 8010c6c:	695b      	ldr	r3, [r3, #20]
 8010c6e:	693a      	ldr	r2, [r7, #16]
 8010c70:	4313      	orrs	r3, r2
 8010c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	699b      	ldr	r3, [r3, #24]
 8010c78:	693a      	ldr	r2, [r7, #16]
 8010c7a:	4313      	orrs	r3, r2
 8010c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	693a      	ldr	r2, [r7, #16]
 8010c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	68fa      	ldr	r2, [r7, #12]
 8010c88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	685a      	ldr	r2, [r3, #4]
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	697a      	ldr	r2, [r7, #20]
 8010c96:	621a      	str	r2, [r3, #32]
}
 8010c98:	bf00      	nop
 8010c9a:	371c      	adds	r7, #28
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca2:	4770      	bx	lr
 8010ca4:	40012c00 	.word	0x40012c00
 8010ca8:	40014000 	.word	0x40014000
 8010cac:	40014400 	.word	0x40014400

08010cb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010cb0:	b480      	push	{r7}
 8010cb2:	b087      	sub	sp, #28
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
 8010cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	6a1b      	ldr	r3, [r3, #32]
 8010cbe:	f023 0210 	bic.w	r2, r3, #16
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	6a1b      	ldr	r3, [r3, #32]
 8010cca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	685b      	ldr	r3, [r3, #4]
 8010cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	699b      	ldr	r3, [r3, #24]
 8010cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010cec:	683b      	ldr	r3, [r7, #0]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	021b      	lsls	r3, r3, #8
 8010cf2:	68fa      	ldr	r2, [r7, #12]
 8010cf4:	4313      	orrs	r3, r2
 8010cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	f023 0320 	bic.w	r3, r3, #32
 8010cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	689b      	ldr	r3, [r3, #8]
 8010d04:	011b      	lsls	r3, r3, #4
 8010d06:	697a      	ldr	r2, [r7, #20]
 8010d08:	4313      	orrs	r3, r2
 8010d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	4a22      	ldr	r2, [pc, #136]	; (8010d98 <TIM_OC2_SetConfig+0xe8>)
 8010d10:	4293      	cmp	r3, r2
 8010d12:	d10d      	bne.n	8010d30 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	68db      	ldr	r3, [r3, #12]
 8010d20:	011b      	lsls	r3, r3, #4
 8010d22:	697a      	ldr	r2, [r7, #20]
 8010d24:	4313      	orrs	r3, r2
 8010d26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	4a19      	ldr	r2, [pc, #100]	; (8010d98 <TIM_OC2_SetConfig+0xe8>)
 8010d34:	4293      	cmp	r3, r2
 8010d36:	d007      	beq.n	8010d48 <TIM_OC2_SetConfig+0x98>
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	4a18      	ldr	r2, [pc, #96]	; (8010d9c <TIM_OC2_SetConfig+0xec>)
 8010d3c:	4293      	cmp	r3, r2
 8010d3e:	d003      	beq.n	8010d48 <TIM_OC2_SetConfig+0x98>
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	4a17      	ldr	r2, [pc, #92]	; (8010da0 <TIM_OC2_SetConfig+0xf0>)
 8010d44:	4293      	cmp	r3, r2
 8010d46:	d113      	bne.n	8010d70 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010d4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010d50:	693b      	ldr	r3, [r7, #16]
 8010d52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010d56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	695b      	ldr	r3, [r3, #20]
 8010d5c:	009b      	lsls	r3, r3, #2
 8010d5e:	693a      	ldr	r2, [r7, #16]
 8010d60:	4313      	orrs	r3, r2
 8010d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	699b      	ldr	r3, [r3, #24]
 8010d68:	009b      	lsls	r3, r3, #2
 8010d6a:	693a      	ldr	r2, [r7, #16]
 8010d6c:	4313      	orrs	r3, r2
 8010d6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	693a      	ldr	r2, [r7, #16]
 8010d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	68fa      	ldr	r2, [r7, #12]
 8010d7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	685a      	ldr	r2, [r3, #4]
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	697a      	ldr	r2, [r7, #20]
 8010d88:	621a      	str	r2, [r3, #32]
}
 8010d8a:	bf00      	nop
 8010d8c:	371c      	adds	r7, #28
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d94:	4770      	bx	lr
 8010d96:	bf00      	nop
 8010d98:	40012c00 	.word	0x40012c00
 8010d9c:	40014000 	.word	0x40014000
 8010da0:	40014400 	.word	0x40014400

08010da4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010da4:	b480      	push	{r7}
 8010da6:	b087      	sub	sp, #28
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
 8010dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	6a1b      	ldr	r3, [r3, #32]
 8010db2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	6a1b      	ldr	r3, [r3, #32]
 8010dbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	685b      	ldr	r3, [r3, #4]
 8010dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	69db      	ldr	r3, [r3, #28]
 8010dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	f023 0303 	bic.w	r3, r3, #3
 8010dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010de0:	683b      	ldr	r3, [r7, #0]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	68fa      	ldr	r2, [r7, #12]
 8010de6:	4313      	orrs	r3, r2
 8010de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010dea:	697b      	ldr	r3, [r7, #20]
 8010dec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	689b      	ldr	r3, [r3, #8]
 8010df6:	021b      	lsls	r3, r3, #8
 8010df8:	697a      	ldr	r2, [r7, #20]
 8010dfa:	4313      	orrs	r3, r2
 8010dfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	4a21      	ldr	r2, [pc, #132]	; (8010e88 <TIM_OC3_SetConfig+0xe4>)
 8010e02:	4293      	cmp	r3, r2
 8010e04:	d10d      	bne.n	8010e22 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010e06:	697b      	ldr	r3, [r7, #20]
 8010e08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010e0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010e0e:	683b      	ldr	r3, [r7, #0]
 8010e10:	68db      	ldr	r3, [r3, #12]
 8010e12:	021b      	lsls	r3, r3, #8
 8010e14:	697a      	ldr	r2, [r7, #20]
 8010e16:	4313      	orrs	r3, r2
 8010e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010e1a:	697b      	ldr	r3, [r7, #20]
 8010e1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	4a18      	ldr	r2, [pc, #96]	; (8010e88 <TIM_OC3_SetConfig+0xe4>)
 8010e26:	4293      	cmp	r3, r2
 8010e28:	d007      	beq.n	8010e3a <TIM_OC3_SetConfig+0x96>
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	4a17      	ldr	r2, [pc, #92]	; (8010e8c <TIM_OC3_SetConfig+0xe8>)
 8010e2e:	4293      	cmp	r3, r2
 8010e30:	d003      	beq.n	8010e3a <TIM_OC3_SetConfig+0x96>
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	4a16      	ldr	r2, [pc, #88]	; (8010e90 <TIM_OC3_SetConfig+0xec>)
 8010e36:	4293      	cmp	r3, r2
 8010e38:	d113      	bne.n	8010e62 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010e3a:	693b      	ldr	r3, [r7, #16]
 8010e3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010e42:	693b      	ldr	r3, [r7, #16]
 8010e44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	695b      	ldr	r3, [r3, #20]
 8010e4e:	011b      	lsls	r3, r3, #4
 8010e50:	693a      	ldr	r2, [r7, #16]
 8010e52:	4313      	orrs	r3, r2
 8010e54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010e56:	683b      	ldr	r3, [r7, #0]
 8010e58:	699b      	ldr	r3, [r3, #24]
 8010e5a:	011b      	lsls	r3, r3, #4
 8010e5c:	693a      	ldr	r2, [r7, #16]
 8010e5e:	4313      	orrs	r3, r2
 8010e60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	693a      	ldr	r2, [r7, #16]
 8010e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	68fa      	ldr	r2, [r7, #12]
 8010e6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	685a      	ldr	r2, [r3, #4]
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	697a      	ldr	r2, [r7, #20]
 8010e7a:	621a      	str	r2, [r3, #32]
}
 8010e7c:	bf00      	nop
 8010e7e:	371c      	adds	r7, #28
 8010e80:	46bd      	mov	sp, r7
 8010e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e86:	4770      	bx	lr
 8010e88:	40012c00 	.word	0x40012c00
 8010e8c:	40014000 	.word	0x40014000
 8010e90:	40014400 	.word	0x40014400

08010e94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010e94:	b480      	push	{r7}
 8010e96:	b087      	sub	sp, #28
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	6a1b      	ldr	r3, [r3, #32]
 8010ea2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	6a1b      	ldr	r3, [r3, #32]
 8010eae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	685b      	ldr	r3, [r3, #4]
 8010eb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	69db      	ldr	r3, [r3, #28]
 8010eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	021b      	lsls	r3, r3, #8
 8010ed6:	68fa      	ldr	r2, [r7, #12]
 8010ed8:	4313      	orrs	r3, r2
 8010eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010edc:	693b      	ldr	r3, [r7, #16]
 8010ede:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010ee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	689b      	ldr	r3, [r3, #8]
 8010ee8:	031b      	lsls	r3, r3, #12
 8010eea:	693a      	ldr	r2, [r7, #16]
 8010eec:	4313      	orrs	r3, r2
 8010eee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	4a14      	ldr	r2, [pc, #80]	; (8010f44 <TIM_OC4_SetConfig+0xb0>)
 8010ef4:	4293      	cmp	r3, r2
 8010ef6:	d007      	beq.n	8010f08 <TIM_OC4_SetConfig+0x74>
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	4a13      	ldr	r2, [pc, #76]	; (8010f48 <TIM_OC4_SetConfig+0xb4>)
 8010efc:	4293      	cmp	r3, r2
 8010efe:	d003      	beq.n	8010f08 <TIM_OC4_SetConfig+0x74>
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	4a12      	ldr	r2, [pc, #72]	; (8010f4c <TIM_OC4_SetConfig+0xb8>)
 8010f04:	4293      	cmp	r3, r2
 8010f06:	d109      	bne.n	8010f1c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010f0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	695b      	ldr	r3, [r3, #20]
 8010f14:	019b      	lsls	r3, r3, #6
 8010f16:	697a      	ldr	r2, [r7, #20]
 8010f18:	4313      	orrs	r3, r2
 8010f1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	697a      	ldr	r2, [r7, #20]
 8010f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	68fa      	ldr	r2, [r7, #12]
 8010f26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	685a      	ldr	r2, [r3, #4]
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	693a      	ldr	r2, [r7, #16]
 8010f34:	621a      	str	r2, [r3, #32]
}
 8010f36:	bf00      	nop
 8010f38:	371c      	adds	r7, #28
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f40:	4770      	bx	lr
 8010f42:	bf00      	nop
 8010f44:	40012c00 	.word	0x40012c00
 8010f48:	40014000 	.word	0x40014000
 8010f4c:	40014400 	.word	0x40014400

08010f50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010f50:	b480      	push	{r7}
 8010f52:	b087      	sub	sp, #28
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
 8010f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	6a1b      	ldr	r3, [r3, #32]
 8010f5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	6a1b      	ldr	r3, [r3, #32]
 8010f6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	685b      	ldr	r3, [r3, #4]
 8010f70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010f84:	683b      	ldr	r3, [r7, #0]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	68fa      	ldr	r2, [r7, #12]
 8010f8a:	4313      	orrs	r3, r2
 8010f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010f8e:	693b      	ldr	r3, [r7, #16]
 8010f90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010f94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	689b      	ldr	r3, [r3, #8]
 8010f9a:	041b      	lsls	r3, r3, #16
 8010f9c:	693a      	ldr	r2, [r7, #16]
 8010f9e:	4313      	orrs	r3, r2
 8010fa0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	4a13      	ldr	r2, [pc, #76]	; (8010ff4 <TIM_OC5_SetConfig+0xa4>)
 8010fa6:	4293      	cmp	r3, r2
 8010fa8:	d007      	beq.n	8010fba <TIM_OC5_SetConfig+0x6a>
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	4a12      	ldr	r2, [pc, #72]	; (8010ff8 <TIM_OC5_SetConfig+0xa8>)
 8010fae:	4293      	cmp	r3, r2
 8010fb0:	d003      	beq.n	8010fba <TIM_OC5_SetConfig+0x6a>
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	4a11      	ldr	r2, [pc, #68]	; (8010ffc <TIM_OC5_SetConfig+0xac>)
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d109      	bne.n	8010fce <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010fba:	697b      	ldr	r3, [r7, #20]
 8010fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	695b      	ldr	r3, [r3, #20]
 8010fc6:	021b      	lsls	r3, r3, #8
 8010fc8:	697a      	ldr	r2, [r7, #20]
 8010fca:	4313      	orrs	r3, r2
 8010fcc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	697a      	ldr	r2, [r7, #20]
 8010fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	68fa      	ldr	r2, [r7, #12]
 8010fd8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	685a      	ldr	r2, [r3, #4]
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	693a      	ldr	r2, [r7, #16]
 8010fe6:	621a      	str	r2, [r3, #32]
}
 8010fe8:	bf00      	nop
 8010fea:	371c      	adds	r7, #28
 8010fec:	46bd      	mov	sp, r7
 8010fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff2:	4770      	bx	lr
 8010ff4:	40012c00 	.word	0x40012c00
 8010ff8:	40014000 	.word	0x40014000
 8010ffc:	40014400 	.word	0x40014400

08011000 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8011000:	b480      	push	{r7}
 8011002:	b087      	sub	sp, #28
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
 8011008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	6a1b      	ldr	r3, [r3, #32]
 801100e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	6a1b      	ldr	r3, [r3, #32]
 801101a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	685b      	ldr	r3, [r3, #4]
 8011020:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801102e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011034:	683b      	ldr	r3, [r7, #0]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	021b      	lsls	r3, r3, #8
 801103a:	68fa      	ldr	r2, [r7, #12]
 801103c:	4313      	orrs	r3, r2
 801103e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011040:	693b      	ldr	r3, [r7, #16]
 8011042:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011048:	683b      	ldr	r3, [r7, #0]
 801104a:	689b      	ldr	r3, [r3, #8]
 801104c:	051b      	lsls	r3, r3, #20
 801104e:	693a      	ldr	r2, [r7, #16]
 8011050:	4313      	orrs	r3, r2
 8011052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	4a14      	ldr	r2, [pc, #80]	; (80110a8 <TIM_OC6_SetConfig+0xa8>)
 8011058:	4293      	cmp	r3, r2
 801105a:	d007      	beq.n	801106c <TIM_OC6_SetConfig+0x6c>
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	4a13      	ldr	r2, [pc, #76]	; (80110ac <TIM_OC6_SetConfig+0xac>)
 8011060:	4293      	cmp	r3, r2
 8011062:	d003      	beq.n	801106c <TIM_OC6_SetConfig+0x6c>
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	4a12      	ldr	r2, [pc, #72]	; (80110b0 <TIM_OC6_SetConfig+0xb0>)
 8011068:	4293      	cmp	r3, r2
 801106a:	d109      	bne.n	8011080 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801106c:	697b      	ldr	r3, [r7, #20]
 801106e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011072:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011074:	683b      	ldr	r3, [r7, #0]
 8011076:	695b      	ldr	r3, [r3, #20]
 8011078:	029b      	lsls	r3, r3, #10
 801107a:	697a      	ldr	r2, [r7, #20]
 801107c:	4313      	orrs	r3, r2
 801107e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	697a      	ldr	r2, [r7, #20]
 8011084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	68fa      	ldr	r2, [r7, #12]
 801108a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	685a      	ldr	r2, [r3, #4]
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	693a      	ldr	r2, [r7, #16]
 8011098:	621a      	str	r2, [r3, #32]
}
 801109a:	bf00      	nop
 801109c:	371c      	adds	r7, #28
 801109e:	46bd      	mov	sp, r7
 80110a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a4:	4770      	bx	lr
 80110a6:	bf00      	nop
 80110a8:	40012c00 	.word	0x40012c00
 80110ac:	40014000 	.word	0x40014000
 80110b0:	40014400 	.word	0x40014400

080110b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80110b4:	b480      	push	{r7}
 80110b6:	b087      	sub	sp, #28
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	60f8      	str	r0, [r7, #12]
 80110bc:	60b9      	str	r1, [r7, #8]
 80110be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80110c0:	68bb      	ldr	r3, [r7, #8]
 80110c2:	f003 031f 	and.w	r3, r3, #31
 80110c6:	2201      	movs	r2, #1
 80110c8:	fa02 f303 	lsl.w	r3, r2, r3
 80110cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	6a1a      	ldr	r2, [r3, #32]
 80110d2:	697b      	ldr	r3, [r7, #20]
 80110d4:	43db      	mvns	r3, r3
 80110d6:	401a      	ands	r2, r3
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	6a1a      	ldr	r2, [r3, #32]
 80110e0:	68bb      	ldr	r3, [r7, #8]
 80110e2:	f003 031f 	and.w	r3, r3, #31
 80110e6:	6879      	ldr	r1, [r7, #4]
 80110e8:	fa01 f303 	lsl.w	r3, r1, r3
 80110ec:	431a      	orrs	r2, r3
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	621a      	str	r2, [r3, #32]
}
 80110f2:	bf00      	nop
 80110f4:	371c      	adds	r7, #28
 80110f6:	46bd      	mov	sp, r7
 80110f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fc:	4770      	bx	lr
	...

08011100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011100:	b480      	push	{r7}
 8011102:	b085      	sub	sp, #20
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
 8011108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011110:	2b01      	cmp	r3, #1
 8011112:	d101      	bne.n	8011118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011114:	2302      	movs	r3, #2
 8011116:	e04f      	b.n	80111b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	2201      	movs	r2, #1
 801111c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2202      	movs	r2, #2
 8011124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	685b      	ldr	r3, [r3, #4]
 801112e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	689b      	ldr	r3, [r3, #8]
 8011136:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	4a21      	ldr	r2, [pc, #132]	; (80111c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 801113e:	4293      	cmp	r3, r2
 8011140:	d108      	bne.n	8011154 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011148:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	685b      	ldr	r3, [r3, #4]
 801114e:	68fa      	ldr	r2, [r7, #12]
 8011150:	4313      	orrs	r3, r2
 8011152:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801115a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	68fa      	ldr	r2, [r7, #12]
 8011162:	4313      	orrs	r3, r2
 8011164:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	68fa      	ldr	r2, [r7, #12]
 801116c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	4a14      	ldr	r2, [pc, #80]	; (80111c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8011174:	4293      	cmp	r3, r2
 8011176:	d009      	beq.n	801118c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011180:	d004      	beq.n	801118c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	4a10      	ldr	r2, [pc, #64]	; (80111c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8011188:	4293      	cmp	r3, r2
 801118a:	d10c      	bne.n	80111a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011192:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	689b      	ldr	r3, [r3, #8]
 8011198:	68ba      	ldr	r2, [r7, #8]
 801119a:	4313      	orrs	r3, r2
 801119c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	68ba      	ldr	r2, [r7, #8]
 80111a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2201      	movs	r2, #1
 80111aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	2200      	movs	r2, #0
 80111b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80111b6:	2300      	movs	r3, #0
}
 80111b8:	4618      	mov	r0, r3
 80111ba:	3714      	adds	r7, #20
 80111bc:	46bd      	mov	sp, r7
 80111be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c2:	4770      	bx	lr
 80111c4:	40012c00 	.word	0x40012c00
 80111c8:	40014000 	.word	0x40014000

080111cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80111cc:	b480      	push	{r7}
 80111ce:	b085      	sub	sp, #20
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
 80111d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80111d6:	2300      	movs	r3, #0
 80111d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80111e0:	2b01      	cmp	r3, #1
 80111e2:	d101      	bne.n	80111e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80111e4:	2302      	movs	r3, #2
 80111e6:	e060      	b.n	80112aa <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2201      	movs	r2, #1
 80111ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80111f6:	683b      	ldr	r3, [r7, #0]
 80111f8:	68db      	ldr	r3, [r3, #12]
 80111fa:	4313      	orrs	r3, r2
 80111fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011204:	683b      	ldr	r3, [r7, #0]
 8011206:	689b      	ldr	r3, [r3, #8]
 8011208:	4313      	orrs	r3, r2
 801120a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	685b      	ldr	r3, [r3, #4]
 8011216:	4313      	orrs	r3, r2
 8011218:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	4313      	orrs	r3, r2
 8011226:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	691b      	ldr	r3, [r3, #16]
 8011232:	4313      	orrs	r3, r2
 8011234:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	695b      	ldr	r3, [r3, #20]
 8011240:	4313      	orrs	r3, r2
 8011242:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801124e:	4313      	orrs	r3, r2
 8011250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	699b      	ldr	r3, [r3, #24]
 801125c:	041b      	lsls	r3, r3, #16
 801125e:	4313      	orrs	r3, r2
 8011260:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	4a14      	ldr	r2, [pc, #80]	; (80112b8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8011268:	4293      	cmp	r3, r2
 801126a:	d115      	bne.n	8011298 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011276:	051b      	lsls	r3, r3, #20
 8011278:	4313      	orrs	r3, r2
 801127a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	69db      	ldr	r3, [r3, #28]
 8011286:	4313      	orrs	r3, r2
 8011288:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	6a1b      	ldr	r3, [r3, #32]
 8011294:	4313      	orrs	r3, r2
 8011296:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	68fa      	ldr	r2, [r7, #12]
 801129e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	2200      	movs	r2, #0
 80112a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80112a8:	2300      	movs	r3, #0
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	3714      	adds	r7, #20
 80112ae:	46bd      	mov	sp, r7
 80112b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b4:	4770      	bx	lr
 80112b6:	bf00      	nop
 80112b8:	40012c00 	.word	0x40012c00

080112bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80112bc:	b480      	push	{r7}
 80112be:	b083      	sub	sp, #12
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80112c4:	bf00      	nop
 80112c6:	370c      	adds	r7, #12
 80112c8:	46bd      	mov	sp, r7
 80112ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ce:	4770      	bx	lr

080112d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80112d0:	b480      	push	{r7}
 80112d2:	b083      	sub	sp, #12
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80112d8:	bf00      	nop
 80112da:	370c      	adds	r7, #12
 80112dc:	46bd      	mov	sp, r7
 80112de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e2:	4770      	bx	lr

080112e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80112e4:	b480      	push	{r7}
 80112e6:	b083      	sub	sp, #12
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80112ec:	bf00      	nop
 80112ee:	370c      	adds	r7, #12
 80112f0:	46bd      	mov	sp, r7
 80112f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f6:	4770      	bx	lr

080112f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b082      	sub	sp, #8
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d101      	bne.n	801130a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011306:	2301      	movs	r3, #1
 8011308:	e040      	b.n	801138c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801130e:	2b00      	cmp	r3, #0
 8011310:	d106      	bne.n	8011320 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2200      	movs	r2, #0
 8011316:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801131a:	6878      	ldr	r0, [r7, #4]
 801131c:	f7fb f884 	bl	800c428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2224      	movs	r2, #36	; 0x24
 8011324:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	681a      	ldr	r2, [r3, #0]
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	f022 0201 	bic.w	r2, r2, #1
 8011334:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011336:	6878      	ldr	r0, [r7, #4]
 8011338:	f000 f8c0 	bl	80114bc <UART_SetConfig>
 801133c:	4603      	mov	r3, r0
 801133e:	2b01      	cmp	r3, #1
 8011340:	d101      	bne.n	8011346 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8011342:	2301      	movs	r3, #1
 8011344:	e022      	b.n	801138c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801134a:	2b00      	cmp	r3, #0
 801134c:	d002      	beq.n	8011354 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f000 fae2 	bl	8011918 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	685a      	ldr	r2, [r3, #4]
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011362:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	689a      	ldr	r2, [r3, #8]
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011372:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	681a      	ldr	r2, [r3, #0]
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	f042 0201 	orr.w	r2, r2, #1
 8011382:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011384:	6878      	ldr	r0, [r7, #4]
 8011386:	f000 fb69 	bl	8011a5c <UART_CheckIdleState>
 801138a:	4603      	mov	r3, r0
}
 801138c:	4618      	mov	r0, r3
 801138e:	3708      	adds	r7, #8
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}

08011394 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b08a      	sub	sp, #40	; 0x28
 8011398:	af02      	add	r7, sp, #8
 801139a:	60f8      	str	r0, [r7, #12]
 801139c:	60b9      	str	r1, [r7, #8]
 801139e:	603b      	str	r3, [r7, #0]
 80113a0:	4613      	mov	r3, r2
 80113a2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80113a8:	2b20      	cmp	r3, #32
 80113aa:	f040 8082 	bne.w	80114b2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d002      	beq.n	80113ba <HAL_UART_Transmit+0x26>
 80113b4:	88fb      	ldrh	r3, [r7, #6]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d101      	bne.n	80113be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80113ba:	2301      	movs	r3, #1
 80113bc:	e07a      	b.n	80114b4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80113c4:	2b01      	cmp	r3, #1
 80113c6:	d101      	bne.n	80113cc <HAL_UART_Transmit+0x38>
 80113c8:	2302      	movs	r3, #2
 80113ca:	e073      	b.n	80114b4 <HAL_UART_Transmit+0x120>
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	2201      	movs	r2, #1
 80113d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	2200      	movs	r2, #0
 80113d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	2221      	movs	r2, #33	; 0x21
 80113e0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80113e2:	f7fb f91d 	bl	800c620 <HAL_GetTick>
 80113e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	88fa      	ldrh	r2, [r7, #6]
 80113ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	88fa      	ldrh	r2, [r7, #6]
 80113f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	689b      	ldr	r3, [r3, #8]
 80113fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011400:	d108      	bne.n	8011414 <HAL_UART_Transmit+0x80>
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	691b      	ldr	r3, [r3, #16]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d104      	bne.n	8011414 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 801140a:	2300      	movs	r3, #0
 801140c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801140e:	68bb      	ldr	r3, [r7, #8]
 8011410:	61bb      	str	r3, [r7, #24]
 8011412:	e003      	b.n	801141c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8011414:	68bb      	ldr	r3, [r7, #8]
 8011416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011418:	2300      	movs	r3, #0
 801141a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	2200      	movs	r2, #0
 8011420:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8011424:	e02d      	b.n	8011482 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011426:	683b      	ldr	r3, [r7, #0]
 8011428:	9300      	str	r3, [sp, #0]
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	2200      	movs	r2, #0
 801142e:	2180      	movs	r1, #128	; 0x80
 8011430:	68f8      	ldr	r0, [r7, #12]
 8011432:	f000 fb5c 	bl	8011aee <UART_WaitOnFlagUntilTimeout>
 8011436:	4603      	mov	r3, r0
 8011438:	2b00      	cmp	r3, #0
 801143a:	d001      	beq.n	8011440 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 801143c:	2303      	movs	r3, #3
 801143e:	e039      	b.n	80114b4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8011440:	69fb      	ldr	r3, [r7, #28]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d10b      	bne.n	801145e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011446:	69bb      	ldr	r3, [r7, #24]
 8011448:	881a      	ldrh	r2, [r3, #0]
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011452:	b292      	uxth	r2, r2
 8011454:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8011456:	69bb      	ldr	r3, [r7, #24]
 8011458:	3302      	adds	r3, #2
 801145a:	61bb      	str	r3, [r7, #24]
 801145c:	e008      	b.n	8011470 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801145e:	69fb      	ldr	r3, [r7, #28]
 8011460:	781a      	ldrb	r2, [r3, #0]
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	b292      	uxth	r2, r2
 8011468:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801146a:	69fb      	ldr	r3, [r7, #28]
 801146c:	3301      	adds	r3, #1
 801146e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011476:	b29b      	uxth	r3, r3
 8011478:	3b01      	subs	r3, #1
 801147a:	b29a      	uxth	r2, r3
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011488:	b29b      	uxth	r3, r3
 801148a:	2b00      	cmp	r3, #0
 801148c:	d1cb      	bne.n	8011426 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801148e:	683b      	ldr	r3, [r7, #0]
 8011490:	9300      	str	r3, [sp, #0]
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	2200      	movs	r2, #0
 8011496:	2140      	movs	r1, #64	; 0x40
 8011498:	68f8      	ldr	r0, [r7, #12]
 801149a:	f000 fb28 	bl	8011aee <UART_WaitOnFlagUntilTimeout>
 801149e:	4603      	mov	r3, r0
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d001      	beq.n	80114a8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80114a4:	2303      	movs	r3, #3
 80114a6:	e005      	b.n	80114b4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	2220      	movs	r2, #32
 80114ac:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80114ae:	2300      	movs	r3, #0
 80114b0:	e000      	b.n	80114b4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80114b2:	2302      	movs	r3, #2
  }
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	3720      	adds	r7, #32
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}

080114bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80114bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80114c0:	b08a      	sub	sp, #40	; 0x28
 80114c2:	af00      	add	r7, sp, #0
 80114c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80114c6:	2300      	movs	r3, #0
 80114c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	689a      	ldr	r2, [r3, #8]
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	691b      	ldr	r3, [r3, #16]
 80114d4:	431a      	orrs	r2, r3
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	695b      	ldr	r3, [r3, #20]
 80114da:	431a      	orrs	r2, r3
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	69db      	ldr	r3, [r3, #28]
 80114e0:	4313      	orrs	r3, r2
 80114e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	681a      	ldr	r2, [r3, #0]
 80114ea:	4bb4      	ldr	r3, [pc, #720]	; (80117bc <UART_SetConfig+0x300>)
 80114ec:	4013      	ands	r3, r2
 80114ee:	68fa      	ldr	r2, [r7, #12]
 80114f0:	6812      	ldr	r2, [r2, #0]
 80114f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80114f4:	430b      	orrs	r3, r1
 80114f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	68da      	ldr	r2, [r3, #12]
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	430a      	orrs	r2, r1
 801150c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	699b      	ldr	r3, [r3, #24]
 8011512:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	4aa9      	ldr	r2, [pc, #676]	; (80117c0 <UART_SetConfig+0x304>)
 801151a:	4293      	cmp	r3, r2
 801151c:	d004      	beq.n	8011528 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	6a1b      	ldr	r3, [r3, #32]
 8011522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011524:	4313      	orrs	r3, r2
 8011526:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	689b      	ldr	r3, [r3, #8]
 801152e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011538:	430a      	orrs	r2, r1
 801153a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	4aa0      	ldr	r2, [pc, #640]	; (80117c4 <UART_SetConfig+0x308>)
 8011542:	4293      	cmp	r3, r2
 8011544:	d126      	bne.n	8011594 <UART_SetConfig+0xd8>
 8011546:	4ba0      	ldr	r3, [pc, #640]	; (80117c8 <UART_SetConfig+0x30c>)
 8011548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801154c:	f003 0303 	and.w	r3, r3, #3
 8011550:	2b03      	cmp	r3, #3
 8011552:	d81b      	bhi.n	801158c <UART_SetConfig+0xd0>
 8011554:	a201      	add	r2, pc, #4	; (adr r2, 801155c <UART_SetConfig+0xa0>)
 8011556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801155a:	bf00      	nop
 801155c:	0801156d 	.word	0x0801156d
 8011560:	0801157d 	.word	0x0801157d
 8011564:	08011575 	.word	0x08011575
 8011568:	08011585 	.word	0x08011585
 801156c:	2301      	movs	r3, #1
 801156e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8011572:	e080      	b.n	8011676 <UART_SetConfig+0x1ba>
 8011574:	2302      	movs	r3, #2
 8011576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801157a:	e07c      	b.n	8011676 <UART_SetConfig+0x1ba>
 801157c:	2304      	movs	r3, #4
 801157e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8011582:	e078      	b.n	8011676 <UART_SetConfig+0x1ba>
 8011584:	2308      	movs	r3, #8
 8011586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801158a:	e074      	b.n	8011676 <UART_SetConfig+0x1ba>
 801158c:	2310      	movs	r3, #16
 801158e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8011592:	e070      	b.n	8011676 <UART_SetConfig+0x1ba>
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	4a8c      	ldr	r2, [pc, #560]	; (80117cc <UART_SetConfig+0x310>)
 801159a:	4293      	cmp	r3, r2
 801159c:	d138      	bne.n	8011610 <UART_SetConfig+0x154>
 801159e:	4b8a      	ldr	r3, [pc, #552]	; (80117c8 <UART_SetConfig+0x30c>)
 80115a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80115a4:	f003 030c 	and.w	r3, r3, #12
 80115a8:	2b0c      	cmp	r3, #12
 80115aa:	d82d      	bhi.n	8011608 <UART_SetConfig+0x14c>
 80115ac:	a201      	add	r2, pc, #4	; (adr r2, 80115b4 <UART_SetConfig+0xf8>)
 80115ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115b2:	bf00      	nop
 80115b4:	080115e9 	.word	0x080115e9
 80115b8:	08011609 	.word	0x08011609
 80115bc:	08011609 	.word	0x08011609
 80115c0:	08011609 	.word	0x08011609
 80115c4:	080115f9 	.word	0x080115f9
 80115c8:	08011609 	.word	0x08011609
 80115cc:	08011609 	.word	0x08011609
 80115d0:	08011609 	.word	0x08011609
 80115d4:	080115f1 	.word	0x080115f1
 80115d8:	08011609 	.word	0x08011609
 80115dc:	08011609 	.word	0x08011609
 80115e0:	08011609 	.word	0x08011609
 80115e4:	08011601 	.word	0x08011601
 80115e8:	2300      	movs	r3, #0
 80115ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80115ee:	e042      	b.n	8011676 <UART_SetConfig+0x1ba>
 80115f0:	2302      	movs	r3, #2
 80115f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80115f6:	e03e      	b.n	8011676 <UART_SetConfig+0x1ba>
 80115f8:	2304      	movs	r3, #4
 80115fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80115fe:	e03a      	b.n	8011676 <UART_SetConfig+0x1ba>
 8011600:	2308      	movs	r3, #8
 8011602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8011606:	e036      	b.n	8011676 <UART_SetConfig+0x1ba>
 8011608:	2310      	movs	r3, #16
 801160a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801160e:	e032      	b.n	8011676 <UART_SetConfig+0x1ba>
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	4a6a      	ldr	r2, [pc, #424]	; (80117c0 <UART_SetConfig+0x304>)
 8011616:	4293      	cmp	r3, r2
 8011618:	d12a      	bne.n	8011670 <UART_SetConfig+0x1b4>
 801161a:	4b6b      	ldr	r3, [pc, #428]	; (80117c8 <UART_SetConfig+0x30c>)
 801161c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011620:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8011624:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011628:	d01a      	beq.n	8011660 <UART_SetConfig+0x1a4>
 801162a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801162e:	d81b      	bhi.n	8011668 <UART_SetConfig+0x1ac>
 8011630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011634:	d00c      	beq.n	8011650 <UART_SetConfig+0x194>
 8011636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801163a:	d815      	bhi.n	8011668 <UART_SetConfig+0x1ac>
 801163c:	2b00      	cmp	r3, #0
 801163e:	d003      	beq.n	8011648 <UART_SetConfig+0x18c>
 8011640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011644:	d008      	beq.n	8011658 <UART_SetConfig+0x19c>
 8011646:	e00f      	b.n	8011668 <UART_SetConfig+0x1ac>
 8011648:	2300      	movs	r3, #0
 801164a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801164e:	e012      	b.n	8011676 <UART_SetConfig+0x1ba>
 8011650:	2302      	movs	r3, #2
 8011652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8011656:	e00e      	b.n	8011676 <UART_SetConfig+0x1ba>
 8011658:	2304      	movs	r3, #4
 801165a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801165e:	e00a      	b.n	8011676 <UART_SetConfig+0x1ba>
 8011660:	2308      	movs	r3, #8
 8011662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8011666:	e006      	b.n	8011676 <UART_SetConfig+0x1ba>
 8011668:	2310      	movs	r3, #16
 801166a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801166e:	e002      	b.n	8011676 <UART_SetConfig+0x1ba>
 8011670:	2310      	movs	r3, #16
 8011672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	4a51      	ldr	r2, [pc, #324]	; (80117c0 <UART_SetConfig+0x304>)
 801167c:	4293      	cmp	r3, r2
 801167e:	d17a      	bne.n	8011776 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011680:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011684:	2b08      	cmp	r3, #8
 8011686:	d824      	bhi.n	80116d2 <UART_SetConfig+0x216>
 8011688:	a201      	add	r2, pc, #4	; (adr r2, 8011690 <UART_SetConfig+0x1d4>)
 801168a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801168e:	bf00      	nop
 8011690:	080116b5 	.word	0x080116b5
 8011694:	080116d3 	.word	0x080116d3
 8011698:	080116bd 	.word	0x080116bd
 801169c:	080116d3 	.word	0x080116d3
 80116a0:	080116c3 	.word	0x080116c3
 80116a4:	080116d3 	.word	0x080116d3
 80116a8:	080116d3 	.word	0x080116d3
 80116ac:	080116d3 	.word	0x080116d3
 80116b0:	080116cb 	.word	0x080116cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80116b4:	f7fe f9dc 	bl	800fa70 <HAL_RCC_GetPCLK1Freq>
 80116b8:	61f8      	str	r0, [r7, #28]
        break;
 80116ba:	e010      	b.n	80116de <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80116bc:	4b44      	ldr	r3, [pc, #272]	; (80117d0 <UART_SetConfig+0x314>)
 80116be:	61fb      	str	r3, [r7, #28]
        break;
 80116c0:	e00d      	b.n	80116de <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80116c2:	f7fe f93d 	bl	800f940 <HAL_RCC_GetSysClockFreq>
 80116c6:	61f8      	str	r0, [r7, #28]
        break;
 80116c8:	e009      	b.n	80116de <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80116ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80116ce:	61fb      	str	r3, [r7, #28]
        break;
 80116d0:	e005      	b.n	80116de <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80116d2:	2300      	movs	r3, #0
 80116d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80116d6:	2301      	movs	r3, #1
 80116d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80116dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80116de:	69fb      	ldr	r3, [r7, #28]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	f000 8109 	beq.w	80118f8 <UART_SetConfig+0x43c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	685a      	ldr	r2, [r3, #4]
 80116ea:	4613      	mov	r3, r2
 80116ec:	005b      	lsls	r3, r3, #1
 80116ee:	4413      	add	r3, r2
 80116f0:	69fa      	ldr	r2, [r7, #28]
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d305      	bcc.n	8011702 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	685b      	ldr	r3, [r3, #4]
 80116fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80116fc:	69fa      	ldr	r2, [r7, #28]
 80116fe:	429a      	cmp	r2, r3
 8011700:	d903      	bls.n	801170a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8011702:	2301      	movs	r3, #1
 8011704:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8011708:	e0f6      	b.n	80118f8 <UART_SetConfig+0x43c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801170a:	69fb      	ldr	r3, [r7, #28]
 801170c:	2200      	movs	r2, #0
 801170e:	461c      	mov	r4, r3
 8011710:	4615      	mov	r5, r2
 8011712:	f04f 0200 	mov.w	r2, #0
 8011716:	f04f 0300 	mov.w	r3, #0
 801171a:	022b      	lsls	r3, r5, #8
 801171c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8011720:	0222      	lsls	r2, r4, #8
 8011722:	68f9      	ldr	r1, [r7, #12]
 8011724:	6849      	ldr	r1, [r1, #4]
 8011726:	0849      	lsrs	r1, r1, #1
 8011728:	2000      	movs	r0, #0
 801172a:	4688      	mov	r8, r1
 801172c:	4681      	mov	r9, r0
 801172e:	eb12 0a08 	adds.w	sl, r2, r8
 8011732:	eb43 0b09 	adc.w	fp, r3, r9
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	685b      	ldr	r3, [r3, #4]
 801173a:	2200      	movs	r2, #0
 801173c:	603b      	str	r3, [r7, #0]
 801173e:	607a      	str	r2, [r7, #4]
 8011740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011744:	4650      	mov	r0, sl
 8011746:	4659      	mov	r1, fp
 8011748:	f7ef fa9e 	bl	8000c88 <__aeabi_uldivmod>
 801174c:	4602      	mov	r2, r0
 801174e:	460b      	mov	r3, r1
 8011750:	4613      	mov	r3, r2
 8011752:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011754:	69bb      	ldr	r3, [r7, #24]
 8011756:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801175a:	d308      	bcc.n	801176e <UART_SetConfig+0x2b2>
 801175c:	69bb      	ldr	r3, [r7, #24]
 801175e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011762:	d204      	bcs.n	801176e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	69ba      	ldr	r2, [r7, #24]
 801176a:	60da      	str	r2, [r3, #12]
 801176c:	e0c4      	b.n	80118f8 <UART_SetConfig+0x43c>
        }
        else
        {
          ret = HAL_ERROR;
 801176e:	2301      	movs	r3, #1
 8011770:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8011774:	e0c0      	b.n	80118f8 <UART_SetConfig+0x43c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	69db      	ldr	r3, [r3, #28]
 801177a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801177e:	d16b      	bne.n	8011858 <UART_SetConfig+0x39c>
  {
    switch (clocksource)
 8011780:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011784:	2b08      	cmp	r3, #8
 8011786:	d834      	bhi.n	80117f2 <UART_SetConfig+0x336>
 8011788:	a201      	add	r2, pc, #4	; (adr r2, 8011790 <UART_SetConfig+0x2d4>)
 801178a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801178e:	bf00      	nop
 8011790:	080117b5 	.word	0x080117b5
 8011794:	080117d5 	.word	0x080117d5
 8011798:	080117dd 	.word	0x080117dd
 801179c:	080117f3 	.word	0x080117f3
 80117a0:	080117e3 	.word	0x080117e3
 80117a4:	080117f3 	.word	0x080117f3
 80117a8:	080117f3 	.word	0x080117f3
 80117ac:	080117f3 	.word	0x080117f3
 80117b0:	080117eb 	.word	0x080117eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80117b4:	f7fe f95c 	bl	800fa70 <HAL_RCC_GetPCLK1Freq>
 80117b8:	61f8      	str	r0, [r7, #28]
        break;
 80117ba:	e020      	b.n	80117fe <UART_SetConfig+0x342>
 80117bc:	efff69f3 	.word	0xefff69f3
 80117c0:	40008000 	.word	0x40008000
 80117c4:	40013800 	.word	0x40013800
 80117c8:	40021000 	.word	0x40021000
 80117cc:	40004400 	.word	0x40004400
 80117d0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80117d4:	f7fe f962 	bl	800fa9c <HAL_RCC_GetPCLK2Freq>
 80117d8:	61f8      	str	r0, [r7, #28]
        break;
 80117da:	e010      	b.n	80117fe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80117dc:	4b4d      	ldr	r3, [pc, #308]	; (8011914 <UART_SetConfig+0x458>)
 80117de:	61fb      	str	r3, [r7, #28]
        break;
 80117e0:	e00d      	b.n	80117fe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80117e2:	f7fe f8ad 	bl	800f940 <HAL_RCC_GetSysClockFreq>
 80117e6:	61f8      	str	r0, [r7, #28]
        break;
 80117e8:	e009      	b.n	80117fe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80117ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80117ee:	61fb      	str	r3, [r7, #28]
        break;
 80117f0:	e005      	b.n	80117fe <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80117f2:	2300      	movs	r3, #0
 80117f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80117f6:	2301      	movs	r3, #1
 80117f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80117fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80117fe:	69fb      	ldr	r3, [r7, #28]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d079      	beq.n	80118f8 <UART_SetConfig+0x43c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8011804:	69fb      	ldr	r3, [r7, #28]
 8011806:	005a      	lsls	r2, r3, #1
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	685b      	ldr	r3, [r3, #4]
 801180c:	085b      	lsrs	r3, r3, #1
 801180e:	441a      	add	r2, r3
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	685b      	ldr	r3, [r3, #4]
 8011814:	fbb2 f3f3 	udiv	r3, r2, r3
 8011818:	b29b      	uxth	r3, r3
 801181a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801181c:	69bb      	ldr	r3, [r7, #24]
 801181e:	2b0f      	cmp	r3, #15
 8011820:	d916      	bls.n	8011850 <UART_SetConfig+0x394>
 8011822:	69bb      	ldr	r3, [r7, #24]
 8011824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011828:	d212      	bcs.n	8011850 <UART_SetConfig+0x394>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801182a:	69bb      	ldr	r3, [r7, #24]
 801182c:	b29b      	uxth	r3, r3
 801182e:	f023 030f 	bic.w	r3, r3, #15
 8011832:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011834:	69bb      	ldr	r3, [r7, #24]
 8011836:	085b      	lsrs	r3, r3, #1
 8011838:	b29b      	uxth	r3, r3
 801183a:	f003 0307 	and.w	r3, r3, #7
 801183e:	b29a      	uxth	r2, r3
 8011840:	8afb      	ldrh	r3, [r7, #22]
 8011842:	4313      	orrs	r3, r2
 8011844:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	8afa      	ldrh	r2, [r7, #22]
 801184c:	60da      	str	r2, [r3, #12]
 801184e:	e053      	b.n	80118f8 <UART_SetConfig+0x43c>
      }
      else
      {
        ret = HAL_ERROR;
 8011850:	2301      	movs	r3, #1
 8011852:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8011856:	e04f      	b.n	80118f8 <UART_SetConfig+0x43c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011858:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801185c:	2b08      	cmp	r3, #8
 801185e:	d828      	bhi.n	80118b2 <UART_SetConfig+0x3f6>
 8011860:	a201      	add	r2, pc, #4	; (adr r2, 8011868 <UART_SetConfig+0x3ac>)
 8011862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011866:	bf00      	nop
 8011868:	0801188d 	.word	0x0801188d
 801186c:	08011895 	.word	0x08011895
 8011870:	0801189d 	.word	0x0801189d
 8011874:	080118b3 	.word	0x080118b3
 8011878:	080118a3 	.word	0x080118a3
 801187c:	080118b3 	.word	0x080118b3
 8011880:	080118b3 	.word	0x080118b3
 8011884:	080118b3 	.word	0x080118b3
 8011888:	080118ab 	.word	0x080118ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801188c:	f7fe f8f0 	bl	800fa70 <HAL_RCC_GetPCLK1Freq>
 8011890:	61f8      	str	r0, [r7, #28]
        break;
 8011892:	e014      	b.n	80118be <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011894:	f7fe f902 	bl	800fa9c <HAL_RCC_GetPCLK2Freq>
 8011898:	61f8      	str	r0, [r7, #28]
        break;
 801189a:	e010      	b.n	80118be <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801189c:	4b1d      	ldr	r3, [pc, #116]	; (8011914 <UART_SetConfig+0x458>)
 801189e:	61fb      	str	r3, [r7, #28]
        break;
 80118a0:	e00d      	b.n	80118be <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80118a2:	f7fe f84d 	bl	800f940 <HAL_RCC_GetSysClockFreq>
 80118a6:	61f8      	str	r0, [r7, #28]
        break;
 80118a8:	e009      	b.n	80118be <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80118aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80118ae:	61fb      	str	r3, [r7, #28]
        break;
 80118b0:	e005      	b.n	80118be <UART_SetConfig+0x402>
      default:
        pclk = 0U;
 80118b2:	2300      	movs	r3, #0
 80118b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80118b6:	2301      	movs	r3, #1
 80118b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80118bc:	bf00      	nop
    }

    if (pclk != 0U)
 80118be:	69fb      	ldr	r3, [r7, #28]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d019      	beq.n	80118f8 <UART_SetConfig+0x43c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	685b      	ldr	r3, [r3, #4]
 80118c8:	085a      	lsrs	r2, r3, #1
 80118ca:	69fb      	ldr	r3, [r7, #28]
 80118cc:	441a      	add	r2, r3
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	685b      	ldr	r3, [r3, #4]
 80118d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80118d6:	b29b      	uxth	r3, r3
 80118d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80118da:	69bb      	ldr	r3, [r7, #24]
 80118dc:	2b0f      	cmp	r3, #15
 80118de:	d908      	bls.n	80118f2 <UART_SetConfig+0x436>
 80118e0:	69bb      	ldr	r3, [r7, #24]
 80118e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80118e6:	d204      	bcs.n	80118f2 <UART_SetConfig+0x436>
      {
        huart->Instance->BRR = usartdiv;
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	69ba      	ldr	r2, [r7, #24]
 80118ee:	60da      	str	r2, [r3, #12]
 80118f0:	e002      	b.n	80118f8 <UART_SetConfig+0x43c>
      }
      else
      {
        ret = HAL_ERROR;
 80118f2:	2301      	movs	r3, #1
 80118f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	2200      	movs	r2, #0
 80118fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	2200      	movs	r2, #0
 8011902:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8011904:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8011908:	4618      	mov	r0, r3
 801190a:	3728      	adds	r7, #40	; 0x28
 801190c:	46bd      	mov	sp, r7
 801190e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011912:	bf00      	nop
 8011914:	00f42400 	.word	0x00f42400

08011918 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011918:	b480      	push	{r7}
 801191a:	b083      	sub	sp, #12
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011924:	f003 0301 	and.w	r3, r3, #1
 8011928:	2b00      	cmp	r3, #0
 801192a:	d00a      	beq.n	8011942 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	685b      	ldr	r3, [r3, #4]
 8011932:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	430a      	orrs	r2, r1
 8011940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011946:	f003 0302 	and.w	r3, r3, #2
 801194a:	2b00      	cmp	r3, #0
 801194c:	d00a      	beq.n	8011964 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	685b      	ldr	r3, [r3, #4]
 8011954:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	430a      	orrs	r2, r1
 8011962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011968:	f003 0304 	and.w	r3, r3, #4
 801196c:	2b00      	cmp	r3, #0
 801196e:	d00a      	beq.n	8011986 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	685b      	ldr	r3, [r3, #4]
 8011976:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	430a      	orrs	r2, r1
 8011984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801198a:	f003 0308 	and.w	r3, r3, #8
 801198e:	2b00      	cmp	r3, #0
 8011990:	d00a      	beq.n	80119a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	685b      	ldr	r3, [r3, #4]
 8011998:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	430a      	orrs	r2, r1
 80119a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119ac:	f003 0310 	and.w	r3, r3, #16
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d00a      	beq.n	80119ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	689b      	ldr	r3, [r3, #8]
 80119ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	430a      	orrs	r2, r1
 80119c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119ce:	f003 0320 	and.w	r3, r3, #32
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d00a      	beq.n	80119ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	689b      	ldr	r3, [r3, #8]
 80119dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	430a      	orrs	r2, r1
 80119ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d01a      	beq.n	8011a2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	685b      	ldr	r3, [r3, #4]
 80119fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	430a      	orrs	r2, r1
 8011a0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011a16:	d10a      	bne.n	8011a2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	685b      	ldr	r3, [r3, #4]
 8011a1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	430a      	orrs	r2, r1
 8011a2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d00a      	beq.n	8011a50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	685b      	ldr	r3, [r3, #4]
 8011a40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	430a      	orrs	r2, r1
 8011a4e:	605a      	str	r2, [r3, #4]
  }
}
 8011a50:	bf00      	nop
 8011a52:	370c      	adds	r7, #12
 8011a54:	46bd      	mov	sp, r7
 8011a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5a:	4770      	bx	lr

08011a5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b086      	sub	sp, #24
 8011a60:	af02      	add	r7, sp, #8
 8011a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2200      	movs	r2, #0
 8011a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011a6c:	f7fa fdd8 	bl	800c620 <HAL_GetTick>
 8011a70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	f003 0308 	and.w	r3, r3, #8
 8011a7c:	2b08      	cmp	r3, #8
 8011a7e:	d10e      	bne.n	8011a9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011a80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011a84:	9300      	str	r3, [sp, #0]
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	2200      	movs	r2, #0
 8011a8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011a8e:	6878      	ldr	r0, [r7, #4]
 8011a90:	f000 f82d 	bl	8011aee <UART_WaitOnFlagUntilTimeout>
 8011a94:	4603      	mov	r3, r0
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d001      	beq.n	8011a9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011a9a:	2303      	movs	r3, #3
 8011a9c:	e023      	b.n	8011ae6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	f003 0304 	and.w	r3, r3, #4
 8011aa8:	2b04      	cmp	r3, #4
 8011aaa:	d10e      	bne.n	8011aca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011aac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011ab0:	9300      	str	r3, [sp, #0]
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011aba:	6878      	ldr	r0, [r7, #4]
 8011abc:	f000 f817 	bl	8011aee <UART_WaitOnFlagUntilTimeout>
 8011ac0:	4603      	mov	r3, r0
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d001      	beq.n	8011aca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011ac6:	2303      	movs	r3, #3
 8011ac8:	e00d      	b.n	8011ae6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	2220      	movs	r2, #32
 8011ace:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	2220      	movs	r2, #32
 8011ad4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	2200      	movs	r2, #0
 8011ada:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	2200      	movs	r2, #0
 8011ae0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8011ae4:	2300      	movs	r3, #0
}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	3710      	adds	r7, #16
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}

08011aee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011aee:	b580      	push	{r7, lr}
 8011af0:	b084      	sub	sp, #16
 8011af2:	af00      	add	r7, sp, #0
 8011af4:	60f8      	str	r0, [r7, #12]
 8011af6:	60b9      	str	r1, [r7, #8]
 8011af8:	603b      	str	r3, [r7, #0]
 8011afa:	4613      	mov	r3, r2
 8011afc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011afe:	e05e      	b.n	8011bbe <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011b00:	69bb      	ldr	r3, [r7, #24]
 8011b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b06:	d05a      	beq.n	8011bbe <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011b08:	f7fa fd8a 	bl	800c620 <HAL_GetTick>
 8011b0c:	4602      	mov	r2, r0
 8011b0e:	683b      	ldr	r3, [r7, #0]
 8011b10:	1ad3      	subs	r3, r2, r3
 8011b12:	69ba      	ldr	r2, [r7, #24]
 8011b14:	429a      	cmp	r2, r3
 8011b16:	d302      	bcc.n	8011b1e <UART_WaitOnFlagUntilTimeout+0x30>
 8011b18:	69bb      	ldr	r3, [r7, #24]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d11b      	bne.n	8011b56 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	681a      	ldr	r2, [r3, #0]
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011b2c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	689a      	ldr	r2, [r3, #8]
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	f022 0201 	bic.w	r2, r2, #1
 8011b3c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	2220      	movs	r2, #32
 8011b42:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	2220      	movs	r2, #32
 8011b48:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	2200      	movs	r2, #0
 8011b4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8011b52:	2303      	movs	r3, #3
 8011b54:	e043      	b.n	8011bde <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	f003 0304 	and.w	r3, r3, #4
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d02c      	beq.n	8011bbe <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	69db      	ldr	r3, [r3, #28]
 8011b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011b6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011b72:	d124      	bne.n	8011bbe <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011b7c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	681a      	ldr	r2, [r3, #0]
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011b8c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	689a      	ldr	r2, [r3, #8]
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	f022 0201 	bic.w	r2, r2, #1
 8011b9c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	2220      	movs	r2, #32
 8011ba2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	2220      	movs	r2, #32
 8011ba8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	2220      	movs	r2, #32
 8011bae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8011bba:	2303      	movs	r3, #3
 8011bbc:	e00f      	b.n	8011bde <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	69da      	ldr	r2, [r3, #28]
 8011bc4:	68bb      	ldr	r3, [r7, #8]
 8011bc6:	4013      	ands	r3, r2
 8011bc8:	68ba      	ldr	r2, [r7, #8]
 8011bca:	429a      	cmp	r2, r3
 8011bcc:	bf0c      	ite	eq
 8011bce:	2301      	moveq	r3, #1
 8011bd0:	2300      	movne	r3, #0
 8011bd2:	b2db      	uxtb	r3, r3
 8011bd4:	461a      	mov	r2, r3
 8011bd6:	79fb      	ldrb	r3, [r7, #7]
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	d091      	beq.n	8011b00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011bdc:	2300      	movs	r3, #0
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	3710      	adds	r7, #16
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}
	...

08011be8 <__errno>:
 8011be8:	4b01      	ldr	r3, [pc, #4]	; (8011bf0 <__errno+0x8>)
 8011bea:	6818      	ldr	r0, [r3, #0]
 8011bec:	4770      	bx	lr
 8011bee:	bf00      	nop
 8011bf0:	2000000c 	.word	0x2000000c

08011bf4 <__libc_init_array>:
 8011bf4:	b570      	push	{r4, r5, r6, lr}
 8011bf6:	4d0d      	ldr	r5, [pc, #52]	; (8011c2c <__libc_init_array+0x38>)
 8011bf8:	4c0d      	ldr	r4, [pc, #52]	; (8011c30 <__libc_init_array+0x3c>)
 8011bfa:	1b64      	subs	r4, r4, r5
 8011bfc:	10a4      	asrs	r4, r4, #2
 8011bfe:	2600      	movs	r6, #0
 8011c00:	42a6      	cmp	r6, r4
 8011c02:	d109      	bne.n	8011c18 <__libc_init_array+0x24>
 8011c04:	4d0b      	ldr	r5, [pc, #44]	; (8011c34 <__libc_init_array+0x40>)
 8011c06:	4c0c      	ldr	r4, [pc, #48]	; (8011c38 <__libc_init_array+0x44>)
 8011c08:	f003 f8bc 	bl	8014d84 <_init>
 8011c0c:	1b64      	subs	r4, r4, r5
 8011c0e:	10a4      	asrs	r4, r4, #2
 8011c10:	2600      	movs	r6, #0
 8011c12:	42a6      	cmp	r6, r4
 8011c14:	d105      	bne.n	8011c22 <__libc_init_array+0x2e>
 8011c16:	bd70      	pop	{r4, r5, r6, pc}
 8011c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c1c:	4798      	blx	r3
 8011c1e:	3601      	adds	r6, #1
 8011c20:	e7ee      	b.n	8011c00 <__libc_init_array+0xc>
 8011c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c26:	4798      	blx	r3
 8011c28:	3601      	adds	r6, #1
 8011c2a:	e7f2      	b.n	8011c12 <__libc_init_array+0x1e>
 8011c2c:	0801539c 	.word	0x0801539c
 8011c30:	0801539c 	.word	0x0801539c
 8011c34:	0801539c 	.word	0x0801539c
 8011c38:	080153a0 	.word	0x080153a0

08011c3c <memcpy>:
 8011c3c:	440a      	add	r2, r1
 8011c3e:	4291      	cmp	r1, r2
 8011c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8011c44:	d100      	bne.n	8011c48 <memcpy+0xc>
 8011c46:	4770      	bx	lr
 8011c48:	b510      	push	{r4, lr}
 8011c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011c52:	4291      	cmp	r1, r2
 8011c54:	d1f9      	bne.n	8011c4a <memcpy+0xe>
 8011c56:	bd10      	pop	{r4, pc}

08011c58 <memset>:
 8011c58:	4402      	add	r2, r0
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	4293      	cmp	r3, r2
 8011c5e:	d100      	bne.n	8011c62 <memset+0xa>
 8011c60:	4770      	bx	lr
 8011c62:	f803 1b01 	strb.w	r1, [r3], #1
 8011c66:	e7f9      	b.n	8011c5c <memset+0x4>

08011c68 <__cvt>:
 8011c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011c6c:	ec55 4b10 	vmov	r4, r5, d0
 8011c70:	2d00      	cmp	r5, #0
 8011c72:	460e      	mov	r6, r1
 8011c74:	4619      	mov	r1, r3
 8011c76:	462b      	mov	r3, r5
 8011c78:	bfbb      	ittet	lt
 8011c7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011c7e:	461d      	movlt	r5, r3
 8011c80:	2300      	movge	r3, #0
 8011c82:	232d      	movlt	r3, #45	; 0x2d
 8011c84:	700b      	strb	r3, [r1, #0]
 8011c86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011c8c:	4691      	mov	r9, r2
 8011c8e:	f023 0820 	bic.w	r8, r3, #32
 8011c92:	bfbc      	itt	lt
 8011c94:	4622      	movlt	r2, r4
 8011c96:	4614      	movlt	r4, r2
 8011c98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011c9c:	d005      	beq.n	8011caa <__cvt+0x42>
 8011c9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011ca2:	d100      	bne.n	8011ca6 <__cvt+0x3e>
 8011ca4:	3601      	adds	r6, #1
 8011ca6:	2102      	movs	r1, #2
 8011ca8:	e000      	b.n	8011cac <__cvt+0x44>
 8011caa:	2103      	movs	r1, #3
 8011cac:	ab03      	add	r3, sp, #12
 8011cae:	9301      	str	r3, [sp, #4]
 8011cb0:	ab02      	add	r3, sp, #8
 8011cb2:	9300      	str	r3, [sp, #0]
 8011cb4:	ec45 4b10 	vmov	d0, r4, r5
 8011cb8:	4653      	mov	r3, sl
 8011cba:	4632      	mov	r2, r6
 8011cbc:	f000 ff1c 	bl	8012af8 <_dtoa_r>
 8011cc0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011cc4:	4607      	mov	r7, r0
 8011cc6:	d102      	bne.n	8011cce <__cvt+0x66>
 8011cc8:	f019 0f01 	tst.w	r9, #1
 8011ccc:	d022      	beq.n	8011d14 <__cvt+0xac>
 8011cce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011cd2:	eb07 0906 	add.w	r9, r7, r6
 8011cd6:	d110      	bne.n	8011cfa <__cvt+0x92>
 8011cd8:	783b      	ldrb	r3, [r7, #0]
 8011cda:	2b30      	cmp	r3, #48	; 0x30
 8011cdc:	d10a      	bne.n	8011cf4 <__cvt+0x8c>
 8011cde:	2200      	movs	r2, #0
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	4620      	mov	r0, r4
 8011ce4:	4629      	mov	r1, r5
 8011ce6:	f7ee feef 	bl	8000ac8 <__aeabi_dcmpeq>
 8011cea:	b918      	cbnz	r0, 8011cf4 <__cvt+0x8c>
 8011cec:	f1c6 0601 	rsb	r6, r6, #1
 8011cf0:	f8ca 6000 	str.w	r6, [sl]
 8011cf4:	f8da 3000 	ldr.w	r3, [sl]
 8011cf8:	4499      	add	r9, r3
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	4620      	mov	r0, r4
 8011d00:	4629      	mov	r1, r5
 8011d02:	f7ee fee1 	bl	8000ac8 <__aeabi_dcmpeq>
 8011d06:	b108      	cbz	r0, 8011d0c <__cvt+0xa4>
 8011d08:	f8cd 900c 	str.w	r9, [sp, #12]
 8011d0c:	2230      	movs	r2, #48	; 0x30
 8011d0e:	9b03      	ldr	r3, [sp, #12]
 8011d10:	454b      	cmp	r3, r9
 8011d12:	d307      	bcc.n	8011d24 <__cvt+0xbc>
 8011d14:	9b03      	ldr	r3, [sp, #12]
 8011d16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011d18:	1bdb      	subs	r3, r3, r7
 8011d1a:	4638      	mov	r0, r7
 8011d1c:	6013      	str	r3, [r2, #0]
 8011d1e:	b004      	add	sp, #16
 8011d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d24:	1c59      	adds	r1, r3, #1
 8011d26:	9103      	str	r1, [sp, #12]
 8011d28:	701a      	strb	r2, [r3, #0]
 8011d2a:	e7f0      	b.n	8011d0e <__cvt+0xa6>

08011d2c <__exponent>:
 8011d2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011d2e:	4603      	mov	r3, r0
 8011d30:	2900      	cmp	r1, #0
 8011d32:	bfb8      	it	lt
 8011d34:	4249      	neglt	r1, r1
 8011d36:	f803 2b02 	strb.w	r2, [r3], #2
 8011d3a:	bfb4      	ite	lt
 8011d3c:	222d      	movlt	r2, #45	; 0x2d
 8011d3e:	222b      	movge	r2, #43	; 0x2b
 8011d40:	2909      	cmp	r1, #9
 8011d42:	7042      	strb	r2, [r0, #1]
 8011d44:	dd2a      	ble.n	8011d9c <__exponent+0x70>
 8011d46:	f10d 0407 	add.w	r4, sp, #7
 8011d4a:	46a4      	mov	ip, r4
 8011d4c:	270a      	movs	r7, #10
 8011d4e:	46a6      	mov	lr, r4
 8011d50:	460a      	mov	r2, r1
 8011d52:	fb91 f6f7 	sdiv	r6, r1, r7
 8011d56:	fb07 1516 	mls	r5, r7, r6, r1
 8011d5a:	3530      	adds	r5, #48	; 0x30
 8011d5c:	2a63      	cmp	r2, #99	; 0x63
 8011d5e:	f104 34ff 	add.w	r4, r4, #4294967295
 8011d62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011d66:	4631      	mov	r1, r6
 8011d68:	dcf1      	bgt.n	8011d4e <__exponent+0x22>
 8011d6a:	3130      	adds	r1, #48	; 0x30
 8011d6c:	f1ae 0502 	sub.w	r5, lr, #2
 8011d70:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011d74:	1c44      	adds	r4, r0, #1
 8011d76:	4629      	mov	r1, r5
 8011d78:	4561      	cmp	r1, ip
 8011d7a:	d30a      	bcc.n	8011d92 <__exponent+0x66>
 8011d7c:	f10d 0209 	add.w	r2, sp, #9
 8011d80:	eba2 020e 	sub.w	r2, r2, lr
 8011d84:	4565      	cmp	r5, ip
 8011d86:	bf88      	it	hi
 8011d88:	2200      	movhi	r2, #0
 8011d8a:	4413      	add	r3, r2
 8011d8c:	1a18      	subs	r0, r3, r0
 8011d8e:	b003      	add	sp, #12
 8011d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011d96:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011d9a:	e7ed      	b.n	8011d78 <__exponent+0x4c>
 8011d9c:	2330      	movs	r3, #48	; 0x30
 8011d9e:	3130      	adds	r1, #48	; 0x30
 8011da0:	7083      	strb	r3, [r0, #2]
 8011da2:	70c1      	strb	r1, [r0, #3]
 8011da4:	1d03      	adds	r3, r0, #4
 8011da6:	e7f1      	b.n	8011d8c <__exponent+0x60>

08011da8 <_printf_float>:
 8011da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dac:	ed2d 8b02 	vpush	{d8}
 8011db0:	b08d      	sub	sp, #52	; 0x34
 8011db2:	460c      	mov	r4, r1
 8011db4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011db8:	4616      	mov	r6, r2
 8011dba:	461f      	mov	r7, r3
 8011dbc:	4605      	mov	r5, r0
 8011dbe:	f001 fe41 	bl	8013a44 <_localeconv_r>
 8011dc2:	f8d0 a000 	ldr.w	sl, [r0]
 8011dc6:	4650      	mov	r0, sl
 8011dc8:	f7ee fa02 	bl	80001d0 <strlen>
 8011dcc:	2300      	movs	r3, #0
 8011dce:	930a      	str	r3, [sp, #40]	; 0x28
 8011dd0:	6823      	ldr	r3, [r4, #0]
 8011dd2:	9305      	str	r3, [sp, #20]
 8011dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8011dd8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011ddc:	3307      	adds	r3, #7
 8011dde:	f023 0307 	bic.w	r3, r3, #7
 8011de2:	f103 0208 	add.w	r2, r3, #8
 8011de6:	f8c8 2000 	str.w	r2, [r8]
 8011dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011df2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011df6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011dfa:	9307      	str	r3, [sp, #28]
 8011dfc:	f8cd 8018 	str.w	r8, [sp, #24]
 8011e00:	ee08 0a10 	vmov	s16, r0
 8011e04:	4b9f      	ldr	r3, [pc, #636]	; (8012084 <_printf_float+0x2dc>)
 8011e06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8011e0e:	f7ee fe8d 	bl	8000b2c <__aeabi_dcmpun>
 8011e12:	bb88      	cbnz	r0, 8011e78 <_printf_float+0xd0>
 8011e14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011e18:	4b9a      	ldr	r3, [pc, #616]	; (8012084 <_printf_float+0x2dc>)
 8011e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8011e1e:	f7ee fe67 	bl	8000af0 <__aeabi_dcmple>
 8011e22:	bb48      	cbnz	r0, 8011e78 <_printf_float+0xd0>
 8011e24:	2200      	movs	r2, #0
 8011e26:	2300      	movs	r3, #0
 8011e28:	4640      	mov	r0, r8
 8011e2a:	4649      	mov	r1, r9
 8011e2c:	f7ee fe56 	bl	8000adc <__aeabi_dcmplt>
 8011e30:	b110      	cbz	r0, 8011e38 <_printf_float+0x90>
 8011e32:	232d      	movs	r3, #45	; 0x2d
 8011e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e38:	4b93      	ldr	r3, [pc, #588]	; (8012088 <_printf_float+0x2e0>)
 8011e3a:	4894      	ldr	r0, [pc, #592]	; (801208c <_printf_float+0x2e4>)
 8011e3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011e40:	bf94      	ite	ls
 8011e42:	4698      	movls	r8, r3
 8011e44:	4680      	movhi	r8, r0
 8011e46:	2303      	movs	r3, #3
 8011e48:	6123      	str	r3, [r4, #16]
 8011e4a:	9b05      	ldr	r3, [sp, #20]
 8011e4c:	f023 0204 	bic.w	r2, r3, #4
 8011e50:	6022      	str	r2, [r4, #0]
 8011e52:	f04f 0900 	mov.w	r9, #0
 8011e56:	9700      	str	r7, [sp, #0]
 8011e58:	4633      	mov	r3, r6
 8011e5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8011e5c:	4621      	mov	r1, r4
 8011e5e:	4628      	mov	r0, r5
 8011e60:	f000 f9d8 	bl	8012214 <_printf_common>
 8011e64:	3001      	adds	r0, #1
 8011e66:	f040 8090 	bne.w	8011f8a <_printf_float+0x1e2>
 8011e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8011e6e:	b00d      	add	sp, #52	; 0x34
 8011e70:	ecbd 8b02 	vpop	{d8}
 8011e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e78:	4642      	mov	r2, r8
 8011e7a:	464b      	mov	r3, r9
 8011e7c:	4640      	mov	r0, r8
 8011e7e:	4649      	mov	r1, r9
 8011e80:	f7ee fe54 	bl	8000b2c <__aeabi_dcmpun>
 8011e84:	b140      	cbz	r0, 8011e98 <_printf_float+0xf0>
 8011e86:	464b      	mov	r3, r9
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	bfbc      	itt	lt
 8011e8c:	232d      	movlt	r3, #45	; 0x2d
 8011e8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011e92:	487f      	ldr	r0, [pc, #508]	; (8012090 <_printf_float+0x2e8>)
 8011e94:	4b7f      	ldr	r3, [pc, #508]	; (8012094 <_printf_float+0x2ec>)
 8011e96:	e7d1      	b.n	8011e3c <_printf_float+0x94>
 8011e98:	6863      	ldr	r3, [r4, #4]
 8011e9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011e9e:	9206      	str	r2, [sp, #24]
 8011ea0:	1c5a      	adds	r2, r3, #1
 8011ea2:	d13f      	bne.n	8011f24 <_printf_float+0x17c>
 8011ea4:	2306      	movs	r3, #6
 8011ea6:	6063      	str	r3, [r4, #4]
 8011ea8:	9b05      	ldr	r3, [sp, #20]
 8011eaa:	6861      	ldr	r1, [r4, #4]
 8011eac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	9303      	str	r3, [sp, #12]
 8011eb4:	ab0a      	add	r3, sp, #40	; 0x28
 8011eb6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011eba:	ab09      	add	r3, sp, #36	; 0x24
 8011ebc:	ec49 8b10 	vmov	d0, r8, r9
 8011ec0:	9300      	str	r3, [sp, #0]
 8011ec2:	6022      	str	r2, [r4, #0]
 8011ec4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011ec8:	4628      	mov	r0, r5
 8011eca:	f7ff fecd 	bl	8011c68 <__cvt>
 8011ece:	9b06      	ldr	r3, [sp, #24]
 8011ed0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ed2:	2b47      	cmp	r3, #71	; 0x47
 8011ed4:	4680      	mov	r8, r0
 8011ed6:	d108      	bne.n	8011eea <_printf_float+0x142>
 8011ed8:	1cc8      	adds	r0, r1, #3
 8011eda:	db02      	blt.n	8011ee2 <_printf_float+0x13a>
 8011edc:	6863      	ldr	r3, [r4, #4]
 8011ede:	4299      	cmp	r1, r3
 8011ee0:	dd41      	ble.n	8011f66 <_printf_float+0x1be>
 8011ee2:	f1ab 0b02 	sub.w	fp, fp, #2
 8011ee6:	fa5f fb8b 	uxtb.w	fp, fp
 8011eea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011eee:	d820      	bhi.n	8011f32 <_printf_float+0x18a>
 8011ef0:	3901      	subs	r1, #1
 8011ef2:	465a      	mov	r2, fp
 8011ef4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011ef8:	9109      	str	r1, [sp, #36]	; 0x24
 8011efa:	f7ff ff17 	bl	8011d2c <__exponent>
 8011efe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011f00:	1813      	adds	r3, r2, r0
 8011f02:	2a01      	cmp	r2, #1
 8011f04:	4681      	mov	r9, r0
 8011f06:	6123      	str	r3, [r4, #16]
 8011f08:	dc02      	bgt.n	8011f10 <_printf_float+0x168>
 8011f0a:	6822      	ldr	r2, [r4, #0]
 8011f0c:	07d2      	lsls	r2, r2, #31
 8011f0e:	d501      	bpl.n	8011f14 <_printf_float+0x16c>
 8011f10:	3301      	adds	r3, #1
 8011f12:	6123      	str	r3, [r4, #16]
 8011f14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d09c      	beq.n	8011e56 <_printf_float+0xae>
 8011f1c:	232d      	movs	r3, #45	; 0x2d
 8011f1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f22:	e798      	b.n	8011e56 <_printf_float+0xae>
 8011f24:	9a06      	ldr	r2, [sp, #24]
 8011f26:	2a47      	cmp	r2, #71	; 0x47
 8011f28:	d1be      	bne.n	8011ea8 <_printf_float+0x100>
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d1bc      	bne.n	8011ea8 <_printf_float+0x100>
 8011f2e:	2301      	movs	r3, #1
 8011f30:	e7b9      	b.n	8011ea6 <_printf_float+0xfe>
 8011f32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011f36:	d118      	bne.n	8011f6a <_printf_float+0x1c2>
 8011f38:	2900      	cmp	r1, #0
 8011f3a:	6863      	ldr	r3, [r4, #4]
 8011f3c:	dd0b      	ble.n	8011f56 <_printf_float+0x1ae>
 8011f3e:	6121      	str	r1, [r4, #16]
 8011f40:	b913      	cbnz	r3, 8011f48 <_printf_float+0x1a0>
 8011f42:	6822      	ldr	r2, [r4, #0]
 8011f44:	07d0      	lsls	r0, r2, #31
 8011f46:	d502      	bpl.n	8011f4e <_printf_float+0x1a6>
 8011f48:	3301      	adds	r3, #1
 8011f4a:	440b      	add	r3, r1
 8011f4c:	6123      	str	r3, [r4, #16]
 8011f4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8011f50:	f04f 0900 	mov.w	r9, #0
 8011f54:	e7de      	b.n	8011f14 <_printf_float+0x16c>
 8011f56:	b913      	cbnz	r3, 8011f5e <_printf_float+0x1b6>
 8011f58:	6822      	ldr	r2, [r4, #0]
 8011f5a:	07d2      	lsls	r2, r2, #31
 8011f5c:	d501      	bpl.n	8011f62 <_printf_float+0x1ba>
 8011f5e:	3302      	adds	r3, #2
 8011f60:	e7f4      	b.n	8011f4c <_printf_float+0x1a4>
 8011f62:	2301      	movs	r3, #1
 8011f64:	e7f2      	b.n	8011f4c <_printf_float+0x1a4>
 8011f66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f6c:	4299      	cmp	r1, r3
 8011f6e:	db05      	blt.n	8011f7c <_printf_float+0x1d4>
 8011f70:	6823      	ldr	r3, [r4, #0]
 8011f72:	6121      	str	r1, [r4, #16]
 8011f74:	07d8      	lsls	r0, r3, #31
 8011f76:	d5ea      	bpl.n	8011f4e <_printf_float+0x1a6>
 8011f78:	1c4b      	adds	r3, r1, #1
 8011f7a:	e7e7      	b.n	8011f4c <_printf_float+0x1a4>
 8011f7c:	2900      	cmp	r1, #0
 8011f7e:	bfd4      	ite	le
 8011f80:	f1c1 0202 	rsble	r2, r1, #2
 8011f84:	2201      	movgt	r2, #1
 8011f86:	4413      	add	r3, r2
 8011f88:	e7e0      	b.n	8011f4c <_printf_float+0x1a4>
 8011f8a:	6823      	ldr	r3, [r4, #0]
 8011f8c:	055a      	lsls	r2, r3, #21
 8011f8e:	d407      	bmi.n	8011fa0 <_printf_float+0x1f8>
 8011f90:	6923      	ldr	r3, [r4, #16]
 8011f92:	4642      	mov	r2, r8
 8011f94:	4631      	mov	r1, r6
 8011f96:	4628      	mov	r0, r5
 8011f98:	47b8      	blx	r7
 8011f9a:	3001      	adds	r0, #1
 8011f9c:	d12c      	bne.n	8011ff8 <_printf_float+0x250>
 8011f9e:	e764      	b.n	8011e6a <_printf_float+0xc2>
 8011fa0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011fa4:	f240 80e0 	bls.w	8012168 <_printf_float+0x3c0>
 8011fa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011fac:	2200      	movs	r2, #0
 8011fae:	2300      	movs	r3, #0
 8011fb0:	f7ee fd8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8011fb4:	2800      	cmp	r0, #0
 8011fb6:	d034      	beq.n	8012022 <_printf_float+0x27a>
 8011fb8:	4a37      	ldr	r2, [pc, #220]	; (8012098 <_printf_float+0x2f0>)
 8011fba:	2301      	movs	r3, #1
 8011fbc:	4631      	mov	r1, r6
 8011fbe:	4628      	mov	r0, r5
 8011fc0:	47b8      	blx	r7
 8011fc2:	3001      	adds	r0, #1
 8011fc4:	f43f af51 	beq.w	8011e6a <_printf_float+0xc2>
 8011fc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	db02      	blt.n	8011fd6 <_printf_float+0x22e>
 8011fd0:	6823      	ldr	r3, [r4, #0]
 8011fd2:	07d8      	lsls	r0, r3, #31
 8011fd4:	d510      	bpl.n	8011ff8 <_printf_float+0x250>
 8011fd6:	ee18 3a10 	vmov	r3, s16
 8011fda:	4652      	mov	r2, sl
 8011fdc:	4631      	mov	r1, r6
 8011fde:	4628      	mov	r0, r5
 8011fe0:	47b8      	blx	r7
 8011fe2:	3001      	adds	r0, #1
 8011fe4:	f43f af41 	beq.w	8011e6a <_printf_float+0xc2>
 8011fe8:	f04f 0800 	mov.w	r8, #0
 8011fec:	f104 091a 	add.w	r9, r4, #26
 8011ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ff2:	3b01      	subs	r3, #1
 8011ff4:	4543      	cmp	r3, r8
 8011ff6:	dc09      	bgt.n	801200c <_printf_float+0x264>
 8011ff8:	6823      	ldr	r3, [r4, #0]
 8011ffa:	079b      	lsls	r3, r3, #30
 8011ffc:	f100 8105 	bmi.w	801220a <_printf_float+0x462>
 8012000:	68e0      	ldr	r0, [r4, #12]
 8012002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012004:	4298      	cmp	r0, r3
 8012006:	bfb8      	it	lt
 8012008:	4618      	movlt	r0, r3
 801200a:	e730      	b.n	8011e6e <_printf_float+0xc6>
 801200c:	2301      	movs	r3, #1
 801200e:	464a      	mov	r2, r9
 8012010:	4631      	mov	r1, r6
 8012012:	4628      	mov	r0, r5
 8012014:	47b8      	blx	r7
 8012016:	3001      	adds	r0, #1
 8012018:	f43f af27 	beq.w	8011e6a <_printf_float+0xc2>
 801201c:	f108 0801 	add.w	r8, r8, #1
 8012020:	e7e6      	b.n	8011ff0 <_printf_float+0x248>
 8012022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012024:	2b00      	cmp	r3, #0
 8012026:	dc39      	bgt.n	801209c <_printf_float+0x2f4>
 8012028:	4a1b      	ldr	r2, [pc, #108]	; (8012098 <_printf_float+0x2f0>)
 801202a:	2301      	movs	r3, #1
 801202c:	4631      	mov	r1, r6
 801202e:	4628      	mov	r0, r5
 8012030:	47b8      	blx	r7
 8012032:	3001      	adds	r0, #1
 8012034:	f43f af19 	beq.w	8011e6a <_printf_float+0xc2>
 8012038:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801203c:	4313      	orrs	r3, r2
 801203e:	d102      	bne.n	8012046 <_printf_float+0x29e>
 8012040:	6823      	ldr	r3, [r4, #0]
 8012042:	07d9      	lsls	r1, r3, #31
 8012044:	d5d8      	bpl.n	8011ff8 <_printf_float+0x250>
 8012046:	ee18 3a10 	vmov	r3, s16
 801204a:	4652      	mov	r2, sl
 801204c:	4631      	mov	r1, r6
 801204e:	4628      	mov	r0, r5
 8012050:	47b8      	blx	r7
 8012052:	3001      	adds	r0, #1
 8012054:	f43f af09 	beq.w	8011e6a <_printf_float+0xc2>
 8012058:	f04f 0900 	mov.w	r9, #0
 801205c:	f104 0a1a 	add.w	sl, r4, #26
 8012060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012062:	425b      	negs	r3, r3
 8012064:	454b      	cmp	r3, r9
 8012066:	dc01      	bgt.n	801206c <_printf_float+0x2c4>
 8012068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801206a:	e792      	b.n	8011f92 <_printf_float+0x1ea>
 801206c:	2301      	movs	r3, #1
 801206e:	4652      	mov	r2, sl
 8012070:	4631      	mov	r1, r6
 8012072:	4628      	mov	r0, r5
 8012074:	47b8      	blx	r7
 8012076:	3001      	adds	r0, #1
 8012078:	f43f aef7 	beq.w	8011e6a <_printf_float+0xc2>
 801207c:	f109 0901 	add.w	r9, r9, #1
 8012080:	e7ee      	b.n	8012060 <_printf_float+0x2b8>
 8012082:	bf00      	nop
 8012084:	7fefffff 	.word	0x7fefffff
 8012088:	08014fbc 	.word	0x08014fbc
 801208c:	08014fc0 	.word	0x08014fc0
 8012090:	08014fc8 	.word	0x08014fc8
 8012094:	08014fc4 	.word	0x08014fc4
 8012098:	08014fcc 	.word	0x08014fcc
 801209c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801209e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80120a0:	429a      	cmp	r2, r3
 80120a2:	bfa8      	it	ge
 80120a4:	461a      	movge	r2, r3
 80120a6:	2a00      	cmp	r2, #0
 80120a8:	4691      	mov	r9, r2
 80120aa:	dc37      	bgt.n	801211c <_printf_float+0x374>
 80120ac:	f04f 0b00 	mov.w	fp, #0
 80120b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80120b4:	f104 021a 	add.w	r2, r4, #26
 80120b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80120ba:	9305      	str	r3, [sp, #20]
 80120bc:	eba3 0309 	sub.w	r3, r3, r9
 80120c0:	455b      	cmp	r3, fp
 80120c2:	dc33      	bgt.n	801212c <_printf_float+0x384>
 80120c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80120c8:	429a      	cmp	r2, r3
 80120ca:	db3b      	blt.n	8012144 <_printf_float+0x39c>
 80120cc:	6823      	ldr	r3, [r4, #0]
 80120ce:	07da      	lsls	r2, r3, #31
 80120d0:	d438      	bmi.n	8012144 <_printf_float+0x39c>
 80120d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120d4:	9a05      	ldr	r2, [sp, #20]
 80120d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80120d8:	1a9a      	subs	r2, r3, r2
 80120da:	eba3 0901 	sub.w	r9, r3, r1
 80120de:	4591      	cmp	r9, r2
 80120e0:	bfa8      	it	ge
 80120e2:	4691      	movge	r9, r2
 80120e4:	f1b9 0f00 	cmp.w	r9, #0
 80120e8:	dc35      	bgt.n	8012156 <_printf_float+0x3ae>
 80120ea:	f04f 0800 	mov.w	r8, #0
 80120ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80120f2:	f104 0a1a 	add.w	sl, r4, #26
 80120f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80120fa:	1a9b      	subs	r3, r3, r2
 80120fc:	eba3 0309 	sub.w	r3, r3, r9
 8012100:	4543      	cmp	r3, r8
 8012102:	f77f af79 	ble.w	8011ff8 <_printf_float+0x250>
 8012106:	2301      	movs	r3, #1
 8012108:	4652      	mov	r2, sl
 801210a:	4631      	mov	r1, r6
 801210c:	4628      	mov	r0, r5
 801210e:	47b8      	blx	r7
 8012110:	3001      	adds	r0, #1
 8012112:	f43f aeaa 	beq.w	8011e6a <_printf_float+0xc2>
 8012116:	f108 0801 	add.w	r8, r8, #1
 801211a:	e7ec      	b.n	80120f6 <_printf_float+0x34e>
 801211c:	4613      	mov	r3, r2
 801211e:	4631      	mov	r1, r6
 8012120:	4642      	mov	r2, r8
 8012122:	4628      	mov	r0, r5
 8012124:	47b8      	blx	r7
 8012126:	3001      	adds	r0, #1
 8012128:	d1c0      	bne.n	80120ac <_printf_float+0x304>
 801212a:	e69e      	b.n	8011e6a <_printf_float+0xc2>
 801212c:	2301      	movs	r3, #1
 801212e:	4631      	mov	r1, r6
 8012130:	4628      	mov	r0, r5
 8012132:	9205      	str	r2, [sp, #20]
 8012134:	47b8      	blx	r7
 8012136:	3001      	adds	r0, #1
 8012138:	f43f ae97 	beq.w	8011e6a <_printf_float+0xc2>
 801213c:	9a05      	ldr	r2, [sp, #20]
 801213e:	f10b 0b01 	add.w	fp, fp, #1
 8012142:	e7b9      	b.n	80120b8 <_printf_float+0x310>
 8012144:	ee18 3a10 	vmov	r3, s16
 8012148:	4652      	mov	r2, sl
 801214a:	4631      	mov	r1, r6
 801214c:	4628      	mov	r0, r5
 801214e:	47b8      	blx	r7
 8012150:	3001      	adds	r0, #1
 8012152:	d1be      	bne.n	80120d2 <_printf_float+0x32a>
 8012154:	e689      	b.n	8011e6a <_printf_float+0xc2>
 8012156:	9a05      	ldr	r2, [sp, #20]
 8012158:	464b      	mov	r3, r9
 801215a:	4442      	add	r2, r8
 801215c:	4631      	mov	r1, r6
 801215e:	4628      	mov	r0, r5
 8012160:	47b8      	blx	r7
 8012162:	3001      	adds	r0, #1
 8012164:	d1c1      	bne.n	80120ea <_printf_float+0x342>
 8012166:	e680      	b.n	8011e6a <_printf_float+0xc2>
 8012168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801216a:	2a01      	cmp	r2, #1
 801216c:	dc01      	bgt.n	8012172 <_printf_float+0x3ca>
 801216e:	07db      	lsls	r3, r3, #31
 8012170:	d538      	bpl.n	80121e4 <_printf_float+0x43c>
 8012172:	2301      	movs	r3, #1
 8012174:	4642      	mov	r2, r8
 8012176:	4631      	mov	r1, r6
 8012178:	4628      	mov	r0, r5
 801217a:	47b8      	blx	r7
 801217c:	3001      	adds	r0, #1
 801217e:	f43f ae74 	beq.w	8011e6a <_printf_float+0xc2>
 8012182:	ee18 3a10 	vmov	r3, s16
 8012186:	4652      	mov	r2, sl
 8012188:	4631      	mov	r1, r6
 801218a:	4628      	mov	r0, r5
 801218c:	47b8      	blx	r7
 801218e:	3001      	adds	r0, #1
 8012190:	f43f ae6b 	beq.w	8011e6a <_printf_float+0xc2>
 8012194:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012198:	2200      	movs	r2, #0
 801219a:	2300      	movs	r3, #0
 801219c:	f7ee fc94 	bl	8000ac8 <__aeabi_dcmpeq>
 80121a0:	b9d8      	cbnz	r0, 80121da <_printf_float+0x432>
 80121a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121a4:	f108 0201 	add.w	r2, r8, #1
 80121a8:	3b01      	subs	r3, #1
 80121aa:	4631      	mov	r1, r6
 80121ac:	4628      	mov	r0, r5
 80121ae:	47b8      	blx	r7
 80121b0:	3001      	adds	r0, #1
 80121b2:	d10e      	bne.n	80121d2 <_printf_float+0x42a>
 80121b4:	e659      	b.n	8011e6a <_printf_float+0xc2>
 80121b6:	2301      	movs	r3, #1
 80121b8:	4652      	mov	r2, sl
 80121ba:	4631      	mov	r1, r6
 80121bc:	4628      	mov	r0, r5
 80121be:	47b8      	blx	r7
 80121c0:	3001      	adds	r0, #1
 80121c2:	f43f ae52 	beq.w	8011e6a <_printf_float+0xc2>
 80121c6:	f108 0801 	add.w	r8, r8, #1
 80121ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121cc:	3b01      	subs	r3, #1
 80121ce:	4543      	cmp	r3, r8
 80121d0:	dcf1      	bgt.n	80121b6 <_printf_float+0x40e>
 80121d2:	464b      	mov	r3, r9
 80121d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80121d8:	e6dc      	b.n	8011f94 <_printf_float+0x1ec>
 80121da:	f04f 0800 	mov.w	r8, #0
 80121de:	f104 0a1a 	add.w	sl, r4, #26
 80121e2:	e7f2      	b.n	80121ca <_printf_float+0x422>
 80121e4:	2301      	movs	r3, #1
 80121e6:	4642      	mov	r2, r8
 80121e8:	e7df      	b.n	80121aa <_printf_float+0x402>
 80121ea:	2301      	movs	r3, #1
 80121ec:	464a      	mov	r2, r9
 80121ee:	4631      	mov	r1, r6
 80121f0:	4628      	mov	r0, r5
 80121f2:	47b8      	blx	r7
 80121f4:	3001      	adds	r0, #1
 80121f6:	f43f ae38 	beq.w	8011e6a <_printf_float+0xc2>
 80121fa:	f108 0801 	add.w	r8, r8, #1
 80121fe:	68e3      	ldr	r3, [r4, #12]
 8012200:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012202:	1a5b      	subs	r3, r3, r1
 8012204:	4543      	cmp	r3, r8
 8012206:	dcf0      	bgt.n	80121ea <_printf_float+0x442>
 8012208:	e6fa      	b.n	8012000 <_printf_float+0x258>
 801220a:	f04f 0800 	mov.w	r8, #0
 801220e:	f104 0919 	add.w	r9, r4, #25
 8012212:	e7f4      	b.n	80121fe <_printf_float+0x456>

08012214 <_printf_common>:
 8012214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012218:	4616      	mov	r6, r2
 801221a:	4699      	mov	r9, r3
 801221c:	688a      	ldr	r2, [r1, #8]
 801221e:	690b      	ldr	r3, [r1, #16]
 8012220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012224:	4293      	cmp	r3, r2
 8012226:	bfb8      	it	lt
 8012228:	4613      	movlt	r3, r2
 801222a:	6033      	str	r3, [r6, #0]
 801222c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012230:	4607      	mov	r7, r0
 8012232:	460c      	mov	r4, r1
 8012234:	b10a      	cbz	r2, 801223a <_printf_common+0x26>
 8012236:	3301      	adds	r3, #1
 8012238:	6033      	str	r3, [r6, #0]
 801223a:	6823      	ldr	r3, [r4, #0]
 801223c:	0699      	lsls	r1, r3, #26
 801223e:	bf42      	ittt	mi
 8012240:	6833      	ldrmi	r3, [r6, #0]
 8012242:	3302      	addmi	r3, #2
 8012244:	6033      	strmi	r3, [r6, #0]
 8012246:	6825      	ldr	r5, [r4, #0]
 8012248:	f015 0506 	ands.w	r5, r5, #6
 801224c:	d106      	bne.n	801225c <_printf_common+0x48>
 801224e:	f104 0a19 	add.w	sl, r4, #25
 8012252:	68e3      	ldr	r3, [r4, #12]
 8012254:	6832      	ldr	r2, [r6, #0]
 8012256:	1a9b      	subs	r3, r3, r2
 8012258:	42ab      	cmp	r3, r5
 801225a:	dc26      	bgt.n	80122aa <_printf_common+0x96>
 801225c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012260:	1e13      	subs	r3, r2, #0
 8012262:	6822      	ldr	r2, [r4, #0]
 8012264:	bf18      	it	ne
 8012266:	2301      	movne	r3, #1
 8012268:	0692      	lsls	r2, r2, #26
 801226a:	d42b      	bmi.n	80122c4 <_printf_common+0xb0>
 801226c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012270:	4649      	mov	r1, r9
 8012272:	4638      	mov	r0, r7
 8012274:	47c0      	blx	r8
 8012276:	3001      	adds	r0, #1
 8012278:	d01e      	beq.n	80122b8 <_printf_common+0xa4>
 801227a:	6823      	ldr	r3, [r4, #0]
 801227c:	68e5      	ldr	r5, [r4, #12]
 801227e:	6832      	ldr	r2, [r6, #0]
 8012280:	f003 0306 	and.w	r3, r3, #6
 8012284:	2b04      	cmp	r3, #4
 8012286:	bf08      	it	eq
 8012288:	1aad      	subeq	r5, r5, r2
 801228a:	68a3      	ldr	r3, [r4, #8]
 801228c:	6922      	ldr	r2, [r4, #16]
 801228e:	bf0c      	ite	eq
 8012290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012294:	2500      	movne	r5, #0
 8012296:	4293      	cmp	r3, r2
 8012298:	bfc4      	itt	gt
 801229a:	1a9b      	subgt	r3, r3, r2
 801229c:	18ed      	addgt	r5, r5, r3
 801229e:	2600      	movs	r6, #0
 80122a0:	341a      	adds	r4, #26
 80122a2:	42b5      	cmp	r5, r6
 80122a4:	d11a      	bne.n	80122dc <_printf_common+0xc8>
 80122a6:	2000      	movs	r0, #0
 80122a8:	e008      	b.n	80122bc <_printf_common+0xa8>
 80122aa:	2301      	movs	r3, #1
 80122ac:	4652      	mov	r2, sl
 80122ae:	4649      	mov	r1, r9
 80122b0:	4638      	mov	r0, r7
 80122b2:	47c0      	blx	r8
 80122b4:	3001      	adds	r0, #1
 80122b6:	d103      	bne.n	80122c0 <_printf_common+0xac>
 80122b8:	f04f 30ff 	mov.w	r0, #4294967295
 80122bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122c0:	3501      	adds	r5, #1
 80122c2:	e7c6      	b.n	8012252 <_printf_common+0x3e>
 80122c4:	18e1      	adds	r1, r4, r3
 80122c6:	1c5a      	adds	r2, r3, #1
 80122c8:	2030      	movs	r0, #48	; 0x30
 80122ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80122ce:	4422      	add	r2, r4
 80122d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80122d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80122d8:	3302      	adds	r3, #2
 80122da:	e7c7      	b.n	801226c <_printf_common+0x58>
 80122dc:	2301      	movs	r3, #1
 80122de:	4622      	mov	r2, r4
 80122e0:	4649      	mov	r1, r9
 80122e2:	4638      	mov	r0, r7
 80122e4:	47c0      	blx	r8
 80122e6:	3001      	adds	r0, #1
 80122e8:	d0e6      	beq.n	80122b8 <_printf_common+0xa4>
 80122ea:	3601      	adds	r6, #1
 80122ec:	e7d9      	b.n	80122a2 <_printf_common+0x8e>
	...

080122f0 <_printf_i>:
 80122f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80122f4:	7e0f      	ldrb	r7, [r1, #24]
 80122f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80122f8:	2f78      	cmp	r7, #120	; 0x78
 80122fa:	4691      	mov	r9, r2
 80122fc:	4680      	mov	r8, r0
 80122fe:	460c      	mov	r4, r1
 8012300:	469a      	mov	sl, r3
 8012302:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012306:	d807      	bhi.n	8012318 <_printf_i+0x28>
 8012308:	2f62      	cmp	r7, #98	; 0x62
 801230a:	d80a      	bhi.n	8012322 <_printf_i+0x32>
 801230c:	2f00      	cmp	r7, #0
 801230e:	f000 80d8 	beq.w	80124c2 <_printf_i+0x1d2>
 8012312:	2f58      	cmp	r7, #88	; 0x58
 8012314:	f000 80a3 	beq.w	801245e <_printf_i+0x16e>
 8012318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801231c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012320:	e03a      	b.n	8012398 <_printf_i+0xa8>
 8012322:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012326:	2b15      	cmp	r3, #21
 8012328:	d8f6      	bhi.n	8012318 <_printf_i+0x28>
 801232a:	a101      	add	r1, pc, #4	; (adr r1, 8012330 <_printf_i+0x40>)
 801232c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012330:	08012389 	.word	0x08012389
 8012334:	0801239d 	.word	0x0801239d
 8012338:	08012319 	.word	0x08012319
 801233c:	08012319 	.word	0x08012319
 8012340:	08012319 	.word	0x08012319
 8012344:	08012319 	.word	0x08012319
 8012348:	0801239d 	.word	0x0801239d
 801234c:	08012319 	.word	0x08012319
 8012350:	08012319 	.word	0x08012319
 8012354:	08012319 	.word	0x08012319
 8012358:	08012319 	.word	0x08012319
 801235c:	080124a9 	.word	0x080124a9
 8012360:	080123cd 	.word	0x080123cd
 8012364:	0801248b 	.word	0x0801248b
 8012368:	08012319 	.word	0x08012319
 801236c:	08012319 	.word	0x08012319
 8012370:	080124cb 	.word	0x080124cb
 8012374:	08012319 	.word	0x08012319
 8012378:	080123cd 	.word	0x080123cd
 801237c:	08012319 	.word	0x08012319
 8012380:	08012319 	.word	0x08012319
 8012384:	08012493 	.word	0x08012493
 8012388:	682b      	ldr	r3, [r5, #0]
 801238a:	1d1a      	adds	r2, r3, #4
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	602a      	str	r2, [r5, #0]
 8012390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012398:	2301      	movs	r3, #1
 801239a:	e0a3      	b.n	80124e4 <_printf_i+0x1f4>
 801239c:	6820      	ldr	r0, [r4, #0]
 801239e:	6829      	ldr	r1, [r5, #0]
 80123a0:	0606      	lsls	r6, r0, #24
 80123a2:	f101 0304 	add.w	r3, r1, #4
 80123a6:	d50a      	bpl.n	80123be <_printf_i+0xce>
 80123a8:	680e      	ldr	r6, [r1, #0]
 80123aa:	602b      	str	r3, [r5, #0]
 80123ac:	2e00      	cmp	r6, #0
 80123ae:	da03      	bge.n	80123b8 <_printf_i+0xc8>
 80123b0:	232d      	movs	r3, #45	; 0x2d
 80123b2:	4276      	negs	r6, r6
 80123b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80123b8:	485e      	ldr	r0, [pc, #376]	; (8012534 <_printf_i+0x244>)
 80123ba:	230a      	movs	r3, #10
 80123bc:	e019      	b.n	80123f2 <_printf_i+0x102>
 80123be:	680e      	ldr	r6, [r1, #0]
 80123c0:	602b      	str	r3, [r5, #0]
 80123c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80123c6:	bf18      	it	ne
 80123c8:	b236      	sxthne	r6, r6
 80123ca:	e7ef      	b.n	80123ac <_printf_i+0xbc>
 80123cc:	682b      	ldr	r3, [r5, #0]
 80123ce:	6820      	ldr	r0, [r4, #0]
 80123d0:	1d19      	adds	r1, r3, #4
 80123d2:	6029      	str	r1, [r5, #0]
 80123d4:	0601      	lsls	r1, r0, #24
 80123d6:	d501      	bpl.n	80123dc <_printf_i+0xec>
 80123d8:	681e      	ldr	r6, [r3, #0]
 80123da:	e002      	b.n	80123e2 <_printf_i+0xf2>
 80123dc:	0646      	lsls	r6, r0, #25
 80123de:	d5fb      	bpl.n	80123d8 <_printf_i+0xe8>
 80123e0:	881e      	ldrh	r6, [r3, #0]
 80123e2:	4854      	ldr	r0, [pc, #336]	; (8012534 <_printf_i+0x244>)
 80123e4:	2f6f      	cmp	r7, #111	; 0x6f
 80123e6:	bf0c      	ite	eq
 80123e8:	2308      	moveq	r3, #8
 80123ea:	230a      	movne	r3, #10
 80123ec:	2100      	movs	r1, #0
 80123ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80123f2:	6865      	ldr	r5, [r4, #4]
 80123f4:	60a5      	str	r5, [r4, #8]
 80123f6:	2d00      	cmp	r5, #0
 80123f8:	bfa2      	ittt	ge
 80123fa:	6821      	ldrge	r1, [r4, #0]
 80123fc:	f021 0104 	bicge.w	r1, r1, #4
 8012400:	6021      	strge	r1, [r4, #0]
 8012402:	b90e      	cbnz	r6, 8012408 <_printf_i+0x118>
 8012404:	2d00      	cmp	r5, #0
 8012406:	d04d      	beq.n	80124a4 <_printf_i+0x1b4>
 8012408:	4615      	mov	r5, r2
 801240a:	fbb6 f1f3 	udiv	r1, r6, r3
 801240e:	fb03 6711 	mls	r7, r3, r1, r6
 8012412:	5dc7      	ldrb	r7, [r0, r7]
 8012414:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012418:	4637      	mov	r7, r6
 801241a:	42bb      	cmp	r3, r7
 801241c:	460e      	mov	r6, r1
 801241e:	d9f4      	bls.n	801240a <_printf_i+0x11a>
 8012420:	2b08      	cmp	r3, #8
 8012422:	d10b      	bne.n	801243c <_printf_i+0x14c>
 8012424:	6823      	ldr	r3, [r4, #0]
 8012426:	07de      	lsls	r6, r3, #31
 8012428:	d508      	bpl.n	801243c <_printf_i+0x14c>
 801242a:	6923      	ldr	r3, [r4, #16]
 801242c:	6861      	ldr	r1, [r4, #4]
 801242e:	4299      	cmp	r1, r3
 8012430:	bfde      	ittt	le
 8012432:	2330      	movle	r3, #48	; 0x30
 8012434:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012438:	f105 35ff 	addle.w	r5, r5, #4294967295
 801243c:	1b52      	subs	r2, r2, r5
 801243e:	6122      	str	r2, [r4, #16]
 8012440:	f8cd a000 	str.w	sl, [sp]
 8012444:	464b      	mov	r3, r9
 8012446:	aa03      	add	r2, sp, #12
 8012448:	4621      	mov	r1, r4
 801244a:	4640      	mov	r0, r8
 801244c:	f7ff fee2 	bl	8012214 <_printf_common>
 8012450:	3001      	adds	r0, #1
 8012452:	d14c      	bne.n	80124ee <_printf_i+0x1fe>
 8012454:	f04f 30ff 	mov.w	r0, #4294967295
 8012458:	b004      	add	sp, #16
 801245a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801245e:	4835      	ldr	r0, [pc, #212]	; (8012534 <_printf_i+0x244>)
 8012460:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012464:	6829      	ldr	r1, [r5, #0]
 8012466:	6823      	ldr	r3, [r4, #0]
 8012468:	f851 6b04 	ldr.w	r6, [r1], #4
 801246c:	6029      	str	r1, [r5, #0]
 801246e:	061d      	lsls	r5, r3, #24
 8012470:	d514      	bpl.n	801249c <_printf_i+0x1ac>
 8012472:	07df      	lsls	r7, r3, #31
 8012474:	bf44      	itt	mi
 8012476:	f043 0320 	orrmi.w	r3, r3, #32
 801247a:	6023      	strmi	r3, [r4, #0]
 801247c:	b91e      	cbnz	r6, 8012486 <_printf_i+0x196>
 801247e:	6823      	ldr	r3, [r4, #0]
 8012480:	f023 0320 	bic.w	r3, r3, #32
 8012484:	6023      	str	r3, [r4, #0]
 8012486:	2310      	movs	r3, #16
 8012488:	e7b0      	b.n	80123ec <_printf_i+0xfc>
 801248a:	6823      	ldr	r3, [r4, #0]
 801248c:	f043 0320 	orr.w	r3, r3, #32
 8012490:	6023      	str	r3, [r4, #0]
 8012492:	2378      	movs	r3, #120	; 0x78
 8012494:	4828      	ldr	r0, [pc, #160]	; (8012538 <_printf_i+0x248>)
 8012496:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801249a:	e7e3      	b.n	8012464 <_printf_i+0x174>
 801249c:	0659      	lsls	r1, r3, #25
 801249e:	bf48      	it	mi
 80124a0:	b2b6      	uxthmi	r6, r6
 80124a2:	e7e6      	b.n	8012472 <_printf_i+0x182>
 80124a4:	4615      	mov	r5, r2
 80124a6:	e7bb      	b.n	8012420 <_printf_i+0x130>
 80124a8:	682b      	ldr	r3, [r5, #0]
 80124aa:	6826      	ldr	r6, [r4, #0]
 80124ac:	6961      	ldr	r1, [r4, #20]
 80124ae:	1d18      	adds	r0, r3, #4
 80124b0:	6028      	str	r0, [r5, #0]
 80124b2:	0635      	lsls	r5, r6, #24
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	d501      	bpl.n	80124bc <_printf_i+0x1cc>
 80124b8:	6019      	str	r1, [r3, #0]
 80124ba:	e002      	b.n	80124c2 <_printf_i+0x1d2>
 80124bc:	0670      	lsls	r0, r6, #25
 80124be:	d5fb      	bpl.n	80124b8 <_printf_i+0x1c8>
 80124c0:	8019      	strh	r1, [r3, #0]
 80124c2:	2300      	movs	r3, #0
 80124c4:	6123      	str	r3, [r4, #16]
 80124c6:	4615      	mov	r5, r2
 80124c8:	e7ba      	b.n	8012440 <_printf_i+0x150>
 80124ca:	682b      	ldr	r3, [r5, #0]
 80124cc:	1d1a      	adds	r2, r3, #4
 80124ce:	602a      	str	r2, [r5, #0]
 80124d0:	681d      	ldr	r5, [r3, #0]
 80124d2:	6862      	ldr	r2, [r4, #4]
 80124d4:	2100      	movs	r1, #0
 80124d6:	4628      	mov	r0, r5
 80124d8:	f7ed fe82 	bl	80001e0 <memchr>
 80124dc:	b108      	cbz	r0, 80124e2 <_printf_i+0x1f2>
 80124de:	1b40      	subs	r0, r0, r5
 80124e0:	6060      	str	r0, [r4, #4]
 80124e2:	6863      	ldr	r3, [r4, #4]
 80124e4:	6123      	str	r3, [r4, #16]
 80124e6:	2300      	movs	r3, #0
 80124e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80124ec:	e7a8      	b.n	8012440 <_printf_i+0x150>
 80124ee:	6923      	ldr	r3, [r4, #16]
 80124f0:	462a      	mov	r2, r5
 80124f2:	4649      	mov	r1, r9
 80124f4:	4640      	mov	r0, r8
 80124f6:	47d0      	blx	sl
 80124f8:	3001      	adds	r0, #1
 80124fa:	d0ab      	beq.n	8012454 <_printf_i+0x164>
 80124fc:	6823      	ldr	r3, [r4, #0]
 80124fe:	079b      	lsls	r3, r3, #30
 8012500:	d413      	bmi.n	801252a <_printf_i+0x23a>
 8012502:	68e0      	ldr	r0, [r4, #12]
 8012504:	9b03      	ldr	r3, [sp, #12]
 8012506:	4298      	cmp	r0, r3
 8012508:	bfb8      	it	lt
 801250a:	4618      	movlt	r0, r3
 801250c:	e7a4      	b.n	8012458 <_printf_i+0x168>
 801250e:	2301      	movs	r3, #1
 8012510:	4632      	mov	r2, r6
 8012512:	4649      	mov	r1, r9
 8012514:	4640      	mov	r0, r8
 8012516:	47d0      	blx	sl
 8012518:	3001      	adds	r0, #1
 801251a:	d09b      	beq.n	8012454 <_printf_i+0x164>
 801251c:	3501      	adds	r5, #1
 801251e:	68e3      	ldr	r3, [r4, #12]
 8012520:	9903      	ldr	r1, [sp, #12]
 8012522:	1a5b      	subs	r3, r3, r1
 8012524:	42ab      	cmp	r3, r5
 8012526:	dcf2      	bgt.n	801250e <_printf_i+0x21e>
 8012528:	e7eb      	b.n	8012502 <_printf_i+0x212>
 801252a:	2500      	movs	r5, #0
 801252c:	f104 0619 	add.w	r6, r4, #25
 8012530:	e7f5      	b.n	801251e <_printf_i+0x22e>
 8012532:	bf00      	nop
 8012534:	08014fce 	.word	0x08014fce
 8012538:	08014fdf 	.word	0x08014fdf

0801253c <iprintf>:
 801253c:	b40f      	push	{r0, r1, r2, r3}
 801253e:	4b0a      	ldr	r3, [pc, #40]	; (8012568 <iprintf+0x2c>)
 8012540:	b513      	push	{r0, r1, r4, lr}
 8012542:	681c      	ldr	r4, [r3, #0]
 8012544:	b124      	cbz	r4, 8012550 <iprintf+0x14>
 8012546:	69a3      	ldr	r3, [r4, #24]
 8012548:	b913      	cbnz	r3, 8012550 <iprintf+0x14>
 801254a:	4620      	mov	r0, r4
 801254c:	f001 f9dc 	bl	8013908 <__sinit>
 8012550:	ab05      	add	r3, sp, #20
 8012552:	9a04      	ldr	r2, [sp, #16]
 8012554:	68a1      	ldr	r1, [r4, #8]
 8012556:	9301      	str	r3, [sp, #4]
 8012558:	4620      	mov	r0, r4
 801255a:	f002 f8e7 	bl	801472c <_vfiprintf_r>
 801255e:	b002      	add	sp, #8
 8012560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012564:	b004      	add	sp, #16
 8012566:	4770      	bx	lr
 8012568:	2000000c 	.word	0x2000000c

0801256c <putchar>:
 801256c:	4b09      	ldr	r3, [pc, #36]	; (8012594 <putchar+0x28>)
 801256e:	b513      	push	{r0, r1, r4, lr}
 8012570:	681c      	ldr	r4, [r3, #0]
 8012572:	4601      	mov	r1, r0
 8012574:	b134      	cbz	r4, 8012584 <putchar+0x18>
 8012576:	69a3      	ldr	r3, [r4, #24]
 8012578:	b923      	cbnz	r3, 8012584 <putchar+0x18>
 801257a:	9001      	str	r0, [sp, #4]
 801257c:	4620      	mov	r0, r4
 801257e:	f001 f9c3 	bl	8013908 <__sinit>
 8012582:	9901      	ldr	r1, [sp, #4]
 8012584:	68a2      	ldr	r2, [r4, #8]
 8012586:	4620      	mov	r0, r4
 8012588:	b002      	add	sp, #8
 801258a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801258e:	f002 b9fd 	b.w	801498c <_putc_r>
 8012592:	bf00      	nop
 8012594:	2000000c 	.word	0x2000000c

08012598 <_puts_r>:
 8012598:	b570      	push	{r4, r5, r6, lr}
 801259a:	460e      	mov	r6, r1
 801259c:	4605      	mov	r5, r0
 801259e:	b118      	cbz	r0, 80125a8 <_puts_r+0x10>
 80125a0:	6983      	ldr	r3, [r0, #24]
 80125a2:	b90b      	cbnz	r3, 80125a8 <_puts_r+0x10>
 80125a4:	f001 f9b0 	bl	8013908 <__sinit>
 80125a8:	69ab      	ldr	r3, [r5, #24]
 80125aa:	68ac      	ldr	r4, [r5, #8]
 80125ac:	b913      	cbnz	r3, 80125b4 <_puts_r+0x1c>
 80125ae:	4628      	mov	r0, r5
 80125b0:	f001 f9aa 	bl	8013908 <__sinit>
 80125b4:	4b2c      	ldr	r3, [pc, #176]	; (8012668 <_puts_r+0xd0>)
 80125b6:	429c      	cmp	r4, r3
 80125b8:	d120      	bne.n	80125fc <_puts_r+0x64>
 80125ba:	686c      	ldr	r4, [r5, #4]
 80125bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80125be:	07db      	lsls	r3, r3, #31
 80125c0:	d405      	bmi.n	80125ce <_puts_r+0x36>
 80125c2:	89a3      	ldrh	r3, [r4, #12]
 80125c4:	0598      	lsls	r0, r3, #22
 80125c6:	d402      	bmi.n	80125ce <_puts_r+0x36>
 80125c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80125ca:	f001 fa40 	bl	8013a4e <__retarget_lock_acquire_recursive>
 80125ce:	89a3      	ldrh	r3, [r4, #12]
 80125d0:	0719      	lsls	r1, r3, #28
 80125d2:	d51d      	bpl.n	8012610 <_puts_r+0x78>
 80125d4:	6923      	ldr	r3, [r4, #16]
 80125d6:	b1db      	cbz	r3, 8012610 <_puts_r+0x78>
 80125d8:	3e01      	subs	r6, #1
 80125da:	68a3      	ldr	r3, [r4, #8]
 80125dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80125e0:	3b01      	subs	r3, #1
 80125e2:	60a3      	str	r3, [r4, #8]
 80125e4:	bb39      	cbnz	r1, 8012636 <_puts_r+0x9e>
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	da38      	bge.n	801265c <_puts_r+0xc4>
 80125ea:	4622      	mov	r2, r4
 80125ec:	210a      	movs	r1, #10
 80125ee:	4628      	mov	r0, r5
 80125f0:	f000 f936 	bl	8012860 <__swbuf_r>
 80125f4:	3001      	adds	r0, #1
 80125f6:	d011      	beq.n	801261c <_puts_r+0x84>
 80125f8:	250a      	movs	r5, #10
 80125fa:	e011      	b.n	8012620 <_puts_r+0x88>
 80125fc:	4b1b      	ldr	r3, [pc, #108]	; (801266c <_puts_r+0xd4>)
 80125fe:	429c      	cmp	r4, r3
 8012600:	d101      	bne.n	8012606 <_puts_r+0x6e>
 8012602:	68ac      	ldr	r4, [r5, #8]
 8012604:	e7da      	b.n	80125bc <_puts_r+0x24>
 8012606:	4b1a      	ldr	r3, [pc, #104]	; (8012670 <_puts_r+0xd8>)
 8012608:	429c      	cmp	r4, r3
 801260a:	bf08      	it	eq
 801260c:	68ec      	ldreq	r4, [r5, #12]
 801260e:	e7d5      	b.n	80125bc <_puts_r+0x24>
 8012610:	4621      	mov	r1, r4
 8012612:	4628      	mov	r0, r5
 8012614:	f000 f976 	bl	8012904 <__swsetup_r>
 8012618:	2800      	cmp	r0, #0
 801261a:	d0dd      	beq.n	80125d8 <_puts_r+0x40>
 801261c:	f04f 35ff 	mov.w	r5, #4294967295
 8012620:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012622:	07da      	lsls	r2, r3, #31
 8012624:	d405      	bmi.n	8012632 <_puts_r+0x9a>
 8012626:	89a3      	ldrh	r3, [r4, #12]
 8012628:	059b      	lsls	r3, r3, #22
 801262a:	d402      	bmi.n	8012632 <_puts_r+0x9a>
 801262c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801262e:	f001 fa0f 	bl	8013a50 <__retarget_lock_release_recursive>
 8012632:	4628      	mov	r0, r5
 8012634:	bd70      	pop	{r4, r5, r6, pc}
 8012636:	2b00      	cmp	r3, #0
 8012638:	da04      	bge.n	8012644 <_puts_r+0xac>
 801263a:	69a2      	ldr	r2, [r4, #24]
 801263c:	429a      	cmp	r2, r3
 801263e:	dc06      	bgt.n	801264e <_puts_r+0xb6>
 8012640:	290a      	cmp	r1, #10
 8012642:	d004      	beq.n	801264e <_puts_r+0xb6>
 8012644:	6823      	ldr	r3, [r4, #0]
 8012646:	1c5a      	adds	r2, r3, #1
 8012648:	6022      	str	r2, [r4, #0]
 801264a:	7019      	strb	r1, [r3, #0]
 801264c:	e7c5      	b.n	80125da <_puts_r+0x42>
 801264e:	4622      	mov	r2, r4
 8012650:	4628      	mov	r0, r5
 8012652:	f000 f905 	bl	8012860 <__swbuf_r>
 8012656:	3001      	adds	r0, #1
 8012658:	d1bf      	bne.n	80125da <_puts_r+0x42>
 801265a:	e7df      	b.n	801261c <_puts_r+0x84>
 801265c:	6823      	ldr	r3, [r4, #0]
 801265e:	250a      	movs	r5, #10
 8012660:	1c5a      	adds	r2, r3, #1
 8012662:	6022      	str	r2, [r4, #0]
 8012664:	701d      	strb	r5, [r3, #0]
 8012666:	e7db      	b.n	8012620 <_puts_r+0x88>
 8012668:	080150a0 	.word	0x080150a0
 801266c:	080150c0 	.word	0x080150c0
 8012670:	08015080 	.word	0x08015080

08012674 <puts>:
 8012674:	4b02      	ldr	r3, [pc, #8]	; (8012680 <puts+0xc>)
 8012676:	4601      	mov	r1, r0
 8012678:	6818      	ldr	r0, [r3, #0]
 801267a:	f7ff bf8d 	b.w	8012598 <_puts_r>
 801267e:	bf00      	nop
 8012680:	2000000c 	.word	0x2000000c

08012684 <setbuf>:
 8012684:	2900      	cmp	r1, #0
 8012686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801268a:	bf0c      	ite	eq
 801268c:	2202      	moveq	r2, #2
 801268e:	2200      	movne	r2, #0
 8012690:	f000 b800 	b.w	8012694 <setvbuf>

08012694 <setvbuf>:
 8012694:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012698:	461d      	mov	r5, r3
 801269a:	4b5d      	ldr	r3, [pc, #372]	; (8012810 <setvbuf+0x17c>)
 801269c:	681f      	ldr	r7, [r3, #0]
 801269e:	4604      	mov	r4, r0
 80126a0:	460e      	mov	r6, r1
 80126a2:	4690      	mov	r8, r2
 80126a4:	b127      	cbz	r7, 80126b0 <setvbuf+0x1c>
 80126a6:	69bb      	ldr	r3, [r7, #24]
 80126a8:	b913      	cbnz	r3, 80126b0 <setvbuf+0x1c>
 80126aa:	4638      	mov	r0, r7
 80126ac:	f001 f92c 	bl	8013908 <__sinit>
 80126b0:	4b58      	ldr	r3, [pc, #352]	; (8012814 <setvbuf+0x180>)
 80126b2:	429c      	cmp	r4, r3
 80126b4:	d167      	bne.n	8012786 <setvbuf+0xf2>
 80126b6:	687c      	ldr	r4, [r7, #4]
 80126b8:	f1b8 0f02 	cmp.w	r8, #2
 80126bc:	d006      	beq.n	80126cc <setvbuf+0x38>
 80126be:	f1b8 0f01 	cmp.w	r8, #1
 80126c2:	f200 809f 	bhi.w	8012804 <setvbuf+0x170>
 80126c6:	2d00      	cmp	r5, #0
 80126c8:	f2c0 809c 	blt.w	8012804 <setvbuf+0x170>
 80126cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80126ce:	07db      	lsls	r3, r3, #31
 80126d0:	d405      	bmi.n	80126de <setvbuf+0x4a>
 80126d2:	89a3      	ldrh	r3, [r4, #12]
 80126d4:	0598      	lsls	r0, r3, #22
 80126d6:	d402      	bmi.n	80126de <setvbuf+0x4a>
 80126d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80126da:	f001 f9b8 	bl	8013a4e <__retarget_lock_acquire_recursive>
 80126de:	4621      	mov	r1, r4
 80126e0:	4638      	mov	r0, r7
 80126e2:	f001 f87d 	bl	80137e0 <_fflush_r>
 80126e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80126e8:	b141      	cbz	r1, 80126fc <setvbuf+0x68>
 80126ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80126ee:	4299      	cmp	r1, r3
 80126f0:	d002      	beq.n	80126f8 <setvbuf+0x64>
 80126f2:	4638      	mov	r0, r7
 80126f4:	f001 fdb4 	bl	8014260 <_free_r>
 80126f8:	2300      	movs	r3, #0
 80126fa:	6363      	str	r3, [r4, #52]	; 0x34
 80126fc:	2300      	movs	r3, #0
 80126fe:	61a3      	str	r3, [r4, #24]
 8012700:	6063      	str	r3, [r4, #4]
 8012702:	89a3      	ldrh	r3, [r4, #12]
 8012704:	0619      	lsls	r1, r3, #24
 8012706:	d503      	bpl.n	8012710 <setvbuf+0x7c>
 8012708:	6921      	ldr	r1, [r4, #16]
 801270a:	4638      	mov	r0, r7
 801270c:	f001 fda8 	bl	8014260 <_free_r>
 8012710:	89a3      	ldrh	r3, [r4, #12]
 8012712:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8012716:	f023 0303 	bic.w	r3, r3, #3
 801271a:	f1b8 0f02 	cmp.w	r8, #2
 801271e:	81a3      	strh	r3, [r4, #12]
 8012720:	d06c      	beq.n	80127fc <setvbuf+0x168>
 8012722:	ab01      	add	r3, sp, #4
 8012724:	466a      	mov	r2, sp
 8012726:	4621      	mov	r1, r4
 8012728:	4638      	mov	r0, r7
 801272a:	f001 f992 	bl	8013a52 <__swhatbuf_r>
 801272e:	89a3      	ldrh	r3, [r4, #12]
 8012730:	4318      	orrs	r0, r3
 8012732:	81a0      	strh	r0, [r4, #12]
 8012734:	2d00      	cmp	r5, #0
 8012736:	d130      	bne.n	801279a <setvbuf+0x106>
 8012738:	9d00      	ldr	r5, [sp, #0]
 801273a:	4628      	mov	r0, r5
 801273c:	f001 f9ee 	bl	8013b1c <malloc>
 8012740:	4606      	mov	r6, r0
 8012742:	2800      	cmp	r0, #0
 8012744:	d155      	bne.n	80127f2 <setvbuf+0x15e>
 8012746:	f8dd 9000 	ldr.w	r9, [sp]
 801274a:	45a9      	cmp	r9, r5
 801274c:	d14a      	bne.n	80127e4 <setvbuf+0x150>
 801274e:	f04f 35ff 	mov.w	r5, #4294967295
 8012752:	2200      	movs	r2, #0
 8012754:	60a2      	str	r2, [r4, #8]
 8012756:	f104 0247 	add.w	r2, r4, #71	; 0x47
 801275a:	6022      	str	r2, [r4, #0]
 801275c:	6122      	str	r2, [r4, #16]
 801275e:	2201      	movs	r2, #1
 8012760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012764:	6162      	str	r2, [r4, #20]
 8012766:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012768:	f043 0302 	orr.w	r3, r3, #2
 801276c:	07d2      	lsls	r2, r2, #31
 801276e:	81a3      	strh	r3, [r4, #12]
 8012770:	d405      	bmi.n	801277e <setvbuf+0xea>
 8012772:	f413 7f00 	tst.w	r3, #512	; 0x200
 8012776:	d102      	bne.n	801277e <setvbuf+0xea>
 8012778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801277a:	f001 f969 	bl	8013a50 <__retarget_lock_release_recursive>
 801277e:	4628      	mov	r0, r5
 8012780:	b003      	add	sp, #12
 8012782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012786:	4b24      	ldr	r3, [pc, #144]	; (8012818 <setvbuf+0x184>)
 8012788:	429c      	cmp	r4, r3
 801278a:	d101      	bne.n	8012790 <setvbuf+0xfc>
 801278c:	68bc      	ldr	r4, [r7, #8]
 801278e:	e793      	b.n	80126b8 <setvbuf+0x24>
 8012790:	4b22      	ldr	r3, [pc, #136]	; (801281c <setvbuf+0x188>)
 8012792:	429c      	cmp	r4, r3
 8012794:	bf08      	it	eq
 8012796:	68fc      	ldreq	r4, [r7, #12]
 8012798:	e78e      	b.n	80126b8 <setvbuf+0x24>
 801279a:	2e00      	cmp	r6, #0
 801279c:	d0cd      	beq.n	801273a <setvbuf+0xa6>
 801279e:	69bb      	ldr	r3, [r7, #24]
 80127a0:	b913      	cbnz	r3, 80127a8 <setvbuf+0x114>
 80127a2:	4638      	mov	r0, r7
 80127a4:	f001 f8b0 	bl	8013908 <__sinit>
 80127a8:	f1b8 0f01 	cmp.w	r8, #1
 80127ac:	bf08      	it	eq
 80127ae:	89a3      	ldrheq	r3, [r4, #12]
 80127b0:	6026      	str	r6, [r4, #0]
 80127b2:	bf04      	itt	eq
 80127b4:	f043 0301 	orreq.w	r3, r3, #1
 80127b8:	81a3      	strheq	r3, [r4, #12]
 80127ba:	89a2      	ldrh	r2, [r4, #12]
 80127bc:	f012 0308 	ands.w	r3, r2, #8
 80127c0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80127c4:	d01c      	beq.n	8012800 <setvbuf+0x16c>
 80127c6:	07d3      	lsls	r3, r2, #31
 80127c8:	bf41      	itttt	mi
 80127ca:	2300      	movmi	r3, #0
 80127cc:	426d      	negmi	r5, r5
 80127ce:	60a3      	strmi	r3, [r4, #8]
 80127d0:	61a5      	strmi	r5, [r4, #24]
 80127d2:	bf58      	it	pl
 80127d4:	60a5      	strpl	r5, [r4, #8]
 80127d6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80127d8:	f015 0501 	ands.w	r5, r5, #1
 80127dc:	d115      	bne.n	801280a <setvbuf+0x176>
 80127de:	f412 7f00 	tst.w	r2, #512	; 0x200
 80127e2:	e7c8      	b.n	8012776 <setvbuf+0xe2>
 80127e4:	4648      	mov	r0, r9
 80127e6:	f001 f999 	bl	8013b1c <malloc>
 80127ea:	4606      	mov	r6, r0
 80127ec:	2800      	cmp	r0, #0
 80127ee:	d0ae      	beq.n	801274e <setvbuf+0xba>
 80127f0:	464d      	mov	r5, r9
 80127f2:	89a3      	ldrh	r3, [r4, #12]
 80127f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127f8:	81a3      	strh	r3, [r4, #12]
 80127fa:	e7d0      	b.n	801279e <setvbuf+0x10a>
 80127fc:	2500      	movs	r5, #0
 80127fe:	e7a8      	b.n	8012752 <setvbuf+0xbe>
 8012800:	60a3      	str	r3, [r4, #8]
 8012802:	e7e8      	b.n	80127d6 <setvbuf+0x142>
 8012804:	f04f 35ff 	mov.w	r5, #4294967295
 8012808:	e7b9      	b.n	801277e <setvbuf+0xea>
 801280a:	2500      	movs	r5, #0
 801280c:	e7b7      	b.n	801277e <setvbuf+0xea>
 801280e:	bf00      	nop
 8012810:	2000000c 	.word	0x2000000c
 8012814:	080150a0 	.word	0x080150a0
 8012818:	080150c0 	.word	0x080150c0
 801281c:	08015080 	.word	0x08015080

08012820 <siprintf>:
 8012820:	b40e      	push	{r1, r2, r3}
 8012822:	b500      	push	{lr}
 8012824:	b09c      	sub	sp, #112	; 0x70
 8012826:	ab1d      	add	r3, sp, #116	; 0x74
 8012828:	9002      	str	r0, [sp, #8]
 801282a:	9006      	str	r0, [sp, #24]
 801282c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012830:	4809      	ldr	r0, [pc, #36]	; (8012858 <siprintf+0x38>)
 8012832:	9107      	str	r1, [sp, #28]
 8012834:	9104      	str	r1, [sp, #16]
 8012836:	4909      	ldr	r1, [pc, #36]	; (801285c <siprintf+0x3c>)
 8012838:	f853 2b04 	ldr.w	r2, [r3], #4
 801283c:	9105      	str	r1, [sp, #20]
 801283e:	6800      	ldr	r0, [r0, #0]
 8012840:	9301      	str	r3, [sp, #4]
 8012842:	a902      	add	r1, sp, #8
 8012844:	f001 fe48 	bl	80144d8 <_svfiprintf_r>
 8012848:	9b02      	ldr	r3, [sp, #8]
 801284a:	2200      	movs	r2, #0
 801284c:	701a      	strb	r2, [r3, #0]
 801284e:	b01c      	add	sp, #112	; 0x70
 8012850:	f85d eb04 	ldr.w	lr, [sp], #4
 8012854:	b003      	add	sp, #12
 8012856:	4770      	bx	lr
 8012858:	2000000c 	.word	0x2000000c
 801285c:	ffff0208 	.word	0xffff0208

08012860 <__swbuf_r>:
 8012860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012862:	460e      	mov	r6, r1
 8012864:	4614      	mov	r4, r2
 8012866:	4605      	mov	r5, r0
 8012868:	b118      	cbz	r0, 8012872 <__swbuf_r+0x12>
 801286a:	6983      	ldr	r3, [r0, #24]
 801286c:	b90b      	cbnz	r3, 8012872 <__swbuf_r+0x12>
 801286e:	f001 f84b 	bl	8013908 <__sinit>
 8012872:	4b21      	ldr	r3, [pc, #132]	; (80128f8 <__swbuf_r+0x98>)
 8012874:	429c      	cmp	r4, r3
 8012876:	d12b      	bne.n	80128d0 <__swbuf_r+0x70>
 8012878:	686c      	ldr	r4, [r5, #4]
 801287a:	69a3      	ldr	r3, [r4, #24]
 801287c:	60a3      	str	r3, [r4, #8]
 801287e:	89a3      	ldrh	r3, [r4, #12]
 8012880:	071a      	lsls	r2, r3, #28
 8012882:	d52f      	bpl.n	80128e4 <__swbuf_r+0x84>
 8012884:	6923      	ldr	r3, [r4, #16]
 8012886:	b36b      	cbz	r3, 80128e4 <__swbuf_r+0x84>
 8012888:	6923      	ldr	r3, [r4, #16]
 801288a:	6820      	ldr	r0, [r4, #0]
 801288c:	1ac0      	subs	r0, r0, r3
 801288e:	6963      	ldr	r3, [r4, #20]
 8012890:	b2f6      	uxtb	r6, r6
 8012892:	4283      	cmp	r3, r0
 8012894:	4637      	mov	r7, r6
 8012896:	dc04      	bgt.n	80128a2 <__swbuf_r+0x42>
 8012898:	4621      	mov	r1, r4
 801289a:	4628      	mov	r0, r5
 801289c:	f000 ffa0 	bl	80137e0 <_fflush_r>
 80128a0:	bb30      	cbnz	r0, 80128f0 <__swbuf_r+0x90>
 80128a2:	68a3      	ldr	r3, [r4, #8]
 80128a4:	3b01      	subs	r3, #1
 80128a6:	60a3      	str	r3, [r4, #8]
 80128a8:	6823      	ldr	r3, [r4, #0]
 80128aa:	1c5a      	adds	r2, r3, #1
 80128ac:	6022      	str	r2, [r4, #0]
 80128ae:	701e      	strb	r6, [r3, #0]
 80128b0:	6963      	ldr	r3, [r4, #20]
 80128b2:	3001      	adds	r0, #1
 80128b4:	4283      	cmp	r3, r0
 80128b6:	d004      	beq.n	80128c2 <__swbuf_r+0x62>
 80128b8:	89a3      	ldrh	r3, [r4, #12]
 80128ba:	07db      	lsls	r3, r3, #31
 80128bc:	d506      	bpl.n	80128cc <__swbuf_r+0x6c>
 80128be:	2e0a      	cmp	r6, #10
 80128c0:	d104      	bne.n	80128cc <__swbuf_r+0x6c>
 80128c2:	4621      	mov	r1, r4
 80128c4:	4628      	mov	r0, r5
 80128c6:	f000 ff8b 	bl	80137e0 <_fflush_r>
 80128ca:	b988      	cbnz	r0, 80128f0 <__swbuf_r+0x90>
 80128cc:	4638      	mov	r0, r7
 80128ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128d0:	4b0a      	ldr	r3, [pc, #40]	; (80128fc <__swbuf_r+0x9c>)
 80128d2:	429c      	cmp	r4, r3
 80128d4:	d101      	bne.n	80128da <__swbuf_r+0x7a>
 80128d6:	68ac      	ldr	r4, [r5, #8]
 80128d8:	e7cf      	b.n	801287a <__swbuf_r+0x1a>
 80128da:	4b09      	ldr	r3, [pc, #36]	; (8012900 <__swbuf_r+0xa0>)
 80128dc:	429c      	cmp	r4, r3
 80128de:	bf08      	it	eq
 80128e0:	68ec      	ldreq	r4, [r5, #12]
 80128e2:	e7ca      	b.n	801287a <__swbuf_r+0x1a>
 80128e4:	4621      	mov	r1, r4
 80128e6:	4628      	mov	r0, r5
 80128e8:	f000 f80c 	bl	8012904 <__swsetup_r>
 80128ec:	2800      	cmp	r0, #0
 80128ee:	d0cb      	beq.n	8012888 <__swbuf_r+0x28>
 80128f0:	f04f 37ff 	mov.w	r7, #4294967295
 80128f4:	e7ea      	b.n	80128cc <__swbuf_r+0x6c>
 80128f6:	bf00      	nop
 80128f8:	080150a0 	.word	0x080150a0
 80128fc:	080150c0 	.word	0x080150c0
 8012900:	08015080 	.word	0x08015080

08012904 <__swsetup_r>:
 8012904:	4b32      	ldr	r3, [pc, #200]	; (80129d0 <__swsetup_r+0xcc>)
 8012906:	b570      	push	{r4, r5, r6, lr}
 8012908:	681d      	ldr	r5, [r3, #0]
 801290a:	4606      	mov	r6, r0
 801290c:	460c      	mov	r4, r1
 801290e:	b125      	cbz	r5, 801291a <__swsetup_r+0x16>
 8012910:	69ab      	ldr	r3, [r5, #24]
 8012912:	b913      	cbnz	r3, 801291a <__swsetup_r+0x16>
 8012914:	4628      	mov	r0, r5
 8012916:	f000 fff7 	bl	8013908 <__sinit>
 801291a:	4b2e      	ldr	r3, [pc, #184]	; (80129d4 <__swsetup_r+0xd0>)
 801291c:	429c      	cmp	r4, r3
 801291e:	d10f      	bne.n	8012940 <__swsetup_r+0x3c>
 8012920:	686c      	ldr	r4, [r5, #4]
 8012922:	89a3      	ldrh	r3, [r4, #12]
 8012924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012928:	0719      	lsls	r1, r3, #28
 801292a:	d42c      	bmi.n	8012986 <__swsetup_r+0x82>
 801292c:	06dd      	lsls	r5, r3, #27
 801292e:	d411      	bmi.n	8012954 <__swsetup_r+0x50>
 8012930:	2309      	movs	r3, #9
 8012932:	6033      	str	r3, [r6, #0]
 8012934:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012938:	81a3      	strh	r3, [r4, #12]
 801293a:	f04f 30ff 	mov.w	r0, #4294967295
 801293e:	e03e      	b.n	80129be <__swsetup_r+0xba>
 8012940:	4b25      	ldr	r3, [pc, #148]	; (80129d8 <__swsetup_r+0xd4>)
 8012942:	429c      	cmp	r4, r3
 8012944:	d101      	bne.n	801294a <__swsetup_r+0x46>
 8012946:	68ac      	ldr	r4, [r5, #8]
 8012948:	e7eb      	b.n	8012922 <__swsetup_r+0x1e>
 801294a:	4b24      	ldr	r3, [pc, #144]	; (80129dc <__swsetup_r+0xd8>)
 801294c:	429c      	cmp	r4, r3
 801294e:	bf08      	it	eq
 8012950:	68ec      	ldreq	r4, [r5, #12]
 8012952:	e7e6      	b.n	8012922 <__swsetup_r+0x1e>
 8012954:	0758      	lsls	r0, r3, #29
 8012956:	d512      	bpl.n	801297e <__swsetup_r+0x7a>
 8012958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801295a:	b141      	cbz	r1, 801296e <__swsetup_r+0x6a>
 801295c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012960:	4299      	cmp	r1, r3
 8012962:	d002      	beq.n	801296a <__swsetup_r+0x66>
 8012964:	4630      	mov	r0, r6
 8012966:	f001 fc7b 	bl	8014260 <_free_r>
 801296a:	2300      	movs	r3, #0
 801296c:	6363      	str	r3, [r4, #52]	; 0x34
 801296e:	89a3      	ldrh	r3, [r4, #12]
 8012970:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012974:	81a3      	strh	r3, [r4, #12]
 8012976:	2300      	movs	r3, #0
 8012978:	6063      	str	r3, [r4, #4]
 801297a:	6923      	ldr	r3, [r4, #16]
 801297c:	6023      	str	r3, [r4, #0]
 801297e:	89a3      	ldrh	r3, [r4, #12]
 8012980:	f043 0308 	orr.w	r3, r3, #8
 8012984:	81a3      	strh	r3, [r4, #12]
 8012986:	6923      	ldr	r3, [r4, #16]
 8012988:	b94b      	cbnz	r3, 801299e <__swsetup_r+0x9a>
 801298a:	89a3      	ldrh	r3, [r4, #12]
 801298c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012994:	d003      	beq.n	801299e <__swsetup_r+0x9a>
 8012996:	4621      	mov	r1, r4
 8012998:	4630      	mov	r0, r6
 801299a:	f001 f87f 	bl	8013a9c <__smakebuf_r>
 801299e:	89a0      	ldrh	r0, [r4, #12]
 80129a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80129a4:	f010 0301 	ands.w	r3, r0, #1
 80129a8:	d00a      	beq.n	80129c0 <__swsetup_r+0xbc>
 80129aa:	2300      	movs	r3, #0
 80129ac:	60a3      	str	r3, [r4, #8]
 80129ae:	6963      	ldr	r3, [r4, #20]
 80129b0:	425b      	negs	r3, r3
 80129b2:	61a3      	str	r3, [r4, #24]
 80129b4:	6923      	ldr	r3, [r4, #16]
 80129b6:	b943      	cbnz	r3, 80129ca <__swsetup_r+0xc6>
 80129b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80129bc:	d1ba      	bne.n	8012934 <__swsetup_r+0x30>
 80129be:	bd70      	pop	{r4, r5, r6, pc}
 80129c0:	0781      	lsls	r1, r0, #30
 80129c2:	bf58      	it	pl
 80129c4:	6963      	ldrpl	r3, [r4, #20]
 80129c6:	60a3      	str	r3, [r4, #8]
 80129c8:	e7f4      	b.n	80129b4 <__swsetup_r+0xb0>
 80129ca:	2000      	movs	r0, #0
 80129cc:	e7f7      	b.n	80129be <__swsetup_r+0xba>
 80129ce:	bf00      	nop
 80129d0:	2000000c 	.word	0x2000000c
 80129d4:	080150a0 	.word	0x080150a0
 80129d8:	080150c0 	.word	0x080150c0
 80129dc:	08015080 	.word	0x08015080

080129e0 <quorem>:
 80129e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129e4:	6903      	ldr	r3, [r0, #16]
 80129e6:	690c      	ldr	r4, [r1, #16]
 80129e8:	42a3      	cmp	r3, r4
 80129ea:	4607      	mov	r7, r0
 80129ec:	f2c0 8081 	blt.w	8012af2 <quorem+0x112>
 80129f0:	3c01      	subs	r4, #1
 80129f2:	f101 0814 	add.w	r8, r1, #20
 80129f6:	f100 0514 	add.w	r5, r0, #20
 80129fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80129fe:	9301      	str	r3, [sp, #4]
 8012a00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012a04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012a08:	3301      	adds	r3, #1
 8012a0a:	429a      	cmp	r2, r3
 8012a0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012a10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012a14:	fbb2 f6f3 	udiv	r6, r2, r3
 8012a18:	d331      	bcc.n	8012a7e <quorem+0x9e>
 8012a1a:	f04f 0e00 	mov.w	lr, #0
 8012a1e:	4640      	mov	r0, r8
 8012a20:	46ac      	mov	ip, r5
 8012a22:	46f2      	mov	sl, lr
 8012a24:	f850 2b04 	ldr.w	r2, [r0], #4
 8012a28:	b293      	uxth	r3, r2
 8012a2a:	fb06 e303 	mla	r3, r6, r3, lr
 8012a2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012a32:	b29b      	uxth	r3, r3
 8012a34:	ebaa 0303 	sub.w	r3, sl, r3
 8012a38:	f8dc a000 	ldr.w	sl, [ip]
 8012a3c:	0c12      	lsrs	r2, r2, #16
 8012a3e:	fa13 f38a 	uxtah	r3, r3, sl
 8012a42:	fb06 e202 	mla	r2, r6, r2, lr
 8012a46:	9300      	str	r3, [sp, #0]
 8012a48:	9b00      	ldr	r3, [sp, #0]
 8012a4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012a4e:	b292      	uxth	r2, r2
 8012a50:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012a54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012a58:	f8bd 3000 	ldrh.w	r3, [sp]
 8012a5c:	4581      	cmp	r9, r0
 8012a5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012a62:	f84c 3b04 	str.w	r3, [ip], #4
 8012a66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012a6a:	d2db      	bcs.n	8012a24 <quorem+0x44>
 8012a6c:	f855 300b 	ldr.w	r3, [r5, fp]
 8012a70:	b92b      	cbnz	r3, 8012a7e <quorem+0x9e>
 8012a72:	9b01      	ldr	r3, [sp, #4]
 8012a74:	3b04      	subs	r3, #4
 8012a76:	429d      	cmp	r5, r3
 8012a78:	461a      	mov	r2, r3
 8012a7a:	d32e      	bcc.n	8012ada <quorem+0xfa>
 8012a7c:	613c      	str	r4, [r7, #16]
 8012a7e:	4638      	mov	r0, r7
 8012a80:	f001 fad6 	bl	8014030 <__mcmp>
 8012a84:	2800      	cmp	r0, #0
 8012a86:	db24      	blt.n	8012ad2 <quorem+0xf2>
 8012a88:	3601      	adds	r6, #1
 8012a8a:	4628      	mov	r0, r5
 8012a8c:	f04f 0c00 	mov.w	ip, #0
 8012a90:	f858 2b04 	ldr.w	r2, [r8], #4
 8012a94:	f8d0 e000 	ldr.w	lr, [r0]
 8012a98:	b293      	uxth	r3, r2
 8012a9a:	ebac 0303 	sub.w	r3, ip, r3
 8012a9e:	0c12      	lsrs	r2, r2, #16
 8012aa0:	fa13 f38e 	uxtah	r3, r3, lr
 8012aa4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012aa8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012aac:	b29b      	uxth	r3, r3
 8012aae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012ab2:	45c1      	cmp	r9, r8
 8012ab4:	f840 3b04 	str.w	r3, [r0], #4
 8012ab8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012abc:	d2e8      	bcs.n	8012a90 <quorem+0xb0>
 8012abe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012ac2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012ac6:	b922      	cbnz	r2, 8012ad2 <quorem+0xf2>
 8012ac8:	3b04      	subs	r3, #4
 8012aca:	429d      	cmp	r5, r3
 8012acc:	461a      	mov	r2, r3
 8012ace:	d30a      	bcc.n	8012ae6 <quorem+0x106>
 8012ad0:	613c      	str	r4, [r7, #16]
 8012ad2:	4630      	mov	r0, r6
 8012ad4:	b003      	add	sp, #12
 8012ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ada:	6812      	ldr	r2, [r2, #0]
 8012adc:	3b04      	subs	r3, #4
 8012ade:	2a00      	cmp	r2, #0
 8012ae0:	d1cc      	bne.n	8012a7c <quorem+0x9c>
 8012ae2:	3c01      	subs	r4, #1
 8012ae4:	e7c7      	b.n	8012a76 <quorem+0x96>
 8012ae6:	6812      	ldr	r2, [r2, #0]
 8012ae8:	3b04      	subs	r3, #4
 8012aea:	2a00      	cmp	r2, #0
 8012aec:	d1f0      	bne.n	8012ad0 <quorem+0xf0>
 8012aee:	3c01      	subs	r4, #1
 8012af0:	e7eb      	b.n	8012aca <quorem+0xea>
 8012af2:	2000      	movs	r0, #0
 8012af4:	e7ee      	b.n	8012ad4 <quorem+0xf4>
	...

08012af8 <_dtoa_r>:
 8012af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012afc:	ed2d 8b04 	vpush	{d8-d9}
 8012b00:	ec57 6b10 	vmov	r6, r7, d0
 8012b04:	b093      	sub	sp, #76	; 0x4c
 8012b06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012b08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012b0c:	9106      	str	r1, [sp, #24]
 8012b0e:	ee10 aa10 	vmov	sl, s0
 8012b12:	4604      	mov	r4, r0
 8012b14:	9209      	str	r2, [sp, #36]	; 0x24
 8012b16:	930c      	str	r3, [sp, #48]	; 0x30
 8012b18:	46bb      	mov	fp, r7
 8012b1a:	b975      	cbnz	r5, 8012b3a <_dtoa_r+0x42>
 8012b1c:	2010      	movs	r0, #16
 8012b1e:	f000 fffd 	bl	8013b1c <malloc>
 8012b22:	4602      	mov	r2, r0
 8012b24:	6260      	str	r0, [r4, #36]	; 0x24
 8012b26:	b920      	cbnz	r0, 8012b32 <_dtoa_r+0x3a>
 8012b28:	4ba7      	ldr	r3, [pc, #668]	; (8012dc8 <_dtoa_r+0x2d0>)
 8012b2a:	21ea      	movs	r1, #234	; 0xea
 8012b2c:	48a7      	ldr	r0, [pc, #668]	; (8012dcc <_dtoa_r+0x2d4>)
 8012b2e:	f001 ffdb 	bl	8014ae8 <__assert_func>
 8012b32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012b36:	6005      	str	r5, [r0, #0]
 8012b38:	60c5      	str	r5, [r0, #12]
 8012b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b3c:	6819      	ldr	r1, [r3, #0]
 8012b3e:	b151      	cbz	r1, 8012b56 <_dtoa_r+0x5e>
 8012b40:	685a      	ldr	r2, [r3, #4]
 8012b42:	604a      	str	r2, [r1, #4]
 8012b44:	2301      	movs	r3, #1
 8012b46:	4093      	lsls	r3, r2
 8012b48:	608b      	str	r3, [r1, #8]
 8012b4a:	4620      	mov	r0, r4
 8012b4c:	f001 f82e 	bl	8013bac <_Bfree>
 8012b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b52:	2200      	movs	r2, #0
 8012b54:	601a      	str	r2, [r3, #0]
 8012b56:	1e3b      	subs	r3, r7, #0
 8012b58:	bfaa      	itet	ge
 8012b5a:	2300      	movge	r3, #0
 8012b5c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8012b60:	f8c8 3000 	strge.w	r3, [r8]
 8012b64:	4b9a      	ldr	r3, [pc, #616]	; (8012dd0 <_dtoa_r+0x2d8>)
 8012b66:	bfbc      	itt	lt
 8012b68:	2201      	movlt	r2, #1
 8012b6a:	f8c8 2000 	strlt.w	r2, [r8]
 8012b6e:	ea33 030b 	bics.w	r3, r3, fp
 8012b72:	d11b      	bne.n	8012bac <_dtoa_r+0xb4>
 8012b74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012b76:	f242 730f 	movw	r3, #9999	; 0x270f
 8012b7a:	6013      	str	r3, [r2, #0]
 8012b7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012b80:	4333      	orrs	r3, r6
 8012b82:	f000 8592 	beq.w	80136aa <_dtoa_r+0xbb2>
 8012b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b88:	b963      	cbnz	r3, 8012ba4 <_dtoa_r+0xac>
 8012b8a:	4b92      	ldr	r3, [pc, #584]	; (8012dd4 <_dtoa_r+0x2dc>)
 8012b8c:	e022      	b.n	8012bd4 <_dtoa_r+0xdc>
 8012b8e:	4b92      	ldr	r3, [pc, #584]	; (8012dd8 <_dtoa_r+0x2e0>)
 8012b90:	9301      	str	r3, [sp, #4]
 8012b92:	3308      	adds	r3, #8
 8012b94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012b96:	6013      	str	r3, [r2, #0]
 8012b98:	9801      	ldr	r0, [sp, #4]
 8012b9a:	b013      	add	sp, #76	; 0x4c
 8012b9c:	ecbd 8b04 	vpop	{d8-d9}
 8012ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ba4:	4b8b      	ldr	r3, [pc, #556]	; (8012dd4 <_dtoa_r+0x2dc>)
 8012ba6:	9301      	str	r3, [sp, #4]
 8012ba8:	3303      	adds	r3, #3
 8012baa:	e7f3      	b.n	8012b94 <_dtoa_r+0x9c>
 8012bac:	2200      	movs	r2, #0
 8012bae:	2300      	movs	r3, #0
 8012bb0:	4650      	mov	r0, sl
 8012bb2:	4659      	mov	r1, fp
 8012bb4:	f7ed ff88 	bl	8000ac8 <__aeabi_dcmpeq>
 8012bb8:	ec4b ab19 	vmov	d9, sl, fp
 8012bbc:	4680      	mov	r8, r0
 8012bbe:	b158      	cbz	r0, 8012bd8 <_dtoa_r+0xe0>
 8012bc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012bc2:	2301      	movs	r3, #1
 8012bc4:	6013      	str	r3, [r2, #0]
 8012bc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	f000 856b 	beq.w	80136a4 <_dtoa_r+0xbac>
 8012bce:	4883      	ldr	r0, [pc, #524]	; (8012ddc <_dtoa_r+0x2e4>)
 8012bd0:	6018      	str	r0, [r3, #0]
 8012bd2:	1e43      	subs	r3, r0, #1
 8012bd4:	9301      	str	r3, [sp, #4]
 8012bd6:	e7df      	b.n	8012b98 <_dtoa_r+0xa0>
 8012bd8:	ec4b ab10 	vmov	d0, sl, fp
 8012bdc:	aa10      	add	r2, sp, #64	; 0x40
 8012bde:	a911      	add	r1, sp, #68	; 0x44
 8012be0:	4620      	mov	r0, r4
 8012be2:	f001 facb 	bl	801417c <__d2b>
 8012be6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8012bea:	ee08 0a10 	vmov	s16, r0
 8012bee:	2d00      	cmp	r5, #0
 8012bf0:	f000 8084 	beq.w	8012cfc <_dtoa_r+0x204>
 8012bf4:	ee19 3a90 	vmov	r3, s19
 8012bf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012bfc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012c00:	4656      	mov	r6, sl
 8012c02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012c06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012c0a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8012c0e:	4b74      	ldr	r3, [pc, #464]	; (8012de0 <_dtoa_r+0x2e8>)
 8012c10:	2200      	movs	r2, #0
 8012c12:	4630      	mov	r0, r6
 8012c14:	4639      	mov	r1, r7
 8012c16:	f7ed fb37 	bl	8000288 <__aeabi_dsub>
 8012c1a:	a365      	add	r3, pc, #404	; (adr r3, 8012db0 <_dtoa_r+0x2b8>)
 8012c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c20:	f7ed fcea 	bl	80005f8 <__aeabi_dmul>
 8012c24:	a364      	add	r3, pc, #400	; (adr r3, 8012db8 <_dtoa_r+0x2c0>)
 8012c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c2a:	f7ed fb2f 	bl	800028c <__adddf3>
 8012c2e:	4606      	mov	r6, r0
 8012c30:	4628      	mov	r0, r5
 8012c32:	460f      	mov	r7, r1
 8012c34:	f7ed fc76 	bl	8000524 <__aeabi_i2d>
 8012c38:	a361      	add	r3, pc, #388	; (adr r3, 8012dc0 <_dtoa_r+0x2c8>)
 8012c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c3e:	f7ed fcdb 	bl	80005f8 <__aeabi_dmul>
 8012c42:	4602      	mov	r2, r0
 8012c44:	460b      	mov	r3, r1
 8012c46:	4630      	mov	r0, r6
 8012c48:	4639      	mov	r1, r7
 8012c4a:	f7ed fb1f 	bl	800028c <__adddf3>
 8012c4e:	4606      	mov	r6, r0
 8012c50:	460f      	mov	r7, r1
 8012c52:	f7ed ff81 	bl	8000b58 <__aeabi_d2iz>
 8012c56:	2200      	movs	r2, #0
 8012c58:	9000      	str	r0, [sp, #0]
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	4630      	mov	r0, r6
 8012c5e:	4639      	mov	r1, r7
 8012c60:	f7ed ff3c 	bl	8000adc <__aeabi_dcmplt>
 8012c64:	b150      	cbz	r0, 8012c7c <_dtoa_r+0x184>
 8012c66:	9800      	ldr	r0, [sp, #0]
 8012c68:	f7ed fc5c 	bl	8000524 <__aeabi_i2d>
 8012c6c:	4632      	mov	r2, r6
 8012c6e:	463b      	mov	r3, r7
 8012c70:	f7ed ff2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8012c74:	b910      	cbnz	r0, 8012c7c <_dtoa_r+0x184>
 8012c76:	9b00      	ldr	r3, [sp, #0]
 8012c78:	3b01      	subs	r3, #1
 8012c7a:	9300      	str	r3, [sp, #0]
 8012c7c:	9b00      	ldr	r3, [sp, #0]
 8012c7e:	2b16      	cmp	r3, #22
 8012c80:	d85a      	bhi.n	8012d38 <_dtoa_r+0x240>
 8012c82:	9a00      	ldr	r2, [sp, #0]
 8012c84:	4b57      	ldr	r3, [pc, #348]	; (8012de4 <_dtoa_r+0x2ec>)
 8012c86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c8e:	ec51 0b19 	vmov	r0, r1, d9
 8012c92:	f7ed ff23 	bl	8000adc <__aeabi_dcmplt>
 8012c96:	2800      	cmp	r0, #0
 8012c98:	d050      	beq.n	8012d3c <_dtoa_r+0x244>
 8012c9a:	9b00      	ldr	r3, [sp, #0]
 8012c9c:	3b01      	subs	r3, #1
 8012c9e:	9300      	str	r3, [sp, #0]
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	930b      	str	r3, [sp, #44]	; 0x2c
 8012ca4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012ca6:	1b5d      	subs	r5, r3, r5
 8012ca8:	1e6b      	subs	r3, r5, #1
 8012caa:	9305      	str	r3, [sp, #20]
 8012cac:	bf45      	ittet	mi
 8012cae:	f1c5 0301 	rsbmi	r3, r5, #1
 8012cb2:	9304      	strmi	r3, [sp, #16]
 8012cb4:	2300      	movpl	r3, #0
 8012cb6:	2300      	movmi	r3, #0
 8012cb8:	bf4c      	ite	mi
 8012cba:	9305      	strmi	r3, [sp, #20]
 8012cbc:	9304      	strpl	r3, [sp, #16]
 8012cbe:	9b00      	ldr	r3, [sp, #0]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	db3d      	blt.n	8012d40 <_dtoa_r+0x248>
 8012cc4:	9b05      	ldr	r3, [sp, #20]
 8012cc6:	9a00      	ldr	r2, [sp, #0]
 8012cc8:	920a      	str	r2, [sp, #40]	; 0x28
 8012cca:	4413      	add	r3, r2
 8012ccc:	9305      	str	r3, [sp, #20]
 8012cce:	2300      	movs	r3, #0
 8012cd0:	9307      	str	r3, [sp, #28]
 8012cd2:	9b06      	ldr	r3, [sp, #24]
 8012cd4:	2b09      	cmp	r3, #9
 8012cd6:	f200 8089 	bhi.w	8012dec <_dtoa_r+0x2f4>
 8012cda:	2b05      	cmp	r3, #5
 8012cdc:	bfc4      	itt	gt
 8012cde:	3b04      	subgt	r3, #4
 8012ce0:	9306      	strgt	r3, [sp, #24]
 8012ce2:	9b06      	ldr	r3, [sp, #24]
 8012ce4:	f1a3 0302 	sub.w	r3, r3, #2
 8012ce8:	bfcc      	ite	gt
 8012cea:	2500      	movgt	r5, #0
 8012cec:	2501      	movle	r5, #1
 8012cee:	2b03      	cmp	r3, #3
 8012cf0:	f200 8087 	bhi.w	8012e02 <_dtoa_r+0x30a>
 8012cf4:	e8df f003 	tbb	[pc, r3]
 8012cf8:	59383a2d 	.word	0x59383a2d
 8012cfc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012d00:	441d      	add	r5, r3
 8012d02:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012d06:	2b20      	cmp	r3, #32
 8012d08:	bfc1      	itttt	gt
 8012d0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012d0e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012d12:	fa0b f303 	lslgt.w	r3, fp, r3
 8012d16:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012d1a:	bfda      	itte	le
 8012d1c:	f1c3 0320 	rsble	r3, r3, #32
 8012d20:	fa06 f003 	lslle.w	r0, r6, r3
 8012d24:	4318      	orrgt	r0, r3
 8012d26:	f7ed fbed 	bl	8000504 <__aeabi_ui2d>
 8012d2a:	2301      	movs	r3, #1
 8012d2c:	4606      	mov	r6, r0
 8012d2e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012d32:	3d01      	subs	r5, #1
 8012d34:	930e      	str	r3, [sp, #56]	; 0x38
 8012d36:	e76a      	b.n	8012c0e <_dtoa_r+0x116>
 8012d38:	2301      	movs	r3, #1
 8012d3a:	e7b2      	b.n	8012ca2 <_dtoa_r+0x1aa>
 8012d3c:	900b      	str	r0, [sp, #44]	; 0x2c
 8012d3e:	e7b1      	b.n	8012ca4 <_dtoa_r+0x1ac>
 8012d40:	9b04      	ldr	r3, [sp, #16]
 8012d42:	9a00      	ldr	r2, [sp, #0]
 8012d44:	1a9b      	subs	r3, r3, r2
 8012d46:	9304      	str	r3, [sp, #16]
 8012d48:	4253      	negs	r3, r2
 8012d4a:	9307      	str	r3, [sp, #28]
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	930a      	str	r3, [sp, #40]	; 0x28
 8012d50:	e7bf      	b.n	8012cd2 <_dtoa_r+0x1da>
 8012d52:	2300      	movs	r3, #0
 8012d54:	9308      	str	r3, [sp, #32]
 8012d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	dc55      	bgt.n	8012e08 <_dtoa_r+0x310>
 8012d5c:	2301      	movs	r3, #1
 8012d5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012d62:	461a      	mov	r2, r3
 8012d64:	9209      	str	r2, [sp, #36]	; 0x24
 8012d66:	e00c      	b.n	8012d82 <_dtoa_r+0x28a>
 8012d68:	2301      	movs	r3, #1
 8012d6a:	e7f3      	b.n	8012d54 <_dtoa_r+0x25c>
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012d70:	9308      	str	r3, [sp, #32]
 8012d72:	9b00      	ldr	r3, [sp, #0]
 8012d74:	4413      	add	r3, r2
 8012d76:	9302      	str	r3, [sp, #8]
 8012d78:	3301      	adds	r3, #1
 8012d7a:	2b01      	cmp	r3, #1
 8012d7c:	9303      	str	r3, [sp, #12]
 8012d7e:	bfb8      	it	lt
 8012d80:	2301      	movlt	r3, #1
 8012d82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012d84:	2200      	movs	r2, #0
 8012d86:	6042      	str	r2, [r0, #4]
 8012d88:	2204      	movs	r2, #4
 8012d8a:	f102 0614 	add.w	r6, r2, #20
 8012d8e:	429e      	cmp	r6, r3
 8012d90:	6841      	ldr	r1, [r0, #4]
 8012d92:	d93d      	bls.n	8012e10 <_dtoa_r+0x318>
 8012d94:	4620      	mov	r0, r4
 8012d96:	f000 fec9 	bl	8013b2c <_Balloc>
 8012d9a:	9001      	str	r0, [sp, #4]
 8012d9c:	2800      	cmp	r0, #0
 8012d9e:	d13b      	bne.n	8012e18 <_dtoa_r+0x320>
 8012da0:	4b11      	ldr	r3, [pc, #68]	; (8012de8 <_dtoa_r+0x2f0>)
 8012da2:	4602      	mov	r2, r0
 8012da4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012da8:	e6c0      	b.n	8012b2c <_dtoa_r+0x34>
 8012daa:	2301      	movs	r3, #1
 8012dac:	e7df      	b.n	8012d6e <_dtoa_r+0x276>
 8012dae:	bf00      	nop
 8012db0:	636f4361 	.word	0x636f4361
 8012db4:	3fd287a7 	.word	0x3fd287a7
 8012db8:	8b60c8b3 	.word	0x8b60c8b3
 8012dbc:	3fc68a28 	.word	0x3fc68a28
 8012dc0:	509f79fb 	.word	0x509f79fb
 8012dc4:	3fd34413 	.word	0x3fd34413
 8012dc8:	08014ffd 	.word	0x08014ffd
 8012dcc:	08015014 	.word	0x08015014
 8012dd0:	7ff00000 	.word	0x7ff00000
 8012dd4:	08014ff9 	.word	0x08014ff9
 8012dd8:	08014ff0 	.word	0x08014ff0
 8012ddc:	08014fcd 	.word	0x08014fcd
 8012de0:	3ff80000 	.word	0x3ff80000
 8012de4:	08015168 	.word	0x08015168
 8012de8:	0801506f 	.word	0x0801506f
 8012dec:	2501      	movs	r5, #1
 8012dee:	2300      	movs	r3, #0
 8012df0:	9306      	str	r3, [sp, #24]
 8012df2:	9508      	str	r5, [sp, #32]
 8012df4:	f04f 33ff 	mov.w	r3, #4294967295
 8012df8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	2312      	movs	r3, #18
 8012e00:	e7b0      	b.n	8012d64 <_dtoa_r+0x26c>
 8012e02:	2301      	movs	r3, #1
 8012e04:	9308      	str	r3, [sp, #32]
 8012e06:	e7f5      	b.n	8012df4 <_dtoa_r+0x2fc>
 8012e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012e0e:	e7b8      	b.n	8012d82 <_dtoa_r+0x28a>
 8012e10:	3101      	adds	r1, #1
 8012e12:	6041      	str	r1, [r0, #4]
 8012e14:	0052      	lsls	r2, r2, #1
 8012e16:	e7b8      	b.n	8012d8a <_dtoa_r+0x292>
 8012e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e1a:	9a01      	ldr	r2, [sp, #4]
 8012e1c:	601a      	str	r2, [r3, #0]
 8012e1e:	9b03      	ldr	r3, [sp, #12]
 8012e20:	2b0e      	cmp	r3, #14
 8012e22:	f200 809d 	bhi.w	8012f60 <_dtoa_r+0x468>
 8012e26:	2d00      	cmp	r5, #0
 8012e28:	f000 809a 	beq.w	8012f60 <_dtoa_r+0x468>
 8012e2c:	9b00      	ldr	r3, [sp, #0]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	dd32      	ble.n	8012e98 <_dtoa_r+0x3a0>
 8012e32:	4ab7      	ldr	r2, [pc, #732]	; (8013110 <_dtoa_r+0x618>)
 8012e34:	f003 030f 	and.w	r3, r3, #15
 8012e38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012e3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012e40:	9b00      	ldr	r3, [sp, #0]
 8012e42:	05d8      	lsls	r0, r3, #23
 8012e44:	ea4f 1723 	mov.w	r7, r3, asr #4
 8012e48:	d516      	bpl.n	8012e78 <_dtoa_r+0x380>
 8012e4a:	4bb2      	ldr	r3, [pc, #712]	; (8013114 <_dtoa_r+0x61c>)
 8012e4c:	ec51 0b19 	vmov	r0, r1, d9
 8012e50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012e54:	f7ed fcfa 	bl	800084c <__aeabi_ddiv>
 8012e58:	f007 070f 	and.w	r7, r7, #15
 8012e5c:	4682      	mov	sl, r0
 8012e5e:	468b      	mov	fp, r1
 8012e60:	2503      	movs	r5, #3
 8012e62:	4eac      	ldr	r6, [pc, #688]	; (8013114 <_dtoa_r+0x61c>)
 8012e64:	b957      	cbnz	r7, 8012e7c <_dtoa_r+0x384>
 8012e66:	4642      	mov	r2, r8
 8012e68:	464b      	mov	r3, r9
 8012e6a:	4650      	mov	r0, sl
 8012e6c:	4659      	mov	r1, fp
 8012e6e:	f7ed fced 	bl	800084c <__aeabi_ddiv>
 8012e72:	4682      	mov	sl, r0
 8012e74:	468b      	mov	fp, r1
 8012e76:	e028      	b.n	8012eca <_dtoa_r+0x3d2>
 8012e78:	2502      	movs	r5, #2
 8012e7a:	e7f2      	b.n	8012e62 <_dtoa_r+0x36a>
 8012e7c:	07f9      	lsls	r1, r7, #31
 8012e7e:	d508      	bpl.n	8012e92 <_dtoa_r+0x39a>
 8012e80:	4640      	mov	r0, r8
 8012e82:	4649      	mov	r1, r9
 8012e84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012e88:	f7ed fbb6 	bl	80005f8 <__aeabi_dmul>
 8012e8c:	3501      	adds	r5, #1
 8012e8e:	4680      	mov	r8, r0
 8012e90:	4689      	mov	r9, r1
 8012e92:	107f      	asrs	r7, r7, #1
 8012e94:	3608      	adds	r6, #8
 8012e96:	e7e5      	b.n	8012e64 <_dtoa_r+0x36c>
 8012e98:	f000 809b 	beq.w	8012fd2 <_dtoa_r+0x4da>
 8012e9c:	9b00      	ldr	r3, [sp, #0]
 8012e9e:	4f9d      	ldr	r7, [pc, #628]	; (8013114 <_dtoa_r+0x61c>)
 8012ea0:	425e      	negs	r6, r3
 8012ea2:	4b9b      	ldr	r3, [pc, #620]	; (8013110 <_dtoa_r+0x618>)
 8012ea4:	f006 020f 	and.w	r2, r6, #15
 8012ea8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eb0:	ec51 0b19 	vmov	r0, r1, d9
 8012eb4:	f7ed fba0 	bl	80005f8 <__aeabi_dmul>
 8012eb8:	1136      	asrs	r6, r6, #4
 8012eba:	4682      	mov	sl, r0
 8012ebc:	468b      	mov	fp, r1
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	2502      	movs	r5, #2
 8012ec2:	2e00      	cmp	r6, #0
 8012ec4:	d17a      	bne.n	8012fbc <_dtoa_r+0x4c4>
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d1d3      	bne.n	8012e72 <_dtoa_r+0x37a>
 8012eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	f000 8082 	beq.w	8012fd6 <_dtoa_r+0x4de>
 8012ed2:	4b91      	ldr	r3, [pc, #580]	; (8013118 <_dtoa_r+0x620>)
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	4650      	mov	r0, sl
 8012ed8:	4659      	mov	r1, fp
 8012eda:	f7ed fdff 	bl	8000adc <__aeabi_dcmplt>
 8012ede:	2800      	cmp	r0, #0
 8012ee0:	d079      	beq.n	8012fd6 <_dtoa_r+0x4de>
 8012ee2:	9b03      	ldr	r3, [sp, #12]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d076      	beq.n	8012fd6 <_dtoa_r+0x4de>
 8012ee8:	9b02      	ldr	r3, [sp, #8]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	dd36      	ble.n	8012f5c <_dtoa_r+0x464>
 8012eee:	9b00      	ldr	r3, [sp, #0]
 8012ef0:	4650      	mov	r0, sl
 8012ef2:	4659      	mov	r1, fp
 8012ef4:	1e5f      	subs	r7, r3, #1
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	4b88      	ldr	r3, [pc, #544]	; (801311c <_dtoa_r+0x624>)
 8012efa:	f7ed fb7d 	bl	80005f8 <__aeabi_dmul>
 8012efe:	9e02      	ldr	r6, [sp, #8]
 8012f00:	4682      	mov	sl, r0
 8012f02:	468b      	mov	fp, r1
 8012f04:	3501      	adds	r5, #1
 8012f06:	4628      	mov	r0, r5
 8012f08:	f7ed fb0c 	bl	8000524 <__aeabi_i2d>
 8012f0c:	4652      	mov	r2, sl
 8012f0e:	465b      	mov	r3, fp
 8012f10:	f7ed fb72 	bl	80005f8 <__aeabi_dmul>
 8012f14:	4b82      	ldr	r3, [pc, #520]	; (8013120 <_dtoa_r+0x628>)
 8012f16:	2200      	movs	r2, #0
 8012f18:	f7ed f9b8 	bl	800028c <__adddf3>
 8012f1c:	46d0      	mov	r8, sl
 8012f1e:	46d9      	mov	r9, fp
 8012f20:	4682      	mov	sl, r0
 8012f22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8012f26:	2e00      	cmp	r6, #0
 8012f28:	d158      	bne.n	8012fdc <_dtoa_r+0x4e4>
 8012f2a:	4b7e      	ldr	r3, [pc, #504]	; (8013124 <_dtoa_r+0x62c>)
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	4640      	mov	r0, r8
 8012f30:	4649      	mov	r1, r9
 8012f32:	f7ed f9a9 	bl	8000288 <__aeabi_dsub>
 8012f36:	4652      	mov	r2, sl
 8012f38:	465b      	mov	r3, fp
 8012f3a:	4680      	mov	r8, r0
 8012f3c:	4689      	mov	r9, r1
 8012f3e:	f7ed fdeb 	bl	8000b18 <__aeabi_dcmpgt>
 8012f42:	2800      	cmp	r0, #0
 8012f44:	f040 8295 	bne.w	8013472 <_dtoa_r+0x97a>
 8012f48:	4652      	mov	r2, sl
 8012f4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012f4e:	4640      	mov	r0, r8
 8012f50:	4649      	mov	r1, r9
 8012f52:	f7ed fdc3 	bl	8000adc <__aeabi_dcmplt>
 8012f56:	2800      	cmp	r0, #0
 8012f58:	f040 8289 	bne.w	801346e <_dtoa_r+0x976>
 8012f5c:	ec5b ab19 	vmov	sl, fp, d9
 8012f60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	f2c0 8148 	blt.w	80131f8 <_dtoa_r+0x700>
 8012f68:	9a00      	ldr	r2, [sp, #0]
 8012f6a:	2a0e      	cmp	r2, #14
 8012f6c:	f300 8144 	bgt.w	80131f8 <_dtoa_r+0x700>
 8012f70:	4b67      	ldr	r3, [pc, #412]	; (8013110 <_dtoa_r+0x618>)
 8012f72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012f76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	f280 80d5 	bge.w	801312c <_dtoa_r+0x634>
 8012f82:	9b03      	ldr	r3, [sp, #12]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	f300 80d1 	bgt.w	801312c <_dtoa_r+0x634>
 8012f8a:	f040 826f 	bne.w	801346c <_dtoa_r+0x974>
 8012f8e:	4b65      	ldr	r3, [pc, #404]	; (8013124 <_dtoa_r+0x62c>)
 8012f90:	2200      	movs	r2, #0
 8012f92:	4640      	mov	r0, r8
 8012f94:	4649      	mov	r1, r9
 8012f96:	f7ed fb2f 	bl	80005f8 <__aeabi_dmul>
 8012f9a:	4652      	mov	r2, sl
 8012f9c:	465b      	mov	r3, fp
 8012f9e:	f7ed fdb1 	bl	8000b04 <__aeabi_dcmpge>
 8012fa2:	9e03      	ldr	r6, [sp, #12]
 8012fa4:	4637      	mov	r7, r6
 8012fa6:	2800      	cmp	r0, #0
 8012fa8:	f040 8245 	bne.w	8013436 <_dtoa_r+0x93e>
 8012fac:	9d01      	ldr	r5, [sp, #4]
 8012fae:	2331      	movs	r3, #49	; 0x31
 8012fb0:	f805 3b01 	strb.w	r3, [r5], #1
 8012fb4:	9b00      	ldr	r3, [sp, #0]
 8012fb6:	3301      	adds	r3, #1
 8012fb8:	9300      	str	r3, [sp, #0]
 8012fba:	e240      	b.n	801343e <_dtoa_r+0x946>
 8012fbc:	07f2      	lsls	r2, r6, #31
 8012fbe:	d505      	bpl.n	8012fcc <_dtoa_r+0x4d4>
 8012fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012fc4:	f7ed fb18 	bl	80005f8 <__aeabi_dmul>
 8012fc8:	3501      	adds	r5, #1
 8012fca:	2301      	movs	r3, #1
 8012fcc:	1076      	asrs	r6, r6, #1
 8012fce:	3708      	adds	r7, #8
 8012fd0:	e777      	b.n	8012ec2 <_dtoa_r+0x3ca>
 8012fd2:	2502      	movs	r5, #2
 8012fd4:	e779      	b.n	8012eca <_dtoa_r+0x3d2>
 8012fd6:	9f00      	ldr	r7, [sp, #0]
 8012fd8:	9e03      	ldr	r6, [sp, #12]
 8012fda:	e794      	b.n	8012f06 <_dtoa_r+0x40e>
 8012fdc:	9901      	ldr	r1, [sp, #4]
 8012fde:	4b4c      	ldr	r3, [pc, #304]	; (8013110 <_dtoa_r+0x618>)
 8012fe0:	4431      	add	r1, r6
 8012fe2:	910d      	str	r1, [sp, #52]	; 0x34
 8012fe4:	9908      	ldr	r1, [sp, #32]
 8012fe6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012fea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012fee:	2900      	cmp	r1, #0
 8012ff0:	d043      	beq.n	801307a <_dtoa_r+0x582>
 8012ff2:	494d      	ldr	r1, [pc, #308]	; (8013128 <_dtoa_r+0x630>)
 8012ff4:	2000      	movs	r0, #0
 8012ff6:	f7ed fc29 	bl	800084c <__aeabi_ddiv>
 8012ffa:	4652      	mov	r2, sl
 8012ffc:	465b      	mov	r3, fp
 8012ffe:	f7ed f943 	bl	8000288 <__aeabi_dsub>
 8013002:	9d01      	ldr	r5, [sp, #4]
 8013004:	4682      	mov	sl, r0
 8013006:	468b      	mov	fp, r1
 8013008:	4649      	mov	r1, r9
 801300a:	4640      	mov	r0, r8
 801300c:	f7ed fda4 	bl	8000b58 <__aeabi_d2iz>
 8013010:	4606      	mov	r6, r0
 8013012:	f7ed fa87 	bl	8000524 <__aeabi_i2d>
 8013016:	4602      	mov	r2, r0
 8013018:	460b      	mov	r3, r1
 801301a:	4640      	mov	r0, r8
 801301c:	4649      	mov	r1, r9
 801301e:	f7ed f933 	bl	8000288 <__aeabi_dsub>
 8013022:	3630      	adds	r6, #48	; 0x30
 8013024:	f805 6b01 	strb.w	r6, [r5], #1
 8013028:	4652      	mov	r2, sl
 801302a:	465b      	mov	r3, fp
 801302c:	4680      	mov	r8, r0
 801302e:	4689      	mov	r9, r1
 8013030:	f7ed fd54 	bl	8000adc <__aeabi_dcmplt>
 8013034:	2800      	cmp	r0, #0
 8013036:	d163      	bne.n	8013100 <_dtoa_r+0x608>
 8013038:	4642      	mov	r2, r8
 801303a:	464b      	mov	r3, r9
 801303c:	4936      	ldr	r1, [pc, #216]	; (8013118 <_dtoa_r+0x620>)
 801303e:	2000      	movs	r0, #0
 8013040:	f7ed f922 	bl	8000288 <__aeabi_dsub>
 8013044:	4652      	mov	r2, sl
 8013046:	465b      	mov	r3, fp
 8013048:	f7ed fd48 	bl	8000adc <__aeabi_dcmplt>
 801304c:	2800      	cmp	r0, #0
 801304e:	f040 80b5 	bne.w	80131bc <_dtoa_r+0x6c4>
 8013052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013054:	429d      	cmp	r5, r3
 8013056:	d081      	beq.n	8012f5c <_dtoa_r+0x464>
 8013058:	4b30      	ldr	r3, [pc, #192]	; (801311c <_dtoa_r+0x624>)
 801305a:	2200      	movs	r2, #0
 801305c:	4650      	mov	r0, sl
 801305e:	4659      	mov	r1, fp
 8013060:	f7ed faca 	bl	80005f8 <__aeabi_dmul>
 8013064:	4b2d      	ldr	r3, [pc, #180]	; (801311c <_dtoa_r+0x624>)
 8013066:	4682      	mov	sl, r0
 8013068:	468b      	mov	fp, r1
 801306a:	4640      	mov	r0, r8
 801306c:	4649      	mov	r1, r9
 801306e:	2200      	movs	r2, #0
 8013070:	f7ed fac2 	bl	80005f8 <__aeabi_dmul>
 8013074:	4680      	mov	r8, r0
 8013076:	4689      	mov	r9, r1
 8013078:	e7c6      	b.n	8013008 <_dtoa_r+0x510>
 801307a:	4650      	mov	r0, sl
 801307c:	4659      	mov	r1, fp
 801307e:	f7ed fabb 	bl	80005f8 <__aeabi_dmul>
 8013082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013084:	9d01      	ldr	r5, [sp, #4]
 8013086:	930f      	str	r3, [sp, #60]	; 0x3c
 8013088:	4682      	mov	sl, r0
 801308a:	468b      	mov	fp, r1
 801308c:	4649      	mov	r1, r9
 801308e:	4640      	mov	r0, r8
 8013090:	f7ed fd62 	bl	8000b58 <__aeabi_d2iz>
 8013094:	4606      	mov	r6, r0
 8013096:	f7ed fa45 	bl	8000524 <__aeabi_i2d>
 801309a:	3630      	adds	r6, #48	; 0x30
 801309c:	4602      	mov	r2, r0
 801309e:	460b      	mov	r3, r1
 80130a0:	4640      	mov	r0, r8
 80130a2:	4649      	mov	r1, r9
 80130a4:	f7ed f8f0 	bl	8000288 <__aeabi_dsub>
 80130a8:	f805 6b01 	strb.w	r6, [r5], #1
 80130ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80130ae:	429d      	cmp	r5, r3
 80130b0:	4680      	mov	r8, r0
 80130b2:	4689      	mov	r9, r1
 80130b4:	f04f 0200 	mov.w	r2, #0
 80130b8:	d124      	bne.n	8013104 <_dtoa_r+0x60c>
 80130ba:	4b1b      	ldr	r3, [pc, #108]	; (8013128 <_dtoa_r+0x630>)
 80130bc:	4650      	mov	r0, sl
 80130be:	4659      	mov	r1, fp
 80130c0:	f7ed f8e4 	bl	800028c <__adddf3>
 80130c4:	4602      	mov	r2, r0
 80130c6:	460b      	mov	r3, r1
 80130c8:	4640      	mov	r0, r8
 80130ca:	4649      	mov	r1, r9
 80130cc:	f7ed fd24 	bl	8000b18 <__aeabi_dcmpgt>
 80130d0:	2800      	cmp	r0, #0
 80130d2:	d173      	bne.n	80131bc <_dtoa_r+0x6c4>
 80130d4:	4652      	mov	r2, sl
 80130d6:	465b      	mov	r3, fp
 80130d8:	4913      	ldr	r1, [pc, #76]	; (8013128 <_dtoa_r+0x630>)
 80130da:	2000      	movs	r0, #0
 80130dc:	f7ed f8d4 	bl	8000288 <__aeabi_dsub>
 80130e0:	4602      	mov	r2, r0
 80130e2:	460b      	mov	r3, r1
 80130e4:	4640      	mov	r0, r8
 80130e6:	4649      	mov	r1, r9
 80130e8:	f7ed fcf8 	bl	8000adc <__aeabi_dcmplt>
 80130ec:	2800      	cmp	r0, #0
 80130ee:	f43f af35 	beq.w	8012f5c <_dtoa_r+0x464>
 80130f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80130f4:	1e6b      	subs	r3, r5, #1
 80130f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80130f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80130fc:	2b30      	cmp	r3, #48	; 0x30
 80130fe:	d0f8      	beq.n	80130f2 <_dtoa_r+0x5fa>
 8013100:	9700      	str	r7, [sp, #0]
 8013102:	e049      	b.n	8013198 <_dtoa_r+0x6a0>
 8013104:	4b05      	ldr	r3, [pc, #20]	; (801311c <_dtoa_r+0x624>)
 8013106:	f7ed fa77 	bl	80005f8 <__aeabi_dmul>
 801310a:	4680      	mov	r8, r0
 801310c:	4689      	mov	r9, r1
 801310e:	e7bd      	b.n	801308c <_dtoa_r+0x594>
 8013110:	08015168 	.word	0x08015168
 8013114:	08015140 	.word	0x08015140
 8013118:	3ff00000 	.word	0x3ff00000
 801311c:	40240000 	.word	0x40240000
 8013120:	401c0000 	.word	0x401c0000
 8013124:	40140000 	.word	0x40140000
 8013128:	3fe00000 	.word	0x3fe00000
 801312c:	9d01      	ldr	r5, [sp, #4]
 801312e:	4656      	mov	r6, sl
 8013130:	465f      	mov	r7, fp
 8013132:	4642      	mov	r2, r8
 8013134:	464b      	mov	r3, r9
 8013136:	4630      	mov	r0, r6
 8013138:	4639      	mov	r1, r7
 801313a:	f7ed fb87 	bl	800084c <__aeabi_ddiv>
 801313e:	f7ed fd0b 	bl	8000b58 <__aeabi_d2iz>
 8013142:	4682      	mov	sl, r0
 8013144:	f7ed f9ee 	bl	8000524 <__aeabi_i2d>
 8013148:	4642      	mov	r2, r8
 801314a:	464b      	mov	r3, r9
 801314c:	f7ed fa54 	bl	80005f8 <__aeabi_dmul>
 8013150:	4602      	mov	r2, r0
 8013152:	460b      	mov	r3, r1
 8013154:	4630      	mov	r0, r6
 8013156:	4639      	mov	r1, r7
 8013158:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801315c:	f7ed f894 	bl	8000288 <__aeabi_dsub>
 8013160:	f805 6b01 	strb.w	r6, [r5], #1
 8013164:	9e01      	ldr	r6, [sp, #4]
 8013166:	9f03      	ldr	r7, [sp, #12]
 8013168:	1bae      	subs	r6, r5, r6
 801316a:	42b7      	cmp	r7, r6
 801316c:	4602      	mov	r2, r0
 801316e:	460b      	mov	r3, r1
 8013170:	d135      	bne.n	80131de <_dtoa_r+0x6e6>
 8013172:	f7ed f88b 	bl	800028c <__adddf3>
 8013176:	4642      	mov	r2, r8
 8013178:	464b      	mov	r3, r9
 801317a:	4606      	mov	r6, r0
 801317c:	460f      	mov	r7, r1
 801317e:	f7ed fccb 	bl	8000b18 <__aeabi_dcmpgt>
 8013182:	b9d0      	cbnz	r0, 80131ba <_dtoa_r+0x6c2>
 8013184:	4642      	mov	r2, r8
 8013186:	464b      	mov	r3, r9
 8013188:	4630      	mov	r0, r6
 801318a:	4639      	mov	r1, r7
 801318c:	f7ed fc9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8013190:	b110      	cbz	r0, 8013198 <_dtoa_r+0x6a0>
 8013192:	f01a 0f01 	tst.w	sl, #1
 8013196:	d110      	bne.n	80131ba <_dtoa_r+0x6c2>
 8013198:	4620      	mov	r0, r4
 801319a:	ee18 1a10 	vmov	r1, s16
 801319e:	f000 fd05 	bl	8013bac <_Bfree>
 80131a2:	2300      	movs	r3, #0
 80131a4:	9800      	ldr	r0, [sp, #0]
 80131a6:	702b      	strb	r3, [r5, #0]
 80131a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80131aa:	3001      	adds	r0, #1
 80131ac:	6018      	str	r0, [r3, #0]
 80131ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	f43f acf1 	beq.w	8012b98 <_dtoa_r+0xa0>
 80131b6:	601d      	str	r5, [r3, #0]
 80131b8:	e4ee      	b.n	8012b98 <_dtoa_r+0xa0>
 80131ba:	9f00      	ldr	r7, [sp, #0]
 80131bc:	462b      	mov	r3, r5
 80131be:	461d      	mov	r5, r3
 80131c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80131c4:	2a39      	cmp	r2, #57	; 0x39
 80131c6:	d106      	bne.n	80131d6 <_dtoa_r+0x6de>
 80131c8:	9a01      	ldr	r2, [sp, #4]
 80131ca:	429a      	cmp	r2, r3
 80131cc:	d1f7      	bne.n	80131be <_dtoa_r+0x6c6>
 80131ce:	9901      	ldr	r1, [sp, #4]
 80131d0:	2230      	movs	r2, #48	; 0x30
 80131d2:	3701      	adds	r7, #1
 80131d4:	700a      	strb	r2, [r1, #0]
 80131d6:	781a      	ldrb	r2, [r3, #0]
 80131d8:	3201      	adds	r2, #1
 80131da:	701a      	strb	r2, [r3, #0]
 80131dc:	e790      	b.n	8013100 <_dtoa_r+0x608>
 80131de:	4ba6      	ldr	r3, [pc, #664]	; (8013478 <_dtoa_r+0x980>)
 80131e0:	2200      	movs	r2, #0
 80131e2:	f7ed fa09 	bl	80005f8 <__aeabi_dmul>
 80131e6:	2200      	movs	r2, #0
 80131e8:	2300      	movs	r3, #0
 80131ea:	4606      	mov	r6, r0
 80131ec:	460f      	mov	r7, r1
 80131ee:	f7ed fc6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80131f2:	2800      	cmp	r0, #0
 80131f4:	d09d      	beq.n	8013132 <_dtoa_r+0x63a>
 80131f6:	e7cf      	b.n	8013198 <_dtoa_r+0x6a0>
 80131f8:	9a08      	ldr	r2, [sp, #32]
 80131fa:	2a00      	cmp	r2, #0
 80131fc:	f000 80d7 	beq.w	80133ae <_dtoa_r+0x8b6>
 8013200:	9a06      	ldr	r2, [sp, #24]
 8013202:	2a01      	cmp	r2, #1
 8013204:	f300 80ba 	bgt.w	801337c <_dtoa_r+0x884>
 8013208:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801320a:	2a00      	cmp	r2, #0
 801320c:	f000 80b2 	beq.w	8013374 <_dtoa_r+0x87c>
 8013210:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013214:	9e07      	ldr	r6, [sp, #28]
 8013216:	9d04      	ldr	r5, [sp, #16]
 8013218:	9a04      	ldr	r2, [sp, #16]
 801321a:	441a      	add	r2, r3
 801321c:	9204      	str	r2, [sp, #16]
 801321e:	9a05      	ldr	r2, [sp, #20]
 8013220:	2101      	movs	r1, #1
 8013222:	441a      	add	r2, r3
 8013224:	4620      	mov	r0, r4
 8013226:	9205      	str	r2, [sp, #20]
 8013228:	f000 fd78 	bl	8013d1c <__i2b>
 801322c:	4607      	mov	r7, r0
 801322e:	2d00      	cmp	r5, #0
 8013230:	dd0c      	ble.n	801324c <_dtoa_r+0x754>
 8013232:	9b05      	ldr	r3, [sp, #20]
 8013234:	2b00      	cmp	r3, #0
 8013236:	dd09      	ble.n	801324c <_dtoa_r+0x754>
 8013238:	42ab      	cmp	r3, r5
 801323a:	9a04      	ldr	r2, [sp, #16]
 801323c:	bfa8      	it	ge
 801323e:	462b      	movge	r3, r5
 8013240:	1ad2      	subs	r2, r2, r3
 8013242:	9204      	str	r2, [sp, #16]
 8013244:	9a05      	ldr	r2, [sp, #20]
 8013246:	1aed      	subs	r5, r5, r3
 8013248:	1ad3      	subs	r3, r2, r3
 801324a:	9305      	str	r3, [sp, #20]
 801324c:	9b07      	ldr	r3, [sp, #28]
 801324e:	b31b      	cbz	r3, 8013298 <_dtoa_r+0x7a0>
 8013250:	9b08      	ldr	r3, [sp, #32]
 8013252:	2b00      	cmp	r3, #0
 8013254:	f000 80af 	beq.w	80133b6 <_dtoa_r+0x8be>
 8013258:	2e00      	cmp	r6, #0
 801325a:	dd13      	ble.n	8013284 <_dtoa_r+0x78c>
 801325c:	4639      	mov	r1, r7
 801325e:	4632      	mov	r2, r6
 8013260:	4620      	mov	r0, r4
 8013262:	f000 fe1b 	bl	8013e9c <__pow5mult>
 8013266:	ee18 2a10 	vmov	r2, s16
 801326a:	4601      	mov	r1, r0
 801326c:	4607      	mov	r7, r0
 801326e:	4620      	mov	r0, r4
 8013270:	f000 fd6a 	bl	8013d48 <__multiply>
 8013274:	ee18 1a10 	vmov	r1, s16
 8013278:	4680      	mov	r8, r0
 801327a:	4620      	mov	r0, r4
 801327c:	f000 fc96 	bl	8013bac <_Bfree>
 8013280:	ee08 8a10 	vmov	s16, r8
 8013284:	9b07      	ldr	r3, [sp, #28]
 8013286:	1b9a      	subs	r2, r3, r6
 8013288:	d006      	beq.n	8013298 <_dtoa_r+0x7a0>
 801328a:	ee18 1a10 	vmov	r1, s16
 801328e:	4620      	mov	r0, r4
 8013290:	f000 fe04 	bl	8013e9c <__pow5mult>
 8013294:	ee08 0a10 	vmov	s16, r0
 8013298:	2101      	movs	r1, #1
 801329a:	4620      	mov	r0, r4
 801329c:	f000 fd3e 	bl	8013d1c <__i2b>
 80132a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	4606      	mov	r6, r0
 80132a6:	f340 8088 	ble.w	80133ba <_dtoa_r+0x8c2>
 80132aa:	461a      	mov	r2, r3
 80132ac:	4601      	mov	r1, r0
 80132ae:	4620      	mov	r0, r4
 80132b0:	f000 fdf4 	bl	8013e9c <__pow5mult>
 80132b4:	9b06      	ldr	r3, [sp, #24]
 80132b6:	2b01      	cmp	r3, #1
 80132b8:	4606      	mov	r6, r0
 80132ba:	f340 8081 	ble.w	80133c0 <_dtoa_r+0x8c8>
 80132be:	f04f 0800 	mov.w	r8, #0
 80132c2:	6933      	ldr	r3, [r6, #16]
 80132c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80132c8:	6918      	ldr	r0, [r3, #16]
 80132ca:	f000 fcd7 	bl	8013c7c <__hi0bits>
 80132ce:	f1c0 0020 	rsb	r0, r0, #32
 80132d2:	9b05      	ldr	r3, [sp, #20]
 80132d4:	4418      	add	r0, r3
 80132d6:	f010 001f 	ands.w	r0, r0, #31
 80132da:	f000 8092 	beq.w	8013402 <_dtoa_r+0x90a>
 80132de:	f1c0 0320 	rsb	r3, r0, #32
 80132e2:	2b04      	cmp	r3, #4
 80132e4:	f340 808a 	ble.w	80133fc <_dtoa_r+0x904>
 80132e8:	f1c0 001c 	rsb	r0, r0, #28
 80132ec:	9b04      	ldr	r3, [sp, #16]
 80132ee:	4403      	add	r3, r0
 80132f0:	9304      	str	r3, [sp, #16]
 80132f2:	9b05      	ldr	r3, [sp, #20]
 80132f4:	4403      	add	r3, r0
 80132f6:	4405      	add	r5, r0
 80132f8:	9305      	str	r3, [sp, #20]
 80132fa:	9b04      	ldr	r3, [sp, #16]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	dd07      	ble.n	8013310 <_dtoa_r+0x818>
 8013300:	ee18 1a10 	vmov	r1, s16
 8013304:	461a      	mov	r2, r3
 8013306:	4620      	mov	r0, r4
 8013308:	f000 fe22 	bl	8013f50 <__lshift>
 801330c:	ee08 0a10 	vmov	s16, r0
 8013310:	9b05      	ldr	r3, [sp, #20]
 8013312:	2b00      	cmp	r3, #0
 8013314:	dd05      	ble.n	8013322 <_dtoa_r+0x82a>
 8013316:	4631      	mov	r1, r6
 8013318:	461a      	mov	r2, r3
 801331a:	4620      	mov	r0, r4
 801331c:	f000 fe18 	bl	8013f50 <__lshift>
 8013320:	4606      	mov	r6, r0
 8013322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013324:	2b00      	cmp	r3, #0
 8013326:	d06e      	beq.n	8013406 <_dtoa_r+0x90e>
 8013328:	ee18 0a10 	vmov	r0, s16
 801332c:	4631      	mov	r1, r6
 801332e:	f000 fe7f 	bl	8014030 <__mcmp>
 8013332:	2800      	cmp	r0, #0
 8013334:	da67      	bge.n	8013406 <_dtoa_r+0x90e>
 8013336:	9b00      	ldr	r3, [sp, #0]
 8013338:	3b01      	subs	r3, #1
 801333a:	ee18 1a10 	vmov	r1, s16
 801333e:	9300      	str	r3, [sp, #0]
 8013340:	220a      	movs	r2, #10
 8013342:	2300      	movs	r3, #0
 8013344:	4620      	mov	r0, r4
 8013346:	f000 fc53 	bl	8013bf0 <__multadd>
 801334a:	9b08      	ldr	r3, [sp, #32]
 801334c:	ee08 0a10 	vmov	s16, r0
 8013350:	2b00      	cmp	r3, #0
 8013352:	f000 81b1 	beq.w	80136b8 <_dtoa_r+0xbc0>
 8013356:	2300      	movs	r3, #0
 8013358:	4639      	mov	r1, r7
 801335a:	220a      	movs	r2, #10
 801335c:	4620      	mov	r0, r4
 801335e:	f000 fc47 	bl	8013bf0 <__multadd>
 8013362:	9b02      	ldr	r3, [sp, #8]
 8013364:	2b00      	cmp	r3, #0
 8013366:	4607      	mov	r7, r0
 8013368:	f300 808e 	bgt.w	8013488 <_dtoa_r+0x990>
 801336c:	9b06      	ldr	r3, [sp, #24]
 801336e:	2b02      	cmp	r3, #2
 8013370:	dc51      	bgt.n	8013416 <_dtoa_r+0x91e>
 8013372:	e089      	b.n	8013488 <_dtoa_r+0x990>
 8013374:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013376:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801337a:	e74b      	b.n	8013214 <_dtoa_r+0x71c>
 801337c:	9b03      	ldr	r3, [sp, #12]
 801337e:	1e5e      	subs	r6, r3, #1
 8013380:	9b07      	ldr	r3, [sp, #28]
 8013382:	42b3      	cmp	r3, r6
 8013384:	bfbf      	itttt	lt
 8013386:	9b07      	ldrlt	r3, [sp, #28]
 8013388:	9607      	strlt	r6, [sp, #28]
 801338a:	1af2      	sublt	r2, r6, r3
 801338c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801338e:	bfb6      	itet	lt
 8013390:	189b      	addlt	r3, r3, r2
 8013392:	1b9e      	subge	r6, r3, r6
 8013394:	930a      	strlt	r3, [sp, #40]	; 0x28
 8013396:	9b03      	ldr	r3, [sp, #12]
 8013398:	bfb8      	it	lt
 801339a:	2600      	movlt	r6, #0
 801339c:	2b00      	cmp	r3, #0
 801339e:	bfb7      	itett	lt
 80133a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80133a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80133a8:	1a9d      	sublt	r5, r3, r2
 80133aa:	2300      	movlt	r3, #0
 80133ac:	e734      	b.n	8013218 <_dtoa_r+0x720>
 80133ae:	9e07      	ldr	r6, [sp, #28]
 80133b0:	9d04      	ldr	r5, [sp, #16]
 80133b2:	9f08      	ldr	r7, [sp, #32]
 80133b4:	e73b      	b.n	801322e <_dtoa_r+0x736>
 80133b6:	9a07      	ldr	r2, [sp, #28]
 80133b8:	e767      	b.n	801328a <_dtoa_r+0x792>
 80133ba:	9b06      	ldr	r3, [sp, #24]
 80133bc:	2b01      	cmp	r3, #1
 80133be:	dc18      	bgt.n	80133f2 <_dtoa_r+0x8fa>
 80133c0:	f1ba 0f00 	cmp.w	sl, #0
 80133c4:	d115      	bne.n	80133f2 <_dtoa_r+0x8fa>
 80133c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80133ca:	b993      	cbnz	r3, 80133f2 <_dtoa_r+0x8fa>
 80133cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80133d0:	0d1b      	lsrs	r3, r3, #20
 80133d2:	051b      	lsls	r3, r3, #20
 80133d4:	b183      	cbz	r3, 80133f8 <_dtoa_r+0x900>
 80133d6:	9b04      	ldr	r3, [sp, #16]
 80133d8:	3301      	adds	r3, #1
 80133da:	9304      	str	r3, [sp, #16]
 80133dc:	9b05      	ldr	r3, [sp, #20]
 80133de:	3301      	adds	r3, #1
 80133e0:	9305      	str	r3, [sp, #20]
 80133e2:	f04f 0801 	mov.w	r8, #1
 80133e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	f47f af6a 	bne.w	80132c2 <_dtoa_r+0x7ca>
 80133ee:	2001      	movs	r0, #1
 80133f0:	e76f      	b.n	80132d2 <_dtoa_r+0x7da>
 80133f2:	f04f 0800 	mov.w	r8, #0
 80133f6:	e7f6      	b.n	80133e6 <_dtoa_r+0x8ee>
 80133f8:	4698      	mov	r8, r3
 80133fa:	e7f4      	b.n	80133e6 <_dtoa_r+0x8ee>
 80133fc:	f43f af7d 	beq.w	80132fa <_dtoa_r+0x802>
 8013400:	4618      	mov	r0, r3
 8013402:	301c      	adds	r0, #28
 8013404:	e772      	b.n	80132ec <_dtoa_r+0x7f4>
 8013406:	9b03      	ldr	r3, [sp, #12]
 8013408:	2b00      	cmp	r3, #0
 801340a:	dc37      	bgt.n	801347c <_dtoa_r+0x984>
 801340c:	9b06      	ldr	r3, [sp, #24]
 801340e:	2b02      	cmp	r3, #2
 8013410:	dd34      	ble.n	801347c <_dtoa_r+0x984>
 8013412:	9b03      	ldr	r3, [sp, #12]
 8013414:	9302      	str	r3, [sp, #8]
 8013416:	9b02      	ldr	r3, [sp, #8]
 8013418:	b96b      	cbnz	r3, 8013436 <_dtoa_r+0x93e>
 801341a:	4631      	mov	r1, r6
 801341c:	2205      	movs	r2, #5
 801341e:	4620      	mov	r0, r4
 8013420:	f000 fbe6 	bl	8013bf0 <__multadd>
 8013424:	4601      	mov	r1, r0
 8013426:	4606      	mov	r6, r0
 8013428:	ee18 0a10 	vmov	r0, s16
 801342c:	f000 fe00 	bl	8014030 <__mcmp>
 8013430:	2800      	cmp	r0, #0
 8013432:	f73f adbb 	bgt.w	8012fac <_dtoa_r+0x4b4>
 8013436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013438:	9d01      	ldr	r5, [sp, #4]
 801343a:	43db      	mvns	r3, r3
 801343c:	9300      	str	r3, [sp, #0]
 801343e:	f04f 0800 	mov.w	r8, #0
 8013442:	4631      	mov	r1, r6
 8013444:	4620      	mov	r0, r4
 8013446:	f000 fbb1 	bl	8013bac <_Bfree>
 801344a:	2f00      	cmp	r7, #0
 801344c:	f43f aea4 	beq.w	8013198 <_dtoa_r+0x6a0>
 8013450:	f1b8 0f00 	cmp.w	r8, #0
 8013454:	d005      	beq.n	8013462 <_dtoa_r+0x96a>
 8013456:	45b8      	cmp	r8, r7
 8013458:	d003      	beq.n	8013462 <_dtoa_r+0x96a>
 801345a:	4641      	mov	r1, r8
 801345c:	4620      	mov	r0, r4
 801345e:	f000 fba5 	bl	8013bac <_Bfree>
 8013462:	4639      	mov	r1, r7
 8013464:	4620      	mov	r0, r4
 8013466:	f000 fba1 	bl	8013bac <_Bfree>
 801346a:	e695      	b.n	8013198 <_dtoa_r+0x6a0>
 801346c:	2600      	movs	r6, #0
 801346e:	4637      	mov	r7, r6
 8013470:	e7e1      	b.n	8013436 <_dtoa_r+0x93e>
 8013472:	9700      	str	r7, [sp, #0]
 8013474:	4637      	mov	r7, r6
 8013476:	e599      	b.n	8012fac <_dtoa_r+0x4b4>
 8013478:	40240000 	.word	0x40240000
 801347c:	9b08      	ldr	r3, [sp, #32]
 801347e:	2b00      	cmp	r3, #0
 8013480:	f000 80ca 	beq.w	8013618 <_dtoa_r+0xb20>
 8013484:	9b03      	ldr	r3, [sp, #12]
 8013486:	9302      	str	r3, [sp, #8]
 8013488:	2d00      	cmp	r5, #0
 801348a:	dd05      	ble.n	8013498 <_dtoa_r+0x9a0>
 801348c:	4639      	mov	r1, r7
 801348e:	462a      	mov	r2, r5
 8013490:	4620      	mov	r0, r4
 8013492:	f000 fd5d 	bl	8013f50 <__lshift>
 8013496:	4607      	mov	r7, r0
 8013498:	f1b8 0f00 	cmp.w	r8, #0
 801349c:	d05b      	beq.n	8013556 <_dtoa_r+0xa5e>
 801349e:	6879      	ldr	r1, [r7, #4]
 80134a0:	4620      	mov	r0, r4
 80134a2:	f000 fb43 	bl	8013b2c <_Balloc>
 80134a6:	4605      	mov	r5, r0
 80134a8:	b928      	cbnz	r0, 80134b6 <_dtoa_r+0x9be>
 80134aa:	4b87      	ldr	r3, [pc, #540]	; (80136c8 <_dtoa_r+0xbd0>)
 80134ac:	4602      	mov	r2, r0
 80134ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80134b2:	f7ff bb3b 	b.w	8012b2c <_dtoa_r+0x34>
 80134b6:	693a      	ldr	r2, [r7, #16]
 80134b8:	3202      	adds	r2, #2
 80134ba:	0092      	lsls	r2, r2, #2
 80134bc:	f107 010c 	add.w	r1, r7, #12
 80134c0:	300c      	adds	r0, #12
 80134c2:	f7fe fbbb 	bl	8011c3c <memcpy>
 80134c6:	2201      	movs	r2, #1
 80134c8:	4629      	mov	r1, r5
 80134ca:	4620      	mov	r0, r4
 80134cc:	f000 fd40 	bl	8013f50 <__lshift>
 80134d0:	9b01      	ldr	r3, [sp, #4]
 80134d2:	f103 0901 	add.w	r9, r3, #1
 80134d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80134da:	4413      	add	r3, r2
 80134dc:	9305      	str	r3, [sp, #20]
 80134de:	f00a 0301 	and.w	r3, sl, #1
 80134e2:	46b8      	mov	r8, r7
 80134e4:	9304      	str	r3, [sp, #16]
 80134e6:	4607      	mov	r7, r0
 80134e8:	4631      	mov	r1, r6
 80134ea:	ee18 0a10 	vmov	r0, s16
 80134ee:	f7ff fa77 	bl	80129e0 <quorem>
 80134f2:	4641      	mov	r1, r8
 80134f4:	9002      	str	r0, [sp, #8]
 80134f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80134fa:	ee18 0a10 	vmov	r0, s16
 80134fe:	f000 fd97 	bl	8014030 <__mcmp>
 8013502:	463a      	mov	r2, r7
 8013504:	9003      	str	r0, [sp, #12]
 8013506:	4631      	mov	r1, r6
 8013508:	4620      	mov	r0, r4
 801350a:	f000 fdad 	bl	8014068 <__mdiff>
 801350e:	68c2      	ldr	r2, [r0, #12]
 8013510:	f109 3bff 	add.w	fp, r9, #4294967295
 8013514:	4605      	mov	r5, r0
 8013516:	bb02      	cbnz	r2, 801355a <_dtoa_r+0xa62>
 8013518:	4601      	mov	r1, r0
 801351a:	ee18 0a10 	vmov	r0, s16
 801351e:	f000 fd87 	bl	8014030 <__mcmp>
 8013522:	4602      	mov	r2, r0
 8013524:	4629      	mov	r1, r5
 8013526:	4620      	mov	r0, r4
 8013528:	9207      	str	r2, [sp, #28]
 801352a:	f000 fb3f 	bl	8013bac <_Bfree>
 801352e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8013532:	ea43 0102 	orr.w	r1, r3, r2
 8013536:	9b04      	ldr	r3, [sp, #16]
 8013538:	430b      	orrs	r3, r1
 801353a:	464d      	mov	r5, r9
 801353c:	d10f      	bne.n	801355e <_dtoa_r+0xa66>
 801353e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013542:	d02a      	beq.n	801359a <_dtoa_r+0xaa2>
 8013544:	9b03      	ldr	r3, [sp, #12]
 8013546:	2b00      	cmp	r3, #0
 8013548:	dd02      	ble.n	8013550 <_dtoa_r+0xa58>
 801354a:	9b02      	ldr	r3, [sp, #8]
 801354c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8013550:	f88b a000 	strb.w	sl, [fp]
 8013554:	e775      	b.n	8013442 <_dtoa_r+0x94a>
 8013556:	4638      	mov	r0, r7
 8013558:	e7ba      	b.n	80134d0 <_dtoa_r+0x9d8>
 801355a:	2201      	movs	r2, #1
 801355c:	e7e2      	b.n	8013524 <_dtoa_r+0xa2c>
 801355e:	9b03      	ldr	r3, [sp, #12]
 8013560:	2b00      	cmp	r3, #0
 8013562:	db04      	blt.n	801356e <_dtoa_r+0xa76>
 8013564:	9906      	ldr	r1, [sp, #24]
 8013566:	430b      	orrs	r3, r1
 8013568:	9904      	ldr	r1, [sp, #16]
 801356a:	430b      	orrs	r3, r1
 801356c:	d122      	bne.n	80135b4 <_dtoa_r+0xabc>
 801356e:	2a00      	cmp	r2, #0
 8013570:	ddee      	ble.n	8013550 <_dtoa_r+0xa58>
 8013572:	ee18 1a10 	vmov	r1, s16
 8013576:	2201      	movs	r2, #1
 8013578:	4620      	mov	r0, r4
 801357a:	f000 fce9 	bl	8013f50 <__lshift>
 801357e:	4631      	mov	r1, r6
 8013580:	ee08 0a10 	vmov	s16, r0
 8013584:	f000 fd54 	bl	8014030 <__mcmp>
 8013588:	2800      	cmp	r0, #0
 801358a:	dc03      	bgt.n	8013594 <_dtoa_r+0xa9c>
 801358c:	d1e0      	bne.n	8013550 <_dtoa_r+0xa58>
 801358e:	f01a 0f01 	tst.w	sl, #1
 8013592:	d0dd      	beq.n	8013550 <_dtoa_r+0xa58>
 8013594:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013598:	d1d7      	bne.n	801354a <_dtoa_r+0xa52>
 801359a:	2339      	movs	r3, #57	; 0x39
 801359c:	f88b 3000 	strb.w	r3, [fp]
 80135a0:	462b      	mov	r3, r5
 80135a2:	461d      	mov	r5, r3
 80135a4:	3b01      	subs	r3, #1
 80135a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80135aa:	2a39      	cmp	r2, #57	; 0x39
 80135ac:	d071      	beq.n	8013692 <_dtoa_r+0xb9a>
 80135ae:	3201      	adds	r2, #1
 80135b0:	701a      	strb	r2, [r3, #0]
 80135b2:	e746      	b.n	8013442 <_dtoa_r+0x94a>
 80135b4:	2a00      	cmp	r2, #0
 80135b6:	dd07      	ble.n	80135c8 <_dtoa_r+0xad0>
 80135b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80135bc:	d0ed      	beq.n	801359a <_dtoa_r+0xaa2>
 80135be:	f10a 0301 	add.w	r3, sl, #1
 80135c2:	f88b 3000 	strb.w	r3, [fp]
 80135c6:	e73c      	b.n	8013442 <_dtoa_r+0x94a>
 80135c8:	9b05      	ldr	r3, [sp, #20]
 80135ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80135ce:	4599      	cmp	r9, r3
 80135d0:	d047      	beq.n	8013662 <_dtoa_r+0xb6a>
 80135d2:	ee18 1a10 	vmov	r1, s16
 80135d6:	2300      	movs	r3, #0
 80135d8:	220a      	movs	r2, #10
 80135da:	4620      	mov	r0, r4
 80135dc:	f000 fb08 	bl	8013bf0 <__multadd>
 80135e0:	45b8      	cmp	r8, r7
 80135e2:	ee08 0a10 	vmov	s16, r0
 80135e6:	f04f 0300 	mov.w	r3, #0
 80135ea:	f04f 020a 	mov.w	r2, #10
 80135ee:	4641      	mov	r1, r8
 80135f0:	4620      	mov	r0, r4
 80135f2:	d106      	bne.n	8013602 <_dtoa_r+0xb0a>
 80135f4:	f000 fafc 	bl	8013bf0 <__multadd>
 80135f8:	4680      	mov	r8, r0
 80135fa:	4607      	mov	r7, r0
 80135fc:	f109 0901 	add.w	r9, r9, #1
 8013600:	e772      	b.n	80134e8 <_dtoa_r+0x9f0>
 8013602:	f000 faf5 	bl	8013bf0 <__multadd>
 8013606:	4639      	mov	r1, r7
 8013608:	4680      	mov	r8, r0
 801360a:	2300      	movs	r3, #0
 801360c:	220a      	movs	r2, #10
 801360e:	4620      	mov	r0, r4
 8013610:	f000 faee 	bl	8013bf0 <__multadd>
 8013614:	4607      	mov	r7, r0
 8013616:	e7f1      	b.n	80135fc <_dtoa_r+0xb04>
 8013618:	9b03      	ldr	r3, [sp, #12]
 801361a:	9302      	str	r3, [sp, #8]
 801361c:	9d01      	ldr	r5, [sp, #4]
 801361e:	ee18 0a10 	vmov	r0, s16
 8013622:	4631      	mov	r1, r6
 8013624:	f7ff f9dc 	bl	80129e0 <quorem>
 8013628:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801362c:	9b01      	ldr	r3, [sp, #4]
 801362e:	f805 ab01 	strb.w	sl, [r5], #1
 8013632:	1aea      	subs	r2, r5, r3
 8013634:	9b02      	ldr	r3, [sp, #8]
 8013636:	4293      	cmp	r3, r2
 8013638:	dd09      	ble.n	801364e <_dtoa_r+0xb56>
 801363a:	ee18 1a10 	vmov	r1, s16
 801363e:	2300      	movs	r3, #0
 8013640:	220a      	movs	r2, #10
 8013642:	4620      	mov	r0, r4
 8013644:	f000 fad4 	bl	8013bf0 <__multadd>
 8013648:	ee08 0a10 	vmov	s16, r0
 801364c:	e7e7      	b.n	801361e <_dtoa_r+0xb26>
 801364e:	9b02      	ldr	r3, [sp, #8]
 8013650:	2b00      	cmp	r3, #0
 8013652:	bfc8      	it	gt
 8013654:	461d      	movgt	r5, r3
 8013656:	9b01      	ldr	r3, [sp, #4]
 8013658:	bfd8      	it	le
 801365a:	2501      	movle	r5, #1
 801365c:	441d      	add	r5, r3
 801365e:	f04f 0800 	mov.w	r8, #0
 8013662:	ee18 1a10 	vmov	r1, s16
 8013666:	2201      	movs	r2, #1
 8013668:	4620      	mov	r0, r4
 801366a:	f000 fc71 	bl	8013f50 <__lshift>
 801366e:	4631      	mov	r1, r6
 8013670:	ee08 0a10 	vmov	s16, r0
 8013674:	f000 fcdc 	bl	8014030 <__mcmp>
 8013678:	2800      	cmp	r0, #0
 801367a:	dc91      	bgt.n	80135a0 <_dtoa_r+0xaa8>
 801367c:	d102      	bne.n	8013684 <_dtoa_r+0xb8c>
 801367e:	f01a 0f01 	tst.w	sl, #1
 8013682:	d18d      	bne.n	80135a0 <_dtoa_r+0xaa8>
 8013684:	462b      	mov	r3, r5
 8013686:	461d      	mov	r5, r3
 8013688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801368c:	2a30      	cmp	r2, #48	; 0x30
 801368e:	d0fa      	beq.n	8013686 <_dtoa_r+0xb8e>
 8013690:	e6d7      	b.n	8013442 <_dtoa_r+0x94a>
 8013692:	9a01      	ldr	r2, [sp, #4]
 8013694:	429a      	cmp	r2, r3
 8013696:	d184      	bne.n	80135a2 <_dtoa_r+0xaaa>
 8013698:	9b00      	ldr	r3, [sp, #0]
 801369a:	3301      	adds	r3, #1
 801369c:	9300      	str	r3, [sp, #0]
 801369e:	2331      	movs	r3, #49	; 0x31
 80136a0:	7013      	strb	r3, [r2, #0]
 80136a2:	e6ce      	b.n	8013442 <_dtoa_r+0x94a>
 80136a4:	4b09      	ldr	r3, [pc, #36]	; (80136cc <_dtoa_r+0xbd4>)
 80136a6:	f7ff ba95 	b.w	8012bd4 <_dtoa_r+0xdc>
 80136aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	f47f aa6e 	bne.w	8012b8e <_dtoa_r+0x96>
 80136b2:	4b07      	ldr	r3, [pc, #28]	; (80136d0 <_dtoa_r+0xbd8>)
 80136b4:	f7ff ba8e 	b.w	8012bd4 <_dtoa_r+0xdc>
 80136b8:	9b02      	ldr	r3, [sp, #8]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	dcae      	bgt.n	801361c <_dtoa_r+0xb24>
 80136be:	9b06      	ldr	r3, [sp, #24]
 80136c0:	2b02      	cmp	r3, #2
 80136c2:	f73f aea8 	bgt.w	8013416 <_dtoa_r+0x91e>
 80136c6:	e7a9      	b.n	801361c <_dtoa_r+0xb24>
 80136c8:	0801506f 	.word	0x0801506f
 80136cc:	08014fcc 	.word	0x08014fcc
 80136d0:	08014ff0 	.word	0x08014ff0

080136d4 <__sflush_r>:
 80136d4:	898a      	ldrh	r2, [r1, #12]
 80136d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136da:	4605      	mov	r5, r0
 80136dc:	0710      	lsls	r0, r2, #28
 80136de:	460c      	mov	r4, r1
 80136e0:	d458      	bmi.n	8013794 <__sflush_r+0xc0>
 80136e2:	684b      	ldr	r3, [r1, #4]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	dc05      	bgt.n	80136f4 <__sflush_r+0x20>
 80136e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	dc02      	bgt.n	80136f4 <__sflush_r+0x20>
 80136ee:	2000      	movs	r0, #0
 80136f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80136f6:	2e00      	cmp	r6, #0
 80136f8:	d0f9      	beq.n	80136ee <__sflush_r+0x1a>
 80136fa:	2300      	movs	r3, #0
 80136fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013700:	682f      	ldr	r7, [r5, #0]
 8013702:	602b      	str	r3, [r5, #0]
 8013704:	d032      	beq.n	801376c <__sflush_r+0x98>
 8013706:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013708:	89a3      	ldrh	r3, [r4, #12]
 801370a:	075a      	lsls	r2, r3, #29
 801370c:	d505      	bpl.n	801371a <__sflush_r+0x46>
 801370e:	6863      	ldr	r3, [r4, #4]
 8013710:	1ac0      	subs	r0, r0, r3
 8013712:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013714:	b10b      	cbz	r3, 801371a <__sflush_r+0x46>
 8013716:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013718:	1ac0      	subs	r0, r0, r3
 801371a:	2300      	movs	r3, #0
 801371c:	4602      	mov	r2, r0
 801371e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013720:	6a21      	ldr	r1, [r4, #32]
 8013722:	4628      	mov	r0, r5
 8013724:	47b0      	blx	r6
 8013726:	1c43      	adds	r3, r0, #1
 8013728:	89a3      	ldrh	r3, [r4, #12]
 801372a:	d106      	bne.n	801373a <__sflush_r+0x66>
 801372c:	6829      	ldr	r1, [r5, #0]
 801372e:	291d      	cmp	r1, #29
 8013730:	d82c      	bhi.n	801378c <__sflush_r+0xb8>
 8013732:	4a2a      	ldr	r2, [pc, #168]	; (80137dc <__sflush_r+0x108>)
 8013734:	40ca      	lsrs	r2, r1
 8013736:	07d6      	lsls	r6, r2, #31
 8013738:	d528      	bpl.n	801378c <__sflush_r+0xb8>
 801373a:	2200      	movs	r2, #0
 801373c:	6062      	str	r2, [r4, #4]
 801373e:	04d9      	lsls	r1, r3, #19
 8013740:	6922      	ldr	r2, [r4, #16]
 8013742:	6022      	str	r2, [r4, #0]
 8013744:	d504      	bpl.n	8013750 <__sflush_r+0x7c>
 8013746:	1c42      	adds	r2, r0, #1
 8013748:	d101      	bne.n	801374e <__sflush_r+0x7a>
 801374a:	682b      	ldr	r3, [r5, #0]
 801374c:	b903      	cbnz	r3, 8013750 <__sflush_r+0x7c>
 801374e:	6560      	str	r0, [r4, #84]	; 0x54
 8013750:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013752:	602f      	str	r7, [r5, #0]
 8013754:	2900      	cmp	r1, #0
 8013756:	d0ca      	beq.n	80136ee <__sflush_r+0x1a>
 8013758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801375c:	4299      	cmp	r1, r3
 801375e:	d002      	beq.n	8013766 <__sflush_r+0x92>
 8013760:	4628      	mov	r0, r5
 8013762:	f000 fd7d 	bl	8014260 <_free_r>
 8013766:	2000      	movs	r0, #0
 8013768:	6360      	str	r0, [r4, #52]	; 0x34
 801376a:	e7c1      	b.n	80136f0 <__sflush_r+0x1c>
 801376c:	6a21      	ldr	r1, [r4, #32]
 801376e:	2301      	movs	r3, #1
 8013770:	4628      	mov	r0, r5
 8013772:	47b0      	blx	r6
 8013774:	1c41      	adds	r1, r0, #1
 8013776:	d1c7      	bne.n	8013708 <__sflush_r+0x34>
 8013778:	682b      	ldr	r3, [r5, #0]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d0c4      	beq.n	8013708 <__sflush_r+0x34>
 801377e:	2b1d      	cmp	r3, #29
 8013780:	d001      	beq.n	8013786 <__sflush_r+0xb2>
 8013782:	2b16      	cmp	r3, #22
 8013784:	d101      	bne.n	801378a <__sflush_r+0xb6>
 8013786:	602f      	str	r7, [r5, #0]
 8013788:	e7b1      	b.n	80136ee <__sflush_r+0x1a>
 801378a:	89a3      	ldrh	r3, [r4, #12]
 801378c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013790:	81a3      	strh	r3, [r4, #12]
 8013792:	e7ad      	b.n	80136f0 <__sflush_r+0x1c>
 8013794:	690f      	ldr	r7, [r1, #16]
 8013796:	2f00      	cmp	r7, #0
 8013798:	d0a9      	beq.n	80136ee <__sflush_r+0x1a>
 801379a:	0793      	lsls	r3, r2, #30
 801379c:	680e      	ldr	r6, [r1, #0]
 801379e:	bf08      	it	eq
 80137a0:	694b      	ldreq	r3, [r1, #20]
 80137a2:	600f      	str	r7, [r1, #0]
 80137a4:	bf18      	it	ne
 80137a6:	2300      	movne	r3, #0
 80137a8:	eba6 0807 	sub.w	r8, r6, r7
 80137ac:	608b      	str	r3, [r1, #8]
 80137ae:	f1b8 0f00 	cmp.w	r8, #0
 80137b2:	dd9c      	ble.n	80136ee <__sflush_r+0x1a>
 80137b4:	6a21      	ldr	r1, [r4, #32]
 80137b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80137b8:	4643      	mov	r3, r8
 80137ba:	463a      	mov	r2, r7
 80137bc:	4628      	mov	r0, r5
 80137be:	47b0      	blx	r6
 80137c0:	2800      	cmp	r0, #0
 80137c2:	dc06      	bgt.n	80137d2 <__sflush_r+0xfe>
 80137c4:	89a3      	ldrh	r3, [r4, #12]
 80137c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137ca:	81a3      	strh	r3, [r4, #12]
 80137cc:	f04f 30ff 	mov.w	r0, #4294967295
 80137d0:	e78e      	b.n	80136f0 <__sflush_r+0x1c>
 80137d2:	4407      	add	r7, r0
 80137d4:	eba8 0800 	sub.w	r8, r8, r0
 80137d8:	e7e9      	b.n	80137ae <__sflush_r+0xda>
 80137da:	bf00      	nop
 80137dc:	20400001 	.word	0x20400001

080137e0 <_fflush_r>:
 80137e0:	b538      	push	{r3, r4, r5, lr}
 80137e2:	690b      	ldr	r3, [r1, #16]
 80137e4:	4605      	mov	r5, r0
 80137e6:	460c      	mov	r4, r1
 80137e8:	b913      	cbnz	r3, 80137f0 <_fflush_r+0x10>
 80137ea:	2500      	movs	r5, #0
 80137ec:	4628      	mov	r0, r5
 80137ee:	bd38      	pop	{r3, r4, r5, pc}
 80137f0:	b118      	cbz	r0, 80137fa <_fflush_r+0x1a>
 80137f2:	6983      	ldr	r3, [r0, #24]
 80137f4:	b90b      	cbnz	r3, 80137fa <_fflush_r+0x1a>
 80137f6:	f000 f887 	bl	8013908 <__sinit>
 80137fa:	4b14      	ldr	r3, [pc, #80]	; (801384c <_fflush_r+0x6c>)
 80137fc:	429c      	cmp	r4, r3
 80137fe:	d11b      	bne.n	8013838 <_fflush_r+0x58>
 8013800:	686c      	ldr	r4, [r5, #4]
 8013802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d0ef      	beq.n	80137ea <_fflush_r+0xa>
 801380a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801380c:	07d0      	lsls	r0, r2, #31
 801380e:	d404      	bmi.n	801381a <_fflush_r+0x3a>
 8013810:	0599      	lsls	r1, r3, #22
 8013812:	d402      	bmi.n	801381a <_fflush_r+0x3a>
 8013814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013816:	f000 f91a 	bl	8013a4e <__retarget_lock_acquire_recursive>
 801381a:	4628      	mov	r0, r5
 801381c:	4621      	mov	r1, r4
 801381e:	f7ff ff59 	bl	80136d4 <__sflush_r>
 8013822:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013824:	07da      	lsls	r2, r3, #31
 8013826:	4605      	mov	r5, r0
 8013828:	d4e0      	bmi.n	80137ec <_fflush_r+0xc>
 801382a:	89a3      	ldrh	r3, [r4, #12]
 801382c:	059b      	lsls	r3, r3, #22
 801382e:	d4dd      	bmi.n	80137ec <_fflush_r+0xc>
 8013830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013832:	f000 f90d 	bl	8013a50 <__retarget_lock_release_recursive>
 8013836:	e7d9      	b.n	80137ec <_fflush_r+0xc>
 8013838:	4b05      	ldr	r3, [pc, #20]	; (8013850 <_fflush_r+0x70>)
 801383a:	429c      	cmp	r4, r3
 801383c:	d101      	bne.n	8013842 <_fflush_r+0x62>
 801383e:	68ac      	ldr	r4, [r5, #8]
 8013840:	e7df      	b.n	8013802 <_fflush_r+0x22>
 8013842:	4b04      	ldr	r3, [pc, #16]	; (8013854 <_fflush_r+0x74>)
 8013844:	429c      	cmp	r4, r3
 8013846:	bf08      	it	eq
 8013848:	68ec      	ldreq	r4, [r5, #12]
 801384a:	e7da      	b.n	8013802 <_fflush_r+0x22>
 801384c:	080150a0 	.word	0x080150a0
 8013850:	080150c0 	.word	0x080150c0
 8013854:	08015080 	.word	0x08015080

08013858 <std>:
 8013858:	2300      	movs	r3, #0
 801385a:	b510      	push	{r4, lr}
 801385c:	4604      	mov	r4, r0
 801385e:	e9c0 3300 	strd	r3, r3, [r0]
 8013862:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013866:	6083      	str	r3, [r0, #8]
 8013868:	8181      	strh	r1, [r0, #12]
 801386a:	6643      	str	r3, [r0, #100]	; 0x64
 801386c:	81c2      	strh	r2, [r0, #14]
 801386e:	6183      	str	r3, [r0, #24]
 8013870:	4619      	mov	r1, r3
 8013872:	2208      	movs	r2, #8
 8013874:	305c      	adds	r0, #92	; 0x5c
 8013876:	f7fe f9ef 	bl	8011c58 <memset>
 801387a:	4b05      	ldr	r3, [pc, #20]	; (8013890 <std+0x38>)
 801387c:	6263      	str	r3, [r4, #36]	; 0x24
 801387e:	4b05      	ldr	r3, [pc, #20]	; (8013894 <std+0x3c>)
 8013880:	62a3      	str	r3, [r4, #40]	; 0x28
 8013882:	4b05      	ldr	r3, [pc, #20]	; (8013898 <std+0x40>)
 8013884:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013886:	4b05      	ldr	r3, [pc, #20]	; (801389c <std+0x44>)
 8013888:	6224      	str	r4, [r4, #32]
 801388a:	6323      	str	r3, [r4, #48]	; 0x30
 801388c:	bd10      	pop	{r4, pc}
 801388e:	bf00      	nop
 8013890:	08014a3d 	.word	0x08014a3d
 8013894:	08014a5f 	.word	0x08014a5f
 8013898:	08014a97 	.word	0x08014a97
 801389c:	08014abb 	.word	0x08014abb

080138a0 <_cleanup_r>:
 80138a0:	4901      	ldr	r1, [pc, #4]	; (80138a8 <_cleanup_r+0x8>)
 80138a2:	f000 b8af 	b.w	8013a04 <_fwalk_reent>
 80138a6:	bf00      	nop
 80138a8:	080137e1 	.word	0x080137e1

080138ac <__sfmoreglue>:
 80138ac:	b570      	push	{r4, r5, r6, lr}
 80138ae:	2268      	movs	r2, #104	; 0x68
 80138b0:	1e4d      	subs	r5, r1, #1
 80138b2:	4355      	muls	r5, r2
 80138b4:	460e      	mov	r6, r1
 80138b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80138ba:	f000 fd3d 	bl	8014338 <_malloc_r>
 80138be:	4604      	mov	r4, r0
 80138c0:	b140      	cbz	r0, 80138d4 <__sfmoreglue+0x28>
 80138c2:	2100      	movs	r1, #0
 80138c4:	e9c0 1600 	strd	r1, r6, [r0]
 80138c8:	300c      	adds	r0, #12
 80138ca:	60a0      	str	r0, [r4, #8]
 80138cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80138d0:	f7fe f9c2 	bl	8011c58 <memset>
 80138d4:	4620      	mov	r0, r4
 80138d6:	bd70      	pop	{r4, r5, r6, pc}

080138d8 <__sfp_lock_acquire>:
 80138d8:	4801      	ldr	r0, [pc, #4]	; (80138e0 <__sfp_lock_acquire+0x8>)
 80138da:	f000 b8b8 	b.w	8013a4e <__retarget_lock_acquire_recursive>
 80138de:	bf00      	nop
 80138e0:	2000cfb5 	.word	0x2000cfb5

080138e4 <__sfp_lock_release>:
 80138e4:	4801      	ldr	r0, [pc, #4]	; (80138ec <__sfp_lock_release+0x8>)
 80138e6:	f000 b8b3 	b.w	8013a50 <__retarget_lock_release_recursive>
 80138ea:	bf00      	nop
 80138ec:	2000cfb5 	.word	0x2000cfb5

080138f0 <__sinit_lock_acquire>:
 80138f0:	4801      	ldr	r0, [pc, #4]	; (80138f8 <__sinit_lock_acquire+0x8>)
 80138f2:	f000 b8ac 	b.w	8013a4e <__retarget_lock_acquire_recursive>
 80138f6:	bf00      	nop
 80138f8:	2000cfb6 	.word	0x2000cfb6

080138fc <__sinit_lock_release>:
 80138fc:	4801      	ldr	r0, [pc, #4]	; (8013904 <__sinit_lock_release+0x8>)
 80138fe:	f000 b8a7 	b.w	8013a50 <__retarget_lock_release_recursive>
 8013902:	bf00      	nop
 8013904:	2000cfb6 	.word	0x2000cfb6

08013908 <__sinit>:
 8013908:	b510      	push	{r4, lr}
 801390a:	4604      	mov	r4, r0
 801390c:	f7ff fff0 	bl	80138f0 <__sinit_lock_acquire>
 8013910:	69a3      	ldr	r3, [r4, #24]
 8013912:	b11b      	cbz	r3, 801391c <__sinit+0x14>
 8013914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013918:	f7ff bff0 	b.w	80138fc <__sinit_lock_release>
 801391c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013920:	6523      	str	r3, [r4, #80]	; 0x50
 8013922:	4b13      	ldr	r3, [pc, #76]	; (8013970 <__sinit+0x68>)
 8013924:	4a13      	ldr	r2, [pc, #76]	; (8013974 <__sinit+0x6c>)
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	62a2      	str	r2, [r4, #40]	; 0x28
 801392a:	42a3      	cmp	r3, r4
 801392c:	bf04      	itt	eq
 801392e:	2301      	moveq	r3, #1
 8013930:	61a3      	streq	r3, [r4, #24]
 8013932:	4620      	mov	r0, r4
 8013934:	f000 f820 	bl	8013978 <__sfp>
 8013938:	6060      	str	r0, [r4, #4]
 801393a:	4620      	mov	r0, r4
 801393c:	f000 f81c 	bl	8013978 <__sfp>
 8013940:	60a0      	str	r0, [r4, #8]
 8013942:	4620      	mov	r0, r4
 8013944:	f000 f818 	bl	8013978 <__sfp>
 8013948:	2200      	movs	r2, #0
 801394a:	60e0      	str	r0, [r4, #12]
 801394c:	2104      	movs	r1, #4
 801394e:	6860      	ldr	r0, [r4, #4]
 8013950:	f7ff ff82 	bl	8013858 <std>
 8013954:	68a0      	ldr	r0, [r4, #8]
 8013956:	2201      	movs	r2, #1
 8013958:	2109      	movs	r1, #9
 801395a:	f7ff ff7d 	bl	8013858 <std>
 801395e:	68e0      	ldr	r0, [r4, #12]
 8013960:	2202      	movs	r2, #2
 8013962:	2112      	movs	r1, #18
 8013964:	f7ff ff78 	bl	8013858 <std>
 8013968:	2301      	movs	r3, #1
 801396a:	61a3      	str	r3, [r4, #24]
 801396c:	e7d2      	b.n	8013914 <__sinit+0xc>
 801396e:	bf00      	nop
 8013970:	08014fb8 	.word	0x08014fb8
 8013974:	080138a1 	.word	0x080138a1

08013978 <__sfp>:
 8013978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801397a:	4607      	mov	r7, r0
 801397c:	f7ff ffac 	bl	80138d8 <__sfp_lock_acquire>
 8013980:	4b1e      	ldr	r3, [pc, #120]	; (80139fc <__sfp+0x84>)
 8013982:	681e      	ldr	r6, [r3, #0]
 8013984:	69b3      	ldr	r3, [r6, #24]
 8013986:	b913      	cbnz	r3, 801398e <__sfp+0x16>
 8013988:	4630      	mov	r0, r6
 801398a:	f7ff ffbd 	bl	8013908 <__sinit>
 801398e:	3648      	adds	r6, #72	; 0x48
 8013990:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013994:	3b01      	subs	r3, #1
 8013996:	d503      	bpl.n	80139a0 <__sfp+0x28>
 8013998:	6833      	ldr	r3, [r6, #0]
 801399a:	b30b      	cbz	r3, 80139e0 <__sfp+0x68>
 801399c:	6836      	ldr	r6, [r6, #0]
 801399e:	e7f7      	b.n	8013990 <__sfp+0x18>
 80139a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80139a4:	b9d5      	cbnz	r5, 80139dc <__sfp+0x64>
 80139a6:	4b16      	ldr	r3, [pc, #88]	; (8013a00 <__sfp+0x88>)
 80139a8:	60e3      	str	r3, [r4, #12]
 80139aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80139ae:	6665      	str	r5, [r4, #100]	; 0x64
 80139b0:	f000 f84c 	bl	8013a4c <__retarget_lock_init_recursive>
 80139b4:	f7ff ff96 	bl	80138e4 <__sfp_lock_release>
 80139b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80139bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80139c0:	6025      	str	r5, [r4, #0]
 80139c2:	61a5      	str	r5, [r4, #24]
 80139c4:	2208      	movs	r2, #8
 80139c6:	4629      	mov	r1, r5
 80139c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80139cc:	f7fe f944 	bl	8011c58 <memset>
 80139d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80139d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80139d8:	4620      	mov	r0, r4
 80139da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139dc:	3468      	adds	r4, #104	; 0x68
 80139de:	e7d9      	b.n	8013994 <__sfp+0x1c>
 80139e0:	2104      	movs	r1, #4
 80139e2:	4638      	mov	r0, r7
 80139e4:	f7ff ff62 	bl	80138ac <__sfmoreglue>
 80139e8:	4604      	mov	r4, r0
 80139ea:	6030      	str	r0, [r6, #0]
 80139ec:	2800      	cmp	r0, #0
 80139ee:	d1d5      	bne.n	801399c <__sfp+0x24>
 80139f0:	f7ff ff78 	bl	80138e4 <__sfp_lock_release>
 80139f4:	230c      	movs	r3, #12
 80139f6:	603b      	str	r3, [r7, #0]
 80139f8:	e7ee      	b.n	80139d8 <__sfp+0x60>
 80139fa:	bf00      	nop
 80139fc:	08014fb8 	.word	0x08014fb8
 8013a00:	ffff0001 	.word	0xffff0001

08013a04 <_fwalk_reent>:
 8013a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a08:	4606      	mov	r6, r0
 8013a0a:	4688      	mov	r8, r1
 8013a0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013a10:	2700      	movs	r7, #0
 8013a12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013a16:	f1b9 0901 	subs.w	r9, r9, #1
 8013a1a:	d505      	bpl.n	8013a28 <_fwalk_reent+0x24>
 8013a1c:	6824      	ldr	r4, [r4, #0]
 8013a1e:	2c00      	cmp	r4, #0
 8013a20:	d1f7      	bne.n	8013a12 <_fwalk_reent+0xe>
 8013a22:	4638      	mov	r0, r7
 8013a24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a28:	89ab      	ldrh	r3, [r5, #12]
 8013a2a:	2b01      	cmp	r3, #1
 8013a2c:	d907      	bls.n	8013a3e <_fwalk_reent+0x3a>
 8013a2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013a32:	3301      	adds	r3, #1
 8013a34:	d003      	beq.n	8013a3e <_fwalk_reent+0x3a>
 8013a36:	4629      	mov	r1, r5
 8013a38:	4630      	mov	r0, r6
 8013a3a:	47c0      	blx	r8
 8013a3c:	4307      	orrs	r7, r0
 8013a3e:	3568      	adds	r5, #104	; 0x68
 8013a40:	e7e9      	b.n	8013a16 <_fwalk_reent+0x12>
	...

08013a44 <_localeconv_r>:
 8013a44:	4800      	ldr	r0, [pc, #0]	; (8013a48 <_localeconv_r+0x4>)
 8013a46:	4770      	bx	lr
 8013a48:	20000160 	.word	0x20000160

08013a4c <__retarget_lock_init_recursive>:
 8013a4c:	4770      	bx	lr

08013a4e <__retarget_lock_acquire_recursive>:
 8013a4e:	4770      	bx	lr

08013a50 <__retarget_lock_release_recursive>:
 8013a50:	4770      	bx	lr

08013a52 <__swhatbuf_r>:
 8013a52:	b570      	push	{r4, r5, r6, lr}
 8013a54:	460e      	mov	r6, r1
 8013a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a5a:	2900      	cmp	r1, #0
 8013a5c:	b096      	sub	sp, #88	; 0x58
 8013a5e:	4614      	mov	r4, r2
 8013a60:	461d      	mov	r5, r3
 8013a62:	da08      	bge.n	8013a76 <__swhatbuf_r+0x24>
 8013a64:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013a68:	2200      	movs	r2, #0
 8013a6a:	602a      	str	r2, [r5, #0]
 8013a6c:	061a      	lsls	r2, r3, #24
 8013a6e:	d410      	bmi.n	8013a92 <__swhatbuf_r+0x40>
 8013a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013a74:	e00e      	b.n	8013a94 <__swhatbuf_r+0x42>
 8013a76:	466a      	mov	r2, sp
 8013a78:	f001 f876 	bl	8014b68 <_fstat_r>
 8013a7c:	2800      	cmp	r0, #0
 8013a7e:	dbf1      	blt.n	8013a64 <__swhatbuf_r+0x12>
 8013a80:	9a01      	ldr	r2, [sp, #4]
 8013a82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013a86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013a8a:	425a      	negs	r2, r3
 8013a8c:	415a      	adcs	r2, r3
 8013a8e:	602a      	str	r2, [r5, #0]
 8013a90:	e7ee      	b.n	8013a70 <__swhatbuf_r+0x1e>
 8013a92:	2340      	movs	r3, #64	; 0x40
 8013a94:	2000      	movs	r0, #0
 8013a96:	6023      	str	r3, [r4, #0]
 8013a98:	b016      	add	sp, #88	; 0x58
 8013a9a:	bd70      	pop	{r4, r5, r6, pc}

08013a9c <__smakebuf_r>:
 8013a9c:	898b      	ldrh	r3, [r1, #12]
 8013a9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013aa0:	079d      	lsls	r5, r3, #30
 8013aa2:	4606      	mov	r6, r0
 8013aa4:	460c      	mov	r4, r1
 8013aa6:	d507      	bpl.n	8013ab8 <__smakebuf_r+0x1c>
 8013aa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013aac:	6023      	str	r3, [r4, #0]
 8013aae:	6123      	str	r3, [r4, #16]
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	6163      	str	r3, [r4, #20]
 8013ab4:	b002      	add	sp, #8
 8013ab6:	bd70      	pop	{r4, r5, r6, pc}
 8013ab8:	ab01      	add	r3, sp, #4
 8013aba:	466a      	mov	r2, sp
 8013abc:	f7ff ffc9 	bl	8013a52 <__swhatbuf_r>
 8013ac0:	9900      	ldr	r1, [sp, #0]
 8013ac2:	4605      	mov	r5, r0
 8013ac4:	4630      	mov	r0, r6
 8013ac6:	f000 fc37 	bl	8014338 <_malloc_r>
 8013aca:	b948      	cbnz	r0, 8013ae0 <__smakebuf_r+0x44>
 8013acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ad0:	059a      	lsls	r2, r3, #22
 8013ad2:	d4ef      	bmi.n	8013ab4 <__smakebuf_r+0x18>
 8013ad4:	f023 0303 	bic.w	r3, r3, #3
 8013ad8:	f043 0302 	orr.w	r3, r3, #2
 8013adc:	81a3      	strh	r3, [r4, #12]
 8013ade:	e7e3      	b.n	8013aa8 <__smakebuf_r+0xc>
 8013ae0:	4b0d      	ldr	r3, [pc, #52]	; (8013b18 <__smakebuf_r+0x7c>)
 8013ae2:	62b3      	str	r3, [r6, #40]	; 0x28
 8013ae4:	89a3      	ldrh	r3, [r4, #12]
 8013ae6:	6020      	str	r0, [r4, #0]
 8013ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013aec:	81a3      	strh	r3, [r4, #12]
 8013aee:	9b00      	ldr	r3, [sp, #0]
 8013af0:	6163      	str	r3, [r4, #20]
 8013af2:	9b01      	ldr	r3, [sp, #4]
 8013af4:	6120      	str	r0, [r4, #16]
 8013af6:	b15b      	cbz	r3, 8013b10 <__smakebuf_r+0x74>
 8013af8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013afc:	4630      	mov	r0, r6
 8013afe:	f001 f845 	bl	8014b8c <_isatty_r>
 8013b02:	b128      	cbz	r0, 8013b10 <__smakebuf_r+0x74>
 8013b04:	89a3      	ldrh	r3, [r4, #12]
 8013b06:	f023 0303 	bic.w	r3, r3, #3
 8013b0a:	f043 0301 	orr.w	r3, r3, #1
 8013b0e:	81a3      	strh	r3, [r4, #12]
 8013b10:	89a0      	ldrh	r0, [r4, #12]
 8013b12:	4305      	orrs	r5, r0
 8013b14:	81a5      	strh	r5, [r4, #12]
 8013b16:	e7cd      	b.n	8013ab4 <__smakebuf_r+0x18>
 8013b18:	080138a1 	.word	0x080138a1

08013b1c <malloc>:
 8013b1c:	4b02      	ldr	r3, [pc, #8]	; (8013b28 <malloc+0xc>)
 8013b1e:	4601      	mov	r1, r0
 8013b20:	6818      	ldr	r0, [r3, #0]
 8013b22:	f000 bc09 	b.w	8014338 <_malloc_r>
 8013b26:	bf00      	nop
 8013b28:	2000000c 	.word	0x2000000c

08013b2c <_Balloc>:
 8013b2c:	b570      	push	{r4, r5, r6, lr}
 8013b2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013b30:	4604      	mov	r4, r0
 8013b32:	460d      	mov	r5, r1
 8013b34:	b976      	cbnz	r6, 8013b54 <_Balloc+0x28>
 8013b36:	2010      	movs	r0, #16
 8013b38:	f7ff fff0 	bl	8013b1c <malloc>
 8013b3c:	4602      	mov	r2, r0
 8013b3e:	6260      	str	r0, [r4, #36]	; 0x24
 8013b40:	b920      	cbnz	r0, 8013b4c <_Balloc+0x20>
 8013b42:	4b18      	ldr	r3, [pc, #96]	; (8013ba4 <_Balloc+0x78>)
 8013b44:	4818      	ldr	r0, [pc, #96]	; (8013ba8 <_Balloc+0x7c>)
 8013b46:	2166      	movs	r1, #102	; 0x66
 8013b48:	f000 ffce 	bl	8014ae8 <__assert_func>
 8013b4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013b50:	6006      	str	r6, [r0, #0]
 8013b52:	60c6      	str	r6, [r0, #12]
 8013b54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013b56:	68f3      	ldr	r3, [r6, #12]
 8013b58:	b183      	cbz	r3, 8013b7c <_Balloc+0x50>
 8013b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b5c:	68db      	ldr	r3, [r3, #12]
 8013b5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013b62:	b9b8      	cbnz	r0, 8013b94 <_Balloc+0x68>
 8013b64:	2101      	movs	r1, #1
 8013b66:	fa01 f605 	lsl.w	r6, r1, r5
 8013b6a:	1d72      	adds	r2, r6, #5
 8013b6c:	0092      	lsls	r2, r2, #2
 8013b6e:	4620      	mov	r0, r4
 8013b70:	f000 fb60 	bl	8014234 <_calloc_r>
 8013b74:	b160      	cbz	r0, 8013b90 <_Balloc+0x64>
 8013b76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013b7a:	e00e      	b.n	8013b9a <_Balloc+0x6e>
 8013b7c:	2221      	movs	r2, #33	; 0x21
 8013b7e:	2104      	movs	r1, #4
 8013b80:	4620      	mov	r0, r4
 8013b82:	f000 fb57 	bl	8014234 <_calloc_r>
 8013b86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b88:	60f0      	str	r0, [r6, #12]
 8013b8a:	68db      	ldr	r3, [r3, #12]
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d1e4      	bne.n	8013b5a <_Balloc+0x2e>
 8013b90:	2000      	movs	r0, #0
 8013b92:	bd70      	pop	{r4, r5, r6, pc}
 8013b94:	6802      	ldr	r2, [r0, #0]
 8013b96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013ba0:	e7f7      	b.n	8013b92 <_Balloc+0x66>
 8013ba2:	bf00      	nop
 8013ba4:	08014ffd 	.word	0x08014ffd
 8013ba8:	080150e0 	.word	0x080150e0

08013bac <_Bfree>:
 8013bac:	b570      	push	{r4, r5, r6, lr}
 8013bae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013bb0:	4605      	mov	r5, r0
 8013bb2:	460c      	mov	r4, r1
 8013bb4:	b976      	cbnz	r6, 8013bd4 <_Bfree+0x28>
 8013bb6:	2010      	movs	r0, #16
 8013bb8:	f7ff ffb0 	bl	8013b1c <malloc>
 8013bbc:	4602      	mov	r2, r0
 8013bbe:	6268      	str	r0, [r5, #36]	; 0x24
 8013bc0:	b920      	cbnz	r0, 8013bcc <_Bfree+0x20>
 8013bc2:	4b09      	ldr	r3, [pc, #36]	; (8013be8 <_Bfree+0x3c>)
 8013bc4:	4809      	ldr	r0, [pc, #36]	; (8013bec <_Bfree+0x40>)
 8013bc6:	218a      	movs	r1, #138	; 0x8a
 8013bc8:	f000 ff8e 	bl	8014ae8 <__assert_func>
 8013bcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013bd0:	6006      	str	r6, [r0, #0]
 8013bd2:	60c6      	str	r6, [r0, #12]
 8013bd4:	b13c      	cbz	r4, 8013be6 <_Bfree+0x3a>
 8013bd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013bd8:	6862      	ldr	r2, [r4, #4]
 8013bda:	68db      	ldr	r3, [r3, #12]
 8013bdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013be0:	6021      	str	r1, [r4, #0]
 8013be2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013be6:	bd70      	pop	{r4, r5, r6, pc}
 8013be8:	08014ffd 	.word	0x08014ffd
 8013bec:	080150e0 	.word	0x080150e0

08013bf0 <__multadd>:
 8013bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bf4:	690d      	ldr	r5, [r1, #16]
 8013bf6:	4607      	mov	r7, r0
 8013bf8:	460c      	mov	r4, r1
 8013bfa:	461e      	mov	r6, r3
 8013bfc:	f101 0c14 	add.w	ip, r1, #20
 8013c00:	2000      	movs	r0, #0
 8013c02:	f8dc 3000 	ldr.w	r3, [ip]
 8013c06:	b299      	uxth	r1, r3
 8013c08:	fb02 6101 	mla	r1, r2, r1, r6
 8013c0c:	0c1e      	lsrs	r6, r3, #16
 8013c0e:	0c0b      	lsrs	r3, r1, #16
 8013c10:	fb02 3306 	mla	r3, r2, r6, r3
 8013c14:	b289      	uxth	r1, r1
 8013c16:	3001      	adds	r0, #1
 8013c18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013c1c:	4285      	cmp	r5, r0
 8013c1e:	f84c 1b04 	str.w	r1, [ip], #4
 8013c22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013c26:	dcec      	bgt.n	8013c02 <__multadd+0x12>
 8013c28:	b30e      	cbz	r6, 8013c6e <__multadd+0x7e>
 8013c2a:	68a3      	ldr	r3, [r4, #8]
 8013c2c:	42ab      	cmp	r3, r5
 8013c2e:	dc19      	bgt.n	8013c64 <__multadd+0x74>
 8013c30:	6861      	ldr	r1, [r4, #4]
 8013c32:	4638      	mov	r0, r7
 8013c34:	3101      	adds	r1, #1
 8013c36:	f7ff ff79 	bl	8013b2c <_Balloc>
 8013c3a:	4680      	mov	r8, r0
 8013c3c:	b928      	cbnz	r0, 8013c4a <__multadd+0x5a>
 8013c3e:	4602      	mov	r2, r0
 8013c40:	4b0c      	ldr	r3, [pc, #48]	; (8013c74 <__multadd+0x84>)
 8013c42:	480d      	ldr	r0, [pc, #52]	; (8013c78 <__multadd+0x88>)
 8013c44:	21b5      	movs	r1, #181	; 0xb5
 8013c46:	f000 ff4f 	bl	8014ae8 <__assert_func>
 8013c4a:	6922      	ldr	r2, [r4, #16]
 8013c4c:	3202      	adds	r2, #2
 8013c4e:	f104 010c 	add.w	r1, r4, #12
 8013c52:	0092      	lsls	r2, r2, #2
 8013c54:	300c      	adds	r0, #12
 8013c56:	f7fd fff1 	bl	8011c3c <memcpy>
 8013c5a:	4621      	mov	r1, r4
 8013c5c:	4638      	mov	r0, r7
 8013c5e:	f7ff ffa5 	bl	8013bac <_Bfree>
 8013c62:	4644      	mov	r4, r8
 8013c64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013c68:	3501      	adds	r5, #1
 8013c6a:	615e      	str	r6, [r3, #20]
 8013c6c:	6125      	str	r5, [r4, #16]
 8013c6e:	4620      	mov	r0, r4
 8013c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c74:	0801506f 	.word	0x0801506f
 8013c78:	080150e0 	.word	0x080150e0

08013c7c <__hi0bits>:
 8013c7c:	0c03      	lsrs	r3, r0, #16
 8013c7e:	041b      	lsls	r3, r3, #16
 8013c80:	b9d3      	cbnz	r3, 8013cb8 <__hi0bits+0x3c>
 8013c82:	0400      	lsls	r0, r0, #16
 8013c84:	2310      	movs	r3, #16
 8013c86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013c8a:	bf04      	itt	eq
 8013c8c:	0200      	lsleq	r0, r0, #8
 8013c8e:	3308      	addeq	r3, #8
 8013c90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013c94:	bf04      	itt	eq
 8013c96:	0100      	lsleq	r0, r0, #4
 8013c98:	3304      	addeq	r3, #4
 8013c9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013c9e:	bf04      	itt	eq
 8013ca0:	0080      	lsleq	r0, r0, #2
 8013ca2:	3302      	addeq	r3, #2
 8013ca4:	2800      	cmp	r0, #0
 8013ca6:	db05      	blt.n	8013cb4 <__hi0bits+0x38>
 8013ca8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013cac:	f103 0301 	add.w	r3, r3, #1
 8013cb0:	bf08      	it	eq
 8013cb2:	2320      	moveq	r3, #32
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	4770      	bx	lr
 8013cb8:	2300      	movs	r3, #0
 8013cba:	e7e4      	b.n	8013c86 <__hi0bits+0xa>

08013cbc <__lo0bits>:
 8013cbc:	6803      	ldr	r3, [r0, #0]
 8013cbe:	f013 0207 	ands.w	r2, r3, #7
 8013cc2:	4601      	mov	r1, r0
 8013cc4:	d00b      	beq.n	8013cde <__lo0bits+0x22>
 8013cc6:	07da      	lsls	r2, r3, #31
 8013cc8:	d423      	bmi.n	8013d12 <__lo0bits+0x56>
 8013cca:	0798      	lsls	r0, r3, #30
 8013ccc:	bf49      	itett	mi
 8013cce:	085b      	lsrmi	r3, r3, #1
 8013cd0:	089b      	lsrpl	r3, r3, #2
 8013cd2:	2001      	movmi	r0, #1
 8013cd4:	600b      	strmi	r3, [r1, #0]
 8013cd6:	bf5c      	itt	pl
 8013cd8:	600b      	strpl	r3, [r1, #0]
 8013cda:	2002      	movpl	r0, #2
 8013cdc:	4770      	bx	lr
 8013cde:	b298      	uxth	r0, r3
 8013ce0:	b9a8      	cbnz	r0, 8013d0e <__lo0bits+0x52>
 8013ce2:	0c1b      	lsrs	r3, r3, #16
 8013ce4:	2010      	movs	r0, #16
 8013ce6:	b2da      	uxtb	r2, r3
 8013ce8:	b90a      	cbnz	r2, 8013cee <__lo0bits+0x32>
 8013cea:	3008      	adds	r0, #8
 8013cec:	0a1b      	lsrs	r3, r3, #8
 8013cee:	071a      	lsls	r2, r3, #28
 8013cf0:	bf04      	itt	eq
 8013cf2:	091b      	lsreq	r3, r3, #4
 8013cf4:	3004      	addeq	r0, #4
 8013cf6:	079a      	lsls	r2, r3, #30
 8013cf8:	bf04      	itt	eq
 8013cfa:	089b      	lsreq	r3, r3, #2
 8013cfc:	3002      	addeq	r0, #2
 8013cfe:	07da      	lsls	r2, r3, #31
 8013d00:	d403      	bmi.n	8013d0a <__lo0bits+0x4e>
 8013d02:	085b      	lsrs	r3, r3, #1
 8013d04:	f100 0001 	add.w	r0, r0, #1
 8013d08:	d005      	beq.n	8013d16 <__lo0bits+0x5a>
 8013d0a:	600b      	str	r3, [r1, #0]
 8013d0c:	4770      	bx	lr
 8013d0e:	4610      	mov	r0, r2
 8013d10:	e7e9      	b.n	8013ce6 <__lo0bits+0x2a>
 8013d12:	2000      	movs	r0, #0
 8013d14:	4770      	bx	lr
 8013d16:	2020      	movs	r0, #32
 8013d18:	4770      	bx	lr
	...

08013d1c <__i2b>:
 8013d1c:	b510      	push	{r4, lr}
 8013d1e:	460c      	mov	r4, r1
 8013d20:	2101      	movs	r1, #1
 8013d22:	f7ff ff03 	bl	8013b2c <_Balloc>
 8013d26:	4602      	mov	r2, r0
 8013d28:	b928      	cbnz	r0, 8013d36 <__i2b+0x1a>
 8013d2a:	4b05      	ldr	r3, [pc, #20]	; (8013d40 <__i2b+0x24>)
 8013d2c:	4805      	ldr	r0, [pc, #20]	; (8013d44 <__i2b+0x28>)
 8013d2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013d32:	f000 fed9 	bl	8014ae8 <__assert_func>
 8013d36:	2301      	movs	r3, #1
 8013d38:	6144      	str	r4, [r0, #20]
 8013d3a:	6103      	str	r3, [r0, #16]
 8013d3c:	bd10      	pop	{r4, pc}
 8013d3e:	bf00      	nop
 8013d40:	0801506f 	.word	0x0801506f
 8013d44:	080150e0 	.word	0x080150e0

08013d48 <__multiply>:
 8013d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d4c:	4691      	mov	r9, r2
 8013d4e:	690a      	ldr	r2, [r1, #16]
 8013d50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013d54:	429a      	cmp	r2, r3
 8013d56:	bfb8      	it	lt
 8013d58:	460b      	movlt	r3, r1
 8013d5a:	460c      	mov	r4, r1
 8013d5c:	bfbc      	itt	lt
 8013d5e:	464c      	movlt	r4, r9
 8013d60:	4699      	movlt	r9, r3
 8013d62:	6927      	ldr	r7, [r4, #16]
 8013d64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013d68:	68a3      	ldr	r3, [r4, #8]
 8013d6a:	6861      	ldr	r1, [r4, #4]
 8013d6c:	eb07 060a 	add.w	r6, r7, sl
 8013d70:	42b3      	cmp	r3, r6
 8013d72:	b085      	sub	sp, #20
 8013d74:	bfb8      	it	lt
 8013d76:	3101      	addlt	r1, #1
 8013d78:	f7ff fed8 	bl	8013b2c <_Balloc>
 8013d7c:	b930      	cbnz	r0, 8013d8c <__multiply+0x44>
 8013d7e:	4602      	mov	r2, r0
 8013d80:	4b44      	ldr	r3, [pc, #272]	; (8013e94 <__multiply+0x14c>)
 8013d82:	4845      	ldr	r0, [pc, #276]	; (8013e98 <__multiply+0x150>)
 8013d84:	f240 115d 	movw	r1, #349	; 0x15d
 8013d88:	f000 feae 	bl	8014ae8 <__assert_func>
 8013d8c:	f100 0514 	add.w	r5, r0, #20
 8013d90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013d94:	462b      	mov	r3, r5
 8013d96:	2200      	movs	r2, #0
 8013d98:	4543      	cmp	r3, r8
 8013d9a:	d321      	bcc.n	8013de0 <__multiply+0x98>
 8013d9c:	f104 0314 	add.w	r3, r4, #20
 8013da0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013da4:	f109 0314 	add.w	r3, r9, #20
 8013da8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013dac:	9202      	str	r2, [sp, #8]
 8013dae:	1b3a      	subs	r2, r7, r4
 8013db0:	3a15      	subs	r2, #21
 8013db2:	f022 0203 	bic.w	r2, r2, #3
 8013db6:	3204      	adds	r2, #4
 8013db8:	f104 0115 	add.w	r1, r4, #21
 8013dbc:	428f      	cmp	r7, r1
 8013dbe:	bf38      	it	cc
 8013dc0:	2204      	movcc	r2, #4
 8013dc2:	9201      	str	r2, [sp, #4]
 8013dc4:	9a02      	ldr	r2, [sp, #8]
 8013dc6:	9303      	str	r3, [sp, #12]
 8013dc8:	429a      	cmp	r2, r3
 8013dca:	d80c      	bhi.n	8013de6 <__multiply+0x9e>
 8013dcc:	2e00      	cmp	r6, #0
 8013dce:	dd03      	ble.n	8013dd8 <__multiply+0x90>
 8013dd0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d05a      	beq.n	8013e8e <__multiply+0x146>
 8013dd8:	6106      	str	r6, [r0, #16]
 8013dda:	b005      	add	sp, #20
 8013ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013de0:	f843 2b04 	str.w	r2, [r3], #4
 8013de4:	e7d8      	b.n	8013d98 <__multiply+0x50>
 8013de6:	f8b3 a000 	ldrh.w	sl, [r3]
 8013dea:	f1ba 0f00 	cmp.w	sl, #0
 8013dee:	d024      	beq.n	8013e3a <__multiply+0xf2>
 8013df0:	f104 0e14 	add.w	lr, r4, #20
 8013df4:	46a9      	mov	r9, r5
 8013df6:	f04f 0c00 	mov.w	ip, #0
 8013dfa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013dfe:	f8d9 1000 	ldr.w	r1, [r9]
 8013e02:	fa1f fb82 	uxth.w	fp, r2
 8013e06:	b289      	uxth	r1, r1
 8013e08:	fb0a 110b 	mla	r1, sl, fp, r1
 8013e0c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013e10:	f8d9 2000 	ldr.w	r2, [r9]
 8013e14:	4461      	add	r1, ip
 8013e16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013e1a:	fb0a c20b 	mla	r2, sl, fp, ip
 8013e1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013e22:	b289      	uxth	r1, r1
 8013e24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013e28:	4577      	cmp	r7, lr
 8013e2a:	f849 1b04 	str.w	r1, [r9], #4
 8013e2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013e32:	d8e2      	bhi.n	8013dfa <__multiply+0xb2>
 8013e34:	9a01      	ldr	r2, [sp, #4]
 8013e36:	f845 c002 	str.w	ip, [r5, r2]
 8013e3a:	9a03      	ldr	r2, [sp, #12]
 8013e3c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013e40:	3304      	adds	r3, #4
 8013e42:	f1b9 0f00 	cmp.w	r9, #0
 8013e46:	d020      	beq.n	8013e8a <__multiply+0x142>
 8013e48:	6829      	ldr	r1, [r5, #0]
 8013e4a:	f104 0c14 	add.w	ip, r4, #20
 8013e4e:	46ae      	mov	lr, r5
 8013e50:	f04f 0a00 	mov.w	sl, #0
 8013e54:	f8bc b000 	ldrh.w	fp, [ip]
 8013e58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013e5c:	fb09 220b 	mla	r2, r9, fp, r2
 8013e60:	4492      	add	sl, r2
 8013e62:	b289      	uxth	r1, r1
 8013e64:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013e68:	f84e 1b04 	str.w	r1, [lr], #4
 8013e6c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013e70:	f8be 1000 	ldrh.w	r1, [lr]
 8013e74:	0c12      	lsrs	r2, r2, #16
 8013e76:	fb09 1102 	mla	r1, r9, r2, r1
 8013e7a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013e7e:	4567      	cmp	r7, ip
 8013e80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013e84:	d8e6      	bhi.n	8013e54 <__multiply+0x10c>
 8013e86:	9a01      	ldr	r2, [sp, #4]
 8013e88:	50a9      	str	r1, [r5, r2]
 8013e8a:	3504      	adds	r5, #4
 8013e8c:	e79a      	b.n	8013dc4 <__multiply+0x7c>
 8013e8e:	3e01      	subs	r6, #1
 8013e90:	e79c      	b.n	8013dcc <__multiply+0x84>
 8013e92:	bf00      	nop
 8013e94:	0801506f 	.word	0x0801506f
 8013e98:	080150e0 	.word	0x080150e0

08013e9c <__pow5mult>:
 8013e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ea0:	4615      	mov	r5, r2
 8013ea2:	f012 0203 	ands.w	r2, r2, #3
 8013ea6:	4606      	mov	r6, r0
 8013ea8:	460f      	mov	r7, r1
 8013eaa:	d007      	beq.n	8013ebc <__pow5mult+0x20>
 8013eac:	4c25      	ldr	r4, [pc, #148]	; (8013f44 <__pow5mult+0xa8>)
 8013eae:	3a01      	subs	r2, #1
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013eb6:	f7ff fe9b 	bl	8013bf0 <__multadd>
 8013eba:	4607      	mov	r7, r0
 8013ebc:	10ad      	asrs	r5, r5, #2
 8013ebe:	d03d      	beq.n	8013f3c <__pow5mult+0xa0>
 8013ec0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013ec2:	b97c      	cbnz	r4, 8013ee4 <__pow5mult+0x48>
 8013ec4:	2010      	movs	r0, #16
 8013ec6:	f7ff fe29 	bl	8013b1c <malloc>
 8013eca:	4602      	mov	r2, r0
 8013ecc:	6270      	str	r0, [r6, #36]	; 0x24
 8013ece:	b928      	cbnz	r0, 8013edc <__pow5mult+0x40>
 8013ed0:	4b1d      	ldr	r3, [pc, #116]	; (8013f48 <__pow5mult+0xac>)
 8013ed2:	481e      	ldr	r0, [pc, #120]	; (8013f4c <__pow5mult+0xb0>)
 8013ed4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013ed8:	f000 fe06 	bl	8014ae8 <__assert_func>
 8013edc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013ee0:	6004      	str	r4, [r0, #0]
 8013ee2:	60c4      	str	r4, [r0, #12]
 8013ee4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013ee8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013eec:	b94c      	cbnz	r4, 8013f02 <__pow5mult+0x66>
 8013eee:	f240 2171 	movw	r1, #625	; 0x271
 8013ef2:	4630      	mov	r0, r6
 8013ef4:	f7ff ff12 	bl	8013d1c <__i2b>
 8013ef8:	2300      	movs	r3, #0
 8013efa:	f8c8 0008 	str.w	r0, [r8, #8]
 8013efe:	4604      	mov	r4, r0
 8013f00:	6003      	str	r3, [r0, #0]
 8013f02:	f04f 0900 	mov.w	r9, #0
 8013f06:	07eb      	lsls	r3, r5, #31
 8013f08:	d50a      	bpl.n	8013f20 <__pow5mult+0x84>
 8013f0a:	4639      	mov	r1, r7
 8013f0c:	4622      	mov	r2, r4
 8013f0e:	4630      	mov	r0, r6
 8013f10:	f7ff ff1a 	bl	8013d48 <__multiply>
 8013f14:	4639      	mov	r1, r7
 8013f16:	4680      	mov	r8, r0
 8013f18:	4630      	mov	r0, r6
 8013f1a:	f7ff fe47 	bl	8013bac <_Bfree>
 8013f1e:	4647      	mov	r7, r8
 8013f20:	106d      	asrs	r5, r5, #1
 8013f22:	d00b      	beq.n	8013f3c <__pow5mult+0xa0>
 8013f24:	6820      	ldr	r0, [r4, #0]
 8013f26:	b938      	cbnz	r0, 8013f38 <__pow5mult+0x9c>
 8013f28:	4622      	mov	r2, r4
 8013f2a:	4621      	mov	r1, r4
 8013f2c:	4630      	mov	r0, r6
 8013f2e:	f7ff ff0b 	bl	8013d48 <__multiply>
 8013f32:	6020      	str	r0, [r4, #0]
 8013f34:	f8c0 9000 	str.w	r9, [r0]
 8013f38:	4604      	mov	r4, r0
 8013f3a:	e7e4      	b.n	8013f06 <__pow5mult+0x6a>
 8013f3c:	4638      	mov	r0, r7
 8013f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f42:	bf00      	nop
 8013f44:	08015230 	.word	0x08015230
 8013f48:	08014ffd 	.word	0x08014ffd
 8013f4c:	080150e0 	.word	0x080150e0

08013f50 <__lshift>:
 8013f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f54:	460c      	mov	r4, r1
 8013f56:	6849      	ldr	r1, [r1, #4]
 8013f58:	6923      	ldr	r3, [r4, #16]
 8013f5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013f5e:	68a3      	ldr	r3, [r4, #8]
 8013f60:	4607      	mov	r7, r0
 8013f62:	4691      	mov	r9, r2
 8013f64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013f68:	f108 0601 	add.w	r6, r8, #1
 8013f6c:	42b3      	cmp	r3, r6
 8013f6e:	db0b      	blt.n	8013f88 <__lshift+0x38>
 8013f70:	4638      	mov	r0, r7
 8013f72:	f7ff fddb 	bl	8013b2c <_Balloc>
 8013f76:	4605      	mov	r5, r0
 8013f78:	b948      	cbnz	r0, 8013f8e <__lshift+0x3e>
 8013f7a:	4602      	mov	r2, r0
 8013f7c:	4b2a      	ldr	r3, [pc, #168]	; (8014028 <__lshift+0xd8>)
 8013f7e:	482b      	ldr	r0, [pc, #172]	; (801402c <__lshift+0xdc>)
 8013f80:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013f84:	f000 fdb0 	bl	8014ae8 <__assert_func>
 8013f88:	3101      	adds	r1, #1
 8013f8a:	005b      	lsls	r3, r3, #1
 8013f8c:	e7ee      	b.n	8013f6c <__lshift+0x1c>
 8013f8e:	2300      	movs	r3, #0
 8013f90:	f100 0114 	add.w	r1, r0, #20
 8013f94:	f100 0210 	add.w	r2, r0, #16
 8013f98:	4618      	mov	r0, r3
 8013f9a:	4553      	cmp	r3, sl
 8013f9c:	db37      	blt.n	801400e <__lshift+0xbe>
 8013f9e:	6920      	ldr	r0, [r4, #16]
 8013fa0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013fa4:	f104 0314 	add.w	r3, r4, #20
 8013fa8:	f019 091f 	ands.w	r9, r9, #31
 8013fac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013fb0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013fb4:	d02f      	beq.n	8014016 <__lshift+0xc6>
 8013fb6:	f1c9 0e20 	rsb	lr, r9, #32
 8013fba:	468a      	mov	sl, r1
 8013fbc:	f04f 0c00 	mov.w	ip, #0
 8013fc0:	681a      	ldr	r2, [r3, #0]
 8013fc2:	fa02 f209 	lsl.w	r2, r2, r9
 8013fc6:	ea42 020c 	orr.w	r2, r2, ip
 8013fca:	f84a 2b04 	str.w	r2, [sl], #4
 8013fce:	f853 2b04 	ldr.w	r2, [r3], #4
 8013fd2:	4298      	cmp	r0, r3
 8013fd4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013fd8:	d8f2      	bhi.n	8013fc0 <__lshift+0x70>
 8013fda:	1b03      	subs	r3, r0, r4
 8013fdc:	3b15      	subs	r3, #21
 8013fde:	f023 0303 	bic.w	r3, r3, #3
 8013fe2:	3304      	adds	r3, #4
 8013fe4:	f104 0215 	add.w	r2, r4, #21
 8013fe8:	4290      	cmp	r0, r2
 8013fea:	bf38      	it	cc
 8013fec:	2304      	movcc	r3, #4
 8013fee:	f841 c003 	str.w	ip, [r1, r3]
 8013ff2:	f1bc 0f00 	cmp.w	ip, #0
 8013ff6:	d001      	beq.n	8013ffc <__lshift+0xac>
 8013ff8:	f108 0602 	add.w	r6, r8, #2
 8013ffc:	3e01      	subs	r6, #1
 8013ffe:	4638      	mov	r0, r7
 8014000:	612e      	str	r6, [r5, #16]
 8014002:	4621      	mov	r1, r4
 8014004:	f7ff fdd2 	bl	8013bac <_Bfree>
 8014008:	4628      	mov	r0, r5
 801400a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801400e:	f842 0f04 	str.w	r0, [r2, #4]!
 8014012:	3301      	adds	r3, #1
 8014014:	e7c1      	b.n	8013f9a <__lshift+0x4a>
 8014016:	3904      	subs	r1, #4
 8014018:	f853 2b04 	ldr.w	r2, [r3], #4
 801401c:	f841 2f04 	str.w	r2, [r1, #4]!
 8014020:	4298      	cmp	r0, r3
 8014022:	d8f9      	bhi.n	8014018 <__lshift+0xc8>
 8014024:	e7ea      	b.n	8013ffc <__lshift+0xac>
 8014026:	bf00      	nop
 8014028:	0801506f 	.word	0x0801506f
 801402c:	080150e0 	.word	0x080150e0

08014030 <__mcmp>:
 8014030:	b530      	push	{r4, r5, lr}
 8014032:	6902      	ldr	r2, [r0, #16]
 8014034:	690c      	ldr	r4, [r1, #16]
 8014036:	1b12      	subs	r2, r2, r4
 8014038:	d10e      	bne.n	8014058 <__mcmp+0x28>
 801403a:	f100 0314 	add.w	r3, r0, #20
 801403e:	3114      	adds	r1, #20
 8014040:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014044:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014048:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801404c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014050:	42a5      	cmp	r5, r4
 8014052:	d003      	beq.n	801405c <__mcmp+0x2c>
 8014054:	d305      	bcc.n	8014062 <__mcmp+0x32>
 8014056:	2201      	movs	r2, #1
 8014058:	4610      	mov	r0, r2
 801405a:	bd30      	pop	{r4, r5, pc}
 801405c:	4283      	cmp	r3, r0
 801405e:	d3f3      	bcc.n	8014048 <__mcmp+0x18>
 8014060:	e7fa      	b.n	8014058 <__mcmp+0x28>
 8014062:	f04f 32ff 	mov.w	r2, #4294967295
 8014066:	e7f7      	b.n	8014058 <__mcmp+0x28>

08014068 <__mdiff>:
 8014068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801406c:	460c      	mov	r4, r1
 801406e:	4606      	mov	r6, r0
 8014070:	4611      	mov	r1, r2
 8014072:	4620      	mov	r0, r4
 8014074:	4690      	mov	r8, r2
 8014076:	f7ff ffdb 	bl	8014030 <__mcmp>
 801407a:	1e05      	subs	r5, r0, #0
 801407c:	d110      	bne.n	80140a0 <__mdiff+0x38>
 801407e:	4629      	mov	r1, r5
 8014080:	4630      	mov	r0, r6
 8014082:	f7ff fd53 	bl	8013b2c <_Balloc>
 8014086:	b930      	cbnz	r0, 8014096 <__mdiff+0x2e>
 8014088:	4b3a      	ldr	r3, [pc, #232]	; (8014174 <__mdiff+0x10c>)
 801408a:	4602      	mov	r2, r0
 801408c:	f240 2132 	movw	r1, #562	; 0x232
 8014090:	4839      	ldr	r0, [pc, #228]	; (8014178 <__mdiff+0x110>)
 8014092:	f000 fd29 	bl	8014ae8 <__assert_func>
 8014096:	2301      	movs	r3, #1
 8014098:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801409c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140a0:	bfa4      	itt	ge
 80140a2:	4643      	movge	r3, r8
 80140a4:	46a0      	movge	r8, r4
 80140a6:	4630      	mov	r0, r6
 80140a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80140ac:	bfa6      	itte	ge
 80140ae:	461c      	movge	r4, r3
 80140b0:	2500      	movge	r5, #0
 80140b2:	2501      	movlt	r5, #1
 80140b4:	f7ff fd3a 	bl	8013b2c <_Balloc>
 80140b8:	b920      	cbnz	r0, 80140c4 <__mdiff+0x5c>
 80140ba:	4b2e      	ldr	r3, [pc, #184]	; (8014174 <__mdiff+0x10c>)
 80140bc:	4602      	mov	r2, r0
 80140be:	f44f 7110 	mov.w	r1, #576	; 0x240
 80140c2:	e7e5      	b.n	8014090 <__mdiff+0x28>
 80140c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80140c8:	6926      	ldr	r6, [r4, #16]
 80140ca:	60c5      	str	r5, [r0, #12]
 80140cc:	f104 0914 	add.w	r9, r4, #20
 80140d0:	f108 0514 	add.w	r5, r8, #20
 80140d4:	f100 0e14 	add.w	lr, r0, #20
 80140d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80140dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80140e0:	f108 0210 	add.w	r2, r8, #16
 80140e4:	46f2      	mov	sl, lr
 80140e6:	2100      	movs	r1, #0
 80140e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80140ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80140f0:	fa1f f883 	uxth.w	r8, r3
 80140f4:	fa11 f18b 	uxtah	r1, r1, fp
 80140f8:	0c1b      	lsrs	r3, r3, #16
 80140fa:	eba1 0808 	sub.w	r8, r1, r8
 80140fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014102:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014106:	fa1f f888 	uxth.w	r8, r8
 801410a:	1419      	asrs	r1, r3, #16
 801410c:	454e      	cmp	r6, r9
 801410e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014112:	f84a 3b04 	str.w	r3, [sl], #4
 8014116:	d8e7      	bhi.n	80140e8 <__mdiff+0x80>
 8014118:	1b33      	subs	r3, r6, r4
 801411a:	3b15      	subs	r3, #21
 801411c:	f023 0303 	bic.w	r3, r3, #3
 8014120:	3304      	adds	r3, #4
 8014122:	3415      	adds	r4, #21
 8014124:	42a6      	cmp	r6, r4
 8014126:	bf38      	it	cc
 8014128:	2304      	movcc	r3, #4
 801412a:	441d      	add	r5, r3
 801412c:	4473      	add	r3, lr
 801412e:	469e      	mov	lr, r3
 8014130:	462e      	mov	r6, r5
 8014132:	4566      	cmp	r6, ip
 8014134:	d30e      	bcc.n	8014154 <__mdiff+0xec>
 8014136:	f10c 0203 	add.w	r2, ip, #3
 801413a:	1b52      	subs	r2, r2, r5
 801413c:	f022 0203 	bic.w	r2, r2, #3
 8014140:	3d03      	subs	r5, #3
 8014142:	45ac      	cmp	ip, r5
 8014144:	bf38      	it	cc
 8014146:	2200      	movcc	r2, #0
 8014148:	441a      	add	r2, r3
 801414a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801414e:	b17b      	cbz	r3, 8014170 <__mdiff+0x108>
 8014150:	6107      	str	r7, [r0, #16]
 8014152:	e7a3      	b.n	801409c <__mdiff+0x34>
 8014154:	f856 8b04 	ldr.w	r8, [r6], #4
 8014158:	fa11 f288 	uxtah	r2, r1, r8
 801415c:	1414      	asrs	r4, r2, #16
 801415e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014162:	b292      	uxth	r2, r2
 8014164:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014168:	f84e 2b04 	str.w	r2, [lr], #4
 801416c:	1421      	asrs	r1, r4, #16
 801416e:	e7e0      	b.n	8014132 <__mdiff+0xca>
 8014170:	3f01      	subs	r7, #1
 8014172:	e7ea      	b.n	801414a <__mdiff+0xe2>
 8014174:	0801506f 	.word	0x0801506f
 8014178:	080150e0 	.word	0x080150e0

0801417c <__d2b>:
 801417c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014180:	4689      	mov	r9, r1
 8014182:	2101      	movs	r1, #1
 8014184:	ec57 6b10 	vmov	r6, r7, d0
 8014188:	4690      	mov	r8, r2
 801418a:	f7ff fccf 	bl	8013b2c <_Balloc>
 801418e:	4604      	mov	r4, r0
 8014190:	b930      	cbnz	r0, 80141a0 <__d2b+0x24>
 8014192:	4602      	mov	r2, r0
 8014194:	4b25      	ldr	r3, [pc, #148]	; (801422c <__d2b+0xb0>)
 8014196:	4826      	ldr	r0, [pc, #152]	; (8014230 <__d2b+0xb4>)
 8014198:	f240 310a 	movw	r1, #778	; 0x30a
 801419c:	f000 fca4 	bl	8014ae8 <__assert_func>
 80141a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80141a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80141a8:	bb35      	cbnz	r5, 80141f8 <__d2b+0x7c>
 80141aa:	2e00      	cmp	r6, #0
 80141ac:	9301      	str	r3, [sp, #4]
 80141ae:	d028      	beq.n	8014202 <__d2b+0x86>
 80141b0:	4668      	mov	r0, sp
 80141b2:	9600      	str	r6, [sp, #0]
 80141b4:	f7ff fd82 	bl	8013cbc <__lo0bits>
 80141b8:	9900      	ldr	r1, [sp, #0]
 80141ba:	b300      	cbz	r0, 80141fe <__d2b+0x82>
 80141bc:	9a01      	ldr	r2, [sp, #4]
 80141be:	f1c0 0320 	rsb	r3, r0, #32
 80141c2:	fa02 f303 	lsl.w	r3, r2, r3
 80141c6:	430b      	orrs	r3, r1
 80141c8:	40c2      	lsrs	r2, r0
 80141ca:	6163      	str	r3, [r4, #20]
 80141cc:	9201      	str	r2, [sp, #4]
 80141ce:	9b01      	ldr	r3, [sp, #4]
 80141d0:	61a3      	str	r3, [r4, #24]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	bf14      	ite	ne
 80141d6:	2202      	movne	r2, #2
 80141d8:	2201      	moveq	r2, #1
 80141da:	6122      	str	r2, [r4, #16]
 80141dc:	b1d5      	cbz	r5, 8014214 <__d2b+0x98>
 80141de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80141e2:	4405      	add	r5, r0
 80141e4:	f8c9 5000 	str.w	r5, [r9]
 80141e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80141ec:	f8c8 0000 	str.w	r0, [r8]
 80141f0:	4620      	mov	r0, r4
 80141f2:	b003      	add	sp, #12
 80141f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80141fc:	e7d5      	b.n	80141aa <__d2b+0x2e>
 80141fe:	6161      	str	r1, [r4, #20]
 8014200:	e7e5      	b.n	80141ce <__d2b+0x52>
 8014202:	a801      	add	r0, sp, #4
 8014204:	f7ff fd5a 	bl	8013cbc <__lo0bits>
 8014208:	9b01      	ldr	r3, [sp, #4]
 801420a:	6163      	str	r3, [r4, #20]
 801420c:	2201      	movs	r2, #1
 801420e:	6122      	str	r2, [r4, #16]
 8014210:	3020      	adds	r0, #32
 8014212:	e7e3      	b.n	80141dc <__d2b+0x60>
 8014214:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014218:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801421c:	f8c9 0000 	str.w	r0, [r9]
 8014220:	6918      	ldr	r0, [r3, #16]
 8014222:	f7ff fd2b 	bl	8013c7c <__hi0bits>
 8014226:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801422a:	e7df      	b.n	80141ec <__d2b+0x70>
 801422c:	0801506f 	.word	0x0801506f
 8014230:	080150e0 	.word	0x080150e0

08014234 <_calloc_r>:
 8014234:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014236:	fba1 2402 	umull	r2, r4, r1, r2
 801423a:	b94c      	cbnz	r4, 8014250 <_calloc_r+0x1c>
 801423c:	4611      	mov	r1, r2
 801423e:	9201      	str	r2, [sp, #4]
 8014240:	f000 f87a 	bl	8014338 <_malloc_r>
 8014244:	9a01      	ldr	r2, [sp, #4]
 8014246:	4605      	mov	r5, r0
 8014248:	b930      	cbnz	r0, 8014258 <_calloc_r+0x24>
 801424a:	4628      	mov	r0, r5
 801424c:	b003      	add	sp, #12
 801424e:	bd30      	pop	{r4, r5, pc}
 8014250:	220c      	movs	r2, #12
 8014252:	6002      	str	r2, [r0, #0]
 8014254:	2500      	movs	r5, #0
 8014256:	e7f8      	b.n	801424a <_calloc_r+0x16>
 8014258:	4621      	mov	r1, r4
 801425a:	f7fd fcfd 	bl	8011c58 <memset>
 801425e:	e7f4      	b.n	801424a <_calloc_r+0x16>

08014260 <_free_r>:
 8014260:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014262:	2900      	cmp	r1, #0
 8014264:	d044      	beq.n	80142f0 <_free_r+0x90>
 8014266:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801426a:	9001      	str	r0, [sp, #4]
 801426c:	2b00      	cmp	r3, #0
 801426e:	f1a1 0404 	sub.w	r4, r1, #4
 8014272:	bfb8      	it	lt
 8014274:	18e4      	addlt	r4, r4, r3
 8014276:	f000 fcd7 	bl	8014c28 <__malloc_lock>
 801427a:	4a1e      	ldr	r2, [pc, #120]	; (80142f4 <_free_r+0x94>)
 801427c:	9801      	ldr	r0, [sp, #4]
 801427e:	6813      	ldr	r3, [r2, #0]
 8014280:	b933      	cbnz	r3, 8014290 <_free_r+0x30>
 8014282:	6063      	str	r3, [r4, #4]
 8014284:	6014      	str	r4, [r2, #0]
 8014286:	b003      	add	sp, #12
 8014288:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801428c:	f000 bcd2 	b.w	8014c34 <__malloc_unlock>
 8014290:	42a3      	cmp	r3, r4
 8014292:	d908      	bls.n	80142a6 <_free_r+0x46>
 8014294:	6825      	ldr	r5, [r4, #0]
 8014296:	1961      	adds	r1, r4, r5
 8014298:	428b      	cmp	r3, r1
 801429a:	bf01      	itttt	eq
 801429c:	6819      	ldreq	r1, [r3, #0]
 801429e:	685b      	ldreq	r3, [r3, #4]
 80142a0:	1949      	addeq	r1, r1, r5
 80142a2:	6021      	streq	r1, [r4, #0]
 80142a4:	e7ed      	b.n	8014282 <_free_r+0x22>
 80142a6:	461a      	mov	r2, r3
 80142a8:	685b      	ldr	r3, [r3, #4]
 80142aa:	b10b      	cbz	r3, 80142b0 <_free_r+0x50>
 80142ac:	42a3      	cmp	r3, r4
 80142ae:	d9fa      	bls.n	80142a6 <_free_r+0x46>
 80142b0:	6811      	ldr	r1, [r2, #0]
 80142b2:	1855      	adds	r5, r2, r1
 80142b4:	42a5      	cmp	r5, r4
 80142b6:	d10b      	bne.n	80142d0 <_free_r+0x70>
 80142b8:	6824      	ldr	r4, [r4, #0]
 80142ba:	4421      	add	r1, r4
 80142bc:	1854      	adds	r4, r2, r1
 80142be:	42a3      	cmp	r3, r4
 80142c0:	6011      	str	r1, [r2, #0]
 80142c2:	d1e0      	bne.n	8014286 <_free_r+0x26>
 80142c4:	681c      	ldr	r4, [r3, #0]
 80142c6:	685b      	ldr	r3, [r3, #4]
 80142c8:	6053      	str	r3, [r2, #4]
 80142ca:	4421      	add	r1, r4
 80142cc:	6011      	str	r1, [r2, #0]
 80142ce:	e7da      	b.n	8014286 <_free_r+0x26>
 80142d0:	d902      	bls.n	80142d8 <_free_r+0x78>
 80142d2:	230c      	movs	r3, #12
 80142d4:	6003      	str	r3, [r0, #0]
 80142d6:	e7d6      	b.n	8014286 <_free_r+0x26>
 80142d8:	6825      	ldr	r5, [r4, #0]
 80142da:	1961      	adds	r1, r4, r5
 80142dc:	428b      	cmp	r3, r1
 80142de:	bf04      	itt	eq
 80142e0:	6819      	ldreq	r1, [r3, #0]
 80142e2:	685b      	ldreq	r3, [r3, #4]
 80142e4:	6063      	str	r3, [r4, #4]
 80142e6:	bf04      	itt	eq
 80142e8:	1949      	addeq	r1, r1, r5
 80142ea:	6021      	streq	r1, [r4, #0]
 80142ec:	6054      	str	r4, [r2, #4]
 80142ee:	e7ca      	b.n	8014286 <_free_r+0x26>
 80142f0:	b003      	add	sp, #12
 80142f2:	bd30      	pop	{r4, r5, pc}
 80142f4:	2000cfb8 	.word	0x2000cfb8

080142f8 <sbrk_aligned>:
 80142f8:	b570      	push	{r4, r5, r6, lr}
 80142fa:	4e0e      	ldr	r6, [pc, #56]	; (8014334 <sbrk_aligned+0x3c>)
 80142fc:	460c      	mov	r4, r1
 80142fe:	6831      	ldr	r1, [r6, #0]
 8014300:	4605      	mov	r5, r0
 8014302:	b911      	cbnz	r1, 801430a <sbrk_aligned+0x12>
 8014304:	f000 fb8a 	bl	8014a1c <_sbrk_r>
 8014308:	6030      	str	r0, [r6, #0]
 801430a:	4621      	mov	r1, r4
 801430c:	4628      	mov	r0, r5
 801430e:	f000 fb85 	bl	8014a1c <_sbrk_r>
 8014312:	1c43      	adds	r3, r0, #1
 8014314:	d00a      	beq.n	801432c <sbrk_aligned+0x34>
 8014316:	1cc4      	adds	r4, r0, #3
 8014318:	f024 0403 	bic.w	r4, r4, #3
 801431c:	42a0      	cmp	r0, r4
 801431e:	d007      	beq.n	8014330 <sbrk_aligned+0x38>
 8014320:	1a21      	subs	r1, r4, r0
 8014322:	4628      	mov	r0, r5
 8014324:	f000 fb7a 	bl	8014a1c <_sbrk_r>
 8014328:	3001      	adds	r0, #1
 801432a:	d101      	bne.n	8014330 <sbrk_aligned+0x38>
 801432c:	f04f 34ff 	mov.w	r4, #4294967295
 8014330:	4620      	mov	r0, r4
 8014332:	bd70      	pop	{r4, r5, r6, pc}
 8014334:	2000cfbc 	.word	0x2000cfbc

08014338 <_malloc_r>:
 8014338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801433c:	1ccd      	adds	r5, r1, #3
 801433e:	f025 0503 	bic.w	r5, r5, #3
 8014342:	3508      	adds	r5, #8
 8014344:	2d0c      	cmp	r5, #12
 8014346:	bf38      	it	cc
 8014348:	250c      	movcc	r5, #12
 801434a:	2d00      	cmp	r5, #0
 801434c:	4607      	mov	r7, r0
 801434e:	db01      	blt.n	8014354 <_malloc_r+0x1c>
 8014350:	42a9      	cmp	r1, r5
 8014352:	d905      	bls.n	8014360 <_malloc_r+0x28>
 8014354:	230c      	movs	r3, #12
 8014356:	603b      	str	r3, [r7, #0]
 8014358:	2600      	movs	r6, #0
 801435a:	4630      	mov	r0, r6
 801435c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014360:	4e2e      	ldr	r6, [pc, #184]	; (801441c <_malloc_r+0xe4>)
 8014362:	f000 fc61 	bl	8014c28 <__malloc_lock>
 8014366:	6833      	ldr	r3, [r6, #0]
 8014368:	461c      	mov	r4, r3
 801436a:	bb34      	cbnz	r4, 80143ba <_malloc_r+0x82>
 801436c:	4629      	mov	r1, r5
 801436e:	4638      	mov	r0, r7
 8014370:	f7ff ffc2 	bl	80142f8 <sbrk_aligned>
 8014374:	1c43      	adds	r3, r0, #1
 8014376:	4604      	mov	r4, r0
 8014378:	d14d      	bne.n	8014416 <_malloc_r+0xde>
 801437a:	6834      	ldr	r4, [r6, #0]
 801437c:	4626      	mov	r6, r4
 801437e:	2e00      	cmp	r6, #0
 8014380:	d140      	bne.n	8014404 <_malloc_r+0xcc>
 8014382:	6823      	ldr	r3, [r4, #0]
 8014384:	4631      	mov	r1, r6
 8014386:	4638      	mov	r0, r7
 8014388:	eb04 0803 	add.w	r8, r4, r3
 801438c:	f000 fb46 	bl	8014a1c <_sbrk_r>
 8014390:	4580      	cmp	r8, r0
 8014392:	d13a      	bne.n	801440a <_malloc_r+0xd2>
 8014394:	6821      	ldr	r1, [r4, #0]
 8014396:	3503      	adds	r5, #3
 8014398:	1a6d      	subs	r5, r5, r1
 801439a:	f025 0503 	bic.w	r5, r5, #3
 801439e:	3508      	adds	r5, #8
 80143a0:	2d0c      	cmp	r5, #12
 80143a2:	bf38      	it	cc
 80143a4:	250c      	movcc	r5, #12
 80143a6:	4629      	mov	r1, r5
 80143a8:	4638      	mov	r0, r7
 80143aa:	f7ff ffa5 	bl	80142f8 <sbrk_aligned>
 80143ae:	3001      	adds	r0, #1
 80143b0:	d02b      	beq.n	801440a <_malloc_r+0xd2>
 80143b2:	6823      	ldr	r3, [r4, #0]
 80143b4:	442b      	add	r3, r5
 80143b6:	6023      	str	r3, [r4, #0]
 80143b8:	e00e      	b.n	80143d8 <_malloc_r+0xa0>
 80143ba:	6822      	ldr	r2, [r4, #0]
 80143bc:	1b52      	subs	r2, r2, r5
 80143be:	d41e      	bmi.n	80143fe <_malloc_r+0xc6>
 80143c0:	2a0b      	cmp	r2, #11
 80143c2:	d916      	bls.n	80143f2 <_malloc_r+0xba>
 80143c4:	1961      	adds	r1, r4, r5
 80143c6:	42a3      	cmp	r3, r4
 80143c8:	6025      	str	r5, [r4, #0]
 80143ca:	bf18      	it	ne
 80143cc:	6059      	strne	r1, [r3, #4]
 80143ce:	6863      	ldr	r3, [r4, #4]
 80143d0:	bf08      	it	eq
 80143d2:	6031      	streq	r1, [r6, #0]
 80143d4:	5162      	str	r2, [r4, r5]
 80143d6:	604b      	str	r3, [r1, #4]
 80143d8:	4638      	mov	r0, r7
 80143da:	f104 060b 	add.w	r6, r4, #11
 80143de:	f000 fc29 	bl	8014c34 <__malloc_unlock>
 80143e2:	f026 0607 	bic.w	r6, r6, #7
 80143e6:	1d23      	adds	r3, r4, #4
 80143e8:	1af2      	subs	r2, r6, r3
 80143ea:	d0b6      	beq.n	801435a <_malloc_r+0x22>
 80143ec:	1b9b      	subs	r3, r3, r6
 80143ee:	50a3      	str	r3, [r4, r2]
 80143f0:	e7b3      	b.n	801435a <_malloc_r+0x22>
 80143f2:	6862      	ldr	r2, [r4, #4]
 80143f4:	42a3      	cmp	r3, r4
 80143f6:	bf0c      	ite	eq
 80143f8:	6032      	streq	r2, [r6, #0]
 80143fa:	605a      	strne	r2, [r3, #4]
 80143fc:	e7ec      	b.n	80143d8 <_malloc_r+0xa0>
 80143fe:	4623      	mov	r3, r4
 8014400:	6864      	ldr	r4, [r4, #4]
 8014402:	e7b2      	b.n	801436a <_malloc_r+0x32>
 8014404:	4634      	mov	r4, r6
 8014406:	6876      	ldr	r6, [r6, #4]
 8014408:	e7b9      	b.n	801437e <_malloc_r+0x46>
 801440a:	230c      	movs	r3, #12
 801440c:	603b      	str	r3, [r7, #0]
 801440e:	4638      	mov	r0, r7
 8014410:	f000 fc10 	bl	8014c34 <__malloc_unlock>
 8014414:	e7a1      	b.n	801435a <_malloc_r+0x22>
 8014416:	6025      	str	r5, [r4, #0]
 8014418:	e7de      	b.n	80143d8 <_malloc_r+0xa0>
 801441a:	bf00      	nop
 801441c:	2000cfb8 	.word	0x2000cfb8

08014420 <__ssputs_r>:
 8014420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014424:	688e      	ldr	r6, [r1, #8]
 8014426:	429e      	cmp	r6, r3
 8014428:	4682      	mov	sl, r0
 801442a:	460c      	mov	r4, r1
 801442c:	4690      	mov	r8, r2
 801442e:	461f      	mov	r7, r3
 8014430:	d838      	bhi.n	80144a4 <__ssputs_r+0x84>
 8014432:	898a      	ldrh	r2, [r1, #12]
 8014434:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014438:	d032      	beq.n	80144a0 <__ssputs_r+0x80>
 801443a:	6825      	ldr	r5, [r4, #0]
 801443c:	6909      	ldr	r1, [r1, #16]
 801443e:	eba5 0901 	sub.w	r9, r5, r1
 8014442:	6965      	ldr	r5, [r4, #20]
 8014444:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014448:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801444c:	3301      	adds	r3, #1
 801444e:	444b      	add	r3, r9
 8014450:	106d      	asrs	r5, r5, #1
 8014452:	429d      	cmp	r5, r3
 8014454:	bf38      	it	cc
 8014456:	461d      	movcc	r5, r3
 8014458:	0553      	lsls	r3, r2, #21
 801445a:	d531      	bpl.n	80144c0 <__ssputs_r+0xa0>
 801445c:	4629      	mov	r1, r5
 801445e:	f7ff ff6b 	bl	8014338 <_malloc_r>
 8014462:	4606      	mov	r6, r0
 8014464:	b950      	cbnz	r0, 801447c <__ssputs_r+0x5c>
 8014466:	230c      	movs	r3, #12
 8014468:	f8ca 3000 	str.w	r3, [sl]
 801446c:	89a3      	ldrh	r3, [r4, #12]
 801446e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014472:	81a3      	strh	r3, [r4, #12]
 8014474:	f04f 30ff 	mov.w	r0, #4294967295
 8014478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801447c:	6921      	ldr	r1, [r4, #16]
 801447e:	464a      	mov	r2, r9
 8014480:	f7fd fbdc 	bl	8011c3c <memcpy>
 8014484:	89a3      	ldrh	r3, [r4, #12]
 8014486:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801448a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801448e:	81a3      	strh	r3, [r4, #12]
 8014490:	6126      	str	r6, [r4, #16]
 8014492:	6165      	str	r5, [r4, #20]
 8014494:	444e      	add	r6, r9
 8014496:	eba5 0509 	sub.w	r5, r5, r9
 801449a:	6026      	str	r6, [r4, #0]
 801449c:	60a5      	str	r5, [r4, #8]
 801449e:	463e      	mov	r6, r7
 80144a0:	42be      	cmp	r6, r7
 80144a2:	d900      	bls.n	80144a6 <__ssputs_r+0x86>
 80144a4:	463e      	mov	r6, r7
 80144a6:	6820      	ldr	r0, [r4, #0]
 80144a8:	4632      	mov	r2, r6
 80144aa:	4641      	mov	r1, r8
 80144ac:	f000 fba2 	bl	8014bf4 <memmove>
 80144b0:	68a3      	ldr	r3, [r4, #8]
 80144b2:	1b9b      	subs	r3, r3, r6
 80144b4:	60a3      	str	r3, [r4, #8]
 80144b6:	6823      	ldr	r3, [r4, #0]
 80144b8:	4433      	add	r3, r6
 80144ba:	6023      	str	r3, [r4, #0]
 80144bc:	2000      	movs	r0, #0
 80144be:	e7db      	b.n	8014478 <__ssputs_r+0x58>
 80144c0:	462a      	mov	r2, r5
 80144c2:	f000 fbbd 	bl	8014c40 <_realloc_r>
 80144c6:	4606      	mov	r6, r0
 80144c8:	2800      	cmp	r0, #0
 80144ca:	d1e1      	bne.n	8014490 <__ssputs_r+0x70>
 80144cc:	6921      	ldr	r1, [r4, #16]
 80144ce:	4650      	mov	r0, sl
 80144d0:	f7ff fec6 	bl	8014260 <_free_r>
 80144d4:	e7c7      	b.n	8014466 <__ssputs_r+0x46>
	...

080144d8 <_svfiprintf_r>:
 80144d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144dc:	4698      	mov	r8, r3
 80144de:	898b      	ldrh	r3, [r1, #12]
 80144e0:	061b      	lsls	r3, r3, #24
 80144e2:	b09d      	sub	sp, #116	; 0x74
 80144e4:	4607      	mov	r7, r0
 80144e6:	460d      	mov	r5, r1
 80144e8:	4614      	mov	r4, r2
 80144ea:	d50e      	bpl.n	801450a <_svfiprintf_r+0x32>
 80144ec:	690b      	ldr	r3, [r1, #16]
 80144ee:	b963      	cbnz	r3, 801450a <_svfiprintf_r+0x32>
 80144f0:	2140      	movs	r1, #64	; 0x40
 80144f2:	f7ff ff21 	bl	8014338 <_malloc_r>
 80144f6:	6028      	str	r0, [r5, #0]
 80144f8:	6128      	str	r0, [r5, #16]
 80144fa:	b920      	cbnz	r0, 8014506 <_svfiprintf_r+0x2e>
 80144fc:	230c      	movs	r3, #12
 80144fe:	603b      	str	r3, [r7, #0]
 8014500:	f04f 30ff 	mov.w	r0, #4294967295
 8014504:	e0d1      	b.n	80146aa <_svfiprintf_r+0x1d2>
 8014506:	2340      	movs	r3, #64	; 0x40
 8014508:	616b      	str	r3, [r5, #20]
 801450a:	2300      	movs	r3, #0
 801450c:	9309      	str	r3, [sp, #36]	; 0x24
 801450e:	2320      	movs	r3, #32
 8014510:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014514:	f8cd 800c 	str.w	r8, [sp, #12]
 8014518:	2330      	movs	r3, #48	; 0x30
 801451a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80146c4 <_svfiprintf_r+0x1ec>
 801451e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014522:	f04f 0901 	mov.w	r9, #1
 8014526:	4623      	mov	r3, r4
 8014528:	469a      	mov	sl, r3
 801452a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801452e:	b10a      	cbz	r2, 8014534 <_svfiprintf_r+0x5c>
 8014530:	2a25      	cmp	r2, #37	; 0x25
 8014532:	d1f9      	bne.n	8014528 <_svfiprintf_r+0x50>
 8014534:	ebba 0b04 	subs.w	fp, sl, r4
 8014538:	d00b      	beq.n	8014552 <_svfiprintf_r+0x7a>
 801453a:	465b      	mov	r3, fp
 801453c:	4622      	mov	r2, r4
 801453e:	4629      	mov	r1, r5
 8014540:	4638      	mov	r0, r7
 8014542:	f7ff ff6d 	bl	8014420 <__ssputs_r>
 8014546:	3001      	adds	r0, #1
 8014548:	f000 80aa 	beq.w	80146a0 <_svfiprintf_r+0x1c8>
 801454c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801454e:	445a      	add	r2, fp
 8014550:	9209      	str	r2, [sp, #36]	; 0x24
 8014552:	f89a 3000 	ldrb.w	r3, [sl]
 8014556:	2b00      	cmp	r3, #0
 8014558:	f000 80a2 	beq.w	80146a0 <_svfiprintf_r+0x1c8>
 801455c:	2300      	movs	r3, #0
 801455e:	f04f 32ff 	mov.w	r2, #4294967295
 8014562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014566:	f10a 0a01 	add.w	sl, sl, #1
 801456a:	9304      	str	r3, [sp, #16]
 801456c:	9307      	str	r3, [sp, #28]
 801456e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014572:	931a      	str	r3, [sp, #104]	; 0x68
 8014574:	4654      	mov	r4, sl
 8014576:	2205      	movs	r2, #5
 8014578:	f814 1b01 	ldrb.w	r1, [r4], #1
 801457c:	4851      	ldr	r0, [pc, #324]	; (80146c4 <_svfiprintf_r+0x1ec>)
 801457e:	f7eb fe2f 	bl	80001e0 <memchr>
 8014582:	9a04      	ldr	r2, [sp, #16]
 8014584:	b9d8      	cbnz	r0, 80145be <_svfiprintf_r+0xe6>
 8014586:	06d0      	lsls	r0, r2, #27
 8014588:	bf44      	itt	mi
 801458a:	2320      	movmi	r3, #32
 801458c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014590:	0711      	lsls	r1, r2, #28
 8014592:	bf44      	itt	mi
 8014594:	232b      	movmi	r3, #43	; 0x2b
 8014596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801459a:	f89a 3000 	ldrb.w	r3, [sl]
 801459e:	2b2a      	cmp	r3, #42	; 0x2a
 80145a0:	d015      	beq.n	80145ce <_svfiprintf_r+0xf6>
 80145a2:	9a07      	ldr	r2, [sp, #28]
 80145a4:	4654      	mov	r4, sl
 80145a6:	2000      	movs	r0, #0
 80145a8:	f04f 0c0a 	mov.w	ip, #10
 80145ac:	4621      	mov	r1, r4
 80145ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80145b2:	3b30      	subs	r3, #48	; 0x30
 80145b4:	2b09      	cmp	r3, #9
 80145b6:	d94e      	bls.n	8014656 <_svfiprintf_r+0x17e>
 80145b8:	b1b0      	cbz	r0, 80145e8 <_svfiprintf_r+0x110>
 80145ba:	9207      	str	r2, [sp, #28]
 80145bc:	e014      	b.n	80145e8 <_svfiprintf_r+0x110>
 80145be:	eba0 0308 	sub.w	r3, r0, r8
 80145c2:	fa09 f303 	lsl.w	r3, r9, r3
 80145c6:	4313      	orrs	r3, r2
 80145c8:	9304      	str	r3, [sp, #16]
 80145ca:	46a2      	mov	sl, r4
 80145cc:	e7d2      	b.n	8014574 <_svfiprintf_r+0x9c>
 80145ce:	9b03      	ldr	r3, [sp, #12]
 80145d0:	1d19      	adds	r1, r3, #4
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	9103      	str	r1, [sp, #12]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	bfbb      	ittet	lt
 80145da:	425b      	neglt	r3, r3
 80145dc:	f042 0202 	orrlt.w	r2, r2, #2
 80145e0:	9307      	strge	r3, [sp, #28]
 80145e2:	9307      	strlt	r3, [sp, #28]
 80145e4:	bfb8      	it	lt
 80145e6:	9204      	strlt	r2, [sp, #16]
 80145e8:	7823      	ldrb	r3, [r4, #0]
 80145ea:	2b2e      	cmp	r3, #46	; 0x2e
 80145ec:	d10c      	bne.n	8014608 <_svfiprintf_r+0x130>
 80145ee:	7863      	ldrb	r3, [r4, #1]
 80145f0:	2b2a      	cmp	r3, #42	; 0x2a
 80145f2:	d135      	bne.n	8014660 <_svfiprintf_r+0x188>
 80145f4:	9b03      	ldr	r3, [sp, #12]
 80145f6:	1d1a      	adds	r2, r3, #4
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	9203      	str	r2, [sp, #12]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	bfb8      	it	lt
 8014600:	f04f 33ff 	movlt.w	r3, #4294967295
 8014604:	3402      	adds	r4, #2
 8014606:	9305      	str	r3, [sp, #20]
 8014608:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80146d4 <_svfiprintf_r+0x1fc>
 801460c:	7821      	ldrb	r1, [r4, #0]
 801460e:	2203      	movs	r2, #3
 8014610:	4650      	mov	r0, sl
 8014612:	f7eb fde5 	bl	80001e0 <memchr>
 8014616:	b140      	cbz	r0, 801462a <_svfiprintf_r+0x152>
 8014618:	2340      	movs	r3, #64	; 0x40
 801461a:	eba0 000a 	sub.w	r0, r0, sl
 801461e:	fa03 f000 	lsl.w	r0, r3, r0
 8014622:	9b04      	ldr	r3, [sp, #16]
 8014624:	4303      	orrs	r3, r0
 8014626:	3401      	adds	r4, #1
 8014628:	9304      	str	r3, [sp, #16]
 801462a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801462e:	4826      	ldr	r0, [pc, #152]	; (80146c8 <_svfiprintf_r+0x1f0>)
 8014630:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014634:	2206      	movs	r2, #6
 8014636:	f7eb fdd3 	bl	80001e0 <memchr>
 801463a:	2800      	cmp	r0, #0
 801463c:	d038      	beq.n	80146b0 <_svfiprintf_r+0x1d8>
 801463e:	4b23      	ldr	r3, [pc, #140]	; (80146cc <_svfiprintf_r+0x1f4>)
 8014640:	bb1b      	cbnz	r3, 801468a <_svfiprintf_r+0x1b2>
 8014642:	9b03      	ldr	r3, [sp, #12]
 8014644:	3307      	adds	r3, #7
 8014646:	f023 0307 	bic.w	r3, r3, #7
 801464a:	3308      	adds	r3, #8
 801464c:	9303      	str	r3, [sp, #12]
 801464e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014650:	4433      	add	r3, r6
 8014652:	9309      	str	r3, [sp, #36]	; 0x24
 8014654:	e767      	b.n	8014526 <_svfiprintf_r+0x4e>
 8014656:	fb0c 3202 	mla	r2, ip, r2, r3
 801465a:	460c      	mov	r4, r1
 801465c:	2001      	movs	r0, #1
 801465e:	e7a5      	b.n	80145ac <_svfiprintf_r+0xd4>
 8014660:	2300      	movs	r3, #0
 8014662:	3401      	adds	r4, #1
 8014664:	9305      	str	r3, [sp, #20]
 8014666:	4619      	mov	r1, r3
 8014668:	f04f 0c0a 	mov.w	ip, #10
 801466c:	4620      	mov	r0, r4
 801466e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014672:	3a30      	subs	r2, #48	; 0x30
 8014674:	2a09      	cmp	r2, #9
 8014676:	d903      	bls.n	8014680 <_svfiprintf_r+0x1a8>
 8014678:	2b00      	cmp	r3, #0
 801467a:	d0c5      	beq.n	8014608 <_svfiprintf_r+0x130>
 801467c:	9105      	str	r1, [sp, #20]
 801467e:	e7c3      	b.n	8014608 <_svfiprintf_r+0x130>
 8014680:	fb0c 2101 	mla	r1, ip, r1, r2
 8014684:	4604      	mov	r4, r0
 8014686:	2301      	movs	r3, #1
 8014688:	e7f0      	b.n	801466c <_svfiprintf_r+0x194>
 801468a:	ab03      	add	r3, sp, #12
 801468c:	9300      	str	r3, [sp, #0]
 801468e:	462a      	mov	r2, r5
 8014690:	4b0f      	ldr	r3, [pc, #60]	; (80146d0 <_svfiprintf_r+0x1f8>)
 8014692:	a904      	add	r1, sp, #16
 8014694:	4638      	mov	r0, r7
 8014696:	f7fd fb87 	bl	8011da8 <_printf_float>
 801469a:	1c42      	adds	r2, r0, #1
 801469c:	4606      	mov	r6, r0
 801469e:	d1d6      	bne.n	801464e <_svfiprintf_r+0x176>
 80146a0:	89ab      	ldrh	r3, [r5, #12]
 80146a2:	065b      	lsls	r3, r3, #25
 80146a4:	f53f af2c 	bmi.w	8014500 <_svfiprintf_r+0x28>
 80146a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80146aa:	b01d      	add	sp, #116	; 0x74
 80146ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146b0:	ab03      	add	r3, sp, #12
 80146b2:	9300      	str	r3, [sp, #0]
 80146b4:	462a      	mov	r2, r5
 80146b6:	4b06      	ldr	r3, [pc, #24]	; (80146d0 <_svfiprintf_r+0x1f8>)
 80146b8:	a904      	add	r1, sp, #16
 80146ba:	4638      	mov	r0, r7
 80146bc:	f7fd fe18 	bl	80122f0 <_printf_i>
 80146c0:	e7eb      	b.n	801469a <_svfiprintf_r+0x1c2>
 80146c2:	bf00      	nop
 80146c4:	0801523c 	.word	0x0801523c
 80146c8:	08015246 	.word	0x08015246
 80146cc:	08011da9 	.word	0x08011da9
 80146d0:	08014421 	.word	0x08014421
 80146d4:	08015242 	.word	0x08015242

080146d8 <__sfputc_r>:
 80146d8:	6893      	ldr	r3, [r2, #8]
 80146da:	3b01      	subs	r3, #1
 80146dc:	2b00      	cmp	r3, #0
 80146de:	b410      	push	{r4}
 80146e0:	6093      	str	r3, [r2, #8]
 80146e2:	da08      	bge.n	80146f6 <__sfputc_r+0x1e>
 80146e4:	6994      	ldr	r4, [r2, #24]
 80146e6:	42a3      	cmp	r3, r4
 80146e8:	db01      	blt.n	80146ee <__sfputc_r+0x16>
 80146ea:	290a      	cmp	r1, #10
 80146ec:	d103      	bne.n	80146f6 <__sfputc_r+0x1e>
 80146ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80146f2:	f7fe b8b5 	b.w	8012860 <__swbuf_r>
 80146f6:	6813      	ldr	r3, [r2, #0]
 80146f8:	1c58      	adds	r0, r3, #1
 80146fa:	6010      	str	r0, [r2, #0]
 80146fc:	7019      	strb	r1, [r3, #0]
 80146fe:	4608      	mov	r0, r1
 8014700:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014704:	4770      	bx	lr

08014706 <__sfputs_r>:
 8014706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014708:	4606      	mov	r6, r0
 801470a:	460f      	mov	r7, r1
 801470c:	4614      	mov	r4, r2
 801470e:	18d5      	adds	r5, r2, r3
 8014710:	42ac      	cmp	r4, r5
 8014712:	d101      	bne.n	8014718 <__sfputs_r+0x12>
 8014714:	2000      	movs	r0, #0
 8014716:	e007      	b.n	8014728 <__sfputs_r+0x22>
 8014718:	f814 1b01 	ldrb.w	r1, [r4], #1
 801471c:	463a      	mov	r2, r7
 801471e:	4630      	mov	r0, r6
 8014720:	f7ff ffda 	bl	80146d8 <__sfputc_r>
 8014724:	1c43      	adds	r3, r0, #1
 8014726:	d1f3      	bne.n	8014710 <__sfputs_r+0xa>
 8014728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801472c <_vfiprintf_r>:
 801472c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014730:	460d      	mov	r5, r1
 8014732:	b09d      	sub	sp, #116	; 0x74
 8014734:	4614      	mov	r4, r2
 8014736:	4698      	mov	r8, r3
 8014738:	4606      	mov	r6, r0
 801473a:	b118      	cbz	r0, 8014744 <_vfiprintf_r+0x18>
 801473c:	6983      	ldr	r3, [r0, #24]
 801473e:	b90b      	cbnz	r3, 8014744 <_vfiprintf_r+0x18>
 8014740:	f7ff f8e2 	bl	8013908 <__sinit>
 8014744:	4b89      	ldr	r3, [pc, #548]	; (801496c <_vfiprintf_r+0x240>)
 8014746:	429d      	cmp	r5, r3
 8014748:	d11b      	bne.n	8014782 <_vfiprintf_r+0x56>
 801474a:	6875      	ldr	r5, [r6, #4]
 801474c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801474e:	07d9      	lsls	r1, r3, #31
 8014750:	d405      	bmi.n	801475e <_vfiprintf_r+0x32>
 8014752:	89ab      	ldrh	r3, [r5, #12]
 8014754:	059a      	lsls	r2, r3, #22
 8014756:	d402      	bmi.n	801475e <_vfiprintf_r+0x32>
 8014758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801475a:	f7ff f978 	bl	8013a4e <__retarget_lock_acquire_recursive>
 801475e:	89ab      	ldrh	r3, [r5, #12]
 8014760:	071b      	lsls	r3, r3, #28
 8014762:	d501      	bpl.n	8014768 <_vfiprintf_r+0x3c>
 8014764:	692b      	ldr	r3, [r5, #16]
 8014766:	b9eb      	cbnz	r3, 80147a4 <_vfiprintf_r+0x78>
 8014768:	4629      	mov	r1, r5
 801476a:	4630      	mov	r0, r6
 801476c:	f7fe f8ca 	bl	8012904 <__swsetup_r>
 8014770:	b1c0      	cbz	r0, 80147a4 <_vfiprintf_r+0x78>
 8014772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014774:	07dc      	lsls	r4, r3, #31
 8014776:	d50e      	bpl.n	8014796 <_vfiprintf_r+0x6a>
 8014778:	f04f 30ff 	mov.w	r0, #4294967295
 801477c:	b01d      	add	sp, #116	; 0x74
 801477e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014782:	4b7b      	ldr	r3, [pc, #492]	; (8014970 <_vfiprintf_r+0x244>)
 8014784:	429d      	cmp	r5, r3
 8014786:	d101      	bne.n	801478c <_vfiprintf_r+0x60>
 8014788:	68b5      	ldr	r5, [r6, #8]
 801478a:	e7df      	b.n	801474c <_vfiprintf_r+0x20>
 801478c:	4b79      	ldr	r3, [pc, #484]	; (8014974 <_vfiprintf_r+0x248>)
 801478e:	429d      	cmp	r5, r3
 8014790:	bf08      	it	eq
 8014792:	68f5      	ldreq	r5, [r6, #12]
 8014794:	e7da      	b.n	801474c <_vfiprintf_r+0x20>
 8014796:	89ab      	ldrh	r3, [r5, #12]
 8014798:	0598      	lsls	r0, r3, #22
 801479a:	d4ed      	bmi.n	8014778 <_vfiprintf_r+0x4c>
 801479c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801479e:	f7ff f957 	bl	8013a50 <__retarget_lock_release_recursive>
 80147a2:	e7e9      	b.n	8014778 <_vfiprintf_r+0x4c>
 80147a4:	2300      	movs	r3, #0
 80147a6:	9309      	str	r3, [sp, #36]	; 0x24
 80147a8:	2320      	movs	r3, #32
 80147aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80147ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80147b2:	2330      	movs	r3, #48	; 0x30
 80147b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014978 <_vfiprintf_r+0x24c>
 80147b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80147bc:	f04f 0901 	mov.w	r9, #1
 80147c0:	4623      	mov	r3, r4
 80147c2:	469a      	mov	sl, r3
 80147c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80147c8:	b10a      	cbz	r2, 80147ce <_vfiprintf_r+0xa2>
 80147ca:	2a25      	cmp	r2, #37	; 0x25
 80147cc:	d1f9      	bne.n	80147c2 <_vfiprintf_r+0x96>
 80147ce:	ebba 0b04 	subs.w	fp, sl, r4
 80147d2:	d00b      	beq.n	80147ec <_vfiprintf_r+0xc0>
 80147d4:	465b      	mov	r3, fp
 80147d6:	4622      	mov	r2, r4
 80147d8:	4629      	mov	r1, r5
 80147da:	4630      	mov	r0, r6
 80147dc:	f7ff ff93 	bl	8014706 <__sfputs_r>
 80147e0:	3001      	adds	r0, #1
 80147e2:	f000 80aa 	beq.w	801493a <_vfiprintf_r+0x20e>
 80147e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80147e8:	445a      	add	r2, fp
 80147ea:	9209      	str	r2, [sp, #36]	; 0x24
 80147ec:	f89a 3000 	ldrb.w	r3, [sl]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	f000 80a2 	beq.w	801493a <_vfiprintf_r+0x20e>
 80147f6:	2300      	movs	r3, #0
 80147f8:	f04f 32ff 	mov.w	r2, #4294967295
 80147fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014800:	f10a 0a01 	add.w	sl, sl, #1
 8014804:	9304      	str	r3, [sp, #16]
 8014806:	9307      	str	r3, [sp, #28]
 8014808:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801480c:	931a      	str	r3, [sp, #104]	; 0x68
 801480e:	4654      	mov	r4, sl
 8014810:	2205      	movs	r2, #5
 8014812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014816:	4858      	ldr	r0, [pc, #352]	; (8014978 <_vfiprintf_r+0x24c>)
 8014818:	f7eb fce2 	bl	80001e0 <memchr>
 801481c:	9a04      	ldr	r2, [sp, #16]
 801481e:	b9d8      	cbnz	r0, 8014858 <_vfiprintf_r+0x12c>
 8014820:	06d1      	lsls	r1, r2, #27
 8014822:	bf44      	itt	mi
 8014824:	2320      	movmi	r3, #32
 8014826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801482a:	0713      	lsls	r3, r2, #28
 801482c:	bf44      	itt	mi
 801482e:	232b      	movmi	r3, #43	; 0x2b
 8014830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014834:	f89a 3000 	ldrb.w	r3, [sl]
 8014838:	2b2a      	cmp	r3, #42	; 0x2a
 801483a:	d015      	beq.n	8014868 <_vfiprintf_r+0x13c>
 801483c:	9a07      	ldr	r2, [sp, #28]
 801483e:	4654      	mov	r4, sl
 8014840:	2000      	movs	r0, #0
 8014842:	f04f 0c0a 	mov.w	ip, #10
 8014846:	4621      	mov	r1, r4
 8014848:	f811 3b01 	ldrb.w	r3, [r1], #1
 801484c:	3b30      	subs	r3, #48	; 0x30
 801484e:	2b09      	cmp	r3, #9
 8014850:	d94e      	bls.n	80148f0 <_vfiprintf_r+0x1c4>
 8014852:	b1b0      	cbz	r0, 8014882 <_vfiprintf_r+0x156>
 8014854:	9207      	str	r2, [sp, #28]
 8014856:	e014      	b.n	8014882 <_vfiprintf_r+0x156>
 8014858:	eba0 0308 	sub.w	r3, r0, r8
 801485c:	fa09 f303 	lsl.w	r3, r9, r3
 8014860:	4313      	orrs	r3, r2
 8014862:	9304      	str	r3, [sp, #16]
 8014864:	46a2      	mov	sl, r4
 8014866:	e7d2      	b.n	801480e <_vfiprintf_r+0xe2>
 8014868:	9b03      	ldr	r3, [sp, #12]
 801486a:	1d19      	adds	r1, r3, #4
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	9103      	str	r1, [sp, #12]
 8014870:	2b00      	cmp	r3, #0
 8014872:	bfbb      	ittet	lt
 8014874:	425b      	neglt	r3, r3
 8014876:	f042 0202 	orrlt.w	r2, r2, #2
 801487a:	9307      	strge	r3, [sp, #28]
 801487c:	9307      	strlt	r3, [sp, #28]
 801487e:	bfb8      	it	lt
 8014880:	9204      	strlt	r2, [sp, #16]
 8014882:	7823      	ldrb	r3, [r4, #0]
 8014884:	2b2e      	cmp	r3, #46	; 0x2e
 8014886:	d10c      	bne.n	80148a2 <_vfiprintf_r+0x176>
 8014888:	7863      	ldrb	r3, [r4, #1]
 801488a:	2b2a      	cmp	r3, #42	; 0x2a
 801488c:	d135      	bne.n	80148fa <_vfiprintf_r+0x1ce>
 801488e:	9b03      	ldr	r3, [sp, #12]
 8014890:	1d1a      	adds	r2, r3, #4
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	9203      	str	r2, [sp, #12]
 8014896:	2b00      	cmp	r3, #0
 8014898:	bfb8      	it	lt
 801489a:	f04f 33ff 	movlt.w	r3, #4294967295
 801489e:	3402      	adds	r4, #2
 80148a0:	9305      	str	r3, [sp, #20]
 80148a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014988 <_vfiprintf_r+0x25c>
 80148a6:	7821      	ldrb	r1, [r4, #0]
 80148a8:	2203      	movs	r2, #3
 80148aa:	4650      	mov	r0, sl
 80148ac:	f7eb fc98 	bl	80001e0 <memchr>
 80148b0:	b140      	cbz	r0, 80148c4 <_vfiprintf_r+0x198>
 80148b2:	2340      	movs	r3, #64	; 0x40
 80148b4:	eba0 000a 	sub.w	r0, r0, sl
 80148b8:	fa03 f000 	lsl.w	r0, r3, r0
 80148bc:	9b04      	ldr	r3, [sp, #16]
 80148be:	4303      	orrs	r3, r0
 80148c0:	3401      	adds	r4, #1
 80148c2:	9304      	str	r3, [sp, #16]
 80148c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148c8:	482c      	ldr	r0, [pc, #176]	; (801497c <_vfiprintf_r+0x250>)
 80148ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80148ce:	2206      	movs	r2, #6
 80148d0:	f7eb fc86 	bl	80001e0 <memchr>
 80148d4:	2800      	cmp	r0, #0
 80148d6:	d03f      	beq.n	8014958 <_vfiprintf_r+0x22c>
 80148d8:	4b29      	ldr	r3, [pc, #164]	; (8014980 <_vfiprintf_r+0x254>)
 80148da:	bb1b      	cbnz	r3, 8014924 <_vfiprintf_r+0x1f8>
 80148dc:	9b03      	ldr	r3, [sp, #12]
 80148de:	3307      	adds	r3, #7
 80148e0:	f023 0307 	bic.w	r3, r3, #7
 80148e4:	3308      	adds	r3, #8
 80148e6:	9303      	str	r3, [sp, #12]
 80148e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148ea:	443b      	add	r3, r7
 80148ec:	9309      	str	r3, [sp, #36]	; 0x24
 80148ee:	e767      	b.n	80147c0 <_vfiprintf_r+0x94>
 80148f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80148f4:	460c      	mov	r4, r1
 80148f6:	2001      	movs	r0, #1
 80148f8:	e7a5      	b.n	8014846 <_vfiprintf_r+0x11a>
 80148fa:	2300      	movs	r3, #0
 80148fc:	3401      	adds	r4, #1
 80148fe:	9305      	str	r3, [sp, #20]
 8014900:	4619      	mov	r1, r3
 8014902:	f04f 0c0a 	mov.w	ip, #10
 8014906:	4620      	mov	r0, r4
 8014908:	f810 2b01 	ldrb.w	r2, [r0], #1
 801490c:	3a30      	subs	r2, #48	; 0x30
 801490e:	2a09      	cmp	r2, #9
 8014910:	d903      	bls.n	801491a <_vfiprintf_r+0x1ee>
 8014912:	2b00      	cmp	r3, #0
 8014914:	d0c5      	beq.n	80148a2 <_vfiprintf_r+0x176>
 8014916:	9105      	str	r1, [sp, #20]
 8014918:	e7c3      	b.n	80148a2 <_vfiprintf_r+0x176>
 801491a:	fb0c 2101 	mla	r1, ip, r1, r2
 801491e:	4604      	mov	r4, r0
 8014920:	2301      	movs	r3, #1
 8014922:	e7f0      	b.n	8014906 <_vfiprintf_r+0x1da>
 8014924:	ab03      	add	r3, sp, #12
 8014926:	9300      	str	r3, [sp, #0]
 8014928:	462a      	mov	r2, r5
 801492a:	4b16      	ldr	r3, [pc, #88]	; (8014984 <_vfiprintf_r+0x258>)
 801492c:	a904      	add	r1, sp, #16
 801492e:	4630      	mov	r0, r6
 8014930:	f7fd fa3a 	bl	8011da8 <_printf_float>
 8014934:	4607      	mov	r7, r0
 8014936:	1c78      	adds	r0, r7, #1
 8014938:	d1d6      	bne.n	80148e8 <_vfiprintf_r+0x1bc>
 801493a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801493c:	07d9      	lsls	r1, r3, #31
 801493e:	d405      	bmi.n	801494c <_vfiprintf_r+0x220>
 8014940:	89ab      	ldrh	r3, [r5, #12]
 8014942:	059a      	lsls	r2, r3, #22
 8014944:	d402      	bmi.n	801494c <_vfiprintf_r+0x220>
 8014946:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014948:	f7ff f882 	bl	8013a50 <__retarget_lock_release_recursive>
 801494c:	89ab      	ldrh	r3, [r5, #12]
 801494e:	065b      	lsls	r3, r3, #25
 8014950:	f53f af12 	bmi.w	8014778 <_vfiprintf_r+0x4c>
 8014954:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014956:	e711      	b.n	801477c <_vfiprintf_r+0x50>
 8014958:	ab03      	add	r3, sp, #12
 801495a:	9300      	str	r3, [sp, #0]
 801495c:	462a      	mov	r2, r5
 801495e:	4b09      	ldr	r3, [pc, #36]	; (8014984 <_vfiprintf_r+0x258>)
 8014960:	a904      	add	r1, sp, #16
 8014962:	4630      	mov	r0, r6
 8014964:	f7fd fcc4 	bl	80122f0 <_printf_i>
 8014968:	e7e4      	b.n	8014934 <_vfiprintf_r+0x208>
 801496a:	bf00      	nop
 801496c:	080150a0 	.word	0x080150a0
 8014970:	080150c0 	.word	0x080150c0
 8014974:	08015080 	.word	0x08015080
 8014978:	0801523c 	.word	0x0801523c
 801497c:	08015246 	.word	0x08015246
 8014980:	08011da9 	.word	0x08011da9
 8014984:	08014707 	.word	0x08014707
 8014988:	08015242 	.word	0x08015242

0801498c <_putc_r>:
 801498c:	b570      	push	{r4, r5, r6, lr}
 801498e:	460d      	mov	r5, r1
 8014990:	4614      	mov	r4, r2
 8014992:	4606      	mov	r6, r0
 8014994:	b118      	cbz	r0, 801499e <_putc_r+0x12>
 8014996:	6983      	ldr	r3, [r0, #24]
 8014998:	b90b      	cbnz	r3, 801499e <_putc_r+0x12>
 801499a:	f7fe ffb5 	bl	8013908 <__sinit>
 801499e:	4b1c      	ldr	r3, [pc, #112]	; (8014a10 <_putc_r+0x84>)
 80149a0:	429c      	cmp	r4, r3
 80149a2:	d124      	bne.n	80149ee <_putc_r+0x62>
 80149a4:	6874      	ldr	r4, [r6, #4]
 80149a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80149a8:	07d8      	lsls	r0, r3, #31
 80149aa:	d405      	bmi.n	80149b8 <_putc_r+0x2c>
 80149ac:	89a3      	ldrh	r3, [r4, #12]
 80149ae:	0599      	lsls	r1, r3, #22
 80149b0:	d402      	bmi.n	80149b8 <_putc_r+0x2c>
 80149b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80149b4:	f7ff f84b 	bl	8013a4e <__retarget_lock_acquire_recursive>
 80149b8:	68a3      	ldr	r3, [r4, #8]
 80149ba:	3b01      	subs	r3, #1
 80149bc:	2b00      	cmp	r3, #0
 80149be:	60a3      	str	r3, [r4, #8]
 80149c0:	da05      	bge.n	80149ce <_putc_r+0x42>
 80149c2:	69a2      	ldr	r2, [r4, #24]
 80149c4:	4293      	cmp	r3, r2
 80149c6:	db1c      	blt.n	8014a02 <_putc_r+0x76>
 80149c8:	b2eb      	uxtb	r3, r5
 80149ca:	2b0a      	cmp	r3, #10
 80149cc:	d019      	beq.n	8014a02 <_putc_r+0x76>
 80149ce:	6823      	ldr	r3, [r4, #0]
 80149d0:	1c5a      	adds	r2, r3, #1
 80149d2:	6022      	str	r2, [r4, #0]
 80149d4:	701d      	strb	r5, [r3, #0]
 80149d6:	b2ed      	uxtb	r5, r5
 80149d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80149da:	07da      	lsls	r2, r3, #31
 80149dc:	d405      	bmi.n	80149ea <_putc_r+0x5e>
 80149de:	89a3      	ldrh	r3, [r4, #12]
 80149e0:	059b      	lsls	r3, r3, #22
 80149e2:	d402      	bmi.n	80149ea <_putc_r+0x5e>
 80149e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80149e6:	f7ff f833 	bl	8013a50 <__retarget_lock_release_recursive>
 80149ea:	4628      	mov	r0, r5
 80149ec:	bd70      	pop	{r4, r5, r6, pc}
 80149ee:	4b09      	ldr	r3, [pc, #36]	; (8014a14 <_putc_r+0x88>)
 80149f0:	429c      	cmp	r4, r3
 80149f2:	d101      	bne.n	80149f8 <_putc_r+0x6c>
 80149f4:	68b4      	ldr	r4, [r6, #8]
 80149f6:	e7d6      	b.n	80149a6 <_putc_r+0x1a>
 80149f8:	4b07      	ldr	r3, [pc, #28]	; (8014a18 <_putc_r+0x8c>)
 80149fa:	429c      	cmp	r4, r3
 80149fc:	bf08      	it	eq
 80149fe:	68f4      	ldreq	r4, [r6, #12]
 8014a00:	e7d1      	b.n	80149a6 <_putc_r+0x1a>
 8014a02:	4629      	mov	r1, r5
 8014a04:	4622      	mov	r2, r4
 8014a06:	4630      	mov	r0, r6
 8014a08:	f7fd ff2a 	bl	8012860 <__swbuf_r>
 8014a0c:	4605      	mov	r5, r0
 8014a0e:	e7e3      	b.n	80149d8 <_putc_r+0x4c>
 8014a10:	080150a0 	.word	0x080150a0
 8014a14:	080150c0 	.word	0x080150c0
 8014a18:	08015080 	.word	0x08015080

08014a1c <_sbrk_r>:
 8014a1c:	b538      	push	{r3, r4, r5, lr}
 8014a1e:	4d06      	ldr	r5, [pc, #24]	; (8014a38 <_sbrk_r+0x1c>)
 8014a20:	2300      	movs	r3, #0
 8014a22:	4604      	mov	r4, r0
 8014a24:	4608      	mov	r0, r1
 8014a26:	602b      	str	r3, [r5, #0]
 8014a28:	f7f6 fc16 	bl	800b258 <_sbrk>
 8014a2c:	1c43      	adds	r3, r0, #1
 8014a2e:	d102      	bne.n	8014a36 <_sbrk_r+0x1a>
 8014a30:	682b      	ldr	r3, [r5, #0]
 8014a32:	b103      	cbz	r3, 8014a36 <_sbrk_r+0x1a>
 8014a34:	6023      	str	r3, [r4, #0]
 8014a36:	bd38      	pop	{r3, r4, r5, pc}
 8014a38:	2000cfc0 	.word	0x2000cfc0

08014a3c <__sread>:
 8014a3c:	b510      	push	{r4, lr}
 8014a3e:	460c      	mov	r4, r1
 8014a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a44:	f000 f92c 	bl	8014ca0 <_read_r>
 8014a48:	2800      	cmp	r0, #0
 8014a4a:	bfab      	itete	ge
 8014a4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014a4e:	89a3      	ldrhlt	r3, [r4, #12]
 8014a50:	181b      	addge	r3, r3, r0
 8014a52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014a56:	bfac      	ite	ge
 8014a58:	6563      	strge	r3, [r4, #84]	; 0x54
 8014a5a:	81a3      	strhlt	r3, [r4, #12]
 8014a5c:	bd10      	pop	{r4, pc}

08014a5e <__swrite>:
 8014a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a62:	461f      	mov	r7, r3
 8014a64:	898b      	ldrh	r3, [r1, #12]
 8014a66:	05db      	lsls	r3, r3, #23
 8014a68:	4605      	mov	r5, r0
 8014a6a:	460c      	mov	r4, r1
 8014a6c:	4616      	mov	r6, r2
 8014a6e:	d505      	bpl.n	8014a7c <__swrite+0x1e>
 8014a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a74:	2302      	movs	r3, #2
 8014a76:	2200      	movs	r2, #0
 8014a78:	f000 f898 	bl	8014bac <_lseek_r>
 8014a7c:	89a3      	ldrh	r3, [r4, #12]
 8014a7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014a86:	81a3      	strh	r3, [r4, #12]
 8014a88:	4632      	mov	r2, r6
 8014a8a:	463b      	mov	r3, r7
 8014a8c:	4628      	mov	r0, r5
 8014a8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a92:	f000 b817 	b.w	8014ac4 <_write_r>

08014a96 <__sseek>:
 8014a96:	b510      	push	{r4, lr}
 8014a98:	460c      	mov	r4, r1
 8014a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a9e:	f000 f885 	bl	8014bac <_lseek_r>
 8014aa2:	1c43      	adds	r3, r0, #1
 8014aa4:	89a3      	ldrh	r3, [r4, #12]
 8014aa6:	bf15      	itete	ne
 8014aa8:	6560      	strne	r0, [r4, #84]	; 0x54
 8014aaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014aae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014ab2:	81a3      	strheq	r3, [r4, #12]
 8014ab4:	bf18      	it	ne
 8014ab6:	81a3      	strhne	r3, [r4, #12]
 8014ab8:	bd10      	pop	{r4, pc}

08014aba <__sclose>:
 8014aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014abe:	f000 b831 	b.w	8014b24 <_close_r>
	...

08014ac4 <_write_r>:
 8014ac4:	b538      	push	{r3, r4, r5, lr}
 8014ac6:	4d07      	ldr	r5, [pc, #28]	; (8014ae4 <_write_r+0x20>)
 8014ac8:	4604      	mov	r4, r0
 8014aca:	4608      	mov	r0, r1
 8014acc:	4611      	mov	r1, r2
 8014ace:	2200      	movs	r2, #0
 8014ad0:	602a      	str	r2, [r5, #0]
 8014ad2:	461a      	mov	r2, r3
 8014ad4:	f7f6 fb6c 	bl	800b1b0 <_write>
 8014ad8:	1c43      	adds	r3, r0, #1
 8014ada:	d102      	bne.n	8014ae2 <_write_r+0x1e>
 8014adc:	682b      	ldr	r3, [r5, #0]
 8014ade:	b103      	cbz	r3, 8014ae2 <_write_r+0x1e>
 8014ae0:	6023      	str	r3, [r4, #0]
 8014ae2:	bd38      	pop	{r3, r4, r5, pc}
 8014ae4:	2000cfc0 	.word	0x2000cfc0

08014ae8 <__assert_func>:
 8014ae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014aea:	4614      	mov	r4, r2
 8014aec:	461a      	mov	r2, r3
 8014aee:	4b09      	ldr	r3, [pc, #36]	; (8014b14 <__assert_func+0x2c>)
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	4605      	mov	r5, r0
 8014af4:	68d8      	ldr	r0, [r3, #12]
 8014af6:	b14c      	cbz	r4, 8014b0c <__assert_func+0x24>
 8014af8:	4b07      	ldr	r3, [pc, #28]	; (8014b18 <__assert_func+0x30>)
 8014afa:	9100      	str	r1, [sp, #0]
 8014afc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014b00:	4906      	ldr	r1, [pc, #24]	; (8014b1c <__assert_func+0x34>)
 8014b02:	462b      	mov	r3, r5
 8014b04:	f000 f81e 	bl	8014b44 <fiprintf>
 8014b08:	f000 f8e9 	bl	8014cde <abort>
 8014b0c:	4b04      	ldr	r3, [pc, #16]	; (8014b20 <__assert_func+0x38>)
 8014b0e:	461c      	mov	r4, r3
 8014b10:	e7f3      	b.n	8014afa <__assert_func+0x12>
 8014b12:	bf00      	nop
 8014b14:	2000000c 	.word	0x2000000c
 8014b18:	0801524d 	.word	0x0801524d
 8014b1c:	0801525a 	.word	0x0801525a
 8014b20:	08015288 	.word	0x08015288

08014b24 <_close_r>:
 8014b24:	b538      	push	{r3, r4, r5, lr}
 8014b26:	4d06      	ldr	r5, [pc, #24]	; (8014b40 <_close_r+0x1c>)
 8014b28:	2300      	movs	r3, #0
 8014b2a:	4604      	mov	r4, r0
 8014b2c:	4608      	mov	r0, r1
 8014b2e:	602b      	str	r3, [r5, #0]
 8014b30:	f7f6 fb5e 	bl	800b1f0 <_close>
 8014b34:	1c43      	adds	r3, r0, #1
 8014b36:	d102      	bne.n	8014b3e <_close_r+0x1a>
 8014b38:	682b      	ldr	r3, [r5, #0]
 8014b3a:	b103      	cbz	r3, 8014b3e <_close_r+0x1a>
 8014b3c:	6023      	str	r3, [r4, #0]
 8014b3e:	bd38      	pop	{r3, r4, r5, pc}
 8014b40:	2000cfc0 	.word	0x2000cfc0

08014b44 <fiprintf>:
 8014b44:	b40e      	push	{r1, r2, r3}
 8014b46:	b503      	push	{r0, r1, lr}
 8014b48:	4601      	mov	r1, r0
 8014b4a:	ab03      	add	r3, sp, #12
 8014b4c:	4805      	ldr	r0, [pc, #20]	; (8014b64 <fiprintf+0x20>)
 8014b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b52:	6800      	ldr	r0, [r0, #0]
 8014b54:	9301      	str	r3, [sp, #4]
 8014b56:	f7ff fde9 	bl	801472c <_vfiprintf_r>
 8014b5a:	b002      	add	sp, #8
 8014b5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014b60:	b003      	add	sp, #12
 8014b62:	4770      	bx	lr
 8014b64:	2000000c 	.word	0x2000000c

08014b68 <_fstat_r>:
 8014b68:	b538      	push	{r3, r4, r5, lr}
 8014b6a:	4d07      	ldr	r5, [pc, #28]	; (8014b88 <_fstat_r+0x20>)
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	4604      	mov	r4, r0
 8014b70:	4608      	mov	r0, r1
 8014b72:	4611      	mov	r1, r2
 8014b74:	602b      	str	r3, [r5, #0]
 8014b76:	f7f6 fb47 	bl	800b208 <_fstat>
 8014b7a:	1c43      	adds	r3, r0, #1
 8014b7c:	d102      	bne.n	8014b84 <_fstat_r+0x1c>
 8014b7e:	682b      	ldr	r3, [r5, #0]
 8014b80:	b103      	cbz	r3, 8014b84 <_fstat_r+0x1c>
 8014b82:	6023      	str	r3, [r4, #0]
 8014b84:	bd38      	pop	{r3, r4, r5, pc}
 8014b86:	bf00      	nop
 8014b88:	2000cfc0 	.word	0x2000cfc0

08014b8c <_isatty_r>:
 8014b8c:	b538      	push	{r3, r4, r5, lr}
 8014b8e:	4d06      	ldr	r5, [pc, #24]	; (8014ba8 <_isatty_r+0x1c>)
 8014b90:	2300      	movs	r3, #0
 8014b92:	4604      	mov	r4, r0
 8014b94:	4608      	mov	r0, r1
 8014b96:	602b      	str	r3, [r5, #0]
 8014b98:	f7f6 fb46 	bl	800b228 <_isatty>
 8014b9c:	1c43      	adds	r3, r0, #1
 8014b9e:	d102      	bne.n	8014ba6 <_isatty_r+0x1a>
 8014ba0:	682b      	ldr	r3, [r5, #0]
 8014ba2:	b103      	cbz	r3, 8014ba6 <_isatty_r+0x1a>
 8014ba4:	6023      	str	r3, [r4, #0]
 8014ba6:	bd38      	pop	{r3, r4, r5, pc}
 8014ba8:	2000cfc0 	.word	0x2000cfc0

08014bac <_lseek_r>:
 8014bac:	b538      	push	{r3, r4, r5, lr}
 8014bae:	4d07      	ldr	r5, [pc, #28]	; (8014bcc <_lseek_r+0x20>)
 8014bb0:	4604      	mov	r4, r0
 8014bb2:	4608      	mov	r0, r1
 8014bb4:	4611      	mov	r1, r2
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	602a      	str	r2, [r5, #0]
 8014bba:	461a      	mov	r2, r3
 8014bbc:	f7f6 fb3f 	bl	800b23e <_lseek>
 8014bc0:	1c43      	adds	r3, r0, #1
 8014bc2:	d102      	bne.n	8014bca <_lseek_r+0x1e>
 8014bc4:	682b      	ldr	r3, [r5, #0]
 8014bc6:	b103      	cbz	r3, 8014bca <_lseek_r+0x1e>
 8014bc8:	6023      	str	r3, [r4, #0]
 8014bca:	bd38      	pop	{r3, r4, r5, pc}
 8014bcc:	2000cfc0 	.word	0x2000cfc0

08014bd0 <__ascii_mbtowc>:
 8014bd0:	b082      	sub	sp, #8
 8014bd2:	b901      	cbnz	r1, 8014bd6 <__ascii_mbtowc+0x6>
 8014bd4:	a901      	add	r1, sp, #4
 8014bd6:	b142      	cbz	r2, 8014bea <__ascii_mbtowc+0x1a>
 8014bd8:	b14b      	cbz	r3, 8014bee <__ascii_mbtowc+0x1e>
 8014bda:	7813      	ldrb	r3, [r2, #0]
 8014bdc:	600b      	str	r3, [r1, #0]
 8014bde:	7812      	ldrb	r2, [r2, #0]
 8014be0:	1e10      	subs	r0, r2, #0
 8014be2:	bf18      	it	ne
 8014be4:	2001      	movne	r0, #1
 8014be6:	b002      	add	sp, #8
 8014be8:	4770      	bx	lr
 8014bea:	4610      	mov	r0, r2
 8014bec:	e7fb      	b.n	8014be6 <__ascii_mbtowc+0x16>
 8014bee:	f06f 0001 	mvn.w	r0, #1
 8014bf2:	e7f8      	b.n	8014be6 <__ascii_mbtowc+0x16>

08014bf4 <memmove>:
 8014bf4:	4288      	cmp	r0, r1
 8014bf6:	b510      	push	{r4, lr}
 8014bf8:	eb01 0402 	add.w	r4, r1, r2
 8014bfc:	d902      	bls.n	8014c04 <memmove+0x10>
 8014bfe:	4284      	cmp	r4, r0
 8014c00:	4623      	mov	r3, r4
 8014c02:	d807      	bhi.n	8014c14 <memmove+0x20>
 8014c04:	1e43      	subs	r3, r0, #1
 8014c06:	42a1      	cmp	r1, r4
 8014c08:	d008      	beq.n	8014c1c <memmove+0x28>
 8014c0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014c0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014c12:	e7f8      	b.n	8014c06 <memmove+0x12>
 8014c14:	4402      	add	r2, r0
 8014c16:	4601      	mov	r1, r0
 8014c18:	428a      	cmp	r2, r1
 8014c1a:	d100      	bne.n	8014c1e <memmove+0x2a>
 8014c1c:	bd10      	pop	{r4, pc}
 8014c1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014c22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014c26:	e7f7      	b.n	8014c18 <memmove+0x24>

08014c28 <__malloc_lock>:
 8014c28:	4801      	ldr	r0, [pc, #4]	; (8014c30 <__malloc_lock+0x8>)
 8014c2a:	f7fe bf10 	b.w	8013a4e <__retarget_lock_acquire_recursive>
 8014c2e:	bf00      	nop
 8014c30:	2000cfb4 	.word	0x2000cfb4

08014c34 <__malloc_unlock>:
 8014c34:	4801      	ldr	r0, [pc, #4]	; (8014c3c <__malloc_unlock+0x8>)
 8014c36:	f7fe bf0b 	b.w	8013a50 <__retarget_lock_release_recursive>
 8014c3a:	bf00      	nop
 8014c3c:	2000cfb4 	.word	0x2000cfb4

08014c40 <_realloc_r>:
 8014c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c44:	4680      	mov	r8, r0
 8014c46:	4614      	mov	r4, r2
 8014c48:	460e      	mov	r6, r1
 8014c4a:	b921      	cbnz	r1, 8014c56 <_realloc_r+0x16>
 8014c4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c50:	4611      	mov	r1, r2
 8014c52:	f7ff bb71 	b.w	8014338 <_malloc_r>
 8014c56:	b92a      	cbnz	r2, 8014c64 <_realloc_r+0x24>
 8014c58:	f7ff fb02 	bl	8014260 <_free_r>
 8014c5c:	4625      	mov	r5, r4
 8014c5e:	4628      	mov	r0, r5
 8014c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c64:	f000 f842 	bl	8014cec <_malloc_usable_size_r>
 8014c68:	4284      	cmp	r4, r0
 8014c6a:	4607      	mov	r7, r0
 8014c6c:	d802      	bhi.n	8014c74 <_realloc_r+0x34>
 8014c6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014c72:	d812      	bhi.n	8014c9a <_realloc_r+0x5a>
 8014c74:	4621      	mov	r1, r4
 8014c76:	4640      	mov	r0, r8
 8014c78:	f7ff fb5e 	bl	8014338 <_malloc_r>
 8014c7c:	4605      	mov	r5, r0
 8014c7e:	2800      	cmp	r0, #0
 8014c80:	d0ed      	beq.n	8014c5e <_realloc_r+0x1e>
 8014c82:	42bc      	cmp	r4, r7
 8014c84:	4622      	mov	r2, r4
 8014c86:	4631      	mov	r1, r6
 8014c88:	bf28      	it	cs
 8014c8a:	463a      	movcs	r2, r7
 8014c8c:	f7fc ffd6 	bl	8011c3c <memcpy>
 8014c90:	4631      	mov	r1, r6
 8014c92:	4640      	mov	r0, r8
 8014c94:	f7ff fae4 	bl	8014260 <_free_r>
 8014c98:	e7e1      	b.n	8014c5e <_realloc_r+0x1e>
 8014c9a:	4635      	mov	r5, r6
 8014c9c:	e7df      	b.n	8014c5e <_realloc_r+0x1e>
	...

08014ca0 <_read_r>:
 8014ca0:	b538      	push	{r3, r4, r5, lr}
 8014ca2:	4d07      	ldr	r5, [pc, #28]	; (8014cc0 <_read_r+0x20>)
 8014ca4:	4604      	mov	r4, r0
 8014ca6:	4608      	mov	r0, r1
 8014ca8:	4611      	mov	r1, r2
 8014caa:	2200      	movs	r2, #0
 8014cac:	602a      	str	r2, [r5, #0]
 8014cae:	461a      	mov	r2, r3
 8014cb0:	f7f6 fa60 	bl	800b174 <_read>
 8014cb4:	1c43      	adds	r3, r0, #1
 8014cb6:	d102      	bne.n	8014cbe <_read_r+0x1e>
 8014cb8:	682b      	ldr	r3, [r5, #0]
 8014cba:	b103      	cbz	r3, 8014cbe <_read_r+0x1e>
 8014cbc:	6023      	str	r3, [r4, #0]
 8014cbe:	bd38      	pop	{r3, r4, r5, pc}
 8014cc0:	2000cfc0 	.word	0x2000cfc0

08014cc4 <__ascii_wctomb>:
 8014cc4:	b149      	cbz	r1, 8014cda <__ascii_wctomb+0x16>
 8014cc6:	2aff      	cmp	r2, #255	; 0xff
 8014cc8:	bf85      	ittet	hi
 8014cca:	238a      	movhi	r3, #138	; 0x8a
 8014ccc:	6003      	strhi	r3, [r0, #0]
 8014cce:	700a      	strbls	r2, [r1, #0]
 8014cd0:	f04f 30ff 	movhi.w	r0, #4294967295
 8014cd4:	bf98      	it	ls
 8014cd6:	2001      	movls	r0, #1
 8014cd8:	4770      	bx	lr
 8014cda:	4608      	mov	r0, r1
 8014cdc:	4770      	bx	lr

08014cde <abort>:
 8014cde:	b508      	push	{r3, lr}
 8014ce0:	2006      	movs	r0, #6
 8014ce2:	f000 f833 	bl	8014d4c <raise>
 8014ce6:	2001      	movs	r0, #1
 8014ce8:	f7f6 fa3a 	bl	800b160 <_exit>

08014cec <_malloc_usable_size_r>:
 8014cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014cf0:	1f18      	subs	r0, r3, #4
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	bfbc      	itt	lt
 8014cf6:	580b      	ldrlt	r3, [r1, r0]
 8014cf8:	18c0      	addlt	r0, r0, r3
 8014cfa:	4770      	bx	lr

08014cfc <_raise_r>:
 8014cfc:	291f      	cmp	r1, #31
 8014cfe:	b538      	push	{r3, r4, r5, lr}
 8014d00:	4604      	mov	r4, r0
 8014d02:	460d      	mov	r5, r1
 8014d04:	d904      	bls.n	8014d10 <_raise_r+0x14>
 8014d06:	2316      	movs	r3, #22
 8014d08:	6003      	str	r3, [r0, #0]
 8014d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8014d0e:	bd38      	pop	{r3, r4, r5, pc}
 8014d10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014d12:	b112      	cbz	r2, 8014d1a <_raise_r+0x1e>
 8014d14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014d18:	b94b      	cbnz	r3, 8014d2e <_raise_r+0x32>
 8014d1a:	4620      	mov	r0, r4
 8014d1c:	f000 f830 	bl	8014d80 <_getpid_r>
 8014d20:	462a      	mov	r2, r5
 8014d22:	4601      	mov	r1, r0
 8014d24:	4620      	mov	r0, r4
 8014d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d2a:	f000 b817 	b.w	8014d5c <_kill_r>
 8014d2e:	2b01      	cmp	r3, #1
 8014d30:	d00a      	beq.n	8014d48 <_raise_r+0x4c>
 8014d32:	1c59      	adds	r1, r3, #1
 8014d34:	d103      	bne.n	8014d3e <_raise_r+0x42>
 8014d36:	2316      	movs	r3, #22
 8014d38:	6003      	str	r3, [r0, #0]
 8014d3a:	2001      	movs	r0, #1
 8014d3c:	e7e7      	b.n	8014d0e <_raise_r+0x12>
 8014d3e:	2400      	movs	r4, #0
 8014d40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014d44:	4628      	mov	r0, r5
 8014d46:	4798      	blx	r3
 8014d48:	2000      	movs	r0, #0
 8014d4a:	e7e0      	b.n	8014d0e <_raise_r+0x12>

08014d4c <raise>:
 8014d4c:	4b02      	ldr	r3, [pc, #8]	; (8014d58 <raise+0xc>)
 8014d4e:	4601      	mov	r1, r0
 8014d50:	6818      	ldr	r0, [r3, #0]
 8014d52:	f7ff bfd3 	b.w	8014cfc <_raise_r>
 8014d56:	bf00      	nop
 8014d58:	2000000c 	.word	0x2000000c

08014d5c <_kill_r>:
 8014d5c:	b538      	push	{r3, r4, r5, lr}
 8014d5e:	4d07      	ldr	r5, [pc, #28]	; (8014d7c <_kill_r+0x20>)
 8014d60:	2300      	movs	r3, #0
 8014d62:	4604      	mov	r4, r0
 8014d64:	4608      	mov	r0, r1
 8014d66:	4611      	mov	r1, r2
 8014d68:	602b      	str	r3, [r5, #0]
 8014d6a:	f7f6 f9e9 	bl	800b140 <_kill>
 8014d6e:	1c43      	adds	r3, r0, #1
 8014d70:	d102      	bne.n	8014d78 <_kill_r+0x1c>
 8014d72:	682b      	ldr	r3, [r5, #0]
 8014d74:	b103      	cbz	r3, 8014d78 <_kill_r+0x1c>
 8014d76:	6023      	str	r3, [r4, #0]
 8014d78:	bd38      	pop	{r3, r4, r5, pc}
 8014d7a:	bf00      	nop
 8014d7c:	2000cfc0 	.word	0x2000cfc0

08014d80 <_getpid_r>:
 8014d80:	f7f6 b9d6 	b.w	800b130 <_getpid>

08014d84 <_init>:
 8014d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d86:	bf00      	nop
 8014d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d8a:	bc08      	pop	{r3}
 8014d8c:	469e      	mov	lr, r3
 8014d8e:	4770      	bx	lr

08014d90 <_fini>:
 8014d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d92:	bf00      	nop
 8014d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d96:	bc08      	pop	{r3}
 8014d98:	469e      	mov	lr, r3
 8014d9a:	4770      	bx	lr
