
normal_mice_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  08009ed0  08009ed0  00019ed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a344  0800a344  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a344  0800a344  0001a344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a34c  0800a34c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a34c  0800a34c  0001a34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a350  0800a350  0001a350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  200001dc  0800a530  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  0800a530  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001762a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000373f  00000000  00000000  00037836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  0003af78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001430  00000000  00000000  0003c540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024f0f  00000000  00000000  0003d970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a244  00000000  00000000  0006287f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddeab  00000000  00000000  0007cac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015a96e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b6c  00000000  00000000  0015a9c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009eb8 	.word	0x08009eb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009eb8 	.word	0x08009eb8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <lcd_cmd>:
#include "PL_lcd.h"
#include "i2c.h"


void lcd_cmd(uint8_t x)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  uint8_t aTxBuffer[2] = { 0x00, x };
 8000f56:	2300      	movs	r3, #0
 8000f58:	733b      	strb	r3, [r7, #12]
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 8000f5e:	e007      	b.n	8000f70 <lcd_cmd+0x24>
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <lcd_cmd+0x48>)
 8000f62:	f003 fb05 	bl	8004570 <HAL_I2C_GetError>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b04      	cmp	r3, #4
 8000f6a:	d001      	beq.n	8000f70 <lcd_cmd+0x24>
    {
      Error_Handler();
 8000f6c:	f000 fd33 	bl	80019d6 <Error_Handler>
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 8000f70:	f107 020c 	add.w	r2, r7, #12
 8000f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	217c      	movs	r1, #124	; 0x7c
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <lcd_cmd+0x48>)
 8000f80:	f003 fa02 	bl	8004388 <HAL_I2C_Master_Transmit>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1ea      	bne.n	8000f60 <lcd_cmd+0x14>
    }
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200002c8 	.word	0x200002c8

08000f98 <lcd_data>:

void lcd_data(uint8_t x)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  uint8_t aTxBuffer[2] = { 0x40, x };
 8000fa2:	2340      	movs	r3, #64	; 0x40
 8000fa4:	733b      	strb	r3, [r7, #12]
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 8000faa:	e007      	b.n	8000fbc <lcd_data+0x24>
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000fac:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <lcd_data+0x48>)
 8000fae:	f003 fadf 	bl	8004570 <HAL_I2C_GetError>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	d001      	beq.n	8000fbc <lcd_data+0x24>
    {
      Error_Handler();
 8000fb8:	f000 fd0d 	bl	80019d6 <Error_Handler>
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 8000fbc:	f107 020c 	add.w	r2, r7, #12
 8000fc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	217c      	movs	r1, #124	; 0x7c
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <lcd_data+0x48>)
 8000fcc:	f003 f9dc 	bl	8004388 <HAL_I2C_Master_Transmit>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1ea      	bne.n	8000fac <lcd_data+0x14>
    }
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200002c8 	.word	0x200002c8

08000fe4 <lcd_puts>:

void lcd_puts(const char *s)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  while(*s) lcd_data(*s++);
 8000fec:	e006      	b.n	8000ffc <lcd_puts+0x18>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	607a      	str	r2, [r7, #4]
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ffce 	bl	8000f98 <lcd_data>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1f4      	bne.n	8000fee <lcd_puts+0xa>
}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <lcd_init>:

// param:
//  contrast: 0 ~ 63 (最初は大きくして調整)
void lcd_init(void)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	af00      	add	r7, sp, #0
  // LCD initialize(裏面に記載)
  lcd_cmd(0x38); // function set
 8001012:	2038      	movs	r0, #56	; 0x38
 8001014:	f7ff ff9a 	bl	8000f4c <lcd_cmd>
  lcd_cmd(0x39); // function set
 8001018:	2039      	movs	r0, #57	; 0x39
 800101a:	f7ff ff97 	bl	8000f4c <lcd_cmd>
  lcd_cmd(0x14); // interval osc
 800101e:	2014      	movs	r0, #20
 8001020:	f7ff ff94 	bl	8000f4c <lcd_cmd>
  lcd_cmd(0x70); // contrast low
 8001024:	2070      	movs	r0, #112	; 0x70
 8001026:	f7ff ff91 	bl	8000f4c <lcd_cmd>
  lcd_cmd(0x56); // contrast high / icon / power
 800102a:	2056      	movs	r0, #86	; 0x56
 800102c:	f7ff ff8e 	bl	8000f4c <lcd_cmd>
  lcd_cmd(0x6c); // follower control
 8001030:	206c      	movs	r0, #108	; 0x6c
 8001032:	f7ff ff8b 	bl	8000f4c <lcd_cmd>
  HAL_Delay(300);
 8001036:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800103a:	f001 f9dd 	bl	80023f8 <HAL_Delay>
  lcd_cmd(0x38); // function set
 800103e:	2038      	movs	r0, #56	; 0x38
 8001040:	f7ff ff84 	bl	8000f4c <lcd_cmd>
  lcd_cmd(0x0c); // display on
 8001044:	200c      	movs	r0, #12
 8001046:	f7ff ff81 	bl	8000f4c <lcd_cmd>
  lcd_cmd(0x01); // clear display
 800104a:	2001      	movs	r0, #1
 800104c:	f7ff ff7e 	bl	8000f4c <lcd_cmd>
  HAL_Delay(2);
 8001050:	2002      	movs	r0, #2
 8001052:	f001 f9d1 	bl	80023f8 <HAL_Delay>
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}

0800105a <lcd_pos>:

void lcd_move(uint8_t pos){
  lcd_cmd(0x80 | pos);
}

void lcd_pos(uint8_t raw, uint8_t col) {
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	460a      	mov	r2, r1
 8001064:	71fb      	strb	r3, [r7, #7]
 8001066:	4613      	mov	r3, r2
 8001068:	71bb      	strb	r3, [r7, #6]
  lcd_cmd(0x80 | ((raw & 0x01) << 6) | col);
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	019b      	lsls	r3, r3, #6
 800106e:	b2db      	uxtb	r3, r3
 8001070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001074:	b2da      	uxtb	r2, r3
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	4313      	orrs	r3, r2
 800107a:	b2db      	uxtb	r3, r3
 800107c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001080:	b2db      	uxtb	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff62 	bl	8000f4c <lcd_cmd>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <lcd_clear>:

void lcd_clear() {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  lcd_cmd(0x01);
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff ff59 	bl	8000f4c <lcd_cmd>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 80010a6:	4866      	ldr	r0, [pc, #408]	; (8001240 <pl_callback_getSensor+0x1a0>)
 80010a8:	f001 fdac 	bl	8002c04 <HAL_ADC_Stop_DMA>
	switch (AD_step) {
 80010ac:	4b65      	ldr	r3, [pc, #404]	; (8001244 <pl_callback_getSensor+0x1a4>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d044      	beq.n	800113e <pl_callback_getSensor+0x9e>
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	dc68      	bgt.n	800118a <pl_callback_getSensor+0xea>
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d002      	beq.n	80010c2 <pl_callback_getSensor+0x22>
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d017      	beq.n	80010f0 <pl_callback_getSensor+0x50>
 80010c0:	e063      	b.n	800118a <pl_callback_getSensor+0xea>
		case 0:
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c8:	485f      	ldr	r0, [pc, #380]	; (8001248 <pl_callback_getSensor+0x1a8>)
 80010ca:	f003 f8b5 	bl	8004238 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d4:	485c      	ldr	r0, [pc, #368]	; (8001248 <pl_callback_getSensor+0x1a8>)
 80010d6:	f003 f8af 	bl	8004238 <HAL_GPIO_WritePin>
					for (j = 0; j <= 500; j++) {
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	e002      	b.n	80010e6 <pl_callback_getSensor+0x46>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3301      	adds	r3, #1
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010ec:	ddf8      	ble.n	80010e0 <pl_callback_getSensor+0x40>
					}
			break;
 80010ee:	e04c      	b.n	800118a <pl_callback_getSensor+0xea>
		case 1:
			g_sensor_on[0] = g_ADCBuffer[1];
 80010f0:	4b56      	ldr	r3, [pc, #344]	; (800124c <pl_callback_getSensor+0x1ac>)
 80010f2:	885a      	ldrh	r2, [r3, #2]
 80010f4:	4b56      	ldr	r3, [pc, #344]	; (8001250 <pl_callback_getSensor+0x1b0>)
 80010f6:	801a      	strh	r2, [r3, #0]
			g_sensor_on[1] = g_ADCBuffer[2];
 80010f8:	4b54      	ldr	r3, [pc, #336]	; (800124c <pl_callback_getSensor+0x1ac>)
 80010fa:	889a      	ldrh	r2, [r3, #4]
 80010fc:	4b54      	ldr	r3, [pc, #336]	; (8001250 <pl_callback_getSensor+0x1b0>)
 80010fe:	805a      	strh	r2, [r3, #2]
			g_sensor_off[2] = g_ADCBuffer[3];
 8001100:	4b52      	ldr	r3, [pc, #328]	; (800124c <pl_callback_getSensor+0x1ac>)
 8001102:	88da      	ldrh	r2, [r3, #6]
 8001104:	4b53      	ldr	r3, [pc, #332]	; (8001254 <pl_callback_getSensor+0x1b4>)
 8001106:	809a      	strh	r2, [r3, #4]
			g_sensor_off[3] = g_ADCBuffer[4];
 8001108:	4b50      	ldr	r3, [pc, #320]	; (800124c <pl_callback_getSensor+0x1ac>)
 800110a:	891a      	ldrh	r2, [r3, #8]
 800110c:	4b51      	ldr	r3, [pc, #324]	; (8001254 <pl_callback_getSensor+0x1b4>)
 800110e:	80da      	strh	r2, [r3, #6]
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001116:	484c      	ldr	r0, [pc, #304]	; (8001248 <pl_callback_getSensor+0x1a8>)
 8001118:	f003 f88e 	bl	8004238 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001122:	4849      	ldr	r0, [pc, #292]	; (8001248 <pl_callback_getSensor+0x1a8>)
 8001124:	f003 f888 	bl	8004238 <HAL_GPIO_WritePin>
					for (j = 0; j <= 500; j++) {
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	e002      	b.n	8001134 <pl_callback_getSensor+0x94>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3301      	adds	r3, #1
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800113a:	ddf8      	ble.n	800112e <pl_callback_getSensor+0x8e>
					}
			break;
 800113c:	e025      	b.n	800118a <pl_callback_getSensor+0xea>
		case 2:
			g_sensor_off[0] = g_ADCBuffer[1];
 800113e:	4b43      	ldr	r3, [pc, #268]	; (800124c <pl_callback_getSensor+0x1ac>)
 8001140:	885a      	ldrh	r2, [r3, #2]
 8001142:	4b44      	ldr	r3, [pc, #272]	; (8001254 <pl_callback_getSensor+0x1b4>)
 8001144:	801a      	strh	r2, [r3, #0]
			g_sensor_off[1] = g_ADCBuffer[2];
 8001146:	4b41      	ldr	r3, [pc, #260]	; (800124c <pl_callback_getSensor+0x1ac>)
 8001148:	889a      	ldrh	r2, [r3, #4]
 800114a:	4b42      	ldr	r3, [pc, #264]	; (8001254 <pl_callback_getSensor+0x1b4>)
 800114c:	805a      	strh	r2, [r3, #2]
			g_sensor_on[2] = g_ADCBuffer[3];
 800114e:	4b3f      	ldr	r3, [pc, #252]	; (800124c <pl_callback_getSensor+0x1ac>)
 8001150:	88da      	ldrh	r2, [r3, #6]
 8001152:	4b3f      	ldr	r3, [pc, #252]	; (8001250 <pl_callback_getSensor+0x1b0>)
 8001154:	809a      	strh	r2, [r3, #4]
			g_sensor_on[3] = g_ADCBuffer[4];
 8001156:	4b3d      	ldr	r3, [pc, #244]	; (800124c <pl_callback_getSensor+0x1ac>)
 8001158:	891a      	ldrh	r2, [r3, #8]
 800115a:	4b3d      	ldr	r3, [pc, #244]	; (8001250 <pl_callback_getSensor+0x1b0>)
 800115c:	80da      	strh	r2, [r3, #6]
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001164:	4838      	ldr	r0, [pc, #224]	; (8001248 <pl_callback_getSensor+0x1a8>)
 8001166:	f003 f867 	bl	8004238 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001170:	4835      	ldr	r0, [pc, #212]	; (8001248 <pl_callback_getSensor+0x1a8>)
 8001172:	f003 f861 	bl	8004238 <HAL_GPIO_WritePin>
					for (j = 0; j <= 10; j++) {
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	e002      	b.n	8001182 <pl_callback_getSensor+0xe2>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3301      	adds	r3, #1
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b0a      	cmp	r3, #10
 8001186:	ddf9      	ble.n	800117c <pl_callback_getSensor+0xdc>
					}
			break;
 8001188:	bf00      	nop
	}
	V_battAD = g_ADCBuffer[0];
 800118a:	4b30      	ldr	r3, [pc, #192]	; (800124c <pl_callback_getSensor+0x1ac>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 1023 * (100.0 + 47.0) / 47.0;
 8001190:	887b      	ldrh	r3, [r7, #2]
 8001192:	ee07 3a90 	vmov	s15, r3
 8001196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800119a:	ee17 0a90 	vmov	r0, s15
 800119e:	f7ff f9d3 	bl	8000548 <__aeabi_f2d>
 80011a2:	a321      	add	r3, pc, #132	; (adr r3, 8001228 <pl_callback_getSensor+0x188>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff fa26 	bl	80005f8 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	a31e      	add	r3, pc, #120	; (adr r3, 8001230 <pl_callback_getSensor+0x190>)
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	f7ff fb47 	bl	800084c <__aeabi_ddiv>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	a31c      	add	r3, pc, #112	; (adr r3, 8001238 <pl_callback_getSensor+0x198>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f7ff fa14 	bl	80005f8 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <pl_callback_getSensor+0x1b8>)
 80011de:	f7ff fb35 	bl	800084c <__aeabi_ddiv>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f7ff fcdd 	bl	8000ba8 <__aeabi_d2f>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4a1a      	ldr	r2, [pc, #104]	; (800125c <pl_callback_getSensor+0x1bc>)
 80011f2:	6013      	str	r3, [r2, #0]
		AD_step++;
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <pl_callback_getSensor+0x1a4>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <pl_callback_getSensor+0x1a4>)
 80011fe:	701a      	strb	r2, [r3, #0]

		if (AD_step != 3) {
 8001200:	4b10      	ldr	r3, [pc, #64]	; (8001244 <pl_callback_getSensor+0x1a4>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b03      	cmp	r3, #3
 8001206:	d005      	beq.n	8001214 <pl_callback_getSensor+0x174>
			HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
 8001208:	2205      	movs	r2, #5
 800120a:	4910      	ldr	r1, [pc, #64]	; (800124c <pl_callback_getSensor+0x1ac>)
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <pl_callback_getSensor+0x1a0>)
 800120e:	f001 fc75 	bl	8002afc <HAL_ADC_Start_DMA>
		} else {
			AD_step = 0;

		}

}
 8001212:	e002      	b.n	800121a <pl_callback_getSensor+0x17a>
			AD_step = 0;
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <pl_callback_getSensor+0x1a4>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	f3af 8000 	nop.w
 8001228:	66666666 	.word	0x66666666
 800122c:	400a6666 	.word	0x400a6666
 8001230:	00000000 	.word	0x00000000
 8001234:	408ff800 	.word	0x408ff800
 8001238:	00000000 	.word	0x00000000
 800123c:	40626000 	.word	0x40626000
 8001240:	2000021c 	.word	0x2000021c
 8001244:	20000202 	.word	0x20000202
 8001248:	48000800 	.word	0x48000800
 800124c:	200001f8 	.word	0x200001f8
 8001250:	20000204 	.word	0x20000204
 8001254:	2000020c 	.word	0x2000020c
 8001258:	40478000 	.word	0x40478000
 800125c:	20000214 	.word	0x20000214

08001260 <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	if (sensor_mode == 1) {
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <pl_interupt_getSensor+0x1c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d104      	bne.n	8001276 <pl_interupt_getSensor+0x16>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
 800126c:	2205      	movs	r2, #5
 800126e:	4904      	ldr	r1, [pc, #16]	; (8001280 <pl_interupt_getSensor+0x20>)
 8001270:	4804      	ldr	r0, [pc, #16]	; (8001284 <pl_interupt_getSensor+0x24>)
 8001272:	f001 fc43 	bl	8002afc <HAL_ADC_Start_DMA>
				sizeof(g_ADCBuffer) / sizeof(uint16_t));
	}

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000203 	.word	0x20000203
 8001280:	200001f8 	.word	0x200001f8
 8001284:	2000021c 	.word	0x2000021c

08001288 <pl_timer_init>:
#include "tim.h"

volatile uint32_t g_timCount;


void pl_timer_init(void){
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <pl_timer_init+0x10>)
 800128e:	f004 fd51 	bl	8005d34 <HAL_TIM_Base_Start_IT>
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200003b0 	.word	0x200003b0

0800129c <pl_timer_count>:

void pl_timer_count(void){
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
	 g_timCount++;
 80012a0:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <pl_timer_count+0x18>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	3301      	adds	r3, #1
 80012a6:	4a03      	ldr	r2, [pc, #12]	; (80012b4 <pl_timer_count+0x18>)
 80012a8:	6013      	str	r3, [r2, #0]
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	20000218 	.word	0x20000218

080012b8 <wait_ms>:


void wait_ms(uint32_t wait_time) {
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <wait_ms+0x30>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <wait_ms+0x34>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2200      	movs	r2, #0
 80012cc:	625a      	str	r2, [r3, #36]	; 0x24
        while (g_timCount < wait_time) {
 80012ce:	bf00      	nop
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <wait_ms+0x30>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d8fa      	bhi.n	80012d0 <wait_ms+0x18>
        }

}
 80012da:	bf00      	nop
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	20000218 	.word	0x20000218
 80012ec:	200003b0 	.word	0x200003b0

080012f0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012f6:	463b      	mov	r3, r7
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
 8001304:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001306:	4b46      	ldr	r3, [pc, #280]	; (8001420 <MX_ADC1_Init+0x130>)
 8001308:	4a46      	ldr	r2, [pc, #280]	; (8001424 <MX_ADC1_Init+0x134>)
 800130a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 800130c:	4b44      	ldr	r3, [pc, #272]	; (8001420 <MX_ADC1_Init+0x130>)
 800130e:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8001312:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001314:	4b42      	ldr	r3, [pc, #264]	; (8001420 <MX_ADC1_Init+0x130>)
 8001316:	2208      	movs	r2, #8
 8001318:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800131a:	4b41      	ldr	r3, [pc, #260]	; (8001420 <MX_ADC1_Init+0x130>)
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001320:	4b3f      	ldr	r3, [pc, #252]	; (8001420 <MX_ADC1_Init+0x130>)
 8001322:	2201      	movs	r2, #1
 8001324:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001326:	4b3e      	ldr	r3, [pc, #248]	; (8001420 <MX_ADC1_Init+0x130>)
 8001328:	2204      	movs	r2, #4
 800132a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800132c:	4b3c      	ldr	r3, [pc, #240]	; (8001420 <MX_ADC1_Init+0x130>)
 800132e:	2200      	movs	r2, #0
 8001330:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001332:	4b3b      	ldr	r3, [pc, #236]	; (8001420 <MX_ADC1_Init+0x130>)
 8001334:	2201      	movs	r2, #1
 8001336:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8001338:	4b39      	ldr	r3, [pc, #228]	; (8001420 <MX_ADC1_Init+0x130>)
 800133a:	2205      	movs	r2, #5
 800133c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800133e:	4b38      	ldr	r3, [pc, #224]	; (8001420 <MX_ADC1_Init+0x130>)
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001346:	4b36      	ldr	r3, [pc, #216]	; (8001420 <MX_ADC1_Init+0x130>)
 8001348:	2200      	movs	r2, #0
 800134a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800134c:	4b34      	ldr	r3, [pc, #208]	; (8001420 <MX_ADC1_Init+0x130>)
 800134e:	2200      	movs	r2, #0
 8001350:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001352:	4b33      	ldr	r3, [pc, #204]	; (8001420 <MX_ADC1_Init+0x130>)
 8001354:	2201      	movs	r2, #1
 8001356:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800135a:	4b31      	ldr	r3, [pc, #196]	; (8001420 <MX_ADC1_Init+0x130>)
 800135c:	2200      	movs	r2, #0
 800135e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001360:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <MX_ADC1_Init+0x130>)
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001368:	482d      	ldr	r0, [pc, #180]	; (8001420 <MX_ADC1_Init+0x130>)
 800136a:	f001 fa7f 	bl	800286c <HAL_ADC_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001374:	f000 fb2f 	bl	80019d6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001378:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <MX_ADC1_Init+0x138>)
 800137a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800137c:	2306      	movs	r3, #6
 800137e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001380:	2302      	movs	r3, #2
 8001382:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001384:	237f      	movs	r3, #127	; 0x7f
 8001386:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001388:	2304      	movs	r3, #4
 800138a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001390:	463b      	mov	r3, r7
 8001392:	4619      	mov	r1, r3
 8001394:	4822      	ldr	r0, [pc, #136]	; (8001420 <MX_ADC1_Init+0x130>)
 8001396:	f001 fcab 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80013a0:	f000 fb19 	bl	80019d6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80013a4:	4b21      	ldr	r3, [pc, #132]	; (800142c <MX_ADC1_Init+0x13c>)
 80013a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013a8:	230c      	movs	r3, #12
 80013aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ac:	463b      	mov	r3, r7
 80013ae:	4619      	mov	r1, r3
 80013b0:	481b      	ldr	r0, [pc, #108]	; (8001420 <MX_ADC1_Init+0x130>)
 80013b2:	f001 fc9d 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80013bc:	f000 fb0b 	bl	80019d6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <MX_ADC1_Init+0x140>)
 80013c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013c4:	2312      	movs	r3, #18
 80013c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c8:	463b      	mov	r3, r7
 80013ca:	4619      	mov	r1, r3
 80013cc:	4814      	ldr	r0, [pc, #80]	; (8001420 <MX_ADC1_Init+0x130>)
 80013ce:	f001 fc8f 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80013d8:	f000 fafd 	bl	80019d6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <MX_ADC1_Init+0x144>)
 80013de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80013e0:	2318      	movs	r3, #24
 80013e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e4:	463b      	mov	r3, r7
 80013e6:	4619      	mov	r1, r3
 80013e8:	480d      	ldr	r0, [pc, #52]	; (8001420 <MX_ADC1_Init+0x130>)
 80013ea:	f001 fc81 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80013f4:	f000 faef 	bl	80019d6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <MX_ADC1_Init+0x148>)
 80013fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80013fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001400:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001402:	463b      	mov	r3, r7
 8001404:	4619      	mov	r1, r3
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <MX_ADC1_Init+0x130>)
 8001408:	f001 fc72 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8001412:	f000 fae0 	bl	80019d6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2000021c 	.word	0x2000021c
 8001424:	50040000 	.word	0x50040000
 8001428:	43210000 	.word	0x43210000
 800142c:	3ef08000 	.word	0x3ef08000
 8001430:	32601000 	.word	0x32601000
 8001434:	2e300800 	.word	0x2e300800
 8001438:	2a000400 	.word	0x2a000400

0800143c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b0a0      	sub	sp, #128	; 0x80
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001454:	f107 0318 	add.w	r3, r7, #24
 8001458:	2254      	movs	r2, #84	; 0x54
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f005 fff5 	bl	800744c <memset>
  if(adcHandle->Instance==ADC1)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a47      	ldr	r2, [pc, #284]	; (8001584 <HAL_ADC_MspInit+0x148>)
 8001468:	4293      	cmp	r3, r2
 800146a:	f040 8087 	bne.w	800157c <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800146e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001472:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001474:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001478:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800147a:	2303      	movs	r3, #3
 800147c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 3;
 800147e:	2303      	movs	r3, #3
 8001480:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001482:	2310      	movs	r3, #16
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001486:	2307      	movs	r3, #7
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800148a:	2302      	movs	r3, #2
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800148e:	2302      	movs	r3, #2
 8001490:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001492:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001496:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001498:	f107 0318 	add.w	r3, r7, #24
 800149c:	4618      	mov	r0, r3
 800149e:	f004 f909 	bl	80056b4 <HAL_RCCEx_PeriphCLKConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80014a8:	f000 fa95 	bl	80019d6 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014ac:	4b36      	ldr	r3, [pc, #216]	; (8001588 <HAL_ADC_MspInit+0x14c>)
 80014ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b0:	4a35      	ldr	r2, [pc, #212]	; (8001588 <HAL_ADC_MspInit+0x14c>)
 80014b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b8:	4b33      	ldr	r3, [pc, #204]	; (8001588 <HAL_ADC_MspInit+0x14c>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	4b30      	ldr	r3, [pc, #192]	; (8001588 <HAL_ADC_MspInit+0x14c>)
 80014c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c8:	4a2f      	ldr	r2, [pc, #188]	; (8001588 <HAL_ADC_MspInit+0x14c>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d0:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <HAL_ADC_MspInit+0x14c>)
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014dc:	4b2a      	ldr	r3, [pc, #168]	; (8001588 <HAL_ADC_MspInit+0x14c>)
 80014de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e0:	4a29      	ldr	r2, [pc, #164]	; (8001588 <HAL_ADC_MspInit+0x14c>)
 80014e2:	f043 0302 	orr.w	r3, r3, #2
 80014e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e8:	4b27      	ldr	r3, [pc, #156]	; (8001588 <HAL_ADC_MspInit+0x14c>)
 80014ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = SENSOR_4_Pin|SENSOR_3_Pin|SENSOR_2_Pin;
 80014f4:	23e0      	movs	r3, #224	; 0xe0
 80014f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014f8:	230b      	movs	r3, #11
 80014fa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001500:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001504:	4619      	mov	r1, r3
 8001506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150a:	f002 fd2b 	bl	8003f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR_1_Pin|BATTERY_Pin;
 800150e:	2303      	movs	r3, #3
 8001510:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001512:	230b      	movs	r3, #11
 8001514:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800151e:	4619      	mov	r1, r3
 8001520:	481a      	ldr	r0, [pc, #104]	; (800158c <HAL_ADC_MspInit+0x150>)
 8001522:	f002 fd1f 	bl	8003f64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <HAL_ADC_MspInit+0x154>)
 8001528:	4a1a      	ldr	r2, [pc, #104]	; (8001594 <HAL_ADC_MspInit+0x158>)
 800152a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <HAL_ADC_MspInit+0x154>)
 800152e:	2200      	movs	r2, #0
 8001530:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <HAL_ADC_MspInit+0x154>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_ADC_MspInit+0x154>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <HAL_ADC_MspInit+0x154>)
 8001540:	2280      	movs	r2, #128	; 0x80
 8001542:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_ADC_MspInit+0x154>)
 8001546:	f44f 7280 	mov.w	r2, #256	; 0x100
 800154a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <HAL_ADC_MspInit+0x154>)
 800154e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001552:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001554:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <HAL_ADC_MspInit+0x154>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_ADC_MspInit+0x154>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001560:	480b      	ldr	r0, [pc, #44]	; (8001590 <HAL_ADC_MspInit+0x154>)
 8001562:	f002 fac9 	bl	8003af8 <HAL_DMA_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 800156c:	f000 fa33 	bl	80019d6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a07      	ldr	r2, [pc, #28]	; (8001590 <HAL_ADC_MspInit+0x154>)
 8001574:	64da      	str	r2, [r3, #76]	; 0x4c
 8001576:	4a06      	ldr	r2, [pc, #24]	; (8001590 <HAL_ADC_MspInit+0x154>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800157c:	bf00      	nop
 800157e:	3780      	adds	r7, #128	; 0x80
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	50040000 	.word	0x50040000
 8001588:	40021000 	.word	0x40021000
 800158c:	48000400 	.word	0x48000400
 8001590:	20000280 	.word	0x20000280
 8001594:	40020008 	.word	0x40020008

08001598 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 80015a0:	f7ff fd7e 	bl	80010a0 <pl_callback_getSensor>

}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <MX_DMA_Init+0x38>)
 80015b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b6:	4a0b      	ldr	r2, [pc, #44]	; (80015e4 <MX_DMA_Init+0x38>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6493      	str	r3, [r2, #72]	; 0x48
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_DMA_Init+0x38>)
 80015c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2100      	movs	r1, #0
 80015ce:	200b      	movs	r0, #11
 80015d0:	f002 fa5b 	bl	8003a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015d4:	200b      	movs	r0, #11
 80015d6:	f002 fa74 	bl	8003ac2 <HAL_NVIC_EnableIRQ>

}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40021000 	.word	0x40021000

080015e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fe:	4b39      	ldr	r3, [pc, #228]	; (80016e4 <MX_GPIO_Init+0xfc>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	4a38      	ldr	r2, [pc, #224]	; (80016e4 <MX_GPIO_Init+0xfc>)
 8001604:	f043 0304 	orr.w	r3, r3, #4
 8001608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160a:	4b36      	ldr	r3, [pc, #216]	; (80016e4 <MX_GPIO_Init+0xfc>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	4b33      	ldr	r3, [pc, #204]	; (80016e4 <MX_GPIO_Init+0xfc>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	4a32      	ldr	r2, [pc, #200]	; (80016e4 <MX_GPIO_Init+0xfc>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001622:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <MX_GPIO_Init+0xfc>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <MX_GPIO_Init+0xfc>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001632:	4a2c      	ldr	r2, [pc, #176]	; (80016e4 <MX_GPIO_Init+0xfc>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163a:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <MX_GPIO_Init+0xfc>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSORLED_1_Pin|SENSORLED_2_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800164c:	4826      	ldr	r0, [pc, #152]	; (80016e8 <MX_GPIO_Init+0x100>)
 800164e:	f002 fdf3 	bl	8004238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_ENABLE_Pin|MOTOR_CW_CCW_L_Pin, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165c:	f002 fdec 	bl	8004238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INTERFACELED_Pin|MOTOR_CW_CCW_R_Pin|MD_RESET_Pin, GPIO_PIN_RESET);
 8001660:	2200      	movs	r2, #0
 8001662:	2138      	movs	r1, #56	; 0x38
 8001664:	4821      	ldr	r0, [pc, #132]	; (80016ec <MX_GPIO_Init+0x104>)
 8001666:	f002 fde7 	bl	8004238 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SENSORLED_1_Pin|SENSORLED_2_Pin;
 800166a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800166e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001670:	2301      	movs	r3, #1
 8001672:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	4619      	mov	r1, r3
 8001682:	4819      	ldr	r0, [pc, #100]	; (80016e8 <MX_GPIO_Init+0x100>)
 8001684:	f002 fc6e 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_ENABLE_Pin|MOTOR_CW_CCW_L_Pin;
 8001688:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800168c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168e:	2301      	movs	r3, #1
 8001690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	4619      	mov	r1, r3
 80016a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a4:	f002 fc5e 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = INTERFACELED_Pin|MOTOR_CW_CCW_R_Pin|MD_RESET_Pin;
 80016a8:	2338      	movs	r3, #56	; 0x38
 80016aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	4619      	mov	r1, r3
 80016be:	480b      	ldr	r0, [pc, #44]	; (80016ec <MX_GPIO_Init+0x104>)
 80016c0:	f002 fc50 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SWITCH_1_Pin|SWITCH_2_Pin;
 80016c4:	23c0      	movs	r3, #192	; 0xc0
 80016c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	4619      	mov	r1, r3
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_GPIO_Init+0x104>)
 80016d8:	f002 fc44 	bl	8003f64 <HAL_GPIO_Init>

}
 80016dc:	bf00      	nop
 80016de:	3720      	adds	r7, #32
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021000 	.word	0x40021000
 80016e8:	48000800 	.word	0x48000800
 80016ec:	48000400 	.word	0x48000400

080016f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <MX_I2C1_Init+0x74>)
 80016f6:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <MX_I2C1_Init+0x78>)
 80016f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <MX_I2C1_Init+0x74>)
 80016fc:	4a1b      	ldr	r2, [pc, #108]	; (800176c <MX_I2C1_Init+0x7c>)
 80016fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <MX_I2C1_Init+0x74>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <MX_I2C1_Init+0x74>)
 8001708:	2201      	movs	r2, #1
 800170a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <MX_I2C1_Init+0x74>)
 800170e:	2200      	movs	r2, #0
 8001710:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <MX_I2C1_Init+0x74>)
 8001714:	2200      	movs	r2, #0
 8001716:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <MX_I2C1_Init+0x74>)
 800171a:	2200      	movs	r2, #0
 800171c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_I2C1_Init+0x74>)
 8001720:	2200      	movs	r2, #0
 8001722:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <MX_I2C1_Init+0x74>)
 8001726:	2200      	movs	r2, #0
 8001728:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800172a:	480e      	ldr	r0, [pc, #56]	; (8001764 <MX_I2C1_Init+0x74>)
 800172c:	f002 fd9c 	bl	8004268 <HAL_I2C_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001736:	f000 f94e 	bl	80019d6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800173a:	2100      	movs	r1, #0
 800173c:	4809      	ldr	r0, [pc, #36]	; (8001764 <MX_I2C1_Init+0x74>)
 800173e:	f003 f897 	bl	8004870 <HAL_I2CEx_ConfigAnalogFilter>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001748:	f000 f945 	bl	80019d6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800174c:	2100      	movs	r1, #0
 800174e:	4805      	ldr	r0, [pc, #20]	; (8001764 <MX_I2C1_Init+0x74>)
 8001750:	f003 f8d9 	bl	8004906 <HAL_I2CEx_ConfigDigitalFilter>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800175a:	f000 f93c 	bl	80019d6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200002c8 	.word	0x200002c8
 8001768:	40005400 	.word	0x40005400
 800176c:	10909cec 	.word	0x10909cec

08001770 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b09e      	sub	sp, #120	; 0x78
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001788:	f107 0310 	add.w	r3, r7, #16
 800178c:	2254      	movs	r2, #84	; 0x54
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f005 fe5b 	bl	800744c <memset>
  if(i2cHandle->Instance==I2C1)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a1f      	ldr	r2, [pc, #124]	; (8001818 <HAL_I2C_MspInit+0xa8>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d137      	bne.n	8001810 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017a0:	2340      	movs	r3, #64	; 0x40
 80017a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	4618      	mov	r0, r3
 80017ae:	f003 ff81 	bl	80056b4 <HAL_RCCEx_PeriphCLKConfig>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80017b8:	f000 f90d 	bl	80019d6 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <HAL_I2C_MspInit+0xac>)
 80017be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c0:	4a16      	ldr	r2, [pc, #88]	; (800181c <HAL_I2C_MspInit+0xac>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <HAL_I2C_MspInit+0xac>)
 80017ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017d8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017da:	2312      	movs	r3, #18
 80017dc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017de:	2301      	movs	r3, #1
 80017e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017e6:	2304      	movs	r3, #4
 80017e8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017ee:	4619      	mov	r1, r3
 80017f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f4:	f002 fbb6 	bl	8003f64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <HAL_I2C_MspInit+0xac>)
 80017fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fc:	4a07      	ldr	r2, [pc, #28]	; (800181c <HAL_I2C_MspInit+0xac>)
 80017fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001802:	6593      	str	r3, [r2, #88]	; 0x58
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <HAL_I2C_MspInit+0xac>)
 8001806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001810:	bf00      	nop
 8001812:	3778      	adds	r7, #120	; 0x78
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40005400 	.word	0x40005400
 800181c:	40021000 	.word	0x40021000

08001820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001826:	f000 fd72 	bl	800230e <HAL_Init>
  /* USER CODE BEGIN Init */
 // setbuf(stdout, NULL);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800182a:	f000 f885 	bl	8001938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800182e:	f7ff fedb 	bl	80015e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001832:	f000 fca9 	bl	8002188 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001836:	f000 faff 	bl	8001e38 <MX_TIM6_Init>
  MX_I2C1_Init();
 800183a:	f7ff ff59 	bl	80016f0 <MX_I2C1_Init>
  MX_DMA_Init();
 800183e:	f7ff feb5 	bl	80015ac <MX_DMA_Init>
  MX_ADC1_Init();
 8001842:	f7ff fd55 	bl	80012f0 <MX_ADC1_Init>
  MX_TIM15_Init();
 8001846:	f000 fb2d 	bl	8001ea4 <MX_TIM15_Init>
  MX_TIM1_Init();
 800184a:	f000 fa0b 	bl	8001c64 <MX_TIM1_Init>
  MX_TIM2_Init();
 800184e:	f000 fa99 	bl	8001d84 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);//speaker
 8001852:	482d      	ldr	r0, [pc, #180]	; (8001908 <main+0xe8>)
 8001854:	f004 fa6e 	bl	8005d34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_MspInit(&htim1);//speaker
 8001858:	482b      	ldr	r0, [pc, #172]	; (8001908 <main+0xe8>)
 800185a:	f000 fba9 	bl	8001fb0 <HAL_TIM_PWM_MspInit>
  HAL_TIM_Base_Start_IT(&htim2);//speaker
 800185e:	482b      	ldr	r0, [pc, #172]	; (800190c <main+0xec>)
 8001860:	f004 fa68 	bl	8005d34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_MspInit(&htim2);//speaker
 8001864:	4829      	ldr	r0, [pc, #164]	; (800190c <main+0xec>)
 8001866:	f000 fba3 	bl	8001fb0 <HAL_TIM_PWM_MspInit>
  HAL_TIM_Base_Start_IT(&htim15);//speaker
 800186a:	4829      	ldr	r0, [pc, #164]	; (8001910 <main+0xf0>)
 800186c:	f004 fa62 	bl	8005d34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_MspInit(&htim15);//speaker
 8001870:	4827      	ldr	r0, [pc, #156]	; (8001910 <main+0xf0>)
 8001872:	f000 fb9d 	bl	8001fb0 <HAL_TIM_PWM_MspInit>
  pl_timer_init();
 8001876:	f7ff fd07 	bl	8001288 <pl_timer_init>
  lcd_init();
 800187a:	f7ff fbc8 	bl	800100e <lcd_init>
  lcd_puts("Hello");
 800187e:	4825      	ldr	r0, [pc, #148]	; (8001914 <main+0xf4>)
 8001880:	f7ff fbb0 	bl	8000fe4 <lcd_puts>
  lcd_pos(1, 0);
 8001884:	2100      	movs	r1, #0
 8001886:	2001      	movs	r0, #1
 8001888:	f7ff fbe7 	bl	800105a <lcd_pos>
  lcd_puts("   STM32");
 800188c:	4822      	ldr	r0, [pc, #136]	; (8001918 <main+0xf8>)
 800188e:	f7ff fba9 	bl	8000fe4 <lcd_puts>
  HAL_Delay(500);
 8001892:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001896:	f000 fdaf 	bl	80023f8 <HAL_Delay>
  lcd_clear();
 800189a:	f7ff fbf9 	bl	8001090 <lcd_clear>
  lcd_pos(0, 0);
 800189e:	2100      	movs	r1, #0
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff fbda 	bl	800105a <lcd_pos>
  lcd_puts("Mice");
 80018a6:	481d      	ldr	r0, [pc, #116]	; (800191c <main+0xfc>)
 80018a8:	f7ff fb9c 	bl	8000fe4 <lcd_puts>
  lcd_pos(1, 0);
 80018ac:	2100      	movs	r1, #0
 80018ae:	2001      	movs	r0, #1
 80018b0:	f7ff fbd3 	bl	800105a <lcd_pos>
  lcd_puts("aaa");
 80018b4:	481a      	ldr	r0, [pc, #104]	; (8001920 <main+0x100>)
 80018b6:	f7ff fb95 	bl	8000fe4 <lcd_puts>
  HAL_Delay(100);
 80018ba:	2064      	movs	r0, #100	; 0x64
 80018bc:	f000 fd9c 	bl	80023f8 <HAL_Delay>
  uint16_t cnt = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	80fb      	strh	r3, [r7, #6]
  sensor_mode=1;
 80018c4:	4b17      	ldr	r3, [pc, #92]	; (8001924 <main+0x104>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	701a      	strb	r2, [r3, #0]
//     HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer) / sizeof(uint16_t));
//     int Batt1,Batt2;
//     Batt1=(int)g_V_batt;
//	 Batt2=(int)((g_V_batt-(float)Batt1)*100);
//	 printf("BATT=%d.%d\n",Batt1,Batt2);
	 printf("BATT=%f\n",g_V_batt);
 80018ca:	4b17      	ldr	r3, [pc, #92]	; (8001928 <main+0x108>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe3a 	bl	8000548 <__aeabi_f2d>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4814      	ldr	r0, [pc, #80]	; (800192c <main+0x10c>)
 80018da:	f006 fa29 	bl	8007d30 <iprintf>
     printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d\n", g_sensor_on[0],g_sensor_on[1],g_sensor_on[2],g_sensor_on[3]);
 80018de:	4b14      	ldr	r3, [pc, #80]	; (8001930 <main+0x110>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	4619      	mov	r1, r3
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <main+0x110>)
 80018e6:	885b      	ldrh	r3, [r3, #2]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <main+0x110>)
 80018ec:	889b      	ldrh	r3, [r3, #4]
 80018ee:	4618      	mov	r0, r3
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <main+0x110>)
 80018f2:	88db      	ldrh	r3, [r3, #6]
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	4603      	mov	r3, r0
 80018f8:	480e      	ldr	r0, [pc, #56]	; (8001934 <main+0x114>)
 80018fa:	f006 fa19 	bl	8007d30 <iprintf>
     wait_ms(1000);
 80018fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001902:	f7ff fcd9 	bl	80012b8 <wait_ms>
  {
 8001906:	e7e0      	b.n	80018ca <main+0xaa>
 8001908:	20000318 	.word	0x20000318
 800190c:	20000364 	.word	0x20000364
 8001910:	200003fc 	.word	0x200003fc
 8001914:	08009ed0 	.word	0x08009ed0
 8001918:	08009ed8 	.word	0x08009ed8
 800191c:	08009ee4 	.word	0x08009ee4
 8001920:	08009eec 	.word	0x08009eec
 8001924:	20000203 	.word	0x20000203
 8001928:	20000214 	.word	0x20000214
 800192c:	08009ef0 	.word	0x08009ef0
 8001930:	20000204 	.word	0x20000204
 8001934:	08009efc 	.word	0x08009efc

08001938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b096      	sub	sp, #88	; 0x58
 800193c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	2244      	movs	r2, #68	; 0x44
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f005 fd80 	bl	800744c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800194c:	463b      	mov	r3, r7
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800195a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800195e:	f003 f82d 	bl	80049bc <HAL_PWREx_ControlVoltageScaling>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001968:	f000 f835 	bl	80019d6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800196c:	2301      	movs	r3, #1
 800196e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001970:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001974:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001976:	2302      	movs	r3, #2
 8001978:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800197a:	2303      	movs	r3, #3
 800197c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 3;
 800197e:	2303      	movs	r3, #3
 8001980:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001982:	2328      	movs	r3, #40	; 0x28
 8001984:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001986:	2307      	movs	r3, #7
 8001988:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800198a:	2302      	movs	r3, #2
 800198c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800198e:	2302      	movs	r3, #2
 8001990:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4618      	mov	r0, r3
 8001998:	f003 f866 	bl	8004a68 <HAL_RCC_OscConfig>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80019a2:	f000 f818 	bl	80019d6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a6:	230f      	movs	r3, #15
 80019a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019aa:	2303      	movs	r3, #3
 80019ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019ba:	463b      	mov	r3, r7
 80019bc:	2104      	movs	r1, #4
 80019be:	4618      	mov	r0, r3
 80019c0:	f003 fc72 	bl	80052a8 <HAL_RCC_ClockConfig>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80019ca:	f000 f804 	bl	80019d6 <Error_Handler>
  }
}
 80019ce:	bf00      	nop
 80019d0:	3758      	adds	r7, #88	; 0x58
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019da:	b672      	cpsid	i
}
 80019dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019de:	e7fe      	b.n	80019de <Error_Handler+0x8>

080019e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e6:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <HAL_MspInit+0x44>)
 80019e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ea:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <HAL_MspInit+0x44>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6613      	str	r3, [r2, #96]	; 0x60
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <HAL_MspInit+0x44>)
 80019f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_MspInit+0x44>)
 8001a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a02:	4a08      	ldr	r2, [pc, #32]	; (8001a24 <HAL_MspInit+0x44>)
 8001a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a08:	6593      	str	r3, [r2, #88]	; 0x58
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_MspInit+0x44>)
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40021000 	.word	0x40021000

08001a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <NMI_Handler+0x4>

08001a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a32:	e7fe      	b.n	8001a32 <HardFault_Handler+0x4>

08001a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <MemManage_Handler+0x4>

08001a3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3e:	e7fe      	b.n	8001a3e <BusFault_Handler+0x4>

08001a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <UsageFault_Handler+0x4>

08001a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a74:	f000 fca0 	bl	80023b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <DMA1_Channel1_IRQHandler+0x10>)
 8001a82:	f002 f98f 	bl	8003da4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000280 	.word	0x20000280

08001a90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a94:	4804      	ldr	r0, [pc, #16]	; (8001aa8 <TIM6_DAC_IRQHandler+0x18>)
 8001a96:	f004 f9f8 	bl	8005e8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  pl_timer_count();
 8001a9a:	f7ff fbff 	bl	800129c <pl_timer_count>
  pl_interupt_getSensor();
 8001a9e:	f7ff fbdf 	bl	8001260 <pl_interupt_getSensor>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200003b0 	.word	0x200003b0

08001aac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
	return 1;
 8001ab0:	2301      	movs	r3, #1
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <_kill>:

int _kill(int pid, int sig)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ac6:	f005 fc97 	bl	80073f8 <__errno>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2216      	movs	r2, #22
 8001ace:	601a      	str	r2, [r3, #0]
	return -1;
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <_exit>:

void _exit (int status)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ffe7 	bl	8001abc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001aee:	e7fe      	b.n	8001aee <_exit+0x12>

08001af0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	e00a      	b.n	8001b18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b02:	f3af 8000 	nop.w
 8001b06:	4601      	mov	r1, r0
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	60ba      	str	r2, [r7, #8]
 8001b0e:	b2ca      	uxtb	r2, r1
 8001b10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	3301      	adds	r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	dbf0      	blt.n	8001b02 <_read+0x12>
	}

return len;
 8001b20:	687b      	ldr	r3, [r7, #4]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	e00a      	b.n	8001b54 <_write+0x28>
	{
		HAL_UART_Transmit(&huart2, ptr++, 1, 1);
 8001b3e:	68b9      	ldr	r1, [r7, #8]
 8001b40:	1c4b      	adds	r3, r1, #1
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	2301      	movs	r3, #1
 8001b46:	2201      	movs	r2, #1
 8001b48:	4807      	ldr	r0, [pc, #28]	; (8001b68 <_write+0x3c>)
 8001b4a:	f005 f82b 	bl	8006ba4 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	3301      	adds	r3, #1
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	dbf0      	blt.n	8001b3e <_write+0x12>
	}
	return len;
 8001b5c:	687b      	ldr	r3, [r7, #4]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000448 	.word	0x20000448

08001b6c <_close>:

int _close(int file)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	return -1;
 8001b74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b94:	605a      	str	r2, [r3, #4]
	return 0;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <_isatty>:

int _isatty(int file)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	return 1;
 8001bac:	2301      	movs	r3, #1
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b085      	sub	sp, #20
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	60f8      	str	r0, [r7, #12]
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
	return 0;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bdc:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <_sbrk+0x5c>)
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <_sbrk+0x60>)
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <_sbrk+0x64>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d102      	bne.n	8001bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <_sbrk+0x64>)
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <_sbrk+0x68>)
 8001bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <_sbrk+0x64>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d207      	bcs.n	8001c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c04:	f005 fbf8 	bl	80073f8 <__errno>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c12:	e009      	b.n	8001c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <_sbrk+0x64>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <_sbrk+0x64>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	4a05      	ldr	r2, [pc, #20]	; (8001c38 <_sbrk+0x64>)
 8001c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c26:	68fb      	ldr	r3, [r7, #12]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20010000 	.word	0x20010000
 8001c34:	00000400 	.word	0x00000400
 8001c38:	20000314 	.word	0x20000314
 8001c3c:	200004e0 	.word	0x200004e0

08001c40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <SystemInit+0x20>)
 8001c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4a:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <SystemInit+0x20>)
 8001c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b096      	sub	sp, #88	; 0x58
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
 8001c84:	611a      	str	r2, [r3, #16]
 8001c86:	615a      	str	r2, [r3, #20]
 8001c88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	222c      	movs	r2, #44	; 0x2c
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4618      	mov	r0, r3
 8001c92:	f005 fbdb 	bl	800744c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c96:	4b39      	ldr	r3, [pc, #228]	; (8001d7c <MX_TIM1_Init+0x118>)
 8001c98:	4a39      	ldr	r2, [pc, #228]	; (8001d80 <MX_TIM1_Init+0x11c>)
 8001c9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8001c9c:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <MX_TIM1_Init+0x118>)
 8001c9e:	220f      	movs	r2, #15
 8001ca0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca2:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <MX_TIM1_Init+0x118>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8001ca8:	4b34      	ldr	r3, [pc, #208]	; (8001d7c <MX_TIM1_Init+0x118>)
 8001caa:	f242 720f 	movw	r2, #9999	; 0x270f
 8001cae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb0:	4b32      	ldr	r3, [pc, #200]	; (8001d7c <MX_TIM1_Init+0x118>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cb6:	4b31      	ldr	r3, [pc, #196]	; (8001d7c <MX_TIM1_Init+0x118>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cbc:	4b2f      	ldr	r3, [pc, #188]	; (8001d7c <MX_TIM1_Init+0x118>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cc2:	482e      	ldr	r0, [pc, #184]	; (8001d7c <MX_TIM1_Init+0x118>)
 8001cc4:	f004 f88a 	bl	8005ddc <HAL_TIM_PWM_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001cce:	f7ff fe82 	bl	80019d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cde:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4825      	ldr	r0, [pc, #148]	; (8001d7c <MX_TIM1_Init+0x118>)
 8001ce6:	f004 fe13 	bl	8006910 <HAL_TIMEx_MasterConfigSynchronization>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001cf0:	f7ff fe71 	bl	80019d6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cf4:	2360      	movs	r3, #96	; 0x60
 8001cf6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 5000-1;
 8001cf8:	f241 3387 	movw	r3, #4999	; 0x1387
 8001cfc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d02:	2300      	movs	r3, #0
 8001d04:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d16:	2200      	movs	r2, #0
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4818      	ldr	r0, [pc, #96]	; (8001d7c <MX_TIM1_Init+0x118>)
 8001d1c:	f004 f9d4 	bl	80060c8 <HAL_TIM_PWM_ConfigChannel>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001d26:	f7ff fe56 	bl	80019d6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4807      	ldr	r0, [pc, #28]	; (8001d7c <MX_TIM1_Init+0x118>)
 8001d60:	f004 fe3c 	bl	80069dc <HAL_TIMEx_ConfigBreakDeadTime>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001d6a:	f7ff fe34 	bl	80019d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d6e:	4803      	ldr	r0, [pc, #12]	; (8001d7c <MX_TIM1_Init+0x118>)
 8001d70:	f000 f98a 	bl	8002088 <HAL_TIM_MspPostInit>

}
 8001d74:	bf00      	nop
 8001d76:	3758      	adds	r7, #88	; 0x58
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000318 	.word	0x20000318
 8001d80:	40012c00 	.word	0x40012c00

08001d84 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8a:	f107 031c 	add.w	r3, r7, #28
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d96:	463b      	mov	r3, r7
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
 8001da4:	615a      	str	r2, [r3, #20]
 8001da6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001da8:	4b22      	ldr	r3, [pc, #136]	; (8001e34 <MX_TIM2_Init+0xb0>)
 8001daa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8001db0:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <MX_TIM2_Init+0xb0>)
 8001db2:	220f      	movs	r2, #15
 8001db4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db6:	4b1f      	ldr	r3, [pc, #124]	; (8001e34 <MX_TIM2_Init+0xb0>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001dbc:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <MX_TIM2_Init+0xb0>)
 8001dbe:	f242 720f 	movw	r2, #9999	; 0x270f
 8001dc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <MX_TIM2_Init+0xb0>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dca:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <MX_TIM2_Init+0xb0>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001dd0:	4818      	ldr	r0, [pc, #96]	; (8001e34 <MX_TIM2_Init+0xb0>)
 8001dd2:	f004 f803 	bl	8005ddc <HAL_TIM_PWM_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001ddc:	f7ff fdfb 	bl	80019d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	4619      	mov	r1, r3
 8001dee:	4811      	ldr	r0, [pc, #68]	; (8001e34 <MX_TIM2_Init+0xb0>)
 8001df0:	f004 fd8e 	bl	8006910 <HAL_TIMEx_MasterConfigSynchronization>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001dfa:	f7ff fdec 	bl	80019d6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dfe:	2360      	movs	r3, #96	; 0x60
 8001e00:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000-1;
 8001e02:	f241 3387 	movw	r3, #4999	; 0x1387
 8001e06:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e10:	463b      	mov	r3, r7
 8001e12:	2204      	movs	r2, #4
 8001e14:	4619      	mov	r1, r3
 8001e16:	4807      	ldr	r0, [pc, #28]	; (8001e34 <MX_TIM2_Init+0xb0>)
 8001e18:	f004 f956 	bl	80060c8 <HAL_TIM_PWM_ConfigChannel>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001e22:	f7ff fdd8 	bl	80019d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e26:	4803      	ldr	r0, [pc, #12]	; (8001e34 <MX_TIM2_Init+0xb0>)
 8001e28:	f000 f92e 	bl	8002088 <HAL_TIM_MspPostInit>

}
 8001e2c:	bf00      	nop
 8001e2e:	3728      	adds	r7, #40	; 0x28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000364 	.word	0x20000364

08001e38 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e48:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <MX_TIM6_Init+0x64>)
 8001e4a:	4a15      	ldr	r2, [pc, #84]	; (8001ea0 <MX_TIM6_Init+0x68>)
 8001e4c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 8001e4e:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <MX_TIM6_Init+0x64>)
 8001e50:	224f      	movs	r2, #79	; 0x4f
 8001e52:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <MX_TIM6_Init+0x64>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <MX_TIM6_Init+0x64>)
 8001e5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e60:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <MX_TIM6_Init+0x64>)
 8001e64:	2280      	movs	r2, #128	; 0x80
 8001e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e68:	480c      	ldr	r0, [pc, #48]	; (8001e9c <MX_TIM6_Init+0x64>)
 8001e6a:	f003 ff0b 	bl	8005c84 <HAL_TIM_Base_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001e74:	f7ff fdaf 	bl	80019d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	4619      	mov	r1, r3
 8001e84:	4805      	ldr	r0, [pc, #20]	; (8001e9c <MX_TIM6_Init+0x64>)
 8001e86:	f004 fd43 	bl	8006910 <HAL_TIMEx_MasterConfigSynchronization>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001e90:	f7ff fda1 	bl	80019d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	200003b0 	.word	0x200003b0
 8001ea0:	40001000 	.word	0x40001000

08001ea4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b096      	sub	sp, #88	; 0x58
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eaa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	60da      	str	r2, [r3, #12]
 8001ec4:	611a      	str	r2, [r3, #16]
 8001ec6:	615a      	str	r2, [r3, #20]
 8001ec8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	222c      	movs	r2, #44	; 0x2c
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f005 fabb 	bl	800744c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001ed6:	4b34      	ldr	r3, [pc, #208]	; (8001fa8 <MX_TIM15_Init+0x104>)
 8001ed8:	4a34      	ldr	r2, [pc, #208]	; (8001fac <MX_TIM15_Init+0x108>)
 8001eda:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 16-1;
 8001edc:	4b32      	ldr	r3, [pc, #200]	; (8001fa8 <MX_TIM15_Init+0x104>)
 8001ede:	220f      	movs	r2, #15
 8001ee0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee2:	4b31      	ldr	r3, [pc, #196]	; (8001fa8 <MX_TIM15_Init+0x104>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 5000-1;
 8001ee8:	4b2f      	ldr	r3, [pc, #188]	; (8001fa8 <MX_TIM15_Init+0x104>)
 8001eea:	f241 3287 	movw	r2, #4999	; 0x1387
 8001eee:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef0:	4b2d      	ldr	r3, [pc, #180]	; (8001fa8 <MX_TIM15_Init+0x104>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001ef6:	4b2c      	ldr	r3, [pc, #176]	; (8001fa8 <MX_TIM15_Init+0x104>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efc:	4b2a      	ldr	r3, [pc, #168]	; (8001fa8 <MX_TIM15_Init+0x104>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001f02:	4829      	ldr	r0, [pc, #164]	; (8001fa8 <MX_TIM15_Init+0x104>)
 8001f04:	f003 ff6a 	bl	8005ddc <HAL_TIM_PWM_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001f0e:	f7ff fd62 	bl	80019d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001f1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4821      	ldr	r0, [pc, #132]	; (8001fa8 <MX_TIM15_Init+0x104>)
 8001f22:	f004 fcf5 	bl	8006910 <HAL_TIMEx_MasterConfigSynchronization>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001f2c:	f7ff fd53 	bl	80019d6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f30:	2360      	movs	r3, #96	; 0x60
 8001f32:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 2500-1;
 8001f34:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8001f38:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f46:	2300      	movs	r3, #0
 8001f48:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f52:	2204      	movs	r2, #4
 8001f54:	4619      	mov	r1, r3
 8001f56:	4814      	ldr	r0, [pc, #80]	; (8001fa8 <MX_TIM15_Init+0x104>)
 8001f58:	f004 f8b6 	bl	80060c8 <HAL_TIM_PWM_ConfigChannel>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 8001f62:	f7ff fd38 	bl	80019d6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	4619      	mov	r1, r3
 8001f88:	4807      	ldr	r0, [pc, #28]	; (8001fa8 <MX_TIM15_Init+0x104>)
 8001f8a:	f004 fd27 	bl	80069dc <HAL_TIMEx_ConfigBreakDeadTime>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM15_Init+0xf4>
  {
    Error_Handler();
 8001f94:	f7ff fd1f 	bl	80019d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001f98:	4803      	ldr	r0, [pc, #12]	; (8001fa8 <MX_TIM15_Init+0x104>)
 8001f9a:	f000 f875 	bl	8002088 <HAL_TIM_MspPostInit>

}
 8001f9e:	bf00      	nop
 8001fa0:	3758      	adds	r7, #88	; 0x58
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	200003fc 	.word	0x200003fc
 8001fac:	40014000 	.word	0x40014000

08001fb0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <HAL_TIM_PWM_MspInit+0x80>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d10c      	bne.n	8001fdc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <HAL_TIM_PWM_MspInit+0x84>)
 8001fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc6:	4a1b      	ldr	r2, [pc, #108]	; (8002034 <HAL_TIM_PWM_MspInit+0x84>)
 8001fc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fcc:	6613      	str	r3, [r2, #96]	; 0x60
 8001fce:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_TIM_PWM_MspInit+0x84>)
 8001fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8001fda:	e022      	b.n	8002022 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe4:	d10c      	bne.n	8002000 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fe6:	4b13      	ldr	r3, [pc, #76]	; (8002034 <HAL_TIM_PWM_MspInit+0x84>)
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fea:	4a12      	ldr	r2, [pc, #72]	; (8002034 <HAL_TIM_PWM_MspInit+0x84>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <HAL_TIM_PWM_MspInit+0x84>)
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	693b      	ldr	r3, [r7, #16]
}
 8001ffe:	e010      	b.n	8002022 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM15)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0c      	ldr	r2, [pc, #48]	; (8002038 <HAL_TIM_PWM_MspInit+0x88>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d10b      	bne.n	8002022 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800200a:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <HAL_TIM_PWM_MspInit+0x84>)
 800200c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200e:	4a09      	ldr	r2, [pc, #36]	; (8002034 <HAL_TIM_PWM_MspInit+0x84>)
 8002010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002014:	6613      	str	r3, [r2, #96]	; 0x60
 8002016:	4b07      	ldr	r3, [pc, #28]	; (8002034 <HAL_TIM_PWM_MspInit+0x84>)
 8002018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800201a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
}
 8002022:	bf00      	nop
 8002024:	371c      	adds	r7, #28
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40012c00 	.word	0x40012c00
 8002034:	40021000 	.word	0x40021000
 8002038:	40014000 	.word	0x40014000

0800203c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a0d      	ldr	r2, [pc, #52]	; (8002080 <HAL_TIM_Base_MspInit+0x44>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d113      	bne.n	8002076 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800204e:	4b0d      	ldr	r3, [pc, #52]	; (8002084 <HAL_TIM_Base_MspInit+0x48>)
 8002050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002052:	4a0c      	ldr	r2, [pc, #48]	; (8002084 <HAL_TIM_Base_MspInit+0x48>)
 8002054:	f043 0310 	orr.w	r3, r3, #16
 8002058:	6593      	str	r3, [r2, #88]	; 0x58
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_TIM_Base_MspInit+0x48>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	f003 0310 	and.w	r3, r3, #16
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002066:	2200      	movs	r2, #0
 8002068:	2100      	movs	r1, #0
 800206a:	2036      	movs	r0, #54	; 0x36
 800206c:	f001 fd0d 	bl	8003a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002070:	2036      	movs	r0, #54	; 0x36
 8002072:	f001 fd26 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40001000 	.word	0x40001000
 8002084:	40021000 	.word	0x40021000

08002088 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a35      	ldr	r2, [pc, #212]	; (800217c <HAL_TIM_MspPostInit+0xf4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d11e      	bne.n	80020e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020aa:	4b35      	ldr	r3, [pc, #212]	; (8002180 <HAL_TIM_MspPostInit+0xf8>)
 80020ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ae:	4a34      	ldr	r2, [pc, #208]	; (8002180 <HAL_TIM_MspPostInit+0xf8>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b6:	4b32      	ldr	r3, [pc, #200]	; (8002180 <HAL_TIM_MspPostInit+0xf8>)
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_CLOCK_L_Pin;
 80020c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2300      	movs	r3, #0
 80020d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020d4:	2301      	movs	r3, #1
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_CLOCK_L_GPIO_Port, &GPIO_InitStruct);
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	4619      	mov	r1, r3
 80020de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e2:	f001 ff3f 	bl	8003f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80020e6:	e044      	b.n	8002172 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f0:	d11d      	bne.n	800212e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	4b23      	ldr	r3, [pc, #140]	; (8002180 <HAL_TIM_MspPostInit+0xf8>)
 80020f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f6:	4a22      	ldr	r2, [pc, #136]	; (8002180 <HAL_TIM_MspPostInit+0xf8>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <HAL_TIM_MspPostInit+0xf8>)
 8002100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_CLOCK_R_Pin;
 800210a:	2302      	movs	r3, #2
 800210c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800211a:	2301      	movs	r3, #1
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_CLOCK_R_GPIO_Port, &GPIO_InitStruct);
 800211e:	f107 0314 	add.w	r3, r7, #20
 8002122:	4619      	mov	r1, r3
 8002124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002128:	f001 ff1c 	bl	8003f64 <HAL_GPIO_Init>
}
 800212c:	e021      	b.n	8002172 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM15)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a14      	ldr	r2, [pc, #80]	; (8002184 <HAL_TIM_MspPostInit+0xfc>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d11c      	bne.n	8002172 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <HAL_TIM_MspPostInit+0xf8>)
 800213a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213c:	4a10      	ldr	r2, [pc, #64]	; (8002180 <HAL_TIM_MspPostInit+0xf8>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002144:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <HAL_TIM_MspPostInit+0xf8>)
 8002146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPEAKER_Pin;
 8002150:	2308      	movs	r3, #8
 8002152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002160:	230e      	movs	r3, #14
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPEAKER_GPIO_Port, &GPIO_InitStruct);
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	4619      	mov	r1, r3
 800216a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800216e:	f001 fef9 	bl	8003f64 <HAL_GPIO_Init>
}
 8002172:	bf00      	nop
 8002174:	3728      	adds	r7, #40	; 0x28
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40012c00 	.word	0x40012c00
 8002180:	40021000 	.word	0x40021000
 8002184:	40014000 	.word	0x40014000

08002188 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800218c:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <MX_USART2_UART_Init+0x58>)
 800218e:	4a15      	ldr	r2, [pc, #84]	; (80021e4 <MX_USART2_UART_Init+0x5c>)
 8002190:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <MX_USART2_UART_Init+0x58>)
 8002194:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002198:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <MX_USART2_UART_Init+0x58>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <MX_USART2_UART_Init+0x58>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <MX_USART2_UART_Init+0x58>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <MX_USART2_UART_Init+0x58>)
 80021ae:	220c      	movs	r2, #12
 80021b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <MX_USART2_UART_Init+0x58>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <MX_USART2_UART_Init+0x58>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <MX_USART2_UART_Init+0x58>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <MX_USART2_UART_Init+0x58>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021ca:	4805      	ldr	r0, [pc, #20]	; (80021e0 <MX_USART2_UART_Init+0x58>)
 80021cc:	f004 fc9c 	bl	8006b08 <HAL_UART_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80021d6:	f7ff fbfe 	bl	80019d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000448 	.word	0x20000448
 80021e4:	40004400 	.word	0x40004400

080021e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b09e      	sub	sp, #120	; 0x78
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002200:	f107 0310 	add.w	r3, r7, #16
 8002204:	2254      	movs	r2, #84	; 0x54
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f005 f91f 	bl	800744c <memset>
  if(uartHandle->Instance==USART2)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a28      	ldr	r2, [pc, #160]	; (80022b4 <HAL_UART_MspInit+0xcc>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d148      	bne.n	80022aa <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002218:	2302      	movs	r3, #2
 800221a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800221c:	2300      	movs	r3, #0
 800221e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002220:	f107 0310 	add.w	r3, r7, #16
 8002224:	4618      	mov	r0, r3
 8002226:	f003 fa45 	bl	80056b4 <HAL_RCCEx_PeriphCLKConfig>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002230:	f7ff fbd1 	bl	80019d6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002234:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <HAL_UART_MspInit+0xd0>)
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	4a1f      	ldr	r2, [pc, #124]	; (80022b8 <HAL_UART_MspInit+0xd0>)
 800223a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800223e:	6593      	str	r3, [r2, #88]	; 0x58
 8002240:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <HAL_UART_MspInit+0xd0>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224c:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <HAL_UART_MspInit+0xd0>)
 800224e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002250:	4a19      	ldr	r2, [pc, #100]	; (80022b8 <HAL_UART_MspInit+0xd0>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002258:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <HAL_UART_MspInit+0xd0>)
 800225a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002264:	2304      	movs	r3, #4
 8002266:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002270:	2303      	movs	r3, #3
 8002272:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002274:	2307      	movs	r3, #7
 8002276:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002278:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800227c:	4619      	mov	r1, r3
 800227e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002282:	f001 fe6f 	bl	8003f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800228a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002294:	2303      	movs	r3, #3
 8002296:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002298:	2303      	movs	r3, #3
 800229a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800229c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022a0:	4619      	mov	r1, r3
 80022a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a6:	f001 fe5d 	bl	8003f64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022aa:	bf00      	nop
 80022ac:	3778      	adds	r7, #120	; 0x78
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40004400 	.word	0x40004400
 80022b8:	40021000 	.word	0x40021000

080022bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022c0:	f7ff fcbe 	bl	8001c40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022c4:	480c      	ldr	r0, [pc, #48]	; (80022f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80022c6:	490d      	ldr	r1, [pc, #52]	; (80022fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80022c8:	4a0d      	ldr	r2, [pc, #52]	; (8002300 <LoopForever+0xe>)
  movs r3, #0
 80022ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022cc:	e002      	b.n	80022d4 <LoopCopyDataInit>

080022ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022d2:	3304      	adds	r3, #4

080022d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022d8:	d3f9      	bcc.n	80022ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022da:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022dc:	4c0a      	ldr	r4, [pc, #40]	; (8002308 <LoopForever+0x16>)
  movs r3, #0
 80022de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022e0:	e001      	b.n	80022e6 <LoopFillZerobss>

080022e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022e4:	3204      	adds	r2, #4

080022e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022e8:	d3fb      	bcc.n	80022e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ea:	f005 f88b 	bl	8007404 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022ee:	f7ff fa97 	bl	8001820 <main>

080022f2 <LoopForever>:

LoopForever:
    b LoopForever
 80022f2:	e7fe      	b.n	80022f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022f4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80022f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022fc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002300:	0800a354 	.word	0x0800a354
  ldr r2, =_sbss
 8002304:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002308:	200004e0 	.word	0x200004e0

0800230c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800230c:	e7fe      	b.n	800230c <ADC1_IRQHandler>

0800230e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002318:	2003      	movs	r0, #3
 800231a:	f001 fbab 	bl	8003a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800231e:	2000      	movs	r0, #0
 8002320:	f000 f80e 	bl	8002340 <HAL_InitTick>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	71fb      	strb	r3, [r7, #7]
 800232e:	e001      	b.n	8002334 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002330:	f7ff fb56 	bl	80019e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002334:	79fb      	ldrb	r3, [r7, #7]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800234c:	4b17      	ldr	r3, [pc, #92]	; (80023ac <HAL_InitTick+0x6c>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d023      	beq.n	800239c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002354:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <HAL_InitTick+0x70>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b14      	ldr	r3, [pc, #80]	; (80023ac <HAL_InitTick+0x6c>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	4619      	mov	r1, r3
 800235e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002362:	fbb3 f3f1 	udiv	r3, r3, r1
 8002366:	fbb2 f3f3 	udiv	r3, r2, r3
 800236a:	4618      	mov	r0, r3
 800236c:	f001 fbb7 	bl	8003ade <HAL_SYSTICK_Config>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10f      	bne.n	8002396 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b0f      	cmp	r3, #15
 800237a:	d809      	bhi.n	8002390 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800237c:	2200      	movs	r2, #0
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	f04f 30ff 	mov.w	r0, #4294967295
 8002384:	f001 fb81 	bl	8003a8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002388:	4a0a      	ldr	r2, [pc, #40]	; (80023b4 <HAL_InitTick+0x74>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	e007      	b.n	80023a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
 8002394:	e004      	b.n	80023a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	73fb      	strb	r3, [r7, #15]
 800239a:	e001      	b.n	80023a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000008 	.word	0x20000008
 80023b0:	20000000 	.word	0x20000000
 80023b4:	20000004 	.word	0x20000004

080023b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_IncTick+0x20>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_IncTick+0x24>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4413      	add	r3, r2
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <HAL_IncTick+0x24>)
 80023ca:	6013      	str	r3, [r2, #0]
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20000008 	.word	0x20000008
 80023dc:	200004cc 	.word	0x200004cc

080023e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return uwTick;
 80023e4:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <HAL_GetTick+0x14>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	200004cc 	.word	0x200004cc

080023f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002400:	f7ff ffee 	bl	80023e0 <HAL_GetTick>
 8002404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002410:	d005      	beq.n	800241e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <HAL_Delay+0x44>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4413      	add	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800241e:	bf00      	nop
 8002420:	f7ff ffde 	bl	80023e0 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	429a      	cmp	r2, r3
 800242e:	d8f7      	bhi.n	8002420 <HAL_Delay+0x28>
  {
  }
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000008 	.word	0x20000008

08002440 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	609a      	str	r2, [r3, #8]
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	609a      	str	r2, [r3, #8]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3360      	adds	r3, #96	; 0x60
 80024ba:	461a      	mov	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b08      	ldr	r3, [pc, #32]	; (80024ec <LL_ADC_SetOffset+0x44>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024e0:	bf00      	nop
 80024e2:	371c      	adds	r7, #28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	03fff000 	.word	0x03fff000

080024f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3360      	adds	r3, #96	; 0x60
 80024fe:	461a      	mov	r2, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800251c:	b480      	push	{r7}
 800251e:	b087      	sub	sp, #28
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	3360      	adds	r3, #96	; 0x60
 800252c:	461a      	mov	r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	431a      	orrs	r2, r3
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002546:	bf00      	nop
 8002548:	371c      	adds	r7, #28
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	3330      	adds	r3, #48	; 0x30
 8002588:	461a      	mov	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	4413      	add	r3, r2
 8002596:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	211f      	movs	r1, #31
 80025a4:	fa01 f303 	lsl.w	r3, r1, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	401a      	ands	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	0e9b      	lsrs	r3, r3, #26
 80025b0:	f003 011f 	and.w	r1, r3, #31
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	431a      	orrs	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025c4:	bf00      	nop
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	3314      	adds	r3, #20
 80025e0:	461a      	mov	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	0e5b      	lsrs	r3, r3, #25
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	4413      	add	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	0d1b      	lsrs	r3, r3, #20
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	2107      	movs	r1, #7
 80025fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	401a      	ands	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	0d1b      	lsrs	r3, r3, #20
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	fa01 f303 	lsl.w	r3, r1, r3
 8002614:	431a      	orrs	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800261a:	bf00      	nop
 800261c:	371c      	adds	r7, #28
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
	...

08002628 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002640:	43db      	mvns	r3, r3
 8002642:	401a      	ands	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f003 0318 	and.w	r3, r3, #24
 800264a:	4908      	ldr	r1, [pc, #32]	; (800266c <LL_ADC_SetChannelSingleDiff+0x44>)
 800264c:	40d9      	lsrs	r1, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	400b      	ands	r3, r1
 8002652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002656:	431a      	orrs	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800265e:	bf00      	nop
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	0007ffff 	.word	0x0007ffff

08002670 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002680:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6093      	str	r3, [r2, #8]
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026a8:	d101      	bne.n	80026ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80026cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026f8:	d101      	bne.n	80026fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800271c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002720:	f043 0201 	orr.w	r2, r3, #1
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002744:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002748:	f043 0202 	orr.w	r2, r3, #2
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <LL_ADC_IsEnabled+0x18>
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <LL_ADC_IsEnabled+0x1a>
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b02      	cmp	r3, #2
 8002794:	d101      	bne.n	800279a <LL_ADC_IsDisableOngoing+0x18>
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <LL_ADC_IsDisableOngoing+0x1a>
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027bc:	f043 0204 	orr.w	r2, r3, #4
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027e4:	f043 0210 	orr.w	r2, r3, #16
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b04      	cmp	r3, #4
 800280a:	d101      	bne.n	8002810 <LL_ADC_REG_IsConversionOngoing+0x18>
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800282e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002832:	f043 0220 	orr.w	r2, r3, #32
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b08      	cmp	r3, #8
 8002858:	d101      	bne.n	800285e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002878:	2300      	movs	r3, #0
 800287a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e12c      	b.n	8002ae0 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002890:	2b00      	cmp	r3, #0
 8002892:	d109      	bne.n	80028a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7fe fdd1 	bl	800143c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff fef1 	bl	8002694 <LL_ADC_IsDeepPowerDownEnabled>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d004      	beq.n	80028c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fed7 	bl	8002670 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff ff0c 	bl	80026e4 <LL_ADC_IsInternalRegulatorEnabled>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d115      	bne.n	80028fe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fef0 	bl	80026bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028dc:	4b82      	ldr	r3, [pc, #520]	; (8002ae8 <HAL_ADC_Init+0x27c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	099b      	lsrs	r3, r3, #6
 80028e2:	4a82      	ldr	r2, [pc, #520]	; (8002aec <HAL_ADC_Init+0x280>)
 80028e4:	fba2 2303 	umull	r2, r3, r2, r3
 80028e8:	099b      	lsrs	r3, r3, #6
 80028ea:	3301      	adds	r3, #1
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80028f0:	e002      	b.n	80028f8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	3b01      	subs	r3, #1
 80028f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f9      	bne.n	80028f2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff feee 	bl	80026e4 <LL_ADC_IsInternalRegulatorEnabled>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10d      	bne.n	800292a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002912:	f043 0210 	orr.w	r2, r3, #16
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff ff62 	bl	80027f8 <LL_ADC_REG_IsConversionOngoing>
 8002934:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293a:	f003 0310 	and.w	r3, r3, #16
 800293e:	2b00      	cmp	r3, #0
 8002940:	f040 80c5 	bne.w	8002ace <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	2b00      	cmp	r3, #0
 8002948:	f040 80c1 	bne.w	8002ace <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002950:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002954:	f043 0202 	orr.w	r2, r3, #2
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fefb 	bl	800275c <LL_ADC_IsEnabled>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10b      	bne.n	8002984 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800296c:	4860      	ldr	r0, [pc, #384]	; (8002af0 <HAL_ADC_Init+0x284>)
 800296e:	f7ff fef5 	bl	800275c <LL_ADC_IsEnabled>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d105      	bne.n	8002984 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4619      	mov	r1, r3
 800297e:	485d      	ldr	r0, [pc, #372]	; (8002af4 <HAL_ADC_Init+0x288>)
 8002980:	f7ff fd5e 	bl	8002440 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	7e5b      	ldrb	r3, [r3, #25]
 8002988:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800298e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002994:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800299a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029a2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d106      	bne.n	80029c0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	3b01      	subs	r3, #1
 80029b8:	045b      	lsls	r3, r3, #17
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d009      	beq.n	80029dc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	4b45      	ldr	r3, [pc, #276]	; (8002af8 <HAL_ADC_Init+0x28c>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	69b9      	ldr	r1, [r7, #24]
 80029ec:	430b      	orrs	r3, r1
 80029ee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff feff 	bl	80027f8 <LL_ADC_REG_IsConversionOngoing>
 80029fa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff20 	bl	8002846 <LL_ADC_INJ_IsConversionOngoing>
 8002a06:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d13d      	bne.n	8002a8a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d13a      	bne.n	8002a8a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a18:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a20:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a30:	f023 0302 	bic.w	r3, r3, #2
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	69b9      	ldr	r1, [r7, #24]
 8002a3a:	430b      	orrs	r3, r1
 8002a3c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d118      	bne.n	8002a7a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a52:	f023 0304 	bic.w	r3, r3, #4
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a5e:	4311      	orrs	r1, r2
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a64:	4311      	orrs	r1, r2
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	611a      	str	r2, [r3, #16]
 8002a78:	e007      	b.n	8002a8a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0201 	bic.w	r2, r2, #1
 8002a88:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d10c      	bne.n	8002aac <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	f023 010f 	bic.w	r1, r3, #15
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	1e5a      	subs	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	631a      	str	r2, [r3, #48]	; 0x30
 8002aaa:	e007      	b.n	8002abc <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 020f 	bic.w	r2, r2, #15
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac0:	f023 0303 	bic.w	r3, r3, #3
 8002ac4:	f043 0201 	orr.w	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54
 8002acc:	e007      	b.n	8002ade <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad2:	f043 0210 	orr.w	r2, r3, #16
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ade:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3720      	adds	r7, #32
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20000000 	.word	0x20000000
 8002aec:	053e2d63 	.word	0x053e2d63
 8002af0:	50040000 	.word	0x50040000
 8002af4:	50040300 	.word	0x50040300
 8002af8:	fff0c007 	.word	0xfff0c007

08002afc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fe73 	bl	80027f8 <LL_ADC_REG_IsConversionOngoing>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d167      	bne.n	8002be8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <HAL_ADC_Start_DMA+0x2a>
 8002b22:	2302      	movs	r3, #2
 8002b24:	e063      	b.n	8002bee <HAL_ADC_Start_DMA+0xf2>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 fd7a 	bl	8003628 <ADC_Enable>
 8002b34:	4603      	mov	r3, r0
 8002b36:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d14f      	bne.n	8002bde <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b42:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b46:	f023 0301 	bic.w	r3, r3, #1
 8002b4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d006      	beq.n	8002b6c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b62:	f023 0206 	bic.w	r2, r3, #6
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	659a      	str	r2, [r3, #88]	; 0x58
 8002b6a:	e002      	b.n	8002b72 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b76:	4a20      	ldr	r2, [pc, #128]	; (8002bf8 <HAL_ADC_Start_DMA+0xfc>)
 8002b78:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7e:	4a1f      	ldr	r2, [pc, #124]	; (8002bfc <HAL_ADC_Start_DMA+0x100>)
 8002b80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b86:	4a1e      	ldr	r2, [pc, #120]	; (8002c00 <HAL_ADC_Start_DMA+0x104>)
 8002b88:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	221c      	movs	r2, #28
 8002b90:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0210 	orr.w	r2, r2, #16
 8002ba8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0201 	orr.w	r2, r2, #1
 8002bb8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3340      	adds	r3, #64	; 0x40
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f001 f84d 	bl	8003c68 <HAL_DMA_Start_IT>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fde6 	bl	80027a8 <LL_ADC_REG_StartConversion>
 8002bdc:	e006      	b.n	8002bec <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002be6:	e001      	b.n	8002bec <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002be8:	2302      	movs	r3, #2
 8002bea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	080037ab 	.word	0x080037ab
 8002bfc:	08003883 	.word	0x08003883
 8002c00:	0800389f 	.word	0x0800389f

08002c04 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_ADC_Stop_DMA+0x16>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e051      	b.n	8002cbe <HAL_ADC_Stop_DMA+0xba>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002c22:	2103      	movs	r1, #3
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 fc43 	bl	80034b0 <ADC_ConversionStop>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d13f      	bne.n	8002cb4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0201 	bic.w	r2, r2, #1
 8002c42:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d10f      	bne.n	8002c72 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c56:	4618      	mov	r0, r3
 8002c58:	f001 f866 	bl	8003d28 <HAL_DMA_Abort>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d005      	beq.n	8002c72 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0210 	bic.w	r2, r2, #16
 8002c80:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d105      	bne.n	8002c94 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fd2f 	bl	80036ec <ADC_Disable>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	73fb      	strb	r3, [r7, #15]
 8002c92:	e002      	b.n	8002c9a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 fd29 	bl	80036ec <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d109      	bne.n	8002cb4 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ca8:	f023 0301 	bic.w	r3, r3, #1
 8002cac:	f043 0201 	orr.w	r2, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b0b6      	sub	sp, #216	; 0xd8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x22>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e3b9      	b.n	8003486 <HAL_ADC_ConfigChannel+0x796>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff fd6a 	bl	80027f8 <LL_ADC_REG_IsConversionOngoing>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f040 839e 	bne.w	8003468 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b05      	cmp	r3, #5
 8002d32:	d824      	bhi.n	8002d7e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	3b02      	subs	r3, #2
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d81b      	bhi.n	8002d76 <HAL_ADC_ConfigChannel+0x86>
 8002d3e:	a201      	add	r2, pc, #4	; (adr r2, 8002d44 <HAL_ADC_ConfigChannel+0x54>)
 8002d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d44:	08002d55 	.word	0x08002d55
 8002d48:	08002d5d 	.word	0x08002d5d
 8002d4c:	08002d65 	.word	0x08002d65
 8002d50:	08002d6d 	.word	0x08002d6d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	220c      	movs	r2, #12
 8002d58:	605a      	str	r2, [r3, #4]
          break;
 8002d5a:	e011      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	2212      	movs	r2, #18
 8002d60:	605a      	str	r2, [r3, #4]
          break;
 8002d62:	e00d      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	2218      	movs	r2, #24
 8002d68:	605a      	str	r2, [r3, #4]
          break;
 8002d6a:	e009      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d72:	605a      	str	r2, [r3, #4]
          break;
 8002d74:	e004      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2206      	movs	r2, #6
 8002d7a:	605a      	str	r2, [r3, #4]
          break;
 8002d7c:	e000      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002d7e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	6859      	ldr	r1, [r3, #4]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	f7ff fbf3 	bl	8002578 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff fd2e 	bl	80027f8 <LL_ADC_REG_IsConversionOngoing>
 8002d9c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fd4e 	bl	8002846 <LL_ADC_INJ_IsConversionOngoing>
 8002daa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f040 81a6 	bne.w	8003104 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002db8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f040 81a1 	bne.w	8003104 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	6819      	ldr	r1, [r3, #0]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f7ff fbfe 	bl	80025d0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	695a      	ldr	r2, [r3, #20]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	08db      	lsrs	r3, r3, #3
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d00a      	beq.n	8002e0c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	6919      	ldr	r1, [r3, #16]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e06:	f7ff fb4f 	bl	80024a8 <LL_ADC_SetOffset>
 8002e0a:	e17b      	b.n	8003104 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2100      	movs	r1, #0
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fb6c 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10a      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x148>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2100      	movs	r1, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff fb61 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	0e9b      	lsrs	r3, r3, #26
 8002e32:	f003 021f 	and.w	r2, r3, #31
 8002e36:	e01e      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x186>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff fb56 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e4e:	fa93 f3a3 	rbit	r3, r3
 8002e52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002e66:	2320      	movs	r3, #32
 8002e68:	e004      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002e6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e6e:	fab3 f383 	clz	r3, r3
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d105      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x19e>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	0e9b      	lsrs	r3, r3, #26
 8002e88:	f003 031f 	and.w	r3, r3, #31
 8002e8c:	e018      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x1d0>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e9a:	fa93 f3a3 	rbit	r3, r3
 8002e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002ea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ea6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002eaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002eb2:	2320      	movs	r3, #32
 8002eb4:	e004      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002eb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d106      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2100      	movs	r1, #0
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fb25 	bl	800251c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fb09 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10a      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x20e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2101      	movs	r1, #1
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fafe 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	0e9b      	lsrs	r3, r3, #26
 8002ef8:	f003 021f 	and.w	r2, r3, #31
 8002efc:	e01e      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x24c>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2101      	movs	r1, #1
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff faf3 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002f1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002f24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002f2c:	2320      	movs	r3, #32
 8002f2e:	e004      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002f30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f34:	fab3 f383 	clz	r3, r3
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d105      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x264>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	0e9b      	lsrs	r3, r3, #26
 8002f4e:	f003 031f 	and.w	r3, r3, #31
 8002f52:	e018      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x296>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f60:	fa93 f3a3 	rbit	r3, r3
 8002f64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002f68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002f70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002f78:	2320      	movs	r3, #32
 8002f7a:	e004      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002f7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d106      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2101      	movs	r1, #1
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff fac2 	bl	800251c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2102      	movs	r1, #2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff faa6 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10a      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x2d4>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2102      	movs	r1, #2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fa9b 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	0e9b      	lsrs	r3, r3, #26
 8002fbe:	f003 021f 	and.w	r2, r3, #31
 8002fc2:	e01e      	b.n	8003002 <HAL_ADC_ConfigChannel+0x312>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2102      	movs	r1, #2
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff fa90 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002fe2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002fea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002ff2:	2320      	movs	r3, #32
 8002ff4:	e004      	b.n	8003000 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002ff6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ffa:	fab3 f383 	clz	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300a:	2b00      	cmp	r3, #0
 800300c:	d105      	bne.n	800301a <HAL_ADC_ConfigChannel+0x32a>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	0e9b      	lsrs	r3, r3, #26
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	e016      	b.n	8003048 <HAL_ADC_ConfigChannel+0x358>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800302c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800302e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003032:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800303a:	2320      	movs	r3, #32
 800303c:	e004      	b.n	8003048 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800303e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003042:	fab3 f383 	clz	r3, r3
 8003046:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003048:	429a      	cmp	r2, r3
 800304a:	d106      	bne.n	800305a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2200      	movs	r2, #0
 8003052:	2102      	movs	r1, #2
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fa61 	bl	800251c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2103      	movs	r1, #3
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff fa45 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8003066:	4603      	mov	r3, r0
 8003068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10a      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x396>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2103      	movs	r1, #3
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff fa3a 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 800307c:	4603      	mov	r3, r0
 800307e:	0e9b      	lsrs	r3, r3, #26
 8003080:	f003 021f 	and.w	r2, r3, #31
 8003084:	e017      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x3c6>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2103      	movs	r1, #3
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff fa2f 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8003092:	4603      	mov	r3, r0
 8003094:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003098:	fa93 f3a3 	rbit	r3, r3
 800309c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800309e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030a0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80030a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80030a8:	2320      	movs	r3, #32
 80030aa:	e003      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80030ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ae:	fab3 f383 	clz	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d105      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x3de>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	0e9b      	lsrs	r3, r3, #26
 80030c8:	f003 031f 	and.w	r3, r3, #31
 80030cc:	e011      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x402>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030d6:	fa93 f3a3 	rbit	r3, r3
 80030da:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80030dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030de:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80030e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80030e6:	2320      	movs	r3, #32
 80030e8:	e003      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80030ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ec:	fab3 f383 	clz	r3, r3
 80030f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d106      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2200      	movs	r2, #0
 80030fc:	2103      	movs	r1, #3
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fa0c 	bl	800251c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fb27 	bl	800275c <LL_ADC_IsEnabled>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	f040 813f 	bne.w	8003394 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6819      	ldr	r1, [r3, #0]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	461a      	mov	r2, r3
 8003124:	f7ff fa80 	bl	8002628 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4a8e      	ldr	r2, [pc, #568]	; (8003368 <HAL_ADC_ConfigChannel+0x678>)
 800312e:	4293      	cmp	r3, r2
 8003130:	f040 8130 	bne.w	8003394 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10b      	bne.n	800315c <HAL_ADC_ConfigChannel+0x46c>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	0e9b      	lsrs	r3, r3, #26
 800314a:	3301      	adds	r3, #1
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	2b09      	cmp	r3, #9
 8003152:	bf94      	ite	ls
 8003154:	2301      	movls	r3, #1
 8003156:	2300      	movhi	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	e019      	b.n	8003190 <HAL_ADC_ConfigChannel+0x4a0>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003164:	fa93 f3a3 	rbit	r3, r3
 8003168:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800316a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800316c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800316e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003174:	2320      	movs	r3, #32
 8003176:	e003      	b.n	8003180 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003178:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800317a:	fab3 f383 	clz	r3, r3
 800317e:	b2db      	uxtb	r3, r3
 8003180:	3301      	adds	r3, #1
 8003182:	f003 031f 	and.w	r3, r3, #31
 8003186:	2b09      	cmp	r3, #9
 8003188:	bf94      	ite	ls
 800318a:	2301      	movls	r3, #1
 800318c:	2300      	movhi	r3, #0
 800318e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003190:	2b00      	cmp	r3, #0
 8003192:	d079      	beq.n	8003288 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319c:	2b00      	cmp	r3, #0
 800319e:	d107      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x4c0>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	0e9b      	lsrs	r3, r3, #26
 80031a6:	3301      	adds	r3, #1
 80031a8:	069b      	lsls	r3, r3, #26
 80031aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031ae:	e015      	b.n	80031dc <HAL_ADC_ConfigChannel+0x4ec>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031b8:	fa93 f3a3 	rbit	r3, r3
 80031bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80031be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80031c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80031c8:	2320      	movs	r3, #32
 80031ca:	e003      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80031cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ce:	fab3 f383 	clz	r3, r3
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	3301      	adds	r3, #1
 80031d6:	069b      	lsls	r3, r3, #26
 80031d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d109      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x50c>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	0e9b      	lsrs	r3, r3, #26
 80031ee:	3301      	adds	r3, #1
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	2101      	movs	r1, #1
 80031f6:	fa01 f303 	lsl.w	r3, r1, r3
 80031fa:	e017      	b.n	800322c <HAL_ADC_ConfigChannel+0x53c>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003204:	fa93 f3a3 	rbit	r3, r3
 8003208:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800320a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800320c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800320e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003214:	2320      	movs	r3, #32
 8003216:	e003      	b.n	8003220 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800321a:	fab3 f383 	clz	r3, r3
 800321e:	b2db      	uxtb	r3, r3
 8003220:	3301      	adds	r3, #1
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	2101      	movs	r1, #1
 8003228:	fa01 f303 	lsl.w	r3, r1, r3
 800322c:	ea42 0103 	orr.w	r1, r2, r3
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10a      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x562>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	0e9b      	lsrs	r3, r3, #26
 8003242:	3301      	adds	r3, #1
 8003244:	f003 021f 	and.w	r2, r3, #31
 8003248:	4613      	mov	r3, r2
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4413      	add	r3, r2
 800324e:	051b      	lsls	r3, r3, #20
 8003250:	e018      	b.n	8003284 <HAL_ADC_ConfigChannel+0x594>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325a:	fa93 f3a3 	rbit	r3, r3
 800325e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003262:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800326a:	2320      	movs	r3, #32
 800326c:	e003      	b.n	8003276 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800326e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003270:	fab3 f383 	clz	r3, r3
 8003274:	b2db      	uxtb	r3, r3
 8003276:	3301      	adds	r3, #1
 8003278:	f003 021f 	and.w	r2, r3, #31
 800327c:	4613      	mov	r3, r2
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	4413      	add	r3, r2
 8003282:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003284:	430b      	orrs	r3, r1
 8003286:	e080      	b.n	800338a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003290:	2b00      	cmp	r3, #0
 8003292:	d107      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x5b4>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	0e9b      	lsrs	r3, r3, #26
 800329a:	3301      	adds	r3, #1
 800329c:	069b      	lsls	r3, r3, #26
 800329e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032a2:	e015      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x5e0>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ac:	fa93 f3a3 	rbit	r3, r3
 80032b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80032b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80032bc:	2320      	movs	r3, #32
 80032be:	e003      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80032c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c2:	fab3 f383 	clz	r3, r3
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	3301      	adds	r3, #1
 80032ca:	069b      	lsls	r3, r3, #26
 80032cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d109      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x600>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	0e9b      	lsrs	r3, r3, #26
 80032e2:	3301      	adds	r3, #1
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	2101      	movs	r1, #1
 80032ea:	fa01 f303 	lsl.w	r3, r1, r3
 80032ee:	e017      	b.n	8003320 <HAL_ADC_ConfigChannel+0x630>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	fa93 f3a3 	rbit	r3, r3
 80032fc:	61fb      	str	r3, [r7, #28]
  return result;
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003308:	2320      	movs	r3, #32
 800330a:	e003      	b.n	8003314 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	fab3 f383 	clz	r3, r3
 8003312:	b2db      	uxtb	r3, r3
 8003314:	3301      	adds	r3, #1
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	2101      	movs	r1, #1
 800331c:	fa01 f303 	lsl.w	r3, r1, r3
 8003320:	ea42 0103 	orr.w	r1, r2, r3
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10d      	bne.n	800334c <HAL_ADC_ConfigChannel+0x65c>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	0e9b      	lsrs	r3, r3, #26
 8003336:	3301      	adds	r3, #1
 8003338:	f003 021f 	and.w	r2, r3, #31
 800333c:	4613      	mov	r3, r2
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	4413      	add	r3, r2
 8003342:	3b1e      	subs	r3, #30
 8003344:	051b      	lsls	r3, r3, #20
 8003346:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800334a:	e01d      	b.n	8003388 <HAL_ADC_ConfigChannel+0x698>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	fa93 f3a3 	rbit	r3, r3
 8003358:	613b      	str	r3, [r7, #16]
  return result;
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d103      	bne.n	800336c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003364:	2320      	movs	r3, #32
 8003366:	e005      	b.n	8003374 <HAL_ADC_ConfigChannel+0x684>
 8003368:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	fab3 f383 	clz	r3, r3
 8003372:	b2db      	uxtb	r3, r3
 8003374:	3301      	adds	r3, #1
 8003376:	f003 021f 	and.w	r2, r3, #31
 800337a:	4613      	mov	r3, r2
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	4413      	add	r3, r2
 8003380:	3b1e      	subs	r3, #30
 8003382:	051b      	lsls	r3, r3, #20
 8003384:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003388:	430b      	orrs	r3, r1
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	6892      	ldr	r2, [r2, #8]
 800338e:	4619      	mov	r1, r3
 8003390:	f7ff f91e 	bl	80025d0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	4b3d      	ldr	r3, [pc, #244]	; (8003490 <HAL_ADC_ConfigChannel+0x7a0>)
 800339a:	4013      	ands	r3, r2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d06c      	beq.n	800347a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033a0:	483c      	ldr	r0, [pc, #240]	; (8003494 <HAL_ADC_ConfigChannel+0x7a4>)
 80033a2:	f7ff f873 	bl	800248c <LL_ADC_GetCommonPathInternalCh>
 80033a6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a3a      	ldr	r2, [pc, #232]	; (8003498 <HAL_ADC_ConfigChannel+0x7a8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d127      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d121      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a35      	ldr	r2, [pc, #212]	; (800349c <HAL_ADC_ConfigChannel+0x7ac>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d157      	bne.n	800347a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033d2:	4619      	mov	r1, r3
 80033d4:	482f      	ldr	r0, [pc, #188]	; (8003494 <HAL_ADC_ConfigChannel+0x7a4>)
 80033d6:	f7ff f846 	bl	8002466 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033da:	4b31      	ldr	r3, [pc, #196]	; (80034a0 <HAL_ADC_ConfigChannel+0x7b0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	099b      	lsrs	r3, r3, #6
 80033e0:	4a30      	ldr	r2, [pc, #192]	; (80034a4 <HAL_ADC_ConfigChannel+0x7b4>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	099b      	lsrs	r3, r3, #6
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	4613      	mov	r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033f4:	e002      	b.n	80033fc <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f9      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003402:	e03a      	b.n	800347a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a27      	ldr	r2, [pc, #156]	; (80034a8 <HAL_ADC_ConfigChannel+0x7b8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d113      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x746>
 800340e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003412:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10d      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a1f      	ldr	r2, [pc, #124]	; (800349c <HAL_ADC_ConfigChannel+0x7ac>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d12a      	bne.n	800347a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003424:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003428:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800342c:	4619      	mov	r1, r3
 800342e:	4819      	ldr	r0, [pc, #100]	; (8003494 <HAL_ADC_ConfigChannel+0x7a4>)
 8003430:	f7ff f819 	bl	8002466 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003434:	e021      	b.n	800347a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a1c      	ldr	r2, [pc, #112]	; (80034ac <HAL_ADC_ConfigChannel+0x7bc>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d11c      	bne.n	800347a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003440:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d116      	bne.n	800347a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a12      	ldr	r2, [pc, #72]	; (800349c <HAL_ADC_ConfigChannel+0x7ac>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d111      	bne.n	800347a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003456:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800345a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800345e:	4619      	mov	r1, r3
 8003460:	480c      	ldr	r0, [pc, #48]	; (8003494 <HAL_ADC_ConfigChannel+0x7a4>)
 8003462:	f7ff f800 	bl	8002466 <LL_ADC_SetCommonPathInternalCh>
 8003466:	e008      	b.n	800347a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346c:	f043 0220 	orr.w	r2, r3, #32
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003482:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003486:	4618      	mov	r0, r3
 8003488:	37d8      	adds	r7, #216	; 0xd8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	80080000 	.word	0x80080000
 8003494:	50040300 	.word	0x50040300
 8003498:	c7520000 	.word	0xc7520000
 800349c:	50040000 	.word	0x50040000
 80034a0:	20000000 	.word	0x20000000
 80034a4:	053e2d63 	.word	0x053e2d63
 80034a8:	cb840000 	.word	0xcb840000
 80034ac:	80000001 	.word	0x80000001

080034b0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b088      	sub	sp, #32
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff f996 	bl	80027f8 <LL_ADC_REG_IsConversionOngoing>
 80034cc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff f9b7 	bl	8002846 <LL_ADC_INJ_IsConversionOngoing>
 80034d8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d103      	bne.n	80034e8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 8098 	beq.w	8003618 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d02a      	beq.n	800354c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	7e5b      	ldrb	r3, [r3, #25]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d126      	bne.n	800354c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	7e1b      	ldrb	r3, [r3, #24]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d122      	bne.n	800354c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003506:	2301      	movs	r3, #1
 8003508:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800350a:	e014      	b.n	8003536 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	4a45      	ldr	r2, [pc, #276]	; (8003624 <ADC_ConversionStop+0x174>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d90d      	bls.n	8003530 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003518:	f043 0210 	orr.w	r2, r3, #16
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003524:	f043 0201 	orr.w	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e074      	b.n	800361a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	3301      	adds	r3, #1
 8003534:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003540:	2b40      	cmp	r3, #64	; 0x40
 8003542:	d1e3      	bne.n	800350c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2240      	movs	r2, #64	; 0x40
 800354a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d014      	beq.n	800357c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff f94e 	bl	80027f8 <LL_ADC_REG_IsConversionOngoing>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00c      	beq.n	800357c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff f90b 	bl	8002782 <LL_ADC_IsDisableOngoing>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d104      	bne.n	800357c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff f92a 	bl	80027d0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d014      	beq.n	80035ac <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff f95d 	bl	8002846 <LL_ADC_INJ_IsConversionOngoing>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00c      	beq.n	80035ac <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff f8f3 	bl	8002782 <LL_ADC_IsDisableOngoing>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d104      	bne.n	80035ac <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff f939 	bl	800281e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d005      	beq.n	80035be <ADC_ConversionStop+0x10e>
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d105      	bne.n	80035c4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80035b8:	230c      	movs	r3, #12
 80035ba:	617b      	str	r3, [r7, #20]
        break;
 80035bc:	e005      	b.n	80035ca <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80035be:	2308      	movs	r3, #8
 80035c0:	617b      	str	r3, [r7, #20]
        break;
 80035c2:	e002      	b.n	80035ca <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80035c4:	2304      	movs	r3, #4
 80035c6:	617b      	str	r3, [r7, #20]
        break;
 80035c8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80035ca:	f7fe ff09 	bl	80023e0 <HAL_GetTick>
 80035ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80035d0:	e01b      	b.n	800360a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80035d2:	f7fe ff05 	bl	80023e0 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b05      	cmp	r3, #5
 80035de:	d914      	bls.n	800360a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	4013      	ands	r3, r2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00d      	beq.n	800360a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f2:	f043 0210 	orr.w	r2, r3, #16
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fe:	f043 0201 	orr.w	r2, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e007      	b.n	800361a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	4013      	ands	r3, r2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1dc      	bne.n	80035d2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3720      	adds	r7, #32
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	a33fffff 	.word	0xa33fffff

08003628 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff f891 	bl	800275c <LL_ADC_IsEnabled>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d14d      	bne.n	80036dc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	4b28      	ldr	r3, [pc, #160]	; (80036e8 <ADC_Enable+0xc0>)
 8003648:	4013      	ands	r3, r2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00d      	beq.n	800366a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003652:	f043 0210 	orr.w	r2, r3, #16
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365e:	f043 0201 	orr.w	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e039      	b.n	80036de <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff f84c 	bl	800270c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003674:	f7fe feb4 	bl	80023e0 <HAL_GetTick>
 8003678:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800367a:	e028      	b.n	80036ce <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff f86b 	bl	800275c <LL_ADC_IsEnabled>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d104      	bne.n	8003696 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff f83b 	bl	800270c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003696:	f7fe fea3 	bl	80023e0 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d914      	bls.n	80036ce <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d00d      	beq.n	80036ce <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b6:	f043 0210 	orr.w	r2, r3, #16
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c2:	f043 0201 	orr.w	r2, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e007      	b.n	80036de <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d1cf      	bne.n	800367c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	8000003f 	.word	0x8000003f

080036ec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff f842 	bl	8002782 <LL_ADC_IsDisableOngoing>
 80036fe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff f829 	bl	800275c <LL_ADC_IsEnabled>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d047      	beq.n	80037a0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d144      	bne.n	80037a0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 030d 	and.w	r3, r3, #13
 8003720:	2b01      	cmp	r3, #1
 8003722:	d10c      	bne.n	800373e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff f803 	bl	8002734 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2203      	movs	r2, #3
 8003734:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003736:	f7fe fe53 	bl	80023e0 <HAL_GetTick>
 800373a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800373c:	e029      	b.n	8003792 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003742:	f043 0210 	orr.w	r2, r3, #16
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374e:	f043 0201 	orr.w	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e023      	b.n	80037a2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800375a:	f7fe fe41 	bl	80023e0 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d914      	bls.n	8003792 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00d      	beq.n	8003792 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377a:	f043 0210 	orr.w	r2, r3, #16
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003786:	f043 0201 	orr.w	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e007      	b.n	80037a2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1dc      	bne.n	800375a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b084      	sub	sp, #16
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d14b      	bne.n	800385c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d021      	beq.n	8003822 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fe feb5 	bl	8002552 <LL_ADC_REG_IsTriggerSourceSWStart>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d032      	beq.n	8003854 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d12b      	bne.n	8003854 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003800:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d11f      	bne.n	8003854 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003818:	f043 0201 	orr.w	r2, r3, #1
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	655a      	str	r2, [r3, #84]	; 0x54
 8003820:	e018      	b.n	8003854 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d111      	bne.n	8003854 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003834:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003840:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d105      	bne.n	8003854 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384c:	f043 0201 	orr.w	r2, r3, #1
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f7fd fe9f 	bl	8001598 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800385a:	e00e      	b.n	800387a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003860:	f003 0310 	and.w	r3, r3, #16
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f7ff fa36 	bl	8002cda <HAL_ADC_ErrorCallback>
}
 800386e:	e004      	b.n	800387a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	4798      	blx	r3
}
 800387a:	bf00      	nop
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b084      	sub	sp, #16
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f7ff fa18 	bl	8002cc6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003896:	bf00      	nop
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038bc:	f043 0204 	orr.w	r2, r3, #4
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f7ff fa08 	bl	8002cda <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038ca:	bf00      	nop
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038e4:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <__NVIC_SetPriorityGrouping+0x44>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038f0:	4013      	ands	r3, r2
 80038f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003906:	4a04      	ldr	r2, [pc, #16]	; (8003918 <__NVIC_SetPriorityGrouping+0x44>)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	60d3      	str	r3, [r2, #12]
}
 800390c:	bf00      	nop
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	e000ed00 	.word	0xe000ed00

0800391c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003920:	4b04      	ldr	r3, [pc, #16]	; (8003934 <__NVIC_GetPriorityGrouping+0x18>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	0a1b      	lsrs	r3, r3, #8
 8003926:	f003 0307 	and.w	r3, r3, #7
}
 800392a:	4618      	mov	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003946:	2b00      	cmp	r3, #0
 8003948:	db0b      	blt.n	8003962 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	f003 021f 	and.w	r2, r3, #31
 8003950:	4907      	ldr	r1, [pc, #28]	; (8003970 <__NVIC_EnableIRQ+0x38>)
 8003952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003956:	095b      	lsrs	r3, r3, #5
 8003958:	2001      	movs	r0, #1
 800395a:	fa00 f202 	lsl.w	r2, r0, r2
 800395e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	e000e100 	.word	0xe000e100

08003974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	6039      	str	r1, [r7, #0]
 800397e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003984:	2b00      	cmp	r3, #0
 8003986:	db0a      	blt.n	800399e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	b2da      	uxtb	r2, r3
 800398c:	490c      	ldr	r1, [pc, #48]	; (80039c0 <__NVIC_SetPriority+0x4c>)
 800398e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003992:	0112      	lsls	r2, r2, #4
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	440b      	add	r3, r1
 8003998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800399c:	e00a      	b.n	80039b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	4908      	ldr	r1, [pc, #32]	; (80039c4 <__NVIC_SetPriority+0x50>)
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	3b04      	subs	r3, #4
 80039ac:	0112      	lsls	r2, r2, #4
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	440b      	add	r3, r1
 80039b2:	761a      	strb	r2, [r3, #24]
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	e000e100 	.word	0xe000e100
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b089      	sub	sp, #36	; 0x24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f1c3 0307 	rsb	r3, r3, #7
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	bf28      	it	cs
 80039e6:	2304      	movcs	r3, #4
 80039e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	3304      	adds	r3, #4
 80039ee:	2b06      	cmp	r3, #6
 80039f0:	d902      	bls.n	80039f8 <NVIC_EncodePriority+0x30>
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	3b03      	subs	r3, #3
 80039f6:	e000      	b.n	80039fa <NVIC_EncodePriority+0x32>
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43da      	mvns	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a10:	f04f 31ff 	mov.w	r1, #4294967295
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1a:	43d9      	mvns	r1, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a20:	4313      	orrs	r3, r2
         );
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3724      	adds	r7, #36	; 0x24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a40:	d301      	bcc.n	8003a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a42:	2301      	movs	r3, #1
 8003a44:	e00f      	b.n	8003a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a46:	4a0a      	ldr	r2, [pc, #40]	; (8003a70 <SysTick_Config+0x40>)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a4e:	210f      	movs	r1, #15
 8003a50:	f04f 30ff 	mov.w	r0, #4294967295
 8003a54:	f7ff ff8e 	bl	8003974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a58:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <SysTick_Config+0x40>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a5e:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <SysTick_Config+0x40>)
 8003a60:	2207      	movs	r2, #7
 8003a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	e000e010 	.word	0xe000e010

08003a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff ff29 	bl	80038d4 <__NVIC_SetPriorityGrouping>
}
 8003a82:	bf00      	nop
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b086      	sub	sp, #24
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	4603      	mov	r3, r0
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	607a      	str	r2, [r7, #4]
 8003a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a9c:	f7ff ff3e 	bl	800391c <__NVIC_GetPriorityGrouping>
 8003aa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	6978      	ldr	r0, [r7, #20]
 8003aa8:	f7ff ff8e 	bl	80039c8 <NVIC_EncodePriority>
 8003aac:	4602      	mov	r2, r0
 8003aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff ff5d 	bl	8003974 <__NVIC_SetPriority>
}
 8003aba:	bf00      	nop
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	4603      	mov	r3, r0
 8003aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff ff31 	bl	8003938 <__NVIC_EnableIRQ>
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff ffa2 	bl	8003a30 <SysTick_Config>
 8003aec:	4603      	mov	r3, r0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e098      	b.n	8003c3c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	4b4d      	ldr	r3, [pc, #308]	; (8003c48 <HAL_DMA_Init+0x150>)
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d80f      	bhi.n	8003b36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	4b4b      	ldr	r3, [pc, #300]	; (8003c4c <HAL_DMA_Init+0x154>)
 8003b1e:	4413      	add	r3, r2
 8003b20:	4a4b      	ldr	r2, [pc, #300]	; (8003c50 <HAL_DMA_Init+0x158>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	091b      	lsrs	r3, r3, #4
 8003b28:	009a      	lsls	r2, r3, #2
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a48      	ldr	r2, [pc, #288]	; (8003c54 <HAL_DMA_Init+0x15c>)
 8003b32:	641a      	str	r2, [r3, #64]	; 0x40
 8003b34:	e00e      	b.n	8003b54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4b46      	ldr	r3, [pc, #280]	; (8003c58 <HAL_DMA_Init+0x160>)
 8003b3e:	4413      	add	r3, r2
 8003b40:	4a43      	ldr	r2, [pc, #268]	; (8003c50 <HAL_DMA_Init+0x158>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	091b      	lsrs	r3, r3, #4
 8003b48:	009a      	lsls	r2, r3, #2
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a42      	ldr	r2, [pc, #264]	; (8003c5c <HAL_DMA_Init+0x164>)
 8003b52:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bae:	d039      	beq.n	8003c24 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	4a27      	ldr	r2, [pc, #156]	; (8003c54 <HAL_DMA_Init+0x15c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d11a      	bne.n	8003bf0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003bba:	4b29      	ldr	r3, [pc, #164]	; (8003c60 <HAL_DMA_Init+0x168>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	f003 031c 	and.w	r3, r3, #28
 8003bc6:	210f      	movs	r1, #15
 8003bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	4924      	ldr	r1, [pc, #144]	; (8003c60 <HAL_DMA_Init+0x168>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003bd4:	4b22      	ldr	r3, [pc, #136]	; (8003c60 <HAL_DMA_Init+0x168>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6859      	ldr	r1, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be0:	f003 031c 	and.w	r3, r3, #28
 8003be4:	fa01 f303 	lsl.w	r3, r1, r3
 8003be8:	491d      	ldr	r1, [pc, #116]	; (8003c60 <HAL_DMA_Init+0x168>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	600b      	str	r3, [r1, #0]
 8003bee:	e019      	b.n	8003c24 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003bf0:	4b1c      	ldr	r3, [pc, #112]	; (8003c64 <HAL_DMA_Init+0x16c>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf8:	f003 031c 	and.w	r3, r3, #28
 8003bfc:	210f      	movs	r1, #15
 8003bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003c02:	43db      	mvns	r3, r3
 8003c04:	4917      	ldr	r1, [pc, #92]	; (8003c64 <HAL_DMA_Init+0x16c>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c0a:	4b16      	ldr	r3, [pc, #88]	; (8003c64 <HAL_DMA_Init+0x16c>)
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6859      	ldr	r1, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c16:	f003 031c 	and.w	r3, r3, #28
 8003c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1e:	4911      	ldr	r1, [pc, #68]	; (8003c64 <HAL_DMA_Init+0x16c>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	40020407 	.word	0x40020407
 8003c4c:	bffdfff8 	.word	0xbffdfff8
 8003c50:	cccccccd 	.word	0xcccccccd
 8003c54:	40020000 	.word	0x40020000
 8003c58:	bffdfbf8 	.word	0xbffdfbf8
 8003c5c:	40020400 	.word	0x40020400
 8003c60:	400200a8 	.word	0x400200a8
 8003c64:	400204a8 	.word	0x400204a8

08003c68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_DMA_Start_IT+0x20>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e04b      	b.n	8003d20 <HAL_DMA_Start_IT+0xb8>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d13a      	bne.n	8003d12 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0201 	bic.w	r2, r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f91e 	bl	8003f02 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 020e 	orr.w	r2, r2, #14
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	e00f      	b.n	8003d00 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0204 	bic.w	r2, r2, #4
 8003cee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 020a 	orr.w	r2, r2, #10
 8003cfe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	e005      	b.n	8003d1e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d008      	beq.n	8003d52 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2204      	movs	r2, #4
 8003d44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e022      	b.n	8003d98 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 020e 	bic.w	r2, r2, #14
 8003d60:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0201 	bic.w	r2, r2, #1
 8003d70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	f003 021c 	and.w	r2, r3, #28
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	2101      	movs	r1, #1
 8003d80:	fa01 f202 	lsl.w	r2, r1, r2
 8003d84:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc0:	f003 031c 	and.w	r3, r3, #28
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	409a      	lsls	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d026      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x7a>
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f003 0304 	and.w	r3, r3, #4
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d021      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d107      	bne.n	8003df8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0204 	bic.w	r2, r2, #4
 8003df6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfc:	f003 021c 	and.w	r2, r3, #28
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	2104      	movs	r1, #4
 8003e06:	fa01 f202 	lsl.w	r2, r1, r2
 8003e0a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d071      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003e1c:	e06c      	b.n	8003ef8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e22:	f003 031c 	and.w	r3, r3, #28
 8003e26:	2202      	movs	r2, #2
 8003e28:	409a      	lsls	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d02e      	beq.n	8003e90 <HAL_DMA_IRQHandler+0xec>
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d029      	beq.n	8003e90 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0320 	and.w	r3, r3, #32
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10b      	bne.n	8003e62 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 020a 	bic.w	r2, r2, #10
 8003e58:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	f003 021c 	and.w	r2, r3, #28
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	2102      	movs	r1, #2
 8003e70:	fa01 f202 	lsl.w	r2, r1, r2
 8003e74:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d038      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003e8e:	e033      	b.n	8003ef8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e94:	f003 031c 	and.w	r3, r3, #28
 8003e98:	2208      	movs	r2, #8
 8003e9a:	409a      	lsls	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d02a      	beq.n	8003efa <HAL_DMA_IRQHandler+0x156>
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d025      	beq.n	8003efa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 020e 	bic.w	r2, r2, #14
 8003ebc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec2:	f003 021c 	and.w	r2, r3, #28
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	2101      	movs	r1, #1
 8003ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d004      	beq.n	8003efa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ef8:	bf00      	nop
 8003efa:	bf00      	nop
}
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b085      	sub	sp, #20
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	607a      	str	r2, [r7, #4]
 8003f0e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f14:	f003 021c 	and.w	r2, r3, #28
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f22:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2b10      	cmp	r3, #16
 8003f32:	d108      	bne.n	8003f46 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f44:	e007      	b.n	8003f56 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	60da      	str	r2, [r3, #12]
}
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
	...

08003f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f72:	e148      	b.n	8004206 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	2101      	movs	r1, #1
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f80:	4013      	ands	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 813a 	beq.w	8004200 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d00b      	beq.n	8003fac <HAL_GPIO_Init+0x48>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d007      	beq.n	8003fac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fa0:	2b11      	cmp	r3, #17
 8003fa2:	d003      	beq.n	8003fac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b12      	cmp	r3, #18
 8003faa:	d130      	bne.n	800400e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	43db      	mvns	r3, r3
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	091b      	lsrs	r3, r3, #4
 8003ff8:	f003 0201 	and.w	r2, r3, #1
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	2203      	movs	r2, #3
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43db      	mvns	r3, r3
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4013      	ands	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d003      	beq.n	800404e <HAL_GPIO_Init+0xea>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b12      	cmp	r3, #18
 800404c:	d123      	bne.n	8004096 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	08da      	lsrs	r2, r3, #3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3208      	adds	r2, #8
 8004056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800405a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	220f      	movs	r2, #15
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	43db      	mvns	r3, r3
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4013      	ands	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	691a      	ldr	r2, [r3, #16]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	fa02 f303 	lsl.w	r3, r2, r3
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	08da      	lsrs	r2, r3, #3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3208      	adds	r2, #8
 8004090:	6939      	ldr	r1, [r7, #16]
 8004092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	2203      	movs	r2, #3
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	43db      	mvns	r3, r3
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4013      	ands	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f003 0203 	and.w	r2, r3, #3
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 8094 	beq.w	8004200 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040d8:	4b52      	ldr	r3, [pc, #328]	; (8004224 <HAL_GPIO_Init+0x2c0>)
 80040da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040dc:	4a51      	ldr	r2, [pc, #324]	; (8004224 <HAL_GPIO_Init+0x2c0>)
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	6613      	str	r3, [r2, #96]	; 0x60
 80040e4:	4b4f      	ldr	r3, [pc, #316]	; (8004224 <HAL_GPIO_Init+0x2c0>)
 80040e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80040f0:	4a4d      	ldr	r2, [pc, #308]	; (8004228 <HAL_GPIO_Init+0x2c4>)
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	089b      	lsrs	r3, r3, #2
 80040f6:	3302      	adds	r3, #2
 80040f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	220f      	movs	r2, #15
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	43db      	mvns	r3, r3
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4013      	ands	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800411a:	d00d      	beq.n	8004138 <HAL_GPIO_Init+0x1d4>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a43      	ldr	r2, [pc, #268]	; (800422c <HAL_GPIO_Init+0x2c8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d007      	beq.n	8004134 <HAL_GPIO_Init+0x1d0>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a42      	ldr	r2, [pc, #264]	; (8004230 <HAL_GPIO_Init+0x2cc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d101      	bne.n	8004130 <HAL_GPIO_Init+0x1cc>
 800412c:	2302      	movs	r3, #2
 800412e:	e004      	b.n	800413a <HAL_GPIO_Init+0x1d6>
 8004130:	2307      	movs	r3, #7
 8004132:	e002      	b.n	800413a <HAL_GPIO_Init+0x1d6>
 8004134:	2301      	movs	r3, #1
 8004136:	e000      	b.n	800413a <HAL_GPIO_Init+0x1d6>
 8004138:	2300      	movs	r3, #0
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	f002 0203 	and.w	r2, r2, #3
 8004140:	0092      	lsls	r2, r2, #2
 8004142:	4093      	lsls	r3, r2
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800414a:	4937      	ldr	r1, [pc, #220]	; (8004228 <HAL_GPIO_Init+0x2c4>)
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	089b      	lsrs	r3, r3, #2
 8004150:	3302      	adds	r3, #2
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004158:	4b36      	ldr	r3, [pc, #216]	; (8004234 <HAL_GPIO_Init+0x2d0>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	43db      	mvns	r3, r3
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4013      	ands	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800417c:	4a2d      	ldr	r2, [pc, #180]	; (8004234 <HAL_GPIO_Init+0x2d0>)
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004182:	4b2c      	ldr	r3, [pc, #176]	; (8004234 <HAL_GPIO_Init+0x2d0>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	43db      	mvns	r3, r3
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4013      	ands	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041a6:	4a23      	ldr	r2, [pc, #140]	; (8004234 <HAL_GPIO_Init+0x2d0>)
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041ac:	4b21      	ldr	r3, [pc, #132]	; (8004234 <HAL_GPIO_Init+0x2d0>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	43db      	mvns	r3, r3
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4013      	ands	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041d0:	4a18      	ldr	r2, [pc, #96]	; (8004234 <HAL_GPIO_Init+0x2d0>)
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041d6:	4b17      	ldr	r3, [pc, #92]	; (8004234 <HAL_GPIO_Init+0x2d0>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	43db      	mvns	r3, r3
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4013      	ands	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041fa:	4a0e      	ldr	r2, [pc, #56]	; (8004234 <HAL_GPIO_Init+0x2d0>)
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	3301      	adds	r3, #1
 8004204:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	f47f aeaf 	bne.w	8003f74 <HAL_GPIO_Init+0x10>
  }
}
 8004216:	bf00      	nop
 8004218:	bf00      	nop
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	40021000 	.word	0x40021000
 8004228:	40010000 	.word	0x40010000
 800422c:	48000400 	.word	0x48000400
 8004230:	48000800 	.word	0x48000800
 8004234:	40010400 	.word	0x40010400

08004238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	807b      	strh	r3, [r7, #2]
 8004244:	4613      	mov	r3, r2
 8004246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004248:	787b      	ldrb	r3, [r7, #1]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800424e:	887a      	ldrh	r2, [r7, #2]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004254:	e002      	b.n	800425c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004256:	887a      	ldrh	r2, [r7, #2]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e081      	b.n	800437e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fd fa6e 	bl	8001770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2224      	movs	r2, #36	; 0x24
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0201 	bic.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d107      	bne.n	80042e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042de:	609a      	str	r2, [r3, #8]
 80042e0:	e006      	b.n	80042f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80042ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d104      	bne.n	8004302 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004300:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6812      	ldr	r2, [r2, #0]
 800430c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004314:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004324:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	ea42 0103 	orr.w	r1, r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	021a      	lsls	r2, r3, #8
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69d9      	ldr	r1, [r3, #28]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1a      	ldr	r2, [r3, #32]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2220      	movs	r2, #32
 800436a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af02      	add	r7, sp, #8
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	607a      	str	r2, [r7, #4]
 8004392:	461a      	mov	r2, r3
 8004394:	460b      	mov	r3, r1
 8004396:	817b      	strh	r3, [r7, #10]
 8004398:	4613      	mov	r3, r2
 800439a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b20      	cmp	r3, #32
 80043a6:	f040 80da 	bne.w	800455e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d101      	bne.n	80043b8 <HAL_I2C_Master_Transmit+0x30>
 80043b4:	2302      	movs	r3, #2
 80043b6:	e0d3      	b.n	8004560 <HAL_I2C_Master_Transmit+0x1d8>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043c0:	f7fe f80e 	bl	80023e0 <HAL_GetTick>
 80043c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	2319      	movs	r3, #25
 80043cc:	2201      	movs	r2, #1
 80043ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 f8fc 	bl	80045d0 <I2C_WaitOnFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e0be      	b.n	8004560 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2221      	movs	r2, #33	; 0x21
 80043e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2210      	movs	r2, #16
 80043ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	893a      	ldrh	r2, [r7, #8]
 8004402:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440e:	b29b      	uxth	r3, r3
 8004410:	2bff      	cmp	r3, #255	; 0xff
 8004412:	d90e      	bls.n	8004432 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	22ff      	movs	r2, #255	; 0xff
 8004418:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441e:	b2da      	uxtb	r2, r3
 8004420:	8979      	ldrh	r1, [r7, #10]
 8004422:	4b51      	ldr	r3, [pc, #324]	; (8004568 <HAL_I2C_Master_Transmit+0x1e0>)
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f9f2 	bl	8004814 <I2C_TransferConfig>
 8004430:	e06c      	b.n	800450c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004440:	b2da      	uxtb	r2, r3
 8004442:	8979      	ldrh	r1, [r7, #10]
 8004444:	4b48      	ldr	r3, [pc, #288]	; (8004568 <HAL_I2C_Master_Transmit+0x1e0>)
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 f9e1 	bl	8004814 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004452:	e05b      	b.n	800450c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	6a39      	ldr	r1, [r7, #32]
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f8f9 	bl	8004650 <I2C_WaitOnTXISFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e07b      	b.n	8004560 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	781a      	ldrb	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d034      	beq.n	800450c <HAL_I2C_Master_Transmit+0x184>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d130      	bne.n	800450c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	2200      	movs	r2, #0
 80044b2:	2180      	movs	r1, #128	; 0x80
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f88b 	bl	80045d0 <I2C_WaitOnFlagUntilTimeout>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e04d      	b.n	8004560 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2bff      	cmp	r3, #255	; 0xff
 80044cc:	d90e      	bls.n	80044ec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	22ff      	movs	r2, #255	; 0xff
 80044d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	8979      	ldrh	r1, [r7, #10]
 80044dc:	2300      	movs	r3, #0
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f995 	bl	8004814 <I2C_TransferConfig>
 80044ea:	e00f      	b.n	800450c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	8979      	ldrh	r1, [r7, #10]
 80044fe:	2300      	movs	r3, #0
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 f984 	bl	8004814 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d19e      	bne.n	8004454 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	6a39      	ldr	r1, [r7, #32]
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 f8d8 	bl	80046d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e01a      	b.n	8004560 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2220      	movs	r2, #32
 8004530:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6859      	ldr	r1, [r3, #4]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	4b0b      	ldr	r3, [pc, #44]	; (800456c <HAL_I2C_Master_Transmit+0x1e4>)
 800453e:	400b      	ands	r3, r1
 8004540:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2220      	movs	r2, #32
 8004546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	e000      	b.n	8004560 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800455e:	2302      	movs	r3, #2
  }
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	80002000 	.word	0x80002000
 800456c:	fe00e800 	.word	0xfe00e800

08004570 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800457c:	4618      	mov	r0, r3
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b02      	cmp	r3, #2
 800459c:	d103      	bne.n	80045a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2200      	movs	r2, #0
 80045a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d007      	beq.n	80045c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	619a      	str	r2, [r3, #24]
  }
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	4613      	mov	r3, r2
 80045de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045e0:	e022      	b.n	8004628 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e8:	d01e      	beq.n	8004628 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ea:	f7fd fef9 	bl	80023e0 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d302      	bcc.n	8004600 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d113      	bne.n	8004628 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004604:	f043 0220 	orr.w	r2, r3, #32
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e00f      	b.n	8004648 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	4013      	ands	r3, r2
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	429a      	cmp	r2, r3
 8004636:	bf0c      	ite	eq
 8004638:	2301      	moveq	r3, #1
 800463a:	2300      	movne	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	461a      	mov	r2, r3
 8004640:	79fb      	ldrb	r3, [r7, #7]
 8004642:	429a      	cmp	r2, r3
 8004644:	d0cd      	beq.n	80045e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800465c:	e02c      	b.n	80046b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	68b9      	ldr	r1, [r7, #8]
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 f870 	bl	8004748 <I2C_IsAcknowledgeFailed>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e02a      	b.n	80046c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004678:	d01e      	beq.n	80046b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467a:	f7fd feb1 	bl	80023e0 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	429a      	cmp	r2, r3
 8004688:	d302      	bcc.n	8004690 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d113      	bne.n	80046b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004694:	f043 0220 	orr.w	r2, r3, #32
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e007      	b.n	80046c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d1cb      	bne.n	800465e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046dc:	e028      	b.n	8004730 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	68b9      	ldr	r1, [r7, #8]
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 f830 	bl	8004748 <I2C_IsAcknowledgeFailed>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e026      	b.n	8004740 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f2:	f7fd fe75 	bl	80023e0 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d302      	bcc.n	8004708 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d113      	bne.n	8004730 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470c:	f043 0220 	orr.w	r2, r3, #32
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e007      	b.n	8004740 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	f003 0320 	and.w	r3, r3, #32
 800473a:	2b20      	cmp	r3, #32
 800473c:	d1cf      	bne.n	80046de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	f003 0310 	and.w	r3, r3, #16
 800475e:	2b10      	cmp	r3, #16
 8004760:	d151      	bne.n	8004806 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004762:	e022      	b.n	80047aa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476a:	d01e      	beq.n	80047aa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476c:	f7fd fe38 	bl	80023e0 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	429a      	cmp	r2, r3
 800477a:	d302      	bcc.n	8004782 <I2C_IsAcknowledgeFailed+0x3a>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d113      	bne.n	80047aa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004786:	f043 0220 	orr.w	r2, r3, #32
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2220      	movs	r2, #32
 8004792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e02e      	b.n	8004808 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d1d5      	bne.n	8004764 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2210      	movs	r2, #16
 80047be:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2220      	movs	r2, #32
 80047c6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f7ff fedd 	bl	8004588 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6859      	ldr	r1, [r3, #4]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4b0d      	ldr	r3, [pc, #52]	; (8004810 <I2C_IsAcknowledgeFailed+0xc8>)
 80047da:	400b      	ands	r3, r1
 80047dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e2:	f043 0204 	orr.w	r2, r3, #4
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2220      	movs	r2, #32
 80047ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	fe00e800 	.word	0xfe00e800

08004814 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	607b      	str	r3, [r7, #4]
 800481e:	460b      	mov	r3, r1
 8004820:	817b      	strh	r3, [r7, #10]
 8004822:	4613      	mov	r3, r2
 8004824:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	0d5b      	lsrs	r3, r3, #21
 8004830:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004834:	4b0d      	ldr	r3, [pc, #52]	; (800486c <I2C_TransferConfig+0x58>)
 8004836:	430b      	orrs	r3, r1
 8004838:	43db      	mvns	r3, r3
 800483a:	ea02 0103 	and.w	r1, r2, r3
 800483e:	897b      	ldrh	r3, [r7, #10]
 8004840:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004844:	7a7b      	ldrb	r3, [r7, #9]
 8004846:	041b      	lsls	r3, r3, #16
 8004848:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	431a      	orrs	r2, r3
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	431a      	orrs	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800485e:	bf00      	nop
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	03ff63ff 	.word	0x03ff63ff

08004870 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b20      	cmp	r3, #32
 8004884:	d138      	bne.n	80048f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004890:	2302      	movs	r3, #2
 8004892:	e032      	b.n	80048fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2224      	movs	r2, #36	; 0x24
 80048a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0201 	bic.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6819      	ldr	r1, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	e000      	b.n	80048fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048f8:	2302      	movs	r3, #2
  }
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004906:	b480      	push	{r7}
 8004908:	b085      	sub	sp, #20
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
 800490e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b20      	cmp	r3, #32
 800491a:	d139      	bne.n	8004990 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004926:	2302      	movs	r3, #2
 8004928:	e033      	b.n	8004992 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2224      	movs	r2, #36	; 0x24
 8004936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0201 	bic.w	r2, r2, #1
 8004948:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004958:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	021b      	lsls	r3, r3, #8
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	4313      	orrs	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	e000      	b.n	8004992 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004990:	2302      	movs	r3, #2
  }
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
	...

080049a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80049a4:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40007000 	.word	0x40007000

080049bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ca:	d130      	bne.n	8004a2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80049cc:	4b23      	ldr	r3, [pc, #140]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d8:	d038      	beq.n	8004a4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049da:	4b20      	ldr	r3, [pc, #128]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049e2:	4a1e      	ldr	r2, [pc, #120]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049ea:	4b1d      	ldr	r3, [pc, #116]	; (8004a60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2232      	movs	r2, #50	; 0x32
 80049f0:	fb02 f303 	mul.w	r3, r2, r3
 80049f4:	4a1b      	ldr	r2, [pc, #108]	; (8004a64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80049f6:	fba2 2303 	umull	r2, r3, r2, r3
 80049fa:	0c9b      	lsrs	r3, r3, #18
 80049fc:	3301      	adds	r3, #1
 80049fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a00:	e002      	b.n	8004a08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	3b01      	subs	r3, #1
 8004a06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a08:	4b14      	ldr	r3, [pc, #80]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a14:	d102      	bne.n	8004a1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1f2      	bne.n	8004a02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a1c:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a28:	d110      	bne.n	8004a4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e00f      	b.n	8004a4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a2e:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a3a:	d007      	beq.n	8004a4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a3c:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a44:	4a05      	ldr	r2, [pc, #20]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	40007000 	.word	0x40007000
 8004a60:	20000000 	.word	0x20000000
 8004a64:	431bde83 	.word	0x431bde83

08004a68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d102      	bne.n	8004a7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	f000 bc10 	b.w	800529c <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a7c:	4b96      	ldr	r3, [pc, #600]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 030c 	and.w	r3, r3, #12
 8004a84:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a86:	4b94      	ldr	r3, [pc, #592]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 80e4 	beq.w	8004c66 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d007      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x4c>
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	2b0c      	cmp	r3, #12
 8004aa8:	f040 808b 	bne.w	8004bc2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	f040 8087 	bne.w	8004bc2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ab4:	4b88      	ldr	r3, [pc, #544]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d005      	beq.n	8004acc <HAL_RCC_OscConfig+0x64>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e3e7      	b.n	800529c <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a1a      	ldr	r2, [r3, #32]
 8004ad0:	4b81      	ldr	r3, [pc, #516]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d004      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x7e>
 8004adc:	4b7e      	ldr	r3, [pc, #504]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ae4:	e005      	b.n	8004af2 <HAL_RCC_OscConfig+0x8a>
 8004ae6:	4b7c      	ldr	r3, [pc, #496]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aec:	091b      	lsrs	r3, r3, #4
 8004aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d223      	bcs.n	8004b3e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fd7a 	bl	80055f4 <RCC_SetFlashLatencyFromMSIRange>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e3c8      	b.n	800529c <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b0a:	4b73      	ldr	r3, [pc, #460]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a72      	ldr	r2, [pc, #456]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004b10:	f043 0308 	orr.w	r3, r3, #8
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	4b70      	ldr	r3, [pc, #448]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	496d      	ldr	r1, [pc, #436]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b28:	4b6b      	ldr	r3, [pc, #428]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	021b      	lsls	r3, r3, #8
 8004b36:	4968      	ldr	r1, [pc, #416]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	604b      	str	r3, [r1, #4]
 8004b3c:	e025      	b.n	8004b8a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b3e:	4b66      	ldr	r3, [pc, #408]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a65      	ldr	r2, [pc, #404]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004b44:	f043 0308 	orr.w	r3, r3, #8
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	4b63      	ldr	r3, [pc, #396]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	4960      	ldr	r1, [pc, #384]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b5c:	4b5e      	ldr	r3, [pc, #376]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	021b      	lsls	r3, r3, #8
 8004b6a:	495b      	ldr	r1, [pc, #364]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d109      	bne.n	8004b8a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fd3a 	bl	80055f4 <RCC_SetFlashLatencyFromMSIRange>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e388      	b.n	800529c <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b8a:	f000 fc6f 	bl	800546c <HAL_RCC_GetSysClockFreq>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	4b51      	ldr	r3, [pc, #324]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	091b      	lsrs	r3, r3, #4
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	4950      	ldr	r1, [pc, #320]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004b9c:	5ccb      	ldrb	r3, [r1, r3]
 8004b9e:	f003 031f 	and.w	r3, r3, #31
 8004ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba6:	4a4e      	ldr	r2, [pc, #312]	; (8004ce0 <HAL_RCC_OscConfig+0x278>)
 8004ba8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004baa:	4b4e      	ldr	r3, [pc, #312]	; (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fd fbc6 	bl	8002340 <HAL_InitTick>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d052      	beq.n	8004c64 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
 8004bc0:	e36c      	b.n	800529c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d032      	beq.n	8004c30 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004bca:	4b43      	ldr	r3, [pc, #268]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a42      	ldr	r2, [pc, #264]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004bd6:	f7fd fc03 	bl	80023e0 <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bde:	f7fd fbff 	bl	80023e0 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e355      	b.n	800529c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bf0:	4b39      	ldr	r3, [pc, #228]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0f0      	beq.n	8004bde <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bfc:	4b36      	ldr	r3, [pc, #216]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a35      	ldr	r2, [pc, #212]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004c02:	f043 0308 	orr.w	r3, r3, #8
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	4b33      	ldr	r3, [pc, #204]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	4930      	ldr	r1, [pc, #192]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c1a:	4b2f      	ldr	r3, [pc, #188]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	021b      	lsls	r3, r3, #8
 8004c28:	492b      	ldr	r1, [pc, #172]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	604b      	str	r3, [r1, #4]
 8004c2e:	e01a      	b.n	8004c66 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c30:	4b29      	ldr	r3, [pc, #164]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a28      	ldr	r2, [pc, #160]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c3c:	f7fd fbd0 	bl	80023e0 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c44:	f7fd fbcc 	bl	80023e0 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e322      	b.n	800529c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c56:	4b20      	ldr	r3, [pc, #128]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f0      	bne.n	8004c44 <HAL_RCC_OscConfig+0x1dc>
 8004c62:	e000      	b.n	8004c66 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d073      	beq.n	8004d5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d005      	beq.n	8004c84 <HAL_RCC_OscConfig+0x21c>
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	2b0c      	cmp	r3, #12
 8004c7c:	d10e      	bne.n	8004c9c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	d10b      	bne.n	8004c9c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c84:	4b14      	ldr	r3, [pc, #80]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d063      	beq.n	8004d58 <HAL_RCC_OscConfig+0x2f0>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d15f      	bne.n	8004d58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e2ff      	b.n	800529c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca4:	d106      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x24c>
 8004ca6:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a0b      	ldr	r2, [pc, #44]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	e025      	b.n	8004d00 <HAL_RCC_OscConfig+0x298>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cbc:	d114      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x280>
 8004cbe:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a05      	ldr	r2, [pc, #20]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	4b03      	ldr	r3, [pc, #12]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a02      	ldr	r2, [pc, #8]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	e013      	b.n	8004d00 <HAL_RCC_OscConfig+0x298>
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	08009f20 	.word	0x08009f20
 8004ce0:	20000000 	.word	0x20000000
 8004ce4:	20000004 	.word	0x20000004
 8004ce8:	4ba0      	ldr	r3, [pc, #640]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a9f      	ldr	r2, [pc, #636]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	4b9d      	ldr	r3, [pc, #628]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a9c      	ldr	r2, [pc, #624]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d013      	beq.n	8004d30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d08:	f7fd fb6a 	bl	80023e0 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d10:	f7fd fb66 	bl	80023e0 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b64      	cmp	r3, #100	; 0x64
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e2bc      	b.n	800529c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d22:	4b92      	ldr	r3, [pc, #584]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0f0      	beq.n	8004d10 <HAL_RCC_OscConfig+0x2a8>
 8004d2e:	e014      	b.n	8004d5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d30:	f7fd fb56 	bl	80023e0 <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d38:	f7fd fb52 	bl	80023e0 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b64      	cmp	r3, #100	; 0x64
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e2a8      	b.n	800529c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d4a:	4b88      	ldr	r3, [pc, #544]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1f0      	bne.n	8004d38 <HAL_RCC_OscConfig+0x2d0>
 8004d56:	e000      	b.n	8004d5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d060      	beq.n	8004e28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d005      	beq.n	8004d78 <HAL_RCC_OscConfig+0x310>
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	2b0c      	cmp	r3, #12
 8004d70:	d119      	bne.n	8004da6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d116      	bne.n	8004da6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d78:	4b7c      	ldr	r3, [pc, #496]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d005      	beq.n	8004d90 <HAL_RCC_OscConfig+0x328>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e285      	b.n	800529c <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d90:	4b76      	ldr	r3, [pc, #472]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	061b      	lsls	r3, r3, #24
 8004d9e:	4973      	ldr	r1, [pc, #460]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004da4:	e040      	b.n	8004e28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d023      	beq.n	8004df6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dae:	4b6f      	ldr	r3, [pc, #444]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a6e      	ldr	r2, [pc, #440]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dba:	f7fd fb11 	bl	80023e0 <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dc2:	f7fd fb0d 	bl	80023e0 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e263      	b.n	800529c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dd4:	4b65      	ldr	r3, [pc, #404]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0f0      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de0:	4b62      	ldr	r3, [pc, #392]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	061b      	lsls	r3, r3, #24
 8004dee:	495f      	ldr	r1, [pc, #380]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	604b      	str	r3, [r1, #4]
 8004df4:	e018      	b.n	8004e28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004df6:	4b5d      	ldr	r3, [pc, #372]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a5c      	ldr	r2, [pc, #368]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e02:	f7fd faed 	bl	80023e0 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e0a:	f7fd fae9 	bl	80023e0 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e23f      	b.n	800529c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e1c:	4b53      	ldr	r3, [pc, #332]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1f0      	bne.n	8004e0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0308 	and.w	r3, r3, #8
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d03c      	beq.n	8004eae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01c      	beq.n	8004e76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e3c:	4b4b      	ldr	r3, [pc, #300]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e42:	4a4a      	ldr	r2, [pc, #296]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004e44:	f043 0301 	orr.w	r3, r3, #1
 8004e48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4c:	f7fd fac8 	bl	80023e0 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e54:	f7fd fac4 	bl	80023e0 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e21a      	b.n	800529c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e66:	4b41      	ldr	r3, [pc, #260]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0ef      	beq.n	8004e54 <HAL_RCC_OscConfig+0x3ec>
 8004e74:	e01b      	b.n	8004eae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e76:	4b3d      	ldr	r3, [pc, #244]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e7c:	4a3b      	ldr	r2, [pc, #236]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004e7e:	f023 0301 	bic.w	r3, r3, #1
 8004e82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e86:	f7fd faab 	bl	80023e0 <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e8e:	f7fd faa7 	bl	80023e0 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e1fd      	b.n	800529c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ea0:	4b32      	ldr	r3, [pc, #200]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1ef      	bne.n	8004e8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0304 	and.w	r3, r3, #4
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 80a6 	beq.w	8005008 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004ec0:	4b2a      	ldr	r3, [pc, #168]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10d      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ecc:	4b27      	ldr	r3, [pc, #156]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed0:	4a26      	ldr	r2, [pc, #152]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ed8:	4b24      	ldr	r3, [pc, #144]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee0:	60bb      	str	r3, [r7, #8]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ee8:	4b21      	ldr	r3, [pc, #132]	; (8004f70 <HAL_RCC_OscConfig+0x508>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d118      	bne.n	8004f26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ef4:	4b1e      	ldr	r3, [pc, #120]	; (8004f70 <HAL_RCC_OscConfig+0x508>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a1d      	ldr	r2, [pc, #116]	; (8004f70 <HAL_RCC_OscConfig+0x508>)
 8004efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004efe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f00:	f7fd fa6e 	bl	80023e0 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f08:	f7fd fa6a 	bl	80023e0 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e1c0      	b.n	800529c <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f1a:	4b15      	ldr	r3, [pc, #84]	; (8004f70 <HAL_RCC_OscConfig+0x508>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0f0      	beq.n	8004f08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d108      	bne.n	8004f40 <HAL_RCC_OscConfig+0x4d8>
 8004f2e:	4b0f      	ldr	r3, [pc, #60]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f34:	4a0d      	ldr	r2, [pc, #52]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004f36:	f043 0301 	orr.w	r3, r3, #1
 8004f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f3e:	e029      	b.n	8004f94 <HAL_RCC_OscConfig+0x52c>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	2b05      	cmp	r3, #5
 8004f46:	d115      	bne.n	8004f74 <HAL_RCC_OscConfig+0x50c>
 8004f48:	4b08      	ldr	r3, [pc, #32]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4e:	4a07      	ldr	r2, [pc, #28]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004f50:	f043 0304 	orr.w	r3, r3, #4
 8004f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f58:	4b04      	ldr	r3, [pc, #16]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5e:	4a03      	ldr	r2, [pc, #12]	; (8004f6c <HAL_RCC_OscConfig+0x504>)
 8004f60:	f043 0301 	orr.w	r3, r3, #1
 8004f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f68:	e014      	b.n	8004f94 <HAL_RCC_OscConfig+0x52c>
 8004f6a:	bf00      	nop
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	40007000 	.word	0x40007000
 8004f74:	4b9a      	ldr	r3, [pc, #616]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 8004f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7a:	4a99      	ldr	r2, [pc, #612]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 8004f7c:	f023 0301 	bic.w	r3, r3, #1
 8004f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f84:	4b96      	ldr	r3, [pc, #600]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 8004f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8a:	4a95      	ldr	r2, [pc, #596]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 8004f8c:	f023 0304 	bic.w	r3, r3, #4
 8004f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d016      	beq.n	8004fca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f9c:	f7fd fa20 	bl	80023e0 <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fa2:	e00a      	b.n	8004fba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fa4:	f7fd fa1c 	bl	80023e0 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e170      	b.n	800529c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fba:	4b89      	ldr	r3, [pc, #548]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 8004fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0ed      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x53c>
 8004fc8:	e015      	b.n	8004ff6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fca:	f7fd fa09 	bl	80023e0 <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fd0:	e00a      	b.n	8004fe8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd2:	f7fd fa05 	bl	80023e0 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e159      	b.n	800529c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fe8:	4b7d      	ldr	r3, [pc, #500]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1ed      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ff6:	7ffb      	ldrb	r3, [r7, #31]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d105      	bne.n	8005008 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ffc:	4b78      	ldr	r3, [pc, #480]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005000:	4a77      	ldr	r2, [pc, #476]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 8005002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005006:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0320 	and.w	r3, r3, #32
 8005010:	2b00      	cmp	r3, #0
 8005012:	d03c      	beq.n	800508e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	2b00      	cmp	r3, #0
 800501a:	d01c      	beq.n	8005056 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800501c:	4b70      	ldr	r3, [pc, #448]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 800501e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005022:	4a6f      	ldr	r2, [pc, #444]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 8005024:	f043 0301 	orr.w	r3, r3, #1
 8005028:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800502c:	f7fd f9d8 	bl	80023e0 <HAL_GetTick>
 8005030:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005034:	f7fd f9d4 	bl	80023e0 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e12a      	b.n	800529c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005046:	4b66      	ldr	r3, [pc, #408]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 8005048:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0ef      	beq.n	8005034 <HAL_RCC_OscConfig+0x5cc>
 8005054:	e01b      	b.n	800508e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005056:	4b62      	ldr	r3, [pc, #392]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 8005058:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800505c:	4a60      	ldr	r2, [pc, #384]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 800505e:	f023 0301 	bic.w	r3, r3, #1
 8005062:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005066:	f7fd f9bb 	bl	80023e0 <HAL_GetTick>
 800506a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800506c:	e008      	b.n	8005080 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800506e:	f7fd f9b7 	bl	80023e0 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d901      	bls.n	8005080 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e10d      	b.n	800529c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005080:	4b57      	ldr	r3, [pc, #348]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 8005082:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1ef      	bne.n	800506e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 8101 	beq.w	800529a <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509c:	2b02      	cmp	r3, #2
 800509e:	f040 80c9 	bne.w	8005234 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80050a2:	4b4f      	ldr	r3, [pc, #316]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f003 0203 	and.w	r2, r3, #3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d12c      	bne.n	8005110 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c0:	3b01      	subs	r3, #1
 80050c2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d123      	bne.n	8005110 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d11b      	bne.n	8005110 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d113      	bne.n	8005110 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f2:	085b      	lsrs	r3, r3, #1
 80050f4:	3b01      	subs	r3, #1
 80050f6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d109      	bne.n	8005110 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	085b      	lsrs	r3, r3, #1
 8005108:	3b01      	subs	r3, #1
 800510a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800510c:	429a      	cmp	r2, r3
 800510e:	d06b      	beq.n	80051e8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	2b0c      	cmp	r3, #12
 8005114:	d062      	beq.n	80051dc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005116:	4b32      	ldr	r3, [pc, #200]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e0ba      	b.n	800529c <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005126:	4b2e      	ldr	r3, [pc, #184]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a2d      	ldr	r2, [pc, #180]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 800512c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005130:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005132:	f7fd f955 	bl	80023e0 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800513a:	f7fd f951 	bl	80023e0 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e0a7      	b.n	800529c <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800514c:	4b24      	ldr	r3, [pc, #144]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1f0      	bne.n	800513a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005158:	4b21      	ldr	r3, [pc, #132]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	4b21      	ldr	r3, [pc, #132]	; (80051e4 <HAL_RCC_OscConfig+0x77c>)
 800515e:	4013      	ands	r3, r2
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005168:	3a01      	subs	r2, #1
 800516a:	0112      	lsls	r2, r2, #4
 800516c:	4311      	orrs	r1, r2
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005172:	0212      	lsls	r2, r2, #8
 8005174:	4311      	orrs	r1, r2
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800517a:	0852      	lsrs	r2, r2, #1
 800517c:	3a01      	subs	r2, #1
 800517e:	0552      	lsls	r2, r2, #21
 8005180:	4311      	orrs	r1, r2
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005186:	0852      	lsrs	r2, r2, #1
 8005188:	3a01      	subs	r2, #1
 800518a:	0652      	lsls	r2, r2, #25
 800518c:	4311      	orrs	r1, r2
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005192:	06d2      	lsls	r2, r2, #27
 8005194:	430a      	orrs	r2, r1
 8005196:	4912      	ldr	r1, [pc, #72]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 8005198:	4313      	orrs	r3, r2
 800519a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800519c:	4b10      	ldr	r3, [pc, #64]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a0f      	ldr	r2, [pc, #60]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 80051a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051a8:	4b0d      	ldr	r3, [pc, #52]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	4a0c      	ldr	r2, [pc, #48]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 80051ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051b4:	f7fd f914 	bl	80023e0 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051bc:	f7fd f910 	bl	80023e0 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e066      	b.n	800529c <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ce:	4b04      	ldr	r3, [pc, #16]	; (80051e0 <HAL_RCC_OscConfig+0x778>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0f0      	beq.n	80051bc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051da:	e05e      	b.n	800529a <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e05d      	b.n	800529c <HAL_RCC_OscConfig+0x834>
 80051e0:	40021000 	.word	0x40021000
 80051e4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051e8:	4b2e      	ldr	r3, [pc, #184]	; (80052a4 <HAL_RCC_OscConfig+0x83c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d152      	bne.n	800529a <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80051f4:	4b2b      	ldr	r3, [pc, #172]	; (80052a4 <HAL_RCC_OscConfig+0x83c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a2a      	ldr	r2, [pc, #168]	; (80052a4 <HAL_RCC_OscConfig+0x83c>)
 80051fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005200:	4b28      	ldr	r3, [pc, #160]	; (80052a4 <HAL_RCC_OscConfig+0x83c>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	4a27      	ldr	r2, [pc, #156]	; (80052a4 <HAL_RCC_OscConfig+0x83c>)
 8005206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800520a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800520c:	f7fd f8e8 	bl	80023e0 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005214:	f7fd f8e4 	bl	80023e0 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e03a      	b.n	800529c <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005226:	4b1f      	ldr	r3, [pc, #124]	; (80052a4 <HAL_RCC_OscConfig+0x83c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0f0      	beq.n	8005214 <HAL_RCC_OscConfig+0x7ac>
 8005232:	e032      	b.n	800529a <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	2b0c      	cmp	r3, #12
 8005238:	d02d      	beq.n	8005296 <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800523a:	4b1a      	ldr	r3, [pc, #104]	; (80052a4 <HAL_RCC_OscConfig+0x83c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a19      	ldr	r2, [pc, #100]	; (80052a4 <HAL_RCC_OscConfig+0x83c>)
 8005240:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005244:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005246:	4b17      	ldr	r3, [pc, #92]	; (80052a4 <HAL_RCC_OscConfig+0x83c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d105      	bne.n	800525e <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005252:	4b14      	ldr	r3, [pc, #80]	; (80052a4 <HAL_RCC_OscConfig+0x83c>)
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	4a13      	ldr	r2, [pc, #76]	; (80052a4 <HAL_RCC_OscConfig+0x83c>)
 8005258:	f023 0303 	bic.w	r3, r3, #3
 800525c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800525e:	4b11      	ldr	r3, [pc, #68]	; (80052a4 <HAL_RCC_OscConfig+0x83c>)
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	4a10      	ldr	r2, [pc, #64]	; (80052a4 <HAL_RCC_OscConfig+0x83c>)
 8005264:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800526c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526e:	f7fd f8b7 	bl	80023e0 <HAL_GetTick>
 8005272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005274:	e008      	b.n	8005288 <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005276:	f7fd f8b3 	bl	80023e0 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e009      	b.n	800529c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005288:	4b06      	ldr	r3, [pc, #24]	; (80052a4 <HAL_RCC_OscConfig+0x83c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1f0      	bne.n	8005276 <HAL_RCC_OscConfig+0x80e>
 8005294:	e001      	b.n	800529a <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e000      	b.n	800529c <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3720      	adds	r7, #32
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	40021000 	.word	0x40021000

080052a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e0c8      	b.n	800544e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052bc:	4b66      	ldr	r3, [pc, #408]	; (8005458 <HAL_RCC_ClockConfig+0x1b0>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d910      	bls.n	80052ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ca:	4b63      	ldr	r3, [pc, #396]	; (8005458 <HAL_RCC_ClockConfig+0x1b0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f023 0207 	bic.w	r2, r3, #7
 80052d2:	4961      	ldr	r1, [pc, #388]	; (8005458 <HAL_RCC_ClockConfig+0x1b0>)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052da:	4b5f      	ldr	r3, [pc, #380]	; (8005458 <HAL_RCC_ClockConfig+0x1b0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d001      	beq.n	80052ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e0b0      	b.n	800544e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d04c      	beq.n	8005392 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	d107      	bne.n	8005310 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005300:	4b56      	ldr	r3, [pc, #344]	; (800545c <HAL_RCC_ClockConfig+0x1b4>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d121      	bne.n	8005350 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e09e      	b.n	800544e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b02      	cmp	r3, #2
 8005316:	d107      	bne.n	8005328 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005318:	4b50      	ldr	r3, [pc, #320]	; (800545c <HAL_RCC_ClockConfig+0x1b4>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d115      	bne.n	8005350 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e092      	b.n	800544e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d107      	bne.n	8005340 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005330:	4b4a      	ldr	r3, [pc, #296]	; (800545c <HAL_RCC_ClockConfig+0x1b4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d109      	bne.n	8005350 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e086      	b.n	800544e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005340:	4b46      	ldr	r3, [pc, #280]	; (800545c <HAL_RCC_ClockConfig+0x1b4>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e07e      	b.n	800544e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005350:	4b42      	ldr	r3, [pc, #264]	; (800545c <HAL_RCC_ClockConfig+0x1b4>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f023 0203 	bic.w	r2, r3, #3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	493f      	ldr	r1, [pc, #252]	; (800545c <HAL_RCC_ClockConfig+0x1b4>)
 800535e:	4313      	orrs	r3, r2
 8005360:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005362:	f7fd f83d 	bl	80023e0 <HAL_GetTick>
 8005366:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005368:	e00a      	b.n	8005380 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800536a:	f7fd f839 	bl	80023e0 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	f241 3288 	movw	r2, #5000	; 0x1388
 8005378:	4293      	cmp	r3, r2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e066      	b.n	800544e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005380:	4b36      	ldr	r3, [pc, #216]	; (800545c <HAL_RCC_ClockConfig+0x1b4>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 020c 	and.w	r2, r3, #12
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	429a      	cmp	r2, r3
 8005390:	d1eb      	bne.n	800536a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d008      	beq.n	80053b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800539e:	4b2f      	ldr	r3, [pc, #188]	; (800545c <HAL_RCC_ClockConfig+0x1b4>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	492c      	ldr	r1, [pc, #176]	; (800545c <HAL_RCC_ClockConfig+0x1b4>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053b0:	4b29      	ldr	r3, [pc, #164]	; (8005458 <HAL_RCC_ClockConfig+0x1b0>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d210      	bcs.n	80053e0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053be:	4b26      	ldr	r3, [pc, #152]	; (8005458 <HAL_RCC_ClockConfig+0x1b0>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f023 0207 	bic.w	r2, r3, #7
 80053c6:	4924      	ldr	r1, [pc, #144]	; (8005458 <HAL_RCC_ClockConfig+0x1b0>)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ce:	4b22      	ldr	r3, [pc, #136]	; (8005458 <HAL_RCC_ClockConfig+0x1b0>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0307 	and.w	r3, r3, #7
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d001      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e036      	b.n	800544e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d008      	beq.n	80053fe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053ec:	4b1b      	ldr	r3, [pc, #108]	; (800545c <HAL_RCC_ClockConfig+0x1b4>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	4918      	ldr	r1, [pc, #96]	; (800545c <HAL_RCC_ClockConfig+0x1b4>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0308 	and.w	r3, r3, #8
 8005406:	2b00      	cmp	r3, #0
 8005408:	d009      	beq.n	800541e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800540a:	4b14      	ldr	r3, [pc, #80]	; (800545c <HAL_RCC_ClockConfig+0x1b4>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	4910      	ldr	r1, [pc, #64]	; (800545c <HAL_RCC_ClockConfig+0x1b4>)
 800541a:	4313      	orrs	r3, r2
 800541c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800541e:	f000 f825 	bl	800546c <HAL_RCC_GetSysClockFreq>
 8005422:	4602      	mov	r2, r0
 8005424:	4b0d      	ldr	r3, [pc, #52]	; (800545c <HAL_RCC_ClockConfig+0x1b4>)
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	091b      	lsrs	r3, r3, #4
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	490c      	ldr	r1, [pc, #48]	; (8005460 <HAL_RCC_ClockConfig+0x1b8>)
 8005430:	5ccb      	ldrb	r3, [r1, r3]
 8005432:	f003 031f 	and.w	r3, r3, #31
 8005436:	fa22 f303 	lsr.w	r3, r2, r3
 800543a:	4a0a      	ldr	r2, [pc, #40]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 800543c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800543e:	4b0a      	ldr	r3, [pc, #40]	; (8005468 <HAL_RCC_ClockConfig+0x1c0>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4618      	mov	r0, r3
 8005444:	f7fc ff7c 	bl	8002340 <HAL_InitTick>
 8005448:	4603      	mov	r3, r0
 800544a:	72fb      	strb	r3, [r7, #11]

  return status;
 800544c:	7afb      	ldrb	r3, [r7, #11]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	40022000 	.word	0x40022000
 800545c:	40021000 	.word	0x40021000
 8005460:	08009f20 	.word	0x08009f20
 8005464:	20000000 	.word	0x20000000
 8005468:	20000004 	.word	0x20000004

0800546c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800546c:	b480      	push	{r7}
 800546e:	b089      	sub	sp, #36	; 0x24
 8005470:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005472:	2300      	movs	r3, #0
 8005474:	61fb      	str	r3, [r7, #28]
 8005476:	2300      	movs	r3, #0
 8005478:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800547a:	4b3e      	ldr	r3, [pc, #248]	; (8005574 <HAL_RCC_GetSysClockFreq+0x108>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 030c 	and.w	r3, r3, #12
 8005482:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005484:	4b3b      	ldr	r3, [pc, #236]	; (8005574 <HAL_RCC_GetSysClockFreq+0x108>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f003 0303 	and.w	r3, r3, #3
 800548c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d005      	beq.n	80054a0 <HAL_RCC_GetSysClockFreq+0x34>
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	2b0c      	cmp	r3, #12
 8005498:	d121      	bne.n	80054de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d11e      	bne.n	80054de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80054a0:	4b34      	ldr	r3, [pc, #208]	; (8005574 <HAL_RCC_GetSysClockFreq+0x108>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0308 	and.w	r3, r3, #8
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d107      	bne.n	80054bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80054ac:	4b31      	ldr	r3, [pc, #196]	; (8005574 <HAL_RCC_GetSysClockFreq+0x108>)
 80054ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054b2:	0a1b      	lsrs	r3, r3, #8
 80054b4:	f003 030f 	and.w	r3, r3, #15
 80054b8:	61fb      	str	r3, [r7, #28]
 80054ba:	e005      	b.n	80054c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80054bc:	4b2d      	ldr	r3, [pc, #180]	; (8005574 <HAL_RCC_GetSysClockFreq+0x108>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	091b      	lsrs	r3, r3, #4
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80054c8:	4a2b      	ldr	r2, [pc, #172]	; (8005578 <HAL_RCC_GetSysClockFreq+0x10c>)
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10d      	bne.n	80054f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054dc:	e00a      	b.n	80054f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d102      	bne.n	80054ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054e4:	4b25      	ldr	r3, [pc, #148]	; (800557c <HAL_RCC_GetSysClockFreq+0x110>)
 80054e6:	61bb      	str	r3, [r7, #24]
 80054e8:	e004      	b.n	80054f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d101      	bne.n	80054f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054f0:	4b23      	ldr	r3, [pc, #140]	; (8005580 <HAL_RCC_GetSysClockFreq+0x114>)
 80054f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	2b0c      	cmp	r3, #12
 80054f8:	d134      	bne.n	8005564 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054fa:	4b1e      	ldr	r3, [pc, #120]	; (8005574 <HAL_RCC_GetSysClockFreq+0x108>)
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b02      	cmp	r3, #2
 8005508:	d003      	beq.n	8005512 <HAL_RCC_GetSysClockFreq+0xa6>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b03      	cmp	r3, #3
 800550e:	d003      	beq.n	8005518 <HAL_RCC_GetSysClockFreq+0xac>
 8005510:	e005      	b.n	800551e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005512:	4b1a      	ldr	r3, [pc, #104]	; (800557c <HAL_RCC_GetSysClockFreq+0x110>)
 8005514:	617b      	str	r3, [r7, #20]
      break;
 8005516:	e005      	b.n	8005524 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005518:	4b19      	ldr	r3, [pc, #100]	; (8005580 <HAL_RCC_GetSysClockFreq+0x114>)
 800551a:	617b      	str	r3, [r7, #20]
      break;
 800551c:	e002      	b.n	8005524 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	617b      	str	r3, [r7, #20]
      break;
 8005522:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005524:	4b13      	ldr	r3, [pc, #76]	; (8005574 <HAL_RCC_GetSysClockFreq+0x108>)
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	091b      	lsrs	r3, r3, #4
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	3301      	adds	r3, #1
 8005530:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005532:	4b10      	ldr	r3, [pc, #64]	; (8005574 <HAL_RCC_GetSysClockFreq+0x108>)
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	0a1b      	lsrs	r3, r3, #8
 8005538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	fb03 f202 	mul.w	r2, r3, r2
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	fbb2 f3f3 	udiv	r3, r2, r3
 8005548:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800554a:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <HAL_RCC_GetSysClockFreq+0x108>)
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	0e5b      	lsrs	r3, r3, #25
 8005550:	f003 0303 	and.w	r3, r3, #3
 8005554:	3301      	adds	r3, #1
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005562:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005564:	69bb      	ldr	r3, [r7, #24]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3724      	adds	r7, #36	; 0x24
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40021000 	.word	0x40021000
 8005578:	08009f38 	.word	0x08009f38
 800557c:	00f42400 	.word	0x00f42400
 8005580:	00b71b00 	.word	0x00b71b00

08005584 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005588:	4b03      	ldr	r3, [pc, #12]	; (8005598 <HAL_RCC_GetHCLKFreq+0x14>)
 800558a:	681b      	ldr	r3, [r3, #0]
}
 800558c:	4618      	mov	r0, r3
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	20000000 	.word	0x20000000

0800559c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80055a0:	f7ff fff0 	bl	8005584 <HAL_RCC_GetHCLKFreq>
 80055a4:	4602      	mov	r2, r0
 80055a6:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	0a1b      	lsrs	r3, r3, #8
 80055ac:	f003 0307 	and.w	r3, r3, #7
 80055b0:	4904      	ldr	r1, [pc, #16]	; (80055c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055b2:	5ccb      	ldrb	r3, [r1, r3]
 80055b4:	f003 031f 	and.w	r3, r3, #31
 80055b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055bc:	4618      	mov	r0, r3
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	40021000 	.word	0x40021000
 80055c4:	08009f30 	.word	0x08009f30

080055c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80055cc:	f7ff ffda 	bl	8005584 <HAL_RCC_GetHCLKFreq>
 80055d0:	4602      	mov	r2, r0
 80055d2:	4b06      	ldr	r3, [pc, #24]	; (80055ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	0adb      	lsrs	r3, r3, #11
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	4904      	ldr	r1, [pc, #16]	; (80055f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055de:	5ccb      	ldrb	r3, [r1, r3]
 80055e0:	f003 031f 	and.w	r3, r3, #31
 80055e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	40021000 	.word	0x40021000
 80055f0:	08009f30 	.word	0x08009f30

080055f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80055fc:	2300      	movs	r3, #0
 80055fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005600:	4b2a      	ldr	r3, [pc, #168]	; (80056ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800560c:	f7ff f9c8 	bl	80049a0 <HAL_PWREx_GetVoltageRange>
 8005610:	6178      	str	r0, [r7, #20]
 8005612:	e014      	b.n	800563e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005614:	4b25      	ldr	r3, [pc, #148]	; (80056ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005618:	4a24      	ldr	r2, [pc, #144]	; (80056ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800561a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800561e:	6593      	str	r3, [r2, #88]	; 0x58
 8005620:	4b22      	ldr	r3, [pc, #136]	; (80056ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800562c:	f7ff f9b8 	bl	80049a0 <HAL_PWREx_GetVoltageRange>
 8005630:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005632:	4b1e      	ldr	r3, [pc, #120]	; (80056ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005636:	4a1d      	ldr	r2, [pc, #116]	; (80056ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800563c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005644:	d10b      	bne.n	800565e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b80      	cmp	r3, #128	; 0x80
 800564a:	d919      	bls.n	8005680 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2ba0      	cmp	r3, #160	; 0xa0
 8005650:	d902      	bls.n	8005658 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005652:	2302      	movs	r3, #2
 8005654:	613b      	str	r3, [r7, #16]
 8005656:	e013      	b.n	8005680 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005658:	2301      	movs	r3, #1
 800565a:	613b      	str	r3, [r7, #16]
 800565c:	e010      	b.n	8005680 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b80      	cmp	r3, #128	; 0x80
 8005662:	d902      	bls.n	800566a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005664:	2303      	movs	r3, #3
 8005666:	613b      	str	r3, [r7, #16]
 8005668:	e00a      	b.n	8005680 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b80      	cmp	r3, #128	; 0x80
 800566e:	d102      	bne.n	8005676 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005670:	2302      	movs	r3, #2
 8005672:	613b      	str	r3, [r7, #16]
 8005674:	e004      	b.n	8005680 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b70      	cmp	r3, #112	; 0x70
 800567a:	d101      	bne.n	8005680 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800567c:	2301      	movs	r3, #1
 800567e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005680:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f023 0207 	bic.w	r2, r3, #7
 8005688:	4909      	ldr	r1, [pc, #36]	; (80056b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	4313      	orrs	r3, r2
 800568e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005690:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	429a      	cmp	r2, r3
 800569c:	d001      	beq.n	80056a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	40021000 	.word	0x40021000
 80056b0:	40022000 	.word	0x40022000

080056b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056bc:	2300      	movs	r3, #0
 80056be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056c0:	2300      	movs	r3, #0
 80056c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d031      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056d8:	d01a      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80056da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056de:	d814      	bhi.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d009      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80056e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056e8:	d10f      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80056ea:	4b5d      	ldr	r3, [pc, #372]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	4a5c      	ldr	r2, [pc, #368]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056f6:	e00c      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3304      	adds	r3, #4
 80056fc:	2100      	movs	r1, #0
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 f9ce 	bl	8005aa0 <RCCEx_PLLSAI1_Config>
 8005704:	4603      	mov	r3, r0
 8005706:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005708:	e003      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	74fb      	strb	r3, [r7, #19]
      break;
 800570e:	e000      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005712:	7cfb      	ldrb	r3, [r7, #19]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10b      	bne.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005718:	4b51      	ldr	r3, [pc, #324]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800571a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005726:	494e      	ldr	r1, [pc, #312]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005728:	4313      	orrs	r3, r2
 800572a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800572e:	e001      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005730:	7cfb      	ldrb	r3, [r7, #19]
 8005732:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 809e 	beq.w	800587e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005742:	2300      	movs	r3, #0
 8005744:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005746:	4b46      	ldr	r3, [pc, #280]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005752:	2301      	movs	r3, #1
 8005754:	e000      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005756:	2300      	movs	r3, #0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00d      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800575c:	4b40      	ldr	r3, [pc, #256]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800575e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005760:	4a3f      	ldr	r2, [pc, #252]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005766:	6593      	str	r3, [r2, #88]	; 0x58
 8005768:	4b3d      	ldr	r3, [pc, #244]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800576a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005770:	60bb      	str	r3, [r7, #8]
 8005772:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005774:	2301      	movs	r3, #1
 8005776:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005778:	4b3a      	ldr	r3, [pc, #232]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a39      	ldr	r2, [pc, #228]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800577e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005782:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005784:	f7fc fe2c 	bl	80023e0 <HAL_GetTick>
 8005788:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800578a:	e009      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800578c:	f7fc fe28 	bl	80023e0 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d902      	bls.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	74fb      	strb	r3, [r7, #19]
        break;
 800579e:	e005      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057a0:	4b30      	ldr	r3, [pc, #192]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0ef      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80057ac:	7cfb      	ldrb	r3, [r7, #19]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d15a      	bne.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80057b2:	4b2b      	ldr	r3, [pc, #172]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d01e      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d019      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057ce:	4b24      	ldr	r3, [pc, #144]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057da:	4b21      	ldr	r3, [pc, #132]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e0:	4a1f      	ldr	r2, [pc, #124]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057ea:	4b1d      	ldr	r3, [pc, #116]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f0:	4a1b      	ldr	r2, [pc, #108]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057fa:	4a19      	ldr	r2, [pc, #100]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d016      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580c:	f7fc fde8 	bl	80023e0 <HAL_GetTick>
 8005810:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005812:	e00b      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005814:	f7fc fde4 	bl	80023e0 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005822:	4293      	cmp	r3, r2
 8005824:	d902      	bls.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	74fb      	strb	r3, [r7, #19]
            break;
 800582a:	e006      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800582c:	4b0c      	ldr	r3, [pc, #48]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800582e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0ec      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800583a:	7cfb      	ldrb	r3, [r7, #19]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10b      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005840:	4b07      	ldr	r3, [pc, #28]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005846:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800584e:	4904      	ldr	r1, [pc, #16]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005850:	4313      	orrs	r3, r2
 8005852:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005856:	e009      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005858:	7cfb      	ldrb	r3, [r7, #19]
 800585a:	74bb      	strb	r3, [r7, #18]
 800585c:	e006      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800585e:	bf00      	nop
 8005860:	40021000 	.word	0x40021000
 8005864:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005868:	7cfb      	ldrb	r3, [r7, #19]
 800586a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800586c:	7c7b      	ldrb	r3, [r7, #17]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d105      	bne.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005872:	4b8a      	ldr	r3, [pc, #552]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005876:	4a89      	ldr	r2, [pc, #548]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800587c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800588a:	4b84      	ldr	r3, [pc, #528]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800588c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005890:	f023 0203 	bic.w	r2, r3, #3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	4980      	ldr	r1, [pc, #512]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058ac:	4b7b      	ldr	r3, [pc, #492]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b2:	f023 020c 	bic.w	r2, r3, #12
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	4978      	ldr	r1, [pc, #480]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058ce:	4b73      	ldr	r3, [pc, #460]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058dc:	496f      	ldr	r1, [pc, #444]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058f0:	4b6a      	ldr	r3, [pc, #424]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058fe:	4967      	ldr	r1, [pc, #412]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005900:	4313      	orrs	r3, r2
 8005902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005912:	4b62      	ldr	r3, [pc, #392]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005918:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005920:	495e      	ldr	r1, [pc, #376]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005922:	4313      	orrs	r3, r2
 8005924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005934:	4b59      	ldr	r3, [pc, #356]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005942:	4956      	ldr	r1, [pc, #344]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005944:	4313      	orrs	r3, r2
 8005946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005956:	4b51      	ldr	r3, [pc, #324]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005964:	494d      	ldr	r1, [pc, #308]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005966:	4313      	orrs	r3, r2
 8005968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d028      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005978:	4b48      	ldr	r3, [pc, #288]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800597a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005986:	4945      	ldr	r1, [pc, #276]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005996:	d106      	bne.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005998:	4b40      	ldr	r3, [pc, #256]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	4a3f      	ldr	r2, [pc, #252]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800599e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059a2:	60d3      	str	r3, [r2, #12]
 80059a4:	e011      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059ae:	d10c      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3304      	adds	r3, #4
 80059b4:	2101      	movs	r1, #1
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 f872 	bl	8005aa0 <RCCEx_PLLSAI1_Config>
 80059bc:	4603      	mov	r3, r0
 80059be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80059c0:	7cfb      	ldrb	r3, [r7, #19]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80059c6:	7cfb      	ldrb	r3, [r7, #19]
 80059c8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d028      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059d6:	4b31      	ldr	r3, [pc, #196]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e4:	492d      	ldr	r1, [pc, #180]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059f4:	d106      	bne.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059f6:	4b29      	ldr	r3, [pc, #164]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	4a28      	ldr	r2, [pc, #160]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a00:	60d3      	str	r3, [r2, #12]
 8005a02:	e011      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a0c:	d10c      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	3304      	adds	r3, #4
 8005a12:	2101      	movs	r1, #1
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 f843 	bl	8005aa0 <RCCEx_PLLSAI1_Config>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a1e:	7cfb      	ldrb	r3, [r7, #19]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005a24:	7cfb      	ldrb	r3, [r7, #19]
 8005a26:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d01c      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a34:	4b19      	ldr	r3, [pc, #100]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a42:	4916      	ldr	r1, [pc, #88]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a52:	d10c      	bne.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	3304      	adds	r3, #4
 8005a58:	2102      	movs	r1, #2
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 f820 	bl	8005aa0 <RCCEx_PLLSAI1_Config>
 8005a60:	4603      	mov	r3, r0
 8005a62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a64:	7cfb      	ldrb	r3, [r7, #19]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005a6a:	7cfb      	ldrb	r3, [r7, #19]
 8005a6c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a7a:	4b08      	ldr	r3, [pc, #32]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a80:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a88:	4904      	ldr	r1, [pc, #16]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005a90:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	40021000 	.word	0x40021000

08005aa0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005aae:	4b74      	ldr	r3, [pc, #464]	; (8005c80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d018      	beq.n	8005aec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005aba:	4b71      	ldr	r3, [pc, #452]	; (8005c80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f003 0203 	and.w	r2, r3, #3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d10d      	bne.n	8005ae6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
       ||
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d009      	beq.n	8005ae6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005ad2:	4b6b      	ldr	r3, [pc, #428]	; (8005c80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	091b      	lsrs	r3, r3, #4
 8005ad8:	f003 0307 	and.w	r3, r3, #7
 8005adc:	1c5a      	adds	r2, r3, #1
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
       ||
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d047      	beq.n	8005b76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	73fb      	strb	r3, [r7, #15]
 8005aea:	e044      	b.n	8005b76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d018      	beq.n	8005b26 <RCCEx_PLLSAI1_Config+0x86>
 8005af4:	2b03      	cmp	r3, #3
 8005af6:	d825      	bhi.n	8005b44 <RCCEx_PLLSAI1_Config+0xa4>
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d002      	beq.n	8005b02 <RCCEx_PLLSAI1_Config+0x62>
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d009      	beq.n	8005b14 <RCCEx_PLLSAI1_Config+0x74>
 8005b00:	e020      	b.n	8005b44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b02:	4b5f      	ldr	r3, [pc, #380]	; (8005c80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d11d      	bne.n	8005b4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b12:	e01a      	b.n	8005b4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b14:	4b5a      	ldr	r3, [pc, #360]	; (8005c80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d116      	bne.n	8005b4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b24:	e013      	b.n	8005b4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b26:	4b56      	ldr	r3, [pc, #344]	; (8005c80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10f      	bne.n	8005b52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b32:	4b53      	ldr	r3, [pc, #332]	; (8005c80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d109      	bne.n	8005b52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b42:	e006      	b.n	8005b52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	73fb      	strb	r3, [r7, #15]
      break;
 8005b48:	e004      	b.n	8005b54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b4a:	bf00      	nop
 8005b4c:	e002      	b.n	8005b54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b4e:	bf00      	nop
 8005b50:	e000      	b.n	8005b54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b52:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10d      	bne.n	8005b76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b5a:	4b49      	ldr	r3, [pc, #292]	; (8005c80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6819      	ldr	r1, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	430b      	orrs	r3, r1
 8005b70:	4943      	ldr	r1, [pc, #268]	; (8005c80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d17c      	bne.n	8005c76 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b7c:	4b40      	ldr	r3, [pc, #256]	; (8005c80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a3f      	ldr	r2, [pc, #252]	; (8005c80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b88:	f7fc fc2a 	bl	80023e0 <HAL_GetTick>
 8005b8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b8e:	e009      	b.n	8005ba4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b90:	f7fc fc26 	bl	80023e0 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d902      	bls.n	8005ba4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	73fb      	strb	r3, [r7, #15]
        break;
 8005ba2:	e005      	b.n	8005bb0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ba4:	4b36      	ldr	r3, [pc, #216]	; (8005c80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1ef      	bne.n	8005b90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d15f      	bne.n	8005c76 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d110      	bne.n	8005bde <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bbc:	4b30      	ldr	r3, [pc, #192]	; (8005c80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005bc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6892      	ldr	r2, [r2, #8]
 8005bcc:	0211      	lsls	r1, r2, #8
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	68d2      	ldr	r2, [r2, #12]
 8005bd2:	06d2      	lsls	r2, r2, #27
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	492a      	ldr	r1, [pc, #168]	; (8005c80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	610b      	str	r3, [r1, #16]
 8005bdc:	e027      	b.n	8005c2e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d112      	bne.n	8005c0a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005be4:	4b26      	ldr	r3, [pc, #152]	; (8005c80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005bec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6892      	ldr	r2, [r2, #8]
 8005bf4:	0211      	lsls	r1, r2, #8
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6912      	ldr	r2, [r2, #16]
 8005bfa:	0852      	lsrs	r2, r2, #1
 8005bfc:	3a01      	subs	r2, #1
 8005bfe:	0552      	lsls	r2, r2, #21
 8005c00:	430a      	orrs	r2, r1
 8005c02:	491f      	ldr	r1, [pc, #124]	; (8005c80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	610b      	str	r3, [r1, #16]
 8005c08:	e011      	b.n	8005c2e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c0a:	4b1d      	ldr	r3, [pc, #116]	; (8005c80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005c12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6892      	ldr	r2, [r2, #8]
 8005c1a:	0211      	lsls	r1, r2, #8
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6952      	ldr	r2, [r2, #20]
 8005c20:	0852      	lsrs	r2, r2, #1
 8005c22:	3a01      	subs	r2, #1
 8005c24:	0652      	lsls	r2, r2, #25
 8005c26:	430a      	orrs	r2, r1
 8005c28:	4915      	ldr	r1, [pc, #84]	; (8005c80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005c2e:	4b14      	ldr	r3, [pc, #80]	; (8005c80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a13      	ldr	r2, [pc, #76]	; (8005c80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c38:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c3a:	f7fc fbd1 	bl	80023e0 <HAL_GetTick>
 8005c3e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c40:	e009      	b.n	8005c56 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c42:	f7fc fbcd 	bl	80023e0 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d902      	bls.n	8005c56 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	73fb      	strb	r3, [r7, #15]
          break;
 8005c54:	e005      	b.n	8005c62 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c56:	4b0a      	ldr	r3, [pc, #40]	; (8005c80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d0ef      	beq.n	8005c42 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d106      	bne.n	8005c76 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c68:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c6a:	691a      	ldr	r2, [r3, #16]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	4903      	ldr	r1, [pc, #12]	; (8005c80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40021000 	.word	0x40021000

08005c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e049      	b.n	8005d2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d106      	bne.n	8005cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fc f9c6 	bl	800203c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3304      	adds	r3, #4
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	f000 fb42 	bl	800634c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d001      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e03b      	b.n	8005dc4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0201 	orr.w	r2, r2, #1
 8005d62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a19      	ldr	r2, [pc, #100]	; (8005dd0 <HAL_TIM_Base_Start_IT+0x9c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d009      	beq.n	8005d82 <HAL_TIM_Base_Start_IT+0x4e>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d76:	d004      	beq.n	8005d82 <HAL_TIM_Base_Start_IT+0x4e>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a15      	ldr	r2, [pc, #84]	; (8005dd4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d115      	bne.n	8005dae <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	4b13      	ldr	r3, [pc, #76]	; (8005dd8 <HAL_TIM_Base_Start_IT+0xa4>)
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b06      	cmp	r3, #6
 8005d92:	d015      	beq.n	8005dc0 <HAL_TIM_Base_Start_IT+0x8c>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d9a:	d011      	beq.n	8005dc0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0201 	orr.w	r2, r2, #1
 8005daa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dac:	e008      	b.n	8005dc0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f042 0201 	orr.w	r2, r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	e000      	b.n	8005dc2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	40012c00 	.word	0x40012c00
 8005dd4:	40014000 	.word	0x40014000
 8005dd8:	00010007 	.word	0x00010007

08005ddc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e049      	b.n	8005e82 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d106      	bne.n	8005e08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7fc f8d4 	bl	8001fb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	3304      	adds	r3, #4
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	f000 fa96 	bl	800634c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d122      	bne.n	8005ee6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d11b      	bne.n	8005ee6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f06f 0202 	mvn.w	r2, #2
 8005eb6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	f003 0303 	and.w	r3, r3, #3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 fa1f 	bl	8006310 <HAL_TIM_IC_CaptureCallback>
 8005ed2:	e005      	b.n	8005ee0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fa11 	bl	80062fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fa22 	bl	8006324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d122      	bne.n	8005f3a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f003 0304 	and.w	r3, r3, #4
 8005efe:	2b04      	cmp	r3, #4
 8005f00:	d11b      	bne.n	8005f3a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f06f 0204 	mvn.w	r2, #4
 8005f0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f9f5 	bl	8006310 <HAL_TIM_IC_CaptureCallback>
 8005f26:	e005      	b.n	8005f34 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f9e7 	bl	80062fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f9f8 	bl	8006324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	f003 0308 	and.w	r3, r3, #8
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d122      	bne.n	8005f8e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f003 0308 	and.w	r3, r3, #8
 8005f52:	2b08      	cmp	r3, #8
 8005f54:	d11b      	bne.n	8005f8e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f06f 0208 	mvn.w	r2, #8
 8005f5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2204      	movs	r2, #4
 8005f64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	f003 0303 	and.w	r3, r3, #3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f9cb 	bl	8006310 <HAL_TIM_IC_CaptureCallback>
 8005f7a:	e005      	b.n	8005f88 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f9bd 	bl	80062fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f9ce 	bl	8006324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	f003 0310 	and.w	r3, r3, #16
 8005f98:	2b10      	cmp	r3, #16
 8005f9a:	d122      	bne.n	8005fe2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f003 0310 	and.w	r3, r3, #16
 8005fa6:	2b10      	cmp	r3, #16
 8005fa8:	d11b      	bne.n	8005fe2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f06f 0210 	mvn.w	r2, #16
 8005fb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2208      	movs	r2, #8
 8005fb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d003      	beq.n	8005fd0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f9a1 	bl	8006310 <HAL_TIM_IC_CaptureCallback>
 8005fce:	e005      	b.n	8005fdc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f993 	bl	80062fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f9a4 	bl	8006324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d10e      	bne.n	800600e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d107      	bne.n	800600e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f06f 0201 	mvn.w	r2, #1
 8006006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f96d 	bl	80062e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006018:	2b80      	cmp	r3, #128	; 0x80
 800601a:	d10e      	bne.n	800603a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006026:	2b80      	cmp	r3, #128	; 0x80
 8006028:	d107      	bne.n	800603a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fd53 	bl	8006ae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006048:	d10e      	bne.n	8006068 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006054:	2b80      	cmp	r3, #128	; 0x80
 8006056:	d107      	bne.n	8006068 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fd46 	bl	8006af4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006072:	2b40      	cmp	r3, #64	; 0x40
 8006074:	d10e      	bne.n	8006094 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006080:	2b40      	cmp	r3, #64	; 0x40
 8006082:	d107      	bne.n	8006094 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800608c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f952 	bl	8006338 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	f003 0320 	and.w	r3, r3, #32
 800609e:	2b20      	cmp	r3, #32
 80060a0:	d10e      	bne.n	80060c0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f003 0320 	and.w	r3, r3, #32
 80060ac:	2b20      	cmp	r3, #32
 80060ae:	d107      	bne.n	80060c0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f06f 0220 	mvn.w	r2, #32
 80060b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fd06 	bl	8006acc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060c0:	bf00      	nop
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d101      	bne.n	80060e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80060de:	2302      	movs	r3, #2
 80060e0:	e0fd      	b.n	80062de <HAL_TIM_PWM_ConfigChannel+0x216>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b14      	cmp	r3, #20
 80060ee:	f200 80f0 	bhi.w	80062d2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80060f2:	a201      	add	r2, pc, #4	; (adr r2, 80060f8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80060f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f8:	0800614d 	.word	0x0800614d
 80060fc:	080062d3 	.word	0x080062d3
 8006100:	080062d3 	.word	0x080062d3
 8006104:	080062d3 	.word	0x080062d3
 8006108:	0800618d 	.word	0x0800618d
 800610c:	080062d3 	.word	0x080062d3
 8006110:	080062d3 	.word	0x080062d3
 8006114:	080062d3 	.word	0x080062d3
 8006118:	080061cf 	.word	0x080061cf
 800611c:	080062d3 	.word	0x080062d3
 8006120:	080062d3 	.word	0x080062d3
 8006124:	080062d3 	.word	0x080062d3
 8006128:	0800620f 	.word	0x0800620f
 800612c:	080062d3 	.word	0x080062d3
 8006130:	080062d3 	.word	0x080062d3
 8006134:	080062d3 	.word	0x080062d3
 8006138:	08006251 	.word	0x08006251
 800613c:	080062d3 	.word	0x080062d3
 8006140:	080062d3 	.word	0x080062d3
 8006144:	080062d3 	.word	0x080062d3
 8006148:	08006291 	.word	0x08006291
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68b9      	ldr	r1, [r7, #8]
 8006152:	4618      	mov	r0, r3
 8006154:	f000 f95e 	bl	8006414 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0208 	orr.w	r2, r2, #8
 8006166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	699a      	ldr	r2, [r3, #24]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0204 	bic.w	r2, r2, #4
 8006176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6999      	ldr	r1, [r3, #24]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	691a      	ldr	r2, [r3, #16]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	619a      	str	r2, [r3, #24]
      break;
 800618a:	e0a3      	b.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68b9      	ldr	r1, [r7, #8]
 8006192:	4618      	mov	r0, r3
 8006194:	f000 f9ba 	bl	800650c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	699a      	ldr	r2, [r3, #24]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699a      	ldr	r2, [r3, #24]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6999      	ldr	r1, [r3, #24]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	021a      	lsls	r2, r3, #8
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	619a      	str	r2, [r3, #24]
      break;
 80061cc:	e082      	b.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68b9      	ldr	r1, [r7, #8]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f000 fa13 	bl	8006600 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69da      	ldr	r2, [r3, #28]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f042 0208 	orr.w	r2, r2, #8
 80061e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69da      	ldr	r2, [r3, #28]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f022 0204 	bic.w	r2, r2, #4
 80061f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	69d9      	ldr	r1, [r3, #28]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	61da      	str	r2, [r3, #28]
      break;
 800620c:	e062      	b.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68b9      	ldr	r1, [r7, #8]
 8006214:	4618      	mov	r0, r3
 8006216:	f000 fa6b 	bl	80066f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69da      	ldr	r2, [r3, #28]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69da      	ldr	r2, [r3, #28]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	69d9      	ldr	r1, [r3, #28]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	021a      	lsls	r2, r3, #8
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	61da      	str	r2, [r3, #28]
      break;
 800624e:	e041      	b.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	4618      	mov	r0, r3
 8006258:	f000 faa8 	bl	80067ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0208 	orr.w	r2, r2, #8
 800626a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 0204 	bic.w	r2, r2, #4
 800627a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	691a      	ldr	r2, [r3, #16]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800628e:	e021      	b.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68b9      	ldr	r1, [r7, #8]
 8006296:	4618      	mov	r0, r3
 8006298:	f000 fae0 	bl	800685c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	021a      	lsls	r2, r3, #8
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	430a      	orrs	r2, r1
 80062ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80062d0:	e000      	b.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80062d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop

080062e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a2a      	ldr	r2, [pc, #168]	; (8006408 <TIM_Base_SetConfig+0xbc>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d003      	beq.n	800636c <TIM_Base_SetConfig+0x20>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800636a:	d108      	bne.n	800637e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a21      	ldr	r2, [pc, #132]	; (8006408 <TIM_Base_SetConfig+0xbc>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d00b      	beq.n	800639e <TIM_Base_SetConfig+0x52>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800638c:	d007      	beq.n	800639e <TIM_Base_SetConfig+0x52>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a1e      	ldr	r2, [pc, #120]	; (800640c <TIM_Base_SetConfig+0xc0>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d003      	beq.n	800639e <TIM_Base_SetConfig+0x52>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a1d      	ldr	r2, [pc, #116]	; (8006410 <TIM_Base_SetConfig+0xc4>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d108      	bne.n	80063b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a0c      	ldr	r2, [pc, #48]	; (8006408 <TIM_Base_SetConfig+0xbc>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d007      	beq.n	80063ec <TIM_Base_SetConfig+0xa0>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a0b      	ldr	r2, [pc, #44]	; (800640c <TIM_Base_SetConfig+0xc0>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d003      	beq.n	80063ec <TIM_Base_SetConfig+0xa0>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a0a      	ldr	r2, [pc, #40]	; (8006410 <TIM_Base_SetConfig+0xc4>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d103      	bne.n	80063f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	691a      	ldr	r2, [r3, #16]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	615a      	str	r2, [r3, #20]
}
 80063fa:	bf00      	nop
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	40012c00 	.word	0x40012c00
 800640c:	40014000 	.word	0x40014000
 8006410:	40014400 	.word	0x40014400

08006414 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	f023 0201 	bic.w	r2, r3, #1
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0303 	bic.w	r3, r3, #3
 800644e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	4313      	orrs	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f023 0302 	bic.w	r3, r3, #2
 8006460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a24      	ldr	r2, [pc, #144]	; (8006500 <TIM_OC1_SetConfig+0xec>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d007      	beq.n	8006484 <TIM_OC1_SetConfig+0x70>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a23      	ldr	r2, [pc, #140]	; (8006504 <TIM_OC1_SetConfig+0xf0>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d003      	beq.n	8006484 <TIM_OC1_SetConfig+0x70>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a22      	ldr	r2, [pc, #136]	; (8006508 <TIM_OC1_SetConfig+0xf4>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d10c      	bne.n	800649e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f023 0308 	bic.w	r3, r3, #8
 800648a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	4313      	orrs	r3, r2
 8006494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f023 0304 	bic.w	r3, r3, #4
 800649c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a17      	ldr	r2, [pc, #92]	; (8006500 <TIM_OC1_SetConfig+0xec>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d007      	beq.n	80064b6 <TIM_OC1_SetConfig+0xa2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a16      	ldr	r2, [pc, #88]	; (8006504 <TIM_OC1_SetConfig+0xf0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d003      	beq.n	80064b6 <TIM_OC1_SetConfig+0xa2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a15      	ldr	r2, [pc, #84]	; (8006508 <TIM_OC1_SetConfig+0xf4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d111      	bne.n	80064da <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	621a      	str	r2, [r3, #32]
}
 80064f4:	bf00      	nop
 80064f6:	371c      	adds	r7, #28
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	40012c00 	.word	0x40012c00
 8006504:	40014000 	.word	0x40014000
 8006508:	40014400 	.word	0x40014400

0800650c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	f023 0210 	bic.w	r2, r3, #16
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800653a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800653e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	021b      	lsls	r3, r3, #8
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	4313      	orrs	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	f023 0320 	bic.w	r3, r3, #32
 800655a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	4313      	orrs	r3, r2
 8006566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a22      	ldr	r2, [pc, #136]	; (80065f4 <TIM_OC2_SetConfig+0xe8>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d10d      	bne.n	800658c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006576:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	011b      	lsls	r3, r3, #4
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	4313      	orrs	r3, r2
 8006582:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800658a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a19      	ldr	r2, [pc, #100]	; (80065f4 <TIM_OC2_SetConfig+0xe8>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d007      	beq.n	80065a4 <TIM_OC2_SetConfig+0x98>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a18      	ldr	r2, [pc, #96]	; (80065f8 <TIM_OC2_SetConfig+0xec>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d003      	beq.n	80065a4 <TIM_OC2_SetConfig+0x98>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a17      	ldr	r2, [pc, #92]	; (80065fc <TIM_OC2_SetConfig+0xf0>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d113      	bne.n	80065cc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	4313      	orrs	r3, r2
 80065be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	621a      	str	r2, [r3, #32]
}
 80065e6:	bf00      	nop
 80065e8:	371c      	adds	r7, #28
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	40012c00 	.word	0x40012c00
 80065f8:	40014000 	.word	0x40014000
 80065fc:	40014400 	.word	0x40014400

08006600 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800662e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0303 	bic.w	r3, r3, #3
 800663a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800664c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	021b      	lsls	r3, r3, #8
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a21      	ldr	r2, [pc, #132]	; (80066e4 <TIM_OC3_SetConfig+0xe4>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d10d      	bne.n	800667e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006668:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	021b      	lsls	r3, r3, #8
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	4313      	orrs	r3, r2
 8006674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800667c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a18      	ldr	r2, [pc, #96]	; (80066e4 <TIM_OC3_SetConfig+0xe4>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d007      	beq.n	8006696 <TIM_OC3_SetConfig+0x96>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a17      	ldr	r2, [pc, #92]	; (80066e8 <TIM_OC3_SetConfig+0xe8>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d003      	beq.n	8006696 <TIM_OC3_SetConfig+0x96>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a16      	ldr	r2, [pc, #88]	; (80066ec <TIM_OC3_SetConfig+0xec>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d113      	bne.n	80066be <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800669c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	011b      	lsls	r3, r3, #4
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	621a      	str	r2, [r3, #32]
}
 80066d8:	bf00      	nop
 80066da:	371c      	adds	r7, #28
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	40012c00 	.word	0x40012c00
 80066e8:	40014000 	.word	0x40014000
 80066ec:	40014400 	.word	0x40014400

080066f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800671e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800672a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	021b      	lsls	r3, r3, #8
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	4313      	orrs	r3, r2
 8006736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800673e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	031b      	lsls	r3, r3, #12
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	4313      	orrs	r3, r2
 800674a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a14      	ldr	r2, [pc, #80]	; (80067a0 <TIM_OC4_SetConfig+0xb0>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d007      	beq.n	8006764 <TIM_OC4_SetConfig+0x74>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a13      	ldr	r2, [pc, #76]	; (80067a4 <TIM_OC4_SetConfig+0xb4>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d003      	beq.n	8006764 <TIM_OC4_SetConfig+0x74>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a12      	ldr	r2, [pc, #72]	; (80067a8 <TIM_OC4_SetConfig+0xb8>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d109      	bne.n	8006778 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800676a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	019b      	lsls	r3, r3, #6
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	4313      	orrs	r3, r2
 8006776:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	621a      	str	r2, [r3, #32]
}
 8006792:	bf00      	nop
 8006794:	371c      	adds	r7, #28
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	40012c00 	.word	0x40012c00
 80067a4:	40014000 	.word	0x40014000
 80067a8:	40014400 	.word	0x40014400

080067ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80067f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	041b      	lsls	r3, r3, #16
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a13      	ldr	r2, [pc, #76]	; (8006850 <TIM_OC5_SetConfig+0xa4>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d007      	beq.n	8006816 <TIM_OC5_SetConfig+0x6a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a12      	ldr	r2, [pc, #72]	; (8006854 <TIM_OC5_SetConfig+0xa8>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d003      	beq.n	8006816 <TIM_OC5_SetConfig+0x6a>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a11      	ldr	r2, [pc, #68]	; (8006858 <TIM_OC5_SetConfig+0xac>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d109      	bne.n	800682a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800681c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	021b      	lsls	r3, r3, #8
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	4313      	orrs	r3, r2
 8006828:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	621a      	str	r2, [r3, #32]
}
 8006844:	bf00      	nop
 8006846:	371c      	adds	r7, #28
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	40012c00 	.word	0x40012c00
 8006854:	40014000 	.word	0x40014000
 8006858:	40014400 	.word	0x40014400

0800685c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800685c:	b480      	push	{r7}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800688a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800688e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	021b      	lsls	r3, r3, #8
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	4313      	orrs	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	051b      	lsls	r3, r3, #20
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a14      	ldr	r2, [pc, #80]	; (8006904 <TIM_OC6_SetConfig+0xa8>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d007      	beq.n	80068c8 <TIM_OC6_SetConfig+0x6c>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a13      	ldr	r2, [pc, #76]	; (8006908 <TIM_OC6_SetConfig+0xac>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d003      	beq.n	80068c8 <TIM_OC6_SetConfig+0x6c>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a12      	ldr	r2, [pc, #72]	; (800690c <TIM_OC6_SetConfig+0xb0>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d109      	bne.n	80068dc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	029b      	lsls	r3, r3, #10
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	4313      	orrs	r3, r2
 80068da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	621a      	str	r2, [r3, #32]
}
 80068f6:	bf00      	nop
 80068f8:	371c      	adds	r7, #28
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	40012c00 	.word	0x40012c00
 8006908:	40014000 	.word	0x40014000
 800690c:	40014400 	.word	0x40014400

08006910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006920:	2b01      	cmp	r3, #1
 8006922:	d101      	bne.n	8006928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006924:	2302      	movs	r3, #2
 8006926:	e04f      	b.n	80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a21      	ldr	r2, [pc, #132]	; (80069d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d108      	bne.n	8006964 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006958:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	4313      	orrs	r3, r2
 8006962:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	4313      	orrs	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a14      	ldr	r2, [pc, #80]	; (80069d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d009      	beq.n	800699c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006990:	d004      	beq.n	800699c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a10      	ldr	r2, [pc, #64]	; (80069d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d10c      	bne.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	40012c00 	.word	0x40012c00
 80069d8:	40014000 	.word	0x40014000

080069dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d101      	bne.n	80069f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80069f4:	2302      	movs	r3, #2
 80069f6:	e060      	b.n	8006aba <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	041b      	lsls	r3, r3, #16
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a14      	ldr	r2, [pc, #80]	; (8006ac8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d115      	bne.n	8006aa8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	051b      	lsls	r3, r3, #20
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	40012c00 	.word	0x40012c00

08006acc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e040      	b.n	8006b9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d106      	bne.n	8006b30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7fb fb5c 	bl	80021e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2224      	movs	r2, #36	; 0x24
 8006b34:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0201 	bic.w	r2, r2, #1
 8006b44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f8c0 	bl	8006ccc <UART_SetConfig>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d101      	bne.n	8006b56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e022      	b.n	8006b9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fae2 	bl	8007128 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689a      	ldr	r2, [r3, #8]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0201 	orr.w	r2, r2, #1
 8006b92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fb69 	bl	800726c <UART_CheckIdleState>
 8006b9a:	4603      	mov	r3, r0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b08a      	sub	sp, #40	; 0x28
 8006ba8:	af02      	add	r7, sp, #8
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	603b      	str	r3, [r7, #0]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bb8:	2b20      	cmp	r3, #32
 8006bba:	f040 8082 	bne.w	8006cc2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <HAL_UART_Transmit+0x26>
 8006bc4:	88fb      	ldrh	r3, [r7, #6]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e07a      	b.n	8006cc4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d101      	bne.n	8006bdc <HAL_UART_Transmit+0x38>
 8006bd8:	2302      	movs	r3, #2
 8006bda:	e073      	b.n	8006cc4 <HAL_UART_Transmit+0x120>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2221      	movs	r2, #33	; 0x21
 8006bf0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bf2:	f7fb fbf5 	bl	80023e0 <HAL_GetTick>
 8006bf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	88fa      	ldrh	r2, [r7, #6]
 8006bfc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	88fa      	ldrh	r2, [r7, #6]
 8006c04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c10:	d108      	bne.n	8006c24 <HAL_UART_Transmit+0x80>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d104      	bne.n	8006c24 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	61bb      	str	r3, [r7, #24]
 8006c22:	e003      	b.n	8006c2c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006c34:	e02d      	b.n	8006c92 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	2180      	movs	r1, #128	; 0x80
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 fb5c 	bl	80072fe <UART_WaitOnFlagUntilTimeout>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d001      	beq.n	8006c50 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e039      	b.n	8006cc4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10b      	bne.n	8006c6e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	881a      	ldrh	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c62:	b292      	uxth	r2, r2
 8006c64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	3302      	adds	r3, #2
 8006c6a:	61bb      	str	r3, [r7, #24]
 8006c6c:	e008      	b.n	8006c80 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	781a      	ldrb	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	b292      	uxth	r2, r2
 8006c78:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1cb      	bne.n	8006c36 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2140      	movs	r1, #64	; 0x40
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 fb28 	bl	80072fe <UART_WaitOnFlagUntilTimeout>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e005      	b.n	8006cc4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e000      	b.n	8006cc4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006cc2:	2302      	movs	r3, #2
  }
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3720      	adds	r7, #32
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cd0:	b08a      	sub	sp, #40	; 0x28
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	431a      	orrs	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	69db      	ldr	r3, [r3, #28]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	4bb4      	ldr	r3, [pc, #720]	; (8006fcc <UART_SetConfig+0x300>)
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	6812      	ldr	r2, [r2, #0]
 8006d02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d04:	430b      	orrs	r3, r1
 8006d06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	68da      	ldr	r2, [r3, #12]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4aa9      	ldr	r2, [pc, #676]	; (8006fd0 <UART_SetConfig+0x304>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d004      	beq.n	8006d38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d34:	4313      	orrs	r3, r2
 8006d36:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4aa0      	ldr	r2, [pc, #640]	; (8006fd4 <UART_SetConfig+0x308>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d126      	bne.n	8006da4 <UART_SetConfig+0xd8>
 8006d56:	4ba0      	ldr	r3, [pc, #640]	; (8006fd8 <UART_SetConfig+0x30c>)
 8006d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d5c:	f003 0303 	and.w	r3, r3, #3
 8006d60:	2b03      	cmp	r3, #3
 8006d62:	d81b      	bhi.n	8006d9c <UART_SetConfig+0xd0>
 8006d64:	a201      	add	r2, pc, #4	; (adr r2, 8006d6c <UART_SetConfig+0xa0>)
 8006d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6a:	bf00      	nop
 8006d6c:	08006d7d 	.word	0x08006d7d
 8006d70:	08006d8d 	.word	0x08006d8d
 8006d74:	08006d85 	.word	0x08006d85
 8006d78:	08006d95 	.word	0x08006d95
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d82:	e080      	b.n	8006e86 <UART_SetConfig+0x1ba>
 8006d84:	2302      	movs	r3, #2
 8006d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d8a:	e07c      	b.n	8006e86 <UART_SetConfig+0x1ba>
 8006d8c:	2304      	movs	r3, #4
 8006d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d92:	e078      	b.n	8006e86 <UART_SetConfig+0x1ba>
 8006d94:	2308      	movs	r3, #8
 8006d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d9a:	e074      	b.n	8006e86 <UART_SetConfig+0x1ba>
 8006d9c:	2310      	movs	r3, #16
 8006d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006da2:	e070      	b.n	8006e86 <UART_SetConfig+0x1ba>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a8c      	ldr	r2, [pc, #560]	; (8006fdc <UART_SetConfig+0x310>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d138      	bne.n	8006e20 <UART_SetConfig+0x154>
 8006dae:	4b8a      	ldr	r3, [pc, #552]	; (8006fd8 <UART_SetConfig+0x30c>)
 8006db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db4:	f003 030c 	and.w	r3, r3, #12
 8006db8:	2b0c      	cmp	r3, #12
 8006dba:	d82d      	bhi.n	8006e18 <UART_SetConfig+0x14c>
 8006dbc:	a201      	add	r2, pc, #4	; (adr r2, 8006dc4 <UART_SetConfig+0xf8>)
 8006dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc2:	bf00      	nop
 8006dc4:	08006df9 	.word	0x08006df9
 8006dc8:	08006e19 	.word	0x08006e19
 8006dcc:	08006e19 	.word	0x08006e19
 8006dd0:	08006e19 	.word	0x08006e19
 8006dd4:	08006e09 	.word	0x08006e09
 8006dd8:	08006e19 	.word	0x08006e19
 8006ddc:	08006e19 	.word	0x08006e19
 8006de0:	08006e19 	.word	0x08006e19
 8006de4:	08006e01 	.word	0x08006e01
 8006de8:	08006e19 	.word	0x08006e19
 8006dec:	08006e19 	.word	0x08006e19
 8006df0:	08006e19 	.word	0x08006e19
 8006df4:	08006e11 	.word	0x08006e11
 8006df8:	2300      	movs	r3, #0
 8006dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dfe:	e042      	b.n	8006e86 <UART_SetConfig+0x1ba>
 8006e00:	2302      	movs	r3, #2
 8006e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e06:	e03e      	b.n	8006e86 <UART_SetConfig+0x1ba>
 8006e08:	2304      	movs	r3, #4
 8006e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e0e:	e03a      	b.n	8006e86 <UART_SetConfig+0x1ba>
 8006e10:	2308      	movs	r3, #8
 8006e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e16:	e036      	b.n	8006e86 <UART_SetConfig+0x1ba>
 8006e18:	2310      	movs	r3, #16
 8006e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e1e:	e032      	b.n	8006e86 <UART_SetConfig+0x1ba>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a6a      	ldr	r2, [pc, #424]	; (8006fd0 <UART_SetConfig+0x304>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d12a      	bne.n	8006e80 <UART_SetConfig+0x1b4>
 8006e2a:	4b6b      	ldr	r3, [pc, #428]	; (8006fd8 <UART_SetConfig+0x30c>)
 8006e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e38:	d01a      	beq.n	8006e70 <UART_SetConfig+0x1a4>
 8006e3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e3e:	d81b      	bhi.n	8006e78 <UART_SetConfig+0x1ac>
 8006e40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e44:	d00c      	beq.n	8006e60 <UART_SetConfig+0x194>
 8006e46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e4a:	d815      	bhi.n	8006e78 <UART_SetConfig+0x1ac>
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d003      	beq.n	8006e58 <UART_SetConfig+0x18c>
 8006e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e54:	d008      	beq.n	8006e68 <UART_SetConfig+0x19c>
 8006e56:	e00f      	b.n	8006e78 <UART_SetConfig+0x1ac>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e5e:	e012      	b.n	8006e86 <UART_SetConfig+0x1ba>
 8006e60:	2302      	movs	r3, #2
 8006e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e66:	e00e      	b.n	8006e86 <UART_SetConfig+0x1ba>
 8006e68:	2304      	movs	r3, #4
 8006e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e6e:	e00a      	b.n	8006e86 <UART_SetConfig+0x1ba>
 8006e70:	2308      	movs	r3, #8
 8006e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e76:	e006      	b.n	8006e86 <UART_SetConfig+0x1ba>
 8006e78:	2310      	movs	r3, #16
 8006e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e7e:	e002      	b.n	8006e86 <UART_SetConfig+0x1ba>
 8006e80:	2310      	movs	r3, #16
 8006e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a51      	ldr	r2, [pc, #324]	; (8006fd0 <UART_SetConfig+0x304>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d17a      	bne.n	8006f86 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e94:	2b08      	cmp	r3, #8
 8006e96:	d824      	bhi.n	8006ee2 <UART_SetConfig+0x216>
 8006e98:	a201      	add	r2, pc, #4	; (adr r2, 8006ea0 <UART_SetConfig+0x1d4>)
 8006e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9e:	bf00      	nop
 8006ea0:	08006ec5 	.word	0x08006ec5
 8006ea4:	08006ee3 	.word	0x08006ee3
 8006ea8:	08006ecd 	.word	0x08006ecd
 8006eac:	08006ee3 	.word	0x08006ee3
 8006eb0:	08006ed3 	.word	0x08006ed3
 8006eb4:	08006ee3 	.word	0x08006ee3
 8006eb8:	08006ee3 	.word	0x08006ee3
 8006ebc:	08006ee3 	.word	0x08006ee3
 8006ec0:	08006edb 	.word	0x08006edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ec4:	f7fe fb6a 	bl	800559c <HAL_RCC_GetPCLK1Freq>
 8006ec8:	61f8      	str	r0, [r7, #28]
        break;
 8006eca:	e010      	b.n	8006eee <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ecc:	4b44      	ldr	r3, [pc, #272]	; (8006fe0 <UART_SetConfig+0x314>)
 8006ece:	61fb      	str	r3, [r7, #28]
        break;
 8006ed0:	e00d      	b.n	8006eee <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ed2:	f7fe facb 	bl	800546c <HAL_RCC_GetSysClockFreq>
 8006ed6:	61f8      	str	r0, [r7, #28]
        break;
 8006ed8:	e009      	b.n	8006eee <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ede:	61fb      	str	r3, [r7, #28]
        break;
 8006ee0:	e005      	b.n	8006eee <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006eec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 8109 	beq.w	8007108 <UART_SetConfig+0x43c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	4613      	mov	r3, r2
 8006efc:	005b      	lsls	r3, r3, #1
 8006efe:	4413      	add	r3, r2
 8006f00:	69fa      	ldr	r2, [r7, #28]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d305      	bcc.n	8006f12 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f0c:	69fa      	ldr	r2, [r7, #28]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d903      	bls.n	8006f1a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f18:	e0f6      	b.n	8007108 <UART_SetConfig+0x43c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	461c      	mov	r4, r3
 8006f20:	4615      	mov	r5, r2
 8006f22:	f04f 0200 	mov.w	r2, #0
 8006f26:	f04f 0300 	mov.w	r3, #0
 8006f2a:	022b      	lsls	r3, r5, #8
 8006f2c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006f30:	0222      	lsls	r2, r4, #8
 8006f32:	68f9      	ldr	r1, [r7, #12]
 8006f34:	6849      	ldr	r1, [r1, #4]
 8006f36:	0849      	lsrs	r1, r1, #1
 8006f38:	2000      	movs	r0, #0
 8006f3a:	4688      	mov	r8, r1
 8006f3c:	4681      	mov	r9, r0
 8006f3e:	eb12 0a08 	adds.w	sl, r2, r8
 8006f42:	eb43 0b09 	adc.w	fp, r3, r9
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	603b      	str	r3, [r7, #0]
 8006f4e:	607a      	str	r2, [r7, #4]
 8006f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f54:	4650      	mov	r0, sl
 8006f56:	4659      	mov	r1, fp
 8006f58:	f7f9 fe76 	bl	8000c48 <__aeabi_uldivmod>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	4613      	mov	r3, r2
 8006f62:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f6a:	d308      	bcc.n	8006f7e <UART_SetConfig+0x2b2>
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f72:	d204      	bcs.n	8006f7e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	60da      	str	r2, [r3, #12]
 8006f7c:	e0c4      	b.n	8007108 <UART_SetConfig+0x43c>
        }
        else
        {
          ret = HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f84:	e0c0      	b.n	8007108 <UART_SetConfig+0x43c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f8e:	d16b      	bne.n	8007068 <UART_SetConfig+0x39c>
  {
    switch (clocksource)
 8006f90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f94:	2b08      	cmp	r3, #8
 8006f96:	d834      	bhi.n	8007002 <UART_SetConfig+0x336>
 8006f98:	a201      	add	r2, pc, #4	; (adr r2, 8006fa0 <UART_SetConfig+0x2d4>)
 8006f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9e:	bf00      	nop
 8006fa0:	08006fc5 	.word	0x08006fc5
 8006fa4:	08006fe5 	.word	0x08006fe5
 8006fa8:	08006fed 	.word	0x08006fed
 8006fac:	08007003 	.word	0x08007003
 8006fb0:	08006ff3 	.word	0x08006ff3
 8006fb4:	08007003 	.word	0x08007003
 8006fb8:	08007003 	.word	0x08007003
 8006fbc:	08007003 	.word	0x08007003
 8006fc0:	08006ffb 	.word	0x08006ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fc4:	f7fe faea 	bl	800559c <HAL_RCC_GetPCLK1Freq>
 8006fc8:	61f8      	str	r0, [r7, #28]
        break;
 8006fca:	e020      	b.n	800700e <UART_SetConfig+0x342>
 8006fcc:	efff69f3 	.word	0xefff69f3
 8006fd0:	40008000 	.word	0x40008000
 8006fd4:	40013800 	.word	0x40013800
 8006fd8:	40021000 	.word	0x40021000
 8006fdc:	40004400 	.word	0x40004400
 8006fe0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fe4:	f7fe faf0 	bl	80055c8 <HAL_RCC_GetPCLK2Freq>
 8006fe8:	61f8      	str	r0, [r7, #28]
        break;
 8006fea:	e010      	b.n	800700e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fec:	4b4d      	ldr	r3, [pc, #308]	; (8007124 <UART_SetConfig+0x458>)
 8006fee:	61fb      	str	r3, [r7, #28]
        break;
 8006ff0:	e00d      	b.n	800700e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ff2:	f7fe fa3b 	bl	800546c <HAL_RCC_GetSysClockFreq>
 8006ff6:	61f8      	str	r0, [r7, #28]
        break;
 8006ff8:	e009      	b.n	800700e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ffe:	61fb      	str	r3, [r7, #28]
        break;
 8007000:	e005      	b.n	800700e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007002:	2300      	movs	r3, #0
 8007004:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800700c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d079      	beq.n	8007108 <UART_SetConfig+0x43c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	005a      	lsls	r2, r3, #1
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	085b      	lsrs	r3, r3, #1
 800701e:	441a      	add	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	fbb2 f3f3 	udiv	r3, r2, r3
 8007028:	b29b      	uxth	r3, r3
 800702a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	2b0f      	cmp	r3, #15
 8007030:	d916      	bls.n	8007060 <UART_SetConfig+0x394>
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007038:	d212      	bcs.n	8007060 <UART_SetConfig+0x394>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	b29b      	uxth	r3, r3
 800703e:	f023 030f 	bic.w	r3, r3, #15
 8007042:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	085b      	lsrs	r3, r3, #1
 8007048:	b29b      	uxth	r3, r3
 800704a:	f003 0307 	and.w	r3, r3, #7
 800704e:	b29a      	uxth	r2, r3
 8007050:	8afb      	ldrh	r3, [r7, #22]
 8007052:	4313      	orrs	r3, r2
 8007054:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	8afa      	ldrh	r2, [r7, #22]
 800705c:	60da      	str	r2, [r3, #12]
 800705e:	e053      	b.n	8007108 <UART_SetConfig+0x43c>
      }
      else
      {
        ret = HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007066:	e04f      	b.n	8007108 <UART_SetConfig+0x43c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007068:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800706c:	2b08      	cmp	r3, #8
 800706e:	d828      	bhi.n	80070c2 <UART_SetConfig+0x3f6>
 8007070:	a201      	add	r2, pc, #4	; (adr r2, 8007078 <UART_SetConfig+0x3ac>)
 8007072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007076:	bf00      	nop
 8007078:	0800709d 	.word	0x0800709d
 800707c:	080070a5 	.word	0x080070a5
 8007080:	080070ad 	.word	0x080070ad
 8007084:	080070c3 	.word	0x080070c3
 8007088:	080070b3 	.word	0x080070b3
 800708c:	080070c3 	.word	0x080070c3
 8007090:	080070c3 	.word	0x080070c3
 8007094:	080070c3 	.word	0x080070c3
 8007098:	080070bb 	.word	0x080070bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800709c:	f7fe fa7e 	bl	800559c <HAL_RCC_GetPCLK1Freq>
 80070a0:	61f8      	str	r0, [r7, #28]
        break;
 80070a2:	e014      	b.n	80070ce <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070a4:	f7fe fa90 	bl	80055c8 <HAL_RCC_GetPCLK2Freq>
 80070a8:	61f8      	str	r0, [r7, #28]
        break;
 80070aa:	e010      	b.n	80070ce <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070ac:	4b1d      	ldr	r3, [pc, #116]	; (8007124 <UART_SetConfig+0x458>)
 80070ae:	61fb      	str	r3, [r7, #28]
        break;
 80070b0:	e00d      	b.n	80070ce <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070b2:	f7fe f9db 	bl	800546c <HAL_RCC_GetSysClockFreq>
 80070b6:	61f8      	str	r0, [r7, #28]
        break;
 80070b8:	e009      	b.n	80070ce <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070be:	61fb      	str	r3, [r7, #28]
        break;
 80070c0:	e005      	b.n	80070ce <UART_SetConfig+0x402>
      default:
        pclk = 0U;
 80070c2:	2300      	movs	r3, #0
 80070c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80070cc:	bf00      	nop
    }

    if (pclk != 0U)
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d019      	beq.n	8007108 <UART_SetConfig+0x43c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	085a      	lsrs	r2, r3, #1
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	441a      	add	r2, r3
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	2b0f      	cmp	r3, #15
 80070ee:	d908      	bls.n	8007102 <UART_SetConfig+0x436>
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070f6:	d204      	bcs.n	8007102 <UART_SetConfig+0x436>
      {
        huart->Instance->BRR = usartdiv;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	69ba      	ldr	r2, [r7, #24]
 80070fe:	60da      	str	r2, [r3, #12]
 8007100:	e002      	b.n	8007108 <UART_SetConfig+0x43c>
      }
      else
      {
        ret = HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007114:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007118:	4618      	mov	r0, r3
 800711a:	3728      	adds	r7, #40	; 0x28
 800711c:	46bd      	mov	sp, r7
 800711e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007122:	bf00      	nop
 8007124:	00f42400 	.word	0x00f42400

08007128 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007134:	f003 0301 	and.w	r3, r3, #1
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00a      	beq.n	8007152 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007156:	f003 0302 	and.w	r3, r3, #2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00a      	beq.n	8007174 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	430a      	orrs	r2, r1
 8007172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	f003 0304 	and.w	r3, r3, #4
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00a      	beq.n	8007196 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719a:	f003 0308 	and.w	r3, r3, #8
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00a      	beq.n	80071b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	430a      	orrs	r2, r1
 80071b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	f003 0310 	and.w	r3, r3, #16
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00a      	beq.n	80071da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	f003 0320 	and.w	r3, r3, #32
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00a      	beq.n	80071fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007204:	2b00      	cmp	r3, #0
 8007206:	d01a      	beq.n	800723e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	430a      	orrs	r2, r1
 800721c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007226:	d10a      	bne.n	800723e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	430a      	orrs	r2, r1
 800723c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00a      	beq.n	8007260 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	430a      	orrs	r2, r1
 800725e:	605a      	str	r2, [r3, #4]
  }
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af02      	add	r7, sp, #8
 8007272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800727c:	f7fb f8b0 	bl	80023e0 <HAL_GetTick>
 8007280:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0308 	and.w	r3, r3, #8
 800728c:	2b08      	cmp	r3, #8
 800728e:	d10e      	bne.n	80072ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007290:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f82d 	bl	80072fe <UART_WaitOnFlagUntilTimeout>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d001      	beq.n	80072ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e023      	b.n	80072f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0304 	and.w	r3, r3, #4
 80072b8:	2b04      	cmp	r3, #4
 80072ba:	d10e      	bne.n	80072da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f817 	bl	80072fe <UART_WaitOnFlagUntilTimeout>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d001      	beq.n	80072da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e00d      	b.n	80072f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2220      	movs	r2, #32
 80072de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2220      	movs	r2, #32
 80072e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b084      	sub	sp, #16
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	603b      	str	r3, [r7, #0]
 800730a:	4613      	mov	r3, r2
 800730c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800730e:	e05e      	b.n	80073ce <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007316:	d05a      	beq.n	80073ce <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007318:	f7fb f862 	bl	80023e0 <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	429a      	cmp	r2, r3
 8007326:	d302      	bcc.n	800732e <UART_WaitOnFlagUntilTimeout+0x30>
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d11b      	bne.n	8007366 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800733c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	689a      	ldr	r2, [r3, #8]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f022 0201 	bic.w	r2, r2, #1
 800734c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2220      	movs	r2, #32
 8007352:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2220      	movs	r2, #32
 8007358:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e043      	b.n	80073ee <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0304 	and.w	r3, r3, #4
 8007370:	2b00      	cmp	r3, #0
 8007372:	d02c      	beq.n	80073ce <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800737e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007382:	d124      	bne.n	80073ce <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800738c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800739c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	689a      	ldr	r2, [r3, #8]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f022 0201 	bic.w	r2, r2, #1
 80073ac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2220      	movs	r2, #32
 80073b2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2220      	movs	r2, #32
 80073b8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2220      	movs	r2, #32
 80073be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e00f      	b.n	80073ee <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	69da      	ldr	r2, [r3, #28]
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	4013      	ands	r3, r2
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	429a      	cmp	r2, r3
 80073dc:	bf0c      	ite	eq
 80073de:	2301      	moveq	r3, #1
 80073e0:	2300      	movne	r3, #0
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	461a      	mov	r2, r3
 80073e6:	79fb      	ldrb	r3, [r7, #7]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d091      	beq.n	8007310 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
	...

080073f8 <__errno>:
 80073f8:	4b01      	ldr	r3, [pc, #4]	; (8007400 <__errno+0x8>)
 80073fa:	6818      	ldr	r0, [r3, #0]
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	2000000c 	.word	0x2000000c

08007404 <__libc_init_array>:
 8007404:	b570      	push	{r4, r5, r6, lr}
 8007406:	4d0d      	ldr	r5, [pc, #52]	; (800743c <__libc_init_array+0x38>)
 8007408:	4c0d      	ldr	r4, [pc, #52]	; (8007440 <__libc_init_array+0x3c>)
 800740a:	1b64      	subs	r4, r4, r5
 800740c:	10a4      	asrs	r4, r4, #2
 800740e:	2600      	movs	r6, #0
 8007410:	42a6      	cmp	r6, r4
 8007412:	d109      	bne.n	8007428 <__libc_init_array+0x24>
 8007414:	4d0b      	ldr	r5, [pc, #44]	; (8007444 <__libc_init_array+0x40>)
 8007416:	4c0c      	ldr	r4, [pc, #48]	; (8007448 <__libc_init_array+0x44>)
 8007418:	f002 fd4e 	bl	8009eb8 <_init>
 800741c:	1b64      	subs	r4, r4, r5
 800741e:	10a4      	asrs	r4, r4, #2
 8007420:	2600      	movs	r6, #0
 8007422:	42a6      	cmp	r6, r4
 8007424:	d105      	bne.n	8007432 <__libc_init_array+0x2e>
 8007426:	bd70      	pop	{r4, r5, r6, pc}
 8007428:	f855 3b04 	ldr.w	r3, [r5], #4
 800742c:	4798      	blx	r3
 800742e:	3601      	adds	r6, #1
 8007430:	e7ee      	b.n	8007410 <__libc_init_array+0xc>
 8007432:	f855 3b04 	ldr.w	r3, [r5], #4
 8007436:	4798      	blx	r3
 8007438:	3601      	adds	r6, #1
 800743a:	e7f2      	b.n	8007422 <__libc_init_array+0x1e>
 800743c:	0800a34c 	.word	0x0800a34c
 8007440:	0800a34c 	.word	0x0800a34c
 8007444:	0800a34c 	.word	0x0800a34c
 8007448:	0800a350 	.word	0x0800a350

0800744c <memset>:
 800744c:	4402      	add	r2, r0
 800744e:	4603      	mov	r3, r0
 8007450:	4293      	cmp	r3, r2
 8007452:	d100      	bne.n	8007456 <memset+0xa>
 8007454:	4770      	bx	lr
 8007456:	f803 1b01 	strb.w	r1, [r3], #1
 800745a:	e7f9      	b.n	8007450 <memset+0x4>

0800745c <__cvt>:
 800745c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007460:	ec55 4b10 	vmov	r4, r5, d0
 8007464:	2d00      	cmp	r5, #0
 8007466:	460e      	mov	r6, r1
 8007468:	4619      	mov	r1, r3
 800746a:	462b      	mov	r3, r5
 800746c:	bfbb      	ittet	lt
 800746e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007472:	461d      	movlt	r5, r3
 8007474:	2300      	movge	r3, #0
 8007476:	232d      	movlt	r3, #45	; 0x2d
 8007478:	700b      	strb	r3, [r1, #0]
 800747a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800747c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007480:	4691      	mov	r9, r2
 8007482:	f023 0820 	bic.w	r8, r3, #32
 8007486:	bfbc      	itt	lt
 8007488:	4622      	movlt	r2, r4
 800748a:	4614      	movlt	r4, r2
 800748c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007490:	d005      	beq.n	800749e <__cvt+0x42>
 8007492:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007496:	d100      	bne.n	800749a <__cvt+0x3e>
 8007498:	3601      	adds	r6, #1
 800749a:	2102      	movs	r1, #2
 800749c:	e000      	b.n	80074a0 <__cvt+0x44>
 800749e:	2103      	movs	r1, #3
 80074a0:	ab03      	add	r3, sp, #12
 80074a2:	9301      	str	r3, [sp, #4]
 80074a4:	ab02      	add	r3, sp, #8
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	ec45 4b10 	vmov	d0, r4, r5
 80074ac:	4653      	mov	r3, sl
 80074ae:	4632      	mov	r2, r6
 80074b0:	f000 fce2 	bl	8007e78 <_dtoa_r>
 80074b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80074b8:	4607      	mov	r7, r0
 80074ba:	d102      	bne.n	80074c2 <__cvt+0x66>
 80074bc:	f019 0f01 	tst.w	r9, #1
 80074c0:	d022      	beq.n	8007508 <__cvt+0xac>
 80074c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074c6:	eb07 0906 	add.w	r9, r7, r6
 80074ca:	d110      	bne.n	80074ee <__cvt+0x92>
 80074cc:	783b      	ldrb	r3, [r7, #0]
 80074ce:	2b30      	cmp	r3, #48	; 0x30
 80074d0:	d10a      	bne.n	80074e8 <__cvt+0x8c>
 80074d2:	2200      	movs	r2, #0
 80074d4:	2300      	movs	r3, #0
 80074d6:	4620      	mov	r0, r4
 80074d8:	4629      	mov	r1, r5
 80074da:	f7f9 faf5 	bl	8000ac8 <__aeabi_dcmpeq>
 80074de:	b918      	cbnz	r0, 80074e8 <__cvt+0x8c>
 80074e0:	f1c6 0601 	rsb	r6, r6, #1
 80074e4:	f8ca 6000 	str.w	r6, [sl]
 80074e8:	f8da 3000 	ldr.w	r3, [sl]
 80074ec:	4499      	add	r9, r3
 80074ee:	2200      	movs	r2, #0
 80074f0:	2300      	movs	r3, #0
 80074f2:	4620      	mov	r0, r4
 80074f4:	4629      	mov	r1, r5
 80074f6:	f7f9 fae7 	bl	8000ac8 <__aeabi_dcmpeq>
 80074fa:	b108      	cbz	r0, 8007500 <__cvt+0xa4>
 80074fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007500:	2230      	movs	r2, #48	; 0x30
 8007502:	9b03      	ldr	r3, [sp, #12]
 8007504:	454b      	cmp	r3, r9
 8007506:	d307      	bcc.n	8007518 <__cvt+0xbc>
 8007508:	9b03      	ldr	r3, [sp, #12]
 800750a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800750c:	1bdb      	subs	r3, r3, r7
 800750e:	4638      	mov	r0, r7
 8007510:	6013      	str	r3, [r2, #0]
 8007512:	b004      	add	sp, #16
 8007514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007518:	1c59      	adds	r1, r3, #1
 800751a:	9103      	str	r1, [sp, #12]
 800751c:	701a      	strb	r2, [r3, #0]
 800751e:	e7f0      	b.n	8007502 <__cvt+0xa6>

08007520 <__exponent>:
 8007520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007522:	4603      	mov	r3, r0
 8007524:	2900      	cmp	r1, #0
 8007526:	bfb8      	it	lt
 8007528:	4249      	neglt	r1, r1
 800752a:	f803 2b02 	strb.w	r2, [r3], #2
 800752e:	bfb4      	ite	lt
 8007530:	222d      	movlt	r2, #45	; 0x2d
 8007532:	222b      	movge	r2, #43	; 0x2b
 8007534:	2909      	cmp	r1, #9
 8007536:	7042      	strb	r2, [r0, #1]
 8007538:	dd2a      	ble.n	8007590 <__exponent+0x70>
 800753a:	f10d 0407 	add.w	r4, sp, #7
 800753e:	46a4      	mov	ip, r4
 8007540:	270a      	movs	r7, #10
 8007542:	46a6      	mov	lr, r4
 8007544:	460a      	mov	r2, r1
 8007546:	fb91 f6f7 	sdiv	r6, r1, r7
 800754a:	fb07 1516 	mls	r5, r7, r6, r1
 800754e:	3530      	adds	r5, #48	; 0x30
 8007550:	2a63      	cmp	r2, #99	; 0x63
 8007552:	f104 34ff 	add.w	r4, r4, #4294967295
 8007556:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800755a:	4631      	mov	r1, r6
 800755c:	dcf1      	bgt.n	8007542 <__exponent+0x22>
 800755e:	3130      	adds	r1, #48	; 0x30
 8007560:	f1ae 0502 	sub.w	r5, lr, #2
 8007564:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007568:	1c44      	adds	r4, r0, #1
 800756a:	4629      	mov	r1, r5
 800756c:	4561      	cmp	r1, ip
 800756e:	d30a      	bcc.n	8007586 <__exponent+0x66>
 8007570:	f10d 0209 	add.w	r2, sp, #9
 8007574:	eba2 020e 	sub.w	r2, r2, lr
 8007578:	4565      	cmp	r5, ip
 800757a:	bf88      	it	hi
 800757c:	2200      	movhi	r2, #0
 800757e:	4413      	add	r3, r2
 8007580:	1a18      	subs	r0, r3, r0
 8007582:	b003      	add	sp, #12
 8007584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007586:	f811 2b01 	ldrb.w	r2, [r1], #1
 800758a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800758e:	e7ed      	b.n	800756c <__exponent+0x4c>
 8007590:	2330      	movs	r3, #48	; 0x30
 8007592:	3130      	adds	r1, #48	; 0x30
 8007594:	7083      	strb	r3, [r0, #2]
 8007596:	70c1      	strb	r1, [r0, #3]
 8007598:	1d03      	adds	r3, r0, #4
 800759a:	e7f1      	b.n	8007580 <__exponent+0x60>

0800759c <_printf_float>:
 800759c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a0:	ed2d 8b02 	vpush	{d8}
 80075a4:	b08d      	sub	sp, #52	; 0x34
 80075a6:	460c      	mov	r4, r1
 80075a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80075ac:	4616      	mov	r6, r2
 80075ae:	461f      	mov	r7, r3
 80075b0:	4605      	mov	r5, r0
 80075b2:	f001 fb45 	bl	8008c40 <_localeconv_r>
 80075b6:	f8d0 a000 	ldr.w	sl, [r0]
 80075ba:	4650      	mov	r0, sl
 80075bc:	f7f8 fe08 	bl	80001d0 <strlen>
 80075c0:	2300      	movs	r3, #0
 80075c2:	930a      	str	r3, [sp, #40]	; 0x28
 80075c4:	6823      	ldr	r3, [r4, #0]
 80075c6:	9305      	str	r3, [sp, #20]
 80075c8:	f8d8 3000 	ldr.w	r3, [r8]
 80075cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80075d0:	3307      	adds	r3, #7
 80075d2:	f023 0307 	bic.w	r3, r3, #7
 80075d6:	f103 0208 	add.w	r2, r3, #8
 80075da:	f8c8 2000 	str.w	r2, [r8]
 80075de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80075e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80075ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80075ee:	9307      	str	r3, [sp, #28]
 80075f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80075f4:	ee08 0a10 	vmov	s16, r0
 80075f8:	4b9f      	ldr	r3, [pc, #636]	; (8007878 <_printf_float+0x2dc>)
 80075fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007602:	f7f9 fa93 	bl	8000b2c <__aeabi_dcmpun>
 8007606:	bb88      	cbnz	r0, 800766c <_printf_float+0xd0>
 8007608:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800760c:	4b9a      	ldr	r3, [pc, #616]	; (8007878 <_printf_float+0x2dc>)
 800760e:	f04f 32ff 	mov.w	r2, #4294967295
 8007612:	f7f9 fa6d 	bl	8000af0 <__aeabi_dcmple>
 8007616:	bb48      	cbnz	r0, 800766c <_printf_float+0xd0>
 8007618:	2200      	movs	r2, #0
 800761a:	2300      	movs	r3, #0
 800761c:	4640      	mov	r0, r8
 800761e:	4649      	mov	r1, r9
 8007620:	f7f9 fa5c 	bl	8000adc <__aeabi_dcmplt>
 8007624:	b110      	cbz	r0, 800762c <_printf_float+0x90>
 8007626:	232d      	movs	r3, #45	; 0x2d
 8007628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800762c:	4b93      	ldr	r3, [pc, #588]	; (800787c <_printf_float+0x2e0>)
 800762e:	4894      	ldr	r0, [pc, #592]	; (8007880 <_printf_float+0x2e4>)
 8007630:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007634:	bf94      	ite	ls
 8007636:	4698      	movls	r8, r3
 8007638:	4680      	movhi	r8, r0
 800763a:	2303      	movs	r3, #3
 800763c:	6123      	str	r3, [r4, #16]
 800763e:	9b05      	ldr	r3, [sp, #20]
 8007640:	f023 0204 	bic.w	r2, r3, #4
 8007644:	6022      	str	r2, [r4, #0]
 8007646:	f04f 0900 	mov.w	r9, #0
 800764a:	9700      	str	r7, [sp, #0]
 800764c:	4633      	mov	r3, r6
 800764e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007650:	4621      	mov	r1, r4
 8007652:	4628      	mov	r0, r5
 8007654:	f000 f9d8 	bl	8007a08 <_printf_common>
 8007658:	3001      	adds	r0, #1
 800765a:	f040 8090 	bne.w	800777e <_printf_float+0x1e2>
 800765e:	f04f 30ff 	mov.w	r0, #4294967295
 8007662:	b00d      	add	sp, #52	; 0x34
 8007664:	ecbd 8b02 	vpop	{d8}
 8007668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800766c:	4642      	mov	r2, r8
 800766e:	464b      	mov	r3, r9
 8007670:	4640      	mov	r0, r8
 8007672:	4649      	mov	r1, r9
 8007674:	f7f9 fa5a 	bl	8000b2c <__aeabi_dcmpun>
 8007678:	b140      	cbz	r0, 800768c <_printf_float+0xf0>
 800767a:	464b      	mov	r3, r9
 800767c:	2b00      	cmp	r3, #0
 800767e:	bfbc      	itt	lt
 8007680:	232d      	movlt	r3, #45	; 0x2d
 8007682:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007686:	487f      	ldr	r0, [pc, #508]	; (8007884 <_printf_float+0x2e8>)
 8007688:	4b7f      	ldr	r3, [pc, #508]	; (8007888 <_printf_float+0x2ec>)
 800768a:	e7d1      	b.n	8007630 <_printf_float+0x94>
 800768c:	6863      	ldr	r3, [r4, #4]
 800768e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007692:	9206      	str	r2, [sp, #24]
 8007694:	1c5a      	adds	r2, r3, #1
 8007696:	d13f      	bne.n	8007718 <_printf_float+0x17c>
 8007698:	2306      	movs	r3, #6
 800769a:	6063      	str	r3, [r4, #4]
 800769c:	9b05      	ldr	r3, [sp, #20]
 800769e:	6861      	ldr	r1, [r4, #4]
 80076a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80076a4:	2300      	movs	r3, #0
 80076a6:	9303      	str	r3, [sp, #12]
 80076a8:	ab0a      	add	r3, sp, #40	; 0x28
 80076aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80076ae:	ab09      	add	r3, sp, #36	; 0x24
 80076b0:	ec49 8b10 	vmov	d0, r8, r9
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	6022      	str	r2, [r4, #0]
 80076b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80076bc:	4628      	mov	r0, r5
 80076be:	f7ff fecd 	bl	800745c <__cvt>
 80076c2:	9b06      	ldr	r3, [sp, #24]
 80076c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076c6:	2b47      	cmp	r3, #71	; 0x47
 80076c8:	4680      	mov	r8, r0
 80076ca:	d108      	bne.n	80076de <_printf_float+0x142>
 80076cc:	1cc8      	adds	r0, r1, #3
 80076ce:	db02      	blt.n	80076d6 <_printf_float+0x13a>
 80076d0:	6863      	ldr	r3, [r4, #4]
 80076d2:	4299      	cmp	r1, r3
 80076d4:	dd41      	ble.n	800775a <_printf_float+0x1be>
 80076d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80076da:	fa5f fb8b 	uxtb.w	fp, fp
 80076de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80076e2:	d820      	bhi.n	8007726 <_printf_float+0x18a>
 80076e4:	3901      	subs	r1, #1
 80076e6:	465a      	mov	r2, fp
 80076e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80076ec:	9109      	str	r1, [sp, #36]	; 0x24
 80076ee:	f7ff ff17 	bl	8007520 <__exponent>
 80076f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076f4:	1813      	adds	r3, r2, r0
 80076f6:	2a01      	cmp	r2, #1
 80076f8:	4681      	mov	r9, r0
 80076fa:	6123      	str	r3, [r4, #16]
 80076fc:	dc02      	bgt.n	8007704 <_printf_float+0x168>
 80076fe:	6822      	ldr	r2, [r4, #0]
 8007700:	07d2      	lsls	r2, r2, #31
 8007702:	d501      	bpl.n	8007708 <_printf_float+0x16c>
 8007704:	3301      	adds	r3, #1
 8007706:	6123      	str	r3, [r4, #16]
 8007708:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800770c:	2b00      	cmp	r3, #0
 800770e:	d09c      	beq.n	800764a <_printf_float+0xae>
 8007710:	232d      	movs	r3, #45	; 0x2d
 8007712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007716:	e798      	b.n	800764a <_printf_float+0xae>
 8007718:	9a06      	ldr	r2, [sp, #24]
 800771a:	2a47      	cmp	r2, #71	; 0x47
 800771c:	d1be      	bne.n	800769c <_printf_float+0x100>
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1bc      	bne.n	800769c <_printf_float+0x100>
 8007722:	2301      	movs	r3, #1
 8007724:	e7b9      	b.n	800769a <_printf_float+0xfe>
 8007726:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800772a:	d118      	bne.n	800775e <_printf_float+0x1c2>
 800772c:	2900      	cmp	r1, #0
 800772e:	6863      	ldr	r3, [r4, #4]
 8007730:	dd0b      	ble.n	800774a <_printf_float+0x1ae>
 8007732:	6121      	str	r1, [r4, #16]
 8007734:	b913      	cbnz	r3, 800773c <_printf_float+0x1a0>
 8007736:	6822      	ldr	r2, [r4, #0]
 8007738:	07d0      	lsls	r0, r2, #31
 800773a:	d502      	bpl.n	8007742 <_printf_float+0x1a6>
 800773c:	3301      	adds	r3, #1
 800773e:	440b      	add	r3, r1
 8007740:	6123      	str	r3, [r4, #16]
 8007742:	65a1      	str	r1, [r4, #88]	; 0x58
 8007744:	f04f 0900 	mov.w	r9, #0
 8007748:	e7de      	b.n	8007708 <_printf_float+0x16c>
 800774a:	b913      	cbnz	r3, 8007752 <_printf_float+0x1b6>
 800774c:	6822      	ldr	r2, [r4, #0]
 800774e:	07d2      	lsls	r2, r2, #31
 8007750:	d501      	bpl.n	8007756 <_printf_float+0x1ba>
 8007752:	3302      	adds	r3, #2
 8007754:	e7f4      	b.n	8007740 <_printf_float+0x1a4>
 8007756:	2301      	movs	r3, #1
 8007758:	e7f2      	b.n	8007740 <_printf_float+0x1a4>
 800775a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800775e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007760:	4299      	cmp	r1, r3
 8007762:	db05      	blt.n	8007770 <_printf_float+0x1d4>
 8007764:	6823      	ldr	r3, [r4, #0]
 8007766:	6121      	str	r1, [r4, #16]
 8007768:	07d8      	lsls	r0, r3, #31
 800776a:	d5ea      	bpl.n	8007742 <_printf_float+0x1a6>
 800776c:	1c4b      	adds	r3, r1, #1
 800776e:	e7e7      	b.n	8007740 <_printf_float+0x1a4>
 8007770:	2900      	cmp	r1, #0
 8007772:	bfd4      	ite	le
 8007774:	f1c1 0202 	rsble	r2, r1, #2
 8007778:	2201      	movgt	r2, #1
 800777a:	4413      	add	r3, r2
 800777c:	e7e0      	b.n	8007740 <_printf_float+0x1a4>
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	055a      	lsls	r2, r3, #21
 8007782:	d407      	bmi.n	8007794 <_printf_float+0x1f8>
 8007784:	6923      	ldr	r3, [r4, #16]
 8007786:	4642      	mov	r2, r8
 8007788:	4631      	mov	r1, r6
 800778a:	4628      	mov	r0, r5
 800778c:	47b8      	blx	r7
 800778e:	3001      	adds	r0, #1
 8007790:	d12c      	bne.n	80077ec <_printf_float+0x250>
 8007792:	e764      	b.n	800765e <_printf_float+0xc2>
 8007794:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007798:	f240 80e0 	bls.w	800795c <_printf_float+0x3c0>
 800779c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077a0:	2200      	movs	r2, #0
 80077a2:	2300      	movs	r3, #0
 80077a4:	f7f9 f990 	bl	8000ac8 <__aeabi_dcmpeq>
 80077a8:	2800      	cmp	r0, #0
 80077aa:	d034      	beq.n	8007816 <_printf_float+0x27a>
 80077ac:	4a37      	ldr	r2, [pc, #220]	; (800788c <_printf_float+0x2f0>)
 80077ae:	2301      	movs	r3, #1
 80077b0:	4631      	mov	r1, r6
 80077b2:	4628      	mov	r0, r5
 80077b4:	47b8      	blx	r7
 80077b6:	3001      	adds	r0, #1
 80077b8:	f43f af51 	beq.w	800765e <_printf_float+0xc2>
 80077bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077c0:	429a      	cmp	r2, r3
 80077c2:	db02      	blt.n	80077ca <_printf_float+0x22e>
 80077c4:	6823      	ldr	r3, [r4, #0]
 80077c6:	07d8      	lsls	r0, r3, #31
 80077c8:	d510      	bpl.n	80077ec <_printf_float+0x250>
 80077ca:	ee18 3a10 	vmov	r3, s16
 80077ce:	4652      	mov	r2, sl
 80077d0:	4631      	mov	r1, r6
 80077d2:	4628      	mov	r0, r5
 80077d4:	47b8      	blx	r7
 80077d6:	3001      	adds	r0, #1
 80077d8:	f43f af41 	beq.w	800765e <_printf_float+0xc2>
 80077dc:	f04f 0800 	mov.w	r8, #0
 80077e0:	f104 091a 	add.w	r9, r4, #26
 80077e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077e6:	3b01      	subs	r3, #1
 80077e8:	4543      	cmp	r3, r8
 80077ea:	dc09      	bgt.n	8007800 <_printf_float+0x264>
 80077ec:	6823      	ldr	r3, [r4, #0]
 80077ee:	079b      	lsls	r3, r3, #30
 80077f0:	f100 8105 	bmi.w	80079fe <_printf_float+0x462>
 80077f4:	68e0      	ldr	r0, [r4, #12]
 80077f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077f8:	4298      	cmp	r0, r3
 80077fa:	bfb8      	it	lt
 80077fc:	4618      	movlt	r0, r3
 80077fe:	e730      	b.n	8007662 <_printf_float+0xc6>
 8007800:	2301      	movs	r3, #1
 8007802:	464a      	mov	r2, r9
 8007804:	4631      	mov	r1, r6
 8007806:	4628      	mov	r0, r5
 8007808:	47b8      	blx	r7
 800780a:	3001      	adds	r0, #1
 800780c:	f43f af27 	beq.w	800765e <_printf_float+0xc2>
 8007810:	f108 0801 	add.w	r8, r8, #1
 8007814:	e7e6      	b.n	80077e4 <_printf_float+0x248>
 8007816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007818:	2b00      	cmp	r3, #0
 800781a:	dc39      	bgt.n	8007890 <_printf_float+0x2f4>
 800781c:	4a1b      	ldr	r2, [pc, #108]	; (800788c <_printf_float+0x2f0>)
 800781e:	2301      	movs	r3, #1
 8007820:	4631      	mov	r1, r6
 8007822:	4628      	mov	r0, r5
 8007824:	47b8      	blx	r7
 8007826:	3001      	adds	r0, #1
 8007828:	f43f af19 	beq.w	800765e <_printf_float+0xc2>
 800782c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007830:	4313      	orrs	r3, r2
 8007832:	d102      	bne.n	800783a <_printf_float+0x29e>
 8007834:	6823      	ldr	r3, [r4, #0]
 8007836:	07d9      	lsls	r1, r3, #31
 8007838:	d5d8      	bpl.n	80077ec <_printf_float+0x250>
 800783a:	ee18 3a10 	vmov	r3, s16
 800783e:	4652      	mov	r2, sl
 8007840:	4631      	mov	r1, r6
 8007842:	4628      	mov	r0, r5
 8007844:	47b8      	blx	r7
 8007846:	3001      	adds	r0, #1
 8007848:	f43f af09 	beq.w	800765e <_printf_float+0xc2>
 800784c:	f04f 0900 	mov.w	r9, #0
 8007850:	f104 0a1a 	add.w	sl, r4, #26
 8007854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007856:	425b      	negs	r3, r3
 8007858:	454b      	cmp	r3, r9
 800785a:	dc01      	bgt.n	8007860 <_printf_float+0x2c4>
 800785c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800785e:	e792      	b.n	8007786 <_printf_float+0x1ea>
 8007860:	2301      	movs	r3, #1
 8007862:	4652      	mov	r2, sl
 8007864:	4631      	mov	r1, r6
 8007866:	4628      	mov	r0, r5
 8007868:	47b8      	blx	r7
 800786a:	3001      	adds	r0, #1
 800786c:	f43f aef7 	beq.w	800765e <_printf_float+0xc2>
 8007870:	f109 0901 	add.w	r9, r9, #1
 8007874:	e7ee      	b.n	8007854 <_printf_float+0x2b8>
 8007876:	bf00      	nop
 8007878:	7fefffff 	.word	0x7fefffff
 800787c:	08009f6c 	.word	0x08009f6c
 8007880:	08009f70 	.word	0x08009f70
 8007884:	08009f78 	.word	0x08009f78
 8007888:	08009f74 	.word	0x08009f74
 800788c:	08009f7c 	.word	0x08009f7c
 8007890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007892:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007894:	429a      	cmp	r2, r3
 8007896:	bfa8      	it	ge
 8007898:	461a      	movge	r2, r3
 800789a:	2a00      	cmp	r2, #0
 800789c:	4691      	mov	r9, r2
 800789e:	dc37      	bgt.n	8007910 <_printf_float+0x374>
 80078a0:	f04f 0b00 	mov.w	fp, #0
 80078a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078a8:	f104 021a 	add.w	r2, r4, #26
 80078ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078ae:	9305      	str	r3, [sp, #20]
 80078b0:	eba3 0309 	sub.w	r3, r3, r9
 80078b4:	455b      	cmp	r3, fp
 80078b6:	dc33      	bgt.n	8007920 <_printf_float+0x384>
 80078b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078bc:	429a      	cmp	r2, r3
 80078be:	db3b      	blt.n	8007938 <_printf_float+0x39c>
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	07da      	lsls	r2, r3, #31
 80078c4:	d438      	bmi.n	8007938 <_printf_float+0x39c>
 80078c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c8:	9a05      	ldr	r2, [sp, #20]
 80078ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078cc:	1a9a      	subs	r2, r3, r2
 80078ce:	eba3 0901 	sub.w	r9, r3, r1
 80078d2:	4591      	cmp	r9, r2
 80078d4:	bfa8      	it	ge
 80078d6:	4691      	movge	r9, r2
 80078d8:	f1b9 0f00 	cmp.w	r9, #0
 80078dc:	dc35      	bgt.n	800794a <_printf_float+0x3ae>
 80078de:	f04f 0800 	mov.w	r8, #0
 80078e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078e6:	f104 0a1a 	add.w	sl, r4, #26
 80078ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078ee:	1a9b      	subs	r3, r3, r2
 80078f0:	eba3 0309 	sub.w	r3, r3, r9
 80078f4:	4543      	cmp	r3, r8
 80078f6:	f77f af79 	ble.w	80077ec <_printf_float+0x250>
 80078fa:	2301      	movs	r3, #1
 80078fc:	4652      	mov	r2, sl
 80078fe:	4631      	mov	r1, r6
 8007900:	4628      	mov	r0, r5
 8007902:	47b8      	blx	r7
 8007904:	3001      	adds	r0, #1
 8007906:	f43f aeaa 	beq.w	800765e <_printf_float+0xc2>
 800790a:	f108 0801 	add.w	r8, r8, #1
 800790e:	e7ec      	b.n	80078ea <_printf_float+0x34e>
 8007910:	4613      	mov	r3, r2
 8007912:	4631      	mov	r1, r6
 8007914:	4642      	mov	r2, r8
 8007916:	4628      	mov	r0, r5
 8007918:	47b8      	blx	r7
 800791a:	3001      	adds	r0, #1
 800791c:	d1c0      	bne.n	80078a0 <_printf_float+0x304>
 800791e:	e69e      	b.n	800765e <_printf_float+0xc2>
 8007920:	2301      	movs	r3, #1
 8007922:	4631      	mov	r1, r6
 8007924:	4628      	mov	r0, r5
 8007926:	9205      	str	r2, [sp, #20]
 8007928:	47b8      	blx	r7
 800792a:	3001      	adds	r0, #1
 800792c:	f43f ae97 	beq.w	800765e <_printf_float+0xc2>
 8007930:	9a05      	ldr	r2, [sp, #20]
 8007932:	f10b 0b01 	add.w	fp, fp, #1
 8007936:	e7b9      	b.n	80078ac <_printf_float+0x310>
 8007938:	ee18 3a10 	vmov	r3, s16
 800793c:	4652      	mov	r2, sl
 800793e:	4631      	mov	r1, r6
 8007940:	4628      	mov	r0, r5
 8007942:	47b8      	blx	r7
 8007944:	3001      	adds	r0, #1
 8007946:	d1be      	bne.n	80078c6 <_printf_float+0x32a>
 8007948:	e689      	b.n	800765e <_printf_float+0xc2>
 800794a:	9a05      	ldr	r2, [sp, #20]
 800794c:	464b      	mov	r3, r9
 800794e:	4442      	add	r2, r8
 8007950:	4631      	mov	r1, r6
 8007952:	4628      	mov	r0, r5
 8007954:	47b8      	blx	r7
 8007956:	3001      	adds	r0, #1
 8007958:	d1c1      	bne.n	80078de <_printf_float+0x342>
 800795a:	e680      	b.n	800765e <_printf_float+0xc2>
 800795c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800795e:	2a01      	cmp	r2, #1
 8007960:	dc01      	bgt.n	8007966 <_printf_float+0x3ca>
 8007962:	07db      	lsls	r3, r3, #31
 8007964:	d538      	bpl.n	80079d8 <_printf_float+0x43c>
 8007966:	2301      	movs	r3, #1
 8007968:	4642      	mov	r2, r8
 800796a:	4631      	mov	r1, r6
 800796c:	4628      	mov	r0, r5
 800796e:	47b8      	blx	r7
 8007970:	3001      	adds	r0, #1
 8007972:	f43f ae74 	beq.w	800765e <_printf_float+0xc2>
 8007976:	ee18 3a10 	vmov	r3, s16
 800797a:	4652      	mov	r2, sl
 800797c:	4631      	mov	r1, r6
 800797e:	4628      	mov	r0, r5
 8007980:	47b8      	blx	r7
 8007982:	3001      	adds	r0, #1
 8007984:	f43f ae6b 	beq.w	800765e <_printf_float+0xc2>
 8007988:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800798c:	2200      	movs	r2, #0
 800798e:	2300      	movs	r3, #0
 8007990:	f7f9 f89a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007994:	b9d8      	cbnz	r0, 80079ce <_printf_float+0x432>
 8007996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007998:	f108 0201 	add.w	r2, r8, #1
 800799c:	3b01      	subs	r3, #1
 800799e:	4631      	mov	r1, r6
 80079a0:	4628      	mov	r0, r5
 80079a2:	47b8      	blx	r7
 80079a4:	3001      	adds	r0, #1
 80079a6:	d10e      	bne.n	80079c6 <_printf_float+0x42a>
 80079a8:	e659      	b.n	800765e <_printf_float+0xc2>
 80079aa:	2301      	movs	r3, #1
 80079ac:	4652      	mov	r2, sl
 80079ae:	4631      	mov	r1, r6
 80079b0:	4628      	mov	r0, r5
 80079b2:	47b8      	blx	r7
 80079b4:	3001      	adds	r0, #1
 80079b6:	f43f ae52 	beq.w	800765e <_printf_float+0xc2>
 80079ba:	f108 0801 	add.w	r8, r8, #1
 80079be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079c0:	3b01      	subs	r3, #1
 80079c2:	4543      	cmp	r3, r8
 80079c4:	dcf1      	bgt.n	80079aa <_printf_float+0x40e>
 80079c6:	464b      	mov	r3, r9
 80079c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80079cc:	e6dc      	b.n	8007788 <_printf_float+0x1ec>
 80079ce:	f04f 0800 	mov.w	r8, #0
 80079d2:	f104 0a1a 	add.w	sl, r4, #26
 80079d6:	e7f2      	b.n	80079be <_printf_float+0x422>
 80079d8:	2301      	movs	r3, #1
 80079da:	4642      	mov	r2, r8
 80079dc:	e7df      	b.n	800799e <_printf_float+0x402>
 80079de:	2301      	movs	r3, #1
 80079e0:	464a      	mov	r2, r9
 80079e2:	4631      	mov	r1, r6
 80079e4:	4628      	mov	r0, r5
 80079e6:	47b8      	blx	r7
 80079e8:	3001      	adds	r0, #1
 80079ea:	f43f ae38 	beq.w	800765e <_printf_float+0xc2>
 80079ee:	f108 0801 	add.w	r8, r8, #1
 80079f2:	68e3      	ldr	r3, [r4, #12]
 80079f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079f6:	1a5b      	subs	r3, r3, r1
 80079f8:	4543      	cmp	r3, r8
 80079fa:	dcf0      	bgt.n	80079de <_printf_float+0x442>
 80079fc:	e6fa      	b.n	80077f4 <_printf_float+0x258>
 80079fe:	f04f 0800 	mov.w	r8, #0
 8007a02:	f104 0919 	add.w	r9, r4, #25
 8007a06:	e7f4      	b.n	80079f2 <_printf_float+0x456>

08007a08 <_printf_common>:
 8007a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a0c:	4616      	mov	r6, r2
 8007a0e:	4699      	mov	r9, r3
 8007a10:	688a      	ldr	r2, [r1, #8]
 8007a12:	690b      	ldr	r3, [r1, #16]
 8007a14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	bfb8      	it	lt
 8007a1c:	4613      	movlt	r3, r2
 8007a1e:	6033      	str	r3, [r6, #0]
 8007a20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a24:	4607      	mov	r7, r0
 8007a26:	460c      	mov	r4, r1
 8007a28:	b10a      	cbz	r2, 8007a2e <_printf_common+0x26>
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	6033      	str	r3, [r6, #0]
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	0699      	lsls	r1, r3, #26
 8007a32:	bf42      	ittt	mi
 8007a34:	6833      	ldrmi	r3, [r6, #0]
 8007a36:	3302      	addmi	r3, #2
 8007a38:	6033      	strmi	r3, [r6, #0]
 8007a3a:	6825      	ldr	r5, [r4, #0]
 8007a3c:	f015 0506 	ands.w	r5, r5, #6
 8007a40:	d106      	bne.n	8007a50 <_printf_common+0x48>
 8007a42:	f104 0a19 	add.w	sl, r4, #25
 8007a46:	68e3      	ldr	r3, [r4, #12]
 8007a48:	6832      	ldr	r2, [r6, #0]
 8007a4a:	1a9b      	subs	r3, r3, r2
 8007a4c:	42ab      	cmp	r3, r5
 8007a4e:	dc26      	bgt.n	8007a9e <_printf_common+0x96>
 8007a50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a54:	1e13      	subs	r3, r2, #0
 8007a56:	6822      	ldr	r2, [r4, #0]
 8007a58:	bf18      	it	ne
 8007a5a:	2301      	movne	r3, #1
 8007a5c:	0692      	lsls	r2, r2, #26
 8007a5e:	d42b      	bmi.n	8007ab8 <_printf_common+0xb0>
 8007a60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a64:	4649      	mov	r1, r9
 8007a66:	4638      	mov	r0, r7
 8007a68:	47c0      	blx	r8
 8007a6a:	3001      	adds	r0, #1
 8007a6c:	d01e      	beq.n	8007aac <_printf_common+0xa4>
 8007a6e:	6823      	ldr	r3, [r4, #0]
 8007a70:	68e5      	ldr	r5, [r4, #12]
 8007a72:	6832      	ldr	r2, [r6, #0]
 8007a74:	f003 0306 	and.w	r3, r3, #6
 8007a78:	2b04      	cmp	r3, #4
 8007a7a:	bf08      	it	eq
 8007a7c:	1aad      	subeq	r5, r5, r2
 8007a7e:	68a3      	ldr	r3, [r4, #8]
 8007a80:	6922      	ldr	r2, [r4, #16]
 8007a82:	bf0c      	ite	eq
 8007a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a88:	2500      	movne	r5, #0
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	bfc4      	itt	gt
 8007a8e:	1a9b      	subgt	r3, r3, r2
 8007a90:	18ed      	addgt	r5, r5, r3
 8007a92:	2600      	movs	r6, #0
 8007a94:	341a      	adds	r4, #26
 8007a96:	42b5      	cmp	r5, r6
 8007a98:	d11a      	bne.n	8007ad0 <_printf_common+0xc8>
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	e008      	b.n	8007ab0 <_printf_common+0xa8>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	4652      	mov	r2, sl
 8007aa2:	4649      	mov	r1, r9
 8007aa4:	4638      	mov	r0, r7
 8007aa6:	47c0      	blx	r8
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	d103      	bne.n	8007ab4 <_printf_common+0xac>
 8007aac:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ab4:	3501      	adds	r5, #1
 8007ab6:	e7c6      	b.n	8007a46 <_printf_common+0x3e>
 8007ab8:	18e1      	adds	r1, r4, r3
 8007aba:	1c5a      	adds	r2, r3, #1
 8007abc:	2030      	movs	r0, #48	; 0x30
 8007abe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ac2:	4422      	add	r2, r4
 8007ac4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ac8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007acc:	3302      	adds	r3, #2
 8007ace:	e7c7      	b.n	8007a60 <_printf_common+0x58>
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	4622      	mov	r2, r4
 8007ad4:	4649      	mov	r1, r9
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	47c0      	blx	r8
 8007ada:	3001      	adds	r0, #1
 8007adc:	d0e6      	beq.n	8007aac <_printf_common+0xa4>
 8007ade:	3601      	adds	r6, #1
 8007ae0:	e7d9      	b.n	8007a96 <_printf_common+0x8e>
	...

08007ae4 <_printf_i>:
 8007ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae8:	7e0f      	ldrb	r7, [r1, #24]
 8007aea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007aec:	2f78      	cmp	r7, #120	; 0x78
 8007aee:	4691      	mov	r9, r2
 8007af0:	4680      	mov	r8, r0
 8007af2:	460c      	mov	r4, r1
 8007af4:	469a      	mov	sl, r3
 8007af6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007afa:	d807      	bhi.n	8007b0c <_printf_i+0x28>
 8007afc:	2f62      	cmp	r7, #98	; 0x62
 8007afe:	d80a      	bhi.n	8007b16 <_printf_i+0x32>
 8007b00:	2f00      	cmp	r7, #0
 8007b02:	f000 80d8 	beq.w	8007cb6 <_printf_i+0x1d2>
 8007b06:	2f58      	cmp	r7, #88	; 0x58
 8007b08:	f000 80a3 	beq.w	8007c52 <_printf_i+0x16e>
 8007b0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b14:	e03a      	b.n	8007b8c <_printf_i+0xa8>
 8007b16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b1a:	2b15      	cmp	r3, #21
 8007b1c:	d8f6      	bhi.n	8007b0c <_printf_i+0x28>
 8007b1e:	a101      	add	r1, pc, #4	; (adr r1, 8007b24 <_printf_i+0x40>)
 8007b20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b24:	08007b7d 	.word	0x08007b7d
 8007b28:	08007b91 	.word	0x08007b91
 8007b2c:	08007b0d 	.word	0x08007b0d
 8007b30:	08007b0d 	.word	0x08007b0d
 8007b34:	08007b0d 	.word	0x08007b0d
 8007b38:	08007b0d 	.word	0x08007b0d
 8007b3c:	08007b91 	.word	0x08007b91
 8007b40:	08007b0d 	.word	0x08007b0d
 8007b44:	08007b0d 	.word	0x08007b0d
 8007b48:	08007b0d 	.word	0x08007b0d
 8007b4c:	08007b0d 	.word	0x08007b0d
 8007b50:	08007c9d 	.word	0x08007c9d
 8007b54:	08007bc1 	.word	0x08007bc1
 8007b58:	08007c7f 	.word	0x08007c7f
 8007b5c:	08007b0d 	.word	0x08007b0d
 8007b60:	08007b0d 	.word	0x08007b0d
 8007b64:	08007cbf 	.word	0x08007cbf
 8007b68:	08007b0d 	.word	0x08007b0d
 8007b6c:	08007bc1 	.word	0x08007bc1
 8007b70:	08007b0d 	.word	0x08007b0d
 8007b74:	08007b0d 	.word	0x08007b0d
 8007b78:	08007c87 	.word	0x08007c87
 8007b7c:	682b      	ldr	r3, [r5, #0]
 8007b7e:	1d1a      	adds	r2, r3, #4
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	602a      	str	r2, [r5, #0]
 8007b84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e0a3      	b.n	8007cd8 <_printf_i+0x1f4>
 8007b90:	6820      	ldr	r0, [r4, #0]
 8007b92:	6829      	ldr	r1, [r5, #0]
 8007b94:	0606      	lsls	r6, r0, #24
 8007b96:	f101 0304 	add.w	r3, r1, #4
 8007b9a:	d50a      	bpl.n	8007bb2 <_printf_i+0xce>
 8007b9c:	680e      	ldr	r6, [r1, #0]
 8007b9e:	602b      	str	r3, [r5, #0]
 8007ba0:	2e00      	cmp	r6, #0
 8007ba2:	da03      	bge.n	8007bac <_printf_i+0xc8>
 8007ba4:	232d      	movs	r3, #45	; 0x2d
 8007ba6:	4276      	negs	r6, r6
 8007ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bac:	485e      	ldr	r0, [pc, #376]	; (8007d28 <_printf_i+0x244>)
 8007bae:	230a      	movs	r3, #10
 8007bb0:	e019      	b.n	8007be6 <_printf_i+0x102>
 8007bb2:	680e      	ldr	r6, [r1, #0]
 8007bb4:	602b      	str	r3, [r5, #0]
 8007bb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007bba:	bf18      	it	ne
 8007bbc:	b236      	sxthne	r6, r6
 8007bbe:	e7ef      	b.n	8007ba0 <_printf_i+0xbc>
 8007bc0:	682b      	ldr	r3, [r5, #0]
 8007bc2:	6820      	ldr	r0, [r4, #0]
 8007bc4:	1d19      	adds	r1, r3, #4
 8007bc6:	6029      	str	r1, [r5, #0]
 8007bc8:	0601      	lsls	r1, r0, #24
 8007bca:	d501      	bpl.n	8007bd0 <_printf_i+0xec>
 8007bcc:	681e      	ldr	r6, [r3, #0]
 8007bce:	e002      	b.n	8007bd6 <_printf_i+0xf2>
 8007bd0:	0646      	lsls	r6, r0, #25
 8007bd2:	d5fb      	bpl.n	8007bcc <_printf_i+0xe8>
 8007bd4:	881e      	ldrh	r6, [r3, #0]
 8007bd6:	4854      	ldr	r0, [pc, #336]	; (8007d28 <_printf_i+0x244>)
 8007bd8:	2f6f      	cmp	r7, #111	; 0x6f
 8007bda:	bf0c      	ite	eq
 8007bdc:	2308      	moveq	r3, #8
 8007bde:	230a      	movne	r3, #10
 8007be0:	2100      	movs	r1, #0
 8007be2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007be6:	6865      	ldr	r5, [r4, #4]
 8007be8:	60a5      	str	r5, [r4, #8]
 8007bea:	2d00      	cmp	r5, #0
 8007bec:	bfa2      	ittt	ge
 8007bee:	6821      	ldrge	r1, [r4, #0]
 8007bf0:	f021 0104 	bicge.w	r1, r1, #4
 8007bf4:	6021      	strge	r1, [r4, #0]
 8007bf6:	b90e      	cbnz	r6, 8007bfc <_printf_i+0x118>
 8007bf8:	2d00      	cmp	r5, #0
 8007bfa:	d04d      	beq.n	8007c98 <_printf_i+0x1b4>
 8007bfc:	4615      	mov	r5, r2
 8007bfe:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c02:	fb03 6711 	mls	r7, r3, r1, r6
 8007c06:	5dc7      	ldrb	r7, [r0, r7]
 8007c08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c0c:	4637      	mov	r7, r6
 8007c0e:	42bb      	cmp	r3, r7
 8007c10:	460e      	mov	r6, r1
 8007c12:	d9f4      	bls.n	8007bfe <_printf_i+0x11a>
 8007c14:	2b08      	cmp	r3, #8
 8007c16:	d10b      	bne.n	8007c30 <_printf_i+0x14c>
 8007c18:	6823      	ldr	r3, [r4, #0]
 8007c1a:	07de      	lsls	r6, r3, #31
 8007c1c:	d508      	bpl.n	8007c30 <_printf_i+0x14c>
 8007c1e:	6923      	ldr	r3, [r4, #16]
 8007c20:	6861      	ldr	r1, [r4, #4]
 8007c22:	4299      	cmp	r1, r3
 8007c24:	bfde      	ittt	le
 8007c26:	2330      	movle	r3, #48	; 0x30
 8007c28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c30:	1b52      	subs	r2, r2, r5
 8007c32:	6122      	str	r2, [r4, #16]
 8007c34:	f8cd a000 	str.w	sl, [sp]
 8007c38:	464b      	mov	r3, r9
 8007c3a:	aa03      	add	r2, sp, #12
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	4640      	mov	r0, r8
 8007c40:	f7ff fee2 	bl	8007a08 <_printf_common>
 8007c44:	3001      	adds	r0, #1
 8007c46:	d14c      	bne.n	8007ce2 <_printf_i+0x1fe>
 8007c48:	f04f 30ff 	mov.w	r0, #4294967295
 8007c4c:	b004      	add	sp, #16
 8007c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c52:	4835      	ldr	r0, [pc, #212]	; (8007d28 <_printf_i+0x244>)
 8007c54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007c58:	6829      	ldr	r1, [r5, #0]
 8007c5a:	6823      	ldr	r3, [r4, #0]
 8007c5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c60:	6029      	str	r1, [r5, #0]
 8007c62:	061d      	lsls	r5, r3, #24
 8007c64:	d514      	bpl.n	8007c90 <_printf_i+0x1ac>
 8007c66:	07df      	lsls	r7, r3, #31
 8007c68:	bf44      	itt	mi
 8007c6a:	f043 0320 	orrmi.w	r3, r3, #32
 8007c6e:	6023      	strmi	r3, [r4, #0]
 8007c70:	b91e      	cbnz	r6, 8007c7a <_printf_i+0x196>
 8007c72:	6823      	ldr	r3, [r4, #0]
 8007c74:	f023 0320 	bic.w	r3, r3, #32
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	2310      	movs	r3, #16
 8007c7c:	e7b0      	b.n	8007be0 <_printf_i+0xfc>
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	f043 0320 	orr.w	r3, r3, #32
 8007c84:	6023      	str	r3, [r4, #0]
 8007c86:	2378      	movs	r3, #120	; 0x78
 8007c88:	4828      	ldr	r0, [pc, #160]	; (8007d2c <_printf_i+0x248>)
 8007c8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c8e:	e7e3      	b.n	8007c58 <_printf_i+0x174>
 8007c90:	0659      	lsls	r1, r3, #25
 8007c92:	bf48      	it	mi
 8007c94:	b2b6      	uxthmi	r6, r6
 8007c96:	e7e6      	b.n	8007c66 <_printf_i+0x182>
 8007c98:	4615      	mov	r5, r2
 8007c9a:	e7bb      	b.n	8007c14 <_printf_i+0x130>
 8007c9c:	682b      	ldr	r3, [r5, #0]
 8007c9e:	6826      	ldr	r6, [r4, #0]
 8007ca0:	6961      	ldr	r1, [r4, #20]
 8007ca2:	1d18      	adds	r0, r3, #4
 8007ca4:	6028      	str	r0, [r5, #0]
 8007ca6:	0635      	lsls	r5, r6, #24
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	d501      	bpl.n	8007cb0 <_printf_i+0x1cc>
 8007cac:	6019      	str	r1, [r3, #0]
 8007cae:	e002      	b.n	8007cb6 <_printf_i+0x1d2>
 8007cb0:	0670      	lsls	r0, r6, #25
 8007cb2:	d5fb      	bpl.n	8007cac <_printf_i+0x1c8>
 8007cb4:	8019      	strh	r1, [r3, #0]
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	6123      	str	r3, [r4, #16]
 8007cba:	4615      	mov	r5, r2
 8007cbc:	e7ba      	b.n	8007c34 <_printf_i+0x150>
 8007cbe:	682b      	ldr	r3, [r5, #0]
 8007cc0:	1d1a      	adds	r2, r3, #4
 8007cc2:	602a      	str	r2, [r5, #0]
 8007cc4:	681d      	ldr	r5, [r3, #0]
 8007cc6:	6862      	ldr	r2, [r4, #4]
 8007cc8:	2100      	movs	r1, #0
 8007cca:	4628      	mov	r0, r5
 8007ccc:	f7f8 fa88 	bl	80001e0 <memchr>
 8007cd0:	b108      	cbz	r0, 8007cd6 <_printf_i+0x1f2>
 8007cd2:	1b40      	subs	r0, r0, r5
 8007cd4:	6060      	str	r0, [r4, #4]
 8007cd6:	6863      	ldr	r3, [r4, #4]
 8007cd8:	6123      	str	r3, [r4, #16]
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ce0:	e7a8      	b.n	8007c34 <_printf_i+0x150>
 8007ce2:	6923      	ldr	r3, [r4, #16]
 8007ce4:	462a      	mov	r2, r5
 8007ce6:	4649      	mov	r1, r9
 8007ce8:	4640      	mov	r0, r8
 8007cea:	47d0      	blx	sl
 8007cec:	3001      	adds	r0, #1
 8007cee:	d0ab      	beq.n	8007c48 <_printf_i+0x164>
 8007cf0:	6823      	ldr	r3, [r4, #0]
 8007cf2:	079b      	lsls	r3, r3, #30
 8007cf4:	d413      	bmi.n	8007d1e <_printf_i+0x23a>
 8007cf6:	68e0      	ldr	r0, [r4, #12]
 8007cf8:	9b03      	ldr	r3, [sp, #12]
 8007cfa:	4298      	cmp	r0, r3
 8007cfc:	bfb8      	it	lt
 8007cfe:	4618      	movlt	r0, r3
 8007d00:	e7a4      	b.n	8007c4c <_printf_i+0x168>
 8007d02:	2301      	movs	r3, #1
 8007d04:	4632      	mov	r2, r6
 8007d06:	4649      	mov	r1, r9
 8007d08:	4640      	mov	r0, r8
 8007d0a:	47d0      	blx	sl
 8007d0c:	3001      	adds	r0, #1
 8007d0e:	d09b      	beq.n	8007c48 <_printf_i+0x164>
 8007d10:	3501      	adds	r5, #1
 8007d12:	68e3      	ldr	r3, [r4, #12]
 8007d14:	9903      	ldr	r1, [sp, #12]
 8007d16:	1a5b      	subs	r3, r3, r1
 8007d18:	42ab      	cmp	r3, r5
 8007d1a:	dcf2      	bgt.n	8007d02 <_printf_i+0x21e>
 8007d1c:	e7eb      	b.n	8007cf6 <_printf_i+0x212>
 8007d1e:	2500      	movs	r5, #0
 8007d20:	f104 0619 	add.w	r6, r4, #25
 8007d24:	e7f5      	b.n	8007d12 <_printf_i+0x22e>
 8007d26:	bf00      	nop
 8007d28:	08009f7e 	.word	0x08009f7e
 8007d2c:	08009f8f 	.word	0x08009f8f

08007d30 <iprintf>:
 8007d30:	b40f      	push	{r0, r1, r2, r3}
 8007d32:	4b0a      	ldr	r3, [pc, #40]	; (8007d5c <iprintf+0x2c>)
 8007d34:	b513      	push	{r0, r1, r4, lr}
 8007d36:	681c      	ldr	r4, [r3, #0]
 8007d38:	b124      	cbz	r4, 8007d44 <iprintf+0x14>
 8007d3a:	69a3      	ldr	r3, [r4, #24]
 8007d3c:	b913      	cbnz	r3, 8007d44 <iprintf+0x14>
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f000 fee0 	bl	8008b04 <__sinit>
 8007d44:	ab05      	add	r3, sp, #20
 8007d46:	9a04      	ldr	r2, [sp, #16]
 8007d48:	68a1      	ldr	r1, [r4, #8]
 8007d4a:	9301      	str	r3, [sp, #4]
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	f001 fc39 	bl	80095c4 <_vfiprintf_r>
 8007d52:	b002      	add	sp, #8
 8007d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d58:	b004      	add	sp, #16
 8007d5a:	4770      	bx	lr
 8007d5c:	2000000c 	.word	0x2000000c

08007d60 <quorem>:
 8007d60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d64:	6903      	ldr	r3, [r0, #16]
 8007d66:	690c      	ldr	r4, [r1, #16]
 8007d68:	42a3      	cmp	r3, r4
 8007d6a:	4607      	mov	r7, r0
 8007d6c:	f2c0 8081 	blt.w	8007e72 <quorem+0x112>
 8007d70:	3c01      	subs	r4, #1
 8007d72:	f101 0814 	add.w	r8, r1, #20
 8007d76:	f100 0514 	add.w	r5, r0, #20
 8007d7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d7e:	9301      	str	r3, [sp, #4]
 8007d80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d94:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d98:	d331      	bcc.n	8007dfe <quorem+0x9e>
 8007d9a:	f04f 0e00 	mov.w	lr, #0
 8007d9e:	4640      	mov	r0, r8
 8007da0:	46ac      	mov	ip, r5
 8007da2:	46f2      	mov	sl, lr
 8007da4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007da8:	b293      	uxth	r3, r2
 8007daa:	fb06 e303 	mla	r3, r6, r3, lr
 8007dae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	ebaa 0303 	sub.w	r3, sl, r3
 8007db8:	f8dc a000 	ldr.w	sl, [ip]
 8007dbc:	0c12      	lsrs	r2, r2, #16
 8007dbe:	fa13 f38a 	uxtah	r3, r3, sl
 8007dc2:	fb06 e202 	mla	r2, r6, r2, lr
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	9b00      	ldr	r3, [sp, #0]
 8007dca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007dce:	b292      	uxth	r2, r2
 8007dd0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007dd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007dd8:	f8bd 3000 	ldrh.w	r3, [sp]
 8007ddc:	4581      	cmp	r9, r0
 8007dde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007de2:	f84c 3b04 	str.w	r3, [ip], #4
 8007de6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007dea:	d2db      	bcs.n	8007da4 <quorem+0x44>
 8007dec:	f855 300b 	ldr.w	r3, [r5, fp]
 8007df0:	b92b      	cbnz	r3, 8007dfe <quorem+0x9e>
 8007df2:	9b01      	ldr	r3, [sp, #4]
 8007df4:	3b04      	subs	r3, #4
 8007df6:	429d      	cmp	r5, r3
 8007df8:	461a      	mov	r2, r3
 8007dfa:	d32e      	bcc.n	8007e5a <quorem+0xfa>
 8007dfc:	613c      	str	r4, [r7, #16]
 8007dfe:	4638      	mov	r0, r7
 8007e00:	f001 f9be 	bl	8009180 <__mcmp>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	db24      	blt.n	8007e52 <quorem+0xf2>
 8007e08:	3601      	adds	r6, #1
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	f04f 0c00 	mov.w	ip, #0
 8007e10:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e14:	f8d0 e000 	ldr.w	lr, [r0]
 8007e18:	b293      	uxth	r3, r2
 8007e1a:	ebac 0303 	sub.w	r3, ip, r3
 8007e1e:	0c12      	lsrs	r2, r2, #16
 8007e20:	fa13 f38e 	uxtah	r3, r3, lr
 8007e24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007e28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e32:	45c1      	cmp	r9, r8
 8007e34:	f840 3b04 	str.w	r3, [r0], #4
 8007e38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e3c:	d2e8      	bcs.n	8007e10 <quorem+0xb0>
 8007e3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e46:	b922      	cbnz	r2, 8007e52 <quorem+0xf2>
 8007e48:	3b04      	subs	r3, #4
 8007e4a:	429d      	cmp	r5, r3
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	d30a      	bcc.n	8007e66 <quorem+0x106>
 8007e50:	613c      	str	r4, [r7, #16]
 8007e52:	4630      	mov	r0, r6
 8007e54:	b003      	add	sp, #12
 8007e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e5a:	6812      	ldr	r2, [r2, #0]
 8007e5c:	3b04      	subs	r3, #4
 8007e5e:	2a00      	cmp	r2, #0
 8007e60:	d1cc      	bne.n	8007dfc <quorem+0x9c>
 8007e62:	3c01      	subs	r4, #1
 8007e64:	e7c7      	b.n	8007df6 <quorem+0x96>
 8007e66:	6812      	ldr	r2, [r2, #0]
 8007e68:	3b04      	subs	r3, #4
 8007e6a:	2a00      	cmp	r2, #0
 8007e6c:	d1f0      	bne.n	8007e50 <quorem+0xf0>
 8007e6e:	3c01      	subs	r4, #1
 8007e70:	e7eb      	b.n	8007e4a <quorem+0xea>
 8007e72:	2000      	movs	r0, #0
 8007e74:	e7ee      	b.n	8007e54 <quorem+0xf4>
	...

08007e78 <_dtoa_r>:
 8007e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7c:	ed2d 8b04 	vpush	{d8-d9}
 8007e80:	ec57 6b10 	vmov	r6, r7, d0
 8007e84:	b093      	sub	sp, #76	; 0x4c
 8007e86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e8c:	9106      	str	r1, [sp, #24]
 8007e8e:	ee10 aa10 	vmov	sl, s0
 8007e92:	4604      	mov	r4, r0
 8007e94:	9209      	str	r2, [sp, #36]	; 0x24
 8007e96:	930c      	str	r3, [sp, #48]	; 0x30
 8007e98:	46bb      	mov	fp, r7
 8007e9a:	b975      	cbnz	r5, 8007eba <_dtoa_r+0x42>
 8007e9c:	2010      	movs	r0, #16
 8007e9e:	f000 fed7 	bl	8008c50 <malloc>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	6260      	str	r0, [r4, #36]	; 0x24
 8007ea6:	b920      	cbnz	r0, 8007eb2 <_dtoa_r+0x3a>
 8007ea8:	4ba7      	ldr	r3, [pc, #668]	; (8008148 <_dtoa_r+0x2d0>)
 8007eaa:	21ea      	movs	r1, #234	; 0xea
 8007eac:	48a7      	ldr	r0, [pc, #668]	; (800814c <_dtoa_r+0x2d4>)
 8007eae:	f001 fddf 	bl	8009a70 <__assert_func>
 8007eb2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007eb6:	6005      	str	r5, [r0, #0]
 8007eb8:	60c5      	str	r5, [r0, #12]
 8007eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ebc:	6819      	ldr	r1, [r3, #0]
 8007ebe:	b151      	cbz	r1, 8007ed6 <_dtoa_r+0x5e>
 8007ec0:	685a      	ldr	r2, [r3, #4]
 8007ec2:	604a      	str	r2, [r1, #4]
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	4093      	lsls	r3, r2
 8007ec8:	608b      	str	r3, [r1, #8]
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f000 ff16 	bl	8008cfc <_Bfree>
 8007ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	601a      	str	r2, [r3, #0]
 8007ed6:	1e3b      	subs	r3, r7, #0
 8007ed8:	bfaa      	itet	ge
 8007eda:	2300      	movge	r3, #0
 8007edc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007ee0:	f8c8 3000 	strge.w	r3, [r8]
 8007ee4:	4b9a      	ldr	r3, [pc, #616]	; (8008150 <_dtoa_r+0x2d8>)
 8007ee6:	bfbc      	itt	lt
 8007ee8:	2201      	movlt	r2, #1
 8007eea:	f8c8 2000 	strlt.w	r2, [r8]
 8007eee:	ea33 030b 	bics.w	r3, r3, fp
 8007ef2:	d11b      	bne.n	8007f2c <_dtoa_r+0xb4>
 8007ef4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ef6:	f242 730f 	movw	r3, #9999	; 0x270f
 8007efa:	6013      	str	r3, [r2, #0]
 8007efc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f00:	4333      	orrs	r3, r6
 8007f02:	f000 8592 	beq.w	8008a2a <_dtoa_r+0xbb2>
 8007f06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f08:	b963      	cbnz	r3, 8007f24 <_dtoa_r+0xac>
 8007f0a:	4b92      	ldr	r3, [pc, #584]	; (8008154 <_dtoa_r+0x2dc>)
 8007f0c:	e022      	b.n	8007f54 <_dtoa_r+0xdc>
 8007f0e:	4b92      	ldr	r3, [pc, #584]	; (8008158 <_dtoa_r+0x2e0>)
 8007f10:	9301      	str	r3, [sp, #4]
 8007f12:	3308      	adds	r3, #8
 8007f14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f16:	6013      	str	r3, [r2, #0]
 8007f18:	9801      	ldr	r0, [sp, #4]
 8007f1a:	b013      	add	sp, #76	; 0x4c
 8007f1c:	ecbd 8b04 	vpop	{d8-d9}
 8007f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f24:	4b8b      	ldr	r3, [pc, #556]	; (8008154 <_dtoa_r+0x2dc>)
 8007f26:	9301      	str	r3, [sp, #4]
 8007f28:	3303      	adds	r3, #3
 8007f2a:	e7f3      	b.n	8007f14 <_dtoa_r+0x9c>
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	2300      	movs	r3, #0
 8007f30:	4650      	mov	r0, sl
 8007f32:	4659      	mov	r1, fp
 8007f34:	f7f8 fdc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f38:	ec4b ab19 	vmov	d9, sl, fp
 8007f3c:	4680      	mov	r8, r0
 8007f3e:	b158      	cbz	r0, 8007f58 <_dtoa_r+0xe0>
 8007f40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f42:	2301      	movs	r3, #1
 8007f44:	6013      	str	r3, [r2, #0]
 8007f46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f000 856b 	beq.w	8008a24 <_dtoa_r+0xbac>
 8007f4e:	4883      	ldr	r0, [pc, #524]	; (800815c <_dtoa_r+0x2e4>)
 8007f50:	6018      	str	r0, [r3, #0]
 8007f52:	1e43      	subs	r3, r0, #1
 8007f54:	9301      	str	r3, [sp, #4]
 8007f56:	e7df      	b.n	8007f18 <_dtoa_r+0xa0>
 8007f58:	ec4b ab10 	vmov	d0, sl, fp
 8007f5c:	aa10      	add	r2, sp, #64	; 0x40
 8007f5e:	a911      	add	r1, sp, #68	; 0x44
 8007f60:	4620      	mov	r0, r4
 8007f62:	f001 f9b3 	bl	80092cc <__d2b>
 8007f66:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007f6a:	ee08 0a10 	vmov	s16, r0
 8007f6e:	2d00      	cmp	r5, #0
 8007f70:	f000 8084 	beq.w	800807c <_dtoa_r+0x204>
 8007f74:	ee19 3a90 	vmov	r3, s19
 8007f78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f7c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007f80:	4656      	mov	r6, sl
 8007f82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007f86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f8a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007f8e:	4b74      	ldr	r3, [pc, #464]	; (8008160 <_dtoa_r+0x2e8>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	4630      	mov	r0, r6
 8007f94:	4639      	mov	r1, r7
 8007f96:	f7f8 f977 	bl	8000288 <__aeabi_dsub>
 8007f9a:	a365      	add	r3, pc, #404	; (adr r3, 8008130 <_dtoa_r+0x2b8>)
 8007f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa0:	f7f8 fb2a 	bl	80005f8 <__aeabi_dmul>
 8007fa4:	a364      	add	r3, pc, #400	; (adr r3, 8008138 <_dtoa_r+0x2c0>)
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	f7f8 f96f 	bl	800028c <__adddf3>
 8007fae:	4606      	mov	r6, r0
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	460f      	mov	r7, r1
 8007fb4:	f7f8 fab6 	bl	8000524 <__aeabi_i2d>
 8007fb8:	a361      	add	r3, pc, #388	; (adr r3, 8008140 <_dtoa_r+0x2c8>)
 8007fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbe:	f7f8 fb1b 	bl	80005f8 <__aeabi_dmul>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	4639      	mov	r1, r7
 8007fca:	f7f8 f95f 	bl	800028c <__adddf3>
 8007fce:	4606      	mov	r6, r0
 8007fd0:	460f      	mov	r7, r1
 8007fd2:	f7f8 fdc1 	bl	8000b58 <__aeabi_d2iz>
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	9000      	str	r0, [sp, #0]
 8007fda:	2300      	movs	r3, #0
 8007fdc:	4630      	mov	r0, r6
 8007fde:	4639      	mov	r1, r7
 8007fe0:	f7f8 fd7c 	bl	8000adc <__aeabi_dcmplt>
 8007fe4:	b150      	cbz	r0, 8007ffc <_dtoa_r+0x184>
 8007fe6:	9800      	ldr	r0, [sp, #0]
 8007fe8:	f7f8 fa9c 	bl	8000524 <__aeabi_i2d>
 8007fec:	4632      	mov	r2, r6
 8007fee:	463b      	mov	r3, r7
 8007ff0:	f7f8 fd6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ff4:	b910      	cbnz	r0, 8007ffc <_dtoa_r+0x184>
 8007ff6:	9b00      	ldr	r3, [sp, #0]
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	9b00      	ldr	r3, [sp, #0]
 8007ffe:	2b16      	cmp	r3, #22
 8008000:	d85a      	bhi.n	80080b8 <_dtoa_r+0x240>
 8008002:	9a00      	ldr	r2, [sp, #0]
 8008004:	4b57      	ldr	r3, [pc, #348]	; (8008164 <_dtoa_r+0x2ec>)
 8008006:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800800a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800e:	ec51 0b19 	vmov	r0, r1, d9
 8008012:	f7f8 fd63 	bl	8000adc <__aeabi_dcmplt>
 8008016:	2800      	cmp	r0, #0
 8008018:	d050      	beq.n	80080bc <_dtoa_r+0x244>
 800801a:	9b00      	ldr	r3, [sp, #0]
 800801c:	3b01      	subs	r3, #1
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	2300      	movs	r3, #0
 8008022:	930b      	str	r3, [sp, #44]	; 0x2c
 8008024:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008026:	1b5d      	subs	r5, r3, r5
 8008028:	1e6b      	subs	r3, r5, #1
 800802a:	9305      	str	r3, [sp, #20]
 800802c:	bf45      	ittet	mi
 800802e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008032:	9304      	strmi	r3, [sp, #16]
 8008034:	2300      	movpl	r3, #0
 8008036:	2300      	movmi	r3, #0
 8008038:	bf4c      	ite	mi
 800803a:	9305      	strmi	r3, [sp, #20]
 800803c:	9304      	strpl	r3, [sp, #16]
 800803e:	9b00      	ldr	r3, [sp, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	db3d      	blt.n	80080c0 <_dtoa_r+0x248>
 8008044:	9b05      	ldr	r3, [sp, #20]
 8008046:	9a00      	ldr	r2, [sp, #0]
 8008048:	920a      	str	r2, [sp, #40]	; 0x28
 800804a:	4413      	add	r3, r2
 800804c:	9305      	str	r3, [sp, #20]
 800804e:	2300      	movs	r3, #0
 8008050:	9307      	str	r3, [sp, #28]
 8008052:	9b06      	ldr	r3, [sp, #24]
 8008054:	2b09      	cmp	r3, #9
 8008056:	f200 8089 	bhi.w	800816c <_dtoa_r+0x2f4>
 800805a:	2b05      	cmp	r3, #5
 800805c:	bfc4      	itt	gt
 800805e:	3b04      	subgt	r3, #4
 8008060:	9306      	strgt	r3, [sp, #24]
 8008062:	9b06      	ldr	r3, [sp, #24]
 8008064:	f1a3 0302 	sub.w	r3, r3, #2
 8008068:	bfcc      	ite	gt
 800806a:	2500      	movgt	r5, #0
 800806c:	2501      	movle	r5, #1
 800806e:	2b03      	cmp	r3, #3
 8008070:	f200 8087 	bhi.w	8008182 <_dtoa_r+0x30a>
 8008074:	e8df f003 	tbb	[pc, r3]
 8008078:	59383a2d 	.word	0x59383a2d
 800807c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008080:	441d      	add	r5, r3
 8008082:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008086:	2b20      	cmp	r3, #32
 8008088:	bfc1      	itttt	gt
 800808a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800808e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008092:	fa0b f303 	lslgt.w	r3, fp, r3
 8008096:	fa26 f000 	lsrgt.w	r0, r6, r0
 800809a:	bfda      	itte	le
 800809c:	f1c3 0320 	rsble	r3, r3, #32
 80080a0:	fa06 f003 	lslle.w	r0, r6, r3
 80080a4:	4318      	orrgt	r0, r3
 80080a6:	f7f8 fa2d 	bl	8000504 <__aeabi_ui2d>
 80080aa:	2301      	movs	r3, #1
 80080ac:	4606      	mov	r6, r0
 80080ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80080b2:	3d01      	subs	r5, #1
 80080b4:	930e      	str	r3, [sp, #56]	; 0x38
 80080b6:	e76a      	b.n	8007f8e <_dtoa_r+0x116>
 80080b8:	2301      	movs	r3, #1
 80080ba:	e7b2      	b.n	8008022 <_dtoa_r+0x1aa>
 80080bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80080be:	e7b1      	b.n	8008024 <_dtoa_r+0x1ac>
 80080c0:	9b04      	ldr	r3, [sp, #16]
 80080c2:	9a00      	ldr	r2, [sp, #0]
 80080c4:	1a9b      	subs	r3, r3, r2
 80080c6:	9304      	str	r3, [sp, #16]
 80080c8:	4253      	negs	r3, r2
 80080ca:	9307      	str	r3, [sp, #28]
 80080cc:	2300      	movs	r3, #0
 80080ce:	930a      	str	r3, [sp, #40]	; 0x28
 80080d0:	e7bf      	b.n	8008052 <_dtoa_r+0x1da>
 80080d2:	2300      	movs	r3, #0
 80080d4:	9308      	str	r3, [sp, #32]
 80080d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080d8:	2b00      	cmp	r3, #0
 80080da:	dc55      	bgt.n	8008188 <_dtoa_r+0x310>
 80080dc:	2301      	movs	r3, #1
 80080de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80080e2:	461a      	mov	r2, r3
 80080e4:	9209      	str	r2, [sp, #36]	; 0x24
 80080e6:	e00c      	b.n	8008102 <_dtoa_r+0x28a>
 80080e8:	2301      	movs	r3, #1
 80080ea:	e7f3      	b.n	80080d4 <_dtoa_r+0x25c>
 80080ec:	2300      	movs	r3, #0
 80080ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080f0:	9308      	str	r3, [sp, #32]
 80080f2:	9b00      	ldr	r3, [sp, #0]
 80080f4:	4413      	add	r3, r2
 80080f6:	9302      	str	r3, [sp, #8]
 80080f8:	3301      	adds	r3, #1
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	9303      	str	r3, [sp, #12]
 80080fe:	bfb8      	it	lt
 8008100:	2301      	movlt	r3, #1
 8008102:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008104:	2200      	movs	r2, #0
 8008106:	6042      	str	r2, [r0, #4]
 8008108:	2204      	movs	r2, #4
 800810a:	f102 0614 	add.w	r6, r2, #20
 800810e:	429e      	cmp	r6, r3
 8008110:	6841      	ldr	r1, [r0, #4]
 8008112:	d93d      	bls.n	8008190 <_dtoa_r+0x318>
 8008114:	4620      	mov	r0, r4
 8008116:	f000 fdb1 	bl	8008c7c <_Balloc>
 800811a:	9001      	str	r0, [sp, #4]
 800811c:	2800      	cmp	r0, #0
 800811e:	d13b      	bne.n	8008198 <_dtoa_r+0x320>
 8008120:	4b11      	ldr	r3, [pc, #68]	; (8008168 <_dtoa_r+0x2f0>)
 8008122:	4602      	mov	r2, r0
 8008124:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008128:	e6c0      	b.n	8007eac <_dtoa_r+0x34>
 800812a:	2301      	movs	r3, #1
 800812c:	e7df      	b.n	80080ee <_dtoa_r+0x276>
 800812e:	bf00      	nop
 8008130:	636f4361 	.word	0x636f4361
 8008134:	3fd287a7 	.word	0x3fd287a7
 8008138:	8b60c8b3 	.word	0x8b60c8b3
 800813c:	3fc68a28 	.word	0x3fc68a28
 8008140:	509f79fb 	.word	0x509f79fb
 8008144:	3fd34413 	.word	0x3fd34413
 8008148:	08009fad 	.word	0x08009fad
 800814c:	08009fc4 	.word	0x08009fc4
 8008150:	7ff00000 	.word	0x7ff00000
 8008154:	08009fa9 	.word	0x08009fa9
 8008158:	08009fa0 	.word	0x08009fa0
 800815c:	08009f7d 	.word	0x08009f7d
 8008160:	3ff80000 	.word	0x3ff80000
 8008164:	0800a118 	.word	0x0800a118
 8008168:	0800a01f 	.word	0x0800a01f
 800816c:	2501      	movs	r5, #1
 800816e:	2300      	movs	r3, #0
 8008170:	9306      	str	r3, [sp, #24]
 8008172:	9508      	str	r5, [sp, #32]
 8008174:	f04f 33ff 	mov.w	r3, #4294967295
 8008178:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800817c:	2200      	movs	r2, #0
 800817e:	2312      	movs	r3, #18
 8008180:	e7b0      	b.n	80080e4 <_dtoa_r+0x26c>
 8008182:	2301      	movs	r3, #1
 8008184:	9308      	str	r3, [sp, #32]
 8008186:	e7f5      	b.n	8008174 <_dtoa_r+0x2fc>
 8008188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800818a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800818e:	e7b8      	b.n	8008102 <_dtoa_r+0x28a>
 8008190:	3101      	adds	r1, #1
 8008192:	6041      	str	r1, [r0, #4]
 8008194:	0052      	lsls	r2, r2, #1
 8008196:	e7b8      	b.n	800810a <_dtoa_r+0x292>
 8008198:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800819a:	9a01      	ldr	r2, [sp, #4]
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	9b03      	ldr	r3, [sp, #12]
 80081a0:	2b0e      	cmp	r3, #14
 80081a2:	f200 809d 	bhi.w	80082e0 <_dtoa_r+0x468>
 80081a6:	2d00      	cmp	r5, #0
 80081a8:	f000 809a 	beq.w	80082e0 <_dtoa_r+0x468>
 80081ac:	9b00      	ldr	r3, [sp, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	dd32      	ble.n	8008218 <_dtoa_r+0x3a0>
 80081b2:	4ab7      	ldr	r2, [pc, #732]	; (8008490 <_dtoa_r+0x618>)
 80081b4:	f003 030f 	and.w	r3, r3, #15
 80081b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80081bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80081c0:	9b00      	ldr	r3, [sp, #0]
 80081c2:	05d8      	lsls	r0, r3, #23
 80081c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80081c8:	d516      	bpl.n	80081f8 <_dtoa_r+0x380>
 80081ca:	4bb2      	ldr	r3, [pc, #712]	; (8008494 <_dtoa_r+0x61c>)
 80081cc:	ec51 0b19 	vmov	r0, r1, d9
 80081d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081d4:	f7f8 fb3a 	bl	800084c <__aeabi_ddiv>
 80081d8:	f007 070f 	and.w	r7, r7, #15
 80081dc:	4682      	mov	sl, r0
 80081de:	468b      	mov	fp, r1
 80081e0:	2503      	movs	r5, #3
 80081e2:	4eac      	ldr	r6, [pc, #688]	; (8008494 <_dtoa_r+0x61c>)
 80081e4:	b957      	cbnz	r7, 80081fc <_dtoa_r+0x384>
 80081e6:	4642      	mov	r2, r8
 80081e8:	464b      	mov	r3, r9
 80081ea:	4650      	mov	r0, sl
 80081ec:	4659      	mov	r1, fp
 80081ee:	f7f8 fb2d 	bl	800084c <__aeabi_ddiv>
 80081f2:	4682      	mov	sl, r0
 80081f4:	468b      	mov	fp, r1
 80081f6:	e028      	b.n	800824a <_dtoa_r+0x3d2>
 80081f8:	2502      	movs	r5, #2
 80081fa:	e7f2      	b.n	80081e2 <_dtoa_r+0x36a>
 80081fc:	07f9      	lsls	r1, r7, #31
 80081fe:	d508      	bpl.n	8008212 <_dtoa_r+0x39a>
 8008200:	4640      	mov	r0, r8
 8008202:	4649      	mov	r1, r9
 8008204:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008208:	f7f8 f9f6 	bl	80005f8 <__aeabi_dmul>
 800820c:	3501      	adds	r5, #1
 800820e:	4680      	mov	r8, r0
 8008210:	4689      	mov	r9, r1
 8008212:	107f      	asrs	r7, r7, #1
 8008214:	3608      	adds	r6, #8
 8008216:	e7e5      	b.n	80081e4 <_dtoa_r+0x36c>
 8008218:	f000 809b 	beq.w	8008352 <_dtoa_r+0x4da>
 800821c:	9b00      	ldr	r3, [sp, #0]
 800821e:	4f9d      	ldr	r7, [pc, #628]	; (8008494 <_dtoa_r+0x61c>)
 8008220:	425e      	negs	r6, r3
 8008222:	4b9b      	ldr	r3, [pc, #620]	; (8008490 <_dtoa_r+0x618>)
 8008224:	f006 020f 	and.w	r2, r6, #15
 8008228:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008230:	ec51 0b19 	vmov	r0, r1, d9
 8008234:	f7f8 f9e0 	bl	80005f8 <__aeabi_dmul>
 8008238:	1136      	asrs	r6, r6, #4
 800823a:	4682      	mov	sl, r0
 800823c:	468b      	mov	fp, r1
 800823e:	2300      	movs	r3, #0
 8008240:	2502      	movs	r5, #2
 8008242:	2e00      	cmp	r6, #0
 8008244:	d17a      	bne.n	800833c <_dtoa_r+0x4c4>
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1d3      	bne.n	80081f2 <_dtoa_r+0x37a>
 800824a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 8082 	beq.w	8008356 <_dtoa_r+0x4de>
 8008252:	4b91      	ldr	r3, [pc, #580]	; (8008498 <_dtoa_r+0x620>)
 8008254:	2200      	movs	r2, #0
 8008256:	4650      	mov	r0, sl
 8008258:	4659      	mov	r1, fp
 800825a:	f7f8 fc3f 	bl	8000adc <__aeabi_dcmplt>
 800825e:	2800      	cmp	r0, #0
 8008260:	d079      	beq.n	8008356 <_dtoa_r+0x4de>
 8008262:	9b03      	ldr	r3, [sp, #12]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d076      	beq.n	8008356 <_dtoa_r+0x4de>
 8008268:	9b02      	ldr	r3, [sp, #8]
 800826a:	2b00      	cmp	r3, #0
 800826c:	dd36      	ble.n	80082dc <_dtoa_r+0x464>
 800826e:	9b00      	ldr	r3, [sp, #0]
 8008270:	4650      	mov	r0, sl
 8008272:	4659      	mov	r1, fp
 8008274:	1e5f      	subs	r7, r3, #1
 8008276:	2200      	movs	r2, #0
 8008278:	4b88      	ldr	r3, [pc, #544]	; (800849c <_dtoa_r+0x624>)
 800827a:	f7f8 f9bd 	bl	80005f8 <__aeabi_dmul>
 800827e:	9e02      	ldr	r6, [sp, #8]
 8008280:	4682      	mov	sl, r0
 8008282:	468b      	mov	fp, r1
 8008284:	3501      	adds	r5, #1
 8008286:	4628      	mov	r0, r5
 8008288:	f7f8 f94c 	bl	8000524 <__aeabi_i2d>
 800828c:	4652      	mov	r2, sl
 800828e:	465b      	mov	r3, fp
 8008290:	f7f8 f9b2 	bl	80005f8 <__aeabi_dmul>
 8008294:	4b82      	ldr	r3, [pc, #520]	; (80084a0 <_dtoa_r+0x628>)
 8008296:	2200      	movs	r2, #0
 8008298:	f7f7 fff8 	bl	800028c <__adddf3>
 800829c:	46d0      	mov	r8, sl
 800829e:	46d9      	mov	r9, fp
 80082a0:	4682      	mov	sl, r0
 80082a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80082a6:	2e00      	cmp	r6, #0
 80082a8:	d158      	bne.n	800835c <_dtoa_r+0x4e4>
 80082aa:	4b7e      	ldr	r3, [pc, #504]	; (80084a4 <_dtoa_r+0x62c>)
 80082ac:	2200      	movs	r2, #0
 80082ae:	4640      	mov	r0, r8
 80082b0:	4649      	mov	r1, r9
 80082b2:	f7f7 ffe9 	bl	8000288 <__aeabi_dsub>
 80082b6:	4652      	mov	r2, sl
 80082b8:	465b      	mov	r3, fp
 80082ba:	4680      	mov	r8, r0
 80082bc:	4689      	mov	r9, r1
 80082be:	f7f8 fc2b 	bl	8000b18 <__aeabi_dcmpgt>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	f040 8295 	bne.w	80087f2 <_dtoa_r+0x97a>
 80082c8:	4652      	mov	r2, sl
 80082ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80082ce:	4640      	mov	r0, r8
 80082d0:	4649      	mov	r1, r9
 80082d2:	f7f8 fc03 	bl	8000adc <__aeabi_dcmplt>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	f040 8289 	bne.w	80087ee <_dtoa_r+0x976>
 80082dc:	ec5b ab19 	vmov	sl, fp, d9
 80082e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f2c0 8148 	blt.w	8008578 <_dtoa_r+0x700>
 80082e8:	9a00      	ldr	r2, [sp, #0]
 80082ea:	2a0e      	cmp	r2, #14
 80082ec:	f300 8144 	bgt.w	8008578 <_dtoa_r+0x700>
 80082f0:	4b67      	ldr	r3, [pc, #412]	; (8008490 <_dtoa_r+0x618>)
 80082f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f280 80d5 	bge.w	80084ac <_dtoa_r+0x634>
 8008302:	9b03      	ldr	r3, [sp, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	f300 80d1 	bgt.w	80084ac <_dtoa_r+0x634>
 800830a:	f040 826f 	bne.w	80087ec <_dtoa_r+0x974>
 800830e:	4b65      	ldr	r3, [pc, #404]	; (80084a4 <_dtoa_r+0x62c>)
 8008310:	2200      	movs	r2, #0
 8008312:	4640      	mov	r0, r8
 8008314:	4649      	mov	r1, r9
 8008316:	f7f8 f96f 	bl	80005f8 <__aeabi_dmul>
 800831a:	4652      	mov	r2, sl
 800831c:	465b      	mov	r3, fp
 800831e:	f7f8 fbf1 	bl	8000b04 <__aeabi_dcmpge>
 8008322:	9e03      	ldr	r6, [sp, #12]
 8008324:	4637      	mov	r7, r6
 8008326:	2800      	cmp	r0, #0
 8008328:	f040 8245 	bne.w	80087b6 <_dtoa_r+0x93e>
 800832c:	9d01      	ldr	r5, [sp, #4]
 800832e:	2331      	movs	r3, #49	; 0x31
 8008330:	f805 3b01 	strb.w	r3, [r5], #1
 8008334:	9b00      	ldr	r3, [sp, #0]
 8008336:	3301      	adds	r3, #1
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	e240      	b.n	80087be <_dtoa_r+0x946>
 800833c:	07f2      	lsls	r2, r6, #31
 800833e:	d505      	bpl.n	800834c <_dtoa_r+0x4d4>
 8008340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008344:	f7f8 f958 	bl	80005f8 <__aeabi_dmul>
 8008348:	3501      	adds	r5, #1
 800834a:	2301      	movs	r3, #1
 800834c:	1076      	asrs	r6, r6, #1
 800834e:	3708      	adds	r7, #8
 8008350:	e777      	b.n	8008242 <_dtoa_r+0x3ca>
 8008352:	2502      	movs	r5, #2
 8008354:	e779      	b.n	800824a <_dtoa_r+0x3d2>
 8008356:	9f00      	ldr	r7, [sp, #0]
 8008358:	9e03      	ldr	r6, [sp, #12]
 800835a:	e794      	b.n	8008286 <_dtoa_r+0x40e>
 800835c:	9901      	ldr	r1, [sp, #4]
 800835e:	4b4c      	ldr	r3, [pc, #304]	; (8008490 <_dtoa_r+0x618>)
 8008360:	4431      	add	r1, r6
 8008362:	910d      	str	r1, [sp, #52]	; 0x34
 8008364:	9908      	ldr	r1, [sp, #32]
 8008366:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800836a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800836e:	2900      	cmp	r1, #0
 8008370:	d043      	beq.n	80083fa <_dtoa_r+0x582>
 8008372:	494d      	ldr	r1, [pc, #308]	; (80084a8 <_dtoa_r+0x630>)
 8008374:	2000      	movs	r0, #0
 8008376:	f7f8 fa69 	bl	800084c <__aeabi_ddiv>
 800837a:	4652      	mov	r2, sl
 800837c:	465b      	mov	r3, fp
 800837e:	f7f7 ff83 	bl	8000288 <__aeabi_dsub>
 8008382:	9d01      	ldr	r5, [sp, #4]
 8008384:	4682      	mov	sl, r0
 8008386:	468b      	mov	fp, r1
 8008388:	4649      	mov	r1, r9
 800838a:	4640      	mov	r0, r8
 800838c:	f7f8 fbe4 	bl	8000b58 <__aeabi_d2iz>
 8008390:	4606      	mov	r6, r0
 8008392:	f7f8 f8c7 	bl	8000524 <__aeabi_i2d>
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	4640      	mov	r0, r8
 800839c:	4649      	mov	r1, r9
 800839e:	f7f7 ff73 	bl	8000288 <__aeabi_dsub>
 80083a2:	3630      	adds	r6, #48	; 0x30
 80083a4:	f805 6b01 	strb.w	r6, [r5], #1
 80083a8:	4652      	mov	r2, sl
 80083aa:	465b      	mov	r3, fp
 80083ac:	4680      	mov	r8, r0
 80083ae:	4689      	mov	r9, r1
 80083b0:	f7f8 fb94 	bl	8000adc <__aeabi_dcmplt>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d163      	bne.n	8008480 <_dtoa_r+0x608>
 80083b8:	4642      	mov	r2, r8
 80083ba:	464b      	mov	r3, r9
 80083bc:	4936      	ldr	r1, [pc, #216]	; (8008498 <_dtoa_r+0x620>)
 80083be:	2000      	movs	r0, #0
 80083c0:	f7f7 ff62 	bl	8000288 <__aeabi_dsub>
 80083c4:	4652      	mov	r2, sl
 80083c6:	465b      	mov	r3, fp
 80083c8:	f7f8 fb88 	bl	8000adc <__aeabi_dcmplt>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	f040 80b5 	bne.w	800853c <_dtoa_r+0x6c4>
 80083d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083d4:	429d      	cmp	r5, r3
 80083d6:	d081      	beq.n	80082dc <_dtoa_r+0x464>
 80083d8:	4b30      	ldr	r3, [pc, #192]	; (800849c <_dtoa_r+0x624>)
 80083da:	2200      	movs	r2, #0
 80083dc:	4650      	mov	r0, sl
 80083de:	4659      	mov	r1, fp
 80083e0:	f7f8 f90a 	bl	80005f8 <__aeabi_dmul>
 80083e4:	4b2d      	ldr	r3, [pc, #180]	; (800849c <_dtoa_r+0x624>)
 80083e6:	4682      	mov	sl, r0
 80083e8:	468b      	mov	fp, r1
 80083ea:	4640      	mov	r0, r8
 80083ec:	4649      	mov	r1, r9
 80083ee:	2200      	movs	r2, #0
 80083f0:	f7f8 f902 	bl	80005f8 <__aeabi_dmul>
 80083f4:	4680      	mov	r8, r0
 80083f6:	4689      	mov	r9, r1
 80083f8:	e7c6      	b.n	8008388 <_dtoa_r+0x510>
 80083fa:	4650      	mov	r0, sl
 80083fc:	4659      	mov	r1, fp
 80083fe:	f7f8 f8fb 	bl	80005f8 <__aeabi_dmul>
 8008402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008404:	9d01      	ldr	r5, [sp, #4]
 8008406:	930f      	str	r3, [sp, #60]	; 0x3c
 8008408:	4682      	mov	sl, r0
 800840a:	468b      	mov	fp, r1
 800840c:	4649      	mov	r1, r9
 800840e:	4640      	mov	r0, r8
 8008410:	f7f8 fba2 	bl	8000b58 <__aeabi_d2iz>
 8008414:	4606      	mov	r6, r0
 8008416:	f7f8 f885 	bl	8000524 <__aeabi_i2d>
 800841a:	3630      	adds	r6, #48	; 0x30
 800841c:	4602      	mov	r2, r0
 800841e:	460b      	mov	r3, r1
 8008420:	4640      	mov	r0, r8
 8008422:	4649      	mov	r1, r9
 8008424:	f7f7 ff30 	bl	8000288 <__aeabi_dsub>
 8008428:	f805 6b01 	strb.w	r6, [r5], #1
 800842c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800842e:	429d      	cmp	r5, r3
 8008430:	4680      	mov	r8, r0
 8008432:	4689      	mov	r9, r1
 8008434:	f04f 0200 	mov.w	r2, #0
 8008438:	d124      	bne.n	8008484 <_dtoa_r+0x60c>
 800843a:	4b1b      	ldr	r3, [pc, #108]	; (80084a8 <_dtoa_r+0x630>)
 800843c:	4650      	mov	r0, sl
 800843e:	4659      	mov	r1, fp
 8008440:	f7f7 ff24 	bl	800028c <__adddf3>
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	4640      	mov	r0, r8
 800844a:	4649      	mov	r1, r9
 800844c:	f7f8 fb64 	bl	8000b18 <__aeabi_dcmpgt>
 8008450:	2800      	cmp	r0, #0
 8008452:	d173      	bne.n	800853c <_dtoa_r+0x6c4>
 8008454:	4652      	mov	r2, sl
 8008456:	465b      	mov	r3, fp
 8008458:	4913      	ldr	r1, [pc, #76]	; (80084a8 <_dtoa_r+0x630>)
 800845a:	2000      	movs	r0, #0
 800845c:	f7f7 ff14 	bl	8000288 <__aeabi_dsub>
 8008460:	4602      	mov	r2, r0
 8008462:	460b      	mov	r3, r1
 8008464:	4640      	mov	r0, r8
 8008466:	4649      	mov	r1, r9
 8008468:	f7f8 fb38 	bl	8000adc <__aeabi_dcmplt>
 800846c:	2800      	cmp	r0, #0
 800846e:	f43f af35 	beq.w	80082dc <_dtoa_r+0x464>
 8008472:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008474:	1e6b      	subs	r3, r5, #1
 8008476:	930f      	str	r3, [sp, #60]	; 0x3c
 8008478:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800847c:	2b30      	cmp	r3, #48	; 0x30
 800847e:	d0f8      	beq.n	8008472 <_dtoa_r+0x5fa>
 8008480:	9700      	str	r7, [sp, #0]
 8008482:	e049      	b.n	8008518 <_dtoa_r+0x6a0>
 8008484:	4b05      	ldr	r3, [pc, #20]	; (800849c <_dtoa_r+0x624>)
 8008486:	f7f8 f8b7 	bl	80005f8 <__aeabi_dmul>
 800848a:	4680      	mov	r8, r0
 800848c:	4689      	mov	r9, r1
 800848e:	e7bd      	b.n	800840c <_dtoa_r+0x594>
 8008490:	0800a118 	.word	0x0800a118
 8008494:	0800a0f0 	.word	0x0800a0f0
 8008498:	3ff00000 	.word	0x3ff00000
 800849c:	40240000 	.word	0x40240000
 80084a0:	401c0000 	.word	0x401c0000
 80084a4:	40140000 	.word	0x40140000
 80084a8:	3fe00000 	.word	0x3fe00000
 80084ac:	9d01      	ldr	r5, [sp, #4]
 80084ae:	4656      	mov	r6, sl
 80084b0:	465f      	mov	r7, fp
 80084b2:	4642      	mov	r2, r8
 80084b4:	464b      	mov	r3, r9
 80084b6:	4630      	mov	r0, r6
 80084b8:	4639      	mov	r1, r7
 80084ba:	f7f8 f9c7 	bl	800084c <__aeabi_ddiv>
 80084be:	f7f8 fb4b 	bl	8000b58 <__aeabi_d2iz>
 80084c2:	4682      	mov	sl, r0
 80084c4:	f7f8 f82e 	bl	8000524 <__aeabi_i2d>
 80084c8:	4642      	mov	r2, r8
 80084ca:	464b      	mov	r3, r9
 80084cc:	f7f8 f894 	bl	80005f8 <__aeabi_dmul>
 80084d0:	4602      	mov	r2, r0
 80084d2:	460b      	mov	r3, r1
 80084d4:	4630      	mov	r0, r6
 80084d6:	4639      	mov	r1, r7
 80084d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80084dc:	f7f7 fed4 	bl	8000288 <__aeabi_dsub>
 80084e0:	f805 6b01 	strb.w	r6, [r5], #1
 80084e4:	9e01      	ldr	r6, [sp, #4]
 80084e6:	9f03      	ldr	r7, [sp, #12]
 80084e8:	1bae      	subs	r6, r5, r6
 80084ea:	42b7      	cmp	r7, r6
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	d135      	bne.n	800855e <_dtoa_r+0x6e6>
 80084f2:	f7f7 fecb 	bl	800028c <__adddf3>
 80084f6:	4642      	mov	r2, r8
 80084f8:	464b      	mov	r3, r9
 80084fa:	4606      	mov	r6, r0
 80084fc:	460f      	mov	r7, r1
 80084fe:	f7f8 fb0b 	bl	8000b18 <__aeabi_dcmpgt>
 8008502:	b9d0      	cbnz	r0, 800853a <_dtoa_r+0x6c2>
 8008504:	4642      	mov	r2, r8
 8008506:	464b      	mov	r3, r9
 8008508:	4630      	mov	r0, r6
 800850a:	4639      	mov	r1, r7
 800850c:	f7f8 fadc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008510:	b110      	cbz	r0, 8008518 <_dtoa_r+0x6a0>
 8008512:	f01a 0f01 	tst.w	sl, #1
 8008516:	d110      	bne.n	800853a <_dtoa_r+0x6c2>
 8008518:	4620      	mov	r0, r4
 800851a:	ee18 1a10 	vmov	r1, s16
 800851e:	f000 fbed 	bl	8008cfc <_Bfree>
 8008522:	2300      	movs	r3, #0
 8008524:	9800      	ldr	r0, [sp, #0]
 8008526:	702b      	strb	r3, [r5, #0]
 8008528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800852a:	3001      	adds	r0, #1
 800852c:	6018      	str	r0, [r3, #0]
 800852e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008530:	2b00      	cmp	r3, #0
 8008532:	f43f acf1 	beq.w	8007f18 <_dtoa_r+0xa0>
 8008536:	601d      	str	r5, [r3, #0]
 8008538:	e4ee      	b.n	8007f18 <_dtoa_r+0xa0>
 800853a:	9f00      	ldr	r7, [sp, #0]
 800853c:	462b      	mov	r3, r5
 800853e:	461d      	mov	r5, r3
 8008540:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008544:	2a39      	cmp	r2, #57	; 0x39
 8008546:	d106      	bne.n	8008556 <_dtoa_r+0x6de>
 8008548:	9a01      	ldr	r2, [sp, #4]
 800854a:	429a      	cmp	r2, r3
 800854c:	d1f7      	bne.n	800853e <_dtoa_r+0x6c6>
 800854e:	9901      	ldr	r1, [sp, #4]
 8008550:	2230      	movs	r2, #48	; 0x30
 8008552:	3701      	adds	r7, #1
 8008554:	700a      	strb	r2, [r1, #0]
 8008556:	781a      	ldrb	r2, [r3, #0]
 8008558:	3201      	adds	r2, #1
 800855a:	701a      	strb	r2, [r3, #0]
 800855c:	e790      	b.n	8008480 <_dtoa_r+0x608>
 800855e:	4ba6      	ldr	r3, [pc, #664]	; (80087f8 <_dtoa_r+0x980>)
 8008560:	2200      	movs	r2, #0
 8008562:	f7f8 f849 	bl	80005f8 <__aeabi_dmul>
 8008566:	2200      	movs	r2, #0
 8008568:	2300      	movs	r3, #0
 800856a:	4606      	mov	r6, r0
 800856c:	460f      	mov	r7, r1
 800856e:	f7f8 faab 	bl	8000ac8 <__aeabi_dcmpeq>
 8008572:	2800      	cmp	r0, #0
 8008574:	d09d      	beq.n	80084b2 <_dtoa_r+0x63a>
 8008576:	e7cf      	b.n	8008518 <_dtoa_r+0x6a0>
 8008578:	9a08      	ldr	r2, [sp, #32]
 800857a:	2a00      	cmp	r2, #0
 800857c:	f000 80d7 	beq.w	800872e <_dtoa_r+0x8b6>
 8008580:	9a06      	ldr	r2, [sp, #24]
 8008582:	2a01      	cmp	r2, #1
 8008584:	f300 80ba 	bgt.w	80086fc <_dtoa_r+0x884>
 8008588:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800858a:	2a00      	cmp	r2, #0
 800858c:	f000 80b2 	beq.w	80086f4 <_dtoa_r+0x87c>
 8008590:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008594:	9e07      	ldr	r6, [sp, #28]
 8008596:	9d04      	ldr	r5, [sp, #16]
 8008598:	9a04      	ldr	r2, [sp, #16]
 800859a:	441a      	add	r2, r3
 800859c:	9204      	str	r2, [sp, #16]
 800859e:	9a05      	ldr	r2, [sp, #20]
 80085a0:	2101      	movs	r1, #1
 80085a2:	441a      	add	r2, r3
 80085a4:	4620      	mov	r0, r4
 80085a6:	9205      	str	r2, [sp, #20]
 80085a8:	f000 fc60 	bl	8008e6c <__i2b>
 80085ac:	4607      	mov	r7, r0
 80085ae:	2d00      	cmp	r5, #0
 80085b0:	dd0c      	ble.n	80085cc <_dtoa_r+0x754>
 80085b2:	9b05      	ldr	r3, [sp, #20]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	dd09      	ble.n	80085cc <_dtoa_r+0x754>
 80085b8:	42ab      	cmp	r3, r5
 80085ba:	9a04      	ldr	r2, [sp, #16]
 80085bc:	bfa8      	it	ge
 80085be:	462b      	movge	r3, r5
 80085c0:	1ad2      	subs	r2, r2, r3
 80085c2:	9204      	str	r2, [sp, #16]
 80085c4:	9a05      	ldr	r2, [sp, #20]
 80085c6:	1aed      	subs	r5, r5, r3
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	9305      	str	r3, [sp, #20]
 80085cc:	9b07      	ldr	r3, [sp, #28]
 80085ce:	b31b      	cbz	r3, 8008618 <_dtoa_r+0x7a0>
 80085d0:	9b08      	ldr	r3, [sp, #32]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f000 80af 	beq.w	8008736 <_dtoa_r+0x8be>
 80085d8:	2e00      	cmp	r6, #0
 80085da:	dd13      	ble.n	8008604 <_dtoa_r+0x78c>
 80085dc:	4639      	mov	r1, r7
 80085de:	4632      	mov	r2, r6
 80085e0:	4620      	mov	r0, r4
 80085e2:	f000 fd03 	bl	8008fec <__pow5mult>
 80085e6:	ee18 2a10 	vmov	r2, s16
 80085ea:	4601      	mov	r1, r0
 80085ec:	4607      	mov	r7, r0
 80085ee:	4620      	mov	r0, r4
 80085f0:	f000 fc52 	bl	8008e98 <__multiply>
 80085f4:	ee18 1a10 	vmov	r1, s16
 80085f8:	4680      	mov	r8, r0
 80085fa:	4620      	mov	r0, r4
 80085fc:	f000 fb7e 	bl	8008cfc <_Bfree>
 8008600:	ee08 8a10 	vmov	s16, r8
 8008604:	9b07      	ldr	r3, [sp, #28]
 8008606:	1b9a      	subs	r2, r3, r6
 8008608:	d006      	beq.n	8008618 <_dtoa_r+0x7a0>
 800860a:	ee18 1a10 	vmov	r1, s16
 800860e:	4620      	mov	r0, r4
 8008610:	f000 fcec 	bl	8008fec <__pow5mult>
 8008614:	ee08 0a10 	vmov	s16, r0
 8008618:	2101      	movs	r1, #1
 800861a:	4620      	mov	r0, r4
 800861c:	f000 fc26 	bl	8008e6c <__i2b>
 8008620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008622:	2b00      	cmp	r3, #0
 8008624:	4606      	mov	r6, r0
 8008626:	f340 8088 	ble.w	800873a <_dtoa_r+0x8c2>
 800862a:	461a      	mov	r2, r3
 800862c:	4601      	mov	r1, r0
 800862e:	4620      	mov	r0, r4
 8008630:	f000 fcdc 	bl	8008fec <__pow5mult>
 8008634:	9b06      	ldr	r3, [sp, #24]
 8008636:	2b01      	cmp	r3, #1
 8008638:	4606      	mov	r6, r0
 800863a:	f340 8081 	ble.w	8008740 <_dtoa_r+0x8c8>
 800863e:	f04f 0800 	mov.w	r8, #0
 8008642:	6933      	ldr	r3, [r6, #16]
 8008644:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008648:	6918      	ldr	r0, [r3, #16]
 800864a:	f000 fbbf 	bl	8008dcc <__hi0bits>
 800864e:	f1c0 0020 	rsb	r0, r0, #32
 8008652:	9b05      	ldr	r3, [sp, #20]
 8008654:	4418      	add	r0, r3
 8008656:	f010 001f 	ands.w	r0, r0, #31
 800865a:	f000 8092 	beq.w	8008782 <_dtoa_r+0x90a>
 800865e:	f1c0 0320 	rsb	r3, r0, #32
 8008662:	2b04      	cmp	r3, #4
 8008664:	f340 808a 	ble.w	800877c <_dtoa_r+0x904>
 8008668:	f1c0 001c 	rsb	r0, r0, #28
 800866c:	9b04      	ldr	r3, [sp, #16]
 800866e:	4403      	add	r3, r0
 8008670:	9304      	str	r3, [sp, #16]
 8008672:	9b05      	ldr	r3, [sp, #20]
 8008674:	4403      	add	r3, r0
 8008676:	4405      	add	r5, r0
 8008678:	9305      	str	r3, [sp, #20]
 800867a:	9b04      	ldr	r3, [sp, #16]
 800867c:	2b00      	cmp	r3, #0
 800867e:	dd07      	ble.n	8008690 <_dtoa_r+0x818>
 8008680:	ee18 1a10 	vmov	r1, s16
 8008684:	461a      	mov	r2, r3
 8008686:	4620      	mov	r0, r4
 8008688:	f000 fd0a 	bl	80090a0 <__lshift>
 800868c:	ee08 0a10 	vmov	s16, r0
 8008690:	9b05      	ldr	r3, [sp, #20]
 8008692:	2b00      	cmp	r3, #0
 8008694:	dd05      	ble.n	80086a2 <_dtoa_r+0x82a>
 8008696:	4631      	mov	r1, r6
 8008698:	461a      	mov	r2, r3
 800869a:	4620      	mov	r0, r4
 800869c:	f000 fd00 	bl	80090a0 <__lshift>
 80086a0:	4606      	mov	r6, r0
 80086a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d06e      	beq.n	8008786 <_dtoa_r+0x90e>
 80086a8:	ee18 0a10 	vmov	r0, s16
 80086ac:	4631      	mov	r1, r6
 80086ae:	f000 fd67 	bl	8009180 <__mcmp>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	da67      	bge.n	8008786 <_dtoa_r+0x90e>
 80086b6:	9b00      	ldr	r3, [sp, #0]
 80086b8:	3b01      	subs	r3, #1
 80086ba:	ee18 1a10 	vmov	r1, s16
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	220a      	movs	r2, #10
 80086c2:	2300      	movs	r3, #0
 80086c4:	4620      	mov	r0, r4
 80086c6:	f000 fb3b 	bl	8008d40 <__multadd>
 80086ca:	9b08      	ldr	r3, [sp, #32]
 80086cc:	ee08 0a10 	vmov	s16, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f000 81b1 	beq.w	8008a38 <_dtoa_r+0xbc0>
 80086d6:	2300      	movs	r3, #0
 80086d8:	4639      	mov	r1, r7
 80086da:	220a      	movs	r2, #10
 80086dc:	4620      	mov	r0, r4
 80086de:	f000 fb2f 	bl	8008d40 <__multadd>
 80086e2:	9b02      	ldr	r3, [sp, #8]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	4607      	mov	r7, r0
 80086e8:	f300 808e 	bgt.w	8008808 <_dtoa_r+0x990>
 80086ec:	9b06      	ldr	r3, [sp, #24]
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	dc51      	bgt.n	8008796 <_dtoa_r+0x91e>
 80086f2:	e089      	b.n	8008808 <_dtoa_r+0x990>
 80086f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80086fa:	e74b      	b.n	8008594 <_dtoa_r+0x71c>
 80086fc:	9b03      	ldr	r3, [sp, #12]
 80086fe:	1e5e      	subs	r6, r3, #1
 8008700:	9b07      	ldr	r3, [sp, #28]
 8008702:	42b3      	cmp	r3, r6
 8008704:	bfbf      	itttt	lt
 8008706:	9b07      	ldrlt	r3, [sp, #28]
 8008708:	9607      	strlt	r6, [sp, #28]
 800870a:	1af2      	sublt	r2, r6, r3
 800870c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800870e:	bfb6      	itet	lt
 8008710:	189b      	addlt	r3, r3, r2
 8008712:	1b9e      	subge	r6, r3, r6
 8008714:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008716:	9b03      	ldr	r3, [sp, #12]
 8008718:	bfb8      	it	lt
 800871a:	2600      	movlt	r6, #0
 800871c:	2b00      	cmp	r3, #0
 800871e:	bfb7      	itett	lt
 8008720:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008724:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008728:	1a9d      	sublt	r5, r3, r2
 800872a:	2300      	movlt	r3, #0
 800872c:	e734      	b.n	8008598 <_dtoa_r+0x720>
 800872e:	9e07      	ldr	r6, [sp, #28]
 8008730:	9d04      	ldr	r5, [sp, #16]
 8008732:	9f08      	ldr	r7, [sp, #32]
 8008734:	e73b      	b.n	80085ae <_dtoa_r+0x736>
 8008736:	9a07      	ldr	r2, [sp, #28]
 8008738:	e767      	b.n	800860a <_dtoa_r+0x792>
 800873a:	9b06      	ldr	r3, [sp, #24]
 800873c:	2b01      	cmp	r3, #1
 800873e:	dc18      	bgt.n	8008772 <_dtoa_r+0x8fa>
 8008740:	f1ba 0f00 	cmp.w	sl, #0
 8008744:	d115      	bne.n	8008772 <_dtoa_r+0x8fa>
 8008746:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800874a:	b993      	cbnz	r3, 8008772 <_dtoa_r+0x8fa>
 800874c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008750:	0d1b      	lsrs	r3, r3, #20
 8008752:	051b      	lsls	r3, r3, #20
 8008754:	b183      	cbz	r3, 8008778 <_dtoa_r+0x900>
 8008756:	9b04      	ldr	r3, [sp, #16]
 8008758:	3301      	adds	r3, #1
 800875a:	9304      	str	r3, [sp, #16]
 800875c:	9b05      	ldr	r3, [sp, #20]
 800875e:	3301      	adds	r3, #1
 8008760:	9305      	str	r3, [sp, #20]
 8008762:	f04f 0801 	mov.w	r8, #1
 8008766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008768:	2b00      	cmp	r3, #0
 800876a:	f47f af6a 	bne.w	8008642 <_dtoa_r+0x7ca>
 800876e:	2001      	movs	r0, #1
 8008770:	e76f      	b.n	8008652 <_dtoa_r+0x7da>
 8008772:	f04f 0800 	mov.w	r8, #0
 8008776:	e7f6      	b.n	8008766 <_dtoa_r+0x8ee>
 8008778:	4698      	mov	r8, r3
 800877a:	e7f4      	b.n	8008766 <_dtoa_r+0x8ee>
 800877c:	f43f af7d 	beq.w	800867a <_dtoa_r+0x802>
 8008780:	4618      	mov	r0, r3
 8008782:	301c      	adds	r0, #28
 8008784:	e772      	b.n	800866c <_dtoa_r+0x7f4>
 8008786:	9b03      	ldr	r3, [sp, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	dc37      	bgt.n	80087fc <_dtoa_r+0x984>
 800878c:	9b06      	ldr	r3, [sp, #24]
 800878e:	2b02      	cmp	r3, #2
 8008790:	dd34      	ble.n	80087fc <_dtoa_r+0x984>
 8008792:	9b03      	ldr	r3, [sp, #12]
 8008794:	9302      	str	r3, [sp, #8]
 8008796:	9b02      	ldr	r3, [sp, #8]
 8008798:	b96b      	cbnz	r3, 80087b6 <_dtoa_r+0x93e>
 800879a:	4631      	mov	r1, r6
 800879c:	2205      	movs	r2, #5
 800879e:	4620      	mov	r0, r4
 80087a0:	f000 face 	bl	8008d40 <__multadd>
 80087a4:	4601      	mov	r1, r0
 80087a6:	4606      	mov	r6, r0
 80087a8:	ee18 0a10 	vmov	r0, s16
 80087ac:	f000 fce8 	bl	8009180 <__mcmp>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	f73f adbb 	bgt.w	800832c <_dtoa_r+0x4b4>
 80087b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b8:	9d01      	ldr	r5, [sp, #4]
 80087ba:	43db      	mvns	r3, r3
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	f04f 0800 	mov.w	r8, #0
 80087c2:	4631      	mov	r1, r6
 80087c4:	4620      	mov	r0, r4
 80087c6:	f000 fa99 	bl	8008cfc <_Bfree>
 80087ca:	2f00      	cmp	r7, #0
 80087cc:	f43f aea4 	beq.w	8008518 <_dtoa_r+0x6a0>
 80087d0:	f1b8 0f00 	cmp.w	r8, #0
 80087d4:	d005      	beq.n	80087e2 <_dtoa_r+0x96a>
 80087d6:	45b8      	cmp	r8, r7
 80087d8:	d003      	beq.n	80087e2 <_dtoa_r+0x96a>
 80087da:	4641      	mov	r1, r8
 80087dc:	4620      	mov	r0, r4
 80087de:	f000 fa8d 	bl	8008cfc <_Bfree>
 80087e2:	4639      	mov	r1, r7
 80087e4:	4620      	mov	r0, r4
 80087e6:	f000 fa89 	bl	8008cfc <_Bfree>
 80087ea:	e695      	b.n	8008518 <_dtoa_r+0x6a0>
 80087ec:	2600      	movs	r6, #0
 80087ee:	4637      	mov	r7, r6
 80087f0:	e7e1      	b.n	80087b6 <_dtoa_r+0x93e>
 80087f2:	9700      	str	r7, [sp, #0]
 80087f4:	4637      	mov	r7, r6
 80087f6:	e599      	b.n	800832c <_dtoa_r+0x4b4>
 80087f8:	40240000 	.word	0x40240000
 80087fc:	9b08      	ldr	r3, [sp, #32]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f000 80ca 	beq.w	8008998 <_dtoa_r+0xb20>
 8008804:	9b03      	ldr	r3, [sp, #12]
 8008806:	9302      	str	r3, [sp, #8]
 8008808:	2d00      	cmp	r5, #0
 800880a:	dd05      	ble.n	8008818 <_dtoa_r+0x9a0>
 800880c:	4639      	mov	r1, r7
 800880e:	462a      	mov	r2, r5
 8008810:	4620      	mov	r0, r4
 8008812:	f000 fc45 	bl	80090a0 <__lshift>
 8008816:	4607      	mov	r7, r0
 8008818:	f1b8 0f00 	cmp.w	r8, #0
 800881c:	d05b      	beq.n	80088d6 <_dtoa_r+0xa5e>
 800881e:	6879      	ldr	r1, [r7, #4]
 8008820:	4620      	mov	r0, r4
 8008822:	f000 fa2b 	bl	8008c7c <_Balloc>
 8008826:	4605      	mov	r5, r0
 8008828:	b928      	cbnz	r0, 8008836 <_dtoa_r+0x9be>
 800882a:	4b87      	ldr	r3, [pc, #540]	; (8008a48 <_dtoa_r+0xbd0>)
 800882c:	4602      	mov	r2, r0
 800882e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008832:	f7ff bb3b 	b.w	8007eac <_dtoa_r+0x34>
 8008836:	693a      	ldr	r2, [r7, #16]
 8008838:	3202      	adds	r2, #2
 800883a:	0092      	lsls	r2, r2, #2
 800883c:	f107 010c 	add.w	r1, r7, #12
 8008840:	300c      	adds	r0, #12
 8008842:	f000 fa0d 	bl	8008c60 <memcpy>
 8008846:	2201      	movs	r2, #1
 8008848:	4629      	mov	r1, r5
 800884a:	4620      	mov	r0, r4
 800884c:	f000 fc28 	bl	80090a0 <__lshift>
 8008850:	9b01      	ldr	r3, [sp, #4]
 8008852:	f103 0901 	add.w	r9, r3, #1
 8008856:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800885a:	4413      	add	r3, r2
 800885c:	9305      	str	r3, [sp, #20]
 800885e:	f00a 0301 	and.w	r3, sl, #1
 8008862:	46b8      	mov	r8, r7
 8008864:	9304      	str	r3, [sp, #16]
 8008866:	4607      	mov	r7, r0
 8008868:	4631      	mov	r1, r6
 800886a:	ee18 0a10 	vmov	r0, s16
 800886e:	f7ff fa77 	bl	8007d60 <quorem>
 8008872:	4641      	mov	r1, r8
 8008874:	9002      	str	r0, [sp, #8]
 8008876:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800887a:	ee18 0a10 	vmov	r0, s16
 800887e:	f000 fc7f 	bl	8009180 <__mcmp>
 8008882:	463a      	mov	r2, r7
 8008884:	9003      	str	r0, [sp, #12]
 8008886:	4631      	mov	r1, r6
 8008888:	4620      	mov	r0, r4
 800888a:	f000 fc95 	bl	80091b8 <__mdiff>
 800888e:	68c2      	ldr	r2, [r0, #12]
 8008890:	f109 3bff 	add.w	fp, r9, #4294967295
 8008894:	4605      	mov	r5, r0
 8008896:	bb02      	cbnz	r2, 80088da <_dtoa_r+0xa62>
 8008898:	4601      	mov	r1, r0
 800889a:	ee18 0a10 	vmov	r0, s16
 800889e:	f000 fc6f 	bl	8009180 <__mcmp>
 80088a2:	4602      	mov	r2, r0
 80088a4:	4629      	mov	r1, r5
 80088a6:	4620      	mov	r0, r4
 80088a8:	9207      	str	r2, [sp, #28]
 80088aa:	f000 fa27 	bl	8008cfc <_Bfree>
 80088ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80088b2:	ea43 0102 	orr.w	r1, r3, r2
 80088b6:	9b04      	ldr	r3, [sp, #16]
 80088b8:	430b      	orrs	r3, r1
 80088ba:	464d      	mov	r5, r9
 80088bc:	d10f      	bne.n	80088de <_dtoa_r+0xa66>
 80088be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80088c2:	d02a      	beq.n	800891a <_dtoa_r+0xaa2>
 80088c4:	9b03      	ldr	r3, [sp, #12]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	dd02      	ble.n	80088d0 <_dtoa_r+0xa58>
 80088ca:	9b02      	ldr	r3, [sp, #8]
 80088cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80088d0:	f88b a000 	strb.w	sl, [fp]
 80088d4:	e775      	b.n	80087c2 <_dtoa_r+0x94a>
 80088d6:	4638      	mov	r0, r7
 80088d8:	e7ba      	b.n	8008850 <_dtoa_r+0x9d8>
 80088da:	2201      	movs	r2, #1
 80088dc:	e7e2      	b.n	80088a4 <_dtoa_r+0xa2c>
 80088de:	9b03      	ldr	r3, [sp, #12]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	db04      	blt.n	80088ee <_dtoa_r+0xa76>
 80088e4:	9906      	ldr	r1, [sp, #24]
 80088e6:	430b      	orrs	r3, r1
 80088e8:	9904      	ldr	r1, [sp, #16]
 80088ea:	430b      	orrs	r3, r1
 80088ec:	d122      	bne.n	8008934 <_dtoa_r+0xabc>
 80088ee:	2a00      	cmp	r2, #0
 80088f0:	ddee      	ble.n	80088d0 <_dtoa_r+0xa58>
 80088f2:	ee18 1a10 	vmov	r1, s16
 80088f6:	2201      	movs	r2, #1
 80088f8:	4620      	mov	r0, r4
 80088fa:	f000 fbd1 	bl	80090a0 <__lshift>
 80088fe:	4631      	mov	r1, r6
 8008900:	ee08 0a10 	vmov	s16, r0
 8008904:	f000 fc3c 	bl	8009180 <__mcmp>
 8008908:	2800      	cmp	r0, #0
 800890a:	dc03      	bgt.n	8008914 <_dtoa_r+0xa9c>
 800890c:	d1e0      	bne.n	80088d0 <_dtoa_r+0xa58>
 800890e:	f01a 0f01 	tst.w	sl, #1
 8008912:	d0dd      	beq.n	80088d0 <_dtoa_r+0xa58>
 8008914:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008918:	d1d7      	bne.n	80088ca <_dtoa_r+0xa52>
 800891a:	2339      	movs	r3, #57	; 0x39
 800891c:	f88b 3000 	strb.w	r3, [fp]
 8008920:	462b      	mov	r3, r5
 8008922:	461d      	mov	r5, r3
 8008924:	3b01      	subs	r3, #1
 8008926:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800892a:	2a39      	cmp	r2, #57	; 0x39
 800892c:	d071      	beq.n	8008a12 <_dtoa_r+0xb9a>
 800892e:	3201      	adds	r2, #1
 8008930:	701a      	strb	r2, [r3, #0]
 8008932:	e746      	b.n	80087c2 <_dtoa_r+0x94a>
 8008934:	2a00      	cmp	r2, #0
 8008936:	dd07      	ble.n	8008948 <_dtoa_r+0xad0>
 8008938:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800893c:	d0ed      	beq.n	800891a <_dtoa_r+0xaa2>
 800893e:	f10a 0301 	add.w	r3, sl, #1
 8008942:	f88b 3000 	strb.w	r3, [fp]
 8008946:	e73c      	b.n	80087c2 <_dtoa_r+0x94a>
 8008948:	9b05      	ldr	r3, [sp, #20]
 800894a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800894e:	4599      	cmp	r9, r3
 8008950:	d047      	beq.n	80089e2 <_dtoa_r+0xb6a>
 8008952:	ee18 1a10 	vmov	r1, s16
 8008956:	2300      	movs	r3, #0
 8008958:	220a      	movs	r2, #10
 800895a:	4620      	mov	r0, r4
 800895c:	f000 f9f0 	bl	8008d40 <__multadd>
 8008960:	45b8      	cmp	r8, r7
 8008962:	ee08 0a10 	vmov	s16, r0
 8008966:	f04f 0300 	mov.w	r3, #0
 800896a:	f04f 020a 	mov.w	r2, #10
 800896e:	4641      	mov	r1, r8
 8008970:	4620      	mov	r0, r4
 8008972:	d106      	bne.n	8008982 <_dtoa_r+0xb0a>
 8008974:	f000 f9e4 	bl	8008d40 <__multadd>
 8008978:	4680      	mov	r8, r0
 800897a:	4607      	mov	r7, r0
 800897c:	f109 0901 	add.w	r9, r9, #1
 8008980:	e772      	b.n	8008868 <_dtoa_r+0x9f0>
 8008982:	f000 f9dd 	bl	8008d40 <__multadd>
 8008986:	4639      	mov	r1, r7
 8008988:	4680      	mov	r8, r0
 800898a:	2300      	movs	r3, #0
 800898c:	220a      	movs	r2, #10
 800898e:	4620      	mov	r0, r4
 8008990:	f000 f9d6 	bl	8008d40 <__multadd>
 8008994:	4607      	mov	r7, r0
 8008996:	e7f1      	b.n	800897c <_dtoa_r+0xb04>
 8008998:	9b03      	ldr	r3, [sp, #12]
 800899a:	9302      	str	r3, [sp, #8]
 800899c:	9d01      	ldr	r5, [sp, #4]
 800899e:	ee18 0a10 	vmov	r0, s16
 80089a2:	4631      	mov	r1, r6
 80089a4:	f7ff f9dc 	bl	8007d60 <quorem>
 80089a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80089ac:	9b01      	ldr	r3, [sp, #4]
 80089ae:	f805 ab01 	strb.w	sl, [r5], #1
 80089b2:	1aea      	subs	r2, r5, r3
 80089b4:	9b02      	ldr	r3, [sp, #8]
 80089b6:	4293      	cmp	r3, r2
 80089b8:	dd09      	ble.n	80089ce <_dtoa_r+0xb56>
 80089ba:	ee18 1a10 	vmov	r1, s16
 80089be:	2300      	movs	r3, #0
 80089c0:	220a      	movs	r2, #10
 80089c2:	4620      	mov	r0, r4
 80089c4:	f000 f9bc 	bl	8008d40 <__multadd>
 80089c8:	ee08 0a10 	vmov	s16, r0
 80089cc:	e7e7      	b.n	800899e <_dtoa_r+0xb26>
 80089ce:	9b02      	ldr	r3, [sp, #8]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	bfc8      	it	gt
 80089d4:	461d      	movgt	r5, r3
 80089d6:	9b01      	ldr	r3, [sp, #4]
 80089d8:	bfd8      	it	le
 80089da:	2501      	movle	r5, #1
 80089dc:	441d      	add	r5, r3
 80089de:	f04f 0800 	mov.w	r8, #0
 80089e2:	ee18 1a10 	vmov	r1, s16
 80089e6:	2201      	movs	r2, #1
 80089e8:	4620      	mov	r0, r4
 80089ea:	f000 fb59 	bl	80090a0 <__lshift>
 80089ee:	4631      	mov	r1, r6
 80089f0:	ee08 0a10 	vmov	s16, r0
 80089f4:	f000 fbc4 	bl	8009180 <__mcmp>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	dc91      	bgt.n	8008920 <_dtoa_r+0xaa8>
 80089fc:	d102      	bne.n	8008a04 <_dtoa_r+0xb8c>
 80089fe:	f01a 0f01 	tst.w	sl, #1
 8008a02:	d18d      	bne.n	8008920 <_dtoa_r+0xaa8>
 8008a04:	462b      	mov	r3, r5
 8008a06:	461d      	mov	r5, r3
 8008a08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a0c:	2a30      	cmp	r2, #48	; 0x30
 8008a0e:	d0fa      	beq.n	8008a06 <_dtoa_r+0xb8e>
 8008a10:	e6d7      	b.n	80087c2 <_dtoa_r+0x94a>
 8008a12:	9a01      	ldr	r2, [sp, #4]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d184      	bne.n	8008922 <_dtoa_r+0xaaa>
 8008a18:	9b00      	ldr	r3, [sp, #0]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	2331      	movs	r3, #49	; 0x31
 8008a20:	7013      	strb	r3, [r2, #0]
 8008a22:	e6ce      	b.n	80087c2 <_dtoa_r+0x94a>
 8008a24:	4b09      	ldr	r3, [pc, #36]	; (8008a4c <_dtoa_r+0xbd4>)
 8008a26:	f7ff ba95 	b.w	8007f54 <_dtoa_r+0xdc>
 8008a2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f47f aa6e 	bne.w	8007f0e <_dtoa_r+0x96>
 8008a32:	4b07      	ldr	r3, [pc, #28]	; (8008a50 <_dtoa_r+0xbd8>)
 8008a34:	f7ff ba8e 	b.w	8007f54 <_dtoa_r+0xdc>
 8008a38:	9b02      	ldr	r3, [sp, #8]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	dcae      	bgt.n	800899c <_dtoa_r+0xb24>
 8008a3e:	9b06      	ldr	r3, [sp, #24]
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	f73f aea8 	bgt.w	8008796 <_dtoa_r+0x91e>
 8008a46:	e7a9      	b.n	800899c <_dtoa_r+0xb24>
 8008a48:	0800a01f 	.word	0x0800a01f
 8008a4c:	08009f7c 	.word	0x08009f7c
 8008a50:	08009fa0 	.word	0x08009fa0

08008a54 <std>:
 8008a54:	2300      	movs	r3, #0
 8008a56:	b510      	push	{r4, lr}
 8008a58:	4604      	mov	r4, r0
 8008a5a:	e9c0 3300 	strd	r3, r3, [r0]
 8008a5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a62:	6083      	str	r3, [r0, #8]
 8008a64:	8181      	strh	r1, [r0, #12]
 8008a66:	6643      	str	r3, [r0, #100]	; 0x64
 8008a68:	81c2      	strh	r2, [r0, #14]
 8008a6a:	6183      	str	r3, [r0, #24]
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	2208      	movs	r2, #8
 8008a70:	305c      	adds	r0, #92	; 0x5c
 8008a72:	f7fe fceb 	bl	800744c <memset>
 8008a76:	4b05      	ldr	r3, [pc, #20]	; (8008a8c <std+0x38>)
 8008a78:	6263      	str	r3, [r4, #36]	; 0x24
 8008a7a:	4b05      	ldr	r3, [pc, #20]	; (8008a90 <std+0x3c>)
 8008a7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a7e:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <std+0x40>)
 8008a80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a82:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <std+0x44>)
 8008a84:	6224      	str	r4, [r4, #32]
 8008a86:	6323      	str	r3, [r4, #48]	; 0x30
 8008a88:	bd10      	pop	{r4, pc}
 8008a8a:	bf00      	nop
 8008a8c:	08009845 	.word	0x08009845
 8008a90:	08009867 	.word	0x08009867
 8008a94:	0800989f 	.word	0x0800989f
 8008a98:	080098c3 	.word	0x080098c3

08008a9c <_cleanup_r>:
 8008a9c:	4901      	ldr	r1, [pc, #4]	; (8008aa4 <_cleanup_r+0x8>)
 8008a9e:	f000 b8af 	b.w	8008c00 <_fwalk_reent>
 8008aa2:	bf00      	nop
 8008aa4:	08009bd9 	.word	0x08009bd9

08008aa8 <__sfmoreglue>:
 8008aa8:	b570      	push	{r4, r5, r6, lr}
 8008aaa:	2268      	movs	r2, #104	; 0x68
 8008aac:	1e4d      	subs	r5, r1, #1
 8008aae:	4355      	muls	r5, r2
 8008ab0:	460e      	mov	r6, r1
 8008ab2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ab6:	f000 fce7 	bl	8009488 <_malloc_r>
 8008aba:	4604      	mov	r4, r0
 8008abc:	b140      	cbz	r0, 8008ad0 <__sfmoreglue+0x28>
 8008abe:	2100      	movs	r1, #0
 8008ac0:	e9c0 1600 	strd	r1, r6, [r0]
 8008ac4:	300c      	adds	r0, #12
 8008ac6:	60a0      	str	r0, [r4, #8]
 8008ac8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008acc:	f7fe fcbe 	bl	800744c <memset>
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	bd70      	pop	{r4, r5, r6, pc}

08008ad4 <__sfp_lock_acquire>:
 8008ad4:	4801      	ldr	r0, [pc, #4]	; (8008adc <__sfp_lock_acquire+0x8>)
 8008ad6:	f000 b8b8 	b.w	8008c4a <__retarget_lock_acquire_recursive>
 8008ada:	bf00      	nop
 8008adc:	200004d1 	.word	0x200004d1

08008ae0 <__sfp_lock_release>:
 8008ae0:	4801      	ldr	r0, [pc, #4]	; (8008ae8 <__sfp_lock_release+0x8>)
 8008ae2:	f000 b8b3 	b.w	8008c4c <__retarget_lock_release_recursive>
 8008ae6:	bf00      	nop
 8008ae8:	200004d1 	.word	0x200004d1

08008aec <__sinit_lock_acquire>:
 8008aec:	4801      	ldr	r0, [pc, #4]	; (8008af4 <__sinit_lock_acquire+0x8>)
 8008aee:	f000 b8ac 	b.w	8008c4a <__retarget_lock_acquire_recursive>
 8008af2:	bf00      	nop
 8008af4:	200004d2 	.word	0x200004d2

08008af8 <__sinit_lock_release>:
 8008af8:	4801      	ldr	r0, [pc, #4]	; (8008b00 <__sinit_lock_release+0x8>)
 8008afa:	f000 b8a7 	b.w	8008c4c <__retarget_lock_release_recursive>
 8008afe:	bf00      	nop
 8008b00:	200004d2 	.word	0x200004d2

08008b04 <__sinit>:
 8008b04:	b510      	push	{r4, lr}
 8008b06:	4604      	mov	r4, r0
 8008b08:	f7ff fff0 	bl	8008aec <__sinit_lock_acquire>
 8008b0c:	69a3      	ldr	r3, [r4, #24]
 8008b0e:	b11b      	cbz	r3, 8008b18 <__sinit+0x14>
 8008b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b14:	f7ff bff0 	b.w	8008af8 <__sinit_lock_release>
 8008b18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b1c:	6523      	str	r3, [r4, #80]	; 0x50
 8008b1e:	4b13      	ldr	r3, [pc, #76]	; (8008b6c <__sinit+0x68>)
 8008b20:	4a13      	ldr	r2, [pc, #76]	; (8008b70 <__sinit+0x6c>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b26:	42a3      	cmp	r3, r4
 8008b28:	bf04      	itt	eq
 8008b2a:	2301      	moveq	r3, #1
 8008b2c:	61a3      	streq	r3, [r4, #24]
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f000 f820 	bl	8008b74 <__sfp>
 8008b34:	6060      	str	r0, [r4, #4]
 8008b36:	4620      	mov	r0, r4
 8008b38:	f000 f81c 	bl	8008b74 <__sfp>
 8008b3c:	60a0      	str	r0, [r4, #8]
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f000 f818 	bl	8008b74 <__sfp>
 8008b44:	2200      	movs	r2, #0
 8008b46:	60e0      	str	r0, [r4, #12]
 8008b48:	2104      	movs	r1, #4
 8008b4a:	6860      	ldr	r0, [r4, #4]
 8008b4c:	f7ff ff82 	bl	8008a54 <std>
 8008b50:	68a0      	ldr	r0, [r4, #8]
 8008b52:	2201      	movs	r2, #1
 8008b54:	2109      	movs	r1, #9
 8008b56:	f7ff ff7d 	bl	8008a54 <std>
 8008b5a:	68e0      	ldr	r0, [r4, #12]
 8008b5c:	2202      	movs	r2, #2
 8008b5e:	2112      	movs	r1, #18
 8008b60:	f7ff ff78 	bl	8008a54 <std>
 8008b64:	2301      	movs	r3, #1
 8008b66:	61a3      	str	r3, [r4, #24]
 8008b68:	e7d2      	b.n	8008b10 <__sinit+0xc>
 8008b6a:	bf00      	nop
 8008b6c:	08009f68 	.word	0x08009f68
 8008b70:	08008a9d 	.word	0x08008a9d

08008b74 <__sfp>:
 8008b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b76:	4607      	mov	r7, r0
 8008b78:	f7ff ffac 	bl	8008ad4 <__sfp_lock_acquire>
 8008b7c:	4b1e      	ldr	r3, [pc, #120]	; (8008bf8 <__sfp+0x84>)
 8008b7e:	681e      	ldr	r6, [r3, #0]
 8008b80:	69b3      	ldr	r3, [r6, #24]
 8008b82:	b913      	cbnz	r3, 8008b8a <__sfp+0x16>
 8008b84:	4630      	mov	r0, r6
 8008b86:	f7ff ffbd 	bl	8008b04 <__sinit>
 8008b8a:	3648      	adds	r6, #72	; 0x48
 8008b8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	d503      	bpl.n	8008b9c <__sfp+0x28>
 8008b94:	6833      	ldr	r3, [r6, #0]
 8008b96:	b30b      	cbz	r3, 8008bdc <__sfp+0x68>
 8008b98:	6836      	ldr	r6, [r6, #0]
 8008b9a:	e7f7      	b.n	8008b8c <__sfp+0x18>
 8008b9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ba0:	b9d5      	cbnz	r5, 8008bd8 <__sfp+0x64>
 8008ba2:	4b16      	ldr	r3, [pc, #88]	; (8008bfc <__sfp+0x88>)
 8008ba4:	60e3      	str	r3, [r4, #12]
 8008ba6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008baa:	6665      	str	r5, [r4, #100]	; 0x64
 8008bac:	f000 f84c 	bl	8008c48 <__retarget_lock_init_recursive>
 8008bb0:	f7ff ff96 	bl	8008ae0 <__sfp_lock_release>
 8008bb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008bb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008bbc:	6025      	str	r5, [r4, #0]
 8008bbe:	61a5      	str	r5, [r4, #24]
 8008bc0:	2208      	movs	r2, #8
 8008bc2:	4629      	mov	r1, r5
 8008bc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008bc8:	f7fe fc40 	bl	800744c <memset>
 8008bcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008bd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bd8:	3468      	adds	r4, #104	; 0x68
 8008bda:	e7d9      	b.n	8008b90 <__sfp+0x1c>
 8008bdc:	2104      	movs	r1, #4
 8008bde:	4638      	mov	r0, r7
 8008be0:	f7ff ff62 	bl	8008aa8 <__sfmoreglue>
 8008be4:	4604      	mov	r4, r0
 8008be6:	6030      	str	r0, [r6, #0]
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d1d5      	bne.n	8008b98 <__sfp+0x24>
 8008bec:	f7ff ff78 	bl	8008ae0 <__sfp_lock_release>
 8008bf0:	230c      	movs	r3, #12
 8008bf2:	603b      	str	r3, [r7, #0]
 8008bf4:	e7ee      	b.n	8008bd4 <__sfp+0x60>
 8008bf6:	bf00      	nop
 8008bf8:	08009f68 	.word	0x08009f68
 8008bfc:	ffff0001 	.word	0xffff0001

08008c00 <_fwalk_reent>:
 8008c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c04:	4606      	mov	r6, r0
 8008c06:	4688      	mov	r8, r1
 8008c08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c0c:	2700      	movs	r7, #0
 8008c0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c12:	f1b9 0901 	subs.w	r9, r9, #1
 8008c16:	d505      	bpl.n	8008c24 <_fwalk_reent+0x24>
 8008c18:	6824      	ldr	r4, [r4, #0]
 8008c1a:	2c00      	cmp	r4, #0
 8008c1c:	d1f7      	bne.n	8008c0e <_fwalk_reent+0xe>
 8008c1e:	4638      	mov	r0, r7
 8008c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c24:	89ab      	ldrh	r3, [r5, #12]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d907      	bls.n	8008c3a <_fwalk_reent+0x3a>
 8008c2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	d003      	beq.n	8008c3a <_fwalk_reent+0x3a>
 8008c32:	4629      	mov	r1, r5
 8008c34:	4630      	mov	r0, r6
 8008c36:	47c0      	blx	r8
 8008c38:	4307      	orrs	r7, r0
 8008c3a:	3568      	adds	r5, #104	; 0x68
 8008c3c:	e7e9      	b.n	8008c12 <_fwalk_reent+0x12>
	...

08008c40 <_localeconv_r>:
 8008c40:	4800      	ldr	r0, [pc, #0]	; (8008c44 <_localeconv_r+0x4>)
 8008c42:	4770      	bx	lr
 8008c44:	20000160 	.word	0x20000160

08008c48 <__retarget_lock_init_recursive>:
 8008c48:	4770      	bx	lr

08008c4a <__retarget_lock_acquire_recursive>:
 8008c4a:	4770      	bx	lr

08008c4c <__retarget_lock_release_recursive>:
 8008c4c:	4770      	bx	lr
	...

08008c50 <malloc>:
 8008c50:	4b02      	ldr	r3, [pc, #8]	; (8008c5c <malloc+0xc>)
 8008c52:	4601      	mov	r1, r0
 8008c54:	6818      	ldr	r0, [r3, #0]
 8008c56:	f000 bc17 	b.w	8009488 <_malloc_r>
 8008c5a:	bf00      	nop
 8008c5c:	2000000c 	.word	0x2000000c

08008c60 <memcpy>:
 8008c60:	440a      	add	r2, r1
 8008c62:	4291      	cmp	r1, r2
 8008c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c68:	d100      	bne.n	8008c6c <memcpy+0xc>
 8008c6a:	4770      	bx	lr
 8008c6c:	b510      	push	{r4, lr}
 8008c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c76:	4291      	cmp	r1, r2
 8008c78:	d1f9      	bne.n	8008c6e <memcpy+0xe>
 8008c7a:	bd10      	pop	{r4, pc}

08008c7c <_Balloc>:
 8008c7c:	b570      	push	{r4, r5, r6, lr}
 8008c7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c80:	4604      	mov	r4, r0
 8008c82:	460d      	mov	r5, r1
 8008c84:	b976      	cbnz	r6, 8008ca4 <_Balloc+0x28>
 8008c86:	2010      	movs	r0, #16
 8008c88:	f7ff ffe2 	bl	8008c50 <malloc>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	6260      	str	r0, [r4, #36]	; 0x24
 8008c90:	b920      	cbnz	r0, 8008c9c <_Balloc+0x20>
 8008c92:	4b18      	ldr	r3, [pc, #96]	; (8008cf4 <_Balloc+0x78>)
 8008c94:	4818      	ldr	r0, [pc, #96]	; (8008cf8 <_Balloc+0x7c>)
 8008c96:	2166      	movs	r1, #102	; 0x66
 8008c98:	f000 feea 	bl	8009a70 <__assert_func>
 8008c9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ca0:	6006      	str	r6, [r0, #0]
 8008ca2:	60c6      	str	r6, [r0, #12]
 8008ca4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008ca6:	68f3      	ldr	r3, [r6, #12]
 8008ca8:	b183      	cbz	r3, 8008ccc <_Balloc+0x50>
 8008caa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008cb2:	b9b8      	cbnz	r0, 8008ce4 <_Balloc+0x68>
 8008cb4:	2101      	movs	r1, #1
 8008cb6:	fa01 f605 	lsl.w	r6, r1, r5
 8008cba:	1d72      	adds	r2, r6, #5
 8008cbc:	0092      	lsls	r2, r2, #2
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f000 fb60 	bl	8009384 <_calloc_r>
 8008cc4:	b160      	cbz	r0, 8008ce0 <_Balloc+0x64>
 8008cc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008cca:	e00e      	b.n	8008cea <_Balloc+0x6e>
 8008ccc:	2221      	movs	r2, #33	; 0x21
 8008cce:	2104      	movs	r1, #4
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	f000 fb57 	bl	8009384 <_calloc_r>
 8008cd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cd8:	60f0      	str	r0, [r6, #12]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1e4      	bne.n	8008caa <_Balloc+0x2e>
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	bd70      	pop	{r4, r5, r6, pc}
 8008ce4:	6802      	ldr	r2, [r0, #0]
 8008ce6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008cea:	2300      	movs	r3, #0
 8008cec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008cf0:	e7f7      	b.n	8008ce2 <_Balloc+0x66>
 8008cf2:	bf00      	nop
 8008cf4:	08009fad 	.word	0x08009fad
 8008cf8:	0800a090 	.word	0x0800a090

08008cfc <_Bfree>:
 8008cfc:	b570      	push	{r4, r5, r6, lr}
 8008cfe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d00:	4605      	mov	r5, r0
 8008d02:	460c      	mov	r4, r1
 8008d04:	b976      	cbnz	r6, 8008d24 <_Bfree+0x28>
 8008d06:	2010      	movs	r0, #16
 8008d08:	f7ff ffa2 	bl	8008c50 <malloc>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	6268      	str	r0, [r5, #36]	; 0x24
 8008d10:	b920      	cbnz	r0, 8008d1c <_Bfree+0x20>
 8008d12:	4b09      	ldr	r3, [pc, #36]	; (8008d38 <_Bfree+0x3c>)
 8008d14:	4809      	ldr	r0, [pc, #36]	; (8008d3c <_Bfree+0x40>)
 8008d16:	218a      	movs	r1, #138	; 0x8a
 8008d18:	f000 feaa 	bl	8009a70 <__assert_func>
 8008d1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d20:	6006      	str	r6, [r0, #0]
 8008d22:	60c6      	str	r6, [r0, #12]
 8008d24:	b13c      	cbz	r4, 8008d36 <_Bfree+0x3a>
 8008d26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d28:	6862      	ldr	r2, [r4, #4]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d30:	6021      	str	r1, [r4, #0]
 8008d32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d36:	bd70      	pop	{r4, r5, r6, pc}
 8008d38:	08009fad 	.word	0x08009fad
 8008d3c:	0800a090 	.word	0x0800a090

08008d40 <__multadd>:
 8008d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d44:	690d      	ldr	r5, [r1, #16]
 8008d46:	4607      	mov	r7, r0
 8008d48:	460c      	mov	r4, r1
 8008d4a:	461e      	mov	r6, r3
 8008d4c:	f101 0c14 	add.w	ip, r1, #20
 8008d50:	2000      	movs	r0, #0
 8008d52:	f8dc 3000 	ldr.w	r3, [ip]
 8008d56:	b299      	uxth	r1, r3
 8008d58:	fb02 6101 	mla	r1, r2, r1, r6
 8008d5c:	0c1e      	lsrs	r6, r3, #16
 8008d5e:	0c0b      	lsrs	r3, r1, #16
 8008d60:	fb02 3306 	mla	r3, r2, r6, r3
 8008d64:	b289      	uxth	r1, r1
 8008d66:	3001      	adds	r0, #1
 8008d68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d6c:	4285      	cmp	r5, r0
 8008d6e:	f84c 1b04 	str.w	r1, [ip], #4
 8008d72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d76:	dcec      	bgt.n	8008d52 <__multadd+0x12>
 8008d78:	b30e      	cbz	r6, 8008dbe <__multadd+0x7e>
 8008d7a:	68a3      	ldr	r3, [r4, #8]
 8008d7c:	42ab      	cmp	r3, r5
 8008d7e:	dc19      	bgt.n	8008db4 <__multadd+0x74>
 8008d80:	6861      	ldr	r1, [r4, #4]
 8008d82:	4638      	mov	r0, r7
 8008d84:	3101      	adds	r1, #1
 8008d86:	f7ff ff79 	bl	8008c7c <_Balloc>
 8008d8a:	4680      	mov	r8, r0
 8008d8c:	b928      	cbnz	r0, 8008d9a <__multadd+0x5a>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	4b0c      	ldr	r3, [pc, #48]	; (8008dc4 <__multadd+0x84>)
 8008d92:	480d      	ldr	r0, [pc, #52]	; (8008dc8 <__multadd+0x88>)
 8008d94:	21b5      	movs	r1, #181	; 0xb5
 8008d96:	f000 fe6b 	bl	8009a70 <__assert_func>
 8008d9a:	6922      	ldr	r2, [r4, #16]
 8008d9c:	3202      	adds	r2, #2
 8008d9e:	f104 010c 	add.w	r1, r4, #12
 8008da2:	0092      	lsls	r2, r2, #2
 8008da4:	300c      	adds	r0, #12
 8008da6:	f7ff ff5b 	bl	8008c60 <memcpy>
 8008daa:	4621      	mov	r1, r4
 8008dac:	4638      	mov	r0, r7
 8008dae:	f7ff ffa5 	bl	8008cfc <_Bfree>
 8008db2:	4644      	mov	r4, r8
 8008db4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008db8:	3501      	adds	r5, #1
 8008dba:	615e      	str	r6, [r3, #20]
 8008dbc:	6125      	str	r5, [r4, #16]
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dc4:	0800a01f 	.word	0x0800a01f
 8008dc8:	0800a090 	.word	0x0800a090

08008dcc <__hi0bits>:
 8008dcc:	0c03      	lsrs	r3, r0, #16
 8008dce:	041b      	lsls	r3, r3, #16
 8008dd0:	b9d3      	cbnz	r3, 8008e08 <__hi0bits+0x3c>
 8008dd2:	0400      	lsls	r0, r0, #16
 8008dd4:	2310      	movs	r3, #16
 8008dd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008dda:	bf04      	itt	eq
 8008ddc:	0200      	lsleq	r0, r0, #8
 8008dde:	3308      	addeq	r3, #8
 8008de0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008de4:	bf04      	itt	eq
 8008de6:	0100      	lsleq	r0, r0, #4
 8008de8:	3304      	addeq	r3, #4
 8008dea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008dee:	bf04      	itt	eq
 8008df0:	0080      	lsleq	r0, r0, #2
 8008df2:	3302      	addeq	r3, #2
 8008df4:	2800      	cmp	r0, #0
 8008df6:	db05      	blt.n	8008e04 <__hi0bits+0x38>
 8008df8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008dfc:	f103 0301 	add.w	r3, r3, #1
 8008e00:	bf08      	it	eq
 8008e02:	2320      	moveq	r3, #32
 8008e04:	4618      	mov	r0, r3
 8008e06:	4770      	bx	lr
 8008e08:	2300      	movs	r3, #0
 8008e0a:	e7e4      	b.n	8008dd6 <__hi0bits+0xa>

08008e0c <__lo0bits>:
 8008e0c:	6803      	ldr	r3, [r0, #0]
 8008e0e:	f013 0207 	ands.w	r2, r3, #7
 8008e12:	4601      	mov	r1, r0
 8008e14:	d00b      	beq.n	8008e2e <__lo0bits+0x22>
 8008e16:	07da      	lsls	r2, r3, #31
 8008e18:	d423      	bmi.n	8008e62 <__lo0bits+0x56>
 8008e1a:	0798      	lsls	r0, r3, #30
 8008e1c:	bf49      	itett	mi
 8008e1e:	085b      	lsrmi	r3, r3, #1
 8008e20:	089b      	lsrpl	r3, r3, #2
 8008e22:	2001      	movmi	r0, #1
 8008e24:	600b      	strmi	r3, [r1, #0]
 8008e26:	bf5c      	itt	pl
 8008e28:	600b      	strpl	r3, [r1, #0]
 8008e2a:	2002      	movpl	r0, #2
 8008e2c:	4770      	bx	lr
 8008e2e:	b298      	uxth	r0, r3
 8008e30:	b9a8      	cbnz	r0, 8008e5e <__lo0bits+0x52>
 8008e32:	0c1b      	lsrs	r3, r3, #16
 8008e34:	2010      	movs	r0, #16
 8008e36:	b2da      	uxtb	r2, r3
 8008e38:	b90a      	cbnz	r2, 8008e3e <__lo0bits+0x32>
 8008e3a:	3008      	adds	r0, #8
 8008e3c:	0a1b      	lsrs	r3, r3, #8
 8008e3e:	071a      	lsls	r2, r3, #28
 8008e40:	bf04      	itt	eq
 8008e42:	091b      	lsreq	r3, r3, #4
 8008e44:	3004      	addeq	r0, #4
 8008e46:	079a      	lsls	r2, r3, #30
 8008e48:	bf04      	itt	eq
 8008e4a:	089b      	lsreq	r3, r3, #2
 8008e4c:	3002      	addeq	r0, #2
 8008e4e:	07da      	lsls	r2, r3, #31
 8008e50:	d403      	bmi.n	8008e5a <__lo0bits+0x4e>
 8008e52:	085b      	lsrs	r3, r3, #1
 8008e54:	f100 0001 	add.w	r0, r0, #1
 8008e58:	d005      	beq.n	8008e66 <__lo0bits+0x5a>
 8008e5a:	600b      	str	r3, [r1, #0]
 8008e5c:	4770      	bx	lr
 8008e5e:	4610      	mov	r0, r2
 8008e60:	e7e9      	b.n	8008e36 <__lo0bits+0x2a>
 8008e62:	2000      	movs	r0, #0
 8008e64:	4770      	bx	lr
 8008e66:	2020      	movs	r0, #32
 8008e68:	4770      	bx	lr
	...

08008e6c <__i2b>:
 8008e6c:	b510      	push	{r4, lr}
 8008e6e:	460c      	mov	r4, r1
 8008e70:	2101      	movs	r1, #1
 8008e72:	f7ff ff03 	bl	8008c7c <_Balloc>
 8008e76:	4602      	mov	r2, r0
 8008e78:	b928      	cbnz	r0, 8008e86 <__i2b+0x1a>
 8008e7a:	4b05      	ldr	r3, [pc, #20]	; (8008e90 <__i2b+0x24>)
 8008e7c:	4805      	ldr	r0, [pc, #20]	; (8008e94 <__i2b+0x28>)
 8008e7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008e82:	f000 fdf5 	bl	8009a70 <__assert_func>
 8008e86:	2301      	movs	r3, #1
 8008e88:	6144      	str	r4, [r0, #20]
 8008e8a:	6103      	str	r3, [r0, #16]
 8008e8c:	bd10      	pop	{r4, pc}
 8008e8e:	bf00      	nop
 8008e90:	0800a01f 	.word	0x0800a01f
 8008e94:	0800a090 	.word	0x0800a090

08008e98 <__multiply>:
 8008e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e9c:	4691      	mov	r9, r2
 8008e9e:	690a      	ldr	r2, [r1, #16]
 8008ea0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	bfb8      	it	lt
 8008ea8:	460b      	movlt	r3, r1
 8008eaa:	460c      	mov	r4, r1
 8008eac:	bfbc      	itt	lt
 8008eae:	464c      	movlt	r4, r9
 8008eb0:	4699      	movlt	r9, r3
 8008eb2:	6927      	ldr	r7, [r4, #16]
 8008eb4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008eb8:	68a3      	ldr	r3, [r4, #8]
 8008eba:	6861      	ldr	r1, [r4, #4]
 8008ebc:	eb07 060a 	add.w	r6, r7, sl
 8008ec0:	42b3      	cmp	r3, r6
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	bfb8      	it	lt
 8008ec6:	3101      	addlt	r1, #1
 8008ec8:	f7ff fed8 	bl	8008c7c <_Balloc>
 8008ecc:	b930      	cbnz	r0, 8008edc <__multiply+0x44>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	4b44      	ldr	r3, [pc, #272]	; (8008fe4 <__multiply+0x14c>)
 8008ed2:	4845      	ldr	r0, [pc, #276]	; (8008fe8 <__multiply+0x150>)
 8008ed4:	f240 115d 	movw	r1, #349	; 0x15d
 8008ed8:	f000 fdca 	bl	8009a70 <__assert_func>
 8008edc:	f100 0514 	add.w	r5, r0, #20
 8008ee0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ee4:	462b      	mov	r3, r5
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	4543      	cmp	r3, r8
 8008eea:	d321      	bcc.n	8008f30 <__multiply+0x98>
 8008eec:	f104 0314 	add.w	r3, r4, #20
 8008ef0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008ef4:	f109 0314 	add.w	r3, r9, #20
 8008ef8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008efc:	9202      	str	r2, [sp, #8]
 8008efe:	1b3a      	subs	r2, r7, r4
 8008f00:	3a15      	subs	r2, #21
 8008f02:	f022 0203 	bic.w	r2, r2, #3
 8008f06:	3204      	adds	r2, #4
 8008f08:	f104 0115 	add.w	r1, r4, #21
 8008f0c:	428f      	cmp	r7, r1
 8008f0e:	bf38      	it	cc
 8008f10:	2204      	movcc	r2, #4
 8008f12:	9201      	str	r2, [sp, #4]
 8008f14:	9a02      	ldr	r2, [sp, #8]
 8008f16:	9303      	str	r3, [sp, #12]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d80c      	bhi.n	8008f36 <__multiply+0x9e>
 8008f1c:	2e00      	cmp	r6, #0
 8008f1e:	dd03      	ble.n	8008f28 <__multiply+0x90>
 8008f20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d05a      	beq.n	8008fde <__multiply+0x146>
 8008f28:	6106      	str	r6, [r0, #16]
 8008f2a:	b005      	add	sp, #20
 8008f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f30:	f843 2b04 	str.w	r2, [r3], #4
 8008f34:	e7d8      	b.n	8008ee8 <__multiply+0x50>
 8008f36:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f3a:	f1ba 0f00 	cmp.w	sl, #0
 8008f3e:	d024      	beq.n	8008f8a <__multiply+0xf2>
 8008f40:	f104 0e14 	add.w	lr, r4, #20
 8008f44:	46a9      	mov	r9, r5
 8008f46:	f04f 0c00 	mov.w	ip, #0
 8008f4a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008f4e:	f8d9 1000 	ldr.w	r1, [r9]
 8008f52:	fa1f fb82 	uxth.w	fp, r2
 8008f56:	b289      	uxth	r1, r1
 8008f58:	fb0a 110b 	mla	r1, sl, fp, r1
 8008f5c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008f60:	f8d9 2000 	ldr.w	r2, [r9]
 8008f64:	4461      	add	r1, ip
 8008f66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f6a:	fb0a c20b 	mla	r2, sl, fp, ip
 8008f6e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008f72:	b289      	uxth	r1, r1
 8008f74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f78:	4577      	cmp	r7, lr
 8008f7a:	f849 1b04 	str.w	r1, [r9], #4
 8008f7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f82:	d8e2      	bhi.n	8008f4a <__multiply+0xb2>
 8008f84:	9a01      	ldr	r2, [sp, #4]
 8008f86:	f845 c002 	str.w	ip, [r5, r2]
 8008f8a:	9a03      	ldr	r2, [sp, #12]
 8008f8c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f90:	3304      	adds	r3, #4
 8008f92:	f1b9 0f00 	cmp.w	r9, #0
 8008f96:	d020      	beq.n	8008fda <__multiply+0x142>
 8008f98:	6829      	ldr	r1, [r5, #0]
 8008f9a:	f104 0c14 	add.w	ip, r4, #20
 8008f9e:	46ae      	mov	lr, r5
 8008fa0:	f04f 0a00 	mov.w	sl, #0
 8008fa4:	f8bc b000 	ldrh.w	fp, [ip]
 8008fa8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008fac:	fb09 220b 	mla	r2, r9, fp, r2
 8008fb0:	4492      	add	sl, r2
 8008fb2:	b289      	uxth	r1, r1
 8008fb4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008fb8:	f84e 1b04 	str.w	r1, [lr], #4
 8008fbc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008fc0:	f8be 1000 	ldrh.w	r1, [lr]
 8008fc4:	0c12      	lsrs	r2, r2, #16
 8008fc6:	fb09 1102 	mla	r1, r9, r2, r1
 8008fca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008fce:	4567      	cmp	r7, ip
 8008fd0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008fd4:	d8e6      	bhi.n	8008fa4 <__multiply+0x10c>
 8008fd6:	9a01      	ldr	r2, [sp, #4]
 8008fd8:	50a9      	str	r1, [r5, r2]
 8008fda:	3504      	adds	r5, #4
 8008fdc:	e79a      	b.n	8008f14 <__multiply+0x7c>
 8008fde:	3e01      	subs	r6, #1
 8008fe0:	e79c      	b.n	8008f1c <__multiply+0x84>
 8008fe2:	bf00      	nop
 8008fe4:	0800a01f 	.word	0x0800a01f
 8008fe8:	0800a090 	.word	0x0800a090

08008fec <__pow5mult>:
 8008fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ff0:	4615      	mov	r5, r2
 8008ff2:	f012 0203 	ands.w	r2, r2, #3
 8008ff6:	4606      	mov	r6, r0
 8008ff8:	460f      	mov	r7, r1
 8008ffa:	d007      	beq.n	800900c <__pow5mult+0x20>
 8008ffc:	4c25      	ldr	r4, [pc, #148]	; (8009094 <__pow5mult+0xa8>)
 8008ffe:	3a01      	subs	r2, #1
 8009000:	2300      	movs	r3, #0
 8009002:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009006:	f7ff fe9b 	bl	8008d40 <__multadd>
 800900a:	4607      	mov	r7, r0
 800900c:	10ad      	asrs	r5, r5, #2
 800900e:	d03d      	beq.n	800908c <__pow5mult+0xa0>
 8009010:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009012:	b97c      	cbnz	r4, 8009034 <__pow5mult+0x48>
 8009014:	2010      	movs	r0, #16
 8009016:	f7ff fe1b 	bl	8008c50 <malloc>
 800901a:	4602      	mov	r2, r0
 800901c:	6270      	str	r0, [r6, #36]	; 0x24
 800901e:	b928      	cbnz	r0, 800902c <__pow5mult+0x40>
 8009020:	4b1d      	ldr	r3, [pc, #116]	; (8009098 <__pow5mult+0xac>)
 8009022:	481e      	ldr	r0, [pc, #120]	; (800909c <__pow5mult+0xb0>)
 8009024:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009028:	f000 fd22 	bl	8009a70 <__assert_func>
 800902c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009030:	6004      	str	r4, [r0, #0]
 8009032:	60c4      	str	r4, [r0, #12]
 8009034:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009038:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800903c:	b94c      	cbnz	r4, 8009052 <__pow5mult+0x66>
 800903e:	f240 2171 	movw	r1, #625	; 0x271
 8009042:	4630      	mov	r0, r6
 8009044:	f7ff ff12 	bl	8008e6c <__i2b>
 8009048:	2300      	movs	r3, #0
 800904a:	f8c8 0008 	str.w	r0, [r8, #8]
 800904e:	4604      	mov	r4, r0
 8009050:	6003      	str	r3, [r0, #0]
 8009052:	f04f 0900 	mov.w	r9, #0
 8009056:	07eb      	lsls	r3, r5, #31
 8009058:	d50a      	bpl.n	8009070 <__pow5mult+0x84>
 800905a:	4639      	mov	r1, r7
 800905c:	4622      	mov	r2, r4
 800905e:	4630      	mov	r0, r6
 8009060:	f7ff ff1a 	bl	8008e98 <__multiply>
 8009064:	4639      	mov	r1, r7
 8009066:	4680      	mov	r8, r0
 8009068:	4630      	mov	r0, r6
 800906a:	f7ff fe47 	bl	8008cfc <_Bfree>
 800906e:	4647      	mov	r7, r8
 8009070:	106d      	asrs	r5, r5, #1
 8009072:	d00b      	beq.n	800908c <__pow5mult+0xa0>
 8009074:	6820      	ldr	r0, [r4, #0]
 8009076:	b938      	cbnz	r0, 8009088 <__pow5mult+0x9c>
 8009078:	4622      	mov	r2, r4
 800907a:	4621      	mov	r1, r4
 800907c:	4630      	mov	r0, r6
 800907e:	f7ff ff0b 	bl	8008e98 <__multiply>
 8009082:	6020      	str	r0, [r4, #0]
 8009084:	f8c0 9000 	str.w	r9, [r0]
 8009088:	4604      	mov	r4, r0
 800908a:	e7e4      	b.n	8009056 <__pow5mult+0x6a>
 800908c:	4638      	mov	r0, r7
 800908e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009092:	bf00      	nop
 8009094:	0800a1e0 	.word	0x0800a1e0
 8009098:	08009fad 	.word	0x08009fad
 800909c:	0800a090 	.word	0x0800a090

080090a0 <__lshift>:
 80090a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090a4:	460c      	mov	r4, r1
 80090a6:	6849      	ldr	r1, [r1, #4]
 80090a8:	6923      	ldr	r3, [r4, #16]
 80090aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80090ae:	68a3      	ldr	r3, [r4, #8]
 80090b0:	4607      	mov	r7, r0
 80090b2:	4691      	mov	r9, r2
 80090b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090b8:	f108 0601 	add.w	r6, r8, #1
 80090bc:	42b3      	cmp	r3, r6
 80090be:	db0b      	blt.n	80090d8 <__lshift+0x38>
 80090c0:	4638      	mov	r0, r7
 80090c2:	f7ff fddb 	bl	8008c7c <_Balloc>
 80090c6:	4605      	mov	r5, r0
 80090c8:	b948      	cbnz	r0, 80090de <__lshift+0x3e>
 80090ca:	4602      	mov	r2, r0
 80090cc:	4b2a      	ldr	r3, [pc, #168]	; (8009178 <__lshift+0xd8>)
 80090ce:	482b      	ldr	r0, [pc, #172]	; (800917c <__lshift+0xdc>)
 80090d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80090d4:	f000 fccc 	bl	8009a70 <__assert_func>
 80090d8:	3101      	adds	r1, #1
 80090da:	005b      	lsls	r3, r3, #1
 80090dc:	e7ee      	b.n	80090bc <__lshift+0x1c>
 80090de:	2300      	movs	r3, #0
 80090e0:	f100 0114 	add.w	r1, r0, #20
 80090e4:	f100 0210 	add.w	r2, r0, #16
 80090e8:	4618      	mov	r0, r3
 80090ea:	4553      	cmp	r3, sl
 80090ec:	db37      	blt.n	800915e <__lshift+0xbe>
 80090ee:	6920      	ldr	r0, [r4, #16]
 80090f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090f4:	f104 0314 	add.w	r3, r4, #20
 80090f8:	f019 091f 	ands.w	r9, r9, #31
 80090fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009100:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009104:	d02f      	beq.n	8009166 <__lshift+0xc6>
 8009106:	f1c9 0e20 	rsb	lr, r9, #32
 800910a:	468a      	mov	sl, r1
 800910c:	f04f 0c00 	mov.w	ip, #0
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	fa02 f209 	lsl.w	r2, r2, r9
 8009116:	ea42 020c 	orr.w	r2, r2, ip
 800911a:	f84a 2b04 	str.w	r2, [sl], #4
 800911e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009122:	4298      	cmp	r0, r3
 8009124:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009128:	d8f2      	bhi.n	8009110 <__lshift+0x70>
 800912a:	1b03      	subs	r3, r0, r4
 800912c:	3b15      	subs	r3, #21
 800912e:	f023 0303 	bic.w	r3, r3, #3
 8009132:	3304      	adds	r3, #4
 8009134:	f104 0215 	add.w	r2, r4, #21
 8009138:	4290      	cmp	r0, r2
 800913a:	bf38      	it	cc
 800913c:	2304      	movcc	r3, #4
 800913e:	f841 c003 	str.w	ip, [r1, r3]
 8009142:	f1bc 0f00 	cmp.w	ip, #0
 8009146:	d001      	beq.n	800914c <__lshift+0xac>
 8009148:	f108 0602 	add.w	r6, r8, #2
 800914c:	3e01      	subs	r6, #1
 800914e:	4638      	mov	r0, r7
 8009150:	612e      	str	r6, [r5, #16]
 8009152:	4621      	mov	r1, r4
 8009154:	f7ff fdd2 	bl	8008cfc <_Bfree>
 8009158:	4628      	mov	r0, r5
 800915a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800915e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009162:	3301      	adds	r3, #1
 8009164:	e7c1      	b.n	80090ea <__lshift+0x4a>
 8009166:	3904      	subs	r1, #4
 8009168:	f853 2b04 	ldr.w	r2, [r3], #4
 800916c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009170:	4298      	cmp	r0, r3
 8009172:	d8f9      	bhi.n	8009168 <__lshift+0xc8>
 8009174:	e7ea      	b.n	800914c <__lshift+0xac>
 8009176:	bf00      	nop
 8009178:	0800a01f 	.word	0x0800a01f
 800917c:	0800a090 	.word	0x0800a090

08009180 <__mcmp>:
 8009180:	b530      	push	{r4, r5, lr}
 8009182:	6902      	ldr	r2, [r0, #16]
 8009184:	690c      	ldr	r4, [r1, #16]
 8009186:	1b12      	subs	r2, r2, r4
 8009188:	d10e      	bne.n	80091a8 <__mcmp+0x28>
 800918a:	f100 0314 	add.w	r3, r0, #20
 800918e:	3114      	adds	r1, #20
 8009190:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009194:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009198:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800919c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80091a0:	42a5      	cmp	r5, r4
 80091a2:	d003      	beq.n	80091ac <__mcmp+0x2c>
 80091a4:	d305      	bcc.n	80091b2 <__mcmp+0x32>
 80091a6:	2201      	movs	r2, #1
 80091a8:	4610      	mov	r0, r2
 80091aa:	bd30      	pop	{r4, r5, pc}
 80091ac:	4283      	cmp	r3, r0
 80091ae:	d3f3      	bcc.n	8009198 <__mcmp+0x18>
 80091b0:	e7fa      	b.n	80091a8 <__mcmp+0x28>
 80091b2:	f04f 32ff 	mov.w	r2, #4294967295
 80091b6:	e7f7      	b.n	80091a8 <__mcmp+0x28>

080091b8 <__mdiff>:
 80091b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091bc:	460c      	mov	r4, r1
 80091be:	4606      	mov	r6, r0
 80091c0:	4611      	mov	r1, r2
 80091c2:	4620      	mov	r0, r4
 80091c4:	4690      	mov	r8, r2
 80091c6:	f7ff ffdb 	bl	8009180 <__mcmp>
 80091ca:	1e05      	subs	r5, r0, #0
 80091cc:	d110      	bne.n	80091f0 <__mdiff+0x38>
 80091ce:	4629      	mov	r1, r5
 80091d0:	4630      	mov	r0, r6
 80091d2:	f7ff fd53 	bl	8008c7c <_Balloc>
 80091d6:	b930      	cbnz	r0, 80091e6 <__mdiff+0x2e>
 80091d8:	4b3a      	ldr	r3, [pc, #232]	; (80092c4 <__mdiff+0x10c>)
 80091da:	4602      	mov	r2, r0
 80091dc:	f240 2132 	movw	r1, #562	; 0x232
 80091e0:	4839      	ldr	r0, [pc, #228]	; (80092c8 <__mdiff+0x110>)
 80091e2:	f000 fc45 	bl	8009a70 <__assert_func>
 80091e6:	2301      	movs	r3, #1
 80091e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f0:	bfa4      	itt	ge
 80091f2:	4643      	movge	r3, r8
 80091f4:	46a0      	movge	r8, r4
 80091f6:	4630      	mov	r0, r6
 80091f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80091fc:	bfa6      	itte	ge
 80091fe:	461c      	movge	r4, r3
 8009200:	2500      	movge	r5, #0
 8009202:	2501      	movlt	r5, #1
 8009204:	f7ff fd3a 	bl	8008c7c <_Balloc>
 8009208:	b920      	cbnz	r0, 8009214 <__mdiff+0x5c>
 800920a:	4b2e      	ldr	r3, [pc, #184]	; (80092c4 <__mdiff+0x10c>)
 800920c:	4602      	mov	r2, r0
 800920e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009212:	e7e5      	b.n	80091e0 <__mdiff+0x28>
 8009214:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009218:	6926      	ldr	r6, [r4, #16]
 800921a:	60c5      	str	r5, [r0, #12]
 800921c:	f104 0914 	add.w	r9, r4, #20
 8009220:	f108 0514 	add.w	r5, r8, #20
 8009224:	f100 0e14 	add.w	lr, r0, #20
 8009228:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800922c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009230:	f108 0210 	add.w	r2, r8, #16
 8009234:	46f2      	mov	sl, lr
 8009236:	2100      	movs	r1, #0
 8009238:	f859 3b04 	ldr.w	r3, [r9], #4
 800923c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009240:	fa1f f883 	uxth.w	r8, r3
 8009244:	fa11 f18b 	uxtah	r1, r1, fp
 8009248:	0c1b      	lsrs	r3, r3, #16
 800924a:	eba1 0808 	sub.w	r8, r1, r8
 800924e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009252:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009256:	fa1f f888 	uxth.w	r8, r8
 800925a:	1419      	asrs	r1, r3, #16
 800925c:	454e      	cmp	r6, r9
 800925e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009262:	f84a 3b04 	str.w	r3, [sl], #4
 8009266:	d8e7      	bhi.n	8009238 <__mdiff+0x80>
 8009268:	1b33      	subs	r3, r6, r4
 800926a:	3b15      	subs	r3, #21
 800926c:	f023 0303 	bic.w	r3, r3, #3
 8009270:	3304      	adds	r3, #4
 8009272:	3415      	adds	r4, #21
 8009274:	42a6      	cmp	r6, r4
 8009276:	bf38      	it	cc
 8009278:	2304      	movcc	r3, #4
 800927a:	441d      	add	r5, r3
 800927c:	4473      	add	r3, lr
 800927e:	469e      	mov	lr, r3
 8009280:	462e      	mov	r6, r5
 8009282:	4566      	cmp	r6, ip
 8009284:	d30e      	bcc.n	80092a4 <__mdiff+0xec>
 8009286:	f10c 0203 	add.w	r2, ip, #3
 800928a:	1b52      	subs	r2, r2, r5
 800928c:	f022 0203 	bic.w	r2, r2, #3
 8009290:	3d03      	subs	r5, #3
 8009292:	45ac      	cmp	ip, r5
 8009294:	bf38      	it	cc
 8009296:	2200      	movcc	r2, #0
 8009298:	441a      	add	r2, r3
 800929a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800929e:	b17b      	cbz	r3, 80092c0 <__mdiff+0x108>
 80092a0:	6107      	str	r7, [r0, #16]
 80092a2:	e7a3      	b.n	80091ec <__mdiff+0x34>
 80092a4:	f856 8b04 	ldr.w	r8, [r6], #4
 80092a8:	fa11 f288 	uxtah	r2, r1, r8
 80092ac:	1414      	asrs	r4, r2, #16
 80092ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80092b2:	b292      	uxth	r2, r2
 80092b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80092b8:	f84e 2b04 	str.w	r2, [lr], #4
 80092bc:	1421      	asrs	r1, r4, #16
 80092be:	e7e0      	b.n	8009282 <__mdiff+0xca>
 80092c0:	3f01      	subs	r7, #1
 80092c2:	e7ea      	b.n	800929a <__mdiff+0xe2>
 80092c4:	0800a01f 	.word	0x0800a01f
 80092c8:	0800a090 	.word	0x0800a090

080092cc <__d2b>:
 80092cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092d0:	4689      	mov	r9, r1
 80092d2:	2101      	movs	r1, #1
 80092d4:	ec57 6b10 	vmov	r6, r7, d0
 80092d8:	4690      	mov	r8, r2
 80092da:	f7ff fccf 	bl	8008c7c <_Balloc>
 80092de:	4604      	mov	r4, r0
 80092e0:	b930      	cbnz	r0, 80092f0 <__d2b+0x24>
 80092e2:	4602      	mov	r2, r0
 80092e4:	4b25      	ldr	r3, [pc, #148]	; (800937c <__d2b+0xb0>)
 80092e6:	4826      	ldr	r0, [pc, #152]	; (8009380 <__d2b+0xb4>)
 80092e8:	f240 310a 	movw	r1, #778	; 0x30a
 80092ec:	f000 fbc0 	bl	8009a70 <__assert_func>
 80092f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80092f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80092f8:	bb35      	cbnz	r5, 8009348 <__d2b+0x7c>
 80092fa:	2e00      	cmp	r6, #0
 80092fc:	9301      	str	r3, [sp, #4]
 80092fe:	d028      	beq.n	8009352 <__d2b+0x86>
 8009300:	4668      	mov	r0, sp
 8009302:	9600      	str	r6, [sp, #0]
 8009304:	f7ff fd82 	bl	8008e0c <__lo0bits>
 8009308:	9900      	ldr	r1, [sp, #0]
 800930a:	b300      	cbz	r0, 800934e <__d2b+0x82>
 800930c:	9a01      	ldr	r2, [sp, #4]
 800930e:	f1c0 0320 	rsb	r3, r0, #32
 8009312:	fa02 f303 	lsl.w	r3, r2, r3
 8009316:	430b      	orrs	r3, r1
 8009318:	40c2      	lsrs	r2, r0
 800931a:	6163      	str	r3, [r4, #20]
 800931c:	9201      	str	r2, [sp, #4]
 800931e:	9b01      	ldr	r3, [sp, #4]
 8009320:	61a3      	str	r3, [r4, #24]
 8009322:	2b00      	cmp	r3, #0
 8009324:	bf14      	ite	ne
 8009326:	2202      	movne	r2, #2
 8009328:	2201      	moveq	r2, #1
 800932a:	6122      	str	r2, [r4, #16]
 800932c:	b1d5      	cbz	r5, 8009364 <__d2b+0x98>
 800932e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009332:	4405      	add	r5, r0
 8009334:	f8c9 5000 	str.w	r5, [r9]
 8009338:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800933c:	f8c8 0000 	str.w	r0, [r8]
 8009340:	4620      	mov	r0, r4
 8009342:	b003      	add	sp, #12
 8009344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009348:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800934c:	e7d5      	b.n	80092fa <__d2b+0x2e>
 800934e:	6161      	str	r1, [r4, #20]
 8009350:	e7e5      	b.n	800931e <__d2b+0x52>
 8009352:	a801      	add	r0, sp, #4
 8009354:	f7ff fd5a 	bl	8008e0c <__lo0bits>
 8009358:	9b01      	ldr	r3, [sp, #4]
 800935a:	6163      	str	r3, [r4, #20]
 800935c:	2201      	movs	r2, #1
 800935e:	6122      	str	r2, [r4, #16]
 8009360:	3020      	adds	r0, #32
 8009362:	e7e3      	b.n	800932c <__d2b+0x60>
 8009364:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009368:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800936c:	f8c9 0000 	str.w	r0, [r9]
 8009370:	6918      	ldr	r0, [r3, #16]
 8009372:	f7ff fd2b 	bl	8008dcc <__hi0bits>
 8009376:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800937a:	e7df      	b.n	800933c <__d2b+0x70>
 800937c:	0800a01f 	.word	0x0800a01f
 8009380:	0800a090 	.word	0x0800a090

08009384 <_calloc_r>:
 8009384:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009386:	fba1 2402 	umull	r2, r4, r1, r2
 800938a:	b94c      	cbnz	r4, 80093a0 <_calloc_r+0x1c>
 800938c:	4611      	mov	r1, r2
 800938e:	9201      	str	r2, [sp, #4]
 8009390:	f000 f87a 	bl	8009488 <_malloc_r>
 8009394:	9a01      	ldr	r2, [sp, #4]
 8009396:	4605      	mov	r5, r0
 8009398:	b930      	cbnz	r0, 80093a8 <_calloc_r+0x24>
 800939a:	4628      	mov	r0, r5
 800939c:	b003      	add	sp, #12
 800939e:	bd30      	pop	{r4, r5, pc}
 80093a0:	220c      	movs	r2, #12
 80093a2:	6002      	str	r2, [r0, #0]
 80093a4:	2500      	movs	r5, #0
 80093a6:	e7f8      	b.n	800939a <_calloc_r+0x16>
 80093a8:	4621      	mov	r1, r4
 80093aa:	f7fe f84f 	bl	800744c <memset>
 80093ae:	e7f4      	b.n	800939a <_calloc_r+0x16>

080093b0 <_free_r>:
 80093b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093b2:	2900      	cmp	r1, #0
 80093b4:	d044      	beq.n	8009440 <_free_r+0x90>
 80093b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093ba:	9001      	str	r0, [sp, #4]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f1a1 0404 	sub.w	r4, r1, #4
 80093c2:	bfb8      	it	lt
 80093c4:	18e4      	addlt	r4, r4, r3
 80093c6:	f000 fcdf 	bl	8009d88 <__malloc_lock>
 80093ca:	4a1e      	ldr	r2, [pc, #120]	; (8009444 <_free_r+0x94>)
 80093cc:	9801      	ldr	r0, [sp, #4]
 80093ce:	6813      	ldr	r3, [r2, #0]
 80093d0:	b933      	cbnz	r3, 80093e0 <_free_r+0x30>
 80093d2:	6063      	str	r3, [r4, #4]
 80093d4:	6014      	str	r4, [r2, #0]
 80093d6:	b003      	add	sp, #12
 80093d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093dc:	f000 bcda 	b.w	8009d94 <__malloc_unlock>
 80093e0:	42a3      	cmp	r3, r4
 80093e2:	d908      	bls.n	80093f6 <_free_r+0x46>
 80093e4:	6825      	ldr	r5, [r4, #0]
 80093e6:	1961      	adds	r1, r4, r5
 80093e8:	428b      	cmp	r3, r1
 80093ea:	bf01      	itttt	eq
 80093ec:	6819      	ldreq	r1, [r3, #0]
 80093ee:	685b      	ldreq	r3, [r3, #4]
 80093f0:	1949      	addeq	r1, r1, r5
 80093f2:	6021      	streq	r1, [r4, #0]
 80093f4:	e7ed      	b.n	80093d2 <_free_r+0x22>
 80093f6:	461a      	mov	r2, r3
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	b10b      	cbz	r3, 8009400 <_free_r+0x50>
 80093fc:	42a3      	cmp	r3, r4
 80093fe:	d9fa      	bls.n	80093f6 <_free_r+0x46>
 8009400:	6811      	ldr	r1, [r2, #0]
 8009402:	1855      	adds	r5, r2, r1
 8009404:	42a5      	cmp	r5, r4
 8009406:	d10b      	bne.n	8009420 <_free_r+0x70>
 8009408:	6824      	ldr	r4, [r4, #0]
 800940a:	4421      	add	r1, r4
 800940c:	1854      	adds	r4, r2, r1
 800940e:	42a3      	cmp	r3, r4
 8009410:	6011      	str	r1, [r2, #0]
 8009412:	d1e0      	bne.n	80093d6 <_free_r+0x26>
 8009414:	681c      	ldr	r4, [r3, #0]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	6053      	str	r3, [r2, #4]
 800941a:	4421      	add	r1, r4
 800941c:	6011      	str	r1, [r2, #0]
 800941e:	e7da      	b.n	80093d6 <_free_r+0x26>
 8009420:	d902      	bls.n	8009428 <_free_r+0x78>
 8009422:	230c      	movs	r3, #12
 8009424:	6003      	str	r3, [r0, #0]
 8009426:	e7d6      	b.n	80093d6 <_free_r+0x26>
 8009428:	6825      	ldr	r5, [r4, #0]
 800942a:	1961      	adds	r1, r4, r5
 800942c:	428b      	cmp	r3, r1
 800942e:	bf04      	itt	eq
 8009430:	6819      	ldreq	r1, [r3, #0]
 8009432:	685b      	ldreq	r3, [r3, #4]
 8009434:	6063      	str	r3, [r4, #4]
 8009436:	bf04      	itt	eq
 8009438:	1949      	addeq	r1, r1, r5
 800943a:	6021      	streq	r1, [r4, #0]
 800943c:	6054      	str	r4, [r2, #4]
 800943e:	e7ca      	b.n	80093d6 <_free_r+0x26>
 8009440:	b003      	add	sp, #12
 8009442:	bd30      	pop	{r4, r5, pc}
 8009444:	200004d4 	.word	0x200004d4

08009448 <sbrk_aligned>:
 8009448:	b570      	push	{r4, r5, r6, lr}
 800944a:	4e0e      	ldr	r6, [pc, #56]	; (8009484 <sbrk_aligned+0x3c>)
 800944c:	460c      	mov	r4, r1
 800944e:	6831      	ldr	r1, [r6, #0]
 8009450:	4605      	mov	r5, r0
 8009452:	b911      	cbnz	r1, 800945a <sbrk_aligned+0x12>
 8009454:	f000 f9e6 	bl	8009824 <_sbrk_r>
 8009458:	6030      	str	r0, [r6, #0]
 800945a:	4621      	mov	r1, r4
 800945c:	4628      	mov	r0, r5
 800945e:	f000 f9e1 	bl	8009824 <_sbrk_r>
 8009462:	1c43      	adds	r3, r0, #1
 8009464:	d00a      	beq.n	800947c <sbrk_aligned+0x34>
 8009466:	1cc4      	adds	r4, r0, #3
 8009468:	f024 0403 	bic.w	r4, r4, #3
 800946c:	42a0      	cmp	r0, r4
 800946e:	d007      	beq.n	8009480 <sbrk_aligned+0x38>
 8009470:	1a21      	subs	r1, r4, r0
 8009472:	4628      	mov	r0, r5
 8009474:	f000 f9d6 	bl	8009824 <_sbrk_r>
 8009478:	3001      	adds	r0, #1
 800947a:	d101      	bne.n	8009480 <sbrk_aligned+0x38>
 800947c:	f04f 34ff 	mov.w	r4, #4294967295
 8009480:	4620      	mov	r0, r4
 8009482:	bd70      	pop	{r4, r5, r6, pc}
 8009484:	200004d8 	.word	0x200004d8

08009488 <_malloc_r>:
 8009488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800948c:	1ccd      	adds	r5, r1, #3
 800948e:	f025 0503 	bic.w	r5, r5, #3
 8009492:	3508      	adds	r5, #8
 8009494:	2d0c      	cmp	r5, #12
 8009496:	bf38      	it	cc
 8009498:	250c      	movcc	r5, #12
 800949a:	2d00      	cmp	r5, #0
 800949c:	4607      	mov	r7, r0
 800949e:	db01      	blt.n	80094a4 <_malloc_r+0x1c>
 80094a0:	42a9      	cmp	r1, r5
 80094a2:	d905      	bls.n	80094b0 <_malloc_r+0x28>
 80094a4:	230c      	movs	r3, #12
 80094a6:	603b      	str	r3, [r7, #0]
 80094a8:	2600      	movs	r6, #0
 80094aa:	4630      	mov	r0, r6
 80094ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094b0:	4e2e      	ldr	r6, [pc, #184]	; (800956c <_malloc_r+0xe4>)
 80094b2:	f000 fc69 	bl	8009d88 <__malloc_lock>
 80094b6:	6833      	ldr	r3, [r6, #0]
 80094b8:	461c      	mov	r4, r3
 80094ba:	bb34      	cbnz	r4, 800950a <_malloc_r+0x82>
 80094bc:	4629      	mov	r1, r5
 80094be:	4638      	mov	r0, r7
 80094c0:	f7ff ffc2 	bl	8009448 <sbrk_aligned>
 80094c4:	1c43      	adds	r3, r0, #1
 80094c6:	4604      	mov	r4, r0
 80094c8:	d14d      	bne.n	8009566 <_malloc_r+0xde>
 80094ca:	6834      	ldr	r4, [r6, #0]
 80094cc:	4626      	mov	r6, r4
 80094ce:	2e00      	cmp	r6, #0
 80094d0:	d140      	bne.n	8009554 <_malloc_r+0xcc>
 80094d2:	6823      	ldr	r3, [r4, #0]
 80094d4:	4631      	mov	r1, r6
 80094d6:	4638      	mov	r0, r7
 80094d8:	eb04 0803 	add.w	r8, r4, r3
 80094dc:	f000 f9a2 	bl	8009824 <_sbrk_r>
 80094e0:	4580      	cmp	r8, r0
 80094e2:	d13a      	bne.n	800955a <_malloc_r+0xd2>
 80094e4:	6821      	ldr	r1, [r4, #0]
 80094e6:	3503      	adds	r5, #3
 80094e8:	1a6d      	subs	r5, r5, r1
 80094ea:	f025 0503 	bic.w	r5, r5, #3
 80094ee:	3508      	adds	r5, #8
 80094f0:	2d0c      	cmp	r5, #12
 80094f2:	bf38      	it	cc
 80094f4:	250c      	movcc	r5, #12
 80094f6:	4629      	mov	r1, r5
 80094f8:	4638      	mov	r0, r7
 80094fa:	f7ff ffa5 	bl	8009448 <sbrk_aligned>
 80094fe:	3001      	adds	r0, #1
 8009500:	d02b      	beq.n	800955a <_malloc_r+0xd2>
 8009502:	6823      	ldr	r3, [r4, #0]
 8009504:	442b      	add	r3, r5
 8009506:	6023      	str	r3, [r4, #0]
 8009508:	e00e      	b.n	8009528 <_malloc_r+0xa0>
 800950a:	6822      	ldr	r2, [r4, #0]
 800950c:	1b52      	subs	r2, r2, r5
 800950e:	d41e      	bmi.n	800954e <_malloc_r+0xc6>
 8009510:	2a0b      	cmp	r2, #11
 8009512:	d916      	bls.n	8009542 <_malloc_r+0xba>
 8009514:	1961      	adds	r1, r4, r5
 8009516:	42a3      	cmp	r3, r4
 8009518:	6025      	str	r5, [r4, #0]
 800951a:	bf18      	it	ne
 800951c:	6059      	strne	r1, [r3, #4]
 800951e:	6863      	ldr	r3, [r4, #4]
 8009520:	bf08      	it	eq
 8009522:	6031      	streq	r1, [r6, #0]
 8009524:	5162      	str	r2, [r4, r5]
 8009526:	604b      	str	r3, [r1, #4]
 8009528:	4638      	mov	r0, r7
 800952a:	f104 060b 	add.w	r6, r4, #11
 800952e:	f000 fc31 	bl	8009d94 <__malloc_unlock>
 8009532:	f026 0607 	bic.w	r6, r6, #7
 8009536:	1d23      	adds	r3, r4, #4
 8009538:	1af2      	subs	r2, r6, r3
 800953a:	d0b6      	beq.n	80094aa <_malloc_r+0x22>
 800953c:	1b9b      	subs	r3, r3, r6
 800953e:	50a3      	str	r3, [r4, r2]
 8009540:	e7b3      	b.n	80094aa <_malloc_r+0x22>
 8009542:	6862      	ldr	r2, [r4, #4]
 8009544:	42a3      	cmp	r3, r4
 8009546:	bf0c      	ite	eq
 8009548:	6032      	streq	r2, [r6, #0]
 800954a:	605a      	strne	r2, [r3, #4]
 800954c:	e7ec      	b.n	8009528 <_malloc_r+0xa0>
 800954e:	4623      	mov	r3, r4
 8009550:	6864      	ldr	r4, [r4, #4]
 8009552:	e7b2      	b.n	80094ba <_malloc_r+0x32>
 8009554:	4634      	mov	r4, r6
 8009556:	6876      	ldr	r6, [r6, #4]
 8009558:	e7b9      	b.n	80094ce <_malloc_r+0x46>
 800955a:	230c      	movs	r3, #12
 800955c:	603b      	str	r3, [r7, #0]
 800955e:	4638      	mov	r0, r7
 8009560:	f000 fc18 	bl	8009d94 <__malloc_unlock>
 8009564:	e7a1      	b.n	80094aa <_malloc_r+0x22>
 8009566:	6025      	str	r5, [r4, #0]
 8009568:	e7de      	b.n	8009528 <_malloc_r+0xa0>
 800956a:	bf00      	nop
 800956c:	200004d4 	.word	0x200004d4

08009570 <__sfputc_r>:
 8009570:	6893      	ldr	r3, [r2, #8]
 8009572:	3b01      	subs	r3, #1
 8009574:	2b00      	cmp	r3, #0
 8009576:	b410      	push	{r4}
 8009578:	6093      	str	r3, [r2, #8]
 800957a:	da08      	bge.n	800958e <__sfputc_r+0x1e>
 800957c:	6994      	ldr	r4, [r2, #24]
 800957e:	42a3      	cmp	r3, r4
 8009580:	db01      	blt.n	8009586 <__sfputc_r+0x16>
 8009582:	290a      	cmp	r1, #10
 8009584:	d103      	bne.n	800958e <__sfputc_r+0x1e>
 8009586:	f85d 4b04 	ldr.w	r4, [sp], #4
 800958a:	f000 b99f 	b.w	80098cc <__swbuf_r>
 800958e:	6813      	ldr	r3, [r2, #0]
 8009590:	1c58      	adds	r0, r3, #1
 8009592:	6010      	str	r0, [r2, #0]
 8009594:	7019      	strb	r1, [r3, #0]
 8009596:	4608      	mov	r0, r1
 8009598:	f85d 4b04 	ldr.w	r4, [sp], #4
 800959c:	4770      	bx	lr

0800959e <__sfputs_r>:
 800959e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a0:	4606      	mov	r6, r0
 80095a2:	460f      	mov	r7, r1
 80095a4:	4614      	mov	r4, r2
 80095a6:	18d5      	adds	r5, r2, r3
 80095a8:	42ac      	cmp	r4, r5
 80095aa:	d101      	bne.n	80095b0 <__sfputs_r+0x12>
 80095ac:	2000      	movs	r0, #0
 80095ae:	e007      	b.n	80095c0 <__sfputs_r+0x22>
 80095b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095b4:	463a      	mov	r2, r7
 80095b6:	4630      	mov	r0, r6
 80095b8:	f7ff ffda 	bl	8009570 <__sfputc_r>
 80095bc:	1c43      	adds	r3, r0, #1
 80095be:	d1f3      	bne.n	80095a8 <__sfputs_r+0xa>
 80095c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095c4 <_vfiprintf_r>:
 80095c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c8:	460d      	mov	r5, r1
 80095ca:	b09d      	sub	sp, #116	; 0x74
 80095cc:	4614      	mov	r4, r2
 80095ce:	4698      	mov	r8, r3
 80095d0:	4606      	mov	r6, r0
 80095d2:	b118      	cbz	r0, 80095dc <_vfiprintf_r+0x18>
 80095d4:	6983      	ldr	r3, [r0, #24]
 80095d6:	b90b      	cbnz	r3, 80095dc <_vfiprintf_r+0x18>
 80095d8:	f7ff fa94 	bl	8008b04 <__sinit>
 80095dc:	4b89      	ldr	r3, [pc, #548]	; (8009804 <_vfiprintf_r+0x240>)
 80095de:	429d      	cmp	r5, r3
 80095e0:	d11b      	bne.n	800961a <_vfiprintf_r+0x56>
 80095e2:	6875      	ldr	r5, [r6, #4]
 80095e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095e6:	07d9      	lsls	r1, r3, #31
 80095e8:	d405      	bmi.n	80095f6 <_vfiprintf_r+0x32>
 80095ea:	89ab      	ldrh	r3, [r5, #12]
 80095ec:	059a      	lsls	r2, r3, #22
 80095ee:	d402      	bmi.n	80095f6 <_vfiprintf_r+0x32>
 80095f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095f2:	f7ff fb2a 	bl	8008c4a <__retarget_lock_acquire_recursive>
 80095f6:	89ab      	ldrh	r3, [r5, #12]
 80095f8:	071b      	lsls	r3, r3, #28
 80095fa:	d501      	bpl.n	8009600 <_vfiprintf_r+0x3c>
 80095fc:	692b      	ldr	r3, [r5, #16]
 80095fe:	b9eb      	cbnz	r3, 800963c <_vfiprintf_r+0x78>
 8009600:	4629      	mov	r1, r5
 8009602:	4630      	mov	r0, r6
 8009604:	f000 f9c6 	bl	8009994 <__swsetup_r>
 8009608:	b1c0      	cbz	r0, 800963c <_vfiprintf_r+0x78>
 800960a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800960c:	07dc      	lsls	r4, r3, #31
 800960e:	d50e      	bpl.n	800962e <_vfiprintf_r+0x6a>
 8009610:	f04f 30ff 	mov.w	r0, #4294967295
 8009614:	b01d      	add	sp, #116	; 0x74
 8009616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800961a:	4b7b      	ldr	r3, [pc, #492]	; (8009808 <_vfiprintf_r+0x244>)
 800961c:	429d      	cmp	r5, r3
 800961e:	d101      	bne.n	8009624 <_vfiprintf_r+0x60>
 8009620:	68b5      	ldr	r5, [r6, #8]
 8009622:	e7df      	b.n	80095e4 <_vfiprintf_r+0x20>
 8009624:	4b79      	ldr	r3, [pc, #484]	; (800980c <_vfiprintf_r+0x248>)
 8009626:	429d      	cmp	r5, r3
 8009628:	bf08      	it	eq
 800962a:	68f5      	ldreq	r5, [r6, #12]
 800962c:	e7da      	b.n	80095e4 <_vfiprintf_r+0x20>
 800962e:	89ab      	ldrh	r3, [r5, #12]
 8009630:	0598      	lsls	r0, r3, #22
 8009632:	d4ed      	bmi.n	8009610 <_vfiprintf_r+0x4c>
 8009634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009636:	f7ff fb09 	bl	8008c4c <__retarget_lock_release_recursive>
 800963a:	e7e9      	b.n	8009610 <_vfiprintf_r+0x4c>
 800963c:	2300      	movs	r3, #0
 800963e:	9309      	str	r3, [sp, #36]	; 0x24
 8009640:	2320      	movs	r3, #32
 8009642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009646:	f8cd 800c 	str.w	r8, [sp, #12]
 800964a:	2330      	movs	r3, #48	; 0x30
 800964c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009810 <_vfiprintf_r+0x24c>
 8009650:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009654:	f04f 0901 	mov.w	r9, #1
 8009658:	4623      	mov	r3, r4
 800965a:	469a      	mov	sl, r3
 800965c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009660:	b10a      	cbz	r2, 8009666 <_vfiprintf_r+0xa2>
 8009662:	2a25      	cmp	r2, #37	; 0x25
 8009664:	d1f9      	bne.n	800965a <_vfiprintf_r+0x96>
 8009666:	ebba 0b04 	subs.w	fp, sl, r4
 800966a:	d00b      	beq.n	8009684 <_vfiprintf_r+0xc0>
 800966c:	465b      	mov	r3, fp
 800966e:	4622      	mov	r2, r4
 8009670:	4629      	mov	r1, r5
 8009672:	4630      	mov	r0, r6
 8009674:	f7ff ff93 	bl	800959e <__sfputs_r>
 8009678:	3001      	adds	r0, #1
 800967a:	f000 80aa 	beq.w	80097d2 <_vfiprintf_r+0x20e>
 800967e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009680:	445a      	add	r2, fp
 8009682:	9209      	str	r2, [sp, #36]	; 0x24
 8009684:	f89a 3000 	ldrb.w	r3, [sl]
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 80a2 	beq.w	80097d2 <_vfiprintf_r+0x20e>
 800968e:	2300      	movs	r3, #0
 8009690:	f04f 32ff 	mov.w	r2, #4294967295
 8009694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009698:	f10a 0a01 	add.w	sl, sl, #1
 800969c:	9304      	str	r3, [sp, #16]
 800969e:	9307      	str	r3, [sp, #28]
 80096a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096a4:	931a      	str	r3, [sp, #104]	; 0x68
 80096a6:	4654      	mov	r4, sl
 80096a8:	2205      	movs	r2, #5
 80096aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ae:	4858      	ldr	r0, [pc, #352]	; (8009810 <_vfiprintf_r+0x24c>)
 80096b0:	f7f6 fd96 	bl	80001e0 <memchr>
 80096b4:	9a04      	ldr	r2, [sp, #16]
 80096b6:	b9d8      	cbnz	r0, 80096f0 <_vfiprintf_r+0x12c>
 80096b8:	06d1      	lsls	r1, r2, #27
 80096ba:	bf44      	itt	mi
 80096bc:	2320      	movmi	r3, #32
 80096be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096c2:	0713      	lsls	r3, r2, #28
 80096c4:	bf44      	itt	mi
 80096c6:	232b      	movmi	r3, #43	; 0x2b
 80096c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096cc:	f89a 3000 	ldrb.w	r3, [sl]
 80096d0:	2b2a      	cmp	r3, #42	; 0x2a
 80096d2:	d015      	beq.n	8009700 <_vfiprintf_r+0x13c>
 80096d4:	9a07      	ldr	r2, [sp, #28]
 80096d6:	4654      	mov	r4, sl
 80096d8:	2000      	movs	r0, #0
 80096da:	f04f 0c0a 	mov.w	ip, #10
 80096de:	4621      	mov	r1, r4
 80096e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096e4:	3b30      	subs	r3, #48	; 0x30
 80096e6:	2b09      	cmp	r3, #9
 80096e8:	d94e      	bls.n	8009788 <_vfiprintf_r+0x1c4>
 80096ea:	b1b0      	cbz	r0, 800971a <_vfiprintf_r+0x156>
 80096ec:	9207      	str	r2, [sp, #28]
 80096ee:	e014      	b.n	800971a <_vfiprintf_r+0x156>
 80096f0:	eba0 0308 	sub.w	r3, r0, r8
 80096f4:	fa09 f303 	lsl.w	r3, r9, r3
 80096f8:	4313      	orrs	r3, r2
 80096fa:	9304      	str	r3, [sp, #16]
 80096fc:	46a2      	mov	sl, r4
 80096fe:	e7d2      	b.n	80096a6 <_vfiprintf_r+0xe2>
 8009700:	9b03      	ldr	r3, [sp, #12]
 8009702:	1d19      	adds	r1, r3, #4
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	9103      	str	r1, [sp, #12]
 8009708:	2b00      	cmp	r3, #0
 800970a:	bfbb      	ittet	lt
 800970c:	425b      	neglt	r3, r3
 800970e:	f042 0202 	orrlt.w	r2, r2, #2
 8009712:	9307      	strge	r3, [sp, #28]
 8009714:	9307      	strlt	r3, [sp, #28]
 8009716:	bfb8      	it	lt
 8009718:	9204      	strlt	r2, [sp, #16]
 800971a:	7823      	ldrb	r3, [r4, #0]
 800971c:	2b2e      	cmp	r3, #46	; 0x2e
 800971e:	d10c      	bne.n	800973a <_vfiprintf_r+0x176>
 8009720:	7863      	ldrb	r3, [r4, #1]
 8009722:	2b2a      	cmp	r3, #42	; 0x2a
 8009724:	d135      	bne.n	8009792 <_vfiprintf_r+0x1ce>
 8009726:	9b03      	ldr	r3, [sp, #12]
 8009728:	1d1a      	adds	r2, r3, #4
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	9203      	str	r2, [sp, #12]
 800972e:	2b00      	cmp	r3, #0
 8009730:	bfb8      	it	lt
 8009732:	f04f 33ff 	movlt.w	r3, #4294967295
 8009736:	3402      	adds	r4, #2
 8009738:	9305      	str	r3, [sp, #20]
 800973a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009820 <_vfiprintf_r+0x25c>
 800973e:	7821      	ldrb	r1, [r4, #0]
 8009740:	2203      	movs	r2, #3
 8009742:	4650      	mov	r0, sl
 8009744:	f7f6 fd4c 	bl	80001e0 <memchr>
 8009748:	b140      	cbz	r0, 800975c <_vfiprintf_r+0x198>
 800974a:	2340      	movs	r3, #64	; 0x40
 800974c:	eba0 000a 	sub.w	r0, r0, sl
 8009750:	fa03 f000 	lsl.w	r0, r3, r0
 8009754:	9b04      	ldr	r3, [sp, #16]
 8009756:	4303      	orrs	r3, r0
 8009758:	3401      	adds	r4, #1
 800975a:	9304      	str	r3, [sp, #16]
 800975c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009760:	482c      	ldr	r0, [pc, #176]	; (8009814 <_vfiprintf_r+0x250>)
 8009762:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009766:	2206      	movs	r2, #6
 8009768:	f7f6 fd3a 	bl	80001e0 <memchr>
 800976c:	2800      	cmp	r0, #0
 800976e:	d03f      	beq.n	80097f0 <_vfiprintf_r+0x22c>
 8009770:	4b29      	ldr	r3, [pc, #164]	; (8009818 <_vfiprintf_r+0x254>)
 8009772:	bb1b      	cbnz	r3, 80097bc <_vfiprintf_r+0x1f8>
 8009774:	9b03      	ldr	r3, [sp, #12]
 8009776:	3307      	adds	r3, #7
 8009778:	f023 0307 	bic.w	r3, r3, #7
 800977c:	3308      	adds	r3, #8
 800977e:	9303      	str	r3, [sp, #12]
 8009780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009782:	443b      	add	r3, r7
 8009784:	9309      	str	r3, [sp, #36]	; 0x24
 8009786:	e767      	b.n	8009658 <_vfiprintf_r+0x94>
 8009788:	fb0c 3202 	mla	r2, ip, r2, r3
 800978c:	460c      	mov	r4, r1
 800978e:	2001      	movs	r0, #1
 8009790:	e7a5      	b.n	80096de <_vfiprintf_r+0x11a>
 8009792:	2300      	movs	r3, #0
 8009794:	3401      	adds	r4, #1
 8009796:	9305      	str	r3, [sp, #20]
 8009798:	4619      	mov	r1, r3
 800979a:	f04f 0c0a 	mov.w	ip, #10
 800979e:	4620      	mov	r0, r4
 80097a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097a4:	3a30      	subs	r2, #48	; 0x30
 80097a6:	2a09      	cmp	r2, #9
 80097a8:	d903      	bls.n	80097b2 <_vfiprintf_r+0x1ee>
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d0c5      	beq.n	800973a <_vfiprintf_r+0x176>
 80097ae:	9105      	str	r1, [sp, #20]
 80097b0:	e7c3      	b.n	800973a <_vfiprintf_r+0x176>
 80097b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80097b6:	4604      	mov	r4, r0
 80097b8:	2301      	movs	r3, #1
 80097ba:	e7f0      	b.n	800979e <_vfiprintf_r+0x1da>
 80097bc:	ab03      	add	r3, sp, #12
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	462a      	mov	r2, r5
 80097c2:	4b16      	ldr	r3, [pc, #88]	; (800981c <_vfiprintf_r+0x258>)
 80097c4:	a904      	add	r1, sp, #16
 80097c6:	4630      	mov	r0, r6
 80097c8:	f7fd fee8 	bl	800759c <_printf_float>
 80097cc:	4607      	mov	r7, r0
 80097ce:	1c78      	adds	r0, r7, #1
 80097d0:	d1d6      	bne.n	8009780 <_vfiprintf_r+0x1bc>
 80097d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097d4:	07d9      	lsls	r1, r3, #31
 80097d6:	d405      	bmi.n	80097e4 <_vfiprintf_r+0x220>
 80097d8:	89ab      	ldrh	r3, [r5, #12]
 80097da:	059a      	lsls	r2, r3, #22
 80097dc:	d402      	bmi.n	80097e4 <_vfiprintf_r+0x220>
 80097de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097e0:	f7ff fa34 	bl	8008c4c <__retarget_lock_release_recursive>
 80097e4:	89ab      	ldrh	r3, [r5, #12]
 80097e6:	065b      	lsls	r3, r3, #25
 80097e8:	f53f af12 	bmi.w	8009610 <_vfiprintf_r+0x4c>
 80097ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097ee:	e711      	b.n	8009614 <_vfiprintf_r+0x50>
 80097f0:	ab03      	add	r3, sp, #12
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	462a      	mov	r2, r5
 80097f6:	4b09      	ldr	r3, [pc, #36]	; (800981c <_vfiprintf_r+0x258>)
 80097f8:	a904      	add	r1, sp, #16
 80097fa:	4630      	mov	r0, r6
 80097fc:	f7fe f972 	bl	8007ae4 <_printf_i>
 8009800:	e7e4      	b.n	80097cc <_vfiprintf_r+0x208>
 8009802:	bf00      	nop
 8009804:	0800a050 	.word	0x0800a050
 8009808:	0800a070 	.word	0x0800a070
 800980c:	0800a030 	.word	0x0800a030
 8009810:	0800a1ec 	.word	0x0800a1ec
 8009814:	0800a1f6 	.word	0x0800a1f6
 8009818:	0800759d 	.word	0x0800759d
 800981c:	0800959f 	.word	0x0800959f
 8009820:	0800a1f2 	.word	0x0800a1f2

08009824 <_sbrk_r>:
 8009824:	b538      	push	{r3, r4, r5, lr}
 8009826:	4d06      	ldr	r5, [pc, #24]	; (8009840 <_sbrk_r+0x1c>)
 8009828:	2300      	movs	r3, #0
 800982a:	4604      	mov	r4, r0
 800982c:	4608      	mov	r0, r1
 800982e:	602b      	str	r3, [r5, #0]
 8009830:	f7f8 f9d0 	bl	8001bd4 <_sbrk>
 8009834:	1c43      	adds	r3, r0, #1
 8009836:	d102      	bne.n	800983e <_sbrk_r+0x1a>
 8009838:	682b      	ldr	r3, [r5, #0]
 800983a:	b103      	cbz	r3, 800983e <_sbrk_r+0x1a>
 800983c:	6023      	str	r3, [r4, #0]
 800983e:	bd38      	pop	{r3, r4, r5, pc}
 8009840:	200004dc 	.word	0x200004dc

08009844 <__sread>:
 8009844:	b510      	push	{r4, lr}
 8009846:	460c      	mov	r4, r1
 8009848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800984c:	f000 faa8 	bl	8009da0 <_read_r>
 8009850:	2800      	cmp	r0, #0
 8009852:	bfab      	itete	ge
 8009854:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009856:	89a3      	ldrhlt	r3, [r4, #12]
 8009858:	181b      	addge	r3, r3, r0
 800985a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800985e:	bfac      	ite	ge
 8009860:	6563      	strge	r3, [r4, #84]	; 0x54
 8009862:	81a3      	strhlt	r3, [r4, #12]
 8009864:	bd10      	pop	{r4, pc}

08009866 <__swrite>:
 8009866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800986a:	461f      	mov	r7, r3
 800986c:	898b      	ldrh	r3, [r1, #12]
 800986e:	05db      	lsls	r3, r3, #23
 8009870:	4605      	mov	r5, r0
 8009872:	460c      	mov	r4, r1
 8009874:	4616      	mov	r6, r2
 8009876:	d505      	bpl.n	8009884 <__swrite+0x1e>
 8009878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800987c:	2302      	movs	r3, #2
 800987e:	2200      	movs	r2, #0
 8009880:	f000 f9f8 	bl	8009c74 <_lseek_r>
 8009884:	89a3      	ldrh	r3, [r4, #12]
 8009886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800988a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800988e:	81a3      	strh	r3, [r4, #12]
 8009890:	4632      	mov	r2, r6
 8009892:	463b      	mov	r3, r7
 8009894:	4628      	mov	r0, r5
 8009896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800989a:	f000 b869 	b.w	8009970 <_write_r>

0800989e <__sseek>:
 800989e:	b510      	push	{r4, lr}
 80098a0:	460c      	mov	r4, r1
 80098a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a6:	f000 f9e5 	bl	8009c74 <_lseek_r>
 80098aa:	1c43      	adds	r3, r0, #1
 80098ac:	89a3      	ldrh	r3, [r4, #12]
 80098ae:	bf15      	itete	ne
 80098b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80098b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098ba:	81a3      	strheq	r3, [r4, #12]
 80098bc:	bf18      	it	ne
 80098be:	81a3      	strhne	r3, [r4, #12]
 80098c0:	bd10      	pop	{r4, pc}

080098c2 <__sclose>:
 80098c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098c6:	f000 b8f1 	b.w	8009aac <_close_r>
	...

080098cc <__swbuf_r>:
 80098cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ce:	460e      	mov	r6, r1
 80098d0:	4614      	mov	r4, r2
 80098d2:	4605      	mov	r5, r0
 80098d4:	b118      	cbz	r0, 80098de <__swbuf_r+0x12>
 80098d6:	6983      	ldr	r3, [r0, #24]
 80098d8:	b90b      	cbnz	r3, 80098de <__swbuf_r+0x12>
 80098da:	f7ff f913 	bl	8008b04 <__sinit>
 80098de:	4b21      	ldr	r3, [pc, #132]	; (8009964 <__swbuf_r+0x98>)
 80098e0:	429c      	cmp	r4, r3
 80098e2:	d12b      	bne.n	800993c <__swbuf_r+0x70>
 80098e4:	686c      	ldr	r4, [r5, #4]
 80098e6:	69a3      	ldr	r3, [r4, #24]
 80098e8:	60a3      	str	r3, [r4, #8]
 80098ea:	89a3      	ldrh	r3, [r4, #12]
 80098ec:	071a      	lsls	r2, r3, #28
 80098ee:	d52f      	bpl.n	8009950 <__swbuf_r+0x84>
 80098f0:	6923      	ldr	r3, [r4, #16]
 80098f2:	b36b      	cbz	r3, 8009950 <__swbuf_r+0x84>
 80098f4:	6923      	ldr	r3, [r4, #16]
 80098f6:	6820      	ldr	r0, [r4, #0]
 80098f8:	1ac0      	subs	r0, r0, r3
 80098fa:	6963      	ldr	r3, [r4, #20]
 80098fc:	b2f6      	uxtb	r6, r6
 80098fe:	4283      	cmp	r3, r0
 8009900:	4637      	mov	r7, r6
 8009902:	dc04      	bgt.n	800990e <__swbuf_r+0x42>
 8009904:	4621      	mov	r1, r4
 8009906:	4628      	mov	r0, r5
 8009908:	f000 f966 	bl	8009bd8 <_fflush_r>
 800990c:	bb30      	cbnz	r0, 800995c <__swbuf_r+0x90>
 800990e:	68a3      	ldr	r3, [r4, #8]
 8009910:	3b01      	subs	r3, #1
 8009912:	60a3      	str	r3, [r4, #8]
 8009914:	6823      	ldr	r3, [r4, #0]
 8009916:	1c5a      	adds	r2, r3, #1
 8009918:	6022      	str	r2, [r4, #0]
 800991a:	701e      	strb	r6, [r3, #0]
 800991c:	6963      	ldr	r3, [r4, #20]
 800991e:	3001      	adds	r0, #1
 8009920:	4283      	cmp	r3, r0
 8009922:	d004      	beq.n	800992e <__swbuf_r+0x62>
 8009924:	89a3      	ldrh	r3, [r4, #12]
 8009926:	07db      	lsls	r3, r3, #31
 8009928:	d506      	bpl.n	8009938 <__swbuf_r+0x6c>
 800992a:	2e0a      	cmp	r6, #10
 800992c:	d104      	bne.n	8009938 <__swbuf_r+0x6c>
 800992e:	4621      	mov	r1, r4
 8009930:	4628      	mov	r0, r5
 8009932:	f000 f951 	bl	8009bd8 <_fflush_r>
 8009936:	b988      	cbnz	r0, 800995c <__swbuf_r+0x90>
 8009938:	4638      	mov	r0, r7
 800993a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800993c:	4b0a      	ldr	r3, [pc, #40]	; (8009968 <__swbuf_r+0x9c>)
 800993e:	429c      	cmp	r4, r3
 8009940:	d101      	bne.n	8009946 <__swbuf_r+0x7a>
 8009942:	68ac      	ldr	r4, [r5, #8]
 8009944:	e7cf      	b.n	80098e6 <__swbuf_r+0x1a>
 8009946:	4b09      	ldr	r3, [pc, #36]	; (800996c <__swbuf_r+0xa0>)
 8009948:	429c      	cmp	r4, r3
 800994a:	bf08      	it	eq
 800994c:	68ec      	ldreq	r4, [r5, #12]
 800994e:	e7ca      	b.n	80098e6 <__swbuf_r+0x1a>
 8009950:	4621      	mov	r1, r4
 8009952:	4628      	mov	r0, r5
 8009954:	f000 f81e 	bl	8009994 <__swsetup_r>
 8009958:	2800      	cmp	r0, #0
 800995a:	d0cb      	beq.n	80098f4 <__swbuf_r+0x28>
 800995c:	f04f 37ff 	mov.w	r7, #4294967295
 8009960:	e7ea      	b.n	8009938 <__swbuf_r+0x6c>
 8009962:	bf00      	nop
 8009964:	0800a050 	.word	0x0800a050
 8009968:	0800a070 	.word	0x0800a070
 800996c:	0800a030 	.word	0x0800a030

08009970 <_write_r>:
 8009970:	b538      	push	{r3, r4, r5, lr}
 8009972:	4d07      	ldr	r5, [pc, #28]	; (8009990 <_write_r+0x20>)
 8009974:	4604      	mov	r4, r0
 8009976:	4608      	mov	r0, r1
 8009978:	4611      	mov	r1, r2
 800997a:	2200      	movs	r2, #0
 800997c:	602a      	str	r2, [r5, #0]
 800997e:	461a      	mov	r2, r3
 8009980:	f7f8 f8d4 	bl	8001b2c <_write>
 8009984:	1c43      	adds	r3, r0, #1
 8009986:	d102      	bne.n	800998e <_write_r+0x1e>
 8009988:	682b      	ldr	r3, [r5, #0]
 800998a:	b103      	cbz	r3, 800998e <_write_r+0x1e>
 800998c:	6023      	str	r3, [r4, #0]
 800998e:	bd38      	pop	{r3, r4, r5, pc}
 8009990:	200004dc 	.word	0x200004dc

08009994 <__swsetup_r>:
 8009994:	4b32      	ldr	r3, [pc, #200]	; (8009a60 <__swsetup_r+0xcc>)
 8009996:	b570      	push	{r4, r5, r6, lr}
 8009998:	681d      	ldr	r5, [r3, #0]
 800999a:	4606      	mov	r6, r0
 800999c:	460c      	mov	r4, r1
 800999e:	b125      	cbz	r5, 80099aa <__swsetup_r+0x16>
 80099a0:	69ab      	ldr	r3, [r5, #24]
 80099a2:	b913      	cbnz	r3, 80099aa <__swsetup_r+0x16>
 80099a4:	4628      	mov	r0, r5
 80099a6:	f7ff f8ad 	bl	8008b04 <__sinit>
 80099aa:	4b2e      	ldr	r3, [pc, #184]	; (8009a64 <__swsetup_r+0xd0>)
 80099ac:	429c      	cmp	r4, r3
 80099ae:	d10f      	bne.n	80099d0 <__swsetup_r+0x3c>
 80099b0:	686c      	ldr	r4, [r5, #4]
 80099b2:	89a3      	ldrh	r3, [r4, #12]
 80099b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099b8:	0719      	lsls	r1, r3, #28
 80099ba:	d42c      	bmi.n	8009a16 <__swsetup_r+0x82>
 80099bc:	06dd      	lsls	r5, r3, #27
 80099be:	d411      	bmi.n	80099e4 <__swsetup_r+0x50>
 80099c0:	2309      	movs	r3, #9
 80099c2:	6033      	str	r3, [r6, #0]
 80099c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80099c8:	81a3      	strh	r3, [r4, #12]
 80099ca:	f04f 30ff 	mov.w	r0, #4294967295
 80099ce:	e03e      	b.n	8009a4e <__swsetup_r+0xba>
 80099d0:	4b25      	ldr	r3, [pc, #148]	; (8009a68 <__swsetup_r+0xd4>)
 80099d2:	429c      	cmp	r4, r3
 80099d4:	d101      	bne.n	80099da <__swsetup_r+0x46>
 80099d6:	68ac      	ldr	r4, [r5, #8]
 80099d8:	e7eb      	b.n	80099b2 <__swsetup_r+0x1e>
 80099da:	4b24      	ldr	r3, [pc, #144]	; (8009a6c <__swsetup_r+0xd8>)
 80099dc:	429c      	cmp	r4, r3
 80099de:	bf08      	it	eq
 80099e0:	68ec      	ldreq	r4, [r5, #12]
 80099e2:	e7e6      	b.n	80099b2 <__swsetup_r+0x1e>
 80099e4:	0758      	lsls	r0, r3, #29
 80099e6:	d512      	bpl.n	8009a0e <__swsetup_r+0x7a>
 80099e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099ea:	b141      	cbz	r1, 80099fe <__swsetup_r+0x6a>
 80099ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099f0:	4299      	cmp	r1, r3
 80099f2:	d002      	beq.n	80099fa <__swsetup_r+0x66>
 80099f4:	4630      	mov	r0, r6
 80099f6:	f7ff fcdb 	bl	80093b0 <_free_r>
 80099fa:	2300      	movs	r3, #0
 80099fc:	6363      	str	r3, [r4, #52]	; 0x34
 80099fe:	89a3      	ldrh	r3, [r4, #12]
 8009a00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a04:	81a3      	strh	r3, [r4, #12]
 8009a06:	2300      	movs	r3, #0
 8009a08:	6063      	str	r3, [r4, #4]
 8009a0a:	6923      	ldr	r3, [r4, #16]
 8009a0c:	6023      	str	r3, [r4, #0]
 8009a0e:	89a3      	ldrh	r3, [r4, #12]
 8009a10:	f043 0308 	orr.w	r3, r3, #8
 8009a14:	81a3      	strh	r3, [r4, #12]
 8009a16:	6923      	ldr	r3, [r4, #16]
 8009a18:	b94b      	cbnz	r3, 8009a2e <__swsetup_r+0x9a>
 8009a1a:	89a3      	ldrh	r3, [r4, #12]
 8009a1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a24:	d003      	beq.n	8009a2e <__swsetup_r+0x9a>
 8009a26:	4621      	mov	r1, r4
 8009a28:	4630      	mov	r0, r6
 8009a2a:	f000 f95b 	bl	8009ce4 <__smakebuf_r>
 8009a2e:	89a0      	ldrh	r0, [r4, #12]
 8009a30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a34:	f010 0301 	ands.w	r3, r0, #1
 8009a38:	d00a      	beq.n	8009a50 <__swsetup_r+0xbc>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	60a3      	str	r3, [r4, #8]
 8009a3e:	6963      	ldr	r3, [r4, #20]
 8009a40:	425b      	negs	r3, r3
 8009a42:	61a3      	str	r3, [r4, #24]
 8009a44:	6923      	ldr	r3, [r4, #16]
 8009a46:	b943      	cbnz	r3, 8009a5a <__swsetup_r+0xc6>
 8009a48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a4c:	d1ba      	bne.n	80099c4 <__swsetup_r+0x30>
 8009a4e:	bd70      	pop	{r4, r5, r6, pc}
 8009a50:	0781      	lsls	r1, r0, #30
 8009a52:	bf58      	it	pl
 8009a54:	6963      	ldrpl	r3, [r4, #20]
 8009a56:	60a3      	str	r3, [r4, #8]
 8009a58:	e7f4      	b.n	8009a44 <__swsetup_r+0xb0>
 8009a5a:	2000      	movs	r0, #0
 8009a5c:	e7f7      	b.n	8009a4e <__swsetup_r+0xba>
 8009a5e:	bf00      	nop
 8009a60:	2000000c 	.word	0x2000000c
 8009a64:	0800a050 	.word	0x0800a050
 8009a68:	0800a070 	.word	0x0800a070
 8009a6c:	0800a030 	.word	0x0800a030

08009a70 <__assert_func>:
 8009a70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a72:	4614      	mov	r4, r2
 8009a74:	461a      	mov	r2, r3
 8009a76:	4b09      	ldr	r3, [pc, #36]	; (8009a9c <__assert_func+0x2c>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4605      	mov	r5, r0
 8009a7c:	68d8      	ldr	r0, [r3, #12]
 8009a7e:	b14c      	cbz	r4, 8009a94 <__assert_func+0x24>
 8009a80:	4b07      	ldr	r3, [pc, #28]	; (8009aa0 <__assert_func+0x30>)
 8009a82:	9100      	str	r1, [sp, #0]
 8009a84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a88:	4906      	ldr	r1, [pc, #24]	; (8009aa4 <__assert_func+0x34>)
 8009a8a:	462b      	mov	r3, r5
 8009a8c:	f000 f8e0 	bl	8009c50 <fiprintf>
 8009a90:	f000 f9a5 	bl	8009dde <abort>
 8009a94:	4b04      	ldr	r3, [pc, #16]	; (8009aa8 <__assert_func+0x38>)
 8009a96:	461c      	mov	r4, r3
 8009a98:	e7f3      	b.n	8009a82 <__assert_func+0x12>
 8009a9a:	bf00      	nop
 8009a9c:	2000000c 	.word	0x2000000c
 8009aa0:	0800a1fd 	.word	0x0800a1fd
 8009aa4:	0800a20a 	.word	0x0800a20a
 8009aa8:	0800a238 	.word	0x0800a238

08009aac <_close_r>:
 8009aac:	b538      	push	{r3, r4, r5, lr}
 8009aae:	4d06      	ldr	r5, [pc, #24]	; (8009ac8 <_close_r+0x1c>)
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	4608      	mov	r0, r1
 8009ab6:	602b      	str	r3, [r5, #0]
 8009ab8:	f7f8 f858 	bl	8001b6c <_close>
 8009abc:	1c43      	adds	r3, r0, #1
 8009abe:	d102      	bne.n	8009ac6 <_close_r+0x1a>
 8009ac0:	682b      	ldr	r3, [r5, #0]
 8009ac2:	b103      	cbz	r3, 8009ac6 <_close_r+0x1a>
 8009ac4:	6023      	str	r3, [r4, #0]
 8009ac6:	bd38      	pop	{r3, r4, r5, pc}
 8009ac8:	200004dc 	.word	0x200004dc

08009acc <__sflush_r>:
 8009acc:	898a      	ldrh	r2, [r1, #12]
 8009ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad2:	4605      	mov	r5, r0
 8009ad4:	0710      	lsls	r0, r2, #28
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	d458      	bmi.n	8009b8c <__sflush_r+0xc0>
 8009ada:	684b      	ldr	r3, [r1, #4]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	dc05      	bgt.n	8009aec <__sflush_r+0x20>
 8009ae0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	dc02      	bgt.n	8009aec <__sflush_r+0x20>
 8009ae6:	2000      	movs	r0, #0
 8009ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009aee:	2e00      	cmp	r6, #0
 8009af0:	d0f9      	beq.n	8009ae6 <__sflush_r+0x1a>
 8009af2:	2300      	movs	r3, #0
 8009af4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009af8:	682f      	ldr	r7, [r5, #0]
 8009afa:	602b      	str	r3, [r5, #0]
 8009afc:	d032      	beq.n	8009b64 <__sflush_r+0x98>
 8009afe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b00:	89a3      	ldrh	r3, [r4, #12]
 8009b02:	075a      	lsls	r2, r3, #29
 8009b04:	d505      	bpl.n	8009b12 <__sflush_r+0x46>
 8009b06:	6863      	ldr	r3, [r4, #4]
 8009b08:	1ac0      	subs	r0, r0, r3
 8009b0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b0c:	b10b      	cbz	r3, 8009b12 <__sflush_r+0x46>
 8009b0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b10:	1ac0      	subs	r0, r0, r3
 8009b12:	2300      	movs	r3, #0
 8009b14:	4602      	mov	r2, r0
 8009b16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b18:	6a21      	ldr	r1, [r4, #32]
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	47b0      	blx	r6
 8009b1e:	1c43      	adds	r3, r0, #1
 8009b20:	89a3      	ldrh	r3, [r4, #12]
 8009b22:	d106      	bne.n	8009b32 <__sflush_r+0x66>
 8009b24:	6829      	ldr	r1, [r5, #0]
 8009b26:	291d      	cmp	r1, #29
 8009b28:	d82c      	bhi.n	8009b84 <__sflush_r+0xb8>
 8009b2a:	4a2a      	ldr	r2, [pc, #168]	; (8009bd4 <__sflush_r+0x108>)
 8009b2c:	40ca      	lsrs	r2, r1
 8009b2e:	07d6      	lsls	r6, r2, #31
 8009b30:	d528      	bpl.n	8009b84 <__sflush_r+0xb8>
 8009b32:	2200      	movs	r2, #0
 8009b34:	6062      	str	r2, [r4, #4]
 8009b36:	04d9      	lsls	r1, r3, #19
 8009b38:	6922      	ldr	r2, [r4, #16]
 8009b3a:	6022      	str	r2, [r4, #0]
 8009b3c:	d504      	bpl.n	8009b48 <__sflush_r+0x7c>
 8009b3e:	1c42      	adds	r2, r0, #1
 8009b40:	d101      	bne.n	8009b46 <__sflush_r+0x7a>
 8009b42:	682b      	ldr	r3, [r5, #0]
 8009b44:	b903      	cbnz	r3, 8009b48 <__sflush_r+0x7c>
 8009b46:	6560      	str	r0, [r4, #84]	; 0x54
 8009b48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b4a:	602f      	str	r7, [r5, #0]
 8009b4c:	2900      	cmp	r1, #0
 8009b4e:	d0ca      	beq.n	8009ae6 <__sflush_r+0x1a>
 8009b50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b54:	4299      	cmp	r1, r3
 8009b56:	d002      	beq.n	8009b5e <__sflush_r+0x92>
 8009b58:	4628      	mov	r0, r5
 8009b5a:	f7ff fc29 	bl	80093b0 <_free_r>
 8009b5e:	2000      	movs	r0, #0
 8009b60:	6360      	str	r0, [r4, #52]	; 0x34
 8009b62:	e7c1      	b.n	8009ae8 <__sflush_r+0x1c>
 8009b64:	6a21      	ldr	r1, [r4, #32]
 8009b66:	2301      	movs	r3, #1
 8009b68:	4628      	mov	r0, r5
 8009b6a:	47b0      	blx	r6
 8009b6c:	1c41      	adds	r1, r0, #1
 8009b6e:	d1c7      	bne.n	8009b00 <__sflush_r+0x34>
 8009b70:	682b      	ldr	r3, [r5, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d0c4      	beq.n	8009b00 <__sflush_r+0x34>
 8009b76:	2b1d      	cmp	r3, #29
 8009b78:	d001      	beq.n	8009b7e <__sflush_r+0xb2>
 8009b7a:	2b16      	cmp	r3, #22
 8009b7c:	d101      	bne.n	8009b82 <__sflush_r+0xb6>
 8009b7e:	602f      	str	r7, [r5, #0]
 8009b80:	e7b1      	b.n	8009ae6 <__sflush_r+0x1a>
 8009b82:	89a3      	ldrh	r3, [r4, #12]
 8009b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b88:	81a3      	strh	r3, [r4, #12]
 8009b8a:	e7ad      	b.n	8009ae8 <__sflush_r+0x1c>
 8009b8c:	690f      	ldr	r7, [r1, #16]
 8009b8e:	2f00      	cmp	r7, #0
 8009b90:	d0a9      	beq.n	8009ae6 <__sflush_r+0x1a>
 8009b92:	0793      	lsls	r3, r2, #30
 8009b94:	680e      	ldr	r6, [r1, #0]
 8009b96:	bf08      	it	eq
 8009b98:	694b      	ldreq	r3, [r1, #20]
 8009b9a:	600f      	str	r7, [r1, #0]
 8009b9c:	bf18      	it	ne
 8009b9e:	2300      	movne	r3, #0
 8009ba0:	eba6 0807 	sub.w	r8, r6, r7
 8009ba4:	608b      	str	r3, [r1, #8]
 8009ba6:	f1b8 0f00 	cmp.w	r8, #0
 8009baa:	dd9c      	ble.n	8009ae6 <__sflush_r+0x1a>
 8009bac:	6a21      	ldr	r1, [r4, #32]
 8009bae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009bb0:	4643      	mov	r3, r8
 8009bb2:	463a      	mov	r2, r7
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	47b0      	blx	r6
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	dc06      	bgt.n	8009bca <__sflush_r+0xfe>
 8009bbc:	89a3      	ldrh	r3, [r4, #12]
 8009bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bc2:	81a3      	strh	r3, [r4, #12]
 8009bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc8:	e78e      	b.n	8009ae8 <__sflush_r+0x1c>
 8009bca:	4407      	add	r7, r0
 8009bcc:	eba8 0800 	sub.w	r8, r8, r0
 8009bd0:	e7e9      	b.n	8009ba6 <__sflush_r+0xda>
 8009bd2:	bf00      	nop
 8009bd4:	20400001 	.word	0x20400001

08009bd8 <_fflush_r>:
 8009bd8:	b538      	push	{r3, r4, r5, lr}
 8009bda:	690b      	ldr	r3, [r1, #16]
 8009bdc:	4605      	mov	r5, r0
 8009bde:	460c      	mov	r4, r1
 8009be0:	b913      	cbnz	r3, 8009be8 <_fflush_r+0x10>
 8009be2:	2500      	movs	r5, #0
 8009be4:	4628      	mov	r0, r5
 8009be6:	bd38      	pop	{r3, r4, r5, pc}
 8009be8:	b118      	cbz	r0, 8009bf2 <_fflush_r+0x1a>
 8009bea:	6983      	ldr	r3, [r0, #24]
 8009bec:	b90b      	cbnz	r3, 8009bf2 <_fflush_r+0x1a>
 8009bee:	f7fe ff89 	bl	8008b04 <__sinit>
 8009bf2:	4b14      	ldr	r3, [pc, #80]	; (8009c44 <_fflush_r+0x6c>)
 8009bf4:	429c      	cmp	r4, r3
 8009bf6:	d11b      	bne.n	8009c30 <_fflush_r+0x58>
 8009bf8:	686c      	ldr	r4, [r5, #4]
 8009bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d0ef      	beq.n	8009be2 <_fflush_r+0xa>
 8009c02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c04:	07d0      	lsls	r0, r2, #31
 8009c06:	d404      	bmi.n	8009c12 <_fflush_r+0x3a>
 8009c08:	0599      	lsls	r1, r3, #22
 8009c0a:	d402      	bmi.n	8009c12 <_fflush_r+0x3a>
 8009c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c0e:	f7ff f81c 	bl	8008c4a <__retarget_lock_acquire_recursive>
 8009c12:	4628      	mov	r0, r5
 8009c14:	4621      	mov	r1, r4
 8009c16:	f7ff ff59 	bl	8009acc <__sflush_r>
 8009c1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c1c:	07da      	lsls	r2, r3, #31
 8009c1e:	4605      	mov	r5, r0
 8009c20:	d4e0      	bmi.n	8009be4 <_fflush_r+0xc>
 8009c22:	89a3      	ldrh	r3, [r4, #12]
 8009c24:	059b      	lsls	r3, r3, #22
 8009c26:	d4dd      	bmi.n	8009be4 <_fflush_r+0xc>
 8009c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c2a:	f7ff f80f 	bl	8008c4c <__retarget_lock_release_recursive>
 8009c2e:	e7d9      	b.n	8009be4 <_fflush_r+0xc>
 8009c30:	4b05      	ldr	r3, [pc, #20]	; (8009c48 <_fflush_r+0x70>)
 8009c32:	429c      	cmp	r4, r3
 8009c34:	d101      	bne.n	8009c3a <_fflush_r+0x62>
 8009c36:	68ac      	ldr	r4, [r5, #8]
 8009c38:	e7df      	b.n	8009bfa <_fflush_r+0x22>
 8009c3a:	4b04      	ldr	r3, [pc, #16]	; (8009c4c <_fflush_r+0x74>)
 8009c3c:	429c      	cmp	r4, r3
 8009c3e:	bf08      	it	eq
 8009c40:	68ec      	ldreq	r4, [r5, #12]
 8009c42:	e7da      	b.n	8009bfa <_fflush_r+0x22>
 8009c44:	0800a050 	.word	0x0800a050
 8009c48:	0800a070 	.word	0x0800a070
 8009c4c:	0800a030 	.word	0x0800a030

08009c50 <fiprintf>:
 8009c50:	b40e      	push	{r1, r2, r3}
 8009c52:	b503      	push	{r0, r1, lr}
 8009c54:	4601      	mov	r1, r0
 8009c56:	ab03      	add	r3, sp, #12
 8009c58:	4805      	ldr	r0, [pc, #20]	; (8009c70 <fiprintf+0x20>)
 8009c5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c5e:	6800      	ldr	r0, [r0, #0]
 8009c60:	9301      	str	r3, [sp, #4]
 8009c62:	f7ff fcaf 	bl	80095c4 <_vfiprintf_r>
 8009c66:	b002      	add	sp, #8
 8009c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c6c:	b003      	add	sp, #12
 8009c6e:	4770      	bx	lr
 8009c70:	2000000c 	.word	0x2000000c

08009c74 <_lseek_r>:
 8009c74:	b538      	push	{r3, r4, r5, lr}
 8009c76:	4d07      	ldr	r5, [pc, #28]	; (8009c94 <_lseek_r+0x20>)
 8009c78:	4604      	mov	r4, r0
 8009c7a:	4608      	mov	r0, r1
 8009c7c:	4611      	mov	r1, r2
 8009c7e:	2200      	movs	r2, #0
 8009c80:	602a      	str	r2, [r5, #0]
 8009c82:	461a      	mov	r2, r3
 8009c84:	f7f7 ff99 	bl	8001bba <_lseek>
 8009c88:	1c43      	adds	r3, r0, #1
 8009c8a:	d102      	bne.n	8009c92 <_lseek_r+0x1e>
 8009c8c:	682b      	ldr	r3, [r5, #0]
 8009c8e:	b103      	cbz	r3, 8009c92 <_lseek_r+0x1e>
 8009c90:	6023      	str	r3, [r4, #0]
 8009c92:	bd38      	pop	{r3, r4, r5, pc}
 8009c94:	200004dc 	.word	0x200004dc

08009c98 <__swhatbuf_r>:
 8009c98:	b570      	push	{r4, r5, r6, lr}
 8009c9a:	460e      	mov	r6, r1
 8009c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ca0:	2900      	cmp	r1, #0
 8009ca2:	b096      	sub	sp, #88	; 0x58
 8009ca4:	4614      	mov	r4, r2
 8009ca6:	461d      	mov	r5, r3
 8009ca8:	da08      	bge.n	8009cbc <__swhatbuf_r+0x24>
 8009caa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	602a      	str	r2, [r5, #0]
 8009cb2:	061a      	lsls	r2, r3, #24
 8009cb4:	d410      	bmi.n	8009cd8 <__swhatbuf_r+0x40>
 8009cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cba:	e00e      	b.n	8009cda <__swhatbuf_r+0x42>
 8009cbc:	466a      	mov	r2, sp
 8009cbe:	f000 f895 	bl	8009dec <_fstat_r>
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	dbf1      	blt.n	8009caa <__swhatbuf_r+0x12>
 8009cc6:	9a01      	ldr	r2, [sp, #4]
 8009cc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ccc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009cd0:	425a      	negs	r2, r3
 8009cd2:	415a      	adcs	r2, r3
 8009cd4:	602a      	str	r2, [r5, #0]
 8009cd6:	e7ee      	b.n	8009cb6 <__swhatbuf_r+0x1e>
 8009cd8:	2340      	movs	r3, #64	; 0x40
 8009cda:	2000      	movs	r0, #0
 8009cdc:	6023      	str	r3, [r4, #0]
 8009cde:	b016      	add	sp, #88	; 0x58
 8009ce0:	bd70      	pop	{r4, r5, r6, pc}
	...

08009ce4 <__smakebuf_r>:
 8009ce4:	898b      	ldrh	r3, [r1, #12]
 8009ce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ce8:	079d      	lsls	r5, r3, #30
 8009cea:	4606      	mov	r6, r0
 8009cec:	460c      	mov	r4, r1
 8009cee:	d507      	bpl.n	8009d00 <__smakebuf_r+0x1c>
 8009cf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009cf4:	6023      	str	r3, [r4, #0]
 8009cf6:	6123      	str	r3, [r4, #16]
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	6163      	str	r3, [r4, #20]
 8009cfc:	b002      	add	sp, #8
 8009cfe:	bd70      	pop	{r4, r5, r6, pc}
 8009d00:	ab01      	add	r3, sp, #4
 8009d02:	466a      	mov	r2, sp
 8009d04:	f7ff ffc8 	bl	8009c98 <__swhatbuf_r>
 8009d08:	9900      	ldr	r1, [sp, #0]
 8009d0a:	4605      	mov	r5, r0
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	f7ff fbbb 	bl	8009488 <_malloc_r>
 8009d12:	b948      	cbnz	r0, 8009d28 <__smakebuf_r+0x44>
 8009d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d18:	059a      	lsls	r2, r3, #22
 8009d1a:	d4ef      	bmi.n	8009cfc <__smakebuf_r+0x18>
 8009d1c:	f023 0303 	bic.w	r3, r3, #3
 8009d20:	f043 0302 	orr.w	r3, r3, #2
 8009d24:	81a3      	strh	r3, [r4, #12]
 8009d26:	e7e3      	b.n	8009cf0 <__smakebuf_r+0xc>
 8009d28:	4b0d      	ldr	r3, [pc, #52]	; (8009d60 <__smakebuf_r+0x7c>)
 8009d2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d2c:	89a3      	ldrh	r3, [r4, #12]
 8009d2e:	6020      	str	r0, [r4, #0]
 8009d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d34:	81a3      	strh	r3, [r4, #12]
 8009d36:	9b00      	ldr	r3, [sp, #0]
 8009d38:	6163      	str	r3, [r4, #20]
 8009d3a:	9b01      	ldr	r3, [sp, #4]
 8009d3c:	6120      	str	r0, [r4, #16]
 8009d3e:	b15b      	cbz	r3, 8009d58 <__smakebuf_r+0x74>
 8009d40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d44:	4630      	mov	r0, r6
 8009d46:	f000 f863 	bl	8009e10 <_isatty_r>
 8009d4a:	b128      	cbz	r0, 8009d58 <__smakebuf_r+0x74>
 8009d4c:	89a3      	ldrh	r3, [r4, #12]
 8009d4e:	f023 0303 	bic.w	r3, r3, #3
 8009d52:	f043 0301 	orr.w	r3, r3, #1
 8009d56:	81a3      	strh	r3, [r4, #12]
 8009d58:	89a0      	ldrh	r0, [r4, #12]
 8009d5a:	4305      	orrs	r5, r0
 8009d5c:	81a5      	strh	r5, [r4, #12]
 8009d5e:	e7cd      	b.n	8009cfc <__smakebuf_r+0x18>
 8009d60:	08008a9d 	.word	0x08008a9d

08009d64 <__ascii_mbtowc>:
 8009d64:	b082      	sub	sp, #8
 8009d66:	b901      	cbnz	r1, 8009d6a <__ascii_mbtowc+0x6>
 8009d68:	a901      	add	r1, sp, #4
 8009d6a:	b142      	cbz	r2, 8009d7e <__ascii_mbtowc+0x1a>
 8009d6c:	b14b      	cbz	r3, 8009d82 <__ascii_mbtowc+0x1e>
 8009d6e:	7813      	ldrb	r3, [r2, #0]
 8009d70:	600b      	str	r3, [r1, #0]
 8009d72:	7812      	ldrb	r2, [r2, #0]
 8009d74:	1e10      	subs	r0, r2, #0
 8009d76:	bf18      	it	ne
 8009d78:	2001      	movne	r0, #1
 8009d7a:	b002      	add	sp, #8
 8009d7c:	4770      	bx	lr
 8009d7e:	4610      	mov	r0, r2
 8009d80:	e7fb      	b.n	8009d7a <__ascii_mbtowc+0x16>
 8009d82:	f06f 0001 	mvn.w	r0, #1
 8009d86:	e7f8      	b.n	8009d7a <__ascii_mbtowc+0x16>

08009d88 <__malloc_lock>:
 8009d88:	4801      	ldr	r0, [pc, #4]	; (8009d90 <__malloc_lock+0x8>)
 8009d8a:	f7fe bf5e 	b.w	8008c4a <__retarget_lock_acquire_recursive>
 8009d8e:	bf00      	nop
 8009d90:	200004d0 	.word	0x200004d0

08009d94 <__malloc_unlock>:
 8009d94:	4801      	ldr	r0, [pc, #4]	; (8009d9c <__malloc_unlock+0x8>)
 8009d96:	f7fe bf59 	b.w	8008c4c <__retarget_lock_release_recursive>
 8009d9a:	bf00      	nop
 8009d9c:	200004d0 	.word	0x200004d0

08009da0 <_read_r>:
 8009da0:	b538      	push	{r3, r4, r5, lr}
 8009da2:	4d07      	ldr	r5, [pc, #28]	; (8009dc0 <_read_r+0x20>)
 8009da4:	4604      	mov	r4, r0
 8009da6:	4608      	mov	r0, r1
 8009da8:	4611      	mov	r1, r2
 8009daa:	2200      	movs	r2, #0
 8009dac:	602a      	str	r2, [r5, #0]
 8009dae:	461a      	mov	r2, r3
 8009db0:	f7f7 fe9e 	bl	8001af0 <_read>
 8009db4:	1c43      	adds	r3, r0, #1
 8009db6:	d102      	bne.n	8009dbe <_read_r+0x1e>
 8009db8:	682b      	ldr	r3, [r5, #0]
 8009dba:	b103      	cbz	r3, 8009dbe <_read_r+0x1e>
 8009dbc:	6023      	str	r3, [r4, #0]
 8009dbe:	bd38      	pop	{r3, r4, r5, pc}
 8009dc0:	200004dc 	.word	0x200004dc

08009dc4 <__ascii_wctomb>:
 8009dc4:	b149      	cbz	r1, 8009dda <__ascii_wctomb+0x16>
 8009dc6:	2aff      	cmp	r2, #255	; 0xff
 8009dc8:	bf85      	ittet	hi
 8009dca:	238a      	movhi	r3, #138	; 0x8a
 8009dcc:	6003      	strhi	r3, [r0, #0]
 8009dce:	700a      	strbls	r2, [r1, #0]
 8009dd0:	f04f 30ff 	movhi.w	r0, #4294967295
 8009dd4:	bf98      	it	ls
 8009dd6:	2001      	movls	r0, #1
 8009dd8:	4770      	bx	lr
 8009dda:	4608      	mov	r0, r1
 8009ddc:	4770      	bx	lr

08009dde <abort>:
 8009dde:	b508      	push	{r3, lr}
 8009de0:	2006      	movs	r0, #6
 8009de2:	f000 f84d 	bl	8009e80 <raise>
 8009de6:	2001      	movs	r0, #1
 8009de8:	f7f7 fe78 	bl	8001adc <_exit>

08009dec <_fstat_r>:
 8009dec:	b538      	push	{r3, r4, r5, lr}
 8009dee:	4d07      	ldr	r5, [pc, #28]	; (8009e0c <_fstat_r+0x20>)
 8009df0:	2300      	movs	r3, #0
 8009df2:	4604      	mov	r4, r0
 8009df4:	4608      	mov	r0, r1
 8009df6:	4611      	mov	r1, r2
 8009df8:	602b      	str	r3, [r5, #0]
 8009dfa:	f7f7 fec3 	bl	8001b84 <_fstat>
 8009dfe:	1c43      	adds	r3, r0, #1
 8009e00:	d102      	bne.n	8009e08 <_fstat_r+0x1c>
 8009e02:	682b      	ldr	r3, [r5, #0]
 8009e04:	b103      	cbz	r3, 8009e08 <_fstat_r+0x1c>
 8009e06:	6023      	str	r3, [r4, #0]
 8009e08:	bd38      	pop	{r3, r4, r5, pc}
 8009e0a:	bf00      	nop
 8009e0c:	200004dc 	.word	0x200004dc

08009e10 <_isatty_r>:
 8009e10:	b538      	push	{r3, r4, r5, lr}
 8009e12:	4d06      	ldr	r5, [pc, #24]	; (8009e2c <_isatty_r+0x1c>)
 8009e14:	2300      	movs	r3, #0
 8009e16:	4604      	mov	r4, r0
 8009e18:	4608      	mov	r0, r1
 8009e1a:	602b      	str	r3, [r5, #0]
 8009e1c:	f7f7 fec2 	bl	8001ba4 <_isatty>
 8009e20:	1c43      	adds	r3, r0, #1
 8009e22:	d102      	bne.n	8009e2a <_isatty_r+0x1a>
 8009e24:	682b      	ldr	r3, [r5, #0]
 8009e26:	b103      	cbz	r3, 8009e2a <_isatty_r+0x1a>
 8009e28:	6023      	str	r3, [r4, #0]
 8009e2a:	bd38      	pop	{r3, r4, r5, pc}
 8009e2c:	200004dc 	.word	0x200004dc

08009e30 <_raise_r>:
 8009e30:	291f      	cmp	r1, #31
 8009e32:	b538      	push	{r3, r4, r5, lr}
 8009e34:	4604      	mov	r4, r0
 8009e36:	460d      	mov	r5, r1
 8009e38:	d904      	bls.n	8009e44 <_raise_r+0x14>
 8009e3a:	2316      	movs	r3, #22
 8009e3c:	6003      	str	r3, [r0, #0]
 8009e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e42:	bd38      	pop	{r3, r4, r5, pc}
 8009e44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e46:	b112      	cbz	r2, 8009e4e <_raise_r+0x1e>
 8009e48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e4c:	b94b      	cbnz	r3, 8009e62 <_raise_r+0x32>
 8009e4e:	4620      	mov	r0, r4
 8009e50:	f000 f830 	bl	8009eb4 <_getpid_r>
 8009e54:	462a      	mov	r2, r5
 8009e56:	4601      	mov	r1, r0
 8009e58:	4620      	mov	r0, r4
 8009e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e5e:	f000 b817 	b.w	8009e90 <_kill_r>
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d00a      	beq.n	8009e7c <_raise_r+0x4c>
 8009e66:	1c59      	adds	r1, r3, #1
 8009e68:	d103      	bne.n	8009e72 <_raise_r+0x42>
 8009e6a:	2316      	movs	r3, #22
 8009e6c:	6003      	str	r3, [r0, #0]
 8009e6e:	2001      	movs	r0, #1
 8009e70:	e7e7      	b.n	8009e42 <_raise_r+0x12>
 8009e72:	2400      	movs	r4, #0
 8009e74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e78:	4628      	mov	r0, r5
 8009e7a:	4798      	blx	r3
 8009e7c:	2000      	movs	r0, #0
 8009e7e:	e7e0      	b.n	8009e42 <_raise_r+0x12>

08009e80 <raise>:
 8009e80:	4b02      	ldr	r3, [pc, #8]	; (8009e8c <raise+0xc>)
 8009e82:	4601      	mov	r1, r0
 8009e84:	6818      	ldr	r0, [r3, #0]
 8009e86:	f7ff bfd3 	b.w	8009e30 <_raise_r>
 8009e8a:	bf00      	nop
 8009e8c:	2000000c 	.word	0x2000000c

08009e90 <_kill_r>:
 8009e90:	b538      	push	{r3, r4, r5, lr}
 8009e92:	4d07      	ldr	r5, [pc, #28]	; (8009eb0 <_kill_r+0x20>)
 8009e94:	2300      	movs	r3, #0
 8009e96:	4604      	mov	r4, r0
 8009e98:	4608      	mov	r0, r1
 8009e9a:	4611      	mov	r1, r2
 8009e9c:	602b      	str	r3, [r5, #0]
 8009e9e:	f7f7 fe0d 	bl	8001abc <_kill>
 8009ea2:	1c43      	adds	r3, r0, #1
 8009ea4:	d102      	bne.n	8009eac <_kill_r+0x1c>
 8009ea6:	682b      	ldr	r3, [r5, #0]
 8009ea8:	b103      	cbz	r3, 8009eac <_kill_r+0x1c>
 8009eaa:	6023      	str	r3, [r4, #0]
 8009eac:	bd38      	pop	{r3, r4, r5, pc}
 8009eae:	bf00      	nop
 8009eb0:	200004dc 	.word	0x200004dc

08009eb4 <_getpid_r>:
 8009eb4:	f7f7 bdfa 	b.w	8001aac <_getpid>

08009eb8 <_init>:
 8009eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eba:	bf00      	nop
 8009ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ebe:	bc08      	pop	{r3}
 8009ec0:	469e      	mov	lr, r3
 8009ec2:	4770      	bx	lr

08009ec4 <_fini>:
 8009ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec6:	bf00      	nop
 8009ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eca:	bc08      	pop	{r3}
 8009ecc:	469e      	mov	lr, r3
 8009ece:	4770      	bx	lr
