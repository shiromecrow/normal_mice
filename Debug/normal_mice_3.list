
normal_mice_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c474  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800c608  0800c608  0001c608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca7c  0800ca7c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca7c  0800ca7c  0001ca7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca84  0800ca84  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca84  0800ca84  0001ca84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca88  0800ca88  0001ca88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800ca8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a6c  200001dc  0800cc68  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c48  0800cc68  00020c48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018cf8  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e51  00000000  00000000  00038f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  0003cd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001550  00000000  00000000  0003e480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f90  00000000  00000000  0003f9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d526  00000000  00000000  00065960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000decc9  00000000  00000000  00082e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00161b4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000701c  00000000  00000000  00161ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c5ec 	.word	0x0800c5ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800c5ec 	.word	0x0800c5ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <control_test_motor>:

char modeacc;
volatile char g_acc_flag;

void control_test_motor(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
	pl_motor_standby(1);
 8000f52:	2001      	movs	r0, #1
 8000f54:	f001 f8fa 	bl	800214c <pl_motor_standby>
	pl_motor_start();
 8000f58:	f001 f962 	bl	8002220 <pl_motor_start>

//	float v_e=straight_table(-180, -100, -100, -500, 7000);
//	float v_e=straight_table(180, 200, 200, 600, 7000);
	float v_e=straight_table(180, 150, 600, 600, 7000);
 8000f5c:	ed9f 2a27 	vldr	s4, [pc, #156]	; 8000ffc <control_test_motor+0xb0>
 8000f60:	eddf 1a27 	vldr	s3, [pc, #156]	; 8001000 <control_test_motor+0xb4>
 8000f64:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8001000 <control_test_motor+0xb4>
 8000f68:	eddf 0a26 	vldr	s1, [pc, #152]	; 8001004 <control_test_motor+0xb8>
 8000f6c:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8001008 <control_test_motor+0xbc>
 8000f70:	f000 fd66 	bl	8001a40 <straight_table>
 8000f74:	ed87 0a01 	vstr	s0, [r7, #4]
	slalom_table(v_e,90, 0, 0, 400, 7000);
 8000f78:	eddf 2a20 	vldr	s5, [pc, #128]	; 8000ffc <control_test_motor+0xb0>
 8000f7c:	ed9f 2a23 	vldr	s4, [pc, #140]	; 800100c <control_test_motor+0xc0>
 8000f80:	eddf 1a23 	vldr	s3, [pc, #140]	; 8001010 <control_test_motor+0xc4>
 8000f84:	ed9f 1a22 	vldr	s2, [pc, #136]	; 8001010 <control_test_motor+0xc4>
 8000f88:	eddf 0a22 	vldr	s1, [pc, #136]	; 8001014 <control_test_motor+0xc8>
 8000f8c:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f90:	f000 ff2a 	bl	8001de8 <slalom_table>
	v_e=straight_table(180, v_e, 150, 600, 7000);
 8000f94:	ed9f 2a19 	vldr	s4, [pc, #100]	; 8000ffc <control_test_motor+0xb0>
 8000f98:	eddf 1a19 	vldr	s3, [pc, #100]	; 8001000 <control_test_motor+0xb4>
 8000f9c:	ed9f 1a19 	vldr	s2, [pc, #100]	; 8001004 <control_test_motor+0xb8>
 8000fa0:	edd7 0a01 	vldr	s1, [r7, #4]
 8000fa4:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001008 <control_test_motor+0xbc>
 8000fa8:	f000 fd4a 	bl	8001a40 <straight_table>
 8000fac:	ed87 0a01 	vstr	s0, [r7, #4]
	pl_motor_stop();
 8000fb0:	f001 f94a 	bl	8002248 <pl_motor_stop>
	HAL_Delay(500);
 8000fb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fb8:	f003 fae2 	bl	8004580 <HAL_Delay>

	pl_motor_standby(1);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f001 f8c5 	bl	800214c <pl_motor_standby>
	pl_motor_start();
 8000fc2:	f001 f92d 	bl	8002220 <pl_motor_start>
	v_e=turning_table(360, 240, 240, 600, 7000);
 8000fc6:	ed9f 2a0d 	vldr	s4, [pc, #52]	; 8000ffc <control_test_motor+0xb0>
 8000fca:	eddf 1a0d 	vldr	s3, [pc, #52]	; 8001000 <control_test_motor+0xb4>
 8000fce:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8001018 <control_test_motor+0xcc>
 8000fd2:	eddf 0a11 	vldr	s1, [pc, #68]	; 8001018 <control_test_motor+0xcc>
 8000fd6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800101c <control_test_motor+0xd0>
 8000fda:	f000 fe1b 	bl	8001c14 <turning_table>
 8000fde:	ed87 0a01 	vstr	s0, [r7, #4]

	pl_motor_stop();
 8000fe2:	f001 f931 	bl	8002248 <pl_motor_stop>
	HAL_Delay(500);
 8000fe6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fea:	f003 fac9 	bl	8004580 <HAL_Delay>
	pl_motor_standby(0);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f001 f8ac 	bl	800214c <pl_motor_standby>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	45dac000 	.word	0x45dac000
 8001000:	44160000 	.word	0x44160000
 8001004:	43160000 	.word	0x43160000
 8001008:	43340000 	.word	0x43340000
 800100c:	43c80000 	.word	0x43c80000
 8001010:	00000000 	.word	0x00000000
 8001014:	42b40000 	.word	0x42b40000
 8001018:	43700000 	.word	0x43700000
 800101c:	43b40000 	.word	0x43b40000

08001020 <motor_init>:
/*	モータの初期化					(pl_speaker_init)	*/
/*******************************************************************/
/*	モータの初期化する。						*/
/*******************************************************************/
void motor_init(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

	modeacc=0;
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <motor_init+0x1c>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
	g_acc_flag=0;
 800102a:	4b05      	ldr	r3, [pc, #20]	; (8001040 <motor_init+0x20>)
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]


}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000238 	.word	0x20000238
 8001040:	20000239 	.word	0x20000239
 8001044:	00000000 	.word	0x00000000

08001048 <interrupt_Motor>:



void interrupt_Motor(void){
 8001048:	b5b0      	push	{r4, r5, r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af02      	add	r7, sp, #8

	if (modeacc == 0) {
		//g_acc_flag=0;
	}
	if (modeacc == 1) {
 800104e:	4bc6      	ldr	r3, [pc, #792]	; (8001368 <interrupt_Motor+0x320>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b01      	cmp	r3, #1
 8001054:	f040 8088 	bne.w	8001168 <interrupt_Motor+0x120>
		g_TargetStraight.displacement += g_TargetStraight.velocity*INTERRUPT_TIME;// + g_TargetStraight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8001058:	4bc4      	ldr	r3, [pc, #784]	; (800136c <interrupt_Motor+0x324>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fa73 	bl	8000548 <__aeabi_f2d>
 8001062:	4604      	mov	r4, r0
 8001064:	460d      	mov	r5, r1
 8001066:	4bc1      	ldr	r3, [pc, #772]	; (800136c <interrupt_Motor+0x324>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fa6c 	bl	8000548 <__aeabi_f2d>
 8001070:	a3b9      	add	r3, pc, #740	; (adr r3, 8001358 <interrupt_Motor+0x310>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	f7ff fabf 	bl	80005f8 <__aeabi_dmul>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4620      	mov	r0, r4
 8001080:	4629      	mov	r1, r5
 8001082:	f7ff f903 	bl	800028c <__adddf3>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4610      	mov	r0, r2
 800108c:	4619      	mov	r1, r3
 800108e:	f7ff fd8b 	bl	8000ba8 <__aeabi_d2f>
 8001092:	4603      	mov	r3, r0
 8001094:	4ab5      	ldr	r2, [pc, #724]	; (800136c <interrupt_Motor+0x324>)
 8001096:	6093      	str	r3, [r2, #8]
		g_TargetStraight.velocity += g_TargetStraight.acceleration*INTERRUPT_TIME;
 8001098:	4bb4      	ldr	r3, [pc, #720]	; (800136c <interrupt_Motor+0x324>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fa53 	bl	8000548 <__aeabi_f2d>
 80010a2:	4604      	mov	r4, r0
 80010a4:	460d      	mov	r5, r1
 80010a6:	4bb1      	ldr	r3, [pc, #708]	; (800136c <interrupt_Motor+0x324>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa4c 	bl	8000548 <__aeabi_f2d>
 80010b0:	a3a9      	add	r3, pc, #676	; (adr r3, 8001358 <interrupt_Motor+0x310>)
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	f7ff fa9f 	bl	80005f8 <__aeabi_dmul>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4620      	mov	r0, r4
 80010c0:	4629      	mov	r1, r5
 80010c2:	f7ff f8e3 	bl	800028c <__adddf3>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	f7ff fd6b 	bl	8000ba8 <__aeabi_d2f>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4aa5      	ldr	r2, [pc, #660]	; (800136c <interrupt_Motor+0x324>)
 80010d6:	6013      	str	r3, [r2, #0]
		g_TargetTurning.displacement += g_TargetTurning.velocity*INTERRUPT_TIME;// + g_TargetTurning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80010d8:	4ba5      	ldr	r3, [pc, #660]	; (8001370 <interrupt_Motor+0x328>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fa33 	bl	8000548 <__aeabi_f2d>
 80010e2:	4604      	mov	r4, r0
 80010e4:	460d      	mov	r5, r1
 80010e6:	4ba2      	ldr	r3, [pc, #648]	; (8001370 <interrupt_Motor+0x328>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fa2c 	bl	8000548 <__aeabi_f2d>
 80010f0:	a399      	add	r3, pc, #612	; (adr r3, 8001358 <interrupt_Motor+0x310>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f7ff fa7f 	bl	80005f8 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4620      	mov	r0, r4
 8001100:	4629      	mov	r1, r5
 8001102:	f7ff f8c3 	bl	800028c <__adddf3>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4610      	mov	r0, r2
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff fd4b 	bl	8000ba8 <__aeabi_d2f>
 8001112:	4603      	mov	r3, r0
 8001114:	4a96      	ldr	r2, [pc, #600]	; (8001370 <interrupt_Motor+0x328>)
 8001116:	6093      	str	r3, [r2, #8]
		g_TargetTurning.velocity += g_TargetTurning.acceleration*INTERRUPT_TIME;
 8001118:	4b95      	ldr	r3, [pc, #596]	; (8001370 <interrupt_Motor+0x328>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fa13 	bl	8000548 <__aeabi_f2d>
 8001122:	4604      	mov	r4, r0
 8001124:	460d      	mov	r5, r1
 8001126:	4b92      	ldr	r3, [pc, #584]	; (8001370 <interrupt_Motor+0x328>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fa0c 	bl	8000548 <__aeabi_f2d>
 8001130:	a389      	add	r3, pc, #548	; (adr r3, 8001358 <interrupt_Motor+0x310>)
 8001132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001136:	f7ff fa5f 	bl	80005f8 <__aeabi_dmul>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4620      	mov	r0, r4
 8001140:	4629      	mov	r1, r5
 8001142:	f7ff f8a3 	bl	800028c <__adddf3>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff fd2b 	bl	8000ba8 <__aeabi_d2f>
 8001152:	4603      	mov	r3, r0
 8001154:	4a86      	ldr	r2, [pc, #536]	; (8001370 <interrupt_Motor+0x328>)
 8001156:	6013      	str	r3, [r2, #0]
		cal_table(g_TrapezoidStraight,&g_TargetStraight);
 8001158:	4b86      	ldr	r3, [pc, #536]	; (8001374 <interrupt_Motor+0x32c>)
 800115a:	4a84      	ldr	r2, [pc, #528]	; (800136c <interrupt_Motor+0x324>)
 800115c:	9201      	str	r2, [sp, #4]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	9200      	str	r2, [sp, #0]
 8001162:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001164:	f000 f91e 	bl	80013a4 <cal_table>
	}
	if (modeacc == 2){
 8001168:	4b7f      	ldr	r3, [pc, #508]	; (8001368 <interrupt_Motor+0x320>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b02      	cmp	r3, #2
 800116e:	f040 8088 	bne.w	8001282 <interrupt_Motor+0x23a>
		g_TargetStraight.displacement += g_TargetStraight.velocity*INTERRUPT_TIME;// + g_TargetStraight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8001172:	4b7e      	ldr	r3, [pc, #504]	; (800136c <interrupt_Motor+0x324>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f9e6 	bl	8000548 <__aeabi_f2d>
 800117c:	4604      	mov	r4, r0
 800117e:	460d      	mov	r5, r1
 8001180:	4b7a      	ldr	r3, [pc, #488]	; (800136c <interrupt_Motor+0x324>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f9df 	bl	8000548 <__aeabi_f2d>
 800118a:	a373      	add	r3, pc, #460	; (adr r3, 8001358 <interrupt_Motor+0x310>)
 800118c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001190:	f7ff fa32 	bl	80005f8 <__aeabi_dmul>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4620      	mov	r0, r4
 800119a:	4629      	mov	r1, r5
 800119c:	f7ff f876 	bl	800028c <__adddf3>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	f7ff fcfe 	bl	8000ba8 <__aeabi_d2f>
 80011ac:	4603      	mov	r3, r0
 80011ae:	4a6f      	ldr	r2, [pc, #444]	; (800136c <interrupt_Motor+0x324>)
 80011b0:	6093      	str	r3, [r2, #8]
		g_TargetStraight.velocity += g_TargetStraight.acceleration*INTERRUPT_TIME;
 80011b2:	4b6e      	ldr	r3, [pc, #440]	; (800136c <interrupt_Motor+0x324>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f9c6 	bl	8000548 <__aeabi_f2d>
 80011bc:	4604      	mov	r4, r0
 80011be:	460d      	mov	r5, r1
 80011c0:	4b6a      	ldr	r3, [pc, #424]	; (800136c <interrupt_Motor+0x324>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f9bf 	bl	8000548 <__aeabi_f2d>
 80011ca:	a363      	add	r3, pc, #396	; (adr r3, 8001358 <interrupt_Motor+0x310>)
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	f7ff fa12 	bl	80005f8 <__aeabi_dmul>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4620      	mov	r0, r4
 80011da:	4629      	mov	r1, r5
 80011dc:	f7ff f856 	bl	800028c <__adddf3>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4610      	mov	r0, r2
 80011e6:	4619      	mov	r1, r3
 80011e8:	f7ff fcde 	bl	8000ba8 <__aeabi_d2f>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4a5f      	ldr	r2, [pc, #380]	; (800136c <interrupt_Motor+0x324>)
 80011f0:	6013      	str	r3, [r2, #0]
		g_TargetTurning.displacement += g_TargetTurning.velocity*INTERRUPT_TIME;// + g_TargetTurning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80011f2:	4b5f      	ldr	r3, [pc, #380]	; (8001370 <interrupt_Motor+0x328>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f9a6 	bl	8000548 <__aeabi_f2d>
 80011fc:	4604      	mov	r4, r0
 80011fe:	460d      	mov	r5, r1
 8001200:	4b5b      	ldr	r3, [pc, #364]	; (8001370 <interrupt_Motor+0x328>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f99f 	bl	8000548 <__aeabi_f2d>
 800120a:	a353      	add	r3, pc, #332	; (adr r3, 8001358 <interrupt_Motor+0x310>)
 800120c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001210:	f7ff f9f2 	bl	80005f8 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4620      	mov	r0, r4
 800121a:	4629      	mov	r1, r5
 800121c:	f7ff f836 	bl	800028c <__adddf3>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fcbe 	bl	8000ba8 <__aeabi_d2f>
 800122c:	4603      	mov	r3, r0
 800122e:	4a50      	ldr	r2, [pc, #320]	; (8001370 <interrupt_Motor+0x328>)
 8001230:	6093      	str	r3, [r2, #8]
		g_TargetTurning.velocity += g_TargetTurning.acceleration*INTERRUPT_TIME;
 8001232:	4b4f      	ldr	r3, [pc, #316]	; (8001370 <interrupt_Motor+0x328>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f986 	bl	8000548 <__aeabi_f2d>
 800123c:	4604      	mov	r4, r0
 800123e:	460d      	mov	r5, r1
 8001240:	4b4b      	ldr	r3, [pc, #300]	; (8001370 <interrupt_Motor+0x328>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f97f 	bl	8000548 <__aeabi_f2d>
 800124a:	a343      	add	r3, pc, #268	; (adr r3, 8001358 <interrupt_Motor+0x310>)
 800124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001250:	f7ff f9d2 	bl	80005f8 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4620      	mov	r0, r4
 800125a:	4629      	mov	r1, r5
 800125c:	f7ff f816 	bl	800028c <__adddf3>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	f7ff fc9e 	bl	8000ba8 <__aeabi_d2f>
 800126c:	4603      	mov	r3, r0
 800126e:	4a40      	ldr	r2, [pc, #256]	; (8001370 <interrupt_Motor+0x328>)
 8001270:	6013      	str	r3, [r2, #0]
		cal_table(g_TrapezoidTurning,&g_TargetTurning);
 8001272:	4b41      	ldr	r3, [pc, #260]	; (8001378 <interrupt_Motor+0x330>)
 8001274:	4a3e      	ldr	r2, [pc, #248]	; (8001370 <interrupt_Motor+0x328>)
 8001276:	9201      	str	r2, [sp, #4]
 8001278:	691a      	ldr	r2, [r3, #16]
 800127a:	9200      	str	r2, [sp, #0]
 800127c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800127e:	f000 f891 	bl	80013a4 <cal_table>
	}
	float velocity_l = g_TargetStraight.velocity + g_TargetTurning.velocity * TREAD_WIDTH / 2 * M_PI / 180;
 8001282:	4b3a      	ldr	r3, [pc, #232]	; (800136c <interrupt_Motor+0x324>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f95e 	bl	8000548 <__aeabi_f2d>
 800128c:	4604      	mov	r4, r0
 800128e:	460d      	mov	r5, r1
 8001290:	4b37      	ldr	r3, [pc, #220]	; (8001370 <interrupt_Motor+0x328>)
 8001292:	edd3 7a00 	vldr	s15, [r3]
 8001296:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800137c <interrupt_Motor+0x334>
 800129a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800129e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80012a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012a6:	ee16 0a90 	vmov	r0, s13
 80012aa:	f7ff f94d 	bl	8000548 <__aeabi_f2d>
 80012ae:	a32c      	add	r3, pc, #176	; (adr r3, 8001360 <interrupt_Motor+0x318>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7ff f9a0 	bl	80005f8 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4610      	mov	r0, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	4b2e      	ldr	r3, [pc, #184]	; (8001380 <interrupt_Motor+0x338>)
 80012c6:	f7ff fac1 	bl	800084c <__aeabi_ddiv>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4620      	mov	r0, r4
 80012d0:	4629      	mov	r1, r5
 80012d2:	f7fe ffdb 	bl	800028c <__adddf3>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fc63 	bl	8000ba8 <__aeabi_d2f>
 80012e2:	4603      	mov	r3, r0
 80012e4:	607b      	str	r3, [r7, #4]
		pl_motor_mode_L(velocity_l);
 80012e6:	ed97 0a01 	vldr	s0, [r7, #4]
 80012ea:	f000 ff5b 	bl	80021a4 <pl_motor_mode_L>
		pl_motor_count_L(velocity_l);
 80012ee:	ed97 0a01 	vldr	s0, [r7, #4]
 80012f2:	f000 ffb9 	bl	8002268 <pl_motor_count_L>
	float velocity_r = g_TargetStraight.velocity - g_TargetTurning.velocity * TREAD_WIDTH / 2 * M_PI / 180;
 80012f6:	4b1d      	ldr	r3, [pc, #116]	; (800136c <interrupt_Motor+0x324>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f924 	bl	8000548 <__aeabi_f2d>
 8001300:	4604      	mov	r4, r0
 8001302:	460d      	mov	r5, r1
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <interrupt_Motor+0x328>)
 8001306:	edd3 7a00 	vldr	s15, [r3]
 800130a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800137c <interrupt_Motor+0x334>
 800130e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001312:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001316:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800131a:	ee16 0a90 	vmov	r0, s13
 800131e:	f7ff f913 	bl	8000548 <__aeabi_f2d>
 8001322:	a30f      	add	r3, pc, #60	; (adr r3, 8001360 <interrupt_Motor+0x318>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f966 	bl	80005f8 <__aeabi_dmul>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <interrupt_Motor+0x338>)
 800133a:	f7ff fa87 	bl	800084c <__aeabi_ddiv>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4620      	mov	r0, r4
 8001344:	4629      	mov	r1, r5
 8001346:	f7fe ff9f 	bl	8000288 <__aeabi_dsub>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	e017      	b.n	8001384 <interrupt_Motor+0x33c>
 8001354:	f3af 8000 	nop.w
 8001358:	d2f1a9fc 	.word	0xd2f1a9fc
 800135c:	3f50624d 	.word	0x3f50624d
 8001360:	54442d18 	.word	0x54442d18
 8001364:	400921fb 	.word	0x400921fb
 8001368:	20000238 	.word	0x20000238
 800136c:	200001f8 	.word	0x200001f8
 8001370:	20000204 	.word	0x20000204
 8001374:	20000210 	.word	0x20000210
 8001378:	20000224 	.word	0x20000224
 800137c:	42a20000 	.word	0x42a20000
 8001380:	40668000 	.word	0x40668000
 8001384:	f7ff fc10 	bl	8000ba8 <__aeabi_d2f>
 8001388:	4603      	mov	r3, r0
 800138a:	603b      	str	r3, [r7, #0]
	    pl_motor_mode_R(velocity_r);
 800138c:	ed97 0a00 	vldr	s0, [r7]
 8001390:	f000 ff28 	bl	80021e4 <pl_motor_mode_R>
	    pl_motor_count_R(velocity_r);
 8001394:	ed97 0a00 	vldr	s0, [r7]
 8001398:	f000 ff7a 	bl	8002290 <pl_motor_count_R>



}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bdb0      	pop	{r4, r5, r7, pc}

080013a4 <cal_table>:

void cal_table(TRAPEZOID input,TARGET *target){
 80013a4:	b084      	sub	sp, #16
 80013a6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	f107 0420 	add.w	r4, r7, #32
 80013b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 80013b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80013ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c2:	f2c0 819b 	blt.w	80016fc <cal_table+0x358>
	switch (g_acc_flag) {
 80013c6:	4bcc      	ldr	r3, [pc, #816]	; (80016f8 <cal_table+0x354>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b06      	cmp	r3, #6
 80013ce:	f200 832e 	bhi.w	8001a2e <cal_table+0x68a>
 80013d2:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <cal_table+0x34>)
 80013d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d8:	08001a29 	.word	0x08001a29
 80013dc:	080013f5 	.word	0x080013f5
 80013e0:	08001567 	.word	0x08001567
 80013e4:	08001685 	.word	0x08001685
 80013e8:	08001a29 	.word	0x08001a29
 80013ec:	080016b1 	.word	0x080016b1
 80013f0:	080016d3 	.word	0x080016d3
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 80013f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f6:	ed93 7a00 	vldr	s14, [r3]
 80013fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80013fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001406:	db0a      	blt.n	800141e <cal_table+0x7a>
				target->velocity = input.count_velocity;
 8001408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800140a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800140c:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 800140e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 8001416:	4bb8      	ldr	r3, [pc, #736]	; (80016f8 <cal_table+0x354>)
 8001418:	2202      	movs	r2, #2
 800141a:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 800141c:	e307      	b.n	8001a2e <cal_table+0x68a>
			else if((input.displacement <= (2*target->velocity*target->velocity
 800141e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800142c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800142e:	edd3 7a00 	vldr	s15, [r3]
 8001432:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 8001436:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 800143a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800143e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001442:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 8001446:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800144a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800144e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001452:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 8001456:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800145a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800145e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001462:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 8001466:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800146a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146e:	d900      	bls.n	8001472 <cal_table+0xce>
		break;
 8001470:	e2dd      	b.n	8001a2e <cal_table+0x68a>
				time_over=((2*target->velocity*target->velocity
 8001472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001474:	edd3 7a00 	vldr	s15, [r3]
 8001478:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800147c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800147e:	edd3 7a00 	vldr	s15, [r3]
 8001482:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 8001486:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800148a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800148e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001492:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 8001496:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800149a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800149e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014a2:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 80014a6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80014aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014ae:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80014b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80014ba:	ee77 6a67 	vsub.f32	s13, s14, s15
 80014be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c0:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 80014c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014c8:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 80014cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff f839 	bl	8000548 <__aeabi_f2d>
 80014d6:	4604      	mov	r4, r0
 80014d8:	460d      	mov	r5, r1
 80014da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff f833 	bl	8000548 <__aeabi_f2d>
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	f04f 0300 	mov.w	r3, #0
 80014ea:	f7ff f885 	bl	80005f8 <__aeabi_dmul>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4690      	mov	r8, r2
 80014f4:	4699      	mov	r9, r3
 80014f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014fe:	ee17 0a90 	vmov	r0, s15
 8001502:	f7ff f821 	bl	8000548 <__aeabi_f2d>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4640      	mov	r0, r8
 800150c:	4649      	mov	r1, r9
 800150e:	f7ff f873 	bl	80005f8 <__aeabi_dmul>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4620      	mov	r0, r4
 8001518:	4629      	mov	r1, r5
 800151a:	f7fe feb5 	bl	8000288 <__aeabi_dsub>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff fb3f 	bl	8000ba8 <__aeabi_d2f>
 800152a:	4602      	mov	r2, r0
 800152c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800152e:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 8001530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001532:	ed93 7a00 	vldr	s14, [r3]
 8001536:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800153a:	edd7 7a01 	vldr	s15, [r7, #4]
 800153e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800154a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800154c:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 8001550:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001554:	eef1 7a67 	vneg.f32	s15, s15
 8001558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800155a:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 800155e:	4b66      	ldr	r3, [pc, #408]	; (80016f8 <cal_table+0x354>)
 8001560:	2203      	movs	r2, #3
 8001562:	701a      	strb	r2, [r3, #0]
		break;
 8001564:	e263      	b.n	8001a2e <cal_table+0x68a>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 8001566:	ed97 7a08 	vldr	s14, [r7, #32]
 800156a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800156c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001570:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8001574:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001578:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800157c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8001580:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001584:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001588:	ee66 7a27 	vmul.f32	s15, s12, s15
 800158c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001590:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001594:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8001598:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800159c:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 80015a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a8:	d900      	bls.n	80015ac <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 80015aa:	e240      	b.n	8001a2e <cal_table+0x68a>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80015ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80015b2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80015b6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 80015be:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80015c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80015c6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80015ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015ce:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80015d2:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 80015d6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80015da:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80015de:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 80015e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80015e6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ec:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80015f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015f4:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 80015f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ffa3 	bl	8000548 <__aeabi_f2d>
 8001602:	4604      	mov	r4, r0
 8001604:	460d      	mov	r5, r1
 8001606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ff9d 	bl	8000548 <__aeabi_f2d>
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	f7fe ffef 	bl	80005f8 <__aeabi_dmul>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4690      	mov	r8, r2
 8001620:	4699      	mov	r9, r3
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7fe ff90 	bl	8000548 <__aeabi_f2d>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4640      	mov	r0, r8
 800162e:	4649      	mov	r1, r9
 8001630:	f7fe ffe2 	bl	80005f8 <__aeabi_dmul>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4620      	mov	r0, r4
 800163a:	4629      	mov	r1, r5
 800163c:	f7fe fe24 	bl	8000288 <__aeabi_dsub>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	f7ff faae 	bl	8000ba8 <__aeabi_d2f>
 800164c:	4602      	mov	r2, r0
 800164e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001650:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 8001652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001654:	ed93 7a00 	vldr	s14, [r3]
 8001658:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800165c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166a:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 800166e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001672:	eef1 7a67 	vneg.f32	s15, s15
 8001676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001678:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 800167c:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <cal_table+0x354>)
 800167e:	2203      	movs	r2, #3
 8001680:	701a      	strb	r2, [r3, #0]
		break;
 8001682:	e1d4      	b.n	8001a2e <cal_table+0x68a>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 8001684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001686:	ed93 7a00 	vldr	s14, [r3]
 800168a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800168e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001696:	d900      	bls.n	800169a <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8001698:	e1c9      	b.n	8001a2e <cal_table+0x68a>
			target->velocity = input.end_velocity;
 800169a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800169c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800169e:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 80016a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80016a8:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <cal_table+0x354>)
 80016aa:	2204      	movs	r2, #4
 80016ac:	701a      	strb	r2, [r3, #0]
		break;
 80016ae:	e1be      	b.n	8001a2e <cal_table+0x68a>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 80016b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80016b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80016ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c2:	db06      	blt.n	80016d2 <cal_table+0x32e>
			target->acceleration = 0;
 80016c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <cal_table+0x354>)
 80016ce:	2204      	movs	r2, #4
 80016d0:	701a      	strb	r2, [r3, #0]
		}
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 80016d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d4:	ed93 7a02 	vldr	s14, [r3, #8]
 80016d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80016dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e4:	da00      	bge.n	80016e8 <cal_table+0x344>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80016e6:	e1a2      	b.n	8001a2e <cal_table+0x68a>
			target->acceleration = 0;
 80016e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80016f0:	4b01      	ldr	r3, [pc, #4]	; (80016f8 <cal_table+0x354>)
 80016f2:	2204      	movs	r2, #4
 80016f4:	701a      	strb	r2, [r3, #0]
		break;
 80016f6:	e19a      	b.n	8001a2e <cal_table+0x68a>
 80016f8:	20000239 	.word	0x20000239
	}
}else{
	switch (g_acc_flag) {
 80016fc:	4bcf      	ldr	r3, [pc, #828]	; (8001a3c <cal_table+0x698>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b06      	cmp	r3, #6
 8001704:	f200 8193 	bhi.w	8001a2e <cal_table+0x68a>
 8001708:	a201      	add	r2, pc, #4	; (adr r2, 8001710 <cal_table+0x36c>)
 800170a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170e:	bf00      	nop
 8001710:	08001a2d 	.word	0x08001a2d
 8001714:	0800172d 	.word	0x0800172d
 8001718:	0800189f 	.word	0x0800189f
 800171c:	080019b5 	.word	0x080019b5
 8001720:	080019e1 	.word	0x080019e1
 8001724:	080019e1 	.word	0x080019e1
 8001728:	08001a03 	.word	0x08001a03
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 800172c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800172e:	ed93 7a00 	vldr	s14, [r3]
 8001732:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001736:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800173a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173e:	d80a      	bhi.n	8001756 <cal_table+0x3b2>
				target->velocity = input.count_velocity;
 8001740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001744:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 8001746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 800174e:	4bbb      	ldr	r3, [pc, #748]	; (8001a3c <cal_table+0x698>)
 8001750:	2202      	movs	r2, #2
 8001752:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 8001754:	e16b      	b.n	8001a2e <cal_table+0x68a>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 8001756:	edd7 7a08 	vldr	s15, [r7, #32]
 800175a:	eeb1 7a67 	vneg.f32	s14, s15
 800175e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800176a:	edd3 7a00 	vldr	s15, [r3]
 800176e:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 8001772:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8001776:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800177a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800177e:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 8001782:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001786:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800178a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800178e:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 8001792:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001796:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800179a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800179e:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 80017a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017aa:	d900      	bls.n	80017ae <cal_table+0x40a>
		break;
 80017ac:	e13f      	b.n	8001a2e <cal_table+0x68a>
				time_over=(-(2*target->velocity*target->velocity
 80017ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80017b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ba:	edd3 7a00 	vldr	s15, [r3]
 80017be:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 80017c2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80017c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80017ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ce:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 80017d2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80017d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017de:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 80017e2:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 80017e6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80017ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017ee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80017f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80017fa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80017fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001800:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 8001804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001808:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 800180c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe99 	bl	8000548 <__aeabi_f2d>
 8001816:	4604      	mov	r4, r0
 8001818:	460d      	mov	r5, r1
 800181a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fe93 	bl	8000548 <__aeabi_f2d>
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	f7fe fee5 	bl	80005f8 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4690      	mov	r8, r2
 8001834:	4699      	mov	r9, r3
 8001836:	edd7 7a01 	vldr	s15, [r7, #4]
 800183a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800183e:	ee17 0a90 	vmov	r0, s15
 8001842:	f7fe fe81 	bl	8000548 <__aeabi_f2d>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4640      	mov	r0, r8
 800184c:	4649      	mov	r1, r9
 800184e:	f7fe fed3 	bl	80005f8 <__aeabi_dmul>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4620      	mov	r0, r4
 8001858:	4629      	mov	r1, r5
 800185a:	f7fe fd17 	bl	800028c <__adddf3>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	f7ff f99f 	bl	8000ba8 <__aeabi_d2f>
 800186a:	4602      	mov	r2, r0
 800186c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186e:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 8001870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001872:	ed93 7a00 	vldr	s14, [r3]
 8001876:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800187a:	edd7 7a01 	vldr	s15, [r7, #4]
 800187e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001882:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800188a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800188c:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 8001890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001894:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 8001896:	4b69      	ldr	r3, [pc, #420]	; (8001a3c <cal_table+0x698>)
 8001898:	2203      	movs	r2, #3
 800189a:	701a      	strb	r2, [r3, #0]
		break;
 800189c:	e0c7      	b.n	8001a2e <cal_table+0x68a>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 800189e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a0:	ed93 7a02 	vldr	s14, [r3, #8]
 80018a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80018a8:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 80018ac:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80018b0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80018b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 80018b8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80018bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80018c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018c8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80018cc:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80018d0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80018d4:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 80018d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e0:	d900      	bls.n	80018e4 <cal_table+0x540>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 80018e2:	e0a4      	b.n	8001a2e <cal_table+0x68a>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 80018e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80018ea:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80018ee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80018f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 80018f6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80018fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80018fe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001902:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001906:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800190a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 800190e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001912:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8001916:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 800191a:	edd7 7a08 	vldr	s15, [r7, #32]
 800191e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001924:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8001928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800192c:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8001930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fe07 	bl	8000548 <__aeabi_f2d>
 800193a:	4604      	mov	r4, r0
 800193c:	460d      	mov	r5, r1
 800193e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fe01 	bl	8000548 <__aeabi_f2d>
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	f7fe fe53 	bl	80005f8 <__aeabi_dmul>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4690      	mov	r8, r2
 8001958:	4699      	mov	r9, r3
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7fe fdf4 	bl	8000548 <__aeabi_f2d>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4640      	mov	r0, r8
 8001966:	4649      	mov	r1, r9
 8001968:	f7fe fe46 	bl	80005f8 <__aeabi_dmul>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4620      	mov	r0, r4
 8001972:	4629      	mov	r1, r5
 8001974:	f7fe fc8a 	bl	800028c <__adddf3>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	f7ff f912 	bl	8000ba8 <__aeabi_d2f>
 8001984:	4602      	mov	r2, r0
 8001986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001988:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 800198a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198c:	ed93 7a00 	vldr	s14, [r3]
 8001990:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001994:	edd7 7a01 	vldr	s15, [r7, #4]
 8001998:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800199c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a2:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 80019a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019aa:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 80019ac:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <cal_table+0x698>)
 80019ae:	2203      	movs	r2, #3
 80019b0:	701a      	strb	r2, [r3, #0]
		break;
 80019b2:	e03c      	b.n	8001a2e <cal_table+0x68a>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 80019b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b6:	ed93 7a00 	vldr	s14, [r3]
 80019ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80019be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c6:	da00      	bge.n	80019ca <cal_table+0x626>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80019c8:	e031      	b.n	8001a2e <cal_table+0x68a>
			target->velocity = input.end_velocity;
 80019ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ce:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 80019d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <cal_table+0x698>)
 80019da:	2204      	movs	r2, #4
 80019dc:	701a      	strb	r2, [r3, #0]
		break;
 80019de:	e026      	b.n	8001a2e <cal_table+0x68a>
	case 4:
		//終了(0でもいいかも)
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 80019e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80019e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80019ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f2:	d806      	bhi.n	8001a02 <cal_table+0x65e>
			target->acceleration = 0;
 80019f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <cal_table+0x698>)
 80019fe:	2204      	movs	r2, #4
 8001a00:	701a      	strb	r2, [r3, #0]
		}
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 8001a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a04:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a08:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	d900      	bls.n	8001a18 <cal_table+0x674>
		}
	}

}

}
 8001a16:	e00a      	b.n	8001a2e <cal_table+0x68a>
			target->acceleration = 0;
 8001a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <cal_table+0x698>)
 8001a22:	2204      	movs	r2, #4
 8001a24:	701a      	strb	r2, [r3, #0]
}
 8001a26:	e002      	b.n	8001a2e <cal_table+0x68a>
		break;
 8001a28:	bf00      	nop
 8001a2a:	e000      	b.n	8001a2e <cal_table+0x68a>
		break;
 8001a2c:	bf00      	nop
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8001a38:	b004      	add	sp, #16
 8001a3a:	4770      	bx	lr
 8001a3c:	20000239 	.word	0x20000239

08001a40 <straight_table>:


float straight_table(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	ed87 0a05 	vstr	s0, [r7, #20]
 8001a4a:	edc7 0a04 	vstr	s1, [r7, #16]
 8001a4e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001a52:	edc7 1a02 	vstr	s3, [r7, #8]
 8001a56:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8001a5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a5e:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8001a62:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a66:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a6a:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8001a6e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001a72:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8001a76:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a7e:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8001a82:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8e:	d505      	bpl.n	8001a9c <straight_table+0x5c>
 8001a90:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a94:	eef1 7a67 	vneg.f32	s15, s15
 8001a98:	edc7 7a01 	vstr	s15, [r7, #4]

	g_TrapezoidStraight.displacement = input_displacement;
 8001a9c:	4a58      	ldr	r2, [pc, #352]	; (8001c00 <straight_table+0x1c0>)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	6013      	str	r3, [r2, #0]
	g_TrapezoidStraight.start_velocity = input_start_velocity;
 8001aa2:	4a57      	ldr	r2, [pc, #348]	; (8001c00 <straight_table+0x1c0>)
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	6053      	str	r3, [r2, #4]
	g_TrapezoidStraight.end_velocity = input_end_velocity;
 8001aa8:	4a55      	ldr	r2, [pc, #340]	; (8001c00 <straight_table+0x1c0>)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6093      	str	r3, [r2, #8]
	g_TrapezoidStraight.count_velocity = input_count_velocity;
 8001aae:	4a54      	ldr	r2, [pc, #336]	; (8001c00 <straight_table+0x1c0>)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	60d3      	str	r3, [r2, #12]
	g_TrapezoidStraight.acceleration = input_acceleration;
 8001ab4:	4a52      	ldr	r2, [pc, #328]	; (8001c00 <straight_table+0x1c0>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){g_TargetStraight.acceleration = input_acceleration;
 8001aba:	edd7 7a02 	vldr	s15, [r7, #8]
 8001abe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac6:	db03      	blt.n	8001ad0 <straight_table+0x90>
 8001ac8:	4a4e      	ldr	r2, [pc, #312]	; (8001c04 <straight_table+0x1c4>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6053      	str	r3, [r2, #4]
 8001ace:	e006      	b.n	8001ade <straight_table+0x9e>
	}else{g_TargetStraight.acceleration = -input_acceleration;}
 8001ad0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ad4:	eef1 7a67 	vneg.f32	s15, s15
 8001ad8:	4b4a      	ldr	r3, [pc, #296]	; (8001c04 <straight_table+0x1c4>)
 8001ada:	edc3 7a01 	vstr	s15, [r3, #4]
	g_TargetStraight.velocity = input_start_velocity;
 8001ade:	4a49      	ldr	r2, [pc, #292]	; (8001c04 <straight_table+0x1c4>)
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	6013      	str	r3, [r2, #0]
	g_TargetStraight.displacement = 0;
 8001ae4:	4b47      	ldr	r3, [pc, #284]	; (8001c04 <straight_table+0x1c4>)
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
	g_TargetTurning.velocity = 0;
 8001aec:	4b46      	ldr	r3, [pc, #280]	; (8001c08 <straight_table+0x1c8>)
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
	g_TargetTurning.acceleration = 0;
 8001af4:	4b44      	ldr	r3, [pc, #272]	; (8001c08 <straight_table+0x1c8>)
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	605a      	str	r2, [r3, #4]
	g_TargetTurning.displacement = 0;
 8001afc:	4b42      	ldr	r3, [pc, #264]	; (8001c08 <straight_table+0x1c8>)
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]

	g_acc_flag=1;
 8001b04:	4b41      	ldr	r3, [pc, #260]	; (8001c0c <straight_table+0x1cc>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;g_TargetStraight.acceleration = input_acceleration;}
 8001b0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b16:	dd0e      	ble.n	8001b36 <straight_table+0xf6>
 8001b18:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b28:	dd05      	ble.n	8001b36 <straight_table+0xf6>
 8001b2a:	4b38      	ldr	r3, [pc, #224]	; (8001c0c <straight_table+0x1cc>)
 8001b2c:	2205      	movs	r2, #5
 8001b2e:	701a      	strb	r2, [r3, #0]
 8001b30:	4a34      	ldr	r2, [pc, #208]	; (8001c04 <straight_table+0x1c4>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;g_TargetStraight.acceleration = -input_acceleration;}
 8001b36:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b42:	dd14      	ble.n	8001b6e <straight_table+0x12e>
 8001b44:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b48:	eef1 7a67 	vneg.f32	s15, s15
 8001b4c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b58:	d509      	bpl.n	8001b6e <straight_table+0x12e>
 8001b5a:	4b2c      	ldr	r3, [pc, #176]	; (8001c0c <straight_table+0x1cc>)
 8001b5c:	2206      	movs	r2, #6
 8001b5e:	701a      	strb	r2, [r3, #0]
 8001b60:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b64:	eef1 7a67 	vneg.f32	s15, s15
 8001b68:	4b26      	ldr	r3, [pc, #152]	; (8001c04 <straight_table+0x1c4>)
 8001b6a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;g_TargetStraight.acceleration = -input_acceleration;}
 8001b6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7a:	d514      	bpl.n	8001ba6 <straight_table+0x166>
 8001b7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b80:	eef1 7a67 	vneg.f32	s15, s15
 8001b84:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b90:	dd09      	ble.n	8001ba6 <straight_table+0x166>
 8001b92:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <straight_table+0x1cc>)
 8001b94:	2205      	movs	r2, #5
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b9c:	eef1 7a67 	vneg.f32	s15, s15
 8001ba0:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <straight_table+0x1c4>)
 8001ba2:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;g_TargetStraight.acceleration = input_acceleration;}
 8001ba6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001baa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb2:	d50e      	bpl.n	8001bd2 <straight_table+0x192>
 8001bb4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bb8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc4:	d505      	bpl.n	8001bd2 <straight_table+0x192>
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <straight_table+0x1cc>)
 8001bc8:	2206      	movs	r2, #6
 8001bca:	701a      	strb	r2, [r3, #0]
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	; (8001c04 <straight_table+0x1c4>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <straight_table+0x1d0>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]



	//pl_motor_start();
	while (g_acc_flag!=4){
 8001bd8:	bf00      	nop
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <straight_table+0x1cc>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d1fa      	bne.n	8001bda <straight_table+0x19a>
//		printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d\n", g_motorCount_l,g_motorCount_r,g_motorCount_l,g_motorCount_l);
	}
	modeacc = 0;
 8001be4:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <straight_table+0x1d0>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]

	//pl_motor_stop();

	return g_TargetStraight.velocity;
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <straight_table+0x1c4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	ee07 3a90 	vmov	s15, r3
}
 8001bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf6:	3724      	adds	r7, #36	; 0x24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	20000210 	.word	0x20000210
 8001c04:	200001f8 	.word	0x200001f8
 8001c08:	20000204 	.word	0x20000204
 8001c0c:	20000239 	.word	0x20000239
 8001c10:	20000238 	.word	0x20000238

08001c14 <turning_table>:


float turning_table(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	; 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	ed87 0a05 	vstr	s0, [r7, #20]
 8001c1e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001c22:	ed87 1a03 	vstr	s2, [r7, #12]
 8001c26:	edc7 1a02 	vstr	s3, [r7, #8]
 8001c2a:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8001c2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c32:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8001c36:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c3a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c3e:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8001c42:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001c46:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8001c4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c52:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8001c56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c62:	d505      	bpl.n	8001c70 <turning_table+0x5c>
 8001c64:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c68:	eef1 7a67 	vneg.f32	s15, s15
 8001c6c:	edc7 7a01 	vstr	s15, [r7, #4]

	g_TrapezoidTurning.displacement = input_displacement;
 8001c70:	4a58      	ldr	r2, [pc, #352]	; (8001dd4 <turning_table+0x1c0>)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	6013      	str	r3, [r2, #0]
	g_TrapezoidTurning.start_velocity = input_start_velocity;
 8001c76:	4a57      	ldr	r2, [pc, #348]	; (8001dd4 <turning_table+0x1c0>)
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	6053      	str	r3, [r2, #4]
	g_TrapezoidTurning.end_velocity = input_end_velocity;
 8001c7c:	4a55      	ldr	r2, [pc, #340]	; (8001dd4 <turning_table+0x1c0>)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6093      	str	r3, [r2, #8]
	g_TrapezoidTurning.count_velocity = input_count_velocity;
 8001c82:	4a54      	ldr	r2, [pc, #336]	; (8001dd4 <turning_table+0x1c0>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
	g_TrapezoidTurning.acceleration = input_acceleration;
 8001c88:	4a52      	ldr	r2, [pc, #328]	; (8001dd4 <turning_table+0x1c0>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){g_TargetTurning.acceleration = input_acceleration;
 8001c8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9a:	db03      	blt.n	8001ca4 <turning_table+0x90>
 8001c9c:	4a4e      	ldr	r2, [pc, #312]	; (8001dd8 <turning_table+0x1c4>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6053      	str	r3, [r2, #4]
 8001ca2:	e006      	b.n	8001cb2 <turning_table+0x9e>
	}else{g_TargetTurning.acceleration = -input_acceleration;}
 8001ca4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ca8:	eef1 7a67 	vneg.f32	s15, s15
 8001cac:	4b4a      	ldr	r3, [pc, #296]	; (8001dd8 <turning_table+0x1c4>)
 8001cae:	edc3 7a01 	vstr	s15, [r3, #4]
	g_TargetTurning.velocity = input_start_velocity;
 8001cb2:	4a49      	ldr	r2, [pc, #292]	; (8001dd8 <turning_table+0x1c4>)
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	6013      	str	r3, [r2, #0]
	g_TargetTurning.displacement = 0;
 8001cb8:	4b47      	ldr	r3, [pc, #284]	; (8001dd8 <turning_table+0x1c4>)
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
	g_TargetStraight.velocity = 0;
 8001cc0:	4b46      	ldr	r3, [pc, #280]	; (8001ddc <turning_table+0x1c8>)
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
	g_TargetStraight.acceleration = 0;
 8001cc8:	4b44      	ldr	r3, [pc, #272]	; (8001ddc <turning_table+0x1c8>)
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	605a      	str	r2, [r3, #4]
	g_TargetStraight.displacement = 0;
 8001cd0:	4b42      	ldr	r3, [pc, #264]	; (8001ddc <turning_table+0x1c8>)
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]

	g_acc_flag=1;
 8001cd8:	4b41      	ldr	r3, [pc, #260]	; (8001de0 <turning_table+0x1cc>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;g_TargetTurning.acceleration = input_acceleration;}
 8001cde:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ce2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cea:	dd0e      	ble.n	8001d0a <turning_table+0xf6>
 8001cec:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cf0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfc:	dd05      	ble.n	8001d0a <turning_table+0xf6>
 8001cfe:	4b38      	ldr	r3, [pc, #224]	; (8001de0 <turning_table+0x1cc>)
 8001d00:	2205      	movs	r2, #5
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	4a34      	ldr	r2, [pc, #208]	; (8001dd8 <turning_table+0x1c4>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;g_TargetTurning.acceleration = -input_acceleration;}
 8001d0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d16:	dd14      	ble.n	8001d42 <turning_table+0x12e>
 8001d18:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d1c:	eef1 7a67 	vneg.f32	s15, s15
 8001d20:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2c:	d509      	bpl.n	8001d42 <turning_table+0x12e>
 8001d2e:	4b2c      	ldr	r3, [pc, #176]	; (8001de0 <turning_table+0x1cc>)
 8001d30:	2206      	movs	r2, #6
 8001d32:	701a      	strb	r2, [r3, #0]
 8001d34:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d38:	eef1 7a67 	vneg.f32	s15, s15
 8001d3c:	4b26      	ldr	r3, [pc, #152]	; (8001dd8 <turning_table+0x1c4>)
 8001d3e:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;g_TargetTurning.acceleration = -input_acceleration;}
 8001d42:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	d514      	bpl.n	8001d7a <turning_table+0x166>
 8001d50:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d54:	eef1 7a67 	vneg.f32	s15, s15
 8001d58:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d64:	dd09      	ble.n	8001d7a <turning_table+0x166>
 8001d66:	4b1e      	ldr	r3, [pc, #120]	; (8001de0 <turning_table+0x1cc>)
 8001d68:	2205      	movs	r2, #5
 8001d6a:	701a      	strb	r2, [r3, #0]
 8001d6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d70:	eef1 7a67 	vneg.f32	s15, s15
 8001d74:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <turning_table+0x1c4>)
 8001d76:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;g_TargetTurning.acceleration = input_acceleration;}
 8001d7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d86:	d50e      	bpl.n	8001da6 <turning_table+0x192>
 8001d88:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d98:	d505      	bpl.n	8001da6 <turning_table+0x192>
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <turning_table+0x1cc>)
 8001d9c:	2206      	movs	r2, #6
 8001d9e:	701a      	strb	r2, [r3, #0]
 8001da0:	4a0d      	ldr	r2, [pc, #52]	; (8001dd8 <turning_table+0x1c4>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8001da6:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <turning_table+0x1d0>)
 8001da8:	2202      	movs	r2, #2
 8001daa:	701a      	strb	r2, [r3, #0]


	//pl_motor_start();
	while (g_acc_flag!=4){
 8001dac:	bf00      	nop
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <turning_table+0x1cc>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d1fa      	bne.n	8001dae <turning_table+0x19a>

	}
	modeacc = 0;
 8001db8:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <turning_table+0x1d0>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]

	//pl_motor_stop();

	return g_TargetTurning.velocity;
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <turning_table+0x1c4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	ee07 3a90 	vmov	s15, r3
}
 8001dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dca:	3724      	adds	r7, #36	; 0x24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	20000224 	.word	0x20000224
 8001dd8:	20000204 	.word	0x20000204
 8001ddc:	200001f8 	.word	0x200001f8
 8001de0:	20000239 	.word	0x20000239
 8001de4:	20000238 	.word	0x20000238

08001de8 <slalom_table>:


float slalom_table(float input_center_velocity,float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8001de8:	b480      	push	{r7}
 8001dea:	b089      	sub	sp, #36	; 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	ed87 0a05 	vstr	s0, [r7, #20]
 8001df2:	edc7 0a04 	vstr	s1, [r7, #16]
 8001df6:	ed87 1a03 	vstr	s2, [r7, #12]
 8001dfa:	edc7 1a02 	vstr	s3, [r7, #8]
 8001dfe:	ed87 2a01 	vstr	s4, [r7, #4]
 8001e02:	edc7 2a00 	vstr	s5, [r7]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8001e06:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e0a:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8001e0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e12:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e16:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8001e1a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001e1e:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8001e22:	ed97 7a00 	vldr	s14, [r7]
 8001e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e2a:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8001e2e:	edd7 7a00 	vldr	s15, [r7]
 8001e32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3a:	d505      	bpl.n	8001e48 <slalom_table+0x60>
 8001e3c:	edd7 7a00 	vldr	s15, [r7]
 8001e40:	eef1 7a67 	vneg.f32	s15, s15
 8001e44:	edc7 7a00 	vstr	s15, [r7]

	g_TrapezoidTurning.displacement = input_displacement;
 8001e48:	4a58      	ldr	r2, [pc, #352]	; (8001fac <slalom_table+0x1c4>)
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	6013      	str	r3, [r2, #0]
	g_TrapezoidTurning.start_velocity = input_start_velocity;
 8001e4e:	4a57      	ldr	r2, [pc, #348]	; (8001fac <slalom_table+0x1c4>)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6053      	str	r3, [r2, #4]
	g_TrapezoidTurning.end_velocity = input_end_velocity;
 8001e54:	4a55      	ldr	r2, [pc, #340]	; (8001fac <slalom_table+0x1c4>)
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	6093      	str	r3, [r2, #8]
	g_TrapezoidTurning.count_velocity = input_count_velocity;
 8001e5a:	4a54      	ldr	r2, [pc, #336]	; (8001fac <slalom_table+0x1c4>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	60d3      	str	r3, [r2, #12]
	g_TrapezoidTurning.acceleration = input_acceleration;
 8001e60:	4a52      	ldr	r2, [pc, #328]	; (8001fac <slalom_table+0x1c4>)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){g_TargetTurning.acceleration = input_acceleration;
 8001e66:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e72:	db03      	blt.n	8001e7c <slalom_table+0x94>
 8001e74:	4a4e      	ldr	r2, [pc, #312]	; (8001fb0 <slalom_table+0x1c8>)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	6053      	str	r3, [r2, #4]
 8001e7a:	e006      	b.n	8001e8a <slalom_table+0xa2>
	}else{g_TargetTurning.acceleration = -input_acceleration;}
 8001e7c:	edd7 7a00 	vldr	s15, [r7]
 8001e80:	eef1 7a67 	vneg.f32	s15, s15
 8001e84:	4b4a      	ldr	r3, [pc, #296]	; (8001fb0 <slalom_table+0x1c8>)
 8001e86:	edc3 7a01 	vstr	s15, [r3, #4]
	g_TargetTurning.velocity = input_start_velocity;
 8001e8a:	4a49      	ldr	r2, [pc, #292]	; (8001fb0 <slalom_table+0x1c8>)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6013      	str	r3, [r2, #0]
	g_TargetTurning.displacement = 0;
 8001e90:	4b47      	ldr	r3, [pc, #284]	; (8001fb0 <slalom_table+0x1c8>)
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
	g_TargetStraight.velocity = input_center_velocity;
 8001e98:	4a46      	ldr	r2, [pc, #280]	; (8001fb4 <slalom_table+0x1cc>)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	6013      	str	r3, [r2, #0]
	g_TargetStraight.acceleration = 0;
 8001e9e:	4b45      	ldr	r3, [pc, #276]	; (8001fb4 <slalom_table+0x1cc>)
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	605a      	str	r2, [r3, #4]
	g_TargetStraight.displacement = 0;
 8001ea6:	4b43      	ldr	r3, [pc, #268]	; (8001fb4 <slalom_table+0x1cc>)
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]

	g_acc_flag=1;
 8001eae:	4b42      	ldr	r3, [pc, #264]	; (8001fb8 <slalom_table+0x1d0>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;g_TargetTurning.acceleration = input_acceleration;}
 8001eb4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec0:	dd0e      	ble.n	8001ee0 <slalom_table+0xf8>
 8001ec2:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ec6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed2:	dd05      	ble.n	8001ee0 <slalom_table+0xf8>
 8001ed4:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <slalom_table+0x1d0>)
 8001ed6:	2205      	movs	r2, #5
 8001ed8:	701a      	strb	r2, [r3, #0]
 8001eda:	4a35      	ldr	r2, [pc, #212]	; (8001fb0 <slalom_table+0x1c8>)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;g_TargetTurning.acceleration = -input_acceleration;}
 8001ee0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ee4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eec:	dd14      	ble.n	8001f18 <slalom_table+0x130>
 8001eee:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ef2:	eef1 7a67 	vneg.f32	s15, s15
 8001ef6:	ed97 7a07 	vldr	s14, [r7, #28]
 8001efa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f02:	d509      	bpl.n	8001f18 <slalom_table+0x130>
 8001f04:	4b2c      	ldr	r3, [pc, #176]	; (8001fb8 <slalom_table+0x1d0>)
 8001f06:	2206      	movs	r2, #6
 8001f08:	701a      	strb	r2, [r3, #0]
 8001f0a:	edd7 7a00 	vldr	s15, [r7]
 8001f0e:	eef1 7a67 	vneg.f32	s15, s15
 8001f12:	4b27      	ldr	r3, [pc, #156]	; (8001fb0 <slalom_table+0x1c8>)
 8001f14:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;g_TargetTurning.acceleration = -input_acceleration;}
 8001f18:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f24:	d514      	bpl.n	8001f50 <slalom_table+0x168>
 8001f26:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f2a:	eef1 7a67 	vneg.f32	s15, s15
 8001f2e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3a:	dd09      	ble.n	8001f50 <slalom_table+0x168>
 8001f3c:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <slalom_table+0x1d0>)
 8001f3e:	2205      	movs	r2, #5
 8001f40:	701a      	strb	r2, [r3, #0]
 8001f42:	edd7 7a00 	vldr	s15, [r7]
 8001f46:	eef1 7a67 	vneg.f32	s15, s15
 8001f4a:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <slalom_table+0x1c8>)
 8001f4c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;g_TargetTurning.acceleration = input_acceleration;}
 8001f50:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5c:	d50e      	bpl.n	8001f7c <slalom_table+0x194>
 8001f5e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f62:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6e:	d505      	bpl.n	8001f7c <slalom_table+0x194>
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <slalom_table+0x1d0>)
 8001f72:	2206      	movs	r2, #6
 8001f74:	701a      	strb	r2, [r3, #0]
 8001f76:	4a0e      	ldr	r2, [pc, #56]	; (8001fb0 <slalom_table+0x1c8>)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <slalom_table+0x1d4>)
 8001f7e:	2202      	movs	r2, #2
 8001f80:	701a      	strb	r2, [r3, #0]


	//pl_motor_start();
	while (g_acc_flag!=4){
 8001f82:	bf00      	nop
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <slalom_table+0x1d0>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d1fa      	bne.n	8001f84 <slalom_table+0x19c>

	}
	modeacc = 0;
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <slalom_table+0x1d4>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]

	//pl_motor_stop();

	return g_TargetTurning.velocity;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <slalom_table+0x1c8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	ee07 3a90 	vmov	s15, r3
}
 8001f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa0:	3724      	adds	r7, #36	; 0x24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	20000224 	.word	0x20000224
 8001fb0:	20000204 	.word	0x20000204
 8001fb4:	200001f8 	.word	0x200001f8
 8001fb8:	20000239 	.word	0x20000239
 8001fbc:	20000238 	.word	0x20000238

08001fc0 <lcd_cmd>:
#include "PL_lcd.h"
#include "i2c.h"


void lcd_cmd(uint8_t x)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
  uint8_t aTxBuffer[2] = { 0x00, x };
 8001fca:	2300      	movs	r3, #0
 8001fcc:	733b      	strb	r3, [r7, #12]
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 8001fd2:	e007      	b.n	8001fe4 <lcd_cmd+0x24>
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001fd4:	480c      	ldr	r0, [pc, #48]	; (8002008 <lcd_cmd+0x48>)
 8001fd6:	f004 fcd9 	bl	800698c <HAL_I2C_GetError>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d001      	beq.n	8001fe4 <lcd_cmd+0x24>
    {
      Error_Handler();
 8001fe0:	f001 fd95 	bl	8003b0e <Error_Handler>
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 8001fe4:	f107 020c 	add.w	r2, r7, #12
 8001fe8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	2302      	movs	r3, #2
 8001ff0:	217c      	movs	r1, #124	; 0x7c
 8001ff2:	4805      	ldr	r0, [pc, #20]	; (8002008 <lcd_cmd+0x48>)
 8001ff4:	f004 fbd6 	bl	80067a4 <HAL_I2C_Master_Transmit>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1ea      	bne.n	8001fd4 <lcd_cmd+0x14>
    }
  }
}
 8001ffe:	bf00      	nop
 8002000:	bf00      	nop
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20000a30 	.word	0x20000a30

0800200c <lcd_data>:

void lcd_data(uint8_t x)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af02      	add	r7, sp, #8
 8002012:	4603      	mov	r3, r0
 8002014:	71fb      	strb	r3, [r7, #7]
  uint8_t aTxBuffer[2] = { 0x40, x };
 8002016:	2340      	movs	r3, #64	; 0x40
 8002018:	733b      	strb	r3, [r7, #12]
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 800201e:	e007      	b.n	8002030 <lcd_data+0x24>
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8002020:	480c      	ldr	r0, [pc, #48]	; (8002054 <lcd_data+0x48>)
 8002022:	f004 fcb3 	bl	800698c <HAL_I2C_GetError>
 8002026:	4603      	mov	r3, r0
 8002028:	2b04      	cmp	r3, #4
 800202a:	d001      	beq.n	8002030 <lcd_data+0x24>
    {
      Error_Handler();
 800202c:	f001 fd6f 	bl	8003b0e <Error_Handler>
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 8002030:	f107 020c 	add.w	r2, r7, #12
 8002034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2302      	movs	r3, #2
 800203c:	217c      	movs	r1, #124	; 0x7c
 800203e:	4805      	ldr	r0, [pc, #20]	; (8002054 <lcd_data+0x48>)
 8002040:	f004 fbb0 	bl	80067a4 <HAL_I2C_Master_Transmit>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1ea      	bne.n	8002020 <lcd_data+0x14>
    }
  }
}
 800204a:	bf00      	nop
 800204c:	bf00      	nop
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000a30 	.word	0x20000a30

08002058 <pl_lcd_puts>:

void pl_lcd_puts(const char *s)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  while(*s) lcd_data(*s++);
 8002060:	e006      	b.n	8002070 <pl_lcd_puts+0x18>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	607a      	str	r2, [r7, #4]
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ffce 	bl	800200c <lcd_data>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f4      	bne.n	8002062 <pl_lcd_puts+0xa>
}
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <pl_lcd_init>:

// param:
//  contrast: 0 ~ 63 (最初は大きくして調整)
void pl_lcd_init(void)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	af00      	add	r7, sp, #0
  // LCD initialize(裏面に記載)
  lcd_cmd(0x38); // function set
 8002086:	2038      	movs	r0, #56	; 0x38
 8002088:	f7ff ff9a 	bl	8001fc0 <lcd_cmd>
  lcd_cmd(0x39); // function set
 800208c:	2039      	movs	r0, #57	; 0x39
 800208e:	f7ff ff97 	bl	8001fc0 <lcd_cmd>
  lcd_cmd(0x14); // interval osc
 8002092:	2014      	movs	r0, #20
 8002094:	f7ff ff94 	bl	8001fc0 <lcd_cmd>
  lcd_cmd(0x70); // contrast low
 8002098:	2070      	movs	r0, #112	; 0x70
 800209a:	f7ff ff91 	bl	8001fc0 <lcd_cmd>
  lcd_cmd(0x56); // contrast high / icon / power
 800209e:	2056      	movs	r0, #86	; 0x56
 80020a0:	f7ff ff8e 	bl	8001fc0 <lcd_cmd>
  lcd_cmd(0x6c); // follower control
 80020a4:	206c      	movs	r0, #108	; 0x6c
 80020a6:	f7ff ff8b 	bl	8001fc0 <lcd_cmd>
  HAL_Delay(300);
 80020aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80020ae:	f002 fa67 	bl	8004580 <HAL_Delay>
  lcd_cmd(0x38); // function set
 80020b2:	2038      	movs	r0, #56	; 0x38
 80020b4:	f7ff ff84 	bl	8001fc0 <lcd_cmd>
  lcd_cmd(0x0c); // display on
 80020b8:	200c      	movs	r0, #12
 80020ba:	f7ff ff81 	bl	8001fc0 <lcd_cmd>
  lcd_cmd(0x01); // clear display
 80020be:	2001      	movs	r0, #1
 80020c0:	f7ff ff7e 	bl	8001fc0 <lcd_cmd>
  HAL_Delay(2);
 80020c4:	2002      	movs	r0, #2
 80020c6:	f002 fa5b 	bl	8004580 <HAL_Delay>
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}

080020ce <pl_lcd_pos>:

void pl_lcd_move(uint8_t pos){
  lcd_cmd(0x80 | pos);
}

void pl_lcd_pos(uint8_t raw, uint8_t col) {
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	460a      	mov	r2, r1
 80020d8:	71fb      	strb	r3, [r7, #7]
 80020da:	4613      	mov	r3, r2
 80020dc:	71bb      	strb	r3, [r7, #6]
  lcd_cmd(0x80 | ((raw & 0x01) << 6) | col);
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	019b      	lsls	r3, r3, #6
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	79bb      	ldrb	r3, [r7, #6]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ff62 	bl	8001fc0 <lcd_cmd>
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <pl_lcd_clear>:

void pl_lcd_clear() {
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  lcd_cmd(0x01);
 8002108:	2001      	movs	r0, #1
 800210a:	f7ff ff59 	bl	8001fc0 <lcd_cmd>
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <pl_motor_init>:
/*	モータの初期化					(pl_speaker_init)	*/
/*******************************************************************/
/*	モータの初期化する。						*/
/*******************************************************************/
void pl_motor_init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0

	  HAL_TIM_Base_Start_IT(&htim1);//motor
 8002118:	480a      	ldr	r0, [pc, #40]	; (8002144 <pl_motor_init+0x30>)
 800211a:	f006 f819 	bl	8008150 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim1);//motor
 800211e:	4809      	ldr	r0, [pc, #36]	; (8002144 <pl_motor_init+0x30>)
 8002120:	f001 fffc 	bl	800411c <HAL_TIM_PWM_MspInit>

	  HAL_TIM_Base_Start_IT(&htim2);//motor
 8002124:	4808      	ldr	r0, [pc, #32]	; (8002148 <pl_motor_init+0x34>)
 8002126:	f006 f813 	bl	8008150 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim2);//motor
 800212a:	4807      	ldr	r0, [pc, #28]	; (8002148 <pl_motor_init+0x34>)
 800212c:	f001 fff6 	bl	800411c <HAL_TIM_PWM_MspInit>

	  pl_motor_mode_L(1);
 8002130:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002134:	f000 f836 	bl	80021a4 <pl_motor_mode_L>
	  pl_motor_mode_R(1);
 8002138:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800213c:	f000 f852 	bl	80021e4 <pl_motor_mode_R>



}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000a80 	.word	0x20000a80
 8002148:	20000acc 	.word	0x20000acc

0800214c <pl_motor_standby>:

void pl_motor_standby(int pin){
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MOTOR_ENABLE_GPIO_Port, MOTOR_ENABLE_Pin, pin);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800215e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002162:	f004 fa77 	bl	8006654 <HAL_GPIO_WritePin>
	pl_motor_mode_L(1);
 8002166:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800216a:	f000 f81b 	bl	80021a4 <pl_motor_mode_L>
	pl_motor_mode_R(1);
 800216e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002172:	f000 f837 	bl	80021e4 <pl_motor_mode_R>
	HAL_GPIO_WritePin(MD_RESET_GPIO_Port,MD_RESET_Pin,GPIO_PIN_SET);
 8002176:	2201      	movs	r2, #1
 8002178:	2120      	movs	r1, #32
 800217a:	4809      	ldr	r0, [pc, #36]	; (80021a0 <pl_motor_standby+0x54>)
 800217c:	f004 fa6a 	bl	8006654 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 8002180:	2003      	movs	r0, #3
 8002182:	f002 f9fd 	bl	8004580 <HAL_Delay>
	HAL_GPIO_WritePin(MD_RESET_GPIO_Port,MD_RESET_Pin,GPIO_PIN_RESET);
 8002186:	2200      	movs	r2, #0
 8002188:	2120      	movs	r1, #32
 800218a:	4805      	ldr	r0, [pc, #20]	; (80021a0 <pl_motor_standby+0x54>)
 800218c:	f004 fa62 	bl	8006654 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002190:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002194:	f002 f9f4 	bl	8004580 <HAL_Delay>
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	48000400 	.word	0x48000400

080021a4 <pl_motor_mode_L>:

void pl_motor_mode_L(float velocity_l){
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	ed87 0a01 	vstr	s0, [r7, #4]
	if (velocity_l>=0){
 80021ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80021b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ba:	db07      	blt.n	80021cc <pl_motor_mode_L+0x28>
		HAL_GPIO_WritePin(MOTOR_CW_CCW_L_GPIO_Port,MOTOR_CW_CCW_L_Pin,L_MOTOR_FRONT);
 80021bc:	2200      	movs	r2, #0
 80021be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c6:	f004 fa45 	bl	8006654 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(MOTOR_CW_CCW_L_GPIO_Port,MOTOR_CW_CCW_L_Pin,L_MOTOR_BACK);
	}
}
 80021ca:	e006      	b.n	80021da <pl_motor_mode_L+0x36>
		HAL_GPIO_WritePin(MOTOR_CW_CCW_L_GPIO_Port,MOTOR_CW_CCW_L_Pin,L_MOTOR_BACK);
 80021cc:	2201      	movs	r2, #1
 80021ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d6:	f004 fa3d 	bl	8006654 <HAL_GPIO_WritePin>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <pl_motor_mode_R>:

void pl_motor_mode_R(float velocity_r){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	ed87 0a01 	vstr	s0, [r7, #4]
	if (velocity_r>=0){
 80021ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80021f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fa:	db05      	blt.n	8002208 <pl_motor_mode_R+0x24>
		HAL_GPIO_WritePin(MOTOR_CW_CCW_R_GPIO_Port,MOTOR_CW_CCW_R_Pin,R_MOTOR_FRONT);
 80021fc:	2201      	movs	r2, #1
 80021fe:	2110      	movs	r1, #16
 8002200:	4806      	ldr	r0, [pc, #24]	; (800221c <pl_motor_mode_R+0x38>)
 8002202:	f004 fa27 	bl	8006654 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(MOTOR_CW_CCW_R_GPIO_Port,MOTOR_CW_CCW_R_Pin,R_MOTOR_BACK);
	}
}
 8002206:	e004      	b.n	8002212 <pl_motor_mode_R+0x2e>
		HAL_GPIO_WritePin(MOTOR_CW_CCW_R_GPIO_Port,MOTOR_CW_CCW_R_Pin,R_MOTOR_BACK);
 8002208:	2200      	movs	r2, #0
 800220a:	2110      	movs	r1, #16
 800220c:	4803      	ldr	r0, [pc, #12]	; (800221c <pl_motor_mode_R+0x38>)
 800220e:	f004 fa21 	bl	8006654 <HAL_GPIO_WritePin>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	48000400 	.word	0x48000400

08002220 <pl_motor_start>:

void pl_motor_start(void){
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
	pl_interrupt_motor_count_L();
 8002224:	f000 f848 	bl	80022b8 <pl_interrupt_motor_count_L>
	pl_interrupt_motor_count_R();
 8002228:	f000 f872 	bl	8002310 <pl_interrupt_motor_count_R>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800222c:	2100      	movs	r1, #0
 800222e:	4804      	ldr	r0, [pc, #16]	; (8002240 <pl_motor_start+0x20>)
 8002230:	f006 f83a 	bl	80082a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002234:	2104      	movs	r1, #4
 8002236:	4803      	ldr	r0, [pc, #12]	; (8002244 <pl_motor_start+0x24>)
 8002238:	f006 f836 	bl	80082a8 <HAL_TIM_PWM_Start>
}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000a80 	.word	0x20000a80
 8002244:	20000acc 	.word	0x20000acc

08002248 <pl_motor_stop>:

void pl_motor_stop(void){
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800224c:	2100      	movs	r1, #0
 800224e:	4804      	ldr	r0, [pc, #16]	; (8002260 <pl_motor_stop+0x18>)
 8002250:	f006 f908 	bl	8008464 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8002254:	2104      	movs	r1, #4
 8002256:	4803      	ldr	r0, [pc, #12]	; (8002264 <pl_motor_stop+0x1c>)
 8002258:	f006 f904 	bl	8008464 <HAL_TIM_PWM_Stop>
}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000a80 	.word	0x20000a80
 8002264:	20000acc 	.word	0x20000acc

08002268 <pl_motor_count_L>:

void pl_motor_count_L(float velocity_l){
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	ed87 0a01 	vstr	s0, [r7, #4]
//	uint16_t motorCount_l;
	g_motorCount_l = calMotorVelocityCount(velocity_l);
 8002272:	ed97 0a01 	vldr	s0, [r7, #4]
 8002276:	f000 f877 	bl	8002368 <calMotorVelocityCount>
 800227a:	4603      	mov	r3, r0
 800227c:	461a      	mov	r2, r3
 800227e:	4b03      	ldr	r3, [pc, #12]	; (800228c <pl_motor_count_L+0x24>)
 8002280:	801a      	strh	r2, [r3, #0]
//	__HAL_TIM_SET_AUTORELOAD(&htim1, g_motorCount_l);
//	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,(uint16_t)((float)(g_motorCount_l)/2));
//	__HAL_TIM_SET_COUNTER(&htim1, 0);
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	200003cc 	.word	0x200003cc

08002290 <pl_motor_count_R>:

void pl_motor_count_R(float velocity_r){
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	ed87 0a01 	vstr	s0, [r7, #4]
//	uint16_t motorCount_r;
	g_motorCount_r = calMotorVelocityCount(velocity_r);
 800229a:	ed97 0a01 	vldr	s0, [r7, #4]
 800229e:	f000 f863 	bl	8002368 <calMotorVelocityCount>
 80022a2:	4603      	mov	r3, r0
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b03      	ldr	r3, [pc, #12]	; (80022b4 <pl_motor_count_R+0x24>)
 80022a8:	801a      	strh	r2, [r3, #0]
//	__HAL_TIM_SET_AUTORELOAD(&htim2, g_motorCount_r);
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,(uint16_t)((float)(g_motorCount_r)/2));
//	__HAL_TIM_SET_COUNTER(&htim2, 0);

}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200003ce 	.word	0x200003ce

080022b8 <pl_interrupt_motor_count_L>:

void pl_interrupt_motor_count_L(void){
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim1, g_motorCount_l);
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <pl_interrupt_motor_count_L+0x50>)
 80022be:	881a      	ldrh	r2, [r3, #0]
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <pl_interrupt_motor_count_L+0x54>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <pl_interrupt_motor_count_L+0x50>)
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	4b0f      	ldr	r3, [pc, #60]	; (800230c <pl_interrupt_motor_count_L+0x54>)
 80022ce:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,(uint16_t)((float)(g_motorCount_l)/2));
 80022d0:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <pl_interrupt_motor_count_L+0x50>)
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	ee07 3a90 	vmov	s15, r3
 80022d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022dc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80022e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022e8:	ee17 3a90 	vmov	r3, s15
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	4b07      	ldr	r3, [pc, #28]	; (800230c <pl_interrupt_motor_count_L+0x54>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <pl_interrupt_motor_count_L+0x54>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2200      	movs	r2, #0
 80022fa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	200003cc 	.word	0x200003cc
 800230c:	20000a80 	.word	0x20000a80

08002310 <pl_interrupt_motor_count_R>:

void pl_interrupt_motor_count_R(void){
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim2, g_motorCount_r);
 8002314:	4b12      	ldr	r3, [pc, #72]	; (8002360 <pl_interrupt_motor_count_R+0x50>)
 8002316:	881a      	ldrh	r2, [r3, #0]
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <pl_interrupt_motor_count_R+0x54>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	62da      	str	r2, [r3, #44]	; 0x2c
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <pl_interrupt_motor_count_R+0x50>)
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <pl_interrupt_motor_count_R+0x54>)
 8002326:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,(uint16_t)((float)(g_motorCount_r)/2));
 8002328:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <pl_interrupt_motor_count_R+0x50>)
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	ee07 3a90 	vmov	s15, r3
 8002330:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002334:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002338:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800233c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002340:	ee17 3a90 	vmov	r3, s15
 8002344:	b29a      	uxth	r2, r3
 8002346:	4b07      	ldr	r3, [pc, #28]	; (8002364 <pl_interrupt_motor_count_R+0x54>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <pl_interrupt_motor_count_R+0x54>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2200      	movs	r2, #0
 8002352:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	200003ce 	.word	0x200003ce
 8002364:	20000acc 	.word	0x20000acc

08002368 <calMotorVelocityCount>:
/*******************************************************************/
/*	速度からcycleCountへの変換					(calFrequencyCount)	*/
/*******************************************************************/
/*	速度からPWMに送るcycleCountを計算する．。						*/
/*******************************************************************/
uint16_t calMotorVelocityCount(float Velocity) {
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	ed87 0a01 	vstr	s0, [r7, #4]
	float f_MotorCount;
	uint16_t MotorCount;

	f_MotorCount=(10000000 * STEP_DEGREE * M_PI / 180 * TIRE_DIAMETER / 2 / fabs(Velocity));
 8002372:	edd7 7a01 	vldr	s15, [r7, #4]
 8002376:	eef0 7ae7 	vabs.f32	s15, s15
 800237a:	ee17 0a90 	vmov	r0, s15
 800237e:	f7fe f8e3 	bl	8000548 <__aeabi_f2d>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	a11d      	add	r1, pc, #116	; (adr r1, 80023fc <calMotorVelocityCount+0x94>)
 8002388:	e9d1 0100 	ldrd	r0, r1, [r1]
 800238c:	f7fe fa5e 	bl	800084c <__aeabi_ddiv>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4610      	mov	r0, r2
 8002396:	4619      	mov	r1, r3
 8002398:	f7fe fc06 	bl	8000ba8 <__aeabi_d2f>
 800239c:	4603      	mov	r3, r0
 800239e:	60bb      	str	r3, [r7, #8]
	if (Velocity == 0 || f_MotorCount > 65535 || f_MotorCount < 0) {
 80023a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80023a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ac:	d00f      	beq.n	80023ce <calMotorVelocityCount+0x66>
 80023ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80023b2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80023f8 <calMotorVelocityCount+0x90>
 80023b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023be:	dc06      	bgt.n	80023ce <calMotorVelocityCount+0x66>
 80023c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80023c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023cc:	d503      	bpl.n	80023d6 <calMotorVelocityCount+0x6e>
		MotorCount = 30535 - 1;
 80023ce:	f247 7346 	movw	r3, #30534	; 0x7746
 80023d2:	81fb      	strh	r3, [r7, #14]
 80023d4:	e008      	b.n	80023e8 <calMotorVelocityCount+0x80>
	} else {
		MotorCount = (uint16_t) (f_MotorCount)-1;
 80023d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80023da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023de:	ee17 3a90 	vmov	r3, s15
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	3b01      	subs	r3, #1
 80023e6:	81fb      	strh	r3, [r7, #14]
	}

	return MotorCount;
 80023e8:	89fb      	ldrh	r3, [r7, #14]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	f3af 8000 	nop.w
 80023f8:	477fff00 	.word	0x477fff00
 80023fc:	398eadef 	.word	0x398eadef
 8002400:	414f28b3 	.word	0x414f28b3
 8002404:	00000000 	.word	0x00000000

08002408 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 800240e:	4828      	ldr	r0, [pc, #160]	; (80024b0 <pl_getbatt+0xa8>)
 8002410:	f002 fc38 	bl	8004c84 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 8002414:	2132      	movs	r1, #50	; 0x32
 8002416:	4826      	ldr	r0, [pc, #152]	; (80024b0 <pl_getbatt+0xa8>)
 8002418:	f002 fcca 	bl	8004db0 <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 800241c:	4824      	ldr	r0, [pc, #144]	; (80024b0 <pl_getbatt+0xa8>)
 800241e:	f002 fe3c 	bl	800509a <HAL_ADC_GetValue>
 8002422:	4603      	mov	r3, r0
 8002424:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 8002426:	4822      	ldr	r0, [pc, #136]	; (80024b0 <pl_getbatt+0xa8>)
 8002428:	f002 fc8f 	bl	8004d4a <HAL_ADC_Stop>
	batt = 3.3  * (float) battAD / 1023.0 * (100.0 + 22.0) / 22.0;
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	ee07 3a90 	vmov	s15, r3
 8002432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002436:	ee17 0a90 	vmov	r0, s15
 800243a:	f7fe f885 	bl	8000548 <__aeabi_f2d>
 800243e:	a318      	add	r3, pc, #96	; (adr r3, 80024a0 <pl_getbatt+0x98>)
 8002440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002444:	f7fe f8d8 	bl	80005f8 <__aeabi_dmul>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4610      	mov	r0, r2
 800244e:	4619      	mov	r1, r3
 8002450:	a315      	add	r3, pc, #84	; (adr r3, 80024a8 <pl_getbatt+0xa0>)
 8002452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002456:	f7fe f9f9 	bl	800084c <__aeabi_ddiv>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <pl_getbatt+0xac>)
 8002468:	f7fe f8c6 	bl	80005f8 <__aeabi_dmul>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4610      	mov	r0, r2
 8002472:	4619      	mov	r1, r3
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <pl_getbatt+0xb0>)
 800247a:	f7fe f9e7 	bl	800084c <__aeabi_ddiv>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4610      	mov	r0, r2
 8002484:	4619      	mov	r1, r3
 8002486:	f7fe fb8f 	bl	8000ba8 <__aeabi_d2f>
 800248a:	4603      	mov	r3, r0
 800248c:	603b      	str	r3, [r7, #0]


return batt;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	ee07 3a90 	vmov	s15, r3
}
 8002494:	eeb0 0a67 	vmov.f32	s0, s15
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	66666666 	.word	0x66666666
 80024a4:	400a6666 	.word	0x400a6666
 80024a8:	00000000 	.word	0x00000000
 80024ac:	408ff800 	.word	0x408ff800
 80024b0:	20000984 	.word	0x20000984
 80024b4:	405e8000 	.word	0x405e8000
 80024b8:	40360000 	.word	0x40360000
 80024bc:	00000000 	.word	0x00000000

080024c0 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 80024c6:	4862      	ldr	r0, [pc, #392]	; (8002650 <pl_callback_getSensor+0x190>)
 80024c8:	f002 fd86 	bl	8004fd8 <HAL_ADC_Stop_DMA>
	switch (AD_step) {
 80024cc:	4b61      	ldr	r3, [pc, #388]	; (8002654 <pl_callback_getSensor+0x194>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d042      	beq.n	800255a <pl_callback_getSensor+0x9a>
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	dc66      	bgt.n	80025a6 <pl_callback_getSensor+0xe6>
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <pl_callback_getSensor+0x22>
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d016      	beq.n	800250e <pl_callback_getSensor+0x4e>
 80024e0:	e061      	b.n	80025a6 <pl_callback_getSensor+0xe6>
		case 0:
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_SET);
 80024e2:	2201      	movs	r2, #1
 80024e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024e8:	485b      	ldr	r0, [pc, #364]	; (8002658 <pl_callback_getSensor+0x198>)
 80024ea:	f004 f8b3 	bl	8006654 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_RESET);
 80024ee:	2200      	movs	r2, #0
 80024f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024f4:	4858      	ldr	r0, [pc, #352]	; (8002658 <pl_callback_getSensor+0x198>)
 80024f6:	f004 f8ad 	bl	8006654 <HAL_GPIO_WritePin>
					for (j = 0; j <= 100; j++) {
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	e002      	b.n	8002506 <pl_callback_getSensor+0x46>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3301      	adds	r3, #1
 8002504:	607b      	str	r3, [r7, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b64      	cmp	r3, #100	; 0x64
 800250a:	ddf9      	ble.n	8002500 <pl_callback_getSensor+0x40>
					}
			break;
 800250c:	e04b      	b.n	80025a6 <pl_callback_getSensor+0xe6>
		case 1:
			g_sensor_on[0] = g_ADCBuffer[1];
 800250e:	4b53      	ldr	r3, [pc, #332]	; (800265c <pl_callback_getSensor+0x19c>)
 8002510:	885a      	ldrh	r2, [r3, #2]
 8002512:	4b53      	ldr	r3, [pc, #332]	; (8002660 <pl_callback_getSensor+0x1a0>)
 8002514:	801a      	strh	r2, [r3, #0]
			g_sensor_on[1] = g_ADCBuffer[2];
 8002516:	4b51      	ldr	r3, [pc, #324]	; (800265c <pl_callback_getSensor+0x19c>)
 8002518:	889a      	ldrh	r2, [r3, #4]
 800251a:	4b51      	ldr	r3, [pc, #324]	; (8002660 <pl_callback_getSensor+0x1a0>)
 800251c:	805a      	strh	r2, [r3, #2]
			g_sensor_off[2] = g_ADCBuffer[3];
 800251e:	4b4f      	ldr	r3, [pc, #316]	; (800265c <pl_callback_getSensor+0x19c>)
 8002520:	88da      	ldrh	r2, [r3, #6]
 8002522:	4b50      	ldr	r3, [pc, #320]	; (8002664 <pl_callback_getSensor+0x1a4>)
 8002524:	809a      	strh	r2, [r3, #4]
			g_sensor_off[3] = g_ADCBuffer[4];
 8002526:	4b4d      	ldr	r3, [pc, #308]	; (800265c <pl_callback_getSensor+0x19c>)
 8002528:	891a      	ldrh	r2, [r3, #8]
 800252a:	4b4e      	ldr	r3, [pc, #312]	; (8002664 <pl_callback_getSensor+0x1a4>)
 800252c:	80da      	strh	r2, [r3, #6]
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_RESET);
 800252e:	2200      	movs	r2, #0
 8002530:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002534:	4848      	ldr	r0, [pc, #288]	; (8002658 <pl_callback_getSensor+0x198>)
 8002536:	f004 f88d 	bl	8006654 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_SET);
 800253a:	2201      	movs	r2, #1
 800253c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002540:	4845      	ldr	r0, [pc, #276]	; (8002658 <pl_callback_getSensor+0x198>)
 8002542:	f004 f887 	bl	8006654 <HAL_GPIO_WritePin>
					for (j = 0; j <= 100; j++) {
 8002546:	2300      	movs	r3, #0
 8002548:	607b      	str	r3, [r7, #4]
 800254a:	e002      	b.n	8002552 <pl_callback_getSensor+0x92>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3301      	adds	r3, #1
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b64      	cmp	r3, #100	; 0x64
 8002556:	ddf9      	ble.n	800254c <pl_callback_getSensor+0x8c>
					}
			break;
 8002558:	e025      	b.n	80025a6 <pl_callback_getSensor+0xe6>
		case 2:
			g_sensor_off[0] = g_ADCBuffer[1];
 800255a:	4b40      	ldr	r3, [pc, #256]	; (800265c <pl_callback_getSensor+0x19c>)
 800255c:	885a      	ldrh	r2, [r3, #2]
 800255e:	4b41      	ldr	r3, [pc, #260]	; (8002664 <pl_callback_getSensor+0x1a4>)
 8002560:	801a      	strh	r2, [r3, #0]
			g_sensor_off[1] = g_ADCBuffer[2];
 8002562:	4b3e      	ldr	r3, [pc, #248]	; (800265c <pl_callback_getSensor+0x19c>)
 8002564:	889a      	ldrh	r2, [r3, #4]
 8002566:	4b3f      	ldr	r3, [pc, #252]	; (8002664 <pl_callback_getSensor+0x1a4>)
 8002568:	805a      	strh	r2, [r3, #2]
			g_sensor_on[2] = g_ADCBuffer[3];
 800256a:	4b3c      	ldr	r3, [pc, #240]	; (800265c <pl_callback_getSensor+0x19c>)
 800256c:	88da      	ldrh	r2, [r3, #6]
 800256e:	4b3c      	ldr	r3, [pc, #240]	; (8002660 <pl_callback_getSensor+0x1a0>)
 8002570:	809a      	strh	r2, [r3, #4]
			g_sensor_on[3] = g_ADCBuffer[4];
 8002572:	4b3a      	ldr	r3, [pc, #232]	; (800265c <pl_callback_getSensor+0x19c>)
 8002574:	891a      	ldrh	r2, [r3, #8]
 8002576:	4b3a      	ldr	r3, [pc, #232]	; (8002660 <pl_callback_getSensor+0x1a0>)
 8002578:	80da      	strh	r2, [r3, #6]
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_RESET);
 800257a:	2200      	movs	r2, #0
 800257c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002580:	4835      	ldr	r0, [pc, #212]	; (8002658 <pl_callback_getSensor+0x198>)
 8002582:	f004 f867 	bl	8006654 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_RESET);
 8002586:	2200      	movs	r2, #0
 8002588:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800258c:	4832      	ldr	r0, [pc, #200]	; (8002658 <pl_callback_getSensor+0x198>)
 800258e:	f004 f861 	bl	8006654 <HAL_GPIO_WritePin>
					for (j = 0; j <= 10; j++) {
 8002592:	2300      	movs	r3, #0
 8002594:	607b      	str	r3, [r7, #4]
 8002596:	e002      	b.n	800259e <pl_callback_getSensor+0xde>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3301      	adds	r3, #1
 800259c:	607b      	str	r3, [r7, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b0a      	cmp	r3, #10
 80025a2:	ddf9      	ble.n	8002598 <pl_callback_getSensor+0xd8>
					}
			break;
 80025a4:	bf00      	nop
	}
	V_battAD = g_ADCBuffer[0];
 80025a6:	4b2d      	ldr	r3, [pc, #180]	; (800265c <pl_callback_getSensor+0x19c>)
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 1023.0 * (100.0 + 22.0) / 22.0;
 80025ac:	887b      	ldrh	r3, [r7, #2]
 80025ae:	ee07 3a90 	vmov	s15, r3
 80025b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025b6:	ee17 0a90 	vmov	r0, s15
 80025ba:	f7fd ffc5 	bl	8000548 <__aeabi_f2d>
 80025be:	a320      	add	r3, pc, #128	; (adr r3, 8002640 <pl_callback_getSensor+0x180>)
 80025c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c4:	f7fe f818 	bl	80005f8 <__aeabi_dmul>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4610      	mov	r0, r2
 80025ce:	4619      	mov	r1, r3
 80025d0:	a31d      	add	r3, pc, #116	; (adr r3, 8002648 <pl_callback_getSensor+0x188>)
 80025d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d6:	f7fe f939 	bl	800084c <__aeabi_ddiv>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	4b20      	ldr	r3, [pc, #128]	; (8002668 <pl_callback_getSensor+0x1a8>)
 80025e8:	f7fe f806 	bl	80005f8 <__aeabi_dmul>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4610      	mov	r0, r2
 80025f2:	4619      	mov	r1, r3
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	4b1c      	ldr	r3, [pc, #112]	; (800266c <pl_callback_getSensor+0x1ac>)
 80025fa:	f7fe f927 	bl	800084c <__aeabi_ddiv>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	4610      	mov	r0, r2
 8002604:	4619      	mov	r1, r3
 8002606:	f7fe facf 	bl	8000ba8 <__aeabi_d2f>
 800260a:	4603      	mov	r3, r0
 800260c:	4a18      	ldr	r2, [pc, #96]	; (8002670 <pl_callback_getSensor+0x1b0>)
 800260e:	6013      	str	r3, [r2, #0]
		AD_step++;
 8002610:	4b10      	ldr	r3, [pc, #64]	; (8002654 <pl_callback_getSensor+0x194>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	3301      	adds	r3, #1
 8002616:	b2da      	uxtb	r2, r3
 8002618:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <pl_callback_getSensor+0x194>)
 800261a:	701a      	strb	r2, [r3, #0]

		if (AD_step != 3) {
 800261c:	4b0d      	ldr	r3, [pc, #52]	; (8002654 <pl_callback_getSensor+0x194>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b03      	cmp	r3, #3
 8002622:	d005      	beq.n	8002630 <pl_callback_getSensor+0x170>
			HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
 8002624:	2205      	movs	r2, #5
 8002626:	490d      	ldr	r1, [pc, #52]	; (800265c <pl_callback_getSensor+0x19c>)
 8002628:	4809      	ldr	r0, [pc, #36]	; (8002650 <pl_callback_getSensor+0x190>)
 800262a:	f002 fc51 	bl	8004ed0 <HAL_ADC_Start_DMA>

			AD_step = 0;

		}

}
 800262e:	e002      	b.n	8002636 <pl_callback_getSensor+0x176>
			AD_step = 0;
 8002630:	4b08      	ldr	r3, [pc, #32]	; (8002654 <pl_callback_getSensor+0x194>)
 8002632:	2200      	movs	r2, #0
 8002634:	701a      	strb	r2, [r3, #0]
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	66666666 	.word	0x66666666
 8002644:	400a6666 	.word	0x400a6666
 8002648:	00000000 	.word	0x00000000
 800264c:	408ff800 	.word	0x408ff800
 8002650:	20000984 	.word	0x20000984
 8002654:	200003da 	.word	0x200003da
 8002658:	48000800 	.word	0x48000800
 800265c:	200003d0 	.word	0x200003d0
 8002660:	200003dc 	.word	0x200003dc
 8002664:	200003e4 	.word	0x200003e4
 8002668:	405e8000 	.word	0x405e8000
 800266c:	40360000 	.word	0x40360000
 8002670:	200003ec 	.word	0x200003ec

08002674 <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
	if (sensor_mode == 1) {
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <pl_interupt_getSensor+0x1c>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d104      	bne.n	800268a <pl_interupt_getSensor+0x16>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
 8002680:	2205      	movs	r2, #5
 8002682:	4904      	ldr	r1, [pc, #16]	; (8002694 <pl_interupt_getSensor+0x20>)
 8002684:	4804      	ldr	r0, [pc, #16]	; (8002698 <pl_interupt_getSensor+0x24>)
 8002686:	f002 fc23 	bl	8004ed0 <HAL_ADC_Start_DMA>
				sizeof(g_ADCBuffer) / sizeof(uint16_t));
	}

}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	200003db 	.word	0x200003db
 8002694:	200003d0 	.word	0x200003d0
 8002698:	20000984 	.word	0x20000984

0800269c <pl_speaker_init>:
/*	スピーカーの初期化					(pl_speaker_init)	*/
/*******************************************************************/
/*	スピーカーの初期化する。						*/
/*******************************************************************/
void pl_speaker_init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0

	  HAL_TIM_Base_Start_IT(&htim15);//speaker
 80026a0:	4805      	ldr	r0, [pc, #20]	; (80026b8 <pl_speaker_init+0x1c>)
 80026a2:	f005 fd55 	bl	8008150 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim15);//speaker
 80026a6:	4804      	ldr	r0, [pc, #16]	; (80026b8 <pl_speaker_init+0x1c>)
 80026a8:	f001 fd38 	bl	800411c <HAL_TIM_PWM_MspInit>

	  inputseria();
 80026ac:	f000 f850 	bl	8002750 <inputseria>
	  inputZelda_nazo();
 80026b0:	f000 f804 	bl	80026bc <inputZelda_nazo>


}
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000b64 	.word	0x20000b64

080026bc <inputZelda_nazo>:
/*******************************************************************/
/*	音楽用構造体配列の入力					(input)	*/
/*******************************************************************/
/*	音楽用の構造体を定義してる．						*/
/*******************************************************************/
void inputZelda_nazo(void) {
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
	Zelda_nazo[0].interval = 1480;
 80026c0:	4b1a      	ldr	r3, [pc, #104]	; (800272c <inputZelda_nazo+0x70>)
 80026c2:	4a1b      	ldr	r2, [pc, #108]	; (8002730 <inputZelda_nazo+0x74>)
 80026c4:	601a      	str	r2, [r3, #0]
	Zelda_nazo[0].waittime = 19 * 7;
 80026c6:	4b19      	ldr	r3, [pc, #100]	; (800272c <inputZelda_nazo+0x70>)
 80026c8:	2285      	movs	r2, #133	; 0x85
 80026ca:	809a      	strh	r2, [r3, #4]
	Zelda_nazo[1].interval = 1397;
 80026cc:	4b17      	ldr	r3, [pc, #92]	; (800272c <inputZelda_nazo+0x70>)
 80026ce:	4a19      	ldr	r2, [pc, #100]	; (8002734 <inputZelda_nazo+0x78>)
 80026d0:	609a      	str	r2, [r3, #8]
	Zelda_nazo[1].waittime = 19 * 7;
 80026d2:	4b16      	ldr	r3, [pc, #88]	; (800272c <inputZelda_nazo+0x70>)
 80026d4:	2285      	movs	r2, #133	; 0x85
 80026d6:	819a      	strh	r2, [r3, #12]
	Zelda_nazo[2].interval = 1175;
 80026d8:	4b14      	ldr	r3, [pc, #80]	; (800272c <inputZelda_nazo+0x70>)
 80026da:	4a17      	ldr	r2, [pc, #92]	; (8002738 <inputZelda_nazo+0x7c>)
 80026dc:	611a      	str	r2, [r3, #16]
	Zelda_nazo[2].waittime = 19 * 7;
 80026de:	4b13      	ldr	r3, [pc, #76]	; (800272c <inputZelda_nazo+0x70>)
 80026e0:	2285      	movs	r2, #133	; 0x85
 80026e2:	829a      	strh	r2, [r3, #20]
	Zelda_nazo[3].interval = 831;
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <inputZelda_nazo+0x70>)
 80026e6:	4a15      	ldr	r2, [pc, #84]	; (800273c <inputZelda_nazo+0x80>)
 80026e8:	619a      	str	r2, [r3, #24]
	Zelda_nazo[3].waittime = 19 * 7;
 80026ea:	4b10      	ldr	r3, [pc, #64]	; (800272c <inputZelda_nazo+0x70>)
 80026ec:	2285      	movs	r2, #133	; 0x85
 80026ee:	839a      	strh	r2, [r3, #28]
	Zelda_nazo[4].interval = 784;
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <inputZelda_nazo+0x70>)
 80026f2:	4a13      	ldr	r2, [pc, #76]	; (8002740 <inputZelda_nazo+0x84>)
 80026f4:	621a      	str	r2, [r3, #32]
	Zelda_nazo[4].waittime = 19 * 7;
 80026f6:	4b0d      	ldr	r3, [pc, #52]	; (800272c <inputZelda_nazo+0x70>)
 80026f8:	2285      	movs	r2, #133	; 0x85
 80026fa:	849a      	strh	r2, [r3, #36]	; 0x24
	Zelda_nazo[5].interval = 1245;
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <inputZelda_nazo+0x70>)
 80026fe:	4a11      	ldr	r2, [pc, #68]	; (8002744 <inputZelda_nazo+0x88>)
 8002700:	629a      	str	r2, [r3, #40]	; 0x28
	Zelda_nazo[5].waittime = 19 * 7;
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <inputZelda_nazo+0x70>)
 8002704:	2285      	movs	r2, #133	; 0x85
 8002706:	859a      	strh	r2, [r3, #44]	; 0x2c
	Zelda_nazo[6].interval = 1568;
 8002708:	4b08      	ldr	r3, [pc, #32]	; (800272c <inputZelda_nazo+0x70>)
 800270a:	4a0f      	ldr	r2, [pc, #60]	; (8002748 <inputZelda_nazo+0x8c>)
 800270c:	631a      	str	r2, [r3, #48]	; 0x30
	Zelda_nazo[6].waittime = 19 * 7;
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <inputZelda_nazo+0x70>)
 8002710:	2285      	movs	r2, #133	; 0x85
 8002712:	869a      	strh	r2, [r3, #52]	; 0x34
	Zelda_nazo[7].interval = 1976;
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <inputZelda_nazo+0x70>)
 8002716:	4a0d      	ldr	r2, [pc, #52]	; (800274c <inputZelda_nazo+0x90>)
 8002718:	639a      	str	r2, [r3, #56]	; 0x38
	Zelda_nazo[7].waittime = 99 * 7;
 800271a:	4b04      	ldr	r3, [pc, #16]	; (800272c <inputZelda_nazo+0x70>)
 800271c:	f240 22b5 	movw	r2, #693	; 0x2b5
 8002720:	879a      	strh	r2, [r3, #60]	; 0x3c

}
 8002722:	bf00      	nop
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	20000940 	.word	0x20000940
 8002730:	44b90000 	.word	0x44b90000
 8002734:	44aea000 	.word	0x44aea000
 8002738:	4492e000 	.word	0x4492e000
 800273c:	444fc000 	.word	0x444fc000
 8002740:	44440000 	.word	0x44440000
 8002744:	449ba000 	.word	0x449ba000
 8002748:	44c40000 	.word	0x44c40000
 800274c:	44f70000 	.word	0x44f70000

08002750 <inputseria>:


void inputseria(void) {
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
	seria[0].interval = 698;
 8002754:	4bad      	ldr	r3, [pc, #692]	; (8002a0c <inputseria+0x2bc>)
 8002756:	4aae      	ldr	r2, [pc, #696]	; (8002a10 <inputseria+0x2c0>)
 8002758:	601a      	str	r2, [r3, #0]
	seria[0].waittime = 224;
 800275a:	4bac      	ldr	r3, [pc, #688]	; (8002a0c <inputseria+0x2bc>)
 800275c:	22e0      	movs	r2, #224	; 0xe0
 800275e:	809a      	strh	r2, [r3, #4]
	seria[1].interval = 880;
 8002760:	4baa      	ldr	r3, [pc, #680]	; (8002a0c <inputseria+0x2bc>)
 8002762:	4aac      	ldr	r2, [pc, #688]	; (8002a14 <inputseria+0x2c4>)
 8002764:	609a      	str	r2, [r3, #8]
	seria[1].waittime = 224;
 8002766:	4ba9      	ldr	r3, [pc, #676]	; (8002a0c <inputseria+0x2bc>)
 8002768:	22e0      	movs	r2, #224	; 0xe0
 800276a:	819a      	strh	r2, [r3, #12]
	seria[2].interval = 988;
 800276c:	4ba7      	ldr	r3, [pc, #668]	; (8002a0c <inputseria+0x2bc>)
 800276e:	4aaa      	ldr	r2, [pc, #680]	; (8002a18 <inputseria+0x2c8>)
 8002770:	611a      	str	r2, [r3, #16]
	seria[2].waittime = 462;
 8002772:	4ba6      	ldr	r3, [pc, #664]	; (8002a0c <inputseria+0x2bc>)
 8002774:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002778:	829a      	strh	r2, [r3, #20]
	seria[3].interval = 698;
 800277a:	4ba4      	ldr	r3, [pc, #656]	; (8002a0c <inputseria+0x2bc>)
 800277c:	4aa4      	ldr	r2, [pc, #656]	; (8002a10 <inputseria+0x2c0>)
 800277e:	619a      	str	r2, [r3, #24]
	seria[3].waittime = 224;
 8002780:	4ba2      	ldr	r3, [pc, #648]	; (8002a0c <inputseria+0x2bc>)
 8002782:	22e0      	movs	r2, #224	; 0xe0
 8002784:	839a      	strh	r2, [r3, #28]
	seria[4].interval = 880;
 8002786:	4ba1      	ldr	r3, [pc, #644]	; (8002a0c <inputseria+0x2bc>)
 8002788:	4aa2      	ldr	r2, [pc, #648]	; (8002a14 <inputseria+0x2c4>)
 800278a:	621a      	str	r2, [r3, #32]
	seria[4].waittime = 224;
 800278c:	4b9f      	ldr	r3, [pc, #636]	; (8002a0c <inputseria+0x2bc>)
 800278e:	22e0      	movs	r2, #224	; 0xe0
 8002790:	849a      	strh	r2, [r3, #36]	; 0x24
	seria[5].interval = 988;
 8002792:	4b9e      	ldr	r3, [pc, #632]	; (8002a0c <inputseria+0x2bc>)
 8002794:	4aa0      	ldr	r2, [pc, #640]	; (8002a18 <inputseria+0x2c8>)
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
	seria[5].waittime = 462;
 8002798:	4b9c      	ldr	r3, [pc, #624]	; (8002a0c <inputseria+0x2bc>)
 800279a:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800279e:	859a      	strh	r2, [r3, #44]	; 0x2c
	seria[6].interval = 698;
 80027a0:	4b9a      	ldr	r3, [pc, #616]	; (8002a0c <inputseria+0x2bc>)
 80027a2:	4a9b      	ldr	r2, [pc, #620]	; (8002a10 <inputseria+0x2c0>)
 80027a4:	631a      	str	r2, [r3, #48]	; 0x30
	seria[6].waittime = 224;
 80027a6:	4b99      	ldr	r3, [pc, #612]	; (8002a0c <inputseria+0x2bc>)
 80027a8:	22e0      	movs	r2, #224	; 0xe0
 80027aa:	869a      	strh	r2, [r3, #52]	; 0x34
	seria[7].interval = 880;
 80027ac:	4b97      	ldr	r3, [pc, #604]	; (8002a0c <inputseria+0x2bc>)
 80027ae:	4a99      	ldr	r2, [pc, #612]	; (8002a14 <inputseria+0x2c4>)
 80027b0:	639a      	str	r2, [r3, #56]	; 0x38
	seria[7].waittime = 224;
 80027b2:	4b96      	ldr	r3, [pc, #600]	; (8002a0c <inputseria+0x2bc>)
 80027b4:	22e0      	movs	r2, #224	; 0xe0
 80027b6:	879a      	strh	r2, [r3, #60]	; 0x3c
	seria[8].interval = 988;
 80027b8:	4b94      	ldr	r3, [pc, #592]	; (8002a0c <inputseria+0x2bc>)
 80027ba:	4a97      	ldr	r2, [pc, #604]	; (8002a18 <inputseria+0x2c8>)
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40
	seria[8].waittime = 224;
 80027be:	4b93      	ldr	r3, [pc, #588]	; (8002a0c <inputseria+0x2bc>)
 80027c0:	22e0      	movs	r2, #224	; 0xe0
 80027c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	seria[9].interval = 1319;
 80027c6:	4b91      	ldr	r3, [pc, #580]	; (8002a0c <inputseria+0x2bc>)
 80027c8:	4a94      	ldr	r2, [pc, #592]	; (8002a1c <inputseria+0x2cc>)
 80027ca:	649a      	str	r2, [r3, #72]	; 0x48
	seria[9].waittime = 224;
 80027cc:	4b8f      	ldr	r3, [pc, #572]	; (8002a0c <inputseria+0x2bc>)
 80027ce:	22e0      	movs	r2, #224	; 0xe0
 80027d0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	seria[10].interval = 1175;
 80027d4:	4b8d      	ldr	r3, [pc, #564]	; (8002a0c <inputseria+0x2bc>)
 80027d6:	4a92      	ldr	r2, [pc, #584]	; (8002a20 <inputseria+0x2d0>)
 80027d8:	651a      	str	r2, [r3, #80]	; 0x50
	seria[10].waittime = 462;
 80027da:	4b8c      	ldr	r3, [pc, #560]	; (8002a0c <inputseria+0x2bc>)
 80027dc:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80027e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	seria[11].interval = 988;
 80027e4:	4b89      	ldr	r3, [pc, #548]	; (8002a0c <inputseria+0x2bc>)
 80027e6:	4a8c      	ldr	r2, [pc, #560]	; (8002a18 <inputseria+0x2c8>)
 80027e8:	659a      	str	r2, [r3, #88]	; 0x58
	seria[11].waittime = 224;
 80027ea:	4b88      	ldr	r3, [pc, #544]	; (8002a0c <inputseria+0x2bc>)
 80027ec:	22e0      	movs	r2, #224	; 0xe0
 80027ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	seria[12].interval = 1047;
 80027f2:	4b86      	ldr	r3, [pc, #536]	; (8002a0c <inputseria+0x2bc>)
 80027f4:	4a8b      	ldr	r2, [pc, #556]	; (8002a24 <inputseria+0x2d4>)
 80027f6:	661a      	str	r2, [r3, #96]	; 0x60
	seria[12].waittime = 224;
 80027f8:	4b84      	ldr	r3, [pc, #528]	; (8002a0c <inputseria+0x2bc>)
 80027fa:	22e0      	movs	r2, #224	; 0xe0
 80027fc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	seria[13].interval = 988;
 8002800:	4b82      	ldr	r3, [pc, #520]	; (8002a0c <inputseria+0x2bc>)
 8002802:	4a85      	ldr	r2, [pc, #532]	; (8002a18 <inputseria+0x2c8>)
 8002804:	669a      	str	r2, [r3, #104]	; 0x68
	seria[13].waittime = 224;
 8002806:	4b81      	ldr	r3, [pc, #516]	; (8002a0c <inputseria+0x2bc>)
 8002808:	22e0      	movs	r2, #224	; 0xe0
 800280a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	seria[14].interval = 784;
 800280e:	4b7f      	ldr	r3, [pc, #508]	; (8002a0c <inputseria+0x2bc>)
 8002810:	4a85      	ldr	r2, [pc, #532]	; (8002a28 <inputseria+0x2d8>)
 8002812:	671a      	str	r2, [r3, #112]	; 0x70
	seria[14].waittime = 224;
 8002814:	4b7d      	ldr	r3, [pc, #500]	; (8002a0c <inputseria+0x2bc>)
 8002816:	22e0      	movs	r2, #224	; 0xe0
 8002818:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	seria[15].interval = 659;
 800281c:	4b7b      	ldr	r3, [pc, #492]	; (8002a0c <inputseria+0x2bc>)
 800281e:	4a83      	ldr	r2, [pc, #524]	; (8002a2c <inputseria+0x2dc>)
 8002820:	679a      	str	r2, [r3, #120]	; 0x78
	seria[15].waittime = 1169;
 8002822:	4b7a      	ldr	r3, [pc, #488]	; (8002a0c <inputseria+0x2bc>)
 8002824:	f240 4291 	movw	r2, #1169	; 0x491
 8002828:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	seria[16].interval = 587;
 800282c:	4b77      	ldr	r3, [pc, #476]	; (8002a0c <inputseria+0x2bc>)
 800282e:	4a80      	ldr	r2, [pc, #512]	; (8002a30 <inputseria+0x2e0>)
 8002830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	seria[16].waittime = 224;
 8002834:	4b75      	ldr	r3, [pc, #468]	; (8002a0c <inputseria+0x2bc>)
 8002836:	22e0      	movs	r2, #224	; 0xe0
 8002838:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	seria[17].interval = 659;
 800283c:	4b73      	ldr	r3, [pc, #460]	; (8002a0c <inputseria+0x2bc>)
 800283e:	4a7b      	ldr	r2, [pc, #492]	; (8002a2c <inputseria+0x2dc>)
 8002840:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	seria[17].waittime = 224;
 8002844:	4b71      	ldr	r3, [pc, #452]	; (8002a0c <inputseria+0x2bc>)
 8002846:	22e0      	movs	r2, #224	; 0xe0
 8002848:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	seria[18].interval = 784;
 800284c:	4b6f      	ldr	r3, [pc, #444]	; (8002a0c <inputseria+0x2bc>)
 800284e:	4a76      	ldr	r2, [pc, #472]	; (8002a28 <inputseria+0x2d8>)
 8002850:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	seria[18].waittime = 224;
 8002854:	4b6d      	ldr	r3, [pc, #436]	; (8002a0c <inputseria+0x2bc>)
 8002856:	22e0      	movs	r2, #224	; 0xe0
 8002858:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	seria[19].interval = 659;
 800285c:	4b6b      	ldr	r3, [pc, #428]	; (8002a0c <inputseria+0x2bc>)
 800285e:	4a73      	ldr	r2, [pc, #460]	; (8002a2c <inputseria+0x2dc>)
 8002860:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	seria[19].waittime = 1400;
 8002864:	4b69      	ldr	r3, [pc, #420]	; (8002a0c <inputseria+0x2bc>)
 8002866:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800286a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	seria[20].interval = 698;
 800286e:	4b67      	ldr	r3, [pc, #412]	; (8002a0c <inputseria+0x2bc>)
 8002870:	4a67      	ldr	r2, [pc, #412]	; (8002a10 <inputseria+0x2c0>)
 8002872:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	seria[20].waittime = 224;
 8002876:	4b65      	ldr	r3, [pc, #404]	; (8002a0c <inputseria+0x2bc>)
 8002878:	22e0      	movs	r2, #224	; 0xe0
 800287a:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	seria[21].interval = 880;
 800287e:	4b63      	ldr	r3, [pc, #396]	; (8002a0c <inputseria+0x2bc>)
 8002880:	4a64      	ldr	r2, [pc, #400]	; (8002a14 <inputseria+0x2c4>)
 8002882:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	seria[21].waittime = 224;
 8002886:	4b61      	ldr	r3, [pc, #388]	; (8002a0c <inputseria+0x2bc>)
 8002888:	22e0      	movs	r2, #224	; 0xe0
 800288a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	seria[22].interval = 988;
 800288e:	4b5f      	ldr	r3, [pc, #380]	; (8002a0c <inputseria+0x2bc>)
 8002890:	4a61      	ldr	r2, [pc, #388]	; (8002a18 <inputseria+0x2c8>)
 8002892:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	seria[22].waittime = 462;
 8002896:	4b5d      	ldr	r3, [pc, #372]	; (8002a0c <inputseria+0x2bc>)
 8002898:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800289c:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	seria[23].interval = 698;
 80028a0:	4b5a      	ldr	r3, [pc, #360]	; (8002a0c <inputseria+0x2bc>)
 80028a2:	4a5b      	ldr	r2, [pc, #364]	; (8002a10 <inputseria+0x2c0>)
 80028a4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	seria[23].waittime = 224;
 80028a8:	4b58      	ldr	r3, [pc, #352]	; (8002a0c <inputseria+0x2bc>)
 80028aa:	22e0      	movs	r2, #224	; 0xe0
 80028ac:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
	seria[24].interval = 880;
 80028b0:	4b56      	ldr	r3, [pc, #344]	; (8002a0c <inputseria+0x2bc>)
 80028b2:	4a58      	ldr	r2, [pc, #352]	; (8002a14 <inputseria+0x2c4>)
 80028b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	seria[24].waittime = 224;
 80028b8:	4b54      	ldr	r3, [pc, #336]	; (8002a0c <inputseria+0x2bc>)
 80028ba:	22e0      	movs	r2, #224	; 0xe0
 80028bc:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	seria[25].interval = 988;
 80028c0:	4b52      	ldr	r3, [pc, #328]	; (8002a0c <inputseria+0x2bc>)
 80028c2:	4a55      	ldr	r2, [pc, #340]	; (8002a18 <inputseria+0x2c8>)
 80028c4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	seria[25].waittime = 462;
 80028c8:	4b50      	ldr	r3, [pc, #320]	; (8002a0c <inputseria+0x2bc>)
 80028ca:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80028ce:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
	seria[26].interval = 698;
 80028d2:	4b4e      	ldr	r3, [pc, #312]	; (8002a0c <inputseria+0x2bc>)
 80028d4:	4a4e      	ldr	r2, [pc, #312]	; (8002a10 <inputseria+0x2c0>)
 80028d6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	seria[26].waittime = 224;
 80028da:	4b4c      	ldr	r3, [pc, #304]	; (8002a0c <inputseria+0x2bc>)
 80028dc:	22e0      	movs	r2, #224	; 0xe0
 80028de:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
	seria[27].interval = 880;
 80028e2:	4b4a      	ldr	r3, [pc, #296]	; (8002a0c <inputseria+0x2bc>)
 80028e4:	4a4b      	ldr	r2, [pc, #300]	; (8002a14 <inputseria+0x2c4>)
 80028e6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	seria[27].waittime = 224;
 80028ea:	4b48      	ldr	r3, [pc, #288]	; (8002a0c <inputseria+0x2bc>)
 80028ec:	22e0      	movs	r2, #224	; 0xe0
 80028ee:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	seria[28].interval = 988;
 80028f2:	4b46      	ldr	r3, [pc, #280]	; (8002a0c <inputseria+0x2bc>)
 80028f4:	4a48      	ldr	r2, [pc, #288]	; (8002a18 <inputseria+0x2c8>)
 80028f6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	seria[28].waittime = 224;
 80028fa:	4b44      	ldr	r3, [pc, #272]	; (8002a0c <inputseria+0x2bc>)
 80028fc:	22e0      	movs	r2, #224	; 0xe0
 80028fe:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	seria[29].interval = 1319;
 8002902:	4b42      	ldr	r3, [pc, #264]	; (8002a0c <inputseria+0x2bc>)
 8002904:	4a45      	ldr	r2, [pc, #276]	; (8002a1c <inputseria+0x2cc>)
 8002906:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	seria[29].waittime = 224;
 800290a:	4b40      	ldr	r3, [pc, #256]	; (8002a0c <inputseria+0x2bc>)
 800290c:	22e0      	movs	r2, #224	; 0xe0
 800290e:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
	seria[30].interval = 1175;
 8002912:	4b3e      	ldr	r3, [pc, #248]	; (8002a0c <inputseria+0x2bc>)
 8002914:	4a42      	ldr	r2, [pc, #264]	; (8002a20 <inputseria+0x2d0>)
 8002916:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	seria[30].waittime = 462;
 800291a:	4b3c      	ldr	r3, [pc, #240]	; (8002a0c <inputseria+0x2bc>)
 800291c:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002920:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
	seria[31].interval = 988;
 8002924:	4b39      	ldr	r3, [pc, #228]	; (8002a0c <inputseria+0x2bc>)
 8002926:	4a3c      	ldr	r2, [pc, #240]	; (8002a18 <inputseria+0x2c8>)
 8002928:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	seria[31].waittime = 224;
 800292c:	4b37      	ldr	r3, [pc, #220]	; (8002a0c <inputseria+0x2bc>)
 800292e:	22e0      	movs	r2, #224	; 0xe0
 8002930:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
	seria[32].interval = 1047;
 8002934:	4b35      	ldr	r3, [pc, #212]	; (8002a0c <inputseria+0x2bc>)
 8002936:	4a3b      	ldr	r2, [pc, #236]	; (8002a24 <inputseria+0x2d4>)
 8002938:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	seria[32].waittime = 224;
 800293c:	4b33      	ldr	r3, [pc, #204]	; (8002a0c <inputseria+0x2bc>)
 800293e:	22e0      	movs	r2, #224	; 0xe0
 8002940:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	seria[33].interval = 1319;
 8002944:	4b31      	ldr	r3, [pc, #196]	; (8002a0c <inputseria+0x2bc>)
 8002946:	4a35      	ldr	r2, [pc, #212]	; (8002a1c <inputseria+0x2cc>)
 8002948:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	seria[33].waittime = 224;
 800294c:	4b2f      	ldr	r3, [pc, #188]	; (8002a0c <inputseria+0x2bc>)
 800294e:	22e0      	movs	r2, #224	; 0xe0
 8002950:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	seria[34].interval = 988;
 8002954:	4b2d      	ldr	r3, [pc, #180]	; (8002a0c <inputseria+0x2bc>)
 8002956:	4a30      	ldr	r2, [pc, #192]	; (8002a18 <inputseria+0x2c8>)
 8002958:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	seria[34].waittime = 224;
 800295c:	4b2b      	ldr	r3, [pc, #172]	; (8002a0c <inputseria+0x2bc>)
 800295e:	22e0      	movs	r2, #224	; 0xe0
 8002960:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
	seria[35].interval = 784;
 8002964:	4b29      	ldr	r3, [pc, #164]	; (8002a0c <inputseria+0x2bc>)
 8002966:	4a30      	ldr	r2, [pc, #192]	; (8002a28 <inputseria+0x2d8>)
 8002968:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	seria[35].waittime = 1169;
 800296c:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <inputseria+0x2bc>)
 800296e:	f240 4291 	movw	r2, #1169	; 0x491
 8002972:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
	seria[36].interval = 988;
 8002976:	4b25      	ldr	r3, [pc, #148]	; (8002a0c <inputseria+0x2bc>)
 8002978:	4a27      	ldr	r2, [pc, #156]	; (8002a18 <inputseria+0x2c8>)
 800297a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	seria[36].waittime = 224;
 800297e:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <inputseria+0x2bc>)
 8002980:	22e0      	movs	r2, #224	; 0xe0
 8002982:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
	seria[37].interval = 784;
 8002986:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <inputseria+0x2bc>)
 8002988:	4a27      	ldr	r2, [pc, #156]	; (8002a28 <inputseria+0x2d8>)
 800298a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	seria[37].waittime = 224;
 800298e:	4b1f      	ldr	r3, [pc, #124]	; (8002a0c <inputseria+0x2bc>)
 8002990:	22e0      	movs	r2, #224	; 0xe0
 8002992:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
	seria[38].interval = 587;
 8002996:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <inputseria+0x2bc>)
 8002998:	4a25      	ldr	r2, [pc, #148]	; (8002a30 <inputseria+0x2e0>)
 800299a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	seria[38].waittime = 224;
 800299e:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <inputseria+0x2bc>)
 80029a0:	22e0      	movs	r2, #224	; 0xe0
 80029a2:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	seria[39].interval = 659;
 80029a6:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <inputseria+0x2bc>)
 80029a8:	4a20      	ldr	r2, [pc, #128]	; (8002a2c <inputseria+0x2dc>)
 80029aa:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	seria[39].waittime = 1400;
 80029ae:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <inputseria+0x2bc>)
 80029b0:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80029b4:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
	seria[40].interval = 294;
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <inputseria+0x2bc>)
 80029ba:	4a1e      	ldr	r2, [pc, #120]	; (8002a34 <inputseria+0x2e4>)
 80029bc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	seria[40].waittime = 224;
 80029c0:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <inputseria+0x2bc>)
 80029c2:	22e0      	movs	r2, #224	; 0xe0
 80029c4:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
	seria[41].interval = 330;
 80029c8:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <inputseria+0x2bc>)
 80029ca:	4a1b      	ldr	r2, [pc, #108]	; (8002a38 <inputseria+0x2e8>)
 80029cc:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	seria[41].waittime = 224;
 80029d0:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <inputseria+0x2bc>)
 80029d2:	22e0      	movs	r2, #224	; 0xe0
 80029d4:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
	seria[42].interval = 349;
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <inputseria+0x2bc>)
 80029da:	4a18      	ldr	r2, [pc, #96]	; (8002a3c <inputseria+0x2ec>)
 80029dc:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	seria[42].waittime = 462;
 80029e0:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <inputseria+0x2bc>)
 80029e2:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80029e6:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	seria[43].interval = 392;
 80029ea:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <inputseria+0x2bc>)
 80029ec:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <inputseria+0x2f0>)
 80029ee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	seria[43].waittime = 224;
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <inputseria+0x2bc>)
 80029f4:	22e0      	movs	r2, #224	; 0xe0
 80029f6:	f8a3 215c 	strh.w	r2, [r3, #348]	; 0x15c
	seria[44].interval = 440;
 80029fa:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <inputseria+0x2bc>)
 80029fc:	4a11      	ldr	r2, [pc, #68]	; (8002a44 <inputseria+0x2f4>)
 80029fe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	seria[44].waittime = 224;
 8002a02:	4b02      	ldr	r3, [pc, #8]	; (8002a0c <inputseria+0x2bc>)
 8002a04:	22e0      	movs	r2, #224	; 0xe0
 8002a06:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8002a0a:	e01d      	b.n	8002a48 <inputseria+0x2f8>
 8002a0c:	200003f0 	.word	0x200003f0
 8002a10:	442e8000 	.word	0x442e8000
 8002a14:	445c0000 	.word	0x445c0000
 8002a18:	44770000 	.word	0x44770000
 8002a1c:	44a4e000 	.word	0x44a4e000
 8002a20:	4492e000 	.word	0x4492e000
 8002a24:	4482e000 	.word	0x4482e000
 8002a28:	44440000 	.word	0x44440000
 8002a2c:	4424c000 	.word	0x4424c000
 8002a30:	4412c000 	.word	0x4412c000
 8002a34:	43930000 	.word	0x43930000
 8002a38:	43a50000 	.word	0x43a50000
 8002a3c:	43ae8000 	.word	0x43ae8000
 8002a40:	43c40000 	.word	0x43c40000
 8002a44:	43dc0000 	.word	0x43dc0000
	seria[45].interval = 494;
 8002a48:	4bb9      	ldr	r3, [pc, #740]	; (8002d30 <inputseria+0x5e0>)
 8002a4a:	4aba      	ldr	r2, [pc, #744]	; (8002d34 <inputseria+0x5e4>)
 8002a4c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	seria[45].waittime = 462;
 8002a50:	4bb7      	ldr	r3, [pc, #732]	; (8002d30 <inputseria+0x5e0>)
 8002a52:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002a56:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
	seria[46].interval = 523;
 8002a5a:	4bb5      	ldr	r3, [pc, #724]	; (8002d30 <inputseria+0x5e0>)
 8002a5c:	4ab6      	ldr	r2, [pc, #728]	; (8002d38 <inputseria+0x5e8>)
 8002a5e:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	seria[46].waittime = 224;
 8002a62:	4bb3      	ldr	r3, [pc, #716]	; (8002d30 <inputseria+0x5e0>)
 8002a64:	22e0      	movs	r2, #224	; 0xe0
 8002a66:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	seria[47].interval = 494;
 8002a6a:	4bb1      	ldr	r3, [pc, #708]	; (8002d30 <inputseria+0x5e0>)
 8002a6c:	4ab1      	ldr	r2, [pc, #708]	; (8002d34 <inputseria+0x5e4>)
 8002a6e:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	seria[47].waittime = 224;
 8002a72:	4baf      	ldr	r3, [pc, #700]	; (8002d30 <inputseria+0x5e0>)
 8002a74:	22e0      	movs	r2, #224	; 0xe0
 8002a76:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	seria[48].interval = 330;
 8002a7a:	4bad      	ldr	r3, [pc, #692]	; (8002d30 <inputseria+0x5e0>)
 8002a7c:	4aaf      	ldr	r2, [pc, #700]	; (8002d3c <inputseria+0x5ec>)
 8002a7e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	seria[48].waittime = 1400;
 8002a82:	4bab      	ldr	r3, [pc, #684]	; (8002d30 <inputseria+0x5e0>)
 8002a84:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8002a88:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184
	seria[49].interval = 698;
 8002a8c:	4ba8      	ldr	r3, [pc, #672]	; (8002d30 <inputseria+0x5e0>)
 8002a8e:	4aac      	ldr	r2, [pc, #688]	; (8002d40 <inputseria+0x5f0>)
 8002a90:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	seria[49].waittime = 224;
 8002a94:	4ba6      	ldr	r3, [pc, #664]	; (8002d30 <inputseria+0x5e0>)
 8002a96:	22e0      	movs	r2, #224	; 0xe0
 8002a98:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
	seria[50].interval = 784;
 8002a9c:	4ba4      	ldr	r3, [pc, #656]	; (8002d30 <inputseria+0x5e0>)
 8002a9e:	4aa9      	ldr	r2, [pc, #676]	; (8002d44 <inputseria+0x5f4>)
 8002aa0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	seria[50].waittime = 224;
 8002aa4:	4ba2      	ldr	r3, [pc, #648]	; (8002d30 <inputseria+0x5e0>)
 8002aa6:	22e0      	movs	r2, #224	; 0xe0
 8002aa8:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
	seria[51].interval = 880;
 8002aac:	4ba0      	ldr	r3, [pc, #640]	; (8002d30 <inputseria+0x5e0>)
 8002aae:	4aa6      	ldr	r2, [pc, #664]	; (8002d48 <inputseria+0x5f8>)
 8002ab0:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	seria[51].waittime = 462;
 8002ab4:	4b9e      	ldr	r3, [pc, #632]	; (8002d30 <inputseria+0x5e0>)
 8002ab6:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002aba:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
	seria[52].interval = 988;
 8002abe:	4b9c      	ldr	r3, [pc, #624]	; (8002d30 <inputseria+0x5e0>)
 8002ac0:	4aa2      	ldr	r2, [pc, #648]	; (8002d4c <inputseria+0x5fc>)
 8002ac2:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	seria[52].waittime = 224;
 8002ac6:	4b9a      	ldr	r3, [pc, #616]	; (8002d30 <inputseria+0x5e0>)
 8002ac8:	22e0      	movs	r2, #224	; 0xe0
 8002aca:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
	seria[53].interval = 1047;
 8002ace:	4b98      	ldr	r3, [pc, #608]	; (8002d30 <inputseria+0x5e0>)
 8002ad0:	4a9f      	ldr	r2, [pc, #636]	; (8002d50 <inputseria+0x600>)
 8002ad2:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	seria[53].waittime = 224;
 8002ad6:	4b96      	ldr	r3, [pc, #600]	; (8002d30 <inputseria+0x5e0>)
 8002ad8:	22e0      	movs	r2, #224	; 0xe0
 8002ada:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
	seria[54].interval = 1175;
 8002ade:	4b94      	ldr	r3, [pc, #592]	; (8002d30 <inputseria+0x5e0>)
 8002ae0:	4a9c      	ldr	r2, [pc, #624]	; (8002d54 <inputseria+0x604>)
 8002ae2:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	seria[54].waittime = 462;
 8002ae6:	4b92      	ldr	r3, [pc, #584]	; (8002d30 <inputseria+0x5e0>)
 8002ae8:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002aec:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
	seria[55].interval = 1319;
 8002af0:	4b8f      	ldr	r3, [pc, #572]	; (8002d30 <inputseria+0x5e0>)
 8002af2:	4a99      	ldr	r2, [pc, #612]	; (8002d58 <inputseria+0x608>)
 8002af4:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	seria[55].waittime = 224;
 8002af8:	4b8d      	ldr	r3, [pc, #564]	; (8002d30 <inputseria+0x5e0>)
 8002afa:	22e0      	movs	r2, #224	; 0xe0
 8002afc:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
	seria[56].interval = 1397;
 8002b00:	4b8b      	ldr	r3, [pc, #556]	; (8002d30 <inputseria+0x5e0>)
 8002b02:	4a96      	ldr	r2, [pc, #600]	; (8002d5c <inputseria+0x60c>)
 8002b04:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
	seria[56].waittime = 224;
 8002b08:	4b89      	ldr	r3, [pc, #548]	; (8002d30 <inputseria+0x5e0>)
 8002b0a:	22e0      	movs	r2, #224	; 0xe0
 8002b0c:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
	seria[57].interval = 1568;
 8002b10:	4b87      	ldr	r3, [pc, #540]	; (8002d30 <inputseria+0x5e0>)
 8002b12:	4a93      	ldr	r2, [pc, #588]	; (8002d60 <inputseria+0x610>)
 8002b14:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
	seria[57].waittime = 1400;
 8002b18:	4b85      	ldr	r3, [pc, #532]	; (8002d30 <inputseria+0x5e0>)
 8002b1a:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8002b1e:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
	seria[58].interval = 294;
 8002b22:	4b83      	ldr	r3, [pc, #524]	; (8002d30 <inputseria+0x5e0>)
 8002b24:	4a8f      	ldr	r2, [pc, #572]	; (8002d64 <inputseria+0x614>)
 8002b26:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	seria[58].waittime = 224;
 8002b2a:	4b81      	ldr	r3, [pc, #516]	; (8002d30 <inputseria+0x5e0>)
 8002b2c:	22e0      	movs	r2, #224	; 0xe0
 8002b2e:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
	seria[59].interval = 330;
 8002b32:	4b7f      	ldr	r3, [pc, #508]	; (8002d30 <inputseria+0x5e0>)
 8002b34:	4a81      	ldr	r2, [pc, #516]	; (8002d3c <inputseria+0x5ec>)
 8002b36:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	seria[59].waittime = 224;
 8002b3a:	4b7d      	ldr	r3, [pc, #500]	; (8002d30 <inputseria+0x5e0>)
 8002b3c:	22e0      	movs	r2, #224	; 0xe0
 8002b3e:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
	seria[60].interval = 349;
 8002b42:	4b7b      	ldr	r3, [pc, #492]	; (8002d30 <inputseria+0x5e0>)
 8002b44:	4a88      	ldr	r2, [pc, #544]	; (8002d68 <inputseria+0x618>)
 8002b46:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	seria[60].waittime = 462;
 8002b4a:	4b79      	ldr	r3, [pc, #484]	; (8002d30 <inputseria+0x5e0>)
 8002b4c:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002b50:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
	seria[61].interval = 392;
 8002b54:	4b76      	ldr	r3, [pc, #472]	; (8002d30 <inputseria+0x5e0>)
 8002b56:	4a85      	ldr	r2, [pc, #532]	; (8002d6c <inputseria+0x61c>)
 8002b58:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	seria[61].waittime = 224;
 8002b5c:	4b74      	ldr	r3, [pc, #464]	; (8002d30 <inputseria+0x5e0>)
 8002b5e:	22e0      	movs	r2, #224	; 0xe0
 8002b60:	f8a3 21ec 	strh.w	r2, [r3, #492]	; 0x1ec
	seria[62].interval = 440;
 8002b64:	4b72      	ldr	r3, [pc, #456]	; (8002d30 <inputseria+0x5e0>)
 8002b66:	4a82      	ldr	r2, [pc, #520]	; (8002d70 <inputseria+0x620>)
 8002b68:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	seria[62].waittime = 224;
 8002b6c:	4b70      	ldr	r3, [pc, #448]	; (8002d30 <inputseria+0x5e0>)
 8002b6e:	22e0      	movs	r2, #224	; 0xe0
 8002b70:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
	seria[63].interval = 494;
 8002b74:	4b6e      	ldr	r3, [pc, #440]	; (8002d30 <inputseria+0x5e0>)
 8002b76:	4a6f      	ldr	r2, [pc, #444]	; (8002d34 <inputseria+0x5e4>)
 8002b78:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	seria[63].waittime = 462;
 8002b7c:	4b6c      	ldr	r3, [pc, #432]	; (8002d30 <inputseria+0x5e0>)
 8002b7e:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002b82:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	seria[64].interval = 523;
 8002b86:	4b6a      	ldr	r3, [pc, #424]	; (8002d30 <inputseria+0x5e0>)
 8002b88:	4a6b      	ldr	r2, [pc, #428]	; (8002d38 <inputseria+0x5e8>)
 8002b8a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	seria[64].waittime = 224;
 8002b8e:	4b68      	ldr	r3, [pc, #416]	; (8002d30 <inputseria+0x5e0>)
 8002b90:	22e0      	movs	r2, #224	; 0xe0
 8002b92:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	seria[65].interval = 494;
 8002b96:	4b66      	ldr	r3, [pc, #408]	; (8002d30 <inputseria+0x5e0>)
 8002b98:	4a66      	ldr	r2, [pc, #408]	; (8002d34 <inputseria+0x5e4>)
 8002b9a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	seria[65].waittime = 224;
 8002b9e:	4b64      	ldr	r3, [pc, #400]	; (8002d30 <inputseria+0x5e0>)
 8002ba0:	22e0      	movs	r2, #224	; 0xe0
 8002ba2:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
	seria[66].interval = 330;
 8002ba6:	4b62      	ldr	r3, [pc, #392]	; (8002d30 <inputseria+0x5e0>)
 8002ba8:	4a64      	ldr	r2, [pc, #400]	; (8002d3c <inputseria+0x5ec>)
 8002baa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	seria[66].waittime = 1400;
 8002bae:	4b60      	ldr	r3, [pc, #384]	; (8002d30 <inputseria+0x5e0>)
 8002bb0:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8002bb4:	f8a3 2214 	strh.w	r2, [r3, #532]	; 0x214
	seria[67].interval = 698;
 8002bb8:	4b5d      	ldr	r3, [pc, #372]	; (8002d30 <inputseria+0x5e0>)
 8002bba:	4a61      	ldr	r2, [pc, #388]	; (8002d40 <inputseria+0x5f0>)
 8002bbc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	seria[67].waittime = 224;
 8002bc0:	4b5b      	ldr	r3, [pc, #364]	; (8002d30 <inputseria+0x5e0>)
 8002bc2:	22e0      	movs	r2, #224	; 0xe0
 8002bc4:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
	seria[68].interval = 659;
 8002bc8:	4b59      	ldr	r3, [pc, #356]	; (8002d30 <inputseria+0x5e0>)
 8002bca:	4a6a      	ldr	r2, [pc, #424]	; (8002d74 <inputseria+0x624>)
 8002bcc:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	seria[68].waittime = 105;
 8002bd0:	4b57      	ldr	r3, [pc, #348]	; (8002d30 <inputseria+0x5e0>)
 8002bd2:	2269      	movs	r2, #105	; 0x69
 8002bd4:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
	seria[69].interval = 880;
 8002bd8:	4b55      	ldr	r3, [pc, #340]	; (8002d30 <inputseria+0x5e0>)
 8002bda:	4a5b      	ldr	r2, [pc, #364]	; (8002d48 <inputseria+0x5f8>)
 8002bdc:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	seria[69].waittime = 224;
 8002be0:	4b53      	ldr	r3, [pc, #332]	; (8002d30 <inputseria+0x5e0>)
 8002be2:	22e0      	movs	r2, #224	; 0xe0
 8002be4:	f8a3 222c 	strh.w	r2, [r3, #556]	; 0x22c
	seria[70].interval = 784;
 8002be8:	4b51      	ldr	r3, [pc, #324]	; (8002d30 <inputseria+0x5e0>)
 8002bea:	4a56      	ldr	r2, [pc, #344]	; (8002d44 <inputseria+0x5f4>)
 8002bec:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	seria[70].waittime = 105;
 8002bf0:	4b4f      	ldr	r3, [pc, #316]	; (8002d30 <inputseria+0x5e0>)
 8002bf2:	2269      	movs	r2, #105	; 0x69
 8002bf4:	f8a3 2234 	strh.w	r2, [r3, #564]	; 0x234
	seria[71].interval = 988;
 8002bf8:	4b4d      	ldr	r3, [pc, #308]	; (8002d30 <inputseria+0x5e0>)
 8002bfa:	4a54      	ldr	r2, [pc, #336]	; (8002d4c <inputseria+0x5fc>)
 8002bfc:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	seria[71].waittime = 224;
 8002c00:	4b4b      	ldr	r3, [pc, #300]	; (8002d30 <inputseria+0x5e0>)
 8002c02:	22e0      	movs	r2, #224	; 0xe0
 8002c04:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
	seria[72].interval = 880;
 8002c08:	4b49      	ldr	r3, [pc, #292]	; (8002d30 <inputseria+0x5e0>)
 8002c0a:	4a4f      	ldr	r2, [pc, #316]	; (8002d48 <inputseria+0x5f8>)
 8002c0c:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	seria[72].waittime = 105;
 8002c10:	4b47      	ldr	r3, [pc, #284]	; (8002d30 <inputseria+0x5e0>)
 8002c12:	2269      	movs	r2, #105	; 0x69
 8002c14:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
	seria[73].interval = 1047;
 8002c18:	4b45      	ldr	r3, [pc, #276]	; (8002d30 <inputseria+0x5e0>)
 8002c1a:	4a4d      	ldr	r2, [pc, #308]	; (8002d50 <inputseria+0x600>)
 8002c1c:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	seria[73].waittime = 224;
 8002c20:	4b43      	ldr	r3, [pc, #268]	; (8002d30 <inputseria+0x5e0>)
 8002c22:	22e0      	movs	r2, #224	; 0xe0
 8002c24:	f8a3 224c 	strh.w	r2, [r3, #588]	; 0x24c
	seria[74].interval = 988;
 8002c28:	4b41      	ldr	r3, [pc, #260]	; (8002d30 <inputseria+0x5e0>)
 8002c2a:	4a48      	ldr	r2, [pc, #288]	; (8002d4c <inputseria+0x5fc>)
 8002c2c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	seria[74].waittime = 105;
 8002c30:	4b3f      	ldr	r3, [pc, #252]	; (8002d30 <inputseria+0x5e0>)
 8002c32:	2269      	movs	r2, #105	; 0x69
 8002c34:	f8a3 2254 	strh.w	r2, [r3, #596]	; 0x254
	seria[75].interval = 1175;
 8002c38:	4b3d      	ldr	r3, [pc, #244]	; (8002d30 <inputseria+0x5e0>)
 8002c3a:	4a46      	ldr	r2, [pc, #280]	; (8002d54 <inputseria+0x604>)
 8002c3c:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	seria[75].waittime = 224;
 8002c40:	4b3b      	ldr	r3, [pc, #236]	; (8002d30 <inputseria+0x5e0>)
 8002c42:	22e0      	movs	r2, #224	; 0xe0
 8002c44:	f8a3 225c 	strh.w	r2, [r3, #604]	; 0x25c
	seria[76].interval = 1047;
 8002c48:	4b39      	ldr	r3, [pc, #228]	; (8002d30 <inputseria+0x5e0>)
 8002c4a:	4a41      	ldr	r2, [pc, #260]	; (8002d50 <inputseria+0x600>)
 8002c4c:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	seria[76].waittime = 105;
 8002c50:	4b37      	ldr	r3, [pc, #220]	; (8002d30 <inputseria+0x5e0>)
 8002c52:	2269      	movs	r2, #105	; 0x69
 8002c54:	f8a3 2264 	strh.w	r2, [r3, #612]	; 0x264
	seria[77].interval = 1319;
 8002c58:	4b35      	ldr	r3, [pc, #212]	; (8002d30 <inputseria+0x5e0>)
 8002c5a:	4a3f      	ldr	r2, [pc, #252]	; (8002d58 <inputseria+0x608>)
 8002c5c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	seria[77].waittime = 224;
 8002c60:	4b33      	ldr	r3, [pc, #204]	; (8002d30 <inputseria+0x5e0>)
 8002c62:	22e0      	movs	r2, #224	; 0xe0
 8002c64:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
	seria[78].interval = 1175;
 8002c68:	4b31      	ldr	r3, [pc, #196]	; (8002d30 <inputseria+0x5e0>)
 8002c6a:	4a3a      	ldr	r2, [pc, #232]	; (8002d54 <inputseria+0x604>)
 8002c6c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	seria[78].waittime = 105;
 8002c70:	4b2f      	ldr	r3, [pc, #188]	; (8002d30 <inputseria+0x5e0>)
 8002c72:	2269      	movs	r2, #105	; 0x69
 8002c74:	f8a3 2274 	strh.w	r2, [r3, #628]	; 0x274
	seria[79].interval = 1397;
 8002c78:	4b2d      	ldr	r3, [pc, #180]	; (8002d30 <inputseria+0x5e0>)
 8002c7a:	4a38      	ldr	r2, [pc, #224]	; (8002d5c <inputseria+0x60c>)
 8002c7c:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	seria[79].waittime = 224;
 8002c80:	4b2b      	ldr	r3, [pc, #172]	; (8002d30 <inputseria+0x5e0>)
 8002c82:	22e0      	movs	r2, #224	; 0xe0
 8002c84:	f8a3 227c 	strh.w	r2, [r3, #636]	; 0x27c
	seria[80].interval = 1319;
 8002c88:	4b29      	ldr	r3, [pc, #164]	; (8002d30 <inputseria+0x5e0>)
 8002c8a:	4a33      	ldr	r2, [pc, #204]	; (8002d58 <inputseria+0x608>)
 8002c8c:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	seria[80].waittime = 105;
 8002c90:	4b27      	ldr	r3, [pc, #156]	; (8002d30 <inputseria+0x5e0>)
 8002c92:	2269      	movs	r2, #105	; 0x69
 8002c94:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	seria[81].interval = 988;
 8002c98:	4b25      	ldr	r3, [pc, #148]	; (8002d30 <inputseria+0x5e0>)
 8002c9a:	4a2c      	ldr	r2, [pc, #176]	; (8002d4c <inputseria+0x5fc>)
 8002c9c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	seria[81].waittime = 105;
 8002ca0:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <inputseria+0x5e0>)
 8002ca2:	2269      	movs	r2, #105	; 0x69
 8002ca4:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
	seria[82].interval = 1047;
 8002ca8:	4b21      	ldr	r3, [pc, #132]	; (8002d30 <inputseria+0x5e0>)
 8002caa:	4a29      	ldr	r2, [pc, #164]	; (8002d50 <inputseria+0x600>)
 8002cac:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	seria[82].waittime = 105;
 8002cb0:	4b1f      	ldr	r3, [pc, #124]	; (8002d30 <inputseria+0x5e0>)
 8002cb2:	2269      	movs	r2, #105	; 0x69
 8002cb4:	f8a3 2294 	strh.w	r2, [r3, #660]	; 0x294
	seria[83].interval = 880;
 8002cb8:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <inputseria+0x5e0>)
 8002cba:	4a23      	ldr	r2, [pc, #140]	; (8002d48 <inputseria+0x5f8>)
 8002cbc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	seria[83].waittime = 105;
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <inputseria+0x5e0>)
 8002cc2:	2269      	movs	r2, #105	; 0x69
 8002cc4:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
	seria[84].interval = 988;
 8002cc8:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <inputseria+0x5e0>)
 8002cca:	4a20      	ldr	r2, [pc, #128]	; (8002d4c <inputseria+0x5fc>)
 8002ccc:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	seria[84].waittime = 2576;
 8002cd0:	4b17      	ldr	r3, [pc, #92]	; (8002d30 <inputseria+0x5e0>)
 8002cd2:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 8002cd6:	f8a3 22a4 	strh.w	r2, [r3, #676]	; 0x2a4
	seria[85].interval = 698;
 8002cda:	4b15      	ldr	r3, [pc, #84]	; (8002d30 <inputseria+0x5e0>)
 8002cdc:	4a18      	ldr	r2, [pc, #96]	; (8002d40 <inputseria+0x5f0>)
 8002cde:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	seria[85].waittime = 224;
 8002ce2:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <inputseria+0x5e0>)
 8002ce4:	22e0      	movs	r2, #224	; 0xe0
 8002ce6:	f8a3 22ac 	strh.w	r2, [r3, #684]	; 0x2ac
	seria[86].interval = 880;
 8002cea:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <inputseria+0x5e0>)
 8002cec:	4a16      	ldr	r2, [pc, #88]	; (8002d48 <inputseria+0x5f8>)
 8002cee:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
	seria[86].waittime = 224;
 8002cf2:	4b0f      	ldr	r3, [pc, #60]	; (8002d30 <inputseria+0x5e0>)
 8002cf4:	22e0      	movs	r2, #224	; 0xe0
 8002cf6:	f8a3 22b4 	strh.w	r2, [r3, #692]	; 0x2b4
	seria[87].interval = 988;
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <inputseria+0x5e0>)
 8002cfc:	4a13      	ldr	r2, [pc, #76]	; (8002d4c <inputseria+0x5fc>)
 8002cfe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
	seria[87].waittime = 462;
 8002d02:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <inputseria+0x5e0>)
 8002d04:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002d08:	f8a3 22bc 	strh.w	r2, [r3, #700]	; 0x2bc
	seria[88].interval = 698;
 8002d0c:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <inputseria+0x5e0>)
 8002d0e:	4a0c      	ldr	r2, [pc, #48]	; (8002d40 <inputseria+0x5f0>)
 8002d10:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
	seria[88].waittime = 224;
 8002d14:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <inputseria+0x5e0>)
 8002d16:	22e0      	movs	r2, #224	; 0xe0
 8002d18:	f8a3 22c4 	strh.w	r2, [r3, #708]	; 0x2c4
	seria[89].interval = 880;
 8002d1c:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <inputseria+0x5e0>)
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <inputseria+0x5f8>)
 8002d20:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
	seria[89].waittime = 224;
 8002d24:	4b02      	ldr	r3, [pc, #8]	; (8002d30 <inputseria+0x5e0>)
 8002d26:	22e0      	movs	r2, #224	; 0xe0
 8002d28:	f8a3 22cc 	strh.w	r2, [r3, #716]	; 0x2cc
 8002d2c:	e024      	b.n	8002d78 <inputseria+0x628>
 8002d2e:	bf00      	nop
 8002d30:	200003f0 	.word	0x200003f0
 8002d34:	43f70000 	.word	0x43f70000
 8002d38:	4402c000 	.word	0x4402c000
 8002d3c:	43a50000 	.word	0x43a50000
 8002d40:	442e8000 	.word	0x442e8000
 8002d44:	44440000 	.word	0x44440000
 8002d48:	445c0000 	.word	0x445c0000
 8002d4c:	44770000 	.word	0x44770000
 8002d50:	4482e000 	.word	0x4482e000
 8002d54:	4492e000 	.word	0x4492e000
 8002d58:	44a4e000 	.word	0x44a4e000
 8002d5c:	44aea000 	.word	0x44aea000
 8002d60:	44c40000 	.word	0x44c40000
 8002d64:	43930000 	.word	0x43930000
 8002d68:	43ae8000 	.word	0x43ae8000
 8002d6c:	43c40000 	.word	0x43c40000
 8002d70:	43dc0000 	.word	0x43dc0000
 8002d74:	4424c000 	.word	0x4424c000
	seria[90].interval = 988;
 8002d78:	4bb9      	ldr	r3, [pc, #740]	; (8003060 <inputseria+0x910>)
 8002d7a:	4aba      	ldr	r2, [pc, #744]	; (8003064 <inputseria+0x914>)
 8002d7c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
	seria[90].waittime = 462;
 8002d80:	4bb7      	ldr	r3, [pc, #732]	; (8003060 <inputseria+0x910>)
 8002d82:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002d86:	f8a3 22d4 	strh.w	r2, [r3, #724]	; 0x2d4
	seria[91].interval = 698;
 8002d8a:	4bb5      	ldr	r3, [pc, #724]	; (8003060 <inputseria+0x910>)
 8002d8c:	4ab6      	ldr	r2, [pc, #728]	; (8003068 <inputseria+0x918>)
 8002d8e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
	seria[91].waittime = 224;
 8002d92:	4bb3      	ldr	r3, [pc, #716]	; (8003060 <inputseria+0x910>)
 8002d94:	22e0      	movs	r2, #224	; 0xe0
 8002d96:	f8a3 22dc 	strh.w	r2, [r3, #732]	; 0x2dc
	seria[92].interval = 880;
 8002d9a:	4bb1      	ldr	r3, [pc, #708]	; (8003060 <inputseria+0x910>)
 8002d9c:	4ab3      	ldr	r2, [pc, #716]	; (800306c <inputseria+0x91c>)
 8002d9e:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
	seria[92].waittime = 224;
 8002da2:	4baf      	ldr	r3, [pc, #700]	; (8003060 <inputseria+0x910>)
 8002da4:	22e0      	movs	r2, #224	; 0xe0
 8002da6:	f8a3 22e4 	strh.w	r2, [r3, #740]	; 0x2e4
	seria[93].interval = 988;
 8002daa:	4bad      	ldr	r3, [pc, #692]	; (8003060 <inputseria+0x910>)
 8002dac:	4aad      	ldr	r2, [pc, #692]	; (8003064 <inputseria+0x914>)
 8002dae:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
	seria[93].waittime = 224;
 8002db2:	4bab      	ldr	r3, [pc, #684]	; (8003060 <inputseria+0x910>)
 8002db4:	22e0      	movs	r2, #224	; 0xe0
 8002db6:	f8a3 22ec 	strh.w	r2, [r3, #748]	; 0x2ec
	seria[94].interval = 1319;
 8002dba:	4ba9      	ldr	r3, [pc, #676]	; (8003060 <inputseria+0x910>)
 8002dbc:	4aac      	ldr	r2, [pc, #688]	; (8003070 <inputseria+0x920>)
 8002dbe:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
	seria[94].waittime = 224;
 8002dc2:	4ba7      	ldr	r3, [pc, #668]	; (8003060 <inputseria+0x910>)
 8002dc4:	22e0      	movs	r2, #224	; 0xe0
 8002dc6:	f8a3 22f4 	strh.w	r2, [r3, #756]	; 0x2f4
	seria[95].interval = 1175;
 8002dca:	4ba5      	ldr	r3, [pc, #660]	; (8003060 <inputseria+0x910>)
 8002dcc:	4aa9      	ldr	r2, [pc, #676]	; (8003074 <inputseria+0x924>)
 8002dce:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	seria[95].waittime = 462;
 8002dd2:	4ba3      	ldr	r3, [pc, #652]	; (8003060 <inputseria+0x910>)
 8002dd4:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002dd8:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
	seria[96].interval = 988;
 8002ddc:	4ba0      	ldr	r3, [pc, #640]	; (8003060 <inputseria+0x910>)
 8002dde:	4aa1      	ldr	r2, [pc, #644]	; (8003064 <inputseria+0x914>)
 8002de0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
	seria[96].waittime = 224;
 8002de4:	4b9e      	ldr	r3, [pc, #632]	; (8003060 <inputseria+0x910>)
 8002de6:	22e0      	movs	r2, #224	; 0xe0
 8002de8:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
	seria[97].interval = 1047;
 8002dec:	4b9c      	ldr	r3, [pc, #624]	; (8003060 <inputseria+0x910>)
 8002dee:	4aa2      	ldr	r2, [pc, #648]	; (8003078 <inputseria+0x928>)
 8002df0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	seria[97].waittime = 224;
 8002df4:	4b9a      	ldr	r3, [pc, #616]	; (8003060 <inputseria+0x910>)
 8002df6:	22e0      	movs	r2, #224	; 0xe0
 8002df8:	f8a3 230c 	strh.w	r2, [r3, #780]	; 0x30c
	seria[98].interval = 988;
 8002dfc:	4b98      	ldr	r3, [pc, #608]	; (8003060 <inputseria+0x910>)
 8002dfe:	4a99      	ldr	r2, [pc, #612]	; (8003064 <inputseria+0x914>)
 8002e00:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
	seria[98].waittime = 224;
 8002e04:	4b96      	ldr	r3, [pc, #600]	; (8003060 <inputseria+0x910>)
 8002e06:	22e0      	movs	r2, #224	; 0xe0
 8002e08:	f8a3 2314 	strh.w	r2, [r3, #788]	; 0x314
	seria[99].interval = 784;
 8002e0c:	4b94      	ldr	r3, [pc, #592]	; (8003060 <inputseria+0x910>)
 8002e0e:	4a9b      	ldr	r2, [pc, #620]	; (800307c <inputseria+0x92c>)
 8002e10:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
	seria[99].waittime = 224;
 8002e14:	4b92      	ldr	r3, [pc, #584]	; (8003060 <inputseria+0x910>)
 8002e16:	22e0      	movs	r2, #224	; 0xe0
 8002e18:	f8a3 231c 	strh.w	r2, [r3, #796]	; 0x31c
	seria[100].interval = 659;
 8002e1c:	4b90      	ldr	r3, [pc, #576]	; (8003060 <inputseria+0x910>)
 8002e1e:	4a98      	ldr	r2, [pc, #608]	; (8003080 <inputseria+0x930>)
 8002e20:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
	seria[100].waittime = 1169;
 8002e24:	4b8e      	ldr	r3, [pc, #568]	; (8003060 <inputseria+0x910>)
 8002e26:	f240 4291 	movw	r2, #1169	; 0x491
 8002e2a:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324
	seria[101].interval = 587;
 8002e2e:	4b8c      	ldr	r3, [pc, #560]	; (8003060 <inputseria+0x910>)
 8002e30:	4a94      	ldr	r2, [pc, #592]	; (8003084 <inputseria+0x934>)
 8002e32:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	seria[101].waittime = 224;
 8002e36:	4b8a      	ldr	r3, [pc, #552]	; (8003060 <inputseria+0x910>)
 8002e38:	22e0      	movs	r2, #224	; 0xe0
 8002e3a:	f8a3 232c 	strh.w	r2, [r3, #812]	; 0x32c
	seria[102].interval = 659;
 8002e3e:	4b88      	ldr	r3, [pc, #544]	; (8003060 <inputseria+0x910>)
 8002e40:	4a8f      	ldr	r2, [pc, #572]	; (8003080 <inputseria+0x930>)
 8002e42:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
	seria[102].waittime = 224;
 8002e46:	4b86      	ldr	r3, [pc, #536]	; (8003060 <inputseria+0x910>)
 8002e48:	22e0      	movs	r2, #224	; 0xe0
 8002e4a:	f8a3 2334 	strh.w	r2, [r3, #820]	; 0x334
	seria[103].interval = 784;
 8002e4e:	4b84      	ldr	r3, [pc, #528]	; (8003060 <inputseria+0x910>)
 8002e50:	4a8a      	ldr	r2, [pc, #552]	; (800307c <inputseria+0x92c>)
 8002e52:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
	seria[103].waittime = 224;
 8002e56:	4b82      	ldr	r3, [pc, #520]	; (8003060 <inputseria+0x910>)
 8002e58:	22e0      	movs	r2, #224	; 0xe0
 8002e5a:	f8a3 233c 	strh.w	r2, [r3, #828]	; 0x33c
	seria[104].interval = 659;
 8002e5e:	4b80      	ldr	r3, [pc, #512]	; (8003060 <inputseria+0x910>)
 8002e60:	4a87      	ldr	r2, [pc, #540]	; (8003080 <inputseria+0x930>)
 8002e62:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
	seria[104].waittime = 1400;
 8002e66:	4b7e      	ldr	r3, [pc, #504]	; (8003060 <inputseria+0x910>)
 8002e68:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8002e6c:	f8a3 2344 	strh.w	r2, [r3, #836]	; 0x344
	seria[105].interval = 698;
 8002e70:	4b7b      	ldr	r3, [pc, #492]	; (8003060 <inputseria+0x910>)
 8002e72:	4a7d      	ldr	r2, [pc, #500]	; (8003068 <inputseria+0x918>)
 8002e74:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	seria[105].waittime = 224;
 8002e78:	4b79      	ldr	r3, [pc, #484]	; (8003060 <inputseria+0x910>)
 8002e7a:	22e0      	movs	r2, #224	; 0xe0
 8002e7c:	f8a3 234c 	strh.w	r2, [r3, #844]	; 0x34c
	seria[106].interval = 880;
 8002e80:	4b77      	ldr	r3, [pc, #476]	; (8003060 <inputseria+0x910>)
 8002e82:	4a7a      	ldr	r2, [pc, #488]	; (800306c <inputseria+0x91c>)
 8002e84:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
	seria[106].waittime = 224;
 8002e88:	4b75      	ldr	r3, [pc, #468]	; (8003060 <inputseria+0x910>)
 8002e8a:	22e0      	movs	r2, #224	; 0xe0
 8002e8c:	f8a3 2354 	strh.w	r2, [r3, #852]	; 0x354
	seria[107].interval = 988;
 8002e90:	4b73      	ldr	r3, [pc, #460]	; (8003060 <inputseria+0x910>)
 8002e92:	4a74      	ldr	r2, [pc, #464]	; (8003064 <inputseria+0x914>)
 8002e94:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
	seria[107].waittime = 462;
 8002e98:	4b71      	ldr	r3, [pc, #452]	; (8003060 <inputseria+0x910>)
 8002e9a:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002e9e:	f8a3 235c 	strh.w	r2, [r3, #860]	; 0x35c
	seria[108].interval = 698;
 8002ea2:	4b6f      	ldr	r3, [pc, #444]	; (8003060 <inputseria+0x910>)
 8002ea4:	4a70      	ldr	r2, [pc, #448]	; (8003068 <inputseria+0x918>)
 8002ea6:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
	seria[108].waittime = 224;
 8002eaa:	4b6d      	ldr	r3, [pc, #436]	; (8003060 <inputseria+0x910>)
 8002eac:	22e0      	movs	r2, #224	; 0xe0
 8002eae:	f8a3 2364 	strh.w	r2, [r3, #868]	; 0x364
	seria[109].interval = 880;
 8002eb2:	4b6b      	ldr	r3, [pc, #428]	; (8003060 <inputseria+0x910>)
 8002eb4:	4a6d      	ldr	r2, [pc, #436]	; (800306c <inputseria+0x91c>)
 8002eb6:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
	seria[109].waittime = 224;
 8002eba:	4b69      	ldr	r3, [pc, #420]	; (8003060 <inputseria+0x910>)
 8002ebc:	22e0      	movs	r2, #224	; 0xe0
 8002ebe:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
	seria[110].interval = 988;
 8002ec2:	4b67      	ldr	r3, [pc, #412]	; (8003060 <inputseria+0x910>)
 8002ec4:	4a67      	ldr	r2, [pc, #412]	; (8003064 <inputseria+0x914>)
 8002ec6:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
	seria[110].waittime = 462;
 8002eca:	4b65      	ldr	r3, [pc, #404]	; (8003060 <inputseria+0x910>)
 8002ecc:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002ed0:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
	seria[111].interval = 698;
 8002ed4:	4b62      	ldr	r3, [pc, #392]	; (8003060 <inputseria+0x910>)
 8002ed6:	4a64      	ldr	r2, [pc, #400]	; (8003068 <inputseria+0x918>)
 8002ed8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
	seria[111].waittime = 224;
 8002edc:	4b60      	ldr	r3, [pc, #384]	; (8003060 <inputseria+0x910>)
 8002ede:	22e0      	movs	r2, #224	; 0xe0
 8002ee0:	f8a3 237c 	strh.w	r2, [r3, #892]	; 0x37c
	seria[112].interval = 880;
 8002ee4:	4b5e      	ldr	r3, [pc, #376]	; (8003060 <inputseria+0x910>)
 8002ee6:	4a61      	ldr	r2, [pc, #388]	; (800306c <inputseria+0x91c>)
 8002ee8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
	seria[112].waittime = 224;
 8002eec:	4b5c      	ldr	r3, [pc, #368]	; (8003060 <inputseria+0x910>)
 8002eee:	22e0      	movs	r2, #224	; 0xe0
 8002ef0:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
	seria[113].interval = 988;
 8002ef4:	4b5a      	ldr	r3, [pc, #360]	; (8003060 <inputseria+0x910>)
 8002ef6:	4a5b      	ldr	r2, [pc, #364]	; (8003064 <inputseria+0x914>)
 8002ef8:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	seria[113].waittime = 224;
 8002efc:	4b58      	ldr	r3, [pc, #352]	; (8003060 <inputseria+0x910>)
 8002efe:	22e0      	movs	r2, #224	; 0xe0
 8002f00:	f8a3 238c 	strh.w	r2, [r3, #908]	; 0x38c
	seria[114].interval = 1319;
 8002f04:	4b56      	ldr	r3, [pc, #344]	; (8003060 <inputseria+0x910>)
 8002f06:	4a5a      	ldr	r2, [pc, #360]	; (8003070 <inputseria+0x920>)
 8002f08:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
	seria[114].waittime = 224;
 8002f0c:	4b54      	ldr	r3, [pc, #336]	; (8003060 <inputseria+0x910>)
 8002f0e:	22e0      	movs	r2, #224	; 0xe0
 8002f10:	f8a3 2394 	strh.w	r2, [r3, #916]	; 0x394
	seria[115].interval = 1175;
 8002f14:	4b52      	ldr	r3, [pc, #328]	; (8003060 <inputseria+0x910>)
 8002f16:	4a57      	ldr	r2, [pc, #348]	; (8003074 <inputseria+0x924>)
 8002f18:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
	seria[115].waittime = 462;
 8002f1c:	4b50      	ldr	r3, [pc, #320]	; (8003060 <inputseria+0x910>)
 8002f1e:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002f22:	f8a3 239c 	strh.w	r2, [r3, #924]	; 0x39c
	seria[116].interval = 988;
 8002f26:	4b4e      	ldr	r3, [pc, #312]	; (8003060 <inputseria+0x910>)
 8002f28:	4a4e      	ldr	r2, [pc, #312]	; (8003064 <inputseria+0x914>)
 8002f2a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	seria[116].waittime = 224;
 8002f2e:	4b4c      	ldr	r3, [pc, #304]	; (8003060 <inputseria+0x910>)
 8002f30:	22e0      	movs	r2, #224	; 0xe0
 8002f32:	f8a3 23a4 	strh.w	r2, [r3, #932]	; 0x3a4
	seria[117].interval = 1047;
 8002f36:	4b4a      	ldr	r3, [pc, #296]	; (8003060 <inputseria+0x910>)
 8002f38:	4a4f      	ldr	r2, [pc, #316]	; (8003078 <inputseria+0x928>)
 8002f3a:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
	seria[117].waittime = 224;
 8002f3e:	4b48      	ldr	r3, [pc, #288]	; (8003060 <inputseria+0x910>)
 8002f40:	22e0      	movs	r2, #224	; 0xe0
 8002f42:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
	seria[118].interval = 1319;
 8002f46:	4b46      	ldr	r3, [pc, #280]	; (8003060 <inputseria+0x910>)
 8002f48:	4a49      	ldr	r2, [pc, #292]	; (8003070 <inputseria+0x920>)
 8002f4a:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
	seria[118].waittime = 224;
 8002f4e:	4b44      	ldr	r3, [pc, #272]	; (8003060 <inputseria+0x910>)
 8002f50:	22e0      	movs	r2, #224	; 0xe0
 8002f52:	f8a3 23b4 	strh.w	r2, [r3, #948]	; 0x3b4
	seria[119].interval = 988;
 8002f56:	4b42      	ldr	r3, [pc, #264]	; (8003060 <inputseria+0x910>)
 8002f58:	4a42      	ldr	r2, [pc, #264]	; (8003064 <inputseria+0x914>)
 8002f5a:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
	seria[119].waittime = 224;
 8002f5e:	4b40      	ldr	r3, [pc, #256]	; (8003060 <inputseria+0x910>)
 8002f60:	22e0      	movs	r2, #224	; 0xe0
 8002f62:	f8a3 23bc 	strh.w	r2, [r3, #956]	; 0x3bc
	seria[120].interval = 784;
 8002f66:	4b3e      	ldr	r3, [pc, #248]	; (8003060 <inputseria+0x910>)
 8002f68:	4a44      	ldr	r2, [pc, #272]	; (800307c <inputseria+0x92c>)
 8002f6a:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
	seria[120].waittime = 1169;
 8002f6e:	4b3c      	ldr	r3, [pc, #240]	; (8003060 <inputseria+0x910>)
 8002f70:	f240 4291 	movw	r2, #1169	; 0x491
 8002f74:	f8a3 23c4 	strh.w	r2, [r3, #964]	; 0x3c4
	seria[121].interval = 988;
 8002f78:	4b39      	ldr	r3, [pc, #228]	; (8003060 <inputseria+0x910>)
 8002f7a:	4a3a      	ldr	r2, [pc, #232]	; (8003064 <inputseria+0x914>)
 8002f7c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
	seria[121].waittime = 224;
 8002f80:	4b37      	ldr	r3, [pc, #220]	; (8003060 <inputseria+0x910>)
 8002f82:	22e0      	movs	r2, #224	; 0xe0
 8002f84:	f8a3 23cc 	strh.w	r2, [r3, #972]	; 0x3cc
	seria[122].interval = 784;
 8002f88:	4b35      	ldr	r3, [pc, #212]	; (8003060 <inputseria+0x910>)
 8002f8a:	4a3c      	ldr	r2, [pc, #240]	; (800307c <inputseria+0x92c>)
 8002f8c:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
	seria[122].waittime = 224;
 8002f90:	4b33      	ldr	r3, [pc, #204]	; (8003060 <inputseria+0x910>)
 8002f92:	22e0      	movs	r2, #224	; 0xe0
 8002f94:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4
	seria[123].interval = 587;
 8002f98:	4b31      	ldr	r3, [pc, #196]	; (8003060 <inputseria+0x910>)
 8002f9a:	4a3a      	ldr	r2, [pc, #232]	; (8003084 <inputseria+0x934>)
 8002f9c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
	seria[123].waittime = 224;
 8002fa0:	4b2f      	ldr	r3, [pc, #188]	; (8003060 <inputseria+0x910>)
 8002fa2:	22e0      	movs	r2, #224	; 0xe0
 8002fa4:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
	seria[124].interval = 659;
 8002fa8:	4b2d      	ldr	r3, [pc, #180]	; (8003060 <inputseria+0x910>)
 8002faa:	4a35      	ldr	r2, [pc, #212]	; (8003080 <inputseria+0x930>)
 8002fac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
	seria[124].waittime = 1400;
 8002fb0:	4b2b      	ldr	r3, [pc, #172]	; (8003060 <inputseria+0x910>)
 8002fb2:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8002fb6:	f8a3 23e4 	strh.w	r2, [r3, #996]	; 0x3e4
	seria[125].interval = 294;
 8002fba:	4b29      	ldr	r3, [pc, #164]	; (8003060 <inputseria+0x910>)
 8002fbc:	4a32      	ldr	r2, [pc, #200]	; (8003088 <inputseria+0x938>)
 8002fbe:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
	seria[125].waittime = 224;
 8002fc2:	4b27      	ldr	r3, [pc, #156]	; (8003060 <inputseria+0x910>)
 8002fc4:	22e0      	movs	r2, #224	; 0xe0
 8002fc6:	f8a3 23ec 	strh.w	r2, [r3, #1004]	; 0x3ec
	seria[126].interval = 330;
 8002fca:	4b25      	ldr	r3, [pc, #148]	; (8003060 <inputseria+0x910>)
 8002fcc:	4a2f      	ldr	r2, [pc, #188]	; (800308c <inputseria+0x93c>)
 8002fce:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
	seria[126].waittime = 224;
 8002fd2:	4b23      	ldr	r3, [pc, #140]	; (8003060 <inputseria+0x910>)
 8002fd4:	22e0      	movs	r2, #224	; 0xe0
 8002fd6:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4
	seria[127].interval = 349;
 8002fda:	4b21      	ldr	r3, [pc, #132]	; (8003060 <inputseria+0x910>)
 8002fdc:	4a2c      	ldr	r2, [pc, #176]	; (8003090 <inputseria+0x940>)
 8002fde:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
	seria[127].waittime = 462;
 8002fe2:	4b1f      	ldr	r3, [pc, #124]	; (8003060 <inputseria+0x910>)
 8002fe4:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002fe8:	f8a3 23fc 	strh.w	r2, [r3, #1020]	; 0x3fc
	seria[128].interval = 392;
 8002fec:	4b1c      	ldr	r3, [pc, #112]	; (8003060 <inputseria+0x910>)
 8002fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ff2:	4a28      	ldr	r2, [pc, #160]	; (8003094 <inputseria+0x944>)
 8002ff4:	601a      	str	r2, [r3, #0]
	seria[128].waittime = 224;
 8002ff6:	4b1a      	ldr	r3, [pc, #104]	; (8003060 <inputseria+0x910>)
 8002ff8:	22e0      	movs	r2, #224	; 0xe0
 8002ffa:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	seria[129].interval = 440;
 8002ffe:	4b18      	ldr	r3, [pc, #96]	; (8003060 <inputseria+0x910>)
 8003000:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003004:	4a24      	ldr	r2, [pc, #144]	; (8003098 <inputseria+0x948>)
 8003006:	601a      	str	r2, [r3, #0]
	seria[129].waittime = 224;
 8003008:	4b15      	ldr	r3, [pc, #84]	; (8003060 <inputseria+0x910>)
 800300a:	22e0      	movs	r2, #224	; 0xe0
 800300c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
	seria[130].interval = 494;
 8003010:	4b13      	ldr	r3, [pc, #76]	; (8003060 <inputseria+0x910>)
 8003012:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8003016:	4a21      	ldr	r2, [pc, #132]	; (800309c <inputseria+0x94c>)
 8003018:	601a      	str	r2, [r3, #0]
	seria[130].waittime = 462;
 800301a:	4b11      	ldr	r3, [pc, #68]	; (8003060 <inputseria+0x910>)
 800301c:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003020:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
	seria[131].interval = 523;
 8003024:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <inputseria+0x910>)
 8003026:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800302a:	4a1d      	ldr	r2, [pc, #116]	; (80030a0 <inputseria+0x950>)
 800302c:	601a      	str	r2, [r3, #0]
	seria[131].waittime = 224;
 800302e:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <inputseria+0x910>)
 8003030:	22e0      	movs	r2, #224	; 0xe0
 8003032:	f8a3 241c 	strh.w	r2, [r3, #1052]	; 0x41c
	seria[132].interval = 494;
 8003036:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <inputseria+0x910>)
 8003038:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800303c:	4a17      	ldr	r2, [pc, #92]	; (800309c <inputseria+0x94c>)
 800303e:	601a      	str	r2, [r3, #0]
	seria[132].waittime = 224;
 8003040:	4b07      	ldr	r3, [pc, #28]	; (8003060 <inputseria+0x910>)
 8003042:	22e0      	movs	r2, #224	; 0xe0
 8003044:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
	seria[133].interval = 330;
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <inputseria+0x910>)
 800304a:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800304e:	4a0f      	ldr	r2, [pc, #60]	; (800308c <inputseria+0x93c>)
 8003050:	601a      	str	r2, [r3, #0]
	seria[133].waittime = 1400;
 8003052:	4b03      	ldr	r3, [pc, #12]	; (8003060 <inputseria+0x910>)
 8003054:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003058:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
 800305c:	e022      	b.n	80030a4 <inputseria+0x954>
 800305e:	bf00      	nop
 8003060:	200003f0 	.word	0x200003f0
 8003064:	44770000 	.word	0x44770000
 8003068:	442e8000 	.word	0x442e8000
 800306c:	445c0000 	.word	0x445c0000
 8003070:	44a4e000 	.word	0x44a4e000
 8003074:	4492e000 	.word	0x4492e000
 8003078:	4482e000 	.word	0x4482e000
 800307c:	44440000 	.word	0x44440000
 8003080:	4424c000 	.word	0x4424c000
 8003084:	4412c000 	.word	0x4412c000
 8003088:	43930000 	.word	0x43930000
 800308c:	43a50000 	.word	0x43a50000
 8003090:	43ae8000 	.word	0x43ae8000
 8003094:	43c40000 	.word	0x43c40000
 8003098:	43dc0000 	.word	0x43dc0000
 800309c:	43f70000 	.word	0x43f70000
 80030a0:	4402c000 	.word	0x4402c000
	seria[134].interval = 698;
 80030a4:	4ba7      	ldr	r3, [pc, #668]	; (8003344 <inputseria+0xbf4>)
 80030a6:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 80030aa:	4aa7      	ldr	r2, [pc, #668]	; (8003348 <inputseria+0xbf8>)
 80030ac:	601a      	str	r2, [r3, #0]
	seria[134].waittime = 224;
 80030ae:	4ba5      	ldr	r3, [pc, #660]	; (8003344 <inputseria+0xbf4>)
 80030b0:	22e0      	movs	r2, #224	; 0xe0
 80030b2:	f8a3 2434 	strh.w	r2, [r3, #1076]	; 0x434
	seria[135].interval = 784;
 80030b6:	4ba3      	ldr	r3, [pc, #652]	; (8003344 <inputseria+0xbf4>)
 80030b8:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80030bc:	4aa3      	ldr	r2, [pc, #652]	; (800334c <inputseria+0xbfc>)
 80030be:	601a      	str	r2, [r3, #0]
	seria[135].waittime = 224;
 80030c0:	4ba0      	ldr	r3, [pc, #640]	; (8003344 <inputseria+0xbf4>)
 80030c2:	22e0      	movs	r2, #224	; 0xe0
 80030c4:	f8a3 243c 	strh.w	r2, [r3, #1084]	; 0x43c
	seria[136].interval = 880;
 80030c8:	4b9e      	ldr	r3, [pc, #632]	; (8003344 <inputseria+0xbf4>)
 80030ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030ce:	4aa0      	ldr	r2, [pc, #640]	; (8003350 <inputseria+0xc00>)
 80030d0:	601a      	str	r2, [r3, #0]
	seria[136].waittime = 462;
 80030d2:	4b9c      	ldr	r3, [pc, #624]	; (8003344 <inputseria+0xbf4>)
 80030d4:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80030d8:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444
	seria[137].interval = 988;
 80030dc:	4b99      	ldr	r3, [pc, #612]	; (8003344 <inputseria+0xbf4>)
 80030de:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80030e2:	4a9c      	ldr	r2, [pc, #624]	; (8003354 <inputseria+0xc04>)
 80030e4:	601a      	str	r2, [r3, #0]
	seria[137].waittime = 224;
 80030e6:	4b97      	ldr	r3, [pc, #604]	; (8003344 <inputseria+0xbf4>)
 80030e8:	22e0      	movs	r2, #224	; 0xe0
 80030ea:	f8a3 244c 	strh.w	r2, [r3, #1100]	; 0x44c
	seria[138].interval = 1047;
 80030ee:	4b95      	ldr	r3, [pc, #596]	; (8003344 <inputseria+0xbf4>)
 80030f0:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80030f4:	4a98      	ldr	r2, [pc, #608]	; (8003358 <inputseria+0xc08>)
 80030f6:	601a      	str	r2, [r3, #0]
	seria[138].waittime = 224;
 80030f8:	4b92      	ldr	r3, [pc, #584]	; (8003344 <inputseria+0xbf4>)
 80030fa:	22e0      	movs	r2, #224	; 0xe0
 80030fc:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
	seria[139].interval = 1175;
 8003100:	4b90      	ldr	r3, [pc, #576]	; (8003344 <inputseria+0xbf4>)
 8003102:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 8003106:	4a95      	ldr	r2, [pc, #596]	; (800335c <inputseria+0xc0c>)
 8003108:	601a      	str	r2, [r3, #0]
	seria[139].waittime = 462;
 800310a:	4b8e      	ldr	r3, [pc, #568]	; (8003344 <inputseria+0xbf4>)
 800310c:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003110:	f8a3 245c 	strh.w	r2, [r3, #1116]	; 0x45c
	seria[140].interval = 1319;
 8003114:	4b8b      	ldr	r3, [pc, #556]	; (8003344 <inputseria+0xbf4>)
 8003116:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 800311a:	4a91      	ldr	r2, [pc, #580]	; (8003360 <inputseria+0xc10>)
 800311c:	601a      	str	r2, [r3, #0]
	seria[140].waittime = 224;
 800311e:	4b89      	ldr	r3, [pc, #548]	; (8003344 <inputseria+0xbf4>)
 8003120:	22e0      	movs	r2, #224	; 0xe0
 8003122:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464
	seria[141].interval = 1397;
 8003126:	4b87      	ldr	r3, [pc, #540]	; (8003344 <inputseria+0xbf4>)
 8003128:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800312c:	4a8d      	ldr	r2, [pc, #564]	; (8003364 <inputseria+0xc14>)
 800312e:	601a      	str	r2, [r3, #0]
	seria[141].waittime = 224;
 8003130:	4b84      	ldr	r3, [pc, #528]	; (8003344 <inputseria+0xbf4>)
 8003132:	22e0      	movs	r2, #224	; 0xe0
 8003134:	f8a3 246c 	strh.w	r2, [r3, #1132]	; 0x46c
	seria[142].interval = 1568;
 8003138:	4b82      	ldr	r3, [pc, #520]	; (8003344 <inputseria+0xbf4>)
 800313a:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800313e:	4a8a      	ldr	r2, [pc, #552]	; (8003368 <inputseria+0xc18>)
 8003140:	601a      	str	r2, [r3, #0]
	seria[142].waittime = 1400;
 8003142:	4b80      	ldr	r3, [pc, #512]	; (8003344 <inputseria+0xbf4>)
 8003144:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003148:	f8a3 2474 	strh.w	r2, [r3, #1140]	; 0x474
	seria[143].interval = 294;
 800314c:	4b7d      	ldr	r3, [pc, #500]	; (8003344 <inputseria+0xbf4>)
 800314e:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8003152:	4a86      	ldr	r2, [pc, #536]	; (800336c <inputseria+0xc1c>)
 8003154:	601a      	str	r2, [r3, #0]
	seria[143].waittime = 224;
 8003156:	4b7b      	ldr	r3, [pc, #492]	; (8003344 <inputseria+0xbf4>)
 8003158:	22e0      	movs	r2, #224	; 0xe0
 800315a:	f8a3 247c 	strh.w	r2, [r3, #1148]	; 0x47c
	seria[144].interval = 330;
 800315e:	4b79      	ldr	r3, [pc, #484]	; (8003344 <inputseria+0xbf4>)
 8003160:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8003164:	4a82      	ldr	r2, [pc, #520]	; (8003370 <inputseria+0xc20>)
 8003166:	601a      	str	r2, [r3, #0]
	seria[144].waittime = 224;
 8003168:	4b76      	ldr	r3, [pc, #472]	; (8003344 <inputseria+0xbf4>)
 800316a:	22e0      	movs	r2, #224	; 0xe0
 800316c:	f8a3 2484 	strh.w	r2, [r3, #1156]	; 0x484
	seria[145].interval = 349;
 8003170:	4b74      	ldr	r3, [pc, #464]	; (8003344 <inputseria+0xbf4>)
 8003172:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8003176:	4a7f      	ldr	r2, [pc, #508]	; (8003374 <inputseria+0xc24>)
 8003178:	601a      	str	r2, [r3, #0]
	seria[145].waittime = 462;
 800317a:	4b72      	ldr	r3, [pc, #456]	; (8003344 <inputseria+0xbf4>)
 800317c:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003180:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
	seria[146].interval = 392;
 8003184:	4b6f      	ldr	r3, [pc, #444]	; (8003344 <inputseria+0xbf4>)
 8003186:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 800318a:	4a7b      	ldr	r2, [pc, #492]	; (8003378 <inputseria+0xc28>)
 800318c:	601a      	str	r2, [r3, #0]
	seria[146].waittime = 224;
 800318e:	4b6d      	ldr	r3, [pc, #436]	; (8003344 <inputseria+0xbf4>)
 8003190:	22e0      	movs	r2, #224	; 0xe0
 8003192:	f8a3 2494 	strh.w	r2, [r3, #1172]	; 0x494
	seria[147].interval = 440;
 8003196:	4b6b      	ldr	r3, [pc, #428]	; (8003344 <inputseria+0xbf4>)
 8003198:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800319c:	4a77      	ldr	r2, [pc, #476]	; (800337c <inputseria+0xc2c>)
 800319e:	601a      	str	r2, [r3, #0]
	seria[147].waittime = 224;
 80031a0:	4b68      	ldr	r3, [pc, #416]	; (8003344 <inputseria+0xbf4>)
 80031a2:	22e0      	movs	r2, #224	; 0xe0
 80031a4:	f8a3 249c 	strh.w	r2, [r3, #1180]	; 0x49c
	seria[148].interval = 494;
 80031a8:	4b66      	ldr	r3, [pc, #408]	; (8003344 <inputseria+0xbf4>)
 80031aa:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80031ae:	4a74      	ldr	r2, [pc, #464]	; (8003380 <inputseria+0xc30>)
 80031b0:	601a      	str	r2, [r3, #0]
	seria[148].waittime = 462;
 80031b2:	4b64      	ldr	r3, [pc, #400]	; (8003344 <inputseria+0xbf4>)
 80031b4:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80031b8:	f8a3 24a4 	strh.w	r2, [r3, #1188]	; 0x4a4
	seria[149].interval = 523;
 80031bc:	4b61      	ldr	r3, [pc, #388]	; (8003344 <inputseria+0xbf4>)
 80031be:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 80031c2:	4a70      	ldr	r2, [pc, #448]	; (8003384 <inputseria+0xc34>)
 80031c4:	601a      	str	r2, [r3, #0]
	seria[149].waittime = 224;
 80031c6:	4b5f      	ldr	r3, [pc, #380]	; (8003344 <inputseria+0xbf4>)
 80031c8:	22e0      	movs	r2, #224	; 0xe0
 80031ca:	f8a3 24ac 	strh.w	r2, [r3, #1196]	; 0x4ac
	seria[150].interval = 494;
 80031ce:	4b5d      	ldr	r3, [pc, #372]	; (8003344 <inputseria+0xbf4>)
 80031d0:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80031d4:	4a6a      	ldr	r2, [pc, #424]	; (8003380 <inputseria+0xc30>)
 80031d6:	601a      	str	r2, [r3, #0]
	seria[150].waittime = 224;
 80031d8:	4b5a      	ldr	r3, [pc, #360]	; (8003344 <inputseria+0xbf4>)
 80031da:	22e0      	movs	r2, #224	; 0xe0
 80031dc:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
	seria[151].interval = 330;
 80031e0:	4b58      	ldr	r3, [pc, #352]	; (8003344 <inputseria+0xbf4>)
 80031e2:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 80031e6:	4a62      	ldr	r2, [pc, #392]	; (8003370 <inputseria+0xc20>)
 80031e8:	601a      	str	r2, [r3, #0]
	seria[151].waittime = 1400;
 80031ea:	4b56      	ldr	r3, [pc, #344]	; (8003344 <inputseria+0xbf4>)
 80031ec:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80031f0:	f8a3 24bc 	strh.w	r2, [r3, #1212]	; 0x4bc
	seria[152].interval = 698;
 80031f4:	4b53      	ldr	r3, [pc, #332]	; (8003344 <inputseria+0xbf4>)
 80031f6:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80031fa:	4a53      	ldr	r2, [pc, #332]	; (8003348 <inputseria+0xbf8>)
 80031fc:	601a      	str	r2, [r3, #0]
	seria[152].waittime = 224;
 80031fe:	4b51      	ldr	r3, [pc, #324]	; (8003344 <inputseria+0xbf4>)
 8003200:	22e0      	movs	r2, #224	; 0xe0
 8003202:	f8a3 24c4 	strh.w	r2, [r3, #1220]	; 0x4c4
	seria[153].interval = 659;
 8003206:	4b4f      	ldr	r3, [pc, #316]	; (8003344 <inputseria+0xbf4>)
 8003208:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 800320c:	4a5e      	ldr	r2, [pc, #376]	; (8003388 <inputseria+0xc38>)
 800320e:	601a      	str	r2, [r3, #0]
	seria[153].waittime = 105;
 8003210:	4b4c      	ldr	r3, [pc, #304]	; (8003344 <inputseria+0xbf4>)
 8003212:	2269      	movs	r2, #105	; 0x69
 8003214:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
	seria[154].interval = 880;
 8003218:	4b4a      	ldr	r3, [pc, #296]	; (8003344 <inputseria+0xbf4>)
 800321a:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 800321e:	4a4c      	ldr	r2, [pc, #304]	; (8003350 <inputseria+0xc00>)
 8003220:	601a      	str	r2, [r3, #0]
	seria[154].waittime = 224;
 8003222:	4b48      	ldr	r3, [pc, #288]	; (8003344 <inputseria+0xbf4>)
 8003224:	22e0      	movs	r2, #224	; 0xe0
 8003226:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4
	seria[155].interval = 784;
 800322a:	4b46      	ldr	r3, [pc, #280]	; (8003344 <inputseria+0xbf4>)
 800322c:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8003230:	4a46      	ldr	r2, [pc, #280]	; (800334c <inputseria+0xbfc>)
 8003232:	601a      	str	r2, [r3, #0]
	seria[155].waittime = 105;
 8003234:	4b43      	ldr	r3, [pc, #268]	; (8003344 <inputseria+0xbf4>)
 8003236:	2269      	movs	r2, #105	; 0x69
 8003238:	f8a3 24dc 	strh.w	r2, [r3, #1244]	; 0x4dc
	seria[156].interval = 988;
 800323c:	4b41      	ldr	r3, [pc, #260]	; (8003344 <inputseria+0xbf4>)
 800323e:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8003242:	4a44      	ldr	r2, [pc, #272]	; (8003354 <inputseria+0xc04>)
 8003244:	601a      	str	r2, [r3, #0]
	seria[156].waittime = 224;
 8003246:	4b3f      	ldr	r3, [pc, #252]	; (8003344 <inputseria+0xbf4>)
 8003248:	22e0      	movs	r2, #224	; 0xe0
 800324a:	f8a3 24e4 	strh.w	r2, [r3, #1252]	; 0x4e4
	seria[157].interval = 880;
 800324e:	4b3d      	ldr	r3, [pc, #244]	; (8003344 <inputseria+0xbf4>)
 8003250:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 8003254:	4a3e      	ldr	r2, [pc, #248]	; (8003350 <inputseria+0xc00>)
 8003256:	601a      	str	r2, [r3, #0]
	seria[157].waittime = 105;
 8003258:	4b3a      	ldr	r3, [pc, #232]	; (8003344 <inputseria+0xbf4>)
 800325a:	2269      	movs	r2, #105	; 0x69
 800325c:	f8a3 24ec 	strh.w	r2, [r3, #1260]	; 0x4ec
	seria[158].interval = 1047;
 8003260:	4b38      	ldr	r3, [pc, #224]	; (8003344 <inputseria+0xbf4>)
 8003262:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8003266:	4a3c      	ldr	r2, [pc, #240]	; (8003358 <inputseria+0xc08>)
 8003268:	601a      	str	r2, [r3, #0]
	seria[158].waittime = 224;
 800326a:	4b36      	ldr	r3, [pc, #216]	; (8003344 <inputseria+0xbf4>)
 800326c:	22e0      	movs	r2, #224	; 0xe0
 800326e:	f8a3 24f4 	strh.w	r2, [r3, #1268]	; 0x4f4
	seria[159].interval = 988;
 8003272:	4b34      	ldr	r3, [pc, #208]	; (8003344 <inputseria+0xbf4>)
 8003274:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
 8003278:	4a36      	ldr	r2, [pc, #216]	; (8003354 <inputseria+0xc04>)
 800327a:	601a      	str	r2, [r3, #0]
	seria[159].waittime = 105;
 800327c:	4b31      	ldr	r3, [pc, #196]	; (8003344 <inputseria+0xbf4>)
 800327e:	2269      	movs	r2, #105	; 0x69
 8003280:	f8a3 24fc 	strh.w	r2, [r3, #1276]	; 0x4fc
	seria[160].interval = 1175;
 8003284:	4b2f      	ldr	r3, [pc, #188]	; (8003344 <inputseria+0xbf4>)
 8003286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800328a:	4a34      	ldr	r2, [pc, #208]	; (800335c <inputseria+0xc0c>)
 800328c:	601a      	str	r2, [r3, #0]
	seria[160].waittime = 224;
 800328e:	4b2d      	ldr	r3, [pc, #180]	; (8003344 <inputseria+0xbf4>)
 8003290:	22e0      	movs	r2, #224	; 0xe0
 8003292:	f8a3 2504 	strh.w	r2, [r3, #1284]	; 0x504
	seria[161].interval = 1047;
 8003296:	4b2b      	ldr	r3, [pc, #172]	; (8003344 <inputseria+0xbf4>)
 8003298:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800329c:	4a2e      	ldr	r2, [pc, #184]	; (8003358 <inputseria+0xc08>)
 800329e:	601a      	str	r2, [r3, #0]
	seria[161].waittime = 105;
 80032a0:	4b28      	ldr	r3, [pc, #160]	; (8003344 <inputseria+0xbf4>)
 80032a2:	2269      	movs	r2, #105	; 0x69
 80032a4:	f8a3 250c 	strh.w	r2, [r3, #1292]	; 0x50c
	seria[162].interval = 1319;
 80032a8:	4b26      	ldr	r3, [pc, #152]	; (8003344 <inputseria+0xbf4>)
 80032aa:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80032ae:	4a2c      	ldr	r2, [pc, #176]	; (8003360 <inputseria+0xc10>)
 80032b0:	601a      	str	r2, [r3, #0]
	seria[162].waittime = 224;
 80032b2:	4b24      	ldr	r3, [pc, #144]	; (8003344 <inputseria+0xbf4>)
 80032b4:	22e0      	movs	r2, #224	; 0xe0
 80032b6:	f8a3 2514 	strh.w	r2, [r3, #1300]	; 0x514
	seria[163].interval = 1175;
 80032ba:	4b22      	ldr	r3, [pc, #136]	; (8003344 <inputseria+0xbf4>)
 80032bc:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80032c0:	4a26      	ldr	r2, [pc, #152]	; (800335c <inputseria+0xc0c>)
 80032c2:	601a      	str	r2, [r3, #0]
	seria[163].waittime = 105;
 80032c4:	4b1f      	ldr	r3, [pc, #124]	; (8003344 <inputseria+0xbf4>)
 80032c6:	2269      	movs	r2, #105	; 0x69
 80032c8:	f8a3 251c 	strh.w	r2, [r3, #1308]	; 0x51c
	seria[164].interval = 1397;
 80032cc:	4b1d      	ldr	r3, [pc, #116]	; (8003344 <inputseria+0xbf4>)
 80032ce:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80032d2:	4a24      	ldr	r2, [pc, #144]	; (8003364 <inputseria+0xc14>)
 80032d4:	601a      	str	r2, [r3, #0]
	seria[164].waittime = 224;
 80032d6:	4b1b      	ldr	r3, [pc, #108]	; (8003344 <inputseria+0xbf4>)
 80032d8:	22e0      	movs	r2, #224	; 0xe0
 80032da:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
	seria[165].interval = 1319;
 80032de:	4b19      	ldr	r3, [pc, #100]	; (8003344 <inputseria+0xbf4>)
 80032e0:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 80032e4:	4a1e      	ldr	r2, [pc, #120]	; (8003360 <inputseria+0xc10>)
 80032e6:	601a      	str	r2, [r3, #0]
	seria[165].waittime = 105;
 80032e8:	4b16      	ldr	r3, [pc, #88]	; (8003344 <inputseria+0xbf4>)
 80032ea:	2269      	movs	r2, #105	; 0x69
 80032ec:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
	seria[166].interval = 988;
 80032f0:	4b14      	ldr	r3, [pc, #80]	; (8003344 <inputseria+0xbf4>)
 80032f2:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 80032f6:	4a17      	ldr	r2, [pc, #92]	; (8003354 <inputseria+0xc04>)
 80032f8:	601a      	str	r2, [r3, #0]
	seria[166].waittime = 105;
 80032fa:	4b12      	ldr	r3, [pc, #72]	; (8003344 <inputseria+0xbf4>)
 80032fc:	2269      	movs	r2, #105	; 0x69
 80032fe:	f8a3 2534 	strh.w	r2, [r3, #1332]	; 0x534
	seria[167].interval = 1047;
 8003302:	4b10      	ldr	r3, [pc, #64]	; (8003344 <inputseria+0xbf4>)
 8003304:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8003308:	4a13      	ldr	r2, [pc, #76]	; (8003358 <inputseria+0xc08>)
 800330a:	601a      	str	r2, [r3, #0]
	seria[167].waittime = 105;
 800330c:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <inputseria+0xbf4>)
 800330e:	2269      	movs	r2, #105	; 0x69
 8003310:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
	seria[168].interval = 880;
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <inputseria+0xbf4>)
 8003316:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 800331a:	4a0d      	ldr	r2, [pc, #52]	; (8003350 <inputseria+0xc00>)
 800331c:	601a      	str	r2, [r3, #0]
	seria[168].waittime = 105;
 800331e:	4b09      	ldr	r3, [pc, #36]	; (8003344 <inputseria+0xbf4>)
 8003320:	2269      	movs	r2, #105	; 0x69
 8003322:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
	seria[169].interval = 988;
 8003326:	4b07      	ldr	r3, [pc, #28]	; (8003344 <inputseria+0xbf4>)
 8003328:	f503 63a9 	add.w	r3, r3, #1352	; 0x548
 800332c:	4a09      	ldr	r2, [pc, #36]	; (8003354 <inputseria+0xc04>)
 800332e:	601a      	str	r2, [r3, #0]
	seria[169].waittime = 2576;
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <inputseria+0xbf4>)
 8003332:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 8003336:	f8a3 254c 	strh.w	r2, [r3, #1356]	; 0x54c

}
 800333a:	bf00      	nop
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	200003f0 	.word	0x200003f0
 8003348:	442e8000 	.word	0x442e8000
 800334c:	44440000 	.word	0x44440000
 8003350:	445c0000 	.word	0x445c0000
 8003354:	44770000 	.word	0x44770000
 8003358:	4482e000 	.word	0x4482e000
 800335c:	4492e000 	.word	0x4492e000
 8003360:	44a4e000 	.word	0x44a4e000
 8003364:	44aea000 	.word	0x44aea000
 8003368:	44c40000 	.word	0x44c40000
 800336c:	43930000 	.word	0x43930000
 8003370:	43a50000 	.word	0x43a50000
 8003374:	43ae8000 	.word	0x43ae8000
 8003378:	43c40000 	.word	0x43c40000
 800337c:	43dc0000 	.word	0x43dc0000
 8003380:	43f70000 	.word	0x43f70000
 8003384:	4402c000 	.word	0x4402c000
 8003388:	4424c000 	.word	0x4424c000

0800338c <pl_timer_init>:
#include "tim.h"

volatile uint32_t g_timCount;


void pl_timer_init(void){
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8003390:	4802      	ldr	r0, [pc, #8]	; (800339c <pl_timer_init+0x10>)
 8003392:	f004 fedd 	bl	8008150 <HAL_TIM_Base_Start_IT>
}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000b18 	.word	0x20000b18

080033a0 <pl_timer_count>:

void pl_timer_count(void){
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
	 g_timCount++;
 80033a4:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <pl_timer_count+0x18>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3301      	adds	r3, #1
 80033aa:	4a03      	ldr	r2, [pc, #12]	; (80033b8 <pl_timer_count+0x18>)
 80033ac:	6013      	str	r3, [r2, #0]
}
 80033ae:	bf00      	nop
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	20000980 	.word	0x20000980

080033bc <wait_ms>:


void wait_ms(uint32_t wait_time) {
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 80033c4:	4b09      	ldr	r3, [pc, #36]	; (80033ec <wait_ms+0x30>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 80033ca:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <wait_ms+0x34>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2200      	movs	r2, #0
 80033d0:	625a      	str	r2, [r3, #36]	; 0x24
        while (g_timCount < wait_time) {
 80033d2:	bf00      	nop
 80033d4:	4b05      	ldr	r3, [pc, #20]	; (80033ec <wait_ms+0x30>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d8fa      	bhi.n	80033d4 <wait_ms+0x18>
        }

}
 80033de:	bf00      	nop
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	20000980 	.word	0x20000980
 80033f0:	20000b18 	.word	0x20000b18

080033f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80033fa:	463b      	mov	r3, r7
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	60da      	str	r2, [r3, #12]
 8003406:	611a      	str	r2, [r3, #16]
 8003408:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800340a:	4b46      	ldr	r3, [pc, #280]	; (8003524 <MX_ADC1_Init+0x130>)
 800340c:	4a46      	ldr	r2, [pc, #280]	; (8003528 <MX_ADC1_Init+0x134>)
 800340e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8003410:	4b44      	ldr	r3, [pc, #272]	; (8003524 <MX_ADC1_Init+0x130>)
 8003412:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8003416:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8003418:	4b42      	ldr	r3, [pc, #264]	; (8003524 <MX_ADC1_Init+0x130>)
 800341a:	2208      	movs	r2, #8
 800341c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800341e:	4b41      	ldr	r3, [pc, #260]	; (8003524 <MX_ADC1_Init+0x130>)
 8003420:	2200      	movs	r2, #0
 8003422:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003424:	4b3f      	ldr	r3, [pc, #252]	; (8003524 <MX_ADC1_Init+0x130>)
 8003426:	2201      	movs	r2, #1
 8003428:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800342a:	4b3e      	ldr	r3, [pc, #248]	; (8003524 <MX_ADC1_Init+0x130>)
 800342c:	2204      	movs	r2, #4
 800342e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003430:	4b3c      	ldr	r3, [pc, #240]	; (8003524 <MX_ADC1_Init+0x130>)
 8003432:	2200      	movs	r2, #0
 8003434:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003436:	4b3b      	ldr	r3, [pc, #236]	; (8003524 <MX_ADC1_Init+0x130>)
 8003438:	2200      	movs	r2, #0
 800343a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 800343c:	4b39      	ldr	r3, [pc, #228]	; (8003524 <MX_ADC1_Init+0x130>)
 800343e:	2205      	movs	r2, #5
 8003440:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003442:	4b38      	ldr	r3, [pc, #224]	; (8003524 <MX_ADC1_Init+0x130>)
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800344a:	4b36      	ldr	r3, [pc, #216]	; (8003524 <MX_ADC1_Init+0x130>)
 800344c:	2200      	movs	r2, #0
 800344e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003450:	4b34      	ldr	r3, [pc, #208]	; (8003524 <MX_ADC1_Init+0x130>)
 8003452:	2200      	movs	r2, #0
 8003454:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003456:	4b33      	ldr	r3, [pc, #204]	; (8003524 <MX_ADC1_Init+0x130>)
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800345e:	4b31      	ldr	r3, [pc, #196]	; (8003524 <MX_ADC1_Init+0x130>)
 8003460:	2200      	movs	r2, #0
 8003462:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003464:	4b2f      	ldr	r3, [pc, #188]	; (8003524 <MX_ADC1_Init+0x130>)
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800346c:	482d      	ldr	r0, [pc, #180]	; (8003524 <MX_ADC1_Init+0x130>)
 800346e:	f001 fac1 	bl	80049f4 <HAL_ADC_Init>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8003478:	f000 fb49 	bl	8003b0e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800347c:	4b2b      	ldr	r3, [pc, #172]	; (800352c <MX_ADC1_Init+0x138>)
 800347e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003480:	2306      	movs	r3, #6
 8003482:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8003484:	2301      	movs	r3, #1
 8003486:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003488:	237f      	movs	r3, #127	; 0x7f
 800348a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800348c:	2304      	movs	r3, #4
 800348e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003494:	463b      	mov	r3, r7
 8003496:	4619      	mov	r1, r3
 8003498:	4822      	ldr	r0, [pc, #136]	; (8003524 <MX_ADC1_Init+0x130>)
 800349a:	f001 fe1f 	bl	80050dc <HAL_ADC_ConfigChannel>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80034a4:	f000 fb33 	bl	8003b0e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80034a8:	4b21      	ldr	r3, [pc, #132]	; (8003530 <MX_ADC1_Init+0x13c>)
 80034aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80034ac:	230c      	movs	r3, #12
 80034ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034b0:	463b      	mov	r3, r7
 80034b2:	4619      	mov	r1, r3
 80034b4:	481b      	ldr	r0, [pc, #108]	; (8003524 <MX_ADC1_Init+0x130>)
 80034b6:	f001 fe11 	bl	80050dc <HAL_ADC_ConfigChannel>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80034c0:	f000 fb25 	bl	8003b0e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80034c4:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <MX_ADC1_Init+0x140>)
 80034c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80034c8:	2312      	movs	r3, #18
 80034ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034cc:	463b      	mov	r3, r7
 80034ce:	4619      	mov	r1, r3
 80034d0:	4814      	ldr	r0, [pc, #80]	; (8003524 <MX_ADC1_Init+0x130>)
 80034d2:	f001 fe03 	bl	80050dc <HAL_ADC_ConfigChannel>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80034dc:	f000 fb17 	bl	8003b0e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80034e0:	4b15      	ldr	r3, [pc, #84]	; (8003538 <MX_ADC1_Init+0x144>)
 80034e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80034e4:	2318      	movs	r3, #24
 80034e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034e8:	463b      	mov	r3, r7
 80034ea:	4619      	mov	r1, r3
 80034ec:	480d      	ldr	r0, [pc, #52]	; (8003524 <MX_ADC1_Init+0x130>)
 80034ee:	f001 fdf5 	bl	80050dc <HAL_ADC_ConfigChannel>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80034f8:	f000 fb09 	bl	8003b0e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80034fc:	4b0f      	ldr	r3, [pc, #60]	; (800353c <MX_ADC1_Init+0x148>)
 80034fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8003500:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003504:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003506:	463b      	mov	r3, r7
 8003508:	4619      	mov	r1, r3
 800350a:	4806      	ldr	r0, [pc, #24]	; (8003524 <MX_ADC1_Init+0x130>)
 800350c:	f001 fde6 	bl	80050dc <HAL_ADC_ConfigChannel>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8003516:	f000 fafa 	bl	8003b0e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800351a:	bf00      	nop
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20000984 	.word	0x20000984
 8003528:	50040000 	.word	0x50040000
 800352c:	43210000 	.word	0x43210000
 8003530:	3ef08000 	.word	0x3ef08000
 8003534:	32601000 	.word	0x32601000
 8003538:	2e300800 	.word	0x2e300800
 800353c:	2a000400 	.word	0x2a000400

08003540 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b0a0      	sub	sp, #128	; 0x80
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003548:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003558:	f107 0318 	add.w	r3, r7, #24
 800355c:	2254      	movs	r2, #84	; 0x54
 800355e:	2100      	movs	r1, #0
 8003560:	4618      	mov	r0, r3
 8003562:	f006 fb0f 	bl	8009b84 <memset>
  if(adcHandle->Instance==ADC1)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a47      	ldr	r2, [pc, #284]	; (8003688 <HAL_ADC_MspInit+0x148>)
 800356c:	4293      	cmp	r3, r2
 800356e:	f040 8087 	bne.w	8003680 <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003572:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003576:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003578:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800357c:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800357e:	2303      	movs	r3, #3
 8003580:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 3;
 8003582:	2303      	movs	r3, #3
 8003584:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8003586:	2310      	movs	r3, #16
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800358a:	2307      	movs	r3, #7
 800358c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800358e:	2302      	movs	r3, #2
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003592:	2302      	movs	r3, #2
 8003594:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003596:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800359a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800359c:	f107 0318 	add.w	r3, r7, #24
 80035a0:	4618      	mov	r0, r3
 80035a2:	f004 fa95 	bl	8007ad0 <HAL_RCCEx_PeriphCLKConfig>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80035ac:	f000 faaf 	bl	8003b0e <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80035b0:	4b36      	ldr	r3, [pc, #216]	; (800368c <HAL_ADC_MspInit+0x14c>)
 80035b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b4:	4a35      	ldr	r2, [pc, #212]	; (800368c <HAL_ADC_MspInit+0x14c>)
 80035b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80035ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035bc:	4b33      	ldr	r3, [pc, #204]	; (800368c <HAL_ADC_MspInit+0x14c>)
 80035be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c8:	4b30      	ldr	r3, [pc, #192]	; (800368c <HAL_ADC_MspInit+0x14c>)
 80035ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035cc:	4a2f      	ldr	r2, [pc, #188]	; (800368c <HAL_ADC_MspInit+0x14c>)
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035d4:	4b2d      	ldr	r3, [pc, #180]	; (800368c <HAL_ADC_MspInit+0x14c>)
 80035d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035e0:	4b2a      	ldr	r3, [pc, #168]	; (800368c <HAL_ADC_MspInit+0x14c>)
 80035e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e4:	4a29      	ldr	r2, [pc, #164]	; (800368c <HAL_ADC_MspInit+0x14c>)
 80035e6:	f043 0302 	orr.w	r3, r3, #2
 80035ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035ec:	4b27      	ldr	r3, [pc, #156]	; (800368c <HAL_ADC_MspInit+0x14c>)
 80035ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = SENSOR_4_Pin|SENSOR_3_Pin|SENSOR_2_Pin;
 80035f8:	23e0      	movs	r3, #224	; 0xe0
 80035fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80035fc:	230b      	movs	r3, #11
 80035fe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003600:	2300      	movs	r3, #0
 8003602:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003604:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003608:	4619      	mov	r1, r3
 800360a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800360e:	f002 fe9f 	bl	8006350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR_1_Pin|BATTERY_Pin;
 8003612:	2303      	movs	r3, #3
 8003614:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003616:	230b      	movs	r3, #11
 8003618:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361a:	2300      	movs	r3, #0
 800361c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800361e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003622:	4619      	mov	r1, r3
 8003624:	481a      	ldr	r0, [pc, #104]	; (8003690 <HAL_ADC_MspInit+0x150>)
 8003626:	f002 fe93 	bl	8006350 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800362a:	4b1a      	ldr	r3, [pc, #104]	; (8003694 <HAL_ADC_MspInit+0x154>)
 800362c:	4a1a      	ldr	r2, [pc, #104]	; (8003698 <HAL_ADC_MspInit+0x158>)
 800362e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003630:	4b18      	ldr	r3, [pc, #96]	; (8003694 <HAL_ADC_MspInit+0x154>)
 8003632:	2200      	movs	r2, #0
 8003634:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003636:	4b17      	ldr	r3, [pc, #92]	; (8003694 <HAL_ADC_MspInit+0x154>)
 8003638:	2200      	movs	r2, #0
 800363a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800363c:	4b15      	ldr	r3, [pc, #84]	; (8003694 <HAL_ADC_MspInit+0x154>)
 800363e:	2200      	movs	r2, #0
 8003640:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003642:	4b14      	ldr	r3, [pc, #80]	; (8003694 <HAL_ADC_MspInit+0x154>)
 8003644:	2280      	movs	r2, #128	; 0x80
 8003646:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003648:	4b12      	ldr	r3, [pc, #72]	; (8003694 <HAL_ADC_MspInit+0x154>)
 800364a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800364e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003650:	4b10      	ldr	r3, [pc, #64]	; (8003694 <HAL_ADC_MspInit+0x154>)
 8003652:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003656:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003658:	4b0e      	ldr	r3, [pc, #56]	; (8003694 <HAL_ADC_MspInit+0x154>)
 800365a:	2200      	movs	r2, #0
 800365c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800365e:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <HAL_ADC_MspInit+0x154>)
 8003660:	2200      	movs	r2, #0
 8003662:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003664:	480b      	ldr	r0, [pc, #44]	; (8003694 <HAL_ADC_MspInit+0x154>)
 8003666:	f002 fc3d 	bl	8005ee4 <HAL_DMA_Init>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8003670:	f000 fa4d 	bl	8003b0e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a07      	ldr	r2, [pc, #28]	; (8003694 <HAL_ADC_MspInit+0x154>)
 8003678:	64da      	str	r2, [r3, #76]	; 0x4c
 800367a:	4a06      	ldr	r2, [pc, #24]	; (8003694 <HAL_ADC_MspInit+0x154>)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003680:	bf00      	nop
 8003682:	3780      	adds	r7, #128	; 0x80
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	50040000 	.word	0x50040000
 800368c:	40021000 	.word	0x40021000
 8003690:	48000400 	.word	0x48000400
 8003694:	200009e8 	.word	0x200009e8
 8003698:	40020008 	.word	0x40020008

0800369c <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 80036a4:	f7fe ff0c 	bl	80024c0 <pl_callback_getSensor>

}
 80036a8:	bf00      	nop
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80036b6:	4b0c      	ldr	r3, [pc, #48]	; (80036e8 <MX_DMA_Init+0x38>)
 80036b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ba:	4a0b      	ldr	r2, [pc, #44]	; (80036e8 <MX_DMA_Init+0x38>)
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	6493      	str	r3, [r2, #72]	; 0x48
 80036c2:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <MX_DMA_Init+0x38>)
 80036c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	607b      	str	r3, [r7, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80036ce:	2200      	movs	r2, #0
 80036d0:	2101      	movs	r1, #1
 80036d2:	200b      	movs	r0, #11
 80036d4:	f002 fbcf 	bl	8005e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80036d8:	200b      	movs	r0, #11
 80036da:	f002 fbe8 	bl	8005eae <HAL_NVIC_EnableIRQ>

}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000

080036ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f2:	f107 030c 	add.w	r3, r7, #12
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	605a      	str	r2, [r3, #4]
 80036fc:	609a      	str	r2, [r3, #8]
 80036fe:	60da      	str	r2, [r3, #12]
 8003700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003702:	4b39      	ldr	r3, [pc, #228]	; (80037e8 <MX_GPIO_Init+0xfc>)
 8003704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003706:	4a38      	ldr	r2, [pc, #224]	; (80037e8 <MX_GPIO_Init+0xfc>)
 8003708:	f043 0304 	orr.w	r3, r3, #4
 800370c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800370e:	4b36      	ldr	r3, [pc, #216]	; (80037e8 <MX_GPIO_Init+0xfc>)
 8003710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	60bb      	str	r3, [r7, #8]
 8003718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800371a:	4b33      	ldr	r3, [pc, #204]	; (80037e8 <MX_GPIO_Init+0xfc>)
 800371c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371e:	4a32      	ldr	r2, [pc, #200]	; (80037e8 <MX_GPIO_Init+0xfc>)
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003726:	4b30      	ldr	r3, [pc, #192]	; (80037e8 <MX_GPIO_Init+0xfc>)
 8003728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	607b      	str	r3, [r7, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003732:	4b2d      	ldr	r3, [pc, #180]	; (80037e8 <MX_GPIO_Init+0xfc>)
 8003734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003736:	4a2c      	ldr	r2, [pc, #176]	; (80037e8 <MX_GPIO_Init+0xfc>)
 8003738:	f043 0302 	orr.w	r3, r3, #2
 800373c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800373e:	4b2a      	ldr	r3, [pc, #168]	; (80037e8 <MX_GPIO_Init+0xfc>)
 8003740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSORLED_1_Pin|SENSORLED_2_Pin, GPIO_PIN_RESET);
 800374a:	2200      	movs	r2, #0
 800374c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003750:	4826      	ldr	r0, [pc, #152]	; (80037ec <MX_GPIO_Init+0x100>)
 8003752:	f002 ff7f 	bl	8006654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_ENABLE_Pin|MOTOR_CW_CCW_L_Pin, GPIO_PIN_RESET);
 8003756:	2200      	movs	r2, #0
 8003758:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800375c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003760:	f002 ff78 	bl	8006654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INTERFACELED_Pin|MOTOR_CW_CCW_R_Pin|MD_RESET_Pin, GPIO_PIN_RESET);
 8003764:	2200      	movs	r2, #0
 8003766:	2138      	movs	r1, #56	; 0x38
 8003768:	4821      	ldr	r0, [pc, #132]	; (80037f0 <MX_GPIO_Init+0x104>)
 800376a:	f002 ff73 	bl	8006654 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SENSORLED_1_Pin|SENSORLED_2_Pin;
 800376e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003772:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003774:	2301      	movs	r3, #1
 8003776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800377c:	2300      	movs	r3, #0
 800377e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003780:	f107 030c 	add.w	r3, r7, #12
 8003784:	4619      	mov	r1, r3
 8003786:	4819      	ldr	r0, [pc, #100]	; (80037ec <MX_GPIO_Init+0x100>)
 8003788:	f002 fde2 	bl	8006350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_ENABLE_Pin|MOTOR_CW_CCW_L_Pin;
 800378c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003790:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003792:	2301      	movs	r3, #1
 8003794:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800379a:	2300      	movs	r3, #0
 800379c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800379e:	f107 030c 	add.w	r3, r7, #12
 80037a2:	4619      	mov	r1, r3
 80037a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037a8:	f002 fdd2 	bl	8006350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = INTERFACELED_Pin|MOTOR_CW_CCW_R_Pin|MD_RESET_Pin;
 80037ac:	2338      	movs	r3, #56	; 0x38
 80037ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037b0:	2301      	movs	r3, #1
 80037b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b8:	2300      	movs	r3, #0
 80037ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037bc:	f107 030c 	add.w	r3, r7, #12
 80037c0:	4619      	mov	r1, r3
 80037c2:	480b      	ldr	r0, [pc, #44]	; (80037f0 <MX_GPIO_Init+0x104>)
 80037c4:	f002 fdc4 	bl	8006350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SWITCH_1_Pin|SWITCH_2_Pin;
 80037c8:	23c0      	movs	r3, #192	; 0xc0
 80037ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037cc:	2300      	movs	r3, #0
 80037ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037d0:	2301      	movs	r3, #1
 80037d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037d4:	f107 030c 	add.w	r3, r7, #12
 80037d8:	4619      	mov	r1, r3
 80037da:	4805      	ldr	r0, [pc, #20]	; (80037f0 <MX_GPIO_Init+0x104>)
 80037dc:	f002 fdb8 	bl	8006350 <HAL_GPIO_Init>

}
 80037e0:	bf00      	nop
 80037e2:	3720      	adds	r7, #32
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40021000 	.word	0x40021000
 80037ec:	48000800 	.word	0x48000800
 80037f0:	48000400 	.word	0x48000400

080037f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80037f8:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <MX_I2C1_Init+0x74>)
 80037fa:	4a1c      	ldr	r2, [pc, #112]	; (800386c <MX_I2C1_Init+0x78>)
 80037fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80037fe:	4b1a      	ldr	r3, [pc, #104]	; (8003868 <MX_I2C1_Init+0x74>)
 8003800:	4a1b      	ldr	r2, [pc, #108]	; (8003870 <MX_I2C1_Init+0x7c>)
 8003802:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003804:	4b18      	ldr	r3, [pc, #96]	; (8003868 <MX_I2C1_Init+0x74>)
 8003806:	2200      	movs	r2, #0
 8003808:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800380a:	4b17      	ldr	r3, [pc, #92]	; (8003868 <MX_I2C1_Init+0x74>)
 800380c:	2201      	movs	r2, #1
 800380e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003810:	4b15      	ldr	r3, [pc, #84]	; (8003868 <MX_I2C1_Init+0x74>)
 8003812:	2200      	movs	r2, #0
 8003814:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003816:	4b14      	ldr	r3, [pc, #80]	; (8003868 <MX_I2C1_Init+0x74>)
 8003818:	2200      	movs	r2, #0
 800381a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800381c:	4b12      	ldr	r3, [pc, #72]	; (8003868 <MX_I2C1_Init+0x74>)
 800381e:	2200      	movs	r2, #0
 8003820:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003822:	4b11      	ldr	r3, [pc, #68]	; (8003868 <MX_I2C1_Init+0x74>)
 8003824:	2200      	movs	r2, #0
 8003826:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003828:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <MX_I2C1_Init+0x74>)
 800382a:	2200      	movs	r2, #0
 800382c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800382e:	480e      	ldr	r0, [pc, #56]	; (8003868 <MX_I2C1_Init+0x74>)
 8003830:	f002 ff28 	bl	8006684 <HAL_I2C_Init>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800383a:	f000 f968 	bl	8003b0e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800383e:	2100      	movs	r1, #0
 8003840:	4809      	ldr	r0, [pc, #36]	; (8003868 <MX_I2C1_Init+0x74>)
 8003842:	f003 fa23 	bl	8006c8c <HAL_I2CEx_ConfigAnalogFilter>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800384c:	f000 f95f 	bl	8003b0e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003850:	2100      	movs	r1, #0
 8003852:	4805      	ldr	r0, [pc, #20]	; (8003868 <MX_I2C1_Init+0x74>)
 8003854:	f003 fa65 	bl	8006d22 <HAL_I2CEx_ConfigDigitalFilter>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800385e:	f000 f956 	bl	8003b0e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20000a30 	.word	0x20000a30
 800386c:	40005400 	.word	0x40005400
 8003870:	10909cec 	.word	0x10909cec

08003874 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b09e      	sub	sp, #120	; 0x78
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800387c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	605a      	str	r2, [r3, #4]
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	60da      	str	r2, [r3, #12]
 800388a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800388c:	f107 0310 	add.w	r3, r7, #16
 8003890:	2254      	movs	r2, #84	; 0x54
 8003892:	2100      	movs	r1, #0
 8003894:	4618      	mov	r0, r3
 8003896:	f006 f975 	bl	8009b84 <memset>
  if(i2cHandle->Instance==I2C1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a1f      	ldr	r2, [pc, #124]	; (800391c <HAL_I2C_MspInit+0xa8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d137      	bne.n	8003914 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80038a4:	2340      	movs	r3, #64	; 0x40
 80038a6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80038a8:	2300      	movs	r3, #0
 80038aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038ac:	f107 0310 	add.w	r3, r7, #16
 80038b0:	4618      	mov	r0, r3
 80038b2:	f004 f90d 	bl	8007ad0 <HAL_RCCEx_PeriphCLKConfig>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80038bc:	f000 f927 	bl	8003b0e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c0:	4b17      	ldr	r3, [pc, #92]	; (8003920 <HAL_I2C_MspInit+0xac>)
 80038c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c4:	4a16      	ldr	r2, [pc, #88]	; (8003920 <HAL_I2C_MspInit+0xac>)
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038cc:	4b14      	ldr	r3, [pc, #80]	; (8003920 <HAL_I2C_MspInit+0xac>)
 80038ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80038d8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80038dc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038de:	2312      	movs	r3, #18
 80038e0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038e2:	2301      	movs	r3, #1
 80038e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e6:	2303      	movs	r3, #3
 80038e8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80038ea:	2304      	movs	r3, #4
 80038ec:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80038f2:	4619      	mov	r1, r3
 80038f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038f8:	f002 fd2a 	bl	8006350 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038fc:	4b08      	ldr	r3, [pc, #32]	; (8003920 <HAL_I2C_MspInit+0xac>)
 80038fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003900:	4a07      	ldr	r2, [pc, #28]	; (8003920 <HAL_I2C_MspInit+0xac>)
 8003902:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003906:	6593      	str	r3, [r2, #88]	; 0x58
 8003908:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_I2C_MspInit+0xac>)
 800390a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003910:	60bb      	str	r3, [r7, #8]
 8003912:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003914:	bf00      	nop
 8003916:	3778      	adds	r7, #120	; 0x78
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40005400 	.word	0x40005400
 8003920:	40021000 	.word	0x40021000
 8003924:	00000000 	.word	0x00000000

08003928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800392e:	f000 fdb2 	bl	8004496 <HAL_Init>
  /* USER CODE BEGIN Init */
 // setbuf(stdout, NULL);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003932:	f000 f89d 	bl	8003a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003936:	f7ff fed9 	bl	80036ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800393a:	f000 fce9 	bl	8004310 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800393e:	f000 fb31 	bl	8003fa4 <MX_TIM6_Init>
  MX_I2C1_Init();
 8003942:	f7ff ff57 	bl	80037f4 <MX_I2C1_Init>
  MX_DMA_Init();
 8003946:	f7ff feb3 	bl	80036b0 <MX_DMA_Init>
  MX_ADC1_Init();
 800394a:	f7ff fd53 	bl	80033f4 <MX_ADC1_Init>
  MX_TIM15_Init();
 800394e:	f000 fb5f 	bl	8004010 <MX_TIM15_Init>
  MX_TIM1_Init();
 8003952:	f000 fa3d 	bl	8003dd0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003956:	f000 facb 	bl	8003ef0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  pl_motor_init();
 800395a:	f7fe fbdb 	bl	8002114 <pl_motor_init>
  pl_speaker_init();
 800395e:	f7fe fe9d 	bl	800269c <pl_speaker_init>
  pl_timer_init();
 8003962:	f7ff fd13 	bl	800338c <pl_timer_init>
  pl_lcd_init();
 8003966:	f7fe fb8c 	bl	8002082 <pl_lcd_init>
  motor_init();
 800396a:	f7fd fb59 	bl	8001020 <motor_init>

  pl_lcd_puts("Hello");
 800396e:	4836      	ldr	r0, [pc, #216]	; (8003a48 <main+0x120>)
 8003970:	f7fe fb72 	bl	8002058 <pl_lcd_puts>
  pl_lcd_pos(1, 0);
 8003974:	2100      	movs	r1, #0
 8003976:	2001      	movs	r0, #1
 8003978:	f7fe fba9 	bl	80020ce <pl_lcd_pos>
  pl_lcd_puts("   STM32");
 800397c:	4833      	ldr	r0, [pc, #204]	; (8003a4c <main+0x124>)
 800397e:	f7fe fb6b 	bl	8002058 <pl_lcd_puts>
  HAL_Delay(500);
 8003982:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003986:	f000 fdfb 	bl	8004580 <HAL_Delay>
  pl_lcd_clear();
 800398a:	f7fe fbbb 	bl	8002104 <pl_lcd_clear>
  pl_lcd_pos(0, 0);
 800398e:	2100      	movs	r1, #0
 8003990:	2000      	movs	r0, #0
 8003992:	f7fe fb9c 	bl	80020ce <pl_lcd_pos>
  pl_lcd_puts("Mice");
 8003996:	482e      	ldr	r0, [pc, #184]	; (8003a50 <main+0x128>)
 8003998:	f7fe fb5e 	bl	8002058 <pl_lcd_puts>
  pl_lcd_pos(1, 0);
 800399c:	2100      	movs	r1, #0
 800399e:	2001      	movs	r0, #1
 80039a0:	f7fe fb95 	bl	80020ce <pl_lcd_pos>
  pl_lcd_puts("aaa");
 80039a4:	482b      	ldr	r0, [pc, #172]	; (8003a54 <main+0x12c>)
 80039a6:	f7fe fb57 	bl	8002058 <pl_lcd_puts>
  HAL_Delay(100);
 80039aa:	2064      	movs	r0, #100	; 0x64
 80039ac:	f000 fde8 	bl	8004580 <HAL_Delay>

  if(pl_getbatt() < LIPO_LIMIT){
 80039b0:	f7fe fd2a 	bl	8002408 <pl_getbatt>
 80039b4:	ee10 3a10 	vmov	r3, s0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fc fdc5 	bl	8000548 <__aeabi_f2d>
 80039be:	a320      	add	r3, pc, #128	; (adr r3, 8003a40 <main+0x118>)
 80039c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c4:	f7fd f88a 	bl	8000adc <__aeabi_dcmplt>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d013      	beq.n	80039f6 <main+0xce>
	  pl_lcd_clear();
 80039ce:	f7fe fb99 	bl	8002104 <pl_lcd_clear>
	  pl_lcd_pos(0, 0);
 80039d2:	2100      	movs	r1, #0
 80039d4:	2000      	movs	r0, #0
 80039d6:	f7fe fb7a 	bl	80020ce <pl_lcd_pos>
	  pl_lcd_puts("LIPO");
 80039da:	481f      	ldr	r0, [pc, #124]	; (8003a58 <main+0x130>)
 80039dc:	f7fe fb3c 	bl	8002058 <pl_lcd_puts>
	  pl_lcd_pos(1, 0);
 80039e0:	2100      	movs	r1, #0
 80039e2:	2001      	movs	r0, #1
 80039e4:	f7fe fb73 	bl	80020ce <pl_lcd_pos>
	  pl_lcd_puts("error");
 80039e8:	481c      	ldr	r0, [pc, #112]	; (8003a5c <main+0x134>)
 80039ea:	f7fe fb35 	bl	8002058 <pl_lcd_puts>
	  HAL_Delay(1000);
 80039ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039f2:	f000 fdc5 	bl	8004580 <HAL_Delay>
  }

  uint16_t cnt = 0;
 80039f6:	2300      	movs	r3, #0
 80039f8:	80fb      	strh	r3, [r7, #6]
  sensor_mode=1;
 80039fa:	4b19      	ldr	r3, [pc, #100]	; (8003a60 <main+0x138>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	701a      	strb	r2, [r3, #0]
//	 lcd_pos(1, 0);
//	 lcd_puts(strBuffer);
// sensor test
//     HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer) / sizeof(uint16_t));
//	 printf("BATT=%f\n",g_V_batt);
     printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d\n", g_sensor[0][0],g_sensor[1][0],g_sensor[2][0],g_sensor[3][0]);
 8003a00:	4b18      	ldr	r3, [pc, #96]	; (8003a64 <main+0x13c>)
 8003a02:	6819      	ldr	r1, [r3, #0]
 8003a04:	4b17      	ldr	r3, [pc, #92]	; (8003a64 <main+0x13c>)
 8003a06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a08:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <main+0x13c>)
 8003a0a:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 8003a0e:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <main+0x13c>)
 8003a10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	4603      	mov	r3, r0
 8003a18:	4813      	ldr	r0, [pc, #76]	; (8003a68 <main+0x140>)
 8003a1a:	f006 fd25 	bl	800a468 <iprintf>
     wait_ms(500);
 8003a1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a22:	f7ff fccb 	bl	80033bc <wait_ms>
//	 	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
//	 	HAL_GPIO_WritePin(MOTOR_ENABLE_GPIO_Port,MOTOR_ENABLE_Pin,GPIO_PIN_RESET);
//	 	HAL_Delay(1000);
//	  }

	  if (HAL_GPIO_ReadPin(SWITCH_1_GPIO_Port,SWITCH_1_Pin)==0){
 8003a26:	2140      	movs	r1, #64	; 0x40
 8003a28:	4810      	ldr	r0, [pc, #64]	; (8003a6c <main+0x144>)
 8003a2a:	f002 fdfb 	bl	8006624 <HAL_GPIO_ReadPin>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e5      	bne.n	8003a00 <main+0xd8>
// test_speaker_music
    //pl_test_speaker();
// test_motor
//     pl_test_motor();

      control_test_motor();
 8003a34:	f7fd fa8a 	bl	8000f4c <control_test_motor>
     printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d\n", g_sensor[0][0],g_sensor[1][0],g_sensor[2][0],g_sensor[3][0]);
 8003a38:	e7e2      	b.n	8003a00 <main+0xd8>
 8003a3a:	bf00      	nop
 8003a3c:	f3af 8000 	nop.w
 8003a40:	9999999a 	.word	0x9999999a
 8003a44:	40269999 	.word	0x40269999
 8003a48:	0800c608 	.word	0x0800c608
 8003a4c:	0800c610 	.word	0x0800c610
 8003a50:	0800c61c 	.word	0x0800c61c
 8003a54:	0800c624 	.word	0x0800c624
 8003a58:	0800c628 	.word	0x0800c628
 8003a5c:	0800c630 	.word	0x0800c630
 8003a60:	200003db 	.word	0x200003db
 8003a64:	2000023c 	.word	0x2000023c
 8003a68:	0800c638 	.word	0x0800c638
 8003a6c:	48000400 	.word	0x48000400

08003a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b096      	sub	sp, #88	; 0x58
 8003a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a76:	f107 0314 	add.w	r3, r7, #20
 8003a7a:	2244      	movs	r2, #68	; 0x44
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f006 f880 	bl	8009b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a84:	463b      	mov	r3, r7
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	605a      	str	r2, [r3, #4]
 8003a8c:	609a      	str	r2, [r3, #8]
 8003a8e:	60da      	str	r2, [r3, #12]
 8003a90:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003a92:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003a96:	f003 f99f 	bl	8006dd8 <HAL_PWREx_ControlVoltageScaling>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003aa0:	f000 f835 	bl	8003b0e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003aa8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003aac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 3;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003aba:	2328      	movs	r3, #40	; 0x28
 8003abc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003abe:	2307      	movs	r3, #7
 8003ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003aca:	f107 0314 	add.w	r3, r7, #20
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f003 f9d8 	bl	8006e84 <HAL_RCC_OscConfig>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8003ada:	f000 f818 	bl	8003b0e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ade:	230f      	movs	r3, #15
 8003ae0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003aee:	2300      	movs	r3, #0
 8003af0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003af2:	463b      	mov	r3, r7
 8003af4:	2104      	movs	r1, #4
 8003af6:	4618      	mov	r0, r3
 8003af8:	f003 fde4 	bl	80076c4 <HAL_RCC_ClockConfig>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003b02:	f000 f804 	bl	8003b0e <Error_Handler>
  }
}
 8003b06:	bf00      	nop
 8003b08:	3758      	adds	r7, #88	; 0x58
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b12:	b672      	cpsid	i
}
 8003b14:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b16:	e7fe      	b.n	8003b16 <Error_Handler+0x8>

08003b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b1e:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <HAL_MspInit+0x44>)
 8003b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b22:	4a0e      	ldr	r2, [pc, #56]	; (8003b5c <HAL_MspInit+0x44>)
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	6613      	str	r3, [r2, #96]	; 0x60
 8003b2a:	4b0c      	ldr	r3, [pc, #48]	; (8003b5c <HAL_MspInit+0x44>)
 8003b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	607b      	str	r3, [r7, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b36:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <HAL_MspInit+0x44>)
 8003b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3a:	4a08      	ldr	r2, [pc, #32]	; (8003b5c <HAL_MspInit+0x44>)
 8003b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b40:	6593      	str	r3, [r2, #88]	; 0x58
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_MspInit+0x44>)
 8003b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000

08003b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b64:	e7fe      	b.n	8003b64 <NMI_Handler+0x4>

08003b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b66:	b480      	push	{r7}
 8003b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b6a:	e7fe      	b.n	8003b6a <HardFault_Handler+0x4>

08003b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b70:	e7fe      	b.n	8003b70 <MemManage_Handler+0x4>

08003b72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b72:	b480      	push	{r7}
 8003b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b76:	e7fe      	b.n	8003b76 <BusFault_Handler+0x4>

08003b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b7c:	e7fe      	b.n	8003b7c <UsageFault_Handler+0x4>

08003b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b90:	bf00      	nop
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b9e:	bf00      	nop
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bac:	f000 fcc8 	bl	8004540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bb0:	bf00      	nop
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003bb8:	4802      	ldr	r0, [pc, #8]	; (8003bc4 <DMA1_Channel1_IRQHandler+0x10>)
 8003bba:	f002 fae9 	bl	8006190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	200009e8 	.word	0x200009e8

08003bc8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	  pl_interrupt_motor_count_L();
 8003bcc:	f7fe fb74 	bl	80022b8 <pl_interrupt_motor_count_L>
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003bd0:	4802      	ldr	r0, [pc, #8]	; (8003bdc <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003bd2:	f004 fccf 	bl	8008574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003bd6:	bf00      	nop
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20000a80 	.word	0x20000a80

08003be0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	  pl_interrupt_motor_count_R();
 8003be4:	f7fe fb94 	bl	8002310 <pl_interrupt_motor_count_R>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003be8:	4802      	ldr	r0, [pc, #8]	; (8003bf4 <TIM2_IRQHandler+0x14>)
 8003bea:	f004 fcc3 	bl	8008574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003bee:	bf00      	nop
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000acc 	.word	0x20000acc

08003bf8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003bfc:	4805      	ldr	r0, [pc, #20]	; (8003c14 <TIM6_DAC_IRQHandler+0x1c>)
 8003bfe:	f004 fcb9 	bl	8008574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  pl_timer_count();
 8003c02:	f7ff fbcd 	bl	80033a0 <pl_timer_count>
  pl_interupt_getSensor();
 8003c06:	f7fe fd35 	bl	8002674 <pl_interupt_getSensor>
  interrupt_Motor();
 8003c0a:	f7fd fa1d 	bl	8001048 <interrupt_Motor>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000b18 	.word	0x20000b18

08003c18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
	return 1;
 8003c1c:	2301      	movs	r3, #1
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <_kill>:

int _kill(int pid, int sig)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c32:	f005 ff7d 	bl	8009b30 <__errno>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2216      	movs	r2, #22
 8003c3a:	601a      	str	r2, [r3, #0]
	return -1;
 8003c3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <_exit>:

void _exit (int status)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c50:	f04f 31ff 	mov.w	r1, #4294967295
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff ffe7 	bl	8003c28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c5a:	e7fe      	b.n	8003c5a <_exit+0x12>

08003c5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c68:	2300      	movs	r3, #0
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	e00a      	b.n	8003c84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c6e:	f3af 8000 	nop.w
 8003c72:	4601      	mov	r1, r0
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	60ba      	str	r2, [r7, #8]
 8003c7a:	b2ca      	uxtb	r2, r1
 8003c7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	3301      	adds	r3, #1
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	dbf0      	blt.n	8003c6e <_read+0x12>
	}

return len;
 8003c8c:	687b      	ldr	r3, [r7, #4]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	e00a      	b.n	8003cc0 <_write+0x28>
	{
		HAL_UART_Transmit(&huart2, ptr++, 1, 1);
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	1c4b      	adds	r3, r1, #1
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	4807      	ldr	r0, [pc, #28]	; (8003cd4 <_write+0x3c>)
 8003cb6:	f005 fb11 	bl	80092dc <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	dbf0      	blt.n	8003caa <_write+0x12>
	}
	return len;
 8003cc8:	687b      	ldr	r3, [r7, #4]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	20000bb0 	.word	0x20000bb0

08003cd8 <_close>:

int _close(int file)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
	return -1;
 8003ce0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d00:	605a      	str	r2, [r3, #4]
	return 0;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <_isatty>:

int _isatty(int file)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
	return 1;
 8003d18:	2301      	movs	r3, #1
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b085      	sub	sp, #20
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	607a      	str	r2, [r7, #4]
	return 0;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d48:	4a14      	ldr	r2, [pc, #80]	; (8003d9c <_sbrk+0x5c>)
 8003d4a:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <_sbrk+0x60>)
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d54:	4b13      	ldr	r3, [pc, #76]	; (8003da4 <_sbrk+0x64>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d102      	bne.n	8003d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d5c:	4b11      	ldr	r3, [pc, #68]	; (8003da4 <_sbrk+0x64>)
 8003d5e:	4a12      	ldr	r2, [pc, #72]	; (8003da8 <_sbrk+0x68>)
 8003d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d62:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <_sbrk+0x64>)
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4413      	add	r3, r2
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d207      	bcs.n	8003d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d70:	f005 fede 	bl	8009b30 <__errno>
 8003d74:	4603      	mov	r3, r0
 8003d76:	220c      	movs	r2, #12
 8003d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d7e:	e009      	b.n	8003d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d80:	4b08      	ldr	r3, [pc, #32]	; (8003da4 <_sbrk+0x64>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d86:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <_sbrk+0x64>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	4a05      	ldr	r2, [pc, #20]	; (8003da4 <_sbrk+0x64>)
 8003d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d92:	68fb      	ldr	r3, [r7, #12]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	20010000 	.word	0x20010000
 8003da0:	00000400 	.word	0x00000400
 8003da4:	20000a7c 	.word	0x20000a7c
 8003da8:	20000c48 	.word	0x20000c48

08003dac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <SystemInit+0x20>)
 8003db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db6:	4a05      	ldr	r2, [pc, #20]	; (8003dcc <SystemInit+0x20>)
 8003db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003dc0:	bf00      	nop
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b096      	sub	sp, #88	; 0x58
 8003dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dd6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	605a      	str	r2, [r3, #4]
 8003de0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003de2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	605a      	str	r2, [r3, #4]
 8003dec:	609a      	str	r2, [r3, #8]
 8003dee:	60da      	str	r2, [r3, #12]
 8003df0:	611a      	str	r2, [r3, #16]
 8003df2:	615a      	str	r2, [r3, #20]
 8003df4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003df6:	1d3b      	adds	r3, r7, #4
 8003df8:	222c      	movs	r2, #44	; 0x2c
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f005 fec1 	bl	8009b84 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e02:	4b39      	ldr	r3, [pc, #228]	; (8003ee8 <MX_TIM1_Init+0x118>)
 8003e04:	4a39      	ldr	r2, [pc, #228]	; (8003eec <MX_TIM1_Init+0x11c>)
 8003e06:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8003e08:	4b37      	ldr	r3, [pc, #220]	; (8003ee8 <MX_TIM1_Init+0x118>)
 8003e0a:	2207      	movs	r2, #7
 8003e0c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e0e:	4b36      	ldr	r3, [pc, #216]	; (8003ee8 <MX_TIM1_Init+0x118>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8003e14:	4b34      	ldr	r3, [pc, #208]	; (8003ee8 <MX_TIM1_Init+0x118>)
 8003e16:	f242 720f 	movw	r2, #9999	; 0x270f
 8003e1a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e1c:	4b32      	ldr	r3, [pc, #200]	; (8003ee8 <MX_TIM1_Init+0x118>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e22:	4b31      	ldr	r3, [pc, #196]	; (8003ee8 <MX_TIM1_Init+0x118>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e28:	4b2f      	ldr	r3, [pc, #188]	; (8003ee8 <MX_TIM1_Init+0x118>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e2e:	482e      	ldr	r0, [pc, #184]	; (8003ee8 <MX_TIM1_Init+0x118>)
 8003e30:	f004 f9e2 	bl	80081f8 <HAL_TIM_PWM_Init>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003e3a:	f7ff fe68 	bl	8003b0e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003e42:	2300      	movs	r3, #0
 8003e44:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e46:	2300      	movs	r3, #0
 8003e48:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4825      	ldr	r0, [pc, #148]	; (8003ee8 <MX_TIM1_Init+0x118>)
 8003e52:	f005 f8f9 	bl	8009048 <HAL_TIMEx_MasterConfigSynchronization>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003e5c:	f7ff fe57 	bl	8003b0e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e60:	2360      	movs	r3, #96	; 0x60
 8003e62:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 5000-1;
 8003e64:	f241 3387 	movw	r3, #4999	; 0x1387
 8003e68:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e72:	2300      	movs	r3, #0
 8003e74:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003e76:	2300      	movs	r3, #0
 8003e78:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e82:	2200      	movs	r2, #0
 8003e84:	4619      	mov	r1, r3
 8003e86:	4818      	ldr	r0, [pc, #96]	; (8003ee8 <MX_TIM1_Init+0x118>)
 8003e88:	f004 fc94 	bl	80087b4 <HAL_TIM_PWM_ConfigChannel>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8003e92:	f7ff fe3c 	bl	8003b0e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003e96:	2300      	movs	r3, #0
 8003e98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003eaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003eae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003eb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003ec6:	1d3b      	adds	r3, r7, #4
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4807      	ldr	r0, [pc, #28]	; (8003ee8 <MX_TIM1_Init+0x118>)
 8003ecc:	f005 f922 	bl	8009114 <HAL_TIMEx_ConfigBreakDeadTime>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8003ed6:	f7ff fe1a 	bl	8003b0e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003eda:	4803      	ldr	r0, [pc, #12]	; (8003ee8 <MX_TIM1_Init+0x118>)
 8003edc:	f000 f998 	bl	8004210 <HAL_TIM_MspPostInit>

}
 8003ee0:	bf00      	nop
 8003ee2:	3758      	adds	r7, #88	; 0x58
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20000a80 	.word	0x20000a80
 8003eec:	40012c00 	.word	0x40012c00

08003ef0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08a      	sub	sp, #40	; 0x28
 8003ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ef6:	f107 031c 	add.w	r3, r7, #28
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	605a      	str	r2, [r3, #4]
 8003f00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f02:	463b      	mov	r3, r7
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	605a      	str	r2, [r3, #4]
 8003f0a:	609a      	str	r2, [r3, #8]
 8003f0c:	60da      	str	r2, [r3, #12]
 8003f0e:	611a      	str	r2, [r3, #16]
 8003f10:	615a      	str	r2, [r3, #20]
 8003f12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f14:	4b22      	ldr	r3, [pc, #136]	; (8003fa0 <MX_TIM2_Init+0xb0>)
 8003f16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8003f1c:	4b20      	ldr	r3, [pc, #128]	; (8003fa0 <MX_TIM2_Init+0xb0>)
 8003f1e:	2207      	movs	r2, #7
 8003f20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f22:	4b1f      	ldr	r3, [pc, #124]	; (8003fa0 <MX_TIM2_Init+0xb0>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8003f28:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <MX_TIM2_Init+0xb0>)
 8003f2a:	f242 720f 	movw	r2, #9999	; 0x270f
 8003f2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f30:	4b1b      	ldr	r3, [pc, #108]	; (8003fa0 <MX_TIM2_Init+0xb0>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f36:	4b1a      	ldr	r3, [pc, #104]	; (8003fa0 <MX_TIM2_Init+0xb0>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003f3c:	4818      	ldr	r0, [pc, #96]	; (8003fa0 <MX_TIM2_Init+0xb0>)
 8003f3e:	f004 f95b 	bl	80081f8 <HAL_TIM_PWM_Init>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003f48:	f7ff fde1 	bl	8003b0e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f50:	2300      	movs	r3, #0
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f54:	f107 031c 	add.w	r3, r7, #28
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4811      	ldr	r0, [pc, #68]	; (8003fa0 <MX_TIM2_Init+0xb0>)
 8003f5c:	f005 f874 	bl	8009048 <HAL_TIMEx_MasterConfigSynchronization>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003f66:	f7ff fdd2 	bl	8003b0e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f6a:	2360      	movs	r3, #96	; 0x60
 8003f6c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000-1;
 8003f6e:	f241 3387 	movw	r3, #4999	; 0x1387
 8003f72:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f74:	2300      	movs	r3, #0
 8003f76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f7c:	463b      	mov	r3, r7
 8003f7e:	2204      	movs	r2, #4
 8003f80:	4619      	mov	r1, r3
 8003f82:	4807      	ldr	r0, [pc, #28]	; (8003fa0 <MX_TIM2_Init+0xb0>)
 8003f84:	f004 fc16 	bl	80087b4 <HAL_TIM_PWM_ConfigChannel>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8003f8e:	f7ff fdbe 	bl	8003b0e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003f92:	4803      	ldr	r0, [pc, #12]	; (8003fa0 <MX_TIM2_Init+0xb0>)
 8003f94:	f000 f93c 	bl	8004210 <HAL_TIM_MspPostInit>

}
 8003f98:	bf00      	nop
 8003f9a:	3728      	adds	r7, #40	; 0x28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000acc 	.word	0x20000acc

08003fa4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003faa:	1d3b      	adds	r3, r7, #4
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003fb4:	4b14      	ldr	r3, [pc, #80]	; (8004008 <MX_TIM6_Init+0x64>)
 8003fb6:	4a15      	ldr	r2, [pc, #84]	; (800400c <MX_TIM6_Init+0x68>)
 8003fb8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 8003fba:	4b13      	ldr	r3, [pc, #76]	; (8004008 <MX_TIM6_Init+0x64>)
 8003fbc:	224f      	movs	r2, #79	; 0x4f
 8003fbe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fc0:	4b11      	ldr	r3, [pc, #68]	; (8004008 <MX_TIM6_Init+0x64>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8003fc6:	4b10      	ldr	r3, [pc, #64]	; (8004008 <MX_TIM6_Init+0x64>)
 8003fc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003fcc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003fce:	4b0e      	ldr	r3, [pc, #56]	; (8004008 <MX_TIM6_Init+0x64>)
 8003fd0:	2280      	movs	r2, #128	; 0x80
 8003fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003fd4:	480c      	ldr	r0, [pc, #48]	; (8004008 <MX_TIM6_Init+0x64>)
 8003fd6:	f004 f863 	bl	80080a0 <HAL_TIM_Base_Init>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003fe0:	f7ff fd95 	bl	8003b0e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003fec:	1d3b      	adds	r3, r7, #4
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4805      	ldr	r0, [pc, #20]	; (8004008 <MX_TIM6_Init+0x64>)
 8003ff2:	f005 f829 	bl	8009048 <HAL_TIMEx_MasterConfigSynchronization>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003ffc:	f7ff fd87 	bl	8003b0e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004000:	bf00      	nop
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	20000b18 	.word	0x20000b18
 800400c:	40001000 	.word	0x40001000

08004010 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b096      	sub	sp, #88	; 0x58
 8004014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004016:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	605a      	str	r2, [r3, #4]
 8004020:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004022:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	605a      	str	r2, [r3, #4]
 800402c:	609a      	str	r2, [r3, #8]
 800402e:	60da      	str	r2, [r3, #12]
 8004030:	611a      	str	r2, [r3, #16]
 8004032:	615a      	str	r2, [r3, #20]
 8004034:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004036:	1d3b      	adds	r3, r7, #4
 8004038:	222c      	movs	r2, #44	; 0x2c
 800403a:	2100      	movs	r1, #0
 800403c:	4618      	mov	r0, r3
 800403e:	f005 fda1 	bl	8009b84 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004042:	4b34      	ldr	r3, [pc, #208]	; (8004114 <MX_TIM15_Init+0x104>)
 8004044:	4a34      	ldr	r2, [pc, #208]	; (8004118 <MX_TIM15_Init+0x108>)
 8004046:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 8004048:	4b32      	ldr	r3, [pc, #200]	; (8004114 <MX_TIM15_Init+0x104>)
 800404a:	224f      	movs	r2, #79	; 0x4f
 800404c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800404e:	4b31      	ldr	r3, [pc, #196]	; (8004114 <MX_TIM15_Init+0x104>)
 8004050:	2200      	movs	r2, #0
 8004052:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 5000-1;
 8004054:	4b2f      	ldr	r3, [pc, #188]	; (8004114 <MX_TIM15_Init+0x104>)
 8004056:	f241 3287 	movw	r2, #4999	; 0x1387
 800405a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800405c:	4b2d      	ldr	r3, [pc, #180]	; (8004114 <MX_TIM15_Init+0x104>)
 800405e:	2200      	movs	r2, #0
 8004060:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004062:	4b2c      	ldr	r3, [pc, #176]	; (8004114 <MX_TIM15_Init+0x104>)
 8004064:	2200      	movs	r2, #0
 8004066:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004068:	4b2a      	ldr	r3, [pc, #168]	; (8004114 <MX_TIM15_Init+0x104>)
 800406a:	2200      	movs	r2, #0
 800406c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800406e:	4829      	ldr	r0, [pc, #164]	; (8004114 <MX_TIM15_Init+0x104>)
 8004070:	f004 f8c2 	bl	80081f8 <HAL_TIM_PWM_Init>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800407a:	f7ff fd48 	bl	8003b0e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800407e:	2300      	movs	r3, #0
 8004080:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004082:	2300      	movs	r3, #0
 8004084:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004086:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800408a:	4619      	mov	r1, r3
 800408c:	4821      	ldr	r0, [pc, #132]	; (8004114 <MX_TIM15_Init+0x104>)
 800408e:	f004 ffdb 	bl	8009048 <HAL_TIMEx_MasterConfigSynchronization>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8004098:	f7ff fd39 	bl	8003b0e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800409c:	2360      	movs	r3, #96	; 0x60
 800409e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 2500-1;
 80040a0:	f640 13c3 	movw	r3, #2499	; 0x9c3
 80040a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040a6:	2300      	movs	r3, #0
 80040a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80040aa:	2300      	movs	r3, #0
 80040ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040ae:	2300      	movs	r3, #0
 80040b0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80040b2:	2300      	movs	r3, #0
 80040b4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80040b6:	2300      	movs	r3, #0
 80040b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80040ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040be:	2204      	movs	r2, #4
 80040c0:	4619      	mov	r1, r3
 80040c2:	4814      	ldr	r0, [pc, #80]	; (8004114 <MX_TIM15_Init+0x104>)
 80040c4:	f004 fb76 	bl	80087b4 <HAL_TIM_PWM_ConfigChannel>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 80040ce:	f7ff fd1e 	bl	8003b0e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80040d2:	2300      	movs	r3, #0
 80040d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80040de:	2300      	movs	r3, #0
 80040e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80040e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80040ec:	2300      	movs	r3, #0
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80040f0:	1d3b      	adds	r3, r7, #4
 80040f2:	4619      	mov	r1, r3
 80040f4:	4807      	ldr	r0, [pc, #28]	; (8004114 <MX_TIM15_Init+0x104>)
 80040f6:	f005 f80d 	bl	8009114 <HAL_TIMEx_ConfigBreakDeadTime>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <MX_TIM15_Init+0xf4>
  {
    Error_Handler();
 8004100:	f7ff fd05 	bl	8003b0e <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8004104:	4803      	ldr	r0, [pc, #12]	; (8004114 <MX_TIM15_Init+0x104>)
 8004106:	f000 f883 	bl	8004210 <HAL_TIM_MspPostInit>

}
 800410a:	bf00      	nop
 800410c:	3758      	adds	r7, #88	; 0x58
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000b64 	.word	0x20000b64
 8004118:	40014000 	.word	0x40014000

0800411c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a23      	ldr	r2, [pc, #140]	; (80041b8 <HAL_TIM_PWM_MspInit+0x9c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d114      	bne.n	8004158 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800412e:	4b23      	ldr	r3, [pc, #140]	; (80041bc <HAL_TIM_PWM_MspInit+0xa0>)
 8004130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004132:	4a22      	ldr	r2, [pc, #136]	; (80041bc <HAL_TIM_PWM_MspInit+0xa0>)
 8004134:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004138:	6613      	str	r3, [r2, #96]	; 0x60
 800413a:	4b20      	ldr	r3, [pc, #128]	; (80041bc <HAL_TIM_PWM_MspInit+0xa0>)
 800413c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800413e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004146:	2200      	movs	r2, #0
 8004148:	2100      	movs	r1, #0
 800414a:	2019      	movs	r0, #25
 800414c:	f001 fe93 	bl	8005e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004150:	2019      	movs	r0, #25
 8004152:	f001 feac 	bl	8005eae <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8004156:	e02a      	b.n	80041ae <HAL_TIM_PWM_MspInit+0x92>
  else if(tim_pwmHandle->Instance==TIM2)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004160:	d114      	bne.n	800418c <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004162:	4b16      	ldr	r3, [pc, #88]	; (80041bc <HAL_TIM_PWM_MspInit+0xa0>)
 8004164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004166:	4a15      	ldr	r2, [pc, #84]	; (80041bc <HAL_TIM_PWM_MspInit+0xa0>)
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	6593      	str	r3, [r2, #88]	; 0x58
 800416e:	4b13      	ldr	r3, [pc, #76]	; (80041bc <HAL_TIM_PWM_MspInit+0xa0>)
 8004170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800417a:	2200      	movs	r2, #0
 800417c:	2100      	movs	r1, #0
 800417e:	201c      	movs	r0, #28
 8004180:	f001 fe79 	bl	8005e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004184:	201c      	movs	r0, #28
 8004186:	f001 fe92 	bl	8005eae <HAL_NVIC_EnableIRQ>
}
 800418a:	e010      	b.n	80041ae <HAL_TIM_PWM_MspInit+0x92>
  else if(tim_pwmHandle->Instance==TIM15)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a0b      	ldr	r2, [pc, #44]	; (80041c0 <HAL_TIM_PWM_MspInit+0xa4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d10b      	bne.n	80041ae <HAL_TIM_PWM_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004196:	4b09      	ldr	r3, [pc, #36]	; (80041bc <HAL_TIM_PWM_MspInit+0xa0>)
 8004198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800419a:	4a08      	ldr	r2, [pc, #32]	; (80041bc <HAL_TIM_PWM_MspInit+0xa0>)
 800419c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a0:	6613      	str	r3, [r2, #96]	; 0x60
 80041a2:	4b06      	ldr	r3, [pc, #24]	; (80041bc <HAL_TIM_PWM_MspInit+0xa0>)
 80041a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
}
 80041ae:	bf00      	nop
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40012c00 	.word	0x40012c00
 80041bc:	40021000 	.word	0x40021000
 80041c0:	40014000 	.word	0x40014000

080041c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a0d      	ldr	r2, [pc, #52]	; (8004208 <HAL_TIM_Base_MspInit+0x44>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d113      	bne.n	80041fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80041d6:	4b0d      	ldr	r3, [pc, #52]	; (800420c <HAL_TIM_Base_MspInit+0x48>)
 80041d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041da:	4a0c      	ldr	r2, [pc, #48]	; (800420c <HAL_TIM_Base_MspInit+0x48>)
 80041dc:	f043 0310 	orr.w	r3, r3, #16
 80041e0:	6593      	str	r3, [r2, #88]	; 0x58
 80041e2:	4b0a      	ldr	r3, [pc, #40]	; (800420c <HAL_TIM_Base_MspInit+0x48>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e6:	f003 0310 	and.w	r3, r3, #16
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 4, 0);
 80041ee:	2200      	movs	r2, #0
 80041f0:	2104      	movs	r1, #4
 80041f2:	2036      	movs	r0, #54	; 0x36
 80041f4:	f001 fe3f 	bl	8005e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80041f8:	2036      	movs	r0, #54	; 0x36
 80041fa:	f001 fe58 	bl	8005eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80041fe:	bf00      	nop
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40001000 	.word	0x40001000
 800420c:	40021000 	.word	0x40021000

08004210 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b08a      	sub	sp, #40	; 0x28
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004218:	f107 0314 	add.w	r3, r7, #20
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	605a      	str	r2, [r3, #4]
 8004222:	609a      	str	r2, [r3, #8]
 8004224:	60da      	str	r2, [r3, #12]
 8004226:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a35      	ldr	r2, [pc, #212]	; (8004304 <HAL_TIM_MspPostInit+0xf4>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d11e      	bne.n	8004270 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004232:	4b35      	ldr	r3, [pc, #212]	; (8004308 <HAL_TIM_MspPostInit+0xf8>)
 8004234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004236:	4a34      	ldr	r2, [pc, #208]	; (8004308 <HAL_TIM_MspPostInit+0xf8>)
 8004238:	f043 0301 	orr.w	r3, r3, #1
 800423c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800423e:	4b32      	ldr	r3, [pc, #200]	; (8004308 <HAL_TIM_MspPostInit+0xf8>)
 8004240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	613b      	str	r3, [r7, #16]
 8004248:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_CLOCK_L_Pin;
 800424a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800424e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004250:	2302      	movs	r3, #2
 8004252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004254:	2300      	movs	r3, #0
 8004256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004258:	2300      	movs	r3, #0
 800425a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800425c:	2301      	movs	r3, #1
 800425e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_CLOCK_L_GPIO_Port, &GPIO_InitStruct);
 8004260:	f107 0314 	add.w	r3, r7, #20
 8004264:	4619      	mov	r1, r3
 8004266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800426a:	f002 f871 	bl	8006350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800426e:	e044      	b.n	80042fa <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM2)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004278:	d11d      	bne.n	80042b6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800427a:	4b23      	ldr	r3, [pc, #140]	; (8004308 <HAL_TIM_MspPostInit+0xf8>)
 800427c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427e:	4a22      	ldr	r2, [pc, #136]	; (8004308 <HAL_TIM_MspPostInit+0xf8>)
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004286:	4b20      	ldr	r3, [pc, #128]	; (8004308 <HAL_TIM_MspPostInit+0xf8>)
 8004288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_CLOCK_R_Pin;
 8004292:	2302      	movs	r3, #2
 8004294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004296:	2302      	movs	r3, #2
 8004298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800429e:	2300      	movs	r3, #0
 80042a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80042a2:	2301      	movs	r3, #1
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_CLOCK_R_GPIO_Port, &GPIO_InitStruct);
 80042a6:	f107 0314 	add.w	r3, r7, #20
 80042aa:	4619      	mov	r1, r3
 80042ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042b0:	f002 f84e 	bl	8006350 <HAL_GPIO_Init>
}
 80042b4:	e021      	b.n	80042fa <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM15)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a14      	ldr	r2, [pc, #80]	; (800430c <HAL_TIM_MspPostInit+0xfc>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d11c      	bne.n	80042fa <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042c0:	4b11      	ldr	r3, [pc, #68]	; (8004308 <HAL_TIM_MspPostInit+0xf8>)
 80042c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c4:	4a10      	ldr	r2, [pc, #64]	; (8004308 <HAL_TIM_MspPostInit+0xf8>)
 80042c6:	f043 0301 	orr.w	r3, r3, #1
 80042ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042cc:	4b0e      	ldr	r3, [pc, #56]	; (8004308 <HAL_TIM_MspPostInit+0xf8>)
 80042ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPEAKER_Pin;
 80042d8:	2308      	movs	r3, #8
 80042da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042dc:	2302      	movs	r3, #2
 80042de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e4:	2300      	movs	r3, #0
 80042e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80042e8:	230e      	movs	r3, #14
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPEAKER_GPIO_Port, &GPIO_InitStruct);
 80042ec:	f107 0314 	add.w	r3, r7, #20
 80042f0:	4619      	mov	r1, r3
 80042f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042f6:	f002 f82b 	bl	8006350 <HAL_GPIO_Init>
}
 80042fa:	bf00      	nop
 80042fc:	3728      	adds	r7, #40	; 0x28
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40012c00 	.word	0x40012c00
 8004308:	40021000 	.word	0x40021000
 800430c:	40014000 	.word	0x40014000

08004310 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004314:	4b14      	ldr	r3, [pc, #80]	; (8004368 <MX_USART2_UART_Init+0x58>)
 8004316:	4a15      	ldr	r2, [pc, #84]	; (800436c <MX_USART2_UART_Init+0x5c>)
 8004318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800431a:	4b13      	ldr	r3, [pc, #76]	; (8004368 <MX_USART2_UART_Init+0x58>)
 800431c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004322:	4b11      	ldr	r3, [pc, #68]	; (8004368 <MX_USART2_UART_Init+0x58>)
 8004324:	2200      	movs	r2, #0
 8004326:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004328:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <MX_USART2_UART_Init+0x58>)
 800432a:	2200      	movs	r2, #0
 800432c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800432e:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <MX_USART2_UART_Init+0x58>)
 8004330:	2200      	movs	r2, #0
 8004332:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004334:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <MX_USART2_UART_Init+0x58>)
 8004336:	220c      	movs	r2, #12
 8004338:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800433a:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <MX_USART2_UART_Init+0x58>)
 800433c:	2200      	movs	r2, #0
 800433e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004340:	4b09      	ldr	r3, [pc, #36]	; (8004368 <MX_USART2_UART_Init+0x58>)
 8004342:	2200      	movs	r2, #0
 8004344:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004346:	4b08      	ldr	r3, [pc, #32]	; (8004368 <MX_USART2_UART_Init+0x58>)
 8004348:	2200      	movs	r2, #0
 800434a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800434c:	4b06      	ldr	r3, [pc, #24]	; (8004368 <MX_USART2_UART_Init+0x58>)
 800434e:	2200      	movs	r2, #0
 8004350:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004352:	4805      	ldr	r0, [pc, #20]	; (8004368 <MX_USART2_UART_Init+0x58>)
 8004354:	f004 ff74 	bl	8009240 <HAL_UART_Init>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800435e:	f7ff fbd6 	bl	8003b0e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004362:	bf00      	nop
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	20000bb0 	.word	0x20000bb0
 800436c:	40004400 	.word	0x40004400

08004370 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b09e      	sub	sp, #120	; 0x78
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004378:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	605a      	str	r2, [r3, #4]
 8004382:	609a      	str	r2, [r3, #8]
 8004384:	60da      	str	r2, [r3, #12]
 8004386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004388:	f107 0310 	add.w	r3, r7, #16
 800438c:	2254      	movs	r2, #84	; 0x54
 800438e:	2100      	movs	r1, #0
 8004390:	4618      	mov	r0, r3
 8004392:	f005 fbf7 	bl	8009b84 <memset>
  if(uartHandle->Instance==USART2)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a28      	ldr	r2, [pc, #160]	; (800443c <HAL_UART_MspInit+0xcc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d148      	bne.n	8004432 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80043a0:	2302      	movs	r3, #2
 80043a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80043a4:	2300      	movs	r3, #0
 80043a6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80043a8:	f107 0310 	add.w	r3, r7, #16
 80043ac:	4618      	mov	r0, r3
 80043ae:	f003 fb8f 	bl	8007ad0 <HAL_RCCEx_PeriphCLKConfig>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80043b8:	f7ff fba9 	bl	8003b0e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80043bc:	4b20      	ldr	r3, [pc, #128]	; (8004440 <HAL_UART_MspInit+0xd0>)
 80043be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c0:	4a1f      	ldr	r2, [pc, #124]	; (8004440 <HAL_UART_MspInit+0xd0>)
 80043c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c6:	6593      	str	r3, [r2, #88]	; 0x58
 80043c8:	4b1d      	ldr	r3, [pc, #116]	; (8004440 <HAL_UART_MspInit+0xd0>)
 80043ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d4:	4b1a      	ldr	r3, [pc, #104]	; (8004440 <HAL_UART_MspInit+0xd0>)
 80043d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d8:	4a19      	ldr	r2, [pc, #100]	; (8004440 <HAL_UART_MspInit+0xd0>)
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043e0:	4b17      	ldr	r3, [pc, #92]	; (8004440 <HAL_UART_MspInit+0xd0>)
 80043e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80043ec:	2304      	movs	r3, #4
 80043ee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f0:	2302      	movs	r3, #2
 80043f2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f4:	2300      	movs	r3, #0
 80043f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043f8:	2303      	movs	r3, #3
 80043fa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80043fc:	2307      	movs	r3, #7
 80043fe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004400:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004404:	4619      	mov	r1, r3
 8004406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800440a:	f001 ffa1 	bl	8006350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800440e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004412:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004414:	2302      	movs	r3, #2
 8004416:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004418:	2300      	movs	r3, #0
 800441a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800441c:	2303      	movs	r3, #3
 800441e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8004420:	2303      	movs	r3, #3
 8004422:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004424:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004428:	4619      	mov	r1, r3
 800442a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800442e:	f001 ff8f 	bl	8006350 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004432:	bf00      	nop
 8004434:	3778      	adds	r7, #120	; 0x78
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40004400 	.word	0x40004400
 8004440:	40021000 	.word	0x40021000

08004444 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800447c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004448:	f7ff fcb0 	bl	8003dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800444c:	480c      	ldr	r0, [pc, #48]	; (8004480 <LoopForever+0x6>)
  ldr r1, =_edata
 800444e:	490d      	ldr	r1, [pc, #52]	; (8004484 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004450:	4a0d      	ldr	r2, [pc, #52]	; (8004488 <LoopForever+0xe>)
  movs r3, #0
 8004452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004454:	e002      	b.n	800445c <LoopCopyDataInit>

08004456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800445a:	3304      	adds	r3, #4

0800445c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800445c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800445e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004460:	d3f9      	bcc.n	8004456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004462:	4a0a      	ldr	r2, [pc, #40]	; (800448c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004464:	4c0a      	ldr	r4, [pc, #40]	; (8004490 <LoopForever+0x16>)
  movs r3, #0
 8004466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004468:	e001      	b.n	800446e <LoopFillZerobss>

0800446a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800446a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800446c:	3204      	adds	r2, #4

0800446e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800446e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004470:	d3fb      	bcc.n	800446a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004472:	f005 fb63 	bl	8009b3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004476:	f7ff fa57 	bl	8003928 <main>

0800447a <LoopForever>:

LoopForever:
    b LoopForever
 800447a:	e7fe      	b.n	800447a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800447c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004484:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8004488:	0800ca8c 	.word	0x0800ca8c
  ldr r2, =_sbss
 800448c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8004490:	20000c48 	.word	0x20000c48

08004494 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004494:	e7fe      	b.n	8004494 <ADC1_IRQHandler>

08004496 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b082      	sub	sp, #8
 800449a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044a0:	2003      	movs	r0, #3
 80044a2:	f001 fcdd 	bl	8005e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80044a6:	2000      	movs	r0, #0
 80044a8:	f000 f80e 	bl	80044c8 <HAL_InitTick>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	71fb      	strb	r3, [r7, #7]
 80044b6:	e001      	b.n	80044bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80044b8:	f7ff fb2e 	bl	8003b18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80044bc:	79fb      	ldrb	r3, [r7, #7]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80044d4:	4b17      	ldr	r3, [pc, #92]	; (8004534 <HAL_InitTick+0x6c>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d023      	beq.n	8004524 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80044dc:	4b16      	ldr	r3, [pc, #88]	; (8004538 <HAL_InitTick+0x70>)
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	4b14      	ldr	r3, [pc, #80]	; (8004534 <HAL_InitTick+0x6c>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	4619      	mov	r1, r3
 80044e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80044ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f2:	4618      	mov	r0, r3
 80044f4:	f001 fce9 	bl	8005eca <HAL_SYSTICK_Config>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10f      	bne.n	800451e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b0f      	cmp	r3, #15
 8004502:	d809      	bhi.n	8004518 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004504:	2200      	movs	r2, #0
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	f04f 30ff 	mov.w	r0, #4294967295
 800450c:	f001 fcb3 	bl	8005e76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004510:	4a0a      	ldr	r2, [pc, #40]	; (800453c <HAL_InitTick+0x74>)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	e007      	b.n	8004528 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	73fb      	strb	r3, [r7, #15]
 800451c:	e004      	b.n	8004528 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	73fb      	strb	r3, [r7, #15]
 8004522:	e001      	b.n	8004528 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004528:	7bfb      	ldrb	r3, [r7, #15]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	20000008 	.word	0x20000008
 8004538:	20000000 	.word	0x20000000
 800453c:	20000004 	.word	0x20000004

08004540 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004544:	4b06      	ldr	r3, [pc, #24]	; (8004560 <HAL_IncTick+0x20>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	461a      	mov	r2, r3
 800454a:	4b06      	ldr	r3, [pc, #24]	; (8004564 <HAL_IncTick+0x24>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4413      	add	r3, r2
 8004550:	4a04      	ldr	r2, [pc, #16]	; (8004564 <HAL_IncTick+0x24>)
 8004552:	6013      	str	r3, [r2, #0]
}
 8004554:	bf00      	nop
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	20000008 	.word	0x20000008
 8004564:	20000c34 	.word	0x20000c34

08004568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  return uwTick;
 800456c:	4b03      	ldr	r3, [pc, #12]	; (800457c <HAL_GetTick+0x14>)
 800456e:	681b      	ldr	r3, [r3, #0]
}
 8004570:	4618      	mov	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	20000c34 	.word	0x20000c34

08004580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004588:	f7ff ffee 	bl	8004568 <HAL_GetTick>
 800458c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004598:	d005      	beq.n	80045a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800459a:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <HAL_Delay+0x44>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4413      	add	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045a6:	bf00      	nop
 80045a8:	f7ff ffde 	bl	8004568 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d8f7      	bhi.n	80045a8 <HAL_Delay+0x28>
  {
  }
}
 80045b8:	bf00      	nop
 80045ba:	bf00      	nop
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20000008 	.word	0x20000008

080045c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	609a      	str	r2, [r3, #8]
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	609a      	str	r2, [r3, #8]
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004624:	4618      	mov	r0, r3
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
 800463c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	3360      	adds	r3, #96	; 0x60
 8004642:	461a      	mov	r2, r3
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	4b08      	ldr	r3, [pc, #32]	; (8004674 <LL_ADC_SetOffset+0x44>)
 8004652:	4013      	ands	r3, r2
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	4313      	orrs	r3, r2
 8004660:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004668:	bf00      	nop
 800466a:	371c      	adds	r7, #28
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	03fff000 	.word	0x03fff000

08004678 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	3360      	adds	r3, #96	; 0x60
 8004686:	461a      	mov	r2, r3
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	3360      	adds	r3, #96	; 0x60
 80046b4:	461a      	mov	r2, r3
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	431a      	orrs	r2, r3
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80046ce:	bf00      	nop
 80046d0:	371c      	adds	r7, #28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	3330      	adds	r3, #48	; 0x30
 8004710:	461a      	mov	r2, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	0a1b      	lsrs	r3, r3, #8
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	f003 030c 	and.w	r3, r3, #12
 800471c:	4413      	add	r3, r2
 800471e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f003 031f 	and.w	r3, r3, #31
 800472a:	211f      	movs	r1, #31
 800472c:	fa01 f303 	lsl.w	r3, r1, r3
 8004730:	43db      	mvns	r3, r3
 8004732:	401a      	ands	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	0e9b      	lsrs	r3, r3, #26
 8004738:	f003 011f 	and.w	r1, r3, #31
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f003 031f 	and.w	r3, r3, #31
 8004742:	fa01 f303 	lsl.w	r3, r1, r3
 8004746:	431a      	orrs	r2, r3
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800474c:	bf00      	nop
 800474e:	371c      	adds	r7, #28
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	3314      	adds	r3, #20
 8004768:	461a      	mov	r2, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	0e5b      	lsrs	r3, r3, #25
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	4413      	add	r3, r2
 8004776:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	0d1b      	lsrs	r3, r3, #20
 8004780:	f003 031f 	and.w	r3, r3, #31
 8004784:	2107      	movs	r1, #7
 8004786:	fa01 f303 	lsl.w	r3, r1, r3
 800478a:	43db      	mvns	r3, r3
 800478c:	401a      	ands	r2, r3
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	0d1b      	lsrs	r3, r3, #20
 8004792:	f003 031f 	and.w	r3, r3, #31
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	fa01 f303 	lsl.w	r3, r1, r3
 800479c:	431a      	orrs	r2, r3
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80047a2:	bf00      	nop
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
	...

080047b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047c8:	43db      	mvns	r3, r3
 80047ca:	401a      	ands	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f003 0318 	and.w	r3, r3, #24
 80047d2:	4908      	ldr	r1, [pc, #32]	; (80047f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80047d4:	40d9      	lsrs	r1, r3
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	400b      	ands	r3, r1
 80047da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047de:	431a      	orrs	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80047e6:	bf00      	nop
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	0007ffff 	.word	0x0007ffff

080047f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004808:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6093      	str	r3, [r2, #8]
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800482c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004830:	d101      	bne.n	8004836 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004832:	2301      	movs	r3, #1
 8004834:	e000      	b.n	8004838 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004854:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004858:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800487c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004880:	d101      	bne.n	8004886 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004882:	2301      	movs	r3, #1
 8004884:	e000      	b.n	8004888 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80048a8:	f043 0201 	orr.w	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80048d0:	f043 0202 	orr.w	r2, r3, #2
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <LL_ADC_IsEnabled+0x18>
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <LL_ADC_IsEnabled+0x1a>
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b02      	cmp	r3, #2
 800491c:	d101      	bne.n	8004922 <LL_ADC_IsDisableOngoing+0x18>
 800491e:	2301      	movs	r3, #1
 8004920:	e000      	b.n	8004924 <LL_ADC_IsDisableOngoing+0x1a>
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004940:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004944:	f043 0204 	orr.w	r2, r3, #4
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004968:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800496c:	f043 0210 	orr.w	r2, r3, #16
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b04      	cmp	r3, #4
 8004992:	d101      	bne.n	8004998 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80049ba:	f043 0220 	orr.w	r2, r3, #32
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b08      	cmp	r3, #8
 80049e0:	d101      	bne.n	80049e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049fc:	2300      	movs	r3, #0
 80049fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e12c      	b.n	8004c68 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d109      	bne.n	8004a30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7fe fd8f 	bl	8003540 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff fef1 	bl	800481c <LL_ADC_IsDeepPowerDownEnabled>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d004      	beq.n	8004a4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7ff fed7 	bl	80047f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff ff0c 	bl	800486c <LL_ADC_IsInternalRegulatorEnabled>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d115      	bne.n	8004a86 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7ff fef0 	bl	8004844 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a64:	4b82      	ldr	r3, [pc, #520]	; (8004c70 <HAL_ADC_Init+0x27c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	099b      	lsrs	r3, r3, #6
 8004a6a:	4a82      	ldr	r2, [pc, #520]	; (8004c74 <HAL_ADC_Init+0x280>)
 8004a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a70:	099b      	lsrs	r3, r3, #6
 8004a72:	3301      	adds	r3, #1
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004a78:	e002      	b.n	8004a80 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f9      	bne.n	8004a7a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7ff feee 	bl	800486c <LL_ADC_IsInternalRegulatorEnabled>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10d      	bne.n	8004ab2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9a:	f043 0210 	orr.w	r2, r3, #16
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa6:	f043 0201 	orr.w	r2, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff ff62 	bl	8004980 <LL_ADC_REG_IsConversionOngoing>
 8004abc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac2:	f003 0310 	and.w	r3, r3, #16
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f040 80c5 	bne.w	8004c56 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f040 80c1 	bne.w	8004c56 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004adc:	f043 0202 	orr.w	r2, r3, #2
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff fefb 	bl	80048e4 <LL_ADC_IsEnabled>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10b      	bne.n	8004b0c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004af4:	4860      	ldr	r0, [pc, #384]	; (8004c78 <HAL_ADC_Init+0x284>)
 8004af6:	f7ff fef5 	bl	80048e4 <LL_ADC_IsEnabled>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d105      	bne.n	8004b0c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	4619      	mov	r1, r3
 8004b06:	485d      	ldr	r0, [pc, #372]	; (8004c7c <HAL_ADC_Init+0x288>)
 8004b08:	f7ff fd5e 	bl	80045c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	7e5b      	ldrb	r3, [r3, #25]
 8004b10:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b16:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004b1c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004b22:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b2a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d106      	bne.n	8004b48 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	045b      	lsls	r3, r3, #17
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d009      	beq.n	8004b64 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b54:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	4b45      	ldr	r3, [pc, #276]	; (8004c80 <HAL_ADC_Init+0x28c>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6812      	ldr	r2, [r2, #0]
 8004b72:	69b9      	ldr	r1, [r7, #24]
 8004b74:	430b      	orrs	r3, r1
 8004b76:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff feff 	bl	8004980 <LL_ADC_REG_IsConversionOngoing>
 8004b82:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff ff20 	bl	80049ce <LL_ADC_INJ_IsConversionOngoing>
 8004b8e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d13d      	bne.n	8004c12 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d13a      	bne.n	8004c12 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ba0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ba8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004baa:	4313      	orrs	r3, r2
 8004bac:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bb8:	f023 0302 	bic.w	r3, r3, #2
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6812      	ldr	r2, [r2, #0]
 8004bc0:	69b9      	ldr	r1, [r7, #24]
 8004bc2:	430b      	orrs	r3, r1
 8004bc4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d118      	bne.n	8004c02 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004bda:	f023 0304 	bic.w	r3, r3, #4
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004be6:	4311      	orrs	r1, r2
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004bec:	4311      	orrs	r1, r2
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0201 	orr.w	r2, r2, #1
 8004bfe:	611a      	str	r2, [r3, #16]
 8004c00:	e007      	b.n	8004c12 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	691a      	ldr	r2, [r3, #16]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0201 	bic.w	r2, r2, #1
 8004c10:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d10c      	bne.n	8004c34 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c20:	f023 010f 	bic.w	r1, r3, #15
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	1e5a      	subs	r2, r3, #1
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	631a      	str	r2, [r3, #48]	; 0x30
 8004c32:	e007      	b.n	8004c44 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 020f 	bic.w	r2, r2, #15
 8004c42:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c48:	f023 0303 	bic.w	r3, r3, #3
 8004c4c:	f043 0201 	orr.w	r2, r3, #1
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	655a      	str	r2, [r3, #84]	; 0x54
 8004c54:	e007      	b.n	8004c66 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5a:	f043 0210 	orr.w	r2, r3, #16
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004c66:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3720      	adds	r7, #32
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	20000000 	.word	0x20000000
 8004c74:	053e2d63 	.word	0x053e2d63
 8004c78:	50040000 	.word	0x50040000
 8004c7c:	50040300 	.word	0x50040300
 8004c80:	fff0c007 	.word	0xfff0c007

08004c84 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7ff fe75 	bl	8004980 <LL_ADC_REG_IsConversionOngoing>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d14f      	bne.n	8004d3c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d101      	bne.n	8004caa <HAL_ADC_Start+0x26>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	e04b      	b.n	8004d42 <HAL_ADC_Start+0xbe>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 feae 	bl	8005a14 <ADC_Enable>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d137      	bne.n	8004d32 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004cca:	f023 0301 	bic.w	r3, r3, #1
 8004cce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce2:	d106      	bne.n	8004cf2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce8:	f023 0206 	bic.w	r2, r3, #6
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	659a      	str	r2, [r3, #88]	; 0x58
 8004cf0:	e002      	b.n	8004cf8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	221c      	movs	r2, #28
 8004cfe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d007      	beq.n	8004d26 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff fe00 	bl	8004930 <LL_ADC_REG_StartConversion>
 8004d30:	e006      	b.n	8004d40 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004d3a:	e001      	b.n	8004d40 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b084      	sub	sp, #16
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_ADC_Stop+0x16>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e023      	b.n	8004da8 <HAL_ADC_Stop+0x5e>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004d68:	2103      	movs	r1, #3
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fd96 	bl	800589c <ADC_ConversionStop>
 8004d70:	4603      	mov	r3, r0
 8004d72:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d111      	bne.n	8004d9e <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 feac 	bl	8005ad8 <ADC_Disable>
 8004d80:	4603      	mov	r3, r0
 8004d82:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004d84:	7bfb      	ldrb	r3, [r7, #15]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d109      	bne.n	8004d9e <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004d92:	f023 0301 	bic.w	r3, r3, #1
 8004d96:	f043 0201 	orr.w	r2, r3, #1
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	d102      	bne.n	8004dc8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004dc2:	2308      	movs	r3, #8
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	e010      	b.n	8004dea <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d007      	beq.n	8004de6 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dda:	f043 0220 	orr.w	r2, r3, #32
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e06f      	b.n	8004ec6 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8004de6:	2304      	movs	r3, #4
 8004de8:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004dea:	f7ff fbbd 	bl	8004568 <HAL_GetTick>
 8004dee:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004df0:	e021      	b.n	8004e36 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df8:	d01d      	beq.n	8004e36 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004dfa:	f7ff fbb5 	bl	8004568 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d302      	bcc.n	8004e10 <HAL_ADC_PollForConversion+0x60>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d112      	bne.n	8004e36 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	4013      	ands	r3, r2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10b      	bne.n	8004e36 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e22:	f043 0204 	orr.w	r2, r3, #4
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e047      	b.n	8004ec6 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0d6      	beq.n	8004df2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fc40 	bl	80046da <LL_ADC_REG_IsTriggerSourceSWStart>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d01c      	beq.n	8004e9a <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	7e5b      	ldrb	r3, [r3, #25]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d118      	bne.n	8004e9a <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d111      	bne.n	8004e9a <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d105      	bne.n	8004e9a <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e92:	f043 0201 	orr.w	r2, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d104      	bne.n	8004eb2 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2208      	movs	r2, #8
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	e008      	b.n	8004ec4 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d103      	bne.n	8004ec4 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	220c      	movs	r2, #12
 8004ec2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff fd4d 	bl	8004980 <LL_ADC_REG_IsConversionOngoing>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d167      	bne.n	8004fbc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <HAL_ADC_Start_DMA+0x2a>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e063      	b.n	8004fc2 <HAL_ADC_Start_DMA+0xf2>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 fd86 	bl	8005a14 <ADC_Enable>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004f0c:	7dfb      	ldrb	r3, [r7, #23]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d14f      	bne.n	8004fb2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f16:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f1a:	f023 0301 	bic.w	r3, r3, #1
 8004f1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d006      	beq.n	8004f40 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f36:	f023 0206 	bic.w	r2, r3, #6
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	659a      	str	r2, [r3, #88]	; 0x58
 8004f3e:	e002      	b.n	8004f46 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f4a:	4a20      	ldr	r2, [pc, #128]	; (8004fcc <HAL_ADC_Start_DMA+0xfc>)
 8004f4c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f52:	4a1f      	ldr	r2, [pc, #124]	; (8004fd0 <HAL_ADC_Start_DMA+0x100>)
 8004f54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f5a:	4a1e      	ldr	r2, [pc, #120]	; (8004fd4 <HAL_ADC_Start_DMA+0x104>)
 8004f5c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	221c      	movs	r2, #28
 8004f64:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f042 0210 	orr.w	r2, r2, #16
 8004f7c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 0201 	orr.w	r2, r2, #1
 8004f8c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	3340      	adds	r3, #64	; 0x40
 8004f98:	4619      	mov	r1, r3
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f001 f859 	bl	8006054 <HAL_DMA_Start_IT>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7ff fcc0 	bl	8004930 <LL_ADC_REG_StartConversion>
 8004fb0:	e006      	b.n	8004fc0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004fba:	e001      	b.n	8004fc0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	08005b97 	.word	0x08005b97
 8004fd0:	08005c6f 	.word	0x08005c6f
 8004fd4:	08005c8b 	.word	0x08005c8b

08004fd8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d101      	bne.n	8004fee <HAL_ADC_Stop_DMA+0x16>
 8004fea:	2302      	movs	r3, #2
 8004fec:	e051      	b.n	8005092 <HAL_ADC_Stop_DMA+0xba>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004ff6:	2103      	movs	r1, #3
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fc4f 	bl	800589c <ADC_ConversionStop>
 8004ffe:	4603      	mov	r3, r0
 8005000:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d13f      	bne.n	8005088 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0201 	bic.w	r2, r2, #1
 8005016:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800501c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d10f      	bne.n	8005046 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502a:	4618      	mov	r0, r3
 800502c:	f001 f872 	bl	8006114 <HAL_DMA_Abort>
 8005030:	4603      	mov	r3, r0
 8005032:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005034:	7bfb      	ldrb	r3, [r7, #15]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d005      	beq.n	8005046 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0210 	bic.w	r2, r2, #16
 8005054:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8005056:	7bfb      	ldrb	r3, [r7, #15]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d105      	bne.n	8005068 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 fd3b 	bl	8005ad8 <ADC_Disable>
 8005062:	4603      	mov	r3, r0
 8005064:	73fb      	strb	r3, [r7, #15]
 8005066:	e002      	b.n	800506e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fd35 	bl	8005ad8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800506e:	7bfb      	ldrb	r3, [r7, #15]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d109      	bne.n	8005088 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005078:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800507c:	f023 0301 	bic.w	r3, r3, #1
 8005080:	f043 0201 	orr.w	r2, r3, #1
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005090:	7bfb      	ldrb	r3, [r7, #15]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b0b6      	sub	sp, #216	; 0xd8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_ADC_ConfigChannel+0x22>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e3b9      	b.n	8005872 <HAL_ADC_ConfigChannel+0x796>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff fc38 	bl	8004980 <LL_ADC_REG_IsConversionOngoing>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	f040 839e 	bne.w	8005854 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b05      	cmp	r3, #5
 800511e:	d824      	bhi.n	800516a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	3b02      	subs	r3, #2
 8005126:	2b03      	cmp	r3, #3
 8005128:	d81b      	bhi.n	8005162 <HAL_ADC_ConfigChannel+0x86>
 800512a:	a201      	add	r2, pc, #4	; (adr r2, 8005130 <HAL_ADC_ConfigChannel+0x54>)
 800512c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005130:	08005141 	.word	0x08005141
 8005134:	08005149 	.word	0x08005149
 8005138:	08005151 	.word	0x08005151
 800513c:	08005159 	.word	0x08005159
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	220c      	movs	r2, #12
 8005144:	605a      	str	r2, [r3, #4]
          break;
 8005146:	e011      	b.n	800516c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2212      	movs	r2, #18
 800514c:	605a      	str	r2, [r3, #4]
          break;
 800514e:	e00d      	b.n	800516c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2218      	movs	r2, #24
 8005154:	605a      	str	r2, [r3, #4]
          break;
 8005156:	e009      	b.n	800516c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800515e:	605a      	str	r2, [r3, #4]
          break;
 8005160:	e004      	b.n	800516c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2206      	movs	r2, #6
 8005166:	605a      	str	r2, [r3, #4]
          break;
 8005168:	e000      	b.n	800516c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800516a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6818      	ldr	r0, [r3, #0]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	6859      	ldr	r1, [r3, #4]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	461a      	mov	r2, r3
 800517a:	f7ff fac1 	bl	8004700 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff fbfc 	bl	8004980 <LL_ADC_REG_IsConversionOngoing>
 8005188:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4618      	mov	r0, r3
 8005192:	f7ff fc1c 	bl	80049ce <LL_ADC_INJ_IsConversionOngoing>
 8005196:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800519a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f040 81a6 	bne.w	80054f0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80051a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f040 81a1 	bne.w	80054f0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6818      	ldr	r0, [r3, #0]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	6819      	ldr	r1, [r3, #0]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	461a      	mov	r2, r3
 80051bc:	f7ff facc 	bl	8004758 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	695a      	ldr	r2, [r3, #20]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	08db      	lsrs	r3, r3, #3
 80051cc:	f003 0303 	and.w	r3, r3, #3
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	fa02 f303 	lsl.w	r3, r2, r3
 80051d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d00a      	beq.n	80051f8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	6919      	ldr	r1, [r3, #16]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051f2:	f7ff fa1d 	bl	8004630 <LL_ADC_SetOffset>
 80051f6:	e17b      	b.n	80054f0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2100      	movs	r1, #0
 80051fe:	4618      	mov	r0, r3
 8005200:	f7ff fa3a 	bl	8004678 <LL_ADC_GetOffsetChannel>
 8005204:	4603      	mov	r3, r0
 8005206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10a      	bne.n	8005224 <HAL_ADC_ConfigChannel+0x148>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2100      	movs	r1, #0
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff fa2f 	bl	8004678 <LL_ADC_GetOffsetChannel>
 800521a:	4603      	mov	r3, r0
 800521c:	0e9b      	lsrs	r3, r3, #26
 800521e:	f003 021f 	and.w	r2, r3, #31
 8005222:	e01e      	b.n	8005262 <HAL_ADC_ConfigChannel+0x186>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2100      	movs	r1, #0
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff fa24 	bl	8004678 <LL_ADC_GetOffsetChannel>
 8005230:	4603      	mov	r3, r0
 8005232:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005236:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800523a:	fa93 f3a3 	rbit	r3, r3
 800523e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005242:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005246:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800524a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8005252:	2320      	movs	r3, #32
 8005254:	e004      	b.n	8005260 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8005256:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800525a:	fab3 f383 	clz	r3, r3
 800525e:	b2db      	uxtb	r3, r3
 8005260:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800526a:	2b00      	cmp	r3, #0
 800526c:	d105      	bne.n	800527a <HAL_ADC_ConfigChannel+0x19e>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	0e9b      	lsrs	r3, r3, #26
 8005274:	f003 031f 	and.w	r3, r3, #31
 8005278:	e018      	b.n	80052ac <HAL_ADC_ConfigChannel+0x1d0>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005282:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005286:	fa93 f3a3 	rbit	r3, r3
 800528a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800528e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005292:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005296:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800529e:	2320      	movs	r3, #32
 80052a0:	e004      	b.n	80052ac <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80052a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80052a6:	fab3 f383 	clz	r3, r3
 80052aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d106      	bne.n	80052be <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2200      	movs	r2, #0
 80052b6:	2100      	movs	r1, #0
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff f9f3 	bl	80046a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2101      	movs	r1, #1
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff f9d7 	bl	8004678 <LL_ADC_GetOffsetChannel>
 80052ca:	4603      	mov	r3, r0
 80052cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10a      	bne.n	80052ea <HAL_ADC_ConfigChannel+0x20e>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2101      	movs	r1, #1
 80052da:	4618      	mov	r0, r3
 80052dc:	f7ff f9cc 	bl	8004678 <LL_ADC_GetOffsetChannel>
 80052e0:	4603      	mov	r3, r0
 80052e2:	0e9b      	lsrs	r3, r3, #26
 80052e4:	f003 021f 	and.w	r2, r3, #31
 80052e8:	e01e      	b.n	8005328 <HAL_ADC_ConfigChannel+0x24c>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2101      	movs	r1, #1
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff f9c1 	bl	8004678 <LL_ADC_GetOffsetChannel>
 80052f6:	4603      	mov	r3, r0
 80052f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005300:	fa93 f3a3 	rbit	r3, r3
 8005304:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005308:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800530c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005310:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8005318:	2320      	movs	r3, #32
 800531a:	e004      	b.n	8005326 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800531c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005320:	fab3 f383 	clz	r3, r3
 8005324:	b2db      	uxtb	r3, r3
 8005326:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005330:	2b00      	cmp	r3, #0
 8005332:	d105      	bne.n	8005340 <HAL_ADC_ConfigChannel+0x264>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	0e9b      	lsrs	r3, r3, #26
 800533a:	f003 031f 	and.w	r3, r3, #31
 800533e:	e018      	b.n	8005372 <HAL_ADC_ConfigChannel+0x296>
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005348:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800534c:	fa93 f3a3 	rbit	r3, r3
 8005350:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005354:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005358:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800535c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8005364:	2320      	movs	r3, #32
 8005366:	e004      	b.n	8005372 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8005368:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800536c:	fab3 f383 	clz	r3, r3
 8005370:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005372:	429a      	cmp	r2, r3
 8005374:	d106      	bne.n	8005384 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2200      	movs	r2, #0
 800537c:	2101      	movs	r1, #1
 800537e:	4618      	mov	r0, r3
 8005380:	f7ff f990 	bl	80046a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2102      	movs	r1, #2
 800538a:	4618      	mov	r0, r3
 800538c:	f7ff f974 	bl	8004678 <LL_ADC_GetOffsetChannel>
 8005390:	4603      	mov	r3, r0
 8005392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10a      	bne.n	80053b0 <HAL_ADC_ConfigChannel+0x2d4>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2102      	movs	r1, #2
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff f969 	bl	8004678 <LL_ADC_GetOffsetChannel>
 80053a6:	4603      	mov	r3, r0
 80053a8:	0e9b      	lsrs	r3, r3, #26
 80053aa:	f003 021f 	and.w	r2, r3, #31
 80053ae:	e01e      	b.n	80053ee <HAL_ADC_ConfigChannel+0x312>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2102      	movs	r1, #2
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff f95e 	bl	8004678 <LL_ADC_GetOffsetChannel>
 80053bc:	4603      	mov	r3, r0
 80053be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053c6:	fa93 f3a3 	rbit	r3, r3
 80053ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80053ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80053d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80053de:	2320      	movs	r3, #32
 80053e0:	e004      	b.n	80053ec <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80053e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053e6:	fab3 f383 	clz	r3, r3
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d105      	bne.n	8005406 <HAL_ADC_ConfigChannel+0x32a>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	0e9b      	lsrs	r3, r3, #26
 8005400:	f003 031f 	and.w	r3, r3, #31
 8005404:	e016      	b.n	8005434 <HAL_ADC_ConfigChannel+0x358>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800540e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005412:	fa93 f3a3 	rbit	r3, r3
 8005416:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005418:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800541a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800541e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8005426:	2320      	movs	r3, #32
 8005428:	e004      	b.n	8005434 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800542a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800542e:	fab3 f383 	clz	r3, r3
 8005432:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005434:	429a      	cmp	r2, r3
 8005436:	d106      	bne.n	8005446 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2200      	movs	r2, #0
 800543e:	2102      	movs	r1, #2
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff f92f 	bl	80046a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2103      	movs	r1, #3
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff f913 	bl	8004678 <LL_ADC_GetOffsetChannel>
 8005452:	4603      	mov	r3, r0
 8005454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10a      	bne.n	8005472 <HAL_ADC_ConfigChannel+0x396>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2103      	movs	r1, #3
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff f908 	bl	8004678 <LL_ADC_GetOffsetChannel>
 8005468:	4603      	mov	r3, r0
 800546a:	0e9b      	lsrs	r3, r3, #26
 800546c:	f003 021f 	and.w	r2, r3, #31
 8005470:	e017      	b.n	80054a2 <HAL_ADC_ConfigChannel+0x3c6>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2103      	movs	r1, #3
 8005478:	4618      	mov	r0, r3
 800547a:	f7ff f8fd 	bl	8004678 <LL_ADC_GetOffsetChannel>
 800547e:	4603      	mov	r3, r0
 8005480:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005484:	fa93 f3a3 	rbit	r3, r3
 8005488:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800548a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800548c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800548e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8005494:	2320      	movs	r3, #32
 8005496:	e003      	b.n	80054a0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8005498:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800549a:	fab3 f383 	clz	r3, r3
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d105      	bne.n	80054ba <HAL_ADC_ConfigChannel+0x3de>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	0e9b      	lsrs	r3, r3, #26
 80054b4:	f003 031f 	and.w	r3, r3, #31
 80054b8:	e011      	b.n	80054de <HAL_ADC_ConfigChannel+0x402>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054c2:	fa93 f3a3 	rbit	r3, r3
 80054c6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80054c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80054cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80054d2:	2320      	movs	r3, #32
 80054d4:	e003      	b.n	80054de <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80054d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d8:	fab3 f383 	clz	r3, r3
 80054dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80054de:	429a      	cmp	r2, r3
 80054e0:	d106      	bne.n	80054f0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2200      	movs	r2, #0
 80054e8:	2103      	movs	r1, #3
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff f8da 	bl	80046a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff f9f5 	bl	80048e4 <LL_ADC_IsEnabled>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f040 813f 	bne.w	8005780 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6818      	ldr	r0, [r3, #0]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	6819      	ldr	r1, [r3, #0]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	461a      	mov	r2, r3
 8005510:	f7ff f94e 	bl	80047b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	4a8e      	ldr	r2, [pc, #568]	; (8005754 <HAL_ADC_ConfigChannel+0x678>)
 800551a:	4293      	cmp	r3, r2
 800551c:	f040 8130 	bne.w	8005780 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10b      	bne.n	8005548 <HAL_ADC_ConfigChannel+0x46c>
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	0e9b      	lsrs	r3, r3, #26
 8005536:	3301      	adds	r3, #1
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	2b09      	cmp	r3, #9
 800553e:	bf94      	ite	ls
 8005540:	2301      	movls	r3, #1
 8005542:	2300      	movhi	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	e019      	b.n	800557c <HAL_ADC_ConfigChannel+0x4a0>
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005550:	fa93 f3a3 	rbit	r3, r3
 8005554:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005558:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800555a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8005560:	2320      	movs	r3, #32
 8005562:	e003      	b.n	800556c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8005564:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005566:	fab3 f383 	clz	r3, r3
 800556a:	b2db      	uxtb	r3, r3
 800556c:	3301      	adds	r3, #1
 800556e:	f003 031f 	and.w	r3, r3, #31
 8005572:	2b09      	cmp	r3, #9
 8005574:	bf94      	ite	ls
 8005576:	2301      	movls	r3, #1
 8005578:	2300      	movhi	r3, #0
 800557a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800557c:	2b00      	cmp	r3, #0
 800557e:	d079      	beq.n	8005674 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005588:	2b00      	cmp	r3, #0
 800558a:	d107      	bne.n	800559c <HAL_ADC_ConfigChannel+0x4c0>
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	0e9b      	lsrs	r3, r3, #26
 8005592:	3301      	adds	r3, #1
 8005594:	069b      	lsls	r3, r3, #26
 8005596:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800559a:	e015      	b.n	80055c8 <HAL_ADC_ConfigChannel+0x4ec>
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055a4:	fa93 f3a3 	rbit	r3, r3
 80055a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80055aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80055ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80055b4:	2320      	movs	r3, #32
 80055b6:	e003      	b.n	80055c0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80055b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055ba:	fab3 f383 	clz	r3, r3
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	3301      	adds	r3, #1
 80055c2:	069b      	lsls	r3, r3, #26
 80055c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d109      	bne.n	80055e8 <HAL_ADC_ConfigChannel+0x50c>
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	0e9b      	lsrs	r3, r3, #26
 80055da:	3301      	adds	r3, #1
 80055dc:	f003 031f 	and.w	r3, r3, #31
 80055e0:	2101      	movs	r1, #1
 80055e2:	fa01 f303 	lsl.w	r3, r1, r3
 80055e6:	e017      	b.n	8005618 <HAL_ADC_ConfigChannel+0x53c>
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055f0:	fa93 f3a3 	rbit	r3, r3
 80055f4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80055f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80055fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8005600:	2320      	movs	r3, #32
 8005602:	e003      	b.n	800560c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8005604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005606:	fab3 f383 	clz	r3, r3
 800560a:	b2db      	uxtb	r3, r3
 800560c:	3301      	adds	r3, #1
 800560e:	f003 031f 	and.w	r3, r3, #31
 8005612:	2101      	movs	r1, #1
 8005614:	fa01 f303 	lsl.w	r3, r1, r3
 8005618:	ea42 0103 	orr.w	r1, r2, r3
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10a      	bne.n	800563e <HAL_ADC_ConfigChannel+0x562>
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	0e9b      	lsrs	r3, r3, #26
 800562e:	3301      	adds	r3, #1
 8005630:	f003 021f 	and.w	r2, r3, #31
 8005634:	4613      	mov	r3, r2
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	4413      	add	r3, r2
 800563a:	051b      	lsls	r3, r3, #20
 800563c:	e018      	b.n	8005670 <HAL_ADC_ConfigChannel+0x594>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005646:	fa93 f3a3 	rbit	r3, r3
 800564a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800564c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8005656:	2320      	movs	r3, #32
 8005658:	e003      	b.n	8005662 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800565a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565c:	fab3 f383 	clz	r3, r3
 8005660:	b2db      	uxtb	r3, r3
 8005662:	3301      	adds	r3, #1
 8005664:	f003 021f 	and.w	r2, r3, #31
 8005668:	4613      	mov	r3, r2
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	4413      	add	r3, r2
 800566e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005670:	430b      	orrs	r3, r1
 8005672:	e080      	b.n	8005776 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800567c:	2b00      	cmp	r3, #0
 800567e:	d107      	bne.n	8005690 <HAL_ADC_ConfigChannel+0x5b4>
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	0e9b      	lsrs	r3, r3, #26
 8005686:	3301      	adds	r3, #1
 8005688:	069b      	lsls	r3, r3, #26
 800568a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800568e:	e015      	b.n	80056bc <HAL_ADC_ConfigChannel+0x5e0>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005698:	fa93 f3a3 	rbit	r3, r3
 800569c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80056a8:	2320      	movs	r3, #32
 80056aa:	e003      	b.n	80056b4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	fab3 f383 	clz	r3, r3
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	3301      	adds	r3, #1
 80056b6:	069b      	lsls	r3, r3, #26
 80056b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d109      	bne.n	80056dc <HAL_ADC_ConfigChannel+0x600>
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	0e9b      	lsrs	r3, r3, #26
 80056ce:	3301      	adds	r3, #1
 80056d0:	f003 031f 	and.w	r3, r3, #31
 80056d4:	2101      	movs	r1, #1
 80056d6:	fa01 f303 	lsl.w	r3, r1, r3
 80056da:	e017      	b.n	800570c <HAL_ADC_ConfigChannel+0x630>
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	fa93 f3a3 	rbit	r3, r3
 80056e8:	61fb      	str	r3, [r7, #28]
  return result;
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80056f4:	2320      	movs	r3, #32
 80056f6:	e003      	b.n	8005700 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	fab3 f383 	clz	r3, r3
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	3301      	adds	r3, #1
 8005702:	f003 031f 	and.w	r3, r3, #31
 8005706:	2101      	movs	r1, #1
 8005708:	fa01 f303 	lsl.w	r3, r1, r3
 800570c:	ea42 0103 	orr.w	r1, r2, r3
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10d      	bne.n	8005738 <HAL_ADC_ConfigChannel+0x65c>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	0e9b      	lsrs	r3, r3, #26
 8005722:	3301      	adds	r3, #1
 8005724:	f003 021f 	and.w	r2, r3, #31
 8005728:	4613      	mov	r3, r2
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	4413      	add	r3, r2
 800572e:	3b1e      	subs	r3, #30
 8005730:	051b      	lsls	r3, r3, #20
 8005732:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005736:	e01d      	b.n	8005774 <HAL_ADC_ConfigChannel+0x698>
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	fa93 f3a3 	rbit	r3, r3
 8005744:	613b      	str	r3, [r7, #16]
  return result;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d103      	bne.n	8005758 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8005750:	2320      	movs	r3, #32
 8005752:	e005      	b.n	8005760 <HAL_ADC_ConfigChannel+0x684>
 8005754:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	fab3 f383 	clz	r3, r3
 800575e:	b2db      	uxtb	r3, r3
 8005760:	3301      	adds	r3, #1
 8005762:	f003 021f 	and.w	r2, r3, #31
 8005766:	4613      	mov	r3, r2
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	4413      	add	r3, r2
 800576c:	3b1e      	subs	r3, #30
 800576e:	051b      	lsls	r3, r3, #20
 8005770:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005774:	430b      	orrs	r3, r1
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	6892      	ldr	r2, [r2, #8]
 800577a:	4619      	mov	r1, r3
 800577c:	f7fe ffec 	bl	8004758 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	4b3d      	ldr	r3, [pc, #244]	; (800587c <HAL_ADC_ConfigChannel+0x7a0>)
 8005786:	4013      	ands	r3, r2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d06c      	beq.n	8005866 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800578c:	483c      	ldr	r0, [pc, #240]	; (8005880 <HAL_ADC_ConfigChannel+0x7a4>)
 800578e:	f7fe ff41 	bl	8004614 <LL_ADC_GetCommonPathInternalCh>
 8005792:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a3a      	ldr	r2, [pc, #232]	; (8005884 <HAL_ADC_ConfigChannel+0x7a8>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d127      	bne.n	80057f0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80057a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80057a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d121      	bne.n	80057f0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a35      	ldr	r2, [pc, #212]	; (8005888 <HAL_ADC_ConfigChannel+0x7ac>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d157      	bne.n	8005866 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80057b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80057ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057be:	4619      	mov	r1, r3
 80057c0:	482f      	ldr	r0, [pc, #188]	; (8005880 <HAL_ADC_ConfigChannel+0x7a4>)
 80057c2:	f7fe ff14 	bl	80045ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80057c6:	4b31      	ldr	r3, [pc, #196]	; (800588c <HAL_ADC_ConfigChannel+0x7b0>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	099b      	lsrs	r3, r3, #6
 80057cc:	4a30      	ldr	r2, [pc, #192]	; (8005890 <HAL_ADC_ConfigChannel+0x7b4>)
 80057ce:	fba2 2303 	umull	r2, r3, r2, r3
 80057d2:	099b      	lsrs	r3, r3, #6
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	4613      	mov	r3, r2
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	4413      	add	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80057e0:	e002      	b.n	80057e8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3b01      	subs	r3, #1
 80057e6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1f9      	bne.n	80057e2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80057ee:	e03a      	b.n	8005866 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a27      	ldr	r2, [pc, #156]	; (8005894 <HAL_ADC_ConfigChannel+0x7b8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d113      	bne.n	8005822 <HAL_ADC_ConfigChannel+0x746>
 80057fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80057fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10d      	bne.n	8005822 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a1f      	ldr	r2, [pc, #124]	; (8005888 <HAL_ADC_ConfigChannel+0x7ac>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d12a      	bne.n	8005866 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005810:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005814:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005818:	4619      	mov	r1, r3
 800581a:	4819      	ldr	r0, [pc, #100]	; (8005880 <HAL_ADC_ConfigChannel+0x7a4>)
 800581c:	f7fe fee7 	bl	80045ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005820:	e021      	b.n	8005866 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a1c      	ldr	r2, [pc, #112]	; (8005898 <HAL_ADC_ConfigChannel+0x7bc>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d11c      	bne.n	8005866 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800582c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d116      	bne.n	8005866 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a12      	ldr	r2, [pc, #72]	; (8005888 <HAL_ADC_ConfigChannel+0x7ac>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d111      	bne.n	8005866 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005842:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005846:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800584a:	4619      	mov	r1, r3
 800584c:	480c      	ldr	r0, [pc, #48]	; (8005880 <HAL_ADC_ConfigChannel+0x7a4>)
 800584e:	f7fe fece 	bl	80045ee <LL_ADC_SetCommonPathInternalCh>
 8005852:	e008      	b.n	8005866 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005858:	f043 0220 	orr.w	r2, r3, #32
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800586e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005872:	4618      	mov	r0, r3
 8005874:	37d8      	adds	r7, #216	; 0xd8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	80080000 	.word	0x80080000
 8005880:	50040300 	.word	0x50040300
 8005884:	c7520000 	.word	0xc7520000
 8005888:	50040000 	.word	0x50040000
 800588c:	20000000 	.word	0x20000000
 8005890:	053e2d63 	.word	0x053e2d63
 8005894:	cb840000 	.word	0xcb840000
 8005898:	80000001 	.word	0x80000001

0800589c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80058a6:	2300      	movs	r3, #0
 80058a8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff f864 	bl	8004980 <LL_ADC_REG_IsConversionOngoing>
 80058b8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4618      	mov	r0, r3
 80058c0:	f7ff f885 	bl	80049ce <LL_ADC_INJ_IsConversionOngoing>
 80058c4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d103      	bne.n	80058d4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 8098 	beq.w	8005a04 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d02a      	beq.n	8005938 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	7e5b      	ldrb	r3, [r3, #25]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d126      	bne.n	8005938 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	7e1b      	ldrb	r3, [r3, #24]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d122      	bne.n	8005938 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80058f2:	2301      	movs	r3, #1
 80058f4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80058f6:	e014      	b.n	8005922 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	4a45      	ldr	r2, [pc, #276]	; (8005a10 <ADC_ConversionStop+0x174>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d90d      	bls.n	800591c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005904:	f043 0210 	orr.w	r2, r3, #16
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005910:	f043 0201 	orr.w	r2, r3, #1
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e074      	b.n	8005a06 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	3301      	adds	r3, #1
 8005920:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592c:	2b40      	cmp	r3, #64	; 0x40
 800592e:	d1e3      	bne.n	80058f8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2240      	movs	r2, #64	; 0x40
 8005936:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	2b02      	cmp	r3, #2
 800593c:	d014      	beq.n	8005968 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4618      	mov	r0, r3
 8005944:	f7ff f81c 	bl	8004980 <LL_ADC_REG_IsConversionOngoing>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00c      	beq.n	8005968 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4618      	mov	r0, r3
 8005954:	f7fe ffd9 	bl	800490a <LL_ADC_IsDisableOngoing>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d104      	bne.n	8005968 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4618      	mov	r0, r3
 8005964:	f7fe fff8 	bl	8004958 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d014      	beq.n	8005998 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4618      	mov	r0, r3
 8005974:	f7ff f82b 	bl	80049ce <LL_ADC_INJ_IsConversionOngoing>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00c      	beq.n	8005998 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4618      	mov	r0, r3
 8005984:	f7fe ffc1 	bl	800490a <LL_ADC_IsDisableOngoing>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d104      	bne.n	8005998 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f7ff f807 	bl	80049a6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	2b02      	cmp	r3, #2
 800599c:	d005      	beq.n	80059aa <ADC_ConversionStop+0x10e>
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	2b03      	cmp	r3, #3
 80059a2:	d105      	bne.n	80059b0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80059a4:	230c      	movs	r3, #12
 80059a6:	617b      	str	r3, [r7, #20]
        break;
 80059a8:	e005      	b.n	80059b6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80059aa:	2308      	movs	r3, #8
 80059ac:	617b      	str	r3, [r7, #20]
        break;
 80059ae:	e002      	b.n	80059b6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80059b0:	2304      	movs	r3, #4
 80059b2:	617b      	str	r3, [r7, #20]
        break;
 80059b4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80059b6:	f7fe fdd7 	bl	8004568 <HAL_GetTick>
 80059ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80059bc:	e01b      	b.n	80059f6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80059be:	f7fe fdd3 	bl	8004568 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b05      	cmp	r3, #5
 80059ca:	d914      	bls.n	80059f6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689a      	ldr	r2, [r3, #8]
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	4013      	ands	r3, r2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00d      	beq.n	80059f6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059de:	f043 0210 	orr.w	r2, r3, #16
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ea:	f043 0201 	orr.w	r2, r3, #1
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e007      	b.n	8005a06 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	4013      	ands	r3, r2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1dc      	bne.n	80059be <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3720      	adds	r7, #32
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	a33fffff 	.word	0xa33fffff

08005a14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fe ff5f 	bl	80048e4 <LL_ADC_IsEnabled>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d14d      	bne.n	8005ac8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689a      	ldr	r2, [r3, #8]
 8005a32:	4b28      	ldr	r3, [pc, #160]	; (8005ad4 <ADC_Enable+0xc0>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00d      	beq.n	8005a56 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3e:	f043 0210 	orr.w	r2, r3, #16
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4a:	f043 0201 	orr.w	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e039      	b.n	8005aca <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe ff1a 	bl	8004894 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005a60:	f7fe fd82 	bl	8004568 <HAL_GetTick>
 8005a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a66:	e028      	b.n	8005aba <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7fe ff39 	bl	80048e4 <LL_ADC_IsEnabled>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d104      	bne.n	8005a82 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fe ff09 	bl	8004894 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005a82:	f7fe fd71 	bl	8004568 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d914      	bls.n	8005aba <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d00d      	beq.n	8005aba <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa2:	f043 0210 	orr.w	r2, r3, #16
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aae:	f043 0201 	orr.w	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e007      	b.n	8005aca <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d1cf      	bne.n	8005a68 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	8000003f 	.word	0x8000003f

08005ad8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7fe ff10 	bl	800490a <LL_ADC_IsDisableOngoing>
 8005aea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fe fef7 	bl	80048e4 <LL_ADC_IsEnabled>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d047      	beq.n	8005b8c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d144      	bne.n	8005b8c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 030d 	and.w	r3, r3, #13
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d10c      	bne.n	8005b2a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fe fed1 	bl	80048bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2203      	movs	r2, #3
 8005b20:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005b22:	f7fe fd21 	bl	8004568 <HAL_GetTick>
 8005b26:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b28:	e029      	b.n	8005b7e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2e:	f043 0210 	orr.w	r2, r3, #16
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3a:	f043 0201 	orr.w	r2, r3, #1
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e023      	b.n	8005b8e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005b46:	f7fe fd0f 	bl	8004568 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d914      	bls.n	8005b7e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00d      	beq.n	8005b7e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b66:	f043 0210 	orr.w	r2, r3, #16
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b72:	f043 0201 	orr.w	r2, r3, #1
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e007      	b.n	8005b8e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1dc      	bne.n	8005b46 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b084      	sub	sp, #16
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d14b      	bne.n	8005c48 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0308 	and.w	r3, r3, #8
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d021      	beq.n	8005c0e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fe fd83 	bl	80046da <LL_ADC_REG_IsTriggerSourceSWStart>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d032      	beq.n	8005c40 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d12b      	bne.n	8005c40 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d11f      	bne.n	8005c40 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c04:	f043 0201 	orr.w	r2, r3, #1
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	655a      	str	r2, [r3, #84]	; 0x54
 8005c0c:	e018      	b.n	8005c40 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d111      	bne.n	8005c40 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d105      	bne.n	8005c40 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c38:	f043 0201 	orr.w	r2, r3, #1
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f7fd fd2b 	bl	800369c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005c46:	e00e      	b.n	8005c66 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c4c:	f003 0310 	and.w	r3, r3, #16
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f7ff fa37 	bl	80050c8 <HAL_ADC_ErrorCallback>
}
 8005c5a:	e004      	b.n	8005c66 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	4798      	blx	r3
}
 8005c66:	bf00      	nop
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b084      	sub	sp, #16
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f7ff fa19 	bl	80050b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c82:	bf00      	nop
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b084      	sub	sp, #16
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca8:	f043 0204 	orr.w	r2, r3, #4
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f7ff fa09 	bl	80050c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005cb6:	bf00      	nop
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cd0:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <__NVIC_SetPriorityGrouping+0x44>)
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005cdc:	4013      	ands	r3, r2
 8005cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cf2:	4a04      	ldr	r2, [pc, #16]	; (8005d04 <__NVIC_SetPriorityGrouping+0x44>)
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	60d3      	str	r3, [r2, #12]
}
 8005cf8:	bf00      	nop
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	e000ed00 	.word	0xe000ed00

08005d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d0c:	4b04      	ldr	r3, [pc, #16]	; (8005d20 <__NVIC_GetPriorityGrouping+0x18>)
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	0a1b      	lsrs	r3, r3, #8
 8005d12:	f003 0307 	and.w	r3, r3, #7
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	e000ed00 	.word	0xe000ed00

08005d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	db0b      	blt.n	8005d4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d36:	79fb      	ldrb	r3, [r7, #7]
 8005d38:	f003 021f 	and.w	r2, r3, #31
 8005d3c:	4907      	ldr	r1, [pc, #28]	; (8005d5c <__NVIC_EnableIRQ+0x38>)
 8005d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d42:	095b      	lsrs	r3, r3, #5
 8005d44:	2001      	movs	r0, #1
 8005d46:	fa00 f202 	lsl.w	r2, r0, r2
 8005d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	e000e100 	.word	0xe000e100

08005d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4603      	mov	r3, r0
 8005d68:	6039      	str	r1, [r7, #0]
 8005d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	db0a      	blt.n	8005d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	490c      	ldr	r1, [pc, #48]	; (8005dac <__NVIC_SetPriority+0x4c>)
 8005d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d7e:	0112      	lsls	r2, r2, #4
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	440b      	add	r3, r1
 8005d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d88:	e00a      	b.n	8005da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	4908      	ldr	r1, [pc, #32]	; (8005db0 <__NVIC_SetPriority+0x50>)
 8005d90:	79fb      	ldrb	r3, [r7, #7]
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	3b04      	subs	r3, #4
 8005d98:	0112      	lsls	r2, r2, #4
 8005d9a:	b2d2      	uxtb	r2, r2
 8005d9c:	440b      	add	r3, r1
 8005d9e:	761a      	strb	r2, [r3, #24]
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	e000e100 	.word	0xe000e100
 8005db0:	e000ed00 	.word	0xe000ed00

08005db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b089      	sub	sp, #36	; 0x24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f003 0307 	and.w	r3, r3, #7
 8005dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	f1c3 0307 	rsb	r3, r3, #7
 8005dce:	2b04      	cmp	r3, #4
 8005dd0:	bf28      	it	cs
 8005dd2:	2304      	movcs	r3, #4
 8005dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	2b06      	cmp	r3, #6
 8005ddc:	d902      	bls.n	8005de4 <NVIC_EncodePriority+0x30>
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	3b03      	subs	r3, #3
 8005de2:	e000      	b.n	8005de6 <NVIC_EncodePriority+0x32>
 8005de4:	2300      	movs	r3, #0
 8005de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005de8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	fa02 f303 	lsl.w	r3, r2, r3
 8005df2:	43da      	mvns	r2, r3
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	401a      	ands	r2, r3
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	fa01 f303 	lsl.w	r3, r1, r3
 8005e06:	43d9      	mvns	r1, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e0c:	4313      	orrs	r3, r2
         );
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3724      	adds	r7, #36	; 0x24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
	...

08005e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e2c:	d301      	bcc.n	8005e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e00f      	b.n	8005e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e32:	4a0a      	ldr	r2, [pc, #40]	; (8005e5c <SysTick_Config+0x40>)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3b01      	subs	r3, #1
 8005e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e3a:	210f      	movs	r1, #15
 8005e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e40:	f7ff ff8e 	bl	8005d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e44:	4b05      	ldr	r3, [pc, #20]	; (8005e5c <SysTick_Config+0x40>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e4a:	4b04      	ldr	r3, [pc, #16]	; (8005e5c <SysTick_Config+0x40>)
 8005e4c:	2207      	movs	r2, #7
 8005e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	e000e010 	.word	0xe000e010

08005e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7ff ff29 	bl	8005cc0 <__NVIC_SetPriorityGrouping>
}
 8005e6e:	bf00      	nop
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b086      	sub	sp, #24
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	607a      	str	r2, [r7, #4]
 8005e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005e84:	2300      	movs	r3, #0
 8005e86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e88:	f7ff ff3e 	bl	8005d08 <__NVIC_GetPriorityGrouping>
 8005e8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	68b9      	ldr	r1, [r7, #8]
 8005e92:	6978      	ldr	r0, [r7, #20]
 8005e94:	f7ff ff8e 	bl	8005db4 <NVIC_EncodePriority>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e9e:	4611      	mov	r1, r2
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff ff5d 	bl	8005d60 <__NVIC_SetPriority>
}
 8005ea6:	bf00      	nop
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b082      	sub	sp, #8
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7ff ff31 	bl	8005d24 <__NVIC_EnableIRQ>
}
 8005ec2:	bf00      	nop
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b082      	sub	sp, #8
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7ff ffa2 	bl	8005e1c <SysTick_Config>
 8005ed8:	4603      	mov	r3, r0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
	...

08005ee4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e098      	b.n	8006028 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	461a      	mov	r2, r3
 8005efc:	4b4d      	ldr	r3, [pc, #308]	; (8006034 <HAL_DMA_Init+0x150>)
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d80f      	bhi.n	8005f22 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	4b4b      	ldr	r3, [pc, #300]	; (8006038 <HAL_DMA_Init+0x154>)
 8005f0a:	4413      	add	r3, r2
 8005f0c:	4a4b      	ldr	r2, [pc, #300]	; (800603c <HAL_DMA_Init+0x158>)
 8005f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f12:	091b      	lsrs	r3, r3, #4
 8005f14:	009a      	lsls	r2, r3, #2
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a48      	ldr	r2, [pc, #288]	; (8006040 <HAL_DMA_Init+0x15c>)
 8005f1e:	641a      	str	r2, [r3, #64]	; 0x40
 8005f20:	e00e      	b.n	8005f40 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	4b46      	ldr	r3, [pc, #280]	; (8006044 <HAL_DMA_Init+0x160>)
 8005f2a:	4413      	add	r3, r2
 8005f2c:	4a43      	ldr	r2, [pc, #268]	; (800603c <HAL_DMA_Init+0x158>)
 8005f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f32:	091b      	lsrs	r3, r3, #4
 8005f34:	009a      	lsls	r2, r3, #2
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a42      	ldr	r2, [pc, #264]	; (8006048 <HAL_DMA_Init+0x164>)
 8005f3e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f9a:	d039      	beq.n	8006010 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	4a27      	ldr	r2, [pc, #156]	; (8006040 <HAL_DMA_Init+0x15c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d11a      	bne.n	8005fdc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005fa6:	4b29      	ldr	r3, [pc, #164]	; (800604c <HAL_DMA_Init+0x168>)
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fae:	f003 031c 	and.w	r3, r3, #28
 8005fb2:	210f      	movs	r1, #15
 8005fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb8:	43db      	mvns	r3, r3
 8005fba:	4924      	ldr	r1, [pc, #144]	; (800604c <HAL_DMA_Init+0x168>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005fc0:	4b22      	ldr	r3, [pc, #136]	; (800604c <HAL_DMA_Init+0x168>)
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6859      	ldr	r1, [r3, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fcc:	f003 031c 	and.w	r3, r3, #28
 8005fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd4:	491d      	ldr	r1, [pc, #116]	; (800604c <HAL_DMA_Init+0x168>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	600b      	str	r3, [r1, #0]
 8005fda:	e019      	b.n	8006010 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005fdc:	4b1c      	ldr	r3, [pc, #112]	; (8006050 <HAL_DMA_Init+0x16c>)
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe4:	f003 031c 	and.w	r3, r3, #28
 8005fe8:	210f      	movs	r1, #15
 8005fea:	fa01 f303 	lsl.w	r3, r1, r3
 8005fee:	43db      	mvns	r3, r3
 8005ff0:	4917      	ldr	r1, [pc, #92]	; (8006050 <HAL_DMA_Init+0x16c>)
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005ff6:	4b16      	ldr	r3, [pc, #88]	; (8006050 <HAL_DMA_Init+0x16c>)
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6859      	ldr	r1, [r3, #4]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006002:	f003 031c 	and.w	r3, r3, #28
 8006006:	fa01 f303 	lsl.w	r3, r1, r3
 800600a:	4911      	ldr	r1, [pc, #68]	; (8006050 <HAL_DMA_Init+0x16c>)
 800600c:	4313      	orrs	r3, r2
 800600e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	40020407 	.word	0x40020407
 8006038:	bffdfff8 	.word	0xbffdfff8
 800603c:	cccccccd 	.word	0xcccccccd
 8006040:	40020000 	.word	0x40020000
 8006044:	bffdfbf8 	.word	0xbffdfbf8
 8006048:	40020400 	.word	0x40020400
 800604c:	400200a8 	.word	0x400200a8
 8006050:	400204a8 	.word	0x400204a8

08006054 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
 8006060:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800606c:	2b01      	cmp	r3, #1
 800606e:	d101      	bne.n	8006074 <HAL_DMA_Start_IT+0x20>
 8006070:	2302      	movs	r3, #2
 8006072:	e04b      	b.n	800610c <HAL_DMA_Start_IT+0xb8>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b01      	cmp	r3, #1
 8006086:	d13a      	bne.n	80060fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0201 	bic.w	r2, r2, #1
 80060a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	68b9      	ldr	r1, [r7, #8]
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 f91e 	bl	80062ee <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d008      	beq.n	80060cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f042 020e 	orr.w	r2, r2, #14
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	e00f      	b.n	80060ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0204 	bic.w	r2, r2, #4
 80060da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 020a 	orr.w	r2, r2, #10
 80060ea:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0201 	orr.w	r2, r2, #1
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	e005      	b.n	800610a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006106:	2302      	movs	r3, #2
 8006108:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800610a:	7dfb      	ldrb	r3, [r7, #23]
}
 800610c:	4618      	mov	r0, r3
 800610e:	3718      	adds	r7, #24
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d008      	beq.n	800613e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2204      	movs	r2, #4
 8006130:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e022      	b.n	8006184 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 020e 	bic.w	r2, r2, #14
 800614c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0201 	bic.w	r2, r2, #1
 800615c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006162:	f003 021c 	and.w	r2, r3, #28
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	2101      	movs	r1, #1
 800616c:	fa01 f202 	lsl.w	r2, r1, r2
 8006170:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006182:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006184:	4618      	mov	r0, r3
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ac:	f003 031c 	and.w	r3, r3, #28
 80061b0:	2204      	movs	r2, #4
 80061b2:	409a      	lsls	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4013      	ands	r3, r2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d026      	beq.n	800620a <HAL_DMA_IRQHandler+0x7a>
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f003 0304 	and.w	r3, r3, #4
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d021      	beq.n	800620a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0320 	and.w	r3, r3, #32
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d107      	bne.n	80061e4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 0204 	bic.w	r2, r2, #4
 80061e2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e8:	f003 021c 	and.w	r2, r3, #28
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f0:	2104      	movs	r1, #4
 80061f2:	fa01 f202 	lsl.w	r2, r1, r2
 80061f6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d071      	beq.n	80062e4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006208:	e06c      	b.n	80062e4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620e:	f003 031c 	and.w	r3, r3, #28
 8006212:	2202      	movs	r2, #2
 8006214:	409a      	lsls	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4013      	ands	r3, r2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d02e      	beq.n	800627c <HAL_DMA_IRQHandler+0xec>
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d029      	beq.n	800627c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0320 	and.w	r3, r3, #32
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10b      	bne.n	800624e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 020a 	bic.w	r2, r2, #10
 8006244:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006252:	f003 021c 	and.w	r2, r3, #28
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	2102      	movs	r1, #2
 800625c:	fa01 f202 	lsl.w	r2, r1, r2
 8006260:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626e:	2b00      	cmp	r3, #0
 8006270:	d038      	beq.n	80062e4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800627a:	e033      	b.n	80062e4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006280:	f003 031c 	and.w	r3, r3, #28
 8006284:	2208      	movs	r2, #8
 8006286:	409a      	lsls	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4013      	ands	r3, r2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d02a      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x156>
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f003 0308 	and.w	r3, r3, #8
 8006296:	2b00      	cmp	r3, #0
 8006298:	d025      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 020e 	bic.w	r2, r2, #14
 80062a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ae:	f003 021c 	and.w	r2, r3, #28
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b6:	2101      	movs	r1, #1
 80062b8:	fa01 f202 	lsl.w	r2, r1, r2
 80062bc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d004      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop
}
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b085      	sub	sp, #20
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	60f8      	str	r0, [r7, #12]
 80062f6:	60b9      	str	r1, [r7, #8]
 80062f8:	607a      	str	r2, [r7, #4]
 80062fa:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006300:	f003 021c 	and.w	r2, r3, #28
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006308:	2101      	movs	r1, #1
 800630a:	fa01 f202 	lsl.w	r2, r1, r2
 800630e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	2b10      	cmp	r3, #16
 800631e:	d108      	bne.n	8006332 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006330:	e007      	b.n	8006342 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	60da      	str	r2, [r3, #12]
}
 8006342:	bf00      	nop
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
	...

08006350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006350:	b480      	push	{r7}
 8006352:	b087      	sub	sp, #28
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800635a:	2300      	movs	r3, #0
 800635c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800635e:	e148      	b.n	80065f2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	2101      	movs	r1, #1
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	fa01 f303 	lsl.w	r3, r1, r3
 800636c:	4013      	ands	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2b00      	cmp	r3, #0
 8006374:	f000 813a 	beq.w	80065ec <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d00b      	beq.n	8006398 <HAL_GPIO_Init+0x48>
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	2b02      	cmp	r3, #2
 8006386:	d007      	beq.n	8006398 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800638c:	2b11      	cmp	r3, #17
 800638e:	d003      	beq.n	8006398 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	2b12      	cmp	r3, #18
 8006396:	d130      	bne.n	80063fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	005b      	lsls	r3, r3, #1
 80063a2:	2203      	movs	r2, #3
 80063a4:	fa02 f303 	lsl.w	r3, r2, r3
 80063a8:	43db      	mvns	r3, r3
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	4013      	ands	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	68da      	ldr	r2, [r3, #12]
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	005b      	lsls	r3, r3, #1
 80063b8:	fa02 f303 	lsl.w	r3, r2, r3
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	4313      	orrs	r3, r2
 80063c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80063ce:	2201      	movs	r2, #1
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	fa02 f303 	lsl.w	r3, r2, r3
 80063d6:	43db      	mvns	r3, r3
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	4013      	ands	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	091b      	lsrs	r3, r3, #4
 80063e4:	f003 0201 	and.w	r2, r3, #1
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	fa02 f303 	lsl.w	r3, r2, r3
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	2203      	movs	r2, #3
 8006406:	fa02 f303 	lsl.w	r3, r2, r3
 800640a:	43db      	mvns	r3, r3
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	4013      	ands	r3, r2
 8006410:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	689a      	ldr	r2, [r3, #8]
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	fa02 f303 	lsl.w	r3, r2, r3
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	4313      	orrs	r3, r2
 8006422:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2b02      	cmp	r3, #2
 8006430:	d003      	beq.n	800643a <HAL_GPIO_Init+0xea>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	2b12      	cmp	r3, #18
 8006438:	d123      	bne.n	8006482 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	08da      	lsrs	r2, r3, #3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	3208      	adds	r2, #8
 8006442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006446:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f003 0307 	and.w	r3, r3, #7
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	220f      	movs	r2, #15
 8006452:	fa02 f303 	lsl.w	r3, r2, r3
 8006456:	43db      	mvns	r3, r3
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	4013      	ands	r3, r2
 800645c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	691a      	ldr	r2, [r3, #16]
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f003 0307 	and.w	r3, r3, #7
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	fa02 f303 	lsl.w	r3, r2, r3
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	4313      	orrs	r3, r2
 8006472:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	08da      	lsrs	r2, r3, #3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	3208      	adds	r2, #8
 800647c:	6939      	ldr	r1, [r7, #16]
 800647e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	2203      	movs	r2, #3
 800648e:	fa02 f303 	lsl.w	r3, r2, r3
 8006492:	43db      	mvns	r3, r3
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	4013      	ands	r3, r2
 8006498:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f003 0203 	and.w	r2, r3, #3
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	fa02 f303 	lsl.w	r3, r2, r3
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f000 8094 	beq.w	80065ec <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064c4:	4b52      	ldr	r3, [pc, #328]	; (8006610 <HAL_GPIO_Init+0x2c0>)
 80064c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c8:	4a51      	ldr	r2, [pc, #324]	; (8006610 <HAL_GPIO_Init+0x2c0>)
 80064ca:	f043 0301 	orr.w	r3, r3, #1
 80064ce:	6613      	str	r3, [r2, #96]	; 0x60
 80064d0:	4b4f      	ldr	r3, [pc, #316]	; (8006610 <HAL_GPIO_Init+0x2c0>)
 80064d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	60bb      	str	r3, [r7, #8]
 80064da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80064dc:	4a4d      	ldr	r2, [pc, #308]	; (8006614 <HAL_GPIO_Init+0x2c4>)
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	089b      	lsrs	r3, r3, #2
 80064e2:	3302      	adds	r3, #2
 80064e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f003 0303 	and.w	r3, r3, #3
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	220f      	movs	r2, #15
 80064f4:	fa02 f303 	lsl.w	r3, r2, r3
 80064f8:	43db      	mvns	r3, r3
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	4013      	ands	r3, r2
 80064fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006506:	d00d      	beq.n	8006524 <HAL_GPIO_Init+0x1d4>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a43      	ldr	r2, [pc, #268]	; (8006618 <HAL_GPIO_Init+0x2c8>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d007      	beq.n	8006520 <HAL_GPIO_Init+0x1d0>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a42      	ldr	r2, [pc, #264]	; (800661c <HAL_GPIO_Init+0x2cc>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d101      	bne.n	800651c <HAL_GPIO_Init+0x1cc>
 8006518:	2302      	movs	r3, #2
 800651a:	e004      	b.n	8006526 <HAL_GPIO_Init+0x1d6>
 800651c:	2307      	movs	r3, #7
 800651e:	e002      	b.n	8006526 <HAL_GPIO_Init+0x1d6>
 8006520:	2301      	movs	r3, #1
 8006522:	e000      	b.n	8006526 <HAL_GPIO_Init+0x1d6>
 8006524:	2300      	movs	r3, #0
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	f002 0203 	and.w	r2, r2, #3
 800652c:	0092      	lsls	r2, r2, #2
 800652e:	4093      	lsls	r3, r2
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	4313      	orrs	r3, r2
 8006534:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006536:	4937      	ldr	r1, [pc, #220]	; (8006614 <HAL_GPIO_Init+0x2c4>)
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	089b      	lsrs	r3, r3, #2
 800653c:	3302      	adds	r3, #2
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006544:	4b36      	ldr	r3, [pc, #216]	; (8006620 <HAL_GPIO_Init+0x2d0>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	43db      	mvns	r3, r3
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	4013      	ands	r3, r2
 8006552:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	4313      	orrs	r3, r2
 8006566:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006568:	4a2d      	ldr	r2, [pc, #180]	; (8006620 <HAL_GPIO_Init+0x2d0>)
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800656e:	4b2c      	ldr	r3, [pc, #176]	; (8006620 <HAL_GPIO_Init+0x2d0>)
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	43db      	mvns	r3, r3
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	4013      	ands	r3, r2
 800657c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4313      	orrs	r3, r2
 8006590:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006592:	4a23      	ldr	r2, [pc, #140]	; (8006620 <HAL_GPIO_Init+0x2d0>)
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006598:	4b21      	ldr	r3, [pc, #132]	; (8006620 <HAL_GPIO_Init+0x2d0>)
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	43db      	mvns	r3, r3
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	4013      	ands	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d003      	beq.n	80065bc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80065bc:	4a18      	ldr	r2, [pc, #96]	; (8006620 <HAL_GPIO_Init+0x2d0>)
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80065c2:	4b17      	ldr	r3, [pc, #92]	; (8006620 <HAL_GPIO_Init+0x2d0>)
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	43db      	mvns	r3, r3
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4013      	ands	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80065e6:	4a0e      	ldr	r2, [pc, #56]	; (8006620 <HAL_GPIO_Init+0x2d0>)
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	3301      	adds	r3, #1
 80065f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	fa22 f303 	lsr.w	r3, r2, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f47f aeaf 	bne.w	8006360 <HAL_GPIO_Init+0x10>
  }
}
 8006602:	bf00      	nop
 8006604:	bf00      	nop
 8006606:	371c      	adds	r7, #28
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	40021000 	.word	0x40021000
 8006614:	40010000 	.word	0x40010000
 8006618:	48000400 	.word	0x48000400
 800661c:	48000800 	.word	0x48000800
 8006620:	40010400 	.word	0x40010400

08006624 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	460b      	mov	r3, r1
 800662e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	691a      	ldr	r2, [r3, #16]
 8006634:	887b      	ldrh	r3, [r7, #2]
 8006636:	4013      	ands	r3, r2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800663c:	2301      	movs	r3, #1
 800663e:	73fb      	strb	r3, [r7, #15]
 8006640:	e001      	b.n	8006646 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006642:	2300      	movs	r3, #0
 8006644:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006646:	7bfb      	ldrb	r3, [r7, #15]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	807b      	strh	r3, [r7, #2]
 8006660:	4613      	mov	r3, r2
 8006662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006664:	787b      	ldrb	r3, [r7, #1]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800666a:	887a      	ldrh	r2, [r7, #2]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006670:	e002      	b.n	8006678 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006672:	887a      	ldrh	r2, [r7, #2]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e081      	b.n	800679a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d106      	bne.n	80066b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7fd f8e2 	bl	8003874 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2224      	movs	r2, #36	; 0x24
 80066b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 0201 	bic.w	r2, r2, #1
 80066c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	689a      	ldr	r2, [r3, #8]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d107      	bne.n	80066fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	689a      	ldr	r2, [r3, #8]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066fa:	609a      	str	r2, [r3, #8]
 80066fc:	e006      	b.n	800670c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689a      	ldr	r2, [r3, #8]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800670a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	2b02      	cmp	r3, #2
 8006712:	d104      	bne.n	800671e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800671c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6812      	ldr	r2, [r2, #0]
 8006728:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800672c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006730:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68da      	ldr	r2, [r3, #12]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006740:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	691a      	ldr	r2, [r3, #16]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	ea42 0103 	orr.w	r1, r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	021a      	lsls	r2, r3, #8
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	69d9      	ldr	r1, [r3, #28]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a1a      	ldr	r2, [r3, #32]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f042 0201 	orr.w	r2, r2, #1
 800677a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2220      	movs	r2, #32
 8006786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
	...

080067a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b088      	sub	sp, #32
 80067a8:	af02      	add	r7, sp, #8
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	607a      	str	r2, [r7, #4]
 80067ae:	461a      	mov	r2, r3
 80067b0:	460b      	mov	r3, r1
 80067b2:	817b      	strh	r3, [r7, #10]
 80067b4:	4613      	mov	r3, r2
 80067b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b20      	cmp	r3, #32
 80067c2:	f040 80da 	bne.w	800697a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d101      	bne.n	80067d4 <HAL_I2C_Master_Transmit+0x30>
 80067d0:	2302      	movs	r3, #2
 80067d2:	e0d3      	b.n	800697c <HAL_I2C_Master_Transmit+0x1d8>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80067dc:	f7fd fec4 	bl	8004568 <HAL_GetTick>
 80067e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	2319      	movs	r3, #25
 80067e8:	2201      	movs	r2, #1
 80067ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 f8fc 	bl	80069ec <I2C_WaitOnFlagUntilTimeout>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e0be      	b.n	800697c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2221      	movs	r2, #33	; 0x21
 8006802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2210      	movs	r2, #16
 800680a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	893a      	ldrh	r2, [r7, #8]
 800681e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800682a:	b29b      	uxth	r3, r3
 800682c:	2bff      	cmp	r3, #255	; 0xff
 800682e:	d90e      	bls.n	800684e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	22ff      	movs	r2, #255	; 0xff
 8006834:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800683a:	b2da      	uxtb	r2, r3
 800683c:	8979      	ldrh	r1, [r7, #10]
 800683e:	4b51      	ldr	r3, [pc, #324]	; (8006984 <HAL_I2C_Master_Transmit+0x1e0>)
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f000 f9f2 	bl	8006c30 <I2C_TransferConfig>
 800684c:	e06c      	b.n	8006928 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006852:	b29a      	uxth	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800685c:	b2da      	uxtb	r2, r3
 800685e:	8979      	ldrh	r1, [r7, #10]
 8006860:	4b48      	ldr	r3, [pc, #288]	; (8006984 <HAL_I2C_Master_Transmit+0x1e0>)
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 f9e1 	bl	8006c30 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800686e:	e05b      	b.n	8006928 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	6a39      	ldr	r1, [r7, #32]
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 f8f9 	bl	8006a6c <I2C_WaitOnTXISFlagUntilTimeout>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e07b      	b.n	800697c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	781a      	ldrb	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006894:	1c5a      	adds	r2, r3, #1
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800689e:	b29b      	uxth	r3, r3
 80068a0:	3b01      	subs	r3, #1
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ac:	3b01      	subs	r3, #1
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d034      	beq.n	8006928 <HAL_I2C_Master_Transmit+0x184>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d130      	bne.n	8006928 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	2200      	movs	r2, #0
 80068ce:	2180      	movs	r1, #128	; 0x80
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f000 f88b 	bl	80069ec <I2C_WaitOnFlagUntilTimeout>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e04d      	b.n	800697c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	2bff      	cmp	r3, #255	; 0xff
 80068e8:	d90e      	bls.n	8006908 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	22ff      	movs	r2, #255	; 0xff
 80068ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	8979      	ldrh	r1, [r7, #10]
 80068f8:	2300      	movs	r3, #0
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 f995 	bl	8006c30 <I2C_TransferConfig>
 8006906:	e00f      	b.n	8006928 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800690c:	b29a      	uxth	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006916:	b2da      	uxtb	r2, r3
 8006918:	8979      	ldrh	r1, [r7, #10]
 800691a:	2300      	movs	r3, #0
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 f984 	bl	8006c30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692c:	b29b      	uxth	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d19e      	bne.n	8006870 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	6a39      	ldr	r1, [r7, #32]
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 f8d8 	bl	8006aec <I2C_WaitOnSTOPFlagUntilTimeout>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e01a      	b.n	800697c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2220      	movs	r2, #32
 800694c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6859      	ldr	r1, [r3, #4]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	4b0b      	ldr	r3, [pc, #44]	; (8006988 <HAL_I2C_Master_Transmit+0x1e4>)
 800695a:	400b      	ands	r3, r1
 800695c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2220      	movs	r2, #32
 8006962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	e000      	b.n	800697c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800697a:	2302      	movs	r3, #2
  }
}
 800697c:	4618      	mov	r0, r3
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	80002000 	.word	0x80002000
 8006988:	fe00e800 	.word	0xfe00e800

0800698c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006998:	4618      	mov	r0, r3
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d103      	bne.n	80069c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2200      	movs	r2, #0
 80069c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d007      	beq.n	80069e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	699a      	ldr	r2, [r3, #24]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f042 0201 	orr.w	r2, r2, #1
 80069de:	619a      	str	r2, [r3, #24]
  }
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	603b      	str	r3, [r7, #0]
 80069f8:	4613      	mov	r3, r2
 80069fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069fc:	e022      	b.n	8006a44 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a04:	d01e      	beq.n	8006a44 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a06:	f7fd fdaf 	bl	8004568 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d302      	bcc.n	8006a1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d113      	bne.n	8006a44 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a20:	f043 0220 	orr.w	r2, r3, #32
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e00f      	b.n	8006a64 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	699a      	ldr	r2, [r3, #24]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	bf0c      	ite	eq
 8006a54:	2301      	moveq	r3, #1
 8006a56:	2300      	movne	r3, #0
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	79fb      	ldrb	r3, [r7, #7]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d0cd      	beq.n	80069fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a78:	e02c      	b.n	8006ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 f870 	bl	8006b64 <I2C_IsAcknowledgeFailed>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e02a      	b.n	8006ae4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a94:	d01e      	beq.n	8006ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a96:	f7fd fd67 	bl	8004568 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d302      	bcc.n	8006aac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d113      	bne.n	8006ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab0:	f043 0220 	orr.w	r2, r3, #32
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2220      	movs	r2, #32
 8006abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e007      	b.n	8006ae4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d1cb      	bne.n	8006a7a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006af8:	e028      	b.n	8006b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	68b9      	ldr	r1, [r7, #8]
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f000 f830 	bl	8006b64 <I2C_IsAcknowledgeFailed>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d001      	beq.n	8006b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e026      	b.n	8006b5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b0e:	f7fd fd2b 	bl	8004568 <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d302      	bcc.n	8006b24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d113      	bne.n	8006b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b28:	f043 0220 	orr.w	r2, r3, #32
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2220      	movs	r2, #32
 8006b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e007      	b.n	8006b5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	f003 0320 	and.w	r3, r3, #32
 8006b56:	2b20      	cmp	r3, #32
 8006b58:	d1cf      	bne.n	8006afa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	f003 0310 	and.w	r3, r3, #16
 8006b7a:	2b10      	cmp	r3, #16
 8006b7c:	d151      	bne.n	8006c22 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b7e:	e022      	b.n	8006bc6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b86:	d01e      	beq.n	8006bc6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b88:	f7fd fcee 	bl	8004568 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d302      	bcc.n	8006b9e <I2C_IsAcknowledgeFailed+0x3a>
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d113      	bne.n	8006bc6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba2:	f043 0220 	orr.w	r2, r3, #32
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e02e      	b.n	8006c24 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	f003 0320 	and.w	r3, r3, #32
 8006bd0:	2b20      	cmp	r3, #32
 8006bd2:	d1d5      	bne.n	8006b80 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2210      	movs	r2, #16
 8006bda:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2220      	movs	r2, #32
 8006be2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f7ff fedd 	bl	80069a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6859      	ldr	r1, [r3, #4]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	4b0d      	ldr	r3, [pc, #52]	; (8006c2c <I2C_IsAcknowledgeFailed+0xc8>)
 8006bf6:	400b      	ands	r3, r1
 8006bf8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bfe:	f043 0204 	orr.w	r2, r3, #4
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e000      	b.n	8006c24 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	fe00e800 	.word	0xfe00e800

08006c30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	607b      	str	r3, [r7, #4]
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	817b      	strh	r3, [r7, #10]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	0d5b      	lsrs	r3, r3, #21
 8006c4c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006c50:	4b0d      	ldr	r3, [pc, #52]	; (8006c88 <I2C_TransferConfig+0x58>)
 8006c52:	430b      	orrs	r3, r1
 8006c54:	43db      	mvns	r3, r3
 8006c56:	ea02 0103 	and.w	r1, r2, r3
 8006c5a:	897b      	ldrh	r3, [r7, #10]
 8006c5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006c60:	7a7b      	ldrb	r3, [r7, #9]
 8006c62:	041b      	lsls	r3, r3, #16
 8006c64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	431a      	orrs	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006c7a:	bf00      	nop
 8006c7c:	3714      	adds	r7, #20
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	03ff63ff 	.word	0x03ff63ff

08006c8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b20      	cmp	r3, #32
 8006ca0:	d138      	bne.n	8006d14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d101      	bne.n	8006cb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006cac:	2302      	movs	r3, #2
 8006cae:	e032      	b.n	8006d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2224      	movs	r2, #36	; 0x24
 8006cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f022 0201 	bic.w	r2, r2, #1
 8006cce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006cde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6819      	ldr	r1, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0201 	orr.w	r2, r2, #1
 8006cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2220      	movs	r2, #32
 8006d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	e000      	b.n	8006d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d14:	2302      	movs	r3, #2
  }
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b085      	sub	sp, #20
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b20      	cmp	r3, #32
 8006d36:	d139      	bne.n	8006dac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d101      	bne.n	8006d46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d42:	2302      	movs	r3, #2
 8006d44:	e033      	b.n	8006dae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2224      	movs	r2, #36	; 0x24
 8006d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 0201 	bic.w	r2, r2, #1
 8006d64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006d74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	021b      	lsls	r3, r3, #8
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0201 	orr.w	r2, r2, #1
 8006d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	e000      	b.n	8006dae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006dac:	2302      	movs	r3, #2
  }
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3714      	adds	r7, #20
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
	...

08006dbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006dc0:	4b04      	ldr	r3, [pc, #16]	; (8006dd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	40007000 	.word	0x40007000

08006dd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006de6:	d130      	bne.n	8006e4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006de8:	4b23      	ldr	r3, [pc, #140]	; (8006e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006df4:	d038      	beq.n	8006e68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006df6:	4b20      	ldr	r3, [pc, #128]	; (8006e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006dfe:	4a1e      	ldr	r2, [pc, #120]	; (8006e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e06:	4b1d      	ldr	r3, [pc, #116]	; (8006e7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2232      	movs	r2, #50	; 0x32
 8006e0c:	fb02 f303 	mul.w	r3, r2, r3
 8006e10:	4a1b      	ldr	r2, [pc, #108]	; (8006e80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006e12:	fba2 2303 	umull	r2, r3, r2, r3
 8006e16:	0c9b      	lsrs	r3, r3, #18
 8006e18:	3301      	adds	r3, #1
 8006e1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e1c:	e002      	b.n	8006e24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	3b01      	subs	r3, #1
 8006e22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e24:	4b14      	ldr	r3, [pc, #80]	; (8006e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e30:	d102      	bne.n	8006e38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1f2      	bne.n	8006e1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e38:	4b0f      	ldr	r3, [pc, #60]	; (8006e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e3a:	695b      	ldr	r3, [r3, #20]
 8006e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e44:	d110      	bne.n	8006e68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e00f      	b.n	8006e6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e4a:	4b0b      	ldr	r3, [pc, #44]	; (8006e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e56:	d007      	beq.n	8006e68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006e58:	4b07      	ldr	r3, [pc, #28]	; (8006e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e60:	4a05      	ldr	r2, [pc, #20]	; (8006e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	40007000 	.word	0x40007000
 8006e7c:	20000000 	.word	0x20000000
 8006e80:	431bde83 	.word	0x431bde83

08006e84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b088      	sub	sp, #32
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d102      	bne.n	8006e98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	f000 bc10 	b.w	80076b8 <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e98:	4b96      	ldr	r3, [pc, #600]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f003 030c 	and.w	r3, r3, #12
 8006ea0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ea2:	4b94      	ldr	r3, [pc, #592]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	f003 0303 	and.w	r3, r3, #3
 8006eaa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0310 	and.w	r3, r3, #16
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 80e4 	beq.w	8007082 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d007      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x4c>
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	2b0c      	cmp	r3, #12
 8006ec4:	f040 808b 	bne.w	8006fde <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	f040 8087 	bne.w	8006fde <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006ed0:	4b88      	ldr	r3, [pc, #544]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0302 	and.w	r3, r3, #2
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d005      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x64>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e3e7      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a1a      	ldr	r2, [r3, #32]
 8006eec:	4b81      	ldr	r3, [pc, #516]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0308 	and.w	r3, r3, #8
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d004      	beq.n	8006f02 <HAL_RCC_OscConfig+0x7e>
 8006ef8:	4b7e      	ldr	r3, [pc, #504]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f00:	e005      	b.n	8006f0e <HAL_RCC_OscConfig+0x8a>
 8006f02:	4b7c      	ldr	r3, [pc, #496]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8006f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f08:	091b      	lsrs	r3, r3, #4
 8006f0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d223      	bcs.n	8006f5a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 fd7a 	bl	8007a10 <RCC_SetFlashLatencyFromMSIRange>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d001      	beq.n	8006f26 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e3c8      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f26:	4b73      	ldr	r3, [pc, #460]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a72      	ldr	r2, [pc, #456]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8006f2c:	f043 0308 	orr.w	r3, r3, #8
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	4b70      	ldr	r3, [pc, #448]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	496d      	ldr	r1, [pc, #436]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f44:	4b6b      	ldr	r3, [pc, #428]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	021b      	lsls	r3, r3, #8
 8006f52:	4968      	ldr	r1, [pc, #416]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8006f54:	4313      	orrs	r3, r2
 8006f56:	604b      	str	r3, [r1, #4]
 8006f58:	e025      	b.n	8006fa6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f5a:	4b66      	ldr	r3, [pc, #408]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a65      	ldr	r2, [pc, #404]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8006f60:	f043 0308 	orr.w	r3, r3, #8
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	4b63      	ldr	r3, [pc, #396]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	4960      	ldr	r1, [pc, #384]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8006f74:	4313      	orrs	r3, r2
 8006f76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f78:	4b5e      	ldr	r3, [pc, #376]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	69db      	ldr	r3, [r3, #28]
 8006f84:	021b      	lsls	r3, r3, #8
 8006f86:	495b      	ldr	r1, [pc, #364]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d109      	bne.n	8006fa6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 fd3a 	bl	8007a10 <RCC_SetFlashLatencyFromMSIRange>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e388      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006fa6:	f000 fc6f 	bl	8007888 <HAL_RCC_GetSysClockFreq>
 8006faa:	4602      	mov	r2, r0
 8006fac:	4b51      	ldr	r3, [pc, #324]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	091b      	lsrs	r3, r3, #4
 8006fb2:	f003 030f 	and.w	r3, r3, #15
 8006fb6:	4950      	ldr	r1, [pc, #320]	; (80070f8 <HAL_RCC_OscConfig+0x274>)
 8006fb8:	5ccb      	ldrb	r3, [r1, r3]
 8006fba:	f003 031f 	and.w	r3, r3, #31
 8006fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc2:	4a4e      	ldr	r2, [pc, #312]	; (80070fc <HAL_RCC_OscConfig+0x278>)
 8006fc4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006fc6:	4b4e      	ldr	r3, [pc, #312]	; (8007100 <HAL_RCC_OscConfig+0x27c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fd fa7c 	bl	80044c8 <HAL_InitTick>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d052      	beq.n	8007080 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
 8006fdc:	e36c      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d032      	beq.n	800704c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006fe6:	4b43      	ldr	r3, [pc, #268]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a42      	ldr	r2, [pc, #264]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8006fec:	f043 0301 	orr.w	r3, r3, #1
 8006ff0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006ff2:	f7fd fab9 	bl	8004568 <HAL_GetTick>
 8006ff6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ff8:	e008      	b.n	800700c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ffa:	f7fd fab5 	bl	8004568 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	2b02      	cmp	r3, #2
 8007006:	d901      	bls.n	800700c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e355      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800700c:	4b39      	ldr	r3, [pc, #228]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d0f0      	beq.n	8006ffa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007018:	4b36      	ldr	r3, [pc, #216]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a35      	ldr	r2, [pc, #212]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 800701e:	f043 0308 	orr.w	r3, r3, #8
 8007022:	6013      	str	r3, [r2, #0]
 8007024:	4b33      	ldr	r3, [pc, #204]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	4930      	ldr	r1, [pc, #192]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8007032:	4313      	orrs	r3, r2
 8007034:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007036:	4b2f      	ldr	r3, [pc, #188]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	021b      	lsls	r3, r3, #8
 8007044:	492b      	ldr	r1, [pc, #172]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8007046:	4313      	orrs	r3, r2
 8007048:	604b      	str	r3, [r1, #4]
 800704a:	e01a      	b.n	8007082 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800704c:	4b29      	ldr	r3, [pc, #164]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a28      	ldr	r2, [pc, #160]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8007052:	f023 0301 	bic.w	r3, r3, #1
 8007056:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007058:	f7fd fa86 	bl	8004568 <HAL_GetTick>
 800705c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800705e:	e008      	b.n	8007072 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007060:	f7fd fa82 	bl	8004568 <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	2b02      	cmp	r3, #2
 800706c:	d901      	bls.n	8007072 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e322      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007072:	4b20      	ldr	r3, [pc, #128]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1f0      	bne.n	8007060 <HAL_RCC_OscConfig+0x1dc>
 800707e:	e000      	b.n	8007082 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007080:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d073      	beq.n	8007176 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	2b08      	cmp	r3, #8
 8007092:	d005      	beq.n	80070a0 <HAL_RCC_OscConfig+0x21c>
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	2b0c      	cmp	r3, #12
 8007098:	d10e      	bne.n	80070b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	2b03      	cmp	r3, #3
 800709e:	d10b      	bne.n	80070b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070a0:	4b14      	ldr	r3, [pc, #80]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d063      	beq.n	8007174 <HAL_RCC_OscConfig+0x2f0>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d15f      	bne.n	8007174 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e2ff      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070c0:	d106      	bne.n	80070d0 <HAL_RCC_OscConfig+0x24c>
 80070c2:	4b0c      	ldr	r3, [pc, #48]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a0b      	ldr	r2, [pc, #44]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 80070c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	e025      	b.n	800711c <HAL_RCC_OscConfig+0x298>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070d8:	d114      	bne.n	8007104 <HAL_RCC_OscConfig+0x280>
 80070da:	4b06      	ldr	r3, [pc, #24]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a05      	ldr	r2, [pc, #20]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 80070e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070e4:	6013      	str	r3, [r2, #0]
 80070e6:	4b03      	ldr	r3, [pc, #12]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a02      	ldr	r2, [pc, #8]	; (80070f4 <HAL_RCC_OscConfig+0x270>)
 80070ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070f0:	6013      	str	r3, [r2, #0]
 80070f2:	e013      	b.n	800711c <HAL_RCC_OscConfig+0x298>
 80070f4:	40021000 	.word	0x40021000
 80070f8:	0800c65c 	.word	0x0800c65c
 80070fc:	20000000 	.word	0x20000000
 8007100:	20000004 	.word	0x20000004
 8007104:	4ba0      	ldr	r3, [pc, #640]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a9f      	ldr	r2, [pc, #636]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 800710a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800710e:	6013      	str	r3, [r2, #0]
 8007110:	4b9d      	ldr	r3, [pc, #628]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a9c      	ldr	r2, [pc, #624]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 8007116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800711a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d013      	beq.n	800714c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007124:	f7fd fa20 	bl	8004568 <HAL_GetTick>
 8007128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800712a:	e008      	b.n	800713e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800712c:	f7fd fa1c 	bl	8004568 <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	2b64      	cmp	r3, #100	; 0x64
 8007138:	d901      	bls.n	800713e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e2bc      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800713e:	4b92      	ldr	r3, [pc, #584]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d0f0      	beq.n	800712c <HAL_RCC_OscConfig+0x2a8>
 800714a:	e014      	b.n	8007176 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800714c:	f7fd fa0c 	bl	8004568 <HAL_GetTick>
 8007150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007152:	e008      	b.n	8007166 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007154:	f7fd fa08 	bl	8004568 <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	2b64      	cmp	r3, #100	; 0x64
 8007160:	d901      	bls.n	8007166 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e2a8      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007166:	4b88      	ldr	r3, [pc, #544]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1f0      	bne.n	8007154 <HAL_RCC_OscConfig+0x2d0>
 8007172:	e000      	b.n	8007176 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	2b00      	cmp	r3, #0
 8007180:	d060      	beq.n	8007244 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	2b04      	cmp	r3, #4
 8007186:	d005      	beq.n	8007194 <HAL_RCC_OscConfig+0x310>
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	2b0c      	cmp	r3, #12
 800718c:	d119      	bne.n	80071c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2b02      	cmp	r3, #2
 8007192:	d116      	bne.n	80071c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007194:	4b7c      	ldr	r3, [pc, #496]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800719c:	2b00      	cmp	r3, #0
 800719e:	d005      	beq.n	80071ac <HAL_RCC_OscConfig+0x328>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d101      	bne.n	80071ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e285      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ac:	4b76      	ldr	r3, [pc, #472]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	061b      	lsls	r3, r3, #24
 80071ba:	4973      	ldr	r1, [pc, #460]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071c0:	e040      	b.n	8007244 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d023      	beq.n	8007212 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071ca:	4b6f      	ldr	r3, [pc, #444]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a6e      	ldr	r2, [pc, #440]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 80071d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d6:	f7fd f9c7 	bl	8004568 <HAL_GetTick>
 80071da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071dc:	e008      	b.n	80071f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071de:	f7fd f9c3 	bl	8004568 <HAL_GetTick>
 80071e2:	4602      	mov	r2, r0
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d901      	bls.n	80071f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e263      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071f0:	4b65      	ldr	r3, [pc, #404]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d0f0      	beq.n	80071de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071fc:	4b62      	ldr	r3, [pc, #392]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	061b      	lsls	r3, r3, #24
 800720a:	495f      	ldr	r1, [pc, #380]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 800720c:	4313      	orrs	r3, r2
 800720e:	604b      	str	r3, [r1, #4]
 8007210:	e018      	b.n	8007244 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007212:	4b5d      	ldr	r3, [pc, #372]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a5c      	ldr	r2, [pc, #368]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 8007218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800721c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800721e:	f7fd f9a3 	bl	8004568 <HAL_GetTick>
 8007222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007224:	e008      	b.n	8007238 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007226:	f7fd f99f 	bl	8004568 <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	2b02      	cmp	r3, #2
 8007232:	d901      	bls.n	8007238 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e23f      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007238:	4b53      	ldr	r3, [pc, #332]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1f0      	bne.n	8007226 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0308 	and.w	r3, r3, #8
 800724c:	2b00      	cmp	r3, #0
 800724e:	d03c      	beq.n	80072ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d01c      	beq.n	8007292 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007258:	4b4b      	ldr	r3, [pc, #300]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 800725a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800725e:	4a4a      	ldr	r2, [pc, #296]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 8007260:	f043 0301 	orr.w	r3, r3, #1
 8007264:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007268:	f7fd f97e 	bl	8004568 <HAL_GetTick>
 800726c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800726e:	e008      	b.n	8007282 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007270:	f7fd f97a 	bl	8004568 <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b02      	cmp	r3, #2
 800727c:	d901      	bls.n	8007282 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e21a      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007282:	4b41      	ldr	r3, [pc, #260]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 8007284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007288:	f003 0302 	and.w	r3, r3, #2
 800728c:	2b00      	cmp	r3, #0
 800728e:	d0ef      	beq.n	8007270 <HAL_RCC_OscConfig+0x3ec>
 8007290:	e01b      	b.n	80072ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007292:	4b3d      	ldr	r3, [pc, #244]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 8007294:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007298:	4a3b      	ldr	r2, [pc, #236]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 800729a:	f023 0301 	bic.w	r3, r3, #1
 800729e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072a2:	f7fd f961 	bl	8004568 <HAL_GetTick>
 80072a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80072a8:	e008      	b.n	80072bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072aa:	f7fd f95d 	bl	8004568 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d901      	bls.n	80072bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e1fd      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80072bc:	4b32      	ldr	r3, [pc, #200]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 80072be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072c2:	f003 0302 	and.w	r3, r3, #2
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1ef      	bne.n	80072aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0304 	and.w	r3, r3, #4
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f000 80a6 	beq.w	8007424 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072d8:	2300      	movs	r3, #0
 80072da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80072dc:	4b2a      	ldr	r3, [pc, #168]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 80072de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10d      	bne.n	8007304 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072e8:	4b27      	ldr	r3, [pc, #156]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 80072ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ec:	4a26      	ldr	r2, [pc, #152]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 80072ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072f2:	6593      	str	r3, [r2, #88]	; 0x58
 80072f4:	4b24      	ldr	r3, [pc, #144]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 80072f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072fc:	60bb      	str	r3, [r7, #8]
 80072fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007300:	2301      	movs	r3, #1
 8007302:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007304:	4b21      	ldr	r3, [pc, #132]	; (800738c <HAL_RCC_OscConfig+0x508>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800730c:	2b00      	cmp	r3, #0
 800730e:	d118      	bne.n	8007342 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007310:	4b1e      	ldr	r3, [pc, #120]	; (800738c <HAL_RCC_OscConfig+0x508>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a1d      	ldr	r2, [pc, #116]	; (800738c <HAL_RCC_OscConfig+0x508>)
 8007316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800731a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800731c:	f7fd f924 	bl	8004568 <HAL_GetTick>
 8007320:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007322:	e008      	b.n	8007336 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007324:	f7fd f920 	bl	8004568 <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	2b02      	cmp	r3, #2
 8007330:	d901      	bls.n	8007336 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e1c0      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007336:	4b15      	ldr	r3, [pc, #84]	; (800738c <HAL_RCC_OscConfig+0x508>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800733e:	2b00      	cmp	r3, #0
 8007340:	d0f0      	beq.n	8007324 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d108      	bne.n	800735c <HAL_RCC_OscConfig+0x4d8>
 800734a:	4b0f      	ldr	r3, [pc, #60]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 800734c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007350:	4a0d      	ldr	r2, [pc, #52]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 8007352:	f043 0301 	orr.w	r3, r3, #1
 8007356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800735a:	e029      	b.n	80073b0 <HAL_RCC_OscConfig+0x52c>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	2b05      	cmp	r3, #5
 8007362:	d115      	bne.n	8007390 <HAL_RCC_OscConfig+0x50c>
 8007364:	4b08      	ldr	r3, [pc, #32]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 8007366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800736a:	4a07      	ldr	r2, [pc, #28]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 800736c:	f043 0304 	orr.w	r3, r3, #4
 8007370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007374:	4b04      	ldr	r3, [pc, #16]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 8007376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800737a:	4a03      	ldr	r2, [pc, #12]	; (8007388 <HAL_RCC_OscConfig+0x504>)
 800737c:	f043 0301 	orr.w	r3, r3, #1
 8007380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007384:	e014      	b.n	80073b0 <HAL_RCC_OscConfig+0x52c>
 8007386:	bf00      	nop
 8007388:	40021000 	.word	0x40021000
 800738c:	40007000 	.word	0x40007000
 8007390:	4b9a      	ldr	r3, [pc, #616]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 8007392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007396:	4a99      	ldr	r2, [pc, #612]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 8007398:	f023 0301 	bic.w	r3, r3, #1
 800739c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80073a0:	4b96      	ldr	r3, [pc, #600]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 80073a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a6:	4a95      	ldr	r2, [pc, #596]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 80073a8:	f023 0304 	bic.w	r3, r3, #4
 80073ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d016      	beq.n	80073e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073b8:	f7fd f8d6 	bl	8004568 <HAL_GetTick>
 80073bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073be:	e00a      	b.n	80073d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073c0:	f7fd f8d2 	bl	8004568 <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d901      	bls.n	80073d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e170      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073d6:	4b89      	ldr	r3, [pc, #548]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 80073d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073dc:	f003 0302 	and.w	r3, r3, #2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d0ed      	beq.n	80073c0 <HAL_RCC_OscConfig+0x53c>
 80073e4:	e015      	b.n	8007412 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073e6:	f7fd f8bf 	bl	8004568 <HAL_GetTick>
 80073ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80073ec:	e00a      	b.n	8007404 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ee:	f7fd f8bb 	bl	8004568 <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d901      	bls.n	8007404 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e159      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007404:	4b7d      	ldr	r3, [pc, #500]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 8007406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1ed      	bne.n	80073ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007412:	7ffb      	ldrb	r3, [r7, #31]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d105      	bne.n	8007424 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007418:	4b78      	ldr	r3, [pc, #480]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 800741a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741c:	4a77      	ldr	r2, [pc, #476]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 800741e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007422:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0320 	and.w	r3, r3, #32
 800742c:	2b00      	cmp	r3, #0
 800742e:	d03c      	beq.n	80074aa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007434:	2b00      	cmp	r3, #0
 8007436:	d01c      	beq.n	8007472 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007438:	4b70      	ldr	r3, [pc, #448]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 800743a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800743e:	4a6f      	ldr	r2, [pc, #444]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 8007440:	f043 0301 	orr.w	r3, r3, #1
 8007444:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007448:	f7fd f88e 	bl	8004568 <HAL_GetTick>
 800744c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800744e:	e008      	b.n	8007462 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007450:	f7fd f88a 	bl	8004568 <HAL_GetTick>
 8007454:	4602      	mov	r2, r0
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	2b02      	cmp	r3, #2
 800745c:	d901      	bls.n	8007462 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e12a      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007462:	4b66      	ldr	r3, [pc, #408]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 8007464:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007468:	f003 0302 	and.w	r3, r3, #2
 800746c:	2b00      	cmp	r3, #0
 800746e:	d0ef      	beq.n	8007450 <HAL_RCC_OscConfig+0x5cc>
 8007470:	e01b      	b.n	80074aa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007472:	4b62      	ldr	r3, [pc, #392]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 8007474:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007478:	4a60      	ldr	r2, [pc, #384]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 800747a:	f023 0301 	bic.w	r3, r3, #1
 800747e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007482:	f7fd f871 	bl	8004568 <HAL_GetTick>
 8007486:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007488:	e008      	b.n	800749c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800748a:	f7fd f86d 	bl	8004568 <HAL_GetTick>
 800748e:	4602      	mov	r2, r0
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	2b02      	cmp	r3, #2
 8007496:	d901      	bls.n	800749c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e10d      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800749c:	4b57      	ldr	r3, [pc, #348]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 800749e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074a2:	f003 0302 	and.w	r3, r3, #2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1ef      	bne.n	800748a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f000 8101 	beq.w	80076b6 <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	f040 80c9 	bne.w	8007650 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80074be:	4b4f      	ldr	r3, [pc, #316]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f003 0203 	and.w	r2, r3, #3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d12c      	bne.n	800752c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074dc:	3b01      	subs	r3, #1
 80074de:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d123      	bne.n	800752c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d11b      	bne.n	800752c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007500:	429a      	cmp	r2, r3
 8007502:	d113      	bne.n	800752c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750e:	085b      	lsrs	r3, r3, #1
 8007510:	3b01      	subs	r3, #1
 8007512:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007514:	429a      	cmp	r2, r3
 8007516:	d109      	bne.n	800752c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007522:	085b      	lsrs	r3, r3, #1
 8007524:	3b01      	subs	r3, #1
 8007526:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007528:	429a      	cmp	r2, r3
 800752a:	d06b      	beq.n	8007604 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	2b0c      	cmp	r3, #12
 8007530:	d062      	beq.n	80075f8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007532:	4b32      	ldr	r3, [pc, #200]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d001      	beq.n	8007542 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e0ba      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007542:	4b2e      	ldr	r3, [pc, #184]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a2d      	ldr	r2, [pc, #180]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 8007548:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800754c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800754e:	f7fd f80b 	bl	8004568 <HAL_GetTick>
 8007552:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007554:	e008      	b.n	8007568 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007556:	f7fd f807 	bl	8004568 <HAL_GetTick>
 800755a:	4602      	mov	r2, r0
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	2b02      	cmp	r3, #2
 8007562:	d901      	bls.n	8007568 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	e0a7      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007568:	4b24      	ldr	r3, [pc, #144]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1f0      	bne.n	8007556 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007574:	4b21      	ldr	r3, [pc, #132]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 8007576:	68da      	ldr	r2, [r3, #12]
 8007578:	4b21      	ldr	r3, [pc, #132]	; (8007600 <HAL_RCC_OscConfig+0x77c>)
 800757a:	4013      	ands	r3, r2
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007584:	3a01      	subs	r2, #1
 8007586:	0112      	lsls	r2, r2, #4
 8007588:	4311      	orrs	r1, r2
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800758e:	0212      	lsls	r2, r2, #8
 8007590:	4311      	orrs	r1, r2
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007596:	0852      	lsrs	r2, r2, #1
 8007598:	3a01      	subs	r2, #1
 800759a:	0552      	lsls	r2, r2, #21
 800759c:	4311      	orrs	r1, r2
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80075a2:	0852      	lsrs	r2, r2, #1
 80075a4:	3a01      	subs	r2, #1
 80075a6:	0652      	lsls	r2, r2, #25
 80075a8:	4311      	orrs	r1, r2
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80075ae:	06d2      	lsls	r2, r2, #27
 80075b0:	430a      	orrs	r2, r1
 80075b2:	4912      	ldr	r1, [pc, #72]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80075b8:	4b10      	ldr	r3, [pc, #64]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a0f      	ldr	r2, [pc, #60]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 80075be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80075c4:	4b0d      	ldr	r3, [pc, #52]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	4a0c      	ldr	r2, [pc, #48]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 80075ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80075d0:	f7fc ffca 	bl	8004568 <HAL_GetTick>
 80075d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075d6:	e008      	b.n	80075ea <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075d8:	f7fc ffc6 	bl	8004568 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d901      	bls.n	80075ea <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e066      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075ea:	4b04      	ldr	r3, [pc, #16]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0f0      	beq.n	80075d8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80075f6:	e05e      	b.n	80076b6 <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e05d      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
 80075fc:	40021000 	.word	0x40021000
 8007600:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007604:	4b2e      	ldr	r3, [pc, #184]	; (80076c0 <HAL_RCC_OscConfig+0x83c>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d152      	bne.n	80076b6 <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007610:	4b2b      	ldr	r3, [pc, #172]	; (80076c0 <HAL_RCC_OscConfig+0x83c>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a2a      	ldr	r2, [pc, #168]	; (80076c0 <HAL_RCC_OscConfig+0x83c>)
 8007616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800761a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800761c:	4b28      	ldr	r3, [pc, #160]	; (80076c0 <HAL_RCC_OscConfig+0x83c>)
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	4a27      	ldr	r2, [pc, #156]	; (80076c0 <HAL_RCC_OscConfig+0x83c>)
 8007622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007626:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007628:	f7fc ff9e 	bl	8004568 <HAL_GetTick>
 800762c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800762e:	e008      	b.n	8007642 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007630:	f7fc ff9a 	bl	8004568 <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	2b02      	cmp	r3, #2
 800763c:	d901      	bls.n	8007642 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e03a      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007642:	4b1f      	ldr	r3, [pc, #124]	; (80076c0 <HAL_RCC_OscConfig+0x83c>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0f0      	beq.n	8007630 <HAL_RCC_OscConfig+0x7ac>
 800764e:	e032      	b.n	80076b6 <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	2b0c      	cmp	r3, #12
 8007654:	d02d      	beq.n	80076b2 <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007656:	4b1a      	ldr	r3, [pc, #104]	; (80076c0 <HAL_RCC_OscConfig+0x83c>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a19      	ldr	r2, [pc, #100]	; (80076c0 <HAL_RCC_OscConfig+0x83c>)
 800765c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007660:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007662:	4b17      	ldr	r3, [pc, #92]	; (80076c0 <HAL_RCC_OscConfig+0x83c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d105      	bne.n	800767a <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800766e:	4b14      	ldr	r3, [pc, #80]	; (80076c0 <HAL_RCC_OscConfig+0x83c>)
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	4a13      	ldr	r2, [pc, #76]	; (80076c0 <HAL_RCC_OscConfig+0x83c>)
 8007674:	f023 0303 	bic.w	r3, r3, #3
 8007678:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800767a:	4b11      	ldr	r3, [pc, #68]	; (80076c0 <HAL_RCC_OscConfig+0x83c>)
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	4a10      	ldr	r2, [pc, #64]	; (80076c0 <HAL_RCC_OscConfig+0x83c>)
 8007680:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007688:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800768a:	f7fc ff6d 	bl	8004568 <HAL_GetTick>
 800768e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007690:	e008      	b.n	80076a4 <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007692:	f7fc ff69 	bl	8004568 <HAL_GetTick>
 8007696:	4602      	mov	r2, r0
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	2b02      	cmp	r3, #2
 800769e:	d901      	bls.n	80076a4 <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e009      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076a4:	4b06      	ldr	r3, [pc, #24]	; (80076c0 <HAL_RCC_OscConfig+0x83c>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1f0      	bne.n	8007692 <HAL_RCC_OscConfig+0x80e>
 80076b0:	e001      	b.n	80076b6 <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e000      	b.n	80076b8 <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3720      	adds	r7, #32
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	40021000 	.word	0x40021000

080076c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d101      	bne.n	80076d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e0c8      	b.n	800786a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076d8:	4b66      	ldr	r3, [pc, #408]	; (8007874 <HAL_RCC_ClockConfig+0x1b0>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0307 	and.w	r3, r3, #7
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d910      	bls.n	8007708 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076e6:	4b63      	ldr	r3, [pc, #396]	; (8007874 <HAL_RCC_ClockConfig+0x1b0>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f023 0207 	bic.w	r2, r3, #7
 80076ee:	4961      	ldr	r1, [pc, #388]	; (8007874 <HAL_RCC_ClockConfig+0x1b0>)
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076f6:	4b5f      	ldr	r3, [pc, #380]	; (8007874 <HAL_RCC_ClockConfig+0x1b0>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0307 	and.w	r3, r3, #7
 80076fe:	683a      	ldr	r2, [r7, #0]
 8007700:	429a      	cmp	r2, r3
 8007702:	d001      	beq.n	8007708 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e0b0      	b.n	800786a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0301 	and.w	r3, r3, #1
 8007710:	2b00      	cmp	r3, #0
 8007712:	d04c      	beq.n	80077ae <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	2b03      	cmp	r3, #3
 800771a:	d107      	bne.n	800772c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800771c:	4b56      	ldr	r3, [pc, #344]	; (8007878 <HAL_RCC_ClockConfig+0x1b4>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d121      	bne.n	800776c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e09e      	b.n	800786a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	2b02      	cmp	r3, #2
 8007732:	d107      	bne.n	8007744 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007734:	4b50      	ldr	r3, [pc, #320]	; (8007878 <HAL_RCC_ClockConfig+0x1b4>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d115      	bne.n	800776c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e092      	b.n	800786a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d107      	bne.n	800775c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800774c:	4b4a      	ldr	r3, [pc, #296]	; (8007878 <HAL_RCC_ClockConfig+0x1b4>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0302 	and.w	r3, r3, #2
 8007754:	2b00      	cmp	r3, #0
 8007756:	d109      	bne.n	800776c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e086      	b.n	800786a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800775c:	4b46      	ldr	r3, [pc, #280]	; (8007878 <HAL_RCC_ClockConfig+0x1b4>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e07e      	b.n	800786a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800776c:	4b42      	ldr	r3, [pc, #264]	; (8007878 <HAL_RCC_ClockConfig+0x1b4>)
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f023 0203 	bic.w	r2, r3, #3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	493f      	ldr	r1, [pc, #252]	; (8007878 <HAL_RCC_ClockConfig+0x1b4>)
 800777a:	4313      	orrs	r3, r2
 800777c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800777e:	f7fc fef3 	bl	8004568 <HAL_GetTick>
 8007782:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007784:	e00a      	b.n	800779c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007786:	f7fc feef 	bl	8004568 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	f241 3288 	movw	r2, #5000	; 0x1388
 8007794:	4293      	cmp	r3, r2
 8007796:	d901      	bls.n	800779c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e066      	b.n	800786a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800779c:	4b36      	ldr	r3, [pc, #216]	; (8007878 <HAL_RCC_ClockConfig+0x1b4>)
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f003 020c 	and.w	r2, r3, #12
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d1eb      	bne.n	8007786 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0302 	and.w	r3, r3, #2
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d008      	beq.n	80077cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077ba:	4b2f      	ldr	r3, [pc, #188]	; (8007878 <HAL_RCC_ClockConfig+0x1b4>)
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	492c      	ldr	r1, [pc, #176]	; (8007878 <HAL_RCC_ClockConfig+0x1b4>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80077cc:	4b29      	ldr	r3, [pc, #164]	; (8007874 <HAL_RCC_ClockConfig+0x1b0>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0307 	and.w	r3, r3, #7
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d210      	bcs.n	80077fc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077da:	4b26      	ldr	r3, [pc, #152]	; (8007874 <HAL_RCC_ClockConfig+0x1b0>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f023 0207 	bic.w	r2, r3, #7
 80077e2:	4924      	ldr	r1, [pc, #144]	; (8007874 <HAL_RCC_ClockConfig+0x1b0>)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ea:	4b22      	ldr	r3, [pc, #136]	; (8007874 <HAL_RCC_ClockConfig+0x1b0>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0307 	and.w	r3, r3, #7
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d001      	beq.n	80077fc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e036      	b.n	800786a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0304 	and.w	r3, r3, #4
 8007804:	2b00      	cmp	r3, #0
 8007806:	d008      	beq.n	800781a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007808:	4b1b      	ldr	r3, [pc, #108]	; (8007878 <HAL_RCC_ClockConfig+0x1b4>)
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	4918      	ldr	r1, [pc, #96]	; (8007878 <HAL_RCC_ClockConfig+0x1b4>)
 8007816:	4313      	orrs	r3, r2
 8007818:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0308 	and.w	r3, r3, #8
 8007822:	2b00      	cmp	r3, #0
 8007824:	d009      	beq.n	800783a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007826:	4b14      	ldr	r3, [pc, #80]	; (8007878 <HAL_RCC_ClockConfig+0x1b4>)
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	4910      	ldr	r1, [pc, #64]	; (8007878 <HAL_RCC_ClockConfig+0x1b4>)
 8007836:	4313      	orrs	r3, r2
 8007838:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800783a:	f000 f825 	bl	8007888 <HAL_RCC_GetSysClockFreq>
 800783e:	4602      	mov	r2, r0
 8007840:	4b0d      	ldr	r3, [pc, #52]	; (8007878 <HAL_RCC_ClockConfig+0x1b4>)
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	091b      	lsrs	r3, r3, #4
 8007846:	f003 030f 	and.w	r3, r3, #15
 800784a:	490c      	ldr	r1, [pc, #48]	; (800787c <HAL_RCC_ClockConfig+0x1b8>)
 800784c:	5ccb      	ldrb	r3, [r1, r3]
 800784e:	f003 031f 	and.w	r3, r3, #31
 8007852:	fa22 f303 	lsr.w	r3, r2, r3
 8007856:	4a0a      	ldr	r2, [pc, #40]	; (8007880 <HAL_RCC_ClockConfig+0x1bc>)
 8007858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800785a:	4b0a      	ldr	r3, [pc, #40]	; (8007884 <HAL_RCC_ClockConfig+0x1c0>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4618      	mov	r0, r3
 8007860:	f7fc fe32 	bl	80044c8 <HAL_InitTick>
 8007864:	4603      	mov	r3, r0
 8007866:	72fb      	strb	r3, [r7, #11]

  return status;
 8007868:	7afb      	ldrb	r3, [r7, #11]
}
 800786a:	4618      	mov	r0, r3
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	40022000 	.word	0x40022000
 8007878:	40021000 	.word	0x40021000
 800787c:	0800c65c 	.word	0x0800c65c
 8007880:	20000000 	.word	0x20000000
 8007884:	20000004 	.word	0x20000004

08007888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007888:	b480      	push	{r7}
 800788a:	b089      	sub	sp, #36	; 0x24
 800788c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	61fb      	str	r3, [r7, #28]
 8007892:	2300      	movs	r3, #0
 8007894:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007896:	4b3e      	ldr	r3, [pc, #248]	; (8007990 <HAL_RCC_GetSysClockFreq+0x108>)
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f003 030c 	and.w	r3, r3, #12
 800789e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80078a0:	4b3b      	ldr	r3, [pc, #236]	; (8007990 <HAL_RCC_GetSysClockFreq+0x108>)
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	f003 0303 	and.w	r3, r3, #3
 80078a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d005      	beq.n	80078bc <HAL_RCC_GetSysClockFreq+0x34>
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	2b0c      	cmp	r3, #12
 80078b4:	d121      	bne.n	80078fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d11e      	bne.n	80078fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80078bc:	4b34      	ldr	r3, [pc, #208]	; (8007990 <HAL_RCC_GetSysClockFreq+0x108>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0308 	and.w	r3, r3, #8
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d107      	bne.n	80078d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80078c8:	4b31      	ldr	r3, [pc, #196]	; (8007990 <HAL_RCC_GetSysClockFreq+0x108>)
 80078ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078ce:	0a1b      	lsrs	r3, r3, #8
 80078d0:	f003 030f 	and.w	r3, r3, #15
 80078d4:	61fb      	str	r3, [r7, #28]
 80078d6:	e005      	b.n	80078e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80078d8:	4b2d      	ldr	r3, [pc, #180]	; (8007990 <HAL_RCC_GetSysClockFreq+0x108>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	091b      	lsrs	r3, r3, #4
 80078de:	f003 030f 	and.w	r3, r3, #15
 80078e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80078e4:	4a2b      	ldr	r2, [pc, #172]	; (8007994 <HAL_RCC_GetSysClockFreq+0x10c>)
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10d      	bne.n	8007910 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078f8:	e00a      	b.n	8007910 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	2b04      	cmp	r3, #4
 80078fe:	d102      	bne.n	8007906 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007900:	4b25      	ldr	r3, [pc, #148]	; (8007998 <HAL_RCC_GetSysClockFreq+0x110>)
 8007902:	61bb      	str	r3, [r7, #24]
 8007904:	e004      	b.n	8007910 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	2b08      	cmp	r3, #8
 800790a:	d101      	bne.n	8007910 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800790c:	4b23      	ldr	r3, [pc, #140]	; (800799c <HAL_RCC_GetSysClockFreq+0x114>)
 800790e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	2b0c      	cmp	r3, #12
 8007914:	d134      	bne.n	8007980 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007916:	4b1e      	ldr	r3, [pc, #120]	; (8007990 <HAL_RCC_GetSysClockFreq+0x108>)
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	f003 0303 	and.w	r3, r3, #3
 800791e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	2b02      	cmp	r3, #2
 8007924:	d003      	beq.n	800792e <HAL_RCC_GetSysClockFreq+0xa6>
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	2b03      	cmp	r3, #3
 800792a:	d003      	beq.n	8007934 <HAL_RCC_GetSysClockFreq+0xac>
 800792c:	e005      	b.n	800793a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800792e:	4b1a      	ldr	r3, [pc, #104]	; (8007998 <HAL_RCC_GetSysClockFreq+0x110>)
 8007930:	617b      	str	r3, [r7, #20]
      break;
 8007932:	e005      	b.n	8007940 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007934:	4b19      	ldr	r3, [pc, #100]	; (800799c <HAL_RCC_GetSysClockFreq+0x114>)
 8007936:	617b      	str	r3, [r7, #20]
      break;
 8007938:	e002      	b.n	8007940 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	617b      	str	r3, [r7, #20]
      break;
 800793e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007940:	4b13      	ldr	r3, [pc, #76]	; (8007990 <HAL_RCC_GetSysClockFreq+0x108>)
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	091b      	lsrs	r3, r3, #4
 8007946:	f003 0307 	and.w	r3, r3, #7
 800794a:	3301      	adds	r3, #1
 800794c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800794e:	4b10      	ldr	r3, [pc, #64]	; (8007990 <HAL_RCC_GetSysClockFreq+0x108>)
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	0a1b      	lsrs	r3, r3, #8
 8007954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	fb03 f202 	mul.w	r2, r3, r2
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	fbb2 f3f3 	udiv	r3, r2, r3
 8007964:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007966:	4b0a      	ldr	r3, [pc, #40]	; (8007990 <HAL_RCC_GetSysClockFreq+0x108>)
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	0e5b      	lsrs	r3, r3, #25
 800796c:	f003 0303 	and.w	r3, r3, #3
 8007970:	3301      	adds	r3, #1
 8007972:	005b      	lsls	r3, r3, #1
 8007974:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	fbb2 f3f3 	udiv	r3, r2, r3
 800797e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007980:	69bb      	ldr	r3, [r7, #24]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3724      	adds	r7, #36	; 0x24
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	40021000 	.word	0x40021000
 8007994:	0800c674 	.word	0x0800c674
 8007998:	00f42400 	.word	0x00f42400
 800799c:	00b71b00 	.word	0x00b71b00

080079a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079a0:	b480      	push	{r7}
 80079a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079a4:	4b03      	ldr	r3, [pc, #12]	; (80079b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80079a6:	681b      	ldr	r3, [r3, #0]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	20000000 	.word	0x20000000

080079b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80079bc:	f7ff fff0 	bl	80079a0 <HAL_RCC_GetHCLKFreq>
 80079c0:	4602      	mov	r2, r0
 80079c2:	4b06      	ldr	r3, [pc, #24]	; (80079dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	0a1b      	lsrs	r3, r3, #8
 80079c8:	f003 0307 	and.w	r3, r3, #7
 80079cc:	4904      	ldr	r1, [pc, #16]	; (80079e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80079ce:	5ccb      	ldrb	r3, [r1, r3]
 80079d0:	f003 031f 	and.w	r3, r3, #31
 80079d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079d8:	4618      	mov	r0, r3
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	40021000 	.word	0x40021000
 80079e0:	0800c66c 	.word	0x0800c66c

080079e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80079e8:	f7ff ffda 	bl	80079a0 <HAL_RCC_GetHCLKFreq>
 80079ec:	4602      	mov	r2, r0
 80079ee:	4b06      	ldr	r3, [pc, #24]	; (8007a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	0adb      	lsrs	r3, r3, #11
 80079f4:	f003 0307 	and.w	r3, r3, #7
 80079f8:	4904      	ldr	r1, [pc, #16]	; (8007a0c <HAL_RCC_GetPCLK2Freq+0x28>)
 80079fa:	5ccb      	ldrb	r3, [r1, r3]
 80079fc:	f003 031f 	and.w	r3, r3, #31
 8007a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	40021000 	.word	0x40021000
 8007a0c:	0800c66c 	.word	0x0800c66c

08007a10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007a18:	2300      	movs	r3, #0
 8007a1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007a1c:	4b2a      	ldr	r3, [pc, #168]	; (8007ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d003      	beq.n	8007a30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007a28:	f7ff f9c8 	bl	8006dbc <HAL_PWREx_GetVoltageRange>
 8007a2c:	6178      	str	r0, [r7, #20]
 8007a2e:	e014      	b.n	8007a5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a30:	4b25      	ldr	r3, [pc, #148]	; (8007ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a34:	4a24      	ldr	r2, [pc, #144]	; (8007ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a3a:	6593      	str	r3, [r2, #88]	; 0x58
 8007a3c:	4b22      	ldr	r3, [pc, #136]	; (8007ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a44:	60fb      	str	r3, [r7, #12]
 8007a46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007a48:	f7ff f9b8 	bl	8006dbc <HAL_PWREx_GetVoltageRange>
 8007a4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007a4e:	4b1e      	ldr	r3, [pc, #120]	; (8007ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a52:	4a1d      	ldr	r2, [pc, #116]	; (8007ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a60:	d10b      	bne.n	8007a7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b80      	cmp	r3, #128	; 0x80
 8007a66:	d919      	bls.n	8007a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2ba0      	cmp	r3, #160	; 0xa0
 8007a6c:	d902      	bls.n	8007a74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a6e:	2302      	movs	r3, #2
 8007a70:	613b      	str	r3, [r7, #16]
 8007a72:	e013      	b.n	8007a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a74:	2301      	movs	r3, #1
 8007a76:	613b      	str	r3, [r7, #16]
 8007a78:	e010      	b.n	8007a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b80      	cmp	r3, #128	; 0x80
 8007a7e:	d902      	bls.n	8007a86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007a80:	2303      	movs	r3, #3
 8007a82:	613b      	str	r3, [r7, #16]
 8007a84:	e00a      	b.n	8007a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b80      	cmp	r3, #128	; 0x80
 8007a8a:	d102      	bne.n	8007a92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	613b      	str	r3, [r7, #16]
 8007a90:	e004      	b.n	8007a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b70      	cmp	r3, #112	; 0x70
 8007a96:	d101      	bne.n	8007a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a98:	2301      	movs	r3, #1
 8007a9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007a9c:	4b0b      	ldr	r3, [pc, #44]	; (8007acc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f023 0207 	bic.w	r2, r3, #7
 8007aa4:	4909      	ldr	r1, [pc, #36]	; (8007acc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007aac:	4b07      	ldr	r3, [pc, #28]	; (8007acc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0307 	and.w	r3, r3, #7
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d001      	beq.n	8007abe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e000      	b.n	8007ac0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	40021000 	.word	0x40021000
 8007acc:	40022000 	.word	0x40022000

08007ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ad8:	2300      	movs	r3, #0
 8007ada:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007adc:	2300      	movs	r3, #0
 8007ade:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d031      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007af0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007af4:	d01a      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007af6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007afa:	d814      	bhi.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d009      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007b00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b04:	d10f      	bne.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007b06:	4b5d      	ldr	r3, [pc, #372]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	4a5c      	ldr	r2, [pc, #368]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b10:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007b12:	e00c      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3304      	adds	r3, #4
 8007b18:	2100      	movs	r1, #0
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 f9ce 	bl	8007ebc <RCCEx_PLLSAI1_Config>
 8007b20:	4603      	mov	r3, r0
 8007b22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007b24:	e003      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	74fb      	strb	r3, [r7, #19]
      break;
 8007b2a:	e000      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007b2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b2e:	7cfb      	ldrb	r3, [r7, #19]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10b      	bne.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b34:	4b51      	ldr	r3, [pc, #324]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b42:	494e      	ldr	r1, [pc, #312]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007b4a:	e001      	b.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b4c:	7cfb      	ldrb	r3, [r7, #19]
 8007b4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 809e 	beq.w	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007b62:	4b46      	ldr	r3, [pc, #280]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e000      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007b72:	2300      	movs	r3, #0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00d      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b78:	4b40      	ldr	r3, [pc, #256]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b7c:	4a3f      	ldr	r2, [pc, #252]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b82:	6593      	str	r3, [r2, #88]	; 0x58
 8007b84:	4b3d      	ldr	r3, [pc, #244]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b8c:	60bb      	str	r3, [r7, #8]
 8007b8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b90:	2301      	movs	r3, #1
 8007b92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b94:	4b3a      	ldr	r3, [pc, #232]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a39      	ldr	r2, [pc, #228]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ba0:	f7fc fce2 	bl	8004568 <HAL_GetTick>
 8007ba4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007ba6:	e009      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ba8:	f7fc fcde 	bl	8004568 <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d902      	bls.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	74fb      	strb	r3, [r7, #19]
        break;
 8007bba:	e005      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007bbc:	4b30      	ldr	r3, [pc, #192]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d0ef      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007bc8:	7cfb      	ldrb	r3, [r7, #19]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d15a      	bne.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007bce:	4b2b      	ldr	r3, [pc, #172]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bd8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d01e      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d019      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007bea:	4b24      	ldr	r3, [pc, #144]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bf4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007bf6:	4b21      	ldr	r3, [pc, #132]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfc:	4a1f      	ldr	r2, [pc, #124]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c06:	4b1d      	ldr	r3, [pc, #116]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c0c:	4a1b      	ldr	r2, [pc, #108]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007c16:	4a19      	ldr	r2, [pc, #100]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f003 0301 	and.w	r3, r3, #1
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d016      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c28:	f7fc fc9e 	bl	8004568 <HAL_GetTick>
 8007c2c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c2e:	e00b      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c30:	f7fc fc9a 	bl	8004568 <HAL_GetTick>
 8007c34:	4602      	mov	r2, r0
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d902      	bls.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	74fb      	strb	r3, [r7, #19]
            break;
 8007c46:	e006      	b.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c48:	4b0c      	ldr	r3, [pc, #48]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c4e:	f003 0302 	and.w	r3, r3, #2
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d0ec      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007c56:	7cfb      	ldrb	r3, [r7, #19]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10b      	bne.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c5c:	4b07      	ldr	r3, [pc, #28]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c6a:	4904      	ldr	r1, [pc, #16]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007c72:	e009      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c74:	7cfb      	ldrb	r3, [r7, #19]
 8007c76:	74bb      	strb	r3, [r7, #18]
 8007c78:	e006      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007c7a:	bf00      	nop
 8007c7c:	40021000 	.word	0x40021000
 8007c80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c84:	7cfb      	ldrb	r3, [r7, #19]
 8007c86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c88:	7c7b      	ldrb	r3, [r7, #17]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d105      	bne.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c8e:	4b8a      	ldr	r3, [pc, #552]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c92:	4a89      	ldr	r2, [pc, #548]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00a      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ca6:	4b84      	ldr	r3, [pc, #528]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cac:	f023 0203 	bic.w	r2, r3, #3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	4980      	ldr	r1, [pc, #512]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0302 	and.w	r3, r3, #2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00a      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007cc8:	4b7b      	ldr	r3, [pc, #492]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cce:	f023 020c 	bic.w	r2, r3, #12
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd6:	4978      	ldr	r1, [pc, #480]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0320 	and.w	r3, r3, #32
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00a      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cea:	4b73      	ldr	r3, [pc, #460]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cf0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf8:	496f      	ldr	r1, [pc, #444]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00a      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d0c:	4b6a      	ldr	r3, [pc, #424]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d12:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d1a:	4967      	ldr	r1, [pc, #412]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00a      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d2e:	4b62      	ldr	r3, [pc, #392]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3c:	495e      	ldr	r1, [pc, #376]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00a      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d50:	4b59      	ldr	r3, [pc, #356]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5e:	4956      	ldr	r1, [pc, #344]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00a      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d72:	4b51      	ldr	r3, [pc, #324]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d80:	494d      	ldr	r1, [pc, #308]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d028      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d94:	4b48      	ldr	r3, [pc, #288]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da2:	4945      	ldr	r1, [pc, #276]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007db2:	d106      	bne.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007db4:	4b40      	ldr	r3, [pc, #256]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	4a3f      	ldr	r2, [pc, #252]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007dba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007dbe:	60d3      	str	r3, [r2, #12]
 8007dc0:	e011      	b.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007dca:	d10c      	bne.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	3304      	adds	r3, #4
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 f872 	bl	8007ebc <RCCEx_PLLSAI1_Config>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007ddc:	7cfb      	ldrb	r3, [r7, #19]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d001      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8007de2:	7cfb      	ldrb	r3, [r7, #19]
 8007de4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d028      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007df2:	4b31      	ldr	r3, [pc, #196]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007df8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e00:	492d      	ldr	r1, [pc, #180]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e10:	d106      	bne.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e12:	4b29      	ldr	r3, [pc, #164]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	4a28      	ldr	r2, [pc, #160]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007e18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e1c:	60d3      	str	r3, [r2, #12]
 8007e1e:	e011      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e28:	d10c      	bne.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	3304      	adds	r3, #4
 8007e2e:	2101      	movs	r1, #1
 8007e30:	4618      	mov	r0, r3
 8007e32:	f000 f843 	bl	8007ebc <RCCEx_PLLSAI1_Config>
 8007e36:	4603      	mov	r3, r0
 8007e38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e3a:	7cfb      	ldrb	r3, [r7, #19]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d001      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8007e40:	7cfb      	ldrb	r3, [r7, #19]
 8007e42:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d01c      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e50:	4b19      	ldr	r3, [pc, #100]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e5e:	4916      	ldr	r1, [pc, #88]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e6e:	d10c      	bne.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	3304      	adds	r3, #4
 8007e74:	2102      	movs	r1, #2
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 f820 	bl	8007ebc <RCCEx_PLLSAI1_Config>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e80:	7cfb      	ldrb	r3, [r7, #19]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d001      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8007e86:	7cfb      	ldrb	r3, [r7, #19]
 8007e88:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00a      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e96:	4b08      	ldr	r3, [pc, #32]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e9c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ea4:	4904      	ldr	r1, [pc, #16]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007eac:	7cbb      	ldrb	r3, [r7, #18]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3718      	adds	r7, #24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	40021000 	.word	0x40021000

08007ebc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007eca:	4b74      	ldr	r3, [pc, #464]	; (800809c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	f003 0303 	and.w	r3, r3, #3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d018      	beq.n	8007f08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007ed6:	4b71      	ldr	r3, [pc, #452]	; (800809c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	f003 0203 	and.w	r2, r3, #3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d10d      	bne.n	8007f02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
       ||
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d009      	beq.n	8007f02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007eee:	4b6b      	ldr	r3, [pc, #428]	; (800809c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	091b      	lsrs	r3, r3, #4
 8007ef4:	f003 0307 	and.w	r3, r3, #7
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	685b      	ldr	r3, [r3, #4]
       ||
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d047      	beq.n	8007f92 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	73fb      	strb	r3, [r7, #15]
 8007f06:	e044      	b.n	8007f92 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b03      	cmp	r3, #3
 8007f0e:	d018      	beq.n	8007f42 <RCCEx_PLLSAI1_Config+0x86>
 8007f10:	2b03      	cmp	r3, #3
 8007f12:	d825      	bhi.n	8007f60 <RCCEx_PLLSAI1_Config+0xa4>
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d002      	beq.n	8007f1e <RCCEx_PLLSAI1_Config+0x62>
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	d009      	beq.n	8007f30 <RCCEx_PLLSAI1_Config+0x74>
 8007f1c:	e020      	b.n	8007f60 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007f1e:	4b5f      	ldr	r3, [pc, #380]	; (800809c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 0302 	and.w	r3, r3, #2
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d11d      	bne.n	8007f66 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f2e:	e01a      	b.n	8007f66 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007f30:	4b5a      	ldr	r3, [pc, #360]	; (800809c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d116      	bne.n	8007f6a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f40:	e013      	b.n	8007f6a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007f42:	4b56      	ldr	r3, [pc, #344]	; (800809c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10f      	bne.n	8007f6e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007f4e:	4b53      	ldr	r3, [pc, #332]	; (800809c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d109      	bne.n	8007f6e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f5e:	e006      	b.n	8007f6e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	73fb      	strb	r3, [r7, #15]
      break;
 8007f64:	e004      	b.n	8007f70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007f66:	bf00      	nop
 8007f68:	e002      	b.n	8007f70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007f6a:	bf00      	nop
 8007f6c:	e000      	b.n	8007f70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007f6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10d      	bne.n	8007f92 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007f76:	4b49      	ldr	r3, [pc, #292]	; (800809c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6819      	ldr	r1, [r3, #0]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	3b01      	subs	r3, #1
 8007f88:	011b      	lsls	r3, r3, #4
 8007f8a:	430b      	orrs	r3, r1
 8007f8c:	4943      	ldr	r1, [pc, #268]	; (800809c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007f92:	7bfb      	ldrb	r3, [r7, #15]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d17c      	bne.n	8008092 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007f98:	4b40      	ldr	r3, [pc, #256]	; (800809c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a3f      	ldr	r2, [pc, #252]	; (800809c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007fa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fa4:	f7fc fae0 	bl	8004568 <HAL_GetTick>
 8007fa8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007faa:	e009      	b.n	8007fc0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007fac:	f7fc fadc 	bl	8004568 <HAL_GetTick>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d902      	bls.n	8007fc0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	73fb      	strb	r3, [r7, #15]
        break;
 8007fbe:	e005      	b.n	8007fcc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007fc0:	4b36      	ldr	r3, [pc, #216]	; (800809c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1ef      	bne.n	8007fac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d15f      	bne.n	8008092 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d110      	bne.n	8007ffa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007fd8:	4b30      	ldr	r3, [pc, #192]	; (800809c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007fe0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	6892      	ldr	r2, [r2, #8]
 8007fe8:	0211      	lsls	r1, r2, #8
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	68d2      	ldr	r2, [r2, #12]
 8007fee:	06d2      	lsls	r2, r2, #27
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	492a      	ldr	r1, [pc, #168]	; (800809c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	610b      	str	r3, [r1, #16]
 8007ff8:	e027      	b.n	800804a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d112      	bne.n	8008026 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008000:	4b26      	ldr	r3, [pc, #152]	; (800809c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008008:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	6892      	ldr	r2, [r2, #8]
 8008010:	0211      	lsls	r1, r2, #8
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	6912      	ldr	r2, [r2, #16]
 8008016:	0852      	lsrs	r2, r2, #1
 8008018:	3a01      	subs	r2, #1
 800801a:	0552      	lsls	r2, r2, #21
 800801c:	430a      	orrs	r2, r1
 800801e:	491f      	ldr	r1, [pc, #124]	; (800809c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008020:	4313      	orrs	r3, r2
 8008022:	610b      	str	r3, [r1, #16]
 8008024:	e011      	b.n	800804a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008026:	4b1d      	ldr	r3, [pc, #116]	; (800809c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800802e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	6892      	ldr	r2, [r2, #8]
 8008036:	0211      	lsls	r1, r2, #8
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	6952      	ldr	r2, [r2, #20]
 800803c:	0852      	lsrs	r2, r2, #1
 800803e:	3a01      	subs	r2, #1
 8008040:	0652      	lsls	r2, r2, #25
 8008042:	430a      	orrs	r2, r1
 8008044:	4915      	ldr	r1, [pc, #84]	; (800809c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008046:	4313      	orrs	r3, r2
 8008048:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800804a:	4b14      	ldr	r3, [pc, #80]	; (800809c <RCCEx_PLLSAI1_Config+0x1e0>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a13      	ldr	r2, [pc, #76]	; (800809c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008050:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008054:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008056:	f7fc fa87 	bl	8004568 <HAL_GetTick>
 800805a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800805c:	e009      	b.n	8008072 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800805e:	f7fc fa83 	bl	8004568 <HAL_GetTick>
 8008062:	4602      	mov	r2, r0
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	2b02      	cmp	r3, #2
 800806a:	d902      	bls.n	8008072 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800806c:	2303      	movs	r3, #3
 800806e:	73fb      	strb	r3, [r7, #15]
          break;
 8008070:	e005      	b.n	800807e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008072:	4b0a      	ldr	r3, [pc, #40]	; (800809c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800807a:	2b00      	cmp	r3, #0
 800807c:	d0ef      	beq.n	800805e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800807e:	7bfb      	ldrb	r3, [r7, #15]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d106      	bne.n	8008092 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008084:	4b05      	ldr	r3, [pc, #20]	; (800809c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008086:	691a      	ldr	r2, [r3, #16]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	4903      	ldr	r1, [pc, #12]	; (800809c <RCCEx_PLLSAI1_Config+0x1e0>)
 800808e:	4313      	orrs	r3, r2
 8008090:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008092:	7bfb      	ldrb	r3, [r7, #15]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	40021000 	.word	0x40021000

080080a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e049      	b.n	8008146 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d106      	bne.n	80080cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7fc f87c 	bl	80041c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2202      	movs	r2, #2
 80080d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	3304      	adds	r3, #4
 80080dc:	4619      	mov	r1, r3
 80080de:	4610      	mov	r0, r2
 80080e0:	f000 fcaa 	bl	8008a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
	...

08008150 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b01      	cmp	r3, #1
 8008162:	d001      	beq.n	8008168 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e03b      	b.n	80081e0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2202      	movs	r2, #2
 800816c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68da      	ldr	r2, [r3, #12]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f042 0201 	orr.w	r2, r2, #1
 800817e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a19      	ldr	r2, [pc, #100]	; (80081ec <HAL_TIM_Base_Start_IT+0x9c>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d009      	beq.n	800819e <HAL_TIM_Base_Start_IT+0x4e>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008192:	d004      	beq.n	800819e <HAL_TIM_Base_Start_IT+0x4e>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a15      	ldr	r2, [pc, #84]	; (80081f0 <HAL_TIM_Base_Start_IT+0xa0>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d115      	bne.n	80081ca <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	689a      	ldr	r2, [r3, #8]
 80081a4:	4b13      	ldr	r3, [pc, #76]	; (80081f4 <HAL_TIM_Base_Start_IT+0xa4>)
 80081a6:	4013      	ands	r3, r2
 80081a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2b06      	cmp	r3, #6
 80081ae:	d015      	beq.n	80081dc <HAL_TIM_Base_Start_IT+0x8c>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081b6:	d011      	beq.n	80081dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f042 0201 	orr.w	r2, r2, #1
 80081c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081c8:	e008      	b.n	80081dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f042 0201 	orr.w	r2, r2, #1
 80081d8:	601a      	str	r2, [r3, #0]
 80081da:	e000      	b.n	80081de <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	40012c00 	.word	0x40012c00
 80081f0:	40014000 	.word	0x40014000
 80081f4:	00010007 	.word	0x00010007

080081f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d101      	bne.n	800820a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e049      	b.n	800829e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b00      	cmp	r3, #0
 8008214:	d106      	bne.n	8008224 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7fb ff7c 	bl	800411c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2202      	movs	r2, #2
 8008228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	3304      	adds	r3, #4
 8008234:	4619      	mov	r1, r3
 8008236:	4610      	mov	r0, r2
 8008238:	f000 fbfe 	bl	8008a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3708      	adds	r7, #8
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
	...

080082a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d109      	bne.n	80082cc <HAL_TIM_PWM_Start+0x24>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	bf14      	ite	ne
 80082c4:	2301      	movne	r3, #1
 80082c6:	2300      	moveq	r3, #0
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	e03c      	b.n	8008346 <HAL_TIM_PWM_Start+0x9e>
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	2b04      	cmp	r3, #4
 80082d0:	d109      	bne.n	80082e6 <HAL_TIM_PWM_Start+0x3e>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b01      	cmp	r3, #1
 80082dc:	bf14      	ite	ne
 80082de:	2301      	movne	r3, #1
 80082e0:	2300      	moveq	r3, #0
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	e02f      	b.n	8008346 <HAL_TIM_PWM_Start+0x9e>
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	2b08      	cmp	r3, #8
 80082ea:	d109      	bne.n	8008300 <HAL_TIM_PWM_Start+0x58>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	bf14      	ite	ne
 80082f8:	2301      	movne	r3, #1
 80082fa:	2300      	moveq	r3, #0
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	e022      	b.n	8008346 <HAL_TIM_PWM_Start+0x9e>
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	2b0c      	cmp	r3, #12
 8008304:	d109      	bne.n	800831a <HAL_TIM_PWM_Start+0x72>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b01      	cmp	r3, #1
 8008310:	bf14      	ite	ne
 8008312:	2301      	movne	r3, #1
 8008314:	2300      	moveq	r3, #0
 8008316:	b2db      	uxtb	r3, r3
 8008318:	e015      	b.n	8008346 <HAL_TIM_PWM_Start+0x9e>
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	2b10      	cmp	r3, #16
 800831e:	d109      	bne.n	8008334 <HAL_TIM_PWM_Start+0x8c>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008326:	b2db      	uxtb	r3, r3
 8008328:	2b01      	cmp	r3, #1
 800832a:	bf14      	ite	ne
 800832c:	2301      	movne	r3, #1
 800832e:	2300      	moveq	r3, #0
 8008330:	b2db      	uxtb	r3, r3
 8008332:	e008      	b.n	8008346 <HAL_TIM_PWM_Start+0x9e>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b01      	cmp	r3, #1
 800833e:	bf14      	ite	ne
 8008340:	2301      	movne	r3, #1
 8008342:	2300      	moveq	r3, #0
 8008344:	b2db      	uxtb	r3, r3
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e07e      	b.n	800844c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d104      	bne.n	800835e <HAL_TIM_PWM_Start+0xb6>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2202      	movs	r2, #2
 8008358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800835c:	e023      	b.n	80083a6 <HAL_TIM_PWM_Start+0xfe>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	2b04      	cmp	r3, #4
 8008362:	d104      	bne.n	800836e <HAL_TIM_PWM_Start+0xc6>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2202      	movs	r2, #2
 8008368:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800836c:	e01b      	b.n	80083a6 <HAL_TIM_PWM_Start+0xfe>
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2b08      	cmp	r3, #8
 8008372:	d104      	bne.n	800837e <HAL_TIM_PWM_Start+0xd6>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2202      	movs	r2, #2
 8008378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800837c:	e013      	b.n	80083a6 <HAL_TIM_PWM_Start+0xfe>
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	2b0c      	cmp	r3, #12
 8008382:	d104      	bne.n	800838e <HAL_TIM_PWM_Start+0xe6>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2202      	movs	r2, #2
 8008388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800838c:	e00b      	b.n	80083a6 <HAL_TIM_PWM_Start+0xfe>
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	2b10      	cmp	r3, #16
 8008392:	d104      	bne.n	800839e <HAL_TIM_PWM_Start+0xf6>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2202      	movs	r2, #2
 8008398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800839c:	e003      	b.n	80083a6 <HAL_TIM_PWM_Start+0xfe>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2202      	movs	r2, #2
 80083a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2201      	movs	r2, #1
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 fe24 	bl	8008ffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a26      	ldr	r2, [pc, #152]	; (8008454 <HAL_TIM_PWM_Start+0x1ac>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d009      	beq.n	80083d2 <HAL_TIM_PWM_Start+0x12a>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a25      	ldr	r2, [pc, #148]	; (8008458 <HAL_TIM_PWM_Start+0x1b0>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d004      	beq.n	80083d2 <HAL_TIM_PWM_Start+0x12a>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a23      	ldr	r2, [pc, #140]	; (800845c <HAL_TIM_PWM_Start+0x1b4>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d101      	bne.n	80083d6 <HAL_TIM_PWM_Start+0x12e>
 80083d2:	2301      	movs	r3, #1
 80083d4:	e000      	b.n	80083d8 <HAL_TIM_PWM_Start+0x130>
 80083d6:	2300      	movs	r3, #0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d007      	beq.n	80083ec <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a18      	ldr	r2, [pc, #96]	; (8008454 <HAL_TIM_PWM_Start+0x1ac>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d009      	beq.n	800840a <HAL_TIM_PWM_Start+0x162>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083fe:	d004      	beq.n	800840a <HAL_TIM_PWM_Start+0x162>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a14      	ldr	r2, [pc, #80]	; (8008458 <HAL_TIM_PWM_Start+0x1b0>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d115      	bne.n	8008436 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689a      	ldr	r2, [r3, #8]
 8008410:	4b13      	ldr	r3, [pc, #76]	; (8008460 <HAL_TIM_PWM_Start+0x1b8>)
 8008412:	4013      	ands	r3, r2
 8008414:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2b06      	cmp	r3, #6
 800841a:	d015      	beq.n	8008448 <HAL_TIM_PWM_Start+0x1a0>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008422:	d011      	beq.n	8008448 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f042 0201 	orr.w	r2, r2, #1
 8008432:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008434:	e008      	b.n	8008448 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f042 0201 	orr.w	r2, r2, #1
 8008444:	601a      	str	r2, [r3, #0]
 8008446:	e000      	b.n	800844a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008448:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	40012c00 	.word	0x40012c00
 8008458:	40014000 	.word	0x40014000
 800845c:	40014400 	.word	0x40014400
 8008460:	00010007 	.word	0x00010007

08008464 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2200      	movs	r2, #0
 8008474:	6839      	ldr	r1, [r7, #0]
 8008476:	4618      	mov	r0, r3
 8008478:	f000 fdc0 	bl	8008ffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a39      	ldr	r2, [pc, #228]	; (8008568 <HAL_TIM_PWM_Stop+0x104>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d009      	beq.n	800849a <HAL_TIM_PWM_Stop+0x36>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a38      	ldr	r2, [pc, #224]	; (800856c <HAL_TIM_PWM_Stop+0x108>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d004      	beq.n	800849a <HAL_TIM_PWM_Stop+0x36>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a36      	ldr	r2, [pc, #216]	; (8008570 <HAL_TIM_PWM_Stop+0x10c>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d101      	bne.n	800849e <HAL_TIM_PWM_Stop+0x3a>
 800849a:	2301      	movs	r3, #1
 800849c:	e000      	b.n	80084a0 <HAL_TIM_PWM_Stop+0x3c>
 800849e:	2300      	movs	r3, #0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d017      	beq.n	80084d4 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6a1a      	ldr	r2, [r3, #32]
 80084aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80084ae:	4013      	ands	r3, r2
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10f      	bne.n	80084d4 <HAL_TIM_PWM_Stop+0x70>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6a1a      	ldr	r2, [r3, #32]
 80084ba:	f240 4344 	movw	r3, #1092	; 0x444
 80084be:	4013      	ands	r3, r2
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d107      	bne.n	80084d4 <HAL_TIM_PWM_Stop+0x70>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	6a1a      	ldr	r2, [r3, #32]
 80084da:	f241 1311 	movw	r3, #4369	; 0x1111
 80084de:	4013      	ands	r3, r2
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10f      	bne.n	8008504 <HAL_TIM_PWM_Stop+0xa0>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6a1a      	ldr	r2, [r3, #32]
 80084ea:	f240 4344 	movw	r3, #1092	; 0x444
 80084ee:	4013      	ands	r3, r2
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d107      	bne.n	8008504 <HAL_TIM_PWM_Stop+0xa0>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f022 0201 	bic.w	r2, r2, #1
 8008502:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d104      	bne.n	8008514 <HAL_TIM_PWM_Stop+0xb0>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2201      	movs	r2, #1
 800850e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008512:	e023      	b.n	800855c <HAL_TIM_PWM_Stop+0xf8>
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2b04      	cmp	r3, #4
 8008518:	d104      	bne.n	8008524 <HAL_TIM_PWM_Stop+0xc0>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008522:	e01b      	b.n	800855c <HAL_TIM_PWM_Stop+0xf8>
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	2b08      	cmp	r3, #8
 8008528:	d104      	bne.n	8008534 <HAL_TIM_PWM_Stop+0xd0>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008532:	e013      	b.n	800855c <HAL_TIM_PWM_Stop+0xf8>
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b0c      	cmp	r3, #12
 8008538:	d104      	bne.n	8008544 <HAL_TIM_PWM_Stop+0xe0>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008542:	e00b      	b.n	800855c <HAL_TIM_PWM_Stop+0xf8>
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	2b10      	cmp	r3, #16
 8008548:	d104      	bne.n	8008554 <HAL_TIM_PWM_Stop+0xf0>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2201      	movs	r2, #1
 800854e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008552:	e003      	b.n	800855c <HAL_TIM_PWM_Stop+0xf8>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	40012c00 	.word	0x40012c00
 800856c:	40014000 	.word	0x40014000
 8008570:	40014400 	.word	0x40014400

08008574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	f003 0302 	and.w	r3, r3, #2
 8008586:	2b02      	cmp	r3, #2
 8008588:	d122      	bne.n	80085d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	f003 0302 	and.w	r3, r3, #2
 8008594:	2b02      	cmp	r3, #2
 8008596:	d11b      	bne.n	80085d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f06f 0202 	mvn.w	r2, #2
 80085a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2201      	movs	r2, #1
 80085a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	f003 0303 	and.w	r3, r3, #3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d003      	beq.n	80085be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fa20 	bl	80089fc <HAL_TIM_IC_CaptureCallback>
 80085bc:	e005      	b.n	80085ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fa12 	bl	80089e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fa23 	bl	8008a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	f003 0304 	and.w	r3, r3, #4
 80085da:	2b04      	cmp	r3, #4
 80085dc:	d122      	bne.n	8008624 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	f003 0304 	and.w	r3, r3, #4
 80085e8:	2b04      	cmp	r3, #4
 80085ea:	d11b      	bne.n	8008624 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f06f 0204 	mvn.w	r2, #4
 80085f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2202      	movs	r2, #2
 80085fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	699b      	ldr	r3, [r3, #24]
 8008602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008606:	2b00      	cmp	r3, #0
 8008608:	d003      	beq.n	8008612 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f9f6 	bl	80089fc <HAL_TIM_IC_CaptureCallback>
 8008610:	e005      	b.n	800861e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f9e8 	bl	80089e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f9f9 	bl	8008a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	f003 0308 	and.w	r3, r3, #8
 800862e:	2b08      	cmp	r3, #8
 8008630:	d122      	bne.n	8008678 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	f003 0308 	and.w	r3, r3, #8
 800863c:	2b08      	cmp	r3, #8
 800863e:	d11b      	bne.n	8008678 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f06f 0208 	mvn.w	r2, #8
 8008648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2204      	movs	r2, #4
 800864e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	69db      	ldr	r3, [r3, #28]
 8008656:	f003 0303 	and.w	r3, r3, #3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d003      	beq.n	8008666 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f9cc 	bl	80089fc <HAL_TIM_IC_CaptureCallback>
 8008664:	e005      	b.n	8008672 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f9be 	bl	80089e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f9cf 	bl	8008a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	f003 0310 	and.w	r3, r3, #16
 8008682:	2b10      	cmp	r3, #16
 8008684:	d122      	bne.n	80086cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	f003 0310 	and.w	r3, r3, #16
 8008690:	2b10      	cmp	r3, #16
 8008692:	d11b      	bne.n	80086cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f06f 0210 	mvn.w	r2, #16
 800869c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2208      	movs	r2, #8
 80086a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	69db      	ldr	r3, [r3, #28]
 80086aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f9a2 	bl	80089fc <HAL_TIM_IC_CaptureCallback>
 80086b8:	e005      	b.n	80086c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f994 	bl	80089e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f9a5 	bl	8008a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	f003 0301 	and.w	r3, r3, #1
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d10e      	bne.n	80086f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	f003 0301 	and.w	r3, r3, #1
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d107      	bne.n	80086f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f06f 0201 	mvn.w	r2, #1
 80086f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f96e 	bl	80089d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008702:	2b80      	cmp	r3, #128	; 0x80
 8008704:	d10e      	bne.n	8008724 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008710:	2b80      	cmp	r3, #128	; 0x80
 8008712:	d107      	bne.n	8008724 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800871c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fd7a 	bl	8009218 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800872e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008732:	d10e      	bne.n	8008752 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800873e:	2b80      	cmp	r3, #128	; 0x80
 8008740:	d107      	bne.n	8008752 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800874a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fd6d 	bl	800922c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800875c:	2b40      	cmp	r3, #64	; 0x40
 800875e:	d10e      	bne.n	800877e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800876a:	2b40      	cmp	r3, #64	; 0x40
 800876c:	d107      	bne.n	800877e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 f953 	bl	8008a24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	f003 0320 	and.w	r3, r3, #32
 8008788:	2b20      	cmp	r3, #32
 800878a:	d10e      	bne.n	80087aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	f003 0320 	and.w	r3, r3, #32
 8008796:	2b20      	cmp	r3, #32
 8008798:	d107      	bne.n	80087aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f06f 0220 	mvn.w	r2, #32
 80087a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fd2d 	bl	8009204 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087aa:	bf00      	nop
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
	...

080087b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d101      	bne.n	80087ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80087ca:	2302      	movs	r3, #2
 80087cc:	e0fd      	b.n	80089ca <HAL_TIM_PWM_ConfigChannel+0x216>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2b14      	cmp	r3, #20
 80087da:	f200 80f0 	bhi.w	80089be <HAL_TIM_PWM_ConfigChannel+0x20a>
 80087de:	a201      	add	r2, pc, #4	; (adr r2, 80087e4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80087e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e4:	08008839 	.word	0x08008839
 80087e8:	080089bf 	.word	0x080089bf
 80087ec:	080089bf 	.word	0x080089bf
 80087f0:	080089bf 	.word	0x080089bf
 80087f4:	08008879 	.word	0x08008879
 80087f8:	080089bf 	.word	0x080089bf
 80087fc:	080089bf 	.word	0x080089bf
 8008800:	080089bf 	.word	0x080089bf
 8008804:	080088bb 	.word	0x080088bb
 8008808:	080089bf 	.word	0x080089bf
 800880c:	080089bf 	.word	0x080089bf
 8008810:	080089bf 	.word	0x080089bf
 8008814:	080088fb 	.word	0x080088fb
 8008818:	080089bf 	.word	0x080089bf
 800881c:	080089bf 	.word	0x080089bf
 8008820:	080089bf 	.word	0x080089bf
 8008824:	0800893d 	.word	0x0800893d
 8008828:	080089bf 	.word	0x080089bf
 800882c:	080089bf 	.word	0x080089bf
 8008830:	080089bf 	.word	0x080089bf
 8008834:	0800897d 	.word	0x0800897d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68b9      	ldr	r1, [r7, #8]
 800883e:	4618      	mov	r0, r3
 8008840:	f000 f95e 	bl	8008b00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	699a      	ldr	r2, [r3, #24]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f042 0208 	orr.w	r2, r2, #8
 8008852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	699a      	ldr	r2, [r3, #24]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f022 0204 	bic.w	r2, r2, #4
 8008862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6999      	ldr	r1, [r3, #24]
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	691a      	ldr	r2, [r3, #16]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	430a      	orrs	r2, r1
 8008874:	619a      	str	r2, [r3, #24]
      break;
 8008876:	e0a3      	b.n	80089c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68b9      	ldr	r1, [r7, #8]
 800887e:	4618      	mov	r0, r3
 8008880:	f000 f9ba 	bl	8008bf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	699a      	ldr	r2, [r3, #24]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	699a      	ldr	r2, [r3, #24]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	6999      	ldr	r1, [r3, #24]
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	021a      	lsls	r2, r3, #8
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	430a      	orrs	r2, r1
 80088b6:	619a      	str	r2, [r3, #24]
      break;
 80088b8:	e082      	b.n	80089c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68b9      	ldr	r1, [r7, #8]
 80088c0:	4618      	mov	r0, r3
 80088c2:	f000 fa13 	bl	8008cec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	69da      	ldr	r2, [r3, #28]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f042 0208 	orr.w	r2, r2, #8
 80088d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	69da      	ldr	r2, [r3, #28]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f022 0204 	bic.w	r2, r2, #4
 80088e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	69d9      	ldr	r1, [r3, #28]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	691a      	ldr	r2, [r3, #16]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	430a      	orrs	r2, r1
 80088f6:	61da      	str	r2, [r3, #28]
      break;
 80088f8:	e062      	b.n	80089c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68b9      	ldr	r1, [r7, #8]
 8008900:	4618      	mov	r0, r3
 8008902:	f000 fa6b 	bl	8008ddc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	69da      	ldr	r2, [r3, #28]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	69da      	ldr	r2, [r3, #28]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	69d9      	ldr	r1, [r3, #28]
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	021a      	lsls	r2, r3, #8
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	430a      	orrs	r2, r1
 8008938:	61da      	str	r2, [r3, #28]
      break;
 800893a:	e041      	b.n	80089c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68b9      	ldr	r1, [r7, #8]
 8008942:	4618      	mov	r0, r3
 8008944:	f000 faa8 	bl	8008e98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f042 0208 	orr.w	r2, r2, #8
 8008956:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f022 0204 	bic.w	r2, r2, #4
 8008966:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	691a      	ldr	r2, [r3, #16]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	430a      	orrs	r2, r1
 8008978:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800897a:	e021      	b.n	80089c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68b9      	ldr	r1, [r7, #8]
 8008982:	4618      	mov	r0, r3
 8008984:	f000 fae0 	bl	8008f48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008996:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	021a      	lsls	r2, r3, #8
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	430a      	orrs	r2, r1
 80089ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80089bc:	e000      	b.n	80089c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80089be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop

080089d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a2c:	bf00      	nop
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a2a      	ldr	r2, [pc, #168]	; (8008af4 <TIM_Base_SetConfig+0xbc>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d003      	beq.n	8008a58 <TIM_Base_SetConfig+0x20>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a56:	d108      	bne.n	8008a6a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	68fa      	ldr	r2, [r7, #12]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a21      	ldr	r2, [pc, #132]	; (8008af4 <TIM_Base_SetConfig+0xbc>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d00b      	beq.n	8008a8a <TIM_Base_SetConfig+0x52>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a78:	d007      	beq.n	8008a8a <TIM_Base_SetConfig+0x52>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a1e      	ldr	r2, [pc, #120]	; (8008af8 <TIM_Base_SetConfig+0xc0>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d003      	beq.n	8008a8a <TIM_Base_SetConfig+0x52>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a1d      	ldr	r2, [pc, #116]	; (8008afc <TIM_Base_SetConfig+0xc4>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d108      	bne.n	8008a9c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	689a      	ldr	r2, [r3, #8]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a0c      	ldr	r2, [pc, #48]	; (8008af4 <TIM_Base_SetConfig+0xbc>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d007      	beq.n	8008ad8 <TIM_Base_SetConfig+0xa0>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a0b      	ldr	r2, [pc, #44]	; (8008af8 <TIM_Base_SetConfig+0xc0>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d003      	beq.n	8008ad8 <TIM_Base_SetConfig+0xa0>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a0a      	ldr	r2, [pc, #40]	; (8008afc <TIM_Base_SetConfig+0xc4>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d103      	bne.n	8008ae0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	691a      	ldr	r2, [r3, #16]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	615a      	str	r2, [r3, #20]
}
 8008ae6:	bf00      	nop
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	40012c00 	.word	0x40012c00
 8008af8:	40014000 	.word	0x40014000
 8008afc:	40014400 	.word	0x40014400

08008b00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b087      	sub	sp, #28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	f023 0201 	bic.w	r2, r3, #1
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a1b      	ldr	r3, [r3, #32]
 8008b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f023 0303 	bic.w	r3, r3, #3
 8008b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	f023 0302 	bic.w	r3, r3, #2
 8008b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a24      	ldr	r2, [pc, #144]	; (8008bec <TIM_OC1_SetConfig+0xec>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d007      	beq.n	8008b70 <TIM_OC1_SetConfig+0x70>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a23      	ldr	r2, [pc, #140]	; (8008bf0 <TIM_OC1_SetConfig+0xf0>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d003      	beq.n	8008b70 <TIM_OC1_SetConfig+0x70>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a22      	ldr	r2, [pc, #136]	; (8008bf4 <TIM_OC1_SetConfig+0xf4>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d10c      	bne.n	8008b8a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	f023 0308 	bic.w	r3, r3, #8
 8008b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	f023 0304 	bic.w	r3, r3, #4
 8008b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a17      	ldr	r2, [pc, #92]	; (8008bec <TIM_OC1_SetConfig+0xec>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d007      	beq.n	8008ba2 <TIM_OC1_SetConfig+0xa2>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a16      	ldr	r2, [pc, #88]	; (8008bf0 <TIM_OC1_SetConfig+0xf0>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d003      	beq.n	8008ba2 <TIM_OC1_SetConfig+0xa2>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a15      	ldr	r2, [pc, #84]	; (8008bf4 <TIM_OC1_SetConfig+0xf4>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d111      	bne.n	8008bc6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	693a      	ldr	r2, [r7, #16]
 8008bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	685a      	ldr	r2, [r3, #4]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	621a      	str	r2, [r3, #32]
}
 8008be0:	bf00      	nop
 8008be2:	371c      	adds	r7, #28
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr
 8008bec:	40012c00 	.word	0x40012c00
 8008bf0:	40014000 	.word	0x40014000
 8008bf4:	40014400 	.word	0x40014400

08008bf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b087      	sub	sp, #28
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a1b      	ldr	r3, [r3, #32]
 8008c06:	f023 0210 	bic.w	r2, r3, #16
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	021b      	lsls	r3, r3, #8
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	f023 0320 	bic.w	r3, r3, #32
 8008c46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	011b      	lsls	r3, r3, #4
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a22      	ldr	r2, [pc, #136]	; (8008ce0 <TIM_OC2_SetConfig+0xe8>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d10d      	bne.n	8008c78 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	011b      	lsls	r3, r3, #4
 8008c6a:	697a      	ldr	r2, [r7, #20]
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a19      	ldr	r2, [pc, #100]	; (8008ce0 <TIM_OC2_SetConfig+0xe8>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d007      	beq.n	8008c90 <TIM_OC2_SetConfig+0x98>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a18      	ldr	r2, [pc, #96]	; (8008ce4 <TIM_OC2_SetConfig+0xec>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d003      	beq.n	8008c90 <TIM_OC2_SetConfig+0x98>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a17      	ldr	r2, [pc, #92]	; (8008ce8 <TIM_OC2_SetConfig+0xf0>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d113      	bne.n	8008cb8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	695b      	ldr	r3, [r3, #20]
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	693a      	ldr	r2, [r7, #16]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	685a      	ldr	r2, [r3, #4]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	621a      	str	r2, [r3, #32]
}
 8008cd2:	bf00      	nop
 8008cd4:	371c      	adds	r7, #28
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	40012c00 	.word	0x40012c00
 8008ce4:	40014000 	.word	0x40014000
 8008ce8:	40014400 	.word	0x40014400

08008cec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b087      	sub	sp, #28
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a1b      	ldr	r3, [r3, #32]
 8008cfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	69db      	ldr	r3, [r3, #28]
 8008d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f023 0303 	bic.w	r3, r3, #3
 8008d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	021b      	lsls	r3, r3, #8
 8008d40:	697a      	ldr	r2, [r7, #20]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a21      	ldr	r2, [pc, #132]	; (8008dd0 <TIM_OC3_SetConfig+0xe4>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d10d      	bne.n	8008d6a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	021b      	lsls	r3, r3, #8
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a18      	ldr	r2, [pc, #96]	; (8008dd0 <TIM_OC3_SetConfig+0xe4>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d007      	beq.n	8008d82 <TIM_OC3_SetConfig+0x96>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a17      	ldr	r2, [pc, #92]	; (8008dd4 <TIM_OC3_SetConfig+0xe8>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d003      	beq.n	8008d82 <TIM_OC3_SetConfig+0x96>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a16      	ldr	r2, [pc, #88]	; (8008dd8 <TIM_OC3_SetConfig+0xec>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d113      	bne.n	8008daa <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	695b      	ldr	r3, [r3, #20]
 8008d96:	011b      	lsls	r3, r3, #4
 8008d98:	693a      	ldr	r2, [r7, #16]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	699b      	ldr	r3, [r3, #24]
 8008da2:	011b      	lsls	r3, r3, #4
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	685a      	ldr	r2, [r3, #4]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	621a      	str	r2, [r3, #32]
}
 8008dc4:	bf00      	nop
 8008dc6:	371c      	adds	r7, #28
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	40012c00 	.word	0x40012c00
 8008dd4:	40014000 	.word	0x40014000
 8008dd8:	40014400 	.word	0x40014400

08008ddc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b087      	sub	sp, #28
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a1b      	ldr	r3, [r3, #32]
 8008df6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	69db      	ldr	r3, [r3, #28]
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	021b      	lsls	r3, r3, #8
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	031b      	lsls	r3, r3, #12
 8008e32:	693a      	ldr	r2, [r7, #16]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a14      	ldr	r2, [pc, #80]	; (8008e8c <TIM_OC4_SetConfig+0xb0>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d007      	beq.n	8008e50 <TIM_OC4_SetConfig+0x74>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a13      	ldr	r2, [pc, #76]	; (8008e90 <TIM_OC4_SetConfig+0xb4>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d003      	beq.n	8008e50 <TIM_OC4_SetConfig+0x74>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a12      	ldr	r2, [pc, #72]	; (8008e94 <TIM_OC4_SetConfig+0xb8>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d109      	bne.n	8008e64 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	695b      	ldr	r3, [r3, #20]
 8008e5c:	019b      	lsls	r3, r3, #6
 8008e5e:	697a      	ldr	r2, [r7, #20]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	697a      	ldr	r2, [r7, #20]
 8008e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	685a      	ldr	r2, [r3, #4]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	693a      	ldr	r2, [r7, #16]
 8008e7c:	621a      	str	r2, [r3, #32]
}
 8008e7e:	bf00      	nop
 8008e80:	371c      	adds	r7, #28
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	40012c00 	.word	0x40012c00
 8008e90:	40014000 	.word	0x40014000
 8008e94:	40014400 	.word	0x40014400

08008e98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b087      	sub	sp, #28
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a1b      	ldr	r3, [r3, #32]
 8008eb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008edc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	041b      	lsls	r3, r3, #16
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a13      	ldr	r2, [pc, #76]	; (8008f3c <TIM_OC5_SetConfig+0xa4>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d007      	beq.n	8008f02 <TIM_OC5_SetConfig+0x6a>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a12      	ldr	r2, [pc, #72]	; (8008f40 <TIM_OC5_SetConfig+0xa8>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d003      	beq.n	8008f02 <TIM_OC5_SetConfig+0x6a>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a11      	ldr	r2, [pc, #68]	; (8008f44 <TIM_OC5_SetConfig+0xac>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d109      	bne.n	8008f16 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	021b      	lsls	r3, r3, #8
 8008f10:	697a      	ldr	r2, [r7, #20]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	697a      	ldr	r2, [r7, #20]
 8008f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	685a      	ldr	r2, [r3, #4]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	621a      	str	r2, [r3, #32]
}
 8008f30:	bf00      	nop
 8008f32:	371c      	adds	r7, #28
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr
 8008f3c:	40012c00 	.word	0x40012c00
 8008f40:	40014000 	.word	0x40014000
 8008f44:	40014400 	.word	0x40014400

08008f48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b087      	sub	sp, #28
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a1b      	ldr	r3, [r3, #32]
 8008f56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a1b      	ldr	r3, [r3, #32]
 8008f62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	021b      	lsls	r3, r3, #8
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	051b      	lsls	r3, r3, #20
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a14      	ldr	r2, [pc, #80]	; (8008ff0 <TIM_OC6_SetConfig+0xa8>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d007      	beq.n	8008fb4 <TIM_OC6_SetConfig+0x6c>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a13      	ldr	r2, [pc, #76]	; (8008ff4 <TIM_OC6_SetConfig+0xac>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d003      	beq.n	8008fb4 <TIM_OC6_SetConfig+0x6c>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a12      	ldr	r2, [pc, #72]	; (8008ff8 <TIM_OC6_SetConfig+0xb0>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d109      	bne.n	8008fc8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	695b      	ldr	r3, [r3, #20]
 8008fc0:	029b      	lsls	r3, r3, #10
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	697a      	ldr	r2, [r7, #20]
 8008fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	685a      	ldr	r2, [r3, #4]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	693a      	ldr	r2, [r7, #16]
 8008fe0:	621a      	str	r2, [r3, #32]
}
 8008fe2:	bf00      	nop
 8008fe4:	371c      	adds	r7, #28
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	40012c00 	.word	0x40012c00
 8008ff4:	40014000 	.word	0x40014000
 8008ff8:	40014400 	.word	0x40014400

08008ffc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	f003 031f 	and.w	r3, r3, #31
 800900e:	2201      	movs	r2, #1
 8009010:	fa02 f303 	lsl.w	r3, r2, r3
 8009014:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6a1a      	ldr	r2, [r3, #32]
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	43db      	mvns	r3, r3
 800901e:	401a      	ands	r2, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6a1a      	ldr	r2, [r3, #32]
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	f003 031f 	and.w	r3, r3, #31
 800902e:	6879      	ldr	r1, [r7, #4]
 8009030:	fa01 f303 	lsl.w	r3, r1, r3
 8009034:	431a      	orrs	r2, r3
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	621a      	str	r2, [r3, #32]
}
 800903a:	bf00      	nop
 800903c:	371c      	adds	r7, #28
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
	...

08009048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009058:	2b01      	cmp	r3, #1
 800905a:	d101      	bne.n	8009060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800905c:	2302      	movs	r3, #2
 800905e:	e04f      	b.n	8009100 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2202      	movs	r2, #2
 800906c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a21      	ldr	r2, [pc, #132]	; (800910c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d108      	bne.n	800909c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009090:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	4313      	orrs	r3, r2
 800909a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a14      	ldr	r2, [pc, #80]	; (800910c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d009      	beq.n	80090d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090c8:	d004      	beq.n	80090d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a10      	ldr	r2, [pc, #64]	; (8009110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d10c      	bne.n	80090ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68ba      	ldr	r2, [r7, #8]
 80090ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr
 800910c:	40012c00 	.word	0x40012c00
 8009110:	40014000 	.word	0x40014000

08009114 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800911e:	2300      	movs	r3, #0
 8009120:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009128:	2b01      	cmp	r3, #1
 800912a:	d101      	bne.n	8009130 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800912c:	2302      	movs	r3, #2
 800912e:	e060      	b.n	80091f2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	4313      	orrs	r3, r2
 8009144:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	4313      	orrs	r3, r2
 8009152:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	4313      	orrs	r3, r2
 8009160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4313      	orrs	r3, r2
 800916e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	4313      	orrs	r3, r2
 800917c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	695b      	ldr	r3, [r3, #20]
 8009188:	4313      	orrs	r3, r2
 800918a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009196:	4313      	orrs	r3, r2
 8009198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	041b      	lsls	r3, r3, #16
 80091a6:	4313      	orrs	r3, r2
 80091a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a14      	ldr	r2, [pc, #80]	; (8009200 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d115      	bne.n	80091e0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091be:	051b      	lsls	r3, r3, #20
 80091c0:	4313      	orrs	r3, r2
 80091c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	6a1b      	ldr	r3, [r3, #32]
 80091dc:	4313      	orrs	r3, r2
 80091de:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3714      	adds	r7, #20
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	40012c00 	.word	0x40012c00

08009204 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800920c:	bf00      	nop
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009234:	bf00      	nop
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d101      	bne.n	8009252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	e040      	b.n	80092d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009256:	2b00      	cmp	r3, #0
 8009258:	d106      	bne.n	8009268 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7fb f884 	bl	8004370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2224      	movs	r2, #36	; 0x24
 800926c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f022 0201 	bic.w	r2, r2, #1
 800927c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 f8c0 	bl	8009404 <UART_SetConfig>
 8009284:	4603      	mov	r3, r0
 8009286:	2b01      	cmp	r3, #1
 8009288:	d101      	bne.n	800928e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e022      	b.n	80092d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009292:	2b00      	cmp	r3, #0
 8009294:	d002      	beq.n	800929c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fae2 	bl	8009860 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	685a      	ldr	r2, [r3, #4]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	689a      	ldr	r2, [r3, #8]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f042 0201 	orr.w	r2, r2, #1
 80092ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 fb69 	bl	80099a4 <UART_CheckIdleState>
 80092d2:	4603      	mov	r3, r0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b08a      	sub	sp, #40	; 0x28
 80092e0:	af02      	add	r7, sp, #8
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	603b      	str	r3, [r7, #0]
 80092e8:	4613      	mov	r3, r2
 80092ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092f0:	2b20      	cmp	r3, #32
 80092f2:	f040 8082 	bne.w	80093fa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d002      	beq.n	8009302 <HAL_UART_Transmit+0x26>
 80092fc:	88fb      	ldrh	r3, [r7, #6]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e07a      	b.n	80093fc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800930c:	2b01      	cmp	r3, #1
 800930e:	d101      	bne.n	8009314 <HAL_UART_Transmit+0x38>
 8009310:	2302      	movs	r3, #2
 8009312:	e073      	b.n	80093fc <HAL_UART_Transmit+0x120>
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2221      	movs	r2, #33	; 0x21
 8009328:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800932a:	f7fb f91d 	bl	8004568 <HAL_GetTick>
 800932e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	88fa      	ldrh	r2, [r7, #6]
 8009334:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	88fa      	ldrh	r2, [r7, #6]
 800933c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009348:	d108      	bne.n	800935c <HAL_UART_Transmit+0x80>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d104      	bne.n	800935c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009352:	2300      	movs	r3, #0
 8009354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	61bb      	str	r3, [r7, #24]
 800935a:	e003      	b.n	8009364 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009360:	2300      	movs	r3, #0
 8009362:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2200      	movs	r2, #0
 8009368:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800936c:	e02d      	b.n	80093ca <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	9300      	str	r3, [sp, #0]
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	2200      	movs	r2, #0
 8009376:	2180      	movs	r1, #128	; 0x80
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	f000 fb5c 	bl	8009a36 <UART_WaitOnFlagUntilTimeout>
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d001      	beq.n	8009388 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	e039      	b.n	80093fc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10b      	bne.n	80093a6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	881a      	ldrh	r2, [r3, #0]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800939a:	b292      	uxth	r2, r2
 800939c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	3302      	adds	r3, #2
 80093a2:	61bb      	str	r3, [r7, #24]
 80093a4:	e008      	b.n	80093b8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	781a      	ldrb	r2, [r3, #0]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	b292      	uxth	r2, r2
 80093b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	3301      	adds	r3, #1
 80093b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80093be:	b29b      	uxth	r3, r3
 80093c0:	3b01      	subs	r3, #1
 80093c2:	b29a      	uxth	r2, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1cb      	bne.n	800936e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	2200      	movs	r2, #0
 80093de:	2140      	movs	r1, #64	; 0x40
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f000 fb28 	bl	8009a36 <UART_WaitOnFlagUntilTimeout>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80093ec:	2303      	movs	r3, #3
 80093ee:	e005      	b.n	80093fc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2220      	movs	r2, #32
 80093f4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80093f6:	2300      	movs	r3, #0
 80093f8:	e000      	b.n	80093fc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80093fa:	2302      	movs	r3, #2
  }
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3720      	adds	r7, #32
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009408:	b08a      	sub	sp, #40	; 0x28
 800940a:	af00      	add	r7, sp, #0
 800940c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800940e:	2300      	movs	r3, #0
 8009410:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	689a      	ldr	r2, [r3, #8]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	431a      	orrs	r2, r3
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	695b      	ldr	r3, [r3, #20]
 8009422:	431a      	orrs	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	69db      	ldr	r3, [r3, #28]
 8009428:	4313      	orrs	r3, r2
 800942a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	4bb4      	ldr	r3, [pc, #720]	; (8009704 <UART_SetConfig+0x300>)
 8009434:	4013      	ands	r3, r2
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	6812      	ldr	r2, [r2, #0]
 800943a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800943c:	430b      	orrs	r3, r1
 800943e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	68da      	ldr	r2, [r3, #12]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	430a      	orrs	r2, r1
 8009454:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	699b      	ldr	r3, [r3, #24]
 800945a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4aa9      	ldr	r2, [pc, #676]	; (8009708 <UART_SetConfig+0x304>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d004      	beq.n	8009470 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6a1b      	ldr	r3, [r3, #32]
 800946a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800946c:	4313      	orrs	r3, r2
 800946e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009480:	430a      	orrs	r2, r1
 8009482:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4aa0      	ldr	r2, [pc, #640]	; (800970c <UART_SetConfig+0x308>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d126      	bne.n	80094dc <UART_SetConfig+0xd8>
 800948e:	4ba0      	ldr	r3, [pc, #640]	; (8009710 <UART_SetConfig+0x30c>)
 8009490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009494:	f003 0303 	and.w	r3, r3, #3
 8009498:	2b03      	cmp	r3, #3
 800949a:	d81b      	bhi.n	80094d4 <UART_SetConfig+0xd0>
 800949c:	a201      	add	r2, pc, #4	; (adr r2, 80094a4 <UART_SetConfig+0xa0>)
 800949e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a2:	bf00      	nop
 80094a4:	080094b5 	.word	0x080094b5
 80094a8:	080094c5 	.word	0x080094c5
 80094ac:	080094bd 	.word	0x080094bd
 80094b0:	080094cd 	.word	0x080094cd
 80094b4:	2301      	movs	r3, #1
 80094b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094ba:	e080      	b.n	80095be <UART_SetConfig+0x1ba>
 80094bc:	2302      	movs	r3, #2
 80094be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094c2:	e07c      	b.n	80095be <UART_SetConfig+0x1ba>
 80094c4:	2304      	movs	r3, #4
 80094c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094ca:	e078      	b.n	80095be <UART_SetConfig+0x1ba>
 80094cc:	2308      	movs	r3, #8
 80094ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094d2:	e074      	b.n	80095be <UART_SetConfig+0x1ba>
 80094d4:	2310      	movs	r3, #16
 80094d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094da:	e070      	b.n	80095be <UART_SetConfig+0x1ba>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a8c      	ldr	r2, [pc, #560]	; (8009714 <UART_SetConfig+0x310>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d138      	bne.n	8009558 <UART_SetConfig+0x154>
 80094e6:	4b8a      	ldr	r3, [pc, #552]	; (8009710 <UART_SetConfig+0x30c>)
 80094e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ec:	f003 030c 	and.w	r3, r3, #12
 80094f0:	2b0c      	cmp	r3, #12
 80094f2:	d82d      	bhi.n	8009550 <UART_SetConfig+0x14c>
 80094f4:	a201      	add	r2, pc, #4	; (adr r2, 80094fc <UART_SetConfig+0xf8>)
 80094f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fa:	bf00      	nop
 80094fc:	08009531 	.word	0x08009531
 8009500:	08009551 	.word	0x08009551
 8009504:	08009551 	.word	0x08009551
 8009508:	08009551 	.word	0x08009551
 800950c:	08009541 	.word	0x08009541
 8009510:	08009551 	.word	0x08009551
 8009514:	08009551 	.word	0x08009551
 8009518:	08009551 	.word	0x08009551
 800951c:	08009539 	.word	0x08009539
 8009520:	08009551 	.word	0x08009551
 8009524:	08009551 	.word	0x08009551
 8009528:	08009551 	.word	0x08009551
 800952c:	08009549 	.word	0x08009549
 8009530:	2300      	movs	r3, #0
 8009532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009536:	e042      	b.n	80095be <UART_SetConfig+0x1ba>
 8009538:	2302      	movs	r3, #2
 800953a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800953e:	e03e      	b.n	80095be <UART_SetConfig+0x1ba>
 8009540:	2304      	movs	r3, #4
 8009542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009546:	e03a      	b.n	80095be <UART_SetConfig+0x1ba>
 8009548:	2308      	movs	r3, #8
 800954a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800954e:	e036      	b.n	80095be <UART_SetConfig+0x1ba>
 8009550:	2310      	movs	r3, #16
 8009552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009556:	e032      	b.n	80095be <UART_SetConfig+0x1ba>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a6a      	ldr	r2, [pc, #424]	; (8009708 <UART_SetConfig+0x304>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d12a      	bne.n	80095b8 <UART_SetConfig+0x1b4>
 8009562:	4b6b      	ldr	r3, [pc, #428]	; (8009710 <UART_SetConfig+0x30c>)
 8009564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009568:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800956c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009570:	d01a      	beq.n	80095a8 <UART_SetConfig+0x1a4>
 8009572:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009576:	d81b      	bhi.n	80095b0 <UART_SetConfig+0x1ac>
 8009578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800957c:	d00c      	beq.n	8009598 <UART_SetConfig+0x194>
 800957e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009582:	d815      	bhi.n	80095b0 <UART_SetConfig+0x1ac>
 8009584:	2b00      	cmp	r3, #0
 8009586:	d003      	beq.n	8009590 <UART_SetConfig+0x18c>
 8009588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800958c:	d008      	beq.n	80095a0 <UART_SetConfig+0x19c>
 800958e:	e00f      	b.n	80095b0 <UART_SetConfig+0x1ac>
 8009590:	2300      	movs	r3, #0
 8009592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009596:	e012      	b.n	80095be <UART_SetConfig+0x1ba>
 8009598:	2302      	movs	r3, #2
 800959a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800959e:	e00e      	b.n	80095be <UART_SetConfig+0x1ba>
 80095a0:	2304      	movs	r3, #4
 80095a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095a6:	e00a      	b.n	80095be <UART_SetConfig+0x1ba>
 80095a8:	2308      	movs	r3, #8
 80095aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095ae:	e006      	b.n	80095be <UART_SetConfig+0x1ba>
 80095b0:	2310      	movs	r3, #16
 80095b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095b6:	e002      	b.n	80095be <UART_SetConfig+0x1ba>
 80095b8:	2310      	movs	r3, #16
 80095ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a51      	ldr	r2, [pc, #324]	; (8009708 <UART_SetConfig+0x304>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d17a      	bne.n	80096be <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80095c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095cc:	2b08      	cmp	r3, #8
 80095ce:	d824      	bhi.n	800961a <UART_SetConfig+0x216>
 80095d0:	a201      	add	r2, pc, #4	; (adr r2, 80095d8 <UART_SetConfig+0x1d4>)
 80095d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d6:	bf00      	nop
 80095d8:	080095fd 	.word	0x080095fd
 80095dc:	0800961b 	.word	0x0800961b
 80095e0:	08009605 	.word	0x08009605
 80095e4:	0800961b 	.word	0x0800961b
 80095e8:	0800960b 	.word	0x0800960b
 80095ec:	0800961b 	.word	0x0800961b
 80095f0:	0800961b 	.word	0x0800961b
 80095f4:	0800961b 	.word	0x0800961b
 80095f8:	08009613 	.word	0x08009613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095fc:	f7fe f9dc 	bl	80079b8 <HAL_RCC_GetPCLK1Freq>
 8009600:	61f8      	str	r0, [r7, #28]
        break;
 8009602:	e010      	b.n	8009626 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009604:	4b44      	ldr	r3, [pc, #272]	; (8009718 <UART_SetConfig+0x314>)
 8009606:	61fb      	str	r3, [r7, #28]
        break;
 8009608:	e00d      	b.n	8009626 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800960a:	f7fe f93d 	bl	8007888 <HAL_RCC_GetSysClockFreq>
 800960e:	61f8      	str	r0, [r7, #28]
        break;
 8009610:	e009      	b.n	8009626 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009616:	61fb      	str	r3, [r7, #28]
        break;
 8009618:	e005      	b.n	8009626 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800961a:	2300      	movs	r3, #0
 800961c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009624:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	2b00      	cmp	r3, #0
 800962a:	f000 8109 	beq.w	8009840 <UART_SetConfig+0x43c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	685a      	ldr	r2, [r3, #4]
 8009632:	4613      	mov	r3, r2
 8009634:	005b      	lsls	r3, r3, #1
 8009636:	4413      	add	r3, r2
 8009638:	69fa      	ldr	r2, [r7, #28]
 800963a:	429a      	cmp	r2, r3
 800963c:	d305      	bcc.n	800964a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009644:	69fa      	ldr	r2, [r7, #28]
 8009646:	429a      	cmp	r2, r3
 8009648:	d903      	bls.n	8009652 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009650:	e0f6      	b.n	8009840 <UART_SetConfig+0x43c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	2200      	movs	r2, #0
 8009656:	461c      	mov	r4, r3
 8009658:	4615      	mov	r5, r2
 800965a:	f04f 0200 	mov.w	r2, #0
 800965e:	f04f 0300 	mov.w	r3, #0
 8009662:	022b      	lsls	r3, r5, #8
 8009664:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009668:	0222      	lsls	r2, r4, #8
 800966a:	68f9      	ldr	r1, [r7, #12]
 800966c:	6849      	ldr	r1, [r1, #4]
 800966e:	0849      	lsrs	r1, r1, #1
 8009670:	2000      	movs	r0, #0
 8009672:	4688      	mov	r8, r1
 8009674:	4681      	mov	r9, r0
 8009676:	eb12 0a08 	adds.w	sl, r2, r8
 800967a:	eb43 0b09 	adc.w	fp, r3, r9
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	603b      	str	r3, [r7, #0]
 8009686:	607a      	str	r2, [r7, #4]
 8009688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800968c:	4650      	mov	r0, sl
 800968e:	4659      	mov	r1, fp
 8009690:	f7f7 fada 	bl	8000c48 <__aeabi_uldivmod>
 8009694:	4602      	mov	r2, r0
 8009696:	460b      	mov	r3, r1
 8009698:	4613      	mov	r3, r2
 800969a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096a2:	d308      	bcc.n	80096b6 <UART_SetConfig+0x2b2>
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096aa:	d204      	bcs.n	80096b6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	69ba      	ldr	r2, [r7, #24]
 80096b2:	60da      	str	r2, [r3, #12]
 80096b4:	e0c4      	b.n	8009840 <UART_SetConfig+0x43c>
        }
        else
        {
          ret = HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80096bc:	e0c0      	b.n	8009840 <UART_SetConfig+0x43c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	69db      	ldr	r3, [r3, #28]
 80096c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096c6:	d16b      	bne.n	80097a0 <UART_SetConfig+0x39c>
  {
    switch (clocksource)
 80096c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80096cc:	2b08      	cmp	r3, #8
 80096ce:	d834      	bhi.n	800973a <UART_SetConfig+0x336>
 80096d0:	a201      	add	r2, pc, #4	; (adr r2, 80096d8 <UART_SetConfig+0x2d4>)
 80096d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d6:	bf00      	nop
 80096d8:	080096fd 	.word	0x080096fd
 80096dc:	0800971d 	.word	0x0800971d
 80096e0:	08009725 	.word	0x08009725
 80096e4:	0800973b 	.word	0x0800973b
 80096e8:	0800972b 	.word	0x0800972b
 80096ec:	0800973b 	.word	0x0800973b
 80096f0:	0800973b 	.word	0x0800973b
 80096f4:	0800973b 	.word	0x0800973b
 80096f8:	08009733 	.word	0x08009733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096fc:	f7fe f95c 	bl	80079b8 <HAL_RCC_GetPCLK1Freq>
 8009700:	61f8      	str	r0, [r7, #28]
        break;
 8009702:	e020      	b.n	8009746 <UART_SetConfig+0x342>
 8009704:	efff69f3 	.word	0xefff69f3
 8009708:	40008000 	.word	0x40008000
 800970c:	40013800 	.word	0x40013800
 8009710:	40021000 	.word	0x40021000
 8009714:	40004400 	.word	0x40004400
 8009718:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800971c:	f7fe f962 	bl	80079e4 <HAL_RCC_GetPCLK2Freq>
 8009720:	61f8      	str	r0, [r7, #28]
        break;
 8009722:	e010      	b.n	8009746 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009724:	4b4d      	ldr	r3, [pc, #308]	; (800985c <UART_SetConfig+0x458>)
 8009726:	61fb      	str	r3, [r7, #28]
        break;
 8009728:	e00d      	b.n	8009746 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800972a:	f7fe f8ad 	bl	8007888 <HAL_RCC_GetSysClockFreq>
 800972e:	61f8      	str	r0, [r7, #28]
        break;
 8009730:	e009      	b.n	8009746 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009736:	61fb      	str	r3, [r7, #28]
        break;
 8009738:	e005      	b.n	8009746 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800973a:	2300      	movs	r3, #0
 800973c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009744:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d079      	beq.n	8009840 <UART_SetConfig+0x43c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	005a      	lsls	r2, r3, #1
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	085b      	lsrs	r3, r3, #1
 8009756:	441a      	add	r2, r3
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009760:	b29b      	uxth	r3, r3
 8009762:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009764:	69bb      	ldr	r3, [r7, #24]
 8009766:	2b0f      	cmp	r3, #15
 8009768:	d916      	bls.n	8009798 <UART_SetConfig+0x394>
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009770:	d212      	bcs.n	8009798 <UART_SetConfig+0x394>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	b29b      	uxth	r3, r3
 8009776:	f023 030f 	bic.w	r3, r3, #15
 800977a:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	085b      	lsrs	r3, r3, #1
 8009780:	b29b      	uxth	r3, r3
 8009782:	f003 0307 	and.w	r3, r3, #7
 8009786:	b29a      	uxth	r2, r3
 8009788:	8afb      	ldrh	r3, [r7, #22]
 800978a:	4313      	orrs	r3, r2
 800978c:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	8afa      	ldrh	r2, [r7, #22]
 8009794:	60da      	str	r2, [r3, #12]
 8009796:	e053      	b.n	8009840 <UART_SetConfig+0x43c>
      }
      else
      {
        ret = HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800979e:	e04f      	b.n	8009840 <UART_SetConfig+0x43c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80097a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80097a4:	2b08      	cmp	r3, #8
 80097a6:	d828      	bhi.n	80097fa <UART_SetConfig+0x3f6>
 80097a8:	a201      	add	r2, pc, #4	; (adr r2, 80097b0 <UART_SetConfig+0x3ac>)
 80097aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ae:	bf00      	nop
 80097b0:	080097d5 	.word	0x080097d5
 80097b4:	080097dd 	.word	0x080097dd
 80097b8:	080097e5 	.word	0x080097e5
 80097bc:	080097fb 	.word	0x080097fb
 80097c0:	080097eb 	.word	0x080097eb
 80097c4:	080097fb 	.word	0x080097fb
 80097c8:	080097fb 	.word	0x080097fb
 80097cc:	080097fb 	.word	0x080097fb
 80097d0:	080097f3 	.word	0x080097f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097d4:	f7fe f8f0 	bl	80079b8 <HAL_RCC_GetPCLK1Freq>
 80097d8:	61f8      	str	r0, [r7, #28]
        break;
 80097da:	e014      	b.n	8009806 <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097dc:	f7fe f902 	bl	80079e4 <HAL_RCC_GetPCLK2Freq>
 80097e0:	61f8      	str	r0, [r7, #28]
        break;
 80097e2:	e010      	b.n	8009806 <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097e4:	4b1d      	ldr	r3, [pc, #116]	; (800985c <UART_SetConfig+0x458>)
 80097e6:	61fb      	str	r3, [r7, #28]
        break;
 80097e8:	e00d      	b.n	8009806 <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097ea:	f7fe f84d 	bl	8007888 <HAL_RCC_GetSysClockFreq>
 80097ee:	61f8      	str	r0, [r7, #28]
        break;
 80097f0:	e009      	b.n	8009806 <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097f6:	61fb      	str	r3, [r7, #28]
        break;
 80097f8:	e005      	b.n	8009806 <UART_SetConfig+0x402>
      default:
        pclk = 0U;
 80097fa:	2300      	movs	r3, #0
 80097fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009804:	bf00      	nop
    }

    if (pclk != 0U)
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d019      	beq.n	8009840 <UART_SetConfig+0x43c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	085a      	lsrs	r2, r3, #1
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	441a      	add	r2, r3
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	fbb2 f3f3 	udiv	r3, r2, r3
 800981e:	b29b      	uxth	r3, r3
 8009820:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	2b0f      	cmp	r3, #15
 8009826:	d908      	bls.n	800983a <UART_SetConfig+0x436>
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800982e:	d204      	bcs.n	800983a <UART_SetConfig+0x436>
      {
        huart->Instance->BRR = usartdiv;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	69ba      	ldr	r2, [r7, #24]
 8009836:	60da      	str	r2, [r3, #12]
 8009838:	e002      	b.n	8009840 <UART_SetConfig+0x43c>
      }
      else
      {
        ret = HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2200      	movs	r2, #0
 8009844:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800984c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009850:	4618      	mov	r0, r3
 8009852:	3728      	adds	r7, #40	; 0x28
 8009854:	46bd      	mov	sp, r7
 8009856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800985a:	bf00      	nop
 800985c:	00f42400 	.word	0x00f42400

08009860 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986c:	f003 0301 	and.w	r3, r3, #1
 8009870:	2b00      	cmp	r3, #0
 8009872:	d00a      	beq.n	800988a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	430a      	orrs	r2, r1
 8009888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988e:	f003 0302 	and.w	r3, r3, #2
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00a      	beq.n	80098ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	430a      	orrs	r2, r1
 80098aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b0:	f003 0304 	and.w	r3, r3, #4
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d00a      	beq.n	80098ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	430a      	orrs	r2, r1
 80098cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d2:	f003 0308 	and.w	r3, r3, #8
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00a      	beq.n	80098f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	430a      	orrs	r2, r1
 80098ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f4:	f003 0310 	and.w	r3, r3, #16
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00a      	beq.n	8009912 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	430a      	orrs	r2, r1
 8009910:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009916:	f003 0320 	and.w	r3, r3, #32
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00a      	beq.n	8009934 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	430a      	orrs	r2, r1
 8009932:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800993c:	2b00      	cmp	r3, #0
 800993e:	d01a      	beq.n	8009976 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	430a      	orrs	r2, r1
 8009954:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800995a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800995e:	d10a      	bne.n	8009976 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	430a      	orrs	r2, r1
 8009974:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00a      	beq.n	8009998 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	430a      	orrs	r2, r1
 8009996:	605a      	str	r2, [r3, #4]
  }
}
 8009998:	bf00      	nop
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b086      	sub	sp, #24
 80099a8:	af02      	add	r7, sp, #8
 80099aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80099b4:	f7fa fdd8 	bl	8004568 <HAL_GetTick>
 80099b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 0308 	and.w	r3, r3, #8
 80099c4:	2b08      	cmp	r3, #8
 80099c6:	d10e      	bne.n	80099e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 f82d 	bl	8009a36 <UART_WaitOnFlagUntilTimeout>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d001      	beq.n	80099e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	e023      	b.n	8009a2e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f003 0304 	and.w	r3, r3, #4
 80099f0:	2b04      	cmp	r3, #4
 80099f2:	d10e      	bne.n	8009a12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099f8:	9300      	str	r3, [sp, #0]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f817 	bl	8009a36 <UART_WaitOnFlagUntilTimeout>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d001      	beq.n	8009a12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a0e:	2303      	movs	r3, #3
 8009a10:	e00d      	b.n	8009a2e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2220      	movs	r2, #32
 8009a16:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2220      	movs	r2, #32
 8009a1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b084      	sub	sp, #16
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	60f8      	str	r0, [r7, #12]
 8009a3e:	60b9      	str	r1, [r7, #8]
 8009a40:	603b      	str	r3, [r7, #0]
 8009a42:	4613      	mov	r3, r2
 8009a44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a46:	e05e      	b.n	8009b06 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a4e:	d05a      	beq.n	8009b06 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a50:	f7fa fd8a 	bl	8004568 <HAL_GetTick>
 8009a54:	4602      	mov	r2, r0
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	1ad3      	subs	r3, r2, r3
 8009a5a:	69ba      	ldr	r2, [r7, #24]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d302      	bcc.n	8009a66 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d11b      	bne.n	8009a9e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009a74:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	689a      	ldr	r2, [r3, #8]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f022 0201 	bic.w	r2, r2, #1
 8009a84:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2220      	movs	r2, #32
 8009a8a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2220      	movs	r2, #32
 8009a90:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	e043      	b.n	8009b26 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 0304 	and.w	r3, r3, #4
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d02c      	beq.n	8009b06 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	69db      	ldr	r3, [r3, #28]
 8009ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ab6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009aba:	d124      	bne.n	8009b06 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ac4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009ad4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	689a      	ldr	r2, [r3, #8]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f022 0201 	bic.w	r2, r2, #1
 8009ae4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2220      	movs	r2, #32
 8009aea:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2220      	movs	r2, #32
 8009af0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2220      	movs	r2, #32
 8009af6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009b02:	2303      	movs	r3, #3
 8009b04:	e00f      	b.n	8009b26 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	69da      	ldr	r2, [r3, #28]
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	4013      	ands	r3, r2
 8009b10:	68ba      	ldr	r2, [r7, #8]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	bf0c      	ite	eq
 8009b16:	2301      	moveq	r3, #1
 8009b18:	2300      	movne	r3, #0
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	79fb      	ldrb	r3, [r7, #7]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d091      	beq.n	8009a48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
	...

08009b30 <__errno>:
 8009b30:	4b01      	ldr	r3, [pc, #4]	; (8009b38 <__errno+0x8>)
 8009b32:	6818      	ldr	r0, [r3, #0]
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	2000000c 	.word	0x2000000c

08009b3c <__libc_init_array>:
 8009b3c:	b570      	push	{r4, r5, r6, lr}
 8009b3e:	4d0d      	ldr	r5, [pc, #52]	; (8009b74 <__libc_init_array+0x38>)
 8009b40:	4c0d      	ldr	r4, [pc, #52]	; (8009b78 <__libc_init_array+0x3c>)
 8009b42:	1b64      	subs	r4, r4, r5
 8009b44:	10a4      	asrs	r4, r4, #2
 8009b46:	2600      	movs	r6, #0
 8009b48:	42a6      	cmp	r6, r4
 8009b4a:	d109      	bne.n	8009b60 <__libc_init_array+0x24>
 8009b4c:	4d0b      	ldr	r5, [pc, #44]	; (8009b7c <__libc_init_array+0x40>)
 8009b4e:	4c0c      	ldr	r4, [pc, #48]	; (8009b80 <__libc_init_array+0x44>)
 8009b50:	f002 fd4c 	bl	800c5ec <_init>
 8009b54:	1b64      	subs	r4, r4, r5
 8009b56:	10a4      	asrs	r4, r4, #2
 8009b58:	2600      	movs	r6, #0
 8009b5a:	42a6      	cmp	r6, r4
 8009b5c:	d105      	bne.n	8009b6a <__libc_init_array+0x2e>
 8009b5e:	bd70      	pop	{r4, r5, r6, pc}
 8009b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b64:	4798      	blx	r3
 8009b66:	3601      	adds	r6, #1
 8009b68:	e7ee      	b.n	8009b48 <__libc_init_array+0xc>
 8009b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b6e:	4798      	blx	r3
 8009b70:	3601      	adds	r6, #1
 8009b72:	e7f2      	b.n	8009b5a <__libc_init_array+0x1e>
 8009b74:	0800ca84 	.word	0x0800ca84
 8009b78:	0800ca84 	.word	0x0800ca84
 8009b7c:	0800ca84 	.word	0x0800ca84
 8009b80:	0800ca88 	.word	0x0800ca88

08009b84 <memset>:
 8009b84:	4402      	add	r2, r0
 8009b86:	4603      	mov	r3, r0
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d100      	bne.n	8009b8e <memset+0xa>
 8009b8c:	4770      	bx	lr
 8009b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b92:	e7f9      	b.n	8009b88 <memset+0x4>

08009b94 <__cvt>:
 8009b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b98:	ec55 4b10 	vmov	r4, r5, d0
 8009b9c:	2d00      	cmp	r5, #0
 8009b9e:	460e      	mov	r6, r1
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	462b      	mov	r3, r5
 8009ba4:	bfbb      	ittet	lt
 8009ba6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009baa:	461d      	movlt	r5, r3
 8009bac:	2300      	movge	r3, #0
 8009bae:	232d      	movlt	r3, #45	; 0x2d
 8009bb0:	700b      	strb	r3, [r1, #0]
 8009bb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bb4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009bb8:	4691      	mov	r9, r2
 8009bba:	f023 0820 	bic.w	r8, r3, #32
 8009bbe:	bfbc      	itt	lt
 8009bc0:	4622      	movlt	r2, r4
 8009bc2:	4614      	movlt	r4, r2
 8009bc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009bc8:	d005      	beq.n	8009bd6 <__cvt+0x42>
 8009bca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009bce:	d100      	bne.n	8009bd2 <__cvt+0x3e>
 8009bd0:	3601      	adds	r6, #1
 8009bd2:	2102      	movs	r1, #2
 8009bd4:	e000      	b.n	8009bd8 <__cvt+0x44>
 8009bd6:	2103      	movs	r1, #3
 8009bd8:	ab03      	add	r3, sp, #12
 8009bda:	9301      	str	r3, [sp, #4]
 8009bdc:	ab02      	add	r3, sp, #8
 8009bde:	9300      	str	r3, [sp, #0]
 8009be0:	ec45 4b10 	vmov	d0, r4, r5
 8009be4:	4653      	mov	r3, sl
 8009be6:	4632      	mov	r2, r6
 8009be8:	f000 fda2 	bl	800a730 <_dtoa_r>
 8009bec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009bf0:	4607      	mov	r7, r0
 8009bf2:	d102      	bne.n	8009bfa <__cvt+0x66>
 8009bf4:	f019 0f01 	tst.w	r9, #1
 8009bf8:	d022      	beq.n	8009c40 <__cvt+0xac>
 8009bfa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009bfe:	eb07 0906 	add.w	r9, r7, r6
 8009c02:	d110      	bne.n	8009c26 <__cvt+0x92>
 8009c04:	783b      	ldrb	r3, [r7, #0]
 8009c06:	2b30      	cmp	r3, #48	; 0x30
 8009c08:	d10a      	bne.n	8009c20 <__cvt+0x8c>
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	4620      	mov	r0, r4
 8009c10:	4629      	mov	r1, r5
 8009c12:	f7f6 ff59 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c16:	b918      	cbnz	r0, 8009c20 <__cvt+0x8c>
 8009c18:	f1c6 0601 	rsb	r6, r6, #1
 8009c1c:	f8ca 6000 	str.w	r6, [sl]
 8009c20:	f8da 3000 	ldr.w	r3, [sl]
 8009c24:	4499      	add	r9, r3
 8009c26:	2200      	movs	r2, #0
 8009c28:	2300      	movs	r3, #0
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	f7f6 ff4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c32:	b108      	cbz	r0, 8009c38 <__cvt+0xa4>
 8009c34:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c38:	2230      	movs	r2, #48	; 0x30
 8009c3a:	9b03      	ldr	r3, [sp, #12]
 8009c3c:	454b      	cmp	r3, r9
 8009c3e:	d307      	bcc.n	8009c50 <__cvt+0xbc>
 8009c40:	9b03      	ldr	r3, [sp, #12]
 8009c42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c44:	1bdb      	subs	r3, r3, r7
 8009c46:	4638      	mov	r0, r7
 8009c48:	6013      	str	r3, [r2, #0]
 8009c4a:	b004      	add	sp, #16
 8009c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c50:	1c59      	adds	r1, r3, #1
 8009c52:	9103      	str	r1, [sp, #12]
 8009c54:	701a      	strb	r2, [r3, #0]
 8009c56:	e7f0      	b.n	8009c3a <__cvt+0xa6>

08009c58 <__exponent>:
 8009c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2900      	cmp	r1, #0
 8009c5e:	bfb8      	it	lt
 8009c60:	4249      	neglt	r1, r1
 8009c62:	f803 2b02 	strb.w	r2, [r3], #2
 8009c66:	bfb4      	ite	lt
 8009c68:	222d      	movlt	r2, #45	; 0x2d
 8009c6a:	222b      	movge	r2, #43	; 0x2b
 8009c6c:	2909      	cmp	r1, #9
 8009c6e:	7042      	strb	r2, [r0, #1]
 8009c70:	dd2a      	ble.n	8009cc8 <__exponent+0x70>
 8009c72:	f10d 0407 	add.w	r4, sp, #7
 8009c76:	46a4      	mov	ip, r4
 8009c78:	270a      	movs	r7, #10
 8009c7a:	46a6      	mov	lr, r4
 8009c7c:	460a      	mov	r2, r1
 8009c7e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009c82:	fb07 1516 	mls	r5, r7, r6, r1
 8009c86:	3530      	adds	r5, #48	; 0x30
 8009c88:	2a63      	cmp	r2, #99	; 0x63
 8009c8a:	f104 34ff 	add.w	r4, r4, #4294967295
 8009c8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009c92:	4631      	mov	r1, r6
 8009c94:	dcf1      	bgt.n	8009c7a <__exponent+0x22>
 8009c96:	3130      	adds	r1, #48	; 0x30
 8009c98:	f1ae 0502 	sub.w	r5, lr, #2
 8009c9c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009ca0:	1c44      	adds	r4, r0, #1
 8009ca2:	4629      	mov	r1, r5
 8009ca4:	4561      	cmp	r1, ip
 8009ca6:	d30a      	bcc.n	8009cbe <__exponent+0x66>
 8009ca8:	f10d 0209 	add.w	r2, sp, #9
 8009cac:	eba2 020e 	sub.w	r2, r2, lr
 8009cb0:	4565      	cmp	r5, ip
 8009cb2:	bf88      	it	hi
 8009cb4:	2200      	movhi	r2, #0
 8009cb6:	4413      	add	r3, r2
 8009cb8:	1a18      	subs	r0, r3, r0
 8009cba:	b003      	add	sp, #12
 8009cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cc2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009cc6:	e7ed      	b.n	8009ca4 <__exponent+0x4c>
 8009cc8:	2330      	movs	r3, #48	; 0x30
 8009cca:	3130      	adds	r1, #48	; 0x30
 8009ccc:	7083      	strb	r3, [r0, #2]
 8009cce:	70c1      	strb	r1, [r0, #3]
 8009cd0:	1d03      	adds	r3, r0, #4
 8009cd2:	e7f1      	b.n	8009cb8 <__exponent+0x60>

08009cd4 <_printf_float>:
 8009cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd8:	ed2d 8b02 	vpush	{d8}
 8009cdc:	b08d      	sub	sp, #52	; 0x34
 8009cde:	460c      	mov	r4, r1
 8009ce0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009ce4:	4616      	mov	r6, r2
 8009ce6:	461f      	mov	r7, r3
 8009ce8:	4605      	mov	r5, r0
 8009cea:	f001 fcc7 	bl	800b67c <_localeconv_r>
 8009cee:	f8d0 a000 	ldr.w	sl, [r0]
 8009cf2:	4650      	mov	r0, sl
 8009cf4:	f7f6 fa6c 	bl	80001d0 <strlen>
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	930a      	str	r3, [sp, #40]	; 0x28
 8009cfc:	6823      	ldr	r3, [r4, #0]
 8009cfe:	9305      	str	r3, [sp, #20]
 8009d00:	f8d8 3000 	ldr.w	r3, [r8]
 8009d04:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009d08:	3307      	adds	r3, #7
 8009d0a:	f023 0307 	bic.w	r3, r3, #7
 8009d0e:	f103 0208 	add.w	r2, r3, #8
 8009d12:	f8c8 2000 	str.w	r2, [r8]
 8009d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009d1e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009d22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d26:	9307      	str	r3, [sp, #28]
 8009d28:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d2c:	ee08 0a10 	vmov	s16, r0
 8009d30:	4b9f      	ldr	r3, [pc, #636]	; (8009fb0 <_printf_float+0x2dc>)
 8009d32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d36:	f04f 32ff 	mov.w	r2, #4294967295
 8009d3a:	f7f6 fef7 	bl	8000b2c <__aeabi_dcmpun>
 8009d3e:	bb88      	cbnz	r0, 8009da4 <_printf_float+0xd0>
 8009d40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d44:	4b9a      	ldr	r3, [pc, #616]	; (8009fb0 <_printf_float+0x2dc>)
 8009d46:	f04f 32ff 	mov.w	r2, #4294967295
 8009d4a:	f7f6 fed1 	bl	8000af0 <__aeabi_dcmple>
 8009d4e:	bb48      	cbnz	r0, 8009da4 <_printf_float+0xd0>
 8009d50:	2200      	movs	r2, #0
 8009d52:	2300      	movs	r3, #0
 8009d54:	4640      	mov	r0, r8
 8009d56:	4649      	mov	r1, r9
 8009d58:	f7f6 fec0 	bl	8000adc <__aeabi_dcmplt>
 8009d5c:	b110      	cbz	r0, 8009d64 <_printf_float+0x90>
 8009d5e:	232d      	movs	r3, #45	; 0x2d
 8009d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d64:	4b93      	ldr	r3, [pc, #588]	; (8009fb4 <_printf_float+0x2e0>)
 8009d66:	4894      	ldr	r0, [pc, #592]	; (8009fb8 <_printf_float+0x2e4>)
 8009d68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009d6c:	bf94      	ite	ls
 8009d6e:	4698      	movls	r8, r3
 8009d70:	4680      	movhi	r8, r0
 8009d72:	2303      	movs	r3, #3
 8009d74:	6123      	str	r3, [r4, #16]
 8009d76:	9b05      	ldr	r3, [sp, #20]
 8009d78:	f023 0204 	bic.w	r2, r3, #4
 8009d7c:	6022      	str	r2, [r4, #0]
 8009d7e:	f04f 0900 	mov.w	r9, #0
 8009d82:	9700      	str	r7, [sp, #0]
 8009d84:	4633      	mov	r3, r6
 8009d86:	aa0b      	add	r2, sp, #44	; 0x2c
 8009d88:	4621      	mov	r1, r4
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	f000 f9d8 	bl	800a140 <_printf_common>
 8009d90:	3001      	adds	r0, #1
 8009d92:	f040 8090 	bne.w	8009eb6 <_printf_float+0x1e2>
 8009d96:	f04f 30ff 	mov.w	r0, #4294967295
 8009d9a:	b00d      	add	sp, #52	; 0x34
 8009d9c:	ecbd 8b02 	vpop	{d8}
 8009da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da4:	4642      	mov	r2, r8
 8009da6:	464b      	mov	r3, r9
 8009da8:	4640      	mov	r0, r8
 8009daa:	4649      	mov	r1, r9
 8009dac:	f7f6 febe 	bl	8000b2c <__aeabi_dcmpun>
 8009db0:	b140      	cbz	r0, 8009dc4 <_printf_float+0xf0>
 8009db2:	464b      	mov	r3, r9
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	bfbc      	itt	lt
 8009db8:	232d      	movlt	r3, #45	; 0x2d
 8009dba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009dbe:	487f      	ldr	r0, [pc, #508]	; (8009fbc <_printf_float+0x2e8>)
 8009dc0:	4b7f      	ldr	r3, [pc, #508]	; (8009fc0 <_printf_float+0x2ec>)
 8009dc2:	e7d1      	b.n	8009d68 <_printf_float+0x94>
 8009dc4:	6863      	ldr	r3, [r4, #4]
 8009dc6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009dca:	9206      	str	r2, [sp, #24]
 8009dcc:	1c5a      	adds	r2, r3, #1
 8009dce:	d13f      	bne.n	8009e50 <_printf_float+0x17c>
 8009dd0:	2306      	movs	r3, #6
 8009dd2:	6063      	str	r3, [r4, #4]
 8009dd4:	9b05      	ldr	r3, [sp, #20]
 8009dd6:	6861      	ldr	r1, [r4, #4]
 8009dd8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009ddc:	2300      	movs	r3, #0
 8009dde:	9303      	str	r3, [sp, #12]
 8009de0:	ab0a      	add	r3, sp, #40	; 0x28
 8009de2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009de6:	ab09      	add	r3, sp, #36	; 0x24
 8009de8:	ec49 8b10 	vmov	d0, r8, r9
 8009dec:	9300      	str	r3, [sp, #0]
 8009dee:	6022      	str	r2, [r4, #0]
 8009df0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009df4:	4628      	mov	r0, r5
 8009df6:	f7ff fecd 	bl	8009b94 <__cvt>
 8009dfa:	9b06      	ldr	r3, [sp, #24]
 8009dfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dfe:	2b47      	cmp	r3, #71	; 0x47
 8009e00:	4680      	mov	r8, r0
 8009e02:	d108      	bne.n	8009e16 <_printf_float+0x142>
 8009e04:	1cc8      	adds	r0, r1, #3
 8009e06:	db02      	blt.n	8009e0e <_printf_float+0x13a>
 8009e08:	6863      	ldr	r3, [r4, #4]
 8009e0a:	4299      	cmp	r1, r3
 8009e0c:	dd41      	ble.n	8009e92 <_printf_float+0x1be>
 8009e0e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009e12:	fa5f fb8b 	uxtb.w	fp, fp
 8009e16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e1a:	d820      	bhi.n	8009e5e <_printf_float+0x18a>
 8009e1c:	3901      	subs	r1, #1
 8009e1e:	465a      	mov	r2, fp
 8009e20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e24:	9109      	str	r1, [sp, #36]	; 0x24
 8009e26:	f7ff ff17 	bl	8009c58 <__exponent>
 8009e2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e2c:	1813      	adds	r3, r2, r0
 8009e2e:	2a01      	cmp	r2, #1
 8009e30:	4681      	mov	r9, r0
 8009e32:	6123      	str	r3, [r4, #16]
 8009e34:	dc02      	bgt.n	8009e3c <_printf_float+0x168>
 8009e36:	6822      	ldr	r2, [r4, #0]
 8009e38:	07d2      	lsls	r2, r2, #31
 8009e3a:	d501      	bpl.n	8009e40 <_printf_float+0x16c>
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	6123      	str	r3, [r4, #16]
 8009e40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d09c      	beq.n	8009d82 <_printf_float+0xae>
 8009e48:	232d      	movs	r3, #45	; 0x2d
 8009e4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e4e:	e798      	b.n	8009d82 <_printf_float+0xae>
 8009e50:	9a06      	ldr	r2, [sp, #24]
 8009e52:	2a47      	cmp	r2, #71	; 0x47
 8009e54:	d1be      	bne.n	8009dd4 <_printf_float+0x100>
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1bc      	bne.n	8009dd4 <_printf_float+0x100>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e7b9      	b.n	8009dd2 <_printf_float+0xfe>
 8009e5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009e62:	d118      	bne.n	8009e96 <_printf_float+0x1c2>
 8009e64:	2900      	cmp	r1, #0
 8009e66:	6863      	ldr	r3, [r4, #4]
 8009e68:	dd0b      	ble.n	8009e82 <_printf_float+0x1ae>
 8009e6a:	6121      	str	r1, [r4, #16]
 8009e6c:	b913      	cbnz	r3, 8009e74 <_printf_float+0x1a0>
 8009e6e:	6822      	ldr	r2, [r4, #0]
 8009e70:	07d0      	lsls	r0, r2, #31
 8009e72:	d502      	bpl.n	8009e7a <_printf_float+0x1a6>
 8009e74:	3301      	adds	r3, #1
 8009e76:	440b      	add	r3, r1
 8009e78:	6123      	str	r3, [r4, #16]
 8009e7a:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e7c:	f04f 0900 	mov.w	r9, #0
 8009e80:	e7de      	b.n	8009e40 <_printf_float+0x16c>
 8009e82:	b913      	cbnz	r3, 8009e8a <_printf_float+0x1b6>
 8009e84:	6822      	ldr	r2, [r4, #0]
 8009e86:	07d2      	lsls	r2, r2, #31
 8009e88:	d501      	bpl.n	8009e8e <_printf_float+0x1ba>
 8009e8a:	3302      	adds	r3, #2
 8009e8c:	e7f4      	b.n	8009e78 <_printf_float+0x1a4>
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e7f2      	b.n	8009e78 <_printf_float+0x1a4>
 8009e92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e98:	4299      	cmp	r1, r3
 8009e9a:	db05      	blt.n	8009ea8 <_printf_float+0x1d4>
 8009e9c:	6823      	ldr	r3, [r4, #0]
 8009e9e:	6121      	str	r1, [r4, #16]
 8009ea0:	07d8      	lsls	r0, r3, #31
 8009ea2:	d5ea      	bpl.n	8009e7a <_printf_float+0x1a6>
 8009ea4:	1c4b      	adds	r3, r1, #1
 8009ea6:	e7e7      	b.n	8009e78 <_printf_float+0x1a4>
 8009ea8:	2900      	cmp	r1, #0
 8009eaa:	bfd4      	ite	le
 8009eac:	f1c1 0202 	rsble	r2, r1, #2
 8009eb0:	2201      	movgt	r2, #1
 8009eb2:	4413      	add	r3, r2
 8009eb4:	e7e0      	b.n	8009e78 <_printf_float+0x1a4>
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	055a      	lsls	r2, r3, #21
 8009eba:	d407      	bmi.n	8009ecc <_printf_float+0x1f8>
 8009ebc:	6923      	ldr	r3, [r4, #16]
 8009ebe:	4642      	mov	r2, r8
 8009ec0:	4631      	mov	r1, r6
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	47b8      	blx	r7
 8009ec6:	3001      	adds	r0, #1
 8009ec8:	d12c      	bne.n	8009f24 <_printf_float+0x250>
 8009eca:	e764      	b.n	8009d96 <_printf_float+0xc2>
 8009ecc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ed0:	f240 80e0 	bls.w	800a094 <_printf_float+0x3c0>
 8009ed4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ed8:	2200      	movs	r2, #0
 8009eda:	2300      	movs	r3, #0
 8009edc:	f7f6 fdf4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	d034      	beq.n	8009f4e <_printf_float+0x27a>
 8009ee4:	4a37      	ldr	r2, [pc, #220]	; (8009fc4 <_printf_float+0x2f0>)
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	4631      	mov	r1, r6
 8009eea:	4628      	mov	r0, r5
 8009eec:	47b8      	blx	r7
 8009eee:	3001      	adds	r0, #1
 8009ef0:	f43f af51 	beq.w	8009d96 <_printf_float+0xc2>
 8009ef4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	db02      	blt.n	8009f02 <_printf_float+0x22e>
 8009efc:	6823      	ldr	r3, [r4, #0]
 8009efe:	07d8      	lsls	r0, r3, #31
 8009f00:	d510      	bpl.n	8009f24 <_printf_float+0x250>
 8009f02:	ee18 3a10 	vmov	r3, s16
 8009f06:	4652      	mov	r2, sl
 8009f08:	4631      	mov	r1, r6
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	47b8      	blx	r7
 8009f0e:	3001      	adds	r0, #1
 8009f10:	f43f af41 	beq.w	8009d96 <_printf_float+0xc2>
 8009f14:	f04f 0800 	mov.w	r8, #0
 8009f18:	f104 091a 	add.w	r9, r4, #26
 8009f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	4543      	cmp	r3, r8
 8009f22:	dc09      	bgt.n	8009f38 <_printf_float+0x264>
 8009f24:	6823      	ldr	r3, [r4, #0]
 8009f26:	079b      	lsls	r3, r3, #30
 8009f28:	f100 8105 	bmi.w	800a136 <_printf_float+0x462>
 8009f2c:	68e0      	ldr	r0, [r4, #12]
 8009f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f30:	4298      	cmp	r0, r3
 8009f32:	bfb8      	it	lt
 8009f34:	4618      	movlt	r0, r3
 8009f36:	e730      	b.n	8009d9a <_printf_float+0xc6>
 8009f38:	2301      	movs	r3, #1
 8009f3a:	464a      	mov	r2, r9
 8009f3c:	4631      	mov	r1, r6
 8009f3e:	4628      	mov	r0, r5
 8009f40:	47b8      	blx	r7
 8009f42:	3001      	adds	r0, #1
 8009f44:	f43f af27 	beq.w	8009d96 <_printf_float+0xc2>
 8009f48:	f108 0801 	add.w	r8, r8, #1
 8009f4c:	e7e6      	b.n	8009f1c <_printf_float+0x248>
 8009f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	dc39      	bgt.n	8009fc8 <_printf_float+0x2f4>
 8009f54:	4a1b      	ldr	r2, [pc, #108]	; (8009fc4 <_printf_float+0x2f0>)
 8009f56:	2301      	movs	r3, #1
 8009f58:	4631      	mov	r1, r6
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	47b8      	blx	r7
 8009f5e:	3001      	adds	r0, #1
 8009f60:	f43f af19 	beq.w	8009d96 <_printf_float+0xc2>
 8009f64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	d102      	bne.n	8009f72 <_printf_float+0x29e>
 8009f6c:	6823      	ldr	r3, [r4, #0]
 8009f6e:	07d9      	lsls	r1, r3, #31
 8009f70:	d5d8      	bpl.n	8009f24 <_printf_float+0x250>
 8009f72:	ee18 3a10 	vmov	r3, s16
 8009f76:	4652      	mov	r2, sl
 8009f78:	4631      	mov	r1, r6
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	47b8      	blx	r7
 8009f7e:	3001      	adds	r0, #1
 8009f80:	f43f af09 	beq.w	8009d96 <_printf_float+0xc2>
 8009f84:	f04f 0900 	mov.w	r9, #0
 8009f88:	f104 0a1a 	add.w	sl, r4, #26
 8009f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f8e:	425b      	negs	r3, r3
 8009f90:	454b      	cmp	r3, r9
 8009f92:	dc01      	bgt.n	8009f98 <_printf_float+0x2c4>
 8009f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f96:	e792      	b.n	8009ebe <_printf_float+0x1ea>
 8009f98:	2301      	movs	r3, #1
 8009f9a:	4652      	mov	r2, sl
 8009f9c:	4631      	mov	r1, r6
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	47b8      	blx	r7
 8009fa2:	3001      	adds	r0, #1
 8009fa4:	f43f aef7 	beq.w	8009d96 <_printf_float+0xc2>
 8009fa8:	f109 0901 	add.w	r9, r9, #1
 8009fac:	e7ee      	b.n	8009f8c <_printf_float+0x2b8>
 8009fae:	bf00      	nop
 8009fb0:	7fefffff 	.word	0x7fefffff
 8009fb4:	0800c6a8 	.word	0x0800c6a8
 8009fb8:	0800c6ac 	.word	0x0800c6ac
 8009fbc:	0800c6b4 	.word	0x0800c6b4
 8009fc0:	0800c6b0 	.word	0x0800c6b0
 8009fc4:	0800c6b8 	.word	0x0800c6b8
 8009fc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	bfa8      	it	ge
 8009fd0:	461a      	movge	r2, r3
 8009fd2:	2a00      	cmp	r2, #0
 8009fd4:	4691      	mov	r9, r2
 8009fd6:	dc37      	bgt.n	800a048 <_printf_float+0x374>
 8009fd8:	f04f 0b00 	mov.w	fp, #0
 8009fdc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fe0:	f104 021a 	add.w	r2, r4, #26
 8009fe4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fe6:	9305      	str	r3, [sp, #20]
 8009fe8:	eba3 0309 	sub.w	r3, r3, r9
 8009fec:	455b      	cmp	r3, fp
 8009fee:	dc33      	bgt.n	800a058 <_printf_float+0x384>
 8009ff0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	db3b      	blt.n	800a070 <_printf_float+0x39c>
 8009ff8:	6823      	ldr	r3, [r4, #0]
 8009ffa:	07da      	lsls	r2, r3, #31
 8009ffc:	d438      	bmi.n	800a070 <_printf_float+0x39c>
 8009ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a000:	9a05      	ldr	r2, [sp, #20]
 800a002:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a004:	1a9a      	subs	r2, r3, r2
 800a006:	eba3 0901 	sub.w	r9, r3, r1
 800a00a:	4591      	cmp	r9, r2
 800a00c:	bfa8      	it	ge
 800a00e:	4691      	movge	r9, r2
 800a010:	f1b9 0f00 	cmp.w	r9, #0
 800a014:	dc35      	bgt.n	800a082 <_printf_float+0x3ae>
 800a016:	f04f 0800 	mov.w	r8, #0
 800a01a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a01e:	f104 0a1a 	add.w	sl, r4, #26
 800a022:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a026:	1a9b      	subs	r3, r3, r2
 800a028:	eba3 0309 	sub.w	r3, r3, r9
 800a02c:	4543      	cmp	r3, r8
 800a02e:	f77f af79 	ble.w	8009f24 <_printf_float+0x250>
 800a032:	2301      	movs	r3, #1
 800a034:	4652      	mov	r2, sl
 800a036:	4631      	mov	r1, r6
 800a038:	4628      	mov	r0, r5
 800a03a:	47b8      	blx	r7
 800a03c:	3001      	adds	r0, #1
 800a03e:	f43f aeaa 	beq.w	8009d96 <_printf_float+0xc2>
 800a042:	f108 0801 	add.w	r8, r8, #1
 800a046:	e7ec      	b.n	800a022 <_printf_float+0x34e>
 800a048:	4613      	mov	r3, r2
 800a04a:	4631      	mov	r1, r6
 800a04c:	4642      	mov	r2, r8
 800a04e:	4628      	mov	r0, r5
 800a050:	47b8      	blx	r7
 800a052:	3001      	adds	r0, #1
 800a054:	d1c0      	bne.n	8009fd8 <_printf_float+0x304>
 800a056:	e69e      	b.n	8009d96 <_printf_float+0xc2>
 800a058:	2301      	movs	r3, #1
 800a05a:	4631      	mov	r1, r6
 800a05c:	4628      	mov	r0, r5
 800a05e:	9205      	str	r2, [sp, #20]
 800a060:	47b8      	blx	r7
 800a062:	3001      	adds	r0, #1
 800a064:	f43f ae97 	beq.w	8009d96 <_printf_float+0xc2>
 800a068:	9a05      	ldr	r2, [sp, #20]
 800a06a:	f10b 0b01 	add.w	fp, fp, #1
 800a06e:	e7b9      	b.n	8009fe4 <_printf_float+0x310>
 800a070:	ee18 3a10 	vmov	r3, s16
 800a074:	4652      	mov	r2, sl
 800a076:	4631      	mov	r1, r6
 800a078:	4628      	mov	r0, r5
 800a07a:	47b8      	blx	r7
 800a07c:	3001      	adds	r0, #1
 800a07e:	d1be      	bne.n	8009ffe <_printf_float+0x32a>
 800a080:	e689      	b.n	8009d96 <_printf_float+0xc2>
 800a082:	9a05      	ldr	r2, [sp, #20]
 800a084:	464b      	mov	r3, r9
 800a086:	4442      	add	r2, r8
 800a088:	4631      	mov	r1, r6
 800a08a:	4628      	mov	r0, r5
 800a08c:	47b8      	blx	r7
 800a08e:	3001      	adds	r0, #1
 800a090:	d1c1      	bne.n	800a016 <_printf_float+0x342>
 800a092:	e680      	b.n	8009d96 <_printf_float+0xc2>
 800a094:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a096:	2a01      	cmp	r2, #1
 800a098:	dc01      	bgt.n	800a09e <_printf_float+0x3ca>
 800a09a:	07db      	lsls	r3, r3, #31
 800a09c:	d538      	bpl.n	800a110 <_printf_float+0x43c>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	4642      	mov	r2, r8
 800a0a2:	4631      	mov	r1, r6
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	47b8      	blx	r7
 800a0a8:	3001      	adds	r0, #1
 800a0aa:	f43f ae74 	beq.w	8009d96 <_printf_float+0xc2>
 800a0ae:	ee18 3a10 	vmov	r3, s16
 800a0b2:	4652      	mov	r2, sl
 800a0b4:	4631      	mov	r1, r6
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	47b8      	blx	r7
 800a0ba:	3001      	adds	r0, #1
 800a0bc:	f43f ae6b 	beq.w	8009d96 <_printf_float+0xc2>
 800a0c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	f7f6 fcfe 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0cc:	b9d8      	cbnz	r0, 800a106 <_printf_float+0x432>
 800a0ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0d0:	f108 0201 	add.w	r2, r8, #1
 800a0d4:	3b01      	subs	r3, #1
 800a0d6:	4631      	mov	r1, r6
 800a0d8:	4628      	mov	r0, r5
 800a0da:	47b8      	blx	r7
 800a0dc:	3001      	adds	r0, #1
 800a0de:	d10e      	bne.n	800a0fe <_printf_float+0x42a>
 800a0e0:	e659      	b.n	8009d96 <_printf_float+0xc2>
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	4652      	mov	r2, sl
 800a0e6:	4631      	mov	r1, r6
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	47b8      	blx	r7
 800a0ec:	3001      	adds	r0, #1
 800a0ee:	f43f ae52 	beq.w	8009d96 <_printf_float+0xc2>
 800a0f2:	f108 0801 	add.w	r8, r8, #1
 800a0f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	4543      	cmp	r3, r8
 800a0fc:	dcf1      	bgt.n	800a0e2 <_printf_float+0x40e>
 800a0fe:	464b      	mov	r3, r9
 800a100:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a104:	e6dc      	b.n	8009ec0 <_printf_float+0x1ec>
 800a106:	f04f 0800 	mov.w	r8, #0
 800a10a:	f104 0a1a 	add.w	sl, r4, #26
 800a10e:	e7f2      	b.n	800a0f6 <_printf_float+0x422>
 800a110:	2301      	movs	r3, #1
 800a112:	4642      	mov	r2, r8
 800a114:	e7df      	b.n	800a0d6 <_printf_float+0x402>
 800a116:	2301      	movs	r3, #1
 800a118:	464a      	mov	r2, r9
 800a11a:	4631      	mov	r1, r6
 800a11c:	4628      	mov	r0, r5
 800a11e:	47b8      	blx	r7
 800a120:	3001      	adds	r0, #1
 800a122:	f43f ae38 	beq.w	8009d96 <_printf_float+0xc2>
 800a126:	f108 0801 	add.w	r8, r8, #1
 800a12a:	68e3      	ldr	r3, [r4, #12]
 800a12c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a12e:	1a5b      	subs	r3, r3, r1
 800a130:	4543      	cmp	r3, r8
 800a132:	dcf0      	bgt.n	800a116 <_printf_float+0x442>
 800a134:	e6fa      	b.n	8009f2c <_printf_float+0x258>
 800a136:	f04f 0800 	mov.w	r8, #0
 800a13a:	f104 0919 	add.w	r9, r4, #25
 800a13e:	e7f4      	b.n	800a12a <_printf_float+0x456>

0800a140 <_printf_common>:
 800a140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a144:	4616      	mov	r6, r2
 800a146:	4699      	mov	r9, r3
 800a148:	688a      	ldr	r2, [r1, #8]
 800a14a:	690b      	ldr	r3, [r1, #16]
 800a14c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a150:	4293      	cmp	r3, r2
 800a152:	bfb8      	it	lt
 800a154:	4613      	movlt	r3, r2
 800a156:	6033      	str	r3, [r6, #0]
 800a158:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a15c:	4607      	mov	r7, r0
 800a15e:	460c      	mov	r4, r1
 800a160:	b10a      	cbz	r2, 800a166 <_printf_common+0x26>
 800a162:	3301      	adds	r3, #1
 800a164:	6033      	str	r3, [r6, #0]
 800a166:	6823      	ldr	r3, [r4, #0]
 800a168:	0699      	lsls	r1, r3, #26
 800a16a:	bf42      	ittt	mi
 800a16c:	6833      	ldrmi	r3, [r6, #0]
 800a16e:	3302      	addmi	r3, #2
 800a170:	6033      	strmi	r3, [r6, #0]
 800a172:	6825      	ldr	r5, [r4, #0]
 800a174:	f015 0506 	ands.w	r5, r5, #6
 800a178:	d106      	bne.n	800a188 <_printf_common+0x48>
 800a17a:	f104 0a19 	add.w	sl, r4, #25
 800a17e:	68e3      	ldr	r3, [r4, #12]
 800a180:	6832      	ldr	r2, [r6, #0]
 800a182:	1a9b      	subs	r3, r3, r2
 800a184:	42ab      	cmp	r3, r5
 800a186:	dc26      	bgt.n	800a1d6 <_printf_common+0x96>
 800a188:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a18c:	1e13      	subs	r3, r2, #0
 800a18e:	6822      	ldr	r2, [r4, #0]
 800a190:	bf18      	it	ne
 800a192:	2301      	movne	r3, #1
 800a194:	0692      	lsls	r2, r2, #26
 800a196:	d42b      	bmi.n	800a1f0 <_printf_common+0xb0>
 800a198:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a19c:	4649      	mov	r1, r9
 800a19e:	4638      	mov	r0, r7
 800a1a0:	47c0      	blx	r8
 800a1a2:	3001      	adds	r0, #1
 800a1a4:	d01e      	beq.n	800a1e4 <_printf_common+0xa4>
 800a1a6:	6823      	ldr	r3, [r4, #0]
 800a1a8:	68e5      	ldr	r5, [r4, #12]
 800a1aa:	6832      	ldr	r2, [r6, #0]
 800a1ac:	f003 0306 	and.w	r3, r3, #6
 800a1b0:	2b04      	cmp	r3, #4
 800a1b2:	bf08      	it	eq
 800a1b4:	1aad      	subeq	r5, r5, r2
 800a1b6:	68a3      	ldr	r3, [r4, #8]
 800a1b8:	6922      	ldr	r2, [r4, #16]
 800a1ba:	bf0c      	ite	eq
 800a1bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1c0:	2500      	movne	r5, #0
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	bfc4      	itt	gt
 800a1c6:	1a9b      	subgt	r3, r3, r2
 800a1c8:	18ed      	addgt	r5, r5, r3
 800a1ca:	2600      	movs	r6, #0
 800a1cc:	341a      	adds	r4, #26
 800a1ce:	42b5      	cmp	r5, r6
 800a1d0:	d11a      	bne.n	800a208 <_printf_common+0xc8>
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	e008      	b.n	800a1e8 <_printf_common+0xa8>
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	4652      	mov	r2, sl
 800a1da:	4649      	mov	r1, r9
 800a1dc:	4638      	mov	r0, r7
 800a1de:	47c0      	blx	r8
 800a1e0:	3001      	adds	r0, #1
 800a1e2:	d103      	bne.n	800a1ec <_printf_common+0xac>
 800a1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ec:	3501      	adds	r5, #1
 800a1ee:	e7c6      	b.n	800a17e <_printf_common+0x3e>
 800a1f0:	18e1      	adds	r1, r4, r3
 800a1f2:	1c5a      	adds	r2, r3, #1
 800a1f4:	2030      	movs	r0, #48	; 0x30
 800a1f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1fa:	4422      	add	r2, r4
 800a1fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a200:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a204:	3302      	adds	r3, #2
 800a206:	e7c7      	b.n	800a198 <_printf_common+0x58>
 800a208:	2301      	movs	r3, #1
 800a20a:	4622      	mov	r2, r4
 800a20c:	4649      	mov	r1, r9
 800a20e:	4638      	mov	r0, r7
 800a210:	47c0      	blx	r8
 800a212:	3001      	adds	r0, #1
 800a214:	d0e6      	beq.n	800a1e4 <_printf_common+0xa4>
 800a216:	3601      	adds	r6, #1
 800a218:	e7d9      	b.n	800a1ce <_printf_common+0x8e>
	...

0800a21c <_printf_i>:
 800a21c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a220:	7e0f      	ldrb	r7, [r1, #24]
 800a222:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a224:	2f78      	cmp	r7, #120	; 0x78
 800a226:	4691      	mov	r9, r2
 800a228:	4680      	mov	r8, r0
 800a22a:	460c      	mov	r4, r1
 800a22c:	469a      	mov	sl, r3
 800a22e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a232:	d807      	bhi.n	800a244 <_printf_i+0x28>
 800a234:	2f62      	cmp	r7, #98	; 0x62
 800a236:	d80a      	bhi.n	800a24e <_printf_i+0x32>
 800a238:	2f00      	cmp	r7, #0
 800a23a:	f000 80d8 	beq.w	800a3ee <_printf_i+0x1d2>
 800a23e:	2f58      	cmp	r7, #88	; 0x58
 800a240:	f000 80a3 	beq.w	800a38a <_printf_i+0x16e>
 800a244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a248:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a24c:	e03a      	b.n	800a2c4 <_printf_i+0xa8>
 800a24e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a252:	2b15      	cmp	r3, #21
 800a254:	d8f6      	bhi.n	800a244 <_printf_i+0x28>
 800a256:	a101      	add	r1, pc, #4	; (adr r1, 800a25c <_printf_i+0x40>)
 800a258:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a25c:	0800a2b5 	.word	0x0800a2b5
 800a260:	0800a2c9 	.word	0x0800a2c9
 800a264:	0800a245 	.word	0x0800a245
 800a268:	0800a245 	.word	0x0800a245
 800a26c:	0800a245 	.word	0x0800a245
 800a270:	0800a245 	.word	0x0800a245
 800a274:	0800a2c9 	.word	0x0800a2c9
 800a278:	0800a245 	.word	0x0800a245
 800a27c:	0800a245 	.word	0x0800a245
 800a280:	0800a245 	.word	0x0800a245
 800a284:	0800a245 	.word	0x0800a245
 800a288:	0800a3d5 	.word	0x0800a3d5
 800a28c:	0800a2f9 	.word	0x0800a2f9
 800a290:	0800a3b7 	.word	0x0800a3b7
 800a294:	0800a245 	.word	0x0800a245
 800a298:	0800a245 	.word	0x0800a245
 800a29c:	0800a3f7 	.word	0x0800a3f7
 800a2a0:	0800a245 	.word	0x0800a245
 800a2a4:	0800a2f9 	.word	0x0800a2f9
 800a2a8:	0800a245 	.word	0x0800a245
 800a2ac:	0800a245 	.word	0x0800a245
 800a2b0:	0800a3bf 	.word	0x0800a3bf
 800a2b4:	682b      	ldr	r3, [r5, #0]
 800a2b6:	1d1a      	adds	r2, r3, #4
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	602a      	str	r2, [r5, #0]
 800a2bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e0a3      	b.n	800a410 <_printf_i+0x1f4>
 800a2c8:	6820      	ldr	r0, [r4, #0]
 800a2ca:	6829      	ldr	r1, [r5, #0]
 800a2cc:	0606      	lsls	r6, r0, #24
 800a2ce:	f101 0304 	add.w	r3, r1, #4
 800a2d2:	d50a      	bpl.n	800a2ea <_printf_i+0xce>
 800a2d4:	680e      	ldr	r6, [r1, #0]
 800a2d6:	602b      	str	r3, [r5, #0]
 800a2d8:	2e00      	cmp	r6, #0
 800a2da:	da03      	bge.n	800a2e4 <_printf_i+0xc8>
 800a2dc:	232d      	movs	r3, #45	; 0x2d
 800a2de:	4276      	negs	r6, r6
 800a2e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2e4:	485e      	ldr	r0, [pc, #376]	; (800a460 <_printf_i+0x244>)
 800a2e6:	230a      	movs	r3, #10
 800a2e8:	e019      	b.n	800a31e <_printf_i+0x102>
 800a2ea:	680e      	ldr	r6, [r1, #0]
 800a2ec:	602b      	str	r3, [r5, #0]
 800a2ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a2f2:	bf18      	it	ne
 800a2f4:	b236      	sxthne	r6, r6
 800a2f6:	e7ef      	b.n	800a2d8 <_printf_i+0xbc>
 800a2f8:	682b      	ldr	r3, [r5, #0]
 800a2fa:	6820      	ldr	r0, [r4, #0]
 800a2fc:	1d19      	adds	r1, r3, #4
 800a2fe:	6029      	str	r1, [r5, #0]
 800a300:	0601      	lsls	r1, r0, #24
 800a302:	d501      	bpl.n	800a308 <_printf_i+0xec>
 800a304:	681e      	ldr	r6, [r3, #0]
 800a306:	e002      	b.n	800a30e <_printf_i+0xf2>
 800a308:	0646      	lsls	r6, r0, #25
 800a30a:	d5fb      	bpl.n	800a304 <_printf_i+0xe8>
 800a30c:	881e      	ldrh	r6, [r3, #0]
 800a30e:	4854      	ldr	r0, [pc, #336]	; (800a460 <_printf_i+0x244>)
 800a310:	2f6f      	cmp	r7, #111	; 0x6f
 800a312:	bf0c      	ite	eq
 800a314:	2308      	moveq	r3, #8
 800a316:	230a      	movne	r3, #10
 800a318:	2100      	movs	r1, #0
 800a31a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a31e:	6865      	ldr	r5, [r4, #4]
 800a320:	60a5      	str	r5, [r4, #8]
 800a322:	2d00      	cmp	r5, #0
 800a324:	bfa2      	ittt	ge
 800a326:	6821      	ldrge	r1, [r4, #0]
 800a328:	f021 0104 	bicge.w	r1, r1, #4
 800a32c:	6021      	strge	r1, [r4, #0]
 800a32e:	b90e      	cbnz	r6, 800a334 <_printf_i+0x118>
 800a330:	2d00      	cmp	r5, #0
 800a332:	d04d      	beq.n	800a3d0 <_printf_i+0x1b4>
 800a334:	4615      	mov	r5, r2
 800a336:	fbb6 f1f3 	udiv	r1, r6, r3
 800a33a:	fb03 6711 	mls	r7, r3, r1, r6
 800a33e:	5dc7      	ldrb	r7, [r0, r7]
 800a340:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a344:	4637      	mov	r7, r6
 800a346:	42bb      	cmp	r3, r7
 800a348:	460e      	mov	r6, r1
 800a34a:	d9f4      	bls.n	800a336 <_printf_i+0x11a>
 800a34c:	2b08      	cmp	r3, #8
 800a34e:	d10b      	bne.n	800a368 <_printf_i+0x14c>
 800a350:	6823      	ldr	r3, [r4, #0]
 800a352:	07de      	lsls	r6, r3, #31
 800a354:	d508      	bpl.n	800a368 <_printf_i+0x14c>
 800a356:	6923      	ldr	r3, [r4, #16]
 800a358:	6861      	ldr	r1, [r4, #4]
 800a35a:	4299      	cmp	r1, r3
 800a35c:	bfde      	ittt	le
 800a35e:	2330      	movle	r3, #48	; 0x30
 800a360:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a364:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a368:	1b52      	subs	r2, r2, r5
 800a36a:	6122      	str	r2, [r4, #16]
 800a36c:	f8cd a000 	str.w	sl, [sp]
 800a370:	464b      	mov	r3, r9
 800a372:	aa03      	add	r2, sp, #12
 800a374:	4621      	mov	r1, r4
 800a376:	4640      	mov	r0, r8
 800a378:	f7ff fee2 	bl	800a140 <_printf_common>
 800a37c:	3001      	adds	r0, #1
 800a37e:	d14c      	bne.n	800a41a <_printf_i+0x1fe>
 800a380:	f04f 30ff 	mov.w	r0, #4294967295
 800a384:	b004      	add	sp, #16
 800a386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a38a:	4835      	ldr	r0, [pc, #212]	; (800a460 <_printf_i+0x244>)
 800a38c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a390:	6829      	ldr	r1, [r5, #0]
 800a392:	6823      	ldr	r3, [r4, #0]
 800a394:	f851 6b04 	ldr.w	r6, [r1], #4
 800a398:	6029      	str	r1, [r5, #0]
 800a39a:	061d      	lsls	r5, r3, #24
 800a39c:	d514      	bpl.n	800a3c8 <_printf_i+0x1ac>
 800a39e:	07df      	lsls	r7, r3, #31
 800a3a0:	bf44      	itt	mi
 800a3a2:	f043 0320 	orrmi.w	r3, r3, #32
 800a3a6:	6023      	strmi	r3, [r4, #0]
 800a3a8:	b91e      	cbnz	r6, 800a3b2 <_printf_i+0x196>
 800a3aa:	6823      	ldr	r3, [r4, #0]
 800a3ac:	f023 0320 	bic.w	r3, r3, #32
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	2310      	movs	r3, #16
 800a3b4:	e7b0      	b.n	800a318 <_printf_i+0xfc>
 800a3b6:	6823      	ldr	r3, [r4, #0]
 800a3b8:	f043 0320 	orr.w	r3, r3, #32
 800a3bc:	6023      	str	r3, [r4, #0]
 800a3be:	2378      	movs	r3, #120	; 0x78
 800a3c0:	4828      	ldr	r0, [pc, #160]	; (800a464 <_printf_i+0x248>)
 800a3c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3c6:	e7e3      	b.n	800a390 <_printf_i+0x174>
 800a3c8:	0659      	lsls	r1, r3, #25
 800a3ca:	bf48      	it	mi
 800a3cc:	b2b6      	uxthmi	r6, r6
 800a3ce:	e7e6      	b.n	800a39e <_printf_i+0x182>
 800a3d0:	4615      	mov	r5, r2
 800a3d2:	e7bb      	b.n	800a34c <_printf_i+0x130>
 800a3d4:	682b      	ldr	r3, [r5, #0]
 800a3d6:	6826      	ldr	r6, [r4, #0]
 800a3d8:	6961      	ldr	r1, [r4, #20]
 800a3da:	1d18      	adds	r0, r3, #4
 800a3dc:	6028      	str	r0, [r5, #0]
 800a3de:	0635      	lsls	r5, r6, #24
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	d501      	bpl.n	800a3e8 <_printf_i+0x1cc>
 800a3e4:	6019      	str	r1, [r3, #0]
 800a3e6:	e002      	b.n	800a3ee <_printf_i+0x1d2>
 800a3e8:	0670      	lsls	r0, r6, #25
 800a3ea:	d5fb      	bpl.n	800a3e4 <_printf_i+0x1c8>
 800a3ec:	8019      	strh	r1, [r3, #0]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	6123      	str	r3, [r4, #16]
 800a3f2:	4615      	mov	r5, r2
 800a3f4:	e7ba      	b.n	800a36c <_printf_i+0x150>
 800a3f6:	682b      	ldr	r3, [r5, #0]
 800a3f8:	1d1a      	adds	r2, r3, #4
 800a3fa:	602a      	str	r2, [r5, #0]
 800a3fc:	681d      	ldr	r5, [r3, #0]
 800a3fe:	6862      	ldr	r2, [r4, #4]
 800a400:	2100      	movs	r1, #0
 800a402:	4628      	mov	r0, r5
 800a404:	f7f5 feec 	bl	80001e0 <memchr>
 800a408:	b108      	cbz	r0, 800a40e <_printf_i+0x1f2>
 800a40a:	1b40      	subs	r0, r0, r5
 800a40c:	6060      	str	r0, [r4, #4]
 800a40e:	6863      	ldr	r3, [r4, #4]
 800a410:	6123      	str	r3, [r4, #16]
 800a412:	2300      	movs	r3, #0
 800a414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a418:	e7a8      	b.n	800a36c <_printf_i+0x150>
 800a41a:	6923      	ldr	r3, [r4, #16]
 800a41c:	462a      	mov	r2, r5
 800a41e:	4649      	mov	r1, r9
 800a420:	4640      	mov	r0, r8
 800a422:	47d0      	blx	sl
 800a424:	3001      	adds	r0, #1
 800a426:	d0ab      	beq.n	800a380 <_printf_i+0x164>
 800a428:	6823      	ldr	r3, [r4, #0]
 800a42a:	079b      	lsls	r3, r3, #30
 800a42c:	d413      	bmi.n	800a456 <_printf_i+0x23a>
 800a42e:	68e0      	ldr	r0, [r4, #12]
 800a430:	9b03      	ldr	r3, [sp, #12]
 800a432:	4298      	cmp	r0, r3
 800a434:	bfb8      	it	lt
 800a436:	4618      	movlt	r0, r3
 800a438:	e7a4      	b.n	800a384 <_printf_i+0x168>
 800a43a:	2301      	movs	r3, #1
 800a43c:	4632      	mov	r2, r6
 800a43e:	4649      	mov	r1, r9
 800a440:	4640      	mov	r0, r8
 800a442:	47d0      	blx	sl
 800a444:	3001      	adds	r0, #1
 800a446:	d09b      	beq.n	800a380 <_printf_i+0x164>
 800a448:	3501      	adds	r5, #1
 800a44a:	68e3      	ldr	r3, [r4, #12]
 800a44c:	9903      	ldr	r1, [sp, #12]
 800a44e:	1a5b      	subs	r3, r3, r1
 800a450:	42ab      	cmp	r3, r5
 800a452:	dcf2      	bgt.n	800a43a <_printf_i+0x21e>
 800a454:	e7eb      	b.n	800a42e <_printf_i+0x212>
 800a456:	2500      	movs	r5, #0
 800a458:	f104 0619 	add.w	r6, r4, #25
 800a45c:	e7f5      	b.n	800a44a <_printf_i+0x22e>
 800a45e:	bf00      	nop
 800a460:	0800c6ba 	.word	0x0800c6ba
 800a464:	0800c6cb 	.word	0x0800c6cb

0800a468 <iprintf>:
 800a468:	b40f      	push	{r0, r1, r2, r3}
 800a46a:	4b0a      	ldr	r3, [pc, #40]	; (800a494 <iprintf+0x2c>)
 800a46c:	b513      	push	{r0, r1, r4, lr}
 800a46e:	681c      	ldr	r4, [r3, #0]
 800a470:	b124      	cbz	r4, 800a47c <iprintf+0x14>
 800a472:	69a3      	ldr	r3, [r4, #24]
 800a474:	b913      	cbnz	r3, 800a47c <iprintf+0x14>
 800a476:	4620      	mov	r0, r4
 800a478:	f001 f862 	bl	800b540 <__sinit>
 800a47c:	ab05      	add	r3, sp, #20
 800a47e:	9a04      	ldr	r2, [sp, #16]
 800a480:	68a1      	ldr	r1, [r4, #8]
 800a482:	9301      	str	r3, [sp, #4]
 800a484:	4620      	mov	r0, r4
 800a486:	f001 fe1f 	bl	800c0c8 <_vfiprintf_r>
 800a48a:	b002      	add	sp, #8
 800a48c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a490:	b004      	add	sp, #16
 800a492:	4770      	bx	lr
 800a494:	2000000c 	.word	0x2000000c

0800a498 <__swbuf_r>:
 800a498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49a:	460e      	mov	r6, r1
 800a49c:	4614      	mov	r4, r2
 800a49e:	4605      	mov	r5, r0
 800a4a0:	b118      	cbz	r0, 800a4aa <__swbuf_r+0x12>
 800a4a2:	6983      	ldr	r3, [r0, #24]
 800a4a4:	b90b      	cbnz	r3, 800a4aa <__swbuf_r+0x12>
 800a4a6:	f001 f84b 	bl	800b540 <__sinit>
 800a4aa:	4b21      	ldr	r3, [pc, #132]	; (800a530 <__swbuf_r+0x98>)
 800a4ac:	429c      	cmp	r4, r3
 800a4ae:	d12b      	bne.n	800a508 <__swbuf_r+0x70>
 800a4b0:	686c      	ldr	r4, [r5, #4]
 800a4b2:	69a3      	ldr	r3, [r4, #24]
 800a4b4:	60a3      	str	r3, [r4, #8]
 800a4b6:	89a3      	ldrh	r3, [r4, #12]
 800a4b8:	071a      	lsls	r2, r3, #28
 800a4ba:	d52f      	bpl.n	800a51c <__swbuf_r+0x84>
 800a4bc:	6923      	ldr	r3, [r4, #16]
 800a4be:	b36b      	cbz	r3, 800a51c <__swbuf_r+0x84>
 800a4c0:	6923      	ldr	r3, [r4, #16]
 800a4c2:	6820      	ldr	r0, [r4, #0]
 800a4c4:	1ac0      	subs	r0, r0, r3
 800a4c6:	6963      	ldr	r3, [r4, #20]
 800a4c8:	b2f6      	uxtb	r6, r6
 800a4ca:	4283      	cmp	r3, r0
 800a4cc:	4637      	mov	r7, r6
 800a4ce:	dc04      	bgt.n	800a4da <__swbuf_r+0x42>
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	f000 ffa0 	bl	800b418 <_fflush_r>
 800a4d8:	bb30      	cbnz	r0, 800a528 <__swbuf_r+0x90>
 800a4da:	68a3      	ldr	r3, [r4, #8]
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	60a3      	str	r3, [r4, #8]
 800a4e0:	6823      	ldr	r3, [r4, #0]
 800a4e2:	1c5a      	adds	r2, r3, #1
 800a4e4:	6022      	str	r2, [r4, #0]
 800a4e6:	701e      	strb	r6, [r3, #0]
 800a4e8:	6963      	ldr	r3, [r4, #20]
 800a4ea:	3001      	adds	r0, #1
 800a4ec:	4283      	cmp	r3, r0
 800a4ee:	d004      	beq.n	800a4fa <__swbuf_r+0x62>
 800a4f0:	89a3      	ldrh	r3, [r4, #12]
 800a4f2:	07db      	lsls	r3, r3, #31
 800a4f4:	d506      	bpl.n	800a504 <__swbuf_r+0x6c>
 800a4f6:	2e0a      	cmp	r6, #10
 800a4f8:	d104      	bne.n	800a504 <__swbuf_r+0x6c>
 800a4fa:	4621      	mov	r1, r4
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	f000 ff8b 	bl	800b418 <_fflush_r>
 800a502:	b988      	cbnz	r0, 800a528 <__swbuf_r+0x90>
 800a504:	4638      	mov	r0, r7
 800a506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a508:	4b0a      	ldr	r3, [pc, #40]	; (800a534 <__swbuf_r+0x9c>)
 800a50a:	429c      	cmp	r4, r3
 800a50c:	d101      	bne.n	800a512 <__swbuf_r+0x7a>
 800a50e:	68ac      	ldr	r4, [r5, #8]
 800a510:	e7cf      	b.n	800a4b2 <__swbuf_r+0x1a>
 800a512:	4b09      	ldr	r3, [pc, #36]	; (800a538 <__swbuf_r+0xa0>)
 800a514:	429c      	cmp	r4, r3
 800a516:	bf08      	it	eq
 800a518:	68ec      	ldreq	r4, [r5, #12]
 800a51a:	e7ca      	b.n	800a4b2 <__swbuf_r+0x1a>
 800a51c:	4621      	mov	r1, r4
 800a51e:	4628      	mov	r0, r5
 800a520:	f000 f80c 	bl	800a53c <__swsetup_r>
 800a524:	2800      	cmp	r0, #0
 800a526:	d0cb      	beq.n	800a4c0 <__swbuf_r+0x28>
 800a528:	f04f 37ff 	mov.w	r7, #4294967295
 800a52c:	e7ea      	b.n	800a504 <__swbuf_r+0x6c>
 800a52e:	bf00      	nop
 800a530:	0800c78c 	.word	0x0800c78c
 800a534:	0800c7ac 	.word	0x0800c7ac
 800a538:	0800c76c 	.word	0x0800c76c

0800a53c <__swsetup_r>:
 800a53c:	4b32      	ldr	r3, [pc, #200]	; (800a608 <__swsetup_r+0xcc>)
 800a53e:	b570      	push	{r4, r5, r6, lr}
 800a540:	681d      	ldr	r5, [r3, #0]
 800a542:	4606      	mov	r6, r0
 800a544:	460c      	mov	r4, r1
 800a546:	b125      	cbz	r5, 800a552 <__swsetup_r+0x16>
 800a548:	69ab      	ldr	r3, [r5, #24]
 800a54a:	b913      	cbnz	r3, 800a552 <__swsetup_r+0x16>
 800a54c:	4628      	mov	r0, r5
 800a54e:	f000 fff7 	bl	800b540 <__sinit>
 800a552:	4b2e      	ldr	r3, [pc, #184]	; (800a60c <__swsetup_r+0xd0>)
 800a554:	429c      	cmp	r4, r3
 800a556:	d10f      	bne.n	800a578 <__swsetup_r+0x3c>
 800a558:	686c      	ldr	r4, [r5, #4]
 800a55a:	89a3      	ldrh	r3, [r4, #12]
 800a55c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a560:	0719      	lsls	r1, r3, #28
 800a562:	d42c      	bmi.n	800a5be <__swsetup_r+0x82>
 800a564:	06dd      	lsls	r5, r3, #27
 800a566:	d411      	bmi.n	800a58c <__swsetup_r+0x50>
 800a568:	2309      	movs	r3, #9
 800a56a:	6033      	str	r3, [r6, #0]
 800a56c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a570:	81a3      	strh	r3, [r4, #12]
 800a572:	f04f 30ff 	mov.w	r0, #4294967295
 800a576:	e03e      	b.n	800a5f6 <__swsetup_r+0xba>
 800a578:	4b25      	ldr	r3, [pc, #148]	; (800a610 <__swsetup_r+0xd4>)
 800a57a:	429c      	cmp	r4, r3
 800a57c:	d101      	bne.n	800a582 <__swsetup_r+0x46>
 800a57e:	68ac      	ldr	r4, [r5, #8]
 800a580:	e7eb      	b.n	800a55a <__swsetup_r+0x1e>
 800a582:	4b24      	ldr	r3, [pc, #144]	; (800a614 <__swsetup_r+0xd8>)
 800a584:	429c      	cmp	r4, r3
 800a586:	bf08      	it	eq
 800a588:	68ec      	ldreq	r4, [r5, #12]
 800a58a:	e7e6      	b.n	800a55a <__swsetup_r+0x1e>
 800a58c:	0758      	lsls	r0, r3, #29
 800a58e:	d512      	bpl.n	800a5b6 <__swsetup_r+0x7a>
 800a590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a592:	b141      	cbz	r1, 800a5a6 <__swsetup_r+0x6a>
 800a594:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a598:	4299      	cmp	r1, r3
 800a59a:	d002      	beq.n	800a5a2 <__swsetup_r+0x66>
 800a59c:	4630      	mov	r0, r6
 800a59e:	f001 fc89 	bl	800beb4 <_free_r>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	6363      	str	r3, [r4, #52]	; 0x34
 800a5a6:	89a3      	ldrh	r3, [r4, #12]
 800a5a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5ac:	81a3      	strh	r3, [r4, #12]
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	6063      	str	r3, [r4, #4]
 800a5b2:	6923      	ldr	r3, [r4, #16]
 800a5b4:	6023      	str	r3, [r4, #0]
 800a5b6:	89a3      	ldrh	r3, [r4, #12]
 800a5b8:	f043 0308 	orr.w	r3, r3, #8
 800a5bc:	81a3      	strh	r3, [r4, #12]
 800a5be:	6923      	ldr	r3, [r4, #16]
 800a5c0:	b94b      	cbnz	r3, 800a5d6 <__swsetup_r+0x9a>
 800a5c2:	89a3      	ldrh	r3, [r4, #12]
 800a5c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5cc:	d003      	beq.n	800a5d6 <__swsetup_r+0x9a>
 800a5ce:	4621      	mov	r1, r4
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	f001 f87f 	bl	800b6d4 <__smakebuf_r>
 800a5d6:	89a0      	ldrh	r0, [r4, #12]
 800a5d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5dc:	f010 0301 	ands.w	r3, r0, #1
 800a5e0:	d00a      	beq.n	800a5f8 <__swsetup_r+0xbc>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	60a3      	str	r3, [r4, #8]
 800a5e6:	6963      	ldr	r3, [r4, #20]
 800a5e8:	425b      	negs	r3, r3
 800a5ea:	61a3      	str	r3, [r4, #24]
 800a5ec:	6923      	ldr	r3, [r4, #16]
 800a5ee:	b943      	cbnz	r3, 800a602 <__swsetup_r+0xc6>
 800a5f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5f4:	d1ba      	bne.n	800a56c <__swsetup_r+0x30>
 800a5f6:	bd70      	pop	{r4, r5, r6, pc}
 800a5f8:	0781      	lsls	r1, r0, #30
 800a5fa:	bf58      	it	pl
 800a5fc:	6963      	ldrpl	r3, [r4, #20]
 800a5fe:	60a3      	str	r3, [r4, #8]
 800a600:	e7f4      	b.n	800a5ec <__swsetup_r+0xb0>
 800a602:	2000      	movs	r0, #0
 800a604:	e7f7      	b.n	800a5f6 <__swsetup_r+0xba>
 800a606:	bf00      	nop
 800a608:	2000000c 	.word	0x2000000c
 800a60c:	0800c78c 	.word	0x0800c78c
 800a610:	0800c7ac 	.word	0x0800c7ac
 800a614:	0800c76c 	.word	0x0800c76c

0800a618 <quorem>:
 800a618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a61c:	6903      	ldr	r3, [r0, #16]
 800a61e:	690c      	ldr	r4, [r1, #16]
 800a620:	42a3      	cmp	r3, r4
 800a622:	4607      	mov	r7, r0
 800a624:	f2c0 8081 	blt.w	800a72a <quorem+0x112>
 800a628:	3c01      	subs	r4, #1
 800a62a:	f101 0814 	add.w	r8, r1, #20
 800a62e:	f100 0514 	add.w	r5, r0, #20
 800a632:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a636:	9301      	str	r3, [sp, #4]
 800a638:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a63c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a640:	3301      	adds	r3, #1
 800a642:	429a      	cmp	r2, r3
 800a644:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a648:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a64c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a650:	d331      	bcc.n	800a6b6 <quorem+0x9e>
 800a652:	f04f 0e00 	mov.w	lr, #0
 800a656:	4640      	mov	r0, r8
 800a658:	46ac      	mov	ip, r5
 800a65a:	46f2      	mov	sl, lr
 800a65c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a660:	b293      	uxth	r3, r2
 800a662:	fb06 e303 	mla	r3, r6, r3, lr
 800a666:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	ebaa 0303 	sub.w	r3, sl, r3
 800a670:	f8dc a000 	ldr.w	sl, [ip]
 800a674:	0c12      	lsrs	r2, r2, #16
 800a676:	fa13 f38a 	uxtah	r3, r3, sl
 800a67a:	fb06 e202 	mla	r2, r6, r2, lr
 800a67e:	9300      	str	r3, [sp, #0]
 800a680:	9b00      	ldr	r3, [sp, #0]
 800a682:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a686:	b292      	uxth	r2, r2
 800a688:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a68c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a690:	f8bd 3000 	ldrh.w	r3, [sp]
 800a694:	4581      	cmp	r9, r0
 800a696:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a69a:	f84c 3b04 	str.w	r3, [ip], #4
 800a69e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a6a2:	d2db      	bcs.n	800a65c <quorem+0x44>
 800a6a4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a6a8:	b92b      	cbnz	r3, 800a6b6 <quorem+0x9e>
 800a6aa:	9b01      	ldr	r3, [sp, #4]
 800a6ac:	3b04      	subs	r3, #4
 800a6ae:	429d      	cmp	r5, r3
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	d32e      	bcc.n	800a712 <quorem+0xfa>
 800a6b4:	613c      	str	r4, [r7, #16]
 800a6b6:	4638      	mov	r0, r7
 800a6b8:	f001 fae4 	bl	800bc84 <__mcmp>
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	db24      	blt.n	800a70a <quorem+0xf2>
 800a6c0:	3601      	adds	r6, #1
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f04f 0c00 	mov.w	ip, #0
 800a6c8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a6cc:	f8d0 e000 	ldr.w	lr, [r0]
 800a6d0:	b293      	uxth	r3, r2
 800a6d2:	ebac 0303 	sub.w	r3, ip, r3
 800a6d6:	0c12      	lsrs	r2, r2, #16
 800a6d8:	fa13 f38e 	uxtah	r3, r3, lr
 800a6dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a6e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6ea:	45c1      	cmp	r9, r8
 800a6ec:	f840 3b04 	str.w	r3, [r0], #4
 800a6f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a6f4:	d2e8      	bcs.n	800a6c8 <quorem+0xb0>
 800a6f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6fe:	b922      	cbnz	r2, 800a70a <quorem+0xf2>
 800a700:	3b04      	subs	r3, #4
 800a702:	429d      	cmp	r5, r3
 800a704:	461a      	mov	r2, r3
 800a706:	d30a      	bcc.n	800a71e <quorem+0x106>
 800a708:	613c      	str	r4, [r7, #16]
 800a70a:	4630      	mov	r0, r6
 800a70c:	b003      	add	sp, #12
 800a70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a712:	6812      	ldr	r2, [r2, #0]
 800a714:	3b04      	subs	r3, #4
 800a716:	2a00      	cmp	r2, #0
 800a718:	d1cc      	bne.n	800a6b4 <quorem+0x9c>
 800a71a:	3c01      	subs	r4, #1
 800a71c:	e7c7      	b.n	800a6ae <quorem+0x96>
 800a71e:	6812      	ldr	r2, [r2, #0]
 800a720:	3b04      	subs	r3, #4
 800a722:	2a00      	cmp	r2, #0
 800a724:	d1f0      	bne.n	800a708 <quorem+0xf0>
 800a726:	3c01      	subs	r4, #1
 800a728:	e7eb      	b.n	800a702 <quorem+0xea>
 800a72a:	2000      	movs	r0, #0
 800a72c:	e7ee      	b.n	800a70c <quorem+0xf4>
	...

0800a730 <_dtoa_r>:
 800a730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a734:	ed2d 8b04 	vpush	{d8-d9}
 800a738:	ec57 6b10 	vmov	r6, r7, d0
 800a73c:	b093      	sub	sp, #76	; 0x4c
 800a73e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a740:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a744:	9106      	str	r1, [sp, #24]
 800a746:	ee10 aa10 	vmov	sl, s0
 800a74a:	4604      	mov	r4, r0
 800a74c:	9209      	str	r2, [sp, #36]	; 0x24
 800a74e:	930c      	str	r3, [sp, #48]	; 0x30
 800a750:	46bb      	mov	fp, r7
 800a752:	b975      	cbnz	r5, 800a772 <_dtoa_r+0x42>
 800a754:	2010      	movs	r0, #16
 800a756:	f000 fffd 	bl	800b754 <malloc>
 800a75a:	4602      	mov	r2, r0
 800a75c:	6260      	str	r0, [r4, #36]	; 0x24
 800a75e:	b920      	cbnz	r0, 800a76a <_dtoa_r+0x3a>
 800a760:	4ba7      	ldr	r3, [pc, #668]	; (800aa00 <_dtoa_r+0x2d0>)
 800a762:	21ea      	movs	r1, #234	; 0xea
 800a764:	48a7      	ldr	r0, [pc, #668]	; (800aa04 <_dtoa_r+0x2d4>)
 800a766:	f001 fe45 	bl	800c3f4 <__assert_func>
 800a76a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a76e:	6005      	str	r5, [r0, #0]
 800a770:	60c5      	str	r5, [r0, #12]
 800a772:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a774:	6819      	ldr	r1, [r3, #0]
 800a776:	b151      	cbz	r1, 800a78e <_dtoa_r+0x5e>
 800a778:	685a      	ldr	r2, [r3, #4]
 800a77a:	604a      	str	r2, [r1, #4]
 800a77c:	2301      	movs	r3, #1
 800a77e:	4093      	lsls	r3, r2
 800a780:	608b      	str	r3, [r1, #8]
 800a782:	4620      	mov	r0, r4
 800a784:	f001 f83c 	bl	800b800 <_Bfree>
 800a788:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a78a:	2200      	movs	r2, #0
 800a78c:	601a      	str	r2, [r3, #0]
 800a78e:	1e3b      	subs	r3, r7, #0
 800a790:	bfaa      	itet	ge
 800a792:	2300      	movge	r3, #0
 800a794:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a798:	f8c8 3000 	strge.w	r3, [r8]
 800a79c:	4b9a      	ldr	r3, [pc, #616]	; (800aa08 <_dtoa_r+0x2d8>)
 800a79e:	bfbc      	itt	lt
 800a7a0:	2201      	movlt	r2, #1
 800a7a2:	f8c8 2000 	strlt.w	r2, [r8]
 800a7a6:	ea33 030b 	bics.w	r3, r3, fp
 800a7aa:	d11b      	bne.n	800a7e4 <_dtoa_r+0xb4>
 800a7ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7ae:	f242 730f 	movw	r3, #9999	; 0x270f
 800a7b2:	6013      	str	r3, [r2, #0]
 800a7b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7b8:	4333      	orrs	r3, r6
 800a7ba:	f000 8592 	beq.w	800b2e2 <_dtoa_r+0xbb2>
 800a7be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7c0:	b963      	cbnz	r3, 800a7dc <_dtoa_r+0xac>
 800a7c2:	4b92      	ldr	r3, [pc, #584]	; (800aa0c <_dtoa_r+0x2dc>)
 800a7c4:	e022      	b.n	800a80c <_dtoa_r+0xdc>
 800a7c6:	4b92      	ldr	r3, [pc, #584]	; (800aa10 <_dtoa_r+0x2e0>)
 800a7c8:	9301      	str	r3, [sp, #4]
 800a7ca:	3308      	adds	r3, #8
 800a7cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a7ce:	6013      	str	r3, [r2, #0]
 800a7d0:	9801      	ldr	r0, [sp, #4]
 800a7d2:	b013      	add	sp, #76	; 0x4c
 800a7d4:	ecbd 8b04 	vpop	{d8-d9}
 800a7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7dc:	4b8b      	ldr	r3, [pc, #556]	; (800aa0c <_dtoa_r+0x2dc>)
 800a7de:	9301      	str	r3, [sp, #4]
 800a7e0:	3303      	adds	r3, #3
 800a7e2:	e7f3      	b.n	800a7cc <_dtoa_r+0x9c>
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	4650      	mov	r0, sl
 800a7ea:	4659      	mov	r1, fp
 800a7ec:	f7f6 f96c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7f0:	ec4b ab19 	vmov	d9, sl, fp
 800a7f4:	4680      	mov	r8, r0
 800a7f6:	b158      	cbz	r0, 800a810 <_dtoa_r+0xe0>
 800a7f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	6013      	str	r3, [r2, #0]
 800a7fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a800:	2b00      	cmp	r3, #0
 800a802:	f000 856b 	beq.w	800b2dc <_dtoa_r+0xbac>
 800a806:	4883      	ldr	r0, [pc, #524]	; (800aa14 <_dtoa_r+0x2e4>)
 800a808:	6018      	str	r0, [r3, #0]
 800a80a:	1e43      	subs	r3, r0, #1
 800a80c:	9301      	str	r3, [sp, #4]
 800a80e:	e7df      	b.n	800a7d0 <_dtoa_r+0xa0>
 800a810:	ec4b ab10 	vmov	d0, sl, fp
 800a814:	aa10      	add	r2, sp, #64	; 0x40
 800a816:	a911      	add	r1, sp, #68	; 0x44
 800a818:	4620      	mov	r0, r4
 800a81a:	f001 fad9 	bl	800bdd0 <__d2b>
 800a81e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a822:	ee08 0a10 	vmov	s16, r0
 800a826:	2d00      	cmp	r5, #0
 800a828:	f000 8084 	beq.w	800a934 <_dtoa_r+0x204>
 800a82c:	ee19 3a90 	vmov	r3, s19
 800a830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a834:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a838:	4656      	mov	r6, sl
 800a83a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a83e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a842:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a846:	4b74      	ldr	r3, [pc, #464]	; (800aa18 <_dtoa_r+0x2e8>)
 800a848:	2200      	movs	r2, #0
 800a84a:	4630      	mov	r0, r6
 800a84c:	4639      	mov	r1, r7
 800a84e:	f7f5 fd1b 	bl	8000288 <__aeabi_dsub>
 800a852:	a365      	add	r3, pc, #404	; (adr r3, 800a9e8 <_dtoa_r+0x2b8>)
 800a854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a858:	f7f5 fece 	bl	80005f8 <__aeabi_dmul>
 800a85c:	a364      	add	r3, pc, #400	; (adr r3, 800a9f0 <_dtoa_r+0x2c0>)
 800a85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a862:	f7f5 fd13 	bl	800028c <__adddf3>
 800a866:	4606      	mov	r6, r0
 800a868:	4628      	mov	r0, r5
 800a86a:	460f      	mov	r7, r1
 800a86c:	f7f5 fe5a 	bl	8000524 <__aeabi_i2d>
 800a870:	a361      	add	r3, pc, #388	; (adr r3, 800a9f8 <_dtoa_r+0x2c8>)
 800a872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a876:	f7f5 febf 	bl	80005f8 <__aeabi_dmul>
 800a87a:	4602      	mov	r2, r0
 800a87c:	460b      	mov	r3, r1
 800a87e:	4630      	mov	r0, r6
 800a880:	4639      	mov	r1, r7
 800a882:	f7f5 fd03 	bl	800028c <__adddf3>
 800a886:	4606      	mov	r6, r0
 800a888:	460f      	mov	r7, r1
 800a88a:	f7f6 f965 	bl	8000b58 <__aeabi_d2iz>
 800a88e:	2200      	movs	r2, #0
 800a890:	9000      	str	r0, [sp, #0]
 800a892:	2300      	movs	r3, #0
 800a894:	4630      	mov	r0, r6
 800a896:	4639      	mov	r1, r7
 800a898:	f7f6 f920 	bl	8000adc <__aeabi_dcmplt>
 800a89c:	b150      	cbz	r0, 800a8b4 <_dtoa_r+0x184>
 800a89e:	9800      	ldr	r0, [sp, #0]
 800a8a0:	f7f5 fe40 	bl	8000524 <__aeabi_i2d>
 800a8a4:	4632      	mov	r2, r6
 800a8a6:	463b      	mov	r3, r7
 800a8a8:	f7f6 f90e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8ac:	b910      	cbnz	r0, 800a8b4 <_dtoa_r+0x184>
 800a8ae:	9b00      	ldr	r3, [sp, #0]
 800a8b0:	3b01      	subs	r3, #1
 800a8b2:	9300      	str	r3, [sp, #0]
 800a8b4:	9b00      	ldr	r3, [sp, #0]
 800a8b6:	2b16      	cmp	r3, #22
 800a8b8:	d85a      	bhi.n	800a970 <_dtoa_r+0x240>
 800a8ba:	9a00      	ldr	r2, [sp, #0]
 800a8bc:	4b57      	ldr	r3, [pc, #348]	; (800aa1c <_dtoa_r+0x2ec>)
 800a8be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c6:	ec51 0b19 	vmov	r0, r1, d9
 800a8ca:	f7f6 f907 	bl	8000adc <__aeabi_dcmplt>
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d050      	beq.n	800a974 <_dtoa_r+0x244>
 800a8d2:	9b00      	ldr	r3, [sp, #0]
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	9300      	str	r3, [sp, #0]
 800a8d8:	2300      	movs	r3, #0
 800a8da:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8de:	1b5d      	subs	r5, r3, r5
 800a8e0:	1e6b      	subs	r3, r5, #1
 800a8e2:	9305      	str	r3, [sp, #20]
 800a8e4:	bf45      	ittet	mi
 800a8e6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a8ea:	9304      	strmi	r3, [sp, #16]
 800a8ec:	2300      	movpl	r3, #0
 800a8ee:	2300      	movmi	r3, #0
 800a8f0:	bf4c      	ite	mi
 800a8f2:	9305      	strmi	r3, [sp, #20]
 800a8f4:	9304      	strpl	r3, [sp, #16]
 800a8f6:	9b00      	ldr	r3, [sp, #0]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	db3d      	blt.n	800a978 <_dtoa_r+0x248>
 800a8fc:	9b05      	ldr	r3, [sp, #20]
 800a8fe:	9a00      	ldr	r2, [sp, #0]
 800a900:	920a      	str	r2, [sp, #40]	; 0x28
 800a902:	4413      	add	r3, r2
 800a904:	9305      	str	r3, [sp, #20]
 800a906:	2300      	movs	r3, #0
 800a908:	9307      	str	r3, [sp, #28]
 800a90a:	9b06      	ldr	r3, [sp, #24]
 800a90c:	2b09      	cmp	r3, #9
 800a90e:	f200 8089 	bhi.w	800aa24 <_dtoa_r+0x2f4>
 800a912:	2b05      	cmp	r3, #5
 800a914:	bfc4      	itt	gt
 800a916:	3b04      	subgt	r3, #4
 800a918:	9306      	strgt	r3, [sp, #24]
 800a91a:	9b06      	ldr	r3, [sp, #24]
 800a91c:	f1a3 0302 	sub.w	r3, r3, #2
 800a920:	bfcc      	ite	gt
 800a922:	2500      	movgt	r5, #0
 800a924:	2501      	movle	r5, #1
 800a926:	2b03      	cmp	r3, #3
 800a928:	f200 8087 	bhi.w	800aa3a <_dtoa_r+0x30a>
 800a92c:	e8df f003 	tbb	[pc, r3]
 800a930:	59383a2d 	.word	0x59383a2d
 800a934:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a938:	441d      	add	r5, r3
 800a93a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a93e:	2b20      	cmp	r3, #32
 800a940:	bfc1      	itttt	gt
 800a942:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a946:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a94a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a94e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a952:	bfda      	itte	le
 800a954:	f1c3 0320 	rsble	r3, r3, #32
 800a958:	fa06 f003 	lslle.w	r0, r6, r3
 800a95c:	4318      	orrgt	r0, r3
 800a95e:	f7f5 fdd1 	bl	8000504 <__aeabi_ui2d>
 800a962:	2301      	movs	r3, #1
 800a964:	4606      	mov	r6, r0
 800a966:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a96a:	3d01      	subs	r5, #1
 800a96c:	930e      	str	r3, [sp, #56]	; 0x38
 800a96e:	e76a      	b.n	800a846 <_dtoa_r+0x116>
 800a970:	2301      	movs	r3, #1
 800a972:	e7b2      	b.n	800a8da <_dtoa_r+0x1aa>
 800a974:	900b      	str	r0, [sp, #44]	; 0x2c
 800a976:	e7b1      	b.n	800a8dc <_dtoa_r+0x1ac>
 800a978:	9b04      	ldr	r3, [sp, #16]
 800a97a:	9a00      	ldr	r2, [sp, #0]
 800a97c:	1a9b      	subs	r3, r3, r2
 800a97e:	9304      	str	r3, [sp, #16]
 800a980:	4253      	negs	r3, r2
 800a982:	9307      	str	r3, [sp, #28]
 800a984:	2300      	movs	r3, #0
 800a986:	930a      	str	r3, [sp, #40]	; 0x28
 800a988:	e7bf      	b.n	800a90a <_dtoa_r+0x1da>
 800a98a:	2300      	movs	r3, #0
 800a98c:	9308      	str	r3, [sp, #32]
 800a98e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a990:	2b00      	cmp	r3, #0
 800a992:	dc55      	bgt.n	800aa40 <_dtoa_r+0x310>
 800a994:	2301      	movs	r3, #1
 800a996:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a99a:	461a      	mov	r2, r3
 800a99c:	9209      	str	r2, [sp, #36]	; 0x24
 800a99e:	e00c      	b.n	800a9ba <_dtoa_r+0x28a>
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e7f3      	b.n	800a98c <_dtoa_r+0x25c>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9a8:	9308      	str	r3, [sp, #32]
 800a9aa:	9b00      	ldr	r3, [sp, #0]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	9302      	str	r3, [sp, #8]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	9303      	str	r3, [sp, #12]
 800a9b6:	bfb8      	it	lt
 800a9b8:	2301      	movlt	r3, #1
 800a9ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a9bc:	2200      	movs	r2, #0
 800a9be:	6042      	str	r2, [r0, #4]
 800a9c0:	2204      	movs	r2, #4
 800a9c2:	f102 0614 	add.w	r6, r2, #20
 800a9c6:	429e      	cmp	r6, r3
 800a9c8:	6841      	ldr	r1, [r0, #4]
 800a9ca:	d93d      	bls.n	800aa48 <_dtoa_r+0x318>
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	f000 fed7 	bl	800b780 <_Balloc>
 800a9d2:	9001      	str	r0, [sp, #4]
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	d13b      	bne.n	800aa50 <_dtoa_r+0x320>
 800a9d8:	4b11      	ldr	r3, [pc, #68]	; (800aa20 <_dtoa_r+0x2f0>)
 800a9da:	4602      	mov	r2, r0
 800a9dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a9e0:	e6c0      	b.n	800a764 <_dtoa_r+0x34>
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e7df      	b.n	800a9a6 <_dtoa_r+0x276>
 800a9e6:	bf00      	nop
 800a9e8:	636f4361 	.word	0x636f4361
 800a9ec:	3fd287a7 	.word	0x3fd287a7
 800a9f0:	8b60c8b3 	.word	0x8b60c8b3
 800a9f4:	3fc68a28 	.word	0x3fc68a28
 800a9f8:	509f79fb 	.word	0x509f79fb
 800a9fc:	3fd34413 	.word	0x3fd34413
 800aa00:	0800c6e9 	.word	0x0800c6e9
 800aa04:	0800c700 	.word	0x0800c700
 800aa08:	7ff00000 	.word	0x7ff00000
 800aa0c:	0800c6e5 	.word	0x0800c6e5
 800aa10:	0800c6dc 	.word	0x0800c6dc
 800aa14:	0800c6b9 	.word	0x0800c6b9
 800aa18:	3ff80000 	.word	0x3ff80000
 800aa1c:	0800c850 	.word	0x0800c850
 800aa20:	0800c75b 	.word	0x0800c75b
 800aa24:	2501      	movs	r5, #1
 800aa26:	2300      	movs	r3, #0
 800aa28:	9306      	str	r3, [sp, #24]
 800aa2a:	9508      	str	r5, [sp, #32]
 800aa2c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aa34:	2200      	movs	r2, #0
 800aa36:	2312      	movs	r3, #18
 800aa38:	e7b0      	b.n	800a99c <_dtoa_r+0x26c>
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	9308      	str	r3, [sp, #32]
 800aa3e:	e7f5      	b.n	800aa2c <_dtoa_r+0x2fc>
 800aa40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aa46:	e7b8      	b.n	800a9ba <_dtoa_r+0x28a>
 800aa48:	3101      	adds	r1, #1
 800aa4a:	6041      	str	r1, [r0, #4]
 800aa4c:	0052      	lsls	r2, r2, #1
 800aa4e:	e7b8      	b.n	800a9c2 <_dtoa_r+0x292>
 800aa50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa52:	9a01      	ldr	r2, [sp, #4]
 800aa54:	601a      	str	r2, [r3, #0]
 800aa56:	9b03      	ldr	r3, [sp, #12]
 800aa58:	2b0e      	cmp	r3, #14
 800aa5a:	f200 809d 	bhi.w	800ab98 <_dtoa_r+0x468>
 800aa5e:	2d00      	cmp	r5, #0
 800aa60:	f000 809a 	beq.w	800ab98 <_dtoa_r+0x468>
 800aa64:	9b00      	ldr	r3, [sp, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	dd32      	ble.n	800aad0 <_dtoa_r+0x3a0>
 800aa6a:	4ab7      	ldr	r2, [pc, #732]	; (800ad48 <_dtoa_r+0x618>)
 800aa6c:	f003 030f 	and.w	r3, r3, #15
 800aa70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aa74:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa78:	9b00      	ldr	r3, [sp, #0]
 800aa7a:	05d8      	lsls	r0, r3, #23
 800aa7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800aa80:	d516      	bpl.n	800aab0 <_dtoa_r+0x380>
 800aa82:	4bb2      	ldr	r3, [pc, #712]	; (800ad4c <_dtoa_r+0x61c>)
 800aa84:	ec51 0b19 	vmov	r0, r1, d9
 800aa88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa8c:	f7f5 fede 	bl	800084c <__aeabi_ddiv>
 800aa90:	f007 070f 	and.w	r7, r7, #15
 800aa94:	4682      	mov	sl, r0
 800aa96:	468b      	mov	fp, r1
 800aa98:	2503      	movs	r5, #3
 800aa9a:	4eac      	ldr	r6, [pc, #688]	; (800ad4c <_dtoa_r+0x61c>)
 800aa9c:	b957      	cbnz	r7, 800aab4 <_dtoa_r+0x384>
 800aa9e:	4642      	mov	r2, r8
 800aaa0:	464b      	mov	r3, r9
 800aaa2:	4650      	mov	r0, sl
 800aaa4:	4659      	mov	r1, fp
 800aaa6:	f7f5 fed1 	bl	800084c <__aeabi_ddiv>
 800aaaa:	4682      	mov	sl, r0
 800aaac:	468b      	mov	fp, r1
 800aaae:	e028      	b.n	800ab02 <_dtoa_r+0x3d2>
 800aab0:	2502      	movs	r5, #2
 800aab2:	e7f2      	b.n	800aa9a <_dtoa_r+0x36a>
 800aab4:	07f9      	lsls	r1, r7, #31
 800aab6:	d508      	bpl.n	800aaca <_dtoa_r+0x39a>
 800aab8:	4640      	mov	r0, r8
 800aaba:	4649      	mov	r1, r9
 800aabc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aac0:	f7f5 fd9a 	bl	80005f8 <__aeabi_dmul>
 800aac4:	3501      	adds	r5, #1
 800aac6:	4680      	mov	r8, r0
 800aac8:	4689      	mov	r9, r1
 800aaca:	107f      	asrs	r7, r7, #1
 800aacc:	3608      	adds	r6, #8
 800aace:	e7e5      	b.n	800aa9c <_dtoa_r+0x36c>
 800aad0:	f000 809b 	beq.w	800ac0a <_dtoa_r+0x4da>
 800aad4:	9b00      	ldr	r3, [sp, #0]
 800aad6:	4f9d      	ldr	r7, [pc, #628]	; (800ad4c <_dtoa_r+0x61c>)
 800aad8:	425e      	negs	r6, r3
 800aada:	4b9b      	ldr	r3, [pc, #620]	; (800ad48 <_dtoa_r+0x618>)
 800aadc:	f006 020f 	and.w	r2, r6, #15
 800aae0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae8:	ec51 0b19 	vmov	r0, r1, d9
 800aaec:	f7f5 fd84 	bl	80005f8 <__aeabi_dmul>
 800aaf0:	1136      	asrs	r6, r6, #4
 800aaf2:	4682      	mov	sl, r0
 800aaf4:	468b      	mov	fp, r1
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	2502      	movs	r5, #2
 800aafa:	2e00      	cmp	r6, #0
 800aafc:	d17a      	bne.n	800abf4 <_dtoa_r+0x4c4>
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1d3      	bne.n	800aaaa <_dtoa_r+0x37a>
 800ab02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f000 8082 	beq.w	800ac0e <_dtoa_r+0x4de>
 800ab0a:	4b91      	ldr	r3, [pc, #580]	; (800ad50 <_dtoa_r+0x620>)
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	4650      	mov	r0, sl
 800ab10:	4659      	mov	r1, fp
 800ab12:	f7f5 ffe3 	bl	8000adc <__aeabi_dcmplt>
 800ab16:	2800      	cmp	r0, #0
 800ab18:	d079      	beq.n	800ac0e <_dtoa_r+0x4de>
 800ab1a:	9b03      	ldr	r3, [sp, #12]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d076      	beq.n	800ac0e <_dtoa_r+0x4de>
 800ab20:	9b02      	ldr	r3, [sp, #8]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	dd36      	ble.n	800ab94 <_dtoa_r+0x464>
 800ab26:	9b00      	ldr	r3, [sp, #0]
 800ab28:	4650      	mov	r0, sl
 800ab2a:	4659      	mov	r1, fp
 800ab2c:	1e5f      	subs	r7, r3, #1
 800ab2e:	2200      	movs	r2, #0
 800ab30:	4b88      	ldr	r3, [pc, #544]	; (800ad54 <_dtoa_r+0x624>)
 800ab32:	f7f5 fd61 	bl	80005f8 <__aeabi_dmul>
 800ab36:	9e02      	ldr	r6, [sp, #8]
 800ab38:	4682      	mov	sl, r0
 800ab3a:	468b      	mov	fp, r1
 800ab3c:	3501      	adds	r5, #1
 800ab3e:	4628      	mov	r0, r5
 800ab40:	f7f5 fcf0 	bl	8000524 <__aeabi_i2d>
 800ab44:	4652      	mov	r2, sl
 800ab46:	465b      	mov	r3, fp
 800ab48:	f7f5 fd56 	bl	80005f8 <__aeabi_dmul>
 800ab4c:	4b82      	ldr	r3, [pc, #520]	; (800ad58 <_dtoa_r+0x628>)
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f7f5 fb9c 	bl	800028c <__adddf3>
 800ab54:	46d0      	mov	r8, sl
 800ab56:	46d9      	mov	r9, fp
 800ab58:	4682      	mov	sl, r0
 800ab5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ab5e:	2e00      	cmp	r6, #0
 800ab60:	d158      	bne.n	800ac14 <_dtoa_r+0x4e4>
 800ab62:	4b7e      	ldr	r3, [pc, #504]	; (800ad5c <_dtoa_r+0x62c>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	4640      	mov	r0, r8
 800ab68:	4649      	mov	r1, r9
 800ab6a:	f7f5 fb8d 	bl	8000288 <__aeabi_dsub>
 800ab6e:	4652      	mov	r2, sl
 800ab70:	465b      	mov	r3, fp
 800ab72:	4680      	mov	r8, r0
 800ab74:	4689      	mov	r9, r1
 800ab76:	f7f5 ffcf 	bl	8000b18 <__aeabi_dcmpgt>
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	f040 8295 	bne.w	800b0aa <_dtoa_r+0x97a>
 800ab80:	4652      	mov	r2, sl
 800ab82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ab86:	4640      	mov	r0, r8
 800ab88:	4649      	mov	r1, r9
 800ab8a:	f7f5 ffa7 	bl	8000adc <__aeabi_dcmplt>
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	f040 8289 	bne.w	800b0a6 <_dtoa_r+0x976>
 800ab94:	ec5b ab19 	vmov	sl, fp, d9
 800ab98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	f2c0 8148 	blt.w	800ae30 <_dtoa_r+0x700>
 800aba0:	9a00      	ldr	r2, [sp, #0]
 800aba2:	2a0e      	cmp	r2, #14
 800aba4:	f300 8144 	bgt.w	800ae30 <_dtoa_r+0x700>
 800aba8:	4b67      	ldr	r3, [pc, #412]	; (800ad48 <_dtoa_r+0x618>)
 800abaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	f280 80d5 	bge.w	800ad64 <_dtoa_r+0x634>
 800abba:	9b03      	ldr	r3, [sp, #12]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	f300 80d1 	bgt.w	800ad64 <_dtoa_r+0x634>
 800abc2:	f040 826f 	bne.w	800b0a4 <_dtoa_r+0x974>
 800abc6:	4b65      	ldr	r3, [pc, #404]	; (800ad5c <_dtoa_r+0x62c>)
 800abc8:	2200      	movs	r2, #0
 800abca:	4640      	mov	r0, r8
 800abcc:	4649      	mov	r1, r9
 800abce:	f7f5 fd13 	bl	80005f8 <__aeabi_dmul>
 800abd2:	4652      	mov	r2, sl
 800abd4:	465b      	mov	r3, fp
 800abd6:	f7f5 ff95 	bl	8000b04 <__aeabi_dcmpge>
 800abda:	9e03      	ldr	r6, [sp, #12]
 800abdc:	4637      	mov	r7, r6
 800abde:	2800      	cmp	r0, #0
 800abe0:	f040 8245 	bne.w	800b06e <_dtoa_r+0x93e>
 800abe4:	9d01      	ldr	r5, [sp, #4]
 800abe6:	2331      	movs	r3, #49	; 0x31
 800abe8:	f805 3b01 	strb.w	r3, [r5], #1
 800abec:	9b00      	ldr	r3, [sp, #0]
 800abee:	3301      	adds	r3, #1
 800abf0:	9300      	str	r3, [sp, #0]
 800abf2:	e240      	b.n	800b076 <_dtoa_r+0x946>
 800abf4:	07f2      	lsls	r2, r6, #31
 800abf6:	d505      	bpl.n	800ac04 <_dtoa_r+0x4d4>
 800abf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abfc:	f7f5 fcfc 	bl	80005f8 <__aeabi_dmul>
 800ac00:	3501      	adds	r5, #1
 800ac02:	2301      	movs	r3, #1
 800ac04:	1076      	asrs	r6, r6, #1
 800ac06:	3708      	adds	r7, #8
 800ac08:	e777      	b.n	800aafa <_dtoa_r+0x3ca>
 800ac0a:	2502      	movs	r5, #2
 800ac0c:	e779      	b.n	800ab02 <_dtoa_r+0x3d2>
 800ac0e:	9f00      	ldr	r7, [sp, #0]
 800ac10:	9e03      	ldr	r6, [sp, #12]
 800ac12:	e794      	b.n	800ab3e <_dtoa_r+0x40e>
 800ac14:	9901      	ldr	r1, [sp, #4]
 800ac16:	4b4c      	ldr	r3, [pc, #304]	; (800ad48 <_dtoa_r+0x618>)
 800ac18:	4431      	add	r1, r6
 800ac1a:	910d      	str	r1, [sp, #52]	; 0x34
 800ac1c:	9908      	ldr	r1, [sp, #32]
 800ac1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ac22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac26:	2900      	cmp	r1, #0
 800ac28:	d043      	beq.n	800acb2 <_dtoa_r+0x582>
 800ac2a:	494d      	ldr	r1, [pc, #308]	; (800ad60 <_dtoa_r+0x630>)
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	f7f5 fe0d 	bl	800084c <__aeabi_ddiv>
 800ac32:	4652      	mov	r2, sl
 800ac34:	465b      	mov	r3, fp
 800ac36:	f7f5 fb27 	bl	8000288 <__aeabi_dsub>
 800ac3a:	9d01      	ldr	r5, [sp, #4]
 800ac3c:	4682      	mov	sl, r0
 800ac3e:	468b      	mov	fp, r1
 800ac40:	4649      	mov	r1, r9
 800ac42:	4640      	mov	r0, r8
 800ac44:	f7f5 ff88 	bl	8000b58 <__aeabi_d2iz>
 800ac48:	4606      	mov	r6, r0
 800ac4a:	f7f5 fc6b 	bl	8000524 <__aeabi_i2d>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
 800ac52:	4640      	mov	r0, r8
 800ac54:	4649      	mov	r1, r9
 800ac56:	f7f5 fb17 	bl	8000288 <__aeabi_dsub>
 800ac5a:	3630      	adds	r6, #48	; 0x30
 800ac5c:	f805 6b01 	strb.w	r6, [r5], #1
 800ac60:	4652      	mov	r2, sl
 800ac62:	465b      	mov	r3, fp
 800ac64:	4680      	mov	r8, r0
 800ac66:	4689      	mov	r9, r1
 800ac68:	f7f5 ff38 	bl	8000adc <__aeabi_dcmplt>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	d163      	bne.n	800ad38 <_dtoa_r+0x608>
 800ac70:	4642      	mov	r2, r8
 800ac72:	464b      	mov	r3, r9
 800ac74:	4936      	ldr	r1, [pc, #216]	; (800ad50 <_dtoa_r+0x620>)
 800ac76:	2000      	movs	r0, #0
 800ac78:	f7f5 fb06 	bl	8000288 <__aeabi_dsub>
 800ac7c:	4652      	mov	r2, sl
 800ac7e:	465b      	mov	r3, fp
 800ac80:	f7f5 ff2c 	bl	8000adc <__aeabi_dcmplt>
 800ac84:	2800      	cmp	r0, #0
 800ac86:	f040 80b5 	bne.w	800adf4 <_dtoa_r+0x6c4>
 800ac8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac8c:	429d      	cmp	r5, r3
 800ac8e:	d081      	beq.n	800ab94 <_dtoa_r+0x464>
 800ac90:	4b30      	ldr	r3, [pc, #192]	; (800ad54 <_dtoa_r+0x624>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	4650      	mov	r0, sl
 800ac96:	4659      	mov	r1, fp
 800ac98:	f7f5 fcae 	bl	80005f8 <__aeabi_dmul>
 800ac9c:	4b2d      	ldr	r3, [pc, #180]	; (800ad54 <_dtoa_r+0x624>)
 800ac9e:	4682      	mov	sl, r0
 800aca0:	468b      	mov	fp, r1
 800aca2:	4640      	mov	r0, r8
 800aca4:	4649      	mov	r1, r9
 800aca6:	2200      	movs	r2, #0
 800aca8:	f7f5 fca6 	bl	80005f8 <__aeabi_dmul>
 800acac:	4680      	mov	r8, r0
 800acae:	4689      	mov	r9, r1
 800acb0:	e7c6      	b.n	800ac40 <_dtoa_r+0x510>
 800acb2:	4650      	mov	r0, sl
 800acb4:	4659      	mov	r1, fp
 800acb6:	f7f5 fc9f 	bl	80005f8 <__aeabi_dmul>
 800acba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acbc:	9d01      	ldr	r5, [sp, #4]
 800acbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800acc0:	4682      	mov	sl, r0
 800acc2:	468b      	mov	fp, r1
 800acc4:	4649      	mov	r1, r9
 800acc6:	4640      	mov	r0, r8
 800acc8:	f7f5 ff46 	bl	8000b58 <__aeabi_d2iz>
 800accc:	4606      	mov	r6, r0
 800acce:	f7f5 fc29 	bl	8000524 <__aeabi_i2d>
 800acd2:	3630      	adds	r6, #48	; 0x30
 800acd4:	4602      	mov	r2, r0
 800acd6:	460b      	mov	r3, r1
 800acd8:	4640      	mov	r0, r8
 800acda:	4649      	mov	r1, r9
 800acdc:	f7f5 fad4 	bl	8000288 <__aeabi_dsub>
 800ace0:	f805 6b01 	strb.w	r6, [r5], #1
 800ace4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ace6:	429d      	cmp	r5, r3
 800ace8:	4680      	mov	r8, r0
 800acea:	4689      	mov	r9, r1
 800acec:	f04f 0200 	mov.w	r2, #0
 800acf0:	d124      	bne.n	800ad3c <_dtoa_r+0x60c>
 800acf2:	4b1b      	ldr	r3, [pc, #108]	; (800ad60 <_dtoa_r+0x630>)
 800acf4:	4650      	mov	r0, sl
 800acf6:	4659      	mov	r1, fp
 800acf8:	f7f5 fac8 	bl	800028c <__adddf3>
 800acfc:	4602      	mov	r2, r0
 800acfe:	460b      	mov	r3, r1
 800ad00:	4640      	mov	r0, r8
 800ad02:	4649      	mov	r1, r9
 800ad04:	f7f5 ff08 	bl	8000b18 <__aeabi_dcmpgt>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	d173      	bne.n	800adf4 <_dtoa_r+0x6c4>
 800ad0c:	4652      	mov	r2, sl
 800ad0e:	465b      	mov	r3, fp
 800ad10:	4913      	ldr	r1, [pc, #76]	; (800ad60 <_dtoa_r+0x630>)
 800ad12:	2000      	movs	r0, #0
 800ad14:	f7f5 fab8 	bl	8000288 <__aeabi_dsub>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	4640      	mov	r0, r8
 800ad1e:	4649      	mov	r1, r9
 800ad20:	f7f5 fedc 	bl	8000adc <__aeabi_dcmplt>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	f43f af35 	beq.w	800ab94 <_dtoa_r+0x464>
 800ad2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ad2c:	1e6b      	subs	r3, r5, #1
 800ad2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad34:	2b30      	cmp	r3, #48	; 0x30
 800ad36:	d0f8      	beq.n	800ad2a <_dtoa_r+0x5fa>
 800ad38:	9700      	str	r7, [sp, #0]
 800ad3a:	e049      	b.n	800add0 <_dtoa_r+0x6a0>
 800ad3c:	4b05      	ldr	r3, [pc, #20]	; (800ad54 <_dtoa_r+0x624>)
 800ad3e:	f7f5 fc5b 	bl	80005f8 <__aeabi_dmul>
 800ad42:	4680      	mov	r8, r0
 800ad44:	4689      	mov	r9, r1
 800ad46:	e7bd      	b.n	800acc4 <_dtoa_r+0x594>
 800ad48:	0800c850 	.word	0x0800c850
 800ad4c:	0800c828 	.word	0x0800c828
 800ad50:	3ff00000 	.word	0x3ff00000
 800ad54:	40240000 	.word	0x40240000
 800ad58:	401c0000 	.word	0x401c0000
 800ad5c:	40140000 	.word	0x40140000
 800ad60:	3fe00000 	.word	0x3fe00000
 800ad64:	9d01      	ldr	r5, [sp, #4]
 800ad66:	4656      	mov	r6, sl
 800ad68:	465f      	mov	r7, fp
 800ad6a:	4642      	mov	r2, r8
 800ad6c:	464b      	mov	r3, r9
 800ad6e:	4630      	mov	r0, r6
 800ad70:	4639      	mov	r1, r7
 800ad72:	f7f5 fd6b 	bl	800084c <__aeabi_ddiv>
 800ad76:	f7f5 feef 	bl	8000b58 <__aeabi_d2iz>
 800ad7a:	4682      	mov	sl, r0
 800ad7c:	f7f5 fbd2 	bl	8000524 <__aeabi_i2d>
 800ad80:	4642      	mov	r2, r8
 800ad82:	464b      	mov	r3, r9
 800ad84:	f7f5 fc38 	bl	80005f8 <__aeabi_dmul>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	4639      	mov	r1, r7
 800ad90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ad94:	f7f5 fa78 	bl	8000288 <__aeabi_dsub>
 800ad98:	f805 6b01 	strb.w	r6, [r5], #1
 800ad9c:	9e01      	ldr	r6, [sp, #4]
 800ad9e:	9f03      	ldr	r7, [sp, #12]
 800ada0:	1bae      	subs	r6, r5, r6
 800ada2:	42b7      	cmp	r7, r6
 800ada4:	4602      	mov	r2, r0
 800ada6:	460b      	mov	r3, r1
 800ada8:	d135      	bne.n	800ae16 <_dtoa_r+0x6e6>
 800adaa:	f7f5 fa6f 	bl	800028c <__adddf3>
 800adae:	4642      	mov	r2, r8
 800adb0:	464b      	mov	r3, r9
 800adb2:	4606      	mov	r6, r0
 800adb4:	460f      	mov	r7, r1
 800adb6:	f7f5 feaf 	bl	8000b18 <__aeabi_dcmpgt>
 800adba:	b9d0      	cbnz	r0, 800adf2 <_dtoa_r+0x6c2>
 800adbc:	4642      	mov	r2, r8
 800adbe:	464b      	mov	r3, r9
 800adc0:	4630      	mov	r0, r6
 800adc2:	4639      	mov	r1, r7
 800adc4:	f7f5 fe80 	bl	8000ac8 <__aeabi_dcmpeq>
 800adc8:	b110      	cbz	r0, 800add0 <_dtoa_r+0x6a0>
 800adca:	f01a 0f01 	tst.w	sl, #1
 800adce:	d110      	bne.n	800adf2 <_dtoa_r+0x6c2>
 800add0:	4620      	mov	r0, r4
 800add2:	ee18 1a10 	vmov	r1, s16
 800add6:	f000 fd13 	bl	800b800 <_Bfree>
 800adda:	2300      	movs	r3, #0
 800addc:	9800      	ldr	r0, [sp, #0]
 800adde:	702b      	strb	r3, [r5, #0]
 800ade0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ade2:	3001      	adds	r0, #1
 800ade4:	6018      	str	r0, [r3, #0]
 800ade6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ade8:	2b00      	cmp	r3, #0
 800adea:	f43f acf1 	beq.w	800a7d0 <_dtoa_r+0xa0>
 800adee:	601d      	str	r5, [r3, #0]
 800adf0:	e4ee      	b.n	800a7d0 <_dtoa_r+0xa0>
 800adf2:	9f00      	ldr	r7, [sp, #0]
 800adf4:	462b      	mov	r3, r5
 800adf6:	461d      	mov	r5, r3
 800adf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adfc:	2a39      	cmp	r2, #57	; 0x39
 800adfe:	d106      	bne.n	800ae0e <_dtoa_r+0x6de>
 800ae00:	9a01      	ldr	r2, [sp, #4]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d1f7      	bne.n	800adf6 <_dtoa_r+0x6c6>
 800ae06:	9901      	ldr	r1, [sp, #4]
 800ae08:	2230      	movs	r2, #48	; 0x30
 800ae0a:	3701      	adds	r7, #1
 800ae0c:	700a      	strb	r2, [r1, #0]
 800ae0e:	781a      	ldrb	r2, [r3, #0]
 800ae10:	3201      	adds	r2, #1
 800ae12:	701a      	strb	r2, [r3, #0]
 800ae14:	e790      	b.n	800ad38 <_dtoa_r+0x608>
 800ae16:	4ba6      	ldr	r3, [pc, #664]	; (800b0b0 <_dtoa_r+0x980>)
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f7f5 fbed 	bl	80005f8 <__aeabi_dmul>
 800ae1e:	2200      	movs	r2, #0
 800ae20:	2300      	movs	r3, #0
 800ae22:	4606      	mov	r6, r0
 800ae24:	460f      	mov	r7, r1
 800ae26:	f7f5 fe4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae2a:	2800      	cmp	r0, #0
 800ae2c:	d09d      	beq.n	800ad6a <_dtoa_r+0x63a>
 800ae2e:	e7cf      	b.n	800add0 <_dtoa_r+0x6a0>
 800ae30:	9a08      	ldr	r2, [sp, #32]
 800ae32:	2a00      	cmp	r2, #0
 800ae34:	f000 80d7 	beq.w	800afe6 <_dtoa_r+0x8b6>
 800ae38:	9a06      	ldr	r2, [sp, #24]
 800ae3a:	2a01      	cmp	r2, #1
 800ae3c:	f300 80ba 	bgt.w	800afb4 <_dtoa_r+0x884>
 800ae40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae42:	2a00      	cmp	r2, #0
 800ae44:	f000 80b2 	beq.w	800afac <_dtoa_r+0x87c>
 800ae48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae4c:	9e07      	ldr	r6, [sp, #28]
 800ae4e:	9d04      	ldr	r5, [sp, #16]
 800ae50:	9a04      	ldr	r2, [sp, #16]
 800ae52:	441a      	add	r2, r3
 800ae54:	9204      	str	r2, [sp, #16]
 800ae56:	9a05      	ldr	r2, [sp, #20]
 800ae58:	2101      	movs	r1, #1
 800ae5a:	441a      	add	r2, r3
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	9205      	str	r2, [sp, #20]
 800ae60:	f000 fd86 	bl	800b970 <__i2b>
 800ae64:	4607      	mov	r7, r0
 800ae66:	2d00      	cmp	r5, #0
 800ae68:	dd0c      	ble.n	800ae84 <_dtoa_r+0x754>
 800ae6a:	9b05      	ldr	r3, [sp, #20]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	dd09      	ble.n	800ae84 <_dtoa_r+0x754>
 800ae70:	42ab      	cmp	r3, r5
 800ae72:	9a04      	ldr	r2, [sp, #16]
 800ae74:	bfa8      	it	ge
 800ae76:	462b      	movge	r3, r5
 800ae78:	1ad2      	subs	r2, r2, r3
 800ae7a:	9204      	str	r2, [sp, #16]
 800ae7c:	9a05      	ldr	r2, [sp, #20]
 800ae7e:	1aed      	subs	r5, r5, r3
 800ae80:	1ad3      	subs	r3, r2, r3
 800ae82:	9305      	str	r3, [sp, #20]
 800ae84:	9b07      	ldr	r3, [sp, #28]
 800ae86:	b31b      	cbz	r3, 800aed0 <_dtoa_r+0x7a0>
 800ae88:	9b08      	ldr	r3, [sp, #32]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f000 80af 	beq.w	800afee <_dtoa_r+0x8be>
 800ae90:	2e00      	cmp	r6, #0
 800ae92:	dd13      	ble.n	800aebc <_dtoa_r+0x78c>
 800ae94:	4639      	mov	r1, r7
 800ae96:	4632      	mov	r2, r6
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f000 fe29 	bl	800baf0 <__pow5mult>
 800ae9e:	ee18 2a10 	vmov	r2, s16
 800aea2:	4601      	mov	r1, r0
 800aea4:	4607      	mov	r7, r0
 800aea6:	4620      	mov	r0, r4
 800aea8:	f000 fd78 	bl	800b99c <__multiply>
 800aeac:	ee18 1a10 	vmov	r1, s16
 800aeb0:	4680      	mov	r8, r0
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f000 fca4 	bl	800b800 <_Bfree>
 800aeb8:	ee08 8a10 	vmov	s16, r8
 800aebc:	9b07      	ldr	r3, [sp, #28]
 800aebe:	1b9a      	subs	r2, r3, r6
 800aec0:	d006      	beq.n	800aed0 <_dtoa_r+0x7a0>
 800aec2:	ee18 1a10 	vmov	r1, s16
 800aec6:	4620      	mov	r0, r4
 800aec8:	f000 fe12 	bl	800baf0 <__pow5mult>
 800aecc:	ee08 0a10 	vmov	s16, r0
 800aed0:	2101      	movs	r1, #1
 800aed2:	4620      	mov	r0, r4
 800aed4:	f000 fd4c 	bl	800b970 <__i2b>
 800aed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	4606      	mov	r6, r0
 800aede:	f340 8088 	ble.w	800aff2 <_dtoa_r+0x8c2>
 800aee2:	461a      	mov	r2, r3
 800aee4:	4601      	mov	r1, r0
 800aee6:	4620      	mov	r0, r4
 800aee8:	f000 fe02 	bl	800baf0 <__pow5mult>
 800aeec:	9b06      	ldr	r3, [sp, #24]
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	4606      	mov	r6, r0
 800aef2:	f340 8081 	ble.w	800aff8 <_dtoa_r+0x8c8>
 800aef6:	f04f 0800 	mov.w	r8, #0
 800aefa:	6933      	ldr	r3, [r6, #16]
 800aefc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800af00:	6918      	ldr	r0, [r3, #16]
 800af02:	f000 fce5 	bl	800b8d0 <__hi0bits>
 800af06:	f1c0 0020 	rsb	r0, r0, #32
 800af0a:	9b05      	ldr	r3, [sp, #20]
 800af0c:	4418      	add	r0, r3
 800af0e:	f010 001f 	ands.w	r0, r0, #31
 800af12:	f000 8092 	beq.w	800b03a <_dtoa_r+0x90a>
 800af16:	f1c0 0320 	rsb	r3, r0, #32
 800af1a:	2b04      	cmp	r3, #4
 800af1c:	f340 808a 	ble.w	800b034 <_dtoa_r+0x904>
 800af20:	f1c0 001c 	rsb	r0, r0, #28
 800af24:	9b04      	ldr	r3, [sp, #16]
 800af26:	4403      	add	r3, r0
 800af28:	9304      	str	r3, [sp, #16]
 800af2a:	9b05      	ldr	r3, [sp, #20]
 800af2c:	4403      	add	r3, r0
 800af2e:	4405      	add	r5, r0
 800af30:	9305      	str	r3, [sp, #20]
 800af32:	9b04      	ldr	r3, [sp, #16]
 800af34:	2b00      	cmp	r3, #0
 800af36:	dd07      	ble.n	800af48 <_dtoa_r+0x818>
 800af38:	ee18 1a10 	vmov	r1, s16
 800af3c:	461a      	mov	r2, r3
 800af3e:	4620      	mov	r0, r4
 800af40:	f000 fe30 	bl	800bba4 <__lshift>
 800af44:	ee08 0a10 	vmov	s16, r0
 800af48:	9b05      	ldr	r3, [sp, #20]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	dd05      	ble.n	800af5a <_dtoa_r+0x82a>
 800af4e:	4631      	mov	r1, r6
 800af50:	461a      	mov	r2, r3
 800af52:	4620      	mov	r0, r4
 800af54:	f000 fe26 	bl	800bba4 <__lshift>
 800af58:	4606      	mov	r6, r0
 800af5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d06e      	beq.n	800b03e <_dtoa_r+0x90e>
 800af60:	ee18 0a10 	vmov	r0, s16
 800af64:	4631      	mov	r1, r6
 800af66:	f000 fe8d 	bl	800bc84 <__mcmp>
 800af6a:	2800      	cmp	r0, #0
 800af6c:	da67      	bge.n	800b03e <_dtoa_r+0x90e>
 800af6e:	9b00      	ldr	r3, [sp, #0]
 800af70:	3b01      	subs	r3, #1
 800af72:	ee18 1a10 	vmov	r1, s16
 800af76:	9300      	str	r3, [sp, #0]
 800af78:	220a      	movs	r2, #10
 800af7a:	2300      	movs	r3, #0
 800af7c:	4620      	mov	r0, r4
 800af7e:	f000 fc61 	bl	800b844 <__multadd>
 800af82:	9b08      	ldr	r3, [sp, #32]
 800af84:	ee08 0a10 	vmov	s16, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f000 81b1 	beq.w	800b2f0 <_dtoa_r+0xbc0>
 800af8e:	2300      	movs	r3, #0
 800af90:	4639      	mov	r1, r7
 800af92:	220a      	movs	r2, #10
 800af94:	4620      	mov	r0, r4
 800af96:	f000 fc55 	bl	800b844 <__multadd>
 800af9a:	9b02      	ldr	r3, [sp, #8]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	4607      	mov	r7, r0
 800afa0:	f300 808e 	bgt.w	800b0c0 <_dtoa_r+0x990>
 800afa4:	9b06      	ldr	r3, [sp, #24]
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	dc51      	bgt.n	800b04e <_dtoa_r+0x91e>
 800afaa:	e089      	b.n	800b0c0 <_dtoa_r+0x990>
 800afac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800afae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800afb2:	e74b      	b.n	800ae4c <_dtoa_r+0x71c>
 800afb4:	9b03      	ldr	r3, [sp, #12]
 800afb6:	1e5e      	subs	r6, r3, #1
 800afb8:	9b07      	ldr	r3, [sp, #28]
 800afba:	42b3      	cmp	r3, r6
 800afbc:	bfbf      	itttt	lt
 800afbe:	9b07      	ldrlt	r3, [sp, #28]
 800afc0:	9607      	strlt	r6, [sp, #28]
 800afc2:	1af2      	sublt	r2, r6, r3
 800afc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800afc6:	bfb6      	itet	lt
 800afc8:	189b      	addlt	r3, r3, r2
 800afca:	1b9e      	subge	r6, r3, r6
 800afcc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800afce:	9b03      	ldr	r3, [sp, #12]
 800afd0:	bfb8      	it	lt
 800afd2:	2600      	movlt	r6, #0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	bfb7      	itett	lt
 800afd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800afdc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800afe0:	1a9d      	sublt	r5, r3, r2
 800afe2:	2300      	movlt	r3, #0
 800afe4:	e734      	b.n	800ae50 <_dtoa_r+0x720>
 800afe6:	9e07      	ldr	r6, [sp, #28]
 800afe8:	9d04      	ldr	r5, [sp, #16]
 800afea:	9f08      	ldr	r7, [sp, #32]
 800afec:	e73b      	b.n	800ae66 <_dtoa_r+0x736>
 800afee:	9a07      	ldr	r2, [sp, #28]
 800aff0:	e767      	b.n	800aec2 <_dtoa_r+0x792>
 800aff2:	9b06      	ldr	r3, [sp, #24]
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	dc18      	bgt.n	800b02a <_dtoa_r+0x8fa>
 800aff8:	f1ba 0f00 	cmp.w	sl, #0
 800affc:	d115      	bne.n	800b02a <_dtoa_r+0x8fa>
 800affe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b002:	b993      	cbnz	r3, 800b02a <_dtoa_r+0x8fa>
 800b004:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b008:	0d1b      	lsrs	r3, r3, #20
 800b00a:	051b      	lsls	r3, r3, #20
 800b00c:	b183      	cbz	r3, 800b030 <_dtoa_r+0x900>
 800b00e:	9b04      	ldr	r3, [sp, #16]
 800b010:	3301      	adds	r3, #1
 800b012:	9304      	str	r3, [sp, #16]
 800b014:	9b05      	ldr	r3, [sp, #20]
 800b016:	3301      	adds	r3, #1
 800b018:	9305      	str	r3, [sp, #20]
 800b01a:	f04f 0801 	mov.w	r8, #1
 800b01e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b020:	2b00      	cmp	r3, #0
 800b022:	f47f af6a 	bne.w	800aefa <_dtoa_r+0x7ca>
 800b026:	2001      	movs	r0, #1
 800b028:	e76f      	b.n	800af0a <_dtoa_r+0x7da>
 800b02a:	f04f 0800 	mov.w	r8, #0
 800b02e:	e7f6      	b.n	800b01e <_dtoa_r+0x8ee>
 800b030:	4698      	mov	r8, r3
 800b032:	e7f4      	b.n	800b01e <_dtoa_r+0x8ee>
 800b034:	f43f af7d 	beq.w	800af32 <_dtoa_r+0x802>
 800b038:	4618      	mov	r0, r3
 800b03a:	301c      	adds	r0, #28
 800b03c:	e772      	b.n	800af24 <_dtoa_r+0x7f4>
 800b03e:	9b03      	ldr	r3, [sp, #12]
 800b040:	2b00      	cmp	r3, #0
 800b042:	dc37      	bgt.n	800b0b4 <_dtoa_r+0x984>
 800b044:	9b06      	ldr	r3, [sp, #24]
 800b046:	2b02      	cmp	r3, #2
 800b048:	dd34      	ble.n	800b0b4 <_dtoa_r+0x984>
 800b04a:	9b03      	ldr	r3, [sp, #12]
 800b04c:	9302      	str	r3, [sp, #8]
 800b04e:	9b02      	ldr	r3, [sp, #8]
 800b050:	b96b      	cbnz	r3, 800b06e <_dtoa_r+0x93e>
 800b052:	4631      	mov	r1, r6
 800b054:	2205      	movs	r2, #5
 800b056:	4620      	mov	r0, r4
 800b058:	f000 fbf4 	bl	800b844 <__multadd>
 800b05c:	4601      	mov	r1, r0
 800b05e:	4606      	mov	r6, r0
 800b060:	ee18 0a10 	vmov	r0, s16
 800b064:	f000 fe0e 	bl	800bc84 <__mcmp>
 800b068:	2800      	cmp	r0, #0
 800b06a:	f73f adbb 	bgt.w	800abe4 <_dtoa_r+0x4b4>
 800b06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b070:	9d01      	ldr	r5, [sp, #4]
 800b072:	43db      	mvns	r3, r3
 800b074:	9300      	str	r3, [sp, #0]
 800b076:	f04f 0800 	mov.w	r8, #0
 800b07a:	4631      	mov	r1, r6
 800b07c:	4620      	mov	r0, r4
 800b07e:	f000 fbbf 	bl	800b800 <_Bfree>
 800b082:	2f00      	cmp	r7, #0
 800b084:	f43f aea4 	beq.w	800add0 <_dtoa_r+0x6a0>
 800b088:	f1b8 0f00 	cmp.w	r8, #0
 800b08c:	d005      	beq.n	800b09a <_dtoa_r+0x96a>
 800b08e:	45b8      	cmp	r8, r7
 800b090:	d003      	beq.n	800b09a <_dtoa_r+0x96a>
 800b092:	4641      	mov	r1, r8
 800b094:	4620      	mov	r0, r4
 800b096:	f000 fbb3 	bl	800b800 <_Bfree>
 800b09a:	4639      	mov	r1, r7
 800b09c:	4620      	mov	r0, r4
 800b09e:	f000 fbaf 	bl	800b800 <_Bfree>
 800b0a2:	e695      	b.n	800add0 <_dtoa_r+0x6a0>
 800b0a4:	2600      	movs	r6, #0
 800b0a6:	4637      	mov	r7, r6
 800b0a8:	e7e1      	b.n	800b06e <_dtoa_r+0x93e>
 800b0aa:	9700      	str	r7, [sp, #0]
 800b0ac:	4637      	mov	r7, r6
 800b0ae:	e599      	b.n	800abe4 <_dtoa_r+0x4b4>
 800b0b0:	40240000 	.word	0x40240000
 800b0b4:	9b08      	ldr	r3, [sp, #32]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	f000 80ca 	beq.w	800b250 <_dtoa_r+0xb20>
 800b0bc:	9b03      	ldr	r3, [sp, #12]
 800b0be:	9302      	str	r3, [sp, #8]
 800b0c0:	2d00      	cmp	r5, #0
 800b0c2:	dd05      	ble.n	800b0d0 <_dtoa_r+0x9a0>
 800b0c4:	4639      	mov	r1, r7
 800b0c6:	462a      	mov	r2, r5
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	f000 fd6b 	bl	800bba4 <__lshift>
 800b0ce:	4607      	mov	r7, r0
 800b0d0:	f1b8 0f00 	cmp.w	r8, #0
 800b0d4:	d05b      	beq.n	800b18e <_dtoa_r+0xa5e>
 800b0d6:	6879      	ldr	r1, [r7, #4]
 800b0d8:	4620      	mov	r0, r4
 800b0da:	f000 fb51 	bl	800b780 <_Balloc>
 800b0de:	4605      	mov	r5, r0
 800b0e0:	b928      	cbnz	r0, 800b0ee <_dtoa_r+0x9be>
 800b0e2:	4b87      	ldr	r3, [pc, #540]	; (800b300 <_dtoa_r+0xbd0>)
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b0ea:	f7ff bb3b 	b.w	800a764 <_dtoa_r+0x34>
 800b0ee:	693a      	ldr	r2, [r7, #16]
 800b0f0:	3202      	adds	r2, #2
 800b0f2:	0092      	lsls	r2, r2, #2
 800b0f4:	f107 010c 	add.w	r1, r7, #12
 800b0f8:	300c      	adds	r0, #12
 800b0fa:	f000 fb33 	bl	800b764 <memcpy>
 800b0fe:	2201      	movs	r2, #1
 800b100:	4629      	mov	r1, r5
 800b102:	4620      	mov	r0, r4
 800b104:	f000 fd4e 	bl	800bba4 <__lshift>
 800b108:	9b01      	ldr	r3, [sp, #4]
 800b10a:	f103 0901 	add.w	r9, r3, #1
 800b10e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b112:	4413      	add	r3, r2
 800b114:	9305      	str	r3, [sp, #20]
 800b116:	f00a 0301 	and.w	r3, sl, #1
 800b11a:	46b8      	mov	r8, r7
 800b11c:	9304      	str	r3, [sp, #16]
 800b11e:	4607      	mov	r7, r0
 800b120:	4631      	mov	r1, r6
 800b122:	ee18 0a10 	vmov	r0, s16
 800b126:	f7ff fa77 	bl	800a618 <quorem>
 800b12a:	4641      	mov	r1, r8
 800b12c:	9002      	str	r0, [sp, #8]
 800b12e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b132:	ee18 0a10 	vmov	r0, s16
 800b136:	f000 fda5 	bl	800bc84 <__mcmp>
 800b13a:	463a      	mov	r2, r7
 800b13c:	9003      	str	r0, [sp, #12]
 800b13e:	4631      	mov	r1, r6
 800b140:	4620      	mov	r0, r4
 800b142:	f000 fdbb 	bl	800bcbc <__mdiff>
 800b146:	68c2      	ldr	r2, [r0, #12]
 800b148:	f109 3bff 	add.w	fp, r9, #4294967295
 800b14c:	4605      	mov	r5, r0
 800b14e:	bb02      	cbnz	r2, 800b192 <_dtoa_r+0xa62>
 800b150:	4601      	mov	r1, r0
 800b152:	ee18 0a10 	vmov	r0, s16
 800b156:	f000 fd95 	bl	800bc84 <__mcmp>
 800b15a:	4602      	mov	r2, r0
 800b15c:	4629      	mov	r1, r5
 800b15e:	4620      	mov	r0, r4
 800b160:	9207      	str	r2, [sp, #28]
 800b162:	f000 fb4d 	bl	800b800 <_Bfree>
 800b166:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b16a:	ea43 0102 	orr.w	r1, r3, r2
 800b16e:	9b04      	ldr	r3, [sp, #16]
 800b170:	430b      	orrs	r3, r1
 800b172:	464d      	mov	r5, r9
 800b174:	d10f      	bne.n	800b196 <_dtoa_r+0xa66>
 800b176:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b17a:	d02a      	beq.n	800b1d2 <_dtoa_r+0xaa2>
 800b17c:	9b03      	ldr	r3, [sp, #12]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	dd02      	ble.n	800b188 <_dtoa_r+0xa58>
 800b182:	9b02      	ldr	r3, [sp, #8]
 800b184:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b188:	f88b a000 	strb.w	sl, [fp]
 800b18c:	e775      	b.n	800b07a <_dtoa_r+0x94a>
 800b18e:	4638      	mov	r0, r7
 800b190:	e7ba      	b.n	800b108 <_dtoa_r+0x9d8>
 800b192:	2201      	movs	r2, #1
 800b194:	e7e2      	b.n	800b15c <_dtoa_r+0xa2c>
 800b196:	9b03      	ldr	r3, [sp, #12]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	db04      	blt.n	800b1a6 <_dtoa_r+0xa76>
 800b19c:	9906      	ldr	r1, [sp, #24]
 800b19e:	430b      	orrs	r3, r1
 800b1a0:	9904      	ldr	r1, [sp, #16]
 800b1a2:	430b      	orrs	r3, r1
 800b1a4:	d122      	bne.n	800b1ec <_dtoa_r+0xabc>
 800b1a6:	2a00      	cmp	r2, #0
 800b1a8:	ddee      	ble.n	800b188 <_dtoa_r+0xa58>
 800b1aa:	ee18 1a10 	vmov	r1, s16
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	f000 fcf7 	bl	800bba4 <__lshift>
 800b1b6:	4631      	mov	r1, r6
 800b1b8:	ee08 0a10 	vmov	s16, r0
 800b1bc:	f000 fd62 	bl	800bc84 <__mcmp>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	dc03      	bgt.n	800b1cc <_dtoa_r+0xa9c>
 800b1c4:	d1e0      	bne.n	800b188 <_dtoa_r+0xa58>
 800b1c6:	f01a 0f01 	tst.w	sl, #1
 800b1ca:	d0dd      	beq.n	800b188 <_dtoa_r+0xa58>
 800b1cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b1d0:	d1d7      	bne.n	800b182 <_dtoa_r+0xa52>
 800b1d2:	2339      	movs	r3, #57	; 0x39
 800b1d4:	f88b 3000 	strb.w	r3, [fp]
 800b1d8:	462b      	mov	r3, r5
 800b1da:	461d      	mov	r5, r3
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b1e2:	2a39      	cmp	r2, #57	; 0x39
 800b1e4:	d071      	beq.n	800b2ca <_dtoa_r+0xb9a>
 800b1e6:	3201      	adds	r2, #1
 800b1e8:	701a      	strb	r2, [r3, #0]
 800b1ea:	e746      	b.n	800b07a <_dtoa_r+0x94a>
 800b1ec:	2a00      	cmp	r2, #0
 800b1ee:	dd07      	ble.n	800b200 <_dtoa_r+0xad0>
 800b1f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b1f4:	d0ed      	beq.n	800b1d2 <_dtoa_r+0xaa2>
 800b1f6:	f10a 0301 	add.w	r3, sl, #1
 800b1fa:	f88b 3000 	strb.w	r3, [fp]
 800b1fe:	e73c      	b.n	800b07a <_dtoa_r+0x94a>
 800b200:	9b05      	ldr	r3, [sp, #20]
 800b202:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b206:	4599      	cmp	r9, r3
 800b208:	d047      	beq.n	800b29a <_dtoa_r+0xb6a>
 800b20a:	ee18 1a10 	vmov	r1, s16
 800b20e:	2300      	movs	r3, #0
 800b210:	220a      	movs	r2, #10
 800b212:	4620      	mov	r0, r4
 800b214:	f000 fb16 	bl	800b844 <__multadd>
 800b218:	45b8      	cmp	r8, r7
 800b21a:	ee08 0a10 	vmov	s16, r0
 800b21e:	f04f 0300 	mov.w	r3, #0
 800b222:	f04f 020a 	mov.w	r2, #10
 800b226:	4641      	mov	r1, r8
 800b228:	4620      	mov	r0, r4
 800b22a:	d106      	bne.n	800b23a <_dtoa_r+0xb0a>
 800b22c:	f000 fb0a 	bl	800b844 <__multadd>
 800b230:	4680      	mov	r8, r0
 800b232:	4607      	mov	r7, r0
 800b234:	f109 0901 	add.w	r9, r9, #1
 800b238:	e772      	b.n	800b120 <_dtoa_r+0x9f0>
 800b23a:	f000 fb03 	bl	800b844 <__multadd>
 800b23e:	4639      	mov	r1, r7
 800b240:	4680      	mov	r8, r0
 800b242:	2300      	movs	r3, #0
 800b244:	220a      	movs	r2, #10
 800b246:	4620      	mov	r0, r4
 800b248:	f000 fafc 	bl	800b844 <__multadd>
 800b24c:	4607      	mov	r7, r0
 800b24e:	e7f1      	b.n	800b234 <_dtoa_r+0xb04>
 800b250:	9b03      	ldr	r3, [sp, #12]
 800b252:	9302      	str	r3, [sp, #8]
 800b254:	9d01      	ldr	r5, [sp, #4]
 800b256:	ee18 0a10 	vmov	r0, s16
 800b25a:	4631      	mov	r1, r6
 800b25c:	f7ff f9dc 	bl	800a618 <quorem>
 800b260:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b264:	9b01      	ldr	r3, [sp, #4]
 800b266:	f805 ab01 	strb.w	sl, [r5], #1
 800b26a:	1aea      	subs	r2, r5, r3
 800b26c:	9b02      	ldr	r3, [sp, #8]
 800b26e:	4293      	cmp	r3, r2
 800b270:	dd09      	ble.n	800b286 <_dtoa_r+0xb56>
 800b272:	ee18 1a10 	vmov	r1, s16
 800b276:	2300      	movs	r3, #0
 800b278:	220a      	movs	r2, #10
 800b27a:	4620      	mov	r0, r4
 800b27c:	f000 fae2 	bl	800b844 <__multadd>
 800b280:	ee08 0a10 	vmov	s16, r0
 800b284:	e7e7      	b.n	800b256 <_dtoa_r+0xb26>
 800b286:	9b02      	ldr	r3, [sp, #8]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	bfc8      	it	gt
 800b28c:	461d      	movgt	r5, r3
 800b28e:	9b01      	ldr	r3, [sp, #4]
 800b290:	bfd8      	it	le
 800b292:	2501      	movle	r5, #1
 800b294:	441d      	add	r5, r3
 800b296:	f04f 0800 	mov.w	r8, #0
 800b29a:	ee18 1a10 	vmov	r1, s16
 800b29e:	2201      	movs	r2, #1
 800b2a0:	4620      	mov	r0, r4
 800b2a2:	f000 fc7f 	bl	800bba4 <__lshift>
 800b2a6:	4631      	mov	r1, r6
 800b2a8:	ee08 0a10 	vmov	s16, r0
 800b2ac:	f000 fcea 	bl	800bc84 <__mcmp>
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	dc91      	bgt.n	800b1d8 <_dtoa_r+0xaa8>
 800b2b4:	d102      	bne.n	800b2bc <_dtoa_r+0xb8c>
 800b2b6:	f01a 0f01 	tst.w	sl, #1
 800b2ba:	d18d      	bne.n	800b1d8 <_dtoa_r+0xaa8>
 800b2bc:	462b      	mov	r3, r5
 800b2be:	461d      	mov	r5, r3
 800b2c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2c4:	2a30      	cmp	r2, #48	; 0x30
 800b2c6:	d0fa      	beq.n	800b2be <_dtoa_r+0xb8e>
 800b2c8:	e6d7      	b.n	800b07a <_dtoa_r+0x94a>
 800b2ca:	9a01      	ldr	r2, [sp, #4]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d184      	bne.n	800b1da <_dtoa_r+0xaaa>
 800b2d0:	9b00      	ldr	r3, [sp, #0]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	9300      	str	r3, [sp, #0]
 800b2d6:	2331      	movs	r3, #49	; 0x31
 800b2d8:	7013      	strb	r3, [r2, #0]
 800b2da:	e6ce      	b.n	800b07a <_dtoa_r+0x94a>
 800b2dc:	4b09      	ldr	r3, [pc, #36]	; (800b304 <_dtoa_r+0xbd4>)
 800b2de:	f7ff ba95 	b.w	800a80c <_dtoa_r+0xdc>
 800b2e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f47f aa6e 	bne.w	800a7c6 <_dtoa_r+0x96>
 800b2ea:	4b07      	ldr	r3, [pc, #28]	; (800b308 <_dtoa_r+0xbd8>)
 800b2ec:	f7ff ba8e 	b.w	800a80c <_dtoa_r+0xdc>
 800b2f0:	9b02      	ldr	r3, [sp, #8]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	dcae      	bgt.n	800b254 <_dtoa_r+0xb24>
 800b2f6:	9b06      	ldr	r3, [sp, #24]
 800b2f8:	2b02      	cmp	r3, #2
 800b2fa:	f73f aea8 	bgt.w	800b04e <_dtoa_r+0x91e>
 800b2fe:	e7a9      	b.n	800b254 <_dtoa_r+0xb24>
 800b300:	0800c75b 	.word	0x0800c75b
 800b304:	0800c6b8 	.word	0x0800c6b8
 800b308:	0800c6dc 	.word	0x0800c6dc

0800b30c <__sflush_r>:
 800b30c:	898a      	ldrh	r2, [r1, #12]
 800b30e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b312:	4605      	mov	r5, r0
 800b314:	0710      	lsls	r0, r2, #28
 800b316:	460c      	mov	r4, r1
 800b318:	d458      	bmi.n	800b3cc <__sflush_r+0xc0>
 800b31a:	684b      	ldr	r3, [r1, #4]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	dc05      	bgt.n	800b32c <__sflush_r+0x20>
 800b320:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b322:	2b00      	cmp	r3, #0
 800b324:	dc02      	bgt.n	800b32c <__sflush_r+0x20>
 800b326:	2000      	movs	r0, #0
 800b328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b32c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b32e:	2e00      	cmp	r6, #0
 800b330:	d0f9      	beq.n	800b326 <__sflush_r+0x1a>
 800b332:	2300      	movs	r3, #0
 800b334:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b338:	682f      	ldr	r7, [r5, #0]
 800b33a:	602b      	str	r3, [r5, #0]
 800b33c:	d032      	beq.n	800b3a4 <__sflush_r+0x98>
 800b33e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b340:	89a3      	ldrh	r3, [r4, #12]
 800b342:	075a      	lsls	r2, r3, #29
 800b344:	d505      	bpl.n	800b352 <__sflush_r+0x46>
 800b346:	6863      	ldr	r3, [r4, #4]
 800b348:	1ac0      	subs	r0, r0, r3
 800b34a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b34c:	b10b      	cbz	r3, 800b352 <__sflush_r+0x46>
 800b34e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b350:	1ac0      	subs	r0, r0, r3
 800b352:	2300      	movs	r3, #0
 800b354:	4602      	mov	r2, r0
 800b356:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b358:	6a21      	ldr	r1, [r4, #32]
 800b35a:	4628      	mov	r0, r5
 800b35c:	47b0      	blx	r6
 800b35e:	1c43      	adds	r3, r0, #1
 800b360:	89a3      	ldrh	r3, [r4, #12]
 800b362:	d106      	bne.n	800b372 <__sflush_r+0x66>
 800b364:	6829      	ldr	r1, [r5, #0]
 800b366:	291d      	cmp	r1, #29
 800b368:	d82c      	bhi.n	800b3c4 <__sflush_r+0xb8>
 800b36a:	4a2a      	ldr	r2, [pc, #168]	; (800b414 <__sflush_r+0x108>)
 800b36c:	40ca      	lsrs	r2, r1
 800b36e:	07d6      	lsls	r6, r2, #31
 800b370:	d528      	bpl.n	800b3c4 <__sflush_r+0xb8>
 800b372:	2200      	movs	r2, #0
 800b374:	6062      	str	r2, [r4, #4]
 800b376:	04d9      	lsls	r1, r3, #19
 800b378:	6922      	ldr	r2, [r4, #16]
 800b37a:	6022      	str	r2, [r4, #0]
 800b37c:	d504      	bpl.n	800b388 <__sflush_r+0x7c>
 800b37e:	1c42      	adds	r2, r0, #1
 800b380:	d101      	bne.n	800b386 <__sflush_r+0x7a>
 800b382:	682b      	ldr	r3, [r5, #0]
 800b384:	b903      	cbnz	r3, 800b388 <__sflush_r+0x7c>
 800b386:	6560      	str	r0, [r4, #84]	; 0x54
 800b388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b38a:	602f      	str	r7, [r5, #0]
 800b38c:	2900      	cmp	r1, #0
 800b38e:	d0ca      	beq.n	800b326 <__sflush_r+0x1a>
 800b390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b394:	4299      	cmp	r1, r3
 800b396:	d002      	beq.n	800b39e <__sflush_r+0x92>
 800b398:	4628      	mov	r0, r5
 800b39a:	f000 fd8b 	bl	800beb4 <_free_r>
 800b39e:	2000      	movs	r0, #0
 800b3a0:	6360      	str	r0, [r4, #52]	; 0x34
 800b3a2:	e7c1      	b.n	800b328 <__sflush_r+0x1c>
 800b3a4:	6a21      	ldr	r1, [r4, #32]
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	47b0      	blx	r6
 800b3ac:	1c41      	adds	r1, r0, #1
 800b3ae:	d1c7      	bne.n	800b340 <__sflush_r+0x34>
 800b3b0:	682b      	ldr	r3, [r5, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d0c4      	beq.n	800b340 <__sflush_r+0x34>
 800b3b6:	2b1d      	cmp	r3, #29
 800b3b8:	d001      	beq.n	800b3be <__sflush_r+0xb2>
 800b3ba:	2b16      	cmp	r3, #22
 800b3bc:	d101      	bne.n	800b3c2 <__sflush_r+0xb6>
 800b3be:	602f      	str	r7, [r5, #0]
 800b3c0:	e7b1      	b.n	800b326 <__sflush_r+0x1a>
 800b3c2:	89a3      	ldrh	r3, [r4, #12]
 800b3c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3c8:	81a3      	strh	r3, [r4, #12]
 800b3ca:	e7ad      	b.n	800b328 <__sflush_r+0x1c>
 800b3cc:	690f      	ldr	r7, [r1, #16]
 800b3ce:	2f00      	cmp	r7, #0
 800b3d0:	d0a9      	beq.n	800b326 <__sflush_r+0x1a>
 800b3d2:	0793      	lsls	r3, r2, #30
 800b3d4:	680e      	ldr	r6, [r1, #0]
 800b3d6:	bf08      	it	eq
 800b3d8:	694b      	ldreq	r3, [r1, #20]
 800b3da:	600f      	str	r7, [r1, #0]
 800b3dc:	bf18      	it	ne
 800b3de:	2300      	movne	r3, #0
 800b3e0:	eba6 0807 	sub.w	r8, r6, r7
 800b3e4:	608b      	str	r3, [r1, #8]
 800b3e6:	f1b8 0f00 	cmp.w	r8, #0
 800b3ea:	dd9c      	ble.n	800b326 <__sflush_r+0x1a>
 800b3ec:	6a21      	ldr	r1, [r4, #32]
 800b3ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b3f0:	4643      	mov	r3, r8
 800b3f2:	463a      	mov	r2, r7
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	47b0      	blx	r6
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	dc06      	bgt.n	800b40a <__sflush_r+0xfe>
 800b3fc:	89a3      	ldrh	r3, [r4, #12]
 800b3fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b402:	81a3      	strh	r3, [r4, #12]
 800b404:	f04f 30ff 	mov.w	r0, #4294967295
 800b408:	e78e      	b.n	800b328 <__sflush_r+0x1c>
 800b40a:	4407      	add	r7, r0
 800b40c:	eba8 0800 	sub.w	r8, r8, r0
 800b410:	e7e9      	b.n	800b3e6 <__sflush_r+0xda>
 800b412:	bf00      	nop
 800b414:	20400001 	.word	0x20400001

0800b418 <_fflush_r>:
 800b418:	b538      	push	{r3, r4, r5, lr}
 800b41a:	690b      	ldr	r3, [r1, #16]
 800b41c:	4605      	mov	r5, r0
 800b41e:	460c      	mov	r4, r1
 800b420:	b913      	cbnz	r3, 800b428 <_fflush_r+0x10>
 800b422:	2500      	movs	r5, #0
 800b424:	4628      	mov	r0, r5
 800b426:	bd38      	pop	{r3, r4, r5, pc}
 800b428:	b118      	cbz	r0, 800b432 <_fflush_r+0x1a>
 800b42a:	6983      	ldr	r3, [r0, #24]
 800b42c:	b90b      	cbnz	r3, 800b432 <_fflush_r+0x1a>
 800b42e:	f000 f887 	bl	800b540 <__sinit>
 800b432:	4b14      	ldr	r3, [pc, #80]	; (800b484 <_fflush_r+0x6c>)
 800b434:	429c      	cmp	r4, r3
 800b436:	d11b      	bne.n	800b470 <_fflush_r+0x58>
 800b438:	686c      	ldr	r4, [r5, #4]
 800b43a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d0ef      	beq.n	800b422 <_fflush_r+0xa>
 800b442:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b444:	07d0      	lsls	r0, r2, #31
 800b446:	d404      	bmi.n	800b452 <_fflush_r+0x3a>
 800b448:	0599      	lsls	r1, r3, #22
 800b44a:	d402      	bmi.n	800b452 <_fflush_r+0x3a>
 800b44c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b44e:	f000 f91a 	bl	800b686 <__retarget_lock_acquire_recursive>
 800b452:	4628      	mov	r0, r5
 800b454:	4621      	mov	r1, r4
 800b456:	f7ff ff59 	bl	800b30c <__sflush_r>
 800b45a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b45c:	07da      	lsls	r2, r3, #31
 800b45e:	4605      	mov	r5, r0
 800b460:	d4e0      	bmi.n	800b424 <_fflush_r+0xc>
 800b462:	89a3      	ldrh	r3, [r4, #12]
 800b464:	059b      	lsls	r3, r3, #22
 800b466:	d4dd      	bmi.n	800b424 <_fflush_r+0xc>
 800b468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b46a:	f000 f90d 	bl	800b688 <__retarget_lock_release_recursive>
 800b46e:	e7d9      	b.n	800b424 <_fflush_r+0xc>
 800b470:	4b05      	ldr	r3, [pc, #20]	; (800b488 <_fflush_r+0x70>)
 800b472:	429c      	cmp	r4, r3
 800b474:	d101      	bne.n	800b47a <_fflush_r+0x62>
 800b476:	68ac      	ldr	r4, [r5, #8]
 800b478:	e7df      	b.n	800b43a <_fflush_r+0x22>
 800b47a:	4b04      	ldr	r3, [pc, #16]	; (800b48c <_fflush_r+0x74>)
 800b47c:	429c      	cmp	r4, r3
 800b47e:	bf08      	it	eq
 800b480:	68ec      	ldreq	r4, [r5, #12]
 800b482:	e7da      	b.n	800b43a <_fflush_r+0x22>
 800b484:	0800c78c 	.word	0x0800c78c
 800b488:	0800c7ac 	.word	0x0800c7ac
 800b48c:	0800c76c 	.word	0x0800c76c

0800b490 <std>:
 800b490:	2300      	movs	r3, #0
 800b492:	b510      	push	{r4, lr}
 800b494:	4604      	mov	r4, r0
 800b496:	e9c0 3300 	strd	r3, r3, [r0]
 800b49a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b49e:	6083      	str	r3, [r0, #8]
 800b4a0:	8181      	strh	r1, [r0, #12]
 800b4a2:	6643      	str	r3, [r0, #100]	; 0x64
 800b4a4:	81c2      	strh	r2, [r0, #14]
 800b4a6:	6183      	str	r3, [r0, #24]
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	2208      	movs	r2, #8
 800b4ac:	305c      	adds	r0, #92	; 0x5c
 800b4ae:	f7fe fb69 	bl	8009b84 <memset>
 800b4b2:	4b05      	ldr	r3, [pc, #20]	; (800b4c8 <std+0x38>)
 800b4b4:	6263      	str	r3, [r4, #36]	; 0x24
 800b4b6:	4b05      	ldr	r3, [pc, #20]	; (800b4cc <std+0x3c>)
 800b4b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4ba:	4b05      	ldr	r3, [pc, #20]	; (800b4d0 <std+0x40>)
 800b4bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4be:	4b05      	ldr	r3, [pc, #20]	; (800b4d4 <std+0x44>)
 800b4c0:	6224      	str	r4, [r4, #32]
 800b4c2:	6323      	str	r3, [r4, #48]	; 0x30
 800b4c4:	bd10      	pop	{r4, pc}
 800b4c6:	bf00      	nop
 800b4c8:	0800c349 	.word	0x0800c349
 800b4cc:	0800c36b 	.word	0x0800c36b
 800b4d0:	0800c3a3 	.word	0x0800c3a3
 800b4d4:	0800c3c7 	.word	0x0800c3c7

0800b4d8 <_cleanup_r>:
 800b4d8:	4901      	ldr	r1, [pc, #4]	; (800b4e0 <_cleanup_r+0x8>)
 800b4da:	f000 b8af 	b.w	800b63c <_fwalk_reent>
 800b4de:	bf00      	nop
 800b4e0:	0800b419 	.word	0x0800b419

0800b4e4 <__sfmoreglue>:
 800b4e4:	b570      	push	{r4, r5, r6, lr}
 800b4e6:	2268      	movs	r2, #104	; 0x68
 800b4e8:	1e4d      	subs	r5, r1, #1
 800b4ea:	4355      	muls	r5, r2
 800b4ec:	460e      	mov	r6, r1
 800b4ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b4f2:	f000 fd4b 	bl	800bf8c <_malloc_r>
 800b4f6:	4604      	mov	r4, r0
 800b4f8:	b140      	cbz	r0, 800b50c <__sfmoreglue+0x28>
 800b4fa:	2100      	movs	r1, #0
 800b4fc:	e9c0 1600 	strd	r1, r6, [r0]
 800b500:	300c      	adds	r0, #12
 800b502:	60a0      	str	r0, [r4, #8]
 800b504:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b508:	f7fe fb3c 	bl	8009b84 <memset>
 800b50c:	4620      	mov	r0, r4
 800b50e:	bd70      	pop	{r4, r5, r6, pc}

0800b510 <__sfp_lock_acquire>:
 800b510:	4801      	ldr	r0, [pc, #4]	; (800b518 <__sfp_lock_acquire+0x8>)
 800b512:	f000 b8b8 	b.w	800b686 <__retarget_lock_acquire_recursive>
 800b516:	bf00      	nop
 800b518:	20000c39 	.word	0x20000c39

0800b51c <__sfp_lock_release>:
 800b51c:	4801      	ldr	r0, [pc, #4]	; (800b524 <__sfp_lock_release+0x8>)
 800b51e:	f000 b8b3 	b.w	800b688 <__retarget_lock_release_recursive>
 800b522:	bf00      	nop
 800b524:	20000c39 	.word	0x20000c39

0800b528 <__sinit_lock_acquire>:
 800b528:	4801      	ldr	r0, [pc, #4]	; (800b530 <__sinit_lock_acquire+0x8>)
 800b52a:	f000 b8ac 	b.w	800b686 <__retarget_lock_acquire_recursive>
 800b52e:	bf00      	nop
 800b530:	20000c3a 	.word	0x20000c3a

0800b534 <__sinit_lock_release>:
 800b534:	4801      	ldr	r0, [pc, #4]	; (800b53c <__sinit_lock_release+0x8>)
 800b536:	f000 b8a7 	b.w	800b688 <__retarget_lock_release_recursive>
 800b53a:	bf00      	nop
 800b53c:	20000c3a 	.word	0x20000c3a

0800b540 <__sinit>:
 800b540:	b510      	push	{r4, lr}
 800b542:	4604      	mov	r4, r0
 800b544:	f7ff fff0 	bl	800b528 <__sinit_lock_acquire>
 800b548:	69a3      	ldr	r3, [r4, #24]
 800b54a:	b11b      	cbz	r3, 800b554 <__sinit+0x14>
 800b54c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b550:	f7ff bff0 	b.w	800b534 <__sinit_lock_release>
 800b554:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b558:	6523      	str	r3, [r4, #80]	; 0x50
 800b55a:	4b13      	ldr	r3, [pc, #76]	; (800b5a8 <__sinit+0x68>)
 800b55c:	4a13      	ldr	r2, [pc, #76]	; (800b5ac <__sinit+0x6c>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	62a2      	str	r2, [r4, #40]	; 0x28
 800b562:	42a3      	cmp	r3, r4
 800b564:	bf04      	itt	eq
 800b566:	2301      	moveq	r3, #1
 800b568:	61a3      	streq	r3, [r4, #24]
 800b56a:	4620      	mov	r0, r4
 800b56c:	f000 f820 	bl	800b5b0 <__sfp>
 800b570:	6060      	str	r0, [r4, #4]
 800b572:	4620      	mov	r0, r4
 800b574:	f000 f81c 	bl	800b5b0 <__sfp>
 800b578:	60a0      	str	r0, [r4, #8]
 800b57a:	4620      	mov	r0, r4
 800b57c:	f000 f818 	bl	800b5b0 <__sfp>
 800b580:	2200      	movs	r2, #0
 800b582:	60e0      	str	r0, [r4, #12]
 800b584:	2104      	movs	r1, #4
 800b586:	6860      	ldr	r0, [r4, #4]
 800b588:	f7ff ff82 	bl	800b490 <std>
 800b58c:	68a0      	ldr	r0, [r4, #8]
 800b58e:	2201      	movs	r2, #1
 800b590:	2109      	movs	r1, #9
 800b592:	f7ff ff7d 	bl	800b490 <std>
 800b596:	68e0      	ldr	r0, [r4, #12]
 800b598:	2202      	movs	r2, #2
 800b59a:	2112      	movs	r1, #18
 800b59c:	f7ff ff78 	bl	800b490 <std>
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	61a3      	str	r3, [r4, #24]
 800b5a4:	e7d2      	b.n	800b54c <__sinit+0xc>
 800b5a6:	bf00      	nop
 800b5a8:	0800c6a4 	.word	0x0800c6a4
 800b5ac:	0800b4d9 	.word	0x0800b4d9

0800b5b0 <__sfp>:
 800b5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5b2:	4607      	mov	r7, r0
 800b5b4:	f7ff ffac 	bl	800b510 <__sfp_lock_acquire>
 800b5b8:	4b1e      	ldr	r3, [pc, #120]	; (800b634 <__sfp+0x84>)
 800b5ba:	681e      	ldr	r6, [r3, #0]
 800b5bc:	69b3      	ldr	r3, [r6, #24]
 800b5be:	b913      	cbnz	r3, 800b5c6 <__sfp+0x16>
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	f7ff ffbd 	bl	800b540 <__sinit>
 800b5c6:	3648      	adds	r6, #72	; 0x48
 800b5c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	d503      	bpl.n	800b5d8 <__sfp+0x28>
 800b5d0:	6833      	ldr	r3, [r6, #0]
 800b5d2:	b30b      	cbz	r3, 800b618 <__sfp+0x68>
 800b5d4:	6836      	ldr	r6, [r6, #0]
 800b5d6:	e7f7      	b.n	800b5c8 <__sfp+0x18>
 800b5d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b5dc:	b9d5      	cbnz	r5, 800b614 <__sfp+0x64>
 800b5de:	4b16      	ldr	r3, [pc, #88]	; (800b638 <__sfp+0x88>)
 800b5e0:	60e3      	str	r3, [r4, #12]
 800b5e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b5e6:	6665      	str	r5, [r4, #100]	; 0x64
 800b5e8:	f000 f84c 	bl	800b684 <__retarget_lock_init_recursive>
 800b5ec:	f7ff ff96 	bl	800b51c <__sfp_lock_release>
 800b5f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b5f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b5f8:	6025      	str	r5, [r4, #0]
 800b5fa:	61a5      	str	r5, [r4, #24]
 800b5fc:	2208      	movs	r2, #8
 800b5fe:	4629      	mov	r1, r5
 800b600:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b604:	f7fe fabe 	bl	8009b84 <memset>
 800b608:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b60c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b610:	4620      	mov	r0, r4
 800b612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b614:	3468      	adds	r4, #104	; 0x68
 800b616:	e7d9      	b.n	800b5cc <__sfp+0x1c>
 800b618:	2104      	movs	r1, #4
 800b61a:	4638      	mov	r0, r7
 800b61c:	f7ff ff62 	bl	800b4e4 <__sfmoreglue>
 800b620:	4604      	mov	r4, r0
 800b622:	6030      	str	r0, [r6, #0]
 800b624:	2800      	cmp	r0, #0
 800b626:	d1d5      	bne.n	800b5d4 <__sfp+0x24>
 800b628:	f7ff ff78 	bl	800b51c <__sfp_lock_release>
 800b62c:	230c      	movs	r3, #12
 800b62e:	603b      	str	r3, [r7, #0]
 800b630:	e7ee      	b.n	800b610 <__sfp+0x60>
 800b632:	bf00      	nop
 800b634:	0800c6a4 	.word	0x0800c6a4
 800b638:	ffff0001 	.word	0xffff0001

0800b63c <_fwalk_reent>:
 800b63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b640:	4606      	mov	r6, r0
 800b642:	4688      	mov	r8, r1
 800b644:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b648:	2700      	movs	r7, #0
 800b64a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b64e:	f1b9 0901 	subs.w	r9, r9, #1
 800b652:	d505      	bpl.n	800b660 <_fwalk_reent+0x24>
 800b654:	6824      	ldr	r4, [r4, #0]
 800b656:	2c00      	cmp	r4, #0
 800b658:	d1f7      	bne.n	800b64a <_fwalk_reent+0xe>
 800b65a:	4638      	mov	r0, r7
 800b65c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b660:	89ab      	ldrh	r3, [r5, #12]
 800b662:	2b01      	cmp	r3, #1
 800b664:	d907      	bls.n	800b676 <_fwalk_reent+0x3a>
 800b666:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b66a:	3301      	adds	r3, #1
 800b66c:	d003      	beq.n	800b676 <_fwalk_reent+0x3a>
 800b66e:	4629      	mov	r1, r5
 800b670:	4630      	mov	r0, r6
 800b672:	47c0      	blx	r8
 800b674:	4307      	orrs	r7, r0
 800b676:	3568      	adds	r5, #104	; 0x68
 800b678:	e7e9      	b.n	800b64e <_fwalk_reent+0x12>
	...

0800b67c <_localeconv_r>:
 800b67c:	4800      	ldr	r0, [pc, #0]	; (800b680 <_localeconv_r+0x4>)
 800b67e:	4770      	bx	lr
 800b680:	20000160 	.word	0x20000160

0800b684 <__retarget_lock_init_recursive>:
 800b684:	4770      	bx	lr

0800b686 <__retarget_lock_acquire_recursive>:
 800b686:	4770      	bx	lr

0800b688 <__retarget_lock_release_recursive>:
 800b688:	4770      	bx	lr

0800b68a <__swhatbuf_r>:
 800b68a:	b570      	push	{r4, r5, r6, lr}
 800b68c:	460e      	mov	r6, r1
 800b68e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b692:	2900      	cmp	r1, #0
 800b694:	b096      	sub	sp, #88	; 0x58
 800b696:	4614      	mov	r4, r2
 800b698:	461d      	mov	r5, r3
 800b69a:	da08      	bge.n	800b6ae <__swhatbuf_r+0x24>
 800b69c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	602a      	str	r2, [r5, #0]
 800b6a4:	061a      	lsls	r2, r3, #24
 800b6a6:	d410      	bmi.n	800b6ca <__swhatbuf_r+0x40>
 800b6a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6ac:	e00e      	b.n	800b6cc <__swhatbuf_r+0x42>
 800b6ae:	466a      	mov	r2, sp
 800b6b0:	f000 fee0 	bl	800c474 <_fstat_r>
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	dbf1      	blt.n	800b69c <__swhatbuf_r+0x12>
 800b6b8:	9a01      	ldr	r2, [sp, #4]
 800b6ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b6be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b6c2:	425a      	negs	r2, r3
 800b6c4:	415a      	adcs	r2, r3
 800b6c6:	602a      	str	r2, [r5, #0]
 800b6c8:	e7ee      	b.n	800b6a8 <__swhatbuf_r+0x1e>
 800b6ca:	2340      	movs	r3, #64	; 0x40
 800b6cc:	2000      	movs	r0, #0
 800b6ce:	6023      	str	r3, [r4, #0]
 800b6d0:	b016      	add	sp, #88	; 0x58
 800b6d2:	bd70      	pop	{r4, r5, r6, pc}

0800b6d4 <__smakebuf_r>:
 800b6d4:	898b      	ldrh	r3, [r1, #12]
 800b6d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6d8:	079d      	lsls	r5, r3, #30
 800b6da:	4606      	mov	r6, r0
 800b6dc:	460c      	mov	r4, r1
 800b6de:	d507      	bpl.n	800b6f0 <__smakebuf_r+0x1c>
 800b6e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b6e4:	6023      	str	r3, [r4, #0]
 800b6e6:	6123      	str	r3, [r4, #16]
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	6163      	str	r3, [r4, #20]
 800b6ec:	b002      	add	sp, #8
 800b6ee:	bd70      	pop	{r4, r5, r6, pc}
 800b6f0:	ab01      	add	r3, sp, #4
 800b6f2:	466a      	mov	r2, sp
 800b6f4:	f7ff ffc9 	bl	800b68a <__swhatbuf_r>
 800b6f8:	9900      	ldr	r1, [sp, #0]
 800b6fa:	4605      	mov	r5, r0
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	f000 fc45 	bl	800bf8c <_malloc_r>
 800b702:	b948      	cbnz	r0, 800b718 <__smakebuf_r+0x44>
 800b704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b708:	059a      	lsls	r2, r3, #22
 800b70a:	d4ef      	bmi.n	800b6ec <__smakebuf_r+0x18>
 800b70c:	f023 0303 	bic.w	r3, r3, #3
 800b710:	f043 0302 	orr.w	r3, r3, #2
 800b714:	81a3      	strh	r3, [r4, #12]
 800b716:	e7e3      	b.n	800b6e0 <__smakebuf_r+0xc>
 800b718:	4b0d      	ldr	r3, [pc, #52]	; (800b750 <__smakebuf_r+0x7c>)
 800b71a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b71c:	89a3      	ldrh	r3, [r4, #12]
 800b71e:	6020      	str	r0, [r4, #0]
 800b720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b724:	81a3      	strh	r3, [r4, #12]
 800b726:	9b00      	ldr	r3, [sp, #0]
 800b728:	6163      	str	r3, [r4, #20]
 800b72a:	9b01      	ldr	r3, [sp, #4]
 800b72c:	6120      	str	r0, [r4, #16]
 800b72e:	b15b      	cbz	r3, 800b748 <__smakebuf_r+0x74>
 800b730:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b734:	4630      	mov	r0, r6
 800b736:	f000 feaf 	bl	800c498 <_isatty_r>
 800b73a:	b128      	cbz	r0, 800b748 <__smakebuf_r+0x74>
 800b73c:	89a3      	ldrh	r3, [r4, #12]
 800b73e:	f023 0303 	bic.w	r3, r3, #3
 800b742:	f043 0301 	orr.w	r3, r3, #1
 800b746:	81a3      	strh	r3, [r4, #12]
 800b748:	89a0      	ldrh	r0, [r4, #12]
 800b74a:	4305      	orrs	r5, r0
 800b74c:	81a5      	strh	r5, [r4, #12]
 800b74e:	e7cd      	b.n	800b6ec <__smakebuf_r+0x18>
 800b750:	0800b4d9 	.word	0x0800b4d9

0800b754 <malloc>:
 800b754:	4b02      	ldr	r3, [pc, #8]	; (800b760 <malloc+0xc>)
 800b756:	4601      	mov	r1, r0
 800b758:	6818      	ldr	r0, [r3, #0]
 800b75a:	f000 bc17 	b.w	800bf8c <_malloc_r>
 800b75e:	bf00      	nop
 800b760:	2000000c 	.word	0x2000000c

0800b764 <memcpy>:
 800b764:	440a      	add	r2, r1
 800b766:	4291      	cmp	r1, r2
 800b768:	f100 33ff 	add.w	r3, r0, #4294967295
 800b76c:	d100      	bne.n	800b770 <memcpy+0xc>
 800b76e:	4770      	bx	lr
 800b770:	b510      	push	{r4, lr}
 800b772:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b776:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b77a:	4291      	cmp	r1, r2
 800b77c:	d1f9      	bne.n	800b772 <memcpy+0xe>
 800b77e:	bd10      	pop	{r4, pc}

0800b780 <_Balloc>:
 800b780:	b570      	push	{r4, r5, r6, lr}
 800b782:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b784:	4604      	mov	r4, r0
 800b786:	460d      	mov	r5, r1
 800b788:	b976      	cbnz	r6, 800b7a8 <_Balloc+0x28>
 800b78a:	2010      	movs	r0, #16
 800b78c:	f7ff ffe2 	bl	800b754 <malloc>
 800b790:	4602      	mov	r2, r0
 800b792:	6260      	str	r0, [r4, #36]	; 0x24
 800b794:	b920      	cbnz	r0, 800b7a0 <_Balloc+0x20>
 800b796:	4b18      	ldr	r3, [pc, #96]	; (800b7f8 <_Balloc+0x78>)
 800b798:	4818      	ldr	r0, [pc, #96]	; (800b7fc <_Balloc+0x7c>)
 800b79a:	2166      	movs	r1, #102	; 0x66
 800b79c:	f000 fe2a 	bl	800c3f4 <__assert_func>
 800b7a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7a4:	6006      	str	r6, [r0, #0]
 800b7a6:	60c6      	str	r6, [r0, #12]
 800b7a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b7aa:	68f3      	ldr	r3, [r6, #12]
 800b7ac:	b183      	cbz	r3, 800b7d0 <_Balloc+0x50>
 800b7ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b7b6:	b9b8      	cbnz	r0, 800b7e8 <_Balloc+0x68>
 800b7b8:	2101      	movs	r1, #1
 800b7ba:	fa01 f605 	lsl.w	r6, r1, r5
 800b7be:	1d72      	adds	r2, r6, #5
 800b7c0:	0092      	lsls	r2, r2, #2
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	f000 fb60 	bl	800be88 <_calloc_r>
 800b7c8:	b160      	cbz	r0, 800b7e4 <_Balloc+0x64>
 800b7ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7ce:	e00e      	b.n	800b7ee <_Balloc+0x6e>
 800b7d0:	2221      	movs	r2, #33	; 0x21
 800b7d2:	2104      	movs	r1, #4
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	f000 fb57 	bl	800be88 <_calloc_r>
 800b7da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7dc:	60f0      	str	r0, [r6, #12]
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d1e4      	bne.n	800b7ae <_Balloc+0x2e>
 800b7e4:	2000      	movs	r0, #0
 800b7e6:	bd70      	pop	{r4, r5, r6, pc}
 800b7e8:	6802      	ldr	r2, [r0, #0]
 800b7ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7f4:	e7f7      	b.n	800b7e6 <_Balloc+0x66>
 800b7f6:	bf00      	nop
 800b7f8:	0800c6e9 	.word	0x0800c6e9
 800b7fc:	0800c7cc 	.word	0x0800c7cc

0800b800 <_Bfree>:
 800b800:	b570      	push	{r4, r5, r6, lr}
 800b802:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b804:	4605      	mov	r5, r0
 800b806:	460c      	mov	r4, r1
 800b808:	b976      	cbnz	r6, 800b828 <_Bfree+0x28>
 800b80a:	2010      	movs	r0, #16
 800b80c:	f7ff ffa2 	bl	800b754 <malloc>
 800b810:	4602      	mov	r2, r0
 800b812:	6268      	str	r0, [r5, #36]	; 0x24
 800b814:	b920      	cbnz	r0, 800b820 <_Bfree+0x20>
 800b816:	4b09      	ldr	r3, [pc, #36]	; (800b83c <_Bfree+0x3c>)
 800b818:	4809      	ldr	r0, [pc, #36]	; (800b840 <_Bfree+0x40>)
 800b81a:	218a      	movs	r1, #138	; 0x8a
 800b81c:	f000 fdea 	bl	800c3f4 <__assert_func>
 800b820:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b824:	6006      	str	r6, [r0, #0]
 800b826:	60c6      	str	r6, [r0, #12]
 800b828:	b13c      	cbz	r4, 800b83a <_Bfree+0x3a>
 800b82a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b82c:	6862      	ldr	r2, [r4, #4]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b834:	6021      	str	r1, [r4, #0]
 800b836:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b83a:	bd70      	pop	{r4, r5, r6, pc}
 800b83c:	0800c6e9 	.word	0x0800c6e9
 800b840:	0800c7cc 	.word	0x0800c7cc

0800b844 <__multadd>:
 800b844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b848:	690d      	ldr	r5, [r1, #16]
 800b84a:	4607      	mov	r7, r0
 800b84c:	460c      	mov	r4, r1
 800b84e:	461e      	mov	r6, r3
 800b850:	f101 0c14 	add.w	ip, r1, #20
 800b854:	2000      	movs	r0, #0
 800b856:	f8dc 3000 	ldr.w	r3, [ip]
 800b85a:	b299      	uxth	r1, r3
 800b85c:	fb02 6101 	mla	r1, r2, r1, r6
 800b860:	0c1e      	lsrs	r6, r3, #16
 800b862:	0c0b      	lsrs	r3, r1, #16
 800b864:	fb02 3306 	mla	r3, r2, r6, r3
 800b868:	b289      	uxth	r1, r1
 800b86a:	3001      	adds	r0, #1
 800b86c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b870:	4285      	cmp	r5, r0
 800b872:	f84c 1b04 	str.w	r1, [ip], #4
 800b876:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b87a:	dcec      	bgt.n	800b856 <__multadd+0x12>
 800b87c:	b30e      	cbz	r6, 800b8c2 <__multadd+0x7e>
 800b87e:	68a3      	ldr	r3, [r4, #8]
 800b880:	42ab      	cmp	r3, r5
 800b882:	dc19      	bgt.n	800b8b8 <__multadd+0x74>
 800b884:	6861      	ldr	r1, [r4, #4]
 800b886:	4638      	mov	r0, r7
 800b888:	3101      	adds	r1, #1
 800b88a:	f7ff ff79 	bl	800b780 <_Balloc>
 800b88e:	4680      	mov	r8, r0
 800b890:	b928      	cbnz	r0, 800b89e <__multadd+0x5a>
 800b892:	4602      	mov	r2, r0
 800b894:	4b0c      	ldr	r3, [pc, #48]	; (800b8c8 <__multadd+0x84>)
 800b896:	480d      	ldr	r0, [pc, #52]	; (800b8cc <__multadd+0x88>)
 800b898:	21b5      	movs	r1, #181	; 0xb5
 800b89a:	f000 fdab 	bl	800c3f4 <__assert_func>
 800b89e:	6922      	ldr	r2, [r4, #16]
 800b8a0:	3202      	adds	r2, #2
 800b8a2:	f104 010c 	add.w	r1, r4, #12
 800b8a6:	0092      	lsls	r2, r2, #2
 800b8a8:	300c      	adds	r0, #12
 800b8aa:	f7ff ff5b 	bl	800b764 <memcpy>
 800b8ae:	4621      	mov	r1, r4
 800b8b0:	4638      	mov	r0, r7
 800b8b2:	f7ff ffa5 	bl	800b800 <_Bfree>
 800b8b6:	4644      	mov	r4, r8
 800b8b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b8bc:	3501      	adds	r5, #1
 800b8be:	615e      	str	r6, [r3, #20]
 800b8c0:	6125      	str	r5, [r4, #16]
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8c8:	0800c75b 	.word	0x0800c75b
 800b8cc:	0800c7cc 	.word	0x0800c7cc

0800b8d0 <__hi0bits>:
 800b8d0:	0c03      	lsrs	r3, r0, #16
 800b8d2:	041b      	lsls	r3, r3, #16
 800b8d4:	b9d3      	cbnz	r3, 800b90c <__hi0bits+0x3c>
 800b8d6:	0400      	lsls	r0, r0, #16
 800b8d8:	2310      	movs	r3, #16
 800b8da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b8de:	bf04      	itt	eq
 800b8e0:	0200      	lsleq	r0, r0, #8
 800b8e2:	3308      	addeq	r3, #8
 800b8e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b8e8:	bf04      	itt	eq
 800b8ea:	0100      	lsleq	r0, r0, #4
 800b8ec:	3304      	addeq	r3, #4
 800b8ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b8f2:	bf04      	itt	eq
 800b8f4:	0080      	lsleq	r0, r0, #2
 800b8f6:	3302      	addeq	r3, #2
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	db05      	blt.n	800b908 <__hi0bits+0x38>
 800b8fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b900:	f103 0301 	add.w	r3, r3, #1
 800b904:	bf08      	it	eq
 800b906:	2320      	moveq	r3, #32
 800b908:	4618      	mov	r0, r3
 800b90a:	4770      	bx	lr
 800b90c:	2300      	movs	r3, #0
 800b90e:	e7e4      	b.n	800b8da <__hi0bits+0xa>

0800b910 <__lo0bits>:
 800b910:	6803      	ldr	r3, [r0, #0]
 800b912:	f013 0207 	ands.w	r2, r3, #7
 800b916:	4601      	mov	r1, r0
 800b918:	d00b      	beq.n	800b932 <__lo0bits+0x22>
 800b91a:	07da      	lsls	r2, r3, #31
 800b91c:	d423      	bmi.n	800b966 <__lo0bits+0x56>
 800b91e:	0798      	lsls	r0, r3, #30
 800b920:	bf49      	itett	mi
 800b922:	085b      	lsrmi	r3, r3, #1
 800b924:	089b      	lsrpl	r3, r3, #2
 800b926:	2001      	movmi	r0, #1
 800b928:	600b      	strmi	r3, [r1, #0]
 800b92a:	bf5c      	itt	pl
 800b92c:	600b      	strpl	r3, [r1, #0]
 800b92e:	2002      	movpl	r0, #2
 800b930:	4770      	bx	lr
 800b932:	b298      	uxth	r0, r3
 800b934:	b9a8      	cbnz	r0, 800b962 <__lo0bits+0x52>
 800b936:	0c1b      	lsrs	r3, r3, #16
 800b938:	2010      	movs	r0, #16
 800b93a:	b2da      	uxtb	r2, r3
 800b93c:	b90a      	cbnz	r2, 800b942 <__lo0bits+0x32>
 800b93e:	3008      	adds	r0, #8
 800b940:	0a1b      	lsrs	r3, r3, #8
 800b942:	071a      	lsls	r2, r3, #28
 800b944:	bf04      	itt	eq
 800b946:	091b      	lsreq	r3, r3, #4
 800b948:	3004      	addeq	r0, #4
 800b94a:	079a      	lsls	r2, r3, #30
 800b94c:	bf04      	itt	eq
 800b94e:	089b      	lsreq	r3, r3, #2
 800b950:	3002      	addeq	r0, #2
 800b952:	07da      	lsls	r2, r3, #31
 800b954:	d403      	bmi.n	800b95e <__lo0bits+0x4e>
 800b956:	085b      	lsrs	r3, r3, #1
 800b958:	f100 0001 	add.w	r0, r0, #1
 800b95c:	d005      	beq.n	800b96a <__lo0bits+0x5a>
 800b95e:	600b      	str	r3, [r1, #0]
 800b960:	4770      	bx	lr
 800b962:	4610      	mov	r0, r2
 800b964:	e7e9      	b.n	800b93a <__lo0bits+0x2a>
 800b966:	2000      	movs	r0, #0
 800b968:	4770      	bx	lr
 800b96a:	2020      	movs	r0, #32
 800b96c:	4770      	bx	lr
	...

0800b970 <__i2b>:
 800b970:	b510      	push	{r4, lr}
 800b972:	460c      	mov	r4, r1
 800b974:	2101      	movs	r1, #1
 800b976:	f7ff ff03 	bl	800b780 <_Balloc>
 800b97a:	4602      	mov	r2, r0
 800b97c:	b928      	cbnz	r0, 800b98a <__i2b+0x1a>
 800b97e:	4b05      	ldr	r3, [pc, #20]	; (800b994 <__i2b+0x24>)
 800b980:	4805      	ldr	r0, [pc, #20]	; (800b998 <__i2b+0x28>)
 800b982:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b986:	f000 fd35 	bl	800c3f4 <__assert_func>
 800b98a:	2301      	movs	r3, #1
 800b98c:	6144      	str	r4, [r0, #20]
 800b98e:	6103      	str	r3, [r0, #16]
 800b990:	bd10      	pop	{r4, pc}
 800b992:	bf00      	nop
 800b994:	0800c75b 	.word	0x0800c75b
 800b998:	0800c7cc 	.word	0x0800c7cc

0800b99c <__multiply>:
 800b99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a0:	4691      	mov	r9, r2
 800b9a2:	690a      	ldr	r2, [r1, #16]
 800b9a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	bfb8      	it	lt
 800b9ac:	460b      	movlt	r3, r1
 800b9ae:	460c      	mov	r4, r1
 800b9b0:	bfbc      	itt	lt
 800b9b2:	464c      	movlt	r4, r9
 800b9b4:	4699      	movlt	r9, r3
 800b9b6:	6927      	ldr	r7, [r4, #16]
 800b9b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b9bc:	68a3      	ldr	r3, [r4, #8]
 800b9be:	6861      	ldr	r1, [r4, #4]
 800b9c0:	eb07 060a 	add.w	r6, r7, sl
 800b9c4:	42b3      	cmp	r3, r6
 800b9c6:	b085      	sub	sp, #20
 800b9c8:	bfb8      	it	lt
 800b9ca:	3101      	addlt	r1, #1
 800b9cc:	f7ff fed8 	bl	800b780 <_Balloc>
 800b9d0:	b930      	cbnz	r0, 800b9e0 <__multiply+0x44>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	4b44      	ldr	r3, [pc, #272]	; (800bae8 <__multiply+0x14c>)
 800b9d6:	4845      	ldr	r0, [pc, #276]	; (800baec <__multiply+0x150>)
 800b9d8:	f240 115d 	movw	r1, #349	; 0x15d
 800b9dc:	f000 fd0a 	bl	800c3f4 <__assert_func>
 800b9e0:	f100 0514 	add.w	r5, r0, #20
 800b9e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b9e8:	462b      	mov	r3, r5
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	4543      	cmp	r3, r8
 800b9ee:	d321      	bcc.n	800ba34 <__multiply+0x98>
 800b9f0:	f104 0314 	add.w	r3, r4, #20
 800b9f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b9f8:	f109 0314 	add.w	r3, r9, #20
 800b9fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ba00:	9202      	str	r2, [sp, #8]
 800ba02:	1b3a      	subs	r2, r7, r4
 800ba04:	3a15      	subs	r2, #21
 800ba06:	f022 0203 	bic.w	r2, r2, #3
 800ba0a:	3204      	adds	r2, #4
 800ba0c:	f104 0115 	add.w	r1, r4, #21
 800ba10:	428f      	cmp	r7, r1
 800ba12:	bf38      	it	cc
 800ba14:	2204      	movcc	r2, #4
 800ba16:	9201      	str	r2, [sp, #4]
 800ba18:	9a02      	ldr	r2, [sp, #8]
 800ba1a:	9303      	str	r3, [sp, #12]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d80c      	bhi.n	800ba3a <__multiply+0x9e>
 800ba20:	2e00      	cmp	r6, #0
 800ba22:	dd03      	ble.n	800ba2c <__multiply+0x90>
 800ba24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d05a      	beq.n	800bae2 <__multiply+0x146>
 800ba2c:	6106      	str	r6, [r0, #16]
 800ba2e:	b005      	add	sp, #20
 800ba30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba34:	f843 2b04 	str.w	r2, [r3], #4
 800ba38:	e7d8      	b.n	800b9ec <__multiply+0x50>
 800ba3a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ba3e:	f1ba 0f00 	cmp.w	sl, #0
 800ba42:	d024      	beq.n	800ba8e <__multiply+0xf2>
 800ba44:	f104 0e14 	add.w	lr, r4, #20
 800ba48:	46a9      	mov	r9, r5
 800ba4a:	f04f 0c00 	mov.w	ip, #0
 800ba4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ba52:	f8d9 1000 	ldr.w	r1, [r9]
 800ba56:	fa1f fb82 	uxth.w	fp, r2
 800ba5a:	b289      	uxth	r1, r1
 800ba5c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ba60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ba64:	f8d9 2000 	ldr.w	r2, [r9]
 800ba68:	4461      	add	r1, ip
 800ba6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba6e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ba72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ba76:	b289      	uxth	r1, r1
 800ba78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ba7c:	4577      	cmp	r7, lr
 800ba7e:	f849 1b04 	str.w	r1, [r9], #4
 800ba82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba86:	d8e2      	bhi.n	800ba4e <__multiply+0xb2>
 800ba88:	9a01      	ldr	r2, [sp, #4]
 800ba8a:	f845 c002 	str.w	ip, [r5, r2]
 800ba8e:	9a03      	ldr	r2, [sp, #12]
 800ba90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ba94:	3304      	adds	r3, #4
 800ba96:	f1b9 0f00 	cmp.w	r9, #0
 800ba9a:	d020      	beq.n	800bade <__multiply+0x142>
 800ba9c:	6829      	ldr	r1, [r5, #0]
 800ba9e:	f104 0c14 	add.w	ip, r4, #20
 800baa2:	46ae      	mov	lr, r5
 800baa4:	f04f 0a00 	mov.w	sl, #0
 800baa8:	f8bc b000 	ldrh.w	fp, [ip]
 800baac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bab0:	fb09 220b 	mla	r2, r9, fp, r2
 800bab4:	4492      	add	sl, r2
 800bab6:	b289      	uxth	r1, r1
 800bab8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800babc:	f84e 1b04 	str.w	r1, [lr], #4
 800bac0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bac4:	f8be 1000 	ldrh.w	r1, [lr]
 800bac8:	0c12      	lsrs	r2, r2, #16
 800baca:	fb09 1102 	mla	r1, r9, r2, r1
 800bace:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bad2:	4567      	cmp	r7, ip
 800bad4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bad8:	d8e6      	bhi.n	800baa8 <__multiply+0x10c>
 800bada:	9a01      	ldr	r2, [sp, #4]
 800badc:	50a9      	str	r1, [r5, r2]
 800bade:	3504      	adds	r5, #4
 800bae0:	e79a      	b.n	800ba18 <__multiply+0x7c>
 800bae2:	3e01      	subs	r6, #1
 800bae4:	e79c      	b.n	800ba20 <__multiply+0x84>
 800bae6:	bf00      	nop
 800bae8:	0800c75b 	.word	0x0800c75b
 800baec:	0800c7cc 	.word	0x0800c7cc

0800baf0 <__pow5mult>:
 800baf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baf4:	4615      	mov	r5, r2
 800baf6:	f012 0203 	ands.w	r2, r2, #3
 800bafa:	4606      	mov	r6, r0
 800bafc:	460f      	mov	r7, r1
 800bafe:	d007      	beq.n	800bb10 <__pow5mult+0x20>
 800bb00:	4c25      	ldr	r4, [pc, #148]	; (800bb98 <__pow5mult+0xa8>)
 800bb02:	3a01      	subs	r2, #1
 800bb04:	2300      	movs	r3, #0
 800bb06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb0a:	f7ff fe9b 	bl	800b844 <__multadd>
 800bb0e:	4607      	mov	r7, r0
 800bb10:	10ad      	asrs	r5, r5, #2
 800bb12:	d03d      	beq.n	800bb90 <__pow5mult+0xa0>
 800bb14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bb16:	b97c      	cbnz	r4, 800bb38 <__pow5mult+0x48>
 800bb18:	2010      	movs	r0, #16
 800bb1a:	f7ff fe1b 	bl	800b754 <malloc>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	6270      	str	r0, [r6, #36]	; 0x24
 800bb22:	b928      	cbnz	r0, 800bb30 <__pow5mult+0x40>
 800bb24:	4b1d      	ldr	r3, [pc, #116]	; (800bb9c <__pow5mult+0xac>)
 800bb26:	481e      	ldr	r0, [pc, #120]	; (800bba0 <__pow5mult+0xb0>)
 800bb28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bb2c:	f000 fc62 	bl	800c3f4 <__assert_func>
 800bb30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb34:	6004      	str	r4, [r0, #0]
 800bb36:	60c4      	str	r4, [r0, #12]
 800bb38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bb3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb40:	b94c      	cbnz	r4, 800bb56 <__pow5mult+0x66>
 800bb42:	f240 2171 	movw	r1, #625	; 0x271
 800bb46:	4630      	mov	r0, r6
 800bb48:	f7ff ff12 	bl	800b970 <__i2b>
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb52:	4604      	mov	r4, r0
 800bb54:	6003      	str	r3, [r0, #0]
 800bb56:	f04f 0900 	mov.w	r9, #0
 800bb5a:	07eb      	lsls	r3, r5, #31
 800bb5c:	d50a      	bpl.n	800bb74 <__pow5mult+0x84>
 800bb5e:	4639      	mov	r1, r7
 800bb60:	4622      	mov	r2, r4
 800bb62:	4630      	mov	r0, r6
 800bb64:	f7ff ff1a 	bl	800b99c <__multiply>
 800bb68:	4639      	mov	r1, r7
 800bb6a:	4680      	mov	r8, r0
 800bb6c:	4630      	mov	r0, r6
 800bb6e:	f7ff fe47 	bl	800b800 <_Bfree>
 800bb72:	4647      	mov	r7, r8
 800bb74:	106d      	asrs	r5, r5, #1
 800bb76:	d00b      	beq.n	800bb90 <__pow5mult+0xa0>
 800bb78:	6820      	ldr	r0, [r4, #0]
 800bb7a:	b938      	cbnz	r0, 800bb8c <__pow5mult+0x9c>
 800bb7c:	4622      	mov	r2, r4
 800bb7e:	4621      	mov	r1, r4
 800bb80:	4630      	mov	r0, r6
 800bb82:	f7ff ff0b 	bl	800b99c <__multiply>
 800bb86:	6020      	str	r0, [r4, #0]
 800bb88:	f8c0 9000 	str.w	r9, [r0]
 800bb8c:	4604      	mov	r4, r0
 800bb8e:	e7e4      	b.n	800bb5a <__pow5mult+0x6a>
 800bb90:	4638      	mov	r0, r7
 800bb92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb96:	bf00      	nop
 800bb98:	0800c918 	.word	0x0800c918
 800bb9c:	0800c6e9 	.word	0x0800c6e9
 800bba0:	0800c7cc 	.word	0x0800c7cc

0800bba4 <__lshift>:
 800bba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bba8:	460c      	mov	r4, r1
 800bbaa:	6849      	ldr	r1, [r1, #4]
 800bbac:	6923      	ldr	r3, [r4, #16]
 800bbae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bbb2:	68a3      	ldr	r3, [r4, #8]
 800bbb4:	4607      	mov	r7, r0
 800bbb6:	4691      	mov	r9, r2
 800bbb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bbbc:	f108 0601 	add.w	r6, r8, #1
 800bbc0:	42b3      	cmp	r3, r6
 800bbc2:	db0b      	blt.n	800bbdc <__lshift+0x38>
 800bbc4:	4638      	mov	r0, r7
 800bbc6:	f7ff fddb 	bl	800b780 <_Balloc>
 800bbca:	4605      	mov	r5, r0
 800bbcc:	b948      	cbnz	r0, 800bbe2 <__lshift+0x3e>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	4b2a      	ldr	r3, [pc, #168]	; (800bc7c <__lshift+0xd8>)
 800bbd2:	482b      	ldr	r0, [pc, #172]	; (800bc80 <__lshift+0xdc>)
 800bbd4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bbd8:	f000 fc0c 	bl	800c3f4 <__assert_func>
 800bbdc:	3101      	adds	r1, #1
 800bbde:	005b      	lsls	r3, r3, #1
 800bbe0:	e7ee      	b.n	800bbc0 <__lshift+0x1c>
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	f100 0114 	add.w	r1, r0, #20
 800bbe8:	f100 0210 	add.w	r2, r0, #16
 800bbec:	4618      	mov	r0, r3
 800bbee:	4553      	cmp	r3, sl
 800bbf0:	db37      	blt.n	800bc62 <__lshift+0xbe>
 800bbf2:	6920      	ldr	r0, [r4, #16]
 800bbf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bbf8:	f104 0314 	add.w	r3, r4, #20
 800bbfc:	f019 091f 	ands.w	r9, r9, #31
 800bc00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bc08:	d02f      	beq.n	800bc6a <__lshift+0xc6>
 800bc0a:	f1c9 0e20 	rsb	lr, r9, #32
 800bc0e:	468a      	mov	sl, r1
 800bc10:	f04f 0c00 	mov.w	ip, #0
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	fa02 f209 	lsl.w	r2, r2, r9
 800bc1a:	ea42 020c 	orr.w	r2, r2, ip
 800bc1e:	f84a 2b04 	str.w	r2, [sl], #4
 800bc22:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc26:	4298      	cmp	r0, r3
 800bc28:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bc2c:	d8f2      	bhi.n	800bc14 <__lshift+0x70>
 800bc2e:	1b03      	subs	r3, r0, r4
 800bc30:	3b15      	subs	r3, #21
 800bc32:	f023 0303 	bic.w	r3, r3, #3
 800bc36:	3304      	adds	r3, #4
 800bc38:	f104 0215 	add.w	r2, r4, #21
 800bc3c:	4290      	cmp	r0, r2
 800bc3e:	bf38      	it	cc
 800bc40:	2304      	movcc	r3, #4
 800bc42:	f841 c003 	str.w	ip, [r1, r3]
 800bc46:	f1bc 0f00 	cmp.w	ip, #0
 800bc4a:	d001      	beq.n	800bc50 <__lshift+0xac>
 800bc4c:	f108 0602 	add.w	r6, r8, #2
 800bc50:	3e01      	subs	r6, #1
 800bc52:	4638      	mov	r0, r7
 800bc54:	612e      	str	r6, [r5, #16]
 800bc56:	4621      	mov	r1, r4
 800bc58:	f7ff fdd2 	bl	800b800 <_Bfree>
 800bc5c:	4628      	mov	r0, r5
 800bc5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc62:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc66:	3301      	adds	r3, #1
 800bc68:	e7c1      	b.n	800bbee <__lshift+0x4a>
 800bc6a:	3904      	subs	r1, #4
 800bc6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc70:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc74:	4298      	cmp	r0, r3
 800bc76:	d8f9      	bhi.n	800bc6c <__lshift+0xc8>
 800bc78:	e7ea      	b.n	800bc50 <__lshift+0xac>
 800bc7a:	bf00      	nop
 800bc7c:	0800c75b 	.word	0x0800c75b
 800bc80:	0800c7cc 	.word	0x0800c7cc

0800bc84 <__mcmp>:
 800bc84:	b530      	push	{r4, r5, lr}
 800bc86:	6902      	ldr	r2, [r0, #16]
 800bc88:	690c      	ldr	r4, [r1, #16]
 800bc8a:	1b12      	subs	r2, r2, r4
 800bc8c:	d10e      	bne.n	800bcac <__mcmp+0x28>
 800bc8e:	f100 0314 	add.w	r3, r0, #20
 800bc92:	3114      	adds	r1, #20
 800bc94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bc98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bc9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bca0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bca4:	42a5      	cmp	r5, r4
 800bca6:	d003      	beq.n	800bcb0 <__mcmp+0x2c>
 800bca8:	d305      	bcc.n	800bcb6 <__mcmp+0x32>
 800bcaa:	2201      	movs	r2, #1
 800bcac:	4610      	mov	r0, r2
 800bcae:	bd30      	pop	{r4, r5, pc}
 800bcb0:	4283      	cmp	r3, r0
 800bcb2:	d3f3      	bcc.n	800bc9c <__mcmp+0x18>
 800bcb4:	e7fa      	b.n	800bcac <__mcmp+0x28>
 800bcb6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcba:	e7f7      	b.n	800bcac <__mcmp+0x28>

0800bcbc <__mdiff>:
 800bcbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc0:	460c      	mov	r4, r1
 800bcc2:	4606      	mov	r6, r0
 800bcc4:	4611      	mov	r1, r2
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	4690      	mov	r8, r2
 800bcca:	f7ff ffdb 	bl	800bc84 <__mcmp>
 800bcce:	1e05      	subs	r5, r0, #0
 800bcd0:	d110      	bne.n	800bcf4 <__mdiff+0x38>
 800bcd2:	4629      	mov	r1, r5
 800bcd4:	4630      	mov	r0, r6
 800bcd6:	f7ff fd53 	bl	800b780 <_Balloc>
 800bcda:	b930      	cbnz	r0, 800bcea <__mdiff+0x2e>
 800bcdc:	4b3a      	ldr	r3, [pc, #232]	; (800bdc8 <__mdiff+0x10c>)
 800bcde:	4602      	mov	r2, r0
 800bce0:	f240 2132 	movw	r1, #562	; 0x232
 800bce4:	4839      	ldr	r0, [pc, #228]	; (800bdcc <__mdiff+0x110>)
 800bce6:	f000 fb85 	bl	800c3f4 <__assert_func>
 800bcea:	2301      	movs	r3, #1
 800bcec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bcf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf4:	bfa4      	itt	ge
 800bcf6:	4643      	movge	r3, r8
 800bcf8:	46a0      	movge	r8, r4
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bd00:	bfa6      	itte	ge
 800bd02:	461c      	movge	r4, r3
 800bd04:	2500      	movge	r5, #0
 800bd06:	2501      	movlt	r5, #1
 800bd08:	f7ff fd3a 	bl	800b780 <_Balloc>
 800bd0c:	b920      	cbnz	r0, 800bd18 <__mdiff+0x5c>
 800bd0e:	4b2e      	ldr	r3, [pc, #184]	; (800bdc8 <__mdiff+0x10c>)
 800bd10:	4602      	mov	r2, r0
 800bd12:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bd16:	e7e5      	b.n	800bce4 <__mdiff+0x28>
 800bd18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bd1c:	6926      	ldr	r6, [r4, #16]
 800bd1e:	60c5      	str	r5, [r0, #12]
 800bd20:	f104 0914 	add.w	r9, r4, #20
 800bd24:	f108 0514 	add.w	r5, r8, #20
 800bd28:	f100 0e14 	add.w	lr, r0, #20
 800bd2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bd30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bd34:	f108 0210 	add.w	r2, r8, #16
 800bd38:	46f2      	mov	sl, lr
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	f859 3b04 	ldr.w	r3, [r9], #4
 800bd40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bd44:	fa1f f883 	uxth.w	r8, r3
 800bd48:	fa11 f18b 	uxtah	r1, r1, fp
 800bd4c:	0c1b      	lsrs	r3, r3, #16
 800bd4e:	eba1 0808 	sub.w	r8, r1, r8
 800bd52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bd56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bd5a:	fa1f f888 	uxth.w	r8, r8
 800bd5e:	1419      	asrs	r1, r3, #16
 800bd60:	454e      	cmp	r6, r9
 800bd62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bd66:	f84a 3b04 	str.w	r3, [sl], #4
 800bd6a:	d8e7      	bhi.n	800bd3c <__mdiff+0x80>
 800bd6c:	1b33      	subs	r3, r6, r4
 800bd6e:	3b15      	subs	r3, #21
 800bd70:	f023 0303 	bic.w	r3, r3, #3
 800bd74:	3304      	adds	r3, #4
 800bd76:	3415      	adds	r4, #21
 800bd78:	42a6      	cmp	r6, r4
 800bd7a:	bf38      	it	cc
 800bd7c:	2304      	movcc	r3, #4
 800bd7e:	441d      	add	r5, r3
 800bd80:	4473      	add	r3, lr
 800bd82:	469e      	mov	lr, r3
 800bd84:	462e      	mov	r6, r5
 800bd86:	4566      	cmp	r6, ip
 800bd88:	d30e      	bcc.n	800bda8 <__mdiff+0xec>
 800bd8a:	f10c 0203 	add.w	r2, ip, #3
 800bd8e:	1b52      	subs	r2, r2, r5
 800bd90:	f022 0203 	bic.w	r2, r2, #3
 800bd94:	3d03      	subs	r5, #3
 800bd96:	45ac      	cmp	ip, r5
 800bd98:	bf38      	it	cc
 800bd9a:	2200      	movcc	r2, #0
 800bd9c:	441a      	add	r2, r3
 800bd9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bda2:	b17b      	cbz	r3, 800bdc4 <__mdiff+0x108>
 800bda4:	6107      	str	r7, [r0, #16]
 800bda6:	e7a3      	b.n	800bcf0 <__mdiff+0x34>
 800bda8:	f856 8b04 	ldr.w	r8, [r6], #4
 800bdac:	fa11 f288 	uxtah	r2, r1, r8
 800bdb0:	1414      	asrs	r4, r2, #16
 800bdb2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bdb6:	b292      	uxth	r2, r2
 800bdb8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bdbc:	f84e 2b04 	str.w	r2, [lr], #4
 800bdc0:	1421      	asrs	r1, r4, #16
 800bdc2:	e7e0      	b.n	800bd86 <__mdiff+0xca>
 800bdc4:	3f01      	subs	r7, #1
 800bdc6:	e7ea      	b.n	800bd9e <__mdiff+0xe2>
 800bdc8:	0800c75b 	.word	0x0800c75b
 800bdcc:	0800c7cc 	.word	0x0800c7cc

0800bdd0 <__d2b>:
 800bdd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bdd4:	4689      	mov	r9, r1
 800bdd6:	2101      	movs	r1, #1
 800bdd8:	ec57 6b10 	vmov	r6, r7, d0
 800bddc:	4690      	mov	r8, r2
 800bdde:	f7ff fccf 	bl	800b780 <_Balloc>
 800bde2:	4604      	mov	r4, r0
 800bde4:	b930      	cbnz	r0, 800bdf4 <__d2b+0x24>
 800bde6:	4602      	mov	r2, r0
 800bde8:	4b25      	ldr	r3, [pc, #148]	; (800be80 <__d2b+0xb0>)
 800bdea:	4826      	ldr	r0, [pc, #152]	; (800be84 <__d2b+0xb4>)
 800bdec:	f240 310a 	movw	r1, #778	; 0x30a
 800bdf0:	f000 fb00 	bl	800c3f4 <__assert_func>
 800bdf4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bdf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bdfc:	bb35      	cbnz	r5, 800be4c <__d2b+0x7c>
 800bdfe:	2e00      	cmp	r6, #0
 800be00:	9301      	str	r3, [sp, #4]
 800be02:	d028      	beq.n	800be56 <__d2b+0x86>
 800be04:	4668      	mov	r0, sp
 800be06:	9600      	str	r6, [sp, #0]
 800be08:	f7ff fd82 	bl	800b910 <__lo0bits>
 800be0c:	9900      	ldr	r1, [sp, #0]
 800be0e:	b300      	cbz	r0, 800be52 <__d2b+0x82>
 800be10:	9a01      	ldr	r2, [sp, #4]
 800be12:	f1c0 0320 	rsb	r3, r0, #32
 800be16:	fa02 f303 	lsl.w	r3, r2, r3
 800be1a:	430b      	orrs	r3, r1
 800be1c:	40c2      	lsrs	r2, r0
 800be1e:	6163      	str	r3, [r4, #20]
 800be20:	9201      	str	r2, [sp, #4]
 800be22:	9b01      	ldr	r3, [sp, #4]
 800be24:	61a3      	str	r3, [r4, #24]
 800be26:	2b00      	cmp	r3, #0
 800be28:	bf14      	ite	ne
 800be2a:	2202      	movne	r2, #2
 800be2c:	2201      	moveq	r2, #1
 800be2e:	6122      	str	r2, [r4, #16]
 800be30:	b1d5      	cbz	r5, 800be68 <__d2b+0x98>
 800be32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800be36:	4405      	add	r5, r0
 800be38:	f8c9 5000 	str.w	r5, [r9]
 800be3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800be40:	f8c8 0000 	str.w	r0, [r8]
 800be44:	4620      	mov	r0, r4
 800be46:	b003      	add	sp, #12
 800be48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be50:	e7d5      	b.n	800bdfe <__d2b+0x2e>
 800be52:	6161      	str	r1, [r4, #20]
 800be54:	e7e5      	b.n	800be22 <__d2b+0x52>
 800be56:	a801      	add	r0, sp, #4
 800be58:	f7ff fd5a 	bl	800b910 <__lo0bits>
 800be5c:	9b01      	ldr	r3, [sp, #4]
 800be5e:	6163      	str	r3, [r4, #20]
 800be60:	2201      	movs	r2, #1
 800be62:	6122      	str	r2, [r4, #16]
 800be64:	3020      	adds	r0, #32
 800be66:	e7e3      	b.n	800be30 <__d2b+0x60>
 800be68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800be70:	f8c9 0000 	str.w	r0, [r9]
 800be74:	6918      	ldr	r0, [r3, #16]
 800be76:	f7ff fd2b 	bl	800b8d0 <__hi0bits>
 800be7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be7e:	e7df      	b.n	800be40 <__d2b+0x70>
 800be80:	0800c75b 	.word	0x0800c75b
 800be84:	0800c7cc 	.word	0x0800c7cc

0800be88 <_calloc_r>:
 800be88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be8a:	fba1 2402 	umull	r2, r4, r1, r2
 800be8e:	b94c      	cbnz	r4, 800bea4 <_calloc_r+0x1c>
 800be90:	4611      	mov	r1, r2
 800be92:	9201      	str	r2, [sp, #4]
 800be94:	f000 f87a 	bl	800bf8c <_malloc_r>
 800be98:	9a01      	ldr	r2, [sp, #4]
 800be9a:	4605      	mov	r5, r0
 800be9c:	b930      	cbnz	r0, 800beac <_calloc_r+0x24>
 800be9e:	4628      	mov	r0, r5
 800bea0:	b003      	add	sp, #12
 800bea2:	bd30      	pop	{r4, r5, pc}
 800bea4:	220c      	movs	r2, #12
 800bea6:	6002      	str	r2, [r0, #0]
 800bea8:	2500      	movs	r5, #0
 800beaa:	e7f8      	b.n	800be9e <_calloc_r+0x16>
 800beac:	4621      	mov	r1, r4
 800beae:	f7fd fe69 	bl	8009b84 <memset>
 800beb2:	e7f4      	b.n	800be9e <_calloc_r+0x16>

0800beb4 <_free_r>:
 800beb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800beb6:	2900      	cmp	r1, #0
 800beb8:	d044      	beq.n	800bf44 <_free_r+0x90>
 800beba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bebe:	9001      	str	r0, [sp, #4]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	f1a1 0404 	sub.w	r4, r1, #4
 800bec6:	bfb8      	it	lt
 800bec8:	18e4      	addlt	r4, r4, r3
 800beca:	f000 fb19 	bl	800c500 <__malloc_lock>
 800bece:	4a1e      	ldr	r2, [pc, #120]	; (800bf48 <_free_r+0x94>)
 800bed0:	9801      	ldr	r0, [sp, #4]
 800bed2:	6813      	ldr	r3, [r2, #0]
 800bed4:	b933      	cbnz	r3, 800bee4 <_free_r+0x30>
 800bed6:	6063      	str	r3, [r4, #4]
 800bed8:	6014      	str	r4, [r2, #0]
 800beda:	b003      	add	sp, #12
 800bedc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bee0:	f000 bb14 	b.w	800c50c <__malloc_unlock>
 800bee4:	42a3      	cmp	r3, r4
 800bee6:	d908      	bls.n	800befa <_free_r+0x46>
 800bee8:	6825      	ldr	r5, [r4, #0]
 800beea:	1961      	adds	r1, r4, r5
 800beec:	428b      	cmp	r3, r1
 800beee:	bf01      	itttt	eq
 800bef0:	6819      	ldreq	r1, [r3, #0]
 800bef2:	685b      	ldreq	r3, [r3, #4]
 800bef4:	1949      	addeq	r1, r1, r5
 800bef6:	6021      	streq	r1, [r4, #0]
 800bef8:	e7ed      	b.n	800bed6 <_free_r+0x22>
 800befa:	461a      	mov	r2, r3
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	b10b      	cbz	r3, 800bf04 <_free_r+0x50>
 800bf00:	42a3      	cmp	r3, r4
 800bf02:	d9fa      	bls.n	800befa <_free_r+0x46>
 800bf04:	6811      	ldr	r1, [r2, #0]
 800bf06:	1855      	adds	r5, r2, r1
 800bf08:	42a5      	cmp	r5, r4
 800bf0a:	d10b      	bne.n	800bf24 <_free_r+0x70>
 800bf0c:	6824      	ldr	r4, [r4, #0]
 800bf0e:	4421      	add	r1, r4
 800bf10:	1854      	adds	r4, r2, r1
 800bf12:	42a3      	cmp	r3, r4
 800bf14:	6011      	str	r1, [r2, #0]
 800bf16:	d1e0      	bne.n	800beda <_free_r+0x26>
 800bf18:	681c      	ldr	r4, [r3, #0]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	6053      	str	r3, [r2, #4]
 800bf1e:	4421      	add	r1, r4
 800bf20:	6011      	str	r1, [r2, #0]
 800bf22:	e7da      	b.n	800beda <_free_r+0x26>
 800bf24:	d902      	bls.n	800bf2c <_free_r+0x78>
 800bf26:	230c      	movs	r3, #12
 800bf28:	6003      	str	r3, [r0, #0]
 800bf2a:	e7d6      	b.n	800beda <_free_r+0x26>
 800bf2c:	6825      	ldr	r5, [r4, #0]
 800bf2e:	1961      	adds	r1, r4, r5
 800bf30:	428b      	cmp	r3, r1
 800bf32:	bf04      	itt	eq
 800bf34:	6819      	ldreq	r1, [r3, #0]
 800bf36:	685b      	ldreq	r3, [r3, #4]
 800bf38:	6063      	str	r3, [r4, #4]
 800bf3a:	bf04      	itt	eq
 800bf3c:	1949      	addeq	r1, r1, r5
 800bf3e:	6021      	streq	r1, [r4, #0]
 800bf40:	6054      	str	r4, [r2, #4]
 800bf42:	e7ca      	b.n	800beda <_free_r+0x26>
 800bf44:	b003      	add	sp, #12
 800bf46:	bd30      	pop	{r4, r5, pc}
 800bf48:	20000c3c 	.word	0x20000c3c

0800bf4c <sbrk_aligned>:
 800bf4c:	b570      	push	{r4, r5, r6, lr}
 800bf4e:	4e0e      	ldr	r6, [pc, #56]	; (800bf88 <sbrk_aligned+0x3c>)
 800bf50:	460c      	mov	r4, r1
 800bf52:	6831      	ldr	r1, [r6, #0]
 800bf54:	4605      	mov	r5, r0
 800bf56:	b911      	cbnz	r1, 800bf5e <sbrk_aligned+0x12>
 800bf58:	f000 f9e6 	bl	800c328 <_sbrk_r>
 800bf5c:	6030      	str	r0, [r6, #0]
 800bf5e:	4621      	mov	r1, r4
 800bf60:	4628      	mov	r0, r5
 800bf62:	f000 f9e1 	bl	800c328 <_sbrk_r>
 800bf66:	1c43      	adds	r3, r0, #1
 800bf68:	d00a      	beq.n	800bf80 <sbrk_aligned+0x34>
 800bf6a:	1cc4      	adds	r4, r0, #3
 800bf6c:	f024 0403 	bic.w	r4, r4, #3
 800bf70:	42a0      	cmp	r0, r4
 800bf72:	d007      	beq.n	800bf84 <sbrk_aligned+0x38>
 800bf74:	1a21      	subs	r1, r4, r0
 800bf76:	4628      	mov	r0, r5
 800bf78:	f000 f9d6 	bl	800c328 <_sbrk_r>
 800bf7c:	3001      	adds	r0, #1
 800bf7e:	d101      	bne.n	800bf84 <sbrk_aligned+0x38>
 800bf80:	f04f 34ff 	mov.w	r4, #4294967295
 800bf84:	4620      	mov	r0, r4
 800bf86:	bd70      	pop	{r4, r5, r6, pc}
 800bf88:	20000c40 	.word	0x20000c40

0800bf8c <_malloc_r>:
 800bf8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf90:	1ccd      	adds	r5, r1, #3
 800bf92:	f025 0503 	bic.w	r5, r5, #3
 800bf96:	3508      	adds	r5, #8
 800bf98:	2d0c      	cmp	r5, #12
 800bf9a:	bf38      	it	cc
 800bf9c:	250c      	movcc	r5, #12
 800bf9e:	2d00      	cmp	r5, #0
 800bfa0:	4607      	mov	r7, r0
 800bfa2:	db01      	blt.n	800bfa8 <_malloc_r+0x1c>
 800bfa4:	42a9      	cmp	r1, r5
 800bfa6:	d905      	bls.n	800bfb4 <_malloc_r+0x28>
 800bfa8:	230c      	movs	r3, #12
 800bfaa:	603b      	str	r3, [r7, #0]
 800bfac:	2600      	movs	r6, #0
 800bfae:	4630      	mov	r0, r6
 800bfb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfb4:	4e2e      	ldr	r6, [pc, #184]	; (800c070 <_malloc_r+0xe4>)
 800bfb6:	f000 faa3 	bl	800c500 <__malloc_lock>
 800bfba:	6833      	ldr	r3, [r6, #0]
 800bfbc:	461c      	mov	r4, r3
 800bfbe:	bb34      	cbnz	r4, 800c00e <_malloc_r+0x82>
 800bfc0:	4629      	mov	r1, r5
 800bfc2:	4638      	mov	r0, r7
 800bfc4:	f7ff ffc2 	bl	800bf4c <sbrk_aligned>
 800bfc8:	1c43      	adds	r3, r0, #1
 800bfca:	4604      	mov	r4, r0
 800bfcc:	d14d      	bne.n	800c06a <_malloc_r+0xde>
 800bfce:	6834      	ldr	r4, [r6, #0]
 800bfd0:	4626      	mov	r6, r4
 800bfd2:	2e00      	cmp	r6, #0
 800bfd4:	d140      	bne.n	800c058 <_malloc_r+0xcc>
 800bfd6:	6823      	ldr	r3, [r4, #0]
 800bfd8:	4631      	mov	r1, r6
 800bfda:	4638      	mov	r0, r7
 800bfdc:	eb04 0803 	add.w	r8, r4, r3
 800bfe0:	f000 f9a2 	bl	800c328 <_sbrk_r>
 800bfe4:	4580      	cmp	r8, r0
 800bfe6:	d13a      	bne.n	800c05e <_malloc_r+0xd2>
 800bfe8:	6821      	ldr	r1, [r4, #0]
 800bfea:	3503      	adds	r5, #3
 800bfec:	1a6d      	subs	r5, r5, r1
 800bfee:	f025 0503 	bic.w	r5, r5, #3
 800bff2:	3508      	adds	r5, #8
 800bff4:	2d0c      	cmp	r5, #12
 800bff6:	bf38      	it	cc
 800bff8:	250c      	movcc	r5, #12
 800bffa:	4629      	mov	r1, r5
 800bffc:	4638      	mov	r0, r7
 800bffe:	f7ff ffa5 	bl	800bf4c <sbrk_aligned>
 800c002:	3001      	adds	r0, #1
 800c004:	d02b      	beq.n	800c05e <_malloc_r+0xd2>
 800c006:	6823      	ldr	r3, [r4, #0]
 800c008:	442b      	add	r3, r5
 800c00a:	6023      	str	r3, [r4, #0]
 800c00c:	e00e      	b.n	800c02c <_malloc_r+0xa0>
 800c00e:	6822      	ldr	r2, [r4, #0]
 800c010:	1b52      	subs	r2, r2, r5
 800c012:	d41e      	bmi.n	800c052 <_malloc_r+0xc6>
 800c014:	2a0b      	cmp	r2, #11
 800c016:	d916      	bls.n	800c046 <_malloc_r+0xba>
 800c018:	1961      	adds	r1, r4, r5
 800c01a:	42a3      	cmp	r3, r4
 800c01c:	6025      	str	r5, [r4, #0]
 800c01e:	bf18      	it	ne
 800c020:	6059      	strne	r1, [r3, #4]
 800c022:	6863      	ldr	r3, [r4, #4]
 800c024:	bf08      	it	eq
 800c026:	6031      	streq	r1, [r6, #0]
 800c028:	5162      	str	r2, [r4, r5]
 800c02a:	604b      	str	r3, [r1, #4]
 800c02c:	4638      	mov	r0, r7
 800c02e:	f104 060b 	add.w	r6, r4, #11
 800c032:	f000 fa6b 	bl	800c50c <__malloc_unlock>
 800c036:	f026 0607 	bic.w	r6, r6, #7
 800c03a:	1d23      	adds	r3, r4, #4
 800c03c:	1af2      	subs	r2, r6, r3
 800c03e:	d0b6      	beq.n	800bfae <_malloc_r+0x22>
 800c040:	1b9b      	subs	r3, r3, r6
 800c042:	50a3      	str	r3, [r4, r2]
 800c044:	e7b3      	b.n	800bfae <_malloc_r+0x22>
 800c046:	6862      	ldr	r2, [r4, #4]
 800c048:	42a3      	cmp	r3, r4
 800c04a:	bf0c      	ite	eq
 800c04c:	6032      	streq	r2, [r6, #0]
 800c04e:	605a      	strne	r2, [r3, #4]
 800c050:	e7ec      	b.n	800c02c <_malloc_r+0xa0>
 800c052:	4623      	mov	r3, r4
 800c054:	6864      	ldr	r4, [r4, #4]
 800c056:	e7b2      	b.n	800bfbe <_malloc_r+0x32>
 800c058:	4634      	mov	r4, r6
 800c05a:	6876      	ldr	r6, [r6, #4]
 800c05c:	e7b9      	b.n	800bfd2 <_malloc_r+0x46>
 800c05e:	230c      	movs	r3, #12
 800c060:	603b      	str	r3, [r7, #0]
 800c062:	4638      	mov	r0, r7
 800c064:	f000 fa52 	bl	800c50c <__malloc_unlock>
 800c068:	e7a1      	b.n	800bfae <_malloc_r+0x22>
 800c06a:	6025      	str	r5, [r4, #0]
 800c06c:	e7de      	b.n	800c02c <_malloc_r+0xa0>
 800c06e:	bf00      	nop
 800c070:	20000c3c 	.word	0x20000c3c

0800c074 <__sfputc_r>:
 800c074:	6893      	ldr	r3, [r2, #8]
 800c076:	3b01      	subs	r3, #1
 800c078:	2b00      	cmp	r3, #0
 800c07a:	b410      	push	{r4}
 800c07c:	6093      	str	r3, [r2, #8]
 800c07e:	da08      	bge.n	800c092 <__sfputc_r+0x1e>
 800c080:	6994      	ldr	r4, [r2, #24]
 800c082:	42a3      	cmp	r3, r4
 800c084:	db01      	blt.n	800c08a <__sfputc_r+0x16>
 800c086:	290a      	cmp	r1, #10
 800c088:	d103      	bne.n	800c092 <__sfputc_r+0x1e>
 800c08a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c08e:	f7fe ba03 	b.w	800a498 <__swbuf_r>
 800c092:	6813      	ldr	r3, [r2, #0]
 800c094:	1c58      	adds	r0, r3, #1
 800c096:	6010      	str	r0, [r2, #0]
 800c098:	7019      	strb	r1, [r3, #0]
 800c09a:	4608      	mov	r0, r1
 800c09c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0a0:	4770      	bx	lr

0800c0a2 <__sfputs_r>:
 800c0a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0a4:	4606      	mov	r6, r0
 800c0a6:	460f      	mov	r7, r1
 800c0a8:	4614      	mov	r4, r2
 800c0aa:	18d5      	adds	r5, r2, r3
 800c0ac:	42ac      	cmp	r4, r5
 800c0ae:	d101      	bne.n	800c0b4 <__sfputs_r+0x12>
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	e007      	b.n	800c0c4 <__sfputs_r+0x22>
 800c0b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0b8:	463a      	mov	r2, r7
 800c0ba:	4630      	mov	r0, r6
 800c0bc:	f7ff ffda 	bl	800c074 <__sfputc_r>
 800c0c0:	1c43      	adds	r3, r0, #1
 800c0c2:	d1f3      	bne.n	800c0ac <__sfputs_r+0xa>
 800c0c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c0c8 <_vfiprintf_r>:
 800c0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0cc:	460d      	mov	r5, r1
 800c0ce:	b09d      	sub	sp, #116	; 0x74
 800c0d0:	4614      	mov	r4, r2
 800c0d2:	4698      	mov	r8, r3
 800c0d4:	4606      	mov	r6, r0
 800c0d6:	b118      	cbz	r0, 800c0e0 <_vfiprintf_r+0x18>
 800c0d8:	6983      	ldr	r3, [r0, #24]
 800c0da:	b90b      	cbnz	r3, 800c0e0 <_vfiprintf_r+0x18>
 800c0dc:	f7ff fa30 	bl	800b540 <__sinit>
 800c0e0:	4b89      	ldr	r3, [pc, #548]	; (800c308 <_vfiprintf_r+0x240>)
 800c0e2:	429d      	cmp	r5, r3
 800c0e4:	d11b      	bne.n	800c11e <_vfiprintf_r+0x56>
 800c0e6:	6875      	ldr	r5, [r6, #4]
 800c0e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0ea:	07d9      	lsls	r1, r3, #31
 800c0ec:	d405      	bmi.n	800c0fa <_vfiprintf_r+0x32>
 800c0ee:	89ab      	ldrh	r3, [r5, #12]
 800c0f0:	059a      	lsls	r2, r3, #22
 800c0f2:	d402      	bmi.n	800c0fa <_vfiprintf_r+0x32>
 800c0f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0f6:	f7ff fac6 	bl	800b686 <__retarget_lock_acquire_recursive>
 800c0fa:	89ab      	ldrh	r3, [r5, #12]
 800c0fc:	071b      	lsls	r3, r3, #28
 800c0fe:	d501      	bpl.n	800c104 <_vfiprintf_r+0x3c>
 800c100:	692b      	ldr	r3, [r5, #16]
 800c102:	b9eb      	cbnz	r3, 800c140 <_vfiprintf_r+0x78>
 800c104:	4629      	mov	r1, r5
 800c106:	4630      	mov	r0, r6
 800c108:	f7fe fa18 	bl	800a53c <__swsetup_r>
 800c10c:	b1c0      	cbz	r0, 800c140 <_vfiprintf_r+0x78>
 800c10e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c110:	07dc      	lsls	r4, r3, #31
 800c112:	d50e      	bpl.n	800c132 <_vfiprintf_r+0x6a>
 800c114:	f04f 30ff 	mov.w	r0, #4294967295
 800c118:	b01d      	add	sp, #116	; 0x74
 800c11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c11e:	4b7b      	ldr	r3, [pc, #492]	; (800c30c <_vfiprintf_r+0x244>)
 800c120:	429d      	cmp	r5, r3
 800c122:	d101      	bne.n	800c128 <_vfiprintf_r+0x60>
 800c124:	68b5      	ldr	r5, [r6, #8]
 800c126:	e7df      	b.n	800c0e8 <_vfiprintf_r+0x20>
 800c128:	4b79      	ldr	r3, [pc, #484]	; (800c310 <_vfiprintf_r+0x248>)
 800c12a:	429d      	cmp	r5, r3
 800c12c:	bf08      	it	eq
 800c12e:	68f5      	ldreq	r5, [r6, #12]
 800c130:	e7da      	b.n	800c0e8 <_vfiprintf_r+0x20>
 800c132:	89ab      	ldrh	r3, [r5, #12]
 800c134:	0598      	lsls	r0, r3, #22
 800c136:	d4ed      	bmi.n	800c114 <_vfiprintf_r+0x4c>
 800c138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c13a:	f7ff faa5 	bl	800b688 <__retarget_lock_release_recursive>
 800c13e:	e7e9      	b.n	800c114 <_vfiprintf_r+0x4c>
 800c140:	2300      	movs	r3, #0
 800c142:	9309      	str	r3, [sp, #36]	; 0x24
 800c144:	2320      	movs	r3, #32
 800c146:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c14a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c14e:	2330      	movs	r3, #48	; 0x30
 800c150:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c314 <_vfiprintf_r+0x24c>
 800c154:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c158:	f04f 0901 	mov.w	r9, #1
 800c15c:	4623      	mov	r3, r4
 800c15e:	469a      	mov	sl, r3
 800c160:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c164:	b10a      	cbz	r2, 800c16a <_vfiprintf_r+0xa2>
 800c166:	2a25      	cmp	r2, #37	; 0x25
 800c168:	d1f9      	bne.n	800c15e <_vfiprintf_r+0x96>
 800c16a:	ebba 0b04 	subs.w	fp, sl, r4
 800c16e:	d00b      	beq.n	800c188 <_vfiprintf_r+0xc0>
 800c170:	465b      	mov	r3, fp
 800c172:	4622      	mov	r2, r4
 800c174:	4629      	mov	r1, r5
 800c176:	4630      	mov	r0, r6
 800c178:	f7ff ff93 	bl	800c0a2 <__sfputs_r>
 800c17c:	3001      	adds	r0, #1
 800c17e:	f000 80aa 	beq.w	800c2d6 <_vfiprintf_r+0x20e>
 800c182:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c184:	445a      	add	r2, fp
 800c186:	9209      	str	r2, [sp, #36]	; 0x24
 800c188:	f89a 3000 	ldrb.w	r3, [sl]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	f000 80a2 	beq.w	800c2d6 <_vfiprintf_r+0x20e>
 800c192:	2300      	movs	r3, #0
 800c194:	f04f 32ff 	mov.w	r2, #4294967295
 800c198:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c19c:	f10a 0a01 	add.w	sl, sl, #1
 800c1a0:	9304      	str	r3, [sp, #16]
 800c1a2:	9307      	str	r3, [sp, #28]
 800c1a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1a8:	931a      	str	r3, [sp, #104]	; 0x68
 800c1aa:	4654      	mov	r4, sl
 800c1ac:	2205      	movs	r2, #5
 800c1ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1b2:	4858      	ldr	r0, [pc, #352]	; (800c314 <_vfiprintf_r+0x24c>)
 800c1b4:	f7f4 f814 	bl	80001e0 <memchr>
 800c1b8:	9a04      	ldr	r2, [sp, #16]
 800c1ba:	b9d8      	cbnz	r0, 800c1f4 <_vfiprintf_r+0x12c>
 800c1bc:	06d1      	lsls	r1, r2, #27
 800c1be:	bf44      	itt	mi
 800c1c0:	2320      	movmi	r3, #32
 800c1c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1c6:	0713      	lsls	r3, r2, #28
 800c1c8:	bf44      	itt	mi
 800c1ca:	232b      	movmi	r3, #43	; 0x2b
 800c1cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1d0:	f89a 3000 	ldrb.w	r3, [sl]
 800c1d4:	2b2a      	cmp	r3, #42	; 0x2a
 800c1d6:	d015      	beq.n	800c204 <_vfiprintf_r+0x13c>
 800c1d8:	9a07      	ldr	r2, [sp, #28]
 800c1da:	4654      	mov	r4, sl
 800c1dc:	2000      	movs	r0, #0
 800c1de:	f04f 0c0a 	mov.w	ip, #10
 800c1e2:	4621      	mov	r1, r4
 800c1e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1e8:	3b30      	subs	r3, #48	; 0x30
 800c1ea:	2b09      	cmp	r3, #9
 800c1ec:	d94e      	bls.n	800c28c <_vfiprintf_r+0x1c4>
 800c1ee:	b1b0      	cbz	r0, 800c21e <_vfiprintf_r+0x156>
 800c1f0:	9207      	str	r2, [sp, #28]
 800c1f2:	e014      	b.n	800c21e <_vfiprintf_r+0x156>
 800c1f4:	eba0 0308 	sub.w	r3, r0, r8
 800c1f8:	fa09 f303 	lsl.w	r3, r9, r3
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	9304      	str	r3, [sp, #16]
 800c200:	46a2      	mov	sl, r4
 800c202:	e7d2      	b.n	800c1aa <_vfiprintf_r+0xe2>
 800c204:	9b03      	ldr	r3, [sp, #12]
 800c206:	1d19      	adds	r1, r3, #4
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	9103      	str	r1, [sp, #12]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	bfbb      	ittet	lt
 800c210:	425b      	neglt	r3, r3
 800c212:	f042 0202 	orrlt.w	r2, r2, #2
 800c216:	9307      	strge	r3, [sp, #28]
 800c218:	9307      	strlt	r3, [sp, #28]
 800c21a:	bfb8      	it	lt
 800c21c:	9204      	strlt	r2, [sp, #16]
 800c21e:	7823      	ldrb	r3, [r4, #0]
 800c220:	2b2e      	cmp	r3, #46	; 0x2e
 800c222:	d10c      	bne.n	800c23e <_vfiprintf_r+0x176>
 800c224:	7863      	ldrb	r3, [r4, #1]
 800c226:	2b2a      	cmp	r3, #42	; 0x2a
 800c228:	d135      	bne.n	800c296 <_vfiprintf_r+0x1ce>
 800c22a:	9b03      	ldr	r3, [sp, #12]
 800c22c:	1d1a      	adds	r2, r3, #4
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	9203      	str	r2, [sp, #12]
 800c232:	2b00      	cmp	r3, #0
 800c234:	bfb8      	it	lt
 800c236:	f04f 33ff 	movlt.w	r3, #4294967295
 800c23a:	3402      	adds	r4, #2
 800c23c:	9305      	str	r3, [sp, #20]
 800c23e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c324 <_vfiprintf_r+0x25c>
 800c242:	7821      	ldrb	r1, [r4, #0]
 800c244:	2203      	movs	r2, #3
 800c246:	4650      	mov	r0, sl
 800c248:	f7f3 ffca 	bl	80001e0 <memchr>
 800c24c:	b140      	cbz	r0, 800c260 <_vfiprintf_r+0x198>
 800c24e:	2340      	movs	r3, #64	; 0x40
 800c250:	eba0 000a 	sub.w	r0, r0, sl
 800c254:	fa03 f000 	lsl.w	r0, r3, r0
 800c258:	9b04      	ldr	r3, [sp, #16]
 800c25a:	4303      	orrs	r3, r0
 800c25c:	3401      	adds	r4, #1
 800c25e:	9304      	str	r3, [sp, #16]
 800c260:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c264:	482c      	ldr	r0, [pc, #176]	; (800c318 <_vfiprintf_r+0x250>)
 800c266:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c26a:	2206      	movs	r2, #6
 800c26c:	f7f3 ffb8 	bl	80001e0 <memchr>
 800c270:	2800      	cmp	r0, #0
 800c272:	d03f      	beq.n	800c2f4 <_vfiprintf_r+0x22c>
 800c274:	4b29      	ldr	r3, [pc, #164]	; (800c31c <_vfiprintf_r+0x254>)
 800c276:	bb1b      	cbnz	r3, 800c2c0 <_vfiprintf_r+0x1f8>
 800c278:	9b03      	ldr	r3, [sp, #12]
 800c27a:	3307      	adds	r3, #7
 800c27c:	f023 0307 	bic.w	r3, r3, #7
 800c280:	3308      	adds	r3, #8
 800c282:	9303      	str	r3, [sp, #12]
 800c284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c286:	443b      	add	r3, r7
 800c288:	9309      	str	r3, [sp, #36]	; 0x24
 800c28a:	e767      	b.n	800c15c <_vfiprintf_r+0x94>
 800c28c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c290:	460c      	mov	r4, r1
 800c292:	2001      	movs	r0, #1
 800c294:	e7a5      	b.n	800c1e2 <_vfiprintf_r+0x11a>
 800c296:	2300      	movs	r3, #0
 800c298:	3401      	adds	r4, #1
 800c29a:	9305      	str	r3, [sp, #20]
 800c29c:	4619      	mov	r1, r3
 800c29e:	f04f 0c0a 	mov.w	ip, #10
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2a8:	3a30      	subs	r2, #48	; 0x30
 800c2aa:	2a09      	cmp	r2, #9
 800c2ac:	d903      	bls.n	800c2b6 <_vfiprintf_r+0x1ee>
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d0c5      	beq.n	800c23e <_vfiprintf_r+0x176>
 800c2b2:	9105      	str	r1, [sp, #20]
 800c2b4:	e7c3      	b.n	800c23e <_vfiprintf_r+0x176>
 800c2b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2ba:	4604      	mov	r4, r0
 800c2bc:	2301      	movs	r3, #1
 800c2be:	e7f0      	b.n	800c2a2 <_vfiprintf_r+0x1da>
 800c2c0:	ab03      	add	r3, sp, #12
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	462a      	mov	r2, r5
 800c2c6:	4b16      	ldr	r3, [pc, #88]	; (800c320 <_vfiprintf_r+0x258>)
 800c2c8:	a904      	add	r1, sp, #16
 800c2ca:	4630      	mov	r0, r6
 800c2cc:	f7fd fd02 	bl	8009cd4 <_printf_float>
 800c2d0:	4607      	mov	r7, r0
 800c2d2:	1c78      	adds	r0, r7, #1
 800c2d4:	d1d6      	bne.n	800c284 <_vfiprintf_r+0x1bc>
 800c2d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2d8:	07d9      	lsls	r1, r3, #31
 800c2da:	d405      	bmi.n	800c2e8 <_vfiprintf_r+0x220>
 800c2dc:	89ab      	ldrh	r3, [r5, #12]
 800c2de:	059a      	lsls	r2, r3, #22
 800c2e0:	d402      	bmi.n	800c2e8 <_vfiprintf_r+0x220>
 800c2e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2e4:	f7ff f9d0 	bl	800b688 <__retarget_lock_release_recursive>
 800c2e8:	89ab      	ldrh	r3, [r5, #12]
 800c2ea:	065b      	lsls	r3, r3, #25
 800c2ec:	f53f af12 	bmi.w	800c114 <_vfiprintf_r+0x4c>
 800c2f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2f2:	e711      	b.n	800c118 <_vfiprintf_r+0x50>
 800c2f4:	ab03      	add	r3, sp, #12
 800c2f6:	9300      	str	r3, [sp, #0]
 800c2f8:	462a      	mov	r2, r5
 800c2fa:	4b09      	ldr	r3, [pc, #36]	; (800c320 <_vfiprintf_r+0x258>)
 800c2fc:	a904      	add	r1, sp, #16
 800c2fe:	4630      	mov	r0, r6
 800c300:	f7fd ff8c 	bl	800a21c <_printf_i>
 800c304:	e7e4      	b.n	800c2d0 <_vfiprintf_r+0x208>
 800c306:	bf00      	nop
 800c308:	0800c78c 	.word	0x0800c78c
 800c30c:	0800c7ac 	.word	0x0800c7ac
 800c310:	0800c76c 	.word	0x0800c76c
 800c314:	0800c924 	.word	0x0800c924
 800c318:	0800c92e 	.word	0x0800c92e
 800c31c:	08009cd5 	.word	0x08009cd5
 800c320:	0800c0a3 	.word	0x0800c0a3
 800c324:	0800c92a 	.word	0x0800c92a

0800c328 <_sbrk_r>:
 800c328:	b538      	push	{r3, r4, r5, lr}
 800c32a:	4d06      	ldr	r5, [pc, #24]	; (800c344 <_sbrk_r+0x1c>)
 800c32c:	2300      	movs	r3, #0
 800c32e:	4604      	mov	r4, r0
 800c330:	4608      	mov	r0, r1
 800c332:	602b      	str	r3, [r5, #0]
 800c334:	f7f7 fd04 	bl	8003d40 <_sbrk>
 800c338:	1c43      	adds	r3, r0, #1
 800c33a:	d102      	bne.n	800c342 <_sbrk_r+0x1a>
 800c33c:	682b      	ldr	r3, [r5, #0]
 800c33e:	b103      	cbz	r3, 800c342 <_sbrk_r+0x1a>
 800c340:	6023      	str	r3, [r4, #0]
 800c342:	bd38      	pop	{r3, r4, r5, pc}
 800c344:	20000c44 	.word	0x20000c44

0800c348 <__sread>:
 800c348:	b510      	push	{r4, lr}
 800c34a:	460c      	mov	r4, r1
 800c34c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c350:	f000 f8e2 	bl	800c518 <_read_r>
 800c354:	2800      	cmp	r0, #0
 800c356:	bfab      	itete	ge
 800c358:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c35a:	89a3      	ldrhlt	r3, [r4, #12]
 800c35c:	181b      	addge	r3, r3, r0
 800c35e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c362:	bfac      	ite	ge
 800c364:	6563      	strge	r3, [r4, #84]	; 0x54
 800c366:	81a3      	strhlt	r3, [r4, #12]
 800c368:	bd10      	pop	{r4, pc}

0800c36a <__swrite>:
 800c36a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c36e:	461f      	mov	r7, r3
 800c370:	898b      	ldrh	r3, [r1, #12]
 800c372:	05db      	lsls	r3, r3, #23
 800c374:	4605      	mov	r5, r0
 800c376:	460c      	mov	r4, r1
 800c378:	4616      	mov	r6, r2
 800c37a:	d505      	bpl.n	800c388 <__swrite+0x1e>
 800c37c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c380:	2302      	movs	r3, #2
 800c382:	2200      	movs	r2, #0
 800c384:	f000 f898 	bl	800c4b8 <_lseek_r>
 800c388:	89a3      	ldrh	r3, [r4, #12]
 800c38a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c38e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c392:	81a3      	strh	r3, [r4, #12]
 800c394:	4632      	mov	r2, r6
 800c396:	463b      	mov	r3, r7
 800c398:	4628      	mov	r0, r5
 800c39a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c39e:	f000 b817 	b.w	800c3d0 <_write_r>

0800c3a2 <__sseek>:
 800c3a2:	b510      	push	{r4, lr}
 800c3a4:	460c      	mov	r4, r1
 800c3a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3aa:	f000 f885 	bl	800c4b8 <_lseek_r>
 800c3ae:	1c43      	adds	r3, r0, #1
 800c3b0:	89a3      	ldrh	r3, [r4, #12]
 800c3b2:	bf15      	itete	ne
 800c3b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c3b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c3ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c3be:	81a3      	strheq	r3, [r4, #12]
 800c3c0:	bf18      	it	ne
 800c3c2:	81a3      	strhne	r3, [r4, #12]
 800c3c4:	bd10      	pop	{r4, pc}

0800c3c6 <__sclose>:
 800c3c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ca:	f000 b831 	b.w	800c430 <_close_r>
	...

0800c3d0 <_write_r>:
 800c3d0:	b538      	push	{r3, r4, r5, lr}
 800c3d2:	4d07      	ldr	r5, [pc, #28]	; (800c3f0 <_write_r+0x20>)
 800c3d4:	4604      	mov	r4, r0
 800c3d6:	4608      	mov	r0, r1
 800c3d8:	4611      	mov	r1, r2
 800c3da:	2200      	movs	r2, #0
 800c3dc:	602a      	str	r2, [r5, #0]
 800c3de:	461a      	mov	r2, r3
 800c3e0:	f7f7 fc5a 	bl	8003c98 <_write>
 800c3e4:	1c43      	adds	r3, r0, #1
 800c3e6:	d102      	bne.n	800c3ee <_write_r+0x1e>
 800c3e8:	682b      	ldr	r3, [r5, #0]
 800c3ea:	b103      	cbz	r3, 800c3ee <_write_r+0x1e>
 800c3ec:	6023      	str	r3, [r4, #0]
 800c3ee:	bd38      	pop	{r3, r4, r5, pc}
 800c3f0:	20000c44 	.word	0x20000c44

0800c3f4 <__assert_func>:
 800c3f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3f6:	4614      	mov	r4, r2
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	4b09      	ldr	r3, [pc, #36]	; (800c420 <__assert_func+0x2c>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4605      	mov	r5, r0
 800c400:	68d8      	ldr	r0, [r3, #12]
 800c402:	b14c      	cbz	r4, 800c418 <__assert_func+0x24>
 800c404:	4b07      	ldr	r3, [pc, #28]	; (800c424 <__assert_func+0x30>)
 800c406:	9100      	str	r1, [sp, #0]
 800c408:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c40c:	4906      	ldr	r1, [pc, #24]	; (800c428 <__assert_func+0x34>)
 800c40e:	462b      	mov	r3, r5
 800c410:	f000 f81e 	bl	800c450 <fiprintf>
 800c414:	f000 f89f 	bl	800c556 <abort>
 800c418:	4b04      	ldr	r3, [pc, #16]	; (800c42c <__assert_func+0x38>)
 800c41a:	461c      	mov	r4, r3
 800c41c:	e7f3      	b.n	800c406 <__assert_func+0x12>
 800c41e:	bf00      	nop
 800c420:	2000000c 	.word	0x2000000c
 800c424:	0800c935 	.word	0x0800c935
 800c428:	0800c942 	.word	0x0800c942
 800c42c:	0800c970 	.word	0x0800c970

0800c430 <_close_r>:
 800c430:	b538      	push	{r3, r4, r5, lr}
 800c432:	4d06      	ldr	r5, [pc, #24]	; (800c44c <_close_r+0x1c>)
 800c434:	2300      	movs	r3, #0
 800c436:	4604      	mov	r4, r0
 800c438:	4608      	mov	r0, r1
 800c43a:	602b      	str	r3, [r5, #0]
 800c43c:	f7f7 fc4c 	bl	8003cd8 <_close>
 800c440:	1c43      	adds	r3, r0, #1
 800c442:	d102      	bne.n	800c44a <_close_r+0x1a>
 800c444:	682b      	ldr	r3, [r5, #0]
 800c446:	b103      	cbz	r3, 800c44a <_close_r+0x1a>
 800c448:	6023      	str	r3, [r4, #0]
 800c44a:	bd38      	pop	{r3, r4, r5, pc}
 800c44c:	20000c44 	.word	0x20000c44

0800c450 <fiprintf>:
 800c450:	b40e      	push	{r1, r2, r3}
 800c452:	b503      	push	{r0, r1, lr}
 800c454:	4601      	mov	r1, r0
 800c456:	ab03      	add	r3, sp, #12
 800c458:	4805      	ldr	r0, [pc, #20]	; (800c470 <fiprintf+0x20>)
 800c45a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c45e:	6800      	ldr	r0, [r0, #0]
 800c460:	9301      	str	r3, [sp, #4]
 800c462:	f7ff fe31 	bl	800c0c8 <_vfiprintf_r>
 800c466:	b002      	add	sp, #8
 800c468:	f85d eb04 	ldr.w	lr, [sp], #4
 800c46c:	b003      	add	sp, #12
 800c46e:	4770      	bx	lr
 800c470:	2000000c 	.word	0x2000000c

0800c474 <_fstat_r>:
 800c474:	b538      	push	{r3, r4, r5, lr}
 800c476:	4d07      	ldr	r5, [pc, #28]	; (800c494 <_fstat_r+0x20>)
 800c478:	2300      	movs	r3, #0
 800c47a:	4604      	mov	r4, r0
 800c47c:	4608      	mov	r0, r1
 800c47e:	4611      	mov	r1, r2
 800c480:	602b      	str	r3, [r5, #0]
 800c482:	f7f7 fc35 	bl	8003cf0 <_fstat>
 800c486:	1c43      	adds	r3, r0, #1
 800c488:	d102      	bne.n	800c490 <_fstat_r+0x1c>
 800c48a:	682b      	ldr	r3, [r5, #0]
 800c48c:	b103      	cbz	r3, 800c490 <_fstat_r+0x1c>
 800c48e:	6023      	str	r3, [r4, #0]
 800c490:	bd38      	pop	{r3, r4, r5, pc}
 800c492:	bf00      	nop
 800c494:	20000c44 	.word	0x20000c44

0800c498 <_isatty_r>:
 800c498:	b538      	push	{r3, r4, r5, lr}
 800c49a:	4d06      	ldr	r5, [pc, #24]	; (800c4b4 <_isatty_r+0x1c>)
 800c49c:	2300      	movs	r3, #0
 800c49e:	4604      	mov	r4, r0
 800c4a0:	4608      	mov	r0, r1
 800c4a2:	602b      	str	r3, [r5, #0]
 800c4a4:	f7f7 fc34 	bl	8003d10 <_isatty>
 800c4a8:	1c43      	adds	r3, r0, #1
 800c4aa:	d102      	bne.n	800c4b2 <_isatty_r+0x1a>
 800c4ac:	682b      	ldr	r3, [r5, #0]
 800c4ae:	b103      	cbz	r3, 800c4b2 <_isatty_r+0x1a>
 800c4b0:	6023      	str	r3, [r4, #0]
 800c4b2:	bd38      	pop	{r3, r4, r5, pc}
 800c4b4:	20000c44 	.word	0x20000c44

0800c4b8 <_lseek_r>:
 800c4b8:	b538      	push	{r3, r4, r5, lr}
 800c4ba:	4d07      	ldr	r5, [pc, #28]	; (800c4d8 <_lseek_r+0x20>)
 800c4bc:	4604      	mov	r4, r0
 800c4be:	4608      	mov	r0, r1
 800c4c0:	4611      	mov	r1, r2
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	602a      	str	r2, [r5, #0]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	f7f7 fc2d 	bl	8003d26 <_lseek>
 800c4cc:	1c43      	adds	r3, r0, #1
 800c4ce:	d102      	bne.n	800c4d6 <_lseek_r+0x1e>
 800c4d0:	682b      	ldr	r3, [r5, #0]
 800c4d2:	b103      	cbz	r3, 800c4d6 <_lseek_r+0x1e>
 800c4d4:	6023      	str	r3, [r4, #0]
 800c4d6:	bd38      	pop	{r3, r4, r5, pc}
 800c4d8:	20000c44 	.word	0x20000c44

0800c4dc <__ascii_mbtowc>:
 800c4dc:	b082      	sub	sp, #8
 800c4de:	b901      	cbnz	r1, 800c4e2 <__ascii_mbtowc+0x6>
 800c4e0:	a901      	add	r1, sp, #4
 800c4e2:	b142      	cbz	r2, 800c4f6 <__ascii_mbtowc+0x1a>
 800c4e4:	b14b      	cbz	r3, 800c4fa <__ascii_mbtowc+0x1e>
 800c4e6:	7813      	ldrb	r3, [r2, #0]
 800c4e8:	600b      	str	r3, [r1, #0]
 800c4ea:	7812      	ldrb	r2, [r2, #0]
 800c4ec:	1e10      	subs	r0, r2, #0
 800c4ee:	bf18      	it	ne
 800c4f0:	2001      	movne	r0, #1
 800c4f2:	b002      	add	sp, #8
 800c4f4:	4770      	bx	lr
 800c4f6:	4610      	mov	r0, r2
 800c4f8:	e7fb      	b.n	800c4f2 <__ascii_mbtowc+0x16>
 800c4fa:	f06f 0001 	mvn.w	r0, #1
 800c4fe:	e7f8      	b.n	800c4f2 <__ascii_mbtowc+0x16>

0800c500 <__malloc_lock>:
 800c500:	4801      	ldr	r0, [pc, #4]	; (800c508 <__malloc_lock+0x8>)
 800c502:	f7ff b8c0 	b.w	800b686 <__retarget_lock_acquire_recursive>
 800c506:	bf00      	nop
 800c508:	20000c38 	.word	0x20000c38

0800c50c <__malloc_unlock>:
 800c50c:	4801      	ldr	r0, [pc, #4]	; (800c514 <__malloc_unlock+0x8>)
 800c50e:	f7ff b8bb 	b.w	800b688 <__retarget_lock_release_recursive>
 800c512:	bf00      	nop
 800c514:	20000c38 	.word	0x20000c38

0800c518 <_read_r>:
 800c518:	b538      	push	{r3, r4, r5, lr}
 800c51a:	4d07      	ldr	r5, [pc, #28]	; (800c538 <_read_r+0x20>)
 800c51c:	4604      	mov	r4, r0
 800c51e:	4608      	mov	r0, r1
 800c520:	4611      	mov	r1, r2
 800c522:	2200      	movs	r2, #0
 800c524:	602a      	str	r2, [r5, #0]
 800c526:	461a      	mov	r2, r3
 800c528:	f7f7 fb98 	bl	8003c5c <_read>
 800c52c:	1c43      	adds	r3, r0, #1
 800c52e:	d102      	bne.n	800c536 <_read_r+0x1e>
 800c530:	682b      	ldr	r3, [r5, #0]
 800c532:	b103      	cbz	r3, 800c536 <_read_r+0x1e>
 800c534:	6023      	str	r3, [r4, #0]
 800c536:	bd38      	pop	{r3, r4, r5, pc}
 800c538:	20000c44 	.word	0x20000c44

0800c53c <__ascii_wctomb>:
 800c53c:	b149      	cbz	r1, 800c552 <__ascii_wctomb+0x16>
 800c53e:	2aff      	cmp	r2, #255	; 0xff
 800c540:	bf85      	ittet	hi
 800c542:	238a      	movhi	r3, #138	; 0x8a
 800c544:	6003      	strhi	r3, [r0, #0]
 800c546:	700a      	strbls	r2, [r1, #0]
 800c548:	f04f 30ff 	movhi.w	r0, #4294967295
 800c54c:	bf98      	it	ls
 800c54e:	2001      	movls	r0, #1
 800c550:	4770      	bx	lr
 800c552:	4608      	mov	r0, r1
 800c554:	4770      	bx	lr

0800c556 <abort>:
 800c556:	b508      	push	{r3, lr}
 800c558:	2006      	movs	r0, #6
 800c55a:	f000 f82b 	bl	800c5b4 <raise>
 800c55e:	2001      	movs	r0, #1
 800c560:	f7f7 fb72 	bl	8003c48 <_exit>

0800c564 <_raise_r>:
 800c564:	291f      	cmp	r1, #31
 800c566:	b538      	push	{r3, r4, r5, lr}
 800c568:	4604      	mov	r4, r0
 800c56a:	460d      	mov	r5, r1
 800c56c:	d904      	bls.n	800c578 <_raise_r+0x14>
 800c56e:	2316      	movs	r3, #22
 800c570:	6003      	str	r3, [r0, #0]
 800c572:	f04f 30ff 	mov.w	r0, #4294967295
 800c576:	bd38      	pop	{r3, r4, r5, pc}
 800c578:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c57a:	b112      	cbz	r2, 800c582 <_raise_r+0x1e>
 800c57c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c580:	b94b      	cbnz	r3, 800c596 <_raise_r+0x32>
 800c582:	4620      	mov	r0, r4
 800c584:	f000 f830 	bl	800c5e8 <_getpid_r>
 800c588:	462a      	mov	r2, r5
 800c58a:	4601      	mov	r1, r0
 800c58c:	4620      	mov	r0, r4
 800c58e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c592:	f000 b817 	b.w	800c5c4 <_kill_r>
 800c596:	2b01      	cmp	r3, #1
 800c598:	d00a      	beq.n	800c5b0 <_raise_r+0x4c>
 800c59a:	1c59      	adds	r1, r3, #1
 800c59c:	d103      	bne.n	800c5a6 <_raise_r+0x42>
 800c59e:	2316      	movs	r3, #22
 800c5a0:	6003      	str	r3, [r0, #0]
 800c5a2:	2001      	movs	r0, #1
 800c5a4:	e7e7      	b.n	800c576 <_raise_r+0x12>
 800c5a6:	2400      	movs	r4, #0
 800c5a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	4798      	blx	r3
 800c5b0:	2000      	movs	r0, #0
 800c5b2:	e7e0      	b.n	800c576 <_raise_r+0x12>

0800c5b4 <raise>:
 800c5b4:	4b02      	ldr	r3, [pc, #8]	; (800c5c0 <raise+0xc>)
 800c5b6:	4601      	mov	r1, r0
 800c5b8:	6818      	ldr	r0, [r3, #0]
 800c5ba:	f7ff bfd3 	b.w	800c564 <_raise_r>
 800c5be:	bf00      	nop
 800c5c0:	2000000c 	.word	0x2000000c

0800c5c4 <_kill_r>:
 800c5c4:	b538      	push	{r3, r4, r5, lr}
 800c5c6:	4d07      	ldr	r5, [pc, #28]	; (800c5e4 <_kill_r+0x20>)
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	4604      	mov	r4, r0
 800c5cc:	4608      	mov	r0, r1
 800c5ce:	4611      	mov	r1, r2
 800c5d0:	602b      	str	r3, [r5, #0]
 800c5d2:	f7f7 fb29 	bl	8003c28 <_kill>
 800c5d6:	1c43      	adds	r3, r0, #1
 800c5d8:	d102      	bne.n	800c5e0 <_kill_r+0x1c>
 800c5da:	682b      	ldr	r3, [r5, #0]
 800c5dc:	b103      	cbz	r3, 800c5e0 <_kill_r+0x1c>
 800c5de:	6023      	str	r3, [r4, #0]
 800c5e0:	bd38      	pop	{r3, r4, r5, pc}
 800c5e2:	bf00      	nop
 800c5e4:	20000c44 	.word	0x20000c44

0800c5e8 <_getpid_r>:
 800c5e8:	f7f7 bb16 	b.w	8003c18 <_getpid>

0800c5ec <_init>:
 800c5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ee:	bf00      	nop
 800c5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5f2:	bc08      	pop	{r3}
 800c5f4:	469e      	mov	lr, r3
 800c5f6:	4770      	bx	lr

0800c5f8 <_fini>:
 800c5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5fa:	bf00      	nop
 800c5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5fe:	bc08      	pop	{r3}
 800c600:	469e      	mov	lr, r3
 800c602:	4770      	bx	lr
