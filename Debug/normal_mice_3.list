
normal_mice_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d668  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800d7f8  0800d7f8  0001d7f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dce4  0800dce4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800dce4  0800dce4  0001dce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dcec  0800dcec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dcec  0800dcec  0001dcec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dcf0  0800dcf0  0001dcf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800dcf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a40  200001dc  0800ded0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c1c  0800ded0  00020c1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f3f  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004436  00000000  00000000  0003a14b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  0003e588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015d0  00000000  00000000  0003fd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026bae  00000000  00000000  00041340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fae3  00000000  00000000  00067eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df2e8  00000000  00000000  000879d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166cb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007414  00000000  00000000  00166d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d7e0 	.word	0x0800d7e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800d7e0 	.word	0x0800d7e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <control_test_motor>:

char modeacc;
volatile char g_acc_flag;

void control_test_motor(uint8_t WallMode)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
//	mode.WallControlMode=0;
	mode.WallControlMode=WallMode;
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	72bb      	strb	r3, [r7, #10]
	pl_motor_standby(1);
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f001 f9e4 	bl	8002374 <pl_motor_standby>
	pl_motor_start();
 8000fac:	f001 fa4c 	bl	8002448 <pl_motor_start>

//	float v_e=straight_table(-180, -100, -100, -500, 7000, mode);
	float v_e=straight_table(540, 200, 200, 600, 7000, mode);
 8000fb0:	68b8      	ldr	r0, [r7, #8]
 8000fb2:	ed9f 2a1a 	vldr	s4, [pc, #104]	; 800101c <control_test_motor+0x90>
 8000fb6:	eddf 1a1a 	vldr	s3, [pc, #104]	; 8001020 <control_test_motor+0x94>
 8000fba:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8001024 <control_test_motor+0x98>
 8000fbe:	eddf 0a19 	vldr	s1, [pc, #100]	; 8001024 <control_test_motor+0x98>
 8000fc2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001028 <control_test_motor+0x9c>
 8000fc6:	f000 fd6f 	bl	8001aa8 <straight_table>
 8000fca:	ed87 0a03 	vstr	s0, [r7, #12]

//	float v_e=straight_table(180, 150, 600, 600, 7000);
//	slalom_table(v_e,90, 0, 0, 400, 7000);
//	v_e=straight_table(180, v_e, 150, 600, 7000);
	pl_motor_stop();
 8000fce:	f001 fa4f 	bl	8002470 <pl_motor_stop>
	HAL_Delay(500);
 8000fd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fd6:	f004 f931 	bl	800523c <HAL_Delay>

	pl_motor_standby(1);
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f001 f9ca 	bl	8002374 <pl_motor_standby>
	pl_motor_start();
 8000fe0:	f001 fa32 	bl	8002448 <pl_motor_start>
	v_e=turning_table(360, 240, 240, 600, 7000);
 8000fe4:	ed9f 2a0d 	vldr	s4, [pc, #52]	; 800101c <control_test_motor+0x90>
 8000fe8:	eddf 1a0d 	vldr	s3, [pc, #52]	; 8001020 <control_test_motor+0x94>
 8000fec:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 800102c <control_test_motor+0xa0>
 8000ff0:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800102c <control_test_motor+0xa0>
 8000ff4:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001030 <control_test_motor+0xa4>
 8000ff8:	f000 fe46 	bl	8001c88 <turning_table>
 8000ffc:	ed87 0a03 	vstr	s0, [r7, #12]

	pl_motor_stop();
 8001000:	f001 fa36 	bl	8002470 <pl_motor_stop>
	HAL_Delay(500);
 8001004:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001008:	f004 f918 	bl	800523c <HAL_Delay>
	pl_motor_standby(0);
 800100c:	2000      	movs	r0, #0
 800100e:	f001 f9b1 	bl	8002374 <pl_motor_standby>
}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	45dac000 	.word	0x45dac000
 8001020:	44160000 	.word	0x44160000
 8001024:	43480000 	.word	0x43480000
 8001028:	44070000 	.word	0x44070000
 800102c:	43700000 	.word	0x43700000
 8001030:	43b40000 	.word	0x43b40000

08001034 <motor_init>:
/*	モータの初期化					(pl_speaker_init)	*/
/*******************************************************************/
/*	モータの初期化する。						*/
/*******************************************************************/
void motor_init(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

	modeacc=0;
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <motor_init+0x1c>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
	g_acc_flag=0;
 800103e:	4b05      	ldr	r3, [pc, #20]	; (8001054 <motor_init+0x20>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]


}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000238 	.word	0x20000238
 8001054:	20000239 	.word	0x20000239

08001058 <interrupt_Motor>:



void interrupt_Motor(void){
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af02      	add	r7, sp, #8

	if (modeacc == 0) {
		//g_WallControl_mode=0;
		//g_acc_flag=0;
	}
	if (modeacc == 1) {
 800105e:	4bc4      	ldr	r3, [pc, #784]	; (8001370 <interrupt_Motor+0x318>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b01      	cmp	r3, #1
 8001064:	f040 8088 	bne.w	8001178 <interrupt_Motor+0x120>
		g_TargetStraight.displacement += g_TargetStraight.velocity*INTERRUPT_TIME;// + g_TargetStraight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8001068:	4bc2      	ldr	r3, [pc, #776]	; (8001374 <interrupt_Motor+0x31c>)
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fa6b 	bl	8000548 <__aeabi_f2d>
 8001072:	4604      	mov	r4, r0
 8001074:	460d      	mov	r5, r1
 8001076:	4bbf      	ldr	r3, [pc, #764]	; (8001374 <interrupt_Motor+0x31c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fa64 	bl	8000548 <__aeabi_f2d>
 8001080:	a3b7      	add	r3, pc, #732	; (adr r3, 8001360 <interrupt_Motor+0x308>)
 8001082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001086:	f7ff fab7 	bl	80005f8 <__aeabi_dmul>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	4620      	mov	r0, r4
 8001090:	4629      	mov	r1, r5
 8001092:	f7ff f8fb 	bl	800028c <__adddf3>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff fda3 	bl	8000be8 <__aeabi_d2f>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4ab3      	ldr	r2, [pc, #716]	; (8001374 <interrupt_Motor+0x31c>)
 80010a6:	6093      	str	r3, [r2, #8]
		g_TargetStraight.velocity += g_TargetStraight.acceleration*INTERRUPT_TIME;
 80010a8:	4bb2      	ldr	r3, [pc, #712]	; (8001374 <interrupt_Motor+0x31c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa4b 	bl	8000548 <__aeabi_f2d>
 80010b2:	4604      	mov	r4, r0
 80010b4:	460d      	mov	r5, r1
 80010b6:	4baf      	ldr	r3, [pc, #700]	; (8001374 <interrupt_Motor+0x31c>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fa44 	bl	8000548 <__aeabi_f2d>
 80010c0:	a3a7      	add	r3, pc, #668	; (adr r3, 8001360 <interrupt_Motor+0x308>)
 80010c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c6:	f7ff fa97 	bl	80005f8 <__aeabi_dmul>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4620      	mov	r0, r4
 80010d0:	4629      	mov	r1, r5
 80010d2:	f7ff f8db 	bl	800028c <__adddf3>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fd83 	bl	8000be8 <__aeabi_d2f>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4aa3      	ldr	r2, [pc, #652]	; (8001374 <interrupt_Motor+0x31c>)
 80010e6:	6013      	str	r3, [r2, #0]
		g_TargetTurning.displacement += g_TargetTurning.velocity*INTERRUPT_TIME;// + g_TargetTurning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80010e8:	4ba3      	ldr	r3, [pc, #652]	; (8001378 <interrupt_Motor+0x320>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fa2b 	bl	8000548 <__aeabi_f2d>
 80010f2:	4604      	mov	r4, r0
 80010f4:	460d      	mov	r5, r1
 80010f6:	4ba0      	ldr	r3, [pc, #640]	; (8001378 <interrupt_Motor+0x320>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fa24 	bl	8000548 <__aeabi_f2d>
 8001100:	a397      	add	r3, pc, #604	; (adr r3, 8001360 <interrupt_Motor+0x308>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	f7ff fa77 	bl	80005f8 <__aeabi_dmul>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4620      	mov	r0, r4
 8001110:	4629      	mov	r1, r5
 8001112:	f7ff f8bb 	bl	800028c <__adddf3>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fd63 	bl	8000be8 <__aeabi_d2f>
 8001122:	4603      	mov	r3, r0
 8001124:	4a94      	ldr	r2, [pc, #592]	; (8001378 <interrupt_Motor+0x320>)
 8001126:	6093      	str	r3, [r2, #8]
		g_TargetTurning.velocity += g_TargetTurning.acceleration*INTERRUPT_TIME;
 8001128:	4b93      	ldr	r3, [pc, #588]	; (8001378 <interrupt_Motor+0x320>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fa0b 	bl	8000548 <__aeabi_f2d>
 8001132:	4604      	mov	r4, r0
 8001134:	460d      	mov	r5, r1
 8001136:	4b90      	ldr	r3, [pc, #576]	; (8001378 <interrupt_Motor+0x320>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fa04 	bl	8000548 <__aeabi_f2d>
 8001140:	a387      	add	r3, pc, #540	; (adr r3, 8001360 <interrupt_Motor+0x308>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff fa57 	bl	80005f8 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4620      	mov	r0, r4
 8001150:	4629      	mov	r1, r5
 8001152:	f7ff f89b 	bl	800028c <__adddf3>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	f7ff fd43 	bl	8000be8 <__aeabi_d2f>
 8001162:	4603      	mov	r3, r0
 8001164:	4a84      	ldr	r2, [pc, #528]	; (8001378 <interrupt_Motor+0x320>)
 8001166:	6013      	str	r3, [r2, #0]
		cal_table(g_TrapezoidStraight,&g_TargetStraight);
 8001168:	4b84      	ldr	r3, [pc, #528]	; (800137c <interrupt_Motor+0x324>)
 800116a:	4a82      	ldr	r2, [pc, #520]	; (8001374 <interrupt_Motor+0x31c>)
 800116c:	9201      	str	r2, [sp, #4]
 800116e:	691a      	ldr	r2, [r3, #16]
 8001170:	9200      	str	r2, [sp, #0]
 8001172:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001174:	f000 f94a 	bl	800140c <cal_table>
	}
	if (modeacc == 2){
 8001178:	4b7d      	ldr	r3, [pc, #500]	; (8001370 <interrupt_Motor+0x318>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b02      	cmp	r3, #2
 800117e:	f040 808b 	bne.w	8001298 <interrupt_Motor+0x240>
		g_WallControl_mode=0;
 8001182:	4b7f      	ldr	r3, [pc, #508]	; (8001380 <interrupt_Motor+0x328>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
		g_TargetStraight.displacement += g_TargetStraight.velocity*INTERRUPT_TIME;// + g_TargetStraight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8001188:	4b7a      	ldr	r3, [pc, #488]	; (8001374 <interrupt_Motor+0x31c>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f9db 	bl	8000548 <__aeabi_f2d>
 8001192:	4604      	mov	r4, r0
 8001194:	460d      	mov	r5, r1
 8001196:	4b77      	ldr	r3, [pc, #476]	; (8001374 <interrupt_Motor+0x31c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f9d4 	bl	8000548 <__aeabi_f2d>
 80011a0:	a36f      	add	r3, pc, #444	; (adr r3, 8001360 <interrupt_Motor+0x308>)
 80011a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a6:	f7ff fa27 	bl	80005f8 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4620      	mov	r0, r4
 80011b0:	4629      	mov	r1, r5
 80011b2:	f7ff f86b 	bl	800028c <__adddf3>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f7ff fd13 	bl	8000be8 <__aeabi_d2f>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a6b      	ldr	r2, [pc, #428]	; (8001374 <interrupt_Motor+0x31c>)
 80011c6:	6093      	str	r3, [r2, #8]
		g_TargetStraight.velocity += g_TargetStraight.acceleration*INTERRUPT_TIME;
 80011c8:	4b6a      	ldr	r3, [pc, #424]	; (8001374 <interrupt_Motor+0x31c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f9bb 	bl	8000548 <__aeabi_f2d>
 80011d2:	4604      	mov	r4, r0
 80011d4:	460d      	mov	r5, r1
 80011d6:	4b67      	ldr	r3, [pc, #412]	; (8001374 <interrupt_Motor+0x31c>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f9b4 	bl	8000548 <__aeabi_f2d>
 80011e0:	a35f      	add	r3, pc, #380	; (adr r3, 8001360 <interrupt_Motor+0x308>)
 80011e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e6:	f7ff fa07 	bl	80005f8 <__aeabi_dmul>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4620      	mov	r0, r4
 80011f0:	4629      	mov	r1, r5
 80011f2:	f7ff f84b 	bl	800028c <__adddf3>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f7ff fcf3 	bl	8000be8 <__aeabi_d2f>
 8001202:	4603      	mov	r3, r0
 8001204:	4a5b      	ldr	r2, [pc, #364]	; (8001374 <interrupt_Motor+0x31c>)
 8001206:	6013      	str	r3, [r2, #0]
		g_TargetTurning.displacement += g_TargetTurning.velocity*INTERRUPT_TIME;// + g_TargetTurning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8001208:	4b5b      	ldr	r3, [pc, #364]	; (8001378 <interrupt_Motor+0x320>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f99b 	bl	8000548 <__aeabi_f2d>
 8001212:	4604      	mov	r4, r0
 8001214:	460d      	mov	r5, r1
 8001216:	4b58      	ldr	r3, [pc, #352]	; (8001378 <interrupt_Motor+0x320>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f994 	bl	8000548 <__aeabi_f2d>
 8001220:	a34f      	add	r3, pc, #316	; (adr r3, 8001360 <interrupt_Motor+0x308>)
 8001222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001226:	f7ff f9e7 	bl	80005f8 <__aeabi_dmul>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4620      	mov	r0, r4
 8001230:	4629      	mov	r1, r5
 8001232:	f7ff f82b 	bl	800028c <__adddf3>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f7ff fcd3 	bl	8000be8 <__aeabi_d2f>
 8001242:	4603      	mov	r3, r0
 8001244:	4a4c      	ldr	r2, [pc, #304]	; (8001378 <interrupt_Motor+0x320>)
 8001246:	6093      	str	r3, [r2, #8]
		g_TargetTurning.velocity += g_TargetTurning.acceleration*INTERRUPT_TIME;
 8001248:	4b4b      	ldr	r3, [pc, #300]	; (8001378 <interrupt_Motor+0x320>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f97b 	bl	8000548 <__aeabi_f2d>
 8001252:	4604      	mov	r4, r0
 8001254:	460d      	mov	r5, r1
 8001256:	4b48      	ldr	r3, [pc, #288]	; (8001378 <interrupt_Motor+0x320>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f974 	bl	8000548 <__aeabi_f2d>
 8001260:	a33f      	add	r3, pc, #252	; (adr r3, 8001360 <interrupt_Motor+0x308>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f9c7 	bl	80005f8 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4620      	mov	r0, r4
 8001270:	4629      	mov	r1, r5
 8001272:	f7ff f80b 	bl	800028c <__adddf3>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	f7ff fcb3 	bl	8000be8 <__aeabi_d2f>
 8001282:	4603      	mov	r3, r0
 8001284:	4a3c      	ldr	r2, [pc, #240]	; (8001378 <interrupt_Motor+0x320>)
 8001286:	6013      	str	r3, [r2, #0]
		cal_table(g_TrapezoidTurning,&g_TargetTurning);
 8001288:	4b3e      	ldr	r3, [pc, #248]	; (8001384 <interrupt_Motor+0x32c>)
 800128a:	4a3b      	ldr	r2, [pc, #236]	; (8001378 <interrupt_Motor+0x320>)
 800128c:	9201      	str	r2, [sp, #4]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	9200      	str	r2, [sp, #0]
 8001292:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001294:	f000 f8ba 	bl	800140c <cal_table>
	}
	float PID_wall = calWallConrol();
 8001298:	f000 feac 	bl	8001ff4 <calWallConrol>
 800129c:	ed87 0a03 	vstr	s0, [r7, #12]
	float velocity_l = g_TargetStraight.velocity + g_TargetTurning.velocity * TREAD_WIDTH / 2 * M_PI / 180 + PID_wall;
 80012a0:	4b34      	ldr	r3, [pc, #208]	; (8001374 <interrupt_Motor+0x31c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f94f 	bl	8000548 <__aeabi_f2d>
 80012aa:	4604      	mov	r4, r0
 80012ac:	460d      	mov	r5, r1
 80012ae:	4b32      	ldr	r3, [pc, #200]	; (8001378 <interrupt_Motor+0x320>)
 80012b0:	edd3 7a00 	vldr	s15, [r3]
 80012b4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001388 <interrupt_Motor+0x330>
 80012b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012bc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80012c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012c4:	ee16 0a90 	vmov	r0, s13
 80012c8:	f7ff f93e 	bl	8000548 <__aeabi_f2d>
 80012cc:	a326      	add	r3, pc, #152	; (adr r3, 8001368 <interrupt_Motor+0x310>)
 80012ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d2:	f7ff f991 	bl	80005f8 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	4b2a      	ldr	r3, [pc, #168]	; (800138c <interrupt_Motor+0x334>)
 80012e4:	f7ff fab2 	bl	800084c <__aeabi_ddiv>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4620      	mov	r0, r4
 80012ee:	4629      	mov	r1, r5
 80012f0:	f7fe ffcc 	bl	800028c <__adddf3>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4614      	mov	r4, r2
 80012fa:	461d      	mov	r5, r3
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f7ff f923 	bl	8000548 <__aeabi_f2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4620      	mov	r0, r4
 8001308:	4629      	mov	r1, r5
 800130a:	f7fe ffbf 	bl	800028c <__adddf3>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fc67 	bl	8000be8 <__aeabi_d2f>
 800131a:	4603      	mov	r3, r0
 800131c:	60bb      	str	r3, [r7, #8]
		pl_motor_mode_L(velocity_l);
 800131e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001322:	f001 f853 	bl	80023cc <pl_motor_mode_L>
		pl_motor_count_L(velocity_l);
 8001326:	ed97 0a02 	vldr	s0, [r7, #8]
 800132a:	f001 f8b1 	bl	8002490 <pl_motor_count_L>
	float velocity_r = g_TargetStraight.velocity - g_TargetTurning.velocity * TREAD_WIDTH / 2 * M_PI / 180 - PID_wall;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <interrupt_Motor+0x31c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f908 	bl	8000548 <__aeabi_f2d>
 8001338:	4604      	mov	r4, r0
 800133a:	460d      	mov	r5, r1
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <interrupt_Motor+0x320>)
 800133e:	edd3 7a00 	vldr	s15, [r3]
 8001342:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001388 <interrupt_Motor+0x330>
 8001346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800134e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001352:	ee16 0a90 	vmov	r0, s13
 8001356:	f7ff f8f7 	bl	8000548 <__aeabi_f2d>
 800135a:	e019      	b.n	8001390 <interrupt_Motor+0x338>
 800135c:	f3af 8000 	nop.w
 8001360:	d2f1a9fc 	.word	0xd2f1a9fc
 8001364:	3f50624d 	.word	0x3f50624d
 8001368:	54442d18 	.word	0x54442d18
 800136c:	400921fb 	.word	0x400921fb
 8001370:	20000238 	.word	0x20000238
 8001374:	200001f8 	.word	0x200001f8
 8001378:	20000204 	.word	0x20000204
 800137c:	20000210 	.word	0x20000210
 8001380:	2000039c 	.word	0x2000039c
 8001384:	20000224 	.word	0x20000224
 8001388:	42a20000 	.word	0x42a20000
 800138c:	40668000 	.word	0x40668000
 8001390:	a31c      	add	r3, pc, #112	; (adr r3, 8001404 <interrupt_Motor+0x3ac>)
 8001392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001396:	f7ff f92f 	bl	80005f8 <__aeabi_dmul>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <interrupt_Motor+0x3a8>)
 80013a8:	f7ff fa50 	bl	800084c <__aeabi_ddiv>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4620      	mov	r0, r4
 80013b2:	4629      	mov	r1, r5
 80013b4:	f7fe ff68 	bl	8000288 <__aeabi_dsub>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4614      	mov	r4, r2
 80013be:	461d      	mov	r5, r3
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f7ff f8c1 	bl	8000548 <__aeabi_f2d>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4620      	mov	r0, r4
 80013cc:	4629      	mov	r1, r5
 80013ce:	f7fe ff5b 	bl	8000288 <__aeabi_dsub>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fc05 	bl	8000be8 <__aeabi_d2f>
 80013de:	4603      	mov	r3, r0
 80013e0:	607b      	str	r3, [r7, #4]
	    pl_motor_mode_R(velocity_r);
 80013e2:	ed97 0a01 	vldr	s0, [r7, #4]
 80013e6:	f001 f811 	bl	800240c <pl_motor_mode_R>
	    pl_motor_count_R(velocity_r);
 80013ea:	ed97 0a01 	vldr	s0, [r7, #4]
 80013ee:	f001 f863 	bl	80024b8 <pl_motor_count_R>



}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bdb0      	pop	{r4, r5, r7, pc}
 80013fa:	bf00      	nop
 80013fc:	f3af 8000 	nop.w
 8001400:	40668000 	.word	0x40668000
 8001404:	54442d18 	.word	0x54442d18
 8001408:	400921fb 	.word	0x400921fb

0800140c <cal_table>:

void cal_table(TRAPEZOID input,TARGET *target){
 800140c:	b084      	sub	sp, #16
 800140e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	f107 0420 	add.w	r4, r7, #32
 800141a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 800141e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001422:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142a:	f2c0 819b 	blt.w	8001764 <cal_table+0x358>
	switch (g_acc_flag) {
 800142e:	4bcc      	ldr	r3, [pc, #816]	; (8001760 <cal_table+0x354>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b06      	cmp	r3, #6
 8001436:	f200 832e 	bhi.w	8001a96 <cal_table+0x68a>
 800143a:	a201      	add	r2, pc, #4	; (adr r2, 8001440 <cal_table+0x34>)
 800143c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001440:	08001a91 	.word	0x08001a91
 8001444:	0800145d 	.word	0x0800145d
 8001448:	080015cf 	.word	0x080015cf
 800144c:	080016ed 	.word	0x080016ed
 8001450:	08001a91 	.word	0x08001a91
 8001454:	08001719 	.word	0x08001719
 8001458:	0800173b 	.word	0x0800173b
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 800145c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800145e:	ed93 7a00 	vldr	s14, [r3]
 8001462:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001466:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800146a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146e:	db0a      	blt.n	8001486 <cal_table+0x7a>
				target->velocity = input.count_velocity;
 8001470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001474:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 8001476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 800147e:	4bb8      	ldr	r3, [pc, #736]	; (8001760 <cal_table+0x354>)
 8001480:	2202      	movs	r2, #2
 8001482:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 8001484:	e307      	b.n	8001a96 <cal_table+0x68a>
			else if((input.displacement <= (2*target->velocity*target->velocity
 8001486:	ed97 7a08 	vldr	s14, [r7, #32]
 800148a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800148c:	edd3 7a00 	vldr	s15, [r3]
 8001490:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 800149e:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80014a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80014aa:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 80014ae:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80014b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80014b6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80014ba:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 80014be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014c2:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80014c6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80014ca:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 80014ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	d900      	bls.n	80014da <cal_table+0xce>
		break;
 80014d8:	e2dd      	b.n	8001a96 <cal_table+0x68a>
				time_over=((2*target->velocity*target->velocity
 80014da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80014e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e6:	edd3 7a00 	vldr	s15, [r3]
 80014ea:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 80014ee:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80014f2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014fa:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 80014fe:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001502:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001506:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800150a:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 800150e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001512:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001516:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800151a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800151e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001522:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001528:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 800152c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001530:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8001534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f805 	bl	8000548 <__aeabi_f2d>
 800153e:	4604      	mov	r4, r0
 8001540:	460d      	mov	r5, r1
 8001542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe ffff 	bl	8000548 <__aeabi_f2d>
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	f04f 0300 	mov.w	r3, #0
 8001552:	f7ff f851 	bl	80005f8 <__aeabi_dmul>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4690      	mov	r8, r2
 800155c:	4699      	mov	r9, r3
 800155e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001562:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001566:	ee17 0a90 	vmov	r0, s15
 800156a:	f7fe ffed 	bl	8000548 <__aeabi_f2d>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4640      	mov	r0, r8
 8001574:	4649      	mov	r1, r9
 8001576:	f7ff f83f 	bl	80005f8 <__aeabi_dmul>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4620      	mov	r0, r4
 8001580:	4629      	mov	r1, r5
 8001582:	f7fe fe81 	bl	8000288 <__aeabi_dsub>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff fb2b 	bl	8000be8 <__aeabi_d2f>
 8001592:	4602      	mov	r2, r0
 8001594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001596:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 8001598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800159a:	ed93 7a00 	vldr	s14, [r3]
 800159e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80015a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b4:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 80015b8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80015bc:	eef1 7a67 	vneg.f32	s15, s15
 80015c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c2:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 80015c6:	4b66      	ldr	r3, [pc, #408]	; (8001760 <cal_table+0x354>)
 80015c8:	2203      	movs	r2, #3
 80015ca:	701a      	strb	r2, [r3, #0]
		break;
 80015cc:	e263      	b.n	8001a96 <cal_table+0x68a>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 80015ce:	ed97 7a08 	vldr	s14, [r7, #32]
 80015d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d8:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 80015dc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80015e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 80015e8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80015ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80015f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80015f4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015f8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80015fc:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8001600:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001604:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 8001608:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800160c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001610:	d900      	bls.n	8001614 <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 8001612:	e240      	b.n	8001a96 <cal_table+0x68a>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8001614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001616:	ed93 7a02 	vldr	s14, [r3, #8]
 800161a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800161e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001622:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 8001626:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800162a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800162e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001632:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001636:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800163a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 800163e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001642:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8001646:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 800164a:	edd7 7a08 	vldr	s15, [r7, #32]
 800164e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001654:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8001658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800165c:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8001660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ff6f 	bl	8000548 <__aeabi_f2d>
 800166a:	4604      	mov	r4, r0
 800166c:	460d      	mov	r5, r1
 800166e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff69 	bl	8000548 <__aeabi_f2d>
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	f04f 0300 	mov.w	r3, #0
 800167e:	f7fe ffbb 	bl	80005f8 <__aeabi_dmul>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4690      	mov	r8, r2
 8001688:	4699      	mov	r9, r3
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7fe ff5c 	bl	8000548 <__aeabi_f2d>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4640      	mov	r0, r8
 8001696:	4649      	mov	r1, r9
 8001698:	f7fe ffae 	bl	80005f8 <__aeabi_dmul>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4620      	mov	r0, r4
 80016a2:	4629      	mov	r1, r5
 80016a4:	f7fe fdf0 	bl	8000288 <__aeabi_dsub>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	f7ff fa9a 	bl	8000be8 <__aeabi_d2f>
 80016b4:	4602      	mov	r2, r0
 80016b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b8:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 80016ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016bc:	ed93 7a00 	vldr	s14, [r3]
 80016c0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80016c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80016c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d2:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 80016d6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80016da:	eef1 7a67 	vneg.f32	s15, s15
 80016de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e0:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <cal_table+0x354>)
 80016e6:	2203      	movs	r2, #3
 80016e8:	701a      	strb	r2, [r3, #0]
		break;
 80016ea:	e1d4      	b.n	8001a96 <cal_table+0x68a>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 80016ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ee:	ed93 7a00 	vldr	s14, [r3]
 80016f2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80016f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fe:	d900      	bls.n	8001702 <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8001700:	e1c9      	b.n	8001a96 <cal_table+0x68a>
			target->velocity = input.end_velocity;
 8001702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001706:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8001708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001710:	4b13      	ldr	r3, [pc, #76]	; (8001760 <cal_table+0x354>)
 8001712:	2204      	movs	r2, #4
 8001714:	701a      	strb	r2, [r3, #0]
		break;
 8001716:	e1be      	b.n	8001a96 <cal_table+0x68a>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 8001718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171a:	ed93 7a02 	vldr	s14, [r3, #8]
 800171e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001722:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172a:	db06      	blt.n	800173a <cal_table+0x32e>
			target->acceleration = 0;
 800172c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <cal_table+0x354>)
 8001736:	2204      	movs	r2, #4
 8001738:	701a      	strb	r2, [r3, #0]
		}
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 800173a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001740:	edd7 7a08 	vldr	s15, [r7, #32]
 8001744:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174c:	da00      	bge.n	8001750 <cal_table+0x344>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800174e:	e1a2      	b.n	8001a96 <cal_table+0x68a>
			target->acceleration = 0;
 8001750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001758:	4b01      	ldr	r3, [pc, #4]	; (8001760 <cal_table+0x354>)
 800175a:	2204      	movs	r2, #4
 800175c:	701a      	strb	r2, [r3, #0]
		break;
 800175e:	e19a      	b.n	8001a96 <cal_table+0x68a>
 8001760:	20000239 	.word	0x20000239
	}
}else{
	switch (g_acc_flag) {
 8001764:	4bcf      	ldr	r3, [pc, #828]	; (8001aa4 <cal_table+0x698>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b06      	cmp	r3, #6
 800176c:	f200 8193 	bhi.w	8001a96 <cal_table+0x68a>
 8001770:	a201      	add	r2, pc, #4	; (adr r2, 8001778 <cal_table+0x36c>)
 8001772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001776:	bf00      	nop
 8001778:	08001a95 	.word	0x08001a95
 800177c:	08001795 	.word	0x08001795
 8001780:	08001907 	.word	0x08001907
 8001784:	08001a1d 	.word	0x08001a1d
 8001788:	08001a49 	.word	0x08001a49
 800178c:	08001a49 	.word	0x08001a49
 8001790:	08001a6b 	.word	0x08001a6b
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 8001794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001796:	ed93 7a00 	vldr	s14, [r3]
 800179a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800179e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a6:	d80a      	bhi.n	80017be <cal_table+0x3b2>
				target->velocity = input.count_velocity;
 80017a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ac:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 80017ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 80017b6:	4bbb      	ldr	r3, [pc, #748]	; (8001aa4 <cal_table+0x698>)
 80017b8:	2202      	movs	r2, #2
 80017ba:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 80017bc:	e16b      	b.n	8001a96 <cal_table+0x68a>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 80017be:	edd7 7a08 	vldr	s15, [r7, #32]
 80017c2:	eeb1 7a67 	vneg.f32	s14, s15
 80017c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80017d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 80017da:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80017de:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80017e2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80017e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 80017ea:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80017ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80017f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 80017fa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80017fe:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8001802:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001806:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 800180a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800180e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001812:	d900      	bls.n	8001816 <cal_table+0x40a>
		break;
 8001814:	e13f      	b.n	8001a96 <cal_table+0x68a>
				time_over=(-(2*target->velocity*target->velocity
 8001816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001818:	edd3 7a00 	vldr	s15, [r3]
 800181c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001822:	edd3 7a00 	vldr	s15, [r3]
 8001826:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 800182a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800182e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001832:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001836:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 800183a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800183e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001842:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001846:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 800184a:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 800184e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001852:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001856:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800185a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800185e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001862:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001868:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 800186c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001870:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8001874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe65 	bl	8000548 <__aeabi_f2d>
 800187e:	4604      	mov	r4, r0
 8001880:	460d      	mov	r5, r1
 8001882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe5f 	bl	8000548 <__aeabi_f2d>
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	f7fe feb1 	bl	80005f8 <__aeabi_dmul>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4690      	mov	r8, r2
 800189c:	4699      	mov	r9, r3
 800189e:	edd7 7a01 	vldr	s15, [r7, #4]
 80018a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018a6:	ee17 0a90 	vmov	r0, s15
 80018aa:	f7fe fe4d 	bl	8000548 <__aeabi_f2d>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4640      	mov	r0, r8
 80018b4:	4649      	mov	r1, r9
 80018b6:	f7fe fe9f 	bl	80005f8 <__aeabi_dmul>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4620      	mov	r0, r4
 80018c0:	4629      	mov	r1, r5
 80018c2:	f7fe fce3 	bl	800028c <__adddf3>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4610      	mov	r0, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	f7ff f98b 	bl	8000be8 <__aeabi_d2f>
 80018d2:	4602      	mov	r2, r0
 80018d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018d6:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 80018d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018da:	ed93 7a00 	vldr	s14, [r3]
 80018de:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80018e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f4:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 80018f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fc:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 80018fe:	4b69      	ldr	r3, [pc, #420]	; (8001aa4 <cal_table+0x698>)
 8001900:	2203      	movs	r2, #3
 8001902:	701a      	strb	r2, [r3, #0]
		break;
 8001904:	e0c7      	b.n	8001a96 <cal_table+0x68a>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 8001906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001908:	ed93 7a02 	vldr	s14, [r3, #8]
 800190c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001910:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8001914:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001918:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800191c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8001920:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001924:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001928:	ee66 7a27 	vmul.f32	s15, s12, s15
 800192c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001930:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001934:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8001938:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800193c:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 8001940:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001948:	d900      	bls.n	800194c <cal_table+0x540>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 800194a:	e0a4      	b.n	8001a96 <cal_table+0x68a>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 800194c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800194e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001952:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001956:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800195a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 800195e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001962:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001966:	ee66 7a27 	vmul.f32	s15, s12, s15
 800196a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800196e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001972:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 8001976:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800197a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 800197e:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 8001982:	edd7 7a08 	vldr	s15, [r7, #32]
 8001986:	ee77 6a67 	vsub.f32	s13, s14, s15
 800198a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198c:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8001990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001994:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8001998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fdd3 	bl	8000548 <__aeabi_f2d>
 80019a2:	4604      	mov	r4, r0
 80019a4:	460d      	mov	r5, r1
 80019a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fdcd 	bl	8000548 <__aeabi_f2d>
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	f7fe fe1f 	bl	80005f8 <__aeabi_dmul>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4690      	mov	r8, r2
 80019c0:	4699      	mov	r9, r3
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7fe fdc0 	bl	8000548 <__aeabi_f2d>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4640      	mov	r0, r8
 80019ce:	4649      	mov	r1, r9
 80019d0:	f7fe fe12 	bl	80005f8 <__aeabi_dmul>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4620      	mov	r0, r4
 80019da:	4629      	mov	r1, r5
 80019dc:	f7fe fc56 	bl	800028c <__adddf3>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	f7ff f8fe 	bl	8000be8 <__aeabi_d2f>
 80019ec:	4602      	mov	r2, r0
 80019ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f0:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 80019f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f4:	ed93 7a00 	vldr	s14, [r3]
 80019f8:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80019fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a0a:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 8001a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a12:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 8001a14:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <cal_table+0x698>)
 8001a16:	2203      	movs	r2, #3
 8001a18:	701a      	strb	r2, [r3, #0]
		break;
 8001a1a:	e03c      	b.n	8001a96 <cal_table+0x68a>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 8001a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a1e:	ed93 7a00 	vldr	s14, [r3]
 8001a22:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2e:	da00      	bge.n	8001a32 <cal_table+0x626>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8001a30:	e031      	b.n	8001a96 <cal_table+0x68a>
			target->velocity = input.end_velocity;
 8001a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a36:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8001a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <cal_table+0x698>)
 8001a42:	2204      	movs	r2, #4
 8001a44:	701a      	strb	r2, [r3, #0]
		break;
 8001a46:	e026      	b.n	8001a96 <cal_table+0x68a>
	case 4:
		//終了(0でもいいかも)
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 8001a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a4e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5a:	d806      	bhi.n	8001a6a <cal_table+0x65e>
			target->acceleration = 0;
 8001a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <cal_table+0x698>)
 8001a66:	2204      	movs	r2, #4
 8001a68:	701a      	strb	r2, [r3, #0]
		}
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 8001a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a6c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a70:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7c:	d900      	bls.n	8001a80 <cal_table+0x674>
		}
	}

}

}
 8001a7e:	e00a      	b.n	8001a96 <cal_table+0x68a>
			target->acceleration = 0;
 8001a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <cal_table+0x698>)
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	701a      	strb	r2, [r3, #0]
}
 8001a8e:	e002      	b.n	8001a96 <cal_table+0x68a>
		break;
 8001a90:	bf00      	nop
 8001a92:	e000      	b.n	8001a96 <cal_table+0x68a>
		break;
 8001a94:	bf00      	nop
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8001aa0:	b004      	add	sp, #16
 8001aa2:	4770      	bx	lr
 8001aa4:	20000239 	.word	0x20000239

08001aa8 <straight_table>:


float straight_table(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration,MOTOR_MODE mode) {
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	ed87 0a05 	vstr	s0, [r7, #20]
 8001ab2:	edc7 0a04 	vstr	s1, [r7, #16]
 8001ab6:	ed87 1a03 	vstr	s2, [r7, #12]
 8001aba:	edc7 1a02 	vstr	s3, [r7, #8]
 8001abe:	ed87 2a01 	vstr	s4, [r7, #4]
 8001ac2:	6038      	str	r0, [r7, #0]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8001ac4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ac8:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8001acc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ad0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ad4:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8001ad8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001adc:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8001ae0:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ae8:	edc7 7a07 	vstr	s15, [r7, #28]

	g_WallControl_mode=mode.WallControlMode;
 8001aec:	783a      	ldrb	r2, [r7, #0]
 8001aee:	4b60      	ldr	r3, [pc, #384]	; (8001c70 <straight_table+0x1c8>)
 8001af0:	701a      	strb	r2, [r3, #0]
	//g_WallControlStatus=mode.WallControlStatus;
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8001af2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001af6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afe:	d505      	bpl.n	8001b0c <straight_table+0x64>
 8001b00:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b04:	eef1 7a67 	vneg.f32	s15, s15
 8001b08:	edc7 7a01 	vstr	s15, [r7, #4]

	g_TrapezoidStraight.displacement = input_displacement;
 8001b0c:	4a59      	ldr	r2, [pc, #356]	; (8001c74 <straight_table+0x1cc>)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	6013      	str	r3, [r2, #0]
	g_TrapezoidStraight.start_velocity = input_start_velocity;
 8001b12:	4a58      	ldr	r2, [pc, #352]	; (8001c74 <straight_table+0x1cc>)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	6053      	str	r3, [r2, #4]
	g_TrapezoidStraight.end_velocity = input_end_velocity;
 8001b18:	4a56      	ldr	r2, [pc, #344]	; (8001c74 <straight_table+0x1cc>)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6093      	str	r3, [r2, #8]
	g_TrapezoidStraight.count_velocity = input_count_velocity;
 8001b1e:	4a55      	ldr	r2, [pc, #340]	; (8001c74 <straight_table+0x1cc>)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	60d3      	str	r3, [r2, #12]
	g_TrapezoidStraight.acceleration = input_acceleration;
 8001b24:	4a53      	ldr	r2, [pc, #332]	; (8001c74 <straight_table+0x1cc>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){g_TargetStraight.acceleration = input_acceleration;
 8001b2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b36:	db03      	blt.n	8001b40 <straight_table+0x98>
 8001b38:	4a4f      	ldr	r2, [pc, #316]	; (8001c78 <straight_table+0x1d0>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6053      	str	r3, [r2, #4]
 8001b3e:	e006      	b.n	8001b4e <straight_table+0xa6>
	}else{g_TargetStraight.acceleration = -input_acceleration;}
 8001b40:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b44:	eef1 7a67 	vneg.f32	s15, s15
 8001b48:	4b4b      	ldr	r3, [pc, #300]	; (8001c78 <straight_table+0x1d0>)
 8001b4a:	edc3 7a01 	vstr	s15, [r3, #4]
	g_TargetStraight.velocity = input_start_velocity;
 8001b4e:	4a4a      	ldr	r2, [pc, #296]	; (8001c78 <straight_table+0x1d0>)
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	6013      	str	r3, [r2, #0]
	g_TargetStraight.displacement = 0;
 8001b54:	4b48      	ldr	r3, [pc, #288]	; (8001c78 <straight_table+0x1d0>)
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
	g_TargetTurning.velocity = 0;
 8001b5c:	4b47      	ldr	r3, [pc, #284]	; (8001c7c <straight_table+0x1d4>)
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
	g_TargetTurning.acceleration = 0;
 8001b64:	4b45      	ldr	r3, [pc, #276]	; (8001c7c <straight_table+0x1d4>)
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	605a      	str	r2, [r3, #4]
	g_TargetTurning.displacement = 0;
 8001b6c:	4b43      	ldr	r3, [pc, #268]	; (8001c7c <straight_table+0x1d4>)
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]

	g_acc_flag=1;
 8001b74:	4b42      	ldr	r3, [pc, #264]	; (8001c80 <straight_table+0x1d8>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;g_TargetStraight.acceleration = input_acceleration;}
 8001b7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b86:	dd0e      	ble.n	8001ba6 <straight_table+0xfe>
 8001b88:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b98:	dd05      	ble.n	8001ba6 <straight_table+0xfe>
 8001b9a:	4b39      	ldr	r3, [pc, #228]	; (8001c80 <straight_table+0x1d8>)
 8001b9c:	2205      	movs	r2, #5
 8001b9e:	701a      	strb	r2, [r3, #0]
 8001ba0:	4a35      	ldr	r2, [pc, #212]	; (8001c78 <straight_table+0x1d0>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;g_TargetStraight.acceleration = -input_acceleration;}
 8001ba6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001baa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb2:	dd14      	ble.n	8001bde <straight_table+0x136>
 8001bb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bb8:	eef1 7a67 	vneg.f32	s15, s15
 8001bbc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc8:	d509      	bpl.n	8001bde <straight_table+0x136>
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <straight_table+0x1d8>)
 8001bcc:	2206      	movs	r2, #6
 8001bce:	701a      	strb	r2, [r3, #0]
 8001bd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bd4:	eef1 7a67 	vneg.f32	s15, s15
 8001bd8:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <straight_table+0x1d0>)
 8001bda:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;g_TargetStraight.acceleration = -input_acceleration;}
 8001bde:	edd7 7a05 	vldr	s15, [r7, #20]
 8001be2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bea:	d514      	bpl.n	8001c16 <straight_table+0x16e>
 8001bec:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bf0:	eef1 7a67 	vneg.f32	s15, s15
 8001bf4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c00:	dd09      	ble.n	8001c16 <straight_table+0x16e>
 8001c02:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <straight_table+0x1d8>)
 8001c04:	2205      	movs	r2, #5
 8001c06:	701a      	strb	r2, [r3, #0]
 8001c08:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c0c:	eef1 7a67 	vneg.f32	s15, s15
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <straight_table+0x1d0>)
 8001c12:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;g_TargetStraight.acceleration = input_acceleration;}
 8001c16:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c22:	d50e      	bpl.n	8001c42 <straight_table+0x19a>
 8001c24:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c28:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c34:	d505      	bpl.n	8001c42 <straight_table+0x19a>
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <straight_table+0x1d8>)
 8001c38:	2206      	movs	r2, #6
 8001c3a:	701a      	strb	r2, [r3, #0]
 8001c3c:	4a0e      	ldr	r2, [pc, #56]	; (8001c78 <straight_table+0x1d0>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <straight_table+0x1dc>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]



	//pl_motor_start();
	while (g_acc_flag!=4){
 8001c48:	bf00      	nop
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <straight_table+0x1d8>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d1fa      	bne.n	8001c4a <straight_table+0x1a2>
//		printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d\n", g_motorCount_l,g_motorCount_r,g_motorCount_l,g_motorCount_l);
	}
	modeacc = 0;
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <straight_table+0x1dc>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]

	//pl_motor_stop();

	return g_TargetStraight.velocity;
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <straight_table+0x1d0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	ee07 3a90 	vmov	s15, r3
}
 8001c62:	eeb0 0a67 	vmov.f32	s0, s15
 8001c66:	3724      	adds	r7, #36	; 0x24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	2000039c 	.word	0x2000039c
 8001c74:	20000210 	.word	0x20000210
 8001c78:	200001f8 	.word	0x200001f8
 8001c7c:	20000204 	.word	0x20000204
 8001c80:	20000239 	.word	0x20000239
 8001c84:	20000238 	.word	0x20000238

08001c88 <turning_table>:


float turning_table(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001c92:	edc7 0a04 	vstr	s1, [r7, #16]
 8001c96:	ed87 1a03 	vstr	s2, [r7, #12]
 8001c9a:	edc7 1a02 	vstr	s3, [r7, #8]
 8001c9e:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8001ca2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ca6:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8001caa:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cb2:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8001cb6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001cba:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8001cbe:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cc6:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8001cca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd6:	d505      	bpl.n	8001ce4 <turning_table+0x5c>
 8001cd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cdc:	eef1 7a67 	vneg.f32	s15, s15
 8001ce0:	edc7 7a01 	vstr	s15, [r7, #4]

	g_TrapezoidTurning.displacement = input_displacement;
 8001ce4:	4a58      	ldr	r2, [pc, #352]	; (8001e48 <turning_table+0x1c0>)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	6013      	str	r3, [r2, #0]
	g_TrapezoidTurning.start_velocity = input_start_velocity;
 8001cea:	4a57      	ldr	r2, [pc, #348]	; (8001e48 <turning_table+0x1c0>)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	6053      	str	r3, [r2, #4]
	g_TrapezoidTurning.end_velocity = input_end_velocity;
 8001cf0:	4a55      	ldr	r2, [pc, #340]	; (8001e48 <turning_table+0x1c0>)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6093      	str	r3, [r2, #8]
	g_TrapezoidTurning.count_velocity = input_count_velocity;
 8001cf6:	4a54      	ldr	r2, [pc, #336]	; (8001e48 <turning_table+0x1c0>)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	60d3      	str	r3, [r2, #12]
	g_TrapezoidTurning.acceleration = input_acceleration;
 8001cfc:	4a52      	ldr	r2, [pc, #328]	; (8001e48 <turning_table+0x1c0>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){g_TargetTurning.acceleration = input_acceleration;
 8001d02:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0e:	db03      	blt.n	8001d18 <turning_table+0x90>
 8001d10:	4a4e      	ldr	r2, [pc, #312]	; (8001e4c <turning_table+0x1c4>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6053      	str	r3, [r2, #4]
 8001d16:	e006      	b.n	8001d26 <turning_table+0x9e>
	}else{g_TargetTurning.acceleration = -input_acceleration;}
 8001d18:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d1c:	eef1 7a67 	vneg.f32	s15, s15
 8001d20:	4b4a      	ldr	r3, [pc, #296]	; (8001e4c <turning_table+0x1c4>)
 8001d22:	edc3 7a01 	vstr	s15, [r3, #4]
	g_TargetTurning.velocity = input_start_velocity;
 8001d26:	4a49      	ldr	r2, [pc, #292]	; (8001e4c <turning_table+0x1c4>)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	6013      	str	r3, [r2, #0]
	g_TargetTurning.displacement = 0;
 8001d2c:	4b47      	ldr	r3, [pc, #284]	; (8001e4c <turning_table+0x1c4>)
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
	g_TargetStraight.velocity = 0;
 8001d34:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <turning_table+0x1c8>)
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
	g_TargetStraight.acceleration = 0;
 8001d3c:	4b44      	ldr	r3, [pc, #272]	; (8001e50 <turning_table+0x1c8>)
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	605a      	str	r2, [r3, #4]
	g_TargetStraight.displacement = 0;
 8001d44:	4b42      	ldr	r3, [pc, #264]	; (8001e50 <turning_table+0x1c8>)
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]

	g_acc_flag=1;
 8001d4c:	4b41      	ldr	r3, [pc, #260]	; (8001e54 <turning_table+0x1cc>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;g_TargetTurning.acceleration = input_acceleration;}
 8001d52:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5e:	dd0e      	ble.n	8001d7e <turning_table+0xf6>
 8001d60:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d64:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d70:	dd05      	ble.n	8001d7e <turning_table+0xf6>
 8001d72:	4b38      	ldr	r3, [pc, #224]	; (8001e54 <turning_table+0x1cc>)
 8001d74:	2205      	movs	r2, #5
 8001d76:	701a      	strb	r2, [r3, #0]
 8001d78:	4a34      	ldr	r2, [pc, #208]	; (8001e4c <turning_table+0x1c4>)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;g_TargetTurning.acceleration = -input_acceleration;}
 8001d7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8a:	dd14      	ble.n	8001db6 <turning_table+0x12e>
 8001d8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d90:	eef1 7a67 	vneg.f32	s15, s15
 8001d94:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da0:	d509      	bpl.n	8001db6 <turning_table+0x12e>
 8001da2:	4b2c      	ldr	r3, [pc, #176]	; (8001e54 <turning_table+0x1cc>)
 8001da4:	2206      	movs	r2, #6
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dac:	eef1 7a67 	vneg.f32	s15, s15
 8001db0:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <turning_table+0x1c4>)
 8001db2:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;g_TargetTurning.acceleration = -input_acceleration;}
 8001db6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc2:	d514      	bpl.n	8001dee <turning_table+0x166>
 8001dc4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dc8:	eef1 7a67 	vneg.f32	s15, s15
 8001dcc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001dd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd8:	dd09      	ble.n	8001dee <turning_table+0x166>
 8001dda:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <turning_table+0x1cc>)
 8001ddc:	2205      	movs	r2, #5
 8001dde:	701a      	strb	r2, [r3, #0]
 8001de0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001de4:	eef1 7a67 	vneg.f32	s15, s15
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <turning_table+0x1c4>)
 8001dea:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;g_TargetTurning.acceleration = input_acceleration;}
 8001dee:	edd7 7a05 	vldr	s15, [r7, #20]
 8001df2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfa:	d50e      	bpl.n	8001e1a <turning_table+0x192>
 8001dfc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e00:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0c:	d505      	bpl.n	8001e1a <turning_table+0x192>
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <turning_table+0x1cc>)
 8001e10:	2206      	movs	r2, #6
 8001e12:	701a      	strb	r2, [r3, #0]
 8001e14:	4a0d      	ldr	r2, [pc, #52]	; (8001e4c <turning_table+0x1c4>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8001e1a:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <turning_table+0x1d0>)
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	701a      	strb	r2, [r3, #0]


	//pl_motor_start();
	while (g_acc_flag!=4){
 8001e20:	bf00      	nop
 8001e22:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <turning_table+0x1cc>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d1fa      	bne.n	8001e22 <turning_table+0x19a>

	}
	modeacc = 0;
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <turning_table+0x1d0>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]

	//pl_motor_stop();

	return g_TargetTurning.velocity;
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <turning_table+0x1c4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	ee07 3a90 	vmov	s15, r3
}
 8001e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e3e:	3724      	adds	r7, #36	; 0x24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	20000224 	.word	0x20000224
 8001e4c:	20000204 	.word	0x20000204
 8001e50:	200001f8 	.word	0x200001f8
 8001e54:	20000239 	.word	0x20000239
 8001e58:	20000238 	.word	0x20000238

08001e5c <interrupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interrupt_calSensor(void){
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
	int j;

//	if (sensor_mode == 1) {
	for (j = 19; j >= 1; j--) {
 8001e62:	2313      	movs	r3, #19
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	e02c      	b.n	8001ec2 <interrupt_calSensor+0x66>
		g_sensor[0][j] = g_sensor[0][j - 1];
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	4a4d      	ldr	r2, [pc, #308]	; (8001fa4 <interrupt_calSensor+0x148>)
 8001e6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e72:	494c      	ldr	r1, [pc, #304]	; (8001fa4 <interrupt_calSensor+0x148>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	4a49      	ldr	r2, [pc, #292]	; (8001fa4 <interrupt_calSensor+0x148>)
 8001e80:	3314      	adds	r3, #20
 8001e82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e86:	4947      	ldr	r1, [pc, #284]	; (8001fa4 <interrupt_calSensor+0x148>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3314      	adds	r3, #20
 8001e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	4a43      	ldr	r2, [pc, #268]	; (8001fa4 <interrupt_calSensor+0x148>)
 8001e96:	3328      	adds	r3, #40	; 0x28
 8001e98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e9c:	4941      	ldr	r1, [pc, #260]	; (8001fa4 <interrupt_calSensor+0x148>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3328      	adds	r3, #40	; 0x28
 8001ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	4a3e      	ldr	r2, [pc, #248]	; (8001fa4 <interrupt_calSensor+0x148>)
 8001eac:	333c      	adds	r3, #60	; 0x3c
 8001eae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001eb2:	493c      	ldr	r1, [pc, #240]	; (8001fa4 <interrupt_calSensor+0x148>)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	333c      	adds	r3, #60	; 0x3c
 8001eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	dccf      	bgt.n	8001e68 <interrupt_calSensor+0xc>
	}
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 8001ec8:	4b37      	ldr	r3, [pc, #220]	; (8001fa8 <interrupt_calSensor+0x14c>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4b37      	ldr	r3, [pc, #220]	; (8001fac <interrupt_calSensor+0x150>)
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	4a33      	ldr	r2, [pc, #204]	; (8001fa4 <interrupt_calSensor+0x148>)
 8001ed6:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 8001ed8:	4b33      	ldr	r3, [pc, #204]	; (8001fa8 <interrupt_calSensor+0x14c>)
 8001eda:	885b      	ldrh	r3, [r3, #2]
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b33      	ldr	r3, [pc, #204]	; (8001fac <interrupt_calSensor+0x150>)
 8001ee0:	885b      	ldrh	r3, [r3, #2]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	4a2f      	ldr	r2, [pc, #188]	; (8001fa4 <interrupt_calSensor+0x148>)
 8001ee6:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 8001ee8:	4b2f      	ldr	r3, [pc, #188]	; (8001fa8 <interrupt_calSensor+0x14c>)
 8001eea:	889b      	ldrh	r3, [r3, #4]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b2f      	ldr	r3, [pc, #188]	; (8001fac <interrupt_calSensor+0x150>)
 8001ef0:	889b      	ldrh	r3, [r3, #4]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	4a2b      	ldr	r2, [pc, #172]	; (8001fa4 <interrupt_calSensor+0x148>)
 8001ef6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 8001efa:	4b2b      	ldr	r3, [pc, #172]	; (8001fa8 <interrupt_calSensor+0x14c>)
 8001efc:	88db      	ldrh	r3, [r3, #6]
 8001efe:	461a      	mov	r2, r3
 8001f00:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <interrupt_calSensor+0x150>)
 8001f02:	88db      	ldrh	r3, [r3, #6]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	4a27      	ldr	r2, [pc, #156]	; (8001fa4 <interrupt_calSensor+0x148>)
 8001f08:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	for (j = 0; j <= 3; j++) {
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	e03d      	b.n	8001f8e <interrupt_calSensor+0x132>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 8001f12:	4924      	ldr	r1, [pc, #144]	; (8001fa4 <interrupt_calSensor+0x148>)
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	440b      	add	r3, r1
 8001f20:	6819      	ldr	r1, [r3, #0]
 8001f22:	4820      	ldr	r0, [pc, #128]	; (8001fa4 <interrupt_calSensor+0x148>)
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	4403      	add	r3, r0
 8001f30:	332c      	adds	r3, #44	; 0x2c
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	1aca      	subs	r2, r1, r3
 8001f36:	491e      	ldr	r1, [pc, #120]	; (8001fb0 <interrupt_calSensor+0x154>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 8001f3e:	4919      	ldr	r1, [pc, #100]	; (8001fa4 <interrupt_calSensor+0x148>)
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	440b      	add	r3, r1
 8001f4c:	6819      	ldr	r1, [r3, #0]
 8001f4e:	4815      	ldr	r0, [pc, #84]	; (8001fa4 <interrupt_calSensor+0x148>)
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	4403      	add	r3, r0
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4419      	add	r1, r3
 8001f62:	4810      	ldr	r0, [pc, #64]	; (8001fa4 <interrupt_calSensor+0x148>)
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	4403      	add	r3, r0
 8001f70:	3308      	adds	r3, #8
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	440b      	add	r3, r1
 8001f76:	4a0f      	ldr	r2, [pc, #60]	; (8001fb4 <interrupt_calSensor+0x158>)
 8001f78:	fb82 1203 	smull	r1, r2, r2, r3
 8001f7c:	17db      	asrs	r3, r3, #31
 8001f7e:	1ad2      	subs	r2, r2, r3
 8001f80:	490d      	ldr	r1, [pc, #52]	; (8001fb8 <interrupt_calSensor+0x15c>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 3; j++) {
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	607b      	str	r3, [r7, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	ddbe      	ble.n	8001f12 <interrupt_calSensor+0xb6>
	}


//	}

}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	2000023c 	.word	0x2000023c
 8001fa8:	200003b0 	.word	0x200003b0
 8001fac:	200003b8 	.word	0x200003b8
 8001fb0:	2000037c 	.word	0x2000037c
 8001fb4:	55555556 	.word	0x55555556
 8001fb8:	2000038c 	.word	0x2000038c

08001fbc <init_WallControl>:

uint8_t g_WallControl_mode;//0で壁制御なし、1で通常の壁制御、2で斜めの制御
uint8_t g_WallControlStatus;
uint8_t StabilityCount_L,StabilityCount_R;

void init_WallControl(void){
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
	g_WallControl_mode=0;
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <init_WallControl+0x28>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]
	g_WallControlStatus=0;
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <init_WallControl+0x2c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
	StabilityCount_L=0;
 8001fcc:	4b07      	ldr	r3, [pc, #28]	; (8001fec <init_WallControl+0x30>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
	StabilityCount_R=0;
 8001fd2:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <init_WallControl+0x34>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	2000039c 	.word	0x2000039c
 8001fe8:	2000039d 	.word	0x2000039d
 8001fec:	2000039e 	.word	0x2000039e
 8001ff0:	2000039f 	.word	0x2000039f

08001ff4 <calWallConrol>:

float calWallConrol(void){
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
//	SensorDistanceR = -0.0000001684 * g_sensor[2][0] * g_sensor[2][0] * g_sensor[2][0]
//				+ 0.0004061427 * g_sensor[2][0] * g_sensor[2][0] - 0.3784837856 * g_sensor[2][0]
//				+ 197.1162;


    if(g_WallControl_mode == 0){
 8001ffa:	4b6c      	ldr	r3, [pc, #432]	; (80021ac <calWallConrol+0x1b8>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10c      	bne.n	800201c <calWallConrol+0x28>
    	g_WallControlStatus=0;
 8002002:	4b6b      	ldr	r3, [pc, #428]	; (80021b0 <calWallConrol+0x1bc>)
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
    	StabilityCount_L=0;
 8002008:	4b6a      	ldr	r3, [pc, #424]	; (80021b4 <calWallConrol+0x1c0>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
    	StabilityCount_R=0;
 800200e:	4b6a      	ldr	r3, [pc, #424]	; (80021b8 <calWallConrol+0x1c4>)
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
    	PID_wall=0;
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	e0bd      	b.n	8002198 <calWallConrol+0x1a4>

    }else if (g_WallControl_mode == 1) {
 800201c:	4b63      	ldr	r3, [pc, #396]	; (80021ac <calWallConrol+0x1b8>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b01      	cmp	r3, #1
 8002022:	f040 80b8 	bne.w	8002196 <calWallConrol+0x1a2>

		// 左壁の有無の判定
		if ((g_WallControlStatus >> 0)&1 == 1){
 8002026:	4b62      	ldr	r3, [pc, #392]	; (80021b0 <calWallConrol+0x1bc>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00e      	beq.n	8002050 <calWallConrol+0x5c>
			//前回左壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_L || g_sensor_diff[SENSOR_LEFT] > CONTROLWALLCUT_THRESHOLD_L){
 8002032:	4b62      	ldr	r3, [pc, #392]	; (80021bc <calWallConrol+0x1c8>)
 8002034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002036:	2b77      	cmp	r3, #119	; 0x77
 8002038:	dd03      	ble.n	8002042 <calWallConrol+0x4e>
 800203a:	4b61      	ldr	r3, [pc, #388]	; (80021c0 <calWallConrol+0x1cc>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b28      	cmp	r3, #40	; 0x28
 8002040:	dd22      	ble.n	8002088 <calWallConrol+0x94>
				g_WallControlStatus=g_WallControlStatus - 1;
 8002042:	4b5b      	ldr	r3, [pc, #364]	; (80021b0 <calWallConrol+0x1bc>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	3b01      	subs	r3, #1
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4b59      	ldr	r3, [pc, #356]	; (80021b0 <calWallConrol+0x1bc>)
 800204c:	701a      	strb	r2, [r3, #0]
 800204e:	e01b      	b.n	8002088 <calWallConrol+0x94>
			}
		}else{
			//前回左壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_L && g_sensor_diff[SENSOR_LEFT] < CONTROLWALLCUT_THRESHOLD_L){
 8002050:	4b5a      	ldr	r3, [pc, #360]	; (80021bc <calWallConrol+0x1c8>)
 8002052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002054:	2b78      	cmp	r3, #120	; 0x78
 8002056:	dd0a      	ble.n	800206e <calWallConrol+0x7a>
 8002058:	4b59      	ldr	r3, [pc, #356]	; (80021c0 <calWallConrol+0x1cc>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b27      	cmp	r3, #39	; 0x27
 800205e:	dc06      	bgt.n	800206e <calWallConrol+0x7a>
				StabilityCount_L++;
 8002060:	4b54      	ldr	r3, [pc, #336]	; (80021b4 <calWallConrol+0x1c0>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	3301      	adds	r3, #1
 8002066:	b2da      	uxtb	r2, r3
 8002068:	4b52      	ldr	r3, [pc, #328]	; (80021b4 <calWallConrol+0x1c0>)
 800206a:	701a      	strb	r2, [r3, #0]
 800206c:	e002      	b.n	8002074 <calWallConrol+0x80>
			}else{
				StabilityCount_L=0;
 800206e:	4b51      	ldr	r3, [pc, #324]	; (80021b4 <calWallConrol+0x1c0>)
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
			}
			if(StabilityCount_L>=10){
 8002074:	4b4f      	ldr	r3, [pc, #316]	; (80021b4 <calWallConrol+0x1c0>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b09      	cmp	r3, #9
 800207a:	d905      	bls.n	8002088 <calWallConrol+0x94>
				g_WallControlStatus=g_WallControlStatus + 1;
 800207c:	4b4c      	ldr	r3, [pc, #304]	; (80021b0 <calWallConrol+0x1bc>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	3301      	adds	r3, #1
 8002082:	b2da      	uxtb	r2, r3
 8002084:	4b4a      	ldr	r3, [pc, #296]	; (80021b0 <calWallConrol+0x1bc>)
 8002086:	701a      	strb	r2, [r3, #0]
			}
		}
		// 右壁の有無の判定
		if ((g_WallControlStatus >> 1)&1 == 1){
 8002088:	4b49      	ldr	r3, [pc, #292]	; (80021b0 <calWallConrol+0x1bc>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	085b      	lsrs	r3, r3, #1
 800208e:	b2db      	uxtb	r3, r3
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00f      	beq.n	80020b8 <calWallConrol+0xc4>
			//前回右壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_R || g_sensor_diff[SENSOR_RIGHT] > CONTROLWALLCUT_THRESHOLD_R){
 8002098:	4b48      	ldr	r3, [pc, #288]	; (80021bc <calWallConrol+0x1c8>)
 800209a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800209e:	2b77      	cmp	r3, #119	; 0x77
 80020a0:	dd03      	ble.n	80020aa <calWallConrol+0xb6>
 80020a2:	4b47      	ldr	r3, [pc, #284]	; (80021c0 <calWallConrol+0x1cc>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b28      	cmp	r3, #40	; 0x28
 80020a8:	dd23      	ble.n	80020f2 <calWallConrol+0xfe>
				g_WallControlStatus=g_WallControlStatus - 2;
 80020aa:	4b41      	ldr	r3, [pc, #260]	; (80021b0 <calWallConrol+0x1bc>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	3b02      	subs	r3, #2
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4b3f      	ldr	r3, [pc, #252]	; (80021b0 <calWallConrol+0x1bc>)
 80020b4:	701a      	strb	r2, [r3, #0]
 80020b6:	e01c      	b.n	80020f2 <calWallConrol+0xfe>
			}
		}else{
			//前回右壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_R && g_sensor_diff[SENSOR_RIGHT] < CONTROLWALLCUT_THRESHOLD_R){
 80020b8:	4b40      	ldr	r3, [pc, #256]	; (80021bc <calWallConrol+0x1c8>)
 80020ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80020be:	2b78      	cmp	r3, #120	; 0x78
 80020c0:	dd0a      	ble.n	80020d8 <calWallConrol+0xe4>
 80020c2:	4b3f      	ldr	r3, [pc, #252]	; (80021c0 <calWallConrol+0x1cc>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	2b27      	cmp	r3, #39	; 0x27
 80020c8:	dc06      	bgt.n	80020d8 <calWallConrol+0xe4>
				StabilityCount_R++;
 80020ca:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <calWallConrol+0x1c4>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	3301      	adds	r3, #1
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4b39      	ldr	r3, [pc, #228]	; (80021b8 <calWallConrol+0x1c4>)
 80020d4:	701a      	strb	r2, [r3, #0]
 80020d6:	e002      	b.n	80020de <calWallConrol+0xea>
			}else{
				StabilityCount_R=0;
 80020d8:	4b37      	ldr	r3, [pc, #220]	; (80021b8 <calWallConrol+0x1c4>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
			}
			if(StabilityCount_R>=10){
 80020de:	4b36      	ldr	r3, [pc, #216]	; (80021b8 <calWallConrol+0x1c4>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b09      	cmp	r3, #9
 80020e4:	d905      	bls.n	80020f2 <calWallConrol+0xfe>
				g_WallControlStatus=g_WallControlStatus + 2;
 80020e6:	4b32      	ldr	r3, [pc, #200]	; (80021b0 <calWallConrol+0x1bc>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	3302      	adds	r3, #2
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	4b30      	ldr	r3, [pc, #192]	; (80021b0 <calWallConrol+0x1bc>)
 80020f0:	701a      	strb	r2, [r3, #0]
			}
		}
		switch (g_WallControlStatus){
 80020f2:	4b2f      	ldr	r3, [pc, #188]	; (80021b0 <calWallConrol+0x1bc>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d84e      	bhi.n	8002198 <calWallConrol+0x1a4>
 80020fa:	a201      	add	r2, pc, #4	; (adr r2, 8002100 <calWallConrol+0x10c>)
 80020fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002100:	08002111 	.word	0x08002111
 8002104:	08002119 	.word	0x08002119
 8002108:	0800213b 	.word	0x0800213b
 800210c:	08002163 	.word	0x08002163
		case 0://両壁なし
			PID_wall= 0;
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	607b      	str	r3, [r7, #4]
		break;
 8002116:	e03f      	b.n	8002198 <calWallConrol+0x1a4>
		case 1://左壁のみ
			PID_wall= SENSOR_GAIN*(2*(float)(g_sensor[SENSOR_LEFT][0] - CENTER_L));
 8002118:	4b28      	ldr	r3, [pc, #160]	; (80021bc <calWallConrol+0x1c8>)
 800211a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800211c:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8002120:	ee07 3a90 	vmov	s15, r3
 8002124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002128:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800212c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002130:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002134:	edc7 7a01 	vstr	s15, [r7, #4]
		break;
 8002138:	e02e      	b.n	8002198 <calWallConrol+0x1a4>
		case 2://右壁のみ
			PID_wall= SENSOR_GAIN * (-2 * (float)(g_sensor[SENSOR_RIGHT][0] - CENTER_R));
 800213a:	4b20      	ldr	r3, [pc, #128]	; (80021bc <calWallConrol+0x1c8>)
 800213c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002140:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 8002144:	ee07 3a90 	vmov	s15, r3
 8002148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800214c:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002150:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002154:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002158:	ee67 7a87 	vmul.f32	s15, s15, s14
 800215c:	edc7 7a01 	vstr	s15, [r7, #4]
		break;
 8002160:	e01a      	b.n	8002198 <calWallConrol+0x1a4>
		case 3://両壁あり
			PID_wall= SENSOR_GAIN * ((float)(g_sensor[SENSOR_LEFT][0] - CENTER_L)-(float)(g_sensor[SENSOR_RIGHT][0] - CENTER_R));
 8002162:	4b16      	ldr	r3, [pc, #88]	; (80021bc <calWallConrol+0x1c8>)
 8002164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002166:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800216a:	ee07 3a90 	vmov	s15, r3
 800216e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <calWallConrol+0x1c8>)
 8002174:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002178:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 800217c:	ee07 3a90 	vmov	s15, r3
 8002180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002188:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800218c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002190:	edc7 7a01 	vstr	s15, [r7, #4]
		break;
 8002194:	e000      	b.n	8002198 <calWallConrol+0x1a4>
		}


	}
 8002196:	bf00      	nop




	return PID_wall;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	ee07 3a90 	vmov	s15, r3
}
 800219e:	eeb0 0a67 	vmov.f32	s0, s15
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	2000039c 	.word	0x2000039c
 80021b0:	2000039d 	.word	0x2000039d
 80021b4:	2000039e 	.word	0x2000039e
 80021b8:	2000039f 	.word	0x2000039f
 80021bc:	2000023c 	.word	0x2000023c
 80021c0:	2000037c 	.word	0x2000037c

080021c4 <lcd_cmd>:
#include "PL_lcd.h"
#include "i2c.h"


void lcd_cmd(uint8_t x)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	4603      	mov	r3, r0
 80021cc:	71fb      	strb	r3, [r7, #7]
  uint8_t aTxBuffer[2] = { 0x00, x };
 80021ce:	2300      	movs	r3, #0
 80021d0:	733b      	strb	r3, [r7, #12]
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 80021d6:	e007      	b.n	80021e8 <lcd_cmd+0x24>
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80021d8:	480c      	ldr	r0, [pc, #48]	; (800220c <lcd_cmd+0x48>)
 80021da:	f005 fa35 	bl	8007648 <HAL_I2C_GetError>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d001      	beq.n	80021e8 <lcd_cmd+0x24>
    {
      Error_Handler();
 80021e4:	f001 fef1 	bl	8003fca <Error_Handler>
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 80021e8:	f107 020c 	add.w	r2, r7, #12
 80021ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2302      	movs	r3, #2
 80021f4:	217c      	movs	r1, #124	; 0x7c
 80021f6:	4805      	ldr	r0, [pc, #20]	; (800220c <lcd_cmd+0x48>)
 80021f8:	f005 f932 	bl	8007460 <HAL_I2C_Master_Transmit>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1ea      	bne.n	80021d8 <lcd_cmd+0x14>
    }
  }
}
 8002202:	bf00      	nop
 8002204:	bf00      	nop
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000a04 	.word	0x20000a04

08002210 <lcd_data>:

void lcd_data(uint8_t x)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af02      	add	r7, sp, #8
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
  uint8_t aTxBuffer[2] = { 0x40, x };
 800221a:	2340      	movs	r3, #64	; 0x40
 800221c:	733b      	strb	r3, [r7, #12]
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 8002222:	e007      	b.n	8002234 <lcd_data+0x24>
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8002224:	480c      	ldr	r0, [pc, #48]	; (8002258 <lcd_data+0x48>)
 8002226:	f005 fa0f 	bl	8007648 <HAL_I2C_GetError>
 800222a:	4603      	mov	r3, r0
 800222c:	2b04      	cmp	r3, #4
 800222e:	d001      	beq.n	8002234 <lcd_data+0x24>
    {
      Error_Handler();
 8002230:	f001 fecb 	bl	8003fca <Error_Handler>
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 8002234:	f107 020c 	add.w	r2, r7, #12
 8002238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2302      	movs	r3, #2
 8002240:	217c      	movs	r1, #124	; 0x7c
 8002242:	4805      	ldr	r0, [pc, #20]	; (8002258 <lcd_data+0x48>)
 8002244:	f005 f90c 	bl	8007460 <HAL_I2C_Master_Transmit>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1ea      	bne.n	8002224 <lcd_data+0x14>
    }
  }
}
 800224e:	bf00      	nop
 8002250:	bf00      	nop
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000a04 	.word	0x20000a04

0800225c <pl_lcd_puts>:

void pl_lcd_puts(const char *s)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  while(*s) lcd_data(*s++);
 8002264:	e006      	b.n	8002274 <pl_lcd_puts+0x18>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff ffce 	bl	8002210 <lcd_data>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f4      	bne.n	8002266 <pl_lcd_puts+0xa>
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <pl_lcd_init>:

// param:
//  contrast: 0 ~ 63 (最初は大きくして調整)
void pl_lcd_init(void)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	af00      	add	r7, sp, #0
  // LCD initialize(裏面に記載)
  lcd_cmd(0x38); // function set
 800228a:	2038      	movs	r0, #56	; 0x38
 800228c:	f7ff ff9a 	bl	80021c4 <lcd_cmd>
  lcd_cmd(0x39); // function set
 8002290:	2039      	movs	r0, #57	; 0x39
 8002292:	f7ff ff97 	bl	80021c4 <lcd_cmd>
  lcd_cmd(0x14); // interval osc
 8002296:	2014      	movs	r0, #20
 8002298:	f7ff ff94 	bl	80021c4 <lcd_cmd>
  lcd_cmd(0x70); // contrast low
 800229c:	2070      	movs	r0, #112	; 0x70
 800229e:	f7ff ff91 	bl	80021c4 <lcd_cmd>
  lcd_cmd(0x56); // contrast high / icon / power
 80022a2:	2056      	movs	r0, #86	; 0x56
 80022a4:	f7ff ff8e 	bl	80021c4 <lcd_cmd>
  lcd_cmd(0x6c); // follower control
 80022a8:	206c      	movs	r0, #108	; 0x6c
 80022aa:	f7ff ff8b 	bl	80021c4 <lcd_cmd>
  HAL_Delay(300);
 80022ae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80022b2:	f002 ffc3 	bl	800523c <HAL_Delay>
  lcd_cmd(0x38); // function set
 80022b6:	2038      	movs	r0, #56	; 0x38
 80022b8:	f7ff ff84 	bl	80021c4 <lcd_cmd>
  lcd_cmd(0x0c); // display on
 80022bc:	200c      	movs	r0, #12
 80022be:	f7ff ff81 	bl	80021c4 <lcd_cmd>
  lcd_cmd(0x01); // clear display
 80022c2:	2001      	movs	r0, #1
 80022c4:	f7ff ff7e 	bl	80021c4 <lcd_cmd>
  HAL_Delay(2);
 80022c8:	2002      	movs	r0, #2
 80022ca:	f002 ffb7 	bl	800523c <HAL_Delay>
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <pl_lcd_pos>:

void pl_lcd_move(uint8_t pos){
  lcd_cmd(0x80 | pos);
}

void pl_lcd_pos(uint8_t raw, uint8_t col) {
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	4603      	mov	r3, r0
 80022da:	460a      	mov	r2, r1
 80022dc:	71fb      	strb	r3, [r7, #7]
 80022de:	4613      	mov	r3, r2
 80022e0:	71bb      	strb	r3, [r7, #6]
  lcd_cmd(0x80 | ((raw & 0x01) << 6) | col);
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	019b      	lsls	r3, r3, #6
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	79bb      	ldrb	r3, [r7, #6]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff ff62 	bl	80021c4 <lcd_cmd>
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <pl_lcd_clear>:

void pl_lcd_clear() {
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  lcd_cmd(0x01);
 800230c:	2001      	movs	r0, #1
 800230e:	f7ff ff59 	bl	80021c4 <lcd_cmd>
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <write_LED>:


#include "PL_led.h"
#include "gpio.h"

void write_LED(char pin){
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(INTERFACELED_GPIO_Port,INTERFACELED_Pin,pin);
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	461a      	mov	r2, r3
 8002326:	2108      	movs	r1, #8
 8002328:	4803      	ldr	r0, [pc, #12]	; (8002338 <write_LED+0x20>)
 800232a:	f004 fff1 	bl	8007310 <HAL_GPIO_WritePin>

}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	48000400 	.word	0x48000400

0800233c <pl_motor_init>:
/*	モータの初期化					(pl_speaker_init)	*/
/*******************************************************************/
/*	モータの初期化する。						*/
/*******************************************************************/
void pl_motor_init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0

	  HAL_TIM_Base_Start_IT(&htim1);//motor
 8002340:	480a      	ldr	r0, [pc, #40]	; (800236c <pl_motor_init+0x30>)
 8002342:	f006 fd63 	bl	8008e0c <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim1);//motor
 8002346:	4809      	ldr	r0, [pc, #36]	; (800236c <pl_motor_init+0x30>)
 8002348:	f002 fd46 	bl	8004dd8 <HAL_TIM_PWM_MspInit>

	  HAL_TIM_Base_Start_IT(&htim2);//motor
 800234c:	4808      	ldr	r0, [pc, #32]	; (8002370 <pl_motor_init+0x34>)
 800234e:	f006 fd5d 	bl	8008e0c <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim2);//motor
 8002352:	4807      	ldr	r0, [pc, #28]	; (8002370 <pl_motor_init+0x34>)
 8002354:	f002 fd40 	bl	8004dd8 <HAL_TIM_PWM_MspInit>

	  pl_motor_mode_L(1);
 8002358:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800235c:	f000 f836 	bl	80023cc <pl_motor_mode_L>
	  pl_motor_mode_R(1);
 8002360:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002364:	f000 f852 	bl	800240c <pl_motor_mode_R>



}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000a54 	.word	0x20000a54
 8002370:	20000aa0 	.word	0x20000aa0

08002374 <pl_motor_standby>:

void pl_motor_standby(int pin){
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MOTOR_ENABLE_GPIO_Port, MOTOR_ENABLE_Pin, pin);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	b2db      	uxtb	r3, r3
 8002380:	461a      	mov	r2, r3
 8002382:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800238a:	f004 ffc1 	bl	8007310 <HAL_GPIO_WritePin>
	pl_motor_mode_L(1);
 800238e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002392:	f000 f81b 	bl	80023cc <pl_motor_mode_L>
	pl_motor_mode_R(1);
 8002396:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800239a:	f000 f837 	bl	800240c <pl_motor_mode_R>
	HAL_GPIO_WritePin(MD_RESET_GPIO_Port,MD_RESET_Pin,GPIO_PIN_SET);
 800239e:	2201      	movs	r2, #1
 80023a0:	2120      	movs	r1, #32
 80023a2:	4809      	ldr	r0, [pc, #36]	; (80023c8 <pl_motor_standby+0x54>)
 80023a4:	f004 ffb4 	bl	8007310 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 80023a8:	2003      	movs	r0, #3
 80023aa:	f002 ff47 	bl	800523c <HAL_Delay>
	HAL_GPIO_WritePin(MD_RESET_GPIO_Port,MD_RESET_Pin,GPIO_PIN_RESET);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2120      	movs	r1, #32
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <pl_motor_standby+0x54>)
 80023b4:	f004 ffac 	bl	8007310 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80023b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023bc:	f002 ff3e 	bl	800523c <HAL_Delay>
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	48000400 	.word	0x48000400

080023cc <pl_motor_mode_L>:

void pl_motor_mode_L(float velocity_l){
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	ed87 0a01 	vstr	s0, [r7, #4]
	if (velocity_l>=0){
 80023d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80023da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e2:	db07      	blt.n	80023f4 <pl_motor_mode_L+0x28>
		HAL_GPIO_WritePin(MOTOR_CW_CCW_L_GPIO_Port,MOTOR_CW_CCW_L_Pin,L_MOTOR_FRONT);
 80023e4:	2200      	movs	r2, #0
 80023e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ee:	f004 ff8f 	bl	8007310 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(MOTOR_CW_CCW_L_GPIO_Port,MOTOR_CW_CCW_L_Pin,L_MOTOR_BACK);
	}
}
 80023f2:	e006      	b.n	8002402 <pl_motor_mode_L+0x36>
		HAL_GPIO_WritePin(MOTOR_CW_CCW_L_GPIO_Port,MOTOR_CW_CCW_L_Pin,L_MOTOR_BACK);
 80023f4:	2201      	movs	r2, #1
 80023f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023fe:	f004 ff87 	bl	8007310 <HAL_GPIO_WritePin>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <pl_motor_mode_R>:

void pl_motor_mode_R(float velocity_r){
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	ed87 0a01 	vstr	s0, [r7, #4]
	if (velocity_r>=0){
 8002416:	edd7 7a01 	vldr	s15, [r7, #4]
 800241a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800241e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002422:	db05      	blt.n	8002430 <pl_motor_mode_R+0x24>
		HAL_GPIO_WritePin(MOTOR_CW_CCW_R_GPIO_Port,MOTOR_CW_CCW_R_Pin,R_MOTOR_FRONT);
 8002424:	2201      	movs	r2, #1
 8002426:	2110      	movs	r1, #16
 8002428:	4806      	ldr	r0, [pc, #24]	; (8002444 <pl_motor_mode_R+0x38>)
 800242a:	f004 ff71 	bl	8007310 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(MOTOR_CW_CCW_R_GPIO_Port,MOTOR_CW_CCW_R_Pin,R_MOTOR_BACK);
	}
}
 800242e:	e004      	b.n	800243a <pl_motor_mode_R+0x2e>
		HAL_GPIO_WritePin(MOTOR_CW_CCW_R_GPIO_Port,MOTOR_CW_CCW_R_Pin,R_MOTOR_BACK);
 8002430:	2200      	movs	r2, #0
 8002432:	2110      	movs	r1, #16
 8002434:	4803      	ldr	r0, [pc, #12]	; (8002444 <pl_motor_mode_R+0x38>)
 8002436:	f004 ff6b 	bl	8007310 <HAL_GPIO_WritePin>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	48000400 	.word	0x48000400

08002448 <pl_motor_start>:

void pl_motor_start(void){
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
	pl_interrupt_motor_count_L();
 800244c:	f000 f848 	bl	80024e0 <pl_interrupt_motor_count_L>
	pl_interrupt_motor_count_R();
 8002450:	f000 f872 	bl	8002538 <pl_interrupt_motor_count_R>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002454:	2100      	movs	r1, #0
 8002456:	4804      	ldr	r0, [pc, #16]	; (8002468 <pl_motor_start+0x20>)
 8002458:	f006 fd84 	bl	8008f64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800245c:	2104      	movs	r1, #4
 800245e:	4803      	ldr	r0, [pc, #12]	; (800246c <pl_motor_start+0x24>)
 8002460:	f006 fd80 	bl	8008f64 <HAL_TIM_PWM_Start>
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20000a54 	.word	0x20000a54
 800246c:	20000aa0 	.word	0x20000aa0

08002470 <pl_motor_stop>:

void pl_motor_stop(void){
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002474:	2100      	movs	r1, #0
 8002476:	4804      	ldr	r0, [pc, #16]	; (8002488 <pl_motor_stop+0x18>)
 8002478:	f006 fe52 	bl	8009120 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 800247c:	2104      	movs	r1, #4
 800247e:	4803      	ldr	r0, [pc, #12]	; (800248c <pl_motor_stop+0x1c>)
 8002480:	f006 fe4e 	bl	8009120 <HAL_TIM_PWM_Stop>
}
 8002484:	bf00      	nop
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000a54 	.word	0x20000a54
 800248c:	20000aa0 	.word	0x20000aa0

08002490 <pl_motor_count_L>:

void pl_motor_count_L(float velocity_l){
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	ed87 0a01 	vstr	s0, [r7, #4]
//	uint16_t motorCount_l;
	g_motorCount_l = calMotorVelocityCount(velocity_l);
 800249a:	ed97 0a01 	vldr	s0, [r7, #4]
 800249e:	f000 f877 	bl	8002590 <calMotorVelocityCount>
 80024a2:	4603      	mov	r3, r0
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <pl_motor_count_L+0x24>)
 80024a8:	801a      	strh	r2, [r3, #0]
//	__HAL_TIM_SET_AUTORELOAD(&htim1, g_motorCount_l);
//	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,(uint16_t)((float)(g_motorCount_l)/2));
//	__HAL_TIM_SET_COUNTER(&htim1, 0);
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200003a0 	.word	0x200003a0

080024b8 <pl_motor_count_R>:

void pl_motor_count_R(float velocity_r){
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	ed87 0a01 	vstr	s0, [r7, #4]
//	uint16_t motorCount_r;
	g_motorCount_r = calMotorVelocityCount(velocity_r);
 80024c2:	ed97 0a01 	vldr	s0, [r7, #4]
 80024c6:	f000 f863 	bl	8002590 <calMotorVelocityCount>
 80024ca:	4603      	mov	r3, r0
 80024cc:	461a      	mov	r2, r3
 80024ce:	4b03      	ldr	r3, [pc, #12]	; (80024dc <pl_motor_count_R+0x24>)
 80024d0:	801a      	strh	r2, [r3, #0]
//	__HAL_TIM_SET_AUTORELOAD(&htim2, g_motorCount_r);
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,(uint16_t)((float)(g_motorCount_r)/2));
//	__HAL_TIM_SET_COUNTER(&htim2, 0);

}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	200003a2 	.word	0x200003a2

080024e0 <pl_interrupt_motor_count_L>:

void pl_interrupt_motor_count_L(void){
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim1, g_motorCount_l);
 80024e4:	4b12      	ldr	r3, [pc, #72]	; (8002530 <pl_interrupt_motor_count_L+0x50>)
 80024e6:	881a      	ldrh	r2, [r3, #0]
 80024e8:	4b12      	ldr	r3, [pc, #72]	; (8002534 <pl_interrupt_motor_count_L+0x54>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <pl_interrupt_motor_count_L+0x50>)
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	461a      	mov	r2, r3
 80024f4:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <pl_interrupt_motor_count_L+0x54>)
 80024f6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,(uint16_t)((float)(g_motorCount_l)/2));
 80024f8:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <pl_interrupt_motor_count_L+0x50>)
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	ee07 3a90 	vmov	s15, r3
 8002500:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002504:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002508:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800250c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002510:	ee17 3a90 	vmov	r3, s15
 8002514:	b29a      	uxth	r2, r3
 8002516:	4b07      	ldr	r3, [pc, #28]	; (8002534 <pl_interrupt_motor_count_L+0x54>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <pl_interrupt_motor_count_L+0x54>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2200      	movs	r2, #0
 8002522:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	200003a0 	.word	0x200003a0
 8002534:	20000a54 	.word	0x20000a54

08002538 <pl_interrupt_motor_count_R>:

void pl_interrupt_motor_count_R(void){
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim2, g_motorCount_r);
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <pl_interrupt_motor_count_R+0x50>)
 800253e:	881a      	ldrh	r2, [r3, #0]
 8002540:	4b12      	ldr	r3, [pc, #72]	; (800258c <pl_interrupt_motor_count_R+0x54>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	62da      	str	r2, [r3, #44]	; 0x2c
 8002546:	4b10      	ldr	r3, [pc, #64]	; (8002588 <pl_interrupt_motor_count_R+0x50>)
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	4b0f      	ldr	r3, [pc, #60]	; (800258c <pl_interrupt_motor_count_R+0x54>)
 800254e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,(uint16_t)((float)(g_motorCount_r)/2));
 8002550:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <pl_interrupt_motor_count_R+0x50>)
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	ee07 3a90 	vmov	s15, r3
 8002558:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800255c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002560:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002568:	ee17 3a90 	vmov	r3, s15
 800256c:	b29a      	uxth	r2, r3
 800256e:	4b07      	ldr	r3, [pc, #28]	; (800258c <pl_interrupt_motor_count_R+0x54>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <pl_interrupt_motor_count_R+0x54>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2200      	movs	r2, #0
 800257a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	200003a2 	.word	0x200003a2
 800258c:	20000aa0 	.word	0x20000aa0

08002590 <calMotorVelocityCount>:
/*******************************************************************/
/*	速度からcycleCountへの変換					(calFrequencyCount)	*/
/*******************************************************************/
/*	速度からPWMに送るcycleCountを計算する．。						*/
/*******************************************************************/
uint16_t calMotorVelocityCount(float Velocity) {
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	ed87 0a01 	vstr	s0, [r7, #4]
	float f_MotorCount;
	uint16_t MotorCount;

	f_MotorCount=(10000000 * STEP_DEGREE * M_PI / 180 * TIRE_DIAMETER / 2 / fabs(Velocity));
 800259a:	edd7 7a01 	vldr	s15, [r7, #4]
 800259e:	eef0 7ae7 	vabs.f32	s15, s15
 80025a2:	ee17 0a90 	vmov	r0, s15
 80025a6:	f7fd ffcf 	bl	8000548 <__aeabi_f2d>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	a11d      	add	r1, pc, #116	; (adr r1, 8002624 <calMotorVelocityCount+0x94>)
 80025b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025b4:	f7fe f94a 	bl	800084c <__aeabi_ddiv>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	4610      	mov	r0, r2
 80025be:	4619      	mov	r1, r3
 80025c0:	f7fe fb12 	bl	8000be8 <__aeabi_d2f>
 80025c4:	4603      	mov	r3, r0
 80025c6:	60bb      	str	r3, [r7, #8]
	if (Velocity == 0 || f_MotorCount > 65535 || f_MotorCount < 0) {
 80025c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80025cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d4:	d00f      	beq.n	80025f6 <calMotorVelocityCount+0x66>
 80025d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80025da:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002620 <calMotorVelocityCount+0x90>
 80025de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e6:	dc06      	bgt.n	80025f6 <calMotorVelocityCount+0x66>
 80025e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80025ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f4:	d503      	bpl.n	80025fe <calMotorVelocityCount+0x6e>
		MotorCount = 30535 - 1;
 80025f6:	f247 7346 	movw	r3, #30534	; 0x7746
 80025fa:	81fb      	strh	r3, [r7, #14]
 80025fc:	e008      	b.n	8002610 <calMotorVelocityCount+0x80>
	} else {
		MotorCount = (uint16_t) (f_MotorCount)-1;
 80025fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002606:	ee17 3a90 	vmov	r3, s15
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	81fb      	strh	r3, [r7, #14]
	}

	return MotorCount;
 8002610:	89fb      	ldrh	r3, [r7, #14]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	f3af 8000 	nop.w
 8002620:	477fff00 	.word	0x477fff00
 8002624:	398eadef 	.word	0x398eadef
 8002628:	414f28b3 	.word	0x414f28b3
 800262c:	00000000 	.word	0x00000000

08002630 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 8002636:	4828      	ldr	r0, [pc, #160]	; (80026d8 <pl_getbatt+0xa8>)
 8002638:	f003 f982 	bl	8005940 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 800263c:	2132      	movs	r1, #50	; 0x32
 800263e:	4826      	ldr	r0, [pc, #152]	; (80026d8 <pl_getbatt+0xa8>)
 8002640:	f003 fa14 	bl	8005a6c <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 8002644:	4824      	ldr	r0, [pc, #144]	; (80026d8 <pl_getbatt+0xa8>)
 8002646:	f003 fb86 	bl	8005d56 <HAL_ADC_GetValue>
 800264a:	4603      	mov	r3, r0
 800264c:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 800264e:	4822      	ldr	r0, [pc, #136]	; (80026d8 <pl_getbatt+0xa8>)
 8002650:	f003 f9d9 	bl	8005a06 <HAL_ADC_Stop>
	batt = 3.3  * (float) battAD / 1023.0 * (100.0 + 22.0) / 22.0;
 8002654:	88fb      	ldrh	r3, [r7, #6]
 8002656:	ee07 3a90 	vmov	s15, r3
 800265a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800265e:	ee17 0a90 	vmov	r0, s15
 8002662:	f7fd ff71 	bl	8000548 <__aeabi_f2d>
 8002666:	a318      	add	r3, pc, #96	; (adr r3, 80026c8 <pl_getbatt+0x98>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f7fd ffc4 	bl	80005f8 <__aeabi_dmul>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	a315      	add	r3, pc, #84	; (adr r3, 80026d0 <pl_getbatt+0xa0>)
 800267a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267e:	f7fe f8e5 	bl	800084c <__aeabi_ddiv>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4610      	mov	r0, r2
 8002688:	4619      	mov	r1, r3
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	4b13      	ldr	r3, [pc, #76]	; (80026dc <pl_getbatt+0xac>)
 8002690:	f7fd ffb2 	bl	80005f8 <__aeabi_dmul>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4610      	mov	r0, r2
 800269a:	4619      	mov	r1, r3
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <pl_getbatt+0xb0>)
 80026a2:	f7fe f8d3 	bl	800084c <__aeabi_ddiv>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	f7fe fa9b 	bl	8000be8 <__aeabi_d2f>
 80026b2:	4603      	mov	r3, r0
 80026b4:	603b      	str	r3, [r7, #0]


return batt;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	ee07 3a90 	vmov	s15, r3
}
 80026bc:	eeb0 0a67 	vmov.f32	s0, s15
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	66666666 	.word	0x66666666
 80026cc:	400a6666 	.word	0x400a6666
 80026d0:	00000000 	.word	0x00000000
 80026d4:	408ff800 	.word	0x408ff800
 80026d8:	20000958 	.word	0x20000958
 80026dc:	405e8000 	.word	0x405e8000
 80026e0:	40360000 	.word	0x40360000
 80026e4:	00000000 	.word	0x00000000

080026e8 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 80026ee:	4862      	ldr	r0, [pc, #392]	; (8002878 <pl_callback_getSensor+0x190>)
 80026f0:	f003 fad0 	bl	8005c94 <HAL_ADC_Stop_DMA>
	switch (AD_step) {
 80026f4:	4b61      	ldr	r3, [pc, #388]	; (800287c <pl_callback_getSensor+0x194>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d042      	beq.n	8002782 <pl_callback_getSensor+0x9a>
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	dc66      	bgt.n	80027ce <pl_callback_getSensor+0xe6>
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <pl_callback_getSensor+0x22>
 8002704:	2b01      	cmp	r3, #1
 8002706:	d016      	beq.n	8002736 <pl_callback_getSensor+0x4e>
 8002708:	e061      	b.n	80027ce <pl_callback_getSensor+0xe6>
		case 0:
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_SET);
 800270a:	2201      	movs	r2, #1
 800270c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002710:	485b      	ldr	r0, [pc, #364]	; (8002880 <pl_callback_getSensor+0x198>)
 8002712:	f004 fdfd 	bl	8007310 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_RESET);
 8002716:	2200      	movs	r2, #0
 8002718:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800271c:	4858      	ldr	r0, [pc, #352]	; (8002880 <pl_callback_getSensor+0x198>)
 800271e:	f004 fdf7 	bl	8007310 <HAL_GPIO_WritePin>
					for (j = 0; j <= 100; j++) {
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]
 8002726:	e002      	b.n	800272e <pl_callback_getSensor+0x46>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3301      	adds	r3, #1
 800272c:	607b      	str	r3, [r7, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b64      	cmp	r3, #100	; 0x64
 8002732:	ddf9      	ble.n	8002728 <pl_callback_getSensor+0x40>
					}
			break;
 8002734:	e04b      	b.n	80027ce <pl_callback_getSensor+0xe6>
		case 1:
			g_sensor_on[0] = g_ADCBuffer[1];
 8002736:	4b53      	ldr	r3, [pc, #332]	; (8002884 <pl_callback_getSensor+0x19c>)
 8002738:	885a      	ldrh	r2, [r3, #2]
 800273a:	4b53      	ldr	r3, [pc, #332]	; (8002888 <pl_callback_getSensor+0x1a0>)
 800273c:	801a      	strh	r2, [r3, #0]
			g_sensor_on[1] = g_ADCBuffer[2];
 800273e:	4b51      	ldr	r3, [pc, #324]	; (8002884 <pl_callback_getSensor+0x19c>)
 8002740:	889a      	ldrh	r2, [r3, #4]
 8002742:	4b51      	ldr	r3, [pc, #324]	; (8002888 <pl_callback_getSensor+0x1a0>)
 8002744:	805a      	strh	r2, [r3, #2]
			g_sensor_off[2] = g_ADCBuffer[3];
 8002746:	4b4f      	ldr	r3, [pc, #316]	; (8002884 <pl_callback_getSensor+0x19c>)
 8002748:	88da      	ldrh	r2, [r3, #6]
 800274a:	4b50      	ldr	r3, [pc, #320]	; (800288c <pl_callback_getSensor+0x1a4>)
 800274c:	809a      	strh	r2, [r3, #4]
			g_sensor_off[3] = g_ADCBuffer[4];
 800274e:	4b4d      	ldr	r3, [pc, #308]	; (8002884 <pl_callback_getSensor+0x19c>)
 8002750:	891a      	ldrh	r2, [r3, #8]
 8002752:	4b4e      	ldr	r3, [pc, #312]	; (800288c <pl_callback_getSensor+0x1a4>)
 8002754:	80da      	strh	r2, [r3, #6]
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_RESET);
 8002756:	2200      	movs	r2, #0
 8002758:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800275c:	4848      	ldr	r0, [pc, #288]	; (8002880 <pl_callback_getSensor+0x198>)
 800275e:	f004 fdd7 	bl	8007310 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_SET);
 8002762:	2201      	movs	r2, #1
 8002764:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002768:	4845      	ldr	r0, [pc, #276]	; (8002880 <pl_callback_getSensor+0x198>)
 800276a:	f004 fdd1 	bl	8007310 <HAL_GPIO_WritePin>
					for (j = 0; j <= 100; j++) {
 800276e:	2300      	movs	r3, #0
 8002770:	607b      	str	r3, [r7, #4]
 8002772:	e002      	b.n	800277a <pl_callback_getSensor+0x92>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3301      	adds	r3, #1
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b64      	cmp	r3, #100	; 0x64
 800277e:	ddf9      	ble.n	8002774 <pl_callback_getSensor+0x8c>
					}
			break;
 8002780:	e025      	b.n	80027ce <pl_callback_getSensor+0xe6>
		case 2:
			g_sensor_off[0] = g_ADCBuffer[1];
 8002782:	4b40      	ldr	r3, [pc, #256]	; (8002884 <pl_callback_getSensor+0x19c>)
 8002784:	885a      	ldrh	r2, [r3, #2]
 8002786:	4b41      	ldr	r3, [pc, #260]	; (800288c <pl_callback_getSensor+0x1a4>)
 8002788:	801a      	strh	r2, [r3, #0]
			g_sensor_off[1] = g_ADCBuffer[2];
 800278a:	4b3e      	ldr	r3, [pc, #248]	; (8002884 <pl_callback_getSensor+0x19c>)
 800278c:	889a      	ldrh	r2, [r3, #4]
 800278e:	4b3f      	ldr	r3, [pc, #252]	; (800288c <pl_callback_getSensor+0x1a4>)
 8002790:	805a      	strh	r2, [r3, #2]
			g_sensor_on[2] = g_ADCBuffer[3];
 8002792:	4b3c      	ldr	r3, [pc, #240]	; (8002884 <pl_callback_getSensor+0x19c>)
 8002794:	88da      	ldrh	r2, [r3, #6]
 8002796:	4b3c      	ldr	r3, [pc, #240]	; (8002888 <pl_callback_getSensor+0x1a0>)
 8002798:	809a      	strh	r2, [r3, #4]
			g_sensor_on[3] = g_ADCBuffer[4];
 800279a:	4b3a      	ldr	r3, [pc, #232]	; (8002884 <pl_callback_getSensor+0x19c>)
 800279c:	891a      	ldrh	r2, [r3, #8]
 800279e:	4b3a      	ldr	r3, [pc, #232]	; (8002888 <pl_callback_getSensor+0x1a0>)
 80027a0:	80da      	strh	r2, [r3, #6]
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_RESET);
 80027a2:	2200      	movs	r2, #0
 80027a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027a8:	4835      	ldr	r0, [pc, #212]	; (8002880 <pl_callback_getSensor+0x198>)
 80027aa:	f004 fdb1 	bl	8007310 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_RESET);
 80027ae:	2200      	movs	r2, #0
 80027b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027b4:	4832      	ldr	r0, [pc, #200]	; (8002880 <pl_callback_getSensor+0x198>)
 80027b6:	f004 fdab 	bl	8007310 <HAL_GPIO_WritePin>
					for (j = 0; j <= 10; j++) {
 80027ba:	2300      	movs	r3, #0
 80027bc:	607b      	str	r3, [r7, #4]
 80027be:	e002      	b.n	80027c6 <pl_callback_getSensor+0xde>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3301      	adds	r3, #1
 80027c4:	607b      	str	r3, [r7, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b0a      	cmp	r3, #10
 80027ca:	ddf9      	ble.n	80027c0 <pl_callback_getSensor+0xd8>
					}
			break;
 80027cc:	bf00      	nop
	}
	V_battAD = g_ADCBuffer[0];
 80027ce:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <pl_callback_getSensor+0x19c>)
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 1023.0 * (100.0 + 22.0) / 22.0;
 80027d4:	887b      	ldrh	r3, [r7, #2]
 80027d6:	ee07 3a90 	vmov	s15, r3
 80027da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027de:	ee17 0a90 	vmov	r0, s15
 80027e2:	f7fd feb1 	bl	8000548 <__aeabi_f2d>
 80027e6:	a320      	add	r3, pc, #128	; (adr r3, 8002868 <pl_callback_getSensor+0x180>)
 80027e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ec:	f7fd ff04 	bl	80005f8 <__aeabi_dmul>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4610      	mov	r0, r2
 80027f6:	4619      	mov	r1, r3
 80027f8:	a31d      	add	r3, pc, #116	; (adr r3, 8002870 <pl_callback_getSensor+0x188>)
 80027fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fe:	f7fe f825 	bl	800084c <__aeabi_ddiv>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4610      	mov	r0, r2
 8002808:	4619      	mov	r1, r3
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	4b20      	ldr	r3, [pc, #128]	; (8002890 <pl_callback_getSensor+0x1a8>)
 8002810:	f7fd fef2 	bl	80005f8 <__aeabi_dmul>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4610      	mov	r0, r2
 800281a:	4619      	mov	r1, r3
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	4b1c      	ldr	r3, [pc, #112]	; (8002894 <pl_callback_getSensor+0x1ac>)
 8002822:	f7fe f813 	bl	800084c <__aeabi_ddiv>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4610      	mov	r0, r2
 800282c:	4619      	mov	r1, r3
 800282e:	f7fe f9db 	bl	8000be8 <__aeabi_d2f>
 8002832:	4603      	mov	r3, r0
 8002834:	4a18      	ldr	r2, [pc, #96]	; (8002898 <pl_callback_getSensor+0x1b0>)
 8002836:	6013      	str	r3, [r2, #0]
		AD_step++;
 8002838:	4b10      	ldr	r3, [pc, #64]	; (800287c <pl_callback_getSensor+0x194>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	3301      	adds	r3, #1
 800283e:	b2da      	uxtb	r2, r3
 8002840:	4b0e      	ldr	r3, [pc, #56]	; (800287c <pl_callback_getSensor+0x194>)
 8002842:	701a      	strb	r2, [r3, #0]

		if (AD_step != 3) {
 8002844:	4b0d      	ldr	r3, [pc, #52]	; (800287c <pl_callback_getSensor+0x194>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b03      	cmp	r3, #3
 800284a:	d005      	beq.n	8002858 <pl_callback_getSensor+0x170>
			HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
 800284c:	2205      	movs	r2, #5
 800284e:	490d      	ldr	r1, [pc, #52]	; (8002884 <pl_callback_getSensor+0x19c>)
 8002850:	4809      	ldr	r0, [pc, #36]	; (8002878 <pl_callback_getSensor+0x190>)
 8002852:	f003 f99b 	bl	8005b8c <HAL_ADC_Start_DMA>

			AD_step = 0;

		}

}
 8002856:	e002      	b.n	800285e <pl_callback_getSensor+0x176>
			AD_step = 0;
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <pl_callback_getSensor+0x194>)
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	66666666 	.word	0x66666666
 800286c:	400a6666 	.word	0x400a6666
 8002870:	00000000 	.word	0x00000000
 8002874:	408ff800 	.word	0x408ff800
 8002878:	20000958 	.word	0x20000958
 800287c:	200003ae 	.word	0x200003ae
 8002880:	48000800 	.word	0x48000800
 8002884:	200003a4 	.word	0x200003a4
 8002888:	200003b0 	.word	0x200003b0
 800288c:	200003b8 	.word	0x200003b8
 8002890:	405e8000 	.word	0x405e8000
 8002894:	40360000 	.word	0x40360000
 8002898:	200003c0 	.word	0x200003c0

0800289c <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
 80028a0:	2205      	movs	r2, #5
 80028a2:	4903      	ldr	r1, [pc, #12]	; (80028b0 <pl_interupt_getSensor+0x14>)
 80028a4:	4803      	ldr	r0, [pc, #12]	; (80028b4 <pl_interupt_getSensor+0x18>)
 80028a6:	f003 f971 	bl	8005b8c <HAL_ADC_Start_DMA>
				sizeof(g_ADCBuffer) / sizeof(uint16_t));


}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	200003a4 	.word	0x200003a4
 80028b4:	20000958 	.word	0x20000958

080028b8 <pl_test_speaker>:

soundData seria[seriaNUM];
soundData Zelda_nazo[Zelda_nazoNUM];

void pl_test_speaker(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
	for(int count=1;count<15;count++){
 80028be:	2301      	movs	r3, #1
 80028c0:	607b      	str	r3, [r7, #4]
 80028c2:	e007      	b.n	80028d4 <pl_test_speaker+0x1c>
		pl_play_oneSound(count);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 f861 	bl	8002990 <pl_play_oneSound>
	for(int count=1;count<15;count++){
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3301      	adds	r3, #1
 80028d2:	607b      	str	r3, [r7, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b0e      	cmp	r3, #14
 80028d8:	ddf4      	ble.n	80028c4 <pl_test_speaker+0xc>
		}

	pl_play_Music(8, Zelda_nazo);
 80028da:	4906      	ldr	r1, [pc, #24]	; (80028f4 <pl_test_speaker+0x3c>)
 80028dc:	2008      	movs	r0, #8
 80028de:	f000 f8c3 	bl	8002a68 <pl_play_Music>
	pl_play_Music(169, seria);
 80028e2:	4905      	ldr	r1, [pc, #20]	; (80028f8 <pl_test_speaker+0x40>)
 80028e4:	20a9      	movs	r0, #169	; 0xa9
 80028e6:	f000 f8bf 	bl	8002a68 <pl_play_Music>


}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000914 	.word	0x20000914
 80028f8:	200003c4 	.word	0x200003c4

080028fc <pl_speaker_init>:
/*	スピーカーの初期化					(pl_speaker_init)	*/
/*******************************************************************/
/*	スピーカーの初期化する。						*/
/*******************************************************************/
void pl_speaker_init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0

	  HAL_TIM_Base_Start_IT(&htim15);//speaker
 8002900:	4805      	ldr	r0, [pc, #20]	; (8002918 <pl_speaker_init+0x1c>)
 8002902:	f006 fa83 	bl	8008e0c <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim15);//speaker
 8002906:	4804      	ldr	r0, [pc, #16]	; (8002918 <pl_speaker_init+0x1c>)
 8002908:	f002 fa66 	bl	8004dd8 <HAL_TIM_PWM_MspInit>

	  inputseria();
 800290c:	f000 f95a 	bl	8002bc4 <inputseria>
	  inputZelda_nazo();
 8002910:	f000 f90e 	bl	8002b30 <inputZelda_nazo>


}
 8002914:	bf00      	nop
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20000b38 	.word	0x20000b38
 800291c:	00000000 	.word	0x00000000

08002920 <calFrequencyCount>:
/*******************************************************************/
/*	周波数からcycleCountへの変換					(calFrequencyCount)	*/
/*******************************************************************/
/*	周波数からPWMに送るcycleCountを計算する．。						*/
/*******************************************************************/
uint16_t calFrequencyCount(float tarHz) {
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t tarCount;
	if (tarHz == 0) {
 800292a:	edd7 7a01 	vldr	s15, [r7, #4]
 800292e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002936:	d102      	bne.n	800293e <calFrequencyCount+0x1e>
		tarCount = 0;
 8002938:	2300      	movs	r3, #0
 800293a:	81fb      	strh	r3, [r7, #14]
 800293c:	e01a      	b.n	8002974 <calFrequencyCount+0x54>
	} else {
		tarCount = (uint16_t) (1000000.0 / tarHz - 1.0);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fd fe02 	bl	8000548 <__aeabi_f2d>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	a10e      	add	r1, pc, #56	; (adr r1, 8002984 <calFrequencyCount+0x64>)
 800294a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800294e:	f7fd ff7d 	bl	800084c <__aeabi_ddiv>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	4b08      	ldr	r3, [pc, #32]	; (8002980 <calFrequencyCount+0x60>)
 8002960:	f7fd fc92 	bl	8000288 <__aeabi_dsub>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4610      	mov	r0, r2
 800296a:	4619      	mov	r1, r3
 800296c:	f7fe f91c 	bl	8000ba8 <__aeabi_d2uiz>
 8002970:	4603      	mov	r3, r0
 8002972:	81fb      	strh	r3, [r7, #14]
	}
	return tarCount;
 8002974:	89fb      	ldrh	r3, [r7, #14]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	3ff00000 	.word	0x3ff00000
 8002984:	00000000 	.word	0x00000000
 8002988:	412e8480 	.word	0x412e8480
 800298c:	00000000 	.word	0x00000000

08002990 <pl_play_oneSound>:
/*******************************************************************/
/*	任意の周波数の一音を出力					(pl_play_oneSound)	*/
/*******************************************************************/
/*	scaleにあわせた周波数での一音を出力する．．						*/
/*******************************************************************/
void pl_play_oneSound(char scale) {
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	71fb      	strb	r3, [r7, #7]
	uint16_t cycleCount, j;
	float Hz;
	Hz = 1.0;
 800299a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800299e:	613b      	str	r3, [r7, #16]
	for (j = 0; j < scale; j++) {
 80029a0:	2300      	movs	r3, #0
 80029a2:	82fb      	strh	r3, [r7, #22]
 80029a4:	e012      	b.n	80029cc <pl_play_oneSound+0x3c>
		Hz = Hz * 1.0595;
 80029a6:	6938      	ldr	r0, [r7, #16]
 80029a8:	f7fd fdce 	bl	8000548 <__aeabi_f2d>
 80029ac:	a32c      	add	r3, pc, #176	; (adr r3, 8002a60 <pl_play_oneSound+0xd0>)
 80029ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b2:	f7fd fe21 	bl	80005f8 <__aeabi_dmul>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4610      	mov	r0, r2
 80029bc:	4619      	mov	r1, r3
 80029be:	f7fe f913 	bl	8000be8 <__aeabi_d2f>
 80029c2:	4603      	mov	r3, r0
 80029c4:	613b      	str	r3, [r7, #16]
	for (j = 0; j < scale; j++) {
 80029c6:	8afb      	ldrh	r3, [r7, #22]
 80029c8:	3301      	adds	r3, #1
 80029ca:	82fb      	strh	r3, [r7, #22]
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	8afa      	ldrh	r2, [r7, #22]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d3e7      	bcc.n	80029a6 <pl_play_oneSound+0x16>
	}
	cycleCount = calFrequencyCount(440 * 0.6 * Hz);
 80029d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80029da:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002a58 <pl_play_oneSound+0xc8>
 80029de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029e2:	eeb0 0a67 	vmov.f32	s0, s15
 80029e6:	f7ff ff9b 	bl	8002920 <calFrequencyCount>
 80029ea:	4603      	mov	r3, r0
 80029ec:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_AUTORELOAD(&htim15, cycleCount);
 80029ee:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <pl_play_oneSound+0xcc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	89fa      	ldrh	r2, [r7, #14]
 80029f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80029f6:	89fb      	ldrh	r3, [r7, #14]
 80029f8:	4a18      	ldr	r2, [pc, #96]	; (8002a5c <pl_play_oneSound+0xcc>)
 80029fa:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2,cycleCount * SPEAKER_LOUDNESS);
 80029fc:	89fb      	ldrh	r3, [r7, #14]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fd fd90 	bl	8000524 <__aeabi_i2d>
 8002a04:	a312      	add	r3, pc, #72	; (adr r3, 8002a50 <pl_play_oneSound+0xc0>)
 8002a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0a:	f7fd fdf5 	bl	80005f8 <__aeabi_dmul>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4912      	ldr	r1, [pc, #72]	; (8002a5c <pl_play_oneSound+0xcc>)
 8002a14:	680c      	ldr	r4, [r1, #0]
 8002a16:	4610      	mov	r0, r2
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f7fe f8c5 	bl	8000ba8 <__aeabi_d2uiz>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	63a3      	str	r3, [r4, #56]	; 0x38

	__HAL_TIM_SET_COUNTER(&htim15, 0);
 8002a22:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <pl_play_oneSound+0xcc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2200      	movs	r2, #0
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8002a2a:	2104      	movs	r1, #4
 8002a2c:	480b      	ldr	r0, [pc, #44]	; (8002a5c <pl_play_oneSound+0xcc>)
 8002a2e:	f006 fa99 	bl	8008f64 <HAL_TIM_PWM_Start>
	HAL_Delay(600);
 8002a32:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002a36:	f002 fc01 	bl	800523c <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 8002a3a:	2104      	movs	r1, #4
 8002a3c:	4807      	ldr	r0, [pc, #28]	; (8002a5c <pl_play_oneSound+0xcc>)
 8002a3e:	f006 fb6f 	bl	8009120 <HAL_TIM_PWM_Stop>

}
 8002a42:	bf00      	nop
 8002a44:	371c      	adds	r7, #28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd90      	pop	{r4, r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	f3af 8000 	nop.w
 8002a50:	bc6a7efa 	.word	0xbc6a7efa
 8002a54:	3f689374 	.word	0x3f689374
 8002a58:	43840000 	.word	0x43840000
 8002a5c:	20000b38 	.word	0x20000b38
 8002a60:	45a1cac1 	.word	0x45a1cac1
 8002a64:	3ff0f3b6 	.word	0x3ff0f3b6

08002a68 <pl_play_Music>:
/*******************************************************************/
/*	任意の音楽を出力					(pl_play_Music)	*/
/*******************************************************************/
/*	playDataの音楽を出力する．						*/
/*******************************************************************/
void pl_play_Music(uint16_t dataMaxNum, soundData *playData) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	6039      	str	r1, [r7, #0]
 8002a72:	80fb      	strh	r3, [r7, #6]

	uint16_t i;
	uint16_t cycleCount, cycleCount_f;

	for (i = 0; i < dataMaxNum; i++) {
 8002a74:	2300      	movs	r3, #0
 8002a76:	81fb      	strh	r3, [r7, #14]
 8002a78:	e043      	b.n	8002b02 <pl_play_Music+0x9a>
		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 8002a7a:	2104      	movs	r1, #4
 8002a7c:	482a      	ldr	r0, [pc, #168]	; (8002b28 <pl_play_Music+0xc0>)
 8002a7e:	f006 fb4f 	bl	8009120 <HAL_TIM_PWM_Stop>

		cycleCount = calFrequencyCount(playData[i].interval);
 8002a82:	89fb      	ldrh	r3, [r7, #14]
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	4413      	add	r3, r2
 8002a8a:	edd3 7a00 	vldr	s15, [r3]
 8002a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a92:	f7ff ff45 	bl	8002920 <calFrequencyCount>
 8002a96:	4603      	mov	r3, r0
 8002a98:	81bb      	strh	r3, [r7, #12]
		cycleCount_f = (int) ((float) (cycleCount) * SPEAKER_LOUDNESS);
 8002a9a:	89bb      	ldrh	r3, [r7, #12]
 8002a9c:	ee07 3a90 	vmov	s15, r3
 8002aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aa4:	ee17 0a90 	vmov	r0, s15
 8002aa8:	f7fd fd4e 	bl	8000548 <__aeabi_f2d>
 8002aac:	a31c      	add	r3, pc, #112	; (adr r3, 8002b20 <pl_play_Music+0xb8>)
 8002aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab2:	f7fd fda1 	bl	80005f8 <__aeabi_dmul>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4610      	mov	r0, r2
 8002abc:	4619      	mov	r1, r3
 8002abe:	f7fe f84b 	bl	8000b58 <__aeabi_d2iz>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	817b      	strh	r3, [r7, #10]
		__HAL_TIM_SET_AUTORELOAD(&htim15, cycleCount);
 8002ac6:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <pl_play_Music+0xc0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	89ba      	ldrh	r2, [r7, #12]
 8002acc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ace:	89bb      	ldrh	r3, [r7, #12]
 8002ad0:	4a15      	ldr	r2, [pc, #84]	; (8002b28 <pl_play_Music+0xc0>)
 8002ad2:	60d3      	str	r3, [r2, #12]

		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2,cycleCount_f);
 8002ad4:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <pl_play_Music+0xc0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	897a      	ldrh	r2, [r7, #10]
 8002ada:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002adc:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <pl_play_Music+0xc4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8002ae4:	2104      	movs	r1, #4
 8002ae6:	4810      	ldr	r0, [pc, #64]	; (8002b28 <pl_play_Music+0xc0>)
 8002ae8:	f006 fa3c 	bl	8008f64 <HAL_TIM_PWM_Start>
		HAL_Delay(playData[i].waittime);
 8002aec:	89fb      	ldrh	r3, [r7, #14]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	4413      	add	r3, r2
 8002af4:	889b      	ldrh	r3, [r3, #4]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f002 fba0 	bl	800523c <HAL_Delay>
	for (i = 0; i < dataMaxNum; i++) {
 8002afc:	89fb      	ldrh	r3, [r7, #14]
 8002afe:	3301      	adds	r3, #1
 8002b00:	81fb      	strh	r3, [r7, #14]
 8002b02:	89fa      	ldrh	r2, [r7, #14]
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d3b7      	bcc.n	8002a7a <pl_play_Music+0x12>
	}
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 8002b0a:	2104      	movs	r1, #4
 8002b0c:	4806      	ldr	r0, [pc, #24]	; (8002b28 <pl_play_Music+0xc0>)
 8002b0e:	f006 fb07 	bl	8009120 <HAL_TIM_PWM_Stop>
}
 8002b12:	bf00      	nop
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	f3af 8000 	nop.w
 8002b20:	bc6a7efa 	.word	0xbc6a7efa
 8002b24:	3f689374 	.word	0x3f689374
 8002b28:	20000b38 	.word	0x20000b38
 8002b2c:	20000aa0 	.word	0x20000aa0

08002b30 <inputZelda_nazo>:
/*******************************************************************/
/*	音楽用構造体配列の入力					(input)	*/
/*******************************************************************/
/*	音楽用の構造体を定義してる．						*/
/*******************************************************************/
void inputZelda_nazo(void) {
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
	Zelda_nazo[0].interval = 1480;
 8002b34:	4b1a      	ldr	r3, [pc, #104]	; (8002ba0 <inputZelda_nazo+0x70>)
 8002b36:	4a1b      	ldr	r2, [pc, #108]	; (8002ba4 <inputZelda_nazo+0x74>)
 8002b38:	601a      	str	r2, [r3, #0]
	Zelda_nazo[0].waittime = 19 * 7;
 8002b3a:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <inputZelda_nazo+0x70>)
 8002b3c:	2285      	movs	r2, #133	; 0x85
 8002b3e:	809a      	strh	r2, [r3, #4]
	Zelda_nazo[1].interval = 1397;
 8002b40:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <inputZelda_nazo+0x70>)
 8002b42:	4a19      	ldr	r2, [pc, #100]	; (8002ba8 <inputZelda_nazo+0x78>)
 8002b44:	609a      	str	r2, [r3, #8]
	Zelda_nazo[1].waittime = 19 * 7;
 8002b46:	4b16      	ldr	r3, [pc, #88]	; (8002ba0 <inputZelda_nazo+0x70>)
 8002b48:	2285      	movs	r2, #133	; 0x85
 8002b4a:	819a      	strh	r2, [r3, #12]
	Zelda_nazo[2].interval = 1175;
 8002b4c:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <inputZelda_nazo+0x70>)
 8002b4e:	4a17      	ldr	r2, [pc, #92]	; (8002bac <inputZelda_nazo+0x7c>)
 8002b50:	611a      	str	r2, [r3, #16]
	Zelda_nazo[2].waittime = 19 * 7;
 8002b52:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <inputZelda_nazo+0x70>)
 8002b54:	2285      	movs	r2, #133	; 0x85
 8002b56:	829a      	strh	r2, [r3, #20]
	Zelda_nazo[3].interval = 831;
 8002b58:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <inputZelda_nazo+0x70>)
 8002b5a:	4a15      	ldr	r2, [pc, #84]	; (8002bb0 <inputZelda_nazo+0x80>)
 8002b5c:	619a      	str	r2, [r3, #24]
	Zelda_nazo[3].waittime = 19 * 7;
 8002b5e:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <inputZelda_nazo+0x70>)
 8002b60:	2285      	movs	r2, #133	; 0x85
 8002b62:	839a      	strh	r2, [r3, #28]
	Zelda_nazo[4].interval = 784;
 8002b64:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <inputZelda_nazo+0x70>)
 8002b66:	4a13      	ldr	r2, [pc, #76]	; (8002bb4 <inputZelda_nazo+0x84>)
 8002b68:	621a      	str	r2, [r3, #32]
	Zelda_nazo[4].waittime = 19 * 7;
 8002b6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <inputZelda_nazo+0x70>)
 8002b6c:	2285      	movs	r2, #133	; 0x85
 8002b6e:	849a      	strh	r2, [r3, #36]	; 0x24
	Zelda_nazo[5].interval = 1245;
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <inputZelda_nazo+0x70>)
 8002b72:	4a11      	ldr	r2, [pc, #68]	; (8002bb8 <inputZelda_nazo+0x88>)
 8002b74:	629a      	str	r2, [r3, #40]	; 0x28
	Zelda_nazo[5].waittime = 19 * 7;
 8002b76:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <inputZelda_nazo+0x70>)
 8002b78:	2285      	movs	r2, #133	; 0x85
 8002b7a:	859a      	strh	r2, [r3, #44]	; 0x2c
	Zelda_nazo[6].interval = 1568;
 8002b7c:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <inputZelda_nazo+0x70>)
 8002b7e:	4a0f      	ldr	r2, [pc, #60]	; (8002bbc <inputZelda_nazo+0x8c>)
 8002b80:	631a      	str	r2, [r3, #48]	; 0x30
	Zelda_nazo[6].waittime = 19 * 7;
 8002b82:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <inputZelda_nazo+0x70>)
 8002b84:	2285      	movs	r2, #133	; 0x85
 8002b86:	869a      	strh	r2, [r3, #52]	; 0x34
	Zelda_nazo[7].interval = 1976;
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <inputZelda_nazo+0x70>)
 8002b8a:	4a0d      	ldr	r2, [pc, #52]	; (8002bc0 <inputZelda_nazo+0x90>)
 8002b8c:	639a      	str	r2, [r3, #56]	; 0x38
	Zelda_nazo[7].waittime = 99 * 7;
 8002b8e:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <inputZelda_nazo+0x70>)
 8002b90:	f240 22b5 	movw	r2, #693	; 0x2b5
 8002b94:	879a      	strh	r2, [r3, #60]	; 0x3c

}
 8002b96:	bf00      	nop
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	20000914 	.word	0x20000914
 8002ba4:	44b90000 	.word	0x44b90000
 8002ba8:	44aea000 	.word	0x44aea000
 8002bac:	4492e000 	.word	0x4492e000
 8002bb0:	444fc000 	.word	0x444fc000
 8002bb4:	44440000 	.word	0x44440000
 8002bb8:	449ba000 	.word	0x449ba000
 8002bbc:	44c40000 	.word	0x44c40000
 8002bc0:	44f70000 	.word	0x44f70000

08002bc4 <inputseria>:


void inputseria(void) {
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
	seria[0].interval = 698;
 8002bc8:	4bad      	ldr	r3, [pc, #692]	; (8002e80 <inputseria+0x2bc>)
 8002bca:	4aae      	ldr	r2, [pc, #696]	; (8002e84 <inputseria+0x2c0>)
 8002bcc:	601a      	str	r2, [r3, #0]
	seria[0].waittime = 224;
 8002bce:	4bac      	ldr	r3, [pc, #688]	; (8002e80 <inputseria+0x2bc>)
 8002bd0:	22e0      	movs	r2, #224	; 0xe0
 8002bd2:	809a      	strh	r2, [r3, #4]
	seria[1].interval = 880;
 8002bd4:	4baa      	ldr	r3, [pc, #680]	; (8002e80 <inputseria+0x2bc>)
 8002bd6:	4aac      	ldr	r2, [pc, #688]	; (8002e88 <inputseria+0x2c4>)
 8002bd8:	609a      	str	r2, [r3, #8]
	seria[1].waittime = 224;
 8002bda:	4ba9      	ldr	r3, [pc, #676]	; (8002e80 <inputseria+0x2bc>)
 8002bdc:	22e0      	movs	r2, #224	; 0xe0
 8002bde:	819a      	strh	r2, [r3, #12]
	seria[2].interval = 988;
 8002be0:	4ba7      	ldr	r3, [pc, #668]	; (8002e80 <inputseria+0x2bc>)
 8002be2:	4aaa      	ldr	r2, [pc, #680]	; (8002e8c <inputseria+0x2c8>)
 8002be4:	611a      	str	r2, [r3, #16]
	seria[2].waittime = 462;
 8002be6:	4ba6      	ldr	r3, [pc, #664]	; (8002e80 <inputseria+0x2bc>)
 8002be8:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002bec:	829a      	strh	r2, [r3, #20]
	seria[3].interval = 698;
 8002bee:	4ba4      	ldr	r3, [pc, #656]	; (8002e80 <inputseria+0x2bc>)
 8002bf0:	4aa4      	ldr	r2, [pc, #656]	; (8002e84 <inputseria+0x2c0>)
 8002bf2:	619a      	str	r2, [r3, #24]
	seria[3].waittime = 224;
 8002bf4:	4ba2      	ldr	r3, [pc, #648]	; (8002e80 <inputseria+0x2bc>)
 8002bf6:	22e0      	movs	r2, #224	; 0xe0
 8002bf8:	839a      	strh	r2, [r3, #28]
	seria[4].interval = 880;
 8002bfa:	4ba1      	ldr	r3, [pc, #644]	; (8002e80 <inputseria+0x2bc>)
 8002bfc:	4aa2      	ldr	r2, [pc, #648]	; (8002e88 <inputseria+0x2c4>)
 8002bfe:	621a      	str	r2, [r3, #32]
	seria[4].waittime = 224;
 8002c00:	4b9f      	ldr	r3, [pc, #636]	; (8002e80 <inputseria+0x2bc>)
 8002c02:	22e0      	movs	r2, #224	; 0xe0
 8002c04:	849a      	strh	r2, [r3, #36]	; 0x24
	seria[5].interval = 988;
 8002c06:	4b9e      	ldr	r3, [pc, #632]	; (8002e80 <inputseria+0x2bc>)
 8002c08:	4aa0      	ldr	r2, [pc, #640]	; (8002e8c <inputseria+0x2c8>)
 8002c0a:	629a      	str	r2, [r3, #40]	; 0x28
	seria[5].waittime = 462;
 8002c0c:	4b9c      	ldr	r3, [pc, #624]	; (8002e80 <inputseria+0x2bc>)
 8002c0e:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002c12:	859a      	strh	r2, [r3, #44]	; 0x2c
	seria[6].interval = 698;
 8002c14:	4b9a      	ldr	r3, [pc, #616]	; (8002e80 <inputseria+0x2bc>)
 8002c16:	4a9b      	ldr	r2, [pc, #620]	; (8002e84 <inputseria+0x2c0>)
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30
	seria[6].waittime = 224;
 8002c1a:	4b99      	ldr	r3, [pc, #612]	; (8002e80 <inputseria+0x2bc>)
 8002c1c:	22e0      	movs	r2, #224	; 0xe0
 8002c1e:	869a      	strh	r2, [r3, #52]	; 0x34
	seria[7].interval = 880;
 8002c20:	4b97      	ldr	r3, [pc, #604]	; (8002e80 <inputseria+0x2bc>)
 8002c22:	4a99      	ldr	r2, [pc, #612]	; (8002e88 <inputseria+0x2c4>)
 8002c24:	639a      	str	r2, [r3, #56]	; 0x38
	seria[7].waittime = 224;
 8002c26:	4b96      	ldr	r3, [pc, #600]	; (8002e80 <inputseria+0x2bc>)
 8002c28:	22e0      	movs	r2, #224	; 0xe0
 8002c2a:	879a      	strh	r2, [r3, #60]	; 0x3c
	seria[8].interval = 988;
 8002c2c:	4b94      	ldr	r3, [pc, #592]	; (8002e80 <inputseria+0x2bc>)
 8002c2e:	4a97      	ldr	r2, [pc, #604]	; (8002e8c <inputseria+0x2c8>)
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
	seria[8].waittime = 224;
 8002c32:	4b93      	ldr	r3, [pc, #588]	; (8002e80 <inputseria+0x2bc>)
 8002c34:	22e0      	movs	r2, #224	; 0xe0
 8002c36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	seria[9].interval = 1319;
 8002c3a:	4b91      	ldr	r3, [pc, #580]	; (8002e80 <inputseria+0x2bc>)
 8002c3c:	4a94      	ldr	r2, [pc, #592]	; (8002e90 <inputseria+0x2cc>)
 8002c3e:	649a      	str	r2, [r3, #72]	; 0x48
	seria[9].waittime = 224;
 8002c40:	4b8f      	ldr	r3, [pc, #572]	; (8002e80 <inputseria+0x2bc>)
 8002c42:	22e0      	movs	r2, #224	; 0xe0
 8002c44:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	seria[10].interval = 1175;
 8002c48:	4b8d      	ldr	r3, [pc, #564]	; (8002e80 <inputseria+0x2bc>)
 8002c4a:	4a92      	ldr	r2, [pc, #584]	; (8002e94 <inputseria+0x2d0>)
 8002c4c:	651a      	str	r2, [r3, #80]	; 0x50
	seria[10].waittime = 462;
 8002c4e:	4b8c      	ldr	r3, [pc, #560]	; (8002e80 <inputseria+0x2bc>)
 8002c50:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002c54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	seria[11].interval = 988;
 8002c58:	4b89      	ldr	r3, [pc, #548]	; (8002e80 <inputseria+0x2bc>)
 8002c5a:	4a8c      	ldr	r2, [pc, #560]	; (8002e8c <inputseria+0x2c8>)
 8002c5c:	659a      	str	r2, [r3, #88]	; 0x58
	seria[11].waittime = 224;
 8002c5e:	4b88      	ldr	r3, [pc, #544]	; (8002e80 <inputseria+0x2bc>)
 8002c60:	22e0      	movs	r2, #224	; 0xe0
 8002c62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	seria[12].interval = 1047;
 8002c66:	4b86      	ldr	r3, [pc, #536]	; (8002e80 <inputseria+0x2bc>)
 8002c68:	4a8b      	ldr	r2, [pc, #556]	; (8002e98 <inputseria+0x2d4>)
 8002c6a:	661a      	str	r2, [r3, #96]	; 0x60
	seria[12].waittime = 224;
 8002c6c:	4b84      	ldr	r3, [pc, #528]	; (8002e80 <inputseria+0x2bc>)
 8002c6e:	22e0      	movs	r2, #224	; 0xe0
 8002c70:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	seria[13].interval = 988;
 8002c74:	4b82      	ldr	r3, [pc, #520]	; (8002e80 <inputseria+0x2bc>)
 8002c76:	4a85      	ldr	r2, [pc, #532]	; (8002e8c <inputseria+0x2c8>)
 8002c78:	669a      	str	r2, [r3, #104]	; 0x68
	seria[13].waittime = 224;
 8002c7a:	4b81      	ldr	r3, [pc, #516]	; (8002e80 <inputseria+0x2bc>)
 8002c7c:	22e0      	movs	r2, #224	; 0xe0
 8002c7e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	seria[14].interval = 784;
 8002c82:	4b7f      	ldr	r3, [pc, #508]	; (8002e80 <inputseria+0x2bc>)
 8002c84:	4a85      	ldr	r2, [pc, #532]	; (8002e9c <inputseria+0x2d8>)
 8002c86:	671a      	str	r2, [r3, #112]	; 0x70
	seria[14].waittime = 224;
 8002c88:	4b7d      	ldr	r3, [pc, #500]	; (8002e80 <inputseria+0x2bc>)
 8002c8a:	22e0      	movs	r2, #224	; 0xe0
 8002c8c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	seria[15].interval = 659;
 8002c90:	4b7b      	ldr	r3, [pc, #492]	; (8002e80 <inputseria+0x2bc>)
 8002c92:	4a83      	ldr	r2, [pc, #524]	; (8002ea0 <inputseria+0x2dc>)
 8002c94:	679a      	str	r2, [r3, #120]	; 0x78
	seria[15].waittime = 1169;
 8002c96:	4b7a      	ldr	r3, [pc, #488]	; (8002e80 <inputseria+0x2bc>)
 8002c98:	f240 4291 	movw	r2, #1169	; 0x491
 8002c9c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	seria[16].interval = 587;
 8002ca0:	4b77      	ldr	r3, [pc, #476]	; (8002e80 <inputseria+0x2bc>)
 8002ca2:	4a80      	ldr	r2, [pc, #512]	; (8002ea4 <inputseria+0x2e0>)
 8002ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	seria[16].waittime = 224;
 8002ca8:	4b75      	ldr	r3, [pc, #468]	; (8002e80 <inputseria+0x2bc>)
 8002caa:	22e0      	movs	r2, #224	; 0xe0
 8002cac:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	seria[17].interval = 659;
 8002cb0:	4b73      	ldr	r3, [pc, #460]	; (8002e80 <inputseria+0x2bc>)
 8002cb2:	4a7b      	ldr	r2, [pc, #492]	; (8002ea0 <inputseria+0x2dc>)
 8002cb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	seria[17].waittime = 224;
 8002cb8:	4b71      	ldr	r3, [pc, #452]	; (8002e80 <inputseria+0x2bc>)
 8002cba:	22e0      	movs	r2, #224	; 0xe0
 8002cbc:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	seria[18].interval = 784;
 8002cc0:	4b6f      	ldr	r3, [pc, #444]	; (8002e80 <inputseria+0x2bc>)
 8002cc2:	4a76      	ldr	r2, [pc, #472]	; (8002e9c <inputseria+0x2d8>)
 8002cc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	seria[18].waittime = 224;
 8002cc8:	4b6d      	ldr	r3, [pc, #436]	; (8002e80 <inputseria+0x2bc>)
 8002cca:	22e0      	movs	r2, #224	; 0xe0
 8002ccc:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	seria[19].interval = 659;
 8002cd0:	4b6b      	ldr	r3, [pc, #428]	; (8002e80 <inputseria+0x2bc>)
 8002cd2:	4a73      	ldr	r2, [pc, #460]	; (8002ea0 <inputseria+0x2dc>)
 8002cd4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	seria[19].waittime = 1400;
 8002cd8:	4b69      	ldr	r3, [pc, #420]	; (8002e80 <inputseria+0x2bc>)
 8002cda:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8002cde:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	seria[20].interval = 698;
 8002ce2:	4b67      	ldr	r3, [pc, #412]	; (8002e80 <inputseria+0x2bc>)
 8002ce4:	4a67      	ldr	r2, [pc, #412]	; (8002e84 <inputseria+0x2c0>)
 8002ce6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	seria[20].waittime = 224;
 8002cea:	4b65      	ldr	r3, [pc, #404]	; (8002e80 <inputseria+0x2bc>)
 8002cec:	22e0      	movs	r2, #224	; 0xe0
 8002cee:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	seria[21].interval = 880;
 8002cf2:	4b63      	ldr	r3, [pc, #396]	; (8002e80 <inputseria+0x2bc>)
 8002cf4:	4a64      	ldr	r2, [pc, #400]	; (8002e88 <inputseria+0x2c4>)
 8002cf6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	seria[21].waittime = 224;
 8002cfa:	4b61      	ldr	r3, [pc, #388]	; (8002e80 <inputseria+0x2bc>)
 8002cfc:	22e0      	movs	r2, #224	; 0xe0
 8002cfe:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	seria[22].interval = 988;
 8002d02:	4b5f      	ldr	r3, [pc, #380]	; (8002e80 <inputseria+0x2bc>)
 8002d04:	4a61      	ldr	r2, [pc, #388]	; (8002e8c <inputseria+0x2c8>)
 8002d06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	seria[22].waittime = 462;
 8002d0a:	4b5d      	ldr	r3, [pc, #372]	; (8002e80 <inputseria+0x2bc>)
 8002d0c:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002d10:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	seria[23].interval = 698;
 8002d14:	4b5a      	ldr	r3, [pc, #360]	; (8002e80 <inputseria+0x2bc>)
 8002d16:	4a5b      	ldr	r2, [pc, #364]	; (8002e84 <inputseria+0x2c0>)
 8002d18:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	seria[23].waittime = 224;
 8002d1c:	4b58      	ldr	r3, [pc, #352]	; (8002e80 <inputseria+0x2bc>)
 8002d1e:	22e0      	movs	r2, #224	; 0xe0
 8002d20:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
	seria[24].interval = 880;
 8002d24:	4b56      	ldr	r3, [pc, #344]	; (8002e80 <inputseria+0x2bc>)
 8002d26:	4a58      	ldr	r2, [pc, #352]	; (8002e88 <inputseria+0x2c4>)
 8002d28:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	seria[24].waittime = 224;
 8002d2c:	4b54      	ldr	r3, [pc, #336]	; (8002e80 <inputseria+0x2bc>)
 8002d2e:	22e0      	movs	r2, #224	; 0xe0
 8002d30:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	seria[25].interval = 988;
 8002d34:	4b52      	ldr	r3, [pc, #328]	; (8002e80 <inputseria+0x2bc>)
 8002d36:	4a55      	ldr	r2, [pc, #340]	; (8002e8c <inputseria+0x2c8>)
 8002d38:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	seria[25].waittime = 462;
 8002d3c:	4b50      	ldr	r3, [pc, #320]	; (8002e80 <inputseria+0x2bc>)
 8002d3e:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002d42:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
	seria[26].interval = 698;
 8002d46:	4b4e      	ldr	r3, [pc, #312]	; (8002e80 <inputseria+0x2bc>)
 8002d48:	4a4e      	ldr	r2, [pc, #312]	; (8002e84 <inputseria+0x2c0>)
 8002d4a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	seria[26].waittime = 224;
 8002d4e:	4b4c      	ldr	r3, [pc, #304]	; (8002e80 <inputseria+0x2bc>)
 8002d50:	22e0      	movs	r2, #224	; 0xe0
 8002d52:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
	seria[27].interval = 880;
 8002d56:	4b4a      	ldr	r3, [pc, #296]	; (8002e80 <inputseria+0x2bc>)
 8002d58:	4a4b      	ldr	r2, [pc, #300]	; (8002e88 <inputseria+0x2c4>)
 8002d5a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	seria[27].waittime = 224;
 8002d5e:	4b48      	ldr	r3, [pc, #288]	; (8002e80 <inputseria+0x2bc>)
 8002d60:	22e0      	movs	r2, #224	; 0xe0
 8002d62:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	seria[28].interval = 988;
 8002d66:	4b46      	ldr	r3, [pc, #280]	; (8002e80 <inputseria+0x2bc>)
 8002d68:	4a48      	ldr	r2, [pc, #288]	; (8002e8c <inputseria+0x2c8>)
 8002d6a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	seria[28].waittime = 224;
 8002d6e:	4b44      	ldr	r3, [pc, #272]	; (8002e80 <inputseria+0x2bc>)
 8002d70:	22e0      	movs	r2, #224	; 0xe0
 8002d72:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	seria[29].interval = 1319;
 8002d76:	4b42      	ldr	r3, [pc, #264]	; (8002e80 <inputseria+0x2bc>)
 8002d78:	4a45      	ldr	r2, [pc, #276]	; (8002e90 <inputseria+0x2cc>)
 8002d7a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	seria[29].waittime = 224;
 8002d7e:	4b40      	ldr	r3, [pc, #256]	; (8002e80 <inputseria+0x2bc>)
 8002d80:	22e0      	movs	r2, #224	; 0xe0
 8002d82:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
	seria[30].interval = 1175;
 8002d86:	4b3e      	ldr	r3, [pc, #248]	; (8002e80 <inputseria+0x2bc>)
 8002d88:	4a42      	ldr	r2, [pc, #264]	; (8002e94 <inputseria+0x2d0>)
 8002d8a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	seria[30].waittime = 462;
 8002d8e:	4b3c      	ldr	r3, [pc, #240]	; (8002e80 <inputseria+0x2bc>)
 8002d90:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002d94:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
	seria[31].interval = 988;
 8002d98:	4b39      	ldr	r3, [pc, #228]	; (8002e80 <inputseria+0x2bc>)
 8002d9a:	4a3c      	ldr	r2, [pc, #240]	; (8002e8c <inputseria+0x2c8>)
 8002d9c:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	seria[31].waittime = 224;
 8002da0:	4b37      	ldr	r3, [pc, #220]	; (8002e80 <inputseria+0x2bc>)
 8002da2:	22e0      	movs	r2, #224	; 0xe0
 8002da4:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
	seria[32].interval = 1047;
 8002da8:	4b35      	ldr	r3, [pc, #212]	; (8002e80 <inputseria+0x2bc>)
 8002daa:	4a3b      	ldr	r2, [pc, #236]	; (8002e98 <inputseria+0x2d4>)
 8002dac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	seria[32].waittime = 224;
 8002db0:	4b33      	ldr	r3, [pc, #204]	; (8002e80 <inputseria+0x2bc>)
 8002db2:	22e0      	movs	r2, #224	; 0xe0
 8002db4:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	seria[33].interval = 1319;
 8002db8:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <inputseria+0x2bc>)
 8002dba:	4a35      	ldr	r2, [pc, #212]	; (8002e90 <inputseria+0x2cc>)
 8002dbc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	seria[33].waittime = 224;
 8002dc0:	4b2f      	ldr	r3, [pc, #188]	; (8002e80 <inputseria+0x2bc>)
 8002dc2:	22e0      	movs	r2, #224	; 0xe0
 8002dc4:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	seria[34].interval = 988;
 8002dc8:	4b2d      	ldr	r3, [pc, #180]	; (8002e80 <inputseria+0x2bc>)
 8002dca:	4a30      	ldr	r2, [pc, #192]	; (8002e8c <inputseria+0x2c8>)
 8002dcc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	seria[34].waittime = 224;
 8002dd0:	4b2b      	ldr	r3, [pc, #172]	; (8002e80 <inputseria+0x2bc>)
 8002dd2:	22e0      	movs	r2, #224	; 0xe0
 8002dd4:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
	seria[35].interval = 784;
 8002dd8:	4b29      	ldr	r3, [pc, #164]	; (8002e80 <inputseria+0x2bc>)
 8002dda:	4a30      	ldr	r2, [pc, #192]	; (8002e9c <inputseria+0x2d8>)
 8002ddc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	seria[35].waittime = 1169;
 8002de0:	4b27      	ldr	r3, [pc, #156]	; (8002e80 <inputseria+0x2bc>)
 8002de2:	f240 4291 	movw	r2, #1169	; 0x491
 8002de6:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
	seria[36].interval = 988;
 8002dea:	4b25      	ldr	r3, [pc, #148]	; (8002e80 <inputseria+0x2bc>)
 8002dec:	4a27      	ldr	r2, [pc, #156]	; (8002e8c <inputseria+0x2c8>)
 8002dee:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	seria[36].waittime = 224;
 8002df2:	4b23      	ldr	r3, [pc, #140]	; (8002e80 <inputseria+0x2bc>)
 8002df4:	22e0      	movs	r2, #224	; 0xe0
 8002df6:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
	seria[37].interval = 784;
 8002dfa:	4b21      	ldr	r3, [pc, #132]	; (8002e80 <inputseria+0x2bc>)
 8002dfc:	4a27      	ldr	r2, [pc, #156]	; (8002e9c <inputseria+0x2d8>)
 8002dfe:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	seria[37].waittime = 224;
 8002e02:	4b1f      	ldr	r3, [pc, #124]	; (8002e80 <inputseria+0x2bc>)
 8002e04:	22e0      	movs	r2, #224	; 0xe0
 8002e06:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
	seria[38].interval = 587;
 8002e0a:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <inputseria+0x2bc>)
 8002e0c:	4a25      	ldr	r2, [pc, #148]	; (8002ea4 <inputseria+0x2e0>)
 8002e0e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	seria[38].waittime = 224;
 8002e12:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <inputseria+0x2bc>)
 8002e14:	22e0      	movs	r2, #224	; 0xe0
 8002e16:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	seria[39].interval = 659;
 8002e1a:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <inputseria+0x2bc>)
 8002e1c:	4a20      	ldr	r2, [pc, #128]	; (8002ea0 <inputseria+0x2dc>)
 8002e1e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	seria[39].waittime = 1400;
 8002e22:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <inputseria+0x2bc>)
 8002e24:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8002e28:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
	seria[40].interval = 294;
 8002e2c:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <inputseria+0x2bc>)
 8002e2e:	4a1e      	ldr	r2, [pc, #120]	; (8002ea8 <inputseria+0x2e4>)
 8002e30:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	seria[40].waittime = 224;
 8002e34:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <inputseria+0x2bc>)
 8002e36:	22e0      	movs	r2, #224	; 0xe0
 8002e38:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
	seria[41].interval = 330;
 8002e3c:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <inputseria+0x2bc>)
 8002e3e:	4a1b      	ldr	r2, [pc, #108]	; (8002eac <inputseria+0x2e8>)
 8002e40:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	seria[41].waittime = 224;
 8002e44:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <inputseria+0x2bc>)
 8002e46:	22e0      	movs	r2, #224	; 0xe0
 8002e48:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
	seria[42].interval = 349;
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <inputseria+0x2bc>)
 8002e4e:	4a18      	ldr	r2, [pc, #96]	; (8002eb0 <inputseria+0x2ec>)
 8002e50:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	seria[42].waittime = 462;
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <inputseria+0x2bc>)
 8002e56:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002e5a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	seria[43].interval = 392;
 8002e5e:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <inputseria+0x2bc>)
 8002e60:	4a14      	ldr	r2, [pc, #80]	; (8002eb4 <inputseria+0x2f0>)
 8002e62:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	seria[43].waittime = 224;
 8002e66:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <inputseria+0x2bc>)
 8002e68:	22e0      	movs	r2, #224	; 0xe0
 8002e6a:	f8a3 215c 	strh.w	r2, [r3, #348]	; 0x15c
	seria[44].interval = 440;
 8002e6e:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <inputseria+0x2bc>)
 8002e70:	4a11      	ldr	r2, [pc, #68]	; (8002eb8 <inputseria+0x2f4>)
 8002e72:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	seria[44].waittime = 224;
 8002e76:	4b02      	ldr	r3, [pc, #8]	; (8002e80 <inputseria+0x2bc>)
 8002e78:	22e0      	movs	r2, #224	; 0xe0
 8002e7a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8002e7e:	e01d      	b.n	8002ebc <inputseria+0x2f8>
 8002e80:	200003c4 	.word	0x200003c4
 8002e84:	442e8000 	.word	0x442e8000
 8002e88:	445c0000 	.word	0x445c0000
 8002e8c:	44770000 	.word	0x44770000
 8002e90:	44a4e000 	.word	0x44a4e000
 8002e94:	4492e000 	.word	0x4492e000
 8002e98:	4482e000 	.word	0x4482e000
 8002e9c:	44440000 	.word	0x44440000
 8002ea0:	4424c000 	.word	0x4424c000
 8002ea4:	4412c000 	.word	0x4412c000
 8002ea8:	43930000 	.word	0x43930000
 8002eac:	43a50000 	.word	0x43a50000
 8002eb0:	43ae8000 	.word	0x43ae8000
 8002eb4:	43c40000 	.word	0x43c40000
 8002eb8:	43dc0000 	.word	0x43dc0000
	seria[45].interval = 494;
 8002ebc:	4bb9      	ldr	r3, [pc, #740]	; (80031a4 <inputseria+0x5e0>)
 8002ebe:	4aba      	ldr	r2, [pc, #744]	; (80031a8 <inputseria+0x5e4>)
 8002ec0:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	seria[45].waittime = 462;
 8002ec4:	4bb7      	ldr	r3, [pc, #732]	; (80031a4 <inputseria+0x5e0>)
 8002ec6:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002eca:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
	seria[46].interval = 523;
 8002ece:	4bb5      	ldr	r3, [pc, #724]	; (80031a4 <inputseria+0x5e0>)
 8002ed0:	4ab6      	ldr	r2, [pc, #728]	; (80031ac <inputseria+0x5e8>)
 8002ed2:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	seria[46].waittime = 224;
 8002ed6:	4bb3      	ldr	r3, [pc, #716]	; (80031a4 <inputseria+0x5e0>)
 8002ed8:	22e0      	movs	r2, #224	; 0xe0
 8002eda:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	seria[47].interval = 494;
 8002ede:	4bb1      	ldr	r3, [pc, #708]	; (80031a4 <inputseria+0x5e0>)
 8002ee0:	4ab1      	ldr	r2, [pc, #708]	; (80031a8 <inputseria+0x5e4>)
 8002ee2:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	seria[47].waittime = 224;
 8002ee6:	4baf      	ldr	r3, [pc, #700]	; (80031a4 <inputseria+0x5e0>)
 8002ee8:	22e0      	movs	r2, #224	; 0xe0
 8002eea:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	seria[48].interval = 330;
 8002eee:	4bad      	ldr	r3, [pc, #692]	; (80031a4 <inputseria+0x5e0>)
 8002ef0:	4aaf      	ldr	r2, [pc, #700]	; (80031b0 <inputseria+0x5ec>)
 8002ef2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	seria[48].waittime = 1400;
 8002ef6:	4bab      	ldr	r3, [pc, #684]	; (80031a4 <inputseria+0x5e0>)
 8002ef8:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8002efc:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184
	seria[49].interval = 698;
 8002f00:	4ba8      	ldr	r3, [pc, #672]	; (80031a4 <inputseria+0x5e0>)
 8002f02:	4aac      	ldr	r2, [pc, #688]	; (80031b4 <inputseria+0x5f0>)
 8002f04:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	seria[49].waittime = 224;
 8002f08:	4ba6      	ldr	r3, [pc, #664]	; (80031a4 <inputseria+0x5e0>)
 8002f0a:	22e0      	movs	r2, #224	; 0xe0
 8002f0c:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
	seria[50].interval = 784;
 8002f10:	4ba4      	ldr	r3, [pc, #656]	; (80031a4 <inputseria+0x5e0>)
 8002f12:	4aa9      	ldr	r2, [pc, #676]	; (80031b8 <inputseria+0x5f4>)
 8002f14:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	seria[50].waittime = 224;
 8002f18:	4ba2      	ldr	r3, [pc, #648]	; (80031a4 <inputseria+0x5e0>)
 8002f1a:	22e0      	movs	r2, #224	; 0xe0
 8002f1c:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
	seria[51].interval = 880;
 8002f20:	4ba0      	ldr	r3, [pc, #640]	; (80031a4 <inputseria+0x5e0>)
 8002f22:	4aa6      	ldr	r2, [pc, #664]	; (80031bc <inputseria+0x5f8>)
 8002f24:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	seria[51].waittime = 462;
 8002f28:	4b9e      	ldr	r3, [pc, #632]	; (80031a4 <inputseria+0x5e0>)
 8002f2a:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002f2e:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
	seria[52].interval = 988;
 8002f32:	4b9c      	ldr	r3, [pc, #624]	; (80031a4 <inputseria+0x5e0>)
 8002f34:	4aa2      	ldr	r2, [pc, #648]	; (80031c0 <inputseria+0x5fc>)
 8002f36:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	seria[52].waittime = 224;
 8002f3a:	4b9a      	ldr	r3, [pc, #616]	; (80031a4 <inputseria+0x5e0>)
 8002f3c:	22e0      	movs	r2, #224	; 0xe0
 8002f3e:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
	seria[53].interval = 1047;
 8002f42:	4b98      	ldr	r3, [pc, #608]	; (80031a4 <inputseria+0x5e0>)
 8002f44:	4a9f      	ldr	r2, [pc, #636]	; (80031c4 <inputseria+0x600>)
 8002f46:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	seria[53].waittime = 224;
 8002f4a:	4b96      	ldr	r3, [pc, #600]	; (80031a4 <inputseria+0x5e0>)
 8002f4c:	22e0      	movs	r2, #224	; 0xe0
 8002f4e:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
	seria[54].interval = 1175;
 8002f52:	4b94      	ldr	r3, [pc, #592]	; (80031a4 <inputseria+0x5e0>)
 8002f54:	4a9c      	ldr	r2, [pc, #624]	; (80031c8 <inputseria+0x604>)
 8002f56:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	seria[54].waittime = 462;
 8002f5a:	4b92      	ldr	r3, [pc, #584]	; (80031a4 <inputseria+0x5e0>)
 8002f5c:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002f60:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
	seria[55].interval = 1319;
 8002f64:	4b8f      	ldr	r3, [pc, #572]	; (80031a4 <inputseria+0x5e0>)
 8002f66:	4a99      	ldr	r2, [pc, #612]	; (80031cc <inputseria+0x608>)
 8002f68:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	seria[55].waittime = 224;
 8002f6c:	4b8d      	ldr	r3, [pc, #564]	; (80031a4 <inputseria+0x5e0>)
 8002f6e:	22e0      	movs	r2, #224	; 0xe0
 8002f70:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
	seria[56].interval = 1397;
 8002f74:	4b8b      	ldr	r3, [pc, #556]	; (80031a4 <inputseria+0x5e0>)
 8002f76:	4a96      	ldr	r2, [pc, #600]	; (80031d0 <inputseria+0x60c>)
 8002f78:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
	seria[56].waittime = 224;
 8002f7c:	4b89      	ldr	r3, [pc, #548]	; (80031a4 <inputseria+0x5e0>)
 8002f7e:	22e0      	movs	r2, #224	; 0xe0
 8002f80:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
	seria[57].interval = 1568;
 8002f84:	4b87      	ldr	r3, [pc, #540]	; (80031a4 <inputseria+0x5e0>)
 8002f86:	4a93      	ldr	r2, [pc, #588]	; (80031d4 <inputseria+0x610>)
 8002f88:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
	seria[57].waittime = 1400;
 8002f8c:	4b85      	ldr	r3, [pc, #532]	; (80031a4 <inputseria+0x5e0>)
 8002f8e:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8002f92:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
	seria[58].interval = 294;
 8002f96:	4b83      	ldr	r3, [pc, #524]	; (80031a4 <inputseria+0x5e0>)
 8002f98:	4a8f      	ldr	r2, [pc, #572]	; (80031d8 <inputseria+0x614>)
 8002f9a:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	seria[58].waittime = 224;
 8002f9e:	4b81      	ldr	r3, [pc, #516]	; (80031a4 <inputseria+0x5e0>)
 8002fa0:	22e0      	movs	r2, #224	; 0xe0
 8002fa2:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
	seria[59].interval = 330;
 8002fa6:	4b7f      	ldr	r3, [pc, #508]	; (80031a4 <inputseria+0x5e0>)
 8002fa8:	4a81      	ldr	r2, [pc, #516]	; (80031b0 <inputseria+0x5ec>)
 8002faa:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	seria[59].waittime = 224;
 8002fae:	4b7d      	ldr	r3, [pc, #500]	; (80031a4 <inputseria+0x5e0>)
 8002fb0:	22e0      	movs	r2, #224	; 0xe0
 8002fb2:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
	seria[60].interval = 349;
 8002fb6:	4b7b      	ldr	r3, [pc, #492]	; (80031a4 <inputseria+0x5e0>)
 8002fb8:	4a88      	ldr	r2, [pc, #544]	; (80031dc <inputseria+0x618>)
 8002fba:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	seria[60].waittime = 462;
 8002fbe:	4b79      	ldr	r3, [pc, #484]	; (80031a4 <inputseria+0x5e0>)
 8002fc0:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002fc4:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
	seria[61].interval = 392;
 8002fc8:	4b76      	ldr	r3, [pc, #472]	; (80031a4 <inputseria+0x5e0>)
 8002fca:	4a85      	ldr	r2, [pc, #532]	; (80031e0 <inputseria+0x61c>)
 8002fcc:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	seria[61].waittime = 224;
 8002fd0:	4b74      	ldr	r3, [pc, #464]	; (80031a4 <inputseria+0x5e0>)
 8002fd2:	22e0      	movs	r2, #224	; 0xe0
 8002fd4:	f8a3 21ec 	strh.w	r2, [r3, #492]	; 0x1ec
	seria[62].interval = 440;
 8002fd8:	4b72      	ldr	r3, [pc, #456]	; (80031a4 <inputseria+0x5e0>)
 8002fda:	4a82      	ldr	r2, [pc, #520]	; (80031e4 <inputseria+0x620>)
 8002fdc:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	seria[62].waittime = 224;
 8002fe0:	4b70      	ldr	r3, [pc, #448]	; (80031a4 <inputseria+0x5e0>)
 8002fe2:	22e0      	movs	r2, #224	; 0xe0
 8002fe4:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
	seria[63].interval = 494;
 8002fe8:	4b6e      	ldr	r3, [pc, #440]	; (80031a4 <inputseria+0x5e0>)
 8002fea:	4a6f      	ldr	r2, [pc, #444]	; (80031a8 <inputseria+0x5e4>)
 8002fec:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	seria[63].waittime = 462;
 8002ff0:	4b6c      	ldr	r3, [pc, #432]	; (80031a4 <inputseria+0x5e0>)
 8002ff2:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002ff6:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	seria[64].interval = 523;
 8002ffa:	4b6a      	ldr	r3, [pc, #424]	; (80031a4 <inputseria+0x5e0>)
 8002ffc:	4a6b      	ldr	r2, [pc, #428]	; (80031ac <inputseria+0x5e8>)
 8002ffe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	seria[64].waittime = 224;
 8003002:	4b68      	ldr	r3, [pc, #416]	; (80031a4 <inputseria+0x5e0>)
 8003004:	22e0      	movs	r2, #224	; 0xe0
 8003006:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	seria[65].interval = 494;
 800300a:	4b66      	ldr	r3, [pc, #408]	; (80031a4 <inputseria+0x5e0>)
 800300c:	4a66      	ldr	r2, [pc, #408]	; (80031a8 <inputseria+0x5e4>)
 800300e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	seria[65].waittime = 224;
 8003012:	4b64      	ldr	r3, [pc, #400]	; (80031a4 <inputseria+0x5e0>)
 8003014:	22e0      	movs	r2, #224	; 0xe0
 8003016:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
	seria[66].interval = 330;
 800301a:	4b62      	ldr	r3, [pc, #392]	; (80031a4 <inputseria+0x5e0>)
 800301c:	4a64      	ldr	r2, [pc, #400]	; (80031b0 <inputseria+0x5ec>)
 800301e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	seria[66].waittime = 1400;
 8003022:	4b60      	ldr	r3, [pc, #384]	; (80031a4 <inputseria+0x5e0>)
 8003024:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003028:	f8a3 2214 	strh.w	r2, [r3, #532]	; 0x214
	seria[67].interval = 698;
 800302c:	4b5d      	ldr	r3, [pc, #372]	; (80031a4 <inputseria+0x5e0>)
 800302e:	4a61      	ldr	r2, [pc, #388]	; (80031b4 <inputseria+0x5f0>)
 8003030:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	seria[67].waittime = 224;
 8003034:	4b5b      	ldr	r3, [pc, #364]	; (80031a4 <inputseria+0x5e0>)
 8003036:	22e0      	movs	r2, #224	; 0xe0
 8003038:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
	seria[68].interval = 659;
 800303c:	4b59      	ldr	r3, [pc, #356]	; (80031a4 <inputseria+0x5e0>)
 800303e:	4a6a      	ldr	r2, [pc, #424]	; (80031e8 <inputseria+0x624>)
 8003040:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	seria[68].waittime = 105;
 8003044:	4b57      	ldr	r3, [pc, #348]	; (80031a4 <inputseria+0x5e0>)
 8003046:	2269      	movs	r2, #105	; 0x69
 8003048:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
	seria[69].interval = 880;
 800304c:	4b55      	ldr	r3, [pc, #340]	; (80031a4 <inputseria+0x5e0>)
 800304e:	4a5b      	ldr	r2, [pc, #364]	; (80031bc <inputseria+0x5f8>)
 8003050:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	seria[69].waittime = 224;
 8003054:	4b53      	ldr	r3, [pc, #332]	; (80031a4 <inputseria+0x5e0>)
 8003056:	22e0      	movs	r2, #224	; 0xe0
 8003058:	f8a3 222c 	strh.w	r2, [r3, #556]	; 0x22c
	seria[70].interval = 784;
 800305c:	4b51      	ldr	r3, [pc, #324]	; (80031a4 <inputseria+0x5e0>)
 800305e:	4a56      	ldr	r2, [pc, #344]	; (80031b8 <inputseria+0x5f4>)
 8003060:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	seria[70].waittime = 105;
 8003064:	4b4f      	ldr	r3, [pc, #316]	; (80031a4 <inputseria+0x5e0>)
 8003066:	2269      	movs	r2, #105	; 0x69
 8003068:	f8a3 2234 	strh.w	r2, [r3, #564]	; 0x234
	seria[71].interval = 988;
 800306c:	4b4d      	ldr	r3, [pc, #308]	; (80031a4 <inputseria+0x5e0>)
 800306e:	4a54      	ldr	r2, [pc, #336]	; (80031c0 <inputseria+0x5fc>)
 8003070:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	seria[71].waittime = 224;
 8003074:	4b4b      	ldr	r3, [pc, #300]	; (80031a4 <inputseria+0x5e0>)
 8003076:	22e0      	movs	r2, #224	; 0xe0
 8003078:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
	seria[72].interval = 880;
 800307c:	4b49      	ldr	r3, [pc, #292]	; (80031a4 <inputseria+0x5e0>)
 800307e:	4a4f      	ldr	r2, [pc, #316]	; (80031bc <inputseria+0x5f8>)
 8003080:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	seria[72].waittime = 105;
 8003084:	4b47      	ldr	r3, [pc, #284]	; (80031a4 <inputseria+0x5e0>)
 8003086:	2269      	movs	r2, #105	; 0x69
 8003088:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
	seria[73].interval = 1047;
 800308c:	4b45      	ldr	r3, [pc, #276]	; (80031a4 <inputseria+0x5e0>)
 800308e:	4a4d      	ldr	r2, [pc, #308]	; (80031c4 <inputseria+0x600>)
 8003090:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	seria[73].waittime = 224;
 8003094:	4b43      	ldr	r3, [pc, #268]	; (80031a4 <inputseria+0x5e0>)
 8003096:	22e0      	movs	r2, #224	; 0xe0
 8003098:	f8a3 224c 	strh.w	r2, [r3, #588]	; 0x24c
	seria[74].interval = 988;
 800309c:	4b41      	ldr	r3, [pc, #260]	; (80031a4 <inputseria+0x5e0>)
 800309e:	4a48      	ldr	r2, [pc, #288]	; (80031c0 <inputseria+0x5fc>)
 80030a0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	seria[74].waittime = 105;
 80030a4:	4b3f      	ldr	r3, [pc, #252]	; (80031a4 <inputseria+0x5e0>)
 80030a6:	2269      	movs	r2, #105	; 0x69
 80030a8:	f8a3 2254 	strh.w	r2, [r3, #596]	; 0x254
	seria[75].interval = 1175;
 80030ac:	4b3d      	ldr	r3, [pc, #244]	; (80031a4 <inputseria+0x5e0>)
 80030ae:	4a46      	ldr	r2, [pc, #280]	; (80031c8 <inputseria+0x604>)
 80030b0:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	seria[75].waittime = 224;
 80030b4:	4b3b      	ldr	r3, [pc, #236]	; (80031a4 <inputseria+0x5e0>)
 80030b6:	22e0      	movs	r2, #224	; 0xe0
 80030b8:	f8a3 225c 	strh.w	r2, [r3, #604]	; 0x25c
	seria[76].interval = 1047;
 80030bc:	4b39      	ldr	r3, [pc, #228]	; (80031a4 <inputseria+0x5e0>)
 80030be:	4a41      	ldr	r2, [pc, #260]	; (80031c4 <inputseria+0x600>)
 80030c0:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	seria[76].waittime = 105;
 80030c4:	4b37      	ldr	r3, [pc, #220]	; (80031a4 <inputseria+0x5e0>)
 80030c6:	2269      	movs	r2, #105	; 0x69
 80030c8:	f8a3 2264 	strh.w	r2, [r3, #612]	; 0x264
	seria[77].interval = 1319;
 80030cc:	4b35      	ldr	r3, [pc, #212]	; (80031a4 <inputseria+0x5e0>)
 80030ce:	4a3f      	ldr	r2, [pc, #252]	; (80031cc <inputseria+0x608>)
 80030d0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	seria[77].waittime = 224;
 80030d4:	4b33      	ldr	r3, [pc, #204]	; (80031a4 <inputseria+0x5e0>)
 80030d6:	22e0      	movs	r2, #224	; 0xe0
 80030d8:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
	seria[78].interval = 1175;
 80030dc:	4b31      	ldr	r3, [pc, #196]	; (80031a4 <inputseria+0x5e0>)
 80030de:	4a3a      	ldr	r2, [pc, #232]	; (80031c8 <inputseria+0x604>)
 80030e0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	seria[78].waittime = 105;
 80030e4:	4b2f      	ldr	r3, [pc, #188]	; (80031a4 <inputseria+0x5e0>)
 80030e6:	2269      	movs	r2, #105	; 0x69
 80030e8:	f8a3 2274 	strh.w	r2, [r3, #628]	; 0x274
	seria[79].interval = 1397;
 80030ec:	4b2d      	ldr	r3, [pc, #180]	; (80031a4 <inputseria+0x5e0>)
 80030ee:	4a38      	ldr	r2, [pc, #224]	; (80031d0 <inputseria+0x60c>)
 80030f0:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	seria[79].waittime = 224;
 80030f4:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <inputseria+0x5e0>)
 80030f6:	22e0      	movs	r2, #224	; 0xe0
 80030f8:	f8a3 227c 	strh.w	r2, [r3, #636]	; 0x27c
	seria[80].interval = 1319;
 80030fc:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <inputseria+0x5e0>)
 80030fe:	4a33      	ldr	r2, [pc, #204]	; (80031cc <inputseria+0x608>)
 8003100:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	seria[80].waittime = 105;
 8003104:	4b27      	ldr	r3, [pc, #156]	; (80031a4 <inputseria+0x5e0>)
 8003106:	2269      	movs	r2, #105	; 0x69
 8003108:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	seria[81].interval = 988;
 800310c:	4b25      	ldr	r3, [pc, #148]	; (80031a4 <inputseria+0x5e0>)
 800310e:	4a2c      	ldr	r2, [pc, #176]	; (80031c0 <inputseria+0x5fc>)
 8003110:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	seria[81].waittime = 105;
 8003114:	4b23      	ldr	r3, [pc, #140]	; (80031a4 <inputseria+0x5e0>)
 8003116:	2269      	movs	r2, #105	; 0x69
 8003118:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
	seria[82].interval = 1047;
 800311c:	4b21      	ldr	r3, [pc, #132]	; (80031a4 <inputseria+0x5e0>)
 800311e:	4a29      	ldr	r2, [pc, #164]	; (80031c4 <inputseria+0x600>)
 8003120:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	seria[82].waittime = 105;
 8003124:	4b1f      	ldr	r3, [pc, #124]	; (80031a4 <inputseria+0x5e0>)
 8003126:	2269      	movs	r2, #105	; 0x69
 8003128:	f8a3 2294 	strh.w	r2, [r3, #660]	; 0x294
	seria[83].interval = 880;
 800312c:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <inputseria+0x5e0>)
 800312e:	4a23      	ldr	r2, [pc, #140]	; (80031bc <inputseria+0x5f8>)
 8003130:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	seria[83].waittime = 105;
 8003134:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <inputseria+0x5e0>)
 8003136:	2269      	movs	r2, #105	; 0x69
 8003138:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
	seria[84].interval = 988;
 800313c:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <inputseria+0x5e0>)
 800313e:	4a20      	ldr	r2, [pc, #128]	; (80031c0 <inputseria+0x5fc>)
 8003140:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	seria[84].waittime = 2576;
 8003144:	4b17      	ldr	r3, [pc, #92]	; (80031a4 <inputseria+0x5e0>)
 8003146:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 800314a:	f8a3 22a4 	strh.w	r2, [r3, #676]	; 0x2a4
	seria[85].interval = 698;
 800314e:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <inputseria+0x5e0>)
 8003150:	4a18      	ldr	r2, [pc, #96]	; (80031b4 <inputseria+0x5f0>)
 8003152:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	seria[85].waittime = 224;
 8003156:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <inputseria+0x5e0>)
 8003158:	22e0      	movs	r2, #224	; 0xe0
 800315a:	f8a3 22ac 	strh.w	r2, [r3, #684]	; 0x2ac
	seria[86].interval = 880;
 800315e:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <inputseria+0x5e0>)
 8003160:	4a16      	ldr	r2, [pc, #88]	; (80031bc <inputseria+0x5f8>)
 8003162:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
	seria[86].waittime = 224;
 8003166:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <inputseria+0x5e0>)
 8003168:	22e0      	movs	r2, #224	; 0xe0
 800316a:	f8a3 22b4 	strh.w	r2, [r3, #692]	; 0x2b4
	seria[87].interval = 988;
 800316e:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <inputseria+0x5e0>)
 8003170:	4a13      	ldr	r2, [pc, #76]	; (80031c0 <inputseria+0x5fc>)
 8003172:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
	seria[87].waittime = 462;
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <inputseria+0x5e0>)
 8003178:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800317c:	f8a3 22bc 	strh.w	r2, [r3, #700]	; 0x2bc
	seria[88].interval = 698;
 8003180:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <inputseria+0x5e0>)
 8003182:	4a0c      	ldr	r2, [pc, #48]	; (80031b4 <inputseria+0x5f0>)
 8003184:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
	seria[88].waittime = 224;
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <inputseria+0x5e0>)
 800318a:	22e0      	movs	r2, #224	; 0xe0
 800318c:	f8a3 22c4 	strh.w	r2, [r3, #708]	; 0x2c4
	seria[89].interval = 880;
 8003190:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <inputseria+0x5e0>)
 8003192:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <inputseria+0x5f8>)
 8003194:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
	seria[89].waittime = 224;
 8003198:	4b02      	ldr	r3, [pc, #8]	; (80031a4 <inputseria+0x5e0>)
 800319a:	22e0      	movs	r2, #224	; 0xe0
 800319c:	f8a3 22cc 	strh.w	r2, [r3, #716]	; 0x2cc
 80031a0:	e024      	b.n	80031ec <inputseria+0x628>
 80031a2:	bf00      	nop
 80031a4:	200003c4 	.word	0x200003c4
 80031a8:	43f70000 	.word	0x43f70000
 80031ac:	4402c000 	.word	0x4402c000
 80031b0:	43a50000 	.word	0x43a50000
 80031b4:	442e8000 	.word	0x442e8000
 80031b8:	44440000 	.word	0x44440000
 80031bc:	445c0000 	.word	0x445c0000
 80031c0:	44770000 	.word	0x44770000
 80031c4:	4482e000 	.word	0x4482e000
 80031c8:	4492e000 	.word	0x4492e000
 80031cc:	44a4e000 	.word	0x44a4e000
 80031d0:	44aea000 	.word	0x44aea000
 80031d4:	44c40000 	.word	0x44c40000
 80031d8:	43930000 	.word	0x43930000
 80031dc:	43ae8000 	.word	0x43ae8000
 80031e0:	43c40000 	.word	0x43c40000
 80031e4:	43dc0000 	.word	0x43dc0000
 80031e8:	4424c000 	.word	0x4424c000
	seria[90].interval = 988;
 80031ec:	4bb9      	ldr	r3, [pc, #740]	; (80034d4 <inputseria+0x910>)
 80031ee:	4aba      	ldr	r2, [pc, #744]	; (80034d8 <inputseria+0x914>)
 80031f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
	seria[90].waittime = 462;
 80031f4:	4bb7      	ldr	r3, [pc, #732]	; (80034d4 <inputseria+0x910>)
 80031f6:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80031fa:	f8a3 22d4 	strh.w	r2, [r3, #724]	; 0x2d4
	seria[91].interval = 698;
 80031fe:	4bb5      	ldr	r3, [pc, #724]	; (80034d4 <inputseria+0x910>)
 8003200:	4ab6      	ldr	r2, [pc, #728]	; (80034dc <inputseria+0x918>)
 8003202:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
	seria[91].waittime = 224;
 8003206:	4bb3      	ldr	r3, [pc, #716]	; (80034d4 <inputseria+0x910>)
 8003208:	22e0      	movs	r2, #224	; 0xe0
 800320a:	f8a3 22dc 	strh.w	r2, [r3, #732]	; 0x2dc
	seria[92].interval = 880;
 800320e:	4bb1      	ldr	r3, [pc, #708]	; (80034d4 <inputseria+0x910>)
 8003210:	4ab3      	ldr	r2, [pc, #716]	; (80034e0 <inputseria+0x91c>)
 8003212:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
	seria[92].waittime = 224;
 8003216:	4baf      	ldr	r3, [pc, #700]	; (80034d4 <inputseria+0x910>)
 8003218:	22e0      	movs	r2, #224	; 0xe0
 800321a:	f8a3 22e4 	strh.w	r2, [r3, #740]	; 0x2e4
	seria[93].interval = 988;
 800321e:	4bad      	ldr	r3, [pc, #692]	; (80034d4 <inputseria+0x910>)
 8003220:	4aad      	ldr	r2, [pc, #692]	; (80034d8 <inputseria+0x914>)
 8003222:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
	seria[93].waittime = 224;
 8003226:	4bab      	ldr	r3, [pc, #684]	; (80034d4 <inputseria+0x910>)
 8003228:	22e0      	movs	r2, #224	; 0xe0
 800322a:	f8a3 22ec 	strh.w	r2, [r3, #748]	; 0x2ec
	seria[94].interval = 1319;
 800322e:	4ba9      	ldr	r3, [pc, #676]	; (80034d4 <inputseria+0x910>)
 8003230:	4aac      	ldr	r2, [pc, #688]	; (80034e4 <inputseria+0x920>)
 8003232:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
	seria[94].waittime = 224;
 8003236:	4ba7      	ldr	r3, [pc, #668]	; (80034d4 <inputseria+0x910>)
 8003238:	22e0      	movs	r2, #224	; 0xe0
 800323a:	f8a3 22f4 	strh.w	r2, [r3, #756]	; 0x2f4
	seria[95].interval = 1175;
 800323e:	4ba5      	ldr	r3, [pc, #660]	; (80034d4 <inputseria+0x910>)
 8003240:	4aa9      	ldr	r2, [pc, #676]	; (80034e8 <inputseria+0x924>)
 8003242:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	seria[95].waittime = 462;
 8003246:	4ba3      	ldr	r3, [pc, #652]	; (80034d4 <inputseria+0x910>)
 8003248:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800324c:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
	seria[96].interval = 988;
 8003250:	4ba0      	ldr	r3, [pc, #640]	; (80034d4 <inputseria+0x910>)
 8003252:	4aa1      	ldr	r2, [pc, #644]	; (80034d8 <inputseria+0x914>)
 8003254:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
	seria[96].waittime = 224;
 8003258:	4b9e      	ldr	r3, [pc, #632]	; (80034d4 <inputseria+0x910>)
 800325a:	22e0      	movs	r2, #224	; 0xe0
 800325c:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
	seria[97].interval = 1047;
 8003260:	4b9c      	ldr	r3, [pc, #624]	; (80034d4 <inputseria+0x910>)
 8003262:	4aa2      	ldr	r2, [pc, #648]	; (80034ec <inputseria+0x928>)
 8003264:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	seria[97].waittime = 224;
 8003268:	4b9a      	ldr	r3, [pc, #616]	; (80034d4 <inputseria+0x910>)
 800326a:	22e0      	movs	r2, #224	; 0xe0
 800326c:	f8a3 230c 	strh.w	r2, [r3, #780]	; 0x30c
	seria[98].interval = 988;
 8003270:	4b98      	ldr	r3, [pc, #608]	; (80034d4 <inputseria+0x910>)
 8003272:	4a99      	ldr	r2, [pc, #612]	; (80034d8 <inputseria+0x914>)
 8003274:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
	seria[98].waittime = 224;
 8003278:	4b96      	ldr	r3, [pc, #600]	; (80034d4 <inputseria+0x910>)
 800327a:	22e0      	movs	r2, #224	; 0xe0
 800327c:	f8a3 2314 	strh.w	r2, [r3, #788]	; 0x314
	seria[99].interval = 784;
 8003280:	4b94      	ldr	r3, [pc, #592]	; (80034d4 <inputseria+0x910>)
 8003282:	4a9b      	ldr	r2, [pc, #620]	; (80034f0 <inputseria+0x92c>)
 8003284:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
	seria[99].waittime = 224;
 8003288:	4b92      	ldr	r3, [pc, #584]	; (80034d4 <inputseria+0x910>)
 800328a:	22e0      	movs	r2, #224	; 0xe0
 800328c:	f8a3 231c 	strh.w	r2, [r3, #796]	; 0x31c
	seria[100].interval = 659;
 8003290:	4b90      	ldr	r3, [pc, #576]	; (80034d4 <inputseria+0x910>)
 8003292:	4a98      	ldr	r2, [pc, #608]	; (80034f4 <inputseria+0x930>)
 8003294:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
	seria[100].waittime = 1169;
 8003298:	4b8e      	ldr	r3, [pc, #568]	; (80034d4 <inputseria+0x910>)
 800329a:	f240 4291 	movw	r2, #1169	; 0x491
 800329e:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324
	seria[101].interval = 587;
 80032a2:	4b8c      	ldr	r3, [pc, #560]	; (80034d4 <inputseria+0x910>)
 80032a4:	4a94      	ldr	r2, [pc, #592]	; (80034f8 <inputseria+0x934>)
 80032a6:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	seria[101].waittime = 224;
 80032aa:	4b8a      	ldr	r3, [pc, #552]	; (80034d4 <inputseria+0x910>)
 80032ac:	22e0      	movs	r2, #224	; 0xe0
 80032ae:	f8a3 232c 	strh.w	r2, [r3, #812]	; 0x32c
	seria[102].interval = 659;
 80032b2:	4b88      	ldr	r3, [pc, #544]	; (80034d4 <inputseria+0x910>)
 80032b4:	4a8f      	ldr	r2, [pc, #572]	; (80034f4 <inputseria+0x930>)
 80032b6:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
	seria[102].waittime = 224;
 80032ba:	4b86      	ldr	r3, [pc, #536]	; (80034d4 <inputseria+0x910>)
 80032bc:	22e0      	movs	r2, #224	; 0xe0
 80032be:	f8a3 2334 	strh.w	r2, [r3, #820]	; 0x334
	seria[103].interval = 784;
 80032c2:	4b84      	ldr	r3, [pc, #528]	; (80034d4 <inputseria+0x910>)
 80032c4:	4a8a      	ldr	r2, [pc, #552]	; (80034f0 <inputseria+0x92c>)
 80032c6:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
	seria[103].waittime = 224;
 80032ca:	4b82      	ldr	r3, [pc, #520]	; (80034d4 <inputseria+0x910>)
 80032cc:	22e0      	movs	r2, #224	; 0xe0
 80032ce:	f8a3 233c 	strh.w	r2, [r3, #828]	; 0x33c
	seria[104].interval = 659;
 80032d2:	4b80      	ldr	r3, [pc, #512]	; (80034d4 <inputseria+0x910>)
 80032d4:	4a87      	ldr	r2, [pc, #540]	; (80034f4 <inputseria+0x930>)
 80032d6:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
	seria[104].waittime = 1400;
 80032da:	4b7e      	ldr	r3, [pc, #504]	; (80034d4 <inputseria+0x910>)
 80032dc:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80032e0:	f8a3 2344 	strh.w	r2, [r3, #836]	; 0x344
	seria[105].interval = 698;
 80032e4:	4b7b      	ldr	r3, [pc, #492]	; (80034d4 <inputseria+0x910>)
 80032e6:	4a7d      	ldr	r2, [pc, #500]	; (80034dc <inputseria+0x918>)
 80032e8:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	seria[105].waittime = 224;
 80032ec:	4b79      	ldr	r3, [pc, #484]	; (80034d4 <inputseria+0x910>)
 80032ee:	22e0      	movs	r2, #224	; 0xe0
 80032f0:	f8a3 234c 	strh.w	r2, [r3, #844]	; 0x34c
	seria[106].interval = 880;
 80032f4:	4b77      	ldr	r3, [pc, #476]	; (80034d4 <inputseria+0x910>)
 80032f6:	4a7a      	ldr	r2, [pc, #488]	; (80034e0 <inputseria+0x91c>)
 80032f8:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
	seria[106].waittime = 224;
 80032fc:	4b75      	ldr	r3, [pc, #468]	; (80034d4 <inputseria+0x910>)
 80032fe:	22e0      	movs	r2, #224	; 0xe0
 8003300:	f8a3 2354 	strh.w	r2, [r3, #852]	; 0x354
	seria[107].interval = 988;
 8003304:	4b73      	ldr	r3, [pc, #460]	; (80034d4 <inputseria+0x910>)
 8003306:	4a74      	ldr	r2, [pc, #464]	; (80034d8 <inputseria+0x914>)
 8003308:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
	seria[107].waittime = 462;
 800330c:	4b71      	ldr	r3, [pc, #452]	; (80034d4 <inputseria+0x910>)
 800330e:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003312:	f8a3 235c 	strh.w	r2, [r3, #860]	; 0x35c
	seria[108].interval = 698;
 8003316:	4b6f      	ldr	r3, [pc, #444]	; (80034d4 <inputseria+0x910>)
 8003318:	4a70      	ldr	r2, [pc, #448]	; (80034dc <inputseria+0x918>)
 800331a:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
	seria[108].waittime = 224;
 800331e:	4b6d      	ldr	r3, [pc, #436]	; (80034d4 <inputseria+0x910>)
 8003320:	22e0      	movs	r2, #224	; 0xe0
 8003322:	f8a3 2364 	strh.w	r2, [r3, #868]	; 0x364
	seria[109].interval = 880;
 8003326:	4b6b      	ldr	r3, [pc, #428]	; (80034d4 <inputseria+0x910>)
 8003328:	4a6d      	ldr	r2, [pc, #436]	; (80034e0 <inputseria+0x91c>)
 800332a:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
	seria[109].waittime = 224;
 800332e:	4b69      	ldr	r3, [pc, #420]	; (80034d4 <inputseria+0x910>)
 8003330:	22e0      	movs	r2, #224	; 0xe0
 8003332:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
	seria[110].interval = 988;
 8003336:	4b67      	ldr	r3, [pc, #412]	; (80034d4 <inputseria+0x910>)
 8003338:	4a67      	ldr	r2, [pc, #412]	; (80034d8 <inputseria+0x914>)
 800333a:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
	seria[110].waittime = 462;
 800333e:	4b65      	ldr	r3, [pc, #404]	; (80034d4 <inputseria+0x910>)
 8003340:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003344:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
	seria[111].interval = 698;
 8003348:	4b62      	ldr	r3, [pc, #392]	; (80034d4 <inputseria+0x910>)
 800334a:	4a64      	ldr	r2, [pc, #400]	; (80034dc <inputseria+0x918>)
 800334c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
	seria[111].waittime = 224;
 8003350:	4b60      	ldr	r3, [pc, #384]	; (80034d4 <inputseria+0x910>)
 8003352:	22e0      	movs	r2, #224	; 0xe0
 8003354:	f8a3 237c 	strh.w	r2, [r3, #892]	; 0x37c
	seria[112].interval = 880;
 8003358:	4b5e      	ldr	r3, [pc, #376]	; (80034d4 <inputseria+0x910>)
 800335a:	4a61      	ldr	r2, [pc, #388]	; (80034e0 <inputseria+0x91c>)
 800335c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
	seria[112].waittime = 224;
 8003360:	4b5c      	ldr	r3, [pc, #368]	; (80034d4 <inputseria+0x910>)
 8003362:	22e0      	movs	r2, #224	; 0xe0
 8003364:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
	seria[113].interval = 988;
 8003368:	4b5a      	ldr	r3, [pc, #360]	; (80034d4 <inputseria+0x910>)
 800336a:	4a5b      	ldr	r2, [pc, #364]	; (80034d8 <inputseria+0x914>)
 800336c:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	seria[113].waittime = 224;
 8003370:	4b58      	ldr	r3, [pc, #352]	; (80034d4 <inputseria+0x910>)
 8003372:	22e0      	movs	r2, #224	; 0xe0
 8003374:	f8a3 238c 	strh.w	r2, [r3, #908]	; 0x38c
	seria[114].interval = 1319;
 8003378:	4b56      	ldr	r3, [pc, #344]	; (80034d4 <inputseria+0x910>)
 800337a:	4a5a      	ldr	r2, [pc, #360]	; (80034e4 <inputseria+0x920>)
 800337c:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
	seria[114].waittime = 224;
 8003380:	4b54      	ldr	r3, [pc, #336]	; (80034d4 <inputseria+0x910>)
 8003382:	22e0      	movs	r2, #224	; 0xe0
 8003384:	f8a3 2394 	strh.w	r2, [r3, #916]	; 0x394
	seria[115].interval = 1175;
 8003388:	4b52      	ldr	r3, [pc, #328]	; (80034d4 <inputseria+0x910>)
 800338a:	4a57      	ldr	r2, [pc, #348]	; (80034e8 <inputseria+0x924>)
 800338c:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
	seria[115].waittime = 462;
 8003390:	4b50      	ldr	r3, [pc, #320]	; (80034d4 <inputseria+0x910>)
 8003392:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003396:	f8a3 239c 	strh.w	r2, [r3, #924]	; 0x39c
	seria[116].interval = 988;
 800339a:	4b4e      	ldr	r3, [pc, #312]	; (80034d4 <inputseria+0x910>)
 800339c:	4a4e      	ldr	r2, [pc, #312]	; (80034d8 <inputseria+0x914>)
 800339e:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	seria[116].waittime = 224;
 80033a2:	4b4c      	ldr	r3, [pc, #304]	; (80034d4 <inputseria+0x910>)
 80033a4:	22e0      	movs	r2, #224	; 0xe0
 80033a6:	f8a3 23a4 	strh.w	r2, [r3, #932]	; 0x3a4
	seria[117].interval = 1047;
 80033aa:	4b4a      	ldr	r3, [pc, #296]	; (80034d4 <inputseria+0x910>)
 80033ac:	4a4f      	ldr	r2, [pc, #316]	; (80034ec <inputseria+0x928>)
 80033ae:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
	seria[117].waittime = 224;
 80033b2:	4b48      	ldr	r3, [pc, #288]	; (80034d4 <inputseria+0x910>)
 80033b4:	22e0      	movs	r2, #224	; 0xe0
 80033b6:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
	seria[118].interval = 1319;
 80033ba:	4b46      	ldr	r3, [pc, #280]	; (80034d4 <inputseria+0x910>)
 80033bc:	4a49      	ldr	r2, [pc, #292]	; (80034e4 <inputseria+0x920>)
 80033be:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
	seria[118].waittime = 224;
 80033c2:	4b44      	ldr	r3, [pc, #272]	; (80034d4 <inputseria+0x910>)
 80033c4:	22e0      	movs	r2, #224	; 0xe0
 80033c6:	f8a3 23b4 	strh.w	r2, [r3, #948]	; 0x3b4
	seria[119].interval = 988;
 80033ca:	4b42      	ldr	r3, [pc, #264]	; (80034d4 <inputseria+0x910>)
 80033cc:	4a42      	ldr	r2, [pc, #264]	; (80034d8 <inputseria+0x914>)
 80033ce:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
	seria[119].waittime = 224;
 80033d2:	4b40      	ldr	r3, [pc, #256]	; (80034d4 <inputseria+0x910>)
 80033d4:	22e0      	movs	r2, #224	; 0xe0
 80033d6:	f8a3 23bc 	strh.w	r2, [r3, #956]	; 0x3bc
	seria[120].interval = 784;
 80033da:	4b3e      	ldr	r3, [pc, #248]	; (80034d4 <inputseria+0x910>)
 80033dc:	4a44      	ldr	r2, [pc, #272]	; (80034f0 <inputseria+0x92c>)
 80033de:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
	seria[120].waittime = 1169;
 80033e2:	4b3c      	ldr	r3, [pc, #240]	; (80034d4 <inputseria+0x910>)
 80033e4:	f240 4291 	movw	r2, #1169	; 0x491
 80033e8:	f8a3 23c4 	strh.w	r2, [r3, #964]	; 0x3c4
	seria[121].interval = 988;
 80033ec:	4b39      	ldr	r3, [pc, #228]	; (80034d4 <inputseria+0x910>)
 80033ee:	4a3a      	ldr	r2, [pc, #232]	; (80034d8 <inputseria+0x914>)
 80033f0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
	seria[121].waittime = 224;
 80033f4:	4b37      	ldr	r3, [pc, #220]	; (80034d4 <inputseria+0x910>)
 80033f6:	22e0      	movs	r2, #224	; 0xe0
 80033f8:	f8a3 23cc 	strh.w	r2, [r3, #972]	; 0x3cc
	seria[122].interval = 784;
 80033fc:	4b35      	ldr	r3, [pc, #212]	; (80034d4 <inputseria+0x910>)
 80033fe:	4a3c      	ldr	r2, [pc, #240]	; (80034f0 <inputseria+0x92c>)
 8003400:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
	seria[122].waittime = 224;
 8003404:	4b33      	ldr	r3, [pc, #204]	; (80034d4 <inputseria+0x910>)
 8003406:	22e0      	movs	r2, #224	; 0xe0
 8003408:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4
	seria[123].interval = 587;
 800340c:	4b31      	ldr	r3, [pc, #196]	; (80034d4 <inputseria+0x910>)
 800340e:	4a3a      	ldr	r2, [pc, #232]	; (80034f8 <inputseria+0x934>)
 8003410:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
	seria[123].waittime = 224;
 8003414:	4b2f      	ldr	r3, [pc, #188]	; (80034d4 <inputseria+0x910>)
 8003416:	22e0      	movs	r2, #224	; 0xe0
 8003418:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
	seria[124].interval = 659;
 800341c:	4b2d      	ldr	r3, [pc, #180]	; (80034d4 <inputseria+0x910>)
 800341e:	4a35      	ldr	r2, [pc, #212]	; (80034f4 <inputseria+0x930>)
 8003420:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
	seria[124].waittime = 1400;
 8003424:	4b2b      	ldr	r3, [pc, #172]	; (80034d4 <inputseria+0x910>)
 8003426:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800342a:	f8a3 23e4 	strh.w	r2, [r3, #996]	; 0x3e4
	seria[125].interval = 294;
 800342e:	4b29      	ldr	r3, [pc, #164]	; (80034d4 <inputseria+0x910>)
 8003430:	4a32      	ldr	r2, [pc, #200]	; (80034fc <inputseria+0x938>)
 8003432:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
	seria[125].waittime = 224;
 8003436:	4b27      	ldr	r3, [pc, #156]	; (80034d4 <inputseria+0x910>)
 8003438:	22e0      	movs	r2, #224	; 0xe0
 800343a:	f8a3 23ec 	strh.w	r2, [r3, #1004]	; 0x3ec
	seria[126].interval = 330;
 800343e:	4b25      	ldr	r3, [pc, #148]	; (80034d4 <inputseria+0x910>)
 8003440:	4a2f      	ldr	r2, [pc, #188]	; (8003500 <inputseria+0x93c>)
 8003442:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
	seria[126].waittime = 224;
 8003446:	4b23      	ldr	r3, [pc, #140]	; (80034d4 <inputseria+0x910>)
 8003448:	22e0      	movs	r2, #224	; 0xe0
 800344a:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4
	seria[127].interval = 349;
 800344e:	4b21      	ldr	r3, [pc, #132]	; (80034d4 <inputseria+0x910>)
 8003450:	4a2c      	ldr	r2, [pc, #176]	; (8003504 <inputseria+0x940>)
 8003452:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
	seria[127].waittime = 462;
 8003456:	4b1f      	ldr	r3, [pc, #124]	; (80034d4 <inputseria+0x910>)
 8003458:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800345c:	f8a3 23fc 	strh.w	r2, [r3, #1020]	; 0x3fc
	seria[128].interval = 392;
 8003460:	4b1c      	ldr	r3, [pc, #112]	; (80034d4 <inputseria+0x910>)
 8003462:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003466:	4a28      	ldr	r2, [pc, #160]	; (8003508 <inputseria+0x944>)
 8003468:	601a      	str	r2, [r3, #0]
	seria[128].waittime = 224;
 800346a:	4b1a      	ldr	r3, [pc, #104]	; (80034d4 <inputseria+0x910>)
 800346c:	22e0      	movs	r2, #224	; 0xe0
 800346e:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	seria[129].interval = 440;
 8003472:	4b18      	ldr	r3, [pc, #96]	; (80034d4 <inputseria+0x910>)
 8003474:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003478:	4a24      	ldr	r2, [pc, #144]	; (800350c <inputseria+0x948>)
 800347a:	601a      	str	r2, [r3, #0]
	seria[129].waittime = 224;
 800347c:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <inputseria+0x910>)
 800347e:	22e0      	movs	r2, #224	; 0xe0
 8003480:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
	seria[130].interval = 494;
 8003484:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <inputseria+0x910>)
 8003486:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800348a:	4a21      	ldr	r2, [pc, #132]	; (8003510 <inputseria+0x94c>)
 800348c:	601a      	str	r2, [r3, #0]
	seria[130].waittime = 462;
 800348e:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <inputseria+0x910>)
 8003490:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003494:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
	seria[131].interval = 523;
 8003498:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <inputseria+0x910>)
 800349a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800349e:	4a1d      	ldr	r2, [pc, #116]	; (8003514 <inputseria+0x950>)
 80034a0:	601a      	str	r2, [r3, #0]
	seria[131].waittime = 224;
 80034a2:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <inputseria+0x910>)
 80034a4:	22e0      	movs	r2, #224	; 0xe0
 80034a6:	f8a3 241c 	strh.w	r2, [r3, #1052]	; 0x41c
	seria[132].interval = 494;
 80034aa:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <inputseria+0x910>)
 80034ac:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80034b0:	4a17      	ldr	r2, [pc, #92]	; (8003510 <inputseria+0x94c>)
 80034b2:	601a      	str	r2, [r3, #0]
	seria[132].waittime = 224;
 80034b4:	4b07      	ldr	r3, [pc, #28]	; (80034d4 <inputseria+0x910>)
 80034b6:	22e0      	movs	r2, #224	; 0xe0
 80034b8:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
	seria[133].interval = 330;
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <inputseria+0x910>)
 80034be:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80034c2:	4a0f      	ldr	r2, [pc, #60]	; (8003500 <inputseria+0x93c>)
 80034c4:	601a      	str	r2, [r3, #0]
	seria[133].waittime = 1400;
 80034c6:	4b03      	ldr	r3, [pc, #12]	; (80034d4 <inputseria+0x910>)
 80034c8:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80034cc:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
 80034d0:	e022      	b.n	8003518 <inputseria+0x954>
 80034d2:	bf00      	nop
 80034d4:	200003c4 	.word	0x200003c4
 80034d8:	44770000 	.word	0x44770000
 80034dc:	442e8000 	.word	0x442e8000
 80034e0:	445c0000 	.word	0x445c0000
 80034e4:	44a4e000 	.word	0x44a4e000
 80034e8:	4492e000 	.word	0x4492e000
 80034ec:	4482e000 	.word	0x4482e000
 80034f0:	44440000 	.word	0x44440000
 80034f4:	4424c000 	.word	0x4424c000
 80034f8:	4412c000 	.word	0x4412c000
 80034fc:	43930000 	.word	0x43930000
 8003500:	43a50000 	.word	0x43a50000
 8003504:	43ae8000 	.word	0x43ae8000
 8003508:	43c40000 	.word	0x43c40000
 800350c:	43dc0000 	.word	0x43dc0000
 8003510:	43f70000 	.word	0x43f70000
 8003514:	4402c000 	.word	0x4402c000
	seria[134].interval = 698;
 8003518:	4ba7      	ldr	r3, [pc, #668]	; (80037b8 <inputseria+0xbf4>)
 800351a:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800351e:	4aa7      	ldr	r2, [pc, #668]	; (80037bc <inputseria+0xbf8>)
 8003520:	601a      	str	r2, [r3, #0]
	seria[134].waittime = 224;
 8003522:	4ba5      	ldr	r3, [pc, #660]	; (80037b8 <inputseria+0xbf4>)
 8003524:	22e0      	movs	r2, #224	; 0xe0
 8003526:	f8a3 2434 	strh.w	r2, [r3, #1076]	; 0x434
	seria[135].interval = 784;
 800352a:	4ba3      	ldr	r3, [pc, #652]	; (80037b8 <inputseria+0xbf4>)
 800352c:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8003530:	4aa3      	ldr	r2, [pc, #652]	; (80037c0 <inputseria+0xbfc>)
 8003532:	601a      	str	r2, [r3, #0]
	seria[135].waittime = 224;
 8003534:	4ba0      	ldr	r3, [pc, #640]	; (80037b8 <inputseria+0xbf4>)
 8003536:	22e0      	movs	r2, #224	; 0xe0
 8003538:	f8a3 243c 	strh.w	r2, [r3, #1084]	; 0x43c
	seria[136].interval = 880;
 800353c:	4b9e      	ldr	r3, [pc, #632]	; (80037b8 <inputseria+0xbf4>)
 800353e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003542:	4aa0      	ldr	r2, [pc, #640]	; (80037c4 <inputseria+0xc00>)
 8003544:	601a      	str	r2, [r3, #0]
	seria[136].waittime = 462;
 8003546:	4b9c      	ldr	r3, [pc, #624]	; (80037b8 <inputseria+0xbf4>)
 8003548:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800354c:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444
	seria[137].interval = 988;
 8003550:	4b99      	ldr	r3, [pc, #612]	; (80037b8 <inputseria+0xbf4>)
 8003552:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8003556:	4a9c      	ldr	r2, [pc, #624]	; (80037c8 <inputseria+0xc04>)
 8003558:	601a      	str	r2, [r3, #0]
	seria[137].waittime = 224;
 800355a:	4b97      	ldr	r3, [pc, #604]	; (80037b8 <inputseria+0xbf4>)
 800355c:	22e0      	movs	r2, #224	; 0xe0
 800355e:	f8a3 244c 	strh.w	r2, [r3, #1100]	; 0x44c
	seria[138].interval = 1047;
 8003562:	4b95      	ldr	r3, [pc, #596]	; (80037b8 <inputseria+0xbf4>)
 8003564:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8003568:	4a98      	ldr	r2, [pc, #608]	; (80037cc <inputseria+0xc08>)
 800356a:	601a      	str	r2, [r3, #0]
	seria[138].waittime = 224;
 800356c:	4b92      	ldr	r3, [pc, #584]	; (80037b8 <inputseria+0xbf4>)
 800356e:	22e0      	movs	r2, #224	; 0xe0
 8003570:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
	seria[139].interval = 1175;
 8003574:	4b90      	ldr	r3, [pc, #576]	; (80037b8 <inputseria+0xbf4>)
 8003576:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 800357a:	4a95      	ldr	r2, [pc, #596]	; (80037d0 <inputseria+0xc0c>)
 800357c:	601a      	str	r2, [r3, #0]
	seria[139].waittime = 462;
 800357e:	4b8e      	ldr	r3, [pc, #568]	; (80037b8 <inputseria+0xbf4>)
 8003580:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003584:	f8a3 245c 	strh.w	r2, [r3, #1116]	; 0x45c
	seria[140].interval = 1319;
 8003588:	4b8b      	ldr	r3, [pc, #556]	; (80037b8 <inputseria+0xbf4>)
 800358a:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 800358e:	4a91      	ldr	r2, [pc, #580]	; (80037d4 <inputseria+0xc10>)
 8003590:	601a      	str	r2, [r3, #0]
	seria[140].waittime = 224;
 8003592:	4b89      	ldr	r3, [pc, #548]	; (80037b8 <inputseria+0xbf4>)
 8003594:	22e0      	movs	r2, #224	; 0xe0
 8003596:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464
	seria[141].interval = 1397;
 800359a:	4b87      	ldr	r3, [pc, #540]	; (80037b8 <inputseria+0xbf4>)
 800359c:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 80035a0:	4a8d      	ldr	r2, [pc, #564]	; (80037d8 <inputseria+0xc14>)
 80035a2:	601a      	str	r2, [r3, #0]
	seria[141].waittime = 224;
 80035a4:	4b84      	ldr	r3, [pc, #528]	; (80037b8 <inputseria+0xbf4>)
 80035a6:	22e0      	movs	r2, #224	; 0xe0
 80035a8:	f8a3 246c 	strh.w	r2, [r3, #1132]	; 0x46c
	seria[142].interval = 1568;
 80035ac:	4b82      	ldr	r3, [pc, #520]	; (80037b8 <inputseria+0xbf4>)
 80035ae:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80035b2:	4a8a      	ldr	r2, [pc, #552]	; (80037dc <inputseria+0xc18>)
 80035b4:	601a      	str	r2, [r3, #0]
	seria[142].waittime = 1400;
 80035b6:	4b80      	ldr	r3, [pc, #512]	; (80037b8 <inputseria+0xbf4>)
 80035b8:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80035bc:	f8a3 2474 	strh.w	r2, [r3, #1140]	; 0x474
	seria[143].interval = 294;
 80035c0:	4b7d      	ldr	r3, [pc, #500]	; (80037b8 <inputseria+0xbf4>)
 80035c2:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 80035c6:	4a86      	ldr	r2, [pc, #536]	; (80037e0 <inputseria+0xc1c>)
 80035c8:	601a      	str	r2, [r3, #0]
	seria[143].waittime = 224;
 80035ca:	4b7b      	ldr	r3, [pc, #492]	; (80037b8 <inputseria+0xbf4>)
 80035cc:	22e0      	movs	r2, #224	; 0xe0
 80035ce:	f8a3 247c 	strh.w	r2, [r3, #1148]	; 0x47c
	seria[144].interval = 330;
 80035d2:	4b79      	ldr	r3, [pc, #484]	; (80037b8 <inputseria+0xbf4>)
 80035d4:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80035d8:	4a82      	ldr	r2, [pc, #520]	; (80037e4 <inputseria+0xc20>)
 80035da:	601a      	str	r2, [r3, #0]
	seria[144].waittime = 224;
 80035dc:	4b76      	ldr	r3, [pc, #472]	; (80037b8 <inputseria+0xbf4>)
 80035de:	22e0      	movs	r2, #224	; 0xe0
 80035e0:	f8a3 2484 	strh.w	r2, [r3, #1156]	; 0x484
	seria[145].interval = 349;
 80035e4:	4b74      	ldr	r3, [pc, #464]	; (80037b8 <inputseria+0xbf4>)
 80035e6:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 80035ea:	4a7f      	ldr	r2, [pc, #508]	; (80037e8 <inputseria+0xc24>)
 80035ec:	601a      	str	r2, [r3, #0]
	seria[145].waittime = 462;
 80035ee:	4b72      	ldr	r3, [pc, #456]	; (80037b8 <inputseria+0xbf4>)
 80035f0:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80035f4:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
	seria[146].interval = 392;
 80035f8:	4b6f      	ldr	r3, [pc, #444]	; (80037b8 <inputseria+0xbf4>)
 80035fa:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80035fe:	4a7b      	ldr	r2, [pc, #492]	; (80037ec <inputseria+0xc28>)
 8003600:	601a      	str	r2, [r3, #0]
	seria[146].waittime = 224;
 8003602:	4b6d      	ldr	r3, [pc, #436]	; (80037b8 <inputseria+0xbf4>)
 8003604:	22e0      	movs	r2, #224	; 0xe0
 8003606:	f8a3 2494 	strh.w	r2, [r3, #1172]	; 0x494
	seria[147].interval = 440;
 800360a:	4b6b      	ldr	r3, [pc, #428]	; (80037b8 <inputseria+0xbf4>)
 800360c:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8003610:	4a77      	ldr	r2, [pc, #476]	; (80037f0 <inputseria+0xc2c>)
 8003612:	601a      	str	r2, [r3, #0]
	seria[147].waittime = 224;
 8003614:	4b68      	ldr	r3, [pc, #416]	; (80037b8 <inputseria+0xbf4>)
 8003616:	22e0      	movs	r2, #224	; 0xe0
 8003618:	f8a3 249c 	strh.w	r2, [r3, #1180]	; 0x49c
	seria[148].interval = 494;
 800361c:	4b66      	ldr	r3, [pc, #408]	; (80037b8 <inputseria+0xbf4>)
 800361e:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8003622:	4a74      	ldr	r2, [pc, #464]	; (80037f4 <inputseria+0xc30>)
 8003624:	601a      	str	r2, [r3, #0]
	seria[148].waittime = 462;
 8003626:	4b64      	ldr	r3, [pc, #400]	; (80037b8 <inputseria+0xbf4>)
 8003628:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800362c:	f8a3 24a4 	strh.w	r2, [r3, #1188]	; 0x4a4
	seria[149].interval = 523;
 8003630:	4b61      	ldr	r3, [pc, #388]	; (80037b8 <inputseria+0xbf4>)
 8003632:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 8003636:	4a70      	ldr	r2, [pc, #448]	; (80037f8 <inputseria+0xc34>)
 8003638:	601a      	str	r2, [r3, #0]
	seria[149].waittime = 224;
 800363a:	4b5f      	ldr	r3, [pc, #380]	; (80037b8 <inputseria+0xbf4>)
 800363c:	22e0      	movs	r2, #224	; 0xe0
 800363e:	f8a3 24ac 	strh.w	r2, [r3, #1196]	; 0x4ac
	seria[150].interval = 494;
 8003642:	4b5d      	ldr	r3, [pc, #372]	; (80037b8 <inputseria+0xbf4>)
 8003644:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8003648:	4a6a      	ldr	r2, [pc, #424]	; (80037f4 <inputseria+0xc30>)
 800364a:	601a      	str	r2, [r3, #0]
	seria[150].waittime = 224;
 800364c:	4b5a      	ldr	r3, [pc, #360]	; (80037b8 <inputseria+0xbf4>)
 800364e:	22e0      	movs	r2, #224	; 0xe0
 8003650:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
	seria[151].interval = 330;
 8003654:	4b58      	ldr	r3, [pc, #352]	; (80037b8 <inputseria+0xbf4>)
 8003656:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800365a:	4a62      	ldr	r2, [pc, #392]	; (80037e4 <inputseria+0xc20>)
 800365c:	601a      	str	r2, [r3, #0]
	seria[151].waittime = 1400;
 800365e:	4b56      	ldr	r3, [pc, #344]	; (80037b8 <inputseria+0xbf4>)
 8003660:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003664:	f8a3 24bc 	strh.w	r2, [r3, #1212]	; 0x4bc
	seria[152].interval = 698;
 8003668:	4b53      	ldr	r3, [pc, #332]	; (80037b8 <inputseria+0xbf4>)
 800366a:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800366e:	4a53      	ldr	r2, [pc, #332]	; (80037bc <inputseria+0xbf8>)
 8003670:	601a      	str	r2, [r3, #0]
	seria[152].waittime = 224;
 8003672:	4b51      	ldr	r3, [pc, #324]	; (80037b8 <inputseria+0xbf4>)
 8003674:	22e0      	movs	r2, #224	; 0xe0
 8003676:	f8a3 24c4 	strh.w	r2, [r3, #1220]	; 0x4c4
	seria[153].interval = 659;
 800367a:	4b4f      	ldr	r3, [pc, #316]	; (80037b8 <inputseria+0xbf4>)
 800367c:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8003680:	4a5e      	ldr	r2, [pc, #376]	; (80037fc <inputseria+0xc38>)
 8003682:	601a      	str	r2, [r3, #0]
	seria[153].waittime = 105;
 8003684:	4b4c      	ldr	r3, [pc, #304]	; (80037b8 <inputseria+0xbf4>)
 8003686:	2269      	movs	r2, #105	; 0x69
 8003688:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
	seria[154].interval = 880;
 800368c:	4b4a      	ldr	r3, [pc, #296]	; (80037b8 <inputseria+0xbf4>)
 800368e:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8003692:	4a4c      	ldr	r2, [pc, #304]	; (80037c4 <inputseria+0xc00>)
 8003694:	601a      	str	r2, [r3, #0]
	seria[154].waittime = 224;
 8003696:	4b48      	ldr	r3, [pc, #288]	; (80037b8 <inputseria+0xbf4>)
 8003698:	22e0      	movs	r2, #224	; 0xe0
 800369a:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4
	seria[155].interval = 784;
 800369e:	4b46      	ldr	r3, [pc, #280]	; (80037b8 <inputseria+0xbf4>)
 80036a0:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 80036a4:	4a46      	ldr	r2, [pc, #280]	; (80037c0 <inputseria+0xbfc>)
 80036a6:	601a      	str	r2, [r3, #0]
	seria[155].waittime = 105;
 80036a8:	4b43      	ldr	r3, [pc, #268]	; (80037b8 <inputseria+0xbf4>)
 80036aa:	2269      	movs	r2, #105	; 0x69
 80036ac:	f8a3 24dc 	strh.w	r2, [r3, #1244]	; 0x4dc
	seria[156].interval = 988;
 80036b0:	4b41      	ldr	r3, [pc, #260]	; (80037b8 <inputseria+0xbf4>)
 80036b2:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 80036b6:	4a44      	ldr	r2, [pc, #272]	; (80037c8 <inputseria+0xc04>)
 80036b8:	601a      	str	r2, [r3, #0]
	seria[156].waittime = 224;
 80036ba:	4b3f      	ldr	r3, [pc, #252]	; (80037b8 <inputseria+0xbf4>)
 80036bc:	22e0      	movs	r2, #224	; 0xe0
 80036be:	f8a3 24e4 	strh.w	r2, [r3, #1252]	; 0x4e4
	seria[157].interval = 880;
 80036c2:	4b3d      	ldr	r3, [pc, #244]	; (80037b8 <inputseria+0xbf4>)
 80036c4:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 80036c8:	4a3e      	ldr	r2, [pc, #248]	; (80037c4 <inputseria+0xc00>)
 80036ca:	601a      	str	r2, [r3, #0]
	seria[157].waittime = 105;
 80036cc:	4b3a      	ldr	r3, [pc, #232]	; (80037b8 <inputseria+0xbf4>)
 80036ce:	2269      	movs	r2, #105	; 0x69
 80036d0:	f8a3 24ec 	strh.w	r2, [r3, #1260]	; 0x4ec
	seria[158].interval = 1047;
 80036d4:	4b38      	ldr	r3, [pc, #224]	; (80037b8 <inputseria+0xbf4>)
 80036d6:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 80036da:	4a3c      	ldr	r2, [pc, #240]	; (80037cc <inputseria+0xc08>)
 80036dc:	601a      	str	r2, [r3, #0]
	seria[158].waittime = 224;
 80036de:	4b36      	ldr	r3, [pc, #216]	; (80037b8 <inputseria+0xbf4>)
 80036e0:	22e0      	movs	r2, #224	; 0xe0
 80036e2:	f8a3 24f4 	strh.w	r2, [r3, #1268]	; 0x4f4
	seria[159].interval = 988;
 80036e6:	4b34      	ldr	r3, [pc, #208]	; (80037b8 <inputseria+0xbf4>)
 80036e8:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
 80036ec:	4a36      	ldr	r2, [pc, #216]	; (80037c8 <inputseria+0xc04>)
 80036ee:	601a      	str	r2, [r3, #0]
	seria[159].waittime = 105;
 80036f0:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <inputseria+0xbf4>)
 80036f2:	2269      	movs	r2, #105	; 0x69
 80036f4:	f8a3 24fc 	strh.w	r2, [r3, #1276]	; 0x4fc
	seria[160].interval = 1175;
 80036f8:	4b2f      	ldr	r3, [pc, #188]	; (80037b8 <inputseria+0xbf4>)
 80036fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fe:	4a34      	ldr	r2, [pc, #208]	; (80037d0 <inputseria+0xc0c>)
 8003700:	601a      	str	r2, [r3, #0]
	seria[160].waittime = 224;
 8003702:	4b2d      	ldr	r3, [pc, #180]	; (80037b8 <inputseria+0xbf4>)
 8003704:	22e0      	movs	r2, #224	; 0xe0
 8003706:	f8a3 2504 	strh.w	r2, [r3, #1284]	; 0x504
	seria[161].interval = 1047;
 800370a:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <inputseria+0xbf4>)
 800370c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003710:	4a2e      	ldr	r2, [pc, #184]	; (80037cc <inputseria+0xc08>)
 8003712:	601a      	str	r2, [r3, #0]
	seria[161].waittime = 105;
 8003714:	4b28      	ldr	r3, [pc, #160]	; (80037b8 <inputseria+0xbf4>)
 8003716:	2269      	movs	r2, #105	; 0x69
 8003718:	f8a3 250c 	strh.w	r2, [r3, #1292]	; 0x50c
	seria[162].interval = 1319;
 800371c:	4b26      	ldr	r3, [pc, #152]	; (80037b8 <inputseria+0xbf4>)
 800371e:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003722:	4a2c      	ldr	r2, [pc, #176]	; (80037d4 <inputseria+0xc10>)
 8003724:	601a      	str	r2, [r3, #0]
	seria[162].waittime = 224;
 8003726:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <inputseria+0xbf4>)
 8003728:	22e0      	movs	r2, #224	; 0xe0
 800372a:	f8a3 2514 	strh.w	r2, [r3, #1300]	; 0x514
	seria[163].interval = 1175;
 800372e:	4b22      	ldr	r3, [pc, #136]	; (80037b8 <inputseria+0xbf4>)
 8003730:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8003734:	4a26      	ldr	r2, [pc, #152]	; (80037d0 <inputseria+0xc0c>)
 8003736:	601a      	str	r2, [r3, #0]
	seria[163].waittime = 105;
 8003738:	4b1f      	ldr	r3, [pc, #124]	; (80037b8 <inputseria+0xbf4>)
 800373a:	2269      	movs	r2, #105	; 0x69
 800373c:	f8a3 251c 	strh.w	r2, [r3, #1308]	; 0x51c
	seria[164].interval = 1397;
 8003740:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <inputseria+0xbf4>)
 8003742:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8003746:	4a24      	ldr	r2, [pc, #144]	; (80037d8 <inputseria+0xc14>)
 8003748:	601a      	str	r2, [r3, #0]
	seria[164].waittime = 224;
 800374a:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <inputseria+0xbf4>)
 800374c:	22e0      	movs	r2, #224	; 0xe0
 800374e:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
	seria[165].interval = 1319;
 8003752:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <inputseria+0xbf4>)
 8003754:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8003758:	4a1e      	ldr	r2, [pc, #120]	; (80037d4 <inputseria+0xc10>)
 800375a:	601a      	str	r2, [r3, #0]
	seria[165].waittime = 105;
 800375c:	4b16      	ldr	r3, [pc, #88]	; (80037b8 <inputseria+0xbf4>)
 800375e:	2269      	movs	r2, #105	; 0x69
 8003760:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
	seria[166].interval = 988;
 8003764:	4b14      	ldr	r3, [pc, #80]	; (80037b8 <inputseria+0xbf4>)
 8003766:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800376a:	4a17      	ldr	r2, [pc, #92]	; (80037c8 <inputseria+0xc04>)
 800376c:	601a      	str	r2, [r3, #0]
	seria[166].waittime = 105;
 800376e:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <inputseria+0xbf4>)
 8003770:	2269      	movs	r2, #105	; 0x69
 8003772:	f8a3 2534 	strh.w	r2, [r3, #1332]	; 0x534
	seria[167].interval = 1047;
 8003776:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <inputseria+0xbf4>)
 8003778:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800377c:	4a13      	ldr	r2, [pc, #76]	; (80037cc <inputseria+0xc08>)
 800377e:	601a      	str	r2, [r3, #0]
	seria[167].waittime = 105;
 8003780:	4b0d      	ldr	r3, [pc, #52]	; (80037b8 <inputseria+0xbf4>)
 8003782:	2269      	movs	r2, #105	; 0x69
 8003784:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
	seria[168].interval = 880;
 8003788:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <inputseria+0xbf4>)
 800378a:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 800378e:	4a0d      	ldr	r2, [pc, #52]	; (80037c4 <inputseria+0xc00>)
 8003790:	601a      	str	r2, [r3, #0]
	seria[168].waittime = 105;
 8003792:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <inputseria+0xbf4>)
 8003794:	2269      	movs	r2, #105	; 0x69
 8003796:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
	seria[169].interval = 988;
 800379a:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <inputseria+0xbf4>)
 800379c:	f503 63a9 	add.w	r3, r3, #1352	; 0x548
 80037a0:	4a09      	ldr	r2, [pc, #36]	; (80037c8 <inputseria+0xc04>)
 80037a2:	601a      	str	r2, [r3, #0]
	seria[169].waittime = 2576;
 80037a4:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <inputseria+0xbf4>)
 80037a6:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 80037aa:	f8a3 254c 	strh.w	r2, [r3, #1356]	; 0x54c

}
 80037ae:	bf00      	nop
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	200003c4 	.word	0x200003c4
 80037bc:	442e8000 	.word	0x442e8000
 80037c0:	44440000 	.word	0x44440000
 80037c4:	445c0000 	.word	0x445c0000
 80037c8:	44770000 	.word	0x44770000
 80037cc:	4482e000 	.word	0x4482e000
 80037d0:	4492e000 	.word	0x4492e000
 80037d4:	44a4e000 	.word	0x44a4e000
 80037d8:	44aea000 	.word	0x44aea000
 80037dc:	44c40000 	.word	0x44c40000
 80037e0:	43930000 	.word	0x43930000
 80037e4:	43a50000 	.word	0x43a50000
 80037e8:	43ae8000 	.word	0x43ae8000
 80037ec:	43c40000 	.word	0x43c40000
 80037f0:	43dc0000 	.word	0x43dc0000
 80037f4:	43f70000 	.word	0x43f70000
 80037f8:	4402c000 	.word	0x4402c000
 80037fc:	4424c000 	.word	0x4424c000

08003800 <read_switch1>:


#include "PL_switch.h"
#include "gpio.h"

char read_switch1(void){
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0

	char check=(HAL_GPIO_ReadPin(SWITCH_1_GPIO_Port,SWITCH_1_Pin)==0);
 8003806:	2140      	movs	r1, #64	; 0x40
 8003808:	4807      	ldr	r0, [pc, #28]	; (8003828 <read_switch1+0x28>)
 800380a:	f003 fd69 	bl	80072e0 <HAL_GPIO_ReadPin>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	bf0c      	ite	eq
 8003814:	2301      	moveq	r3, #1
 8003816:	2300      	movne	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	71fb      	strb	r3, [r7, #7]


return check;
 800381c:	79fb      	ldrb	r3, [r7, #7]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	48000400 	.word	0x48000400

0800382c <read_switch2>:

char read_switch2(void){
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0

	char check=(HAL_GPIO_ReadPin(SWITCH_2_GPIO_Port,SWITCH_2_Pin)==0);
 8003832:	2180      	movs	r1, #128	; 0x80
 8003834:	4807      	ldr	r0, [pc, #28]	; (8003854 <read_switch2+0x28>)
 8003836:	f003 fd53 	bl	80072e0 <HAL_GPIO_ReadPin>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	bf0c      	ite	eq
 8003840:	2301      	moveq	r3, #1
 8003842:	2300      	movne	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	71fb      	strb	r3, [r7, #7]


return check;
 8003848:	79fb      	ldrb	r3, [r7, #7]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	48000400 	.word	0x48000400

08003858 <pl_timer_init>:
#include "tim.h"

volatile uint32_t g_timCount;


void pl_timer_init(void){
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 800385c:	4802      	ldr	r0, [pc, #8]	; (8003868 <pl_timer_init+0x10>)
 800385e:	f005 fad5 	bl	8008e0c <HAL_TIM_Base_Start_IT>
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20000aec 	.word	0x20000aec

0800386c <pl_timer_count>:

void pl_timer_count(void){
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
	 g_timCount++;
 8003870:	4b04      	ldr	r3, [pc, #16]	; (8003884 <pl_timer_count+0x18>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3301      	adds	r3, #1
 8003876:	4a03      	ldr	r2, [pc, #12]	; (8003884 <pl_timer_count+0x18>)
 8003878:	6013      	str	r3, [r2, #0]
}
 800387a:	bf00      	nop
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	20000954 	.word	0x20000954

08003888 <wait_ms>:


void wait_ms(uint32_t wait_time) {
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8003890:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <wait_ms+0x30>)
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 8003896:	4b09      	ldr	r3, [pc, #36]	; (80038bc <wait_ms+0x34>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2200      	movs	r2, #0
 800389c:	625a      	str	r2, [r3, #36]	; 0x24
        while (g_timCount < wait_time) {
 800389e:	bf00      	nop
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <wait_ms+0x30>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d8fa      	bhi.n	80038a0 <wait_ms+0x18>
        }

}
 80038aa:	bf00      	nop
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	20000954 	.word	0x20000954
 80038bc:	20000aec 	.word	0x20000aec

080038c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80038c6:	463b      	mov	r3, r7
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	605a      	str	r2, [r3, #4]
 80038ce:	609a      	str	r2, [r3, #8]
 80038d0:	60da      	str	r2, [r3, #12]
 80038d2:	611a      	str	r2, [r3, #16]
 80038d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80038d6:	4b46      	ldr	r3, [pc, #280]	; (80039f0 <MX_ADC1_Init+0x130>)
 80038d8:	4a46      	ldr	r2, [pc, #280]	; (80039f4 <MX_ADC1_Init+0x134>)
 80038da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 80038dc:	4b44      	ldr	r3, [pc, #272]	; (80039f0 <MX_ADC1_Init+0x130>)
 80038de:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80038e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80038e4:	4b42      	ldr	r3, [pc, #264]	; (80039f0 <MX_ADC1_Init+0x130>)
 80038e6:	2208      	movs	r2, #8
 80038e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80038ea:	4b41      	ldr	r3, [pc, #260]	; (80039f0 <MX_ADC1_Init+0x130>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80038f0:	4b3f      	ldr	r3, [pc, #252]	; (80039f0 <MX_ADC1_Init+0x130>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80038f6:	4b3e      	ldr	r3, [pc, #248]	; (80039f0 <MX_ADC1_Init+0x130>)
 80038f8:	2204      	movs	r2, #4
 80038fa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80038fc:	4b3c      	ldr	r3, [pc, #240]	; (80039f0 <MX_ADC1_Init+0x130>)
 80038fe:	2200      	movs	r2, #0
 8003900:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003902:	4b3b      	ldr	r3, [pc, #236]	; (80039f0 <MX_ADC1_Init+0x130>)
 8003904:	2200      	movs	r2, #0
 8003906:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8003908:	4b39      	ldr	r3, [pc, #228]	; (80039f0 <MX_ADC1_Init+0x130>)
 800390a:	2205      	movs	r2, #5
 800390c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800390e:	4b38      	ldr	r3, [pc, #224]	; (80039f0 <MX_ADC1_Init+0x130>)
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003916:	4b36      	ldr	r3, [pc, #216]	; (80039f0 <MX_ADC1_Init+0x130>)
 8003918:	2200      	movs	r2, #0
 800391a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800391c:	4b34      	ldr	r3, [pc, #208]	; (80039f0 <MX_ADC1_Init+0x130>)
 800391e:	2200      	movs	r2, #0
 8003920:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003922:	4b33      	ldr	r3, [pc, #204]	; (80039f0 <MX_ADC1_Init+0x130>)
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800392a:	4b31      	ldr	r3, [pc, #196]	; (80039f0 <MX_ADC1_Init+0x130>)
 800392c:	2200      	movs	r2, #0
 800392e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003930:	4b2f      	ldr	r3, [pc, #188]	; (80039f0 <MX_ADC1_Init+0x130>)
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003938:	482d      	ldr	r0, [pc, #180]	; (80039f0 <MX_ADC1_Init+0x130>)
 800393a:	f001 feb9 	bl	80056b0 <HAL_ADC_Init>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8003944:	f000 fb41 	bl	8003fca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8003948:	4b2b      	ldr	r3, [pc, #172]	; (80039f8 <MX_ADC1_Init+0x138>)
 800394a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800394c:	2306      	movs	r3, #6
 800394e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8003950:	2301      	movs	r3, #1
 8003952:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003954:	237f      	movs	r3, #127	; 0x7f
 8003956:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003958:	2304      	movs	r3, #4
 800395a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800395c:	2300      	movs	r3, #0
 800395e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003960:	463b      	mov	r3, r7
 8003962:	4619      	mov	r1, r3
 8003964:	4822      	ldr	r0, [pc, #136]	; (80039f0 <MX_ADC1_Init+0x130>)
 8003966:	f002 fa17 	bl	8005d98 <HAL_ADC_ConfigChannel>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8003970:	f000 fb2b 	bl	8003fca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003974:	4b21      	ldr	r3, [pc, #132]	; (80039fc <MX_ADC1_Init+0x13c>)
 8003976:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003978:	230c      	movs	r3, #12
 800397a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800397c:	463b      	mov	r3, r7
 800397e:	4619      	mov	r1, r3
 8003980:	481b      	ldr	r0, [pc, #108]	; (80039f0 <MX_ADC1_Init+0x130>)
 8003982:	f002 fa09 	bl	8005d98 <HAL_ADC_ConfigChannel>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 800398c:	f000 fb1d 	bl	8003fca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003990:	4b1b      	ldr	r3, [pc, #108]	; (8003a00 <MX_ADC1_Init+0x140>)
 8003992:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003994:	2312      	movs	r3, #18
 8003996:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003998:	463b      	mov	r3, r7
 800399a:	4619      	mov	r1, r3
 800399c:	4814      	ldr	r0, [pc, #80]	; (80039f0 <MX_ADC1_Init+0x130>)
 800399e:	f002 f9fb 	bl	8005d98 <HAL_ADC_ConfigChannel>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80039a8:	f000 fb0f 	bl	8003fca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80039ac:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <MX_ADC1_Init+0x144>)
 80039ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80039b0:	2318      	movs	r3, #24
 80039b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039b4:	463b      	mov	r3, r7
 80039b6:	4619      	mov	r1, r3
 80039b8:	480d      	ldr	r0, [pc, #52]	; (80039f0 <MX_ADC1_Init+0x130>)
 80039ba:	f002 f9ed 	bl	8005d98 <HAL_ADC_ConfigChannel>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80039c4:	f000 fb01 	bl	8003fca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80039c8:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <MX_ADC1_Init+0x148>)
 80039ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80039cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039d2:	463b      	mov	r3, r7
 80039d4:	4619      	mov	r1, r3
 80039d6:	4806      	ldr	r0, [pc, #24]	; (80039f0 <MX_ADC1_Init+0x130>)
 80039d8:	f002 f9de 	bl	8005d98 <HAL_ADC_ConfigChannel>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80039e2:	f000 faf2 	bl	8003fca <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80039e6:	bf00      	nop
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000958 	.word	0x20000958
 80039f4:	50040000 	.word	0x50040000
 80039f8:	43210000 	.word	0x43210000
 80039fc:	3ef08000 	.word	0x3ef08000
 8003a00:	32601000 	.word	0x32601000
 8003a04:	2e300800 	.word	0x2e300800
 8003a08:	2a000400 	.word	0x2a000400

08003a0c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b0a0      	sub	sp, #128	; 0x80
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	605a      	str	r2, [r3, #4]
 8003a1e:	609a      	str	r2, [r3, #8]
 8003a20:	60da      	str	r2, [r3, #12]
 8003a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a24:	f107 0318 	add.w	r3, r7, #24
 8003a28:	2254      	movs	r2, #84	; 0x54
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f006 ff07 	bl	800a840 <memset>
  if(adcHandle->Instance==ADC1)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a47      	ldr	r2, [pc, #284]	; (8003b54 <HAL_ADC_MspInit+0x148>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	f040 8087 	bne.w	8003b4c <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003a3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a42:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003a44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003a48:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 3;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8003a52:	2310      	movs	r3, #16
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003a56:	2307      	movs	r3, #7
 8003a58:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003a62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a66:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a68:	f107 0318 	add.w	r3, r7, #24
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f004 fe8d 	bl	800878c <HAL_RCCEx_PeriphCLKConfig>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8003a78:	f000 faa7 	bl	8003fca <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003a7c:	4b36      	ldr	r3, [pc, #216]	; (8003b58 <HAL_ADC_MspInit+0x14c>)
 8003a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a80:	4a35      	ldr	r2, [pc, #212]	; (8003b58 <HAL_ADC_MspInit+0x14c>)
 8003a82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a88:	4b33      	ldr	r3, [pc, #204]	; (8003b58 <HAL_ADC_MspInit+0x14c>)
 8003a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a94:	4b30      	ldr	r3, [pc, #192]	; (8003b58 <HAL_ADC_MspInit+0x14c>)
 8003a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a98:	4a2f      	ldr	r2, [pc, #188]	; (8003b58 <HAL_ADC_MspInit+0x14c>)
 8003a9a:	f043 0301 	orr.w	r3, r3, #1
 8003a9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003aa0:	4b2d      	ldr	r3, [pc, #180]	; (8003b58 <HAL_ADC_MspInit+0x14c>)
 8003aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aac:	4b2a      	ldr	r3, [pc, #168]	; (8003b58 <HAL_ADC_MspInit+0x14c>)
 8003aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab0:	4a29      	ldr	r2, [pc, #164]	; (8003b58 <HAL_ADC_MspInit+0x14c>)
 8003ab2:	f043 0302 	orr.w	r3, r3, #2
 8003ab6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ab8:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <HAL_ADC_MspInit+0x14c>)
 8003aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = SENSOR_4_Pin|SENSOR_3_Pin|SENSOR_2_Pin;
 8003ac4:	23e0      	movs	r3, #224	; 0xe0
 8003ac6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003ac8:	230b      	movs	r3, #11
 8003aca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ada:	f003 fa97 	bl	800700c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR_1_Pin|BATTERY_Pin;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003ae2:	230b      	movs	r3, #11
 8003ae4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003aee:	4619      	mov	r1, r3
 8003af0:	481a      	ldr	r0, [pc, #104]	; (8003b5c <HAL_ADC_MspInit+0x150>)
 8003af2:	f003 fa8b 	bl	800700c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003af6:	4b1a      	ldr	r3, [pc, #104]	; (8003b60 <HAL_ADC_MspInit+0x154>)
 8003af8:	4a1a      	ldr	r2, [pc, #104]	; (8003b64 <HAL_ADC_MspInit+0x158>)
 8003afa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003afc:	4b18      	ldr	r3, [pc, #96]	; (8003b60 <HAL_ADC_MspInit+0x154>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b02:	4b17      	ldr	r3, [pc, #92]	; (8003b60 <HAL_ADC_MspInit+0x154>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b08:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <HAL_ADC_MspInit+0x154>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003b0e:	4b14      	ldr	r3, [pc, #80]	; (8003b60 <HAL_ADC_MspInit+0x154>)
 8003b10:	2280      	movs	r2, #128	; 0x80
 8003b12:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b14:	4b12      	ldr	r3, [pc, #72]	; (8003b60 <HAL_ADC_MspInit+0x154>)
 8003b16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b1a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b1c:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <HAL_ADC_MspInit+0x154>)
 8003b1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b22:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003b24:	4b0e      	ldr	r3, [pc, #56]	; (8003b60 <HAL_ADC_MspInit+0x154>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <HAL_ADC_MspInit+0x154>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b30:	480b      	ldr	r0, [pc, #44]	; (8003b60 <HAL_ADC_MspInit+0x154>)
 8003b32:	f003 f835 	bl	8006ba0 <HAL_DMA_Init>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8003b3c:	f000 fa45 	bl	8003fca <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a07      	ldr	r2, [pc, #28]	; (8003b60 <HAL_ADC_MspInit+0x154>)
 8003b44:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b46:	4a06      	ldr	r2, [pc, #24]	; (8003b60 <HAL_ADC_MspInit+0x154>)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	3780      	adds	r7, #128	; 0x80
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	50040000 	.word	0x50040000
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	48000400 	.word	0x48000400
 8003b60:	200009bc 	.word	0x200009bc
 8003b64:	40020008 	.word	0x40020008

08003b68 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 8003b70:	f7fe fdba 	bl	80026e8 <pl_callback_getSensor>

}
 8003b74:	bf00      	nop
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b82:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <MX_DMA_Init+0x38>)
 8003b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b86:	4a0b      	ldr	r2, [pc, #44]	; (8003bb4 <MX_DMA_Init+0x38>)
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	6493      	str	r3, [r2, #72]	; 0x48
 8003b8e:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <MX_DMA_Init+0x38>)
 8003b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	607b      	str	r3, [r7, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	200b      	movs	r0, #11
 8003ba0:	f002 ffc7 	bl	8006b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003ba4:	200b      	movs	r0, #11
 8003ba6:	f002 ffe0 	bl	8006b6a <HAL_NVIC_EnableIRQ>

}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40021000 	.word	0x40021000

08003bb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bbe:	f107 030c 	add.w	r3, r7, #12
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	605a      	str	r2, [r3, #4]
 8003bc8:	609a      	str	r2, [r3, #8]
 8003bca:	60da      	str	r2, [r3, #12]
 8003bcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bce:	4b39      	ldr	r3, [pc, #228]	; (8003cb4 <MX_GPIO_Init+0xfc>)
 8003bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd2:	4a38      	ldr	r2, [pc, #224]	; (8003cb4 <MX_GPIO_Init+0xfc>)
 8003bd4:	f043 0304 	orr.w	r3, r3, #4
 8003bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bda:	4b36      	ldr	r3, [pc, #216]	; (8003cb4 <MX_GPIO_Init+0xfc>)
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be6:	4b33      	ldr	r3, [pc, #204]	; (8003cb4 <MX_GPIO_Init+0xfc>)
 8003be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bea:	4a32      	ldr	r2, [pc, #200]	; (8003cb4 <MX_GPIO_Init+0xfc>)
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bf2:	4b30      	ldr	r3, [pc, #192]	; (8003cb4 <MX_GPIO_Init+0xfc>)
 8003bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	607b      	str	r3, [r7, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bfe:	4b2d      	ldr	r3, [pc, #180]	; (8003cb4 <MX_GPIO_Init+0xfc>)
 8003c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c02:	4a2c      	ldr	r2, [pc, #176]	; (8003cb4 <MX_GPIO_Init+0xfc>)
 8003c04:	f043 0302 	orr.w	r3, r3, #2
 8003c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c0a:	4b2a      	ldr	r3, [pc, #168]	; (8003cb4 <MX_GPIO_Init+0xfc>)
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSORLED_1_Pin|SENSORLED_2_Pin, GPIO_PIN_RESET);
 8003c16:	2200      	movs	r2, #0
 8003c18:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003c1c:	4826      	ldr	r0, [pc, #152]	; (8003cb8 <MX_GPIO_Init+0x100>)
 8003c1e:	f003 fb77 	bl	8007310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_ENABLE_Pin|MOTOR_CW_CCW_L_Pin, GPIO_PIN_RESET);
 8003c22:	2200      	movs	r2, #0
 8003c24:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c2c:	f003 fb70 	bl	8007310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INTERFACELED_Pin|MOTOR_CW_CCW_R_Pin|MD_RESET_Pin, GPIO_PIN_RESET);
 8003c30:	2200      	movs	r2, #0
 8003c32:	2138      	movs	r1, #56	; 0x38
 8003c34:	4821      	ldr	r0, [pc, #132]	; (8003cbc <MX_GPIO_Init+0x104>)
 8003c36:	f003 fb6b 	bl	8007310 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SENSORLED_1_Pin|SENSORLED_2_Pin;
 8003c3a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003c3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c40:	2301      	movs	r3, #1
 8003c42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c4c:	f107 030c 	add.w	r3, r7, #12
 8003c50:	4619      	mov	r1, r3
 8003c52:	4819      	ldr	r0, [pc, #100]	; (8003cb8 <MX_GPIO_Init+0x100>)
 8003c54:	f003 f9da 	bl	800700c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_ENABLE_Pin|MOTOR_CW_CCW_L_Pin;
 8003c58:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003c5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c6a:	f107 030c 	add.w	r3, r7, #12
 8003c6e:	4619      	mov	r1, r3
 8003c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c74:	f003 f9ca 	bl	800700c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = INTERFACELED_Pin|MOTOR_CW_CCW_R_Pin|MD_RESET_Pin;
 8003c78:	2338      	movs	r3, #56	; 0x38
 8003c7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c88:	f107 030c 	add.w	r3, r7, #12
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	480b      	ldr	r0, [pc, #44]	; (8003cbc <MX_GPIO_Init+0x104>)
 8003c90:	f003 f9bc 	bl	800700c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SWITCH_1_Pin|SWITCH_2_Pin;
 8003c94:	23c0      	movs	r3, #192	; 0xc0
 8003c96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca0:	f107 030c 	add.w	r3, r7, #12
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4805      	ldr	r0, [pc, #20]	; (8003cbc <MX_GPIO_Init+0x104>)
 8003ca8:	f003 f9b0 	bl	800700c <HAL_GPIO_Init>

}
 8003cac:	bf00      	nop
 8003cae:	3720      	adds	r7, #32
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	48000800 	.word	0x48000800
 8003cbc:	48000400 	.word	0x48000400

08003cc0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	; (8003d34 <MX_I2C1_Init+0x74>)
 8003cc6:	4a1c      	ldr	r2, [pc, #112]	; (8003d38 <MX_I2C1_Init+0x78>)
 8003cc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8003cca:	4b1a      	ldr	r3, [pc, #104]	; (8003d34 <MX_I2C1_Init+0x74>)
 8003ccc:	4a1b      	ldr	r2, [pc, #108]	; (8003d3c <MX_I2C1_Init+0x7c>)
 8003cce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003cd0:	4b18      	ldr	r3, [pc, #96]	; (8003d34 <MX_I2C1_Init+0x74>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cd6:	4b17      	ldr	r3, [pc, #92]	; (8003d34 <MX_I2C1_Init+0x74>)
 8003cd8:	2201      	movs	r2, #1
 8003cda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cdc:	4b15      	ldr	r3, [pc, #84]	; (8003d34 <MX_I2C1_Init+0x74>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003ce2:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <MX_I2C1_Init+0x74>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003ce8:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <MX_I2C1_Init+0x74>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003cee:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <MX_I2C1_Init+0x74>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003cf4:	4b0f      	ldr	r3, [pc, #60]	; (8003d34 <MX_I2C1_Init+0x74>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003cfa:	480e      	ldr	r0, [pc, #56]	; (8003d34 <MX_I2C1_Init+0x74>)
 8003cfc:	f003 fb20 	bl	8007340 <HAL_I2C_Init>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003d06:	f000 f960 	bl	8003fca <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	4809      	ldr	r0, [pc, #36]	; (8003d34 <MX_I2C1_Init+0x74>)
 8003d0e:	f003 fe1b 	bl	8007948 <HAL_I2CEx_ConfigAnalogFilter>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003d18:	f000 f957 	bl	8003fca <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	4805      	ldr	r0, [pc, #20]	; (8003d34 <MX_I2C1_Init+0x74>)
 8003d20:	f003 fe5d 	bl	80079de <HAL_I2CEx_ConfigDigitalFilter>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003d2a:	f000 f94e 	bl	8003fca <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003d2e:	bf00      	nop
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000a04 	.word	0x20000a04
 8003d38:	40005400 	.word	0x40005400
 8003d3c:	10909cec 	.word	0x10909cec

08003d40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b09e      	sub	sp, #120	; 0x78
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	60da      	str	r2, [r3, #12]
 8003d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d58:	f107 0310 	add.w	r3, r7, #16
 8003d5c:	2254      	movs	r2, #84	; 0x54
 8003d5e:	2100      	movs	r1, #0
 8003d60:	4618      	mov	r0, r3
 8003d62:	f006 fd6d 	bl	800a840 <memset>
  if(i2cHandle->Instance==I2C1)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1f      	ldr	r2, [pc, #124]	; (8003de8 <HAL_I2C_MspInit+0xa8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d137      	bne.n	8003de0 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003d70:	2340      	movs	r3, #64	; 0x40
 8003d72:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003d74:	2300      	movs	r3, #0
 8003d76:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d78:	f107 0310 	add.w	r3, r7, #16
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f004 fd05 	bl	800878c <HAL_RCCEx_PeriphCLKConfig>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003d88:	f000 f91f 	bl	8003fca <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d8c:	4b17      	ldr	r3, [pc, #92]	; (8003dec <HAL_I2C_MspInit+0xac>)
 8003d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d90:	4a16      	ldr	r2, [pc, #88]	; (8003dec <HAL_I2C_MspInit+0xac>)
 8003d92:	f043 0301 	orr.w	r3, r3, #1
 8003d96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d98:	4b14      	ldr	r3, [pc, #80]	; (8003dec <HAL_I2C_MspInit+0xac>)
 8003d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003da4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003da8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003daa:	2312      	movs	r3, #18
 8003dac:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003dae:	2301      	movs	r3, #1
 8003db0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003db2:	2303      	movs	r3, #3
 8003db4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003db6:	2304      	movs	r3, #4
 8003db8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dc4:	f003 f922 	bl	800700c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003dc8:	4b08      	ldr	r3, [pc, #32]	; (8003dec <HAL_I2C_MspInit+0xac>)
 8003dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dcc:	4a07      	ldr	r2, [pc, #28]	; (8003dec <HAL_I2C_MspInit+0xac>)
 8003dce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8003dd4:	4b05      	ldr	r3, [pc, #20]	; (8003dec <HAL_I2C_MspInit+0xac>)
 8003dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003de0:	bf00      	nop
 8003de2:	3778      	adds	r7, #120	; 0x78
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40005400 	.word	0x40005400
 8003dec:	40021000 	.word	0x40021000

08003df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003df6:	f001 f9ac 	bl	8005152 <HAL_Init>
  /* USER CODE BEGIN Init */
 // setbuf(stdout, NULL);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003dfa:	f000 f897 	bl	8003f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003dfe:	f7ff fedb 	bl	8003bb8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003e02:	f001 f8e3 	bl	8004fcc <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8003e06:	f000 ff2b 	bl	8004c60 <MX_TIM6_Init>
  MX_I2C1_Init();
 8003e0a:	f7ff ff59 	bl	8003cc0 <MX_I2C1_Init>
  MX_DMA_Init();
 8003e0e:	f7ff feb5 	bl	8003b7c <MX_DMA_Init>
  MX_ADC1_Init();
 8003e12:	f7ff fd55 	bl	80038c0 <MX_ADC1_Init>
  MX_TIM15_Init();
 8003e16:	f000 ff59 	bl	8004ccc <MX_TIM15_Init>
  MX_TIM1_Init();
 8003e1a:	f000 fe37 	bl	8004a8c <MX_TIM1_Init>
  MX_TIM2_Init();
 8003e1e:	f000 fec5 	bl	8004bac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  init_WallControl();
 8003e22:	f7fe f8cb 	bl	8001fbc <init_WallControl>
  pl_motor_init();
 8003e26:	f7fe fa89 	bl	800233c <pl_motor_init>
  pl_speaker_init();
 8003e2a:	f7fe fd67 	bl	80028fc <pl_speaker_init>
  pl_timer_init();
 8003e2e:	f7ff fd13 	bl	8003858 <pl_timer_init>
  pl_lcd_init();
 8003e32:	f7fe fa28 	bl	8002286 <pl_lcd_init>
  motor_init();
 8003e36:	f7fd f8fd 	bl	8001034 <motor_init>

  pl_lcd_puts("Hello");
 8003e3a:	4835      	ldr	r0, [pc, #212]	; (8003f10 <main+0x120>)
 8003e3c:	f7fe fa0e 	bl	800225c <pl_lcd_puts>
  pl_lcd_pos(1, 0);
 8003e40:	2100      	movs	r1, #0
 8003e42:	2001      	movs	r0, #1
 8003e44:	f7fe fa45 	bl	80022d2 <pl_lcd_pos>
  pl_lcd_puts("   STM32");
 8003e48:	4832      	ldr	r0, [pc, #200]	; (8003f14 <main+0x124>)
 8003e4a:	f7fe fa07 	bl	800225c <pl_lcd_puts>
  HAL_Delay(500);
 8003e4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e52:	f001 f9f3 	bl	800523c <HAL_Delay>
  pl_lcd_clear();
 8003e56:	f7fe fa57 	bl	8002308 <pl_lcd_clear>
//  pl_lcd_puts("Mice");
//  pl_lcd_pos(1, 0);
//  pl_lcd_puts("aaa");
//  HAL_Delay(100);

  if(pl_getbatt() < LIPO_LIMIT){
 8003e5a:	f7fe fbe9 	bl	8002630 <pl_getbatt>
 8003e5e:	ee10 3a10 	vmov	r3, s0
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fc fb70 	bl	8000548 <__aeabi_f2d>
 8003e68:	a327      	add	r3, pc, #156	; (adr r3, 8003f08 <main+0x118>)
 8003e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6e:	f7fc fe35 	bl	8000adc <__aeabi_dcmplt>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d013      	beq.n	8003ea0 <main+0xb0>
	  pl_lcd_clear();
 8003e78:	f7fe fa46 	bl	8002308 <pl_lcd_clear>
	  pl_lcd_pos(0, 0);
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	2000      	movs	r0, #0
 8003e80:	f7fe fa27 	bl	80022d2 <pl_lcd_pos>
	  pl_lcd_puts("LIPO");
 8003e84:	4824      	ldr	r0, [pc, #144]	; (8003f18 <main+0x128>)
 8003e86:	f7fe f9e9 	bl	800225c <pl_lcd_puts>
	  pl_lcd_pos(1, 0);
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	2001      	movs	r0, #1
 8003e8e:	f7fe fa20 	bl	80022d2 <pl_lcd_pos>
	  pl_lcd_puts("error");
 8003e92:	4822      	ldr	r0, [pc, #136]	; (8003f1c <main+0x12c>)
 8003e94:	f7fe f9e2 	bl	800225c <pl_lcd_puts>
	  HAL_Delay(1000);
 8003e98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e9c:	f001 f9ce 	bl	800523c <HAL_Delay>
  }

  uint16_t cnt = 0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	80bb      	strh	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  mode1=mode_decision(0,mode1);
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	f000 f893 	bl	8003fd4 <mode_decision>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	71fb      	strb	r3, [r7, #7]
	  mode2=mode_decision(1,mode2);
 8003eb2:	79bb      	ldrb	r3, [r7, #6]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	2001      	movs	r0, #1
 8003eb8:	f000 f88c 	bl	8003fd4 <mode_decision>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	71bb      	strb	r3, [r7, #6]
	  mode_execution(mode1,mode2);
 8003ec0:	79ba      	ldrb	r2, [r7, #6]
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 f94c 	bl	8004164 <mode_execution>
//	 pl_lcd_pos(1, 0);
//	 pl_lcd_puts(strBuffer);
// sensor test
//     HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer) / sizeof(uint16_t));
//	 printf("BATT=%f\n",g_V_batt);
     printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d\n", g_sensor[0][0],g_sensor[1][0],g_sensor[2][0],g_sensor[3][0]);
 8003ecc:	4b14      	ldr	r3, [pc, #80]	; (8003f20 <main+0x130>)
 8003ece:	6819      	ldr	r1, [r3, #0]
 8003ed0:	4b13      	ldr	r3, [pc, #76]	; (8003f20 <main+0x130>)
 8003ed2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ed4:	4b12      	ldr	r3, [pc, #72]	; (8003f20 <main+0x130>)
 8003ed6:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 8003eda:	4b11      	ldr	r3, [pc, #68]	; (8003f20 <main+0x130>)
 8003edc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	480f      	ldr	r0, [pc, #60]	; (8003f24 <main+0x134>)
 8003ee6:	f007 f91d 	bl	800b124 <iprintf>
     wait_ms(500);
 8003eea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003eee:	f7ff fccb 	bl	8003888 <wait_ms>
//	 	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
//	 	HAL_GPIO_WritePin(MOTOR_ENABLE_GPIO_Port,MOTOR_ENABLE_Pin,GPIO_PIN_RESET);
//	 	HAL_Delay(1000);
//	  }

	  if (HAL_GPIO_ReadPin(SWITCH_1_GPIO_Port,SWITCH_1_Pin)==0){
 8003ef2:	2140      	movs	r1, #64	; 0x40
 8003ef4:	480c      	ldr	r0, [pc, #48]	; (8003f28 <main+0x138>)
 8003ef6:	f003 f9f3 	bl	80072e0 <HAL_GPIO_ReadPin>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1d1      	bne.n	8003ea4 <main+0xb4>
// test_speaker_music
    //pl_test_speaker();
// test_motor
//     pl_test_motor();
      control_test_motor(1);
 8003f00:	2001      	movs	r0, #1
 8003f02:	f7fd f843 	bl	8000f8c <control_test_motor>
	  mode1=mode_decision(0,mode1);
 8003f06:	e7cd      	b.n	8003ea4 <main+0xb4>
 8003f08:	9999999a 	.word	0x9999999a
 8003f0c:	40269999 	.word	0x40269999
 8003f10:	0800d7f8 	.word	0x0800d7f8
 8003f14:	0800d800 	.word	0x0800d800
 8003f18:	0800d80c 	.word	0x0800d80c
 8003f1c:	0800d814 	.word	0x0800d814
 8003f20:	2000023c 	.word	0x2000023c
 8003f24:	0800d81c 	.word	0x0800d81c
 8003f28:	48000400 	.word	0x48000400

08003f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b096      	sub	sp, #88	; 0x58
 8003f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f32:	f107 0314 	add.w	r3, r7, #20
 8003f36:	2244      	movs	r2, #68	; 0x44
 8003f38:	2100      	movs	r1, #0
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f006 fc80 	bl	800a840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f40:	463b      	mov	r3, r7
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	605a      	str	r2, [r3, #4]
 8003f48:	609a      	str	r2, [r3, #8]
 8003f4a:	60da      	str	r2, [r3, #12]
 8003f4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003f4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003f52:	f003 fd9f 	bl	8007a94 <HAL_PWREx_ControlVoltageScaling>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003f5c:	f000 f835 	bl	8003fca <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f60:	2301      	movs	r3, #1
 8003f62:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003f64:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003f68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 3;
 8003f72:	2303      	movs	r3, #3
 8003f74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003f76:	2328      	movs	r3, #40	; 0x28
 8003f78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003f7a:	2307      	movs	r3, #7
 8003f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003f7e:	2302      	movs	r3, #2
 8003f80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003f82:	2302      	movs	r3, #2
 8003f84:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f86:	f107 0314 	add.w	r3, r7, #20
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f003 fdd8 	bl	8007b40 <HAL_RCC_OscConfig>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8003f96:	f000 f818 	bl	8003fca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f9a:	230f      	movs	r3, #15
 8003f9c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003faa:	2300      	movs	r3, #0
 8003fac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003fae:	463b      	mov	r3, r7
 8003fb0:	2104      	movs	r1, #4
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f004 f9e4 	bl	8008380 <HAL_RCC_ClockConfig>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003fbe:	f000 f804 	bl	8003fca <Error_Handler>
  }
}
 8003fc2:	bf00      	nop
 8003fc4:	3758      	adds	r7, #88	; 0x58
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fce:	b672      	cpsid	i
}
 8003fd0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fd2:	e7fe      	b.n	8003fd2 <Error_Handler+0x8>

08003fd4 <mode_decision>:
#include "math.h"




unsigned char mode_decision(unsigned char select,unsigned char now_mode){
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	460a      	mov	r2, r1
 8003fde:	71fb      	strb	r3, [r7, #7]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	71bb      	strb	r3, [r7, #6]

//LCDで現在のモード番号を表示
switch (select){
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <mode_decision+0x1c>
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d005      	beq.n	8003ffa <mode_decision+0x26>
 8003fee:	e009      	b.n	8004004 <mode_decision+0x30>
case 0:
mode_display0(now_mode);
 8003ff0:	79bb      	ldrb	r3, [r7, #6]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 f852 	bl	800409c <mode_display0>
break;
 8003ff8:	e004      	b.n	8004004 <mode_decision+0x30>
case 1:
mode_display1(now_mode);
 8003ffa:	79bb      	ldrb	r3, [r7, #6]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 f883 	bl	8004108 <mode_display1>
break;
 8004002:	bf00      	nop
}

while (g_sensor_on[0]<=SENSOR_FINGER_0){
 8004004:	e03d      	b.n	8004082 <mode_decision+0xae>
	if(read_switch1()==1){
 8004006:	f7ff fbfb 	bl	8003800 <read_switch1>
 800400a:	4603      	mov	r3, r0
 800400c:	2b01      	cmp	r3, #1
 800400e:	d119      	bne.n	8004044 <mode_decision+0x70>
		now_mode++;
 8004010:	79bb      	ldrb	r3, [r7, #6]
 8004012:	3301      	adds	r3, #1
 8004014:	71bb      	strb	r3, [r7, #6]
		switch (select){
 8004016:	79fb      	ldrb	r3, [r7, #7]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <mode_decision+0x4e>
 800401c:	2b01      	cmp	r3, #1
 800401e:	d005      	beq.n	800402c <mode_decision+0x58>
 8004020:	e009      	b.n	8004036 <mode_decision+0x62>
		case 0:
		mode_display0(now_mode);
 8004022:	79bb      	ldrb	r3, [r7, #6]
 8004024:	4618      	mov	r0, r3
 8004026:	f000 f839 	bl	800409c <mode_display0>
		break;
 800402a:	e004      	b.n	8004036 <mode_decision+0x62>
		case 1:
		mode_display1(now_mode);
 800402c:	79bb      	ldrb	r3, [r7, #6]
 800402e:	4618      	mov	r0, r3
 8004030:	f000 f86a 	bl	8004108 <mode_display1>
		break;
 8004034:	bf00      	nop
		}
		pl_play_oneSound(now_mode);
 8004036:	79bb      	ldrb	r3, [r7, #6]
 8004038:	4618      	mov	r0, r3
 800403a:	f7fe fca9 	bl	8002990 <pl_play_oneSound>
		wait_ms(100);
 800403e:	2064      	movs	r0, #100	; 0x64
 8004040:	f7ff fc22 	bl	8003888 <wait_ms>
	}
	if(read_switch2()==1){
 8004044:	f7ff fbf2 	bl	800382c <read_switch2>
 8004048:	4603      	mov	r3, r0
 800404a:	2b01      	cmp	r3, #1
 800404c:	d119      	bne.n	8004082 <mode_decision+0xae>
		now_mode--;
 800404e:	79bb      	ldrb	r3, [r7, #6]
 8004050:	3b01      	subs	r3, #1
 8004052:	71bb      	strb	r3, [r7, #6]
		switch (select){
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <mode_decision+0x8c>
 800405a:	2b01      	cmp	r3, #1
 800405c:	d005      	beq.n	800406a <mode_decision+0x96>
 800405e:	e009      	b.n	8004074 <mode_decision+0xa0>
		case 0:
		mode_display0(now_mode);
 8004060:	79bb      	ldrb	r3, [r7, #6]
 8004062:	4618      	mov	r0, r3
 8004064:	f000 f81a 	bl	800409c <mode_display0>
		break;
 8004068:	e004      	b.n	8004074 <mode_decision+0xa0>
		case 1:
		mode_display1(now_mode);
 800406a:	79bb      	ldrb	r3, [r7, #6]
 800406c:	4618      	mov	r0, r3
 800406e:	f000 f84b 	bl	8004108 <mode_display1>
		break;
 8004072:	bf00      	nop
		}
		pl_play_oneSound(now_mode);
 8004074:	79bb      	ldrb	r3, [r7, #6]
 8004076:	4618      	mov	r0, r3
 8004078:	f7fe fc8a 	bl	8002990 <pl_play_oneSound>
		wait_ms(100);
 800407c:	2064      	movs	r0, #100	; 0x64
 800407e:	f7ff fc03 	bl	8003888 <wait_ms>
while (g_sensor_on[0]<=SENSOR_FINGER_0){
 8004082:	4b05      	ldr	r3, [pc, #20]	; (8004098 <mode_decision+0xc4>)
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800408a:	d9bc      	bls.n	8004006 <mode_decision+0x32>
	}
}


return now_mode;
 800408c:	79bb      	ldrb	r3, [r7, #6]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	200003b0 	.word	0x200003b0

0800409c <mode_display0>:

void mode_display0(int mode){
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
	pl_lcd_clear();
 80040a4:	f7fe f930 	bl	8002308 <pl_lcd_clear>
	pl_lcd_pos(0, 0);
 80040a8:	2100      	movs	r1, #0
 80040aa:	2000      	movs	r0, #0
 80040ac:	f7fe f911 	bl	80022d2 <pl_lcd_pos>
	switch(mode){
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d011      	beq.n	80040da <mode_display0+0x3e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	dc12      	bgt.n	80040e2 <mode_display0+0x46>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <mode_display0+0x2e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d004      	beq.n	80040d2 <mode_display0+0x36>
 80040c8:	e00b      	b.n	80040e2 <mode_display0+0x46>
	case 0:
		pl_lcd_puts("test");
 80040ca:	480b      	ldr	r0, [pc, #44]	; (80040f8 <mode_display0+0x5c>)
 80040cc:	f7fe f8c6 	bl	800225c <pl_lcd_puts>
	break;
 80040d0:	e007      	b.n	80040e2 <mode_display0+0x46>
	case 1:
		pl_lcd_puts("run");
 80040d2:	480a      	ldr	r0, [pc, #40]	; (80040fc <mode_display0+0x60>)
 80040d4:	f7fe f8c2 	bl	800225c <pl_lcd_puts>
	break;
 80040d8:	e003      	b.n	80040e2 <mode_display0+0x46>
	case 2:
		pl_lcd_puts("tune");
 80040da:	4809      	ldr	r0, [pc, #36]	; (8004100 <mode_display0+0x64>)
 80040dc:	f7fe f8be 	bl	800225c <pl_lcd_puts>
	break;
 80040e0:	bf00      	nop
	}

	pl_lcd_pos(1, 0);
 80040e2:	2100      	movs	r1, #0
 80040e4:	2001      	movs	r0, #1
 80040e6:	f7fe f8f4 	bl	80022d2 <pl_lcd_pos>
	pl_lcd_puts("mode");
 80040ea:	4806      	ldr	r0, [pc, #24]	; (8004104 <mode_display0+0x68>)
 80040ec:	f7fe f8b6 	bl	800225c <pl_lcd_puts>

}
 80040f0:	bf00      	nop
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	0800d840 	.word	0x0800d840
 80040fc:	0800d848 	.word	0x0800d848
 8004100:	0800d84c 	.word	0x0800d84c
 8004104:	0800d854 	.word	0x0800d854

08004108 <mode_display1>:


void mode_display1(int mode){
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
	pl_lcd_clear();
 8004110:	f7fe f8fa 	bl	8002308 <pl_lcd_clear>
	pl_lcd_pos(0, 0);
 8004114:	2100      	movs	r1, #0
 8004116:	2000      	movs	r0, #0
 8004118:	f7fe f8db 	bl	80022d2 <pl_lcd_pos>
	pl_lcd_puts("mode");
 800411c:	480f      	ldr	r0, [pc, #60]	; (800415c <mode_display1+0x54>)
 800411e:	f7fe f89d 	bl	800225c <pl_lcd_puts>
	char strBuffer[17] = {0};
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	f107 0310 	add.w	r3, r7, #16
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	605a      	str	r2, [r3, #4]
 8004130:	609a      	str	r2, [r3, #8]
 8004132:	731a      	strb	r2, [r3, #12]
	sprintf(strBuffer, "CNT=%04d", mode);
 8004134:	f107 030c 	add.w	r3, r7, #12
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	4909      	ldr	r1, [pc, #36]	; (8004160 <mode_display1+0x58>)
 800413c:	4618      	mov	r0, r3
 800413e:	f007 f8d7 	bl	800b2f0 <siprintf>
	pl_lcd_pos(1, 0);
 8004142:	2100      	movs	r1, #0
 8004144:	2001      	movs	r0, #1
 8004146:	f7fe f8c4 	bl	80022d2 <pl_lcd_pos>
	pl_lcd_puts(strBuffer);
 800414a:	f107 030c 	add.w	r3, r7, #12
 800414e:	4618      	mov	r0, r3
 8004150:	f7fe f884 	bl	800225c <pl_lcd_puts>

}
 8004154:	bf00      	nop
 8004156:	3720      	adds	r7, #32
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	0800d854 	.word	0x0800d854
 8004160:	0800d85c 	.word	0x0800d85c

08004164 <mode_execution>:





void mode_execution(unsigned char now_mode1,unsigned char now_mode2){
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	460a      	mov	r2, r1
 800416e:	71fb      	strb	r3, [r7, #7]
 8004170:	4613      	mov	r3, r2
 8004172:	71bb      	strb	r3, [r7, #6]

	while (g_sensor_on[3]<=SENSOR_FINGER_3){
 8004174:	e002      	b.n	800417c <mode_execution+0x18>
		wait_ms(1);
 8004176:	2001      	movs	r0, #1
 8004178:	f7ff fb86 	bl	8003888 <wait_ms>
	while (g_sensor_on[3]<=SENSOR_FINGER_3){
 800417c:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <mode_execution+0x5c>)
 800417e:	88db      	ldrh	r3, [r3, #6]
 8004180:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004184:	d9f7      	bls.n	8004176 <mode_execution+0x12>
	}

switch (now_mode1) {
 8004186:	79fb      	ldrb	r3, [r7, #7]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d010      	beq.n	80041ae <mode_execution+0x4a>
 800418c:	2b02      	cmp	r3, #2
 800418e:	dc13      	bgt.n	80041b8 <mode_execution+0x54>
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <mode_execution+0x36>
 8004194:	2b01      	cmp	r3, #1
 8004196:	d005      	beq.n	80041a4 <mode_execution+0x40>
	break;
	case 2://調整
		mode_Tuning(now_mode2);
	break;
	}
}
 8004198:	e00e      	b.n	80041b8 <mode_execution+0x54>
		mode_PLtest(now_mode2);
 800419a:	79bb      	ldrb	r3, [r7, #6]
 800419c:	4618      	mov	r0, r3
 800419e:	f000 f811 	bl	80041c4 <mode_PLtest>
	break;
 80041a2:	e009      	b.n	80041b8 <mode_execution+0x54>
		mode_Running(now_mode2);
 80041a4:	79bb      	ldrb	r3, [r7, #6]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 f90e 	bl	80043c8 <mode_Running>
	break;
 80041ac:	e004      	b.n	80041b8 <mode_execution+0x54>
		mode_Tuning(now_mode2);
 80041ae:	79bb      	ldrb	r3, [r7, #6]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 fa0b 	bl	80045cc <mode_Tuning>
	break;
 80041b6:	bf00      	nop
}
 80041b8:	bf00      	nop
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	200003b0 	.word	0x200003b0

080041c4 <mode_PLtest>:

void mode_PLtest(unsigned char now_mode2){
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b091      	sub	sp, #68	; 0x44
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	4603      	mov	r3, r0
 80041cc:	71fb      	strb	r3, [r7, #7]
	uint8_t Pin=0;
 80041ce:	2300      	movs	r3, #0
 80041d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t hello[] = "Hello World\n\r";
 80041d4:	4b73      	ldr	r3, [pc, #460]	; (80043a4 <mode_PLtest+0x1e0>)
 80041d6:	f107 0420 	add.w	r4, r7, #32
 80041da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041dc:	c407      	stmia	r4!, {r0, r1, r2}
 80041de:	8023      	strh	r3, [r4, #0]
	char strBuffer[17] = {0};
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	f107 0310 	add.w	r3, r7, #16
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	609a      	str	r2, [r3, #8]
 80041f0:	731a      	strb	r2, [r3, #12]


	switch (now_mode2) {
 80041f2:	79fb      	ldrb	r3, [r7, #7]
 80041f4:	2b0a      	cmp	r3, #10
 80041f6:	f200 80d0 	bhi.w	800439a <mode_PLtest+0x1d6>
 80041fa:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <mode_PLtest+0x3c>)
 80041fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004200:	08004249 	.word	0x08004249
 8004204:	08004299 	.word	0x08004299
 8004208:	080042e5 	.word	0x080042e5
 800420c:	0800430d 	.word	0x0800430d
 8004210:	0800433f 	.word	0x0800433f
 8004214:	0800434b 	.word	0x0800434b
 8004218:	0800437d 	.word	0x0800437d
 800421c:	08004389 	.word	0x08004389
 8004220:	08004391 	.word	0x08004391
 8004224:	08004399 	.word	0x08004399
 8004228:	08004399 	.word	0x08004399
		case 0://LED
			while(read_switch1()==0){
			write_LED(1);
 800422c:	2001      	movs	r0, #1
 800422e:	f7fe f873 	bl	8002318 <write_LED>
			HAL_Delay(500);
 8004232:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004236:	f001 f801 	bl	800523c <HAL_Delay>
			write_LED(0);
 800423a:	2000      	movs	r0, #0
 800423c:	f7fe f86c 	bl	8002318 <write_LED>
			HAL_Delay(500);
 8004240:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004244:	f000 fffa 	bl	800523c <HAL_Delay>
			while(read_switch1()==0){
 8004248:	f7ff fada 	bl	8003800 <read_switch1>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0ec      	beq.n	800422c <mode_PLtest+0x68>
			}
		break;
 8004252:	e0a2      	b.n	800439a <mode_PLtest+0x1d6>
		case 1://SWITCH
			while(read_switch1()==0){
			if (read_switch2()==1 && Pin==0){
 8004254:	f7ff faea 	bl	800382c <read_switch2>
 8004258:	4603      	mov	r3, r0
 800425a:	2b01      	cmp	r3, #1
 800425c:	d10a      	bne.n	8004274 <mode_PLtest+0xb0>
 800425e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <mode_PLtest+0xb0>
				Pin=1;
 8004266:	2301      	movs	r3, #1
 8004268:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				HAL_Delay(100);
 800426c:	2064      	movs	r0, #100	; 0x64
 800426e:	f000 ffe5 	bl	800523c <HAL_Delay>
 8004272:	e00e      	b.n	8004292 <mode_PLtest+0xce>
			}else if(read_switch2()==1 && Pin==1){
 8004274:	f7ff fada 	bl	800382c <read_switch2>
 8004278:	4603      	mov	r3, r0
 800427a:	2b01      	cmp	r3, #1
 800427c:	d109      	bne.n	8004292 <mode_PLtest+0xce>
 800427e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004282:	2b01      	cmp	r3, #1
 8004284:	d105      	bne.n	8004292 <mode_PLtest+0xce>
				Pin=0;
 8004286:	2300      	movs	r3, #0
 8004288:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				HAL_Delay(100);
 800428c:	2064      	movs	r0, #100	; 0x64
 800428e:	f000 ffd5 	bl	800523c <HAL_Delay>
			}
			write_LED(1);
 8004292:	2001      	movs	r0, #1
 8004294:	f7fe f840 	bl	8002318 <write_LED>
			while(read_switch1()==0){
 8004298:	f7ff fab2 	bl	8003800 <read_switch1>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0d8      	beq.n	8004254 <mode_PLtest+0x90>
			}
		break;
 80042a2:	e07a      	b.n	800439a <mode_PLtest+0x1d6>
		case 2://USART

			while(read_switch1()==0){
			// test USART2
			setbuf(stdout, NULL);
 80042a4:	4b40      	ldr	r3, [pc, #256]	; (80043a8 <mode_PLtest+0x1e4>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2100      	movs	r1, #0
 80042ac:	4618      	mov	r0, r3
 80042ae:	f006 ff51 	bl	800b154 <setbuf>
			printf("hello=%s", hello);
 80042b2:	f107 0320 	add.w	r3, r7, #32
 80042b6:	4619      	mov	r1, r3
 80042b8:	483c      	ldr	r0, [pc, #240]	; (80043ac <mode_PLtest+0x1e8>)
 80042ba:	f006 ff33 	bl	800b124 <iprintf>
			uint8_t hoge = 3;
 80042be:	2303      	movs	r3, #3
 80042c0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			float PI=3.14;
 80042c4:	4b3a      	ldr	r3, [pc, #232]	; (80043b0 <mode_PLtest+0x1ec>)
 80042c6:	633b      	str	r3, [r7, #48]	; 0x30
			printf("hoge=%d\n", hoge);
 80042c8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80042cc:	4619      	mov	r1, r3
 80042ce:	4839      	ldr	r0, [pc, #228]	; (80043b4 <mode_PLtest+0x1f0>)
 80042d0:	f006 ff28 	bl	800b124 <iprintf>
			printf("M_PI=%f\n", PI); // @suppress("Float formatting support")
 80042d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042d6:	f7fc f937 	bl	8000548 <__aeabi_f2d>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4836      	ldr	r0, [pc, #216]	; (80043b8 <mode_PLtest+0x1f4>)
 80042e0:	f006 ff20 	bl	800b124 <iprintf>
			while(read_switch1()==0){
 80042e4:	f7ff fa8c 	bl	8003800 <read_switch1>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0da      	beq.n	80042a4 <mode_PLtest+0xe0>
			}
		break;
 80042ee:	e054      	b.n	800439a <mode_PLtest+0x1d6>
		case 3://timer
			while(read_switch1()==0){
				write_LED(1);
 80042f0:	2001      	movs	r0, #1
 80042f2:	f7fe f811 	bl	8002318 <write_LED>
				wait_ms(500);
 80042f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042fa:	f7ff fac5 	bl	8003888 <wait_ms>
				write_LED(0);
 80042fe:	2000      	movs	r0, #0
 8004300:	f7fe f80a 	bl	8002318 <write_LED>
				wait_ms(500);
 8004304:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004308:	f7ff fabe 	bl	8003888 <wait_ms>
			while(read_switch1()==0){
 800430c:	f7ff fa78 	bl	8003800 <read_switch1>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0ec      	beq.n	80042f0 <mode_PLtest+0x12c>
				}
		break;
 8004316:	e040      	b.n	800439a <mode_PLtest+0x1d6>
		case 4://sensor
			// sensor test
			while(read_switch1()==0){
			//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer) / sizeof(uint16_t));
			//printf("BATT=%f\n",g_V_batt);
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d\n", g_sensor[0][0],g_sensor[1][0],g_sensor[2][0],g_sensor[3][0]);
 8004318:	4b28      	ldr	r3, [pc, #160]	; (80043bc <mode_PLtest+0x1f8>)
 800431a:	6819      	ldr	r1, [r3, #0]
 800431c:	4b27      	ldr	r3, [pc, #156]	; (80043bc <mode_PLtest+0x1f8>)
 800431e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004320:	4b26      	ldr	r3, [pc, #152]	; (80043bc <mode_PLtest+0x1f8>)
 8004322:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 8004326:	4b25      	ldr	r3, [pc, #148]	; (80043bc <mode_PLtest+0x1f8>)
 8004328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	4603      	mov	r3, r0
 8004330:	4823      	ldr	r0, [pc, #140]	; (80043c0 <mode_PLtest+0x1fc>)
 8004332:	f006 fef7 	bl	800b124 <iprintf>
			wait_ms(500);
 8004336:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800433a:	f7ff faa5 	bl	8003888 <wait_ms>
			while(read_switch1()==0){
 800433e:	f7ff fa5f 	bl	8003800 <read_switch1>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0e7      	beq.n	8004318 <mode_PLtest+0x154>
			}
		break;
 8004348:	e027      	b.n	800439a <mode_PLtest+0x1d6>
		case 5://speaker
			pl_test_speaker();
 800434a:	f7fe fab5 	bl	80028b8 <pl_test_speaker>
		break;
 800434e:	e024      	b.n	800439a <mode_PLtest+0x1d6>
		case 6://LCD
			while(read_switch1()==0){
			sprintf(strBuffer, "CNT=%04d", Pin);
 8004350:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004354:	f107 030c 	add.w	r3, r7, #12
 8004358:	491a      	ldr	r1, [pc, #104]	; (80043c4 <mode_PLtest+0x200>)
 800435a:	4618      	mov	r0, r3
 800435c:	f006 ffc8 	bl	800b2f0 <siprintf>
			Pin++;
 8004360:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004364:	3301      	adds	r3, #1
 8004366:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			pl_lcd_pos(1, 0);
 800436a:	2100      	movs	r1, #0
 800436c:	2001      	movs	r0, #1
 800436e:	f7fd ffb0 	bl	80022d2 <pl_lcd_pos>
			pl_lcd_puts(strBuffer);
 8004372:	f107 030c 	add.w	r3, r7, #12
 8004376:	4618      	mov	r0, r3
 8004378:	f7fd ff70 	bl	800225c <pl_lcd_puts>
			while(read_switch1()==0){
 800437c:	f7ff fa40 	bl	8003800 <read_switch1>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0e4      	beq.n	8004350 <mode_PLtest+0x18c>
			}
		break;
 8004386:	e008      	b.n	800439a <mode_PLtest+0x1d6>
		case 7://motor
		    control_test_motor(0);
 8004388:	2000      	movs	r0, #0
 800438a:	f7fc fdff 	bl	8000f8c <control_test_motor>
		break;
 800438e:	e004      	b.n	800439a <mode_PLtest+0x1d6>
		case 8://motor+sensor
			control_test_motor(1);
 8004390:	2001      	movs	r0, #1
 8004392:	f7fc fdfb 	bl	8000f8c <control_test_motor>
		break;
 8004396:	e000      	b.n	800439a <mode_PLtest+0x1d6>
		case 9://PLname
		break;
 8004398:	bf00      	nop
		case 10://PLname
		break;
	}

}
 800439a:	bf00      	nop
 800439c:	373c      	adds	r7, #60	; 0x3c
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd90      	pop	{r4, r7, pc}
 80043a2:	bf00      	nop
 80043a4:	0800d8b0 	.word	0x0800d8b0
 80043a8:	2000000c 	.word	0x2000000c
 80043ac:	0800d868 	.word	0x0800d868
 80043b0:	4048f5c3 	.word	0x4048f5c3
 80043b4:	0800d874 	.word	0x0800d874
 80043b8:	0800d880 	.word	0x0800d880
 80043bc:	2000023c 	.word	0x2000023c
 80043c0:	0800d88c 	.word	0x0800d88c
 80043c4:	0800d85c 	.word	0x0800d85c

080043c8 <mode_Running>:

void mode_Running(unsigned char now_mode2){
 80043c8:	b590      	push	{r4, r7, lr}
 80043ca:	b091      	sub	sp, #68	; 0x44
 80043cc:	af02      	add	r7, sp, #8
 80043ce:	4603      	mov	r3, r0
 80043d0:	71fb      	strb	r3, [r7, #7]
	uint8_t Pin=0;
 80043d2:	2300      	movs	r3, #0
 80043d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t hello[] = "Hello World\n\r";
 80043d8:	4b73      	ldr	r3, [pc, #460]	; (80045a8 <mode_Running+0x1e0>)
 80043da:	f107 0420 	add.w	r4, r7, #32
 80043de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043e0:	c407      	stmia	r4!, {r0, r1, r2}
 80043e2:	8023      	strh	r3, [r4, #0]
	char strBuffer[17] = {0};
 80043e4:	2300      	movs	r3, #0
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	f107 0310 	add.w	r3, r7, #16
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	605a      	str	r2, [r3, #4]
 80043f2:	609a      	str	r2, [r3, #8]
 80043f4:	731a      	strb	r2, [r3, #12]


	switch (now_mode2) {
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	2b0a      	cmp	r3, #10
 80043fa:	f200 80d0 	bhi.w	800459e <mode_Running+0x1d6>
 80043fe:	a201      	add	r2, pc, #4	; (adr r2, 8004404 <mode_Running+0x3c>)
 8004400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004404:	0800444d 	.word	0x0800444d
 8004408:	0800449d 	.word	0x0800449d
 800440c:	080044e9 	.word	0x080044e9
 8004410:	08004511 	.word	0x08004511
 8004414:	08004543 	.word	0x08004543
 8004418:	0800454f 	.word	0x0800454f
 800441c:	08004581 	.word	0x08004581
 8004420:	0800458d 	.word	0x0800458d
 8004424:	08004595 	.word	0x08004595
 8004428:	0800459d 	.word	0x0800459d
 800442c:	0800459d 	.word	0x0800459d
		case 0://LED
			while(read_switch1()==0){
			write_LED(1);
 8004430:	2001      	movs	r0, #1
 8004432:	f7fd ff71 	bl	8002318 <write_LED>
			HAL_Delay(500);
 8004436:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800443a:	f000 feff 	bl	800523c <HAL_Delay>
			write_LED(0);
 800443e:	2000      	movs	r0, #0
 8004440:	f7fd ff6a 	bl	8002318 <write_LED>
			HAL_Delay(500);
 8004444:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004448:	f000 fef8 	bl	800523c <HAL_Delay>
			while(read_switch1()==0){
 800444c:	f7ff f9d8 	bl	8003800 <read_switch1>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0ec      	beq.n	8004430 <mode_Running+0x68>
			}
		break;
 8004456:	e0a2      	b.n	800459e <mode_Running+0x1d6>
		case 1://SWITCH
			while(read_switch1()==0){
			if (read_switch2()==1 && Pin==0){
 8004458:	f7ff f9e8 	bl	800382c <read_switch2>
 800445c:	4603      	mov	r3, r0
 800445e:	2b01      	cmp	r3, #1
 8004460:	d10a      	bne.n	8004478 <mode_Running+0xb0>
 8004462:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <mode_Running+0xb0>
				Pin=1;
 800446a:	2301      	movs	r3, #1
 800446c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				HAL_Delay(100);
 8004470:	2064      	movs	r0, #100	; 0x64
 8004472:	f000 fee3 	bl	800523c <HAL_Delay>
 8004476:	e00e      	b.n	8004496 <mode_Running+0xce>
			}else if(read_switch2()==1 && Pin==1){
 8004478:	f7ff f9d8 	bl	800382c <read_switch2>
 800447c:	4603      	mov	r3, r0
 800447e:	2b01      	cmp	r3, #1
 8004480:	d109      	bne.n	8004496 <mode_Running+0xce>
 8004482:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004486:	2b01      	cmp	r3, #1
 8004488:	d105      	bne.n	8004496 <mode_Running+0xce>
				Pin=0;
 800448a:	2300      	movs	r3, #0
 800448c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				HAL_Delay(100);
 8004490:	2064      	movs	r0, #100	; 0x64
 8004492:	f000 fed3 	bl	800523c <HAL_Delay>
			}
			write_LED(1);
 8004496:	2001      	movs	r0, #1
 8004498:	f7fd ff3e 	bl	8002318 <write_LED>
			while(read_switch1()==0){
 800449c:	f7ff f9b0 	bl	8003800 <read_switch1>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0d8      	beq.n	8004458 <mode_Running+0x90>
			}
		break;
 80044a6:	e07a      	b.n	800459e <mode_Running+0x1d6>
		case 2://USART

			while(read_switch1()==0){
			// test USART2
			setbuf(stdout, NULL);
 80044a8:	4b40      	ldr	r3, [pc, #256]	; (80045ac <mode_Running+0x1e4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2100      	movs	r1, #0
 80044b0:	4618      	mov	r0, r3
 80044b2:	f006 fe4f 	bl	800b154 <setbuf>
			printf("hello=%s", hello);
 80044b6:	f107 0320 	add.w	r3, r7, #32
 80044ba:	4619      	mov	r1, r3
 80044bc:	483c      	ldr	r0, [pc, #240]	; (80045b0 <mode_Running+0x1e8>)
 80044be:	f006 fe31 	bl	800b124 <iprintf>
			uint8_t hoge = 3;
 80044c2:	2303      	movs	r3, #3
 80044c4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			float PI=3.14;
 80044c8:	4b3a      	ldr	r3, [pc, #232]	; (80045b4 <mode_Running+0x1ec>)
 80044ca:	633b      	str	r3, [r7, #48]	; 0x30
			printf("hoge=%d\n", hoge);
 80044cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80044d0:	4619      	mov	r1, r3
 80044d2:	4839      	ldr	r0, [pc, #228]	; (80045b8 <mode_Running+0x1f0>)
 80044d4:	f006 fe26 	bl	800b124 <iprintf>
			printf("M_PI=%f\n", PI); // @suppress("Float formatting support")
 80044d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044da:	f7fc f835 	bl	8000548 <__aeabi_f2d>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4836      	ldr	r0, [pc, #216]	; (80045bc <mode_Running+0x1f4>)
 80044e4:	f006 fe1e 	bl	800b124 <iprintf>
			while(read_switch1()==0){
 80044e8:	f7ff f98a 	bl	8003800 <read_switch1>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0da      	beq.n	80044a8 <mode_Running+0xe0>
			}
		break;
 80044f2:	e054      	b.n	800459e <mode_Running+0x1d6>
		case 3://timer
			while(read_switch1()==0){
				write_LED(1);
 80044f4:	2001      	movs	r0, #1
 80044f6:	f7fd ff0f 	bl	8002318 <write_LED>
				wait_ms(500);
 80044fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044fe:	f7ff f9c3 	bl	8003888 <wait_ms>
				write_LED(0);
 8004502:	2000      	movs	r0, #0
 8004504:	f7fd ff08 	bl	8002318 <write_LED>
				wait_ms(500);
 8004508:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800450c:	f7ff f9bc 	bl	8003888 <wait_ms>
			while(read_switch1()==0){
 8004510:	f7ff f976 	bl	8003800 <read_switch1>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0ec      	beq.n	80044f4 <mode_Running+0x12c>
				}
		break;
 800451a:	e040      	b.n	800459e <mode_Running+0x1d6>
		case 4://sensor
			// sensor test
			while(read_switch1()==0){
			//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer) / sizeof(uint16_t));
			//printf("BATT=%f\n",g_V_batt);
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d\n", g_sensor[0][0],g_sensor[1][0],g_sensor[2][0],g_sensor[3][0]);
 800451c:	4b28      	ldr	r3, [pc, #160]	; (80045c0 <mode_Running+0x1f8>)
 800451e:	6819      	ldr	r1, [r3, #0]
 8004520:	4b27      	ldr	r3, [pc, #156]	; (80045c0 <mode_Running+0x1f8>)
 8004522:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004524:	4b26      	ldr	r3, [pc, #152]	; (80045c0 <mode_Running+0x1f8>)
 8004526:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800452a:	4b25      	ldr	r3, [pc, #148]	; (80045c0 <mode_Running+0x1f8>)
 800452c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	4603      	mov	r3, r0
 8004534:	4823      	ldr	r0, [pc, #140]	; (80045c4 <mode_Running+0x1fc>)
 8004536:	f006 fdf5 	bl	800b124 <iprintf>
			wait_ms(500);
 800453a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800453e:	f7ff f9a3 	bl	8003888 <wait_ms>
			while(read_switch1()==0){
 8004542:	f7ff f95d 	bl	8003800 <read_switch1>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0e7      	beq.n	800451c <mode_Running+0x154>
			}
		break;
 800454c:	e027      	b.n	800459e <mode_Running+0x1d6>
		case 5://speaker
			pl_test_speaker();
 800454e:	f7fe f9b3 	bl	80028b8 <pl_test_speaker>
		break;
 8004552:	e024      	b.n	800459e <mode_Running+0x1d6>
		case 6://LCD
			while(read_switch1()==0){
			sprintf(strBuffer, "CNT=%04d", Pin);
 8004554:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004558:	f107 030c 	add.w	r3, r7, #12
 800455c:	491a      	ldr	r1, [pc, #104]	; (80045c8 <mode_Running+0x200>)
 800455e:	4618      	mov	r0, r3
 8004560:	f006 fec6 	bl	800b2f0 <siprintf>
			Pin++;
 8004564:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004568:	3301      	adds	r3, #1
 800456a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			pl_lcd_pos(1, 0);
 800456e:	2100      	movs	r1, #0
 8004570:	2001      	movs	r0, #1
 8004572:	f7fd feae 	bl	80022d2 <pl_lcd_pos>
			pl_lcd_puts(strBuffer);
 8004576:	f107 030c 	add.w	r3, r7, #12
 800457a:	4618      	mov	r0, r3
 800457c:	f7fd fe6e 	bl	800225c <pl_lcd_puts>
			while(read_switch1()==0){
 8004580:	f7ff f93e 	bl	8003800 <read_switch1>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0e4      	beq.n	8004554 <mode_Running+0x18c>
			}
		break;
 800458a:	e008      	b.n	800459e <mode_Running+0x1d6>
		case 7://motor
		    control_test_motor(0);
 800458c:	2000      	movs	r0, #0
 800458e:	f7fc fcfd 	bl	8000f8c <control_test_motor>
		break;
 8004592:	e004      	b.n	800459e <mode_Running+0x1d6>
		case 8://motor+sensor
			control_test_motor(1);
 8004594:	2001      	movs	r0, #1
 8004596:	f7fc fcf9 	bl	8000f8c <control_test_motor>
		break;
 800459a:	e000      	b.n	800459e <mode_Running+0x1d6>
		case 9://PLname
		break;
 800459c:	bf00      	nop
		case 10://PLname
		break;
	}

}
 800459e:	bf00      	nop
 80045a0:	373c      	adds	r7, #60	; 0x3c
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd90      	pop	{r4, r7, pc}
 80045a6:	bf00      	nop
 80045a8:	0800d8b0 	.word	0x0800d8b0
 80045ac:	2000000c 	.word	0x2000000c
 80045b0:	0800d868 	.word	0x0800d868
 80045b4:	4048f5c3 	.word	0x4048f5c3
 80045b8:	0800d874 	.word	0x0800d874
 80045bc:	0800d880 	.word	0x0800d880
 80045c0:	2000023c 	.word	0x2000023c
 80045c4:	0800d88c 	.word	0x0800d88c
 80045c8:	0800d85c 	.word	0x0800d85c

080045cc <mode_Tuning>:


void mode_Tuning(unsigned char now_mode2){
 80045cc:	b590      	push	{r4, r7, lr}
 80045ce:	b091      	sub	sp, #68	; 0x44
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	4603      	mov	r3, r0
 80045d4:	71fb      	strb	r3, [r7, #7]
	uint8_t Pin=0;
 80045d6:	2300      	movs	r3, #0
 80045d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t hello[] = "Hello World\n\r";
 80045dc:	4b73      	ldr	r3, [pc, #460]	; (80047ac <mode_Tuning+0x1e0>)
 80045de:	f107 0420 	add.w	r4, r7, #32
 80045e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045e4:	c407      	stmia	r4!, {r0, r1, r2}
 80045e6:	8023      	strh	r3, [r4, #0]
	char strBuffer[17] = {0};
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	f107 0310 	add.w	r3, r7, #16
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	605a      	str	r2, [r3, #4]
 80045f6:	609a      	str	r2, [r3, #8]
 80045f8:	731a      	strb	r2, [r3, #12]


	switch (now_mode2) {
 80045fa:	79fb      	ldrb	r3, [r7, #7]
 80045fc:	2b0a      	cmp	r3, #10
 80045fe:	f200 80d0 	bhi.w	80047a2 <mode_Tuning+0x1d6>
 8004602:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <mode_Tuning+0x3c>)
 8004604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004608:	08004651 	.word	0x08004651
 800460c:	080046a1 	.word	0x080046a1
 8004610:	080046ed 	.word	0x080046ed
 8004614:	08004715 	.word	0x08004715
 8004618:	08004747 	.word	0x08004747
 800461c:	08004753 	.word	0x08004753
 8004620:	08004785 	.word	0x08004785
 8004624:	08004791 	.word	0x08004791
 8004628:	08004799 	.word	0x08004799
 800462c:	080047a1 	.word	0x080047a1
 8004630:	080047a1 	.word	0x080047a1
		case 0://LED
			while(read_switch1()==0){
			write_LED(1);
 8004634:	2001      	movs	r0, #1
 8004636:	f7fd fe6f 	bl	8002318 <write_LED>
			HAL_Delay(500);
 800463a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800463e:	f000 fdfd 	bl	800523c <HAL_Delay>
			write_LED(0);
 8004642:	2000      	movs	r0, #0
 8004644:	f7fd fe68 	bl	8002318 <write_LED>
			HAL_Delay(500);
 8004648:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800464c:	f000 fdf6 	bl	800523c <HAL_Delay>
			while(read_switch1()==0){
 8004650:	f7ff f8d6 	bl	8003800 <read_switch1>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0ec      	beq.n	8004634 <mode_Tuning+0x68>
			}
		break;
 800465a:	e0a2      	b.n	80047a2 <mode_Tuning+0x1d6>
		case 1://SWITCH
			while(read_switch1()==0){
			if (read_switch2()==1 && Pin==0){
 800465c:	f7ff f8e6 	bl	800382c <read_switch2>
 8004660:	4603      	mov	r3, r0
 8004662:	2b01      	cmp	r3, #1
 8004664:	d10a      	bne.n	800467c <mode_Tuning+0xb0>
 8004666:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800466a:	2b00      	cmp	r3, #0
 800466c:	d106      	bne.n	800467c <mode_Tuning+0xb0>
				Pin=1;
 800466e:	2301      	movs	r3, #1
 8004670:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				HAL_Delay(100);
 8004674:	2064      	movs	r0, #100	; 0x64
 8004676:	f000 fde1 	bl	800523c <HAL_Delay>
 800467a:	e00e      	b.n	800469a <mode_Tuning+0xce>
			}else if(read_switch2()==1 && Pin==1){
 800467c:	f7ff f8d6 	bl	800382c <read_switch2>
 8004680:	4603      	mov	r3, r0
 8004682:	2b01      	cmp	r3, #1
 8004684:	d109      	bne.n	800469a <mode_Tuning+0xce>
 8004686:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800468a:	2b01      	cmp	r3, #1
 800468c:	d105      	bne.n	800469a <mode_Tuning+0xce>
				Pin=0;
 800468e:	2300      	movs	r3, #0
 8004690:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				HAL_Delay(100);
 8004694:	2064      	movs	r0, #100	; 0x64
 8004696:	f000 fdd1 	bl	800523c <HAL_Delay>
			}
			write_LED(1);
 800469a:	2001      	movs	r0, #1
 800469c:	f7fd fe3c 	bl	8002318 <write_LED>
			while(read_switch1()==0){
 80046a0:	f7ff f8ae 	bl	8003800 <read_switch1>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0d8      	beq.n	800465c <mode_Tuning+0x90>
			}
		break;
 80046aa:	e07a      	b.n	80047a2 <mode_Tuning+0x1d6>
		case 2://USART

			while(read_switch1()==0){
			// test USART2
			setbuf(stdout, NULL);
 80046ac:	4b40      	ldr	r3, [pc, #256]	; (80047b0 <mode_Tuning+0x1e4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2100      	movs	r1, #0
 80046b4:	4618      	mov	r0, r3
 80046b6:	f006 fd4d 	bl	800b154 <setbuf>
			printf("hello=%s", hello);
 80046ba:	f107 0320 	add.w	r3, r7, #32
 80046be:	4619      	mov	r1, r3
 80046c0:	483c      	ldr	r0, [pc, #240]	; (80047b4 <mode_Tuning+0x1e8>)
 80046c2:	f006 fd2f 	bl	800b124 <iprintf>
			uint8_t hoge = 3;
 80046c6:	2303      	movs	r3, #3
 80046c8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			float PI=3.14;
 80046cc:	4b3a      	ldr	r3, [pc, #232]	; (80047b8 <mode_Tuning+0x1ec>)
 80046ce:	633b      	str	r3, [r7, #48]	; 0x30
			printf("hoge=%d\n", hoge);
 80046d0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80046d4:	4619      	mov	r1, r3
 80046d6:	4839      	ldr	r0, [pc, #228]	; (80047bc <mode_Tuning+0x1f0>)
 80046d8:	f006 fd24 	bl	800b124 <iprintf>
			printf("M_PI=%f\n", PI); // @suppress("Float formatting support")
 80046dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046de:	f7fb ff33 	bl	8000548 <__aeabi_f2d>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4836      	ldr	r0, [pc, #216]	; (80047c0 <mode_Tuning+0x1f4>)
 80046e8:	f006 fd1c 	bl	800b124 <iprintf>
			while(read_switch1()==0){
 80046ec:	f7ff f888 	bl	8003800 <read_switch1>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0da      	beq.n	80046ac <mode_Tuning+0xe0>
			}
		break;
 80046f6:	e054      	b.n	80047a2 <mode_Tuning+0x1d6>
		case 3://timer
			while(read_switch1()==0){
				write_LED(1);
 80046f8:	2001      	movs	r0, #1
 80046fa:	f7fd fe0d 	bl	8002318 <write_LED>
				wait_ms(500);
 80046fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004702:	f7ff f8c1 	bl	8003888 <wait_ms>
				write_LED(0);
 8004706:	2000      	movs	r0, #0
 8004708:	f7fd fe06 	bl	8002318 <write_LED>
				wait_ms(500);
 800470c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004710:	f7ff f8ba 	bl	8003888 <wait_ms>
			while(read_switch1()==0){
 8004714:	f7ff f874 	bl	8003800 <read_switch1>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0ec      	beq.n	80046f8 <mode_Tuning+0x12c>
				}
		break;
 800471e:	e040      	b.n	80047a2 <mode_Tuning+0x1d6>
		case 4://sensor
			// sensor test
			while(read_switch1()==0){
			//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer) / sizeof(uint16_t));
			//printf("BATT=%f\n",g_V_batt);
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d\n", g_sensor[0][0],g_sensor[1][0],g_sensor[2][0],g_sensor[3][0]);
 8004720:	4b28      	ldr	r3, [pc, #160]	; (80047c4 <mode_Tuning+0x1f8>)
 8004722:	6819      	ldr	r1, [r3, #0]
 8004724:	4b27      	ldr	r3, [pc, #156]	; (80047c4 <mode_Tuning+0x1f8>)
 8004726:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004728:	4b26      	ldr	r3, [pc, #152]	; (80047c4 <mode_Tuning+0x1f8>)
 800472a:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800472e:	4b25      	ldr	r3, [pc, #148]	; (80047c4 <mode_Tuning+0x1f8>)
 8004730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	4603      	mov	r3, r0
 8004738:	4823      	ldr	r0, [pc, #140]	; (80047c8 <mode_Tuning+0x1fc>)
 800473a:	f006 fcf3 	bl	800b124 <iprintf>
			wait_ms(500);
 800473e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004742:	f7ff f8a1 	bl	8003888 <wait_ms>
			while(read_switch1()==0){
 8004746:	f7ff f85b 	bl	8003800 <read_switch1>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0e7      	beq.n	8004720 <mode_Tuning+0x154>
			}
		break;
 8004750:	e027      	b.n	80047a2 <mode_Tuning+0x1d6>
		case 5://speaker
			pl_test_speaker();
 8004752:	f7fe f8b1 	bl	80028b8 <pl_test_speaker>
		break;
 8004756:	e024      	b.n	80047a2 <mode_Tuning+0x1d6>
		case 6://LCD
			while(read_switch1()==0){
			sprintf(strBuffer, "CNT=%04d", Pin);
 8004758:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800475c:	f107 030c 	add.w	r3, r7, #12
 8004760:	491a      	ldr	r1, [pc, #104]	; (80047cc <mode_Tuning+0x200>)
 8004762:	4618      	mov	r0, r3
 8004764:	f006 fdc4 	bl	800b2f0 <siprintf>
			Pin++;
 8004768:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800476c:	3301      	adds	r3, #1
 800476e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			pl_lcd_pos(1, 0);
 8004772:	2100      	movs	r1, #0
 8004774:	2001      	movs	r0, #1
 8004776:	f7fd fdac 	bl	80022d2 <pl_lcd_pos>
			pl_lcd_puts(strBuffer);
 800477a:	f107 030c 	add.w	r3, r7, #12
 800477e:	4618      	mov	r0, r3
 8004780:	f7fd fd6c 	bl	800225c <pl_lcd_puts>
			while(read_switch1()==0){
 8004784:	f7ff f83c 	bl	8003800 <read_switch1>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0e4      	beq.n	8004758 <mode_Tuning+0x18c>
			}
		break;
 800478e:	e008      	b.n	80047a2 <mode_Tuning+0x1d6>
		case 7://motor
		    control_test_motor(0);
 8004790:	2000      	movs	r0, #0
 8004792:	f7fc fbfb 	bl	8000f8c <control_test_motor>
		break;
 8004796:	e004      	b.n	80047a2 <mode_Tuning+0x1d6>
		case 8://motor+sensor
			control_test_motor(1);
 8004798:	2001      	movs	r0, #1
 800479a:	f7fc fbf7 	bl	8000f8c <control_test_motor>
		break;
 800479e:	e000      	b.n	80047a2 <mode_Tuning+0x1d6>
		case 9://PLname
		break;
 80047a0:	bf00      	nop
		case 10://PLname
		break;
	}

}
 80047a2:	bf00      	nop
 80047a4:	373c      	adds	r7, #60	; 0x3c
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd90      	pop	{r4, r7, pc}
 80047aa:	bf00      	nop
 80047ac:	0800d8b0 	.word	0x0800d8b0
 80047b0:	2000000c 	.word	0x2000000c
 80047b4:	0800d868 	.word	0x0800d868
 80047b8:	4048f5c3 	.word	0x4048f5c3
 80047bc:	0800d874 	.word	0x0800d874
 80047c0:	0800d880 	.word	0x0800d880
 80047c4:	2000023c 	.word	0x2000023c
 80047c8:	0800d88c 	.word	0x0800d88c
 80047cc:	0800d85c 	.word	0x0800d85c

080047d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047d6:	4b0f      	ldr	r3, [pc, #60]	; (8004814 <HAL_MspInit+0x44>)
 80047d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047da:	4a0e      	ldr	r2, [pc, #56]	; (8004814 <HAL_MspInit+0x44>)
 80047dc:	f043 0301 	orr.w	r3, r3, #1
 80047e0:	6613      	str	r3, [r2, #96]	; 0x60
 80047e2:	4b0c      	ldr	r3, [pc, #48]	; (8004814 <HAL_MspInit+0x44>)
 80047e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	607b      	str	r3, [r7, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047ee:	4b09      	ldr	r3, [pc, #36]	; (8004814 <HAL_MspInit+0x44>)
 80047f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f2:	4a08      	ldr	r2, [pc, #32]	; (8004814 <HAL_MspInit+0x44>)
 80047f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f8:	6593      	str	r3, [r2, #88]	; 0x58
 80047fa:	4b06      	ldr	r3, [pc, #24]	; (8004814 <HAL_MspInit+0x44>)
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40021000 	.word	0x40021000

08004818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800481c:	e7fe      	b.n	800481c <NMI_Handler+0x4>

0800481e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800481e:	b480      	push	{r7}
 8004820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004822:	e7fe      	b.n	8004822 <HardFault_Handler+0x4>

08004824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004828:	e7fe      	b.n	8004828 <MemManage_Handler+0x4>

0800482a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800482a:	b480      	push	{r7}
 800482c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800482e:	e7fe      	b.n	800482e <BusFault_Handler+0x4>

08004830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004834:	e7fe      	b.n	8004834 <UsageFault_Handler+0x4>

08004836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004836:	b480      	push	{r7}
 8004838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800483a:	bf00      	nop
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004848:	bf00      	nop
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004852:	b480      	push	{r7}
 8004854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004856:	bf00      	nop
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004864:	f000 fcca 	bl	80051fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004868:	bf00      	nop
 800486a:	bd80      	pop	{r7, pc}

0800486c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004870:	4802      	ldr	r0, [pc, #8]	; (800487c <DMA1_Channel1_IRQHandler+0x10>)
 8004872:	f002 faeb 	bl	8006e4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004876:	bf00      	nop
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	200009bc 	.word	0x200009bc

08004880 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	  pl_interrupt_motor_count_L();
 8004884:	f7fd fe2c 	bl	80024e0 <pl_interrupt_motor_count_L>
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004888:	4802      	ldr	r0, [pc, #8]	; (8004894 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800488a:	f004 fcd1 	bl	8009230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800488e:	bf00      	nop
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20000a54 	.word	0x20000a54

08004898 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	  pl_interrupt_motor_count_R();
 800489c:	f7fd fe4c 	bl	8002538 <pl_interrupt_motor_count_R>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80048a0:	4802      	ldr	r0, [pc, #8]	; (80048ac <TIM2_IRQHandler+0x14>)
 80048a2:	f004 fcc5 	bl	8009230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80048a6:	bf00      	nop
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000aa0 	.word	0x20000aa0

080048b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80048b4:	4806      	ldr	r0, [pc, #24]	; (80048d0 <TIM6_DAC_IRQHandler+0x20>)
 80048b6:	f004 fcbb 	bl	8009230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  pl_timer_count();
 80048ba:	f7fe ffd7 	bl	800386c <pl_timer_count>
  pl_interupt_getSensor();
 80048be:	f7fd ffed 	bl	800289c <pl_interupt_getSensor>
  interrupt_calSensor();
 80048c2:	f7fd facb 	bl	8001e5c <interrupt_calSensor>

  interrupt_Motor();
 80048c6:	f7fc fbc7 	bl	8001058 <interrupt_Motor>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80048ca:	bf00      	nop
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	20000aec 	.word	0x20000aec

080048d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
	return 1;
 80048d8:	2301      	movs	r3, #1
}
 80048da:	4618      	mov	r0, r3
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <_kill>:

int _kill(int pid, int sig)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80048ee:	f005 ff7d 	bl	800a7ec <__errno>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2216      	movs	r2, #22
 80048f6:	601a      	str	r2, [r3, #0]
	return -1;
 80048f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <_exit>:

void _exit (int status)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800490c:	f04f 31ff 	mov.w	r1, #4294967295
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff ffe7 	bl	80048e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004916:	e7fe      	b.n	8004916 <_exit+0x12>

08004918 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]
 8004928:	e00a      	b.n	8004940 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800492a:	f3af 8000 	nop.w
 800492e:	4601      	mov	r1, r0
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	60ba      	str	r2, [r7, #8]
 8004936:	b2ca      	uxtb	r2, r1
 8004938:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	3301      	adds	r3, #1
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	429a      	cmp	r2, r3
 8004946:	dbf0      	blt.n	800492a <_read+0x12>
	}

return len;
 8004948:	687b      	ldr	r3, [r7, #4]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	e00a      	b.n	800497c <_write+0x28>
	{
		HAL_UART_Transmit(&huart2, ptr++, 1, 1);
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	1c4b      	adds	r3, r1, #1
 800496a:	60bb      	str	r3, [r7, #8]
 800496c:	2301      	movs	r3, #1
 800496e:	2201      	movs	r2, #1
 8004970:	4807      	ldr	r0, [pc, #28]	; (8004990 <_write+0x3c>)
 8004972:	f005 fb11 	bl	8009f98 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	3301      	adds	r3, #1
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	429a      	cmp	r2, r3
 8004982:	dbf0      	blt.n	8004966 <_write+0x12>
	}
	return len;
 8004984:	687b      	ldr	r3, [r7, #4]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	20000b84 	.word	0x20000b84

08004994 <_close>:

int _close(int file)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
	return -1;
 800499c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049bc:	605a      	str	r2, [r3, #4]
	return 0;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <_isatty>:

int _isatty(int file)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
	return 1;
 80049d4:	2301      	movs	r3, #1
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b085      	sub	sp, #20
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	607a      	str	r2, [r7, #4]
	return 0;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a04:	4a14      	ldr	r2, [pc, #80]	; (8004a58 <_sbrk+0x5c>)
 8004a06:	4b15      	ldr	r3, [pc, #84]	; (8004a5c <_sbrk+0x60>)
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a10:	4b13      	ldr	r3, [pc, #76]	; (8004a60 <_sbrk+0x64>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d102      	bne.n	8004a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a18:	4b11      	ldr	r3, [pc, #68]	; (8004a60 <_sbrk+0x64>)
 8004a1a:	4a12      	ldr	r2, [pc, #72]	; (8004a64 <_sbrk+0x68>)
 8004a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a1e:	4b10      	ldr	r3, [pc, #64]	; (8004a60 <_sbrk+0x64>)
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4413      	add	r3, r2
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d207      	bcs.n	8004a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a2c:	f005 fede 	bl	800a7ec <__errno>
 8004a30:	4603      	mov	r3, r0
 8004a32:	220c      	movs	r2, #12
 8004a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a36:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3a:	e009      	b.n	8004a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a3c:	4b08      	ldr	r3, [pc, #32]	; (8004a60 <_sbrk+0x64>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a42:	4b07      	ldr	r3, [pc, #28]	; (8004a60 <_sbrk+0x64>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4413      	add	r3, r2
 8004a4a:	4a05      	ldr	r2, [pc, #20]	; (8004a60 <_sbrk+0x64>)
 8004a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3718      	adds	r7, #24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	20010000 	.word	0x20010000
 8004a5c:	00000400 	.word	0x00000400
 8004a60:	20000a50 	.word	0x20000a50
 8004a64:	20000c20 	.word	0x20000c20

08004a68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004a6c:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <SystemInit+0x20>)
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a72:	4a05      	ldr	r2, [pc, #20]	; (8004a88 <SystemInit+0x20>)
 8004a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004a7c:	bf00      	nop
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	e000ed00 	.word	0xe000ed00

08004a8c <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b096      	sub	sp, #88	; 0x58
 8004a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	605a      	str	r2, [r3, #4]
 8004a9c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	605a      	str	r2, [r3, #4]
 8004aa8:	609a      	str	r2, [r3, #8]
 8004aaa:	60da      	str	r2, [r3, #12]
 8004aac:	611a      	str	r2, [r3, #16]
 8004aae:	615a      	str	r2, [r3, #20]
 8004ab0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004ab2:	1d3b      	adds	r3, r7, #4
 8004ab4:	222c      	movs	r2, #44	; 0x2c
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f005 fec1 	bl	800a840 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004abe:	4b39      	ldr	r3, [pc, #228]	; (8004ba4 <MX_TIM1_Init+0x118>)
 8004ac0:	4a39      	ldr	r2, [pc, #228]	; (8004ba8 <MX_TIM1_Init+0x11c>)
 8004ac2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8004ac4:	4b37      	ldr	r3, [pc, #220]	; (8004ba4 <MX_TIM1_Init+0x118>)
 8004ac6:	2207      	movs	r2, #7
 8004ac8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004aca:	4b36      	ldr	r3, [pc, #216]	; (8004ba4 <MX_TIM1_Init+0x118>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8004ad0:	4b34      	ldr	r3, [pc, #208]	; (8004ba4 <MX_TIM1_Init+0x118>)
 8004ad2:	f242 720f 	movw	r2, #9999	; 0x270f
 8004ad6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ad8:	4b32      	ldr	r3, [pc, #200]	; (8004ba4 <MX_TIM1_Init+0x118>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004ade:	4b31      	ldr	r3, [pc, #196]	; (8004ba4 <MX_TIM1_Init+0x118>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ae4:	4b2f      	ldr	r3, [pc, #188]	; (8004ba4 <MX_TIM1_Init+0x118>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004aea:	482e      	ldr	r0, [pc, #184]	; (8004ba4 <MX_TIM1_Init+0x118>)
 8004aec:	f004 f9e2 	bl	8008eb4 <HAL_TIM_PWM_Init>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8004af6:	f7ff fa68 	bl	8003fca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004afa:	2300      	movs	r3, #0
 8004afc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004afe:	2300      	movs	r3, #0
 8004b00:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b02:	2300      	movs	r3, #0
 8004b04:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004b06:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4825      	ldr	r0, [pc, #148]	; (8004ba4 <MX_TIM1_Init+0x118>)
 8004b0e:	f005 f8f9 	bl	8009d04 <HAL_TIMEx_MasterConfigSynchronization>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004b18:	f7ff fa57 	bl	8003fca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b1c:	2360      	movs	r3, #96	; 0x60
 8004b1e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 5000-1;
 8004b20:	f241 3387 	movw	r3, #4999	; 0x1387
 8004b24:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b26:	2300      	movs	r3, #0
 8004b28:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004b32:	2300      	movs	r3, #0
 8004b34:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004b36:	2300      	movs	r3, #0
 8004b38:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b3e:	2200      	movs	r2, #0
 8004b40:	4619      	mov	r1, r3
 8004b42:	4818      	ldr	r0, [pc, #96]	; (8004ba4 <MX_TIM1_Init+0x118>)
 8004b44:	f004 fc94 	bl	8009470 <HAL_TIM_PWM_ConfigChannel>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8004b4e:	f7ff fa3c 	bl	8003fca <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004b52:	2300      	movs	r3, #0
 8004b54:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004b66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b6a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004b70:	2300      	movs	r3, #0
 8004b72:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004b74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004b82:	1d3b      	adds	r3, r7, #4
 8004b84:	4619      	mov	r1, r3
 8004b86:	4807      	ldr	r0, [pc, #28]	; (8004ba4 <MX_TIM1_Init+0x118>)
 8004b88:	f005 f922 	bl	8009dd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8004b92:	f7ff fa1a 	bl	8003fca <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004b96:	4803      	ldr	r0, [pc, #12]	; (8004ba4 <MX_TIM1_Init+0x118>)
 8004b98:	f000 f998 	bl	8004ecc <HAL_TIM_MspPostInit>

}
 8004b9c:	bf00      	nop
 8004b9e:	3758      	adds	r7, #88	; 0x58
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	20000a54 	.word	0x20000a54
 8004ba8:	40012c00 	.word	0x40012c00

08004bac <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	; 0x28
 8004bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bb2:	f107 031c 	add.w	r3, r7, #28
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	605a      	str	r2, [r3, #4]
 8004bbc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004bbe:	463b      	mov	r3, r7
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	605a      	str	r2, [r3, #4]
 8004bc6:	609a      	str	r2, [r3, #8]
 8004bc8:	60da      	str	r2, [r3, #12]
 8004bca:	611a      	str	r2, [r3, #16]
 8004bcc:	615a      	str	r2, [r3, #20]
 8004bce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004bd0:	4b22      	ldr	r3, [pc, #136]	; (8004c5c <MX_TIM2_Init+0xb0>)
 8004bd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004bd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8004bd8:	4b20      	ldr	r3, [pc, #128]	; (8004c5c <MX_TIM2_Init+0xb0>)
 8004bda:	2207      	movs	r2, #7
 8004bdc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bde:	4b1f      	ldr	r3, [pc, #124]	; (8004c5c <MX_TIM2_Init+0xb0>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8004be4:	4b1d      	ldr	r3, [pc, #116]	; (8004c5c <MX_TIM2_Init+0xb0>)
 8004be6:	f242 720f 	movw	r2, #9999	; 0x270f
 8004bea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bec:	4b1b      	ldr	r3, [pc, #108]	; (8004c5c <MX_TIM2_Init+0xb0>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bf2:	4b1a      	ldr	r3, [pc, #104]	; (8004c5c <MX_TIM2_Init+0xb0>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004bf8:	4818      	ldr	r0, [pc, #96]	; (8004c5c <MX_TIM2_Init+0xb0>)
 8004bfa:	f004 f95b 	bl	8008eb4 <HAL_TIM_PWM_Init>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8004c04:	f7ff f9e1 	bl	8003fca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004c10:	f107 031c 	add.w	r3, r7, #28
 8004c14:	4619      	mov	r1, r3
 8004c16:	4811      	ldr	r0, [pc, #68]	; (8004c5c <MX_TIM2_Init+0xb0>)
 8004c18:	f005 f874 	bl	8009d04 <HAL_TIMEx_MasterConfigSynchronization>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8004c22:	f7ff f9d2 	bl	8003fca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c26:	2360      	movs	r3, #96	; 0x60
 8004c28:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000-1;
 8004c2a:	f241 3387 	movw	r3, #4999	; 0x1387
 8004c2e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c34:	2300      	movs	r3, #0
 8004c36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004c38:	463b      	mov	r3, r7
 8004c3a:	2204      	movs	r2, #4
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4807      	ldr	r0, [pc, #28]	; (8004c5c <MX_TIM2_Init+0xb0>)
 8004c40:	f004 fc16 	bl	8009470 <HAL_TIM_PWM_ConfigChannel>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8004c4a:	f7ff f9be 	bl	8003fca <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004c4e:	4803      	ldr	r0, [pc, #12]	; (8004c5c <MX_TIM2_Init+0xb0>)
 8004c50:	f000 f93c 	bl	8004ecc <HAL_TIM_MspPostInit>

}
 8004c54:	bf00      	nop
 8004c56:	3728      	adds	r7, #40	; 0x28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	20000aa0 	.word	0x20000aa0

08004c60 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c66:	1d3b      	adds	r3, r7, #4
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	605a      	str	r2, [r3, #4]
 8004c6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004c70:	4b14      	ldr	r3, [pc, #80]	; (8004cc4 <MX_TIM6_Init+0x64>)
 8004c72:	4a15      	ldr	r2, [pc, #84]	; (8004cc8 <MX_TIM6_Init+0x68>)
 8004c74:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 8004c76:	4b13      	ldr	r3, [pc, #76]	; (8004cc4 <MX_TIM6_Init+0x64>)
 8004c78:	224f      	movs	r2, #79	; 0x4f
 8004c7a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c7c:	4b11      	ldr	r3, [pc, #68]	; (8004cc4 <MX_TIM6_Init+0x64>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8004c82:	4b10      	ldr	r3, [pc, #64]	; (8004cc4 <MX_TIM6_Init+0x64>)
 8004c84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004c88:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c8a:	4b0e      	ldr	r3, [pc, #56]	; (8004cc4 <MX_TIM6_Init+0x64>)
 8004c8c:	2280      	movs	r2, #128	; 0x80
 8004c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004c90:	480c      	ldr	r0, [pc, #48]	; (8004cc4 <MX_TIM6_Init+0x64>)
 8004c92:	f004 f863 	bl	8008d5c <HAL_TIM_Base_Init>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004c9c:	f7ff f995 	bl	8003fca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004ca8:	1d3b      	adds	r3, r7, #4
 8004caa:	4619      	mov	r1, r3
 8004cac:	4805      	ldr	r0, [pc, #20]	; (8004cc4 <MX_TIM6_Init+0x64>)
 8004cae:	f005 f829 	bl	8009d04 <HAL_TIMEx_MasterConfigSynchronization>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004cb8:	f7ff f987 	bl	8003fca <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004cbc:	bf00      	nop
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	20000aec 	.word	0x20000aec
 8004cc8:	40001000 	.word	0x40001000

08004ccc <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b096      	sub	sp, #88	; 0x58
 8004cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cd2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	605a      	str	r2, [r3, #4]
 8004cdc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004cde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	605a      	str	r2, [r3, #4]
 8004ce8:	609a      	str	r2, [r3, #8]
 8004cea:	60da      	str	r2, [r3, #12]
 8004cec:	611a      	str	r2, [r3, #16]
 8004cee:	615a      	str	r2, [r3, #20]
 8004cf0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004cf2:	1d3b      	adds	r3, r7, #4
 8004cf4:	222c      	movs	r2, #44	; 0x2c
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f005 fda1 	bl	800a840 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004cfe:	4b34      	ldr	r3, [pc, #208]	; (8004dd0 <MX_TIM15_Init+0x104>)
 8004d00:	4a34      	ldr	r2, [pc, #208]	; (8004dd4 <MX_TIM15_Init+0x108>)
 8004d02:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 8004d04:	4b32      	ldr	r3, [pc, #200]	; (8004dd0 <MX_TIM15_Init+0x104>)
 8004d06:	224f      	movs	r2, #79	; 0x4f
 8004d08:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d0a:	4b31      	ldr	r3, [pc, #196]	; (8004dd0 <MX_TIM15_Init+0x104>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 5000-1;
 8004d10:	4b2f      	ldr	r3, [pc, #188]	; (8004dd0 <MX_TIM15_Init+0x104>)
 8004d12:	f241 3287 	movw	r2, #4999	; 0x1387
 8004d16:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d18:	4b2d      	ldr	r3, [pc, #180]	; (8004dd0 <MX_TIM15_Init+0x104>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004d1e:	4b2c      	ldr	r3, [pc, #176]	; (8004dd0 <MX_TIM15_Init+0x104>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d24:	4b2a      	ldr	r3, [pc, #168]	; (8004dd0 <MX_TIM15_Init+0x104>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8004d2a:	4829      	ldr	r0, [pc, #164]	; (8004dd0 <MX_TIM15_Init+0x104>)
 8004d2c:	f004 f8c2 	bl	8008eb4 <HAL_TIM_PWM_Init>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8004d36:	f7ff f948 	bl	8003fca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004d42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004d46:	4619      	mov	r1, r3
 8004d48:	4821      	ldr	r0, [pc, #132]	; (8004dd0 <MX_TIM15_Init+0x104>)
 8004d4a:	f004 ffdb 	bl	8009d04 <HAL_TIMEx_MasterConfigSynchronization>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8004d54:	f7ff f939 	bl	8003fca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d58:	2360      	movs	r3, #96	; 0x60
 8004d5a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 2500-1;
 8004d5c:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8004d60:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d62:	2300      	movs	r3, #0
 8004d64:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d66:	2300      	movs	r3, #0
 8004d68:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d72:	2300      	movs	r3, #0
 8004d74:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004d76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d7a:	2204      	movs	r2, #4
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4814      	ldr	r0, [pc, #80]	; (8004dd0 <MX_TIM15_Init+0x104>)
 8004d80:	f004 fb76 	bl	8009470 <HAL_TIM_PWM_ConfigChannel>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 8004d8a:	f7ff f91e 	bl	8003fca <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004da2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004da6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004da8:	2300      	movs	r3, #0
 8004daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004dac:	1d3b      	adds	r3, r7, #4
 8004dae:	4619      	mov	r1, r3
 8004db0:	4807      	ldr	r0, [pc, #28]	; (8004dd0 <MX_TIM15_Init+0x104>)
 8004db2:	f005 f80d 	bl	8009dd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <MX_TIM15_Init+0xf4>
  {
    Error_Handler();
 8004dbc:	f7ff f905 	bl	8003fca <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8004dc0:	4803      	ldr	r0, [pc, #12]	; (8004dd0 <MX_TIM15_Init+0x104>)
 8004dc2:	f000 f883 	bl	8004ecc <HAL_TIM_MspPostInit>

}
 8004dc6:	bf00      	nop
 8004dc8:	3758      	adds	r7, #88	; 0x58
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	20000b38 	.word	0x20000b38
 8004dd4:	40014000 	.word	0x40014000

08004dd8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a23      	ldr	r2, [pc, #140]	; (8004e74 <HAL_TIM_PWM_MspInit+0x9c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d114      	bne.n	8004e14 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004dea:	4b23      	ldr	r3, [pc, #140]	; (8004e78 <HAL_TIM_PWM_MspInit+0xa0>)
 8004dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dee:	4a22      	ldr	r2, [pc, #136]	; (8004e78 <HAL_TIM_PWM_MspInit+0xa0>)
 8004df0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004df4:	6613      	str	r3, [r2, #96]	; 0x60
 8004df6:	4b20      	ldr	r3, [pc, #128]	; (8004e78 <HAL_TIM_PWM_MspInit+0xa0>)
 8004df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004e02:	2200      	movs	r2, #0
 8004e04:	2100      	movs	r1, #0
 8004e06:	2019      	movs	r0, #25
 8004e08:	f001 fe93 	bl	8006b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004e0c:	2019      	movs	r0, #25
 8004e0e:	f001 feac 	bl	8006b6a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8004e12:	e02a      	b.n	8004e6a <HAL_TIM_PWM_MspInit+0x92>
  else if(tim_pwmHandle->Instance==TIM2)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1c:	d114      	bne.n	8004e48 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e1e:	4b16      	ldr	r3, [pc, #88]	; (8004e78 <HAL_TIM_PWM_MspInit+0xa0>)
 8004e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e22:	4a15      	ldr	r2, [pc, #84]	; (8004e78 <HAL_TIM_PWM_MspInit+0xa0>)
 8004e24:	f043 0301 	orr.w	r3, r3, #1
 8004e28:	6593      	str	r3, [r2, #88]	; 0x58
 8004e2a:	4b13      	ldr	r3, [pc, #76]	; (8004e78 <HAL_TIM_PWM_MspInit+0xa0>)
 8004e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	613b      	str	r3, [r7, #16]
 8004e34:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004e36:	2200      	movs	r2, #0
 8004e38:	2100      	movs	r1, #0
 8004e3a:	201c      	movs	r0, #28
 8004e3c:	f001 fe79 	bl	8006b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004e40:	201c      	movs	r0, #28
 8004e42:	f001 fe92 	bl	8006b6a <HAL_NVIC_EnableIRQ>
}
 8004e46:	e010      	b.n	8004e6a <HAL_TIM_PWM_MspInit+0x92>
  else if(tim_pwmHandle->Instance==TIM15)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a0b      	ldr	r2, [pc, #44]	; (8004e7c <HAL_TIM_PWM_MspInit+0xa4>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d10b      	bne.n	8004e6a <HAL_TIM_PWM_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004e52:	4b09      	ldr	r3, [pc, #36]	; (8004e78 <HAL_TIM_PWM_MspInit+0xa0>)
 8004e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e56:	4a08      	ldr	r2, [pc, #32]	; (8004e78 <HAL_TIM_PWM_MspInit+0xa0>)
 8004e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e5c:	6613      	str	r3, [r2, #96]	; 0x60
 8004e5e:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <HAL_TIM_PWM_MspInit+0xa0>)
 8004e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	68fb      	ldr	r3, [r7, #12]
}
 8004e6a:	bf00      	nop
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40012c00 	.word	0x40012c00
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	40014000 	.word	0x40014000

08004e80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a0d      	ldr	r2, [pc, #52]	; (8004ec4 <HAL_TIM_Base_MspInit+0x44>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d113      	bne.n	8004eba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004e92:	4b0d      	ldr	r3, [pc, #52]	; (8004ec8 <HAL_TIM_Base_MspInit+0x48>)
 8004e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e96:	4a0c      	ldr	r2, [pc, #48]	; (8004ec8 <HAL_TIM_Base_MspInit+0x48>)
 8004e98:	f043 0310 	orr.w	r3, r3, #16
 8004e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8004e9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <HAL_TIM_Base_MspInit+0x48>)
 8004ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea2:	f003 0310 	and.w	r3, r3, #16
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 4, 0);
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2104      	movs	r1, #4
 8004eae:	2036      	movs	r0, #54	; 0x36
 8004eb0:	f001 fe3f 	bl	8006b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004eb4:	2036      	movs	r0, #54	; 0x36
 8004eb6:	f001 fe58 	bl	8006b6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8004eba:	bf00      	nop
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40001000 	.word	0x40001000
 8004ec8:	40021000 	.word	0x40021000

08004ecc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08a      	sub	sp, #40	; 0x28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ed4:	f107 0314 	add.w	r3, r7, #20
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	605a      	str	r2, [r3, #4]
 8004ede:	609a      	str	r2, [r3, #8]
 8004ee0:	60da      	str	r2, [r3, #12]
 8004ee2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a35      	ldr	r2, [pc, #212]	; (8004fc0 <HAL_TIM_MspPostInit+0xf4>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d11e      	bne.n	8004f2c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eee:	4b35      	ldr	r3, [pc, #212]	; (8004fc4 <HAL_TIM_MspPostInit+0xf8>)
 8004ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef2:	4a34      	ldr	r2, [pc, #208]	; (8004fc4 <HAL_TIM_MspPostInit+0xf8>)
 8004ef4:	f043 0301 	orr.w	r3, r3, #1
 8004ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004efa:	4b32      	ldr	r3, [pc, #200]	; (8004fc4 <HAL_TIM_MspPostInit+0xf8>)
 8004efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_CLOCK_L_Pin;
 8004f06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f10:	2300      	movs	r3, #0
 8004f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f14:	2300      	movs	r3, #0
 8004f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_CLOCK_L_GPIO_Port, &GPIO_InitStruct);
 8004f1c:	f107 0314 	add.w	r3, r7, #20
 8004f20:	4619      	mov	r1, r3
 8004f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f26:	f002 f871 	bl	800700c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004f2a:	e044      	b.n	8004fb6 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM2)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f34:	d11d      	bne.n	8004f72 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f36:	4b23      	ldr	r3, [pc, #140]	; (8004fc4 <HAL_TIM_MspPostInit+0xf8>)
 8004f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f3a:	4a22      	ldr	r2, [pc, #136]	; (8004fc4 <HAL_TIM_MspPostInit+0xf8>)
 8004f3c:	f043 0301 	orr.w	r3, r3, #1
 8004f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f42:	4b20      	ldr	r3, [pc, #128]	; (8004fc4 <HAL_TIM_MspPostInit+0xf8>)
 8004f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_CLOCK_R_Pin;
 8004f4e:	2302      	movs	r3, #2
 8004f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f52:	2302      	movs	r3, #2
 8004f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f56:	2300      	movs	r3, #0
 8004f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_CLOCK_R_GPIO_Port, &GPIO_InitStruct);
 8004f62:	f107 0314 	add.w	r3, r7, #20
 8004f66:	4619      	mov	r1, r3
 8004f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f6c:	f002 f84e 	bl	800700c <HAL_GPIO_Init>
}
 8004f70:	e021      	b.n	8004fb6 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM15)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a14      	ldr	r2, [pc, #80]	; (8004fc8 <HAL_TIM_MspPostInit+0xfc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d11c      	bne.n	8004fb6 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f7c:	4b11      	ldr	r3, [pc, #68]	; (8004fc4 <HAL_TIM_MspPostInit+0xf8>)
 8004f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f80:	4a10      	ldr	r2, [pc, #64]	; (8004fc4 <HAL_TIM_MspPostInit+0xf8>)
 8004f82:	f043 0301 	orr.w	r3, r3, #1
 8004f86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f88:	4b0e      	ldr	r3, [pc, #56]	; (8004fc4 <HAL_TIM_MspPostInit+0xf8>)
 8004f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	60bb      	str	r3, [r7, #8]
 8004f92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPEAKER_Pin;
 8004f94:	2308      	movs	r3, #8
 8004f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f98:	2302      	movs	r3, #2
 8004f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8004fa4:	230e      	movs	r3, #14
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPEAKER_GPIO_Port, &GPIO_InitStruct);
 8004fa8:	f107 0314 	add.w	r3, r7, #20
 8004fac:	4619      	mov	r1, r3
 8004fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fb2:	f002 f82b 	bl	800700c <HAL_GPIO_Init>
}
 8004fb6:	bf00      	nop
 8004fb8:	3728      	adds	r7, #40	; 0x28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40012c00 	.word	0x40012c00
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	40014000 	.word	0x40014000

08004fcc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004fd0:	4b14      	ldr	r3, [pc, #80]	; (8005024 <MX_USART2_UART_Init+0x58>)
 8004fd2:	4a15      	ldr	r2, [pc, #84]	; (8005028 <MX_USART2_UART_Init+0x5c>)
 8004fd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004fd6:	4b13      	ldr	r3, [pc, #76]	; (8005024 <MX_USART2_UART_Init+0x58>)
 8004fd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004fdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004fde:	4b11      	ldr	r3, [pc, #68]	; (8005024 <MX_USART2_UART_Init+0x58>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004fe4:	4b0f      	ldr	r3, [pc, #60]	; (8005024 <MX_USART2_UART_Init+0x58>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004fea:	4b0e      	ldr	r3, [pc, #56]	; (8005024 <MX_USART2_UART_Init+0x58>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004ff0:	4b0c      	ldr	r3, [pc, #48]	; (8005024 <MX_USART2_UART_Init+0x58>)
 8004ff2:	220c      	movs	r2, #12
 8004ff4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ff6:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <MX_USART2_UART_Init+0x58>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ffc:	4b09      	ldr	r3, [pc, #36]	; (8005024 <MX_USART2_UART_Init+0x58>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005002:	4b08      	ldr	r3, [pc, #32]	; (8005024 <MX_USART2_UART_Init+0x58>)
 8005004:	2200      	movs	r2, #0
 8005006:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005008:	4b06      	ldr	r3, [pc, #24]	; (8005024 <MX_USART2_UART_Init+0x58>)
 800500a:	2200      	movs	r2, #0
 800500c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800500e:	4805      	ldr	r0, [pc, #20]	; (8005024 <MX_USART2_UART_Init+0x58>)
 8005010:	f004 ff74 	bl	8009efc <HAL_UART_Init>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800501a:	f7fe ffd6 	bl	8003fca <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800501e:	bf00      	nop
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20000b84 	.word	0x20000b84
 8005028:	40004400 	.word	0x40004400

0800502c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b09e      	sub	sp, #120	; 0x78
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005034:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	605a      	str	r2, [r3, #4]
 800503e:	609a      	str	r2, [r3, #8]
 8005040:	60da      	str	r2, [r3, #12]
 8005042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005044:	f107 0310 	add.w	r3, r7, #16
 8005048:	2254      	movs	r2, #84	; 0x54
 800504a:	2100      	movs	r1, #0
 800504c:	4618      	mov	r0, r3
 800504e:	f005 fbf7 	bl	800a840 <memset>
  if(uartHandle->Instance==USART2)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a28      	ldr	r2, [pc, #160]	; (80050f8 <HAL_UART_MspInit+0xcc>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d148      	bne.n	80050ee <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800505c:	2302      	movs	r3, #2
 800505e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005060:	2300      	movs	r3, #0
 8005062:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005064:	f107 0310 	add.w	r3, r7, #16
 8005068:	4618      	mov	r0, r3
 800506a:	f003 fb8f 	bl	800878c <HAL_RCCEx_PeriphCLKConfig>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005074:	f7fe ffa9 	bl	8003fca <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005078:	4b20      	ldr	r3, [pc, #128]	; (80050fc <HAL_UART_MspInit+0xd0>)
 800507a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507c:	4a1f      	ldr	r2, [pc, #124]	; (80050fc <HAL_UART_MspInit+0xd0>)
 800507e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005082:	6593      	str	r3, [r2, #88]	; 0x58
 8005084:	4b1d      	ldr	r3, [pc, #116]	; (80050fc <HAL_UART_MspInit+0xd0>)
 8005086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005090:	4b1a      	ldr	r3, [pc, #104]	; (80050fc <HAL_UART_MspInit+0xd0>)
 8005092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005094:	4a19      	ldr	r2, [pc, #100]	; (80050fc <HAL_UART_MspInit+0xd0>)
 8005096:	f043 0301 	orr.w	r3, r3, #1
 800509a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800509c:	4b17      	ldr	r3, [pc, #92]	; (80050fc <HAL_UART_MspInit+0xd0>)
 800509e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80050a8:	2304      	movs	r3, #4
 80050aa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ac:	2302      	movs	r3, #2
 80050ae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b0:	2300      	movs	r3, #0
 80050b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050b4:	2303      	movs	r3, #3
 80050b6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80050b8:	2307      	movs	r3, #7
 80050ba:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80050bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80050c0:	4619      	mov	r1, r3
 80050c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050c6:	f001 ffa1 	bl	800700c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80050ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ce:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050d0:	2302      	movs	r3, #2
 80050d2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d4:	2300      	movs	r3, #0
 80050d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050d8:	2303      	movs	r3, #3
 80050da:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80050dc:	2303      	movs	r3, #3
 80050de:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80050e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80050e4:	4619      	mov	r1, r3
 80050e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050ea:	f001 ff8f 	bl	800700c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80050ee:	bf00      	nop
 80050f0:	3778      	adds	r7, #120	; 0x78
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40004400 	.word	0x40004400
 80050fc:	40021000 	.word	0x40021000

08005100 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005138 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005104:	f7ff fcb0 	bl	8004a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005108:	480c      	ldr	r0, [pc, #48]	; (800513c <LoopForever+0x6>)
  ldr r1, =_edata
 800510a:	490d      	ldr	r1, [pc, #52]	; (8005140 <LoopForever+0xa>)
  ldr r2, =_sidata
 800510c:	4a0d      	ldr	r2, [pc, #52]	; (8005144 <LoopForever+0xe>)
  movs r3, #0
 800510e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005110:	e002      	b.n	8005118 <LoopCopyDataInit>

08005112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005116:	3304      	adds	r3, #4

08005118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800511a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800511c:	d3f9      	bcc.n	8005112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800511e:	4a0a      	ldr	r2, [pc, #40]	; (8005148 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005120:	4c0a      	ldr	r4, [pc, #40]	; (800514c <LoopForever+0x16>)
  movs r3, #0
 8005122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005124:	e001      	b.n	800512a <LoopFillZerobss>

08005126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005128:	3204      	adds	r2, #4

0800512a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800512a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800512c:	d3fb      	bcc.n	8005126 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800512e:	f005 fb63 	bl	800a7f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005132:	f7fe fe5d 	bl	8003df0 <main>

08005136 <LoopForever>:

LoopForever:
    b LoopForever
 8005136:	e7fe      	b.n	8005136 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005138:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800513c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005140:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8005144:	0800dcf4 	.word	0x0800dcf4
  ldr r2, =_sbss
 8005148:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800514c:	20000c1c 	.word	0x20000c1c

08005150 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005150:	e7fe      	b.n	8005150 <ADC1_IRQHandler>

08005152 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b082      	sub	sp, #8
 8005156:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005158:	2300      	movs	r3, #0
 800515a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800515c:	2003      	movs	r0, #3
 800515e:	f001 fcdd 	bl	8006b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005162:	2000      	movs	r0, #0
 8005164:	f000 f80e 	bl	8005184 <HAL_InitTick>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	71fb      	strb	r3, [r7, #7]
 8005172:	e001      	b.n	8005178 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005174:	f7ff fb2c 	bl	80047d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005178:	79fb      	ldrb	r3, [r7, #7]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
	...

08005184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005190:	4b17      	ldr	r3, [pc, #92]	; (80051f0 <HAL_InitTick+0x6c>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d023      	beq.n	80051e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005198:	4b16      	ldr	r3, [pc, #88]	; (80051f4 <HAL_InitTick+0x70>)
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	4b14      	ldr	r3, [pc, #80]	; (80051f0 <HAL_InitTick+0x6c>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	4619      	mov	r1, r3
 80051a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80051aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ae:	4618      	mov	r0, r3
 80051b0:	f001 fce9 	bl	8006b86 <HAL_SYSTICK_Config>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10f      	bne.n	80051da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b0f      	cmp	r3, #15
 80051be:	d809      	bhi.n	80051d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051c0:	2200      	movs	r2, #0
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	f04f 30ff 	mov.w	r0, #4294967295
 80051c8:	f001 fcb3 	bl	8006b32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80051cc:	4a0a      	ldr	r2, [pc, #40]	; (80051f8 <HAL_InitTick+0x74>)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	e007      	b.n	80051e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	73fb      	strb	r3, [r7, #15]
 80051d8:	e004      	b.n	80051e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	73fb      	strb	r3, [r7, #15]
 80051de:	e001      	b.n	80051e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20000008 	.word	0x20000008
 80051f4:	20000000 	.word	0x20000000
 80051f8:	20000004 	.word	0x20000004

080051fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005200:	4b06      	ldr	r3, [pc, #24]	; (800521c <HAL_IncTick+0x20>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	461a      	mov	r2, r3
 8005206:	4b06      	ldr	r3, [pc, #24]	; (8005220 <HAL_IncTick+0x24>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4413      	add	r3, r2
 800520c:	4a04      	ldr	r2, [pc, #16]	; (8005220 <HAL_IncTick+0x24>)
 800520e:	6013      	str	r3, [r2, #0]
}
 8005210:	bf00      	nop
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	20000008 	.word	0x20000008
 8005220:	20000c08 	.word	0x20000c08

08005224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  return uwTick;
 8005228:	4b03      	ldr	r3, [pc, #12]	; (8005238 <HAL_GetTick+0x14>)
 800522a:	681b      	ldr	r3, [r3, #0]
}
 800522c:	4618      	mov	r0, r3
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	20000c08 	.word	0x20000c08

0800523c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005244:	f7ff ffee 	bl	8005224 <HAL_GetTick>
 8005248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005254:	d005      	beq.n	8005262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005256:	4b0a      	ldr	r3, [pc, #40]	; (8005280 <HAL_Delay+0x44>)
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4413      	add	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005262:	bf00      	nop
 8005264:	f7ff ffde 	bl	8005224 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	429a      	cmp	r2, r3
 8005272:	d8f7      	bhi.n	8005264 <HAL_Delay+0x28>
  {
  }
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	20000008 	.word	0x20000008

08005284 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	609a      	str	r2, [r3, #8]
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	609a      	str	r2, [r3, #8]
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3360      	adds	r3, #96	; 0x60
 80052fe:	461a      	mov	r2, r3
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	4b08      	ldr	r3, [pc, #32]	; (8005330 <LL_ADC_SetOffset+0x44>)
 800530e:	4013      	ands	r3, r2
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	430a      	orrs	r2, r1
 800531a:	4313      	orrs	r3, r2
 800531c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005324:	bf00      	nop
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	03fff000 	.word	0x03fff000

08005334 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	3360      	adds	r3, #96	; 0x60
 8005342:	461a      	mov	r2, r3
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005354:	4618      	mov	r0, r3
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005360:	b480      	push	{r7}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3360      	adds	r3, #96	; 0x60
 8005370:	461a      	mov	r2, r3
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	431a      	orrs	r2, r3
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800538a:	bf00      	nop
 800538c:	371c      	adds	r7, #28
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80053aa:	2301      	movs	r3, #1
 80053ac:	e000      	b.n	80053b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	3330      	adds	r3, #48	; 0x30
 80053cc:	461a      	mov	r2, r3
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	0a1b      	lsrs	r3, r3, #8
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	f003 030c 	and.w	r3, r3, #12
 80053d8:	4413      	add	r3, r2
 80053da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f003 031f 	and.w	r3, r3, #31
 80053e6:	211f      	movs	r1, #31
 80053e8:	fa01 f303 	lsl.w	r3, r1, r3
 80053ec:	43db      	mvns	r3, r3
 80053ee:	401a      	ands	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	0e9b      	lsrs	r3, r3, #26
 80053f4:	f003 011f 	and.w	r1, r3, #31
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f003 031f 	and.w	r3, r3, #31
 80053fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005402:	431a      	orrs	r2, r3
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005408:	bf00      	nop
 800540a:	371c      	adds	r7, #28
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3314      	adds	r3, #20
 8005424:	461a      	mov	r2, r3
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	0e5b      	lsrs	r3, r3, #25
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	4413      	add	r3, r2
 8005432:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	0d1b      	lsrs	r3, r3, #20
 800543c:	f003 031f 	and.w	r3, r3, #31
 8005440:	2107      	movs	r1, #7
 8005442:	fa01 f303 	lsl.w	r3, r1, r3
 8005446:	43db      	mvns	r3, r3
 8005448:	401a      	ands	r2, r3
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	0d1b      	lsrs	r3, r3, #20
 800544e:	f003 031f 	and.w	r3, r3, #31
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	fa01 f303 	lsl.w	r3, r1, r3
 8005458:	431a      	orrs	r2, r3
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800545e:	bf00      	nop
 8005460:	371c      	adds	r7, #28
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
	...

0800546c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005484:	43db      	mvns	r3, r3
 8005486:	401a      	ands	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f003 0318 	and.w	r3, r3, #24
 800548e:	4908      	ldr	r1, [pc, #32]	; (80054b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005490:	40d9      	lsrs	r1, r3
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	400b      	ands	r3, r1
 8005496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800549a:	431a      	orrs	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80054a2:	bf00      	nop
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	0007ffff 	.word	0x0007ffff

080054b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80054c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6093      	str	r3, [r2, #8]
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054ec:	d101      	bne.n	80054f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005510:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005514:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005538:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800553c:	d101      	bne.n	8005542 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800553e:	2301      	movs	r3, #1
 8005540:	e000      	b.n	8005544 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005560:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005564:	f043 0201 	orr.w	r2, r3, #1
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005588:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800558c:	f043 0202 	orr.w	r2, r3, #2
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <LL_ADC_IsEnabled+0x18>
 80055b4:	2301      	movs	r3, #1
 80055b6:	e000      	b.n	80055ba <LL_ADC_IsEnabled+0x1a>
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d101      	bne.n	80055de <LL_ADC_IsDisableOngoing+0x18>
 80055da:	2301      	movs	r3, #1
 80055dc:	e000      	b.n	80055e0 <LL_ADC_IsDisableOngoing+0x1a>
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005600:	f043 0204 	orr.w	r2, r3, #4
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005624:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005628:	f043 0210 	orr.w	r2, r3, #16
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 0304 	and.w	r3, r3, #4
 800564c:	2b04      	cmp	r3, #4
 800564e:	d101      	bne.n	8005654 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005650:	2301      	movs	r3, #1
 8005652:	e000      	b.n	8005656 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005672:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005676:	f043 0220 	orr.w	r2, r3, #32
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800567e:	bf00      	nop
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b08      	cmp	r3, #8
 800569c:	d101      	bne.n	80056a2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056b8:	2300      	movs	r3, #0
 80056ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80056bc:	2300      	movs	r3, #0
 80056be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e12c      	b.n	8005924 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d109      	bne.n	80056ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7fe f997 	bl	8003a0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff fef1 	bl	80054d8 <LL_ADC_IsDeepPowerDownEnabled>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d004      	beq.n	8005706 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff fed7 	bl	80054b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff ff0c 	bl	8005528 <LL_ADC_IsInternalRegulatorEnabled>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d115      	bne.n	8005742 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff fef0 	bl	8005500 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005720:	4b82      	ldr	r3, [pc, #520]	; (800592c <HAL_ADC_Init+0x27c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	099b      	lsrs	r3, r3, #6
 8005726:	4a82      	ldr	r2, [pc, #520]	; (8005930 <HAL_ADC_Init+0x280>)
 8005728:	fba2 2303 	umull	r2, r3, r2, r3
 800572c:	099b      	lsrs	r3, r3, #6
 800572e:	3301      	adds	r3, #1
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005734:	e002      	b.n	800573c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	3b01      	subs	r3, #1
 800573a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f9      	bne.n	8005736 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f7ff feee 	bl	8005528 <LL_ADC_IsInternalRegulatorEnabled>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10d      	bne.n	800576e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005756:	f043 0210 	orr.w	r2, r3, #16
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005762:	f043 0201 	orr.w	r2, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff ff62 	bl	800563c <LL_ADC_REG_IsConversionOngoing>
 8005778:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577e:	f003 0310 	and.w	r3, r3, #16
 8005782:	2b00      	cmp	r3, #0
 8005784:	f040 80c5 	bne.w	8005912 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2b00      	cmp	r3, #0
 800578c:	f040 80c1 	bne.w	8005912 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005794:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005798:	f043 0202 	orr.w	r2, r3, #2
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff fefb 	bl	80055a0 <LL_ADC_IsEnabled>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10b      	bne.n	80057c8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057b0:	4860      	ldr	r0, [pc, #384]	; (8005934 <HAL_ADC_Init+0x284>)
 80057b2:	f7ff fef5 	bl	80055a0 <LL_ADC_IsEnabled>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d105      	bne.n	80057c8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	4619      	mov	r1, r3
 80057c2:	485d      	ldr	r0, [pc, #372]	; (8005938 <HAL_ADC_Init+0x288>)
 80057c4:	f7ff fd5e 	bl	8005284 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	7e5b      	ldrb	r3, [r3, #25]
 80057cc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80057d2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80057d8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80057de:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057e6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80057e8:	4313      	orrs	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d106      	bne.n	8005804 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	3b01      	subs	r3, #1
 80057fc:	045b      	lsls	r3, r3, #17
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	4313      	orrs	r3, r2
 8005802:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005808:	2b00      	cmp	r3, #0
 800580a:	d009      	beq.n	8005820 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005810:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005818:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	4313      	orrs	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68da      	ldr	r2, [r3, #12]
 8005826:	4b45      	ldr	r3, [pc, #276]	; (800593c <HAL_ADC_Init+0x28c>)
 8005828:	4013      	ands	r3, r2
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6812      	ldr	r2, [r2, #0]
 800582e:	69b9      	ldr	r1, [r7, #24]
 8005830:	430b      	orrs	r3, r1
 8005832:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff feff 	bl	800563c <LL_ADC_REG_IsConversionOngoing>
 800583e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4618      	mov	r0, r3
 8005846:	f7ff ff20 	bl	800568a <LL_ADC_INJ_IsConversionOngoing>
 800584a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d13d      	bne.n	80058ce <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d13a      	bne.n	80058ce <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800585c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005864:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005866:	4313      	orrs	r3, r2
 8005868:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005874:	f023 0302 	bic.w	r3, r3, #2
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6812      	ldr	r2, [r2, #0]
 800587c:	69b9      	ldr	r1, [r7, #24]
 800587e:	430b      	orrs	r3, r1
 8005880:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005888:	2b01      	cmp	r3, #1
 800588a:	d118      	bne.n	80058be <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005896:	f023 0304 	bic.w	r3, r3, #4
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80058a2:	4311      	orrs	r1, r2
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80058a8:	4311      	orrs	r1, r2
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80058ae:	430a      	orrs	r2, r1
 80058b0:	431a      	orrs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	611a      	str	r2, [r3, #16]
 80058bc:	e007      	b.n	80058ce <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	691a      	ldr	r2, [r3, #16]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0201 	bic.w	r2, r2, #1
 80058cc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d10c      	bne.n	80058f0 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058dc:	f023 010f 	bic.w	r1, r3, #15
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	1e5a      	subs	r2, r3, #1
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	631a      	str	r2, [r3, #48]	; 0x30
 80058ee:	e007      	b.n	8005900 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 020f 	bic.w	r2, r2, #15
 80058fe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005904:	f023 0303 	bic.w	r3, r3, #3
 8005908:	f043 0201 	orr.w	r2, r3, #1
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	655a      	str	r2, [r3, #84]	; 0x54
 8005910:	e007      	b.n	8005922 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005916:	f043 0210 	orr.w	r2, r3, #16
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005922:	7ffb      	ldrb	r3, [r7, #31]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3720      	adds	r7, #32
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	20000000 	.word	0x20000000
 8005930:	053e2d63 	.word	0x053e2d63
 8005934:	50040000 	.word	0x50040000
 8005938:	50040300 	.word	0x50040300
 800593c:	fff0c007 	.word	0xfff0c007

08005940 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff fe75 	bl	800563c <LL_ADC_REG_IsConversionOngoing>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d14f      	bne.n	80059f8 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800595e:	2b01      	cmp	r3, #1
 8005960:	d101      	bne.n	8005966 <HAL_ADC_Start+0x26>
 8005962:	2302      	movs	r3, #2
 8005964:	e04b      	b.n	80059fe <HAL_ADC_Start+0xbe>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 feae 	bl	80066d0 <ADC_Enable>
 8005974:	4603      	mov	r3, r0
 8005976:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005978:	7bfb      	ldrb	r3, [r7, #15]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d137      	bne.n	80059ee <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005982:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005986:	f023 0301 	bic.w	r3, r3, #1
 800598a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005996:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800599a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599e:	d106      	bne.n	80059ae <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a4:	f023 0206 	bic.w	r2, r3, #6
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	659a      	str	r2, [r3, #88]	; 0x58
 80059ac:	e002      	b.n	80059b4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	221c      	movs	r2, #28
 80059ba:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d007      	beq.n	80059e2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80059da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7ff fe00 	bl	80055ec <LL_ADC_REG_StartConversion>
 80059ec:	e006      	b.n	80059fc <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80059f6:	e001      	b.n	80059fc <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80059f8:	2302      	movs	r3, #2
 80059fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b084      	sub	sp, #16
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d101      	bne.n	8005a1c <HAL_ADC_Stop+0x16>
 8005a18:	2302      	movs	r3, #2
 8005a1a:	e023      	b.n	8005a64 <HAL_ADC_Stop+0x5e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005a24:	2103      	movs	r1, #3
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fd96 	bl	8006558 <ADC_ConversionStop>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d111      	bne.n	8005a5a <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 feac 	bl	8006794 <ADC_Disable>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d109      	bne.n	8005a5a <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005a4e:	f023 0301 	bic.w	r3, r3, #1
 8005a52:	f043 0201 	orr.w	r2, r3, #1
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	2b08      	cmp	r3, #8
 8005a7c:	d102      	bne.n	8005a84 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8005a7e:	2308      	movs	r3, #8
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	e010      	b.n	8005aa6 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d007      	beq.n	8005aa2 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a96:	f043 0220 	orr.w	r2, r3, #32
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e06f      	b.n	8005b82 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8005aa2:	2304      	movs	r3, #4
 8005aa4:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005aa6:	f7ff fbbd 	bl	8005224 <HAL_GetTick>
 8005aaa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005aac:	e021      	b.n	8005af2 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab4:	d01d      	beq.n	8005af2 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005ab6:	f7ff fbb5 	bl	8005224 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d302      	bcc.n	8005acc <HAL_ADC_PollForConversion+0x60>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d112      	bne.n	8005af2 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10b      	bne.n	8005af2 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ade:	f043 0204 	orr.w	r2, r3, #4
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e047      	b.n	8005b82 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	4013      	ands	r3, r2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0d6      	beq.n	8005aae <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7ff fc40 	bl	8005396 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d01c      	beq.n	8005b56 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	7e5b      	ldrb	r3, [r3, #25]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d118      	bne.n	8005b56 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0308 	and.w	r3, r3, #8
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d111      	bne.n	8005b56 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d105      	bne.n	8005b56 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4e:	f043 0201 	orr.w	r2, r3, #1
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d104      	bne.n	8005b6e <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2208      	movs	r2, #8
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	e008      	b.n	8005b80 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d103      	bne.n	8005b80 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	220c      	movs	r2, #12
 8005b7e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7ff fd4d 	bl	800563c <LL_ADC_REG_IsConversionOngoing>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d167      	bne.n	8005c78 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <HAL_ADC_Start_DMA+0x2a>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	e063      	b.n	8005c7e <HAL_ADC_Start_DMA+0xf2>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 fd86 	bl	80066d0 <ADC_Enable>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005bc8:	7dfb      	ldrb	r3, [r7, #23]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d14f      	bne.n	8005c6e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005bd6:	f023 0301 	bic.w	r3, r3, #1
 8005bda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d006      	beq.n	8005bfc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf2:	f023 0206 	bic.w	r2, r3, #6
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	659a      	str	r2, [r3, #88]	; 0x58
 8005bfa:	e002      	b.n	8005c02 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c06:	4a20      	ldr	r2, [pc, #128]	; (8005c88 <HAL_ADC_Start_DMA+0xfc>)
 8005c08:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c0e:	4a1f      	ldr	r2, [pc, #124]	; (8005c8c <HAL_ADC_Start_DMA+0x100>)
 8005c10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c16:	4a1e      	ldr	r2, [pc, #120]	; (8005c90 <HAL_ADC_Start_DMA+0x104>)
 8005c18:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	221c      	movs	r2, #28
 8005c20:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 0210 	orr.w	r2, r2, #16
 8005c38:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68da      	ldr	r2, [r3, #12]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f042 0201 	orr.w	r2, r2, #1
 8005c48:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	3340      	adds	r3, #64	; 0x40
 8005c54:	4619      	mov	r1, r3
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f001 f859 	bl	8006d10 <HAL_DMA_Start_IT>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff fcc0 	bl	80055ec <LL_ADC_REG_StartConversion>
 8005c6c:	e006      	b.n	8005c7c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005c76:	e001      	b.n	8005c7c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005c78:	2302      	movs	r3, #2
 8005c7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	08006853 	.word	0x08006853
 8005c8c:	0800692b 	.word	0x0800692b
 8005c90:	08006947 	.word	0x08006947

08005c94 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d101      	bne.n	8005caa <HAL_ADC_Stop_DMA+0x16>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	e051      	b.n	8005d4e <HAL_ADC_Stop_DMA+0xba>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005cb2:	2103      	movs	r1, #3
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fc4f 	bl	8006558 <ADC_ConversionStop>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d13f      	bne.n	8005d44 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 0201 	bic.w	r2, r2, #1
 8005cd2:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d10f      	bne.n	8005d02 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f001 f872 	bl	8006dd0 <HAL_DMA_Abort>
 8005cec:	4603      	mov	r3, r0
 8005cee:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d005      	beq.n	8005d02 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0210 	bic.w	r2, r2, #16
 8005d10:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8005d12:	7bfb      	ldrb	r3, [r7, #15]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d105      	bne.n	8005d24 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fd3b 	bl	8006794 <ADC_Disable>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	73fb      	strb	r3, [r7, #15]
 8005d22:	e002      	b.n	8005d2a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fd35 	bl	8006794 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005d2a:	7bfb      	ldrb	r3, [r7, #15]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d109      	bne.n	8005d44 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005d38:	f023 0301 	bic.w	r3, r3, #1
 8005d3c:	f043 0201 	orr.w	r2, r3, #1
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b0b6      	sub	sp, #216	; 0xd8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005da8:	2300      	movs	r3, #0
 8005daa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d101      	bne.n	8005dba <HAL_ADC_ConfigChannel+0x22>
 8005db6:	2302      	movs	r3, #2
 8005db8:	e3b9      	b.n	800652e <HAL_ADC_ConfigChannel+0x796>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7ff fc38 	bl	800563c <LL_ADC_REG_IsConversionOngoing>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f040 839e 	bne.w	8006510 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b05      	cmp	r3, #5
 8005dda:	d824      	bhi.n	8005e26 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	3b02      	subs	r3, #2
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d81b      	bhi.n	8005e1e <HAL_ADC_ConfigChannel+0x86>
 8005de6:	a201      	add	r2, pc, #4	; (adr r2, 8005dec <HAL_ADC_ConfigChannel+0x54>)
 8005de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dec:	08005dfd 	.word	0x08005dfd
 8005df0:	08005e05 	.word	0x08005e05
 8005df4:	08005e0d 	.word	0x08005e0d
 8005df8:	08005e15 	.word	0x08005e15
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	220c      	movs	r2, #12
 8005e00:	605a      	str	r2, [r3, #4]
          break;
 8005e02:	e011      	b.n	8005e28 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2212      	movs	r2, #18
 8005e08:	605a      	str	r2, [r3, #4]
          break;
 8005e0a:	e00d      	b.n	8005e28 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2218      	movs	r2, #24
 8005e10:	605a      	str	r2, [r3, #4]
          break;
 8005e12:	e009      	b.n	8005e28 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e1a:	605a      	str	r2, [r3, #4]
          break;
 8005e1c:	e004      	b.n	8005e28 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2206      	movs	r2, #6
 8005e22:	605a      	str	r2, [r3, #4]
          break;
 8005e24:	e000      	b.n	8005e28 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8005e26:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6818      	ldr	r0, [r3, #0]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	6859      	ldr	r1, [r3, #4]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	f7ff fac1 	bl	80053bc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7ff fbfc 	bl	800563c <LL_ADC_REG_IsConversionOngoing>
 8005e44:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff fc1c 	bl	800568a <LL_ADC_INJ_IsConversionOngoing>
 8005e52:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005e56:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f040 81a6 	bne.w	80061ac <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005e60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f040 81a1 	bne.w	80061ac <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6818      	ldr	r0, [r3, #0]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	6819      	ldr	r1, [r3, #0]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	461a      	mov	r2, r3
 8005e78:	f7ff facc 	bl	8005414 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	695a      	ldr	r2, [r3, #20]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	08db      	lsrs	r3, r3, #3
 8005e88:	f003 0303 	and.w	r3, r3, #3
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d00a      	beq.n	8005eb4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6818      	ldr	r0, [r3, #0]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	6919      	ldr	r1, [r3, #16]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005eae:	f7ff fa1d 	bl	80052ec <LL_ADC_SetOffset>
 8005eb2:	e17b      	b.n	80061ac <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2100      	movs	r1, #0
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff fa3a 	bl	8005334 <LL_ADC_GetOffsetChannel>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10a      	bne.n	8005ee0 <HAL_ADC_ConfigChannel+0x148>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2100      	movs	r1, #0
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff fa2f 	bl	8005334 <LL_ADC_GetOffsetChannel>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	0e9b      	lsrs	r3, r3, #26
 8005eda:	f003 021f 	and.w	r2, r3, #31
 8005ede:	e01e      	b.n	8005f1e <HAL_ADC_ConfigChannel+0x186>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7ff fa24 	bl	8005334 <LL_ADC_GetOffsetChannel>
 8005eec:	4603      	mov	r3, r0
 8005eee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ef6:	fa93 f3a3 	rbit	r3, r3
 8005efa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005efe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005f06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8005f0e:	2320      	movs	r3, #32
 8005f10:	e004      	b.n	8005f1c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8005f12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f16:	fab3 f383 	clz	r3, r3
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d105      	bne.n	8005f36 <HAL_ADC_ConfigChannel+0x19e>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	0e9b      	lsrs	r3, r3, #26
 8005f30:	f003 031f 	and.w	r3, r3, #31
 8005f34:	e018      	b.n	8005f68 <HAL_ADC_ConfigChannel+0x1d0>
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f42:	fa93 f3a3 	rbit	r3, r3
 8005f46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005f4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005f52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8005f5a:	2320      	movs	r3, #32
 8005f5c:	e004      	b.n	8005f68 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8005f5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f62:	fab3 f383 	clz	r3, r3
 8005f66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d106      	bne.n	8005f7a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2200      	movs	r2, #0
 8005f72:	2100      	movs	r1, #0
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff f9f3 	bl	8005360 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2101      	movs	r1, #1
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff f9d7 	bl	8005334 <LL_ADC_GetOffsetChannel>
 8005f86:	4603      	mov	r3, r0
 8005f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10a      	bne.n	8005fa6 <HAL_ADC_ConfigChannel+0x20e>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2101      	movs	r1, #1
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7ff f9cc 	bl	8005334 <LL_ADC_GetOffsetChannel>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	0e9b      	lsrs	r3, r3, #26
 8005fa0:	f003 021f 	and.w	r2, r3, #31
 8005fa4:	e01e      	b.n	8005fe4 <HAL_ADC_ConfigChannel+0x24c>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2101      	movs	r1, #1
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7ff f9c1 	bl	8005334 <LL_ADC_GetOffsetChannel>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005fbc:	fa93 f3a3 	rbit	r3, r3
 8005fc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005fc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005fcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d101      	bne.n	8005fd8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8005fd4:	2320      	movs	r3, #32
 8005fd6:	e004      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8005fd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005fdc:	fab3 f383 	clz	r3, r3
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d105      	bne.n	8005ffc <HAL_ADC_ConfigChannel+0x264>
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	0e9b      	lsrs	r3, r3, #26
 8005ff6:	f003 031f 	and.w	r3, r3, #31
 8005ffa:	e018      	b.n	800602e <HAL_ADC_ConfigChannel+0x296>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006004:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006008:	fa93 f3a3 	rbit	r3, r3
 800600c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006010:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006014:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006018:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8006020:	2320      	movs	r3, #32
 8006022:	e004      	b.n	800602e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8006024:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006028:	fab3 f383 	clz	r3, r3
 800602c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800602e:	429a      	cmp	r2, r3
 8006030:	d106      	bne.n	8006040 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2200      	movs	r2, #0
 8006038:	2101      	movs	r1, #1
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff f990 	bl	8005360 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2102      	movs	r1, #2
 8006046:	4618      	mov	r0, r3
 8006048:	f7ff f974 	bl	8005334 <LL_ADC_GetOffsetChannel>
 800604c:	4603      	mov	r3, r0
 800604e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10a      	bne.n	800606c <HAL_ADC_ConfigChannel+0x2d4>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2102      	movs	r1, #2
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff f969 	bl	8005334 <LL_ADC_GetOffsetChannel>
 8006062:	4603      	mov	r3, r0
 8006064:	0e9b      	lsrs	r3, r3, #26
 8006066:	f003 021f 	and.w	r2, r3, #31
 800606a:	e01e      	b.n	80060aa <HAL_ADC_ConfigChannel+0x312>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2102      	movs	r1, #2
 8006072:	4618      	mov	r0, r3
 8006074:	f7ff f95e 	bl	8005334 <LL_ADC_GetOffsetChannel>
 8006078:	4603      	mov	r3, r0
 800607a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800607e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006082:	fa93 f3a3 	rbit	r3, r3
 8006086:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800608a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800608e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006092:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800609a:	2320      	movs	r3, #32
 800609c:	e004      	b.n	80060a8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800609e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060a2:	fab3 f383 	clz	r3, r3
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d105      	bne.n	80060c2 <HAL_ADC_ConfigChannel+0x32a>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	0e9b      	lsrs	r3, r3, #26
 80060bc:	f003 031f 	and.w	r3, r3, #31
 80060c0:	e016      	b.n	80060f0 <HAL_ADC_ConfigChannel+0x358>
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060ce:	fa93 f3a3 	rbit	r3, r3
 80060d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80060d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80060da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80060e2:	2320      	movs	r3, #32
 80060e4:	e004      	b.n	80060f0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80060e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060ea:	fab3 f383 	clz	r3, r3
 80060ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d106      	bne.n	8006102 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2200      	movs	r2, #0
 80060fa:	2102      	movs	r1, #2
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7ff f92f 	bl	8005360 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2103      	movs	r1, #3
 8006108:	4618      	mov	r0, r3
 800610a:	f7ff f913 	bl	8005334 <LL_ADC_GetOffsetChannel>
 800610e:	4603      	mov	r3, r0
 8006110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10a      	bne.n	800612e <HAL_ADC_ConfigChannel+0x396>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2103      	movs	r1, #3
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff f908 	bl	8005334 <LL_ADC_GetOffsetChannel>
 8006124:	4603      	mov	r3, r0
 8006126:	0e9b      	lsrs	r3, r3, #26
 8006128:	f003 021f 	and.w	r2, r3, #31
 800612c:	e017      	b.n	800615e <HAL_ADC_ConfigChannel+0x3c6>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2103      	movs	r1, #3
 8006134:	4618      	mov	r0, r3
 8006136:	f7ff f8fd 	bl	8005334 <LL_ADC_GetOffsetChannel>
 800613a:	4603      	mov	r3, r0
 800613c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800613e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006140:	fa93 f3a3 	rbit	r3, r3
 8006144:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006146:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006148:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800614a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8006150:	2320      	movs	r3, #32
 8006152:	e003      	b.n	800615c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8006154:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006156:	fab3 f383 	clz	r3, r3
 800615a:	b2db      	uxtb	r3, r3
 800615c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006166:	2b00      	cmp	r3, #0
 8006168:	d105      	bne.n	8006176 <HAL_ADC_ConfigChannel+0x3de>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	0e9b      	lsrs	r3, r3, #26
 8006170:	f003 031f 	and.w	r3, r3, #31
 8006174:	e011      	b.n	800619a <HAL_ADC_ConfigChannel+0x402>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800617c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800617e:	fa93 f3a3 	rbit	r3, r3
 8006182:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006186:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800618e:	2320      	movs	r3, #32
 8006190:	e003      	b.n	800619a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8006192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006194:	fab3 f383 	clz	r3, r3
 8006198:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800619a:	429a      	cmp	r2, r3
 800619c:	d106      	bne.n	80061ac <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2200      	movs	r2, #0
 80061a4:	2103      	movs	r1, #3
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7ff f8da 	bl	8005360 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7ff f9f5 	bl	80055a0 <LL_ADC_IsEnabled>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f040 813f 	bne.w	800643c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	6819      	ldr	r1, [r3, #0]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	461a      	mov	r2, r3
 80061cc:	f7ff f94e 	bl	800546c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	4a8e      	ldr	r2, [pc, #568]	; (8006410 <HAL_ADC_ConfigChannel+0x678>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	f040 8130 	bne.w	800643c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10b      	bne.n	8006204 <HAL_ADC_ConfigChannel+0x46c>
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	0e9b      	lsrs	r3, r3, #26
 80061f2:	3301      	adds	r3, #1
 80061f4:	f003 031f 	and.w	r3, r3, #31
 80061f8:	2b09      	cmp	r3, #9
 80061fa:	bf94      	ite	ls
 80061fc:	2301      	movls	r3, #1
 80061fe:	2300      	movhi	r3, #0
 8006200:	b2db      	uxtb	r3, r3
 8006202:	e019      	b.n	8006238 <HAL_ADC_ConfigChannel+0x4a0>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800620a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800620c:	fa93 f3a3 	rbit	r3, r3
 8006210:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006214:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800621c:	2320      	movs	r3, #32
 800621e:	e003      	b.n	8006228 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8006220:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006222:	fab3 f383 	clz	r3, r3
 8006226:	b2db      	uxtb	r3, r3
 8006228:	3301      	adds	r3, #1
 800622a:	f003 031f 	and.w	r3, r3, #31
 800622e:	2b09      	cmp	r3, #9
 8006230:	bf94      	ite	ls
 8006232:	2301      	movls	r3, #1
 8006234:	2300      	movhi	r3, #0
 8006236:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006238:	2b00      	cmp	r3, #0
 800623a:	d079      	beq.n	8006330 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006244:	2b00      	cmp	r3, #0
 8006246:	d107      	bne.n	8006258 <HAL_ADC_ConfigChannel+0x4c0>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	0e9b      	lsrs	r3, r3, #26
 800624e:	3301      	adds	r3, #1
 8006250:	069b      	lsls	r3, r3, #26
 8006252:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006256:	e015      	b.n	8006284 <HAL_ADC_ConfigChannel+0x4ec>
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800625e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006260:	fa93 f3a3 	rbit	r3, r3
 8006264:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006268:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800626a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8006270:	2320      	movs	r3, #32
 8006272:	e003      	b.n	800627c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8006274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006276:	fab3 f383 	clz	r3, r3
 800627a:	b2db      	uxtb	r3, r3
 800627c:	3301      	adds	r3, #1
 800627e:	069b      	lsls	r3, r3, #26
 8006280:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800628c:	2b00      	cmp	r3, #0
 800628e:	d109      	bne.n	80062a4 <HAL_ADC_ConfigChannel+0x50c>
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	0e9b      	lsrs	r3, r3, #26
 8006296:	3301      	adds	r3, #1
 8006298:	f003 031f 	and.w	r3, r3, #31
 800629c:	2101      	movs	r1, #1
 800629e:	fa01 f303 	lsl.w	r3, r1, r3
 80062a2:	e017      	b.n	80062d4 <HAL_ADC_ConfigChannel+0x53c>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ac:	fa93 f3a3 	rbit	r3, r3
 80062b0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80062b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062b4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80062b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80062bc:	2320      	movs	r3, #32
 80062be:	e003      	b.n	80062c8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80062c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062c2:	fab3 f383 	clz	r3, r3
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	3301      	adds	r3, #1
 80062ca:	f003 031f 	and.w	r3, r3, #31
 80062ce:	2101      	movs	r1, #1
 80062d0:	fa01 f303 	lsl.w	r3, r1, r3
 80062d4:	ea42 0103 	orr.w	r1, r2, r3
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10a      	bne.n	80062fa <HAL_ADC_ConfigChannel+0x562>
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	0e9b      	lsrs	r3, r3, #26
 80062ea:	3301      	adds	r3, #1
 80062ec:	f003 021f 	and.w	r2, r3, #31
 80062f0:	4613      	mov	r3, r2
 80062f2:	005b      	lsls	r3, r3, #1
 80062f4:	4413      	add	r3, r2
 80062f6:	051b      	lsls	r3, r3, #20
 80062f8:	e018      	b.n	800632c <HAL_ADC_ConfigChannel+0x594>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006302:	fa93 f3a3 	rbit	r3, r3
 8006306:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800630a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800630c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8006312:	2320      	movs	r3, #32
 8006314:	e003      	b.n	800631e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8006316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006318:	fab3 f383 	clz	r3, r3
 800631c:	b2db      	uxtb	r3, r3
 800631e:	3301      	adds	r3, #1
 8006320:	f003 021f 	and.w	r2, r3, #31
 8006324:	4613      	mov	r3, r2
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	4413      	add	r3, r2
 800632a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800632c:	430b      	orrs	r3, r1
 800632e:	e080      	b.n	8006432 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006338:	2b00      	cmp	r3, #0
 800633a:	d107      	bne.n	800634c <HAL_ADC_ConfigChannel+0x5b4>
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	0e9b      	lsrs	r3, r3, #26
 8006342:	3301      	adds	r3, #1
 8006344:	069b      	lsls	r3, r3, #26
 8006346:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800634a:	e015      	b.n	8006378 <HAL_ADC_ConfigChannel+0x5e0>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006354:	fa93 f3a3 	rbit	r3, r3
 8006358:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800635e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8006364:	2320      	movs	r3, #32
 8006366:	e003      	b.n	8006370 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8006368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636a:	fab3 f383 	clz	r3, r3
 800636e:	b2db      	uxtb	r3, r3
 8006370:	3301      	adds	r3, #1
 8006372:	069b      	lsls	r3, r3, #26
 8006374:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006380:	2b00      	cmp	r3, #0
 8006382:	d109      	bne.n	8006398 <HAL_ADC_ConfigChannel+0x600>
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	0e9b      	lsrs	r3, r3, #26
 800638a:	3301      	adds	r3, #1
 800638c:	f003 031f 	and.w	r3, r3, #31
 8006390:	2101      	movs	r1, #1
 8006392:	fa01 f303 	lsl.w	r3, r1, r3
 8006396:	e017      	b.n	80063c8 <HAL_ADC_ConfigChannel+0x630>
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	fa93 f3a3 	rbit	r3, r3
 80063a4:	61fb      	str	r3, [r7, #28]
  return result;
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d101      	bne.n	80063b4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80063b0:	2320      	movs	r3, #32
 80063b2:	e003      	b.n	80063bc <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	fab3 f383 	clz	r3, r3
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	3301      	adds	r3, #1
 80063be:	f003 031f 	and.w	r3, r3, #31
 80063c2:	2101      	movs	r1, #1
 80063c4:	fa01 f303 	lsl.w	r3, r1, r3
 80063c8:	ea42 0103 	orr.w	r1, r2, r3
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10d      	bne.n	80063f4 <HAL_ADC_ConfigChannel+0x65c>
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	0e9b      	lsrs	r3, r3, #26
 80063de:	3301      	adds	r3, #1
 80063e0:	f003 021f 	and.w	r2, r3, #31
 80063e4:	4613      	mov	r3, r2
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	4413      	add	r3, r2
 80063ea:	3b1e      	subs	r3, #30
 80063ec:	051b      	lsls	r3, r3, #20
 80063ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80063f2:	e01d      	b.n	8006430 <HAL_ADC_ConfigChannel+0x698>
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	fa93 f3a3 	rbit	r3, r3
 8006400:	613b      	str	r3, [r7, #16]
  return result;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d103      	bne.n	8006414 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800640c:	2320      	movs	r3, #32
 800640e:	e005      	b.n	800641c <HAL_ADC_ConfigChannel+0x684>
 8006410:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	fab3 f383 	clz	r3, r3
 800641a:	b2db      	uxtb	r3, r3
 800641c:	3301      	adds	r3, #1
 800641e:	f003 021f 	and.w	r2, r3, #31
 8006422:	4613      	mov	r3, r2
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	4413      	add	r3, r2
 8006428:	3b1e      	subs	r3, #30
 800642a:	051b      	lsls	r3, r3, #20
 800642c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006430:	430b      	orrs	r3, r1
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	6892      	ldr	r2, [r2, #8]
 8006436:	4619      	mov	r1, r3
 8006438:	f7fe ffec 	bl	8005414 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	4b3d      	ldr	r3, [pc, #244]	; (8006538 <HAL_ADC_ConfigChannel+0x7a0>)
 8006442:	4013      	ands	r3, r2
 8006444:	2b00      	cmp	r3, #0
 8006446:	d06c      	beq.n	8006522 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006448:	483c      	ldr	r0, [pc, #240]	; (800653c <HAL_ADC_ConfigChannel+0x7a4>)
 800644a:	f7fe ff41 	bl	80052d0 <LL_ADC_GetCommonPathInternalCh>
 800644e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a3a      	ldr	r2, [pc, #232]	; (8006540 <HAL_ADC_ConfigChannel+0x7a8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d127      	bne.n	80064ac <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800645c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006460:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d121      	bne.n	80064ac <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a35      	ldr	r2, [pc, #212]	; (8006544 <HAL_ADC_ConfigChannel+0x7ac>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d157      	bne.n	8006522 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006472:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006476:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800647a:	4619      	mov	r1, r3
 800647c:	482f      	ldr	r0, [pc, #188]	; (800653c <HAL_ADC_ConfigChannel+0x7a4>)
 800647e:	f7fe ff14 	bl	80052aa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006482:	4b31      	ldr	r3, [pc, #196]	; (8006548 <HAL_ADC_ConfigChannel+0x7b0>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	099b      	lsrs	r3, r3, #6
 8006488:	4a30      	ldr	r2, [pc, #192]	; (800654c <HAL_ADC_ConfigChannel+0x7b4>)
 800648a:	fba2 2303 	umull	r2, r3, r2, r3
 800648e:	099b      	lsrs	r3, r3, #6
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	4613      	mov	r3, r2
 8006494:	005b      	lsls	r3, r3, #1
 8006496:	4413      	add	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800649c:	e002      	b.n	80064a4 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3b01      	subs	r3, #1
 80064a2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1f9      	bne.n	800649e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80064aa:	e03a      	b.n	8006522 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a27      	ldr	r2, [pc, #156]	; (8006550 <HAL_ADC_ConfigChannel+0x7b8>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d113      	bne.n	80064de <HAL_ADC_ConfigChannel+0x746>
 80064b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10d      	bne.n	80064de <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a1f      	ldr	r2, [pc, #124]	; (8006544 <HAL_ADC_ConfigChannel+0x7ac>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d12a      	bne.n	8006522 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80064cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064d4:	4619      	mov	r1, r3
 80064d6:	4819      	ldr	r0, [pc, #100]	; (800653c <HAL_ADC_ConfigChannel+0x7a4>)
 80064d8:	f7fe fee7 	bl	80052aa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80064dc:	e021      	b.n	8006522 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a1c      	ldr	r2, [pc, #112]	; (8006554 <HAL_ADC_ConfigChannel+0x7bc>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d11c      	bne.n	8006522 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80064e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d116      	bne.n	8006522 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a12      	ldr	r2, [pc, #72]	; (8006544 <HAL_ADC_ConfigChannel+0x7ac>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d111      	bne.n	8006522 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80064fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006502:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006506:	4619      	mov	r1, r3
 8006508:	480c      	ldr	r0, [pc, #48]	; (800653c <HAL_ADC_ConfigChannel+0x7a4>)
 800650a:	f7fe fece 	bl	80052aa <LL_ADC_SetCommonPathInternalCh>
 800650e:	e008      	b.n	8006522 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006514:	f043 0220 	orr.w	r2, r3, #32
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800652a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800652e:	4618      	mov	r0, r3
 8006530:	37d8      	adds	r7, #216	; 0xd8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	80080000 	.word	0x80080000
 800653c:	50040300 	.word	0x50040300
 8006540:	c7520000 	.word	0xc7520000
 8006544:	50040000 	.word	0x50040000
 8006548:	20000000 	.word	0x20000000
 800654c:	053e2d63 	.word	0x053e2d63
 8006550:	cb840000 	.word	0xcb840000
 8006554:	80000001 	.word	0x80000001

08006558 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b088      	sub	sp, #32
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8006562:	2300      	movs	r3, #0
 8006564:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4618      	mov	r0, r3
 8006570:	f7ff f864 	bl	800563c <LL_ADC_REG_IsConversionOngoing>
 8006574:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff f885 	bl	800568a <LL_ADC_INJ_IsConversionOngoing>
 8006580:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d103      	bne.n	8006590 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 8098 	beq.w	80066c0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d02a      	beq.n	80065f4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	7e5b      	ldrb	r3, [r3, #25]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d126      	bne.n	80065f4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	7e1b      	ldrb	r3, [r3, #24]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d122      	bne.n	80065f4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80065ae:	2301      	movs	r3, #1
 80065b0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80065b2:	e014      	b.n	80065de <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	4a45      	ldr	r2, [pc, #276]	; (80066cc <ADC_ConversionStop+0x174>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d90d      	bls.n	80065d8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c0:	f043 0210 	orr.w	r2, r3, #16
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065cc:	f043 0201 	orr.w	r2, r3, #1
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e074      	b.n	80066c2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	3301      	adds	r3, #1
 80065dc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e8:	2b40      	cmp	r3, #64	; 0x40
 80065ea:	d1e3      	bne.n	80065b4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2240      	movs	r2, #64	; 0x40
 80065f2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d014      	beq.n	8006624 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4618      	mov	r0, r3
 8006600:	f7ff f81c 	bl	800563c <LL_ADC_REG_IsConversionOngoing>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00c      	beq.n	8006624 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f7fe ffd9 	bl	80055c6 <LL_ADC_IsDisableOngoing>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d104      	bne.n	8006624 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4618      	mov	r0, r3
 8006620:	f7fe fff8 	bl	8005614 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d014      	beq.n	8006654 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4618      	mov	r0, r3
 8006630:	f7ff f82b 	bl	800568a <LL_ADC_INJ_IsConversionOngoing>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00c      	beq.n	8006654 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4618      	mov	r0, r3
 8006640:	f7fe ffc1 	bl	80055c6 <LL_ADC_IsDisableOngoing>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d104      	bne.n	8006654 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4618      	mov	r0, r3
 8006650:	f7ff f807 	bl	8005662 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	2b02      	cmp	r3, #2
 8006658:	d005      	beq.n	8006666 <ADC_ConversionStop+0x10e>
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	2b03      	cmp	r3, #3
 800665e:	d105      	bne.n	800666c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006660:	230c      	movs	r3, #12
 8006662:	617b      	str	r3, [r7, #20]
        break;
 8006664:	e005      	b.n	8006672 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006666:	2308      	movs	r3, #8
 8006668:	617b      	str	r3, [r7, #20]
        break;
 800666a:	e002      	b.n	8006672 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800666c:	2304      	movs	r3, #4
 800666e:	617b      	str	r3, [r7, #20]
        break;
 8006670:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8006672:	f7fe fdd7 	bl	8005224 <HAL_GetTick>
 8006676:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006678:	e01b      	b.n	80066b2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800667a:	f7fe fdd3 	bl	8005224 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	2b05      	cmp	r3, #5
 8006686:	d914      	bls.n	80066b2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689a      	ldr	r2, [r3, #8]
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	4013      	ands	r3, r2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00d      	beq.n	80066b2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669a:	f043 0210 	orr.w	r2, r3, #16
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a6:	f043 0201 	orr.w	r2, r3, #1
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e007      	b.n	80066c2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	4013      	ands	r3, r2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1dc      	bne.n	800667a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3720      	adds	r7, #32
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	a33fffff 	.word	0xa33fffff

080066d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fe ff5f 	bl	80055a0 <LL_ADC_IsEnabled>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d14d      	bne.n	8006784 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689a      	ldr	r2, [r3, #8]
 80066ee:	4b28      	ldr	r3, [pc, #160]	; (8006790 <ADC_Enable+0xc0>)
 80066f0:	4013      	ands	r3, r2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00d      	beq.n	8006712 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fa:	f043 0210 	orr.w	r2, r3, #16
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006706:	f043 0201 	orr.w	r2, r3, #1
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e039      	b.n	8006786 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4618      	mov	r0, r3
 8006718:	f7fe ff1a 	bl	8005550 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800671c:	f7fe fd82 	bl	8005224 <HAL_GetTick>
 8006720:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006722:	e028      	b.n	8006776 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4618      	mov	r0, r3
 800672a:	f7fe ff39 	bl	80055a0 <LL_ADC_IsEnabled>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d104      	bne.n	800673e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4618      	mov	r0, r3
 800673a:	f7fe ff09 	bl	8005550 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800673e:	f7fe fd71 	bl	8005224 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	2b02      	cmp	r3, #2
 800674a:	d914      	bls.n	8006776 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b01      	cmp	r3, #1
 8006758:	d00d      	beq.n	8006776 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675e:	f043 0210 	orr.w	r2, r3, #16
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800676a:	f043 0201 	orr.w	r2, r3, #1
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e007      	b.n	8006786 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	2b01      	cmp	r3, #1
 8006782:	d1cf      	bne.n	8006724 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	8000003f 	.word	0x8000003f

08006794 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7fe ff10 	bl	80055c6 <LL_ADC_IsDisableOngoing>
 80067a6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fe fef7 	bl	80055a0 <LL_ADC_IsEnabled>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d047      	beq.n	8006848 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d144      	bne.n	8006848 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f003 030d 	and.w	r3, r3, #13
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d10c      	bne.n	80067e6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fe fed1 	bl	8005578 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2203      	movs	r2, #3
 80067dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80067de:	f7fe fd21 	bl	8005224 <HAL_GetTick>
 80067e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80067e4:	e029      	b.n	800683a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ea:	f043 0210 	orr.w	r2, r3, #16
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f6:	f043 0201 	orr.w	r2, r3, #1
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e023      	b.n	800684a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006802:	f7fe fd0f 	bl	8005224 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	2b02      	cmp	r3, #2
 800680e:	d914      	bls.n	800683a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00d      	beq.n	800683a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006822:	f043 0210 	orr.w	r2, r3, #16
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800682e:	f043 0201 	orr.w	r2, r3, #1
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e007      	b.n	800684a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1dc      	bne.n	8006802 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b084      	sub	sp, #16
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006864:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006868:	2b00      	cmp	r3, #0
 800686a:	d14b      	bne.n	8006904 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006870:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0308 	and.w	r3, r3, #8
 8006882:	2b00      	cmp	r3, #0
 8006884:	d021      	beq.n	80068ca <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4618      	mov	r0, r3
 800688c:	f7fe fd83 	bl	8005396 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d032      	beq.n	80068fc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d12b      	bne.n	80068fc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d11f      	bne.n	80068fc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c0:	f043 0201 	orr.w	r2, r3, #1
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	655a      	str	r2, [r3, #84]	; 0x54
 80068c8:	e018      	b.n	80068fc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f003 0302 	and.w	r3, r3, #2
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d111      	bne.n	80068fc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d105      	bne.n	80068fc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f4:	f043 0201 	orr.w	r2, r3, #1
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f7fd f933 	bl	8003b68 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006902:	e00e      	b.n	8006922 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006908:	f003 0310 	and.w	r3, r3, #16
 800690c:	2b00      	cmp	r3, #0
 800690e:	d003      	beq.n	8006918 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f7ff fa37 	bl	8005d84 <HAL_ADC_ErrorCallback>
}
 8006916:	e004      	b.n	8006922 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800691c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	4798      	blx	r3
}
 8006922:	bf00      	nop
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006936:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f7ff fa19 	bl	8005d70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800693e:	bf00      	nop
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b084      	sub	sp, #16
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006952:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006958:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006964:	f043 0204 	orr.w	r2, r3, #4
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f7ff fa09 	bl	8005d84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006972:	bf00      	nop
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
	...

0800697c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f003 0307 	and.w	r3, r3, #7
 800698a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800698c:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <__NVIC_SetPriorityGrouping+0x44>)
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006998:	4013      	ands	r3, r2
 800699a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80069a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80069a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80069ae:	4a04      	ldr	r2, [pc, #16]	; (80069c0 <__NVIC_SetPriorityGrouping+0x44>)
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	60d3      	str	r3, [r2, #12]
}
 80069b4:	bf00      	nop
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	e000ed00 	.word	0xe000ed00

080069c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80069c4:	b480      	push	{r7}
 80069c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069c8:	4b04      	ldr	r3, [pc, #16]	; (80069dc <__NVIC_GetPriorityGrouping+0x18>)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	0a1b      	lsrs	r3, r3, #8
 80069ce:	f003 0307 	and.w	r3, r3, #7
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	e000ed00 	.word	0xe000ed00

080069e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	4603      	mov	r3, r0
 80069e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	db0b      	blt.n	8006a0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069f2:	79fb      	ldrb	r3, [r7, #7]
 80069f4:	f003 021f 	and.w	r2, r3, #31
 80069f8:	4907      	ldr	r1, [pc, #28]	; (8006a18 <__NVIC_EnableIRQ+0x38>)
 80069fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069fe:	095b      	lsrs	r3, r3, #5
 8006a00:	2001      	movs	r0, #1
 8006a02:	fa00 f202 	lsl.w	r2, r0, r2
 8006a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006a0a:	bf00      	nop
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	e000e100 	.word	0xe000e100

08006a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	4603      	mov	r3, r0
 8006a24:	6039      	str	r1, [r7, #0]
 8006a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	db0a      	blt.n	8006a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	490c      	ldr	r1, [pc, #48]	; (8006a68 <__NVIC_SetPriority+0x4c>)
 8006a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a3a:	0112      	lsls	r2, r2, #4
 8006a3c:	b2d2      	uxtb	r2, r2
 8006a3e:	440b      	add	r3, r1
 8006a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a44:	e00a      	b.n	8006a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	4908      	ldr	r1, [pc, #32]	; (8006a6c <__NVIC_SetPriority+0x50>)
 8006a4c:	79fb      	ldrb	r3, [r7, #7]
 8006a4e:	f003 030f 	and.w	r3, r3, #15
 8006a52:	3b04      	subs	r3, #4
 8006a54:	0112      	lsls	r2, r2, #4
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	440b      	add	r3, r1
 8006a5a:	761a      	strb	r2, [r3, #24]
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	e000e100 	.word	0xe000e100
 8006a6c:	e000ed00 	.word	0xe000ed00

08006a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b089      	sub	sp, #36	; 0x24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f003 0307 	and.w	r3, r3, #7
 8006a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	f1c3 0307 	rsb	r3, r3, #7
 8006a8a:	2b04      	cmp	r3, #4
 8006a8c:	bf28      	it	cs
 8006a8e:	2304      	movcs	r3, #4
 8006a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	3304      	adds	r3, #4
 8006a96:	2b06      	cmp	r3, #6
 8006a98:	d902      	bls.n	8006aa0 <NVIC_EncodePriority+0x30>
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	3b03      	subs	r3, #3
 8006a9e:	e000      	b.n	8006aa2 <NVIC_EncodePriority+0x32>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8006aae:	43da      	mvns	r2, r3
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	401a      	ands	r2, r3
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac2:	43d9      	mvns	r1, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ac8:	4313      	orrs	r3, r2
         );
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3724      	adds	r7, #36	; 0x24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
	...

08006ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ae8:	d301      	bcc.n	8006aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006aea:	2301      	movs	r3, #1
 8006aec:	e00f      	b.n	8006b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006aee:	4a0a      	ldr	r2, [pc, #40]	; (8006b18 <SysTick_Config+0x40>)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	3b01      	subs	r3, #1
 8006af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006af6:	210f      	movs	r1, #15
 8006af8:	f04f 30ff 	mov.w	r0, #4294967295
 8006afc:	f7ff ff8e 	bl	8006a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b00:	4b05      	ldr	r3, [pc, #20]	; (8006b18 <SysTick_Config+0x40>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b06:	4b04      	ldr	r3, [pc, #16]	; (8006b18 <SysTick_Config+0x40>)
 8006b08:	2207      	movs	r2, #7
 8006b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	e000e010 	.word	0xe000e010

08006b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7ff ff29 	bl	800697c <__NVIC_SetPriorityGrouping>
}
 8006b2a:	bf00      	nop
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b086      	sub	sp, #24
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	4603      	mov	r3, r0
 8006b3a:	60b9      	str	r1, [r7, #8]
 8006b3c:	607a      	str	r2, [r7, #4]
 8006b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006b40:	2300      	movs	r3, #0
 8006b42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006b44:	f7ff ff3e 	bl	80069c4 <__NVIC_GetPriorityGrouping>
 8006b48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	68b9      	ldr	r1, [r7, #8]
 8006b4e:	6978      	ldr	r0, [r7, #20]
 8006b50:	f7ff ff8e 	bl	8006a70 <NVIC_EncodePriority>
 8006b54:	4602      	mov	r2, r0
 8006b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b5a:	4611      	mov	r1, r2
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7ff ff5d 	bl	8006a1c <__NVIC_SetPriority>
}
 8006b62:	bf00      	nop
 8006b64:	3718      	adds	r7, #24
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b082      	sub	sp, #8
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	4603      	mov	r3, r0
 8006b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7ff ff31 	bl	80069e0 <__NVIC_EnableIRQ>
}
 8006b7e:	bf00      	nop
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7ff ffa2 	bl	8006ad8 <SysTick_Config>
 8006b94:	4603      	mov	r3, r0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
	...

08006ba0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e098      	b.n	8006ce4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	4b4d      	ldr	r3, [pc, #308]	; (8006cf0 <HAL_DMA_Init+0x150>)
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d80f      	bhi.n	8006bde <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	4b4b      	ldr	r3, [pc, #300]	; (8006cf4 <HAL_DMA_Init+0x154>)
 8006bc6:	4413      	add	r3, r2
 8006bc8:	4a4b      	ldr	r2, [pc, #300]	; (8006cf8 <HAL_DMA_Init+0x158>)
 8006bca:	fba2 2303 	umull	r2, r3, r2, r3
 8006bce:	091b      	lsrs	r3, r3, #4
 8006bd0:	009a      	lsls	r2, r3, #2
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a48      	ldr	r2, [pc, #288]	; (8006cfc <HAL_DMA_Init+0x15c>)
 8006bda:	641a      	str	r2, [r3, #64]	; 0x40
 8006bdc:	e00e      	b.n	8006bfc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	461a      	mov	r2, r3
 8006be4:	4b46      	ldr	r3, [pc, #280]	; (8006d00 <HAL_DMA_Init+0x160>)
 8006be6:	4413      	add	r3, r2
 8006be8:	4a43      	ldr	r2, [pc, #268]	; (8006cf8 <HAL_DMA_Init+0x158>)
 8006bea:	fba2 2303 	umull	r2, r3, r2, r3
 8006bee:	091b      	lsrs	r3, r3, #4
 8006bf0:	009a      	lsls	r2, r3, #2
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a42      	ldr	r2, [pc, #264]	; (8006d04 <HAL_DMA_Init+0x164>)
 8006bfa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c56:	d039      	beq.n	8006ccc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5c:	4a27      	ldr	r2, [pc, #156]	; (8006cfc <HAL_DMA_Init+0x15c>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d11a      	bne.n	8006c98 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006c62:	4b29      	ldr	r3, [pc, #164]	; (8006d08 <HAL_DMA_Init+0x168>)
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c6a:	f003 031c 	and.w	r3, r3, #28
 8006c6e:	210f      	movs	r1, #15
 8006c70:	fa01 f303 	lsl.w	r3, r1, r3
 8006c74:	43db      	mvns	r3, r3
 8006c76:	4924      	ldr	r1, [pc, #144]	; (8006d08 <HAL_DMA_Init+0x168>)
 8006c78:	4013      	ands	r3, r2
 8006c7a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006c7c:	4b22      	ldr	r3, [pc, #136]	; (8006d08 <HAL_DMA_Init+0x168>)
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6859      	ldr	r1, [r3, #4]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c88:	f003 031c 	and.w	r3, r3, #28
 8006c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c90:	491d      	ldr	r1, [pc, #116]	; (8006d08 <HAL_DMA_Init+0x168>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	600b      	str	r3, [r1, #0]
 8006c96:	e019      	b.n	8006ccc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006c98:	4b1c      	ldr	r3, [pc, #112]	; (8006d0c <HAL_DMA_Init+0x16c>)
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca0:	f003 031c 	and.w	r3, r3, #28
 8006ca4:	210f      	movs	r1, #15
 8006ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8006caa:	43db      	mvns	r3, r3
 8006cac:	4917      	ldr	r1, [pc, #92]	; (8006d0c <HAL_DMA_Init+0x16c>)
 8006cae:	4013      	ands	r3, r2
 8006cb0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006cb2:	4b16      	ldr	r3, [pc, #88]	; (8006d0c <HAL_DMA_Init+0x16c>)
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6859      	ldr	r1, [r3, #4]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cbe:	f003 031c 	and.w	r3, r3, #28
 8006cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc6:	4911      	ldr	r1, [pc, #68]	; (8006d0c <HAL_DMA_Init+0x16c>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	40020407 	.word	0x40020407
 8006cf4:	bffdfff8 	.word	0xbffdfff8
 8006cf8:	cccccccd 	.word	0xcccccccd
 8006cfc:	40020000 	.word	0x40020000
 8006d00:	bffdfbf8 	.word	0xbffdfbf8
 8006d04:	40020400 	.word	0x40020400
 8006d08:	400200a8 	.word	0x400200a8
 8006d0c:	400204a8 	.word	0x400204a8

08006d10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
 8006d1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d101      	bne.n	8006d30 <HAL_DMA_Start_IT+0x20>
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	e04b      	b.n	8006dc8 <HAL_DMA_Start_IT+0xb8>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d13a      	bne.n	8006dba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f022 0201 	bic.w	r2, r2, #1
 8006d60:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	68b9      	ldr	r1, [r7, #8]
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f000 f91e 	bl	8006faa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d008      	beq.n	8006d88 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f042 020e 	orr.w	r2, r2, #14
 8006d84:	601a      	str	r2, [r3, #0]
 8006d86:	e00f      	b.n	8006da8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f022 0204 	bic.w	r2, r2, #4
 8006d96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f042 020a 	orr.w	r2, r2, #10
 8006da6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f042 0201 	orr.w	r2, r2, #1
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	e005      	b.n	8006dc6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3718      	adds	r7, #24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d008      	beq.n	8006dfa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2204      	movs	r2, #4
 8006dec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e022      	b.n	8006e40 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f022 020e 	bic.w	r2, r2, #14
 8006e08:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 0201 	bic.w	r2, r2, #1
 8006e18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1e:	f003 021c 	and.w	r2, r3, #28
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e26:	2101      	movs	r1, #1
 8006e28:	fa01 f202 	lsl.w	r2, r1, r2
 8006e2c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006e3e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e68:	f003 031c 	and.w	r3, r3, #28
 8006e6c:	2204      	movs	r2, #4
 8006e6e:	409a      	lsls	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4013      	ands	r3, r2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d026      	beq.n	8006ec6 <HAL_DMA_IRQHandler+0x7a>
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	f003 0304 	and.w	r3, r3, #4
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d021      	beq.n	8006ec6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0320 	and.w	r3, r3, #32
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d107      	bne.n	8006ea0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0204 	bic.w	r2, r2, #4
 8006e9e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea4:	f003 021c 	and.w	r2, r3, #28
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eac:	2104      	movs	r1, #4
 8006eae:	fa01 f202 	lsl.w	r2, r1, r2
 8006eb2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d071      	beq.n	8006fa0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006ec4:	e06c      	b.n	8006fa0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eca:	f003 031c 	and.w	r3, r3, #28
 8006ece:	2202      	movs	r2, #2
 8006ed0:	409a      	lsls	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d02e      	beq.n	8006f38 <HAL_DMA_IRQHandler+0xec>
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d029      	beq.n	8006f38 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0320 	and.w	r3, r3, #32
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10b      	bne.n	8006f0a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f022 020a 	bic.w	r2, r2, #10
 8006f00:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f0e:	f003 021c 	and.w	r2, r3, #28
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f16:	2102      	movs	r1, #2
 8006f18:	fa01 f202 	lsl.w	r2, r1, r2
 8006f1c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d038      	beq.n	8006fa0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006f36:	e033      	b.n	8006fa0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f3c:	f003 031c 	and.w	r3, r3, #28
 8006f40:	2208      	movs	r2, #8
 8006f42:	409a      	lsls	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4013      	ands	r3, r2
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d02a      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0x156>
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f003 0308 	and.w	r3, r3, #8
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d025      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 020e 	bic.w	r2, r2, #14
 8006f64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6a:	f003 021c 	and.w	r2, r3, #28
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	2101      	movs	r1, #1
 8006f74:	fa01 f202 	lsl.w	r2, r1, r2
 8006f78:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d004      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006fa0:	bf00      	nop
 8006fa2:	bf00      	nop
}
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b085      	sub	sp, #20
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	60f8      	str	r0, [r7, #12]
 8006fb2:	60b9      	str	r1, [r7, #8]
 8006fb4:	607a      	str	r2, [r7, #4]
 8006fb6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fbc:	f003 021c 	and.w	r2, r3, #28
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8006fca:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	2b10      	cmp	r3, #16
 8006fda:	d108      	bne.n	8006fee <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006fec:	e007      	b.n	8006ffe <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	60da      	str	r2, [r3, #12]
}
 8006ffe:	bf00      	nop
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
	...

0800700c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800700c:	b480      	push	{r7}
 800700e:	b087      	sub	sp, #28
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007016:	2300      	movs	r3, #0
 8007018:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800701a:	e148      	b.n	80072ae <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	2101      	movs	r1, #1
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	fa01 f303 	lsl.w	r3, r1, r3
 8007028:	4013      	ands	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2b00      	cmp	r3, #0
 8007030:	f000 813a 	beq.w	80072a8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d00b      	beq.n	8007054 <HAL_GPIO_Init+0x48>
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	2b02      	cmp	r3, #2
 8007042:	d007      	beq.n	8007054 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007048:	2b11      	cmp	r3, #17
 800704a:	d003      	beq.n	8007054 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	2b12      	cmp	r3, #18
 8007052:	d130      	bne.n	80070b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	005b      	lsls	r3, r3, #1
 800705e:	2203      	movs	r2, #3
 8007060:	fa02 f303 	lsl.w	r3, r2, r3
 8007064:	43db      	mvns	r3, r3
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	4013      	ands	r3, r2
 800706a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	68da      	ldr	r2, [r3, #12]
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	005b      	lsls	r3, r3, #1
 8007074:	fa02 f303 	lsl.w	r3, r2, r3
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	4313      	orrs	r3, r2
 800707c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800708a:	2201      	movs	r2, #1
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	fa02 f303 	lsl.w	r3, r2, r3
 8007092:	43db      	mvns	r3, r3
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	4013      	ands	r3, r2
 8007098:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	091b      	lsrs	r3, r3, #4
 80070a0:	f003 0201 	and.w	r2, r3, #1
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	fa02 f303 	lsl.w	r3, r2, r3
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	2203      	movs	r2, #3
 80070c2:	fa02 f303 	lsl.w	r3, r2, r3
 80070c6:	43db      	mvns	r3, r3
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	4013      	ands	r3, r2
 80070cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	689a      	ldr	r2, [r3, #8]
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	fa02 f303 	lsl.w	r3, r2, r3
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	4313      	orrs	r3, r2
 80070de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d003      	beq.n	80070f6 <HAL_GPIO_Init+0xea>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	2b12      	cmp	r3, #18
 80070f4:	d123      	bne.n	800713e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	08da      	lsrs	r2, r3, #3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	3208      	adds	r2, #8
 80070fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007102:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	f003 0307 	and.w	r3, r3, #7
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	220f      	movs	r2, #15
 800710e:	fa02 f303 	lsl.w	r3, r2, r3
 8007112:	43db      	mvns	r3, r3
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	4013      	ands	r3, r2
 8007118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	691a      	ldr	r2, [r3, #16]
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f003 0307 	and.w	r3, r3, #7
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	fa02 f303 	lsl.w	r3, r2, r3
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	4313      	orrs	r3, r2
 800712e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	08da      	lsrs	r2, r3, #3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3208      	adds	r2, #8
 8007138:	6939      	ldr	r1, [r7, #16]
 800713a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	005b      	lsls	r3, r3, #1
 8007148:	2203      	movs	r2, #3
 800714a:	fa02 f303 	lsl.w	r3, r2, r3
 800714e:	43db      	mvns	r3, r3
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	4013      	ands	r3, r2
 8007154:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f003 0203 	and.w	r2, r3, #3
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	005b      	lsls	r3, r3, #1
 8007162:	fa02 f303 	lsl.w	r3, r2, r3
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	4313      	orrs	r3, r2
 800716a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800717a:	2b00      	cmp	r3, #0
 800717c:	f000 8094 	beq.w	80072a8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007180:	4b52      	ldr	r3, [pc, #328]	; (80072cc <HAL_GPIO_Init+0x2c0>)
 8007182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007184:	4a51      	ldr	r2, [pc, #324]	; (80072cc <HAL_GPIO_Init+0x2c0>)
 8007186:	f043 0301 	orr.w	r3, r3, #1
 800718a:	6613      	str	r3, [r2, #96]	; 0x60
 800718c:	4b4f      	ldr	r3, [pc, #316]	; (80072cc <HAL_GPIO_Init+0x2c0>)
 800718e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	60bb      	str	r3, [r7, #8]
 8007196:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007198:	4a4d      	ldr	r2, [pc, #308]	; (80072d0 <HAL_GPIO_Init+0x2c4>)
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	089b      	lsrs	r3, r3, #2
 800719e:	3302      	adds	r3, #2
 80071a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f003 0303 	and.w	r3, r3, #3
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	220f      	movs	r2, #15
 80071b0:	fa02 f303 	lsl.w	r3, r2, r3
 80071b4:	43db      	mvns	r3, r3
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4013      	ands	r3, r2
 80071ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80071c2:	d00d      	beq.n	80071e0 <HAL_GPIO_Init+0x1d4>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a43      	ldr	r2, [pc, #268]	; (80072d4 <HAL_GPIO_Init+0x2c8>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d007      	beq.n	80071dc <HAL_GPIO_Init+0x1d0>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a42      	ldr	r2, [pc, #264]	; (80072d8 <HAL_GPIO_Init+0x2cc>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d101      	bne.n	80071d8 <HAL_GPIO_Init+0x1cc>
 80071d4:	2302      	movs	r3, #2
 80071d6:	e004      	b.n	80071e2 <HAL_GPIO_Init+0x1d6>
 80071d8:	2307      	movs	r3, #7
 80071da:	e002      	b.n	80071e2 <HAL_GPIO_Init+0x1d6>
 80071dc:	2301      	movs	r3, #1
 80071de:	e000      	b.n	80071e2 <HAL_GPIO_Init+0x1d6>
 80071e0:	2300      	movs	r3, #0
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	f002 0203 	and.w	r2, r2, #3
 80071e8:	0092      	lsls	r2, r2, #2
 80071ea:	4093      	lsls	r3, r2
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80071f2:	4937      	ldr	r1, [pc, #220]	; (80072d0 <HAL_GPIO_Init+0x2c4>)
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	089b      	lsrs	r3, r3, #2
 80071f8:	3302      	adds	r3, #2
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007200:	4b36      	ldr	r3, [pc, #216]	; (80072dc <HAL_GPIO_Init+0x2d0>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	43db      	mvns	r3, r3
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	4013      	ands	r3, r2
 800720e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	4313      	orrs	r3, r2
 8007222:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007224:	4a2d      	ldr	r2, [pc, #180]	; (80072dc <HAL_GPIO_Init+0x2d0>)
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800722a:	4b2c      	ldr	r3, [pc, #176]	; (80072dc <HAL_GPIO_Init+0x2d0>)
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	43db      	mvns	r3, r3
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	4013      	ands	r3, r2
 8007238:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4313      	orrs	r3, r2
 800724c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800724e:	4a23      	ldr	r2, [pc, #140]	; (80072dc <HAL_GPIO_Init+0x2d0>)
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007254:	4b21      	ldr	r3, [pc, #132]	; (80072dc <HAL_GPIO_Init+0x2d0>)
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	43db      	mvns	r3, r3
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	4013      	ands	r3, r2
 8007262:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d003      	beq.n	8007278 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4313      	orrs	r3, r2
 8007276:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007278:	4a18      	ldr	r2, [pc, #96]	; (80072dc <HAL_GPIO_Init+0x2d0>)
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800727e:	4b17      	ldr	r3, [pc, #92]	; (80072dc <HAL_GPIO_Init+0x2d0>)
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	43db      	mvns	r3, r3
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	4013      	ands	r3, r2
 800728c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d003      	beq.n	80072a2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4313      	orrs	r3, r2
 80072a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80072a2:	4a0e      	ldr	r2, [pc, #56]	; (80072dc <HAL_GPIO_Init+0x2d0>)
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	3301      	adds	r3, #1
 80072ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	fa22 f303 	lsr.w	r3, r2, r3
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f47f aeaf 	bne.w	800701c <HAL_GPIO_Init+0x10>
  }
}
 80072be:	bf00      	nop
 80072c0:	bf00      	nop
 80072c2:	371c      	adds	r7, #28
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	40021000 	.word	0x40021000
 80072d0:	40010000 	.word	0x40010000
 80072d4:	48000400 	.word	0x48000400
 80072d8:	48000800 	.word	0x48000800
 80072dc:	40010400 	.word	0x40010400

080072e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	460b      	mov	r3, r1
 80072ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	691a      	ldr	r2, [r3, #16]
 80072f0:	887b      	ldrh	r3, [r7, #2]
 80072f2:	4013      	ands	r3, r2
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d002      	beq.n	80072fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80072f8:	2301      	movs	r3, #1
 80072fa:	73fb      	strb	r3, [r7, #15]
 80072fc:	e001      	b.n	8007302 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80072fe:	2300      	movs	r3, #0
 8007300:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007302:	7bfb      	ldrb	r3, [r7, #15]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	807b      	strh	r3, [r7, #2]
 800731c:	4613      	mov	r3, r2
 800731e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007320:	787b      	ldrb	r3, [r7, #1]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007326:	887a      	ldrh	r2, [r7, #2]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800732c:	e002      	b.n	8007334 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800732e:	887a      	ldrh	r2, [r7, #2]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e081      	b.n	8007456 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d106      	bne.n	800736c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7fc fcea 	bl	8003d40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2224      	movs	r2, #36	; 0x24
 8007370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f022 0201 	bic.w	r2, r2, #1
 8007382:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007390:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d107      	bne.n	80073ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	689a      	ldr	r2, [r3, #8]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073b6:	609a      	str	r2, [r3, #8]
 80073b8:	e006      	b.n	80073c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	689a      	ldr	r2, [r3, #8]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80073c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d104      	bne.n	80073da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	6812      	ldr	r2, [r2, #0]
 80073e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80073e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68da      	ldr	r2, [r3, #12]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	691a      	ldr	r2, [r3, #16]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	ea42 0103 	orr.w	r1, r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	021a      	lsls	r2, r3, #8
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	430a      	orrs	r2, r1
 8007416:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	69d9      	ldr	r1, [r3, #28]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a1a      	ldr	r2, [r3, #32]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	430a      	orrs	r2, r1
 8007426:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f042 0201 	orr.w	r2, r2, #1
 8007436:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2220      	movs	r2, #32
 8007442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
	...

08007460 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b088      	sub	sp, #32
 8007464:	af02      	add	r7, sp, #8
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	607a      	str	r2, [r7, #4]
 800746a:	461a      	mov	r2, r3
 800746c:	460b      	mov	r3, r1
 800746e:	817b      	strh	r3, [r7, #10]
 8007470:	4613      	mov	r3, r2
 8007472:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b20      	cmp	r3, #32
 800747e:	f040 80da 	bne.w	8007636 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007488:	2b01      	cmp	r3, #1
 800748a:	d101      	bne.n	8007490 <HAL_I2C_Master_Transmit+0x30>
 800748c:	2302      	movs	r3, #2
 800748e:	e0d3      	b.n	8007638 <HAL_I2C_Master_Transmit+0x1d8>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007498:	f7fd fec4 	bl	8005224 <HAL_GetTick>
 800749c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	9300      	str	r3, [sp, #0]
 80074a2:	2319      	movs	r3, #25
 80074a4:	2201      	movs	r2, #1
 80074a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f000 f8fc 	bl	80076a8 <I2C_WaitOnFlagUntilTimeout>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e0be      	b.n	8007638 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2221      	movs	r2, #33	; 0x21
 80074be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2210      	movs	r2, #16
 80074c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	893a      	ldrh	r2, [r7, #8]
 80074da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	2bff      	cmp	r3, #255	; 0xff
 80074ea:	d90e      	bls.n	800750a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	22ff      	movs	r2, #255	; 0xff
 80074f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	8979      	ldrh	r1, [r7, #10]
 80074fa:	4b51      	ldr	r3, [pc, #324]	; (8007640 <HAL_I2C_Master_Transmit+0x1e0>)
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 f9f2 	bl	80078ec <I2C_TransferConfig>
 8007508:	e06c      	b.n	80075e4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800750e:	b29a      	uxth	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007518:	b2da      	uxtb	r2, r3
 800751a:	8979      	ldrh	r1, [r7, #10]
 800751c:	4b48      	ldr	r3, [pc, #288]	; (8007640 <HAL_I2C_Master_Transmit+0x1e0>)
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f000 f9e1 	bl	80078ec <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800752a:	e05b      	b.n	80075e4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	6a39      	ldr	r1, [r7, #32]
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 f8f9 	bl	8007728 <I2C_WaitOnTXISFlagUntilTimeout>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d001      	beq.n	8007540 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e07b      	b.n	8007638 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007544:	781a      	ldrb	r2, [r3, #0]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007550:	1c5a      	adds	r2, r3, #1
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800755a:	b29b      	uxth	r3, r3
 800755c:	3b01      	subs	r3, #1
 800755e:	b29a      	uxth	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007568:	3b01      	subs	r3, #1
 800756a:	b29a      	uxth	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007574:	b29b      	uxth	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d034      	beq.n	80075e4 <HAL_I2C_Master_Transmit+0x184>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800757e:	2b00      	cmp	r3, #0
 8007580:	d130      	bne.n	80075e4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	6a3b      	ldr	r3, [r7, #32]
 8007588:	2200      	movs	r2, #0
 800758a:	2180      	movs	r1, #128	; 0x80
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f000 f88b 	bl	80076a8 <I2C_WaitOnFlagUntilTimeout>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e04d      	b.n	8007638 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	2bff      	cmp	r3, #255	; 0xff
 80075a4:	d90e      	bls.n	80075c4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	22ff      	movs	r2, #255	; 0xff
 80075aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	8979      	ldrh	r1, [r7, #10]
 80075b4:	2300      	movs	r3, #0
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f000 f995 	bl	80078ec <I2C_TransferConfig>
 80075c2:	e00f      	b.n	80075e4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	8979      	ldrh	r1, [r7, #10]
 80075d6:	2300      	movs	r3, #0
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f000 f984 	bl	80078ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d19e      	bne.n	800752c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	6a39      	ldr	r1, [r7, #32]
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f000 f8d8 	bl	80077a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d001      	beq.n	8007602 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e01a      	b.n	8007638 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2220      	movs	r2, #32
 8007608:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6859      	ldr	r1, [r3, #4]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	4b0b      	ldr	r3, [pc, #44]	; (8007644 <HAL_I2C_Master_Transmit+0x1e4>)
 8007616:	400b      	ands	r3, r1
 8007618:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2220      	movs	r2, #32
 800761e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	e000      	b.n	8007638 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007636:	2302      	movs	r3, #2
  }
}
 8007638:	4618      	mov	r0, r3
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	80002000 	.word	0x80002000
 8007644:	fe00e800 	.word	0xfe00e800

08007648 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8007654:	4618      	mov	r0, r3
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b02      	cmp	r3, #2
 8007674:	d103      	bne.n	800767e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2200      	movs	r2, #0
 800767c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	f003 0301 	and.w	r3, r3, #1
 8007688:	2b01      	cmp	r3, #1
 800768a:	d007      	beq.n	800769c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	699a      	ldr	r2, [r3, #24]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f042 0201 	orr.w	r2, r2, #1
 800769a:	619a      	str	r2, [r3, #24]
  }
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	603b      	str	r3, [r7, #0]
 80076b4:	4613      	mov	r3, r2
 80076b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80076b8:	e022      	b.n	8007700 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c0:	d01e      	beq.n	8007700 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076c2:	f7fd fdaf 	bl	8005224 <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d302      	bcc.n	80076d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d113      	bne.n	8007700 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076dc:	f043 0220 	orr.w	r2, r3, #32
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2220      	movs	r2, #32
 80076e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e00f      	b.n	8007720 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	699a      	ldr	r2, [r3, #24]
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	4013      	ands	r3, r2
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	429a      	cmp	r2, r3
 800770e:	bf0c      	ite	eq
 8007710:	2301      	moveq	r3, #1
 8007712:	2300      	movne	r3, #0
 8007714:	b2db      	uxtb	r3, r3
 8007716:	461a      	mov	r2, r3
 8007718:	79fb      	ldrb	r3, [r7, #7]
 800771a:	429a      	cmp	r2, r3
 800771c:	d0cd      	beq.n	80076ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007734:	e02c      	b.n	8007790 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	68b9      	ldr	r1, [r7, #8]
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f000 f870 	bl	8007820 <I2C_IsAcknowledgeFailed>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e02a      	b.n	80077a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007750:	d01e      	beq.n	8007790 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007752:	f7fd fd67 	bl	8005224 <HAL_GetTick>
 8007756:	4602      	mov	r2, r0
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	429a      	cmp	r2, r3
 8007760:	d302      	bcc.n	8007768 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d113      	bne.n	8007790 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800776c:	f043 0220 	orr.w	r2, r3, #32
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2220      	movs	r2, #32
 8007778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e007      	b.n	80077a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	f003 0302 	and.w	r3, r3, #2
 800779a:	2b02      	cmp	r3, #2
 800779c:	d1cb      	bne.n	8007736 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077b4:	e028      	b.n	8007808 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	68b9      	ldr	r1, [r7, #8]
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f000 f830 	bl	8007820 <I2C_IsAcknowledgeFailed>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d001      	beq.n	80077ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e026      	b.n	8007818 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077ca:	f7fd fd2b 	bl	8005224 <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d302      	bcc.n	80077e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d113      	bne.n	8007808 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077e4:	f043 0220 	orr.w	r2, r3, #32
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2220      	movs	r2, #32
 80077f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e007      	b.n	8007818 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	f003 0320 	and.w	r3, r3, #32
 8007812:	2b20      	cmp	r3, #32
 8007814:	d1cf      	bne.n	80077b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	f003 0310 	and.w	r3, r3, #16
 8007836:	2b10      	cmp	r3, #16
 8007838:	d151      	bne.n	80078de <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800783a:	e022      	b.n	8007882 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007842:	d01e      	beq.n	8007882 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007844:	f7fd fcee 	bl	8005224 <HAL_GetTick>
 8007848:	4602      	mov	r2, r0
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	429a      	cmp	r2, r3
 8007852:	d302      	bcc.n	800785a <I2C_IsAcknowledgeFailed+0x3a>
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d113      	bne.n	8007882 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800785e:	f043 0220 	orr.w	r2, r3, #32
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2220      	movs	r2, #32
 800786a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e02e      	b.n	80078e0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	f003 0320 	and.w	r3, r3, #32
 800788c:	2b20      	cmp	r3, #32
 800788e:	d1d5      	bne.n	800783c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2210      	movs	r2, #16
 8007896:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2220      	movs	r2, #32
 800789e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f7ff fedd 	bl	8007660 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	6859      	ldr	r1, [r3, #4]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	4b0d      	ldr	r3, [pc, #52]	; (80078e8 <I2C_IsAcknowledgeFailed+0xc8>)
 80078b2:	400b      	ands	r3, r1
 80078b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ba:	f043 0204 	orr.w	r2, r3, #4
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2220      	movs	r2, #32
 80078c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e000      	b.n	80078e0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	fe00e800 	.word	0xfe00e800

080078ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	607b      	str	r3, [r7, #4]
 80078f6:	460b      	mov	r3, r1
 80078f8:	817b      	strh	r3, [r7, #10]
 80078fa:	4613      	mov	r3, r2
 80078fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	0d5b      	lsrs	r3, r3, #21
 8007908:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800790c:	4b0d      	ldr	r3, [pc, #52]	; (8007944 <I2C_TransferConfig+0x58>)
 800790e:	430b      	orrs	r3, r1
 8007910:	43db      	mvns	r3, r3
 8007912:	ea02 0103 	and.w	r1, r2, r3
 8007916:	897b      	ldrh	r3, [r7, #10]
 8007918:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800791c:	7a7b      	ldrb	r3, [r7, #9]
 800791e:	041b      	lsls	r3, r3, #16
 8007920:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007924:	431a      	orrs	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	431a      	orrs	r2, r3
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	431a      	orrs	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007936:	bf00      	nop
 8007938:	3714      	adds	r7, #20
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	03ff63ff 	.word	0x03ff63ff

08007948 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b20      	cmp	r3, #32
 800795c:	d138      	bne.n	80079d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007964:	2b01      	cmp	r3, #1
 8007966:	d101      	bne.n	800796c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007968:	2302      	movs	r3, #2
 800796a:	e032      	b.n	80079d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2224      	movs	r2, #36	; 0x24
 8007978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f022 0201 	bic.w	r2, r2, #1
 800798a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800799a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6819      	ldr	r1, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	430a      	orrs	r2, r1
 80079aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f042 0201 	orr.w	r2, r2, #1
 80079ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2220      	movs	r2, #32
 80079c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	e000      	b.n	80079d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80079d0:	2302      	movs	r3, #2
  }
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80079de:	b480      	push	{r7}
 80079e0:	b085      	sub	sp, #20
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b20      	cmp	r3, #32
 80079f2:	d139      	bne.n	8007a68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d101      	bne.n	8007a02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80079fe:	2302      	movs	r3, #2
 8007a00:	e033      	b.n	8007a6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2224      	movs	r2, #36	; 0x24
 8007a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f022 0201 	bic.w	r2, r2, #1
 8007a20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007a30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	021b      	lsls	r3, r3, #8
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f042 0201 	orr.w	r2, r2, #1
 8007a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2220      	movs	r2, #32
 8007a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a64:	2300      	movs	r3, #0
 8007a66:	e000      	b.n	8007a6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007a68:	2302      	movs	r3, #2
  }
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
	...

08007a78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007a7c:	4b04      	ldr	r3, [pc, #16]	; (8007a90 <HAL_PWREx_GetVoltageRange+0x18>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	40007000 	.word	0x40007000

08007a94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aa2:	d130      	bne.n	8007b06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007aa4:	4b23      	ldr	r3, [pc, #140]	; (8007b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ab0:	d038      	beq.n	8007b24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ab2:	4b20      	ldr	r3, [pc, #128]	; (8007b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007aba:	4a1e      	ldr	r2, [pc, #120]	; (8007b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007abc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ac0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007ac2:	4b1d      	ldr	r3, [pc, #116]	; (8007b38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2232      	movs	r2, #50	; 0x32
 8007ac8:	fb02 f303 	mul.w	r3, r2, r3
 8007acc:	4a1b      	ldr	r2, [pc, #108]	; (8007b3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007ace:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad2:	0c9b      	lsrs	r3, r3, #18
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ad8:	e002      	b.n	8007ae0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3b01      	subs	r3, #1
 8007ade:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ae0:	4b14      	ldr	r3, [pc, #80]	; (8007b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ae2:	695b      	ldr	r3, [r3, #20]
 8007ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aec:	d102      	bne.n	8007af4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1f2      	bne.n	8007ada <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007af4:	4b0f      	ldr	r3, [pc, #60]	; (8007b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b00:	d110      	bne.n	8007b24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e00f      	b.n	8007b26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007b06:	4b0b      	ldr	r3, [pc, #44]	; (8007b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b12:	d007      	beq.n	8007b24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007b14:	4b07      	ldr	r3, [pc, #28]	; (8007b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007b1c:	4a05      	ldr	r2, [pc, #20]	; (8007b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3714      	adds	r7, #20
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	40007000 	.word	0x40007000
 8007b38:	20000000 	.word	0x20000000
 8007b3c:	431bde83 	.word	0x431bde83

08007b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b088      	sub	sp, #32
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d102      	bne.n	8007b54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	f000 bc10 	b.w	8008374 <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b54:	4b96      	ldr	r3, [pc, #600]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f003 030c 	and.w	r3, r3, #12
 8007b5c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b5e:	4b94      	ldr	r3, [pc, #592]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	f003 0303 	and.w	r3, r3, #3
 8007b66:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0310 	and.w	r3, r3, #16
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 80e4 	beq.w	8007d3e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d007      	beq.n	8007b8c <HAL_RCC_OscConfig+0x4c>
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	2b0c      	cmp	r3, #12
 8007b80:	f040 808b 	bne.w	8007c9a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	f040 8087 	bne.w	8007c9a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007b8c:	4b88      	ldr	r3, [pc, #544]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0302 	and.w	r3, r3, #2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d005      	beq.n	8007ba4 <HAL_RCC_OscConfig+0x64>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d101      	bne.n	8007ba4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e3e7      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a1a      	ldr	r2, [r3, #32]
 8007ba8:	4b81      	ldr	r3, [pc, #516]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0308 	and.w	r3, r3, #8
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d004      	beq.n	8007bbe <HAL_RCC_OscConfig+0x7e>
 8007bb4:	4b7e      	ldr	r3, [pc, #504]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bbc:	e005      	b.n	8007bca <HAL_RCC_OscConfig+0x8a>
 8007bbe:	4b7c      	ldr	r3, [pc, #496]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bc4:	091b      	lsrs	r3, r3, #4
 8007bc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d223      	bcs.n	8007c16 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 fd7a 	bl	80086cc <RCC_SetFlashLatencyFromMSIRange>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d001      	beq.n	8007be2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e3c8      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007be2:	4b73      	ldr	r3, [pc, #460]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a72      	ldr	r2, [pc, #456]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007be8:	f043 0308 	orr.w	r3, r3, #8
 8007bec:	6013      	str	r3, [r2, #0]
 8007bee:	4b70      	ldr	r3, [pc, #448]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	496d      	ldr	r1, [pc, #436]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007c00:	4b6b      	ldr	r3, [pc, #428]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	69db      	ldr	r3, [r3, #28]
 8007c0c:	021b      	lsls	r3, r3, #8
 8007c0e:	4968      	ldr	r1, [pc, #416]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007c10:	4313      	orrs	r3, r2
 8007c12:	604b      	str	r3, [r1, #4]
 8007c14:	e025      	b.n	8007c62 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007c16:	4b66      	ldr	r3, [pc, #408]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a65      	ldr	r2, [pc, #404]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007c1c:	f043 0308 	orr.w	r3, r3, #8
 8007c20:	6013      	str	r3, [r2, #0]
 8007c22:	4b63      	ldr	r3, [pc, #396]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	4960      	ldr	r1, [pc, #384]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007c30:	4313      	orrs	r3, r2
 8007c32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007c34:	4b5e      	ldr	r3, [pc, #376]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	021b      	lsls	r3, r3, #8
 8007c42:	495b      	ldr	r1, [pc, #364]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d109      	bne.n	8007c62 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f000 fd3a 	bl	80086cc <RCC_SetFlashLatencyFromMSIRange>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e388      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007c62:	f000 fc6f 	bl	8008544 <HAL_RCC_GetSysClockFreq>
 8007c66:	4602      	mov	r2, r0
 8007c68:	4b51      	ldr	r3, [pc, #324]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	091b      	lsrs	r3, r3, #4
 8007c6e:	f003 030f 	and.w	r3, r3, #15
 8007c72:	4950      	ldr	r1, [pc, #320]	; (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007c74:	5ccb      	ldrb	r3, [r1, r3]
 8007c76:	f003 031f 	and.w	r3, r3, #31
 8007c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c7e:	4a4e      	ldr	r2, [pc, #312]	; (8007db8 <HAL_RCC_OscConfig+0x278>)
 8007c80:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007c82:	4b4e      	ldr	r3, [pc, #312]	; (8007dbc <HAL_RCC_OscConfig+0x27c>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fd fa7c 	bl	8005184 <HAL_InitTick>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d052      	beq.n	8007d3c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007c96:	7bfb      	ldrb	r3, [r7, #15]
 8007c98:	e36c      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d032      	beq.n	8007d08 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007ca2:	4b43      	ldr	r3, [pc, #268]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a42      	ldr	r2, [pc, #264]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007ca8:	f043 0301 	orr.w	r3, r3, #1
 8007cac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007cae:	f7fd fab9 	bl	8005224 <HAL_GetTick>
 8007cb2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007cb4:	e008      	b.n	8007cc8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007cb6:	f7fd fab5 	bl	8005224 <HAL_GetTick>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d901      	bls.n	8007cc8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e355      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007cc8:	4b39      	ldr	r3, [pc, #228]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0302 	and.w	r3, r3, #2
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d0f0      	beq.n	8007cb6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007cd4:	4b36      	ldr	r3, [pc, #216]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a35      	ldr	r2, [pc, #212]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007cda:	f043 0308 	orr.w	r3, r3, #8
 8007cde:	6013      	str	r3, [r2, #0]
 8007ce0:	4b33      	ldr	r3, [pc, #204]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a1b      	ldr	r3, [r3, #32]
 8007cec:	4930      	ldr	r1, [pc, #192]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007cf2:	4b2f      	ldr	r3, [pc, #188]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	69db      	ldr	r3, [r3, #28]
 8007cfe:	021b      	lsls	r3, r3, #8
 8007d00:	492b      	ldr	r1, [pc, #172]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	604b      	str	r3, [r1, #4]
 8007d06:	e01a      	b.n	8007d3e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007d08:	4b29      	ldr	r3, [pc, #164]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a28      	ldr	r2, [pc, #160]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007d0e:	f023 0301 	bic.w	r3, r3, #1
 8007d12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007d14:	f7fd fa86 	bl	8005224 <HAL_GetTick>
 8007d18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007d1a:	e008      	b.n	8007d2e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007d1c:	f7fd fa82 	bl	8005224 <HAL_GetTick>
 8007d20:	4602      	mov	r2, r0
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d901      	bls.n	8007d2e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e322      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007d2e:	4b20      	ldr	r3, [pc, #128]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0302 	and.w	r3, r3, #2
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1f0      	bne.n	8007d1c <HAL_RCC_OscConfig+0x1dc>
 8007d3a:	e000      	b.n	8007d3e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007d3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d073      	beq.n	8007e32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	2b08      	cmp	r3, #8
 8007d4e:	d005      	beq.n	8007d5c <HAL_RCC_OscConfig+0x21c>
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	2b0c      	cmp	r3, #12
 8007d54:	d10e      	bne.n	8007d74 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	2b03      	cmp	r3, #3
 8007d5a:	d10b      	bne.n	8007d74 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d5c:	4b14      	ldr	r3, [pc, #80]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d063      	beq.n	8007e30 <HAL_RCC_OscConfig+0x2f0>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d15f      	bne.n	8007e30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e2ff      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d7c:	d106      	bne.n	8007d8c <HAL_RCC_OscConfig+0x24c>
 8007d7e:	4b0c      	ldr	r3, [pc, #48]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a0b      	ldr	r2, [pc, #44]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d88:	6013      	str	r3, [r2, #0]
 8007d8a:	e025      	b.n	8007dd8 <HAL_RCC_OscConfig+0x298>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d94:	d114      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x280>
 8007d96:	4b06      	ldr	r3, [pc, #24]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a05      	ldr	r2, [pc, #20]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007da0:	6013      	str	r3, [r2, #0]
 8007da2:	4b03      	ldr	r3, [pc, #12]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a02      	ldr	r2, [pc, #8]	; (8007db0 <HAL_RCC_OscConfig+0x270>)
 8007da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dac:	6013      	str	r3, [r2, #0]
 8007dae:	e013      	b.n	8007dd8 <HAL_RCC_OscConfig+0x298>
 8007db0:	40021000 	.word	0x40021000
 8007db4:	0800d8c0 	.word	0x0800d8c0
 8007db8:	20000000 	.word	0x20000000
 8007dbc:	20000004 	.word	0x20000004
 8007dc0:	4ba0      	ldr	r3, [pc, #640]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a9f      	ldr	r2, [pc, #636]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dca:	6013      	str	r3, [r2, #0]
 8007dcc:	4b9d      	ldr	r3, [pc, #628]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a9c      	ldr	r2, [pc, #624]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d013      	beq.n	8007e08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007de0:	f7fd fa20 	bl	8005224 <HAL_GetTick>
 8007de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007de6:	e008      	b.n	8007dfa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007de8:	f7fd fa1c 	bl	8005224 <HAL_GetTick>
 8007dec:	4602      	mov	r2, r0
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	2b64      	cmp	r3, #100	; 0x64
 8007df4:	d901      	bls.n	8007dfa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e2bc      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007dfa:	4b92      	ldr	r3, [pc, #584]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d0f0      	beq.n	8007de8 <HAL_RCC_OscConfig+0x2a8>
 8007e06:	e014      	b.n	8007e32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e08:	f7fd fa0c 	bl	8005224 <HAL_GetTick>
 8007e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007e0e:	e008      	b.n	8007e22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e10:	f7fd fa08 	bl	8005224 <HAL_GetTick>
 8007e14:	4602      	mov	r2, r0
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	2b64      	cmp	r3, #100	; 0x64
 8007e1c:	d901      	bls.n	8007e22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e2a8      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007e22:	4b88      	ldr	r3, [pc, #544]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1f0      	bne.n	8007e10 <HAL_RCC_OscConfig+0x2d0>
 8007e2e:	e000      	b.n	8007e32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0302 	and.w	r3, r3, #2
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d060      	beq.n	8007f00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	d005      	beq.n	8007e50 <HAL_RCC_OscConfig+0x310>
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	2b0c      	cmp	r3, #12
 8007e48:	d119      	bne.n	8007e7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d116      	bne.n	8007e7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e50:	4b7c      	ldr	r3, [pc, #496]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d005      	beq.n	8007e68 <HAL_RCC_OscConfig+0x328>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d101      	bne.n	8007e68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e285      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e68:	4b76      	ldr	r3, [pc, #472]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	061b      	lsls	r3, r3, #24
 8007e76:	4973      	ldr	r1, [pc, #460]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e7c:	e040      	b.n	8007f00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d023      	beq.n	8007ece <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e86:	4b6f      	ldr	r3, [pc, #444]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a6e      	ldr	r2, [pc, #440]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e92:	f7fd f9c7 	bl	8005224 <HAL_GetTick>
 8007e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e98:	e008      	b.n	8007eac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e9a:	f7fd f9c3 	bl	8005224 <HAL_GetTick>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d901      	bls.n	8007eac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e263      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007eac:	4b65      	ldr	r3, [pc, #404]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d0f0      	beq.n	8007e9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eb8:	4b62      	ldr	r3, [pc, #392]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	061b      	lsls	r3, r3, #24
 8007ec6:	495f      	ldr	r1, [pc, #380]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	604b      	str	r3, [r1, #4]
 8007ecc:	e018      	b.n	8007f00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ece:	4b5d      	ldr	r3, [pc, #372]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a5c      	ldr	r2, [pc, #368]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eda:	f7fd f9a3 	bl	8005224 <HAL_GetTick>
 8007ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007ee0:	e008      	b.n	8007ef4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ee2:	f7fd f99f 	bl	8005224 <HAL_GetTick>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d901      	bls.n	8007ef4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e23f      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007ef4:	4b53      	ldr	r3, [pc, #332]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1f0      	bne.n	8007ee2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0308 	and.w	r3, r3, #8
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d03c      	beq.n	8007f86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d01c      	beq.n	8007f4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f14:	4b4b      	ldr	r3, [pc, #300]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f1a:	4a4a      	ldr	r2, [pc, #296]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007f1c:	f043 0301 	orr.w	r3, r3, #1
 8007f20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f24:	f7fd f97e 	bl	8005224 <HAL_GetTick>
 8007f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f2a:	e008      	b.n	8007f3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f2c:	f7fd f97a 	bl	8005224 <HAL_GetTick>
 8007f30:	4602      	mov	r2, r0
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d901      	bls.n	8007f3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e21a      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f3e:	4b41      	ldr	r3, [pc, #260]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f44:	f003 0302 	and.w	r3, r3, #2
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d0ef      	beq.n	8007f2c <HAL_RCC_OscConfig+0x3ec>
 8007f4c:	e01b      	b.n	8007f86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f4e:	4b3d      	ldr	r3, [pc, #244]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f54:	4a3b      	ldr	r2, [pc, #236]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007f56:	f023 0301 	bic.w	r3, r3, #1
 8007f5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f5e:	f7fd f961 	bl	8005224 <HAL_GetTick>
 8007f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f64:	e008      	b.n	8007f78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f66:	f7fd f95d 	bl	8005224 <HAL_GetTick>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d901      	bls.n	8007f78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e1fd      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f78:	4b32      	ldr	r3, [pc, #200]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f7e:	f003 0302 	and.w	r3, r3, #2
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1ef      	bne.n	8007f66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0304 	and.w	r3, r3, #4
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f000 80a6 	beq.w	80080e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f94:	2300      	movs	r3, #0
 8007f96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007f98:	4b2a      	ldr	r3, [pc, #168]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10d      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fa4:	4b27      	ldr	r3, [pc, #156]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fa8:	4a26      	ldr	r2, [pc, #152]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fae:	6593      	str	r3, [r2, #88]	; 0x58
 8007fb0:	4b24      	ldr	r3, [pc, #144]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8007fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fb8:	60bb      	str	r3, [r7, #8]
 8007fba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fc0:	4b21      	ldr	r3, [pc, #132]	; (8008048 <HAL_RCC_OscConfig+0x508>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d118      	bne.n	8007ffe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007fcc:	4b1e      	ldr	r3, [pc, #120]	; (8008048 <HAL_RCC_OscConfig+0x508>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a1d      	ldr	r2, [pc, #116]	; (8008048 <HAL_RCC_OscConfig+0x508>)
 8007fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fd8:	f7fd f924 	bl	8005224 <HAL_GetTick>
 8007fdc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fde:	e008      	b.n	8007ff2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fe0:	f7fd f920 	bl	8005224 <HAL_GetTick>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d901      	bls.n	8007ff2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e1c0      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ff2:	4b15      	ldr	r3, [pc, #84]	; (8008048 <HAL_RCC_OscConfig+0x508>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d0f0      	beq.n	8007fe0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d108      	bne.n	8008018 <HAL_RCC_OscConfig+0x4d8>
 8008006:	4b0f      	ldr	r3, [pc, #60]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8008008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800800c:	4a0d      	ldr	r2, [pc, #52]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 800800e:	f043 0301 	orr.w	r3, r3, #1
 8008012:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008016:	e029      	b.n	800806c <HAL_RCC_OscConfig+0x52c>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	2b05      	cmp	r3, #5
 800801e:	d115      	bne.n	800804c <HAL_RCC_OscConfig+0x50c>
 8008020:	4b08      	ldr	r3, [pc, #32]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8008022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008026:	4a07      	ldr	r2, [pc, #28]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8008028:	f043 0304 	orr.w	r3, r3, #4
 800802c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008030:	4b04      	ldr	r3, [pc, #16]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8008032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008036:	4a03      	ldr	r2, [pc, #12]	; (8008044 <HAL_RCC_OscConfig+0x504>)
 8008038:	f043 0301 	orr.w	r3, r3, #1
 800803c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008040:	e014      	b.n	800806c <HAL_RCC_OscConfig+0x52c>
 8008042:	bf00      	nop
 8008044:	40021000 	.word	0x40021000
 8008048:	40007000 	.word	0x40007000
 800804c:	4b9a      	ldr	r3, [pc, #616]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 800804e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008052:	4a99      	ldr	r2, [pc, #612]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 8008054:	f023 0301 	bic.w	r3, r3, #1
 8008058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800805c:	4b96      	ldr	r3, [pc, #600]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 800805e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008062:	4a95      	ldr	r2, [pc, #596]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 8008064:	f023 0304 	bic.w	r3, r3, #4
 8008068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d016      	beq.n	80080a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008074:	f7fd f8d6 	bl	8005224 <HAL_GetTick>
 8008078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800807a:	e00a      	b.n	8008092 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800807c:	f7fd f8d2 	bl	8005224 <HAL_GetTick>
 8008080:	4602      	mov	r2, r0
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	f241 3288 	movw	r2, #5000	; 0x1388
 800808a:	4293      	cmp	r3, r2
 800808c:	d901      	bls.n	8008092 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e170      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008092:	4b89      	ldr	r3, [pc, #548]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 8008094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008098:	f003 0302 	and.w	r3, r3, #2
 800809c:	2b00      	cmp	r3, #0
 800809e:	d0ed      	beq.n	800807c <HAL_RCC_OscConfig+0x53c>
 80080a0:	e015      	b.n	80080ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080a2:	f7fd f8bf 	bl	8005224 <HAL_GetTick>
 80080a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80080a8:	e00a      	b.n	80080c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080aa:	f7fd f8bb 	bl	8005224 <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d901      	bls.n	80080c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e159      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80080c0:	4b7d      	ldr	r3, [pc, #500]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 80080c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080c6:	f003 0302 	and.w	r3, r3, #2
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1ed      	bne.n	80080aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080ce:	7ffb      	ldrb	r3, [r7, #31]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d105      	bne.n	80080e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080d4:	4b78      	ldr	r3, [pc, #480]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 80080d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080d8:	4a77      	ldr	r2, [pc, #476]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 80080da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0320 	and.w	r3, r3, #32
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d03c      	beq.n	8008166 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d01c      	beq.n	800812e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80080f4:	4b70      	ldr	r3, [pc, #448]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 80080f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80080fa:	4a6f      	ldr	r2, [pc, #444]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 80080fc:	f043 0301 	orr.w	r3, r3, #1
 8008100:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008104:	f7fd f88e 	bl	8005224 <HAL_GetTick>
 8008108:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800810a:	e008      	b.n	800811e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800810c:	f7fd f88a 	bl	8005224 <HAL_GetTick>
 8008110:	4602      	mov	r2, r0
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	2b02      	cmp	r3, #2
 8008118:	d901      	bls.n	800811e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e12a      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800811e:	4b66      	ldr	r3, [pc, #408]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 8008120:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008124:	f003 0302 	and.w	r3, r3, #2
 8008128:	2b00      	cmp	r3, #0
 800812a:	d0ef      	beq.n	800810c <HAL_RCC_OscConfig+0x5cc>
 800812c:	e01b      	b.n	8008166 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800812e:	4b62      	ldr	r3, [pc, #392]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 8008130:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008134:	4a60      	ldr	r2, [pc, #384]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 8008136:	f023 0301 	bic.w	r3, r3, #1
 800813a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800813e:	f7fd f871 	bl	8005224 <HAL_GetTick>
 8008142:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008144:	e008      	b.n	8008158 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008146:	f7fd f86d 	bl	8005224 <HAL_GetTick>
 800814a:	4602      	mov	r2, r0
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	2b02      	cmp	r3, #2
 8008152:	d901      	bls.n	8008158 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	e10d      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008158:	4b57      	ldr	r3, [pc, #348]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 800815a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800815e:	f003 0302 	and.w	r3, r3, #2
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1ef      	bne.n	8008146 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816a:	2b00      	cmp	r3, #0
 800816c:	f000 8101 	beq.w	8008372 <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008174:	2b02      	cmp	r3, #2
 8008176:	f040 80c9 	bne.w	800830c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800817a:	4b4f      	ldr	r3, [pc, #316]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	f003 0203 	and.w	r2, r3, #3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818a:	429a      	cmp	r2, r3
 800818c:	d12c      	bne.n	80081e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008198:	3b01      	subs	r3, #1
 800819a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800819c:	429a      	cmp	r2, r3
 800819e:	d123      	bne.n	80081e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d11b      	bne.n	80081e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80081bc:	429a      	cmp	r2, r3
 80081be:	d113      	bne.n	80081e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ca:	085b      	lsrs	r3, r3, #1
 80081cc:	3b01      	subs	r3, #1
 80081ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d109      	bne.n	80081e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081de:	085b      	lsrs	r3, r3, #1
 80081e0:	3b01      	subs	r3, #1
 80081e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d06b      	beq.n	80082c0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	2b0c      	cmp	r3, #12
 80081ec:	d062      	beq.n	80082b4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80081ee:	4b32      	ldr	r3, [pc, #200]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	e0ba      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80081fe:	4b2e      	ldr	r3, [pc, #184]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a2d      	ldr	r2, [pc, #180]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 8008204:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008208:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800820a:	f7fd f80b 	bl	8005224 <HAL_GetTick>
 800820e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008210:	e008      	b.n	8008224 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008212:	f7fd f807 	bl	8005224 <HAL_GetTick>
 8008216:	4602      	mov	r2, r0
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	1ad3      	subs	r3, r2, r3
 800821c:	2b02      	cmp	r3, #2
 800821e:	d901      	bls.n	8008224 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8008220:	2303      	movs	r3, #3
 8008222:	e0a7      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008224:	4b24      	ldr	r3, [pc, #144]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1f0      	bne.n	8008212 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008230:	4b21      	ldr	r3, [pc, #132]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 8008232:	68da      	ldr	r2, [r3, #12]
 8008234:	4b21      	ldr	r3, [pc, #132]	; (80082bc <HAL_RCC_OscConfig+0x77c>)
 8008236:	4013      	ands	r3, r2
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008240:	3a01      	subs	r2, #1
 8008242:	0112      	lsls	r2, r2, #4
 8008244:	4311      	orrs	r1, r2
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800824a:	0212      	lsls	r2, r2, #8
 800824c:	4311      	orrs	r1, r2
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008252:	0852      	lsrs	r2, r2, #1
 8008254:	3a01      	subs	r2, #1
 8008256:	0552      	lsls	r2, r2, #21
 8008258:	4311      	orrs	r1, r2
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800825e:	0852      	lsrs	r2, r2, #1
 8008260:	3a01      	subs	r2, #1
 8008262:	0652      	lsls	r2, r2, #25
 8008264:	4311      	orrs	r1, r2
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800826a:	06d2      	lsls	r2, r2, #27
 800826c:	430a      	orrs	r2, r1
 800826e:	4912      	ldr	r1, [pc, #72]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 8008270:	4313      	orrs	r3, r2
 8008272:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008274:	4b10      	ldr	r3, [pc, #64]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a0f      	ldr	r2, [pc, #60]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 800827a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800827e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008280:	4b0d      	ldr	r3, [pc, #52]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	4a0c      	ldr	r2, [pc, #48]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 8008286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800828a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800828c:	f7fc ffca 	bl	8005224 <HAL_GetTick>
 8008290:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008292:	e008      	b.n	80082a6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008294:	f7fc ffc6 	bl	8005224 <HAL_GetTick>
 8008298:	4602      	mov	r2, r0
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d901      	bls.n	80082a6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e066      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082a6:	4b04      	ldr	r3, [pc, #16]	; (80082b8 <HAL_RCC_OscConfig+0x778>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d0f0      	beq.n	8008294 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80082b2:	e05e      	b.n	8008372 <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e05d      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
 80082b8:	40021000 	.word	0x40021000
 80082bc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082c0:	4b2e      	ldr	r3, [pc, #184]	; (800837c <HAL_RCC_OscConfig+0x83c>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d152      	bne.n	8008372 <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80082cc:	4b2b      	ldr	r3, [pc, #172]	; (800837c <HAL_RCC_OscConfig+0x83c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a2a      	ldr	r2, [pc, #168]	; (800837c <HAL_RCC_OscConfig+0x83c>)
 80082d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80082d8:	4b28      	ldr	r3, [pc, #160]	; (800837c <HAL_RCC_OscConfig+0x83c>)
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	4a27      	ldr	r2, [pc, #156]	; (800837c <HAL_RCC_OscConfig+0x83c>)
 80082de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80082e4:	f7fc ff9e 	bl	8005224 <HAL_GetTick>
 80082e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082ea:	e008      	b.n	80082fe <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082ec:	f7fc ff9a 	bl	8005224 <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d901      	bls.n	80082fe <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e03a      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082fe:	4b1f      	ldr	r3, [pc, #124]	; (800837c <HAL_RCC_OscConfig+0x83c>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d0f0      	beq.n	80082ec <HAL_RCC_OscConfig+0x7ac>
 800830a:	e032      	b.n	8008372 <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	2b0c      	cmp	r3, #12
 8008310:	d02d      	beq.n	800836e <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008312:	4b1a      	ldr	r3, [pc, #104]	; (800837c <HAL_RCC_OscConfig+0x83c>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a19      	ldr	r2, [pc, #100]	; (800837c <HAL_RCC_OscConfig+0x83c>)
 8008318:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800831c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800831e:	4b17      	ldr	r3, [pc, #92]	; (800837c <HAL_RCC_OscConfig+0x83c>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d105      	bne.n	8008336 <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800832a:	4b14      	ldr	r3, [pc, #80]	; (800837c <HAL_RCC_OscConfig+0x83c>)
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	4a13      	ldr	r2, [pc, #76]	; (800837c <HAL_RCC_OscConfig+0x83c>)
 8008330:	f023 0303 	bic.w	r3, r3, #3
 8008334:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8008336:	4b11      	ldr	r3, [pc, #68]	; (800837c <HAL_RCC_OscConfig+0x83c>)
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	4a10      	ldr	r2, [pc, #64]	; (800837c <HAL_RCC_OscConfig+0x83c>)
 800833c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008344:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008346:	f7fc ff6d 	bl	8005224 <HAL_GetTick>
 800834a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800834c:	e008      	b.n	8008360 <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800834e:	f7fc ff69 	bl	8005224 <HAL_GetTick>
 8008352:	4602      	mov	r2, r0
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	2b02      	cmp	r3, #2
 800835a:	d901      	bls.n	8008360 <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 800835c:	2303      	movs	r3, #3
 800835e:	e009      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008360:	4b06      	ldr	r3, [pc, #24]	; (800837c <HAL_RCC_OscConfig+0x83c>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1f0      	bne.n	800834e <HAL_RCC_OscConfig+0x80e>
 800836c:	e001      	b.n	8008372 <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e000      	b.n	8008374 <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3720      	adds	r7, #32
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	40021000 	.word	0x40021000

08008380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e0c8      	b.n	8008526 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008394:	4b66      	ldr	r3, [pc, #408]	; (8008530 <HAL_RCC_ClockConfig+0x1b0>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0307 	and.w	r3, r3, #7
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d910      	bls.n	80083c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083a2:	4b63      	ldr	r3, [pc, #396]	; (8008530 <HAL_RCC_ClockConfig+0x1b0>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f023 0207 	bic.w	r2, r3, #7
 80083aa:	4961      	ldr	r1, [pc, #388]	; (8008530 <HAL_RCC_ClockConfig+0x1b0>)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083b2:	4b5f      	ldr	r3, [pc, #380]	; (8008530 <HAL_RCC_ClockConfig+0x1b0>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0307 	and.w	r3, r3, #7
 80083ba:	683a      	ldr	r2, [r7, #0]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d001      	beq.n	80083c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e0b0      	b.n	8008526 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 0301 	and.w	r3, r3, #1
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d04c      	beq.n	800846a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	2b03      	cmp	r3, #3
 80083d6:	d107      	bne.n	80083e8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083d8:	4b56      	ldr	r3, [pc, #344]	; (8008534 <HAL_RCC_ClockConfig+0x1b4>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d121      	bne.n	8008428 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e09e      	b.n	8008526 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d107      	bne.n	8008400 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80083f0:	4b50      	ldr	r3, [pc, #320]	; (8008534 <HAL_RCC_ClockConfig+0x1b4>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d115      	bne.n	8008428 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e092      	b.n	8008526 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d107      	bne.n	8008418 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008408:	4b4a      	ldr	r3, [pc, #296]	; (8008534 <HAL_RCC_ClockConfig+0x1b4>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 0302 	and.w	r3, r3, #2
 8008410:	2b00      	cmp	r3, #0
 8008412:	d109      	bne.n	8008428 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e086      	b.n	8008526 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008418:	4b46      	ldr	r3, [pc, #280]	; (8008534 <HAL_RCC_ClockConfig+0x1b4>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008420:	2b00      	cmp	r3, #0
 8008422:	d101      	bne.n	8008428 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	e07e      	b.n	8008526 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008428:	4b42      	ldr	r3, [pc, #264]	; (8008534 <HAL_RCC_ClockConfig+0x1b4>)
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f023 0203 	bic.w	r2, r3, #3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	493f      	ldr	r1, [pc, #252]	; (8008534 <HAL_RCC_ClockConfig+0x1b4>)
 8008436:	4313      	orrs	r3, r2
 8008438:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800843a:	f7fc fef3 	bl	8005224 <HAL_GetTick>
 800843e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008440:	e00a      	b.n	8008458 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008442:	f7fc feef 	bl	8005224 <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008450:	4293      	cmp	r3, r2
 8008452:	d901      	bls.n	8008458 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	e066      	b.n	8008526 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008458:	4b36      	ldr	r3, [pc, #216]	; (8008534 <HAL_RCC_ClockConfig+0x1b4>)
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	f003 020c 	and.w	r2, r3, #12
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	429a      	cmp	r2, r3
 8008468:	d1eb      	bne.n	8008442 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 0302 	and.w	r3, r3, #2
 8008472:	2b00      	cmp	r3, #0
 8008474:	d008      	beq.n	8008488 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008476:	4b2f      	ldr	r3, [pc, #188]	; (8008534 <HAL_RCC_ClockConfig+0x1b4>)
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	492c      	ldr	r1, [pc, #176]	; (8008534 <HAL_RCC_ClockConfig+0x1b4>)
 8008484:	4313      	orrs	r3, r2
 8008486:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008488:	4b29      	ldr	r3, [pc, #164]	; (8008530 <HAL_RCC_ClockConfig+0x1b0>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0307 	and.w	r3, r3, #7
 8008490:	683a      	ldr	r2, [r7, #0]
 8008492:	429a      	cmp	r2, r3
 8008494:	d210      	bcs.n	80084b8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008496:	4b26      	ldr	r3, [pc, #152]	; (8008530 <HAL_RCC_ClockConfig+0x1b0>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f023 0207 	bic.w	r2, r3, #7
 800849e:	4924      	ldr	r1, [pc, #144]	; (8008530 <HAL_RCC_ClockConfig+0x1b0>)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084a6:	4b22      	ldr	r3, [pc, #136]	; (8008530 <HAL_RCC_ClockConfig+0x1b0>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 0307 	and.w	r3, r3, #7
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d001      	beq.n	80084b8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e036      	b.n	8008526 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0304 	and.w	r3, r3, #4
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d008      	beq.n	80084d6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084c4:	4b1b      	ldr	r3, [pc, #108]	; (8008534 <HAL_RCC_ClockConfig+0x1b4>)
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	4918      	ldr	r1, [pc, #96]	; (8008534 <HAL_RCC_ClockConfig+0x1b4>)
 80084d2:	4313      	orrs	r3, r2
 80084d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 0308 	and.w	r3, r3, #8
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d009      	beq.n	80084f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80084e2:	4b14      	ldr	r3, [pc, #80]	; (8008534 <HAL_RCC_ClockConfig+0x1b4>)
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	00db      	lsls	r3, r3, #3
 80084f0:	4910      	ldr	r1, [pc, #64]	; (8008534 <HAL_RCC_ClockConfig+0x1b4>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80084f6:	f000 f825 	bl	8008544 <HAL_RCC_GetSysClockFreq>
 80084fa:	4602      	mov	r2, r0
 80084fc:	4b0d      	ldr	r3, [pc, #52]	; (8008534 <HAL_RCC_ClockConfig+0x1b4>)
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	091b      	lsrs	r3, r3, #4
 8008502:	f003 030f 	and.w	r3, r3, #15
 8008506:	490c      	ldr	r1, [pc, #48]	; (8008538 <HAL_RCC_ClockConfig+0x1b8>)
 8008508:	5ccb      	ldrb	r3, [r1, r3]
 800850a:	f003 031f 	and.w	r3, r3, #31
 800850e:	fa22 f303 	lsr.w	r3, r2, r3
 8008512:	4a0a      	ldr	r2, [pc, #40]	; (800853c <HAL_RCC_ClockConfig+0x1bc>)
 8008514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008516:	4b0a      	ldr	r3, [pc, #40]	; (8008540 <HAL_RCC_ClockConfig+0x1c0>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4618      	mov	r0, r3
 800851c:	f7fc fe32 	bl	8005184 <HAL_InitTick>
 8008520:	4603      	mov	r3, r0
 8008522:	72fb      	strb	r3, [r7, #11]

  return status;
 8008524:	7afb      	ldrb	r3, [r7, #11]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	40022000 	.word	0x40022000
 8008534:	40021000 	.word	0x40021000
 8008538:	0800d8c0 	.word	0x0800d8c0
 800853c:	20000000 	.word	0x20000000
 8008540:	20000004 	.word	0x20000004

08008544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008544:	b480      	push	{r7}
 8008546:	b089      	sub	sp, #36	; 0x24
 8008548:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800854a:	2300      	movs	r3, #0
 800854c:	61fb      	str	r3, [r7, #28]
 800854e:	2300      	movs	r3, #0
 8008550:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008552:	4b3e      	ldr	r3, [pc, #248]	; (800864c <HAL_RCC_GetSysClockFreq+0x108>)
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	f003 030c 	and.w	r3, r3, #12
 800855a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800855c:	4b3b      	ldr	r3, [pc, #236]	; (800864c <HAL_RCC_GetSysClockFreq+0x108>)
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	f003 0303 	and.w	r3, r3, #3
 8008564:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d005      	beq.n	8008578 <HAL_RCC_GetSysClockFreq+0x34>
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	2b0c      	cmp	r3, #12
 8008570:	d121      	bne.n	80085b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d11e      	bne.n	80085b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008578:	4b34      	ldr	r3, [pc, #208]	; (800864c <HAL_RCC_GetSysClockFreq+0x108>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0308 	and.w	r3, r3, #8
 8008580:	2b00      	cmp	r3, #0
 8008582:	d107      	bne.n	8008594 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008584:	4b31      	ldr	r3, [pc, #196]	; (800864c <HAL_RCC_GetSysClockFreq+0x108>)
 8008586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800858a:	0a1b      	lsrs	r3, r3, #8
 800858c:	f003 030f 	and.w	r3, r3, #15
 8008590:	61fb      	str	r3, [r7, #28]
 8008592:	e005      	b.n	80085a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008594:	4b2d      	ldr	r3, [pc, #180]	; (800864c <HAL_RCC_GetSysClockFreq+0x108>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	091b      	lsrs	r3, r3, #4
 800859a:	f003 030f 	and.w	r3, r3, #15
 800859e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80085a0:	4a2b      	ldr	r2, [pc, #172]	; (8008650 <HAL_RCC_GetSysClockFreq+0x10c>)
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10d      	bne.n	80085cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80085b4:	e00a      	b.n	80085cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	2b04      	cmp	r3, #4
 80085ba:	d102      	bne.n	80085c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80085bc:	4b25      	ldr	r3, [pc, #148]	; (8008654 <HAL_RCC_GetSysClockFreq+0x110>)
 80085be:	61bb      	str	r3, [r7, #24]
 80085c0:	e004      	b.n	80085cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	2b08      	cmp	r3, #8
 80085c6:	d101      	bne.n	80085cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80085c8:	4b23      	ldr	r3, [pc, #140]	; (8008658 <HAL_RCC_GetSysClockFreq+0x114>)
 80085ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	2b0c      	cmp	r3, #12
 80085d0:	d134      	bne.n	800863c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80085d2:	4b1e      	ldr	r3, [pc, #120]	; (800864c <HAL_RCC_GetSysClockFreq+0x108>)
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	f003 0303 	and.w	r3, r3, #3
 80085da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d003      	beq.n	80085ea <HAL_RCC_GetSysClockFreq+0xa6>
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	2b03      	cmp	r3, #3
 80085e6:	d003      	beq.n	80085f0 <HAL_RCC_GetSysClockFreq+0xac>
 80085e8:	e005      	b.n	80085f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80085ea:	4b1a      	ldr	r3, [pc, #104]	; (8008654 <HAL_RCC_GetSysClockFreq+0x110>)
 80085ec:	617b      	str	r3, [r7, #20]
      break;
 80085ee:	e005      	b.n	80085fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80085f0:	4b19      	ldr	r3, [pc, #100]	; (8008658 <HAL_RCC_GetSysClockFreq+0x114>)
 80085f2:	617b      	str	r3, [r7, #20]
      break;
 80085f4:	e002      	b.n	80085fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	617b      	str	r3, [r7, #20]
      break;
 80085fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80085fc:	4b13      	ldr	r3, [pc, #76]	; (800864c <HAL_RCC_GetSysClockFreq+0x108>)
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	091b      	lsrs	r3, r3, #4
 8008602:	f003 0307 	and.w	r3, r3, #7
 8008606:	3301      	adds	r3, #1
 8008608:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800860a:	4b10      	ldr	r3, [pc, #64]	; (800864c <HAL_RCC_GetSysClockFreq+0x108>)
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	0a1b      	lsrs	r3, r3, #8
 8008610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008614:	697a      	ldr	r2, [r7, #20]
 8008616:	fb03 f202 	mul.w	r2, r3, r2
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008620:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008622:	4b0a      	ldr	r3, [pc, #40]	; (800864c <HAL_RCC_GetSysClockFreq+0x108>)
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	0e5b      	lsrs	r3, r3, #25
 8008628:	f003 0303 	and.w	r3, r3, #3
 800862c:	3301      	adds	r3, #1
 800862e:	005b      	lsls	r3, r3, #1
 8008630:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008632:	697a      	ldr	r2, [r7, #20]
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	fbb2 f3f3 	udiv	r3, r2, r3
 800863a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800863c:	69bb      	ldr	r3, [r7, #24]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3724      	adds	r7, #36	; 0x24
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	40021000 	.word	0x40021000
 8008650:	0800d8d8 	.word	0x0800d8d8
 8008654:	00f42400 	.word	0x00f42400
 8008658:	00b71b00 	.word	0x00b71b00

0800865c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800865c:	b480      	push	{r7}
 800865e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008660:	4b03      	ldr	r3, [pc, #12]	; (8008670 <HAL_RCC_GetHCLKFreq+0x14>)
 8008662:	681b      	ldr	r3, [r3, #0]
}
 8008664:	4618      	mov	r0, r3
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	20000000 	.word	0x20000000

08008674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008678:	f7ff fff0 	bl	800865c <HAL_RCC_GetHCLKFreq>
 800867c:	4602      	mov	r2, r0
 800867e:	4b06      	ldr	r3, [pc, #24]	; (8008698 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	0a1b      	lsrs	r3, r3, #8
 8008684:	f003 0307 	and.w	r3, r3, #7
 8008688:	4904      	ldr	r1, [pc, #16]	; (800869c <HAL_RCC_GetPCLK1Freq+0x28>)
 800868a:	5ccb      	ldrb	r3, [r1, r3]
 800868c:	f003 031f 	and.w	r3, r3, #31
 8008690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008694:	4618      	mov	r0, r3
 8008696:	bd80      	pop	{r7, pc}
 8008698:	40021000 	.word	0x40021000
 800869c:	0800d8d0 	.word	0x0800d8d0

080086a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80086a4:	f7ff ffda 	bl	800865c <HAL_RCC_GetHCLKFreq>
 80086a8:	4602      	mov	r2, r0
 80086aa:	4b06      	ldr	r3, [pc, #24]	; (80086c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	0adb      	lsrs	r3, r3, #11
 80086b0:	f003 0307 	and.w	r3, r3, #7
 80086b4:	4904      	ldr	r1, [pc, #16]	; (80086c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80086b6:	5ccb      	ldrb	r3, [r1, r3]
 80086b8:	f003 031f 	and.w	r3, r3, #31
 80086bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	40021000 	.word	0x40021000
 80086c8:	0800d8d0 	.word	0x0800d8d0

080086cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80086d4:	2300      	movs	r3, #0
 80086d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80086d8:	4b2a      	ldr	r3, [pc, #168]	; (8008784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80086da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d003      	beq.n	80086ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80086e4:	f7ff f9c8 	bl	8007a78 <HAL_PWREx_GetVoltageRange>
 80086e8:	6178      	str	r0, [r7, #20]
 80086ea:	e014      	b.n	8008716 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80086ec:	4b25      	ldr	r3, [pc, #148]	; (8008784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80086ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f0:	4a24      	ldr	r2, [pc, #144]	; (8008784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80086f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086f6:	6593      	str	r3, [r2, #88]	; 0x58
 80086f8:	4b22      	ldr	r3, [pc, #136]	; (8008784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80086fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008700:	60fb      	str	r3, [r7, #12]
 8008702:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008704:	f7ff f9b8 	bl	8007a78 <HAL_PWREx_GetVoltageRange>
 8008708:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800870a:	4b1e      	ldr	r3, [pc, #120]	; (8008784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800870c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800870e:	4a1d      	ldr	r2, [pc, #116]	; (8008784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008714:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800871c:	d10b      	bne.n	8008736 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b80      	cmp	r3, #128	; 0x80
 8008722:	d919      	bls.n	8008758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2ba0      	cmp	r3, #160	; 0xa0
 8008728:	d902      	bls.n	8008730 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800872a:	2302      	movs	r3, #2
 800872c:	613b      	str	r3, [r7, #16]
 800872e:	e013      	b.n	8008758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008730:	2301      	movs	r3, #1
 8008732:	613b      	str	r3, [r7, #16]
 8008734:	e010      	b.n	8008758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b80      	cmp	r3, #128	; 0x80
 800873a:	d902      	bls.n	8008742 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800873c:	2303      	movs	r3, #3
 800873e:	613b      	str	r3, [r7, #16]
 8008740:	e00a      	b.n	8008758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2b80      	cmp	r3, #128	; 0x80
 8008746:	d102      	bne.n	800874e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008748:	2302      	movs	r3, #2
 800874a:	613b      	str	r3, [r7, #16]
 800874c:	e004      	b.n	8008758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2b70      	cmp	r3, #112	; 0x70
 8008752:	d101      	bne.n	8008758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008754:	2301      	movs	r3, #1
 8008756:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008758:	4b0b      	ldr	r3, [pc, #44]	; (8008788 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f023 0207 	bic.w	r2, r3, #7
 8008760:	4909      	ldr	r1, [pc, #36]	; (8008788 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	4313      	orrs	r3, r2
 8008766:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008768:	4b07      	ldr	r3, [pc, #28]	; (8008788 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 0307 	and.w	r3, r3, #7
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	429a      	cmp	r2, r3
 8008774:	d001      	beq.n	800877a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e000      	b.n	800877c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3718      	adds	r7, #24
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	40021000 	.word	0x40021000
 8008788:	40022000 	.word	0x40022000

0800878c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b086      	sub	sp, #24
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008794:	2300      	movs	r3, #0
 8008796:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008798:	2300      	movs	r3, #0
 800879a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d031      	beq.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80087b0:	d01a      	beq.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80087b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80087b6:	d814      	bhi.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d009      	beq.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80087bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80087c0:	d10f      	bne.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80087c2:	4b5d      	ldr	r3, [pc, #372]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	4a5c      	ldr	r2, [pc, #368]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80087c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087cc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80087ce:	e00c      	b.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	3304      	adds	r3, #4
 80087d4:	2100      	movs	r1, #0
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 f9ce 	bl	8008b78 <RCCEx_PLLSAI1_Config>
 80087dc:	4603      	mov	r3, r0
 80087de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80087e0:	e003      	b.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	74fb      	strb	r3, [r7, #19]
      break;
 80087e6:	e000      	b.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80087e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087ea:	7cfb      	ldrb	r3, [r7, #19]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10b      	bne.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80087f0:	4b51      	ldr	r3, [pc, #324]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80087f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087fe:	494e      	ldr	r1, [pc, #312]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008800:	4313      	orrs	r3, r2
 8008802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008806:	e001      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008808:	7cfb      	ldrb	r3, [r7, #19]
 800880a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008814:	2b00      	cmp	r3, #0
 8008816:	f000 809e 	beq.w	8008956 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800881a:	2300      	movs	r3, #0
 800881c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800881e:	4b46      	ldr	r3, [pc, #280]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d101      	bne.n	800882e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800882a:	2301      	movs	r3, #1
 800882c:	e000      	b.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800882e:	2300      	movs	r3, #0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00d      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008834:	4b40      	ldr	r3, [pc, #256]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008838:	4a3f      	ldr	r2, [pc, #252]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800883a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800883e:	6593      	str	r3, [r2, #88]	; 0x58
 8008840:	4b3d      	ldr	r3, [pc, #244]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008848:	60bb      	str	r3, [r7, #8]
 800884a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800884c:	2301      	movs	r3, #1
 800884e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008850:	4b3a      	ldr	r3, [pc, #232]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a39      	ldr	r2, [pc, #228]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800885a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800885c:	f7fc fce2 	bl	8005224 <HAL_GetTick>
 8008860:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008862:	e009      	b.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008864:	f7fc fcde 	bl	8005224 <HAL_GetTick>
 8008868:	4602      	mov	r2, r0
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	2b02      	cmp	r3, #2
 8008870:	d902      	bls.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	74fb      	strb	r3, [r7, #19]
        break;
 8008876:	e005      	b.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008878:	4b30      	ldr	r3, [pc, #192]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008880:	2b00      	cmp	r3, #0
 8008882:	d0ef      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8008884:	7cfb      	ldrb	r3, [r7, #19]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d15a      	bne.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800888a:	4b2b      	ldr	r3, [pc, #172]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800888c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008890:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008894:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d01e      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088a0:	697a      	ldr	r2, [r7, #20]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d019      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80088a6:	4b24      	ldr	r3, [pc, #144]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80088a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80088b2:	4b21      	ldr	r3, [pc, #132]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80088b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088b8:	4a1f      	ldr	r2, [pc, #124]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80088ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80088c2:	4b1d      	ldr	r3, [pc, #116]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80088c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088c8:	4a1b      	ldr	r2, [pc, #108]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80088ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80088d2:	4a19      	ldr	r2, [pc, #100]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	f003 0301 	and.w	r3, r3, #1
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d016      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088e4:	f7fc fc9e 	bl	8005224 <HAL_GetTick>
 80088e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088ea:	e00b      	b.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088ec:	f7fc fc9a 	bl	8005224 <HAL_GetTick>
 80088f0:	4602      	mov	r2, r0
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d902      	bls.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	74fb      	strb	r3, [r7, #19]
            break;
 8008902:	e006      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008904:	4b0c      	ldr	r3, [pc, #48]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800890a:	f003 0302 	and.w	r3, r3, #2
 800890e:	2b00      	cmp	r3, #0
 8008910:	d0ec      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8008912:	7cfb      	ldrb	r3, [r7, #19]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d10b      	bne.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008918:	4b07      	ldr	r3, [pc, #28]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800891a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800891e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008926:	4904      	ldr	r1, [pc, #16]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008928:	4313      	orrs	r3, r2
 800892a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800892e:	e009      	b.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008930:	7cfb      	ldrb	r3, [r7, #19]
 8008932:	74bb      	strb	r3, [r7, #18]
 8008934:	e006      	b.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008936:	bf00      	nop
 8008938:	40021000 	.word	0x40021000
 800893c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008940:	7cfb      	ldrb	r3, [r7, #19]
 8008942:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008944:	7c7b      	ldrb	r3, [r7, #17]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d105      	bne.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800894a:	4b8a      	ldr	r3, [pc, #552]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800894c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800894e:	4a89      	ldr	r2, [pc, #548]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008954:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f003 0301 	and.w	r3, r3, #1
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00a      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008962:	4b84      	ldr	r3, [pc, #528]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008968:	f023 0203 	bic.w	r2, r3, #3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a1b      	ldr	r3, [r3, #32]
 8008970:	4980      	ldr	r1, [pc, #512]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008972:	4313      	orrs	r3, r2
 8008974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 0302 	and.w	r3, r3, #2
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00a      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008984:	4b7b      	ldr	r3, [pc, #492]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800898a:	f023 020c 	bic.w	r2, r3, #12
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008992:	4978      	ldr	r1, [pc, #480]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008994:	4313      	orrs	r3, r2
 8008996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 0320 	and.w	r3, r3, #32
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00a      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80089a6:	4b73      	ldr	r3, [pc, #460]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80089a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b4:	496f      	ldr	r1, [pc, #444]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80089b6:	4313      	orrs	r3, r2
 80089b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00a      	beq.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80089c8:	4b6a      	ldr	r3, [pc, #424]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80089ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ce:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d6:	4967      	ldr	r1, [pc, #412]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80089d8:	4313      	orrs	r3, r2
 80089da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00a      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80089ea:	4b62      	ldr	r3, [pc, #392]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80089ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f8:	495e      	ldr	r1, [pc, #376]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80089fa:	4313      	orrs	r3, r2
 80089fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00a      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008a0c:	4b59      	ldr	r3, [pc, #356]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1a:	4956      	ldr	r1, [pc, #344]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00a      	beq.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008a2e:	4b51      	ldr	r3, [pc, #324]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3c:	494d      	ldr	r1, [pc, #308]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d028      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a50:	4b48      	ldr	r3, [pc, #288]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5e:	4945      	ldr	r1, [pc, #276]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a60:	4313      	orrs	r3, r2
 8008a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a6e:	d106      	bne.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a70:	4b40      	ldr	r3, [pc, #256]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	4a3f      	ldr	r2, [pc, #252]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a7a:	60d3      	str	r3, [r2, #12]
 8008a7c:	e011      	b.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a86:	d10c      	bne.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	3304      	adds	r3, #4
 8008a8c:	2101      	movs	r1, #1
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 f872 	bl	8008b78 <RCCEx_PLLSAI1_Config>
 8008a94:	4603      	mov	r3, r0
 8008a96:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008a98:	7cfb      	ldrb	r3, [r7, #19]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d001      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8008a9e:	7cfb      	ldrb	r3, [r7, #19]
 8008aa0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d028      	beq.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008aae:	4b31      	ldr	r3, [pc, #196]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ab4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008abc:	492d      	ldr	r1, [pc, #180]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ac8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008acc:	d106      	bne.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ace:	4b29      	ldr	r3, [pc, #164]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	4a28      	ldr	r2, [pc, #160]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008ad4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ad8:	60d3      	str	r3, [r2, #12]
 8008ada:	e011      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ae0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ae4:	d10c      	bne.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	3304      	adds	r3, #4
 8008aea:	2101      	movs	r1, #1
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 f843 	bl	8008b78 <RCCEx_PLLSAI1_Config>
 8008af2:	4603      	mov	r3, r0
 8008af4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008af6:	7cfb      	ldrb	r3, [r7, #19]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d001      	beq.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8008afc:	7cfb      	ldrb	r3, [r7, #19]
 8008afe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d01c      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008b0c:	4b19      	ldr	r3, [pc, #100]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b1a:	4916      	ldr	r1, [pc, #88]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b2a:	d10c      	bne.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	3304      	adds	r3, #4
 8008b30:	2102      	movs	r1, #2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 f820 	bl	8008b78 <RCCEx_PLLSAI1_Config>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008b3c:	7cfb      	ldrb	r3, [r7, #19]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8008b42:	7cfb      	ldrb	r3, [r7, #19]
 8008b44:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00a      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008b52:	4b08      	ldr	r3, [pc, #32]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b58:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b60:	4904      	ldr	r1, [pc, #16]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008b68:	7cbb      	ldrb	r3, [r7, #18]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3718      	adds	r7, #24
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	40021000 	.word	0x40021000

08008b78 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b82:	2300      	movs	r3, #0
 8008b84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008b86:	4b74      	ldr	r3, [pc, #464]	; (8008d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	f003 0303 	and.w	r3, r3, #3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d018      	beq.n	8008bc4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008b92:	4b71      	ldr	r3, [pc, #452]	; (8008d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	f003 0203 	and.w	r2, r3, #3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d10d      	bne.n	8008bbe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
       ||
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d009      	beq.n	8008bbe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008baa:	4b6b      	ldr	r3, [pc, #428]	; (8008d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	091b      	lsrs	r3, r3, #4
 8008bb0:	f003 0307 	and.w	r3, r3, #7
 8008bb4:	1c5a      	adds	r2, r3, #1
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685b      	ldr	r3, [r3, #4]
       ||
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d047      	beq.n	8008c4e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	73fb      	strb	r3, [r7, #15]
 8008bc2:	e044      	b.n	8008c4e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2b03      	cmp	r3, #3
 8008bca:	d018      	beq.n	8008bfe <RCCEx_PLLSAI1_Config+0x86>
 8008bcc:	2b03      	cmp	r3, #3
 8008bce:	d825      	bhi.n	8008c1c <RCCEx_PLLSAI1_Config+0xa4>
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d002      	beq.n	8008bda <RCCEx_PLLSAI1_Config+0x62>
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d009      	beq.n	8008bec <RCCEx_PLLSAI1_Config+0x74>
 8008bd8:	e020      	b.n	8008c1c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008bda:	4b5f      	ldr	r3, [pc, #380]	; (8008d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 0302 	and.w	r3, r3, #2
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d11d      	bne.n	8008c22 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008bea:	e01a      	b.n	8008c22 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008bec:	4b5a      	ldr	r3, [pc, #360]	; (8008d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d116      	bne.n	8008c26 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008bfc:	e013      	b.n	8008c26 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008bfe:	4b56      	ldr	r3, [pc, #344]	; (8008d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d10f      	bne.n	8008c2a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008c0a:	4b53      	ldr	r3, [pc, #332]	; (8008d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d109      	bne.n	8008c2a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008c1a:	e006      	b.n	8008c2a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c20:	e004      	b.n	8008c2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008c22:	bf00      	nop
 8008c24:	e002      	b.n	8008c2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008c26:	bf00      	nop
 8008c28:	e000      	b.n	8008c2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008c2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8008c2c:	7bfb      	ldrb	r3, [r7, #15]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10d      	bne.n	8008c4e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008c32:	4b49      	ldr	r3, [pc, #292]	; (8008d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6819      	ldr	r1, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	3b01      	subs	r3, #1
 8008c44:	011b      	lsls	r3, r3, #4
 8008c46:	430b      	orrs	r3, r1
 8008c48:	4943      	ldr	r1, [pc, #268]	; (8008d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008c4e:	7bfb      	ldrb	r3, [r7, #15]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d17c      	bne.n	8008d4e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008c54:	4b40      	ldr	r3, [pc, #256]	; (8008d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a3f      	ldr	r2, [pc, #252]	; (8008d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c60:	f7fc fae0 	bl	8005224 <HAL_GetTick>
 8008c64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008c66:	e009      	b.n	8008c7c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008c68:	f7fc fadc 	bl	8005224 <HAL_GetTick>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d902      	bls.n	8008c7c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	73fb      	strb	r3, [r7, #15]
        break;
 8008c7a:	e005      	b.n	8008c88 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008c7c:	4b36      	ldr	r3, [pc, #216]	; (8008d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1ef      	bne.n	8008c68 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d15f      	bne.n	8008d4e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d110      	bne.n	8008cb6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008c94:	4b30      	ldr	r3, [pc, #192]	; (8008d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008c9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	6892      	ldr	r2, [r2, #8]
 8008ca4:	0211      	lsls	r1, r2, #8
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	68d2      	ldr	r2, [r2, #12]
 8008caa:	06d2      	lsls	r2, r2, #27
 8008cac:	430a      	orrs	r2, r1
 8008cae:	492a      	ldr	r1, [pc, #168]	; (8008d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	610b      	str	r3, [r1, #16]
 8008cb4:	e027      	b.n	8008d06 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d112      	bne.n	8008ce2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008cbc:	4b26      	ldr	r3, [pc, #152]	; (8008d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008cc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	6892      	ldr	r2, [r2, #8]
 8008ccc:	0211      	lsls	r1, r2, #8
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	6912      	ldr	r2, [r2, #16]
 8008cd2:	0852      	lsrs	r2, r2, #1
 8008cd4:	3a01      	subs	r2, #1
 8008cd6:	0552      	lsls	r2, r2, #21
 8008cd8:	430a      	orrs	r2, r1
 8008cda:	491f      	ldr	r1, [pc, #124]	; (8008d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	610b      	str	r3, [r1, #16]
 8008ce0:	e011      	b.n	8008d06 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008ce2:	4b1d      	ldr	r3, [pc, #116]	; (8008d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008cea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	6892      	ldr	r2, [r2, #8]
 8008cf2:	0211      	lsls	r1, r2, #8
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	6952      	ldr	r2, [r2, #20]
 8008cf8:	0852      	lsrs	r2, r2, #1
 8008cfa:	3a01      	subs	r2, #1
 8008cfc:	0652      	lsls	r2, r2, #25
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	4915      	ldr	r1, [pc, #84]	; (8008d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d02:	4313      	orrs	r3, r2
 8008d04:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008d06:	4b14      	ldr	r3, [pc, #80]	; (8008d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a13      	ldr	r2, [pc, #76]	; (8008d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d10:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d12:	f7fc fa87 	bl	8005224 <HAL_GetTick>
 8008d16:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008d18:	e009      	b.n	8008d2e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008d1a:	f7fc fa83 	bl	8005224 <HAL_GetTick>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d902      	bls.n	8008d2e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	73fb      	strb	r3, [r7, #15]
          break;
 8008d2c:	e005      	b.n	8008d3a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008d2e:	4b0a      	ldr	r3, [pc, #40]	; (8008d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d0ef      	beq.n	8008d1a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8008d3a:	7bfb      	ldrb	r3, [r7, #15]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d106      	bne.n	8008d4e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008d40:	4b05      	ldr	r3, [pc, #20]	; (8008d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d42:	691a      	ldr	r2, [r3, #16]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	4903      	ldr	r1, [pc, #12]	; (8008d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	40021000 	.word	0x40021000

08008d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d101      	bne.n	8008d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e049      	b.n	8008e02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d106      	bne.n	8008d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f7fc f87c 	bl	8004e80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2202      	movs	r2, #2
 8008d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	3304      	adds	r3, #4
 8008d98:	4619      	mov	r1, r3
 8008d9a:	4610      	mov	r0, r2
 8008d9c:	f000 fcaa 	bl	80096f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
	...

08008e0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d001      	beq.n	8008e24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e20:	2301      	movs	r3, #1
 8008e22:	e03b      	b.n	8008e9c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2202      	movs	r2, #2
 8008e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68da      	ldr	r2, [r3, #12]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f042 0201 	orr.w	r2, r2, #1
 8008e3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a19      	ldr	r2, [pc, #100]	; (8008ea8 <HAL_TIM_Base_Start_IT+0x9c>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d009      	beq.n	8008e5a <HAL_TIM_Base_Start_IT+0x4e>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e4e:	d004      	beq.n	8008e5a <HAL_TIM_Base_Start_IT+0x4e>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a15      	ldr	r2, [pc, #84]	; (8008eac <HAL_TIM_Base_Start_IT+0xa0>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d115      	bne.n	8008e86 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	689a      	ldr	r2, [r3, #8]
 8008e60:	4b13      	ldr	r3, [pc, #76]	; (8008eb0 <HAL_TIM_Base_Start_IT+0xa4>)
 8008e62:	4013      	ands	r3, r2
 8008e64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2b06      	cmp	r3, #6
 8008e6a:	d015      	beq.n	8008e98 <HAL_TIM_Base_Start_IT+0x8c>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e72:	d011      	beq.n	8008e98 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f042 0201 	orr.w	r2, r2, #1
 8008e82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e84:	e008      	b.n	8008e98 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f042 0201 	orr.w	r2, r2, #1
 8008e94:	601a      	str	r2, [r3, #0]
 8008e96:	e000      	b.n	8008e9a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3714      	adds	r7, #20
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr
 8008ea8:	40012c00 	.word	0x40012c00
 8008eac:	40014000 	.word	0x40014000
 8008eb0:	00010007 	.word	0x00010007

08008eb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d101      	bne.n	8008ec6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e049      	b.n	8008f5a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d106      	bne.n	8008ee0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f7fb ff7c 	bl	8004dd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2202      	movs	r2, #2
 8008ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	3304      	adds	r3, #4
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	4610      	mov	r0, r2
 8008ef4:	f000 fbfe 	bl	80096f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
	...

08008f64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d109      	bne.n	8008f88 <HAL_TIM_PWM_Start+0x24>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	bf14      	ite	ne
 8008f80:	2301      	movne	r3, #1
 8008f82:	2300      	moveq	r3, #0
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	e03c      	b.n	8009002 <HAL_TIM_PWM_Start+0x9e>
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	2b04      	cmp	r3, #4
 8008f8c:	d109      	bne.n	8008fa2 <HAL_TIM_PWM_Start+0x3e>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	bf14      	ite	ne
 8008f9a:	2301      	movne	r3, #1
 8008f9c:	2300      	moveq	r3, #0
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	e02f      	b.n	8009002 <HAL_TIM_PWM_Start+0x9e>
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	2b08      	cmp	r3, #8
 8008fa6:	d109      	bne.n	8008fbc <HAL_TIM_PWM_Start+0x58>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	bf14      	ite	ne
 8008fb4:	2301      	movne	r3, #1
 8008fb6:	2300      	moveq	r3, #0
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	e022      	b.n	8009002 <HAL_TIM_PWM_Start+0x9e>
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	2b0c      	cmp	r3, #12
 8008fc0:	d109      	bne.n	8008fd6 <HAL_TIM_PWM_Start+0x72>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	bf14      	ite	ne
 8008fce:	2301      	movne	r3, #1
 8008fd0:	2300      	moveq	r3, #0
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	e015      	b.n	8009002 <HAL_TIM_PWM_Start+0x9e>
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	2b10      	cmp	r3, #16
 8008fda:	d109      	bne.n	8008ff0 <HAL_TIM_PWM_Start+0x8c>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	bf14      	ite	ne
 8008fe8:	2301      	movne	r3, #1
 8008fea:	2300      	moveq	r3, #0
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	e008      	b.n	8009002 <HAL_TIM_PWM_Start+0x9e>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	bf14      	ite	ne
 8008ffc:	2301      	movne	r3, #1
 8008ffe:	2300      	moveq	r3, #0
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e07e      	b.n	8009108 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d104      	bne.n	800901a <HAL_TIM_PWM_Start+0xb6>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2202      	movs	r2, #2
 8009014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009018:	e023      	b.n	8009062 <HAL_TIM_PWM_Start+0xfe>
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b04      	cmp	r3, #4
 800901e:	d104      	bne.n	800902a <HAL_TIM_PWM_Start+0xc6>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2202      	movs	r2, #2
 8009024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009028:	e01b      	b.n	8009062 <HAL_TIM_PWM_Start+0xfe>
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	2b08      	cmp	r3, #8
 800902e:	d104      	bne.n	800903a <HAL_TIM_PWM_Start+0xd6>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2202      	movs	r2, #2
 8009034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009038:	e013      	b.n	8009062 <HAL_TIM_PWM_Start+0xfe>
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	2b0c      	cmp	r3, #12
 800903e:	d104      	bne.n	800904a <HAL_TIM_PWM_Start+0xe6>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2202      	movs	r2, #2
 8009044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009048:	e00b      	b.n	8009062 <HAL_TIM_PWM_Start+0xfe>
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	2b10      	cmp	r3, #16
 800904e:	d104      	bne.n	800905a <HAL_TIM_PWM_Start+0xf6>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2202      	movs	r2, #2
 8009054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009058:	e003      	b.n	8009062 <HAL_TIM_PWM_Start+0xfe>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2202      	movs	r2, #2
 800905e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2201      	movs	r2, #1
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	4618      	mov	r0, r3
 800906c:	f000 fe24 	bl	8009cb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a26      	ldr	r2, [pc, #152]	; (8009110 <HAL_TIM_PWM_Start+0x1ac>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d009      	beq.n	800908e <HAL_TIM_PWM_Start+0x12a>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a25      	ldr	r2, [pc, #148]	; (8009114 <HAL_TIM_PWM_Start+0x1b0>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d004      	beq.n	800908e <HAL_TIM_PWM_Start+0x12a>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a23      	ldr	r2, [pc, #140]	; (8009118 <HAL_TIM_PWM_Start+0x1b4>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d101      	bne.n	8009092 <HAL_TIM_PWM_Start+0x12e>
 800908e:	2301      	movs	r3, #1
 8009090:	e000      	b.n	8009094 <HAL_TIM_PWM_Start+0x130>
 8009092:	2300      	movs	r3, #0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d007      	beq.n	80090a8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a18      	ldr	r2, [pc, #96]	; (8009110 <HAL_TIM_PWM_Start+0x1ac>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d009      	beq.n	80090c6 <HAL_TIM_PWM_Start+0x162>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090ba:	d004      	beq.n	80090c6 <HAL_TIM_PWM_Start+0x162>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a14      	ldr	r2, [pc, #80]	; (8009114 <HAL_TIM_PWM_Start+0x1b0>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d115      	bne.n	80090f2 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	689a      	ldr	r2, [r3, #8]
 80090cc:	4b13      	ldr	r3, [pc, #76]	; (800911c <HAL_TIM_PWM_Start+0x1b8>)
 80090ce:	4013      	ands	r3, r2
 80090d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2b06      	cmp	r3, #6
 80090d6:	d015      	beq.n	8009104 <HAL_TIM_PWM_Start+0x1a0>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090de:	d011      	beq.n	8009104 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f042 0201 	orr.w	r2, r2, #1
 80090ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090f0:	e008      	b.n	8009104 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f042 0201 	orr.w	r2, r2, #1
 8009100:	601a      	str	r2, [r3, #0]
 8009102:	e000      	b.n	8009106 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009104:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	40012c00 	.word	0x40012c00
 8009114:	40014000 	.word	0x40014000
 8009118:	40014400 	.word	0x40014400
 800911c:	00010007 	.word	0x00010007

08009120 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2200      	movs	r2, #0
 8009130:	6839      	ldr	r1, [r7, #0]
 8009132:	4618      	mov	r0, r3
 8009134:	f000 fdc0 	bl	8009cb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a39      	ldr	r2, [pc, #228]	; (8009224 <HAL_TIM_PWM_Stop+0x104>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d009      	beq.n	8009156 <HAL_TIM_PWM_Stop+0x36>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a38      	ldr	r2, [pc, #224]	; (8009228 <HAL_TIM_PWM_Stop+0x108>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d004      	beq.n	8009156 <HAL_TIM_PWM_Stop+0x36>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a36      	ldr	r2, [pc, #216]	; (800922c <HAL_TIM_PWM_Stop+0x10c>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d101      	bne.n	800915a <HAL_TIM_PWM_Stop+0x3a>
 8009156:	2301      	movs	r3, #1
 8009158:	e000      	b.n	800915c <HAL_TIM_PWM_Stop+0x3c>
 800915a:	2300      	movs	r3, #0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d017      	beq.n	8009190 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6a1a      	ldr	r2, [r3, #32]
 8009166:	f241 1311 	movw	r3, #4369	; 0x1111
 800916a:	4013      	ands	r3, r2
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10f      	bne.n	8009190 <HAL_TIM_PWM_Stop+0x70>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6a1a      	ldr	r2, [r3, #32]
 8009176:	f240 4344 	movw	r3, #1092	; 0x444
 800917a:	4013      	ands	r3, r2
 800917c:	2b00      	cmp	r3, #0
 800917e:	d107      	bne.n	8009190 <HAL_TIM_PWM_Stop+0x70>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800918e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	6a1a      	ldr	r2, [r3, #32]
 8009196:	f241 1311 	movw	r3, #4369	; 0x1111
 800919a:	4013      	ands	r3, r2
 800919c:	2b00      	cmp	r3, #0
 800919e:	d10f      	bne.n	80091c0 <HAL_TIM_PWM_Stop+0xa0>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6a1a      	ldr	r2, [r3, #32]
 80091a6:	f240 4344 	movw	r3, #1092	; 0x444
 80091aa:	4013      	ands	r3, r2
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d107      	bne.n	80091c0 <HAL_TIM_PWM_Stop+0xa0>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f022 0201 	bic.w	r2, r2, #1
 80091be:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d104      	bne.n	80091d0 <HAL_TIM_PWM_Stop+0xb0>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2201      	movs	r2, #1
 80091ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091ce:	e023      	b.n	8009218 <HAL_TIM_PWM_Stop+0xf8>
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	2b04      	cmp	r3, #4
 80091d4:	d104      	bne.n	80091e0 <HAL_TIM_PWM_Stop+0xc0>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091de:	e01b      	b.n	8009218 <HAL_TIM_PWM_Stop+0xf8>
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	2b08      	cmp	r3, #8
 80091e4:	d104      	bne.n	80091f0 <HAL_TIM_PWM_Stop+0xd0>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091ee:	e013      	b.n	8009218 <HAL_TIM_PWM_Stop+0xf8>
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	2b0c      	cmp	r3, #12
 80091f4:	d104      	bne.n	8009200 <HAL_TIM_PWM_Stop+0xe0>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2201      	movs	r2, #1
 80091fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80091fe:	e00b      	b.n	8009218 <HAL_TIM_PWM_Stop+0xf8>
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	2b10      	cmp	r3, #16
 8009204:	d104      	bne.n	8009210 <HAL_TIM_PWM_Stop+0xf0>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2201      	movs	r2, #1
 800920a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800920e:	e003      	b.n	8009218 <HAL_TIM_PWM_Stop+0xf8>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3708      	adds	r7, #8
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	40012c00 	.word	0x40012c00
 8009228:	40014000 	.word	0x40014000
 800922c:	40014400 	.word	0x40014400

08009230 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	f003 0302 	and.w	r3, r3, #2
 8009242:	2b02      	cmp	r3, #2
 8009244:	d122      	bne.n	800928c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	f003 0302 	and.w	r3, r3, #2
 8009250:	2b02      	cmp	r3, #2
 8009252:	d11b      	bne.n	800928c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f06f 0202 	mvn.w	r2, #2
 800925c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2201      	movs	r2, #1
 8009262:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	699b      	ldr	r3, [r3, #24]
 800926a:	f003 0303 	and.w	r3, r3, #3
 800926e:	2b00      	cmp	r3, #0
 8009270:	d003      	beq.n	800927a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fa20 	bl	80096b8 <HAL_TIM_IC_CaptureCallback>
 8009278:	e005      	b.n	8009286 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 fa12 	bl	80096a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 fa23 	bl	80096cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	f003 0304 	and.w	r3, r3, #4
 8009296:	2b04      	cmp	r3, #4
 8009298:	d122      	bne.n	80092e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	f003 0304 	and.w	r3, r3, #4
 80092a4:	2b04      	cmp	r3, #4
 80092a6:	d11b      	bne.n	80092e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f06f 0204 	mvn.w	r2, #4
 80092b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2202      	movs	r2, #2
 80092b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	699b      	ldr	r3, [r3, #24]
 80092be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d003      	beq.n	80092ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 f9f6 	bl	80096b8 <HAL_TIM_IC_CaptureCallback>
 80092cc:	e005      	b.n	80092da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f9e8 	bl	80096a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 f9f9 	bl	80096cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	f003 0308 	and.w	r3, r3, #8
 80092ea:	2b08      	cmp	r3, #8
 80092ec:	d122      	bne.n	8009334 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	f003 0308 	and.w	r3, r3, #8
 80092f8:	2b08      	cmp	r3, #8
 80092fa:	d11b      	bne.n	8009334 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f06f 0208 	mvn.w	r2, #8
 8009304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2204      	movs	r2, #4
 800930a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	69db      	ldr	r3, [r3, #28]
 8009312:	f003 0303 	and.w	r3, r3, #3
 8009316:	2b00      	cmp	r3, #0
 8009318:	d003      	beq.n	8009322 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f9cc 	bl	80096b8 <HAL_TIM_IC_CaptureCallback>
 8009320:	e005      	b.n	800932e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f9be 	bl	80096a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 f9cf 	bl	80096cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	f003 0310 	and.w	r3, r3, #16
 800933e:	2b10      	cmp	r3, #16
 8009340:	d122      	bne.n	8009388 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	f003 0310 	and.w	r3, r3, #16
 800934c:	2b10      	cmp	r3, #16
 800934e:	d11b      	bne.n	8009388 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f06f 0210 	mvn.w	r2, #16
 8009358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2208      	movs	r2, #8
 800935e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	69db      	ldr	r3, [r3, #28]
 8009366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800936a:	2b00      	cmp	r3, #0
 800936c:	d003      	beq.n	8009376 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f9a2 	bl	80096b8 <HAL_TIM_IC_CaptureCallback>
 8009374:	e005      	b.n	8009382 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f994 	bl	80096a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 f9a5 	bl	80096cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	f003 0301 	and.w	r3, r3, #1
 8009392:	2b01      	cmp	r3, #1
 8009394:	d10e      	bne.n	80093b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	f003 0301 	and.w	r3, r3, #1
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d107      	bne.n	80093b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f06f 0201 	mvn.w	r2, #1
 80093ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f96e 	bl	8009690 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093be:	2b80      	cmp	r3, #128	; 0x80
 80093c0:	d10e      	bne.n	80093e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093cc:	2b80      	cmp	r3, #128	; 0x80
 80093ce:	d107      	bne.n	80093e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80093d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 fd7a 	bl	8009ed4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093ee:	d10e      	bne.n	800940e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093fa:	2b80      	cmp	r3, #128	; 0x80
 80093fc:	d107      	bne.n	800940e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fd6d 	bl	8009ee8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	691b      	ldr	r3, [r3, #16]
 8009414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009418:	2b40      	cmp	r3, #64	; 0x40
 800941a:	d10e      	bne.n	800943a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009426:	2b40      	cmp	r3, #64	; 0x40
 8009428:	d107      	bne.n	800943a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 f953 	bl	80096e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	f003 0320 	and.w	r3, r3, #32
 8009444:	2b20      	cmp	r3, #32
 8009446:	d10e      	bne.n	8009466 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	f003 0320 	and.w	r3, r3, #32
 8009452:	2b20      	cmp	r3, #32
 8009454:	d107      	bne.n	8009466 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f06f 0220 	mvn.w	r2, #32
 800945e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fd2d 	bl	8009ec0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009466:	bf00      	nop
 8009468:	3708      	adds	r7, #8
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
	...

08009470 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009482:	2b01      	cmp	r3, #1
 8009484:	d101      	bne.n	800948a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009486:	2302      	movs	r3, #2
 8009488:	e0fd      	b.n	8009686 <HAL_TIM_PWM_ConfigChannel+0x216>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2201      	movs	r2, #1
 800948e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2b14      	cmp	r3, #20
 8009496:	f200 80f0 	bhi.w	800967a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800949a:	a201      	add	r2, pc, #4	; (adr r2, 80094a0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800949c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a0:	080094f5 	.word	0x080094f5
 80094a4:	0800967b 	.word	0x0800967b
 80094a8:	0800967b 	.word	0x0800967b
 80094ac:	0800967b 	.word	0x0800967b
 80094b0:	08009535 	.word	0x08009535
 80094b4:	0800967b 	.word	0x0800967b
 80094b8:	0800967b 	.word	0x0800967b
 80094bc:	0800967b 	.word	0x0800967b
 80094c0:	08009577 	.word	0x08009577
 80094c4:	0800967b 	.word	0x0800967b
 80094c8:	0800967b 	.word	0x0800967b
 80094cc:	0800967b 	.word	0x0800967b
 80094d0:	080095b7 	.word	0x080095b7
 80094d4:	0800967b 	.word	0x0800967b
 80094d8:	0800967b 	.word	0x0800967b
 80094dc:	0800967b 	.word	0x0800967b
 80094e0:	080095f9 	.word	0x080095f9
 80094e4:	0800967b 	.word	0x0800967b
 80094e8:	0800967b 	.word	0x0800967b
 80094ec:	0800967b 	.word	0x0800967b
 80094f0:	08009639 	.word	0x08009639
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68b9      	ldr	r1, [r7, #8]
 80094fa:	4618      	mov	r0, r3
 80094fc:	f000 f95e 	bl	80097bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	699a      	ldr	r2, [r3, #24]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f042 0208 	orr.w	r2, r2, #8
 800950e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	699a      	ldr	r2, [r3, #24]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f022 0204 	bic.w	r2, r2, #4
 800951e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	6999      	ldr	r1, [r3, #24]
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	691a      	ldr	r2, [r3, #16]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	430a      	orrs	r2, r1
 8009530:	619a      	str	r2, [r3, #24]
      break;
 8009532:	e0a3      	b.n	800967c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68b9      	ldr	r1, [r7, #8]
 800953a:	4618      	mov	r0, r3
 800953c:	f000 f9ba 	bl	80098b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	699a      	ldr	r2, [r3, #24]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800954e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	699a      	ldr	r2, [r3, #24]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800955e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	6999      	ldr	r1, [r3, #24]
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	021a      	lsls	r2, r3, #8
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	430a      	orrs	r2, r1
 8009572:	619a      	str	r2, [r3, #24]
      break;
 8009574:	e082      	b.n	800967c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68b9      	ldr	r1, [r7, #8]
 800957c:	4618      	mov	r0, r3
 800957e:	f000 fa13 	bl	80099a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	69da      	ldr	r2, [r3, #28]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f042 0208 	orr.w	r2, r2, #8
 8009590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	69da      	ldr	r2, [r3, #28]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f022 0204 	bic.w	r2, r2, #4
 80095a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	69d9      	ldr	r1, [r3, #28]
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	691a      	ldr	r2, [r3, #16]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	430a      	orrs	r2, r1
 80095b2:	61da      	str	r2, [r3, #28]
      break;
 80095b4:	e062      	b.n	800967c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68b9      	ldr	r1, [r7, #8]
 80095bc:	4618      	mov	r0, r3
 80095be:	f000 fa6b 	bl	8009a98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	69da      	ldr	r2, [r3, #28]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	69da      	ldr	r2, [r3, #28]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	69d9      	ldr	r1, [r3, #28]
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	691b      	ldr	r3, [r3, #16]
 80095ec:	021a      	lsls	r2, r3, #8
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	430a      	orrs	r2, r1
 80095f4:	61da      	str	r2, [r3, #28]
      break;
 80095f6:	e041      	b.n	800967c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68b9      	ldr	r1, [r7, #8]
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 faa8 	bl	8009b54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f042 0208 	orr.w	r2, r2, #8
 8009612:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f022 0204 	bic.w	r2, r2, #4
 8009622:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	691a      	ldr	r2, [r3, #16]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	430a      	orrs	r2, r1
 8009634:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009636:	e021      	b.n	800967c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	68b9      	ldr	r1, [r7, #8]
 800963e:	4618      	mov	r0, r3
 8009640:	f000 fae0 	bl	8009c04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009652:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009662:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	021a      	lsls	r2, r3, #8
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	430a      	orrs	r2, r1
 8009676:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009678:	e000      	b.n	800967c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800967a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop

08009690 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009698:	bf00      	nop
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80096c0:	bf00      	nop
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80096e8:	bf00      	nop
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a2a      	ldr	r2, [pc, #168]	; (80097b0 <TIM_Base_SetConfig+0xbc>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d003      	beq.n	8009714 <TIM_Base_SetConfig+0x20>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009712:	d108      	bne.n	8009726 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800971a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	4313      	orrs	r3, r2
 8009724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4a21      	ldr	r2, [pc, #132]	; (80097b0 <TIM_Base_SetConfig+0xbc>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d00b      	beq.n	8009746 <TIM_Base_SetConfig+0x52>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009734:	d007      	beq.n	8009746 <TIM_Base_SetConfig+0x52>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a1e      	ldr	r2, [pc, #120]	; (80097b4 <TIM_Base_SetConfig+0xc0>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d003      	beq.n	8009746 <TIM_Base_SetConfig+0x52>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a1d      	ldr	r2, [pc, #116]	; (80097b8 <TIM_Base_SetConfig+0xc4>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d108      	bne.n	8009758 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800974c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	4313      	orrs	r3, r2
 8009756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	4313      	orrs	r3, r2
 8009764:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	689a      	ldr	r2, [r3, #8]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a0c      	ldr	r2, [pc, #48]	; (80097b0 <TIM_Base_SetConfig+0xbc>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d007      	beq.n	8009794 <TIM_Base_SetConfig+0xa0>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4a0b      	ldr	r2, [pc, #44]	; (80097b4 <TIM_Base_SetConfig+0xc0>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d003      	beq.n	8009794 <TIM_Base_SetConfig+0xa0>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a0a      	ldr	r2, [pc, #40]	; (80097b8 <TIM_Base_SetConfig+0xc4>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d103      	bne.n	800979c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	691a      	ldr	r2, [r3, #16]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	615a      	str	r2, [r3, #20]
}
 80097a2:	bf00      	nop
 80097a4:	3714      	adds	r7, #20
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop
 80097b0:	40012c00 	.word	0x40012c00
 80097b4:	40014000 	.word	0x40014000
 80097b8:	40014400 	.word	0x40014400

080097bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097bc:	b480      	push	{r7}
 80097be:	b087      	sub	sp, #28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	f023 0201 	bic.w	r2, r3, #1
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	699b      	ldr	r3, [r3, #24]
 80097e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f023 0303 	bic.w	r3, r3, #3
 80097f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	4313      	orrs	r3, r2
 8009800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	f023 0302 	bic.w	r3, r3, #2
 8009808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	4313      	orrs	r3, r2
 8009812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a24      	ldr	r2, [pc, #144]	; (80098a8 <TIM_OC1_SetConfig+0xec>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d007      	beq.n	800982c <TIM_OC1_SetConfig+0x70>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a23      	ldr	r2, [pc, #140]	; (80098ac <TIM_OC1_SetConfig+0xf0>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d003      	beq.n	800982c <TIM_OC1_SetConfig+0x70>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a22      	ldr	r2, [pc, #136]	; (80098b0 <TIM_OC1_SetConfig+0xf4>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d10c      	bne.n	8009846 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	f023 0308 	bic.w	r3, r3, #8
 8009832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	697a      	ldr	r2, [r7, #20]
 800983a:	4313      	orrs	r3, r2
 800983c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	f023 0304 	bic.w	r3, r3, #4
 8009844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a17      	ldr	r2, [pc, #92]	; (80098a8 <TIM_OC1_SetConfig+0xec>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d007      	beq.n	800985e <TIM_OC1_SetConfig+0xa2>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a16      	ldr	r2, [pc, #88]	; (80098ac <TIM_OC1_SetConfig+0xf0>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d003      	beq.n	800985e <TIM_OC1_SetConfig+0xa2>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a15      	ldr	r2, [pc, #84]	; (80098b0 <TIM_OC1_SetConfig+0xf4>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d111      	bne.n	8009882 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800986c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	695b      	ldr	r3, [r3, #20]
 8009872:	693a      	ldr	r2, [r7, #16]
 8009874:	4313      	orrs	r3, r2
 8009876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	699b      	ldr	r3, [r3, #24]
 800987c:	693a      	ldr	r2, [r7, #16]
 800987e:	4313      	orrs	r3, r2
 8009880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	693a      	ldr	r2, [r7, #16]
 8009886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	685a      	ldr	r2, [r3, #4]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	621a      	str	r2, [r3, #32]
}
 800989c:	bf00      	nop
 800989e:	371c      	adds	r7, #28
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr
 80098a8:	40012c00 	.word	0x40012c00
 80098ac:	40014000 	.word	0x40014000
 80098b0:	40014400 	.word	0x40014400

080098b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b087      	sub	sp, #28
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a1b      	ldr	r3, [r3, #32]
 80098c2:	f023 0210 	bic.w	r2, r3, #16
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	021b      	lsls	r3, r3, #8
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	f023 0320 	bic.w	r3, r3, #32
 8009902:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	011b      	lsls	r3, r3, #4
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	4313      	orrs	r3, r2
 800990e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a22      	ldr	r2, [pc, #136]	; (800999c <TIM_OC2_SetConfig+0xe8>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d10d      	bne.n	8009934 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800991e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	011b      	lsls	r3, r3, #4
 8009926:	697a      	ldr	r2, [r7, #20]
 8009928:	4313      	orrs	r3, r2
 800992a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009932:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a19      	ldr	r2, [pc, #100]	; (800999c <TIM_OC2_SetConfig+0xe8>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d007      	beq.n	800994c <TIM_OC2_SetConfig+0x98>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a18      	ldr	r2, [pc, #96]	; (80099a0 <TIM_OC2_SetConfig+0xec>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d003      	beq.n	800994c <TIM_OC2_SetConfig+0x98>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4a17      	ldr	r2, [pc, #92]	; (80099a4 <TIM_OC2_SetConfig+0xf0>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d113      	bne.n	8009974 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009952:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800995a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	695b      	ldr	r3, [r3, #20]
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	693a      	ldr	r2, [r7, #16]
 8009964:	4313      	orrs	r3, r2
 8009966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	699b      	ldr	r3, [r3, #24]
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	693a      	ldr	r2, [r7, #16]
 8009970:	4313      	orrs	r3, r2
 8009972:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	693a      	ldr	r2, [r7, #16]
 8009978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	685a      	ldr	r2, [r3, #4]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	697a      	ldr	r2, [r7, #20]
 800998c:	621a      	str	r2, [r3, #32]
}
 800998e:	bf00      	nop
 8009990:	371c      	adds	r7, #28
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	40012c00 	.word	0x40012c00
 80099a0:	40014000 	.word	0x40014000
 80099a4:	40014400 	.word	0x40014400

080099a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b087      	sub	sp, #28
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a1b      	ldr	r3, [r3, #32]
 80099b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a1b      	ldr	r3, [r3, #32]
 80099c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	69db      	ldr	r3, [r3, #28]
 80099ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f023 0303 	bic.w	r3, r3, #3
 80099e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	021b      	lsls	r3, r3, #8
 80099fc:	697a      	ldr	r2, [r7, #20]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a21      	ldr	r2, [pc, #132]	; (8009a8c <TIM_OC3_SetConfig+0xe4>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d10d      	bne.n	8009a26 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	021b      	lsls	r3, r3, #8
 8009a18:	697a      	ldr	r2, [r7, #20]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4a18      	ldr	r2, [pc, #96]	; (8009a8c <TIM_OC3_SetConfig+0xe4>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d007      	beq.n	8009a3e <TIM_OC3_SetConfig+0x96>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a17      	ldr	r2, [pc, #92]	; (8009a90 <TIM_OC3_SetConfig+0xe8>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d003      	beq.n	8009a3e <TIM_OC3_SetConfig+0x96>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a16      	ldr	r2, [pc, #88]	; (8009a94 <TIM_OC3_SetConfig+0xec>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d113      	bne.n	8009a66 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	695b      	ldr	r3, [r3, #20]
 8009a52:	011b      	lsls	r3, r3, #4
 8009a54:	693a      	ldr	r2, [r7, #16]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	699b      	ldr	r3, [r3, #24]
 8009a5e:	011b      	lsls	r3, r3, #4
 8009a60:	693a      	ldr	r2, [r7, #16]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	693a      	ldr	r2, [r7, #16]
 8009a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	685a      	ldr	r2, [r3, #4]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	697a      	ldr	r2, [r7, #20]
 8009a7e:	621a      	str	r2, [r3, #32]
}
 8009a80:	bf00      	nop
 8009a82:	371c      	adds	r7, #28
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	40012c00 	.word	0x40012c00
 8009a90:	40014000 	.word	0x40014000
 8009a94:	40014400 	.word	0x40014400

08009a98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b087      	sub	sp, #28
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6a1b      	ldr	r3, [r3, #32]
 8009aa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6a1b      	ldr	r3, [r3, #32]
 8009ab2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	69db      	ldr	r3, [r3, #28]
 8009abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	021b      	lsls	r3, r3, #8
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ae6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	031b      	lsls	r3, r3, #12
 8009aee:	693a      	ldr	r2, [r7, #16]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a14      	ldr	r2, [pc, #80]	; (8009b48 <TIM_OC4_SetConfig+0xb0>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d007      	beq.n	8009b0c <TIM_OC4_SetConfig+0x74>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a13      	ldr	r2, [pc, #76]	; (8009b4c <TIM_OC4_SetConfig+0xb4>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d003      	beq.n	8009b0c <TIM_OC4_SetConfig+0x74>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4a12      	ldr	r2, [pc, #72]	; (8009b50 <TIM_OC4_SetConfig+0xb8>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d109      	bne.n	8009b20 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	695b      	ldr	r3, [r3, #20]
 8009b18:	019b      	lsls	r3, r3, #6
 8009b1a:	697a      	ldr	r2, [r7, #20]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	697a      	ldr	r2, [r7, #20]
 8009b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	685a      	ldr	r2, [r3, #4]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	693a      	ldr	r2, [r7, #16]
 8009b38:	621a      	str	r2, [r3, #32]
}
 8009b3a:	bf00      	nop
 8009b3c:	371c      	adds	r7, #28
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	40012c00 	.word	0x40012c00
 8009b4c:	40014000 	.word	0x40014000
 8009b50:	40014400 	.word	0x40014400

08009b54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b087      	sub	sp, #28
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a1b      	ldr	r3, [r3, #32]
 8009b62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009b98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	041b      	lsls	r3, r3, #16
 8009ba0:	693a      	ldr	r2, [r7, #16]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	4a13      	ldr	r2, [pc, #76]	; (8009bf8 <TIM_OC5_SetConfig+0xa4>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d007      	beq.n	8009bbe <TIM_OC5_SetConfig+0x6a>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	4a12      	ldr	r2, [pc, #72]	; (8009bfc <TIM_OC5_SetConfig+0xa8>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d003      	beq.n	8009bbe <TIM_OC5_SetConfig+0x6a>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4a11      	ldr	r2, [pc, #68]	; (8009c00 <TIM_OC5_SetConfig+0xac>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d109      	bne.n	8009bd2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	695b      	ldr	r3, [r3, #20]
 8009bca:	021b      	lsls	r3, r3, #8
 8009bcc:	697a      	ldr	r2, [r7, #20]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	697a      	ldr	r2, [r7, #20]
 8009bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	685a      	ldr	r2, [r3, #4]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	621a      	str	r2, [r3, #32]
}
 8009bec:	bf00      	nop
 8009bee:	371c      	adds	r7, #28
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr
 8009bf8:	40012c00 	.word	0x40012c00
 8009bfc:	40014000 	.word	0x40014000
 8009c00:	40014400 	.word	0x40014400

08009c04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b087      	sub	sp, #28
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a1b      	ldr	r3, [r3, #32]
 8009c12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6a1b      	ldr	r3, [r3, #32]
 8009c1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	021b      	lsls	r3, r3, #8
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	4313      	orrs	r3, r2
 8009c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	051b      	lsls	r3, r3, #20
 8009c52:	693a      	ldr	r2, [r7, #16]
 8009c54:	4313      	orrs	r3, r2
 8009c56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a14      	ldr	r2, [pc, #80]	; (8009cac <TIM_OC6_SetConfig+0xa8>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d007      	beq.n	8009c70 <TIM_OC6_SetConfig+0x6c>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a13      	ldr	r2, [pc, #76]	; (8009cb0 <TIM_OC6_SetConfig+0xac>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d003      	beq.n	8009c70 <TIM_OC6_SetConfig+0x6c>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a12      	ldr	r2, [pc, #72]	; (8009cb4 <TIM_OC6_SetConfig+0xb0>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d109      	bne.n	8009c84 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	695b      	ldr	r3, [r3, #20]
 8009c7c:	029b      	lsls	r3, r3, #10
 8009c7e:	697a      	ldr	r2, [r7, #20]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	685a      	ldr	r2, [r3, #4]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	693a      	ldr	r2, [r7, #16]
 8009c9c:	621a      	str	r2, [r3, #32]
}
 8009c9e:	bf00      	nop
 8009ca0:	371c      	adds	r7, #28
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	40012c00 	.word	0x40012c00
 8009cb0:	40014000 	.word	0x40014000
 8009cb4:	40014400 	.word	0x40014400

08009cb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b087      	sub	sp, #28
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	f003 031f 	and.w	r3, r3, #31
 8009cca:	2201      	movs	r2, #1
 8009ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6a1a      	ldr	r2, [r3, #32]
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	43db      	mvns	r3, r3
 8009cda:	401a      	ands	r2, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6a1a      	ldr	r2, [r3, #32]
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	f003 031f 	and.w	r3, r3, #31
 8009cea:	6879      	ldr	r1, [r7, #4]
 8009cec:	fa01 f303 	lsl.w	r3, r1, r3
 8009cf0:	431a      	orrs	r2, r3
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	621a      	str	r2, [r3, #32]
}
 8009cf6:	bf00      	nop
 8009cf8:	371c      	adds	r7, #28
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
	...

08009d04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d101      	bne.n	8009d1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d18:	2302      	movs	r3, #2
 8009d1a:	e04f      	b.n	8009dbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2202      	movs	r2, #2
 8009d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a21      	ldr	r2, [pc, #132]	; (8009dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d108      	bne.n	8009d58 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009d4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a14      	ldr	r2, [pc, #80]	; (8009dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d009      	beq.n	8009d90 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d84:	d004      	beq.n	8009d90 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a10      	ldr	r2, [pc, #64]	; (8009dcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d10c      	bne.n	8009daa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2201      	movs	r2, #1
 8009dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3714      	adds	r7, #20
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr
 8009dc8:	40012c00 	.word	0x40012c00
 8009dcc:	40014000 	.word	0x40014000

08009dd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b085      	sub	sp, #20
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d101      	bne.n	8009dec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009de8:	2302      	movs	r3, #2
 8009dea:	e060      	b.n	8009eae <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2201      	movs	r2, #1
 8009df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	4313      	orrs	r3, r2
 8009e38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	695b      	ldr	r3, [r3, #20]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e52:	4313      	orrs	r3, r2
 8009e54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	699b      	ldr	r3, [r3, #24]
 8009e60:	041b      	lsls	r3, r3, #16
 8009e62:	4313      	orrs	r3, r2
 8009e64:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a14      	ldr	r2, [pc, #80]	; (8009ebc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d115      	bne.n	8009e9c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7a:	051b      	lsls	r3, r3, #20
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	69db      	ldr	r3, [r3, #28]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	6a1b      	ldr	r3, [r3, #32]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	40012c00 	.word	0x40012c00

08009ec0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ec8:	bf00      	nop
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009edc:	bf00      	nop
 8009ede:	370c      	adds	r7, #12
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009ef0:	bf00      	nop
 8009ef2:	370c      	adds	r7, #12
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d101      	bne.n	8009f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e040      	b.n	8009f90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d106      	bne.n	8009f24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f7fb f884 	bl	800502c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2224      	movs	r2, #36	; 0x24
 8009f28:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f022 0201 	bic.w	r2, r2, #1
 8009f38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f8c0 	bl	800a0c0 <UART_SetConfig>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d101      	bne.n	8009f4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	e022      	b.n	8009f90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d002      	beq.n	8009f58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 fae2 	bl	800a51c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	685a      	ldr	r2, [r3, #4]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	689a      	ldr	r2, [r3, #8]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f042 0201 	orr.w	r2, r2, #1
 8009f86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 fb69 	bl	800a660 <UART_CheckIdleState>
 8009f8e:	4603      	mov	r3, r0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b08a      	sub	sp, #40	; 0x28
 8009f9c:	af02      	add	r7, sp, #8
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	603b      	str	r3, [r7, #0]
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fac:	2b20      	cmp	r3, #32
 8009fae:	f040 8082 	bne.w	800a0b6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d002      	beq.n	8009fbe <HAL_UART_Transmit+0x26>
 8009fb8:	88fb      	ldrh	r3, [r7, #6]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d101      	bne.n	8009fc2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e07a      	b.n	800a0b8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d101      	bne.n	8009fd0 <HAL_UART_Transmit+0x38>
 8009fcc:	2302      	movs	r3, #2
 8009fce:	e073      	b.n	800a0b8 <HAL_UART_Transmit+0x120>
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2221      	movs	r2, #33	; 0x21
 8009fe4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009fe6:	f7fb f91d 	bl	8005224 <HAL_GetTick>
 8009fea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	88fa      	ldrh	r2, [r7, #6]
 8009ff0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	88fa      	ldrh	r2, [r7, #6]
 8009ff8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a004:	d108      	bne.n	800a018 <HAL_UART_Transmit+0x80>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d104      	bne.n	800a018 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a00e:	2300      	movs	r3, #0
 800a010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	61bb      	str	r3, [r7, #24]
 800a016:	e003      	b.n	800a020 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a01c:	2300      	movs	r3, #0
 800a01e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2200      	movs	r2, #0
 800a024:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a028:	e02d      	b.n	800a086 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	9300      	str	r3, [sp, #0]
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	2200      	movs	r2, #0
 800a032:	2180      	movs	r1, #128	; 0x80
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	f000 fb5c 	bl	800a6f2 <UART_WaitOnFlagUntilTimeout>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d001      	beq.n	800a044 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a040:	2303      	movs	r3, #3
 800a042:	e039      	b.n	800a0b8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d10b      	bne.n	800a062 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	881a      	ldrh	r2, [r3, #0]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a056:	b292      	uxth	r2, r2
 800a058:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	3302      	adds	r3, #2
 800a05e:	61bb      	str	r3, [r7, #24]
 800a060:	e008      	b.n	800a074 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	781a      	ldrb	r2, [r3, #0]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	b292      	uxth	r2, r2
 800a06c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	3301      	adds	r3, #1
 800a072:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	3b01      	subs	r3, #1
 800a07e:	b29a      	uxth	r2, r3
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1cb      	bne.n	800a02a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	2200      	movs	r2, #0
 800a09a:	2140      	movs	r1, #64	; 0x40
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f000 fb28 	bl	800a6f2 <UART_WaitOnFlagUntilTimeout>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d001      	beq.n	800a0ac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	e005      	b.n	800a0b8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2220      	movs	r2, #32
 800a0b0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	e000      	b.n	800a0b8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a0b6:	2302      	movs	r3, #2
  }
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3720      	adds	r7, #32
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0c4:	b08a      	sub	sp, #40	; 0x28
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	689a      	ldr	r2, [r3, #8]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	431a      	orrs	r2, r3
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	695b      	ldr	r3, [r3, #20]
 800a0de:	431a      	orrs	r2, r3
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	69db      	ldr	r3, [r3, #28]
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	4bb4      	ldr	r3, [pc, #720]	; (800a3c0 <UART_SetConfig+0x300>)
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	68fa      	ldr	r2, [r7, #12]
 800a0f4:	6812      	ldr	r2, [r2, #0]
 800a0f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a0f8:	430b      	orrs	r3, r1
 800a0fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	68da      	ldr	r2, [r3, #12]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	430a      	orrs	r2, r1
 800a110:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	699b      	ldr	r3, [r3, #24]
 800a116:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4aa9      	ldr	r2, [pc, #676]	; (800a3c4 <UART_SetConfig+0x304>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d004      	beq.n	800a12c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6a1b      	ldr	r3, [r3, #32]
 800a126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a128:	4313      	orrs	r3, r2
 800a12a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a13c:	430a      	orrs	r2, r1
 800a13e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4aa0      	ldr	r2, [pc, #640]	; (800a3c8 <UART_SetConfig+0x308>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d126      	bne.n	800a198 <UART_SetConfig+0xd8>
 800a14a:	4ba0      	ldr	r3, [pc, #640]	; (800a3cc <UART_SetConfig+0x30c>)
 800a14c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a150:	f003 0303 	and.w	r3, r3, #3
 800a154:	2b03      	cmp	r3, #3
 800a156:	d81b      	bhi.n	800a190 <UART_SetConfig+0xd0>
 800a158:	a201      	add	r2, pc, #4	; (adr r2, 800a160 <UART_SetConfig+0xa0>)
 800a15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a15e:	bf00      	nop
 800a160:	0800a171 	.word	0x0800a171
 800a164:	0800a181 	.word	0x0800a181
 800a168:	0800a179 	.word	0x0800a179
 800a16c:	0800a189 	.word	0x0800a189
 800a170:	2301      	movs	r3, #1
 800a172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a176:	e080      	b.n	800a27a <UART_SetConfig+0x1ba>
 800a178:	2302      	movs	r3, #2
 800a17a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a17e:	e07c      	b.n	800a27a <UART_SetConfig+0x1ba>
 800a180:	2304      	movs	r3, #4
 800a182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a186:	e078      	b.n	800a27a <UART_SetConfig+0x1ba>
 800a188:	2308      	movs	r3, #8
 800a18a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a18e:	e074      	b.n	800a27a <UART_SetConfig+0x1ba>
 800a190:	2310      	movs	r3, #16
 800a192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a196:	e070      	b.n	800a27a <UART_SetConfig+0x1ba>
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a8c      	ldr	r2, [pc, #560]	; (800a3d0 <UART_SetConfig+0x310>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d138      	bne.n	800a214 <UART_SetConfig+0x154>
 800a1a2:	4b8a      	ldr	r3, [pc, #552]	; (800a3cc <UART_SetConfig+0x30c>)
 800a1a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1a8:	f003 030c 	and.w	r3, r3, #12
 800a1ac:	2b0c      	cmp	r3, #12
 800a1ae:	d82d      	bhi.n	800a20c <UART_SetConfig+0x14c>
 800a1b0:	a201      	add	r2, pc, #4	; (adr r2, 800a1b8 <UART_SetConfig+0xf8>)
 800a1b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b6:	bf00      	nop
 800a1b8:	0800a1ed 	.word	0x0800a1ed
 800a1bc:	0800a20d 	.word	0x0800a20d
 800a1c0:	0800a20d 	.word	0x0800a20d
 800a1c4:	0800a20d 	.word	0x0800a20d
 800a1c8:	0800a1fd 	.word	0x0800a1fd
 800a1cc:	0800a20d 	.word	0x0800a20d
 800a1d0:	0800a20d 	.word	0x0800a20d
 800a1d4:	0800a20d 	.word	0x0800a20d
 800a1d8:	0800a1f5 	.word	0x0800a1f5
 800a1dc:	0800a20d 	.word	0x0800a20d
 800a1e0:	0800a20d 	.word	0x0800a20d
 800a1e4:	0800a20d 	.word	0x0800a20d
 800a1e8:	0800a205 	.word	0x0800a205
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1f2:	e042      	b.n	800a27a <UART_SetConfig+0x1ba>
 800a1f4:	2302      	movs	r3, #2
 800a1f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1fa:	e03e      	b.n	800a27a <UART_SetConfig+0x1ba>
 800a1fc:	2304      	movs	r3, #4
 800a1fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a202:	e03a      	b.n	800a27a <UART_SetConfig+0x1ba>
 800a204:	2308      	movs	r3, #8
 800a206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a20a:	e036      	b.n	800a27a <UART_SetConfig+0x1ba>
 800a20c:	2310      	movs	r3, #16
 800a20e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a212:	e032      	b.n	800a27a <UART_SetConfig+0x1ba>
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a6a      	ldr	r2, [pc, #424]	; (800a3c4 <UART_SetConfig+0x304>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d12a      	bne.n	800a274 <UART_SetConfig+0x1b4>
 800a21e:	4b6b      	ldr	r3, [pc, #428]	; (800a3cc <UART_SetConfig+0x30c>)
 800a220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a224:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a228:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a22c:	d01a      	beq.n	800a264 <UART_SetConfig+0x1a4>
 800a22e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a232:	d81b      	bhi.n	800a26c <UART_SetConfig+0x1ac>
 800a234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a238:	d00c      	beq.n	800a254 <UART_SetConfig+0x194>
 800a23a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a23e:	d815      	bhi.n	800a26c <UART_SetConfig+0x1ac>
 800a240:	2b00      	cmp	r3, #0
 800a242:	d003      	beq.n	800a24c <UART_SetConfig+0x18c>
 800a244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a248:	d008      	beq.n	800a25c <UART_SetConfig+0x19c>
 800a24a:	e00f      	b.n	800a26c <UART_SetConfig+0x1ac>
 800a24c:	2300      	movs	r3, #0
 800a24e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a252:	e012      	b.n	800a27a <UART_SetConfig+0x1ba>
 800a254:	2302      	movs	r3, #2
 800a256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a25a:	e00e      	b.n	800a27a <UART_SetConfig+0x1ba>
 800a25c:	2304      	movs	r3, #4
 800a25e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a262:	e00a      	b.n	800a27a <UART_SetConfig+0x1ba>
 800a264:	2308      	movs	r3, #8
 800a266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a26a:	e006      	b.n	800a27a <UART_SetConfig+0x1ba>
 800a26c:	2310      	movs	r3, #16
 800a26e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a272:	e002      	b.n	800a27a <UART_SetConfig+0x1ba>
 800a274:	2310      	movs	r3, #16
 800a276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a51      	ldr	r2, [pc, #324]	; (800a3c4 <UART_SetConfig+0x304>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d17a      	bne.n	800a37a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a284:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a288:	2b08      	cmp	r3, #8
 800a28a:	d824      	bhi.n	800a2d6 <UART_SetConfig+0x216>
 800a28c:	a201      	add	r2, pc, #4	; (adr r2, 800a294 <UART_SetConfig+0x1d4>)
 800a28e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a292:	bf00      	nop
 800a294:	0800a2b9 	.word	0x0800a2b9
 800a298:	0800a2d7 	.word	0x0800a2d7
 800a29c:	0800a2c1 	.word	0x0800a2c1
 800a2a0:	0800a2d7 	.word	0x0800a2d7
 800a2a4:	0800a2c7 	.word	0x0800a2c7
 800a2a8:	0800a2d7 	.word	0x0800a2d7
 800a2ac:	0800a2d7 	.word	0x0800a2d7
 800a2b0:	0800a2d7 	.word	0x0800a2d7
 800a2b4:	0800a2cf 	.word	0x0800a2cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2b8:	f7fe f9dc 	bl	8008674 <HAL_RCC_GetPCLK1Freq>
 800a2bc:	61f8      	str	r0, [r7, #28]
        break;
 800a2be:	e010      	b.n	800a2e2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2c0:	4b44      	ldr	r3, [pc, #272]	; (800a3d4 <UART_SetConfig+0x314>)
 800a2c2:	61fb      	str	r3, [r7, #28]
        break;
 800a2c4:	e00d      	b.n	800a2e2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2c6:	f7fe f93d 	bl	8008544 <HAL_RCC_GetSysClockFreq>
 800a2ca:	61f8      	str	r0, [r7, #28]
        break;
 800a2cc:	e009      	b.n	800a2e2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2d2:	61fb      	str	r3, [r7, #28]
        break;
 800a2d4:	e005      	b.n	800a2e2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a2e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	f000 8109 	beq.w	800a4fc <UART_SetConfig+0x43c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	685a      	ldr	r2, [r3, #4]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	005b      	lsls	r3, r3, #1
 800a2f2:	4413      	add	r3, r2
 800a2f4:	69fa      	ldr	r2, [r7, #28]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d305      	bcc.n	800a306 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a300:	69fa      	ldr	r2, [r7, #28]
 800a302:	429a      	cmp	r2, r3
 800a304:	d903      	bls.n	800a30e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a30c:	e0f6      	b.n	800a4fc <UART_SetConfig+0x43c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	2200      	movs	r2, #0
 800a312:	461c      	mov	r4, r3
 800a314:	4615      	mov	r5, r2
 800a316:	f04f 0200 	mov.w	r2, #0
 800a31a:	f04f 0300 	mov.w	r3, #0
 800a31e:	022b      	lsls	r3, r5, #8
 800a320:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a324:	0222      	lsls	r2, r4, #8
 800a326:	68f9      	ldr	r1, [r7, #12]
 800a328:	6849      	ldr	r1, [r1, #4]
 800a32a:	0849      	lsrs	r1, r1, #1
 800a32c:	2000      	movs	r0, #0
 800a32e:	4688      	mov	r8, r1
 800a330:	4681      	mov	r9, r0
 800a332:	eb12 0a08 	adds.w	sl, r2, r8
 800a336:	eb43 0b09 	adc.w	fp, r3, r9
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	603b      	str	r3, [r7, #0]
 800a342:	607a      	str	r2, [r7, #4]
 800a344:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a348:	4650      	mov	r0, sl
 800a34a:	4659      	mov	r1, fp
 800a34c:	f7f6 fc9c 	bl	8000c88 <__aeabi_uldivmod>
 800a350:	4602      	mov	r2, r0
 800a352:	460b      	mov	r3, r1
 800a354:	4613      	mov	r3, r2
 800a356:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a35e:	d308      	bcc.n	800a372 <UART_SetConfig+0x2b2>
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a366:	d204      	bcs.n	800a372 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	69ba      	ldr	r2, [r7, #24]
 800a36e:	60da      	str	r2, [r3, #12]
 800a370:	e0c4      	b.n	800a4fc <UART_SetConfig+0x43c>
        }
        else
        {
          ret = HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a378:	e0c0      	b.n	800a4fc <UART_SetConfig+0x43c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	69db      	ldr	r3, [r3, #28]
 800a37e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a382:	d16b      	bne.n	800a45c <UART_SetConfig+0x39c>
  {
    switch (clocksource)
 800a384:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a388:	2b08      	cmp	r3, #8
 800a38a:	d834      	bhi.n	800a3f6 <UART_SetConfig+0x336>
 800a38c:	a201      	add	r2, pc, #4	; (adr r2, 800a394 <UART_SetConfig+0x2d4>)
 800a38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a392:	bf00      	nop
 800a394:	0800a3b9 	.word	0x0800a3b9
 800a398:	0800a3d9 	.word	0x0800a3d9
 800a39c:	0800a3e1 	.word	0x0800a3e1
 800a3a0:	0800a3f7 	.word	0x0800a3f7
 800a3a4:	0800a3e7 	.word	0x0800a3e7
 800a3a8:	0800a3f7 	.word	0x0800a3f7
 800a3ac:	0800a3f7 	.word	0x0800a3f7
 800a3b0:	0800a3f7 	.word	0x0800a3f7
 800a3b4:	0800a3ef 	.word	0x0800a3ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3b8:	f7fe f95c 	bl	8008674 <HAL_RCC_GetPCLK1Freq>
 800a3bc:	61f8      	str	r0, [r7, #28]
        break;
 800a3be:	e020      	b.n	800a402 <UART_SetConfig+0x342>
 800a3c0:	efff69f3 	.word	0xefff69f3
 800a3c4:	40008000 	.word	0x40008000
 800a3c8:	40013800 	.word	0x40013800
 800a3cc:	40021000 	.word	0x40021000
 800a3d0:	40004400 	.word	0x40004400
 800a3d4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3d8:	f7fe f962 	bl	80086a0 <HAL_RCC_GetPCLK2Freq>
 800a3dc:	61f8      	str	r0, [r7, #28]
        break;
 800a3de:	e010      	b.n	800a402 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3e0:	4b4d      	ldr	r3, [pc, #308]	; (800a518 <UART_SetConfig+0x458>)
 800a3e2:	61fb      	str	r3, [r7, #28]
        break;
 800a3e4:	e00d      	b.n	800a402 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3e6:	f7fe f8ad 	bl	8008544 <HAL_RCC_GetSysClockFreq>
 800a3ea:	61f8      	str	r0, [r7, #28]
        break;
 800a3ec:	e009      	b.n	800a402 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3f2:	61fb      	str	r3, [r7, #28]
        break;
 800a3f4:	e005      	b.n	800a402 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a400:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d079      	beq.n	800a4fc <UART_SetConfig+0x43c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	005a      	lsls	r2, r3, #1
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	085b      	lsrs	r3, r3, #1
 800a412:	441a      	add	r2, r3
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	fbb2 f3f3 	udiv	r3, r2, r3
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a420:	69bb      	ldr	r3, [r7, #24]
 800a422:	2b0f      	cmp	r3, #15
 800a424:	d916      	bls.n	800a454 <UART_SetConfig+0x394>
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a42c:	d212      	bcs.n	800a454 <UART_SetConfig+0x394>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	b29b      	uxth	r3, r3
 800a432:	f023 030f 	bic.w	r3, r3, #15
 800a436:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	085b      	lsrs	r3, r3, #1
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	f003 0307 	and.w	r3, r3, #7
 800a442:	b29a      	uxth	r2, r3
 800a444:	8afb      	ldrh	r3, [r7, #22]
 800a446:	4313      	orrs	r3, r2
 800a448:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	8afa      	ldrh	r2, [r7, #22]
 800a450:	60da      	str	r2, [r3, #12]
 800a452:	e053      	b.n	800a4fc <UART_SetConfig+0x43c>
      }
      else
      {
        ret = HAL_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a45a:	e04f      	b.n	800a4fc <UART_SetConfig+0x43c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a45c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a460:	2b08      	cmp	r3, #8
 800a462:	d828      	bhi.n	800a4b6 <UART_SetConfig+0x3f6>
 800a464:	a201      	add	r2, pc, #4	; (adr r2, 800a46c <UART_SetConfig+0x3ac>)
 800a466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a46a:	bf00      	nop
 800a46c:	0800a491 	.word	0x0800a491
 800a470:	0800a499 	.word	0x0800a499
 800a474:	0800a4a1 	.word	0x0800a4a1
 800a478:	0800a4b7 	.word	0x0800a4b7
 800a47c:	0800a4a7 	.word	0x0800a4a7
 800a480:	0800a4b7 	.word	0x0800a4b7
 800a484:	0800a4b7 	.word	0x0800a4b7
 800a488:	0800a4b7 	.word	0x0800a4b7
 800a48c:	0800a4af 	.word	0x0800a4af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a490:	f7fe f8f0 	bl	8008674 <HAL_RCC_GetPCLK1Freq>
 800a494:	61f8      	str	r0, [r7, #28]
        break;
 800a496:	e014      	b.n	800a4c2 <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a498:	f7fe f902 	bl	80086a0 <HAL_RCC_GetPCLK2Freq>
 800a49c:	61f8      	str	r0, [r7, #28]
        break;
 800a49e:	e010      	b.n	800a4c2 <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a4a0:	4b1d      	ldr	r3, [pc, #116]	; (800a518 <UART_SetConfig+0x458>)
 800a4a2:	61fb      	str	r3, [r7, #28]
        break;
 800a4a4:	e00d      	b.n	800a4c2 <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4a6:	f7fe f84d 	bl	8008544 <HAL_RCC_GetSysClockFreq>
 800a4aa:	61f8      	str	r0, [r7, #28]
        break;
 800a4ac:	e009      	b.n	800a4c2 <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4b2:	61fb      	str	r3, [r7, #28]
        break;
 800a4b4:	e005      	b.n	800a4c2 <UART_SetConfig+0x402>
      default:
        pclk = 0U;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a4c0:	bf00      	nop
    }

    if (pclk != 0U)
 800a4c2:	69fb      	ldr	r3, [r7, #28]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d019      	beq.n	800a4fc <UART_SetConfig+0x43c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	085a      	lsrs	r2, r3, #1
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	441a      	add	r2, r3
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	2b0f      	cmp	r3, #15
 800a4e2:	d908      	bls.n	800a4f6 <UART_SetConfig+0x436>
 800a4e4:	69bb      	ldr	r3, [r7, #24]
 800a4e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4ea:	d204      	bcs.n	800a4f6 <UART_SetConfig+0x436>
      {
        huart->Instance->BRR = usartdiv;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	69ba      	ldr	r2, [r7, #24]
 800a4f2:	60da      	str	r2, [r3, #12]
 800a4f4:	e002      	b.n	800a4fc <UART_SetConfig+0x43c>
      }
      else
      {
        ret = HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2200      	movs	r2, #0
 800a500:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a508:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3728      	adds	r7, #40	; 0x28
 800a510:	46bd      	mov	sp, r7
 800a512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a516:	bf00      	nop
 800a518:	00f42400 	.word	0x00f42400

0800a51c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a528:	f003 0301 	and.w	r3, r3, #1
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00a      	beq.n	800a546 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	430a      	orrs	r2, r1
 800a544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54a:	f003 0302 	and.w	r3, r3, #2
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00a      	beq.n	800a568 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	430a      	orrs	r2, r1
 800a566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56c:	f003 0304 	and.w	r3, r3, #4
 800a570:	2b00      	cmp	r3, #0
 800a572:	d00a      	beq.n	800a58a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	430a      	orrs	r2, r1
 800a588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58e:	f003 0308 	and.w	r3, r3, #8
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00a      	beq.n	800a5ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	430a      	orrs	r2, r1
 800a5aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b0:	f003 0310 	and.w	r3, r3, #16
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d00a      	beq.n	800a5ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	430a      	orrs	r2, r1
 800a5cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d2:	f003 0320 	and.w	r3, r3, #32
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00a      	beq.n	800a5f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	430a      	orrs	r2, r1
 800a5ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d01a      	beq.n	800a632 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	430a      	orrs	r2, r1
 800a610:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a61a:	d10a      	bne.n	800a632 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	430a      	orrs	r2, r1
 800a630:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d00a      	beq.n	800a654 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	430a      	orrs	r2, r1
 800a652:	605a      	str	r2, [r3, #4]
  }
}
 800a654:	bf00      	nop
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b086      	sub	sp, #24
 800a664:	af02      	add	r7, sp, #8
 800a666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a670:	f7fa fdd8 	bl	8005224 <HAL_GetTick>
 800a674:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 0308 	and.w	r3, r3, #8
 800a680:	2b08      	cmp	r3, #8
 800a682:	d10e      	bne.n	800a6a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a684:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 f82d 	bl	800a6f2 <UART_WaitOnFlagUntilTimeout>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d001      	beq.n	800a6a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a69e:	2303      	movs	r3, #3
 800a6a0:	e023      	b.n	800a6ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f003 0304 	and.w	r3, r3, #4
 800a6ac:	2b04      	cmp	r3, #4
 800a6ae:	d10e      	bne.n	800a6ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6b4:	9300      	str	r3, [sp, #0]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 f817 	bl	800a6f2 <UART_WaitOnFlagUntilTimeout>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d001      	beq.n	800a6ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6ca:	2303      	movs	r3, #3
 800a6cc:	e00d      	b.n	800a6ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2220      	movs	r2, #32
 800a6d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2220      	movs	r2, #32
 800a6d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b084      	sub	sp, #16
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	60f8      	str	r0, [r7, #12]
 800a6fa:	60b9      	str	r1, [r7, #8]
 800a6fc:	603b      	str	r3, [r7, #0]
 800a6fe:	4613      	mov	r3, r2
 800a700:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a702:	e05e      	b.n	800a7c2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a70a:	d05a      	beq.n	800a7c2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a70c:	f7fa fd8a 	bl	8005224 <HAL_GetTick>
 800a710:	4602      	mov	r2, r0
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	69ba      	ldr	r2, [r7, #24]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d302      	bcc.n	800a722 <UART_WaitOnFlagUntilTimeout+0x30>
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d11b      	bne.n	800a75a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a730:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	689a      	ldr	r2, [r3, #8]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f022 0201 	bic.w	r2, r2, #1
 800a740:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2220      	movs	r2, #32
 800a746:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2220      	movs	r2, #32
 800a74c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a756:	2303      	movs	r3, #3
 800a758:	e043      	b.n	800a7e2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f003 0304 	and.w	r3, r3, #4
 800a764:	2b00      	cmp	r3, #0
 800a766:	d02c      	beq.n	800a7c2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	69db      	ldr	r3, [r3, #28]
 800a76e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a776:	d124      	bne.n	800a7c2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a780:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a790:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	689a      	ldr	r2, [r3, #8]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f022 0201 	bic.w	r2, r2, #1
 800a7a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2220      	movs	r2, #32
 800a7a6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2220      	movs	r2, #32
 800a7ac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2220      	movs	r2, #32
 800a7b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a7be:	2303      	movs	r3, #3
 800a7c0:	e00f      	b.n	800a7e2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	69da      	ldr	r2, [r3, #28]
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	68ba      	ldr	r2, [r7, #8]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	bf0c      	ite	eq
 800a7d2:	2301      	moveq	r3, #1
 800a7d4:	2300      	movne	r3, #0
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	461a      	mov	r2, r3
 800a7da:	79fb      	ldrb	r3, [r7, #7]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d091      	beq.n	800a704 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
	...

0800a7ec <__errno>:
 800a7ec:	4b01      	ldr	r3, [pc, #4]	; (800a7f4 <__errno+0x8>)
 800a7ee:	6818      	ldr	r0, [r3, #0]
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	2000000c 	.word	0x2000000c

0800a7f8 <__libc_init_array>:
 800a7f8:	b570      	push	{r4, r5, r6, lr}
 800a7fa:	4d0d      	ldr	r5, [pc, #52]	; (800a830 <__libc_init_array+0x38>)
 800a7fc:	4c0d      	ldr	r4, [pc, #52]	; (800a834 <__libc_init_array+0x3c>)
 800a7fe:	1b64      	subs	r4, r4, r5
 800a800:	10a4      	asrs	r4, r4, #2
 800a802:	2600      	movs	r6, #0
 800a804:	42a6      	cmp	r6, r4
 800a806:	d109      	bne.n	800a81c <__libc_init_array+0x24>
 800a808:	4d0b      	ldr	r5, [pc, #44]	; (800a838 <__libc_init_array+0x40>)
 800a80a:	4c0c      	ldr	r4, [pc, #48]	; (800a83c <__libc_init_array+0x44>)
 800a80c:	f002 ffe8 	bl	800d7e0 <_init>
 800a810:	1b64      	subs	r4, r4, r5
 800a812:	10a4      	asrs	r4, r4, #2
 800a814:	2600      	movs	r6, #0
 800a816:	42a6      	cmp	r6, r4
 800a818:	d105      	bne.n	800a826 <__libc_init_array+0x2e>
 800a81a:	bd70      	pop	{r4, r5, r6, pc}
 800a81c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a820:	4798      	blx	r3
 800a822:	3601      	adds	r6, #1
 800a824:	e7ee      	b.n	800a804 <__libc_init_array+0xc>
 800a826:	f855 3b04 	ldr.w	r3, [r5], #4
 800a82a:	4798      	blx	r3
 800a82c:	3601      	adds	r6, #1
 800a82e:	e7f2      	b.n	800a816 <__libc_init_array+0x1e>
 800a830:	0800dcec 	.word	0x0800dcec
 800a834:	0800dcec 	.word	0x0800dcec
 800a838:	0800dcec 	.word	0x0800dcec
 800a83c:	0800dcf0 	.word	0x0800dcf0

0800a840 <memset>:
 800a840:	4402      	add	r2, r0
 800a842:	4603      	mov	r3, r0
 800a844:	4293      	cmp	r3, r2
 800a846:	d100      	bne.n	800a84a <memset+0xa>
 800a848:	4770      	bx	lr
 800a84a:	f803 1b01 	strb.w	r1, [r3], #1
 800a84e:	e7f9      	b.n	800a844 <memset+0x4>

0800a850 <__cvt>:
 800a850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a854:	ec55 4b10 	vmov	r4, r5, d0
 800a858:	2d00      	cmp	r5, #0
 800a85a:	460e      	mov	r6, r1
 800a85c:	4619      	mov	r1, r3
 800a85e:	462b      	mov	r3, r5
 800a860:	bfbb      	ittet	lt
 800a862:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a866:	461d      	movlt	r5, r3
 800a868:	2300      	movge	r3, #0
 800a86a:	232d      	movlt	r3, #45	; 0x2d
 800a86c:	700b      	strb	r3, [r1, #0]
 800a86e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a870:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a874:	4691      	mov	r9, r2
 800a876:	f023 0820 	bic.w	r8, r3, #32
 800a87a:	bfbc      	itt	lt
 800a87c:	4622      	movlt	r2, r4
 800a87e:	4614      	movlt	r4, r2
 800a880:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a884:	d005      	beq.n	800a892 <__cvt+0x42>
 800a886:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a88a:	d100      	bne.n	800a88e <__cvt+0x3e>
 800a88c:	3601      	adds	r6, #1
 800a88e:	2102      	movs	r1, #2
 800a890:	e000      	b.n	800a894 <__cvt+0x44>
 800a892:	2103      	movs	r1, #3
 800a894:	ab03      	add	r3, sp, #12
 800a896:	9301      	str	r3, [sp, #4]
 800a898:	ab02      	add	r3, sp, #8
 800a89a:	9300      	str	r3, [sp, #0]
 800a89c:	ec45 4b10 	vmov	d0, r4, r5
 800a8a0:	4653      	mov	r3, sl
 800a8a2:	4632      	mov	r2, r6
 800a8a4:	f000 fe90 	bl	800b5c8 <_dtoa_r>
 800a8a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a8ac:	4607      	mov	r7, r0
 800a8ae:	d102      	bne.n	800a8b6 <__cvt+0x66>
 800a8b0:	f019 0f01 	tst.w	r9, #1
 800a8b4:	d022      	beq.n	800a8fc <__cvt+0xac>
 800a8b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8ba:	eb07 0906 	add.w	r9, r7, r6
 800a8be:	d110      	bne.n	800a8e2 <__cvt+0x92>
 800a8c0:	783b      	ldrb	r3, [r7, #0]
 800a8c2:	2b30      	cmp	r3, #48	; 0x30
 800a8c4:	d10a      	bne.n	800a8dc <__cvt+0x8c>
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	4629      	mov	r1, r5
 800a8ce:	f7f6 f8fb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8d2:	b918      	cbnz	r0, 800a8dc <__cvt+0x8c>
 800a8d4:	f1c6 0601 	rsb	r6, r6, #1
 800a8d8:	f8ca 6000 	str.w	r6, [sl]
 800a8dc:	f8da 3000 	ldr.w	r3, [sl]
 800a8e0:	4499      	add	r9, r3
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	4629      	mov	r1, r5
 800a8ea:	f7f6 f8ed 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8ee:	b108      	cbz	r0, 800a8f4 <__cvt+0xa4>
 800a8f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a8f4:	2230      	movs	r2, #48	; 0x30
 800a8f6:	9b03      	ldr	r3, [sp, #12]
 800a8f8:	454b      	cmp	r3, r9
 800a8fa:	d307      	bcc.n	800a90c <__cvt+0xbc>
 800a8fc:	9b03      	ldr	r3, [sp, #12]
 800a8fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a900:	1bdb      	subs	r3, r3, r7
 800a902:	4638      	mov	r0, r7
 800a904:	6013      	str	r3, [r2, #0]
 800a906:	b004      	add	sp, #16
 800a908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a90c:	1c59      	adds	r1, r3, #1
 800a90e:	9103      	str	r1, [sp, #12]
 800a910:	701a      	strb	r2, [r3, #0]
 800a912:	e7f0      	b.n	800a8f6 <__cvt+0xa6>

0800a914 <__exponent>:
 800a914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a916:	4603      	mov	r3, r0
 800a918:	2900      	cmp	r1, #0
 800a91a:	bfb8      	it	lt
 800a91c:	4249      	neglt	r1, r1
 800a91e:	f803 2b02 	strb.w	r2, [r3], #2
 800a922:	bfb4      	ite	lt
 800a924:	222d      	movlt	r2, #45	; 0x2d
 800a926:	222b      	movge	r2, #43	; 0x2b
 800a928:	2909      	cmp	r1, #9
 800a92a:	7042      	strb	r2, [r0, #1]
 800a92c:	dd2a      	ble.n	800a984 <__exponent+0x70>
 800a92e:	f10d 0407 	add.w	r4, sp, #7
 800a932:	46a4      	mov	ip, r4
 800a934:	270a      	movs	r7, #10
 800a936:	46a6      	mov	lr, r4
 800a938:	460a      	mov	r2, r1
 800a93a:	fb91 f6f7 	sdiv	r6, r1, r7
 800a93e:	fb07 1516 	mls	r5, r7, r6, r1
 800a942:	3530      	adds	r5, #48	; 0x30
 800a944:	2a63      	cmp	r2, #99	; 0x63
 800a946:	f104 34ff 	add.w	r4, r4, #4294967295
 800a94a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a94e:	4631      	mov	r1, r6
 800a950:	dcf1      	bgt.n	800a936 <__exponent+0x22>
 800a952:	3130      	adds	r1, #48	; 0x30
 800a954:	f1ae 0502 	sub.w	r5, lr, #2
 800a958:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a95c:	1c44      	adds	r4, r0, #1
 800a95e:	4629      	mov	r1, r5
 800a960:	4561      	cmp	r1, ip
 800a962:	d30a      	bcc.n	800a97a <__exponent+0x66>
 800a964:	f10d 0209 	add.w	r2, sp, #9
 800a968:	eba2 020e 	sub.w	r2, r2, lr
 800a96c:	4565      	cmp	r5, ip
 800a96e:	bf88      	it	hi
 800a970:	2200      	movhi	r2, #0
 800a972:	4413      	add	r3, r2
 800a974:	1a18      	subs	r0, r3, r0
 800a976:	b003      	add	sp, #12
 800a978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a97a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a97e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a982:	e7ed      	b.n	800a960 <__exponent+0x4c>
 800a984:	2330      	movs	r3, #48	; 0x30
 800a986:	3130      	adds	r1, #48	; 0x30
 800a988:	7083      	strb	r3, [r0, #2]
 800a98a:	70c1      	strb	r1, [r0, #3]
 800a98c:	1d03      	adds	r3, r0, #4
 800a98e:	e7f1      	b.n	800a974 <__exponent+0x60>

0800a990 <_printf_float>:
 800a990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a994:	ed2d 8b02 	vpush	{d8}
 800a998:	b08d      	sub	sp, #52	; 0x34
 800a99a:	460c      	mov	r4, r1
 800a99c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a9a0:	4616      	mov	r6, r2
 800a9a2:	461f      	mov	r7, r3
 800a9a4:	4605      	mov	r5, r0
 800a9a6:	f001 fdb5 	bl	800c514 <_localeconv_r>
 800a9aa:	f8d0 a000 	ldr.w	sl, [r0]
 800a9ae:	4650      	mov	r0, sl
 800a9b0:	f7f5 fc0e 	bl	80001d0 <strlen>
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	930a      	str	r3, [sp, #40]	; 0x28
 800a9b8:	6823      	ldr	r3, [r4, #0]
 800a9ba:	9305      	str	r3, [sp, #20]
 800a9bc:	f8d8 3000 	ldr.w	r3, [r8]
 800a9c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a9c4:	3307      	adds	r3, #7
 800a9c6:	f023 0307 	bic.w	r3, r3, #7
 800a9ca:	f103 0208 	add.w	r2, r3, #8
 800a9ce:	f8c8 2000 	str.w	r2, [r8]
 800a9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a9da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a9de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a9e2:	9307      	str	r3, [sp, #28]
 800a9e4:	f8cd 8018 	str.w	r8, [sp, #24]
 800a9e8:	ee08 0a10 	vmov	s16, r0
 800a9ec:	4b9f      	ldr	r3, [pc, #636]	; (800ac6c <_printf_float+0x2dc>)
 800a9ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f6:	f7f6 f899 	bl	8000b2c <__aeabi_dcmpun>
 800a9fa:	bb88      	cbnz	r0, 800aa60 <_printf_float+0xd0>
 800a9fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa00:	4b9a      	ldr	r3, [pc, #616]	; (800ac6c <_printf_float+0x2dc>)
 800aa02:	f04f 32ff 	mov.w	r2, #4294967295
 800aa06:	f7f6 f873 	bl	8000af0 <__aeabi_dcmple>
 800aa0a:	bb48      	cbnz	r0, 800aa60 <_printf_float+0xd0>
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	2300      	movs	r3, #0
 800aa10:	4640      	mov	r0, r8
 800aa12:	4649      	mov	r1, r9
 800aa14:	f7f6 f862 	bl	8000adc <__aeabi_dcmplt>
 800aa18:	b110      	cbz	r0, 800aa20 <_printf_float+0x90>
 800aa1a:	232d      	movs	r3, #45	; 0x2d
 800aa1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa20:	4b93      	ldr	r3, [pc, #588]	; (800ac70 <_printf_float+0x2e0>)
 800aa22:	4894      	ldr	r0, [pc, #592]	; (800ac74 <_printf_float+0x2e4>)
 800aa24:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aa28:	bf94      	ite	ls
 800aa2a:	4698      	movls	r8, r3
 800aa2c:	4680      	movhi	r8, r0
 800aa2e:	2303      	movs	r3, #3
 800aa30:	6123      	str	r3, [r4, #16]
 800aa32:	9b05      	ldr	r3, [sp, #20]
 800aa34:	f023 0204 	bic.w	r2, r3, #4
 800aa38:	6022      	str	r2, [r4, #0]
 800aa3a:	f04f 0900 	mov.w	r9, #0
 800aa3e:	9700      	str	r7, [sp, #0]
 800aa40:	4633      	mov	r3, r6
 800aa42:	aa0b      	add	r2, sp, #44	; 0x2c
 800aa44:	4621      	mov	r1, r4
 800aa46:	4628      	mov	r0, r5
 800aa48:	f000 f9d8 	bl	800adfc <_printf_common>
 800aa4c:	3001      	adds	r0, #1
 800aa4e:	f040 8090 	bne.w	800ab72 <_printf_float+0x1e2>
 800aa52:	f04f 30ff 	mov.w	r0, #4294967295
 800aa56:	b00d      	add	sp, #52	; 0x34
 800aa58:	ecbd 8b02 	vpop	{d8}
 800aa5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa60:	4642      	mov	r2, r8
 800aa62:	464b      	mov	r3, r9
 800aa64:	4640      	mov	r0, r8
 800aa66:	4649      	mov	r1, r9
 800aa68:	f7f6 f860 	bl	8000b2c <__aeabi_dcmpun>
 800aa6c:	b140      	cbz	r0, 800aa80 <_printf_float+0xf0>
 800aa6e:	464b      	mov	r3, r9
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	bfbc      	itt	lt
 800aa74:	232d      	movlt	r3, #45	; 0x2d
 800aa76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aa7a:	487f      	ldr	r0, [pc, #508]	; (800ac78 <_printf_float+0x2e8>)
 800aa7c:	4b7f      	ldr	r3, [pc, #508]	; (800ac7c <_printf_float+0x2ec>)
 800aa7e:	e7d1      	b.n	800aa24 <_printf_float+0x94>
 800aa80:	6863      	ldr	r3, [r4, #4]
 800aa82:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aa86:	9206      	str	r2, [sp, #24]
 800aa88:	1c5a      	adds	r2, r3, #1
 800aa8a:	d13f      	bne.n	800ab0c <_printf_float+0x17c>
 800aa8c:	2306      	movs	r3, #6
 800aa8e:	6063      	str	r3, [r4, #4]
 800aa90:	9b05      	ldr	r3, [sp, #20]
 800aa92:	6861      	ldr	r1, [r4, #4]
 800aa94:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aa98:	2300      	movs	r3, #0
 800aa9a:	9303      	str	r3, [sp, #12]
 800aa9c:	ab0a      	add	r3, sp, #40	; 0x28
 800aa9e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aaa2:	ab09      	add	r3, sp, #36	; 0x24
 800aaa4:	ec49 8b10 	vmov	d0, r8, r9
 800aaa8:	9300      	str	r3, [sp, #0]
 800aaaa:	6022      	str	r2, [r4, #0]
 800aaac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aab0:	4628      	mov	r0, r5
 800aab2:	f7ff fecd 	bl	800a850 <__cvt>
 800aab6:	9b06      	ldr	r3, [sp, #24]
 800aab8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aaba:	2b47      	cmp	r3, #71	; 0x47
 800aabc:	4680      	mov	r8, r0
 800aabe:	d108      	bne.n	800aad2 <_printf_float+0x142>
 800aac0:	1cc8      	adds	r0, r1, #3
 800aac2:	db02      	blt.n	800aaca <_printf_float+0x13a>
 800aac4:	6863      	ldr	r3, [r4, #4]
 800aac6:	4299      	cmp	r1, r3
 800aac8:	dd41      	ble.n	800ab4e <_printf_float+0x1be>
 800aaca:	f1ab 0b02 	sub.w	fp, fp, #2
 800aace:	fa5f fb8b 	uxtb.w	fp, fp
 800aad2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aad6:	d820      	bhi.n	800ab1a <_printf_float+0x18a>
 800aad8:	3901      	subs	r1, #1
 800aada:	465a      	mov	r2, fp
 800aadc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aae0:	9109      	str	r1, [sp, #36]	; 0x24
 800aae2:	f7ff ff17 	bl	800a914 <__exponent>
 800aae6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aae8:	1813      	adds	r3, r2, r0
 800aaea:	2a01      	cmp	r2, #1
 800aaec:	4681      	mov	r9, r0
 800aaee:	6123      	str	r3, [r4, #16]
 800aaf0:	dc02      	bgt.n	800aaf8 <_printf_float+0x168>
 800aaf2:	6822      	ldr	r2, [r4, #0]
 800aaf4:	07d2      	lsls	r2, r2, #31
 800aaf6:	d501      	bpl.n	800aafc <_printf_float+0x16c>
 800aaf8:	3301      	adds	r3, #1
 800aafa:	6123      	str	r3, [r4, #16]
 800aafc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d09c      	beq.n	800aa3e <_printf_float+0xae>
 800ab04:	232d      	movs	r3, #45	; 0x2d
 800ab06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab0a:	e798      	b.n	800aa3e <_printf_float+0xae>
 800ab0c:	9a06      	ldr	r2, [sp, #24]
 800ab0e:	2a47      	cmp	r2, #71	; 0x47
 800ab10:	d1be      	bne.n	800aa90 <_printf_float+0x100>
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1bc      	bne.n	800aa90 <_printf_float+0x100>
 800ab16:	2301      	movs	r3, #1
 800ab18:	e7b9      	b.n	800aa8e <_printf_float+0xfe>
 800ab1a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ab1e:	d118      	bne.n	800ab52 <_printf_float+0x1c2>
 800ab20:	2900      	cmp	r1, #0
 800ab22:	6863      	ldr	r3, [r4, #4]
 800ab24:	dd0b      	ble.n	800ab3e <_printf_float+0x1ae>
 800ab26:	6121      	str	r1, [r4, #16]
 800ab28:	b913      	cbnz	r3, 800ab30 <_printf_float+0x1a0>
 800ab2a:	6822      	ldr	r2, [r4, #0]
 800ab2c:	07d0      	lsls	r0, r2, #31
 800ab2e:	d502      	bpl.n	800ab36 <_printf_float+0x1a6>
 800ab30:	3301      	adds	r3, #1
 800ab32:	440b      	add	r3, r1
 800ab34:	6123      	str	r3, [r4, #16]
 800ab36:	65a1      	str	r1, [r4, #88]	; 0x58
 800ab38:	f04f 0900 	mov.w	r9, #0
 800ab3c:	e7de      	b.n	800aafc <_printf_float+0x16c>
 800ab3e:	b913      	cbnz	r3, 800ab46 <_printf_float+0x1b6>
 800ab40:	6822      	ldr	r2, [r4, #0]
 800ab42:	07d2      	lsls	r2, r2, #31
 800ab44:	d501      	bpl.n	800ab4a <_printf_float+0x1ba>
 800ab46:	3302      	adds	r3, #2
 800ab48:	e7f4      	b.n	800ab34 <_printf_float+0x1a4>
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e7f2      	b.n	800ab34 <_printf_float+0x1a4>
 800ab4e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ab52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab54:	4299      	cmp	r1, r3
 800ab56:	db05      	blt.n	800ab64 <_printf_float+0x1d4>
 800ab58:	6823      	ldr	r3, [r4, #0]
 800ab5a:	6121      	str	r1, [r4, #16]
 800ab5c:	07d8      	lsls	r0, r3, #31
 800ab5e:	d5ea      	bpl.n	800ab36 <_printf_float+0x1a6>
 800ab60:	1c4b      	adds	r3, r1, #1
 800ab62:	e7e7      	b.n	800ab34 <_printf_float+0x1a4>
 800ab64:	2900      	cmp	r1, #0
 800ab66:	bfd4      	ite	le
 800ab68:	f1c1 0202 	rsble	r2, r1, #2
 800ab6c:	2201      	movgt	r2, #1
 800ab6e:	4413      	add	r3, r2
 800ab70:	e7e0      	b.n	800ab34 <_printf_float+0x1a4>
 800ab72:	6823      	ldr	r3, [r4, #0]
 800ab74:	055a      	lsls	r2, r3, #21
 800ab76:	d407      	bmi.n	800ab88 <_printf_float+0x1f8>
 800ab78:	6923      	ldr	r3, [r4, #16]
 800ab7a:	4642      	mov	r2, r8
 800ab7c:	4631      	mov	r1, r6
 800ab7e:	4628      	mov	r0, r5
 800ab80:	47b8      	blx	r7
 800ab82:	3001      	adds	r0, #1
 800ab84:	d12c      	bne.n	800abe0 <_printf_float+0x250>
 800ab86:	e764      	b.n	800aa52 <_printf_float+0xc2>
 800ab88:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab8c:	f240 80e0 	bls.w	800ad50 <_printf_float+0x3c0>
 800ab90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab94:	2200      	movs	r2, #0
 800ab96:	2300      	movs	r3, #0
 800ab98:	f7f5 ff96 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	d034      	beq.n	800ac0a <_printf_float+0x27a>
 800aba0:	4a37      	ldr	r2, [pc, #220]	; (800ac80 <_printf_float+0x2f0>)
 800aba2:	2301      	movs	r3, #1
 800aba4:	4631      	mov	r1, r6
 800aba6:	4628      	mov	r0, r5
 800aba8:	47b8      	blx	r7
 800abaa:	3001      	adds	r0, #1
 800abac:	f43f af51 	beq.w	800aa52 <_printf_float+0xc2>
 800abb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800abb4:	429a      	cmp	r2, r3
 800abb6:	db02      	blt.n	800abbe <_printf_float+0x22e>
 800abb8:	6823      	ldr	r3, [r4, #0]
 800abba:	07d8      	lsls	r0, r3, #31
 800abbc:	d510      	bpl.n	800abe0 <_printf_float+0x250>
 800abbe:	ee18 3a10 	vmov	r3, s16
 800abc2:	4652      	mov	r2, sl
 800abc4:	4631      	mov	r1, r6
 800abc6:	4628      	mov	r0, r5
 800abc8:	47b8      	blx	r7
 800abca:	3001      	adds	r0, #1
 800abcc:	f43f af41 	beq.w	800aa52 <_printf_float+0xc2>
 800abd0:	f04f 0800 	mov.w	r8, #0
 800abd4:	f104 091a 	add.w	r9, r4, #26
 800abd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abda:	3b01      	subs	r3, #1
 800abdc:	4543      	cmp	r3, r8
 800abde:	dc09      	bgt.n	800abf4 <_printf_float+0x264>
 800abe0:	6823      	ldr	r3, [r4, #0]
 800abe2:	079b      	lsls	r3, r3, #30
 800abe4:	f100 8105 	bmi.w	800adf2 <_printf_float+0x462>
 800abe8:	68e0      	ldr	r0, [r4, #12]
 800abea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abec:	4298      	cmp	r0, r3
 800abee:	bfb8      	it	lt
 800abf0:	4618      	movlt	r0, r3
 800abf2:	e730      	b.n	800aa56 <_printf_float+0xc6>
 800abf4:	2301      	movs	r3, #1
 800abf6:	464a      	mov	r2, r9
 800abf8:	4631      	mov	r1, r6
 800abfa:	4628      	mov	r0, r5
 800abfc:	47b8      	blx	r7
 800abfe:	3001      	adds	r0, #1
 800ac00:	f43f af27 	beq.w	800aa52 <_printf_float+0xc2>
 800ac04:	f108 0801 	add.w	r8, r8, #1
 800ac08:	e7e6      	b.n	800abd8 <_printf_float+0x248>
 800ac0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	dc39      	bgt.n	800ac84 <_printf_float+0x2f4>
 800ac10:	4a1b      	ldr	r2, [pc, #108]	; (800ac80 <_printf_float+0x2f0>)
 800ac12:	2301      	movs	r3, #1
 800ac14:	4631      	mov	r1, r6
 800ac16:	4628      	mov	r0, r5
 800ac18:	47b8      	blx	r7
 800ac1a:	3001      	adds	r0, #1
 800ac1c:	f43f af19 	beq.w	800aa52 <_printf_float+0xc2>
 800ac20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac24:	4313      	orrs	r3, r2
 800ac26:	d102      	bne.n	800ac2e <_printf_float+0x29e>
 800ac28:	6823      	ldr	r3, [r4, #0]
 800ac2a:	07d9      	lsls	r1, r3, #31
 800ac2c:	d5d8      	bpl.n	800abe0 <_printf_float+0x250>
 800ac2e:	ee18 3a10 	vmov	r3, s16
 800ac32:	4652      	mov	r2, sl
 800ac34:	4631      	mov	r1, r6
 800ac36:	4628      	mov	r0, r5
 800ac38:	47b8      	blx	r7
 800ac3a:	3001      	adds	r0, #1
 800ac3c:	f43f af09 	beq.w	800aa52 <_printf_float+0xc2>
 800ac40:	f04f 0900 	mov.w	r9, #0
 800ac44:	f104 0a1a 	add.w	sl, r4, #26
 800ac48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac4a:	425b      	negs	r3, r3
 800ac4c:	454b      	cmp	r3, r9
 800ac4e:	dc01      	bgt.n	800ac54 <_printf_float+0x2c4>
 800ac50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac52:	e792      	b.n	800ab7a <_printf_float+0x1ea>
 800ac54:	2301      	movs	r3, #1
 800ac56:	4652      	mov	r2, sl
 800ac58:	4631      	mov	r1, r6
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	47b8      	blx	r7
 800ac5e:	3001      	adds	r0, #1
 800ac60:	f43f aef7 	beq.w	800aa52 <_printf_float+0xc2>
 800ac64:	f109 0901 	add.w	r9, r9, #1
 800ac68:	e7ee      	b.n	800ac48 <_printf_float+0x2b8>
 800ac6a:	bf00      	nop
 800ac6c:	7fefffff 	.word	0x7fefffff
 800ac70:	0800d90c 	.word	0x0800d90c
 800ac74:	0800d910 	.word	0x0800d910
 800ac78:	0800d918 	.word	0x0800d918
 800ac7c:	0800d914 	.word	0x0800d914
 800ac80:	0800d91c 	.word	0x0800d91c
 800ac84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	bfa8      	it	ge
 800ac8c:	461a      	movge	r2, r3
 800ac8e:	2a00      	cmp	r2, #0
 800ac90:	4691      	mov	r9, r2
 800ac92:	dc37      	bgt.n	800ad04 <_printf_float+0x374>
 800ac94:	f04f 0b00 	mov.w	fp, #0
 800ac98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac9c:	f104 021a 	add.w	r2, r4, #26
 800aca0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aca2:	9305      	str	r3, [sp, #20]
 800aca4:	eba3 0309 	sub.w	r3, r3, r9
 800aca8:	455b      	cmp	r3, fp
 800acaa:	dc33      	bgt.n	800ad14 <_printf_float+0x384>
 800acac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acb0:	429a      	cmp	r2, r3
 800acb2:	db3b      	blt.n	800ad2c <_printf_float+0x39c>
 800acb4:	6823      	ldr	r3, [r4, #0]
 800acb6:	07da      	lsls	r2, r3, #31
 800acb8:	d438      	bmi.n	800ad2c <_printf_float+0x39c>
 800acba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acbc:	9a05      	ldr	r2, [sp, #20]
 800acbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acc0:	1a9a      	subs	r2, r3, r2
 800acc2:	eba3 0901 	sub.w	r9, r3, r1
 800acc6:	4591      	cmp	r9, r2
 800acc8:	bfa8      	it	ge
 800acca:	4691      	movge	r9, r2
 800accc:	f1b9 0f00 	cmp.w	r9, #0
 800acd0:	dc35      	bgt.n	800ad3e <_printf_float+0x3ae>
 800acd2:	f04f 0800 	mov.w	r8, #0
 800acd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acda:	f104 0a1a 	add.w	sl, r4, #26
 800acde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ace2:	1a9b      	subs	r3, r3, r2
 800ace4:	eba3 0309 	sub.w	r3, r3, r9
 800ace8:	4543      	cmp	r3, r8
 800acea:	f77f af79 	ble.w	800abe0 <_printf_float+0x250>
 800acee:	2301      	movs	r3, #1
 800acf0:	4652      	mov	r2, sl
 800acf2:	4631      	mov	r1, r6
 800acf4:	4628      	mov	r0, r5
 800acf6:	47b8      	blx	r7
 800acf8:	3001      	adds	r0, #1
 800acfa:	f43f aeaa 	beq.w	800aa52 <_printf_float+0xc2>
 800acfe:	f108 0801 	add.w	r8, r8, #1
 800ad02:	e7ec      	b.n	800acde <_printf_float+0x34e>
 800ad04:	4613      	mov	r3, r2
 800ad06:	4631      	mov	r1, r6
 800ad08:	4642      	mov	r2, r8
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	47b8      	blx	r7
 800ad0e:	3001      	adds	r0, #1
 800ad10:	d1c0      	bne.n	800ac94 <_printf_float+0x304>
 800ad12:	e69e      	b.n	800aa52 <_printf_float+0xc2>
 800ad14:	2301      	movs	r3, #1
 800ad16:	4631      	mov	r1, r6
 800ad18:	4628      	mov	r0, r5
 800ad1a:	9205      	str	r2, [sp, #20]
 800ad1c:	47b8      	blx	r7
 800ad1e:	3001      	adds	r0, #1
 800ad20:	f43f ae97 	beq.w	800aa52 <_printf_float+0xc2>
 800ad24:	9a05      	ldr	r2, [sp, #20]
 800ad26:	f10b 0b01 	add.w	fp, fp, #1
 800ad2a:	e7b9      	b.n	800aca0 <_printf_float+0x310>
 800ad2c:	ee18 3a10 	vmov	r3, s16
 800ad30:	4652      	mov	r2, sl
 800ad32:	4631      	mov	r1, r6
 800ad34:	4628      	mov	r0, r5
 800ad36:	47b8      	blx	r7
 800ad38:	3001      	adds	r0, #1
 800ad3a:	d1be      	bne.n	800acba <_printf_float+0x32a>
 800ad3c:	e689      	b.n	800aa52 <_printf_float+0xc2>
 800ad3e:	9a05      	ldr	r2, [sp, #20]
 800ad40:	464b      	mov	r3, r9
 800ad42:	4442      	add	r2, r8
 800ad44:	4631      	mov	r1, r6
 800ad46:	4628      	mov	r0, r5
 800ad48:	47b8      	blx	r7
 800ad4a:	3001      	adds	r0, #1
 800ad4c:	d1c1      	bne.n	800acd2 <_printf_float+0x342>
 800ad4e:	e680      	b.n	800aa52 <_printf_float+0xc2>
 800ad50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad52:	2a01      	cmp	r2, #1
 800ad54:	dc01      	bgt.n	800ad5a <_printf_float+0x3ca>
 800ad56:	07db      	lsls	r3, r3, #31
 800ad58:	d538      	bpl.n	800adcc <_printf_float+0x43c>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	4642      	mov	r2, r8
 800ad5e:	4631      	mov	r1, r6
 800ad60:	4628      	mov	r0, r5
 800ad62:	47b8      	blx	r7
 800ad64:	3001      	adds	r0, #1
 800ad66:	f43f ae74 	beq.w	800aa52 <_printf_float+0xc2>
 800ad6a:	ee18 3a10 	vmov	r3, s16
 800ad6e:	4652      	mov	r2, sl
 800ad70:	4631      	mov	r1, r6
 800ad72:	4628      	mov	r0, r5
 800ad74:	47b8      	blx	r7
 800ad76:	3001      	adds	r0, #1
 800ad78:	f43f ae6b 	beq.w	800aa52 <_printf_float+0xc2>
 800ad7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad80:	2200      	movs	r2, #0
 800ad82:	2300      	movs	r3, #0
 800ad84:	f7f5 fea0 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad88:	b9d8      	cbnz	r0, 800adc2 <_printf_float+0x432>
 800ad8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad8c:	f108 0201 	add.w	r2, r8, #1
 800ad90:	3b01      	subs	r3, #1
 800ad92:	4631      	mov	r1, r6
 800ad94:	4628      	mov	r0, r5
 800ad96:	47b8      	blx	r7
 800ad98:	3001      	adds	r0, #1
 800ad9a:	d10e      	bne.n	800adba <_printf_float+0x42a>
 800ad9c:	e659      	b.n	800aa52 <_printf_float+0xc2>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	4652      	mov	r2, sl
 800ada2:	4631      	mov	r1, r6
 800ada4:	4628      	mov	r0, r5
 800ada6:	47b8      	blx	r7
 800ada8:	3001      	adds	r0, #1
 800adaa:	f43f ae52 	beq.w	800aa52 <_printf_float+0xc2>
 800adae:	f108 0801 	add.w	r8, r8, #1
 800adb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adb4:	3b01      	subs	r3, #1
 800adb6:	4543      	cmp	r3, r8
 800adb8:	dcf1      	bgt.n	800ad9e <_printf_float+0x40e>
 800adba:	464b      	mov	r3, r9
 800adbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800adc0:	e6dc      	b.n	800ab7c <_printf_float+0x1ec>
 800adc2:	f04f 0800 	mov.w	r8, #0
 800adc6:	f104 0a1a 	add.w	sl, r4, #26
 800adca:	e7f2      	b.n	800adb2 <_printf_float+0x422>
 800adcc:	2301      	movs	r3, #1
 800adce:	4642      	mov	r2, r8
 800add0:	e7df      	b.n	800ad92 <_printf_float+0x402>
 800add2:	2301      	movs	r3, #1
 800add4:	464a      	mov	r2, r9
 800add6:	4631      	mov	r1, r6
 800add8:	4628      	mov	r0, r5
 800adda:	47b8      	blx	r7
 800addc:	3001      	adds	r0, #1
 800adde:	f43f ae38 	beq.w	800aa52 <_printf_float+0xc2>
 800ade2:	f108 0801 	add.w	r8, r8, #1
 800ade6:	68e3      	ldr	r3, [r4, #12]
 800ade8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800adea:	1a5b      	subs	r3, r3, r1
 800adec:	4543      	cmp	r3, r8
 800adee:	dcf0      	bgt.n	800add2 <_printf_float+0x442>
 800adf0:	e6fa      	b.n	800abe8 <_printf_float+0x258>
 800adf2:	f04f 0800 	mov.w	r8, #0
 800adf6:	f104 0919 	add.w	r9, r4, #25
 800adfa:	e7f4      	b.n	800ade6 <_printf_float+0x456>

0800adfc <_printf_common>:
 800adfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae00:	4616      	mov	r6, r2
 800ae02:	4699      	mov	r9, r3
 800ae04:	688a      	ldr	r2, [r1, #8]
 800ae06:	690b      	ldr	r3, [r1, #16]
 800ae08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	bfb8      	it	lt
 800ae10:	4613      	movlt	r3, r2
 800ae12:	6033      	str	r3, [r6, #0]
 800ae14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae18:	4607      	mov	r7, r0
 800ae1a:	460c      	mov	r4, r1
 800ae1c:	b10a      	cbz	r2, 800ae22 <_printf_common+0x26>
 800ae1e:	3301      	adds	r3, #1
 800ae20:	6033      	str	r3, [r6, #0]
 800ae22:	6823      	ldr	r3, [r4, #0]
 800ae24:	0699      	lsls	r1, r3, #26
 800ae26:	bf42      	ittt	mi
 800ae28:	6833      	ldrmi	r3, [r6, #0]
 800ae2a:	3302      	addmi	r3, #2
 800ae2c:	6033      	strmi	r3, [r6, #0]
 800ae2e:	6825      	ldr	r5, [r4, #0]
 800ae30:	f015 0506 	ands.w	r5, r5, #6
 800ae34:	d106      	bne.n	800ae44 <_printf_common+0x48>
 800ae36:	f104 0a19 	add.w	sl, r4, #25
 800ae3a:	68e3      	ldr	r3, [r4, #12]
 800ae3c:	6832      	ldr	r2, [r6, #0]
 800ae3e:	1a9b      	subs	r3, r3, r2
 800ae40:	42ab      	cmp	r3, r5
 800ae42:	dc26      	bgt.n	800ae92 <_printf_common+0x96>
 800ae44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae48:	1e13      	subs	r3, r2, #0
 800ae4a:	6822      	ldr	r2, [r4, #0]
 800ae4c:	bf18      	it	ne
 800ae4e:	2301      	movne	r3, #1
 800ae50:	0692      	lsls	r2, r2, #26
 800ae52:	d42b      	bmi.n	800aeac <_printf_common+0xb0>
 800ae54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae58:	4649      	mov	r1, r9
 800ae5a:	4638      	mov	r0, r7
 800ae5c:	47c0      	blx	r8
 800ae5e:	3001      	adds	r0, #1
 800ae60:	d01e      	beq.n	800aea0 <_printf_common+0xa4>
 800ae62:	6823      	ldr	r3, [r4, #0]
 800ae64:	68e5      	ldr	r5, [r4, #12]
 800ae66:	6832      	ldr	r2, [r6, #0]
 800ae68:	f003 0306 	and.w	r3, r3, #6
 800ae6c:	2b04      	cmp	r3, #4
 800ae6e:	bf08      	it	eq
 800ae70:	1aad      	subeq	r5, r5, r2
 800ae72:	68a3      	ldr	r3, [r4, #8]
 800ae74:	6922      	ldr	r2, [r4, #16]
 800ae76:	bf0c      	ite	eq
 800ae78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae7c:	2500      	movne	r5, #0
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	bfc4      	itt	gt
 800ae82:	1a9b      	subgt	r3, r3, r2
 800ae84:	18ed      	addgt	r5, r5, r3
 800ae86:	2600      	movs	r6, #0
 800ae88:	341a      	adds	r4, #26
 800ae8a:	42b5      	cmp	r5, r6
 800ae8c:	d11a      	bne.n	800aec4 <_printf_common+0xc8>
 800ae8e:	2000      	movs	r0, #0
 800ae90:	e008      	b.n	800aea4 <_printf_common+0xa8>
 800ae92:	2301      	movs	r3, #1
 800ae94:	4652      	mov	r2, sl
 800ae96:	4649      	mov	r1, r9
 800ae98:	4638      	mov	r0, r7
 800ae9a:	47c0      	blx	r8
 800ae9c:	3001      	adds	r0, #1
 800ae9e:	d103      	bne.n	800aea8 <_printf_common+0xac>
 800aea0:	f04f 30ff 	mov.w	r0, #4294967295
 800aea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aea8:	3501      	adds	r5, #1
 800aeaa:	e7c6      	b.n	800ae3a <_printf_common+0x3e>
 800aeac:	18e1      	adds	r1, r4, r3
 800aeae:	1c5a      	adds	r2, r3, #1
 800aeb0:	2030      	movs	r0, #48	; 0x30
 800aeb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aeb6:	4422      	add	r2, r4
 800aeb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aebc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aec0:	3302      	adds	r3, #2
 800aec2:	e7c7      	b.n	800ae54 <_printf_common+0x58>
 800aec4:	2301      	movs	r3, #1
 800aec6:	4622      	mov	r2, r4
 800aec8:	4649      	mov	r1, r9
 800aeca:	4638      	mov	r0, r7
 800aecc:	47c0      	blx	r8
 800aece:	3001      	adds	r0, #1
 800aed0:	d0e6      	beq.n	800aea0 <_printf_common+0xa4>
 800aed2:	3601      	adds	r6, #1
 800aed4:	e7d9      	b.n	800ae8a <_printf_common+0x8e>
	...

0800aed8 <_printf_i>:
 800aed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aedc:	7e0f      	ldrb	r7, [r1, #24]
 800aede:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aee0:	2f78      	cmp	r7, #120	; 0x78
 800aee2:	4691      	mov	r9, r2
 800aee4:	4680      	mov	r8, r0
 800aee6:	460c      	mov	r4, r1
 800aee8:	469a      	mov	sl, r3
 800aeea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aeee:	d807      	bhi.n	800af00 <_printf_i+0x28>
 800aef0:	2f62      	cmp	r7, #98	; 0x62
 800aef2:	d80a      	bhi.n	800af0a <_printf_i+0x32>
 800aef4:	2f00      	cmp	r7, #0
 800aef6:	f000 80d8 	beq.w	800b0aa <_printf_i+0x1d2>
 800aefa:	2f58      	cmp	r7, #88	; 0x58
 800aefc:	f000 80a3 	beq.w	800b046 <_printf_i+0x16e>
 800af00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af08:	e03a      	b.n	800af80 <_printf_i+0xa8>
 800af0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af0e:	2b15      	cmp	r3, #21
 800af10:	d8f6      	bhi.n	800af00 <_printf_i+0x28>
 800af12:	a101      	add	r1, pc, #4	; (adr r1, 800af18 <_printf_i+0x40>)
 800af14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af18:	0800af71 	.word	0x0800af71
 800af1c:	0800af85 	.word	0x0800af85
 800af20:	0800af01 	.word	0x0800af01
 800af24:	0800af01 	.word	0x0800af01
 800af28:	0800af01 	.word	0x0800af01
 800af2c:	0800af01 	.word	0x0800af01
 800af30:	0800af85 	.word	0x0800af85
 800af34:	0800af01 	.word	0x0800af01
 800af38:	0800af01 	.word	0x0800af01
 800af3c:	0800af01 	.word	0x0800af01
 800af40:	0800af01 	.word	0x0800af01
 800af44:	0800b091 	.word	0x0800b091
 800af48:	0800afb5 	.word	0x0800afb5
 800af4c:	0800b073 	.word	0x0800b073
 800af50:	0800af01 	.word	0x0800af01
 800af54:	0800af01 	.word	0x0800af01
 800af58:	0800b0b3 	.word	0x0800b0b3
 800af5c:	0800af01 	.word	0x0800af01
 800af60:	0800afb5 	.word	0x0800afb5
 800af64:	0800af01 	.word	0x0800af01
 800af68:	0800af01 	.word	0x0800af01
 800af6c:	0800b07b 	.word	0x0800b07b
 800af70:	682b      	ldr	r3, [r5, #0]
 800af72:	1d1a      	adds	r2, r3, #4
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	602a      	str	r2, [r5, #0]
 800af78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af80:	2301      	movs	r3, #1
 800af82:	e0a3      	b.n	800b0cc <_printf_i+0x1f4>
 800af84:	6820      	ldr	r0, [r4, #0]
 800af86:	6829      	ldr	r1, [r5, #0]
 800af88:	0606      	lsls	r6, r0, #24
 800af8a:	f101 0304 	add.w	r3, r1, #4
 800af8e:	d50a      	bpl.n	800afa6 <_printf_i+0xce>
 800af90:	680e      	ldr	r6, [r1, #0]
 800af92:	602b      	str	r3, [r5, #0]
 800af94:	2e00      	cmp	r6, #0
 800af96:	da03      	bge.n	800afa0 <_printf_i+0xc8>
 800af98:	232d      	movs	r3, #45	; 0x2d
 800af9a:	4276      	negs	r6, r6
 800af9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afa0:	485e      	ldr	r0, [pc, #376]	; (800b11c <_printf_i+0x244>)
 800afa2:	230a      	movs	r3, #10
 800afa4:	e019      	b.n	800afda <_printf_i+0x102>
 800afa6:	680e      	ldr	r6, [r1, #0]
 800afa8:	602b      	str	r3, [r5, #0]
 800afaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800afae:	bf18      	it	ne
 800afb0:	b236      	sxthne	r6, r6
 800afb2:	e7ef      	b.n	800af94 <_printf_i+0xbc>
 800afb4:	682b      	ldr	r3, [r5, #0]
 800afb6:	6820      	ldr	r0, [r4, #0]
 800afb8:	1d19      	adds	r1, r3, #4
 800afba:	6029      	str	r1, [r5, #0]
 800afbc:	0601      	lsls	r1, r0, #24
 800afbe:	d501      	bpl.n	800afc4 <_printf_i+0xec>
 800afc0:	681e      	ldr	r6, [r3, #0]
 800afc2:	e002      	b.n	800afca <_printf_i+0xf2>
 800afc4:	0646      	lsls	r6, r0, #25
 800afc6:	d5fb      	bpl.n	800afc0 <_printf_i+0xe8>
 800afc8:	881e      	ldrh	r6, [r3, #0]
 800afca:	4854      	ldr	r0, [pc, #336]	; (800b11c <_printf_i+0x244>)
 800afcc:	2f6f      	cmp	r7, #111	; 0x6f
 800afce:	bf0c      	ite	eq
 800afd0:	2308      	moveq	r3, #8
 800afd2:	230a      	movne	r3, #10
 800afd4:	2100      	movs	r1, #0
 800afd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800afda:	6865      	ldr	r5, [r4, #4]
 800afdc:	60a5      	str	r5, [r4, #8]
 800afde:	2d00      	cmp	r5, #0
 800afe0:	bfa2      	ittt	ge
 800afe2:	6821      	ldrge	r1, [r4, #0]
 800afe4:	f021 0104 	bicge.w	r1, r1, #4
 800afe8:	6021      	strge	r1, [r4, #0]
 800afea:	b90e      	cbnz	r6, 800aff0 <_printf_i+0x118>
 800afec:	2d00      	cmp	r5, #0
 800afee:	d04d      	beq.n	800b08c <_printf_i+0x1b4>
 800aff0:	4615      	mov	r5, r2
 800aff2:	fbb6 f1f3 	udiv	r1, r6, r3
 800aff6:	fb03 6711 	mls	r7, r3, r1, r6
 800affa:	5dc7      	ldrb	r7, [r0, r7]
 800affc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b000:	4637      	mov	r7, r6
 800b002:	42bb      	cmp	r3, r7
 800b004:	460e      	mov	r6, r1
 800b006:	d9f4      	bls.n	800aff2 <_printf_i+0x11a>
 800b008:	2b08      	cmp	r3, #8
 800b00a:	d10b      	bne.n	800b024 <_printf_i+0x14c>
 800b00c:	6823      	ldr	r3, [r4, #0]
 800b00e:	07de      	lsls	r6, r3, #31
 800b010:	d508      	bpl.n	800b024 <_printf_i+0x14c>
 800b012:	6923      	ldr	r3, [r4, #16]
 800b014:	6861      	ldr	r1, [r4, #4]
 800b016:	4299      	cmp	r1, r3
 800b018:	bfde      	ittt	le
 800b01a:	2330      	movle	r3, #48	; 0x30
 800b01c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b020:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b024:	1b52      	subs	r2, r2, r5
 800b026:	6122      	str	r2, [r4, #16]
 800b028:	f8cd a000 	str.w	sl, [sp]
 800b02c:	464b      	mov	r3, r9
 800b02e:	aa03      	add	r2, sp, #12
 800b030:	4621      	mov	r1, r4
 800b032:	4640      	mov	r0, r8
 800b034:	f7ff fee2 	bl	800adfc <_printf_common>
 800b038:	3001      	adds	r0, #1
 800b03a:	d14c      	bne.n	800b0d6 <_printf_i+0x1fe>
 800b03c:	f04f 30ff 	mov.w	r0, #4294967295
 800b040:	b004      	add	sp, #16
 800b042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b046:	4835      	ldr	r0, [pc, #212]	; (800b11c <_printf_i+0x244>)
 800b048:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b04c:	6829      	ldr	r1, [r5, #0]
 800b04e:	6823      	ldr	r3, [r4, #0]
 800b050:	f851 6b04 	ldr.w	r6, [r1], #4
 800b054:	6029      	str	r1, [r5, #0]
 800b056:	061d      	lsls	r5, r3, #24
 800b058:	d514      	bpl.n	800b084 <_printf_i+0x1ac>
 800b05a:	07df      	lsls	r7, r3, #31
 800b05c:	bf44      	itt	mi
 800b05e:	f043 0320 	orrmi.w	r3, r3, #32
 800b062:	6023      	strmi	r3, [r4, #0]
 800b064:	b91e      	cbnz	r6, 800b06e <_printf_i+0x196>
 800b066:	6823      	ldr	r3, [r4, #0]
 800b068:	f023 0320 	bic.w	r3, r3, #32
 800b06c:	6023      	str	r3, [r4, #0]
 800b06e:	2310      	movs	r3, #16
 800b070:	e7b0      	b.n	800afd4 <_printf_i+0xfc>
 800b072:	6823      	ldr	r3, [r4, #0]
 800b074:	f043 0320 	orr.w	r3, r3, #32
 800b078:	6023      	str	r3, [r4, #0]
 800b07a:	2378      	movs	r3, #120	; 0x78
 800b07c:	4828      	ldr	r0, [pc, #160]	; (800b120 <_printf_i+0x248>)
 800b07e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b082:	e7e3      	b.n	800b04c <_printf_i+0x174>
 800b084:	0659      	lsls	r1, r3, #25
 800b086:	bf48      	it	mi
 800b088:	b2b6      	uxthmi	r6, r6
 800b08a:	e7e6      	b.n	800b05a <_printf_i+0x182>
 800b08c:	4615      	mov	r5, r2
 800b08e:	e7bb      	b.n	800b008 <_printf_i+0x130>
 800b090:	682b      	ldr	r3, [r5, #0]
 800b092:	6826      	ldr	r6, [r4, #0]
 800b094:	6961      	ldr	r1, [r4, #20]
 800b096:	1d18      	adds	r0, r3, #4
 800b098:	6028      	str	r0, [r5, #0]
 800b09a:	0635      	lsls	r5, r6, #24
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	d501      	bpl.n	800b0a4 <_printf_i+0x1cc>
 800b0a0:	6019      	str	r1, [r3, #0]
 800b0a2:	e002      	b.n	800b0aa <_printf_i+0x1d2>
 800b0a4:	0670      	lsls	r0, r6, #25
 800b0a6:	d5fb      	bpl.n	800b0a0 <_printf_i+0x1c8>
 800b0a8:	8019      	strh	r1, [r3, #0]
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	6123      	str	r3, [r4, #16]
 800b0ae:	4615      	mov	r5, r2
 800b0b0:	e7ba      	b.n	800b028 <_printf_i+0x150>
 800b0b2:	682b      	ldr	r3, [r5, #0]
 800b0b4:	1d1a      	adds	r2, r3, #4
 800b0b6:	602a      	str	r2, [r5, #0]
 800b0b8:	681d      	ldr	r5, [r3, #0]
 800b0ba:	6862      	ldr	r2, [r4, #4]
 800b0bc:	2100      	movs	r1, #0
 800b0be:	4628      	mov	r0, r5
 800b0c0:	f7f5 f88e 	bl	80001e0 <memchr>
 800b0c4:	b108      	cbz	r0, 800b0ca <_printf_i+0x1f2>
 800b0c6:	1b40      	subs	r0, r0, r5
 800b0c8:	6060      	str	r0, [r4, #4]
 800b0ca:	6863      	ldr	r3, [r4, #4]
 800b0cc:	6123      	str	r3, [r4, #16]
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0d4:	e7a8      	b.n	800b028 <_printf_i+0x150>
 800b0d6:	6923      	ldr	r3, [r4, #16]
 800b0d8:	462a      	mov	r2, r5
 800b0da:	4649      	mov	r1, r9
 800b0dc:	4640      	mov	r0, r8
 800b0de:	47d0      	blx	sl
 800b0e0:	3001      	adds	r0, #1
 800b0e2:	d0ab      	beq.n	800b03c <_printf_i+0x164>
 800b0e4:	6823      	ldr	r3, [r4, #0]
 800b0e6:	079b      	lsls	r3, r3, #30
 800b0e8:	d413      	bmi.n	800b112 <_printf_i+0x23a>
 800b0ea:	68e0      	ldr	r0, [r4, #12]
 800b0ec:	9b03      	ldr	r3, [sp, #12]
 800b0ee:	4298      	cmp	r0, r3
 800b0f0:	bfb8      	it	lt
 800b0f2:	4618      	movlt	r0, r3
 800b0f4:	e7a4      	b.n	800b040 <_printf_i+0x168>
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	4632      	mov	r2, r6
 800b0fa:	4649      	mov	r1, r9
 800b0fc:	4640      	mov	r0, r8
 800b0fe:	47d0      	blx	sl
 800b100:	3001      	adds	r0, #1
 800b102:	d09b      	beq.n	800b03c <_printf_i+0x164>
 800b104:	3501      	adds	r5, #1
 800b106:	68e3      	ldr	r3, [r4, #12]
 800b108:	9903      	ldr	r1, [sp, #12]
 800b10a:	1a5b      	subs	r3, r3, r1
 800b10c:	42ab      	cmp	r3, r5
 800b10e:	dcf2      	bgt.n	800b0f6 <_printf_i+0x21e>
 800b110:	e7eb      	b.n	800b0ea <_printf_i+0x212>
 800b112:	2500      	movs	r5, #0
 800b114:	f104 0619 	add.w	r6, r4, #25
 800b118:	e7f5      	b.n	800b106 <_printf_i+0x22e>
 800b11a:	bf00      	nop
 800b11c:	0800d91e 	.word	0x0800d91e
 800b120:	0800d92f 	.word	0x0800d92f

0800b124 <iprintf>:
 800b124:	b40f      	push	{r0, r1, r2, r3}
 800b126:	4b0a      	ldr	r3, [pc, #40]	; (800b150 <iprintf+0x2c>)
 800b128:	b513      	push	{r0, r1, r4, lr}
 800b12a:	681c      	ldr	r4, [r3, #0]
 800b12c:	b124      	cbz	r4, 800b138 <iprintf+0x14>
 800b12e:	69a3      	ldr	r3, [r4, #24]
 800b130:	b913      	cbnz	r3, 800b138 <iprintf+0x14>
 800b132:	4620      	mov	r0, r4
 800b134:	f001 f950 	bl	800c3d8 <__sinit>
 800b138:	ab05      	add	r3, sp, #20
 800b13a:	9a04      	ldr	r2, [sp, #16]
 800b13c:	68a1      	ldr	r1, [r4, #8]
 800b13e:	9301      	str	r3, [sp, #4]
 800b140:	4620      	mov	r0, r4
 800b142:	f002 f869 	bl	800d218 <_vfiprintf_r>
 800b146:	b002      	add	sp, #8
 800b148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b14c:	b004      	add	sp, #16
 800b14e:	4770      	bx	lr
 800b150:	2000000c 	.word	0x2000000c

0800b154 <setbuf>:
 800b154:	2900      	cmp	r1, #0
 800b156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b15a:	bf0c      	ite	eq
 800b15c:	2202      	moveq	r2, #2
 800b15e:	2200      	movne	r2, #0
 800b160:	f000 b800 	b.w	800b164 <setvbuf>

0800b164 <setvbuf>:
 800b164:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b168:	461d      	mov	r5, r3
 800b16a:	4b5d      	ldr	r3, [pc, #372]	; (800b2e0 <setvbuf+0x17c>)
 800b16c:	681f      	ldr	r7, [r3, #0]
 800b16e:	4604      	mov	r4, r0
 800b170:	460e      	mov	r6, r1
 800b172:	4690      	mov	r8, r2
 800b174:	b127      	cbz	r7, 800b180 <setvbuf+0x1c>
 800b176:	69bb      	ldr	r3, [r7, #24]
 800b178:	b913      	cbnz	r3, 800b180 <setvbuf+0x1c>
 800b17a:	4638      	mov	r0, r7
 800b17c:	f001 f92c 	bl	800c3d8 <__sinit>
 800b180:	4b58      	ldr	r3, [pc, #352]	; (800b2e4 <setvbuf+0x180>)
 800b182:	429c      	cmp	r4, r3
 800b184:	d167      	bne.n	800b256 <setvbuf+0xf2>
 800b186:	687c      	ldr	r4, [r7, #4]
 800b188:	f1b8 0f02 	cmp.w	r8, #2
 800b18c:	d006      	beq.n	800b19c <setvbuf+0x38>
 800b18e:	f1b8 0f01 	cmp.w	r8, #1
 800b192:	f200 809f 	bhi.w	800b2d4 <setvbuf+0x170>
 800b196:	2d00      	cmp	r5, #0
 800b198:	f2c0 809c 	blt.w	800b2d4 <setvbuf+0x170>
 800b19c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b19e:	07db      	lsls	r3, r3, #31
 800b1a0:	d405      	bmi.n	800b1ae <setvbuf+0x4a>
 800b1a2:	89a3      	ldrh	r3, [r4, #12]
 800b1a4:	0598      	lsls	r0, r3, #22
 800b1a6:	d402      	bmi.n	800b1ae <setvbuf+0x4a>
 800b1a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1aa:	f001 f9b8 	bl	800c51e <__retarget_lock_acquire_recursive>
 800b1ae:	4621      	mov	r1, r4
 800b1b0:	4638      	mov	r0, r7
 800b1b2:	f001 f87d 	bl	800c2b0 <_fflush_r>
 800b1b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1b8:	b141      	cbz	r1, 800b1cc <setvbuf+0x68>
 800b1ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1be:	4299      	cmp	r1, r3
 800b1c0:	d002      	beq.n	800b1c8 <setvbuf+0x64>
 800b1c2:	4638      	mov	r0, r7
 800b1c4:	f001 fdc2 	bl	800cd4c <_free_r>
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	6363      	str	r3, [r4, #52]	; 0x34
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	61a3      	str	r3, [r4, #24]
 800b1d0:	6063      	str	r3, [r4, #4]
 800b1d2:	89a3      	ldrh	r3, [r4, #12]
 800b1d4:	0619      	lsls	r1, r3, #24
 800b1d6:	d503      	bpl.n	800b1e0 <setvbuf+0x7c>
 800b1d8:	6921      	ldr	r1, [r4, #16]
 800b1da:	4638      	mov	r0, r7
 800b1dc:	f001 fdb6 	bl	800cd4c <_free_r>
 800b1e0:	89a3      	ldrh	r3, [r4, #12]
 800b1e2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800b1e6:	f023 0303 	bic.w	r3, r3, #3
 800b1ea:	f1b8 0f02 	cmp.w	r8, #2
 800b1ee:	81a3      	strh	r3, [r4, #12]
 800b1f0:	d06c      	beq.n	800b2cc <setvbuf+0x168>
 800b1f2:	ab01      	add	r3, sp, #4
 800b1f4:	466a      	mov	r2, sp
 800b1f6:	4621      	mov	r1, r4
 800b1f8:	4638      	mov	r0, r7
 800b1fa:	f001 f992 	bl	800c522 <__swhatbuf_r>
 800b1fe:	89a3      	ldrh	r3, [r4, #12]
 800b200:	4318      	orrs	r0, r3
 800b202:	81a0      	strh	r0, [r4, #12]
 800b204:	2d00      	cmp	r5, #0
 800b206:	d130      	bne.n	800b26a <setvbuf+0x106>
 800b208:	9d00      	ldr	r5, [sp, #0]
 800b20a:	4628      	mov	r0, r5
 800b20c:	f001 f9ee 	bl	800c5ec <malloc>
 800b210:	4606      	mov	r6, r0
 800b212:	2800      	cmp	r0, #0
 800b214:	d155      	bne.n	800b2c2 <setvbuf+0x15e>
 800b216:	f8dd 9000 	ldr.w	r9, [sp]
 800b21a:	45a9      	cmp	r9, r5
 800b21c:	d14a      	bne.n	800b2b4 <setvbuf+0x150>
 800b21e:	f04f 35ff 	mov.w	r5, #4294967295
 800b222:	2200      	movs	r2, #0
 800b224:	60a2      	str	r2, [r4, #8]
 800b226:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800b22a:	6022      	str	r2, [r4, #0]
 800b22c:	6122      	str	r2, [r4, #16]
 800b22e:	2201      	movs	r2, #1
 800b230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b234:	6162      	str	r2, [r4, #20]
 800b236:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b238:	f043 0302 	orr.w	r3, r3, #2
 800b23c:	07d2      	lsls	r2, r2, #31
 800b23e:	81a3      	strh	r3, [r4, #12]
 800b240:	d405      	bmi.n	800b24e <setvbuf+0xea>
 800b242:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b246:	d102      	bne.n	800b24e <setvbuf+0xea>
 800b248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b24a:	f001 f969 	bl	800c520 <__retarget_lock_release_recursive>
 800b24e:	4628      	mov	r0, r5
 800b250:	b003      	add	sp, #12
 800b252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b256:	4b24      	ldr	r3, [pc, #144]	; (800b2e8 <setvbuf+0x184>)
 800b258:	429c      	cmp	r4, r3
 800b25a:	d101      	bne.n	800b260 <setvbuf+0xfc>
 800b25c:	68bc      	ldr	r4, [r7, #8]
 800b25e:	e793      	b.n	800b188 <setvbuf+0x24>
 800b260:	4b22      	ldr	r3, [pc, #136]	; (800b2ec <setvbuf+0x188>)
 800b262:	429c      	cmp	r4, r3
 800b264:	bf08      	it	eq
 800b266:	68fc      	ldreq	r4, [r7, #12]
 800b268:	e78e      	b.n	800b188 <setvbuf+0x24>
 800b26a:	2e00      	cmp	r6, #0
 800b26c:	d0cd      	beq.n	800b20a <setvbuf+0xa6>
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	b913      	cbnz	r3, 800b278 <setvbuf+0x114>
 800b272:	4638      	mov	r0, r7
 800b274:	f001 f8b0 	bl	800c3d8 <__sinit>
 800b278:	f1b8 0f01 	cmp.w	r8, #1
 800b27c:	bf08      	it	eq
 800b27e:	89a3      	ldrheq	r3, [r4, #12]
 800b280:	6026      	str	r6, [r4, #0]
 800b282:	bf04      	itt	eq
 800b284:	f043 0301 	orreq.w	r3, r3, #1
 800b288:	81a3      	strheq	r3, [r4, #12]
 800b28a:	89a2      	ldrh	r2, [r4, #12]
 800b28c:	f012 0308 	ands.w	r3, r2, #8
 800b290:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b294:	d01c      	beq.n	800b2d0 <setvbuf+0x16c>
 800b296:	07d3      	lsls	r3, r2, #31
 800b298:	bf41      	itttt	mi
 800b29a:	2300      	movmi	r3, #0
 800b29c:	426d      	negmi	r5, r5
 800b29e:	60a3      	strmi	r3, [r4, #8]
 800b2a0:	61a5      	strmi	r5, [r4, #24]
 800b2a2:	bf58      	it	pl
 800b2a4:	60a5      	strpl	r5, [r4, #8]
 800b2a6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b2a8:	f015 0501 	ands.w	r5, r5, #1
 800b2ac:	d115      	bne.n	800b2da <setvbuf+0x176>
 800b2ae:	f412 7f00 	tst.w	r2, #512	; 0x200
 800b2b2:	e7c8      	b.n	800b246 <setvbuf+0xe2>
 800b2b4:	4648      	mov	r0, r9
 800b2b6:	f001 f999 	bl	800c5ec <malloc>
 800b2ba:	4606      	mov	r6, r0
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	d0ae      	beq.n	800b21e <setvbuf+0xba>
 800b2c0:	464d      	mov	r5, r9
 800b2c2:	89a3      	ldrh	r3, [r4, #12]
 800b2c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2c8:	81a3      	strh	r3, [r4, #12]
 800b2ca:	e7d0      	b.n	800b26e <setvbuf+0x10a>
 800b2cc:	2500      	movs	r5, #0
 800b2ce:	e7a8      	b.n	800b222 <setvbuf+0xbe>
 800b2d0:	60a3      	str	r3, [r4, #8]
 800b2d2:	e7e8      	b.n	800b2a6 <setvbuf+0x142>
 800b2d4:	f04f 35ff 	mov.w	r5, #4294967295
 800b2d8:	e7b9      	b.n	800b24e <setvbuf+0xea>
 800b2da:	2500      	movs	r5, #0
 800b2dc:	e7b7      	b.n	800b24e <setvbuf+0xea>
 800b2de:	bf00      	nop
 800b2e0:	2000000c 	.word	0x2000000c
 800b2e4:	0800d9f0 	.word	0x0800d9f0
 800b2e8:	0800da10 	.word	0x0800da10
 800b2ec:	0800d9d0 	.word	0x0800d9d0

0800b2f0 <siprintf>:
 800b2f0:	b40e      	push	{r1, r2, r3}
 800b2f2:	b500      	push	{lr}
 800b2f4:	b09c      	sub	sp, #112	; 0x70
 800b2f6:	ab1d      	add	r3, sp, #116	; 0x74
 800b2f8:	9002      	str	r0, [sp, #8]
 800b2fa:	9006      	str	r0, [sp, #24]
 800b2fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b300:	4809      	ldr	r0, [pc, #36]	; (800b328 <siprintf+0x38>)
 800b302:	9107      	str	r1, [sp, #28]
 800b304:	9104      	str	r1, [sp, #16]
 800b306:	4909      	ldr	r1, [pc, #36]	; (800b32c <siprintf+0x3c>)
 800b308:	f853 2b04 	ldr.w	r2, [r3], #4
 800b30c:	9105      	str	r1, [sp, #20]
 800b30e:	6800      	ldr	r0, [r0, #0]
 800b310:	9301      	str	r3, [sp, #4]
 800b312:	a902      	add	r1, sp, #8
 800b314:	f001 fe56 	bl	800cfc4 <_svfiprintf_r>
 800b318:	9b02      	ldr	r3, [sp, #8]
 800b31a:	2200      	movs	r2, #0
 800b31c:	701a      	strb	r2, [r3, #0]
 800b31e:	b01c      	add	sp, #112	; 0x70
 800b320:	f85d eb04 	ldr.w	lr, [sp], #4
 800b324:	b003      	add	sp, #12
 800b326:	4770      	bx	lr
 800b328:	2000000c 	.word	0x2000000c
 800b32c:	ffff0208 	.word	0xffff0208

0800b330 <__swbuf_r>:
 800b330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b332:	460e      	mov	r6, r1
 800b334:	4614      	mov	r4, r2
 800b336:	4605      	mov	r5, r0
 800b338:	b118      	cbz	r0, 800b342 <__swbuf_r+0x12>
 800b33a:	6983      	ldr	r3, [r0, #24]
 800b33c:	b90b      	cbnz	r3, 800b342 <__swbuf_r+0x12>
 800b33e:	f001 f84b 	bl	800c3d8 <__sinit>
 800b342:	4b21      	ldr	r3, [pc, #132]	; (800b3c8 <__swbuf_r+0x98>)
 800b344:	429c      	cmp	r4, r3
 800b346:	d12b      	bne.n	800b3a0 <__swbuf_r+0x70>
 800b348:	686c      	ldr	r4, [r5, #4]
 800b34a:	69a3      	ldr	r3, [r4, #24]
 800b34c:	60a3      	str	r3, [r4, #8]
 800b34e:	89a3      	ldrh	r3, [r4, #12]
 800b350:	071a      	lsls	r2, r3, #28
 800b352:	d52f      	bpl.n	800b3b4 <__swbuf_r+0x84>
 800b354:	6923      	ldr	r3, [r4, #16]
 800b356:	b36b      	cbz	r3, 800b3b4 <__swbuf_r+0x84>
 800b358:	6923      	ldr	r3, [r4, #16]
 800b35a:	6820      	ldr	r0, [r4, #0]
 800b35c:	1ac0      	subs	r0, r0, r3
 800b35e:	6963      	ldr	r3, [r4, #20]
 800b360:	b2f6      	uxtb	r6, r6
 800b362:	4283      	cmp	r3, r0
 800b364:	4637      	mov	r7, r6
 800b366:	dc04      	bgt.n	800b372 <__swbuf_r+0x42>
 800b368:	4621      	mov	r1, r4
 800b36a:	4628      	mov	r0, r5
 800b36c:	f000 ffa0 	bl	800c2b0 <_fflush_r>
 800b370:	bb30      	cbnz	r0, 800b3c0 <__swbuf_r+0x90>
 800b372:	68a3      	ldr	r3, [r4, #8]
 800b374:	3b01      	subs	r3, #1
 800b376:	60a3      	str	r3, [r4, #8]
 800b378:	6823      	ldr	r3, [r4, #0]
 800b37a:	1c5a      	adds	r2, r3, #1
 800b37c:	6022      	str	r2, [r4, #0]
 800b37e:	701e      	strb	r6, [r3, #0]
 800b380:	6963      	ldr	r3, [r4, #20]
 800b382:	3001      	adds	r0, #1
 800b384:	4283      	cmp	r3, r0
 800b386:	d004      	beq.n	800b392 <__swbuf_r+0x62>
 800b388:	89a3      	ldrh	r3, [r4, #12]
 800b38a:	07db      	lsls	r3, r3, #31
 800b38c:	d506      	bpl.n	800b39c <__swbuf_r+0x6c>
 800b38e:	2e0a      	cmp	r6, #10
 800b390:	d104      	bne.n	800b39c <__swbuf_r+0x6c>
 800b392:	4621      	mov	r1, r4
 800b394:	4628      	mov	r0, r5
 800b396:	f000 ff8b 	bl	800c2b0 <_fflush_r>
 800b39a:	b988      	cbnz	r0, 800b3c0 <__swbuf_r+0x90>
 800b39c:	4638      	mov	r0, r7
 800b39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3a0:	4b0a      	ldr	r3, [pc, #40]	; (800b3cc <__swbuf_r+0x9c>)
 800b3a2:	429c      	cmp	r4, r3
 800b3a4:	d101      	bne.n	800b3aa <__swbuf_r+0x7a>
 800b3a6:	68ac      	ldr	r4, [r5, #8]
 800b3a8:	e7cf      	b.n	800b34a <__swbuf_r+0x1a>
 800b3aa:	4b09      	ldr	r3, [pc, #36]	; (800b3d0 <__swbuf_r+0xa0>)
 800b3ac:	429c      	cmp	r4, r3
 800b3ae:	bf08      	it	eq
 800b3b0:	68ec      	ldreq	r4, [r5, #12]
 800b3b2:	e7ca      	b.n	800b34a <__swbuf_r+0x1a>
 800b3b4:	4621      	mov	r1, r4
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	f000 f80c 	bl	800b3d4 <__swsetup_r>
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	d0cb      	beq.n	800b358 <__swbuf_r+0x28>
 800b3c0:	f04f 37ff 	mov.w	r7, #4294967295
 800b3c4:	e7ea      	b.n	800b39c <__swbuf_r+0x6c>
 800b3c6:	bf00      	nop
 800b3c8:	0800d9f0 	.word	0x0800d9f0
 800b3cc:	0800da10 	.word	0x0800da10
 800b3d0:	0800d9d0 	.word	0x0800d9d0

0800b3d4 <__swsetup_r>:
 800b3d4:	4b32      	ldr	r3, [pc, #200]	; (800b4a0 <__swsetup_r+0xcc>)
 800b3d6:	b570      	push	{r4, r5, r6, lr}
 800b3d8:	681d      	ldr	r5, [r3, #0]
 800b3da:	4606      	mov	r6, r0
 800b3dc:	460c      	mov	r4, r1
 800b3de:	b125      	cbz	r5, 800b3ea <__swsetup_r+0x16>
 800b3e0:	69ab      	ldr	r3, [r5, #24]
 800b3e2:	b913      	cbnz	r3, 800b3ea <__swsetup_r+0x16>
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	f000 fff7 	bl	800c3d8 <__sinit>
 800b3ea:	4b2e      	ldr	r3, [pc, #184]	; (800b4a4 <__swsetup_r+0xd0>)
 800b3ec:	429c      	cmp	r4, r3
 800b3ee:	d10f      	bne.n	800b410 <__swsetup_r+0x3c>
 800b3f0:	686c      	ldr	r4, [r5, #4]
 800b3f2:	89a3      	ldrh	r3, [r4, #12]
 800b3f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3f8:	0719      	lsls	r1, r3, #28
 800b3fa:	d42c      	bmi.n	800b456 <__swsetup_r+0x82>
 800b3fc:	06dd      	lsls	r5, r3, #27
 800b3fe:	d411      	bmi.n	800b424 <__swsetup_r+0x50>
 800b400:	2309      	movs	r3, #9
 800b402:	6033      	str	r3, [r6, #0]
 800b404:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b408:	81a3      	strh	r3, [r4, #12]
 800b40a:	f04f 30ff 	mov.w	r0, #4294967295
 800b40e:	e03e      	b.n	800b48e <__swsetup_r+0xba>
 800b410:	4b25      	ldr	r3, [pc, #148]	; (800b4a8 <__swsetup_r+0xd4>)
 800b412:	429c      	cmp	r4, r3
 800b414:	d101      	bne.n	800b41a <__swsetup_r+0x46>
 800b416:	68ac      	ldr	r4, [r5, #8]
 800b418:	e7eb      	b.n	800b3f2 <__swsetup_r+0x1e>
 800b41a:	4b24      	ldr	r3, [pc, #144]	; (800b4ac <__swsetup_r+0xd8>)
 800b41c:	429c      	cmp	r4, r3
 800b41e:	bf08      	it	eq
 800b420:	68ec      	ldreq	r4, [r5, #12]
 800b422:	e7e6      	b.n	800b3f2 <__swsetup_r+0x1e>
 800b424:	0758      	lsls	r0, r3, #29
 800b426:	d512      	bpl.n	800b44e <__swsetup_r+0x7a>
 800b428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b42a:	b141      	cbz	r1, 800b43e <__swsetup_r+0x6a>
 800b42c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b430:	4299      	cmp	r1, r3
 800b432:	d002      	beq.n	800b43a <__swsetup_r+0x66>
 800b434:	4630      	mov	r0, r6
 800b436:	f001 fc89 	bl	800cd4c <_free_r>
 800b43a:	2300      	movs	r3, #0
 800b43c:	6363      	str	r3, [r4, #52]	; 0x34
 800b43e:	89a3      	ldrh	r3, [r4, #12]
 800b440:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b444:	81a3      	strh	r3, [r4, #12]
 800b446:	2300      	movs	r3, #0
 800b448:	6063      	str	r3, [r4, #4]
 800b44a:	6923      	ldr	r3, [r4, #16]
 800b44c:	6023      	str	r3, [r4, #0]
 800b44e:	89a3      	ldrh	r3, [r4, #12]
 800b450:	f043 0308 	orr.w	r3, r3, #8
 800b454:	81a3      	strh	r3, [r4, #12]
 800b456:	6923      	ldr	r3, [r4, #16]
 800b458:	b94b      	cbnz	r3, 800b46e <__swsetup_r+0x9a>
 800b45a:	89a3      	ldrh	r3, [r4, #12]
 800b45c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b464:	d003      	beq.n	800b46e <__swsetup_r+0x9a>
 800b466:	4621      	mov	r1, r4
 800b468:	4630      	mov	r0, r6
 800b46a:	f001 f87f 	bl	800c56c <__smakebuf_r>
 800b46e:	89a0      	ldrh	r0, [r4, #12]
 800b470:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b474:	f010 0301 	ands.w	r3, r0, #1
 800b478:	d00a      	beq.n	800b490 <__swsetup_r+0xbc>
 800b47a:	2300      	movs	r3, #0
 800b47c:	60a3      	str	r3, [r4, #8]
 800b47e:	6963      	ldr	r3, [r4, #20]
 800b480:	425b      	negs	r3, r3
 800b482:	61a3      	str	r3, [r4, #24]
 800b484:	6923      	ldr	r3, [r4, #16]
 800b486:	b943      	cbnz	r3, 800b49a <__swsetup_r+0xc6>
 800b488:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b48c:	d1ba      	bne.n	800b404 <__swsetup_r+0x30>
 800b48e:	bd70      	pop	{r4, r5, r6, pc}
 800b490:	0781      	lsls	r1, r0, #30
 800b492:	bf58      	it	pl
 800b494:	6963      	ldrpl	r3, [r4, #20]
 800b496:	60a3      	str	r3, [r4, #8]
 800b498:	e7f4      	b.n	800b484 <__swsetup_r+0xb0>
 800b49a:	2000      	movs	r0, #0
 800b49c:	e7f7      	b.n	800b48e <__swsetup_r+0xba>
 800b49e:	bf00      	nop
 800b4a0:	2000000c 	.word	0x2000000c
 800b4a4:	0800d9f0 	.word	0x0800d9f0
 800b4a8:	0800da10 	.word	0x0800da10
 800b4ac:	0800d9d0 	.word	0x0800d9d0

0800b4b0 <quorem>:
 800b4b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b4:	6903      	ldr	r3, [r0, #16]
 800b4b6:	690c      	ldr	r4, [r1, #16]
 800b4b8:	42a3      	cmp	r3, r4
 800b4ba:	4607      	mov	r7, r0
 800b4bc:	f2c0 8081 	blt.w	800b5c2 <quorem+0x112>
 800b4c0:	3c01      	subs	r4, #1
 800b4c2:	f101 0814 	add.w	r8, r1, #20
 800b4c6:	f100 0514 	add.w	r5, r0, #20
 800b4ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b4ce:	9301      	str	r3, [sp, #4]
 800b4d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b4d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b4e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b4e4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b4e8:	d331      	bcc.n	800b54e <quorem+0x9e>
 800b4ea:	f04f 0e00 	mov.w	lr, #0
 800b4ee:	4640      	mov	r0, r8
 800b4f0:	46ac      	mov	ip, r5
 800b4f2:	46f2      	mov	sl, lr
 800b4f4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b4f8:	b293      	uxth	r3, r2
 800b4fa:	fb06 e303 	mla	r3, r6, r3, lr
 800b4fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b502:	b29b      	uxth	r3, r3
 800b504:	ebaa 0303 	sub.w	r3, sl, r3
 800b508:	f8dc a000 	ldr.w	sl, [ip]
 800b50c:	0c12      	lsrs	r2, r2, #16
 800b50e:	fa13 f38a 	uxtah	r3, r3, sl
 800b512:	fb06 e202 	mla	r2, r6, r2, lr
 800b516:	9300      	str	r3, [sp, #0]
 800b518:	9b00      	ldr	r3, [sp, #0]
 800b51a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b51e:	b292      	uxth	r2, r2
 800b520:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b524:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b528:	f8bd 3000 	ldrh.w	r3, [sp]
 800b52c:	4581      	cmp	r9, r0
 800b52e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b532:	f84c 3b04 	str.w	r3, [ip], #4
 800b536:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b53a:	d2db      	bcs.n	800b4f4 <quorem+0x44>
 800b53c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b540:	b92b      	cbnz	r3, 800b54e <quorem+0x9e>
 800b542:	9b01      	ldr	r3, [sp, #4]
 800b544:	3b04      	subs	r3, #4
 800b546:	429d      	cmp	r5, r3
 800b548:	461a      	mov	r2, r3
 800b54a:	d32e      	bcc.n	800b5aa <quorem+0xfa>
 800b54c:	613c      	str	r4, [r7, #16]
 800b54e:	4638      	mov	r0, r7
 800b550:	f001 fae4 	bl	800cb1c <__mcmp>
 800b554:	2800      	cmp	r0, #0
 800b556:	db24      	blt.n	800b5a2 <quorem+0xf2>
 800b558:	3601      	adds	r6, #1
 800b55a:	4628      	mov	r0, r5
 800b55c:	f04f 0c00 	mov.w	ip, #0
 800b560:	f858 2b04 	ldr.w	r2, [r8], #4
 800b564:	f8d0 e000 	ldr.w	lr, [r0]
 800b568:	b293      	uxth	r3, r2
 800b56a:	ebac 0303 	sub.w	r3, ip, r3
 800b56e:	0c12      	lsrs	r2, r2, #16
 800b570:	fa13 f38e 	uxtah	r3, r3, lr
 800b574:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b578:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b57c:	b29b      	uxth	r3, r3
 800b57e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b582:	45c1      	cmp	r9, r8
 800b584:	f840 3b04 	str.w	r3, [r0], #4
 800b588:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b58c:	d2e8      	bcs.n	800b560 <quorem+0xb0>
 800b58e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b592:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b596:	b922      	cbnz	r2, 800b5a2 <quorem+0xf2>
 800b598:	3b04      	subs	r3, #4
 800b59a:	429d      	cmp	r5, r3
 800b59c:	461a      	mov	r2, r3
 800b59e:	d30a      	bcc.n	800b5b6 <quorem+0x106>
 800b5a0:	613c      	str	r4, [r7, #16]
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	b003      	add	sp, #12
 800b5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5aa:	6812      	ldr	r2, [r2, #0]
 800b5ac:	3b04      	subs	r3, #4
 800b5ae:	2a00      	cmp	r2, #0
 800b5b0:	d1cc      	bne.n	800b54c <quorem+0x9c>
 800b5b2:	3c01      	subs	r4, #1
 800b5b4:	e7c7      	b.n	800b546 <quorem+0x96>
 800b5b6:	6812      	ldr	r2, [r2, #0]
 800b5b8:	3b04      	subs	r3, #4
 800b5ba:	2a00      	cmp	r2, #0
 800b5bc:	d1f0      	bne.n	800b5a0 <quorem+0xf0>
 800b5be:	3c01      	subs	r4, #1
 800b5c0:	e7eb      	b.n	800b59a <quorem+0xea>
 800b5c2:	2000      	movs	r0, #0
 800b5c4:	e7ee      	b.n	800b5a4 <quorem+0xf4>
	...

0800b5c8 <_dtoa_r>:
 800b5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5cc:	ed2d 8b04 	vpush	{d8-d9}
 800b5d0:	ec57 6b10 	vmov	r6, r7, d0
 800b5d4:	b093      	sub	sp, #76	; 0x4c
 800b5d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b5d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b5dc:	9106      	str	r1, [sp, #24]
 800b5de:	ee10 aa10 	vmov	sl, s0
 800b5e2:	4604      	mov	r4, r0
 800b5e4:	9209      	str	r2, [sp, #36]	; 0x24
 800b5e6:	930c      	str	r3, [sp, #48]	; 0x30
 800b5e8:	46bb      	mov	fp, r7
 800b5ea:	b975      	cbnz	r5, 800b60a <_dtoa_r+0x42>
 800b5ec:	2010      	movs	r0, #16
 800b5ee:	f000 fffd 	bl	800c5ec <malloc>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	6260      	str	r0, [r4, #36]	; 0x24
 800b5f6:	b920      	cbnz	r0, 800b602 <_dtoa_r+0x3a>
 800b5f8:	4ba7      	ldr	r3, [pc, #668]	; (800b898 <_dtoa_r+0x2d0>)
 800b5fa:	21ea      	movs	r1, #234	; 0xea
 800b5fc:	48a7      	ldr	r0, [pc, #668]	; (800b89c <_dtoa_r+0x2d4>)
 800b5fe:	f001 ffa1 	bl	800d544 <__assert_func>
 800b602:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b606:	6005      	str	r5, [r0, #0]
 800b608:	60c5      	str	r5, [r0, #12]
 800b60a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b60c:	6819      	ldr	r1, [r3, #0]
 800b60e:	b151      	cbz	r1, 800b626 <_dtoa_r+0x5e>
 800b610:	685a      	ldr	r2, [r3, #4]
 800b612:	604a      	str	r2, [r1, #4]
 800b614:	2301      	movs	r3, #1
 800b616:	4093      	lsls	r3, r2
 800b618:	608b      	str	r3, [r1, #8]
 800b61a:	4620      	mov	r0, r4
 800b61c:	f001 f83c 	bl	800c698 <_Bfree>
 800b620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b622:	2200      	movs	r2, #0
 800b624:	601a      	str	r2, [r3, #0]
 800b626:	1e3b      	subs	r3, r7, #0
 800b628:	bfaa      	itet	ge
 800b62a:	2300      	movge	r3, #0
 800b62c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b630:	f8c8 3000 	strge.w	r3, [r8]
 800b634:	4b9a      	ldr	r3, [pc, #616]	; (800b8a0 <_dtoa_r+0x2d8>)
 800b636:	bfbc      	itt	lt
 800b638:	2201      	movlt	r2, #1
 800b63a:	f8c8 2000 	strlt.w	r2, [r8]
 800b63e:	ea33 030b 	bics.w	r3, r3, fp
 800b642:	d11b      	bne.n	800b67c <_dtoa_r+0xb4>
 800b644:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b646:	f242 730f 	movw	r3, #9999	; 0x270f
 800b64a:	6013      	str	r3, [r2, #0]
 800b64c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b650:	4333      	orrs	r3, r6
 800b652:	f000 8592 	beq.w	800c17a <_dtoa_r+0xbb2>
 800b656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b658:	b963      	cbnz	r3, 800b674 <_dtoa_r+0xac>
 800b65a:	4b92      	ldr	r3, [pc, #584]	; (800b8a4 <_dtoa_r+0x2dc>)
 800b65c:	e022      	b.n	800b6a4 <_dtoa_r+0xdc>
 800b65e:	4b92      	ldr	r3, [pc, #584]	; (800b8a8 <_dtoa_r+0x2e0>)
 800b660:	9301      	str	r3, [sp, #4]
 800b662:	3308      	adds	r3, #8
 800b664:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b666:	6013      	str	r3, [r2, #0]
 800b668:	9801      	ldr	r0, [sp, #4]
 800b66a:	b013      	add	sp, #76	; 0x4c
 800b66c:	ecbd 8b04 	vpop	{d8-d9}
 800b670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b674:	4b8b      	ldr	r3, [pc, #556]	; (800b8a4 <_dtoa_r+0x2dc>)
 800b676:	9301      	str	r3, [sp, #4]
 800b678:	3303      	adds	r3, #3
 800b67a:	e7f3      	b.n	800b664 <_dtoa_r+0x9c>
 800b67c:	2200      	movs	r2, #0
 800b67e:	2300      	movs	r3, #0
 800b680:	4650      	mov	r0, sl
 800b682:	4659      	mov	r1, fp
 800b684:	f7f5 fa20 	bl	8000ac8 <__aeabi_dcmpeq>
 800b688:	ec4b ab19 	vmov	d9, sl, fp
 800b68c:	4680      	mov	r8, r0
 800b68e:	b158      	cbz	r0, 800b6a8 <_dtoa_r+0xe0>
 800b690:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b692:	2301      	movs	r3, #1
 800b694:	6013      	str	r3, [r2, #0]
 800b696:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f000 856b 	beq.w	800c174 <_dtoa_r+0xbac>
 800b69e:	4883      	ldr	r0, [pc, #524]	; (800b8ac <_dtoa_r+0x2e4>)
 800b6a0:	6018      	str	r0, [r3, #0]
 800b6a2:	1e43      	subs	r3, r0, #1
 800b6a4:	9301      	str	r3, [sp, #4]
 800b6a6:	e7df      	b.n	800b668 <_dtoa_r+0xa0>
 800b6a8:	ec4b ab10 	vmov	d0, sl, fp
 800b6ac:	aa10      	add	r2, sp, #64	; 0x40
 800b6ae:	a911      	add	r1, sp, #68	; 0x44
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	f001 fad9 	bl	800cc68 <__d2b>
 800b6b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b6ba:	ee08 0a10 	vmov	s16, r0
 800b6be:	2d00      	cmp	r5, #0
 800b6c0:	f000 8084 	beq.w	800b7cc <_dtoa_r+0x204>
 800b6c4:	ee19 3a90 	vmov	r3, s19
 800b6c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b6d0:	4656      	mov	r6, sl
 800b6d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b6d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b6da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b6de:	4b74      	ldr	r3, [pc, #464]	; (800b8b0 <_dtoa_r+0x2e8>)
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	4639      	mov	r1, r7
 800b6e6:	f7f4 fdcf 	bl	8000288 <__aeabi_dsub>
 800b6ea:	a365      	add	r3, pc, #404	; (adr r3, 800b880 <_dtoa_r+0x2b8>)
 800b6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f0:	f7f4 ff82 	bl	80005f8 <__aeabi_dmul>
 800b6f4:	a364      	add	r3, pc, #400	; (adr r3, 800b888 <_dtoa_r+0x2c0>)
 800b6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fa:	f7f4 fdc7 	bl	800028c <__adddf3>
 800b6fe:	4606      	mov	r6, r0
 800b700:	4628      	mov	r0, r5
 800b702:	460f      	mov	r7, r1
 800b704:	f7f4 ff0e 	bl	8000524 <__aeabi_i2d>
 800b708:	a361      	add	r3, pc, #388	; (adr r3, 800b890 <_dtoa_r+0x2c8>)
 800b70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70e:	f7f4 ff73 	bl	80005f8 <__aeabi_dmul>
 800b712:	4602      	mov	r2, r0
 800b714:	460b      	mov	r3, r1
 800b716:	4630      	mov	r0, r6
 800b718:	4639      	mov	r1, r7
 800b71a:	f7f4 fdb7 	bl	800028c <__adddf3>
 800b71e:	4606      	mov	r6, r0
 800b720:	460f      	mov	r7, r1
 800b722:	f7f5 fa19 	bl	8000b58 <__aeabi_d2iz>
 800b726:	2200      	movs	r2, #0
 800b728:	9000      	str	r0, [sp, #0]
 800b72a:	2300      	movs	r3, #0
 800b72c:	4630      	mov	r0, r6
 800b72e:	4639      	mov	r1, r7
 800b730:	f7f5 f9d4 	bl	8000adc <__aeabi_dcmplt>
 800b734:	b150      	cbz	r0, 800b74c <_dtoa_r+0x184>
 800b736:	9800      	ldr	r0, [sp, #0]
 800b738:	f7f4 fef4 	bl	8000524 <__aeabi_i2d>
 800b73c:	4632      	mov	r2, r6
 800b73e:	463b      	mov	r3, r7
 800b740:	f7f5 f9c2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b744:	b910      	cbnz	r0, 800b74c <_dtoa_r+0x184>
 800b746:	9b00      	ldr	r3, [sp, #0]
 800b748:	3b01      	subs	r3, #1
 800b74a:	9300      	str	r3, [sp, #0]
 800b74c:	9b00      	ldr	r3, [sp, #0]
 800b74e:	2b16      	cmp	r3, #22
 800b750:	d85a      	bhi.n	800b808 <_dtoa_r+0x240>
 800b752:	9a00      	ldr	r2, [sp, #0]
 800b754:	4b57      	ldr	r3, [pc, #348]	; (800b8b4 <_dtoa_r+0x2ec>)
 800b756:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75e:	ec51 0b19 	vmov	r0, r1, d9
 800b762:	f7f5 f9bb 	bl	8000adc <__aeabi_dcmplt>
 800b766:	2800      	cmp	r0, #0
 800b768:	d050      	beq.n	800b80c <_dtoa_r+0x244>
 800b76a:	9b00      	ldr	r3, [sp, #0]
 800b76c:	3b01      	subs	r3, #1
 800b76e:	9300      	str	r3, [sp, #0]
 800b770:	2300      	movs	r3, #0
 800b772:	930b      	str	r3, [sp, #44]	; 0x2c
 800b774:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b776:	1b5d      	subs	r5, r3, r5
 800b778:	1e6b      	subs	r3, r5, #1
 800b77a:	9305      	str	r3, [sp, #20]
 800b77c:	bf45      	ittet	mi
 800b77e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b782:	9304      	strmi	r3, [sp, #16]
 800b784:	2300      	movpl	r3, #0
 800b786:	2300      	movmi	r3, #0
 800b788:	bf4c      	ite	mi
 800b78a:	9305      	strmi	r3, [sp, #20]
 800b78c:	9304      	strpl	r3, [sp, #16]
 800b78e:	9b00      	ldr	r3, [sp, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	db3d      	blt.n	800b810 <_dtoa_r+0x248>
 800b794:	9b05      	ldr	r3, [sp, #20]
 800b796:	9a00      	ldr	r2, [sp, #0]
 800b798:	920a      	str	r2, [sp, #40]	; 0x28
 800b79a:	4413      	add	r3, r2
 800b79c:	9305      	str	r3, [sp, #20]
 800b79e:	2300      	movs	r3, #0
 800b7a0:	9307      	str	r3, [sp, #28]
 800b7a2:	9b06      	ldr	r3, [sp, #24]
 800b7a4:	2b09      	cmp	r3, #9
 800b7a6:	f200 8089 	bhi.w	800b8bc <_dtoa_r+0x2f4>
 800b7aa:	2b05      	cmp	r3, #5
 800b7ac:	bfc4      	itt	gt
 800b7ae:	3b04      	subgt	r3, #4
 800b7b0:	9306      	strgt	r3, [sp, #24]
 800b7b2:	9b06      	ldr	r3, [sp, #24]
 800b7b4:	f1a3 0302 	sub.w	r3, r3, #2
 800b7b8:	bfcc      	ite	gt
 800b7ba:	2500      	movgt	r5, #0
 800b7bc:	2501      	movle	r5, #1
 800b7be:	2b03      	cmp	r3, #3
 800b7c0:	f200 8087 	bhi.w	800b8d2 <_dtoa_r+0x30a>
 800b7c4:	e8df f003 	tbb	[pc, r3]
 800b7c8:	59383a2d 	.word	0x59383a2d
 800b7cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b7d0:	441d      	add	r5, r3
 800b7d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b7d6:	2b20      	cmp	r3, #32
 800b7d8:	bfc1      	itttt	gt
 800b7da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b7de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b7e2:	fa0b f303 	lslgt.w	r3, fp, r3
 800b7e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b7ea:	bfda      	itte	le
 800b7ec:	f1c3 0320 	rsble	r3, r3, #32
 800b7f0:	fa06 f003 	lslle.w	r0, r6, r3
 800b7f4:	4318      	orrgt	r0, r3
 800b7f6:	f7f4 fe85 	bl	8000504 <__aeabi_ui2d>
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	4606      	mov	r6, r0
 800b7fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b802:	3d01      	subs	r5, #1
 800b804:	930e      	str	r3, [sp, #56]	; 0x38
 800b806:	e76a      	b.n	800b6de <_dtoa_r+0x116>
 800b808:	2301      	movs	r3, #1
 800b80a:	e7b2      	b.n	800b772 <_dtoa_r+0x1aa>
 800b80c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b80e:	e7b1      	b.n	800b774 <_dtoa_r+0x1ac>
 800b810:	9b04      	ldr	r3, [sp, #16]
 800b812:	9a00      	ldr	r2, [sp, #0]
 800b814:	1a9b      	subs	r3, r3, r2
 800b816:	9304      	str	r3, [sp, #16]
 800b818:	4253      	negs	r3, r2
 800b81a:	9307      	str	r3, [sp, #28]
 800b81c:	2300      	movs	r3, #0
 800b81e:	930a      	str	r3, [sp, #40]	; 0x28
 800b820:	e7bf      	b.n	800b7a2 <_dtoa_r+0x1da>
 800b822:	2300      	movs	r3, #0
 800b824:	9308      	str	r3, [sp, #32]
 800b826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b828:	2b00      	cmp	r3, #0
 800b82a:	dc55      	bgt.n	800b8d8 <_dtoa_r+0x310>
 800b82c:	2301      	movs	r3, #1
 800b82e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b832:	461a      	mov	r2, r3
 800b834:	9209      	str	r2, [sp, #36]	; 0x24
 800b836:	e00c      	b.n	800b852 <_dtoa_r+0x28a>
 800b838:	2301      	movs	r3, #1
 800b83a:	e7f3      	b.n	800b824 <_dtoa_r+0x25c>
 800b83c:	2300      	movs	r3, #0
 800b83e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b840:	9308      	str	r3, [sp, #32]
 800b842:	9b00      	ldr	r3, [sp, #0]
 800b844:	4413      	add	r3, r2
 800b846:	9302      	str	r3, [sp, #8]
 800b848:	3301      	adds	r3, #1
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	9303      	str	r3, [sp, #12]
 800b84e:	bfb8      	it	lt
 800b850:	2301      	movlt	r3, #1
 800b852:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b854:	2200      	movs	r2, #0
 800b856:	6042      	str	r2, [r0, #4]
 800b858:	2204      	movs	r2, #4
 800b85a:	f102 0614 	add.w	r6, r2, #20
 800b85e:	429e      	cmp	r6, r3
 800b860:	6841      	ldr	r1, [r0, #4]
 800b862:	d93d      	bls.n	800b8e0 <_dtoa_r+0x318>
 800b864:	4620      	mov	r0, r4
 800b866:	f000 fed7 	bl	800c618 <_Balloc>
 800b86a:	9001      	str	r0, [sp, #4]
 800b86c:	2800      	cmp	r0, #0
 800b86e:	d13b      	bne.n	800b8e8 <_dtoa_r+0x320>
 800b870:	4b11      	ldr	r3, [pc, #68]	; (800b8b8 <_dtoa_r+0x2f0>)
 800b872:	4602      	mov	r2, r0
 800b874:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b878:	e6c0      	b.n	800b5fc <_dtoa_r+0x34>
 800b87a:	2301      	movs	r3, #1
 800b87c:	e7df      	b.n	800b83e <_dtoa_r+0x276>
 800b87e:	bf00      	nop
 800b880:	636f4361 	.word	0x636f4361
 800b884:	3fd287a7 	.word	0x3fd287a7
 800b888:	8b60c8b3 	.word	0x8b60c8b3
 800b88c:	3fc68a28 	.word	0x3fc68a28
 800b890:	509f79fb 	.word	0x509f79fb
 800b894:	3fd34413 	.word	0x3fd34413
 800b898:	0800d94d 	.word	0x0800d94d
 800b89c:	0800d964 	.word	0x0800d964
 800b8a0:	7ff00000 	.word	0x7ff00000
 800b8a4:	0800d949 	.word	0x0800d949
 800b8a8:	0800d940 	.word	0x0800d940
 800b8ac:	0800d91d 	.word	0x0800d91d
 800b8b0:	3ff80000 	.word	0x3ff80000
 800b8b4:	0800dab8 	.word	0x0800dab8
 800b8b8:	0800d9bf 	.word	0x0800d9bf
 800b8bc:	2501      	movs	r5, #1
 800b8be:	2300      	movs	r3, #0
 800b8c0:	9306      	str	r3, [sp, #24]
 800b8c2:	9508      	str	r5, [sp, #32]
 800b8c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b8c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	2312      	movs	r3, #18
 800b8d0:	e7b0      	b.n	800b834 <_dtoa_r+0x26c>
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	9308      	str	r3, [sp, #32]
 800b8d6:	e7f5      	b.n	800b8c4 <_dtoa_r+0x2fc>
 800b8d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b8de:	e7b8      	b.n	800b852 <_dtoa_r+0x28a>
 800b8e0:	3101      	adds	r1, #1
 800b8e2:	6041      	str	r1, [r0, #4]
 800b8e4:	0052      	lsls	r2, r2, #1
 800b8e6:	e7b8      	b.n	800b85a <_dtoa_r+0x292>
 800b8e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8ea:	9a01      	ldr	r2, [sp, #4]
 800b8ec:	601a      	str	r2, [r3, #0]
 800b8ee:	9b03      	ldr	r3, [sp, #12]
 800b8f0:	2b0e      	cmp	r3, #14
 800b8f2:	f200 809d 	bhi.w	800ba30 <_dtoa_r+0x468>
 800b8f6:	2d00      	cmp	r5, #0
 800b8f8:	f000 809a 	beq.w	800ba30 <_dtoa_r+0x468>
 800b8fc:	9b00      	ldr	r3, [sp, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	dd32      	ble.n	800b968 <_dtoa_r+0x3a0>
 800b902:	4ab7      	ldr	r2, [pc, #732]	; (800bbe0 <_dtoa_r+0x618>)
 800b904:	f003 030f 	and.w	r3, r3, #15
 800b908:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b90c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b910:	9b00      	ldr	r3, [sp, #0]
 800b912:	05d8      	lsls	r0, r3, #23
 800b914:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b918:	d516      	bpl.n	800b948 <_dtoa_r+0x380>
 800b91a:	4bb2      	ldr	r3, [pc, #712]	; (800bbe4 <_dtoa_r+0x61c>)
 800b91c:	ec51 0b19 	vmov	r0, r1, d9
 800b920:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b924:	f7f4 ff92 	bl	800084c <__aeabi_ddiv>
 800b928:	f007 070f 	and.w	r7, r7, #15
 800b92c:	4682      	mov	sl, r0
 800b92e:	468b      	mov	fp, r1
 800b930:	2503      	movs	r5, #3
 800b932:	4eac      	ldr	r6, [pc, #688]	; (800bbe4 <_dtoa_r+0x61c>)
 800b934:	b957      	cbnz	r7, 800b94c <_dtoa_r+0x384>
 800b936:	4642      	mov	r2, r8
 800b938:	464b      	mov	r3, r9
 800b93a:	4650      	mov	r0, sl
 800b93c:	4659      	mov	r1, fp
 800b93e:	f7f4 ff85 	bl	800084c <__aeabi_ddiv>
 800b942:	4682      	mov	sl, r0
 800b944:	468b      	mov	fp, r1
 800b946:	e028      	b.n	800b99a <_dtoa_r+0x3d2>
 800b948:	2502      	movs	r5, #2
 800b94a:	e7f2      	b.n	800b932 <_dtoa_r+0x36a>
 800b94c:	07f9      	lsls	r1, r7, #31
 800b94e:	d508      	bpl.n	800b962 <_dtoa_r+0x39a>
 800b950:	4640      	mov	r0, r8
 800b952:	4649      	mov	r1, r9
 800b954:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b958:	f7f4 fe4e 	bl	80005f8 <__aeabi_dmul>
 800b95c:	3501      	adds	r5, #1
 800b95e:	4680      	mov	r8, r0
 800b960:	4689      	mov	r9, r1
 800b962:	107f      	asrs	r7, r7, #1
 800b964:	3608      	adds	r6, #8
 800b966:	e7e5      	b.n	800b934 <_dtoa_r+0x36c>
 800b968:	f000 809b 	beq.w	800baa2 <_dtoa_r+0x4da>
 800b96c:	9b00      	ldr	r3, [sp, #0]
 800b96e:	4f9d      	ldr	r7, [pc, #628]	; (800bbe4 <_dtoa_r+0x61c>)
 800b970:	425e      	negs	r6, r3
 800b972:	4b9b      	ldr	r3, [pc, #620]	; (800bbe0 <_dtoa_r+0x618>)
 800b974:	f006 020f 	and.w	r2, r6, #15
 800b978:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b980:	ec51 0b19 	vmov	r0, r1, d9
 800b984:	f7f4 fe38 	bl	80005f8 <__aeabi_dmul>
 800b988:	1136      	asrs	r6, r6, #4
 800b98a:	4682      	mov	sl, r0
 800b98c:	468b      	mov	fp, r1
 800b98e:	2300      	movs	r3, #0
 800b990:	2502      	movs	r5, #2
 800b992:	2e00      	cmp	r6, #0
 800b994:	d17a      	bne.n	800ba8c <_dtoa_r+0x4c4>
 800b996:	2b00      	cmp	r3, #0
 800b998:	d1d3      	bne.n	800b942 <_dtoa_r+0x37a>
 800b99a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	f000 8082 	beq.w	800baa6 <_dtoa_r+0x4de>
 800b9a2:	4b91      	ldr	r3, [pc, #580]	; (800bbe8 <_dtoa_r+0x620>)
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	4650      	mov	r0, sl
 800b9a8:	4659      	mov	r1, fp
 800b9aa:	f7f5 f897 	bl	8000adc <__aeabi_dcmplt>
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	d079      	beq.n	800baa6 <_dtoa_r+0x4de>
 800b9b2:	9b03      	ldr	r3, [sp, #12]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d076      	beq.n	800baa6 <_dtoa_r+0x4de>
 800b9b8:	9b02      	ldr	r3, [sp, #8]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	dd36      	ble.n	800ba2c <_dtoa_r+0x464>
 800b9be:	9b00      	ldr	r3, [sp, #0]
 800b9c0:	4650      	mov	r0, sl
 800b9c2:	4659      	mov	r1, fp
 800b9c4:	1e5f      	subs	r7, r3, #1
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	4b88      	ldr	r3, [pc, #544]	; (800bbec <_dtoa_r+0x624>)
 800b9ca:	f7f4 fe15 	bl	80005f8 <__aeabi_dmul>
 800b9ce:	9e02      	ldr	r6, [sp, #8]
 800b9d0:	4682      	mov	sl, r0
 800b9d2:	468b      	mov	fp, r1
 800b9d4:	3501      	adds	r5, #1
 800b9d6:	4628      	mov	r0, r5
 800b9d8:	f7f4 fda4 	bl	8000524 <__aeabi_i2d>
 800b9dc:	4652      	mov	r2, sl
 800b9de:	465b      	mov	r3, fp
 800b9e0:	f7f4 fe0a 	bl	80005f8 <__aeabi_dmul>
 800b9e4:	4b82      	ldr	r3, [pc, #520]	; (800bbf0 <_dtoa_r+0x628>)
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f7f4 fc50 	bl	800028c <__adddf3>
 800b9ec:	46d0      	mov	r8, sl
 800b9ee:	46d9      	mov	r9, fp
 800b9f0:	4682      	mov	sl, r0
 800b9f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b9f6:	2e00      	cmp	r6, #0
 800b9f8:	d158      	bne.n	800baac <_dtoa_r+0x4e4>
 800b9fa:	4b7e      	ldr	r3, [pc, #504]	; (800bbf4 <_dtoa_r+0x62c>)
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	4640      	mov	r0, r8
 800ba00:	4649      	mov	r1, r9
 800ba02:	f7f4 fc41 	bl	8000288 <__aeabi_dsub>
 800ba06:	4652      	mov	r2, sl
 800ba08:	465b      	mov	r3, fp
 800ba0a:	4680      	mov	r8, r0
 800ba0c:	4689      	mov	r9, r1
 800ba0e:	f7f5 f883 	bl	8000b18 <__aeabi_dcmpgt>
 800ba12:	2800      	cmp	r0, #0
 800ba14:	f040 8295 	bne.w	800bf42 <_dtoa_r+0x97a>
 800ba18:	4652      	mov	r2, sl
 800ba1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ba1e:	4640      	mov	r0, r8
 800ba20:	4649      	mov	r1, r9
 800ba22:	f7f5 f85b 	bl	8000adc <__aeabi_dcmplt>
 800ba26:	2800      	cmp	r0, #0
 800ba28:	f040 8289 	bne.w	800bf3e <_dtoa_r+0x976>
 800ba2c:	ec5b ab19 	vmov	sl, fp, d9
 800ba30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	f2c0 8148 	blt.w	800bcc8 <_dtoa_r+0x700>
 800ba38:	9a00      	ldr	r2, [sp, #0]
 800ba3a:	2a0e      	cmp	r2, #14
 800ba3c:	f300 8144 	bgt.w	800bcc8 <_dtoa_r+0x700>
 800ba40:	4b67      	ldr	r3, [pc, #412]	; (800bbe0 <_dtoa_r+0x618>)
 800ba42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba46:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f280 80d5 	bge.w	800bbfc <_dtoa_r+0x634>
 800ba52:	9b03      	ldr	r3, [sp, #12]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	f300 80d1 	bgt.w	800bbfc <_dtoa_r+0x634>
 800ba5a:	f040 826f 	bne.w	800bf3c <_dtoa_r+0x974>
 800ba5e:	4b65      	ldr	r3, [pc, #404]	; (800bbf4 <_dtoa_r+0x62c>)
 800ba60:	2200      	movs	r2, #0
 800ba62:	4640      	mov	r0, r8
 800ba64:	4649      	mov	r1, r9
 800ba66:	f7f4 fdc7 	bl	80005f8 <__aeabi_dmul>
 800ba6a:	4652      	mov	r2, sl
 800ba6c:	465b      	mov	r3, fp
 800ba6e:	f7f5 f849 	bl	8000b04 <__aeabi_dcmpge>
 800ba72:	9e03      	ldr	r6, [sp, #12]
 800ba74:	4637      	mov	r7, r6
 800ba76:	2800      	cmp	r0, #0
 800ba78:	f040 8245 	bne.w	800bf06 <_dtoa_r+0x93e>
 800ba7c:	9d01      	ldr	r5, [sp, #4]
 800ba7e:	2331      	movs	r3, #49	; 0x31
 800ba80:	f805 3b01 	strb.w	r3, [r5], #1
 800ba84:	9b00      	ldr	r3, [sp, #0]
 800ba86:	3301      	adds	r3, #1
 800ba88:	9300      	str	r3, [sp, #0]
 800ba8a:	e240      	b.n	800bf0e <_dtoa_r+0x946>
 800ba8c:	07f2      	lsls	r2, r6, #31
 800ba8e:	d505      	bpl.n	800ba9c <_dtoa_r+0x4d4>
 800ba90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba94:	f7f4 fdb0 	bl	80005f8 <__aeabi_dmul>
 800ba98:	3501      	adds	r5, #1
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	1076      	asrs	r6, r6, #1
 800ba9e:	3708      	adds	r7, #8
 800baa0:	e777      	b.n	800b992 <_dtoa_r+0x3ca>
 800baa2:	2502      	movs	r5, #2
 800baa4:	e779      	b.n	800b99a <_dtoa_r+0x3d2>
 800baa6:	9f00      	ldr	r7, [sp, #0]
 800baa8:	9e03      	ldr	r6, [sp, #12]
 800baaa:	e794      	b.n	800b9d6 <_dtoa_r+0x40e>
 800baac:	9901      	ldr	r1, [sp, #4]
 800baae:	4b4c      	ldr	r3, [pc, #304]	; (800bbe0 <_dtoa_r+0x618>)
 800bab0:	4431      	add	r1, r6
 800bab2:	910d      	str	r1, [sp, #52]	; 0x34
 800bab4:	9908      	ldr	r1, [sp, #32]
 800bab6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800baba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800babe:	2900      	cmp	r1, #0
 800bac0:	d043      	beq.n	800bb4a <_dtoa_r+0x582>
 800bac2:	494d      	ldr	r1, [pc, #308]	; (800bbf8 <_dtoa_r+0x630>)
 800bac4:	2000      	movs	r0, #0
 800bac6:	f7f4 fec1 	bl	800084c <__aeabi_ddiv>
 800baca:	4652      	mov	r2, sl
 800bacc:	465b      	mov	r3, fp
 800bace:	f7f4 fbdb 	bl	8000288 <__aeabi_dsub>
 800bad2:	9d01      	ldr	r5, [sp, #4]
 800bad4:	4682      	mov	sl, r0
 800bad6:	468b      	mov	fp, r1
 800bad8:	4649      	mov	r1, r9
 800bada:	4640      	mov	r0, r8
 800badc:	f7f5 f83c 	bl	8000b58 <__aeabi_d2iz>
 800bae0:	4606      	mov	r6, r0
 800bae2:	f7f4 fd1f 	bl	8000524 <__aeabi_i2d>
 800bae6:	4602      	mov	r2, r0
 800bae8:	460b      	mov	r3, r1
 800baea:	4640      	mov	r0, r8
 800baec:	4649      	mov	r1, r9
 800baee:	f7f4 fbcb 	bl	8000288 <__aeabi_dsub>
 800baf2:	3630      	adds	r6, #48	; 0x30
 800baf4:	f805 6b01 	strb.w	r6, [r5], #1
 800baf8:	4652      	mov	r2, sl
 800bafa:	465b      	mov	r3, fp
 800bafc:	4680      	mov	r8, r0
 800bafe:	4689      	mov	r9, r1
 800bb00:	f7f4 ffec 	bl	8000adc <__aeabi_dcmplt>
 800bb04:	2800      	cmp	r0, #0
 800bb06:	d163      	bne.n	800bbd0 <_dtoa_r+0x608>
 800bb08:	4642      	mov	r2, r8
 800bb0a:	464b      	mov	r3, r9
 800bb0c:	4936      	ldr	r1, [pc, #216]	; (800bbe8 <_dtoa_r+0x620>)
 800bb0e:	2000      	movs	r0, #0
 800bb10:	f7f4 fbba 	bl	8000288 <__aeabi_dsub>
 800bb14:	4652      	mov	r2, sl
 800bb16:	465b      	mov	r3, fp
 800bb18:	f7f4 ffe0 	bl	8000adc <__aeabi_dcmplt>
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	f040 80b5 	bne.w	800bc8c <_dtoa_r+0x6c4>
 800bb22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb24:	429d      	cmp	r5, r3
 800bb26:	d081      	beq.n	800ba2c <_dtoa_r+0x464>
 800bb28:	4b30      	ldr	r3, [pc, #192]	; (800bbec <_dtoa_r+0x624>)
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	4650      	mov	r0, sl
 800bb2e:	4659      	mov	r1, fp
 800bb30:	f7f4 fd62 	bl	80005f8 <__aeabi_dmul>
 800bb34:	4b2d      	ldr	r3, [pc, #180]	; (800bbec <_dtoa_r+0x624>)
 800bb36:	4682      	mov	sl, r0
 800bb38:	468b      	mov	fp, r1
 800bb3a:	4640      	mov	r0, r8
 800bb3c:	4649      	mov	r1, r9
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f7f4 fd5a 	bl	80005f8 <__aeabi_dmul>
 800bb44:	4680      	mov	r8, r0
 800bb46:	4689      	mov	r9, r1
 800bb48:	e7c6      	b.n	800bad8 <_dtoa_r+0x510>
 800bb4a:	4650      	mov	r0, sl
 800bb4c:	4659      	mov	r1, fp
 800bb4e:	f7f4 fd53 	bl	80005f8 <__aeabi_dmul>
 800bb52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb54:	9d01      	ldr	r5, [sp, #4]
 800bb56:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb58:	4682      	mov	sl, r0
 800bb5a:	468b      	mov	fp, r1
 800bb5c:	4649      	mov	r1, r9
 800bb5e:	4640      	mov	r0, r8
 800bb60:	f7f4 fffa 	bl	8000b58 <__aeabi_d2iz>
 800bb64:	4606      	mov	r6, r0
 800bb66:	f7f4 fcdd 	bl	8000524 <__aeabi_i2d>
 800bb6a:	3630      	adds	r6, #48	; 0x30
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	460b      	mov	r3, r1
 800bb70:	4640      	mov	r0, r8
 800bb72:	4649      	mov	r1, r9
 800bb74:	f7f4 fb88 	bl	8000288 <__aeabi_dsub>
 800bb78:	f805 6b01 	strb.w	r6, [r5], #1
 800bb7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb7e:	429d      	cmp	r5, r3
 800bb80:	4680      	mov	r8, r0
 800bb82:	4689      	mov	r9, r1
 800bb84:	f04f 0200 	mov.w	r2, #0
 800bb88:	d124      	bne.n	800bbd4 <_dtoa_r+0x60c>
 800bb8a:	4b1b      	ldr	r3, [pc, #108]	; (800bbf8 <_dtoa_r+0x630>)
 800bb8c:	4650      	mov	r0, sl
 800bb8e:	4659      	mov	r1, fp
 800bb90:	f7f4 fb7c 	bl	800028c <__adddf3>
 800bb94:	4602      	mov	r2, r0
 800bb96:	460b      	mov	r3, r1
 800bb98:	4640      	mov	r0, r8
 800bb9a:	4649      	mov	r1, r9
 800bb9c:	f7f4 ffbc 	bl	8000b18 <__aeabi_dcmpgt>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	d173      	bne.n	800bc8c <_dtoa_r+0x6c4>
 800bba4:	4652      	mov	r2, sl
 800bba6:	465b      	mov	r3, fp
 800bba8:	4913      	ldr	r1, [pc, #76]	; (800bbf8 <_dtoa_r+0x630>)
 800bbaa:	2000      	movs	r0, #0
 800bbac:	f7f4 fb6c 	bl	8000288 <__aeabi_dsub>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	4640      	mov	r0, r8
 800bbb6:	4649      	mov	r1, r9
 800bbb8:	f7f4 ff90 	bl	8000adc <__aeabi_dcmplt>
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	f43f af35 	beq.w	800ba2c <_dtoa_r+0x464>
 800bbc2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bbc4:	1e6b      	subs	r3, r5, #1
 800bbc6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bbc8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bbcc:	2b30      	cmp	r3, #48	; 0x30
 800bbce:	d0f8      	beq.n	800bbc2 <_dtoa_r+0x5fa>
 800bbd0:	9700      	str	r7, [sp, #0]
 800bbd2:	e049      	b.n	800bc68 <_dtoa_r+0x6a0>
 800bbd4:	4b05      	ldr	r3, [pc, #20]	; (800bbec <_dtoa_r+0x624>)
 800bbd6:	f7f4 fd0f 	bl	80005f8 <__aeabi_dmul>
 800bbda:	4680      	mov	r8, r0
 800bbdc:	4689      	mov	r9, r1
 800bbde:	e7bd      	b.n	800bb5c <_dtoa_r+0x594>
 800bbe0:	0800dab8 	.word	0x0800dab8
 800bbe4:	0800da90 	.word	0x0800da90
 800bbe8:	3ff00000 	.word	0x3ff00000
 800bbec:	40240000 	.word	0x40240000
 800bbf0:	401c0000 	.word	0x401c0000
 800bbf4:	40140000 	.word	0x40140000
 800bbf8:	3fe00000 	.word	0x3fe00000
 800bbfc:	9d01      	ldr	r5, [sp, #4]
 800bbfe:	4656      	mov	r6, sl
 800bc00:	465f      	mov	r7, fp
 800bc02:	4642      	mov	r2, r8
 800bc04:	464b      	mov	r3, r9
 800bc06:	4630      	mov	r0, r6
 800bc08:	4639      	mov	r1, r7
 800bc0a:	f7f4 fe1f 	bl	800084c <__aeabi_ddiv>
 800bc0e:	f7f4 ffa3 	bl	8000b58 <__aeabi_d2iz>
 800bc12:	4682      	mov	sl, r0
 800bc14:	f7f4 fc86 	bl	8000524 <__aeabi_i2d>
 800bc18:	4642      	mov	r2, r8
 800bc1a:	464b      	mov	r3, r9
 800bc1c:	f7f4 fcec 	bl	80005f8 <__aeabi_dmul>
 800bc20:	4602      	mov	r2, r0
 800bc22:	460b      	mov	r3, r1
 800bc24:	4630      	mov	r0, r6
 800bc26:	4639      	mov	r1, r7
 800bc28:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bc2c:	f7f4 fb2c 	bl	8000288 <__aeabi_dsub>
 800bc30:	f805 6b01 	strb.w	r6, [r5], #1
 800bc34:	9e01      	ldr	r6, [sp, #4]
 800bc36:	9f03      	ldr	r7, [sp, #12]
 800bc38:	1bae      	subs	r6, r5, r6
 800bc3a:	42b7      	cmp	r7, r6
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	460b      	mov	r3, r1
 800bc40:	d135      	bne.n	800bcae <_dtoa_r+0x6e6>
 800bc42:	f7f4 fb23 	bl	800028c <__adddf3>
 800bc46:	4642      	mov	r2, r8
 800bc48:	464b      	mov	r3, r9
 800bc4a:	4606      	mov	r6, r0
 800bc4c:	460f      	mov	r7, r1
 800bc4e:	f7f4 ff63 	bl	8000b18 <__aeabi_dcmpgt>
 800bc52:	b9d0      	cbnz	r0, 800bc8a <_dtoa_r+0x6c2>
 800bc54:	4642      	mov	r2, r8
 800bc56:	464b      	mov	r3, r9
 800bc58:	4630      	mov	r0, r6
 800bc5a:	4639      	mov	r1, r7
 800bc5c:	f7f4 ff34 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc60:	b110      	cbz	r0, 800bc68 <_dtoa_r+0x6a0>
 800bc62:	f01a 0f01 	tst.w	sl, #1
 800bc66:	d110      	bne.n	800bc8a <_dtoa_r+0x6c2>
 800bc68:	4620      	mov	r0, r4
 800bc6a:	ee18 1a10 	vmov	r1, s16
 800bc6e:	f000 fd13 	bl	800c698 <_Bfree>
 800bc72:	2300      	movs	r3, #0
 800bc74:	9800      	ldr	r0, [sp, #0]
 800bc76:	702b      	strb	r3, [r5, #0]
 800bc78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc7a:	3001      	adds	r0, #1
 800bc7c:	6018      	str	r0, [r3, #0]
 800bc7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	f43f acf1 	beq.w	800b668 <_dtoa_r+0xa0>
 800bc86:	601d      	str	r5, [r3, #0]
 800bc88:	e4ee      	b.n	800b668 <_dtoa_r+0xa0>
 800bc8a:	9f00      	ldr	r7, [sp, #0]
 800bc8c:	462b      	mov	r3, r5
 800bc8e:	461d      	mov	r5, r3
 800bc90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc94:	2a39      	cmp	r2, #57	; 0x39
 800bc96:	d106      	bne.n	800bca6 <_dtoa_r+0x6de>
 800bc98:	9a01      	ldr	r2, [sp, #4]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d1f7      	bne.n	800bc8e <_dtoa_r+0x6c6>
 800bc9e:	9901      	ldr	r1, [sp, #4]
 800bca0:	2230      	movs	r2, #48	; 0x30
 800bca2:	3701      	adds	r7, #1
 800bca4:	700a      	strb	r2, [r1, #0]
 800bca6:	781a      	ldrb	r2, [r3, #0]
 800bca8:	3201      	adds	r2, #1
 800bcaa:	701a      	strb	r2, [r3, #0]
 800bcac:	e790      	b.n	800bbd0 <_dtoa_r+0x608>
 800bcae:	4ba6      	ldr	r3, [pc, #664]	; (800bf48 <_dtoa_r+0x980>)
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	f7f4 fca1 	bl	80005f8 <__aeabi_dmul>
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	2300      	movs	r3, #0
 800bcba:	4606      	mov	r6, r0
 800bcbc:	460f      	mov	r7, r1
 800bcbe:	f7f4 ff03 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcc2:	2800      	cmp	r0, #0
 800bcc4:	d09d      	beq.n	800bc02 <_dtoa_r+0x63a>
 800bcc6:	e7cf      	b.n	800bc68 <_dtoa_r+0x6a0>
 800bcc8:	9a08      	ldr	r2, [sp, #32]
 800bcca:	2a00      	cmp	r2, #0
 800bccc:	f000 80d7 	beq.w	800be7e <_dtoa_r+0x8b6>
 800bcd0:	9a06      	ldr	r2, [sp, #24]
 800bcd2:	2a01      	cmp	r2, #1
 800bcd4:	f300 80ba 	bgt.w	800be4c <_dtoa_r+0x884>
 800bcd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bcda:	2a00      	cmp	r2, #0
 800bcdc:	f000 80b2 	beq.w	800be44 <_dtoa_r+0x87c>
 800bce0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bce4:	9e07      	ldr	r6, [sp, #28]
 800bce6:	9d04      	ldr	r5, [sp, #16]
 800bce8:	9a04      	ldr	r2, [sp, #16]
 800bcea:	441a      	add	r2, r3
 800bcec:	9204      	str	r2, [sp, #16]
 800bcee:	9a05      	ldr	r2, [sp, #20]
 800bcf0:	2101      	movs	r1, #1
 800bcf2:	441a      	add	r2, r3
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	9205      	str	r2, [sp, #20]
 800bcf8:	f000 fd86 	bl	800c808 <__i2b>
 800bcfc:	4607      	mov	r7, r0
 800bcfe:	2d00      	cmp	r5, #0
 800bd00:	dd0c      	ble.n	800bd1c <_dtoa_r+0x754>
 800bd02:	9b05      	ldr	r3, [sp, #20]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	dd09      	ble.n	800bd1c <_dtoa_r+0x754>
 800bd08:	42ab      	cmp	r3, r5
 800bd0a:	9a04      	ldr	r2, [sp, #16]
 800bd0c:	bfa8      	it	ge
 800bd0e:	462b      	movge	r3, r5
 800bd10:	1ad2      	subs	r2, r2, r3
 800bd12:	9204      	str	r2, [sp, #16]
 800bd14:	9a05      	ldr	r2, [sp, #20]
 800bd16:	1aed      	subs	r5, r5, r3
 800bd18:	1ad3      	subs	r3, r2, r3
 800bd1a:	9305      	str	r3, [sp, #20]
 800bd1c:	9b07      	ldr	r3, [sp, #28]
 800bd1e:	b31b      	cbz	r3, 800bd68 <_dtoa_r+0x7a0>
 800bd20:	9b08      	ldr	r3, [sp, #32]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	f000 80af 	beq.w	800be86 <_dtoa_r+0x8be>
 800bd28:	2e00      	cmp	r6, #0
 800bd2a:	dd13      	ble.n	800bd54 <_dtoa_r+0x78c>
 800bd2c:	4639      	mov	r1, r7
 800bd2e:	4632      	mov	r2, r6
 800bd30:	4620      	mov	r0, r4
 800bd32:	f000 fe29 	bl	800c988 <__pow5mult>
 800bd36:	ee18 2a10 	vmov	r2, s16
 800bd3a:	4601      	mov	r1, r0
 800bd3c:	4607      	mov	r7, r0
 800bd3e:	4620      	mov	r0, r4
 800bd40:	f000 fd78 	bl	800c834 <__multiply>
 800bd44:	ee18 1a10 	vmov	r1, s16
 800bd48:	4680      	mov	r8, r0
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	f000 fca4 	bl	800c698 <_Bfree>
 800bd50:	ee08 8a10 	vmov	s16, r8
 800bd54:	9b07      	ldr	r3, [sp, #28]
 800bd56:	1b9a      	subs	r2, r3, r6
 800bd58:	d006      	beq.n	800bd68 <_dtoa_r+0x7a0>
 800bd5a:	ee18 1a10 	vmov	r1, s16
 800bd5e:	4620      	mov	r0, r4
 800bd60:	f000 fe12 	bl	800c988 <__pow5mult>
 800bd64:	ee08 0a10 	vmov	s16, r0
 800bd68:	2101      	movs	r1, #1
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	f000 fd4c 	bl	800c808 <__i2b>
 800bd70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	4606      	mov	r6, r0
 800bd76:	f340 8088 	ble.w	800be8a <_dtoa_r+0x8c2>
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	4601      	mov	r1, r0
 800bd7e:	4620      	mov	r0, r4
 800bd80:	f000 fe02 	bl	800c988 <__pow5mult>
 800bd84:	9b06      	ldr	r3, [sp, #24]
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	4606      	mov	r6, r0
 800bd8a:	f340 8081 	ble.w	800be90 <_dtoa_r+0x8c8>
 800bd8e:	f04f 0800 	mov.w	r8, #0
 800bd92:	6933      	ldr	r3, [r6, #16]
 800bd94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bd98:	6918      	ldr	r0, [r3, #16]
 800bd9a:	f000 fce5 	bl	800c768 <__hi0bits>
 800bd9e:	f1c0 0020 	rsb	r0, r0, #32
 800bda2:	9b05      	ldr	r3, [sp, #20]
 800bda4:	4418      	add	r0, r3
 800bda6:	f010 001f 	ands.w	r0, r0, #31
 800bdaa:	f000 8092 	beq.w	800bed2 <_dtoa_r+0x90a>
 800bdae:	f1c0 0320 	rsb	r3, r0, #32
 800bdb2:	2b04      	cmp	r3, #4
 800bdb4:	f340 808a 	ble.w	800becc <_dtoa_r+0x904>
 800bdb8:	f1c0 001c 	rsb	r0, r0, #28
 800bdbc:	9b04      	ldr	r3, [sp, #16]
 800bdbe:	4403      	add	r3, r0
 800bdc0:	9304      	str	r3, [sp, #16]
 800bdc2:	9b05      	ldr	r3, [sp, #20]
 800bdc4:	4403      	add	r3, r0
 800bdc6:	4405      	add	r5, r0
 800bdc8:	9305      	str	r3, [sp, #20]
 800bdca:	9b04      	ldr	r3, [sp, #16]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	dd07      	ble.n	800bde0 <_dtoa_r+0x818>
 800bdd0:	ee18 1a10 	vmov	r1, s16
 800bdd4:	461a      	mov	r2, r3
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f000 fe30 	bl	800ca3c <__lshift>
 800bddc:	ee08 0a10 	vmov	s16, r0
 800bde0:	9b05      	ldr	r3, [sp, #20]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	dd05      	ble.n	800bdf2 <_dtoa_r+0x82a>
 800bde6:	4631      	mov	r1, r6
 800bde8:	461a      	mov	r2, r3
 800bdea:	4620      	mov	r0, r4
 800bdec:	f000 fe26 	bl	800ca3c <__lshift>
 800bdf0:	4606      	mov	r6, r0
 800bdf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d06e      	beq.n	800bed6 <_dtoa_r+0x90e>
 800bdf8:	ee18 0a10 	vmov	r0, s16
 800bdfc:	4631      	mov	r1, r6
 800bdfe:	f000 fe8d 	bl	800cb1c <__mcmp>
 800be02:	2800      	cmp	r0, #0
 800be04:	da67      	bge.n	800bed6 <_dtoa_r+0x90e>
 800be06:	9b00      	ldr	r3, [sp, #0]
 800be08:	3b01      	subs	r3, #1
 800be0a:	ee18 1a10 	vmov	r1, s16
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	220a      	movs	r2, #10
 800be12:	2300      	movs	r3, #0
 800be14:	4620      	mov	r0, r4
 800be16:	f000 fc61 	bl	800c6dc <__multadd>
 800be1a:	9b08      	ldr	r3, [sp, #32]
 800be1c:	ee08 0a10 	vmov	s16, r0
 800be20:	2b00      	cmp	r3, #0
 800be22:	f000 81b1 	beq.w	800c188 <_dtoa_r+0xbc0>
 800be26:	2300      	movs	r3, #0
 800be28:	4639      	mov	r1, r7
 800be2a:	220a      	movs	r2, #10
 800be2c:	4620      	mov	r0, r4
 800be2e:	f000 fc55 	bl	800c6dc <__multadd>
 800be32:	9b02      	ldr	r3, [sp, #8]
 800be34:	2b00      	cmp	r3, #0
 800be36:	4607      	mov	r7, r0
 800be38:	f300 808e 	bgt.w	800bf58 <_dtoa_r+0x990>
 800be3c:	9b06      	ldr	r3, [sp, #24]
 800be3e:	2b02      	cmp	r3, #2
 800be40:	dc51      	bgt.n	800bee6 <_dtoa_r+0x91e>
 800be42:	e089      	b.n	800bf58 <_dtoa_r+0x990>
 800be44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800be4a:	e74b      	b.n	800bce4 <_dtoa_r+0x71c>
 800be4c:	9b03      	ldr	r3, [sp, #12]
 800be4e:	1e5e      	subs	r6, r3, #1
 800be50:	9b07      	ldr	r3, [sp, #28]
 800be52:	42b3      	cmp	r3, r6
 800be54:	bfbf      	itttt	lt
 800be56:	9b07      	ldrlt	r3, [sp, #28]
 800be58:	9607      	strlt	r6, [sp, #28]
 800be5a:	1af2      	sublt	r2, r6, r3
 800be5c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800be5e:	bfb6      	itet	lt
 800be60:	189b      	addlt	r3, r3, r2
 800be62:	1b9e      	subge	r6, r3, r6
 800be64:	930a      	strlt	r3, [sp, #40]	; 0x28
 800be66:	9b03      	ldr	r3, [sp, #12]
 800be68:	bfb8      	it	lt
 800be6a:	2600      	movlt	r6, #0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	bfb7      	itett	lt
 800be70:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800be74:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800be78:	1a9d      	sublt	r5, r3, r2
 800be7a:	2300      	movlt	r3, #0
 800be7c:	e734      	b.n	800bce8 <_dtoa_r+0x720>
 800be7e:	9e07      	ldr	r6, [sp, #28]
 800be80:	9d04      	ldr	r5, [sp, #16]
 800be82:	9f08      	ldr	r7, [sp, #32]
 800be84:	e73b      	b.n	800bcfe <_dtoa_r+0x736>
 800be86:	9a07      	ldr	r2, [sp, #28]
 800be88:	e767      	b.n	800bd5a <_dtoa_r+0x792>
 800be8a:	9b06      	ldr	r3, [sp, #24]
 800be8c:	2b01      	cmp	r3, #1
 800be8e:	dc18      	bgt.n	800bec2 <_dtoa_r+0x8fa>
 800be90:	f1ba 0f00 	cmp.w	sl, #0
 800be94:	d115      	bne.n	800bec2 <_dtoa_r+0x8fa>
 800be96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be9a:	b993      	cbnz	r3, 800bec2 <_dtoa_r+0x8fa>
 800be9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bea0:	0d1b      	lsrs	r3, r3, #20
 800bea2:	051b      	lsls	r3, r3, #20
 800bea4:	b183      	cbz	r3, 800bec8 <_dtoa_r+0x900>
 800bea6:	9b04      	ldr	r3, [sp, #16]
 800bea8:	3301      	adds	r3, #1
 800beaa:	9304      	str	r3, [sp, #16]
 800beac:	9b05      	ldr	r3, [sp, #20]
 800beae:	3301      	adds	r3, #1
 800beb0:	9305      	str	r3, [sp, #20]
 800beb2:	f04f 0801 	mov.w	r8, #1
 800beb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beb8:	2b00      	cmp	r3, #0
 800beba:	f47f af6a 	bne.w	800bd92 <_dtoa_r+0x7ca>
 800bebe:	2001      	movs	r0, #1
 800bec0:	e76f      	b.n	800bda2 <_dtoa_r+0x7da>
 800bec2:	f04f 0800 	mov.w	r8, #0
 800bec6:	e7f6      	b.n	800beb6 <_dtoa_r+0x8ee>
 800bec8:	4698      	mov	r8, r3
 800beca:	e7f4      	b.n	800beb6 <_dtoa_r+0x8ee>
 800becc:	f43f af7d 	beq.w	800bdca <_dtoa_r+0x802>
 800bed0:	4618      	mov	r0, r3
 800bed2:	301c      	adds	r0, #28
 800bed4:	e772      	b.n	800bdbc <_dtoa_r+0x7f4>
 800bed6:	9b03      	ldr	r3, [sp, #12]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	dc37      	bgt.n	800bf4c <_dtoa_r+0x984>
 800bedc:	9b06      	ldr	r3, [sp, #24]
 800bede:	2b02      	cmp	r3, #2
 800bee0:	dd34      	ble.n	800bf4c <_dtoa_r+0x984>
 800bee2:	9b03      	ldr	r3, [sp, #12]
 800bee4:	9302      	str	r3, [sp, #8]
 800bee6:	9b02      	ldr	r3, [sp, #8]
 800bee8:	b96b      	cbnz	r3, 800bf06 <_dtoa_r+0x93e>
 800beea:	4631      	mov	r1, r6
 800beec:	2205      	movs	r2, #5
 800beee:	4620      	mov	r0, r4
 800bef0:	f000 fbf4 	bl	800c6dc <__multadd>
 800bef4:	4601      	mov	r1, r0
 800bef6:	4606      	mov	r6, r0
 800bef8:	ee18 0a10 	vmov	r0, s16
 800befc:	f000 fe0e 	bl	800cb1c <__mcmp>
 800bf00:	2800      	cmp	r0, #0
 800bf02:	f73f adbb 	bgt.w	800ba7c <_dtoa_r+0x4b4>
 800bf06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf08:	9d01      	ldr	r5, [sp, #4]
 800bf0a:	43db      	mvns	r3, r3
 800bf0c:	9300      	str	r3, [sp, #0]
 800bf0e:	f04f 0800 	mov.w	r8, #0
 800bf12:	4631      	mov	r1, r6
 800bf14:	4620      	mov	r0, r4
 800bf16:	f000 fbbf 	bl	800c698 <_Bfree>
 800bf1a:	2f00      	cmp	r7, #0
 800bf1c:	f43f aea4 	beq.w	800bc68 <_dtoa_r+0x6a0>
 800bf20:	f1b8 0f00 	cmp.w	r8, #0
 800bf24:	d005      	beq.n	800bf32 <_dtoa_r+0x96a>
 800bf26:	45b8      	cmp	r8, r7
 800bf28:	d003      	beq.n	800bf32 <_dtoa_r+0x96a>
 800bf2a:	4641      	mov	r1, r8
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f000 fbb3 	bl	800c698 <_Bfree>
 800bf32:	4639      	mov	r1, r7
 800bf34:	4620      	mov	r0, r4
 800bf36:	f000 fbaf 	bl	800c698 <_Bfree>
 800bf3a:	e695      	b.n	800bc68 <_dtoa_r+0x6a0>
 800bf3c:	2600      	movs	r6, #0
 800bf3e:	4637      	mov	r7, r6
 800bf40:	e7e1      	b.n	800bf06 <_dtoa_r+0x93e>
 800bf42:	9700      	str	r7, [sp, #0]
 800bf44:	4637      	mov	r7, r6
 800bf46:	e599      	b.n	800ba7c <_dtoa_r+0x4b4>
 800bf48:	40240000 	.word	0x40240000
 800bf4c:	9b08      	ldr	r3, [sp, #32]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	f000 80ca 	beq.w	800c0e8 <_dtoa_r+0xb20>
 800bf54:	9b03      	ldr	r3, [sp, #12]
 800bf56:	9302      	str	r3, [sp, #8]
 800bf58:	2d00      	cmp	r5, #0
 800bf5a:	dd05      	ble.n	800bf68 <_dtoa_r+0x9a0>
 800bf5c:	4639      	mov	r1, r7
 800bf5e:	462a      	mov	r2, r5
 800bf60:	4620      	mov	r0, r4
 800bf62:	f000 fd6b 	bl	800ca3c <__lshift>
 800bf66:	4607      	mov	r7, r0
 800bf68:	f1b8 0f00 	cmp.w	r8, #0
 800bf6c:	d05b      	beq.n	800c026 <_dtoa_r+0xa5e>
 800bf6e:	6879      	ldr	r1, [r7, #4]
 800bf70:	4620      	mov	r0, r4
 800bf72:	f000 fb51 	bl	800c618 <_Balloc>
 800bf76:	4605      	mov	r5, r0
 800bf78:	b928      	cbnz	r0, 800bf86 <_dtoa_r+0x9be>
 800bf7a:	4b87      	ldr	r3, [pc, #540]	; (800c198 <_dtoa_r+0xbd0>)
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bf82:	f7ff bb3b 	b.w	800b5fc <_dtoa_r+0x34>
 800bf86:	693a      	ldr	r2, [r7, #16]
 800bf88:	3202      	adds	r2, #2
 800bf8a:	0092      	lsls	r2, r2, #2
 800bf8c:	f107 010c 	add.w	r1, r7, #12
 800bf90:	300c      	adds	r0, #12
 800bf92:	f000 fb33 	bl	800c5fc <memcpy>
 800bf96:	2201      	movs	r2, #1
 800bf98:	4629      	mov	r1, r5
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	f000 fd4e 	bl	800ca3c <__lshift>
 800bfa0:	9b01      	ldr	r3, [sp, #4]
 800bfa2:	f103 0901 	add.w	r9, r3, #1
 800bfa6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bfaa:	4413      	add	r3, r2
 800bfac:	9305      	str	r3, [sp, #20]
 800bfae:	f00a 0301 	and.w	r3, sl, #1
 800bfb2:	46b8      	mov	r8, r7
 800bfb4:	9304      	str	r3, [sp, #16]
 800bfb6:	4607      	mov	r7, r0
 800bfb8:	4631      	mov	r1, r6
 800bfba:	ee18 0a10 	vmov	r0, s16
 800bfbe:	f7ff fa77 	bl	800b4b0 <quorem>
 800bfc2:	4641      	mov	r1, r8
 800bfc4:	9002      	str	r0, [sp, #8]
 800bfc6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bfca:	ee18 0a10 	vmov	r0, s16
 800bfce:	f000 fda5 	bl	800cb1c <__mcmp>
 800bfd2:	463a      	mov	r2, r7
 800bfd4:	9003      	str	r0, [sp, #12]
 800bfd6:	4631      	mov	r1, r6
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f000 fdbb 	bl	800cb54 <__mdiff>
 800bfde:	68c2      	ldr	r2, [r0, #12]
 800bfe0:	f109 3bff 	add.w	fp, r9, #4294967295
 800bfe4:	4605      	mov	r5, r0
 800bfe6:	bb02      	cbnz	r2, 800c02a <_dtoa_r+0xa62>
 800bfe8:	4601      	mov	r1, r0
 800bfea:	ee18 0a10 	vmov	r0, s16
 800bfee:	f000 fd95 	bl	800cb1c <__mcmp>
 800bff2:	4602      	mov	r2, r0
 800bff4:	4629      	mov	r1, r5
 800bff6:	4620      	mov	r0, r4
 800bff8:	9207      	str	r2, [sp, #28]
 800bffa:	f000 fb4d 	bl	800c698 <_Bfree>
 800bffe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c002:	ea43 0102 	orr.w	r1, r3, r2
 800c006:	9b04      	ldr	r3, [sp, #16]
 800c008:	430b      	orrs	r3, r1
 800c00a:	464d      	mov	r5, r9
 800c00c:	d10f      	bne.n	800c02e <_dtoa_r+0xa66>
 800c00e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c012:	d02a      	beq.n	800c06a <_dtoa_r+0xaa2>
 800c014:	9b03      	ldr	r3, [sp, #12]
 800c016:	2b00      	cmp	r3, #0
 800c018:	dd02      	ble.n	800c020 <_dtoa_r+0xa58>
 800c01a:	9b02      	ldr	r3, [sp, #8]
 800c01c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c020:	f88b a000 	strb.w	sl, [fp]
 800c024:	e775      	b.n	800bf12 <_dtoa_r+0x94a>
 800c026:	4638      	mov	r0, r7
 800c028:	e7ba      	b.n	800bfa0 <_dtoa_r+0x9d8>
 800c02a:	2201      	movs	r2, #1
 800c02c:	e7e2      	b.n	800bff4 <_dtoa_r+0xa2c>
 800c02e:	9b03      	ldr	r3, [sp, #12]
 800c030:	2b00      	cmp	r3, #0
 800c032:	db04      	blt.n	800c03e <_dtoa_r+0xa76>
 800c034:	9906      	ldr	r1, [sp, #24]
 800c036:	430b      	orrs	r3, r1
 800c038:	9904      	ldr	r1, [sp, #16]
 800c03a:	430b      	orrs	r3, r1
 800c03c:	d122      	bne.n	800c084 <_dtoa_r+0xabc>
 800c03e:	2a00      	cmp	r2, #0
 800c040:	ddee      	ble.n	800c020 <_dtoa_r+0xa58>
 800c042:	ee18 1a10 	vmov	r1, s16
 800c046:	2201      	movs	r2, #1
 800c048:	4620      	mov	r0, r4
 800c04a:	f000 fcf7 	bl	800ca3c <__lshift>
 800c04e:	4631      	mov	r1, r6
 800c050:	ee08 0a10 	vmov	s16, r0
 800c054:	f000 fd62 	bl	800cb1c <__mcmp>
 800c058:	2800      	cmp	r0, #0
 800c05a:	dc03      	bgt.n	800c064 <_dtoa_r+0xa9c>
 800c05c:	d1e0      	bne.n	800c020 <_dtoa_r+0xa58>
 800c05e:	f01a 0f01 	tst.w	sl, #1
 800c062:	d0dd      	beq.n	800c020 <_dtoa_r+0xa58>
 800c064:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c068:	d1d7      	bne.n	800c01a <_dtoa_r+0xa52>
 800c06a:	2339      	movs	r3, #57	; 0x39
 800c06c:	f88b 3000 	strb.w	r3, [fp]
 800c070:	462b      	mov	r3, r5
 800c072:	461d      	mov	r5, r3
 800c074:	3b01      	subs	r3, #1
 800c076:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c07a:	2a39      	cmp	r2, #57	; 0x39
 800c07c:	d071      	beq.n	800c162 <_dtoa_r+0xb9a>
 800c07e:	3201      	adds	r2, #1
 800c080:	701a      	strb	r2, [r3, #0]
 800c082:	e746      	b.n	800bf12 <_dtoa_r+0x94a>
 800c084:	2a00      	cmp	r2, #0
 800c086:	dd07      	ble.n	800c098 <_dtoa_r+0xad0>
 800c088:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c08c:	d0ed      	beq.n	800c06a <_dtoa_r+0xaa2>
 800c08e:	f10a 0301 	add.w	r3, sl, #1
 800c092:	f88b 3000 	strb.w	r3, [fp]
 800c096:	e73c      	b.n	800bf12 <_dtoa_r+0x94a>
 800c098:	9b05      	ldr	r3, [sp, #20]
 800c09a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c09e:	4599      	cmp	r9, r3
 800c0a0:	d047      	beq.n	800c132 <_dtoa_r+0xb6a>
 800c0a2:	ee18 1a10 	vmov	r1, s16
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	220a      	movs	r2, #10
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	f000 fb16 	bl	800c6dc <__multadd>
 800c0b0:	45b8      	cmp	r8, r7
 800c0b2:	ee08 0a10 	vmov	s16, r0
 800c0b6:	f04f 0300 	mov.w	r3, #0
 800c0ba:	f04f 020a 	mov.w	r2, #10
 800c0be:	4641      	mov	r1, r8
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	d106      	bne.n	800c0d2 <_dtoa_r+0xb0a>
 800c0c4:	f000 fb0a 	bl	800c6dc <__multadd>
 800c0c8:	4680      	mov	r8, r0
 800c0ca:	4607      	mov	r7, r0
 800c0cc:	f109 0901 	add.w	r9, r9, #1
 800c0d0:	e772      	b.n	800bfb8 <_dtoa_r+0x9f0>
 800c0d2:	f000 fb03 	bl	800c6dc <__multadd>
 800c0d6:	4639      	mov	r1, r7
 800c0d8:	4680      	mov	r8, r0
 800c0da:	2300      	movs	r3, #0
 800c0dc:	220a      	movs	r2, #10
 800c0de:	4620      	mov	r0, r4
 800c0e0:	f000 fafc 	bl	800c6dc <__multadd>
 800c0e4:	4607      	mov	r7, r0
 800c0e6:	e7f1      	b.n	800c0cc <_dtoa_r+0xb04>
 800c0e8:	9b03      	ldr	r3, [sp, #12]
 800c0ea:	9302      	str	r3, [sp, #8]
 800c0ec:	9d01      	ldr	r5, [sp, #4]
 800c0ee:	ee18 0a10 	vmov	r0, s16
 800c0f2:	4631      	mov	r1, r6
 800c0f4:	f7ff f9dc 	bl	800b4b0 <quorem>
 800c0f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c0fc:	9b01      	ldr	r3, [sp, #4]
 800c0fe:	f805 ab01 	strb.w	sl, [r5], #1
 800c102:	1aea      	subs	r2, r5, r3
 800c104:	9b02      	ldr	r3, [sp, #8]
 800c106:	4293      	cmp	r3, r2
 800c108:	dd09      	ble.n	800c11e <_dtoa_r+0xb56>
 800c10a:	ee18 1a10 	vmov	r1, s16
 800c10e:	2300      	movs	r3, #0
 800c110:	220a      	movs	r2, #10
 800c112:	4620      	mov	r0, r4
 800c114:	f000 fae2 	bl	800c6dc <__multadd>
 800c118:	ee08 0a10 	vmov	s16, r0
 800c11c:	e7e7      	b.n	800c0ee <_dtoa_r+0xb26>
 800c11e:	9b02      	ldr	r3, [sp, #8]
 800c120:	2b00      	cmp	r3, #0
 800c122:	bfc8      	it	gt
 800c124:	461d      	movgt	r5, r3
 800c126:	9b01      	ldr	r3, [sp, #4]
 800c128:	bfd8      	it	le
 800c12a:	2501      	movle	r5, #1
 800c12c:	441d      	add	r5, r3
 800c12e:	f04f 0800 	mov.w	r8, #0
 800c132:	ee18 1a10 	vmov	r1, s16
 800c136:	2201      	movs	r2, #1
 800c138:	4620      	mov	r0, r4
 800c13a:	f000 fc7f 	bl	800ca3c <__lshift>
 800c13e:	4631      	mov	r1, r6
 800c140:	ee08 0a10 	vmov	s16, r0
 800c144:	f000 fcea 	bl	800cb1c <__mcmp>
 800c148:	2800      	cmp	r0, #0
 800c14a:	dc91      	bgt.n	800c070 <_dtoa_r+0xaa8>
 800c14c:	d102      	bne.n	800c154 <_dtoa_r+0xb8c>
 800c14e:	f01a 0f01 	tst.w	sl, #1
 800c152:	d18d      	bne.n	800c070 <_dtoa_r+0xaa8>
 800c154:	462b      	mov	r3, r5
 800c156:	461d      	mov	r5, r3
 800c158:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c15c:	2a30      	cmp	r2, #48	; 0x30
 800c15e:	d0fa      	beq.n	800c156 <_dtoa_r+0xb8e>
 800c160:	e6d7      	b.n	800bf12 <_dtoa_r+0x94a>
 800c162:	9a01      	ldr	r2, [sp, #4]
 800c164:	429a      	cmp	r2, r3
 800c166:	d184      	bne.n	800c072 <_dtoa_r+0xaaa>
 800c168:	9b00      	ldr	r3, [sp, #0]
 800c16a:	3301      	adds	r3, #1
 800c16c:	9300      	str	r3, [sp, #0]
 800c16e:	2331      	movs	r3, #49	; 0x31
 800c170:	7013      	strb	r3, [r2, #0]
 800c172:	e6ce      	b.n	800bf12 <_dtoa_r+0x94a>
 800c174:	4b09      	ldr	r3, [pc, #36]	; (800c19c <_dtoa_r+0xbd4>)
 800c176:	f7ff ba95 	b.w	800b6a4 <_dtoa_r+0xdc>
 800c17a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f47f aa6e 	bne.w	800b65e <_dtoa_r+0x96>
 800c182:	4b07      	ldr	r3, [pc, #28]	; (800c1a0 <_dtoa_r+0xbd8>)
 800c184:	f7ff ba8e 	b.w	800b6a4 <_dtoa_r+0xdc>
 800c188:	9b02      	ldr	r3, [sp, #8]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	dcae      	bgt.n	800c0ec <_dtoa_r+0xb24>
 800c18e:	9b06      	ldr	r3, [sp, #24]
 800c190:	2b02      	cmp	r3, #2
 800c192:	f73f aea8 	bgt.w	800bee6 <_dtoa_r+0x91e>
 800c196:	e7a9      	b.n	800c0ec <_dtoa_r+0xb24>
 800c198:	0800d9bf 	.word	0x0800d9bf
 800c19c:	0800d91c 	.word	0x0800d91c
 800c1a0:	0800d940 	.word	0x0800d940

0800c1a4 <__sflush_r>:
 800c1a4:	898a      	ldrh	r2, [r1, #12]
 800c1a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1aa:	4605      	mov	r5, r0
 800c1ac:	0710      	lsls	r0, r2, #28
 800c1ae:	460c      	mov	r4, r1
 800c1b0:	d458      	bmi.n	800c264 <__sflush_r+0xc0>
 800c1b2:	684b      	ldr	r3, [r1, #4]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	dc05      	bgt.n	800c1c4 <__sflush_r+0x20>
 800c1b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	dc02      	bgt.n	800c1c4 <__sflush_r+0x20>
 800c1be:	2000      	movs	r0, #0
 800c1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1c6:	2e00      	cmp	r6, #0
 800c1c8:	d0f9      	beq.n	800c1be <__sflush_r+0x1a>
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c1d0:	682f      	ldr	r7, [r5, #0]
 800c1d2:	602b      	str	r3, [r5, #0]
 800c1d4:	d032      	beq.n	800c23c <__sflush_r+0x98>
 800c1d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1d8:	89a3      	ldrh	r3, [r4, #12]
 800c1da:	075a      	lsls	r2, r3, #29
 800c1dc:	d505      	bpl.n	800c1ea <__sflush_r+0x46>
 800c1de:	6863      	ldr	r3, [r4, #4]
 800c1e0:	1ac0      	subs	r0, r0, r3
 800c1e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1e4:	b10b      	cbz	r3, 800c1ea <__sflush_r+0x46>
 800c1e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1e8:	1ac0      	subs	r0, r0, r3
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1f0:	6a21      	ldr	r1, [r4, #32]
 800c1f2:	4628      	mov	r0, r5
 800c1f4:	47b0      	blx	r6
 800c1f6:	1c43      	adds	r3, r0, #1
 800c1f8:	89a3      	ldrh	r3, [r4, #12]
 800c1fa:	d106      	bne.n	800c20a <__sflush_r+0x66>
 800c1fc:	6829      	ldr	r1, [r5, #0]
 800c1fe:	291d      	cmp	r1, #29
 800c200:	d82c      	bhi.n	800c25c <__sflush_r+0xb8>
 800c202:	4a2a      	ldr	r2, [pc, #168]	; (800c2ac <__sflush_r+0x108>)
 800c204:	40ca      	lsrs	r2, r1
 800c206:	07d6      	lsls	r6, r2, #31
 800c208:	d528      	bpl.n	800c25c <__sflush_r+0xb8>
 800c20a:	2200      	movs	r2, #0
 800c20c:	6062      	str	r2, [r4, #4]
 800c20e:	04d9      	lsls	r1, r3, #19
 800c210:	6922      	ldr	r2, [r4, #16]
 800c212:	6022      	str	r2, [r4, #0]
 800c214:	d504      	bpl.n	800c220 <__sflush_r+0x7c>
 800c216:	1c42      	adds	r2, r0, #1
 800c218:	d101      	bne.n	800c21e <__sflush_r+0x7a>
 800c21a:	682b      	ldr	r3, [r5, #0]
 800c21c:	b903      	cbnz	r3, 800c220 <__sflush_r+0x7c>
 800c21e:	6560      	str	r0, [r4, #84]	; 0x54
 800c220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c222:	602f      	str	r7, [r5, #0]
 800c224:	2900      	cmp	r1, #0
 800c226:	d0ca      	beq.n	800c1be <__sflush_r+0x1a>
 800c228:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c22c:	4299      	cmp	r1, r3
 800c22e:	d002      	beq.n	800c236 <__sflush_r+0x92>
 800c230:	4628      	mov	r0, r5
 800c232:	f000 fd8b 	bl	800cd4c <_free_r>
 800c236:	2000      	movs	r0, #0
 800c238:	6360      	str	r0, [r4, #52]	; 0x34
 800c23a:	e7c1      	b.n	800c1c0 <__sflush_r+0x1c>
 800c23c:	6a21      	ldr	r1, [r4, #32]
 800c23e:	2301      	movs	r3, #1
 800c240:	4628      	mov	r0, r5
 800c242:	47b0      	blx	r6
 800c244:	1c41      	adds	r1, r0, #1
 800c246:	d1c7      	bne.n	800c1d8 <__sflush_r+0x34>
 800c248:	682b      	ldr	r3, [r5, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d0c4      	beq.n	800c1d8 <__sflush_r+0x34>
 800c24e:	2b1d      	cmp	r3, #29
 800c250:	d001      	beq.n	800c256 <__sflush_r+0xb2>
 800c252:	2b16      	cmp	r3, #22
 800c254:	d101      	bne.n	800c25a <__sflush_r+0xb6>
 800c256:	602f      	str	r7, [r5, #0]
 800c258:	e7b1      	b.n	800c1be <__sflush_r+0x1a>
 800c25a:	89a3      	ldrh	r3, [r4, #12]
 800c25c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c260:	81a3      	strh	r3, [r4, #12]
 800c262:	e7ad      	b.n	800c1c0 <__sflush_r+0x1c>
 800c264:	690f      	ldr	r7, [r1, #16]
 800c266:	2f00      	cmp	r7, #0
 800c268:	d0a9      	beq.n	800c1be <__sflush_r+0x1a>
 800c26a:	0793      	lsls	r3, r2, #30
 800c26c:	680e      	ldr	r6, [r1, #0]
 800c26e:	bf08      	it	eq
 800c270:	694b      	ldreq	r3, [r1, #20]
 800c272:	600f      	str	r7, [r1, #0]
 800c274:	bf18      	it	ne
 800c276:	2300      	movne	r3, #0
 800c278:	eba6 0807 	sub.w	r8, r6, r7
 800c27c:	608b      	str	r3, [r1, #8]
 800c27e:	f1b8 0f00 	cmp.w	r8, #0
 800c282:	dd9c      	ble.n	800c1be <__sflush_r+0x1a>
 800c284:	6a21      	ldr	r1, [r4, #32]
 800c286:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c288:	4643      	mov	r3, r8
 800c28a:	463a      	mov	r2, r7
 800c28c:	4628      	mov	r0, r5
 800c28e:	47b0      	blx	r6
 800c290:	2800      	cmp	r0, #0
 800c292:	dc06      	bgt.n	800c2a2 <__sflush_r+0xfe>
 800c294:	89a3      	ldrh	r3, [r4, #12]
 800c296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c29a:	81a3      	strh	r3, [r4, #12]
 800c29c:	f04f 30ff 	mov.w	r0, #4294967295
 800c2a0:	e78e      	b.n	800c1c0 <__sflush_r+0x1c>
 800c2a2:	4407      	add	r7, r0
 800c2a4:	eba8 0800 	sub.w	r8, r8, r0
 800c2a8:	e7e9      	b.n	800c27e <__sflush_r+0xda>
 800c2aa:	bf00      	nop
 800c2ac:	20400001 	.word	0x20400001

0800c2b0 <_fflush_r>:
 800c2b0:	b538      	push	{r3, r4, r5, lr}
 800c2b2:	690b      	ldr	r3, [r1, #16]
 800c2b4:	4605      	mov	r5, r0
 800c2b6:	460c      	mov	r4, r1
 800c2b8:	b913      	cbnz	r3, 800c2c0 <_fflush_r+0x10>
 800c2ba:	2500      	movs	r5, #0
 800c2bc:	4628      	mov	r0, r5
 800c2be:	bd38      	pop	{r3, r4, r5, pc}
 800c2c0:	b118      	cbz	r0, 800c2ca <_fflush_r+0x1a>
 800c2c2:	6983      	ldr	r3, [r0, #24]
 800c2c4:	b90b      	cbnz	r3, 800c2ca <_fflush_r+0x1a>
 800c2c6:	f000 f887 	bl	800c3d8 <__sinit>
 800c2ca:	4b14      	ldr	r3, [pc, #80]	; (800c31c <_fflush_r+0x6c>)
 800c2cc:	429c      	cmp	r4, r3
 800c2ce:	d11b      	bne.n	800c308 <_fflush_r+0x58>
 800c2d0:	686c      	ldr	r4, [r5, #4]
 800c2d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d0ef      	beq.n	800c2ba <_fflush_r+0xa>
 800c2da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c2dc:	07d0      	lsls	r0, r2, #31
 800c2de:	d404      	bmi.n	800c2ea <_fflush_r+0x3a>
 800c2e0:	0599      	lsls	r1, r3, #22
 800c2e2:	d402      	bmi.n	800c2ea <_fflush_r+0x3a>
 800c2e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2e6:	f000 f91a 	bl	800c51e <__retarget_lock_acquire_recursive>
 800c2ea:	4628      	mov	r0, r5
 800c2ec:	4621      	mov	r1, r4
 800c2ee:	f7ff ff59 	bl	800c1a4 <__sflush_r>
 800c2f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2f4:	07da      	lsls	r2, r3, #31
 800c2f6:	4605      	mov	r5, r0
 800c2f8:	d4e0      	bmi.n	800c2bc <_fflush_r+0xc>
 800c2fa:	89a3      	ldrh	r3, [r4, #12]
 800c2fc:	059b      	lsls	r3, r3, #22
 800c2fe:	d4dd      	bmi.n	800c2bc <_fflush_r+0xc>
 800c300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c302:	f000 f90d 	bl	800c520 <__retarget_lock_release_recursive>
 800c306:	e7d9      	b.n	800c2bc <_fflush_r+0xc>
 800c308:	4b05      	ldr	r3, [pc, #20]	; (800c320 <_fflush_r+0x70>)
 800c30a:	429c      	cmp	r4, r3
 800c30c:	d101      	bne.n	800c312 <_fflush_r+0x62>
 800c30e:	68ac      	ldr	r4, [r5, #8]
 800c310:	e7df      	b.n	800c2d2 <_fflush_r+0x22>
 800c312:	4b04      	ldr	r3, [pc, #16]	; (800c324 <_fflush_r+0x74>)
 800c314:	429c      	cmp	r4, r3
 800c316:	bf08      	it	eq
 800c318:	68ec      	ldreq	r4, [r5, #12]
 800c31a:	e7da      	b.n	800c2d2 <_fflush_r+0x22>
 800c31c:	0800d9f0 	.word	0x0800d9f0
 800c320:	0800da10 	.word	0x0800da10
 800c324:	0800d9d0 	.word	0x0800d9d0

0800c328 <std>:
 800c328:	2300      	movs	r3, #0
 800c32a:	b510      	push	{r4, lr}
 800c32c:	4604      	mov	r4, r0
 800c32e:	e9c0 3300 	strd	r3, r3, [r0]
 800c332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c336:	6083      	str	r3, [r0, #8]
 800c338:	8181      	strh	r1, [r0, #12]
 800c33a:	6643      	str	r3, [r0, #100]	; 0x64
 800c33c:	81c2      	strh	r2, [r0, #14]
 800c33e:	6183      	str	r3, [r0, #24]
 800c340:	4619      	mov	r1, r3
 800c342:	2208      	movs	r2, #8
 800c344:	305c      	adds	r0, #92	; 0x5c
 800c346:	f7fe fa7b 	bl	800a840 <memset>
 800c34a:	4b05      	ldr	r3, [pc, #20]	; (800c360 <std+0x38>)
 800c34c:	6263      	str	r3, [r4, #36]	; 0x24
 800c34e:	4b05      	ldr	r3, [pc, #20]	; (800c364 <std+0x3c>)
 800c350:	62a3      	str	r3, [r4, #40]	; 0x28
 800c352:	4b05      	ldr	r3, [pc, #20]	; (800c368 <std+0x40>)
 800c354:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c356:	4b05      	ldr	r3, [pc, #20]	; (800c36c <std+0x44>)
 800c358:	6224      	str	r4, [r4, #32]
 800c35a:	6323      	str	r3, [r4, #48]	; 0x30
 800c35c:	bd10      	pop	{r4, pc}
 800c35e:	bf00      	nop
 800c360:	0800d499 	.word	0x0800d499
 800c364:	0800d4bb 	.word	0x0800d4bb
 800c368:	0800d4f3 	.word	0x0800d4f3
 800c36c:	0800d517 	.word	0x0800d517

0800c370 <_cleanup_r>:
 800c370:	4901      	ldr	r1, [pc, #4]	; (800c378 <_cleanup_r+0x8>)
 800c372:	f000 b8af 	b.w	800c4d4 <_fwalk_reent>
 800c376:	bf00      	nop
 800c378:	0800c2b1 	.word	0x0800c2b1

0800c37c <__sfmoreglue>:
 800c37c:	b570      	push	{r4, r5, r6, lr}
 800c37e:	2268      	movs	r2, #104	; 0x68
 800c380:	1e4d      	subs	r5, r1, #1
 800c382:	4355      	muls	r5, r2
 800c384:	460e      	mov	r6, r1
 800c386:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c38a:	f000 fd4b 	bl	800ce24 <_malloc_r>
 800c38e:	4604      	mov	r4, r0
 800c390:	b140      	cbz	r0, 800c3a4 <__sfmoreglue+0x28>
 800c392:	2100      	movs	r1, #0
 800c394:	e9c0 1600 	strd	r1, r6, [r0]
 800c398:	300c      	adds	r0, #12
 800c39a:	60a0      	str	r0, [r4, #8]
 800c39c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c3a0:	f7fe fa4e 	bl	800a840 <memset>
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	bd70      	pop	{r4, r5, r6, pc}

0800c3a8 <__sfp_lock_acquire>:
 800c3a8:	4801      	ldr	r0, [pc, #4]	; (800c3b0 <__sfp_lock_acquire+0x8>)
 800c3aa:	f000 b8b8 	b.w	800c51e <__retarget_lock_acquire_recursive>
 800c3ae:	bf00      	nop
 800c3b0:	20000c0d 	.word	0x20000c0d

0800c3b4 <__sfp_lock_release>:
 800c3b4:	4801      	ldr	r0, [pc, #4]	; (800c3bc <__sfp_lock_release+0x8>)
 800c3b6:	f000 b8b3 	b.w	800c520 <__retarget_lock_release_recursive>
 800c3ba:	bf00      	nop
 800c3bc:	20000c0d 	.word	0x20000c0d

0800c3c0 <__sinit_lock_acquire>:
 800c3c0:	4801      	ldr	r0, [pc, #4]	; (800c3c8 <__sinit_lock_acquire+0x8>)
 800c3c2:	f000 b8ac 	b.w	800c51e <__retarget_lock_acquire_recursive>
 800c3c6:	bf00      	nop
 800c3c8:	20000c0e 	.word	0x20000c0e

0800c3cc <__sinit_lock_release>:
 800c3cc:	4801      	ldr	r0, [pc, #4]	; (800c3d4 <__sinit_lock_release+0x8>)
 800c3ce:	f000 b8a7 	b.w	800c520 <__retarget_lock_release_recursive>
 800c3d2:	bf00      	nop
 800c3d4:	20000c0e 	.word	0x20000c0e

0800c3d8 <__sinit>:
 800c3d8:	b510      	push	{r4, lr}
 800c3da:	4604      	mov	r4, r0
 800c3dc:	f7ff fff0 	bl	800c3c0 <__sinit_lock_acquire>
 800c3e0:	69a3      	ldr	r3, [r4, #24]
 800c3e2:	b11b      	cbz	r3, 800c3ec <__sinit+0x14>
 800c3e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3e8:	f7ff bff0 	b.w	800c3cc <__sinit_lock_release>
 800c3ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c3f0:	6523      	str	r3, [r4, #80]	; 0x50
 800c3f2:	4b13      	ldr	r3, [pc, #76]	; (800c440 <__sinit+0x68>)
 800c3f4:	4a13      	ldr	r2, [pc, #76]	; (800c444 <__sinit+0x6c>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c3fa:	42a3      	cmp	r3, r4
 800c3fc:	bf04      	itt	eq
 800c3fe:	2301      	moveq	r3, #1
 800c400:	61a3      	streq	r3, [r4, #24]
 800c402:	4620      	mov	r0, r4
 800c404:	f000 f820 	bl	800c448 <__sfp>
 800c408:	6060      	str	r0, [r4, #4]
 800c40a:	4620      	mov	r0, r4
 800c40c:	f000 f81c 	bl	800c448 <__sfp>
 800c410:	60a0      	str	r0, [r4, #8]
 800c412:	4620      	mov	r0, r4
 800c414:	f000 f818 	bl	800c448 <__sfp>
 800c418:	2200      	movs	r2, #0
 800c41a:	60e0      	str	r0, [r4, #12]
 800c41c:	2104      	movs	r1, #4
 800c41e:	6860      	ldr	r0, [r4, #4]
 800c420:	f7ff ff82 	bl	800c328 <std>
 800c424:	68a0      	ldr	r0, [r4, #8]
 800c426:	2201      	movs	r2, #1
 800c428:	2109      	movs	r1, #9
 800c42a:	f7ff ff7d 	bl	800c328 <std>
 800c42e:	68e0      	ldr	r0, [r4, #12]
 800c430:	2202      	movs	r2, #2
 800c432:	2112      	movs	r1, #18
 800c434:	f7ff ff78 	bl	800c328 <std>
 800c438:	2301      	movs	r3, #1
 800c43a:	61a3      	str	r3, [r4, #24]
 800c43c:	e7d2      	b.n	800c3e4 <__sinit+0xc>
 800c43e:	bf00      	nop
 800c440:	0800d908 	.word	0x0800d908
 800c444:	0800c371 	.word	0x0800c371

0800c448 <__sfp>:
 800c448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c44a:	4607      	mov	r7, r0
 800c44c:	f7ff ffac 	bl	800c3a8 <__sfp_lock_acquire>
 800c450:	4b1e      	ldr	r3, [pc, #120]	; (800c4cc <__sfp+0x84>)
 800c452:	681e      	ldr	r6, [r3, #0]
 800c454:	69b3      	ldr	r3, [r6, #24]
 800c456:	b913      	cbnz	r3, 800c45e <__sfp+0x16>
 800c458:	4630      	mov	r0, r6
 800c45a:	f7ff ffbd 	bl	800c3d8 <__sinit>
 800c45e:	3648      	adds	r6, #72	; 0x48
 800c460:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c464:	3b01      	subs	r3, #1
 800c466:	d503      	bpl.n	800c470 <__sfp+0x28>
 800c468:	6833      	ldr	r3, [r6, #0]
 800c46a:	b30b      	cbz	r3, 800c4b0 <__sfp+0x68>
 800c46c:	6836      	ldr	r6, [r6, #0]
 800c46e:	e7f7      	b.n	800c460 <__sfp+0x18>
 800c470:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c474:	b9d5      	cbnz	r5, 800c4ac <__sfp+0x64>
 800c476:	4b16      	ldr	r3, [pc, #88]	; (800c4d0 <__sfp+0x88>)
 800c478:	60e3      	str	r3, [r4, #12]
 800c47a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c47e:	6665      	str	r5, [r4, #100]	; 0x64
 800c480:	f000 f84c 	bl	800c51c <__retarget_lock_init_recursive>
 800c484:	f7ff ff96 	bl	800c3b4 <__sfp_lock_release>
 800c488:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c48c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c490:	6025      	str	r5, [r4, #0]
 800c492:	61a5      	str	r5, [r4, #24]
 800c494:	2208      	movs	r2, #8
 800c496:	4629      	mov	r1, r5
 800c498:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c49c:	f7fe f9d0 	bl	800a840 <memset>
 800c4a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c4a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4ac:	3468      	adds	r4, #104	; 0x68
 800c4ae:	e7d9      	b.n	800c464 <__sfp+0x1c>
 800c4b0:	2104      	movs	r1, #4
 800c4b2:	4638      	mov	r0, r7
 800c4b4:	f7ff ff62 	bl	800c37c <__sfmoreglue>
 800c4b8:	4604      	mov	r4, r0
 800c4ba:	6030      	str	r0, [r6, #0]
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	d1d5      	bne.n	800c46c <__sfp+0x24>
 800c4c0:	f7ff ff78 	bl	800c3b4 <__sfp_lock_release>
 800c4c4:	230c      	movs	r3, #12
 800c4c6:	603b      	str	r3, [r7, #0]
 800c4c8:	e7ee      	b.n	800c4a8 <__sfp+0x60>
 800c4ca:	bf00      	nop
 800c4cc:	0800d908 	.word	0x0800d908
 800c4d0:	ffff0001 	.word	0xffff0001

0800c4d4 <_fwalk_reent>:
 800c4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4d8:	4606      	mov	r6, r0
 800c4da:	4688      	mov	r8, r1
 800c4dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c4e0:	2700      	movs	r7, #0
 800c4e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c4e6:	f1b9 0901 	subs.w	r9, r9, #1
 800c4ea:	d505      	bpl.n	800c4f8 <_fwalk_reent+0x24>
 800c4ec:	6824      	ldr	r4, [r4, #0]
 800c4ee:	2c00      	cmp	r4, #0
 800c4f0:	d1f7      	bne.n	800c4e2 <_fwalk_reent+0xe>
 800c4f2:	4638      	mov	r0, r7
 800c4f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4f8:	89ab      	ldrh	r3, [r5, #12]
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d907      	bls.n	800c50e <_fwalk_reent+0x3a>
 800c4fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c502:	3301      	adds	r3, #1
 800c504:	d003      	beq.n	800c50e <_fwalk_reent+0x3a>
 800c506:	4629      	mov	r1, r5
 800c508:	4630      	mov	r0, r6
 800c50a:	47c0      	blx	r8
 800c50c:	4307      	orrs	r7, r0
 800c50e:	3568      	adds	r5, #104	; 0x68
 800c510:	e7e9      	b.n	800c4e6 <_fwalk_reent+0x12>
	...

0800c514 <_localeconv_r>:
 800c514:	4800      	ldr	r0, [pc, #0]	; (800c518 <_localeconv_r+0x4>)
 800c516:	4770      	bx	lr
 800c518:	20000160 	.word	0x20000160

0800c51c <__retarget_lock_init_recursive>:
 800c51c:	4770      	bx	lr

0800c51e <__retarget_lock_acquire_recursive>:
 800c51e:	4770      	bx	lr

0800c520 <__retarget_lock_release_recursive>:
 800c520:	4770      	bx	lr

0800c522 <__swhatbuf_r>:
 800c522:	b570      	push	{r4, r5, r6, lr}
 800c524:	460e      	mov	r6, r1
 800c526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c52a:	2900      	cmp	r1, #0
 800c52c:	b096      	sub	sp, #88	; 0x58
 800c52e:	4614      	mov	r4, r2
 800c530:	461d      	mov	r5, r3
 800c532:	da08      	bge.n	800c546 <__swhatbuf_r+0x24>
 800c534:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c538:	2200      	movs	r2, #0
 800c53a:	602a      	str	r2, [r5, #0]
 800c53c:	061a      	lsls	r2, r3, #24
 800c53e:	d410      	bmi.n	800c562 <__swhatbuf_r+0x40>
 800c540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c544:	e00e      	b.n	800c564 <__swhatbuf_r+0x42>
 800c546:	466a      	mov	r2, sp
 800c548:	f001 f83c 	bl	800d5c4 <_fstat_r>
 800c54c:	2800      	cmp	r0, #0
 800c54e:	dbf1      	blt.n	800c534 <__swhatbuf_r+0x12>
 800c550:	9a01      	ldr	r2, [sp, #4]
 800c552:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c556:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c55a:	425a      	negs	r2, r3
 800c55c:	415a      	adcs	r2, r3
 800c55e:	602a      	str	r2, [r5, #0]
 800c560:	e7ee      	b.n	800c540 <__swhatbuf_r+0x1e>
 800c562:	2340      	movs	r3, #64	; 0x40
 800c564:	2000      	movs	r0, #0
 800c566:	6023      	str	r3, [r4, #0]
 800c568:	b016      	add	sp, #88	; 0x58
 800c56a:	bd70      	pop	{r4, r5, r6, pc}

0800c56c <__smakebuf_r>:
 800c56c:	898b      	ldrh	r3, [r1, #12]
 800c56e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c570:	079d      	lsls	r5, r3, #30
 800c572:	4606      	mov	r6, r0
 800c574:	460c      	mov	r4, r1
 800c576:	d507      	bpl.n	800c588 <__smakebuf_r+0x1c>
 800c578:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c57c:	6023      	str	r3, [r4, #0]
 800c57e:	6123      	str	r3, [r4, #16]
 800c580:	2301      	movs	r3, #1
 800c582:	6163      	str	r3, [r4, #20]
 800c584:	b002      	add	sp, #8
 800c586:	bd70      	pop	{r4, r5, r6, pc}
 800c588:	ab01      	add	r3, sp, #4
 800c58a:	466a      	mov	r2, sp
 800c58c:	f7ff ffc9 	bl	800c522 <__swhatbuf_r>
 800c590:	9900      	ldr	r1, [sp, #0]
 800c592:	4605      	mov	r5, r0
 800c594:	4630      	mov	r0, r6
 800c596:	f000 fc45 	bl	800ce24 <_malloc_r>
 800c59a:	b948      	cbnz	r0, 800c5b0 <__smakebuf_r+0x44>
 800c59c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5a0:	059a      	lsls	r2, r3, #22
 800c5a2:	d4ef      	bmi.n	800c584 <__smakebuf_r+0x18>
 800c5a4:	f023 0303 	bic.w	r3, r3, #3
 800c5a8:	f043 0302 	orr.w	r3, r3, #2
 800c5ac:	81a3      	strh	r3, [r4, #12]
 800c5ae:	e7e3      	b.n	800c578 <__smakebuf_r+0xc>
 800c5b0:	4b0d      	ldr	r3, [pc, #52]	; (800c5e8 <__smakebuf_r+0x7c>)
 800c5b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c5b4:	89a3      	ldrh	r3, [r4, #12]
 800c5b6:	6020      	str	r0, [r4, #0]
 800c5b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5bc:	81a3      	strh	r3, [r4, #12]
 800c5be:	9b00      	ldr	r3, [sp, #0]
 800c5c0:	6163      	str	r3, [r4, #20]
 800c5c2:	9b01      	ldr	r3, [sp, #4]
 800c5c4:	6120      	str	r0, [r4, #16]
 800c5c6:	b15b      	cbz	r3, 800c5e0 <__smakebuf_r+0x74>
 800c5c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5cc:	4630      	mov	r0, r6
 800c5ce:	f001 f80b 	bl	800d5e8 <_isatty_r>
 800c5d2:	b128      	cbz	r0, 800c5e0 <__smakebuf_r+0x74>
 800c5d4:	89a3      	ldrh	r3, [r4, #12]
 800c5d6:	f023 0303 	bic.w	r3, r3, #3
 800c5da:	f043 0301 	orr.w	r3, r3, #1
 800c5de:	81a3      	strh	r3, [r4, #12]
 800c5e0:	89a0      	ldrh	r0, [r4, #12]
 800c5e2:	4305      	orrs	r5, r0
 800c5e4:	81a5      	strh	r5, [r4, #12]
 800c5e6:	e7cd      	b.n	800c584 <__smakebuf_r+0x18>
 800c5e8:	0800c371 	.word	0x0800c371

0800c5ec <malloc>:
 800c5ec:	4b02      	ldr	r3, [pc, #8]	; (800c5f8 <malloc+0xc>)
 800c5ee:	4601      	mov	r1, r0
 800c5f0:	6818      	ldr	r0, [r3, #0]
 800c5f2:	f000 bc17 	b.w	800ce24 <_malloc_r>
 800c5f6:	bf00      	nop
 800c5f8:	2000000c 	.word	0x2000000c

0800c5fc <memcpy>:
 800c5fc:	440a      	add	r2, r1
 800c5fe:	4291      	cmp	r1, r2
 800c600:	f100 33ff 	add.w	r3, r0, #4294967295
 800c604:	d100      	bne.n	800c608 <memcpy+0xc>
 800c606:	4770      	bx	lr
 800c608:	b510      	push	{r4, lr}
 800c60a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c60e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c612:	4291      	cmp	r1, r2
 800c614:	d1f9      	bne.n	800c60a <memcpy+0xe>
 800c616:	bd10      	pop	{r4, pc}

0800c618 <_Balloc>:
 800c618:	b570      	push	{r4, r5, r6, lr}
 800c61a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c61c:	4604      	mov	r4, r0
 800c61e:	460d      	mov	r5, r1
 800c620:	b976      	cbnz	r6, 800c640 <_Balloc+0x28>
 800c622:	2010      	movs	r0, #16
 800c624:	f7ff ffe2 	bl	800c5ec <malloc>
 800c628:	4602      	mov	r2, r0
 800c62a:	6260      	str	r0, [r4, #36]	; 0x24
 800c62c:	b920      	cbnz	r0, 800c638 <_Balloc+0x20>
 800c62e:	4b18      	ldr	r3, [pc, #96]	; (800c690 <_Balloc+0x78>)
 800c630:	4818      	ldr	r0, [pc, #96]	; (800c694 <_Balloc+0x7c>)
 800c632:	2166      	movs	r1, #102	; 0x66
 800c634:	f000 ff86 	bl	800d544 <__assert_func>
 800c638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c63c:	6006      	str	r6, [r0, #0]
 800c63e:	60c6      	str	r6, [r0, #12]
 800c640:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c642:	68f3      	ldr	r3, [r6, #12]
 800c644:	b183      	cbz	r3, 800c668 <_Balloc+0x50>
 800c646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c648:	68db      	ldr	r3, [r3, #12]
 800c64a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c64e:	b9b8      	cbnz	r0, 800c680 <_Balloc+0x68>
 800c650:	2101      	movs	r1, #1
 800c652:	fa01 f605 	lsl.w	r6, r1, r5
 800c656:	1d72      	adds	r2, r6, #5
 800c658:	0092      	lsls	r2, r2, #2
 800c65a:	4620      	mov	r0, r4
 800c65c:	f000 fb60 	bl	800cd20 <_calloc_r>
 800c660:	b160      	cbz	r0, 800c67c <_Balloc+0x64>
 800c662:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c666:	e00e      	b.n	800c686 <_Balloc+0x6e>
 800c668:	2221      	movs	r2, #33	; 0x21
 800c66a:	2104      	movs	r1, #4
 800c66c:	4620      	mov	r0, r4
 800c66e:	f000 fb57 	bl	800cd20 <_calloc_r>
 800c672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c674:	60f0      	str	r0, [r6, #12]
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d1e4      	bne.n	800c646 <_Balloc+0x2e>
 800c67c:	2000      	movs	r0, #0
 800c67e:	bd70      	pop	{r4, r5, r6, pc}
 800c680:	6802      	ldr	r2, [r0, #0]
 800c682:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c686:	2300      	movs	r3, #0
 800c688:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c68c:	e7f7      	b.n	800c67e <_Balloc+0x66>
 800c68e:	bf00      	nop
 800c690:	0800d94d 	.word	0x0800d94d
 800c694:	0800da30 	.word	0x0800da30

0800c698 <_Bfree>:
 800c698:	b570      	push	{r4, r5, r6, lr}
 800c69a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c69c:	4605      	mov	r5, r0
 800c69e:	460c      	mov	r4, r1
 800c6a0:	b976      	cbnz	r6, 800c6c0 <_Bfree+0x28>
 800c6a2:	2010      	movs	r0, #16
 800c6a4:	f7ff ffa2 	bl	800c5ec <malloc>
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	6268      	str	r0, [r5, #36]	; 0x24
 800c6ac:	b920      	cbnz	r0, 800c6b8 <_Bfree+0x20>
 800c6ae:	4b09      	ldr	r3, [pc, #36]	; (800c6d4 <_Bfree+0x3c>)
 800c6b0:	4809      	ldr	r0, [pc, #36]	; (800c6d8 <_Bfree+0x40>)
 800c6b2:	218a      	movs	r1, #138	; 0x8a
 800c6b4:	f000 ff46 	bl	800d544 <__assert_func>
 800c6b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6bc:	6006      	str	r6, [r0, #0]
 800c6be:	60c6      	str	r6, [r0, #12]
 800c6c0:	b13c      	cbz	r4, 800c6d2 <_Bfree+0x3a>
 800c6c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c6c4:	6862      	ldr	r2, [r4, #4]
 800c6c6:	68db      	ldr	r3, [r3, #12]
 800c6c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c6cc:	6021      	str	r1, [r4, #0]
 800c6ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c6d2:	bd70      	pop	{r4, r5, r6, pc}
 800c6d4:	0800d94d 	.word	0x0800d94d
 800c6d8:	0800da30 	.word	0x0800da30

0800c6dc <__multadd>:
 800c6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6e0:	690d      	ldr	r5, [r1, #16]
 800c6e2:	4607      	mov	r7, r0
 800c6e4:	460c      	mov	r4, r1
 800c6e6:	461e      	mov	r6, r3
 800c6e8:	f101 0c14 	add.w	ip, r1, #20
 800c6ec:	2000      	movs	r0, #0
 800c6ee:	f8dc 3000 	ldr.w	r3, [ip]
 800c6f2:	b299      	uxth	r1, r3
 800c6f4:	fb02 6101 	mla	r1, r2, r1, r6
 800c6f8:	0c1e      	lsrs	r6, r3, #16
 800c6fa:	0c0b      	lsrs	r3, r1, #16
 800c6fc:	fb02 3306 	mla	r3, r2, r6, r3
 800c700:	b289      	uxth	r1, r1
 800c702:	3001      	adds	r0, #1
 800c704:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c708:	4285      	cmp	r5, r0
 800c70a:	f84c 1b04 	str.w	r1, [ip], #4
 800c70e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c712:	dcec      	bgt.n	800c6ee <__multadd+0x12>
 800c714:	b30e      	cbz	r6, 800c75a <__multadd+0x7e>
 800c716:	68a3      	ldr	r3, [r4, #8]
 800c718:	42ab      	cmp	r3, r5
 800c71a:	dc19      	bgt.n	800c750 <__multadd+0x74>
 800c71c:	6861      	ldr	r1, [r4, #4]
 800c71e:	4638      	mov	r0, r7
 800c720:	3101      	adds	r1, #1
 800c722:	f7ff ff79 	bl	800c618 <_Balloc>
 800c726:	4680      	mov	r8, r0
 800c728:	b928      	cbnz	r0, 800c736 <__multadd+0x5a>
 800c72a:	4602      	mov	r2, r0
 800c72c:	4b0c      	ldr	r3, [pc, #48]	; (800c760 <__multadd+0x84>)
 800c72e:	480d      	ldr	r0, [pc, #52]	; (800c764 <__multadd+0x88>)
 800c730:	21b5      	movs	r1, #181	; 0xb5
 800c732:	f000 ff07 	bl	800d544 <__assert_func>
 800c736:	6922      	ldr	r2, [r4, #16]
 800c738:	3202      	adds	r2, #2
 800c73a:	f104 010c 	add.w	r1, r4, #12
 800c73e:	0092      	lsls	r2, r2, #2
 800c740:	300c      	adds	r0, #12
 800c742:	f7ff ff5b 	bl	800c5fc <memcpy>
 800c746:	4621      	mov	r1, r4
 800c748:	4638      	mov	r0, r7
 800c74a:	f7ff ffa5 	bl	800c698 <_Bfree>
 800c74e:	4644      	mov	r4, r8
 800c750:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c754:	3501      	adds	r5, #1
 800c756:	615e      	str	r6, [r3, #20]
 800c758:	6125      	str	r5, [r4, #16]
 800c75a:	4620      	mov	r0, r4
 800c75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c760:	0800d9bf 	.word	0x0800d9bf
 800c764:	0800da30 	.word	0x0800da30

0800c768 <__hi0bits>:
 800c768:	0c03      	lsrs	r3, r0, #16
 800c76a:	041b      	lsls	r3, r3, #16
 800c76c:	b9d3      	cbnz	r3, 800c7a4 <__hi0bits+0x3c>
 800c76e:	0400      	lsls	r0, r0, #16
 800c770:	2310      	movs	r3, #16
 800c772:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c776:	bf04      	itt	eq
 800c778:	0200      	lsleq	r0, r0, #8
 800c77a:	3308      	addeq	r3, #8
 800c77c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c780:	bf04      	itt	eq
 800c782:	0100      	lsleq	r0, r0, #4
 800c784:	3304      	addeq	r3, #4
 800c786:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c78a:	bf04      	itt	eq
 800c78c:	0080      	lsleq	r0, r0, #2
 800c78e:	3302      	addeq	r3, #2
 800c790:	2800      	cmp	r0, #0
 800c792:	db05      	blt.n	800c7a0 <__hi0bits+0x38>
 800c794:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c798:	f103 0301 	add.w	r3, r3, #1
 800c79c:	bf08      	it	eq
 800c79e:	2320      	moveq	r3, #32
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	4770      	bx	lr
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	e7e4      	b.n	800c772 <__hi0bits+0xa>

0800c7a8 <__lo0bits>:
 800c7a8:	6803      	ldr	r3, [r0, #0]
 800c7aa:	f013 0207 	ands.w	r2, r3, #7
 800c7ae:	4601      	mov	r1, r0
 800c7b0:	d00b      	beq.n	800c7ca <__lo0bits+0x22>
 800c7b2:	07da      	lsls	r2, r3, #31
 800c7b4:	d423      	bmi.n	800c7fe <__lo0bits+0x56>
 800c7b6:	0798      	lsls	r0, r3, #30
 800c7b8:	bf49      	itett	mi
 800c7ba:	085b      	lsrmi	r3, r3, #1
 800c7bc:	089b      	lsrpl	r3, r3, #2
 800c7be:	2001      	movmi	r0, #1
 800c7c0:	600b      	strmi	r3, [r1, #0]
 800c7c2:	bf5c      	itt	pl
 800c7c4:	600b      	strpl	r3, [r1, #0]
 800c7c6:	2002      	movpl	r0, #2
 800c7c8:	4770      	bx	lr
 800c7ca:	b298      	uxth	r0, r3
 800c7cc:	b9a8      	cbnz	r0, 800c7fa <__lo0bits+0x52>
 800c7ce:	0c1b      	lsrs	r3, r3, #16
 800c7d0:	2010      	movs	r0, #16
 800c7d2:	b2da      	uxtb	r2, r3
 800c7d4:	b90a      	cbnz	r2, 800c7da <__lo0bits+0x32>
 800c7d6:	3008      	adds	r0, #8
 800c7d8:	0a1b      	lsrs	r3, r3, #8
 800c7da:	071a      	lsls	r2, r3, #28
 800c7dc:	bf04      	itt	eq
 800c7de:	091b      	lsreq	r3, r3, #4
 800c7e0:	3004      	addeq	r0, #4
 800c7e2:	079a      	lsls	r2, r3, #30
 800c7e4:	bf04      	itt	eq
 800c7e6:	089b      	lsreq	r3, r3, #2
 800c7e8:	3002      	addeq	r0, #2
 800c7ea:	07da      	lsls	r2, r3, #31
 800c7ec:	d403      	bmi.n	800c7f6 <__lo0bits+0x4e>
 800c7ee:	085b      	lsrs	r3, r3, #1
 800c7f0:	f100 0001 	add.w	r0, r0, #1
 800c7f4:	d005      	beq.n	800c802 <__lo0bits+0x5a>
 800c7f6:	600b      	str	r3, [r1, #0]
 800c7f8:	4770      	bx	lr
 800c7fa:	4610      	mov	r0, r2
 800c7fc:	e7e9      	b.n	800c7d2 <__lo0bits+0x2a>
 800c7fe:	2000      	movs	r0, #0
 800c800:	4770      	bx	lr
 800c802:	2020      	movs	r0, #32
 800c804:	4770      	bx	lr
	...

0800c808 <__i2b>:
 800c808:	b510      	push	{r4, lr}
 800c80a:	460c      	mov	r4, r1
 800c80c:	2101      	movs	r1, #1
 800c80e:	f7ff ff03 	bl	800c618 <_Balloc>
 800c812:	4602      	mov	r2, r0
 800c814:	b928      	cbnz	r0, 800c822 <__i2b+0x1a>
 800c816:	4b05      	ldr	r3, [pc, #20]	; (800c82c <__i2b+0x24>)
 800c818:	4805      	ldr	r0, [pc, #20]	; (800c830 <__i2b+0x28>)
 800c81a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c81e:	f000 fe91 	bl	800d544 <__assert_func>
 800c822:	2301      	movs	r3, #1
 800c824:	6144      	str	r4, [r0, #20]
 800c826:	6103      	str	r3, [r0, #16]
 800c828:	bd10      	pop	{r4, pc}
 800c82a:	bf00      	nop
 800c82c:	0800d9bf 	.word	0x0800d9bf
 800c830:	0800da30 	.word	0x0800da30

0800c834 <__multiply>:
 800c834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c838:	4691      	mov	r9, r2
 800c83a:	690a      	ldr	r2, [r1, #16]
 800c83c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c840:	429a      	cmp	r2, r3
 800c842:	bfb8      	it	lt
 800c844:	460b      	movlt	r3, r1
 800c846:	460c      	mov	r4, r1
 800c848:	bfbc      	itt	lt
 800c84a:	464c      	movlt	r4, r9
 800c84c:	4699      	movlt	r9, r3
 800c84e:	6927      	ldr	r7, [r4, #16]
 800c850:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c854:	68a3      	ldr	r3, [r4, #8]
 800c856:	6861      	ldr	r1, [r4, #4]
 800c858:	eb07 060a 	add.w	r6, r7, sl
 800c85c:	42b3      	cmp	r3, r6
 800c85e:	b085      	sub	sp, #20
 800c860:	bfb8      	it	lt
 800c862:	3101      	addlt	r1, #1
 800c864:	f7ff fed8 	bl	800c618 <_Balloc>
 800c868:	b930      	cbnz	r0, 800c878 <__multiply+0x44>
 800c86a:	4602      	mov	r2, r0
 800c86c:	4b44      	ldr	r3, [pc, #272]	; (800c980 <__multiply+0x14c>)
 800c86e:	4845      	ldr	r0, [pc, #276]	; (800c984 <__multiply+0x150>)
 800c870:	f240 115d 	movw	r1, #349	; 0x15d
 800c874:	f000 fe66 	bl	800d544 <__assert_func>
 800c878:	f100 0514 	add.w	r5, r0, #20
 800c87c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c880:	462b      	mov	r3, r5
 800c882:	2200      	movs	r2, #0
 800c884:	4543      	cmp	r3, r8
 800c886:	d321      	bcc.n	800c8cc <__multiply+0x98>
 800c888:	f104 0314 	add.w	r3, r4, #20
 800c88c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c890:	f109 0314 	add.w	r3, r9, #20
 800c894:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c898:	9202      	str	r2, [sp, #8]
 800c89a:	1b3a      	subs	r2, r7, r4
 800c89c:	3a15      	subs	r2, #21
 800c89e:	f022 0203 	bic.w	r2, r2, #3
 800c8a2:	3204      	adds	r2, #4
 800c8a4:	f104 0115 	add.w	r1, r4, #21
 800c8a8:	428f      	cmp	r7, r1
 800c8aa:	bf38      	it	cc
 800c8ac:	2204      	movcc	r2, #4
 800c8ae:	9201      	str	r2, [sp, #4]
 800c8b0:	9a02      	ldr	r2, [sp, #8]
 800c8b2:	9303      	str	r3, [sp, #12]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d80c      	bhi.n	800c8d2 <__multiply+0x9e>
 800c8b8:	2e00      	cmp	r6, #0
 800c8ba:	dd03      	ble.n	800c8c4 <__multiply+0x90>
 800c8bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d05a      	beq.n	800c97a <__multiply+0x146>
 800c8c4:	6106      	str	r6, [r0, #16]
 800c8c6:	b005      	add	sp, #20
 800c8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8cc:	f843 2b04 	str.w	r2, [r3], #4
 800c8d0:	e7d8      	b.n	800c884 <__multiply+0x50>
 800c8d2:	f8b3 a000 	ldrh.w	sl, [r3]
 800c8d6:	f1ba 0f00 	cmp.w	sl, #0
 800c8da:	d024      	beq.n	800c926 <__multiply+0xf2>
 800c8dc:	f104 0e14 	add.w	lr, r4, #20
 800c8e0:	46a9      	mov	r9, r5
 800c8e2:	f04f 0c00 	mov.w	ip, #0
 800c8e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c8ea:	f8d9 1000 	ldr.w	r1, [r9]
 800c8ee:	fa1f fb82 	uxth.w	fp, r2
 800c8f2:	b289      	uxth	r1, r1
 800c8f4:	fb0a 110b 	mla	r1, sl, fp, r1
 800c8f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c8fc:	f8d9 2000 	ldr.w	r2, [r9]
 800c900:	4461      	add	r1, ip
 800c902:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c906:	fb0a c20b 	mla	r2, sl, fp, ip
 800c90a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c90e:	b289      	uxth	r1, r1
 800c910:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c914:	4577      	cmp	r7, lr
 800c916:	f849 1b04 	str.w	r1, [r9], #4
 800c91a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c91e:	d8e2      	bhi.n	800c8e6 <__multiply+0xb2>
 800c920:	9a01      	ldr	r2, [sp, #4]
 800c922:	f845 c002 	str.w	ip, [r5, r2]
 800c926:	9a03      	ldr	r2, [sp, #12]
 800c928:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c92c:	3304      	adds	r3, #4
 800c92e:	f1b9 0f00 	cmp.w	r9, #0
 800c932:	d020      	beq.n	800c976 <__multiply+0x142>
 800c934:	6829      	ldr	r1, [r5, #0]
 800c936:	f104 0c14 	add.w	ip, r4, #20
 800c93a:	46ae      	mov	lr, r5
 800c93c:	f04f 0a00 	mov.w	sl, #0
 800c940:	f8bc b000 	ldrh.w	fp, [ip]
 800c944:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c948:	fb09 220b 	mla	r2, r9, fp, r2
 800c94c:	4492      	add	sl, r2
 800c94e:	b289      	uxth	r1, r1
 800c950:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c954:	f84e 1b04 	str.w	r1, [lr], #4
 800c958:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c95c:	f8be 1000 	ldrh.w	r1, [lr]
 800c960:	0c12      	lsrs	r2, r2, #16
 800c962:	fb09 1102 	mla	r1, r9, r2, r1
 800c966:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c96a:	4567      	cmp	r7, ip
 800c96c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c970:	d8e6      	bhi.n	800c940 <__multiply+0x10c>
 800c972:	9a01      	ldr	r2, [sp, #4]
 800c974:	50a9      	str	r1, [r5, r2]
 800c976:	3504      	adds	r5, #4
 800c978:	e79a      	b.n	800c8b0 <__multiply+0x7c>
 800c97a:	3e01      	subs	r6, #1
 800c97c:	e79c      	b.n	800c8b8 <__multiply+0x84>
 800c97e:	bf00      	nop
 800c980:	0800d9bf 	.word	0x0800d9bf
 800c984:	0800da30 	.word	0x0800da30

0800c988 <__pow5mult>:
 800c988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c98c:	4615      	mov	r5, r2
 800c98e:	f012 0203 	ands.w	r2, r2, #3
 800c992:	4606      	mov	r6, r0
 800c994:	460f      	mov	r7, r1
 800c996:	d007      	beq.n	800c9a8 <__pow5mult+0x20>
 800c998:	4c25      	ldr	r4, [pc, #148]	; (800ca30 <__pow5mult+0xa8>)
 800c99a:	3a01      	subs	r2, #1
 800c99c:	2300      	movs	r3, #0
 800c99e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c9a2:	f7ff fe9b 	bl	800c6dc <__multadd>
 800c9a6:	4607      	mov	r7, r0
 800c9a8:	10ad      	asrs	r5, r5, #2
 800c9aa:	d03d      	beq.n	800ca28 <__pow5mult+0xa0>
 800c9ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c9ae:	b97c      	cbnz	r4, 800c9d0 <__pow5mult+0x48>
 800c9b0:	2010      	movs	r0, #16
 800c9b2:	f7ff fe1b 	bl	800c5ec <malloc>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	6270      	str	r0, [r6, #36]	; 0x24
 800c9ba:	b928      	cbnz	r0, 800c9c8 <__pow5mult+0x40>
 800c9bc:	4b1d      	ldr	r3, [pc, #116]	; (800ca34 <__pow5mult+0xac>)
 800c9be:	481e      	ldr	r0, [pc, #120]	; (800ca38 <__pow5mult+0xb0>)
 800c9c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c9c4:	f000 fdbe 	bl	800d544 <__assert_func>
 800c9c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c9cc:	6004      	str	r4, [r0, #0]
 800c9ce:	60c4      	str	r4, [r0, #12]
 800c9d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c9d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c9d8:	b94c      	cbnz	r4, 800c9ee <__pow5mult+0x66>
 800c9da:	f240 2171 	movw	r1, #625	; 0x271
 800c9de:	4630      	mov	r0, r6
 800c9e0:	f7ff ff12 	bl	800c808 <__i2b>
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c9ea:	4604      	mov	r4, r0
 800c9ec:	6003      	str	r3, [r0, #0]
 800c9ee:	f04f 0900 	mov.w	r9, #0
 800c9f2:	07eb      	lsls	r3, r5, #31
 800c9f4:	d50a      	bpl.n	800ca0c <__pow5mult+0x84>
 800c9f6:	4639      	mov	r1, r7
 800c9f8:	4622      	mov	r2, r4
 800c9fa:	4630      	mov	r0, r6
 800c9fc:	f7ff ff1a 	bl	800c834 <__multiply>
 800ca00:	4639      	mov	r1, r7
 800ca02:	4680      	mov	r8, r0
 800ca04:	4630      	mov	r0, r6
 800ca06:	f7ff fe47 	bl	800c698 <_Bfree>
 800ca0a:	4647      	mov	r7, r8
 800ca0c:	106d      	asrs	r5, r5, #1
 800ca0e:	d00b      	beq.n	800ca28 <__pow5mult+0xa0>
 800ca10:	6820      	ldr	r0, [r4, #0]
 800ca12:	b938      	cbnz	r0, 800ca24 <__pow5mult+0x9c>
 800ca14:	4622      	mov	r2, r4
 800ca16:	4621      	mov	r1, r4
 800ca18:	4630      	mov	r0, r6
 800ca1a:	f7ff ff0b 	bl	800c834 <__multiply>
 800ca1e:	6020      	str	r0, [r4, #0]
 800ca20:	f8c0 9000 	str.w	r9, [r0]
 800ca24:	4604      	mov	r4, r0
 800ca26:	e7e4      	b.n	800c9f2 <__pow5mult+0x6a>
 800ca28:	4638      	mov	r0, r7
 800ca2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca2e:	bf00      	nop
 800ca30:	0800db80 	.word	0x0800db80
 800ca34:	0800d94d 	.word	0x0800d94d
 800ca38:	0800da30 	.word	0x0800da30

0800ca3c <__lshift>:
 800ca3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca40:	460c      	mov	r4, r1
 800ca42:	6849      	ldr	r1, [r1, #4]
 800ca44:	6923      	ldr	r3, [r4, #16]
 800ca46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca4a:	68a3      	ldr	r3, [r4, #8]
 800ca4c:	4607      	mov	r7, r0
 800ca4e:	4691      	mov	r9, r2
 800ca50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca54:	f108 0601 	add.w	r6, r8, #1
 800ca58:	42b3      	cmp	r3, r6
 800ca5a:	db0b      	blt.n	800ca74 <__lshift+0x38>
 800ca5c:	4638      	mov	r0, r7
 800ca5e:	f7ff fddb 	bl	800c618 <_Balloc>
 800ca62:	4605      	mov	r5, r0
 800ca64:	b948      	cbnz	r0, 800ca7a <__lshift+0x3e>
 800ca66:	4602      	mov	r2, r0
 800ca68:	4b2a      	ldr	r3, [pc, #168]	; (800cb14 <__lshift+0xd8>)
 800ca6a:	482b      	ldr	r0, [pc, #172]	; (800cb18 <__lshift+0xdc>)
 800ca6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ca70:	f000 fd68 	bl	800d544 <__assert_func>
 800ca74:	3101      	adds	r1, #1
 800ca76:	005b      	lsls	r3, r3, #1
 800ca78:	e7ee      	b.n	800ca58 <__lshift+0x1c>
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	f100 0114 	add.w	r1, r0, #20
 800ca80:	f100 0210 	add.w	r2, r0, #16
 800ca84:	4618      	mov	r0, r3
 800ca86:	4553      	cmp	r3, sl
 800ca88:	db37      	blt.n	800cafa <__lshift+0xbe>
 800ca8a:	6920      	ldr	r0, [r4, #16]
 800ca8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca90:	f104 0314 	add.w	r3, r4, #20
 800ca94:	f019 091f 	ands.w	r9, r9, #31
 800ca98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800caa0:	d02f      	beq.n	800cb02 <__lshift+0xc6>
 800caa2:	f1c9 0e20 	rsb	lr, r9, #32
 800caa6:	468a      	mov	sl, r1
 800caa8:	f04f 0c00 	mov.w	ip, #0
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	fa02 f209 	lsl.w	r2, r2, r9
 800cab2:	ea42 020c 	orr.w	r2, r2, ip
 800cab6:	f84a 2b04 	str.w	r2, [sl], #4
 800caba:	f853 2b04 	ldr.w	r2, [r3], #4
 800cabe:	4298      	cmp	r0, r3
 800cac0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cac4:	d8f2      	bhi.n	800caac <__lshift+0x70>
 800cac6:	1b03      	subs	r3, r0, r4
 800cac8:	3b15      	subs	r3, #21
 800caca:	f023 0303 	bic.w	r3, r3, #3
 800cace:	3304      	adds	r3, #4
 800cad0:	f104 0215 	add.w	r2, r4, #21
 800cad4:	4290      	cmp	r0, r2
 800cad6:	bf38      	it	cc
 800cad8:	2304      	movcc	r3, #4
 800cada:	f841 c003 	str.w	ip, [r1, r3]
 800cade:	f1bc 0f00 	cmp.w	ip, #0
 800cae2:	d001      	beq.n	800cae8 <__lshift+0xac>
 800cae4:	f108 0602 	add.w	r6, r8, #2
 800cae8:	3e01      	subs	r6, #1
 800caea:	4638      	mov	r0, r7
 800caec:	612e      	str	r6, [r5, #16]
 800caee:	4621      	mov	r1, r4
 800caf0:	f7ff fdd2 	bl	800c698 <_Bfree>
 800caf4:	4628      	mov	r0, r5
 800caf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cafa:	f842 0f04 	str.w	r0, [r2, #4]!
 800cafe:	3301      	adds	r3, #1
 800cb00:	e7c1      	b.n	800ca86 <__lshift+0x4a>
 800cb02:	3904      	subs	r1, #4
 800cb04:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb08:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb0c:	4298      	cmp	r0, r3
 800cb0e:	d8f9      	bhi.n	800cb04 <__lshift+0xc8>
 800cb10:	e7ea      	b.n	800cae8 <__lshift+0xac>
 800cb12:	bf00      	nop
 800cb14:	0800d9bf 	.word	0x0800d9bf
 800cb18:	0800da30 	.word	0x0800da30

0800cb1c <__mcmp>:
 800cb1c:	b530      	push	{r4, r5, lr}
 800cb1e:	6902      	ldr	r2, [r0, #16]
 800cb20:	690c      	ldr	r4, [r1, #16]
 800cb22:	1b12      	subs	r2, r2, r4
 800cb24:	d10e      	bne.n	800cb44 <__mcmp+0x28>
 800cb26:	f100 0314 	add.w	r3, r0, #20
 800cb2a:	3114      	adds	r1, #20
 800cb2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cb30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cb34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cb38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cb3c:	42a5      	cmp	r5, r4
 800cb3e:	d003      	beq.n	800cb48 <__mcmp+0x2c>
 800cb40:	d305      	bcc.n	800cb4e <__mcmp+0x32>
 800cb42:	2201      	movs	r2, #1
 800cb44:	4610      	mov	r0, r2
 800cb46:	bd30      	pop	{r4, r5, pc}
 800cb48:	4283      	cmp	r3, r0
 800cb4a:	d3f3      	bcc.n	800cb34 <__mcmp+0x18>
 800cb4c:	e7fa      	b.n	800cb44 <__mcmp+0x28>
 800cb4e:	f04f 32ff 	mov.w	r2, #4294967295
 800cb52:	e7f7      	b.n	800cb44 <__mcmp+0x28>

0800cb54 <__mdiff>:
 800cb54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb58:	460c      	mov	r4, r1
 800cb5a:	4606      	mov	r6, r0
 800cb5c:	4611      	mov	r1, r2
 800cb5e:	4620      	mov	r0, r4
 800cb60:	4690      	mov	r8, r2
 800cb62:	f7ff ffdb 	bl	800cb1c <__mcmp>
 800cb66:	1e05      	subs	r5, r0, #0
 800cb68:	d110      	bne.n	800cb8c <__mdiff+0x38>
 800cb6a:	4629      	mov	r1, r5
 800cb6c:	4630      	mov	r0, r6
 800cb6e:	f7ff fd53 	bl	800c618 <_Balloc>
 800cb72:	b930      	cbnz	r0, 800cb82 <__mdiff+0x2e>
 800cb74:	4b3a      	ldr	r3, [pc, #232]	; (800cc60 <__mdiff+0x10c>)
 800cb76:	4602      	mov	r2, r0
 800cb78:	f240 2132 	movw	r1, #562	; 0x232
 800cb7c:	4839      	ldr	r0, [pc, #228]	; (800cc64 <__mdiff+0x110>)
 800cb7e:	f000 fce1 	bl	800d544 <__assert_func>
 800cb82:	2301      	movs	r3, #1
 800cb84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb8c:	bfa4      	itt	ge
 800cb8e:	4643      	movge	r3, r8
 800cb90:	46a0      	movge	r8, r4
 800cb92:	4630      	mov	r0, r6
 800cb94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cb98:	bfa6      	itte	ge
 800cb9a:	461c      	movge	r4, r3
 800cb9c:	2500      	movge	r5, #0
 800cb9e:	2501      	movlt	r5, #1
 800cba0:	f7ff fd3a 	bl	800c618 <_Balloc>
 800cba4:	b920      	cbnz	r0, 800cbb0 <__mdiff+0x5c>
 800cba6:	4b2e      	ldr	r3, [pc, #184]	; (800cc60 <__mdiff+0x10c>)
 800cba8:	4602      	mov	r2, r0
 800cbaa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cbae:	e7e5      	b.n	800cb7c <__mdiff+0x28>
 800cbb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cbb4:	6926      	ldr	r6, [r4, #16]
 800cbb6:	60c5      	str	r5, [r0, #12]
 800cbb8:	f104 0914 	add.w	r9, r4, #20
 800cbbc:	f108 0514 	add.w	r5, r8, #20
 800cbc0:	f100 0e14 	add.w	lr, r0, #20
 800cbc4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cbc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cbcc:	f108 0210 	add.w	r2, r8, #16
 800cbd0:	46f2      	mov	sl, lr
 800cbd2:	2100      	movs	r1, #0
 800cbd4:	f859 3b04 	ldr.w	r3, [r9], #4
 800cbd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cbdc:	fa1f f883 	uxth.w	r8, r3
 800cbe0:	fa11 f18b 	uxtah	r1, r1, fp
 800cbe4:	0c1b      	lsrs	r3, r3, #16
 800cbe6:	eba1 0808 	sub.w	r8, r1, r8
 800cbea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cbee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cbf2:	fa1f f888 	uxth.w	r8, r8
 800cbf6:	1419      	asrs	r1, r3, #16
 800cbf8:	454e      	cmp	r6, r9
 800cbfa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cbfe:	f84a 3b04 	str.w	r3, [sl], #4
 800cc02:	d8e7      	bhi.n	800cbd4 <__mdiff+0x80>
 800cc04:	1b33      	subs	r3, r6, r4
 800cc06:	3b15      	subs	r3, #21
 800cc08:	f023 0303 	bic.w	r3, r3, #3
 800cc0c:	3304      	adds	r3, #4
 800cc0e:	3415      	adds	r4, #21
 800cc10:	42a6      	cmp	r6, r4
 800cc12:	bf38      	it	cc
 800cc14:	2304      	movcc	r3, #4
 800cc16:	441d      	add	r5, r3
 800cc18:	4473      	add	r3, lr
 800cc1a:	469e      	mov	lr, r3
 800cc1c:	462e      	mov	r6, r5
 800cc1e:	4566      	cmp	r6, ip
 800cc20:	d30e      	bcc.n	800cc40 <__mdiff+0xec>
 800cc22:	f10c 0203 	add.w	r2, ip, #3
 800cc26:	1b52      	subs	r2, r2, r5
 800cc28:	f022 0203 	bic.w	r2, r2, #3
 800cc2c:	3d03      	subs	r5, #3
 800cc2e:	45ac      	cmp	ip, r5
 800cc30:	bf38      	it	cc
 800cc32:	2200      	movcc	r2, #0
 800cc34:	441a      	add	r2, r3
 800cc36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cc3a:	b17b      	cbz	r3, 800cc5c <__mdiff+0x108>
 800cc3c:	6107      	str	r7, [r0, #16]
 800cc3e:	e7a3      	b.n	800cb88 <__mdiff+0x34>
 800cc40:	f856 8b04 	ldr.w	r8, [r6], #4
 800cc44:	fa11 f288 	uxtah	r2, r1, r8
 800cc48:	1414      	asrs	r4, r2, #16
 800cc4a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cc4e:	b292      	uxth	r2, r2
 800cc50:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cc54:	f84e 2b04 	str.w	r2, [lr], #4
 800cc58:	1421      	asrs	r1, r4, #16
 800cc5a:	e7e0      	b.n	800cc1e <__mdiff+0xca>
 800cc5c:	3f01      	subs	r7, #1
 800cc5e:	e7ea      	b.n	800cc36 <__mdiff+0xe2>
 800cc60:	0800d9bf 	.word	0x0800d9bf
 800cc64:	0800da30 	.word	0x0800da30

0800cc68 <__d2b>:
 800cc68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc6c:	4689      	mov	r9, r1
 800cc6e:	2101      	movs	r1, #1
 800cc70:	ec57 6b10 	vmov	r6, r7, d0
 800cc74:	4690      	mov	r8, r2
 800cc76:	f7ff fccf 	bl	800c618 <_Balloc>
 800cc7a:	4604      	mov	r4, r0
 800cc7c:	b930      	cbnz	r0, 800cc8c <__d2b+0x24>
 800cc7e:	4602      	mov	r2, r0
 800cc80:	4b25      	ldr	r3, [pc, #148]	; (800cd18 <__d2b+0xb0>)
 800cc82:	4826      	ldr	r0, [pc, #152]	; (800cd1c <__d2b+0xb4>)
 800cc84:	f240 310a 	movw	r1, #778	; 0x30a
 800cc88:	f000 fc5c 	bl	800d544 <__assert_func>
 800cc8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cc90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cc94:	bb35      	cbnz	r5, 800cce4 <__d2b+0x7c>
 800cc96:	2e00      	cmp	r6, #0
 800cc98:	9301      	str	r3, [sp, #4]
 800cc9a:	d028      	beq.n	800ccee <__d2b+0x86>
 800cc9c:	4668      	mov	r0, sp
 800cc9e:	9600      	str	r6, [sp, #0]
 800cca0:	f7ff fd82 	bl	800c7a8 <__lo0bits>
 800cca4:	9900      	ldr	r1, [sp, #0]
 800cca6:	b300      	cbz	r0, 800ccea <__d2b+0x82>
 800cca8:	9a01      	ldr	r2, [sp, #4]
 800ccaa:	f1c0 0320 	rsb	r3, r0, #32
 800ccae:	fa02 f303 	lsl.w	r3, r2, r3
 800ccb2:	430b      	orrs	r3, r1
 800ccb4:	40c2      	lsrs	r2, r0
 800ccb6:	6163      	str	r3, [r4, #20]
 800ccb8:	9201      	str	r2, [sp, #4]
 800ccba:	9b01      	ldr	r3, [sp, #4]
 800ccbc:	61a3      	str	r3, [r4, #24]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	bf14      	ite	ne
 800ccc2:	2202      	movne	r2, #2
 800ccc4:	2201      	moveq	r2, #1
 800ccc6:	6122      	str	r2, [r4, #16]
 800ccc8:	b1d5      	cbz	r5, 800cd00 <__d2b+0x98>
 800ccca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ccce:	4405      	add	r5, r0
 800ccd0:	f8c9 5000 	str.w	r5, [r9]
 800ccd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ccd8:	f8c8 0000 	str.w	r0, [r8]
 800ccdc:	4620      	mov	r0, r4
 800ccde:	b003      	add	sp, #12
 800cce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cce4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cce8:	e7d5      	b.n	800cc96 <__d2b+0x2e>
 800ccea:	6161      	str	r1, [r4, #20]
 800ccec:	e7e5      	b.n	800ccba <__d2b+0x52>
 800ccee:	a801      	add	r0, sp, #4
 800ccf0:	f7ff fd5a 	bl	800c7a8 <__lo0bits>
 800ccf4:	9b01      	ldr	r3, [sp, #4]
 800ccf6:	6163      	str	r3, [r4, #20]
 800ccf8:	2201      	movs	r2, #1
 800ccfa:	6122      	str	r2, [r4, #16]
 800ccfc:	3020      	adds	r0, #32
 800ccfe:	e7e3      	b.n	800ccc8 <__d2b+0x60>
 800cd00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cd08:	f8c9 0000 	str.w	r0, [r9]
 800cd0c:	6918      	ldr	r0, [r3, #16]
 800cd0e:	f7ff fd2b 	bl	800c768 <__hi0bits>
 800cd12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd16:	e7df      	b.n	800ccd8 <__d2b+0x70>
 800cd18:	0800d9bf 	.word	0x0800d9bf
 800cd1c:	0800da30 	.word	0x0800da30

0800cd20 <_calloc_r>:
 800cd20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd22:	fba1 2402 	umull	r2, r4, r1, r2
 800cd26:	b94c      	cbnz	r4, 800cd3c <_calloc_r+0x1c>
 800cd28:	4611      	mov	r1, r2
 800cd2a:	9201      	str	r2, [sp, #4]
 800cd2c:	f000 f87a 	bl	800ce24 <_malloc_r>
 800cd30:	9a01      	ldr	r2, [sp, #4]
 800cd32:	4605      	mov	r5, r0
 800cd34:	b930      	cbnz	r0, 800cd44 <_calloc_r+0x24>
 800cd36:	4628      	mov	r0, r5
 800cd38:	b003      	add	sp, #12
 800cd3a:	bd30      	pop	{r4, r5, pc}
 800cd3c:	220c      	movs	r2, #12
 800cd3e:	6002      	str	r2, [r0, #0]
 800cd40:	2500      	movs	r5, #0
 800cd42:	e7f8      	b.n	800cd36 <_calloc_r+0x16>
 800cd44:	4621      	mov	r1, r4
 800cd46:	f7fd fd7b 	bl	800a840 <memset>
 800cd4a:	e7f4      	b.n	800cd36 <_calloc_r+0x16>

0800cd4c <_free_r>:
 800cd4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd4e:	2900      	cmp	r1, #0
 800cd50:	d044      	beq.n	800cddc <_free_r+0x90>
 800cd52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd56:	9001      	str	r0, [sp, #4]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	f1a1 0404 	sub.w	r4, r1, #4
 800cd5e:	bfb8      	it	lt
 800cd60:	18e4      	addlt	r4, r4, r3
 800cd62:	f000 fc8f 	bl	800d684 <__malloc_lock>
 800cd66:	4a1e      	ldr	r2, [pc, #120]	; (800cde0 <_free_r+0x94>)
 800cd68:	9801      	ldr	r0, [sp, #4]
 800cd6a:	6813      	ldr	r3, [r2, #0]
 800cd6c:	b933      	cbnz	r3, 800cd7c <_free_r+0x30>
 800cd6e:	6063      	str	r3, [r4, #4]
 800cd70:	6014      	str	r4, [r2, #0]
 800cd72:	b003      	add	sp, #12
 800cd74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd78:	f000 bc8a 	b.w	800d690 <__malloc_unlock>
 800cd7c:	42a3      	cmp	r3, r4
 800cd7e:	d908      	bls.n	800cd92 <_free_r+0x46>
 800cd80:	6825      	ldr	r5, [r4, #0]
 800cd82:	1961      	adds	r1, r4, r5
 800cd84:	428b      	cmp	r3, r1
 800cd86:	bf01      	itttt	eq
 800cd88:	6819      	ldreq	r1, [r3, #0]
 800cd8a:	685b      	ldreq	r3, [r3, #4]
 800cd8c:	1949      	addeq	r1, r1, r5
 800cd8e:	6021      	streq	r1, [r4, #0]
 800cd90:	e7ed      	b.n	800cd6e <_free_r+0x22>
 800cd92:	461a      	mov	r2, r3
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	b10b      	cbz	r3, 800cd9c <_free_r+0x50>
 800cd98:	42a3      	cmp	r3, r4
 800cd9a:	d9fa      	bls.n	800cd92 <_free_r+0x46>
 800cd9c:	6811      	ldr	r1, [r2, #0]
 800cd9e:	1855      	adds	r5, r2, r1
 800cda0:	42a5      	cmp	r5, r4
 800cda2:	d10b      	bne.n	800cdbc <_free_r+0x70>
 800cda4:	6824      	ldr	r4, [r4, #0]
 800cda6:	4421      	add	r1, r4
 800cda8:	1854      	adds	r4, r2, r1
 800cdaa:	42a3      	cmp	r3, r4
 800cdac:	6011      	str	r1, [r2, #0]
 800cdae:	d1e0      	bne.n	800cd72 <_free_r+0x26>
 800cdb0:	681c      	ldr	r4, [r3, #0]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	6053      	str	r3, [r2, #4]
 800cdb6:	4421      	add	r1, r4
 800cdb8:	6011      	str	r1, [r2, #0]
 800cdba:	e7da      	b.n	800cd72 <_free_r+0x26>
 800cdbc:	d902      	bls.n	800cdc4 <_free_r+0x78>
 800cdbe:	230c      	movs	r3, #12
 800cdc0:	6003      	str	r3, [r0, #0]
 800cdc2:	e7d6      	b.n	800cd72 <_free_r+0x26>
 800cdc4:	6825      	ldr	r5, [r4, #0]
 800cdc6:	1961      	adds	r1, r4, r5
 800cdc8:	428b      	cmp	r3, r1
 800cdca:	bf04      	itt	eq
 800cdcc:	6819      	ldreq	r1, [r3, #0]
 800cdce:	685b      	ldreq	r3, [r3, #4]
 800cdd0:	6063      	str	r3, [r4, #4]
 800cdd2:	bf04      	itt	eq
 800cdd4:	1949      	addeq	r1, r1, r5
 800cdd6:	6021      	streq	r1, [r4, #0]
 800cdd8:	6054      	str	r4, [r2, #4]
 800cdda:	e7ca      	b.n	800cd72 <_free_r+0x26>
 800cddc:	b003      	add	sp, #12
 800cdde:	bd30      	pop	{r4, r5, pc}
 800cde0:	20000c10 	.word	0x20000c10

0800cde4 <sbrk_aligned>:
 800cde4:	b570      	push	{r4, r5, r6, lr}
 800cde6:	4e0e      	ldr	r6, [pc, #56]	; (800ce20 <sbrk_aligned+0x3c>)
 800cde8:	460c      	mov	r4, r1
 800cdea:	6831      	ldr	r1, [r6, #0]
 800cdec:	4605      	mov	r5, r0
 800cdee:	b911      	cbnz	r1, 800cdf6 <sbrk_aligned+0x12>
 800cdf0:	f000 fb42 	bl	800d478 <_sbrk_r>
 800cdf4:	6030      	str	r0, [r6, #0]
 800cdf6:	4621      	mov	r1, r4
 800cdf8:	4628      	mov	r0, r5
 800cdfa:	f000 fb3d 	bl	800d478 <_sbrk_r>
 800cdfe:	1c43      	adds	r3, r0, #1
 800ce00:	d00a      	beq.n	800ce18 <sbrk_aligned+0x34>
 800ce02:	1cc4      	adds	r4, r0, #3
 800ce04:	f024 0403 	bic.w	r4, r4, #3
 800ce08:	42a0      	cmp	r0, r4
 800ce0a:	d007      	beq.n	800ce1c <sbrk_aligned+0x38>
 800ce0c:	1a21      	subs	r1, r4, r0
 800ce0e:	4628      	mov	r0, r5
 800ce10:	f000 fb32 	bl	800d478 <_sbrk_r>
 800ce14:	3001      	adds	r0, #1
 800ce16:	d101      	bne.n	800ce1c <sbrk_aligned+0x38>
 800ce18:	f04f 34ff 	mov.w	r4, #4294967295
 800ce1c:	4620      	mov	r0, r4
 800ce1e:	bd70      	pop	{r4, r5, r6, pc}
 800ce20:	20000c14 	.word	0x20000c14

0800ce24 <_malloc_r>:
 800ce24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce28:	1ccd      	adds	r5, r1, #3
 800ce2a:	f025 0503 	bic.w	r5, r5, #3
 800ce2e:	3508      	adds	r5, #8
 800ce30:	2d0c      	cmp	r5, #12
 800ce32:	bf38      	it	cc
 800ce34:	250c      	movcc	r5, #12
 800ce36:	2d00      	cmp	r5, #0
 800ce38:	4607      	mov	r7, r0
 800ce3a:	db01      	blt.n	800ce40 <_malloc_r+0x1c>
 800ce3c:	42a9      	cmp	r1, r5
 800ce3e:	d905      	bls.n	800ce4c <_malloc_r+0x28>
 800ce40:	230c      	movs	r3, #12
 800ce42:	603b      	str	r3, [r7, #0]
 800ce44:	2600      	movs	r6, #0
 800ce46:	4630      	mov	r0, r6
 800ce48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce4c:	4e2e      	ldr	r6, [pc, #184]	; (800cf08 <_malloc_r+0xe4>)
 800ce4e:	f000 fc19 	bl	800d684 <__malloc_lock>
 800ce52:	6833      	ldr	r3, [r6, #0]
 800ce54:	461c      	mov	r4, r3
 800ce56:	bb34      	cbnz	r4, 800cea6 <_malloc_r+0x82>
 800ce58:	4629      	mov	r1, r5
 800ce5a:	4638      	mov	r0, r7
 800ce5c:	f7ff ffc2 	bl	800cde4 <sbrk_aligned>
 800ce60:	1c43      	adds	r3, r0, #1
 800ce62:	4604      	mov	r4, r0
 800ce64:	d14d      	bne.n	800cf02 <_malloc_r+0xde>
 800ce66:	6834      	ldr	r4, [r6, #0]
 800ce68:	4626      	mov	r6, r4
 800ce6a:	2e00      	cmp	r6, #0
 800ce6c:	d140      	bne.n	800cef0 <_malloc_r+0xcc>
 800ce6e:	6823      	ldr	r3, [r4, #0]
 800ce70:	4631      	mov	r1, r6
 800ce72:	4638      	mov	r0, r7
 800ce74:	eb04 0803 	add.w	r8, r4, r3
 800ce78:	f000 fafe 	bl	800d478 <_sbrk_r>
 800ce7c:	4580      	cmp	r8, r0
 800ce7e:	d13a      	bne.n	800cef6 <_malloc_r+0xd2>
 800ce80:	6821      	ldr	r1, [r4, #0]
 800ce82:	3503      	adds	r5, #3
 800ce84:	1a6d      	subs	r5, r5, r1
 800ce86:	f025 0503 	bic.w	r5, r5, #3
 800ce8a:	3508      	adds	r5, #8
 800ce8c:	2d0c      	cmp	r5, #12
 800ce8e:	bf38      	it	cc
 800ce90:	250c      	movcc	r5, #12
 800ce92:	4629      	mov	r1, r5
 800ce94:	4638      	mov	r0, r7
 800ce96:	f7ff ffa5 	bl	800cde4 <sbrk_aligned>
 800ce9a:	3001      	adds	r0, #1
 800ce9c:	d02b      	beq.n	800cef6 <_malloc_r+0xd2>
 800ce9e:	6823      	ldr	r3, [r4, #0]
 800cea0:	442b      	add	r3, r5
 800cea2:	6023      	str	r3, [r4, #0]
 800cea4:	e00e      	b.n	800cec4 <_malloc_r+0xa0>
 800cea6:	6822      	ldr	r2, [r4, #0]
 800cea8:	1b52      	subs	r2, r2, r5
 800ceaa:	d41e      	bmi.n	800ceea <_malloc_r+0xc6>
 800ceac:	2a0b      	cmp	r2, #11
 800ceae:	d916      	bls.n	800cede <_malloc_r+0xba>
 800ceb0:	1961      	adds	r1, r4, r5
 800ceb2:	42a3      	cmp	r3, r4
 800ceb4:	6025      	str	r5, [r4, #0]
 800ceb6:	bf18      	it	ne
 800ceb8:	6059      	strne	r1, [r3, #4]
 800ceba:	6863      	ldr	r3, [r4, #4]
 800cebc:	bf08      	it	eq
 800cebe:	6031      	streq	r1, [r6, #0]
 800cec0:	5162      	str	r2, [r4, r5]
 800cec2:	604b      	str	r3, [r1, #4]
 800cec4:	4638      	mov	r0, r7
 800cec6:	f104 060b 	add.w	r6, r4, #11
 800ceca:	f000 fbe1 	bl	800d690 <__malloc_unlock>
 800cece:	f026 0607 	bic.w	r6, r6, #7
 800ced2:	1d23      	adds	r3, r4, #4
 800ced4:	1af2      	subs	r2, r6, r3
 800ced6:	d0b6      	beq.n	800ce46 <_malloc_r+0x22>
 800ced8:	1b9b      	subs	r3, r3, r6
 800ceda:	50a3      	str	r3, [r4, r2]
 800cedc:	e7b3      	b.n	800ce46 <_malloc_r+0x22>
 800cede:	6862      	ldr	r2, [r4, #4]
 800cee0:	42a3      	cmp	r3, r4
 800cee2:	bf0c      	ite	eq
 800cee4:	6032      	streq	r2, [r6, #0]
 800cee6:	605a      	strne	r2, [r3, #4]
 800cee8:	e7ec      	b.n	800cec4 <_malloc_r+0xa0>
 800ceea:	4623      	mov	r3, r4
 800ceec:	6864      	ldr	r4, [r4, #4]
 800ceee:	e7b2      	b.n	800ce56 <_malloc_r+0x32>
 800cef0:	4634      	mov	r4, r6
 800cef2:	6876      	ldr	r6, [r6, #4]
 800cef4:	e7b9      	b.n	800ce6a <_malloc_r+0x46>
 800cef6:	230c      	movs	r3, #12
 800cef8:	603b      	str	r3, [r7, #0]
 800cefa:	4638      	mov	r0, r7
 800cefc:	f000 fbc8 	bl	800d690 <__malloc_unlock>
 800cf00:	e7a1      	b.n	800ce46 <_malloc_r+0x22>
 800cf02:	6025      	str	r5, [r4, #0]
 800cf04:	e7de      	b.n	800cec4 <_malloc_r+0xa0>
 800cf06:	bf00      	nop
 800cf08:	20000c10 	.word	0x20000c10

0800cf0c <__ssputs_r>:
 800cf0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf10:	688e      	ldr	r6, [r1, #8]
 800cf12:	429e      	cmp	r6, r3
 800cf14:	4682      	mov	sl, r0
 800cf16:	460c      	mov	r4, r1
 800cf18:	4690      	mov	r8, r2
 800cf1a:	461f      	mov	r7, r3
 800cf1c:	d838      	bhi.n	800cf90 <__ssputs_r+0x84>
 800cf1e:	898a      	ldrh	r2, [r1, #12]
 800cf20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf24:	d032      	beq.n	800cf8c <__ssputs_r+0x80>
 800cf26:	6825      	ldr	r5, [r4, #0]
 800cf28:	6909      	ldr	r1, [r1, #16]
 800cf2a:	eba5 0901 	sub.w	r9, r5, r1
 800cf2e:	6965      	ldr	r5, [r4, #20]
 800cf30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf38:	3301      	adds	r3, #1
 800cf3a:	444b      	add	r3, r9
 800cf3c:	106d      	asrs	r5, r5, #1
 800cf3e:	429d      	cmp	r5, r3
 800cf40:	bf38      	it	cc
 800cf42:	461d      	movcc	r5, r3
 800cf44:	0553      	lsls	r3, r2, #21
 800cf46:	d531      	bpl.n	800cfac <__ssputs_r+0xa0>
 800cf48:	4629      	mov	r1, r5
 800cf4a:	f7ff ff6b 	bl	800ce24 <_malloc_r>
 800cf4e:	4606      	mov	r6, r0
 800cf50:	b950      	cbnz	r0, 800cf68 <__ssputs_r+0x5c>
 800cf52:	230c      	movs	r3, #12
 800cf54:	f8ca 3000 	str.w	r3, [sl]
 800cf58:	89a3      	ldrh	r3, [r4, #12]
 800cf5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf5e:	81a3      	strh	r3, [r4, #12]
 800cf60:	f04f 30ff 	mov.w	r0, #4294967295
 800cf64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf68:	6921      	ldr	r1, [r4, #16]
 800cf6a:	464a      	mov	r2, r9
 800cf6c:	f7ff fb46 	bl	800c5fc <memcpy>
 800cf70:	89a3      	ldrh	r3, [r4, #12]
 800cf72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf7a:	81a3      	strh	r3, [r4, #12]
 800cf7c:	6126      	str	r6, [r4, #16]
 800cf7e:	6165      	str	r5, [r4, #20]
 800cf80:	444e      	add	r6, r9
 800cf82:	eba5 0509 	sub.w	r5, r5, r9
 800cf86:	6026      	str	r6, [r4, #0]
 800cf88:	60a5      	str	r5, [r4, #8]
 800cf8a:	463e      	mov	r6, r7
 800cf8c:	42be      	cmp	r6, r7
 800cf8e:	d900      	bls.n	800cf92 <__ssputs_r+0x86>
 800cf90:	463e      	mov	r6, r7
 800cf92:	6820      	ldr	r0, [r4, #0]
 800cf94:	4632      	mov	r2, r6
 800cf96:	4641      	mov	r1, r8
 800cf98:	f000 fb5a 	bl	800d650 <memmove>
 800cf9c:	68a3      	ldr	r3, [r4, #8]
 800cf9e:	1b9b      	subs	r3, r3, r6
 800cfa0:	60a3      	str	r3, [r4, #8]
 800cfa2:	6823      	ldr	r3, [r4, #0]
 800cfa4:	4433      	add	r3, r6
 800cfa6:	6023      	str	r3, [r4, #0]
 800cfa8:	2000      	movs	r0, #0
 800cfaa:	e7db      	b.n	800cf64 <__ssputs_r+0x58>
 800cfac:	462a      	mov	r2, r5
 800cfae:	f000 fb75 	bl	800d69c <_realloc_r>
 800cfb2:	4606      	mov	r6, r0
 800cfb4:	2800      	cmp	r0, #0
 800cfb6:	d1e1      	bne.n	800cf7c <__ssputs_r+0x70>
 800cfb8:	6921      	ldr	r1, [r4, #16]
 800cfba:	4650      	mov	r0, sl
 800cfbc:	f7ff fec6 	bl	800cd4c <_free_r>
 800cfc0:	e7c7      	b.n	800cf52 <__ssputs_r+0x46>
	...

0800cfc4 <_svfiprintf_r>:
 800cfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc8:	4698      	mov	r8, r3
 800cfca:	898b      	ldrh	r3, [r1, #12]
 800cfcc:	061b      	lsls	r3, r3, #24
 800cfce:	b09d      	sub	sp, #116	; 0x74
 800cfd0:	4607      	mov	r7, r0
 800cfd2:	460d      	mov	r5, r1
 800cfd4:	4614      	mov	r4, r2
 800cfd6:	d50e      	bpl.n	800cff6 <_svfiprintf_r+0x32>
 800cfd8:	690b      	ldr	r3, [r1, #16]
 800cfda:	b963      	cbnz	r3, 800cff6 <_svfiprintf_r+0x32>
 800cfdc:	2140      	movs	r1, #64	; 0x40
 800cfde:	f7ff ff21 	bl	800ce24 <_malloc_r>
 800cfe2:	6028      	str	r0, [r5, #0]
 800cfe4:	6128      	str	r0, [r5, #16]
 800cfe6:	b920      	cbnz	r0, 800cff2 <_svfiprintf_r+0x2e>
 800cfe8:	230c      	movs	r3, #12
 800cfea:	603b      	str	r3, [r7, #0]
 800cfec:	f04f 30ff 	mov.w	r0, #4294967295
 800cff0:	e0d1      	b.n	800d196 <_svfiprintf_r+0x1d2>
 800cff2:	2340      	movs	r3, #64	; 0x40
 800cff4:	616b      	str	r3, [r5, #20]
 800cff6:	2300      	movs	r3, #0
 800cff8:	9309      	str	r3, [sp, #36]	; 0x24
 800cffa:	2320      	movs	r3, #32
 800cffc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d000:	f8cd 800c 	str.w	r8, [sp, #12]
 800d004:	2330      	movs	r3, #48	; 0x30
 800d006:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d1b0 <_svfiprintf_r+0x1ec>
 800d00a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d00e:	f04f 0901 	mov.w	r9, #1
 800d012:	4623      	mov	r3, r4
 800d014:	469a      	mov	sl, r3
 800d016:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d01a:	b10a      	cbz	r2, 800d020 <_svfiprintf_r+0x5c>
 800d01c:	2a25      	cmp	r2, #37	; 0x25
 800d01e:	d1f9      	bne.n	800d014 <_svfiprintf_r+0x50>
 800d020:	ebba 0b04 	subs.w	fp, sl, r4
 800d024:	d00b      	beq.n	800d03e <_svfiprintf_r+0x7a>
 800d026:	465b      	mov	r3, fp
 800d028:	4622      	mov	r2, r4
 800d02a:	4629      	mov	r1, r5
 800d02c:	4638      	mov	r0, r7
 800d02e:	f7ff ff6d 	bl	800cf0c <__ssputs_r>
 800d032:	3001      	adds	r0, #1
 800d034:	f000 80aa 	beq.w	800d18c <_svfiprintf_r+0x1c8>
 800d038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d03a:	445a      	add	r2, fp
 800d03c:	9209      	str	r2, [sp, #36]	; 0x24
 800d03e:	f89a 3000 	ldrb.w	r3, [sl]
 800d042:	2b00      	cmp	r3, #0
 800d044:	f000 80a2 	beq.w	800d18c <_svfiprintf_r+0x1c8>
 800d048:	2300      	movs	r3, #0
 800d04a:	f04f 32ff 	mov.w	r2, #4294967295
 800d04e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d052:	f10a 0a01 	add.w	sl, sl, #1
 800d056:	9304      	str	r3, [sp, #16]
 800d058:	9307      	str	r3, [sp, #28]
 800d05a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d05e:	931a      	str	r3, [sp, #104]	; 0x68
 800d060:	4654      	mov	r4, sl
 800d062:	2205      	movs	r2, #5
 800d064:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d068:	4851      	ldr	r0, [pc, #324]	; (800d1b0 <_svfiprintf_r+0x1ec>)
 800d06a:	f7f3 f8b9 	bl	80001e0 <memchr>
 800d06e:	9a04      	ldr	r2, [sp, #16]
 800d070:	b9d8      	cbnz	r0, 800d0aa <_svfiprintf_r+0xe6>
 800d072:	06d0      	lsls	r0, r2, #27
 800d074:	bf44      	itt	mi
 800d076:	2320      	movmi	r3, #32
 800d078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d07c:	0711      	lsls	r1, r2, #28
 800d07e:	bf44      	itt	mi
 800d080:	232b      	movmi	r3, #43	; 0x2b
 800d082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d086:	f89a 3000 	ldrb.w	r3, [sl]
 800d08a:	2b2a      	cmp	r3, #42	; 0x2a
 800d08c:	d015      	beq.n	800d0ba <_svfiprintf_r+0xf6>
 800d08e:	9a07      	ldr	r2, [sp, #28]
 800d090:	4654      	mov	r4, sl
 800d092:	2000      	movs	r0, #0
 800d094:	f04f 0c0a 	mov.w	ip, #10
 800d098:	4621      	mov	r1, r4
 800d09a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d09e:	3b30      	subs	r3, #48	; 0x30
 800d0a0:	2b09      	cmp	r3, #9
 800d0a2:	d94e      	bls.n	800d142 <_svfiprintf_r+0x17e>
 800d0a4:	b1b0      	cbz	r0, 800d0d4 <_svfiprintf_r+0x110>
 800d0a6:	9207      	str	r2, [sp, #28]
 800d0a8:	e014      	b.n	800d0d4 <_svfiprintf_r+0x110>
 800d0aa:	eba0 0308 	sub.w	r3, r0, r8
 800d0ae:	fa09 f303 	lsl.w	r3, r9, r3
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	9304      	str	r3, [sp, #16]
 800d0b6:	46a2      	mov	sl, r4
 800d0b8:	e7d2      	b.n	800d060 <_svfiprintf_r+0x9c>
 800d0ba:	9b03      	ldr	r3, [sp, #12]
 800d0bc:	1d19      	adds	r1, r3, #4
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	9103      	str	r1, [sp, #12]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	bfbb      	ittet	lt
 800d0c6:	425b      	neglt	r3, r3
 800d0c8:	f042 0202 	orrlt.w	r2, r2, #2
 800d0cc:	9307      	strge	r3, [sp, #28]
 800d0ce:	9307      	strlt	r3, [sp, #28]
 800d0d0:	bfb8      	it	lt
 800d0d2:	9204      	strlt	r2, [sp, #16]
 800d0d4:	7823      	ldrb	r3, [r4, #0]
 800d0d6:	2b2e      	cmp	r3, #46	; 0x2e
 800d0d8:	d10c      	bne.n	800d0f4 <_svfiprintf_r+0x130>
 800d0da:	7863      	ldrb	r3, [r4, #1]
 800d0dc:	2b2a      	cmp	r3, #42	; 0x2a
 800d0de:	d135      	bne.n	800d14c <_svfiprintf_r+0x188>
 800d0e0:	9b03      	ldr	r3, [sp, #12]
 800d0e2:	1d1a      	adds	r2, r3, #4
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	9203      	str	r2, [sp, #12]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	bfb8      	it	lt
 800d0ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0f0:	3402      	adds	r4, #2
 800d0f2:	9305      	str	r3, [sp, #20]
 800d0f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d1c0 <_svfiprintf_r+0x1fc>
 800d0f8:	7821      	ldrb	r1, [r4, #0]
 800d0fa:	2203      	movs	r2, #3
 800d0fc:	4650      	mov	r0, sl
 800d0fe:	f7f3 f86f 	bl	80001e0 <memchr>
 800d102:	b140      	cbz	r0, 800d116 <_svfiprintf_r+0x152>
 800d104:	2340      	movs	r3, #64	; 0x40
 800d106:	eba0 000a 	sub.w	r0, r0, sl
 800d10a:	fa03 f000 	lsl.w	r0, r3, r0
 800d10e:	9b04      	ldr	r3, [sp, #16]
 800d110:	4303      	orrs	r3, r0
 800d112:	3401      	adds	r4, #1
 800d114:	9304      	str	r3, [sp, #16]
 800d116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d11a:	4826      	ldr	r0, [pc, #152]	; (800d1b4 <_svfiprintf_r+0x1f0>)
 800d11c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d120:	2206      	movs	r2, #6
 800d122:	f7f3 f85d 	bl	80001e0 <memchr>
 800d126:	2800      	cmp	r0, #0
 800d128:	d038      	beq.n	800d19c <_svfiprintf_r+0x1d8>
 800d12a:	4b23      	ldr	r3, [pc, #140]	; (800d1b8 <_svfiprintf_r+0x1f4>)
 800d12c:	bb1b      	cbnz	r3, 800d176 <_svfiprintf_r+0x1b2>
 800d12e:	9b03      	ldr	r3, [sp, #12]
 800d130:	3307      	adds	r3, #7
 800d132:	f023 0307 	bic.w	r3, r3, #7
 800d136:	3308      	adds	r3, #8
 800d138:	9303      	str	r3, [sp, #12]
 800d13a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d13c:	4433      	add	r3, r6
 800d13e:	9309      	str	r3, [sp, #36]	; 0x24
 800d140:	e767      	b.n	800d012 <_svfiprintf_r+0x4e>
 800d142:	fb0c 3202 	mla	r2, ip, r2, r3
 800d146:	460c      	mov	r4, r1
 800d148:	2001      	movs	r0, #1
 800d14a:	e7a5      	b.n	800d098 <_svfiprintf_r+0xd4>
 800d14c:	2300      	movs	r3, #0
 800d14e:	3401      	adds	r4, #1
 800d150:	9305      	str	r3, [sp, #20]
 800d152:	4619      	mov	r1, r3
 800d154:	f04f 0c0a 	mov.w	ip, #10
 800d158:	4620      	mov	r0, r4
 800d15a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d15e:	3a30      	subs	r2, #48	; 0x30
 800d160:	2a09      	cmp	r2, #9
 800d162:	d903      	bls.n	800d16c <_svfiprintf_r+0x1a8>
 800d164:	2b00      	cmp	r3, #0
 800d166:	d0c5      	beq.n	800d0f4 <_svfiprintf_r+0x130>
 800d168:	9105      	str	r1, [sp, #20]
 800d16a:	e7c3      	b.n	800d0f4 <_svfiprintf_r+0x130>
 800d16c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d170:	4604      	mov	r4, r0
 800d172:	2301      	movs	r3, #1
 800d174:	e7f0      	b.n	800d158 <_svfiprintf_r+0x194>
 800d176:	ab03      	add	r3, sp, #12
 800d178:	9300      	str	r3, [sp, #0]
 800d17a:	462a      	mov	r2, r5
 800d17c:	4b0f      	ldr	r3, [pc, #60]	; (800d1bc <_svfiprintf_r+0x1f8>)
 800d17e:	a904      	add	r1, sp, #16
 800d180:	4638      	mov	r0, r7
 800d182:	f7fd fc05 	bl	800a990 <_printf_float>
 800d186:	1c42      	adds	r2, r0, #1
 800d188:	4606      	mov	r6, r0
 800d18a:	d1d6      	bne.n	800d13a <_svfiprintf_r+0x176>
 800d18c:	89ab      	ldrh	r3, [r5, #12]
 800d18e:	065b      	lsls	r3, r3, #25
 800d190:	f53f af2c 	bmi.w	800cfec <_svfiprintf_r+0x28>
 800d194:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d196:	b01d      	add	sp, #116	; 0x74
 800d198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d19c:	ab03      	add	r3, sp, #12
 800d19e:	9300      	str	r3, [sp, #0]
 800d1a0:	462a      	mov	r2, r5
 800d1a2:	4b06      	ldr	r3, [pc, #24]	; (800d1bc <_svfiprintf_r+0x1f8>)
 800d1a4:	a904      	add	r1, sp, #16
 800d1a6:	4638      	mov	r0, r7
 800d1a8:	f7fd fe96 	bl	800aed8 <_printf_i>
 800d1ac:	e7eb      	b.n	800d186 <_svfiprintf_r+0x1c2>
 800d1ae:	bf00      	nop
 800d1b0:	0800db8c 	.word	0x0800db8c
 800d1b4:	0800db96 	.word	0x0800db96
 800d1b8:	0800a991 	.word	0x0800a991
 800d1bc:	0800cf0d 	.word	0x0800cf0d
 800d1c0:	0800db92 	.word	0x0800db92

0800d1c4 <__sfputc_r>:
 800d1c4:	6893      	ldr	r3, [r2, #8]
 800d1c6:	3b01      	subs	r3, #1
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	b410      	push	{r4}
 800d1cc:	6093      	str	r3, [r2, #8]
 800d1ce:	da08      	bge.n	800d1e2 <__sfputc_r+0x1e>
 800d1d0:	6994      	ldr	r4, [r2, #24]
 800d1d2:	42a3      	cmp	r3, r4
 800d1d4:	db01      	blt.n	800d1da <__sfputc_r+0x16>
 800d1d6:	290a      	cmp	r1, #10
 800d1d8:	d103      	bne.n	800d1e2 <__sfputc_r+0x1e>
 800d1da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1de:	f7fe b8a7 	b.w	800b330 <__swbuf_r>
 800d1e2:	6813      	ldr	r3, [r2, #0]
 800d1e4:	1c58      	adds	r0, r3, #1
 800d1e6:	6010      	str	r0, [r2, #0]
 800d1e8:	7019      	strb	r1, [r3, #0]
 800d1ea:	4608      	mov	r0, r1
 800d1ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1f0:	4770      	bx	lr

0800d1f2 <__sfputs_r>:
 800d1f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1f4:	4606      	mov	r6, r0
 800d1f6:	460f      	mov	r7, r1
 800d1f8:	4614      	mov	r4, r2
 800d1fa:	18d5      	adds	r5, r2, r3
 800d1fc:	42ac      	cmp	r4, r5
 800d1fe:	d101      	bne.n	800d204 <__sfputs_r+0x12>
 800d200:	2000      	movs	r0, #0
 800d202:	e007      	b.n	800d214 <__sfputs_r+0x22>
 800d204:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d208:	463a      	mov	r2, r7
 800d20a:	4630      	mov	r0, r6
 800d20c:	f7ff ffda 	bl	800d1c4 <__sfputc_r>
 800d210:	1c43      	adds	r3, r0, #1
 800d212:	d1f3      	bne.n	800d1fc <__sfputs_r+0xa>
 800d214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d218 <_vfiprintf_r>:
 800d218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d21c:	460d      	mov	r5, r1
 800d21e:	b09d      	sub	sp, #116	; 0x74
 800d220:	4614      	mov	r4, r2
 800d222:	4698      	mov	r8, r3
 800d224:	4606      	mov	r6, r0
 800d226:	b118      	cbz	r0, 800d230 <_vfiprintf_r+0x18>
 800d228:	6983      	ldr	r3, [r0, #24]
 800d22a:	b90b      	cbnz	r3, 800d230 <_vfiprintf_r+0x18>
 800d22c:	f7ff f8d4 	bl	800c3d8 <__sinit>
 800d230:	4b89      	ldr	r3, [pc, #548]	; (800d458 <_vfiprintf_r+0x240>)
 800d232:	429d      	cmp	r5, r3
 800d234:	d11b      	bne.n	800d26e <_vfiprintf_r+0x56>
 800d236:	6875      	ldr	r5, [r6, #4]
 800d238:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d23a:	07d9      	lsls	r1, r3, #31
 800d23c:	d405      	bmi.n	800d24a <_vfiprintf_r+0x32>
 800d23e:	89ab      	ldrh	r3, [r5, #12]
 800d240:	059a      	lsls	r2, r3, #22
 800d242:	d402      	bmi.n	800d24a <_vfiprintf_r+0x32>
 800d244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d246:	f7ff f96a 	bl	800c51e <__retarget_lock_acquire_recursive>
 800d24a:	89ab      	ldrh	r3, [r5, #12]
 800d24c:	071b      	lsls	r3, r3, #28
 800d24e:	d501      	bpl.n	800d254 <_vfiprintf_r+0x3c>
 800d250:	692b      	ldr	r3, [r5, #16]
 800d252:	b9eb      	cbnz	r3, 800d290 <_vfiprintf_r+0x78>
 800d254:	4629      	mov	r1, r5
 800d256:	4630      	mov	r0, r6
 800d258:	f7fe f8bc 	bl	800b3d4 <__swsetup_r>
 800d25c:	b1c0      	cbz	r0, 800d290 <_vfiprintf_r+0x78>
 800d25e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d260:	07dc      	lsls	r4, r3, #31
 800d262:	d50e      	bpl.n	800d282 <_vfiprintf_r+0x6a>
 800d264:	f04f 30ff 	mov.w	r0, #4294967295
 800d268:	b01d      	add	sp, #116	; 0x74
 800d26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d26e:	4b7b      	ldr	r3, [pc, #492]	; (800d45c <_vfiprintf_r+0x244>)
 800d270:	429d      	cmp	r5, r3
 800d272:	d101      	bne.n	800d278 <_vfiprintf_r+0x60>
 800d274:	68b5      	ldr	r5, [r6, #8]
 800d276:	e7df      	b.n	800d238 <_vfiprintf_r+0x20>
 800d278:	4b79      	ldr	r3, [pc, #484]	; (800d460 <_vfiprintf_r+0x248>)
 800d27a:	429d      	cmp	r5, r3
 800d27c:	bf08      	it	eq
 800d27e:	68f5      	ldreq	r5, [r6, #12]
 800d280:	e7da      	b.n	800d238 <_vfiprintf_r+0x20>
 800d282:	89ab      	ldrh	r3, [r5, #12]
 800d284:	0598      	lsls	r0, r3, #22
 800d286:	d4ed      	bmi.n	800d264 <_vfiprintf_r+0x4c>
 800d288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d28a:	f7ff f949 	bl	800c520 <__retarget_lock_release_recursive>
 800d28e:	e7e9      	b.n	800d264 <_vfiprintf_r+0x4c>
 800d290:	2300      	movs	r3, #0
 800d292:	9309      	str	r3, [sp, #36]	; 0x24
 800d294:	2320      	movs	r3, #32
 800d296:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d29a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d29e:	2330      	movs	r3, #48	; 0x30
 800d2a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d464 <_vfiprintf_r+0x24c>
 800d2a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2a8:	f04f 0901 	mov.w	r9, #1
 800d2ac:	4623      	mov	r3, r4
 800d2ae:	469a      	mov	sl, r3
 800d2b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2b4:	b10a      	cbz	r2, 800d2ba <_vfiprintf_r+0xa2>
 800d2b6:	2a25      	cmp	r2, #37	; 0x25
 800d2b8:	d1f9      	bne.n	800d2ae <_vfiprintf_r+0x96>
 800d2ba:	ebba 0b04 	subs.w	fp, sl, r4
 800d2be:	d00b      	beq.n	800d2d8 <_vfiprintf_r+0xc0>
 800d2c0:	465b      	mov	r3, fp
 800d2c2:	4622      	mov	r2, r4
 800d2c4:	4629      	mov	r1, r5
 800d2c6:	4630      	mov	r0, r6
 800d2c8:	f7ff ff93 	bl	800d1f2 <__sfputs_r>
 800d2cc:	3001      	adds	r0, #1
 800d2ce:	f000 80aa 	beq.w	800d426 <_vfiprintf_r+0x20e>
 800d2d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2d4:	445a      	add	r2, fp
 800d2d6:	9209      	str	r2, [sp, #36]	; 0x24
 800d2d8:	f89a 3000 	ldrb.w	r3, [sl]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	f000 80a2 	beq.w	800d426 <_vfiprintf_r+0x20e>
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800d2e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2ec:	f10a 0a01 	add.w	sl, sl, #1
 800d2f0:	9304      	str	r3, [sp, #16]
 800d2f2:	9307      	str	r3, [sp, #28]
 800d2f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d2f8:	931a      	str	r3, [sp, #104]	; 0x68
 800d2fa:	4654      	mov	r4, sl
 800d2fc:	2205      	movs	r2, #5
 800d2fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d302:	4858      	ldr	r0, [pc, #352]	; (800d464 <_vfiprintf_r+0x24c>)
 800d304:	f7f2 ff6c 	bl	80001e0 <memchr>
 800d308:	9a04      	ldr	r2, [sp, #16]
 800d30a:	b9d8      	cbnz	r0, 800d344 <_vfiprintf_r+0x12c>
 800d30c:	06d1      	lsls	r1, r2, #27
 800d30e:	bf44      	itt	mi
 800d310:	2320      	movmi	r3, #32
 800d312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d316:	0713      	lsls	r3, r2, #28
 800d318:	bf44      	itt	mi
 800d31a:	232b      	movmi	r3, #43	; 0x2b
 800d31c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d320:	f89a 3000 	ldrb.w	r3, [sl]
 800d324:	2b2a      	cmp	r3, #42	; 0x2a
 800d326:	d015      	beq.n	800d354 <_vfiprintf_r+0x13c>
 800d328:	9a07      	ldr	r2, [sp, #28]
 800d32a:	4654      	mov	r4, sl
 800d32c:	2000      	movs	r0, #0
 800d32e:	f04f 0c0a 	mov.w	ip, #10
 800d332:	4621      	mov	r1, r4
 800d334:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d338:	3b30      	subs	r3, #48	; 0x30
 800d33a:	2b09      	cmp	r3, #9
 800d33c:	d94e      	bls.n	800d3dc <_vfiprintf_r+0x1c4>
 800d33e:	b1b0      	cbz	r0, 800d36e <_vfiprintf_r+0x156>
 800d340:	9207      	str	r2, [sp, #28]
 800d342:	e014      	b.n	800d36e <_vfiprintf_r+0x156>
 800d344:	eba0 0308 	sub.w	r3, r0, r8
 800d348:	fa09 f303 	lsl.w	r3, r9, r3
 800d34c:	4313      	orrs	r3, r2
 800d34e:	9304      	str	r3, [sp, #16]
 800d350:	46a2      	mov	sl, r4
 800d352:	e7d2      	b.n	800d2fa <_vfiprintf_r+0xe2>
 800d354:	9b03      	ldr	r3, [sp, #12]
 800d356:	1d19      	adds	r1, r3, #4
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	9103      	str	r1, [sp, #12]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	bfbb      	ittet	lt
 800d360:	425b      	neglt	r3, r3
 800d362:	f042 0202 	orrlt.w	r2, r2, #2
 800d366:	9307      	strge	r3, [sp, #28]
 800d368:	9307      	strlt	r3, [sp, #28]
 800d36a:	bfb8      	it	lt
 800d36c:	9204      	strlt	r2, [sp, #16]
 800d36e:	7823      	ldrb	r3, [r4, #0]
 800d370:	2b2e      	cmp	r3, #46	; 0x2e
 800d372:	d10c      	bne.n	800d38e <_vfiprintf_r+0x176>
 800d374:	7863      	ldrb	r3, [r4, #1]
 800d376:	2b2a      	cmp	r3, #42	; 0x2a
 800d378:	d135      	bne.n	800d3e6 <_vfiprintf_r+0x1ce>
 800d37a:	9b03      	ldr	r3, [sp, #12]
 800d37c:	1d1a      	adds	r2, r3, #4
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	9203      	str	r2, [sp, #12]
 800d382:	2b00      	cmp	r3, #0
 800d384:	bfb8      	it	lt
 800d386:	f04f 33ff 	movlt.w	r3, #4294967295
 800d38a:	3402      	adds	r4, #2
 800d38c:	9305      	str	r3, [sp, #20]
 800d38e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d474 <_vfiprintf_r+0x25c>
 800d392:	7821      	ldrb	r1, [r4, #0]
 800d394:	2203      	movs	r2, #3
 800d396:	4650      	mov	r0, sl
 800d398:	f7f2 ff22 	bl	80001e0 <memchr>
 800d39c:	b140      	cbz	r0, 800d3b0 <_vfiprintf_r+0x198>
 800d39e:	2340      	movs	r3, #64	; 0x40
 800d3a0:	eba0 000a 	sub.w	r0, r0, sl
 800d3a4:	fa03 f000 	lsl.w	r0, r3, r0
 800d3a8:	9b04      	ldr	r3, [sp, #16]
 800d3aa:	4303      	orrs	r3, r0
 800d3ac:	3401      	adds	r4, #1
 800d3ae:	9304      	str	r3, [sp, #16]
 800d3b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3b4:	482c      	ldr	r0, [pc, #176]	; (800d468 <_vfiprintf_r+0x250>)
 800d3b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3ba:	2206      	movs	r2, #6
 800d3bc:	f7f2 ff10 	bl	80001e0 <memchr>
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	d03f      	beq.n	800d444 <_vfiprintf_r+0x22c>
 800d3c4:	4b29      	ldr	r3, [pc, #164]	; (800d46c <_vfiprintf_r+0x254>)
 800d3c6:	bb1b      	cbnz	r3, 800d410 <_vfiprintf_r+0x1f8>
 800d3c8:	9b03      	ldr	r3, [sp, #12]
 800d3ca:	3307      	adds	r3, #7
 800d3cc:	f023 0307 	bic.w	r3, r3, #7
 800d3d0:	3308      	adds	r3, #8
 800d3d2:	9303      	str	r3, [sp, #12]
 800d3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3d6:	443b      	add	r3, r7
 800d3d8:	9309      	str	r3, [sp, #36]	; 0x24
 800d3da:	e767      	b.n	800d2ac <_vfiprintf_r+0x94>
 800d3dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3e0:	460c      	mov	r4, r1
 800d3e2:	2001      	movs	r0, #1
 800d3e4:	e7a5      	b.n	800d332 <_vfiprintf_r+0x11a>
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	3401      	adds	r4, #1
 800d3ea:	9305      	str	r3, [sp, #20]
 800d3ec:	4619      	mov	r1, r3
 800d3ee:	f04f 0c0a 	mov.w	ip, #10
 800d3f2:	4620      	mov	r0, r4
 800d3f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3f8:	3a30      	subs	r2, #48	; 0x30
 800d3fa:	2a09      	cmp	r2, #9
 800d3fc:	d903      	bls.n	800d406 <_vfiprintf_r+0x1ee>
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d0c5      	beq.n	800d38e <_vfiprintf_r+0x176>
 800d402:	9105      	str	r1, [sp, #20]
 800d404:	e7c3      	b.n	800d38e <_vfiprintf_r+0x176>
 800d406:	fb0c 2101 	mla	r1, ip, r1, r2
 800d40a:	4604      	mov	r4, r0
 800d40c:	2301      	movs	r3, #1
 800d40e:	e7f0      	b.n	800d3f2 <_vfiprintf_r+0x1da>
 800d410:	ab03      	add	r3, sp, #12
 800d412:	9300      	str	r3, [sp, #0]
 800d414:	462a      	mov	r2, r5
 800d416:	4b16      	ldr	r3, [pc, #88]	; (800d470 <_vfiprintf_r+0x258>)
 800d418:	a904      	add	r1, sp, #16
 800d41a:	4630      	mov	r0, r6
 800d41c:	f7fd fab8 	bl	800a990 <_printf_float>
 800d420:	4607      	mov	r7, r0
 800d422:	1c78      	adds	r0, r7, #1
 800d424:	d1d6      	bne.n	800d3d4 <_vfiprintf_r+0x1bc>
 800d426:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d428:	07d9      	lsls	r1, r3, #31
 800d42a:	d405      	bmi.n	800d438 <_vfiprintf_r+0x220>
 800d42c:	89ab      	ldrh	r3, [r5, #12]
 800d42e:	059a      	lsls	r2, r3, #22
 800d430:	d402      	bmi.n	800d438 <_vfiprintf_r+0x220>
 800d432:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d434:	f7ff f874 	bl	800c520 <__retarget_lock_release_recursive>
 800d438:	89ab      	ldrh	r3, [r5, #12]
 800d43a:	065b      	lsls	r3, r3, #25
 800d43c:	f53f af12 	bmi.w	800d264 <_vfiprintf_r+0x4c>
 800d440:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d442:	e711      	b.n	800d268 <_vfiprintf_r+0x50>
 800d444:	ab03      	add	r3, sp, #12
 800d446:	9300      	str	r3, [sp, #0]
 800d448:	462a      	mov	r2, r5
 800d44a:	4b09      	ldr	r3, [pc, #36]	; (800d470 <_vfiprintf_r+0x258>)
 800d44c:	a904      	add	r1, sp, #16
 800d44e:	4630      	mov	r0, r6
 800d450:	f7fd fd42 	bl	800aed8 <_printf_i>
 800d454:	e7e4      	b.n	800d420 <_vfiprintf_r+0x208>
 800d456:	bf00      	nop
 800d458:	0800d9f0 	.word	0x0800d9f0
 800d45c:	0800da10 	.word	0x0800da10
 800d460:	0800d9d0 	.word	0x0800d9d0
 800d464:	0800db8c 	.word	0x0800db8c
 800d468:	0800db96 	.word	0x0800db96
 800d46c:	0800a991 	.word	0x0800a991
 800d470:	0800d1f3 	.word	0x0800d1f3
 800d474:	0800db92 	.word	0x0800db92

0800d478 <_sbrk_r>:
 800d478:	b538      	push	{r3, r4, r5, lr}
 800d47a:	4d06      	ldr	r5, [pc, #24]	; (800d494 <_sbrk_r+0x1c>)
 800d47c:	2300      	movs	r3, #0
 800d47e:	4604      	mov	r4, r0
 800d480:	4608      	mov	r0, r1
 800d482:	602b      	str	r3, [r5, #0]
 800d484:	f7f7 faba 	bl	80049fc <_sbrk>
 800d488:	1c43      	adds	r3, r0, #1
 800d48a:	d102      	bne.n	800d492 <_sbrk_r+0x1a>
 800d48c:	682b      	ldr	r3, [r5, #0]
 800d48e:	b103      	cbz	r3, 800d492 <_sbrk_r+0x1a>
 800d490:	6023      	str	r3, [r4, #0]
 800d492:	bd38      	pop	{r3, r4, r5, pc}
 800d494:	20000c18 	.word	0x20000c18

0800d498 <__sread>:
 800d498:	b510      	push	{r4, lr}
 800d49a:	460c      	mov	r4, r1
 800d49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4a0:	f000 f92c 	bl	800d6fc <_read_r>
 800d4a4:	2800      	cmp	r0, #0
 800d4a6:	bfab      	itete	ge
 800d4a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d4aa:	89a3      	ldrhlt	r3, [r4, #12]
 800d4ac:	181b      	addge	r3, r3, r0
 800d4ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d4b2:	bfac      	ite	ge
 800d4b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d4b6:	81a3      	strhlt	r3, [r4, #12]
 800d4b8:	bd10      	pop	{r4, pc}

0800d4ba <__swrite>:
 800d4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4be:	461f      	mov	r7, r3
 800d4c0:	898b      	ldrh	r3, [r1, #12]
 800d4c2:	05db      	lsls	r3, r3, #23
 800d4c4:	4605      	mov	r5, r0
 800d4c6:	460c      	mov	r4, r1
 800d4c8:	4616      	mov	r6, r2
 800d4ca:	d505      	bpl.n	800d4d8 <__swrite+0x1e>
 800d4cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4d0:	2302      	movs	r3, #2
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	f000 f898 	bl	800d608 <_lseek_r>
 800d4d8:	89a3      	ldrh	r3, [r4, #12]
 800d4da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d4e2:	81a3      	strh	r3, [r4, #12]
 800d4e4:	4632      	mov	r2, r6
 800d4e6:	463b      	mov	r3, r7
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ee:	f000 b817 	b.w	800d520 <_write_r>

0800d4f2 <__sseek>:
 800d4f2:	b510      	push	{r4, lr}
 800d4f4:	460c      	mov	r4, r1
 800d4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4fa:	f000 f885 	bl	800d608 <_lseek_r>
 800d4fe:	1c43      	adds	r3, r0, #1
 800d500:	89a3      	ldrh	r3, [r4, #12]
 800d502:	bf15      	itete	ne
 800d504:	6560      	strne	r0, [r4, #84]	; 0x54
 800d506:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d50a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d50e:	81a3      	strheq	r3, [r4, #12]
 800d510:	bf18      	it	ne
 800d512:	81a3      	strhne	r3, [r4, #12]
 800d514:	bd10      	pop	{r4, pc}

0800d516 <__sclose>:
 800d516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d51a:	f000 b831 	b.w	800d580 <_close_r>
	...

0800d520 <_write_r>:
 800d520:	b538      	push	{r3, r4, r5, lr}
 800d522:	4d07      	ldr	r5, [pc, #28]	; (800d540 <_write_r+0x20>)
 800d524:	4604      	mov	r4, r0
 800d526:	4608      	mov	r0, r1
 800d528:	4611      	mov	r1, r2
 800d52a:	2200      	movs	r2, #0
 800d52c:	602a      	str	r2, [r5, #0]
 800d52e:	461a      	mov	r2, r3
 800d530:	f7f7 fa10 	bl	8004954 <_write>
 800d534:	1c43      	adds	r3, r0, #1
 800d536:	d102      	bne.n	800d53e <_write_r+0x1e>
 800d538:	682b      	ldr	r3, [r5, #0]
 800d53a:	b103      	cbz	r3, 800d53e <_write_r+0x1e>
 800d53c:	6023      	str	r3, [r4, #0]
 800d53e:	bd38      	pop	{r3, r4, r5, pc}
 800d540:	20000c18 	.word	0x20000c18

0800d544 <__assert_func>:
 800d544:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d546:	4614      	mov	r4, r2
 800d548:	461a      	mov	r2, r3
 800d54a:	4b09      	ldr	r3, [pc, #36]	; (800d570 <__assert_func+0x2c>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4605      	mov	r5, r0
 800d550:	68d8      	ldr	r0, [r3, #12]
 800d552:	b14c      	cbz	r4, 800d568 <__assert_func+0x24>
 800d554:	4b07      	ldr	r3, [pc, #28]	; (800d574 <__assert_func+0x30>)
 800d556:	9100      	str	r1, [sp, #0]
 800d558:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d55c:	4906      	ldr	r1, [pc, #24]	; (800d578 <__assert_func+0x34>)
 800d55e:	462b      	mov	r3, r5
 800d560:	f000 f81e 	bl	800d5a0 <fiprintf>
 800d564:	f000 f8e9 	bl	800d73a <abort>
 800d568:	4b04      	ldr	r3, [pc, #16]	; (800d57c <__assert_func+0x38>)
 800d56a:	461c      	mov	r4, r3
 800d56c:	e7f3      	b.n	800d556 <__assert_func+0x12>
 800d56e:	bf00      	nop
 800d570:	2000000c 	.word	0x2000000c
 800d574:	0800db9d 	.word	0x0800db9d
 800d578:	0800dbaa 	.word	0x0800dbaa
 800d57c:	0800dbd8 	.word	0x0800dbd8

0800d580 <_close_r>:
 800d580:	b538      	push	{r3, r4, r5, lr}
 800d582:	4d06      	ldr	r5, [pc, #24]	; (800d59c <_close_r+0x1c>)
 800d584:	2300      	movs	r3, #0
 800d586:	4604      	mov	r4, r0
 800d588:	4608      	mov	r0, r1
 800d58a:	602b      	str	r3, [r5, #0]
 800d58c:	f7f7 fa02 	bl	8004994 <_close>
 800d590:	1c43      	adds	r3, r0, #1
 800d592:	d102      	bne.n	800d59a <_close_r+0x1a>
 800d594:	682b      	ldr	r3, [r5, #0]
 800d596:	b103      	cbz	r3, 800d59a <_close_r+0x1a>
 800d598:	6023      	str	r3, [r4, #0]
 800d59a:	bd38      	pop	{r3, r4, r5, pc}
 800d59c:	20000c18 	.word	0x20000c18

0800d5a0 <fiprintf>:
 800d5a0:	b40e      	push	{r1, r2, r3}
 800d5a2:	b503      	push	{r0, r1, lr}
 800d5a4:	4601      	mov	r1, r0
 800d5a6:	ab03      	add	r3, sp, #12
 800d5a8:	4805      	ldr	r0, [pc, #20]	; (800d5c0 <fiprintf+0x20>)
 800d5aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5ae:	6800      	ldr	r0, [r0, #0]
 800d5b0:	9301      	str	r3, [sp, #4]
 800d5b2:	f7ff fe31 	bl	800d218 <_vfiprintf_r>
 800d5b6:	b002      	add	sp, #8
 800d5b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5bc:	b003      	add	sp, #12
 800d5be:	4770      	bx	lr
 800d5c0:	2000000c 	.word	0x2000000c

0800d5c4 <_fstat_r>:
 800d5c4:	b538      	push	{r3, r4, r5, lr}
 800d5c6:	4d07      	ldr	r5, [pc, #28]	; (800d5e4 <_fstat_r+0x20>)
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	4608      	mov	r0, r1
 800d5ce:	4611      	mov	r1, r2
 800d5d0:	602b      	str	r3, [r5, #0]
 800d5d2:	f7f7 f9eb 	bl	80049ac <_fstat>
 800d5d6:	1c43      	adds	r3, r0, #1
 800d5d8:	d102      	bne.n	800d5e0 <_fstat_r+0x1c>
 800d5da:	682b      	ldr	r3, [r5, #0]
 800d5dc:	b103      	cbz	r3, 800d5e0 <_fstat_r+0x1c>
 800d5de:	6023      	str	r3, [r4, #0]
 800d5e0:	bd38      	pop	{r3, r4, r5, pc}
 800d5e2:	bf00      	nop
 800d5e4:	20000c18 	.word	0x20000c18

0800d5e8 <_isatty_r>:
 800d5e8:	b538      	push	{r3, r4, r5, lr}
 800d5ea:	4d06      	ldr	r5, [pc, #24]	; (800d604 <_isatty_r+0x1c>)
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	4604      	mov	r4, r0
 800d5f0:	4608      	mov	r0, r1
 800d5f2:	602b      	str	r3, [r5, #0]
 800d5f4:	f7f7 f9ea 	bl	80049cc <_isatty>
 800d5f8:	1c43      	adds	r3, r0, #1
 800d5fa:	d102      	bne.n	800d602 <_isatty_r+0x1a>
 800d5fc:	682b      	ldr	r3, [r5, #0]
 800d5fe:	b103      	cbz	r3, 800d602 <_isatty_r+0x1a>
 800d600:	6023      	str	r3, [r4, #0]
 800d602:	bd38      	pop	{r3, r4, r5, pc}
 800d604:	20000c18 	.word	0x20000c18

0800d608 <_lseek_r>:
 800d608:	b538      	push	{r3, r4, r5, lr}
 800d60a:	4d07      	ldr	r5, [pc, #28]	; (800d628 <_lseek_r+0x20>)
 800d60c:	4604      	mov	r4, r0
 800d60e:	4608      	mov	r0, r1
 800d610:	4611      	mov	r1, r2
 800d612:	2200      	movs	r2, #0
 800d614:	602a      	str	r2, [r5, #0]
 800d616:	461a      	mov	r2, r3
 800d618:	f7f7 f9e3 	bl	80049e2 <_lseek>
 800d61c:	1c43      	adds	r3, r0, #1
 800d61e:	d102      	bne.n	800d626 <_lseek_r+0x1e>
 800d620:	682b      	ldr	r3, [r5, #0]
 800d622:	b103      	cbz	r3, 800d626 <_lseek_r+0x1e>
 800d624:	6023      	str	r3, [r4, #0]
 800d626:	bd38      	pop	{r3, r4, r5, pc}
 800d628:	20000c18 	.word	0x20000c18

0800d62c <__ascii_mbtowc>:
 800d62c:	b082      	sub	sp, #8
 800d62e:	b901      	cbnz	r1, 800d632 <__ascii_mbtowc+0x6>
 800d630:	a901      	add	r1, sp, #4
 800d632:	b142      	cbz	r2, 800d646 <__ascii_mbtowc+0x1a>
 800d634:	b14b      	cbz	r3, 800d64a <__ascii_mbtowc+0x1e>
 800d636:	7813      	ldrb	r3, [r2, #0]
 800d638:	600b      	str	r3, [r1, #0]
 800d63a:	7812      	ldrb	r2, [r2, #0]
 800d63c:	1e10      	subs	r0, r2, #0
 800d63e:	bf18      	it	ne
 800d640:	2001      	movne	r0, #1
 800d642:	b002      	add	sp, #8
 800d644:	4770      	bx	lr
 800d646:	4610      	mov	r0, r2
 800d648:	e7fb      	b.n	800d642 <__ascii_mbtowc+0x16>
 800d64a:	f06f 0001 	mvn.w	r0, #1
 800d64e:	e7f8      	b.n	800d642 <__ascii_mbtowc+0x16>

0800d650 <memmove>:
 800d650:	4288      	cmp	r0, r1
 800d652:	b510      	push	{r4, lr}
 800d654:	eb01 0402 	add.w	r4, r1, r2
 800d658:	d902      	bls.n	800d660 <memmove+0x10>
 800d65a:	4284      	cmp	r4, r0
 800d65c:	4623      	mov	r3, r4
 800d65e:	d807      	bhi.n	800d670 <memmove+0x20>
 800d660:	1e43      	subs	r3, r0, #1
 800d662:	42a1      	cmp	r1, r4
 800d664:	d008      	beq.n	800d678 <memmove+0x28>
 800d666:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d66a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d66e:	e7f8      	b.n	800d662 <memmove+0x12>
 800d670:	4402      	add	r2, r0
 800d672:	4601      	mov	r1, r0
 800d674:	428a      	cmp	r2, r1
 800d676:	d100      	bne.n	800d67a <memmove+0x2a>
 800d678:	bd10      	pop	{r4, pc}
 800d67a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d67e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d682:	e7f7      	b.n	800d674 <memmove+0x24>

0800d684 <__malloc_lock>:
 800d684:	4801      	ldr	r0, [pc, #4]	; (800d68c <__malloc_lock+0x8>)
 800d686:	f7fe bf4a 	b.w	800c51e <__retarget_lock_acquire_recursive>
 800d68a:	bf00      	nop
 800d68c:	20000c0c 	.word	0x20000c0c

0800d690 <__malloc_unlock>:
 800d690:	4801      	ldr	r0, [pc, #4]	; (800d698 <__malloc_unlock+0x8>)
 800d692:	f7fe bf45 	b.w	800c520 <__retarget_lock_release_recursive>
 800d696:	bf00      	nop
 800d698:	20000c0c 	.word	0x20000c0c

0800d69c <_realloc_r>:
 800d69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6a0:	4680      	mov	r8, r0
 800d6a2:	4614      	mov	r4, r2
 800d6a4:	460e      	mov	r6, r1
 800d6a6:	b921      	cbnz	r1, 800d6b2 <_realloc_r+0x16>
 800d6a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ac:	4611      	mov	r1, r2
 800d6ae:	f7ff bbb9 	b.w	800ce24 <_malloc_r>
 800d6b2:	b92a      	cbnz	r2, 800d6c0 <_realloc_r+0x24>
 800d6b4:	f7ff fb4a 	bl	800cd4c <_free_r>
 800d6b8:	4625      	mov	r5, r4
 800d6ba:	4628      	mov	r0, r5
 800d6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6c0:	f000 f842 	bl	800d748 <_malloc_usable_size_r>
 800d6c4:	4284      	cmp	r4, r0
 800d6c6:	4607      	mov	r7, r0
 800d6c8:	d802      	bhi.n	800d6d0 <_realloc_r+0x34>
 800d6ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d6ce:	d812      	bhi.n	800d6f6 <_realloc_r+0x5a>
 800d6d0:	4621      	mov	r1, r4
 800d6d2:	4640      	mov	r0, r8
 800d6d4:	f7ff fba6 	bl	800ce24 <_malloc_r>
 800d6d8:	4605      	mov	r5, r0
 800d6da:	2800      	cmp	r0, #0
 800d6dc:	d0ed      	beq.n	800d6ba <_realloc_r+0x1e>
 800d6de:	42bc      	cmp	r4, r7
 800d6e0:	4622      	mov	r2, r4
 800d6e2:	4631      	mov	r1, r6
 800d6e4:	bf28      	it	cs
 800d6e6:	463a      	movcs	r2, r7
 800d6e8:	f7fe ff88 	bl	800c5fc <memcpy>
 800d6ec:	4631      	mov	r1, r6
 800d6ee:	4640      	mov	r0, r8
 800d6f0:	f7ff fb2c 	bl	800cd4c <_free_r>
 800d6f4:	e7e1      	b.n	800d6ba <_realloc_r+0x1e>
 800d6f6:	4635      	mov	r5, r6
 800d6f8:	e7df      	b.n	800d6ba <_realloc_r+0x1e>
	...

0800d6fc <_read_r>:
 800d6fc:	b538      	push	{r3, r4, r5, lr}
 800d6fe:	4d07      	ldr	r5, [pc, #28]	; (800d71c <_read_r+0x20>)
 800d700:	4604      	mov	r4, r0
 800d702:	4608      	mov	r0, r1
 800d704:	4611      	mov	r1, r2
 800d706:	2200      	movs	r2, #0
 800d708:	602a      	str	r2, [r5, #0]
 800d70a:	461a      	mov	r2, r3
 800d70c:	f7f7 f904 	bl	8004918 <_read>
 800d710:	1c43      	adds	r3, r0, #1
 800d712:	d102      	bne.n	800d71a <_read_r+0x1e>
 800d714:	682b      	ldr	r3, [r5, #0]
 800d716:	b103      	cbz	r3, 800d71a <_read_r+0x1e>
 800d718:	6023      	str	r3, [r4, #0]
 800d71a:	bd38      	pop	{r3, r4, r5, pc}
 800d71c:	20000c18 	.word	0x20000c18

0800d720 <__ascii_wctomb>:
 800d720:	b149      	cbz	r1, 800d736 <__ascii_wctomb+0x16>
 800d722:	2aff      	cmp	r2, #255	; 0xff
 800d724:	bf85      	ittet	hi
 800d726:	238a      	movhi	r3, #138	; 0x8a
 800d728:	6003      	strhi	r3, [r0, #0]
 800d72a:	700a      	strbls	r2, [r1, #0]
 800d72c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d730:	bf98      	it	ls
 800d732:	2001      	movls	r0, #1
 800d734:	4770      	bx	lr
 800d736:	4608      	mov	r0, r1
 800d738:	4770      	bx	lr

0800d73a <abort>:
 800d73a:	b508      	push	{r3, lr}
 800d73c:	2006      	movs	r0, #6
 800d73e:	f000 f833 	bl	800d7a8 <raise>
 800d742:	2001      	movs	r0, #1
 800d744:	f7f7 f8de 	bl	8004904 <_exit>

0800d748 <_malloc_usable_size_r>:
 800d748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d74c:	1f18      	subs	r0, r3, #4
 800d74e:	2b00      	cmp	r3, #0
 800d750:	bfbc      	itt	lt
 800d752:	580b      	ldrlt	r3, [r1, r0]
 800d754:	18c0      	addlt	r0, r0, r3
 800d756:	4770      	bx	lr

0800d758 <_raise_r>:
 800d758:	291f      	cmp	r1, #31
 800d75a:	b538      	push	{r3, r4, r5, lr}
 800d75c:	4604      	mov	r4, r0
 800d75e:	460d      	mov	r5, r1
 800d760:	d904      	bls.n	800d76c <_raise_r+0x14>
 800d762:	2316      	movs	r3, #22
 800d764:	6003      	str	r3, [r0, #0]
 800d766:	f04f 30ff 	mov.w	r0, #4294967295
 800d76a:	bd38      	pop	{r3, r4, r5, pc}
 800d76c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d76e:	b112      	cbz	r2, 800d776 <_raise_r+0x1e>
 800d770:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d774:	b94b      	cbnz	r3, 800d78a <_raise_r+0x32>
 800d776:	4620      	mov	r0, r4
 800d778:	f000 f830 	bl	800d7dc <_getpid_r>
 800d77c:	462a      	mov	r2, r5
 800d77e:	4601      	mov	r1, r0
 800d780:	4620      	mov	r0, r4
 800d782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d786:	f000 b817 	b.w	800d7b8 <_kill_r>
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d00a      	beq.n	800d7a4 <_raise_r+0x4c>
 800d78e:	1c59      	adds	r1, r3, #1
 800d790:	d103      	bne.n	800d79a <_raise_r+0x42>
 800d792:	2316      	movs	r3, #22
 800d794:	6003      	str	r3, [r0, #0]
 800d796:	2001      	movs	r0, #1
 800d798:	e7e7      	b.n	800d76a <_raise_r+0x12>
 800d79a:	2400      	movs	r4, #0
 800d79c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	4798      	blx	r3
 800d7a4:	2000      	movs	r0, #0
 800d7a6:	e7e0      	b.n	800d76a <_raise_r+0x12>

0800d7a8 <raise>:
 800d7a8:	4b02      	ldr	r3, [pc, #8]	; (800d7b4 <raise+0xc>)
 800d7aa:	4601      	mov	r1, r0
 800d7ac:	6818      	ldr	r0, [r3, #0]
 800d7ae:	f7ff bfd3 	b.w	800d758 <_raise_r>
 800d7b2:	bf00      	nop
 800d7b4:	2000000c 	.word	0x2000000c

0800d7b8 <_kill_r>:
 800d7b8:	b538      	push	{r3, r4, r5, lr}
 800d7ba:	4d07      	ldr	r5, [pc, #28]	; (800d7d8 <_kill_r+0x20>)
 800d7bc:	2300      	movs	r3, #0
 800d7be:	4604      	mov	r4, r0
 800d7c0:	4608      	mov	r0, r1
 800d7c2:	4611      	mov	r1, r2
 800d7c4:	602b      	str	r3, [r5, #0]
 800d7c6:	f7f7 f88d 	bl	80048e4 <_kill>
 800d7ca:	1c43      	adds	r3, r0, #1
 800d7cc:	d102      	bne.n	800d7d4 <_kill_r+0x1c>
 800d7ce:	682b      	ldr	r3, [r5, #0]
 800d7d0:	b103      	cbz	r3, 800d7d4 <_kill_r+0x1c>
 800d7d2:	6023      	str	r3, [r4, #0]
 800d7d4:	bd38      	pop	{r3, r4, r5, pc}
 800d7d6:	bf00      	nop
 800d7d8:	20000c18 	.word	0x20000c18

0800d7dc <_getpid_r>:
 800d7dc:	f7f7 b87a 	b.w	80048d4 <_getpid>

0800d7e0 <_init>:
 800d7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7e2:	bf00      	nop
 800d7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7e6:	bc08      	pop	{r3}
 800d7e8:	469e      	mov	lr, r3
 800d7ea:	4770      	bx	lr

0800d7ec <_fini>:
 800d7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ee:	bf00      	nop
 800d7f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7f2:	bc08      	pop	{r3}
 800d7f4:	469e      	mov	lr, r3
 800d7f6:	4770      	bx	lr
