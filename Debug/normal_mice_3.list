
normal_mice_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800abb8  0800abb8  0001abb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b02c  0800b02c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b02c  0800b02c  0001b02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b034  0800b034  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b034  0800b034  0001b034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b038  0800b038  0001b038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b03c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000894  200001dc  0800b218  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a70  0800b218  00020a70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017fa4  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003990  00000000  00000000  000381b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001620  00000000  00000000  0003bb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001478  00000000  00000000  0003d160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002531d  00000000  00000000  0003e5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae46  00000000  00000000  000638f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de000  00000000  00000000  0007e73b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015c73b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c8c  00000000  00000000  0015c78c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aba0 	.word	0x0800aba0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800aba0 	.word	0x0800aba0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <lcd_cmd>:
#include "PL_lcd.h"
#include "i2c.h"


void lcd_cmd(uint8_t x)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  uint8_t aTxBuffer[2] = { 0x00, x };
 8000f56:	2300      	movs	r3, #0
 8000f58:	733b      	strb	r3, [r7, #12]
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 8000f5e:	e007      	b.n	8000f70 <lcd_cmd+0x24>
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <lcd_cmd+0x48>)
 8000f62:	f004 f977 	bl	8005254 <HAL_I2C_GetError>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b04      	cmp	r3, #4
 8000f6a:	d001      	beq.n	8000f70 <lcd_cmd+0x24>
    {
      Error_Handler();
 8000f6c:	f001 fba5 	bl	80026ba <Error_Handler>
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 8000f70:	f107 020c 	add.w	r2, r7, #12
 8000f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	217c      	movs	r1, #124	; 0x7c
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <lcd_cmd+0x48>)
 8000f80:	f004 f874 	bl	800506c <HAL_I2C_Master_Transmit>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1ea      	bne.n	8000f60 <lcd_cmd+0x14>
    }
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000858 	.word	0x20000858

08000f98 <lcd_data>:

void lcd_data(uint8_t x)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  uint8_t aTxBuffer[2] = { 0x40, x };
 8000fa2:	2340      	movs	r3, #64	; 0x40
 8000fa4:	733b      	strb	r3, [r7, #12]
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 8000faa:	e007      	b.n	8000fbc <lcd_data+0x24>
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000fac:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <lcd_data+0x48>)
 8000fae:	f004 f951 	bl	8005254 <HAL_I2C_GetError>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	d001      	beq.n	8000fbc <lcd_data+0x24>
    {
      Error_Handler();
 8000fb8:	f001 fb7f 	bl	80026ba <Error_Handler>
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 8000fbc:	f107 020c 	add.w	r2, r7, #12
 8000fc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	217c      	movs	r1, #124	; 0x7c
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <lcd_data+0x48>)
 8000fcc:	f004 f84e 	bl	800506c <HAL_I2C_Master_Transmit>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1ea      	bne.n	8000fac <lcd_data+0x14>
    }
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000858 	.word	0x20000858

08000fe4 <pl_lcd_puts>:

void pl_lcd_puts(const char *s)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  while(*s) lcd_data(*s++);
 8000fec:	e006      	b.n	8000ffc <pl_lcd_puts+0x18>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	607a      	str	r2, [r7, #4]
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ffce 	bl	8000f98 <lcd_data>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1f4      	bne.n	8000fee <pl_lcd_puts+0xa>
}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <pl_lcd_init>:

// param:
//  contrast: 0 ~ 63 (最初は大きくして調整)
void pl_lcd_init(void)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	af00      	add	r7, sp, #0
  // LCD initialize(裏面に記載)
  lcd_cmd(0x38); // function set
 8001012:	2038      	movs	r0, #56	; 0x38
 8001014:	f7ff ff9a 	bl	8000f4c <lcd_cmd>
  lcd_cmd(0x39); // function set
 8001018:	2039      	movs	r0, #57	; 0x39
 800101a:	f7ff ff97 	bl	8000f4c <lcd_cmd>
  lcd_cmd(0x14); // interval osc
 800101e:	2014      	movs	r0, #20
 8001020:	f7ff ff94 	bl	8000f4c <lcd_cmd>
  lcd_cmd(0x70); // contrast low
 8001024:	2070      	movs	r0, #112	; 0x70
 8001026:	f7ff ff91 	bl	8000f4c <lcd_cmd>
  lcd_cmd(0x56); // contrast high / icon / power
 800102a:	2056      	movs	r0, #86	; 0x56
 800102c:	f7ff ff8e 	bl	8000f4c <lcd_cmd>
  lcd_cmd(0x6c); // follower control
 8001030:	206c      	movs	r0, #108	; 0x6c
 8001032:	f7ff ff8b 	bl	8000f4c <lcd_cmd>
  HAL_Delay(300);
 8001036:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800103a:	f002 f84f 	bl	80030dc <HAL_Delay>
  lcd_cmd(0x38); // function set
 800103e:	2038      	movs	r0, #56	; 0x38
 8001040:	f7ff ff84 	bl	8000f4c <lcd_cmd>
  lcd_cmd(0x0c); // display on
 8001044:	200c      	movs	r0, #12
 8001046:	f7ff ff81 	bl	8000f4c <lcd_cmd>
  lcd_cmd(0x01); // clear display
 800104a:	2001      	movs	r0, #1
 800104c:	f7ff ff7e 	bl	8000f4c <lcd_cmd>
  HAL_Delay(2);
 8001050:	2002      	movs	r0, #2
 8001052:	f002 f843 	bl	80030dc <HAL_Delay>
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}

0800105a <pl_lcd_pos>:

void pl_lcd_move(uint8_t pos){
  lcd_cmd(0x80 | pos);
}

void pl_lcd_pos(uint8_t raw, uint8_t col) {
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	460a      	mov	r2, r1
 8001064:	71fb      	strb	r3, [r7, #7]
 8001066:	4613      	mov	r3, r2
 8001068:	71bb      	strb	r3, [r7, #6]
  lcd_cmd(0x80 | ((raw & 0x01) << 6) | col);
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	019b      	lsls	r3, r3, #6
 800106e:	b2db      	uxtb	r3, r3
 8001070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001074:	b2da      	uxtb	r2, r3
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	4313      	orrs	r3, r2
 800107a:	b2db      	uxtb	r3, r3
 800107c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001080:	b2db      	uxtb	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff62 	bl	8000f4c <lcd_cmd>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <pl_lcd_clear>:

void pl_lcd_clear() {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  lcd_cmd(0x01);
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff ff59 	bl	8000f4c <lcd_cmd>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 80010a6:	4866      	ldr	r0, [pc, #408]	; (8001240 <pl_callback_getSensor+0x1a0>)
 80010a8:	f002 fc1e 	bl	80038e8 <HAL_ADC_Stop_DMA>
	switch (AD_step) {
 80010ac:	4b65      	ldr	r3, [pc, #404]	; (8001244 <pl_callback_getSensor+0x1a4>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d044      	beq.n	800113e <pl_callback_getSensor+0x9e>
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	dc68      	bgt.n	800118a <pl_callback_getSensor+0xea>
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d002      	beq.n	80010c2 <pl_callback_getSensor+0x22>
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d017      	beq.n	80010f0 <pl_callback_getSensor+0x50>
 80010c0:	e063      	b.n	800118a <pl_callback_getSensor+0xea>
		case 0:
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c8:	485f      	ldr	r0, [pc, #380]	; (8001248 <pl_callback_getSensor+0x1a8>)
 80010ca:	f003 ff27 	bl	8004f1c <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d4:	485c      	ldr	r0, [pc, #368]	; (8001248 <pl_callback_getSensor+0x1a8>)
 80010d6:	f003 ff21 	bl	8004f1c <HAL_GPIO_WritePin>
					for (j = 0; j <= 500; j++) {
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	e002      	b.n	80010e6 <pl_callback_getSensor+0x46>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3301      	adds	r3, #1
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010ec:	ddf8      	ble.n	80010e0 <pl_callback_getSensor+0x40>
					}
			break;
 80010ee:	e04c      	b.n	800118a <pl_callback_getSensor+0xea>
		case 1:
			g_sensor_on[0] = g_ADCBuffer[1];
 80010f0:	4b56      	ldr	r3, [pc, #344]	; (800124c <pl_callback_getSensor+0x1ac>)
 80010f2:	885a      	ldrh	r2, [r3, #2]
 80010f4:	4b56      	ldr	r3, [pc, #344]	; (8001250 <pl_callback_getSensor+0x1b0>)
 80010f6:	801a      	strh	r2, [r3, #0]
			g_sensor_on[1] = g_ADCBuffer[2];
 80010f8:	4b54      	ldr	r3, [pc, #336]	; (800124c <pl_callback_getSensor+0x1ac>)
 80010fa:	889a      	ldrh	r2, [r3, #4]
 80010fc:	4b54      	ldr	r3, [pc, #336]	; (8001250 <pl_callback_getSensor+0x1b0>)
 80010fe:	805a      	strh	r2, [r3, #2]
			g_sensor_off[2] = g_ADCBuffer[3];
 8001100:	4b52      	ldr	r3, [pc, #328]	; (800124c <pl_callback_getSensor+0x1ac>)
 8001102:	88da      	ldrh	r2, [r3, #6]
 8001104:	4b53      	ldr	r3, [pc, #332]	; (8001254 <pl_callback_getSensor+0x1b4>)
 8001106:	809a      	strh	r2, [r3, #4]
			g_sensor_off[3] = g_ADCBuffer[4];
 8001108:	4b50      	ldr	r3, [pc, #320]	; (800124c <pl_callback_getSensor+0x1ac>)
 800110a:	891a      	ldrh	r2, [r3, #8]
 800110c:	4b51      	ldr	r3, [pc, #324]	; (8001254 <pl_callback_getSensor+0x1b4>)
 800110e:	80da      	strh	r2, [r3, #6]
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001116:	484c      	ldr	r0, [pc, #304]	; (8001248 <pl_callback_getSensor+0x1a8>)
 8001118:	f003 ff00 	bl	8004f1c <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001122:	4849      	ldr	r0, [pc, #292]	; (8001248 <pl_callback_getSensor+0x1a8>)
 8001124:	f003 fefa 	bl	8004f1c <HAL_GPIO_WritePin>
					for (j = 0; j <= 500; j++) {
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	e002      	b.n	8001134 <pl_callback_getSensor+0x94>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3301      	adds	r3, #1
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800113a:	ddf8      	ble.n	800112e <pl_callback_getSensor+0x8e>
					}
			break;
 800113c:	e025      	b.n	800118a <pl_callback_getSensor+0xea>
		case 2:
			g_sensor_off[0] = g_ADCBuffer[1];
 800113e:	4b43      	ldr	r3, [pc, #268]	; (800124c <pl_callback_getSensor+0x1ac>)
 8001140:	885a      	ldrh	r2, [r3, #2]
 8001142:	4b44      	ldr	r3, [pc, #272]	; (8001254 <pl_callback_getSensor+0x1b4>)
 8001144:	801a      	strh	r2, [r3, #0]
			g_sensor_off[1] = g_ADCBuffer[2];
 8001146:	4b41      	ldr	r3, [pc, #260]	; (800124c <pl_callback_getSensor+0x1ac>)
 8001148:	889a      	ldrh	r2, [r3, #4]
 800114a:	4b42      	ldr	r3, [pc, #264]	; (8001254 <pl_callback_getSensor+0x1b4>)
 800114c:	805a      	strh	r2, [r3, #2]
			g_sensor_on[2] = g_ADCBuffer[3];
 800114e:	4b3f      	ldr	r3, [pc, #252]	; (800124c <pl_callback_getSensor+0x1ac>)
 8001150:	88da      	ldrh	r2, [r3, #6]
 8001152:	4b3f      	ldr	r3, [pc, #252]	; (8001250 <pl_callback_getSensor+0x1b0>)
 8001154:	809a      	strh	r2, [r3, #4]
			g_sensor_on[3] = g_ADCBuffer[4];
 8001156:	4b3d      	ldr	r3, [pc, #244]	; (800124c <pl_callback_getSensor+0x1ac>)
 8001158:	891a      	ldrh	r2, [r3, #8]
 800115a:	4b3d      	ldr	r3, [pc, #244]	; (8001250 <pl_callback_getSensor+0x1b0>)
 800115c:	80da      	strh	r2, [r3, #6]
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001164:	4838      	ldr	r0, [pc, #224]	; (8001248 <pl_callback_getSensor+0x1a8>)
 8001166:	f003 fed9 	bl	8004f1c <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001170:	4835      	ldr	r0, [pc, #212]	; (8001248 <pl_callback_getSensor+0x1a8>)
 8001172:	f003 fed3 	bl	8004f1c <HAL_GPIO_WritePin>
					for (j = 0; j <= 10; j++) {
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	e002      	b.n	8001182 <pl_callback_getSensor+0xe2>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3301      	adds	r3, #1
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b0a      	cmp	r3, #10
 8001186:	ddf9      	ble.n	800117c <pl_callback_getSensor+0xdc>
					}
			break;
 8001188:	bf00      	nop
	}
	V_battAD = g_ADCBuffer[0];
 800118a:	4b30      	ldr	r3, [pc, #192]	; (800124c <pl_callback_getSensor+0x1ac>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 1023 * (100.0 + 47.0) / 47.0;
 8001190:	887b      	ldrh	r3, [r7, #2]
 8001192:	ee07 3a90 	vmov	s15, r3
 8001196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800119a:	ee17 0a90 	vmov	r0, s15
 800119e:	f7ff f9d3 	bl	8000548 <__aeabi_f2d>
 80011a2:	a321      	add	r3, pc, #132	; (adr r3, 8001228 <pl_callback_getSensor+0x188>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff fa26 	bl	80005f8 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	a31e      	add	r3, pc, #120	; (adr r3, 8001230 <pl_callback_getSensor+0x190>)
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	f7ff fb47 	bl	800084c <__aeabi_ddiv>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	a31c      	add	r3, pc, #112	; (adr r3, 8001238 <pl_callback_getSensor+0x198>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f7ff fa14 	bl	80005f8 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <pl_callback_getSensor+0x1b8>)
 80011de:	f7ff fb35 	bl	800084c <__aeabi_ddiv>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f7ff fcdd 	bl	8000ba8 <__aeabi_d2f>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4a1a      	ldr	r2, [pc, #104]	; (800125c <pl_callback_getSensor+0x1bc>)
 80011f2:	6013      	str	r3, [r2, #0]
		AD_step++;
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <pl_callback_getSensor+0x1a4>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <pl_callback_getSensor+0x1a4>)
 80011fe:	701a      	strb	r2, [r3, #0]

		if (AD_step != 3) {
 8001200:	4b10      	ldr	r3, [pc, #64]	; (8001244 <pl_callback_getSensor+0x1a4>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b03      	cmp	r3, #3
 8001206:	d005      	beq.n	8001214 <pl_callback_getSensor+0x174>
			HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
 8001208:	2205      	movs	r2, #5
 800120a:	4910      	ldr	r1, [pc, #64]	; (800124c <pl_callback_getSensor+0x1ac>)
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <pl_callback_getSensor+0x1a0>)
 800120e:	f002 fae7 	bl	80037e0 <HAL_ADC_Start_DMA>
		} else {
			AD_step = 0;

		}

}
 8001212:	e002      	b.n	800121a <pl_callback_getSensor+0x17a>
			AD_step = 0;
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <pl_callback_getSensor+0x1a4>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	f3af 8000 	nop.w
 8001228:	66666666 	.word	0x66666666
 800122c:	400a6666 	.word	0x400a6666
 8001230:	00000000 	.word	0x00000000
 8001234:	408ff800 	.word	0x408ff800
 8001238:	00000000 	.word	0x00000000
 800123c:	40626000 	.word	0x40626000
 8001240:	200007ac 	.word	0x200007ac
 8001244:	20000202 	.word	0x20000202
 8001248:	48000800 	.word	0x48000800
 800124c:	200001f8 	.word	0x200001f8
 8001250:	20000204 	.word	0x20000204
 8001254:	2000020c 	.word	0x2000020c
 8001258:	40478000 	.word	0x40478000
 800125c:	20000214 	.word	0x20000214

08001260 <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	if (sensor_mode == 1) {
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <pl_interupt_getSensor+0x1c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d104      	bne.n	8001276 <pl_interupt_getSensor+0x16>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
 800126c:	2205      	movs	r2, #5
 800126e:	4904      	ldr	r1, [pc, #16]	; (8001280 <pl_interupt_getSensor+0x20>)
 8001270:	4804      	ldr	r0, [pc, #16]	; (8001284 <pl_interupt_getSensor+0x24>)
 8001272:	f002 fab5 	bl	80037e0 <HAL_ADC_Start_DMA>
				sizeof(g_ADCBuffer) / sizeof(uint16_t));
	}

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000203 	.word	0x20000203
 8001280:	200001f8 	.word	0x200001f8
 8001284:	200007ac 	.word	0x200007ac

08001288 <pl_speaker_init>:
/*	スピーカーの初期化					(pl_speaker_init)	*/
/*******************************************************************/
/*	スピーカーの初期化する。						*/
/*******************************************************************/
void pl_speaker_init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0

	  HAL_TIM_Base_Start_IT(&htim15);//speaker
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <pl_speaker_init+0x1c>)
 800128e:	f005 fbc3 	bl	8006a18 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim15);//speaker
 8001292:	4804      	ldr	r0, [pc, #16]	; (80012a4 <pl_speaker_init+0x1c>)
 8001294:	f001 fcfe 	bl	8002c94 <HAL_TIM_PWM_MspInit>

	  inputseria();
 8001298:	f000 f850 	bl	800133c <inputseria>
	  inputZelda_nazo();
 800129c:	f000 f804 	bl	80012a8 <inputZelda_nazo>


}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	2000098c 	.word	0x2000098c

080012a8 <inputZelda_nazo>:
/*******************************************************************/
/*	音楽用構造体配列の入力					(input)	*/
/*******************************************************************/
/*	音楽用の構造体を定義してる．						*/
/*******************************************************************/
void inputZelda_nazo(void) {
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
	Zelda_nazo[0].interval = 1480;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <inputZelda_nazo+0x70>)
 80012ae:	4a1b      	ldr	r2, [pc, #108]	; (800131c <inputZelda_nazo+0x74>)
 80012b0:	601a      	str	r2, [r3, #0]
	Zelda_nazo[0].waittime = 19 * 7;
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <inputZelda_nazo+0x70>)
 80012b4:	2285      	movs	r2, #133	; 0x85
 80012b6:	809a      	strh	r2, [r3, #4]
	Zelda_nazo[1].interval = 1397;
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <inputZelda_nazo+0x70>)
 80012ba:	4a19      	ldr	r2, [pc, #100]	; (8001320 <inputZelda_nazo+0x78>)
 80012bc:	609a      	str	r2, [r3, #8]
	Zelda_nazo[1].waittime = 19 * 7;
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <inputZelda_nazo+0x70>)
 80012c0:	2285      	movs	r2, #133	; 0x85
 80012c2:	819a      	strh	r2, [r3, #12]
	Zelda_nazo[2].interval = 1175;
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <inputZelda_nazo+0x70>)
 80012c6:	4a17      	ldr	r2, [pc, #92]	; (8001324 <inputZelda_nazo+0x7c>)
 80012c8:	611a      	str	r2, [r3, #16]
	Zelda_nazo[2].waittime = 19 * 7;
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <inputZelda_nazo+0x70>)
 80012cc:	2285      	movs	r2, #133	; 0x85
 80012ce:	829a      	strh	r2, [r3, #20]
	Zelda_nazo[3].interval = 831;
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <inputZelda_nazo+0x70>)
 80012d2:	4a15      	ldr	r2, [pc, #84]	; (8001328 <inputZelda_nazo+0x80>)
 80012d4:	619a      	str	r2, [r3, #24]
	Zelda_nazo[3].waittime = 19 * 7;
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <inputZelda_nazo+0x70>)
 80012d8:	2285      	movs	r2, #133	; 0x85
 80012da:	839a      	strh	r2, [r3, #28]
	Zelda_nazo[4].interval = 784;
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <inputZelda_nazo+0x70>)
 80012de:	4a13      	ldr	r2, [pc, #76]	; (800132c <inputZelda_nazo+0x84>)
 80012e0:	621a      	str	r2, [r3, #32]
	Zelda_nazo[4].waittime = 19 * 7;
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <inputZelda_nazo+0x70>)
 80012e4:	2285      	movs	r2, #133	; 0x85
 80012e6:	849a      	strh	r2, [r3, #36]	; 0x24
	Zelda_nazo[5].interval = 1245;
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <inputZelda_nazo+0x70>)
 80012ea:	4a11      	ldr	r2, [pc, #68]	; (8001330 <inputZelda_nazo+0x88>)
 80012ec:	629a      	str	r2, [r3, #40]	; 0x28
	Zelda_nazo[5].waittime = 19 * 7;
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <inputZelda_nazo+0x70>)
 80012f0:	2285      	movs	r2, #133	; 0x85
 80012f2:	859a      	strh	r2, [r3, #44]	; 0x2c
	Zelda_nazo[6].interval = 1568;
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <inputZelda_nazo+0x70>)
 80012f6:	4a0f      	ldr	r2, [pc, #60]	; (8001334 <inputZelda_nazo+0x8c>)
 80012f8:	631a      	str	r2, [r3, #48]	; 0x30
	Zelda_nazo[6].waittime = 19 * 7;
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <inputZelda_nazo+0x70>)
 80012fc:	2285      	movs	r2, #133	; 0x85
 80012fe:	869a      	strh	r2, [r3, #52]	; 0x34
	Zelda_nazo[7].interval = 1976;
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <inputZelda_nazo+0x70>)
 8001302:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <inputZelda_nazo+0x90>)
 8001304:	639a      	str	r2, [r3, #56]	; 0x38
	Zelda_nazo[7].waittime = 99 * 7;
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <inputZelda_nazo+0x70>)
 8001308:	f240 22b5 	movw	r2, #693	; 0x2b5
 800130c:	879a      	strh	r2, [r3, #60]	; 0x3c

}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	20000768 	.word	0x20000768
 800131c:	44b90000 	.word	0x44b90000
 8001320:	44aea000 	.word	0x44aea000
 8001324:	4492e000 	.word	0x4492e000
 8001328:	444fc000 	.word	0x444fc000
 800132c:	44440000 	.word	0x44440000
 8001330:	449ba000 	.word	0x449ba000
 8001334:	44c40000 	.word	0x44c40000
 8001338:	44f70000 	.word	0x44f70000

0800133c <inputseria>:


void inputseria(void) {
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
	seria[0].interval = 698;
 8001340:	4bad      	ldr	r3, [pc, #692]	; (80015f8 <inputseria+0x2bc>)
 8001342:	4aae      	ldr	r2, [pc, #696]	; (80015fc <inputseria+0x2c0>)
 8001344:	601a      	str	r2, [r3, #0]
	seria[0].waittime = 224;
 8001346:	4bac      	ldr	r3, [pc, #688]	; (80015f8 <inputseria+0x2bc>)
 8001348:	22e0      	movs	r2, #224	; 0xe0
 800134a:	809a      	strh	r2, [r3, #4]
	seria[1].interval = 880;
 800134c:	4baa      	ldr	r3, [pc, #680]	; (80015f8 <inputseria+0x2bc>)
 800134e:	4aac      	ldr	r2, [pc, #688]	; (8001600 <inputseria+0x2c4>)
 8001350:	609a      	str	r2, [r3, #8]
	seria[1].waittime = 224;
 8001352:	4ba9      	ldr	r3, [pc, #676]	; (80015f8 <inputseria+0x2bc>)
 8001354:	22e0      	movs	r2, #224	; 0xe0
 8001356:	819a      	strh	r2, [r3, #12]
	seria[2].interval = 988;
 8001358:	4ba7      	ldr	r3, [pc, #668]	; (80015f8 <inputseria+0x2bc>)
 800135a:	4aaa      	ldr	r2, [pc, #680]	; (8001604 <inputseria+0x2c8>)
 800135c:	611a      	str	r2, [r3, #16]
	seria[2].waittime = 462;
 800135e:	4ba6      	ldr	r3, [pc, #664]	; (80015f8 <inputseria+0x2bc>)
 8001360:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001364:	829a      	strh	r2, [r3, #20]
	seria[3].interval = 698;
 8001366:	4ba4      	ldr	r3, [pc, #656]	; (80015f8 <inputseria+0x2bc>)
 8001368:	4aa4      	ldr	r2, [pc, #656]	; (80015fc <inputseria+0x2c0>)
 800136a:	619a      	str	r2, [r3, #24]
	seria[3].waittime = 224;
 800136c:	4ba2      	ldr	r3, [pc, #648]	; (80015f8 <inputseria+0x2bc>)
 800136e:	22e0      	movs	r2, #224	; 0xe0
 8001370:	839a      	strh	r2, [r3, #28]
	seria[4].interval = 880;
 8001372:	4ba1      	ldr	r3, [pc, #644]	; (80015f8 <inputseria+0x2bc>)
 8001374:	4aa2      	ldr	r2, [pc, #648]	; (8001600 <inputseria+0x2c4>)
 8001376:	621a      	str	r2, [r3, #32]
	seria[4].waittime = 224;
 8001378:	4b9f      	ldr	r3, [pc, #636]	; (80015f8 <inputseria+0x2bc>)
 800137a:	22e0      	movs	r2, #224	; 0xe0
 800137c:	849a      	strh	r2, [r3, #36]	; 0x24
	seria[5].interval = 988;
 800137e:	4b9e      	ldr	r3, [pc, #632]	; (80015f8 <inputseria+0x2bc>)
 8001380:	4aa0      	ldr	r2, [pc, #640]	; (8001604 <inputseria+0x2c8>)
 8001382:	629a      	str	r2, [r3, #40]	; 0x28
	seria[5].waittime = 462;
 8001384:	4b9c      	ldr	r3, [pc, #624]	; (80015f8 <inputseria+0x2bc>)
 8001386:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800138a:	859a      	strh	r2, [r3, #44]	; 0x2c
	seria[6].interval = 698;
 800138c:	4b9a      	ldr	r3, [pc, #616]	; (80015f8 <inputseria+0x2bc>)
 800138e:	4a9b      	ldr	r2, [pc, #620]	; (80015fc <inputseria+0x2c0>)
 8001390:	631a      	str	r2, [r3, #48]	; 0x30
	seria[6].waittime = 224;
 8001392:	4b99      	ldr	r3, [pc, #612]	; (80015f8 <inputseria+0x2bc>)
 8001394:	22e0      	movs	r2, #224	; 0xe0
 8001396:	869a      	strh	r2, [r3, #52]	; 0x34
	seria[7].interval = 880;
 8001398:	4b97      	ldr	r3, [pc, #604]	; (80015f8 <inputseria+0x2bc>)
 800139a:	4a99      	ldr	r2, [pc, #612]	; (8001600 <inputseria+0x2c4>)
 800139c:	639a      	str	r2, [r3, #56]	; 0x38
	seria[7].waittime = 224;
 800139e:	4b96      	ldr	r3, [pc, #600]	; (80015f8 <inputseria+0x2bc>)
 80013a0:	22e0      	movs	r2, #224	; 0xe0
 80013a2:	879a      	strh	r2, [r3, #60]	; 0x3c
	seria[8].interval = 988;
 80013a4:	4b94      	ldr	r3, [pc, #592]	; (80015f8 <inputseria+0x2bc>)
 80013a6:	4a97      	ldr	r2, [pc, #604]	; (8001604 <inputseria+0x2c8>)
 80013a8:	641a      	str	r2, [r3, #64]	; 0x40
	seria[8].waittime = 224;
 80013aa:	4b93      	ldr	r3, [pc, #588]	; (80015f8 <inputseria+0x2bc>)
 80013ac:	22e0      	movs	r2, #224	; 0xe0
 80013ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	seria[9].interval = 1319;
 80013b2:	4b91      	ldr	r3, [pc, #580]	; (80015f8 <inputseria+0x2bc>)
 80013b4:	4a94      	ldr	r2, [pc, #592]	; (8001608 <inputseria+0x2cc>)
 80013b6:	649a      	str	r2, [r3, #72]	; 0x48
	seria[9].waittime = 224;
 80013b8:	4b8f      	ldr	r3, [pc, #572]	; (80015f8 <inputseria+0x2bc>)
 80013ba:	22e0      	movs	r2, #224	; 0xe0
 80013bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	seria[10].interval = 1175;
 80013c0:	4b8d      	ldr	r3, [pc, #564]	; (80015f8 <inputseria+0x2bc>)
 80013c2:	4a92      	ldr	r2, [pc, #584]	; (800160c <inputseria+0x2d0>)
 80013c4:	651a      	str	r2, [r3, #80]	; 0x50
	seria[10].waittime = 462;
 80013c6:	4b8c      	ldr	r3, [pc, #560]	; (80015f8 <inputseria+0x2bc>)
 80013c8:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80013cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	seria[11].interval = 988;
 80013d0:	4b89      	ldr	r3, [pc, #548]	; (80015f8 <inputseria+0x2bc>)
 80013d2:	4a8c      	ldr	r2, [pc, #560]	; (8001604 <inputseria+0x2c8>)
 80013d4:	659a      	str	r2, [r3, #88]	; 0x58
	seria[11].waittime = 224;
 80013d6:	4b88      	ldr	r3, [pc, #544]	; (80015f8 <inputseria+0x2bc>)
 80013d8:	22e0      	movs	r2, #224	; 0xe0
 80013da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	seria[12].interval = 1047;
 80013de:	4b86      	ldr	r3, [pc, #536]	; (80015f8 <inputseria+0x2bc>)
 80013e0:	4a8b      	ldr	r2, [pc, #556]	; (8001610 <inputseria+0x2d4>)
 80013e2:	661a      	str	r2, [r3, #96]	; 0x60
	seria[12].waittime = 224;
 80013e4:	4b84      	ldr	r3, [pc, #528]	; (80015f8 <inputseria+0x2bc>)
 80013e6:	22e0      	movs	r2, #224	; 0xe0
 80013e8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	seria[13].interval = 988;
 80013ec:	4b82      	ldr	r3, [pc, #520]	; (80015f8 <inputseria+0x2bc>)
 80013ee:	4a85      	ldr	r2, [pc, #532]	; (8001604 <inputseria+0x2c8>)
 80013f0:	669a      	str	r2, [r3, #104]	; 0x68
	seria[13].waittime = 224;
 80013f2:	4b81      	ldr	r3, [pc, #516]	; (80015f8 <inputseria+0x2bc>)
 80013f4:	22e0      	movs	r2, #224	; 0xe0
 80013f6:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	seria[14].interval = 784;
 80013fa:	4b7f      	ldr	r3, [pc, #508]	; (80015f8 <inputseria+0x2bc>)
 80013fc:	4a85      	ldr	r2, [pc, #532]	; (8001614 <inputseria+0x2d8>)
 80013fe:	671a      	str	r2, [r3, #112]	; 0x70
	seria[14].waittime = 224;
 8001400:	4b7d      	ldr	r3, [pc, #500]	; (80015f8 <inputseria+0x2bc>)
 8001402:	22e0      	movs	r2, #224	; 0xe0
 8001404:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	seria[15].interval = 659;
 8001408:	4b7b      	ldr	r3, [pc, #492]	; (80015f8 <inputseria+0x2bc>)
 800140a:	4a83      	ldr	r2, [pc, #524]	; (8001618 <inputseria+0x2dc>)
 800140c:	679a      	str	r2, [r3, #120]	; 0x78
	seria[15].waittime = 1169;
 800140e:	4b7a      	ldr	r3, [pc, #488]	; (80015f8 <inputseria+0x2bc>)
 8001410:	f240 4291 	movw	r2, #1169	; 0x491
 8001414:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	seria[16].interval = 587;
 8001418:	4b77      	ldr	r3, [pc, #476]	; (80015f8 <inputseria+0x2bc>)
 800141a:	4a80      	ldr	r2, [pc, #512]	; (800161c <inputseria+0x2e0>)
 800141c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	seria[16].waittime = 224;
 8001420:	4b75      	ldr	r3, [pc, #468]	; (80015f8 <inputseria+0x2bc>)
 8001422:	22e0      	movs	r2, #224	; 0xe0
 8001424:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	seria[17].interval = 659;
 8001428:	4b73      	ldr	r3, [pc, #460]	; (80015f8 <inputseria+0x2bc>)
 800142a:	4a7b      	ldr	r2, [pc, #492]	; (8001618 <inputseria+0x2dc>)
 800142c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	seria[17].waittime = 224;
 8001430:	4b71      	ldr	r3, [pc, #452]	; (80015f8 <inputseria+0x2bc>)
 8001432:	22e0      	movs	r2, #224	; 0xe0
 8001434:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	seria[18].interval = 784;
 8001438:	4b6f      	ldr	r3, [pc, #444]	; (80015f8 <inputseria+0x2bc>)
 800143a:	4a76      	ldr	r2, [pc, #472]	; (8001614 <inputseria+0x2d8>)
 800143c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	seria[18].waittime = 224;
 8001440:	4b6d      	ldr	r3, [pc, #436]	; (80015f8 <inputseria+0x2bc>)
 8001442:	22e0      	movs	r2, #224	; 0xe0
 8001444:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	seria[19].interval = 659;
 8001448:	4b6b      	ldr	r3, [pc, #428]	; (80015f8 <inputseria+0x2bc>)
 800144a:	4a73      	ldr	r2, [pc, #460]	; (8001618 <inputseria+0x2dc>)
 800144c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	seria[19].waittime = 1400;
 8001450:	4b69      	ldr	r3, [pc, #420]	; (80015f8 <inputseria+0x2bc>)
 8001452:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8001456:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	seria[20].interval = 698;
 800145a:	4b67      	ldr	r3, [pc, #412]	; (80015f8 <inputseria+0x2bc>)
 800145c:	4a67      	ldr	r2, [pc, #412]	; (80015fc <inputseria+0x2c0>)
 800145e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	seria[20].waittime = 224;
 8001462:	4b65      	ldr	r3, [pc, #404]	; (80015f8 <inputseria+0x2bc>)
 8001464:	22e0      	movs	r2, #224	; 0xe0
 8001466:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	seria[21].interval = 880;
 800146a:	4b63      	ldr	r3, [pc, #396]	; (80015f8 <inputseria+0x2bc>)
 800146c:	4a64      	ldr	r2, [pc, #400]	; (8001600 <inputseria+0x2c4>)
 800146e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	seria[21].waittime = 224;
 8001472:	4b61      	ldr	r3, [pc, #388]	; (80015f8 <inputseria+0x2bc>)
 8001474:	22e0      	movs	r2, #224	; 0xe0
 8001476:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	seria[22].interval = 988;
 800147a:	4b5f      	ldr	r3, [pc, #380]	; (80015f8 <inputseria+0x2bc>)
 800147c:	4a61      	ldr	r2, [pc, #388]	; (8001604 <inputseria+0x2c8>)
 800147e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	seria[22].waittime = 462;
 8001482:	4b5d      	ldr	r3, [pc, #372]	; (80015f8 <inputseria+0x2bc>)
 8001484:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001488:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	seria[23].interval = 698;
 800148c:	4b5a      	ldr	r3, [pc, #360]	; (80015f8 <inputseria+0x2bc>)
 800148e:	4a5b      	ldr	r2, [pc, #364]	; (80015fc <inputseria+0x2c0>)
 8001490:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	seria[23].waittime = 224;
 8001494:	4b58      	ldr	r3, [pc, #352]	; (80015f8 <inputseria+0x2bc>)
 8001496:	22e0      	movs	r2, #224	; 0xe0
 8001498:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
	seria[24].interval = 880;
 800149c:	4b56      	ldr	r3, [pc, #344]	; (80015f8 <inputseria+0x2bc>)
 800149e:	4a58      	ldr	r2, [pc, #352]	; (8001600 <inputseria+0x2c4>)
 80014a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	seria[24].waittime = 224;
 80014a4:	4b54      	ldr	r3, [pc, #336]	; (80015f8 <inputseria+0x2bc>)
 80014a6:	22e0      	movs	r2, #224	; 0xe0
 80014a8:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	seria[25].interval = 988;
 80014ac:	4b52      	ldr	r3, [pc, #328]	; (80015f8 <inputseria+0x2bc>)
 80014ae:	4a55      	ldr	r2, [pc, #340]	; (8001604 <inputseria+0x2c8>)
 80014b0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	seria[25].waittime = 462;
 80014b4:	4b50      	ldr	r3, [pc, #320]	; (80015f8 <inputseria+0x2bc>)
 80014b6:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80014ba:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
	seria[26].interval = 698;
 80014be:	4b4e      	ldr	r3, [pc, #312]	; (80015f8 <inputseria+0x2bc>)
 80014c0:	4a4e      	ldr	r2, [pc, #312]	; (80015fc <inputseria+0x2c0>)
 80014c2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	seria[26].waittime = 224;
 80014c6:	4b4c      	ldr	r3, [pc, #304]	; (80015f8 <inputseria+0x2bc>)
 80014c8:	22e0      	movs	r2, #224	; 0xe0
 80014ca:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
	seria[27].interval = 880;
 80014ce:	4b4a      	ldr	r3, [pc, #296]	; (80015f8 <inputseria+0x2bc>)
 80014d0:	4a4b      	ldr	r2, [pc, #300]	; (8001600 <inputseria+0x2c4>)
 80014d2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	seria[27].waittime = 224;
 80014d6:	4b48      	ldr	r3, [pc, #288]	; (80015f8 <inputseria+0x2bc>)
 80014d8:	22e0      	movs	r2, #224	; 0xe0
 80014da:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	seria[28].interval = 988;
 80014de:	4b46      	ldr	r3, [pc, #280]	; (80015f8 <inputseria+0x2bc>)
 80014e0:	4a48      	ldr	r2, [pc, #288]	; (8001604 <inputseria+0x2c8>)
 80014e2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	seria[28].waittime = 224;
 80014e6:	4b44      	ldr	r3, [pc, #272]	; (80015f8 <inputseria+0x2bc>)
 80014e8:	22e0      	movs	r2, #224	; 0xe0
 80014ea:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	seria[29].interval = 1319;
 80014ee:	4b42      	ldr	r3, [pc, #264]	; (80015f8 <inputseria+0x2bc>)
 80014f0:	4a45      	ldr	r2, [pc, #276]	; (8001608 <inputseria+0x2cc>)
 80014f2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	seria[29].waittime = 224;
 80014f6:	4b40      	ldr	r3, [pc, #256]	; (80015f8 <inputseria+0x2bc>)
 80014f8:	22e0      	movs	r2, #224	; 0xe0
 80014fa:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
	seria[30].interval = 1175;
 80014fe:	4b3e      	ldr	r3, [pc, #248]	; (80015f8 <inputseria+0x2bc>)
 8001500:	4a42      	ldr	r2, [pc, #264]	; (800160c <inputseria+0x2d0>)
 8001502:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	seria[30].waittime = 462;
 8001506:	4b3c      	ldr	r3, [pc, #240]	; (80015f8 <inputseria+0x2bc>)
 8001508:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800150c:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
	seria[31].interval = 988;
 8001510:	4b39      	ldr	r3, [pc, #228]	; (80015f8 <inputseria+0x2bc>)
 8001512:	4a3c      	ldr	r2, [pc, #240]	; (8001604 <inputseria+0x2c8>)
 8001514:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	seria[31].waittime = 224;
 8001518:	4b37      	ldr	r3, [pc, #220]	; (80015f8 <inputseria+0x2bc>)
 800151a:	22e0      	movs	r2, #224	; 0xe0
 800151c:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
	seria[32].interval = 1047;
 8001520:	4b35      	ldr	r3, [pc, #212]	; (80015f8 <inputseria+0x2bc>)
 8001522:	4a3b      	ldr	r2, [pc, #236]	; (8001610 <inputseria+0x2d4>)
 8001524:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	seria[32].waittime = 224;
 8001528:	4b33      	ldr	r3, [pc, #204]	; (80015f8 <inputseria+0x2bc>)
 800152a:	22e0      	movs	r2, #224	; 0xe0
 800152c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	seria[33].interval = 1319;
 8001530:	4b31      	ldr	r3, [pc, #196]	; (80015f8 <inputseria+0x2bc>)
 8001532:	4a35      	ldr	r2, [pc, #212]	; (8001608 <inputseria+0x2cc>)
 8001534:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	seria[33].waittime = 224;
 8001538:	4b2f      	ldr	r3, [pc, #188]	; (80015f8 <inputseria+0x2bc>)
 800153a:	22e0      	movs	r2, #224	; 0xe0
 800153c:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	seria[34].interval = 988;
 8001540:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <inputseria+0x2bc>)
 8001542:	4a30      	ldr	r2, [pc, #192]	; (8001604 <inputseria+0x2c8>)
 8001544:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	seria[34].waittime = 224;
 8001548:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <inputseria+0x2bc>)
 800154a:	22e0      	movs	r2, #224	; 0xe0
 800154c:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
	seria[35].interval = 784;
 8001550:	4b29      	ldr	r3, [pc, #164]	; (80015f8 <inputseria+0x2bc>)
 8001552:	4a30      	ldr	r2, [pc, #192]	; (8001614 <inputseria+0x2d8>)
 8001554:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	seria[35].waittime = 1169;
 8001558:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <inputseria+0x2bc>)
 800155a:	f240 4291 	movw	r2, #1169	; 0x491
 800155e:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
	seria[36].interval = 988;
 8001562:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <inputseria+0x2bc>)
 8001564:	4a27      	ldr	r2, [pc, #156]	; (8001604 <inputseria+0x2c8>)
 8001566:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	seria[36].waittime = 224;
 800156a:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <inputseria+0x2bc>)
 800156c:	22e0      	movs	r2, #224	; 0xe0
 800156e:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
	seria[37].interval = 784;
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <inputseria+0x2bc>)
 8001574:	4a27      	ldr	r2, [pc, #156]	; (8001614 <inputseria+0x2d8>)
 8001576:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	seria[37].waittime = 224;
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <inputseria+0x2bc>)
 800157c:	22e0      	movs	r2, #224	; 0xe0
 800157e:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
	seria[38].interval = 587;
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <inputseria+0x2bc>)
 8001584:	4a25      	ldr	r2, [pc, #148]	; (800161c <inputseria+0x2e0>)
 8001586:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	seria[38].waittime = 224;
 800158a:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <inputseria+0x2bc>)
 800158c:	22e0      	movs	r2, #224	; 0xe0
 800158e:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	seria[39].interval = 659;
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <inputseria+0x2bc>)
 8001594:	4a20      	ldr	r2, [pc, #128]	; (8001618 <inputseria+0x2dc>)
 8001596:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	seria[39].waittime = 1400;
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <inputseria+0x2bc>)
 800159c:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80015a0:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
	seria[40].interval = 294;
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <inputseria+0x2bc>)
 80015a6:	4a1e      	ldr	r2, [pc, #120]	; (8001620 <inputseria+0x2e4>)
 80015a8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	seria[40].waittime = 224;
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <inputseria+0x2bc>)
 80015ae:	22e0      	movs	r2, #224	; 0xe0
 80015b0:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
	seria[41].interval = 330;
 80015b4:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <inputseria+0x2bc>)
 80015b6:	4a1b      	ldr	r2, [pc, #108]	; (8001624 <inputseria+0x2e8>)
 80015b8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	seria[41].waittime = 224;
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <inputseria+0x2bc>)
 80015be:	22e0      	movs	r2, #224	; 0xe0
 80015c0:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
	seria[42].interval = 349;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <inputseria+0x2bc>)
 80015c6:	4a18      	ldr	r2, [pc, #96]	; (8001628 <inputseria+0x2ec>)
 80015c8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	seria[42].waittime = 462;
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <inputseria+0x2bc>)
 80015ce:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80015d2:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	seria[43].interval = 392;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <inputseria+0x2bc>)
 80015d8:	4a14      	ldr	r2, [pc, #80]	; (800162c <inputseria+0x2f0>)
 80015da:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	seria[43].waittime = 224;
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <inputseria+0x2bc>)
 80015e0:	22e0      	movs	r2, #224	; 0xe0
 80015e2:	f8a3 215c 	strh.w	r2, [r3, #348]	; 0x15c
	seria[44].interval = 440;
 80015e6:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <inputseria+0x2bc>)
 80015e8:	4a11      	ldr	r2, [pc, #68]	; (8001630 <inputseria+0x2f4>)
 80015ea:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	seria[44].waittime = 224;
 80015ee:	4b02      	ldr	r3, [pc, #8]	; (80015f8 <inputseria+0x2bc>)
 80015f0:	22e0      	movs	r2, #224	; 0xe0
 80015f2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 80015f6:	e01d      	b.n	8001634 <inputseria+0x2f8>
 80015f8:	20000218 	.word	0x20000218
 80015fc:	442e8000 	.word	0x442e8000
 8001600:	445c0000 	.word	0x445c0000
 8001604:	44770000 	.word	0x44770000
 8001608:	44a4e000 	.word	0x44a4e000
 800160c:	4492e000 	.word	0x4492e000
 8001610:	4482e000 	.word	0x4482e000
 8001614:	44440000 	.word	0x44440000
 8001618:	4424c000 	.word	0x4424c000
 800161c:	4412c000 	.word	0x4412c000
 8001620:	43930000 	.word	0x43930000
 8001624:	43a50000 	.word	0x43a50000
 8001628:	43ae8000 	.word	0x43ae8000
 800162c:	43c40000 	.word	0x43c40000
 8001630:	43dc0000 	.word	0x43dc0000
	seria[45].interval = 494;
 8001634:	4bb9      	ldr	r3, [pc, #740]	; (800191c <inputseria+0x5e0>)
 8001636:	4aba      	ldr	r2, [pc, #744]	; (8001920 <inputseria+0x5e4>)
 8001638:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	seria[45].waittime = 462;
 800163c:	4bb7      	ldr	r3, [pc, #732]	; (800191c <inputseria+0x5e0>)
 800163e:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001642:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
	seria[46].interval = 523;
 8001646:	4bb5      	ldr	r3, [pc, #724]	; (800191c <inputseria+0x5e0>)
 8001648:	4ab6      	ldr	r2, [pc, #728]	; (8001924 <inputseria+0x5e8>)
 800164a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	seria[46].waittime = 224;
 800164e:	4bb3      	ldr	r3, [pc, #716]	; (800191c <inputseria+0x5e0>)
 8001650:	22e0      	movs	r2, #224	; 0xe0
 8001652:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	seria[47].interval = 494;
 8001656:	4bb1      	ldr	r3, [pc, #708]	; (800191c <inputseria+0x5e0>)
 8001658:	4ab1      	ldr	r2, [pc, #708]	; (8001920 <inputseria+0x5e4>)
 800165a:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	seria[47].waittime = 224;
 800165e:	4baf      	ldr	r3, [pc, #700]	; (800191c <inputseria+0x5e0>)
 8001660:	22e0      	movs	r2, #224	; 0xe0
 8001662:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	seria[48].interval = 330;
 8001666:	4bad      	ldr	r3, [pc, #692]	; (800191c <inputseria+0x5e0>)
 8001668:	4aaf      	ldr	r2, [pc, #700]	; (8001928 <inputseria+0x5ec>)
 800166a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	seria[48].waittime = 1400;
 800166e:	4bab      	ldr	r3, [pc, #684]	; (800191c <inputseria+0x5e0>)
 8001670:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8001674:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184
	seria[49].interval = 698;
 8001678:	4ba8      	ldr	r3, [pc, #672]	; (800191c <inputseria+0x5e0>)
 800167a:	4aac      	ldr	r2, [pc, #688]	; (800192c <inputseria+0x5f0>)
 800167c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	seria[49].waittime = 224;
 8001680:	4ba6      	ldr	r3, [pc, #664]	; (800191c <inputseria+0x5e0>)
 8001682:	22e0      	movs	r2, #224	; 0xe0
 8001684:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
	seria[50].interval = 784;
 8001688:	4ba4      	ldr	r3, [pc, #656]	; (800191c <inputseria+0x5e0>)
 800168a:	4aa9      	ldr	r2, [pc, #676]	; (8001930 <inputseria+0x5f4>)
 800168c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	seria[50].waittime = 224;
 8001690:	4ba2      	ldr	r3, [pc, #648]	; (800191c <inputseria+0x5e0>)
 8001692:	22e0      	movs	r2, #224	; 0xe0
 8001694:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
	seria[51].interval = 880;
 8001698:	4ba0      	ldr	r3, [pc, #640]	; (800191c <inputseria+0x5e0>)
 800169a:	4aa6      	ldr	r2, [pc, #664]	; (8001934 <inputseria+0x5f8>)
 800169c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	seria[51].waittime = 462;
 80016a0:	4b9e      	ldr	r3, [pc, #632]	; (800191c <inputseria+0x5e0>)
 80016a2:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80016a6:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
	seria[52].interval = 988;
 80016aa:	4b9c      	ldr	r3, [pc, #624]	; (800191c <inputseria+0x5e0>)
 80016ac:	4aa2      	ldr	r2, [pc, #648]	; (8001938 <inputseria+0x5fc>)
 80016ae:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	seria[52].waittime = 224;
 80016b2:	4b9a      	ldr	r3, [pc, #616]	; (800191c <inputseria+0x5e0>)
 80016b4:	22e0      	movs	r2, #224	; 0xe0
 80016b6:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
	seria[53].interval = 1047;
 80016ba:	4b98      	ldr	r3, [pc, #608]	; (800191c <inputseria+0x5e0>)
 80016bc:	4a9f      	ldr	r2, [pc, #636]	; (800193c <inputseria+0x600>)
 80016be:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	seria[53].waittime = 224;
 80016c2:	4b96      	ldr	r3, [pc, #600]	; (800191c <inputseria+0x5e0>)
 80016c4:	22e0      	movs	r2, #224	; 0xe0
 80016c6:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
	seria[54].interval = 1175;
 80016ca:	4b94      	ldr	r3, [pc, #592]	; (800191c <inputseria+0x5e0>)
 80016cc:	4a9c      	ldr	r2, [pc, #624]	; (8001940 <inputseria+0x604>)
 80016ce:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	seria[54].waittime = 462;
 80016d2:	4b92      	ldr	r3, [pc, #584]	; (800191c <inputseria+0x5e0>)
 80016d4:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80016d8:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
	seria[55].interval = 1319;
 80016dc:	4b8f      	ldr	r3, [pc, #572]	; (800191c <inputseria+0x5e0>)
 80016de:	4a99      	ldr	r2, [pc, #612]	; (8001944 <inputseria+0x608>)
 80016e0:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	seria[55].waittime = 224;
 80016e4:	4b8d      	ldr	r3, [pc, #564]	; (800191c <inputseria+0x5e0>)
 80016e6:	22e0      	movs	r2, #224	; 0xe0
 80016e8:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
	seria[56].interval = 1397;
 80016ec:	4b8b      	ldr	r3, [pc, #556]	; (800191c <inputseria+0x5e0>)
 80016ee:	4a96      	ldr	r2, [pc, #600]	; (8001948 <inputseria+0x60c>)
 80016f0:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
	seria[56].waittime = 224;
 80016f4:	4b89      	ldr	r3, [pc, #548]	; (800191c <inputseria+0x5e0>)
 80016f6:	22e0      	movs	r2, #224	; 0xe0
 80016f8:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
	seria[57].interval = 1568;
 80016fc:	4b87      	ldr	r3, [pc, #540]	; (800191c <inputseria+0x5e0>)
 80016fe:	4a93      	ldr	r2, [pc, #588]	; (800194c <inputseria+0x610>)
 8001700:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
	seria[57].waittime = 1400;
 8001704:	4b85      	ldr	r3, [pc, #532]	; (800191c <inputseria+0x5e0>)
 8001706:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800170a:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
	seria[58].interval = 294;
 800170e:	4b83      	ldr	r3, [pc, #524]	; (800191c <inputseria+0x5e0>)
 8001710:	4a8f      	ldr	r2, [pc, #572]	; (8001950 <inputseria+0x614>)
 8001712:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	seria[58].waittime = 224;
 8001716:	4b81      	ldr	r3, [pc, #516]	; (800191c <inputseria+0x5e0>)
 8001718:	22e0      	movs	r2, #224	; 0xe0
 800171a:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
	seria[59].interval = 330;
 800171e:	4b7f      	ldr	r3, [pc, #508]	; (800191c <inputseria+0x5e0>)
 8001720:	4a81      	ldr	r2, [pc, #516]	; (8001928 <inputseria+0x5ec>)
 8001722:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	seria[59].waittime = 224;
 8001726:	4b7d      	ldr	r3, [pc, #500]	; (800191c <inputseria+0x5e0>)
 8001728:	22e0      	movs	r2, #224	; 0xe0
 800172a:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
	seria[60].interval = 349;
 800172e:	4b7b      	ldr	r3, [pc, #492]	; (800191c <inputseria+0x5e0>)
 8001730:	4a88      	ldr	r2, [pc, #544]	; (8001954 <inputseria+0x618>)
 8001732:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	seria[60].waittime = 462;
 8001736:	4b79      	ldr	r3, [pc, #484]	; (800191c <inputseria+0x5e0>)
 8001738:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800173c:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
	seria[61].interval = 392;
 8001740:	4b76      	ldr	r3, [pc, #472]	; (800191c <inputseria+0x5e0>)
 8001742:	4a85      	ldr	r2, [pc, #532]	; (8001958 <inputseria+0x61c>)
 8001744:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	seria[61].waittime = 224;
 8001748:	4b74      	ldr	r3, [pc, #464]	; (800191c <inputseria+0x5e0>)
 800174a:	22e0      	movs	r2, #224	; 0xe0
 800174c:	f8a3 21ec 	strh.w	r2, [r3, #492]	; 0x1ec
	seria[62].interval = 440;
 8001750:	4b72      	ldr	r3, [pc, #456]	; (800191c <inputseria+0x5e0>)
 8001752:	4a82      	ldr	r2, [pc, #520]	; (800195c <inputseria+0x620>)
 8001754:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	seria[62].waittime = 224;
 8001758:	4b70      	ldr	r3, [pc, #448]	; (800191c <inputseria+0x5e0>)
 800175a:	22e0      	movs	r2, #224	; 0xe0
 800175c:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
	seria[63].interval = 494;
 8001760:	4b6e      	ldr	r3, [pc, #440]	; (800191c <inputseria+0x5e0>)
 8001762:	4a6f      	ldr	r2, [pc, #444]	; (8001920 <inputseria+0x5e4>)
 8001764:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	seria[63].waittime = 462;
 8001768:	4b6c      	ldr	r3, [pc, #432]	; (800191c <inputseria+0x5e0>)
 800176a:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800176e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	seria[64].interval = 523;
 8001772:	4b6a      	ldr	r3, [pc, #424]	; (800191c <inputseria+0x5e0>)
 8001774:	4a6b      	ldr	r2, [pc, #428]	; (8001924 <inputseria+0x5e8>)
 8001776:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	seria[64].waittime = 224;
 800177a:	4b68      	ldr	r3, [pc, #416]	; (800191c <inputseria+0x5e0>)
 800177c:	22e0      	movs	r2, #224	; 0xe0
 800177e:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	seria[65].interval = 494;
 8001782:	4b66      	ldr	r3, [pc, #408]	; (800191c <inputseria+0x5e0>)
 8001784:	4a66      	ldr	r2, [pc, #408]	; (8001920 <inputseria+0x5e4>)
 8001786:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	seria[65].waittime = 224;
 800178a:	4b64      	ldr	r3, [pc, #400]	; (800191c <inputseria+0x5e0>)
 800178c:	22e0      	movs	r2, #224	; 0xe0
 800178e:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
	seria[66].interval = 330;
 8001792:	4b62      	ldr	r3, [pc, #392]	; (800191c <inputseria+0x5e0>)
 8001794:	4a64      	ldr	r2, [pc, #400]	; (8001928 <inputseria+0x5ec>)
 8001796:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	seria[66].waittime = 1400;
 800179a:	4b60      	ldr	r3, [pc, #384]	; (800191c <inputseria+0x5e0>)
 800179c:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80017a0:	f8a3 2214 	strh.w	r2, [r3, #532]	; 0x214
	seria[67].interval = 698;
 80017a4:	4b5d      	ldr	r3, [pc, #372]	; (800191c <inputseria+0x5e0>)
 80017a6:	4a61      	ldr	r2, [pc, #388]	; (800192c <inputseria+0x5f0>)
 80017a8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	seria[67].waittime = 224;
 80017ac:	4b5b      	ldr	r3, [pc, #364]	; (800191c <inputseria+0x5e0>)
 80017ae:	22e0      	movs	r2, #224	; 0xe0
 80017b0:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
	seria[68].interval = 659;
 80017b4:	4b59      	ldr	r3, [pc, #356]	; (800191c <inputseria+0x5e0>)
 80017b6:	4a6a      	ldr	r2, [pc, #424]	; (8001960 <inputseria+0x624>)
 80017b8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	seria[68].waittime = 105;
 80017bc:	4b57      	ldr	r3, [pc, #348]	; (800191c <inputseria+0x5e0>)
 80017be:	2269      	movs	r2, #105	; 0x69
 80017c0:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
	seria[69].interval = 880;
 80017c4:	4b55      	ldr	r3, [pc, #340]	; (800191c <inputseria+0x5e0>)
 80017c6:	4a5b      	ldr	r2, [pc, #364]	; (8001934 <inputseria+0x5f8>)
 80017c8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	seria[69].waittime = 224;
 80017cc:	4b53      	ldr	r3, [pc, #332]	; (800191c <inputseria+0x5e0>)
 80017ce:	22e0      	movs	r2, #224	; 0xe0
 80017d0:	f8a3 222c 	strh.w	r2, [r3, #556]	; 0x22c
	seria[70].interval = 784;
 80017d4:	4b51      	ldr	r3, [pc, #324]	; (800191c <inputseria+0x5e0>)
 80017d6:	4a56      	ldr	r2, [pc, #344]	; (8001930 <inputseria+0x5f4>)
 80017d8:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	seria[70].waittime = 105;
 80017dc:	4b4f      	ldr	r3, [pc, #316]	; (800191c <inputseria+0x5e0>)
 80017de:	2269      	movs	r2, #105	; 0x69
 80017e0:	f8a3 2234 	strh.w	r2, [r3, #564]	; 0x234
	seria[71].interval = 988;
 80017e4:	4b4d      	ldr	r3, [pc, #308]	; (800191c <inputseria+0x5e0>)
 80017e6:	4a54      	ldr	r2, [pc, #336]	; (8001938 <inputseria+0x5fc>)
 80017e8:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	seria[71].waittime = 224;
 80017ec:	4b4b      	ldr	r3, [pc, #300]	; (800191c <inputseria+0x5e0>)
 80017ee:	22e0      	movs	r2, #224	; 0xe0
 80017f0:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
	seria[72].interval = 880;
 80017f4:	4b49      	ldr	r3, [pc, #292]	; (800191c <inputseria+0x5e0>)
 80017f6:	4a4f      	ldr	r2, [pc, #316]	; (8001934 <inputseria+0x5f8>)
 80017f8:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	seria[72].waittime = 105;
 80017fc:	4b47      	ldr	r3, [pc, #284]	; (800191c <inputseria+0x5e0>)
 80017fe:	2269      	movs	r2, #105	; 0x69
 8001800:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
	seria[73].interval = 1047;
 8001804:	4b45      	ldr	r3, [pc, #276]	; (800191c <inputseria+0x5e0>)
 8001806:	4a4d      	ldr	r2, [pc, #308]	; (800193c <inputseria+0x600>)
 8001808:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	seria[73].waittime = 224;
 800180c:	4b43      	ldr	r3, [pc, #268]	; (800191c <inputseria+0x5e0>)
 800180e:	22e0      	movs	r2, #224	; 0xe0
 8001810:	f8a3 224c 	strh.w	r2, [r3, #588]	; 0x24c
	seria[74].interval = 988;
 8001814:	4b41      	ldr	r3, [pc, #260]	; (800191c <inputseria+0x5e0>)
 8001816:	4a48      	ldr	r2, [pc, #288]	; (8001938 <inputseria+0x5fc>)
 8001818:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	seria[74].waittime = 105;
 800181c:	4b3f      	ldr	r3, [pc, #252]	; (800191c <inputseria+0x5e0>)
 800181e:	2269      	movs	r2, #105	; 0x69
 8001820:	f8a3 2254 	strh.w	r2, [r3, #596]	; 0x254
	seria[75].interval = 1175;
 8001824:	4b3d      	ldr	r3, [pc, #244]	; (800191c <inputseria+0x5e0>)
 8001826:	4a46      	ldr	r2, [pc, #280]	; (8001940 <inputseria+0x604>)
 8001828:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	seria[75].waittime = 224;
 800182c:	4b3b      	ldr	r3, [pc, #236]	; (800191c <inputseria+0x5e0>)
 800182e:	22e0      	movs	r2, #224	; 0xe0
 8001830:	f8a3 225c 	strh.w	r2, [r3, #604]	; 0x25c
	seria[76].interval = 1047;
 8001834:	4b39      	ldr	r3, [pc, #228]	; (800191c <inputseria+0x5e0>)
 8001836:	4a41      	ldr	r2, [pc, #260]	; (800193c <inputseria+0x600>)
 8001838:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	seria[76].waittime = 105;
 800183c:	4b37      	ldr	r3, [pc, #220]	; (800191c <inputseria+0x5e0>)
 800183e:	2269      	movs	r2, #105	; 0x69
 8001840:	f8a3 2264 	strh.w	r2, [r3, #612]	; 0x264
	seria[77].interval = 1319;
 8001844:	4b35      	ldr	r3, [pc, #212]	; (800191c <inputseria+0x5e0>)
 8001846:	4a3f      	ldr	r2, [pc, #252]	; (8001944 <inputseria+0x608>)
 8001848:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	seria[77].waittime = 224;
 800184c:	4b33      	ldr	r3, [pc, #204]	; (800191c <inputseria+0x5e0>)
 800184e:	22e0      	movs	r2, #224	; 0xe0
 8001850:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
	seria[78].interval = 1175;
 8001854:	4b31      	ldr	r3, [pc, #196]	; (800191c <inputseria+0x5e0>)
 8001856:	4a3a      	ldr	r2, [pc, #232]	; (8001940 <inputseria+0x604>)
 8001858:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	seria[78].waittime = 105;
 800185c:	4b2f      	ldr	r3, [pc, #188]	; (800191c <inputseria+0x5e0>)
 800185e:	2269      	movs	r2, #105	; 0x69
 8001860:	f8a3 2274 	strh.w	r2, [r3, #628]	; 0x274
	seria[79].interval = 1397;
 8001864:	4b2d      	ldr	r3, [pc, #180]	; (800191c <inputseria+0x5e0>)
 8001866:	4a38      	ldr	r2, [pc, #224]	; (8001948 <inputseria+0x60c>)
 8001868:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	seria[79].waittime = 224;
 800186c:	4b2b      	ldr	r3, [pc, #172]	; (800191c <inputseria+0x5e0>)
 800186e:	22e0      	movs	r2, #224	; 0xe0
 8001870:	f8a3 227c 	strh.w	r2, [r3, #636]	; 0x27c
	seria[80].interval = 1319;
 8001874:	4b29      	ldr	r3, [pc, #164]	; (800191c <inputseria+0x5e0>)
 8001876:	4a33      	ldr	r2, [pc, #204]	; (8001944 <inputseria+0x608>)
 8001878:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	seria[80].waittime = 105;
 800187c:	4b27      	ldr	r3, [pc, #156]	; (800191c <inputseria+0x5e0>)
 800187e:	2269      	movs	r2, #105	; 0x69
 8001880:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	seria[81].interval = 988;
 8001884:	4b25      	ldr	r3, [pc, #148]	; (800191c <inputseria+0x5e0>)
 8001886:	4a2c      	ldr	r2, [pc, #176]	; (8001938 <inputseria+0x5fc>)
 8001888:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	seria[81].waittime = 105;
 800188c:	4b23      	ldr	r3, [pc, #140]	; (800191c <inputseria+0x5e0>)
 800188e:	2269      	movs	r2, #105	; 0x69
 8001890:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
	seria[82].interval = 1047;
 8001894:	4b21      	ldr	r3, [pc, #132]	; (800191c <inputseria+0x5e0>)
 8001896:	4a29      	ldr	r2, [pc, #164]	; (800193c <inputseria+0x600>)
 8001898:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	seria[82].waittime = 105;
 800189c:	4b1f      	ldr	r3, [pc, #124]	; (800191c <inputseria+0x5e0>)
 800189e:	2269      	movs	r2, #105	; 0x69
 80018a0:	f8a3 2294 	strh.w	r2, [r3, #660]	; 0x294
	seria[83].interval = 880;
 80018a4:	4b1d      	ldr	r3, [pc, #116]	; (800191c <inputseria+0x5e0>)
 80018a6:	4a23      	ldr	r2, [pc, #140]	; (8001934 <inputseria+0x5f8>)
 80018a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	seria[83].waittime = 105;
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <inputseria+0x5e0>)
 80018ae:	2269      	movs	r2, #105	; 0x69
 80018b0:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
	seria[84].interval = 988;
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <inputseria+0x5e0>)
 80018b6:	4a20      	ldr	r2, [pc, #128]	; (8001938 <inputseria+0x5fc>)
 80018b8:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	seria[84].waittime = 2576;
 80018bc:	4b17      	ldr	r3, [pc, #92]	; (800191c <inputseria+0x5e0>)
 80018be:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 80018c2:	f8a3 22a4 	strh.w	r2, [r3, #676]	; 0x2a4
	seria[85].interval = 698;
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <inputseria+0x5e0>)
 80018c8:	4a18      	ldr	r2, [pc, #96]	; (800192c <inputseria+0x5f0>)
 80018ca:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	seria[85].waittime = 224;
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <inputseria+0x5e0>)
 80018d0:	22e0      	movs	r2, #224	; 0xe0
 80018d2:	f8a3 22ac 	strh.w	r2, [r3, #684]	; 0x2ac
	seria[86].interval = 880;
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <inputseria+0x5e0>)
 80018d8:	4a16      	ldr	r2, [pc, #88]	; (8001934 <inputseria+0x5f8>)
 80018da:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
	seria[86].waittime = 224;
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <inputseria+0x5e0>)
 80018e0:	22e0      	movs	r2, #224	; 0xe0
 80018e2:	f8a3 22b4 	strh.w	r2, [r3, #692]	; 0x2b4
	seria[87].interval = 988;
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <inputseria+0x5e0>)
 80018e8:	4a13      	ldr	r2, [pc, #76]	; (8001938 <inputseria+0x5fc>)
 80018ea:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
	seria[87].waittime = 462;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <inputseria+0x5e0>)
 80018f0:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80018f4:	f8a3 22bc 	strh.w	r2, [r3, #700]	; 0x2bc
	seria[88].interval = 698;
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <inputseria+0x5e0>)
 80018fa:	4a0c      	ldr	r2, [pc, #48]	; (800192c <inputseria+0x5f0>)
 80018fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
	seria[88].waittime = 224;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <inputseria+0x5e0>)
 8001902:	22e0      	movs	r2, #224	; 0xe0
 8001904:	f8a3 22c4 	strh.w	r2, [r3, #708]	; 0x2c4
	seria[89].interval = 880;
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <inputseria+0x5e0>)
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <inputseria+0x5f8>)
 800190c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
	seria[89].waittime = 224;
 8001910:	4b02      	ldr	r3, [pc, #8]	; (800191c <inputseria+0x5e0>)
 8001912:	22e0      	movs	r2, #224	; 0xe0
 8001914:	f8a3 22cc 	strh.w	r2, [r3, #716]	; 0x2cc
 8001918:	e024      	b.n	8001964 <inputseria+0x628>
 800191a:	bf00      	nop
 800191c:	20000218 	.word	0x20000218
 8001920:	43f70000 	.word	0x43f70000
 8001924:	4402c000 	.word	0x4402c000
 8001928:	43a50000 	.word	0x43a50000
 800192c:	442e8000 	.word	0x442e8000
 8001930:	44440000 	.word	0x44440000
 8001934:	445c0000 	.word	0x445c0000
 8001938:	44770000 	.word	0x44770000
 800193c:	4482e000 	.word	0x4482e000
 8001940:	4492e000 	.word	0x4492e000
 8001944:	44a4e000 	.word	0x44a4e000
 8001948:	44aea000 	.word	0x44aea000
 800194c:	44c40000 	.word	0x44c40000
 8001950:	43930000 	.word	0x43930000
 8001954:	43ae8000 	.word	0x43ae8000
 8001958:	43c40000 	.word	0x43c40000
 800195c:	43dc0000 	.word	0x43dc0000
 8001960:	4424c000 	.word	0x4424c000
	seria[90].interval = 988;
 8001964:	4bb9      	ldr	r3, [pc, #740]	; (8001c4c <inputseria+0x910>)
 8001966:	4aba      	ldr	r2, [pc, #744]	; (8001c50 <inputseria+0x914>)
 8001968:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
	seria[90].waittime = 462;
 800196c:	4bb7      	ldr	r3, [pc, #732]	; (8001c4c <inputseria+0x910>)
 800196e:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001972:	f8a3 22d4 	strh.w	r2, [r3, #724]	; 0x2d4
	seria[91].interval = 698;
 8001976:	4bb5      	ldr	r3, [pc, #724]	; (8001c4c <inputseria+0x910>)
 8001978:	4ab6      	ldr	r2, [pc, #728]	; (8001c54 <inputseria+0x918>)
 800197a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
	seria[91].waittime = 224;
 800197e:	4bb3      	ldr	r3, [pc, #716]	; (8001c4c <inputseria+0x910>)
 8001980:	22e0      	movs	r2, #224	; 0xe0
 8001982:	f8a3 22dc 	strh.w	r2, [r3, #732]	; 0x2dc
	seria[92].interval = 880;
 8001986:	4bb1      	ldr	r3, [pc, #708]	; (8001c4c <inputseria+0x910>)
 8001988:	4ab3      	ldr	r2, [pc, #716]	; (8001c58 <inputseria+0x91c>)
 800198a:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
	seria[92].waittime = 224;
 800198e:	4baf      	ldr	r3, [pc, #700]	; (8001c4c <inputseria+0x910>)
 8001990:	22e0      	movs	r2, #224	; 0xe0
 8001992:	f8a3 22e4 	strh.w	r2, [r3, #740]	; 0x2e4
	seria[93].interval = 988;
 8001996:	4bad      	ldr	r3, [pc, #692]	; (8001c4c <inputseria+0x910>)
 8001998:	4aad      	ldr	r2, [pc, #692]	; (8001c50 <inputseria+0x914>)
 800199a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
	seria[93].waittime = 224;
 800199e:	4bab      	ldr	r3, [pc, #684]	; (8001c4c <inputseria+0x910>)
 80019a0:	22e0      	movs	r2, #224	; 0xe0
 80019a2:	f8a3 22ec 	strh.w	r2, [r3, #748]	; 0x2ec
	seria[94].interval = 1319;
 80019a6:	4ba9      	ldr	r3, [pc, #676]	; (8001c4c <inputseria+0x910>)
 80019a8:	4aac      	ldr	r2, [pc, #688]	; (8001c5c <inputseria+0x920>)
 80019aa:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
	seria[94].waittime = 224;
 80019ae:	4ba7      	ldr	r3, [pc, #668]	; (8001c4c <inputseria+0x910>)
 80019b0:	22e0      	movs	r2, #224	; 0xe0
 80019b2:	f8a3 22f4 	strh.w	r2, [r3, #756]	; 0x2f4
	seria[95].interval = 1175;
 80019b6:	4ba5      	ldr	r3, [pc, #660]	; (8001c4c <inputseria+0x910>)
 80019b8:	4aa9      	ldr	r2, [pc, #676]	; (8001c60 <inputseria+0x924>)
 80019ba:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	seria[95].waittime = 462;
 80019be:	4ba3      	ldr	r3, [pc, #652]	; (8001c4c <inputseria+0x910>)
 80019c0:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80019c4:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
	seria[96].interval = 988;
 80019c8:	4ba0      	ldr	r3, [pc, #640]	; (8001c4c <inputseria+0x910>)
 80019ca:	4aa1      	ldr	r2, [pc, #644]	; (8001c50 <inputseria+0x914>)
 80019cc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
	seria[96].waittime = 224;
 80019d0:	4b9e      	ldr	r3, [pc, #632]	; (8001c4c <inputseria+0x910>)
 80019d2:	22e0      	movs	r2, #224	; 0xe0
 80019d4:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
	seria[97].interval = 1047;
 80019d8:	4b9c      	ldr	r3, [pc, #624]	; (8001c4c <inputseria+0x910>)
 80019da:	4aa2      	ldr	r2, [pc, #648]	; (8001c64 <inputseria+0x928>)
 80019dc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	seria[97].waittime = 224;
 80019e0:	4b9a      	ldr	r3, [pc, #616]	; (8001c4c <inputseria+0x910>)
 80019e2:	22e0      	movs	r2, #224	; 0xe0
 80019e4:	f8a3 230c 	strh.w	r2, [r3, #780]	; 0x30c
	seria[98].interval = 988;
 80019e8:	4b98      	ldr	r3, [pc, #608]	; (8001c4c <inputseria+0x910>)
 80019ea:	4a99      	ldr	r2, [pc, #612]	; (8001c50 <inputseria+0x914>)
 80019ec:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
	seria[98].waittime = 224;
 80019f0:	4b96      	ldr	r3, [pc, #600]	; (8001c4c <inputseria+0x910>)
 80019f2:	22e0      	movs	r2, #224	; 0xe0
 80019f4:	f8a3 2314 	strh.w	r2, [r3, #788]	; 0x314
	seria[99].interval = 784;
 80019f8:	4b94      	ldr	r3, [pc, #592]	; (8001c4c <inputseria+0x910>)
 80019fa:	4a9b      	ldr	r2, [pc, #620]	; (8001c68 <inputseria+0x92c>)
 80019fc:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
	seria[99].waittime = 224;
 8001a00:	4b92      	ldr	r3, [pc, #584]	; (8001c4c <inputseria+0x910>)
 8001a02:	22e0      	movs	r2, #224	; 0xe0
 8001a04:	f8a3 231c 	strh.w	r2, [r3, #796]	; 0x31c
	seria[100].interval = 659;
 8001a08:	4b90      	ldr	r3, [pc, #576]	; (8001c4c <inputseria+0x910>)
 8001a0a:	4a98      	ldr	r2, [pc, #608]	; (8001c6c <inputseria+0x930>)
 8001a0c:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
	seria[100].waittime = 1169;
 8001a10:	4b8e      	ldr	r3, [pc, #568]	; (8001c4c <inputseria+0x910>)
 8001a12:	f240 4291 	movw	r2, #1169	; 0x491
 8001a16:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324
	seria[101].interval = 587;
 8001a1a:	4b8c      	ldr	r3, [pc, #560]	; (8001c4c <inputseria+0x910>)
 8001a1c:	4a94      	ldr	r2, [pc, #592]	; (8001c70 <inputseria+0x934>)
 8001a1e:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	seria[101].waittime = 224;
 8001a22:	4b8a      	ldr	r3, [pc, #552]	; (8001c4c <inputseria+0x910>)
 8001a24:	22e0      	movs	r2, #224	; 0xe0
 8001a26:	f8a3 232c 	strh.w	r2, [r3, #812]	; 0x32c
	seria[102].interval = 659;
 8001a2a:	4b88      	ldr	r3, [pc, #544]	; (8001c4c <inputseria+0x910>)
 8001a2c:	4a8f      	ldr	r2, [pc, #572]	; (8001c6c <inputseria+0x930>)
 8001a2e:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
	seria[102].waittime = 224;
 8001a32:	4b86      	ldr	r3, [pc, #536]	; (8001c4c <inputseria+0x910>)
 8001a34:	22e0      	movs	r2, #224	; 0xe0
 8001a36:	f8a3 2334 	strh.w	r2, [r3, #820]	; 0x334
	seria[103].interval = 784;
 8001a3a:	4b84      	ldr	r3, [pc, #528]	; (8001c4c <inputseria+0x910>)
 8001a3c:	4a8a      	ldr	r2, [pc, #552]	; (8001c68 <inputseria+0x92c>)
 8001a3e:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
	seria[103].waittime = 224;
 8001a42:	4b82      	ldr	r3, [pc, #520]	; (8001c4c <inputseria+0x910>)
 8001a44:	22e0      	movs	r2, #224	; 0xe0
 8001a46:	f8a3 233c 	strh.w	r2, [r3, #828]	; 0x33c
	seria[104].interval = 659;
 8001a4a:	4b80      	ldr	r3, [pc, #512]	; (8001c4c <inputseria+0x910>)
 8001a4c:	4a87      	ldr	r2, [pc, #540]	; (8001c6c <inputseria+0x930>)
 8001a4e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
	seria[104].waittime = 1400;
 8001a52:	4b7e      	ldr	r3, [pc, #504]	; (8001c4c <inputseria+0x910>)
 8001a54:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8001a58:	f8a3 2344 	strh.w	r2, [r3, #836]	; 0x344
	seria[105].interval = 698;
 8001a5c:	4b7b      	ldr	r3, [pc, #492]	; (8001c4c <inputseria+0x910>)
 8001a5e:	4a7d      	ldr	r2, [pc, #500]	; (8001c54 <inputseria+0x918>)
 8001a60:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	seria[105].waittime = 224;
 8001a64:	4b79      	ldr	r3, [pc, #484]	; (8001c4c <inputseria+0x910>)
 8001a66:	22e0      	movs	r2, #224	; 0xe0
 8001a68:	f8a3 234c 	strh.w	r2, [r3, #844]	; 0x34c
	seria[106].interval = 880;
 8001a6c:	4b77      	ldr	r3, [pc, #476]	; (8001c4c <inputseria+0x910>)
 8001a6e:	4a7a      	ldr	r2, [pc, #488]	; (8001c58 <inputseria+0x91c>)
 8001a70:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
	seria[106].waittime = 224;
 8001a74:	4b75      	ldr	r3, [pc, #468]	; (8001c4c <inputseria+0x910>)
 8001a76:	22e0      	movs	r2, #224	; 0xe0
 8001a78:	f8a3 2354 	strh.w	r2, [r3, #852]	; 0x354
	seria[107].interval = 988;
 8001a7c:	4b73      	ldr	r3, [pc, #460]	; (8001c4c <inputseria+0x910>)
 8001a7e:	4a74      	ldr	r2, [pc, #464]	; (8001c50 <inputseria+0x914>)
 8001a80:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
	seria[107].waittime = 462;
 8001a84:	4b71      	ldr	r3, [pc, #452]	; (8001c4c <inputseria+0x910>)
 8001a86:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001a8a:	f8a3 235c 	strh.w	r2, [r3, #860]	; 0x35c
	seria[108].interval = 698;
 8001a8e:	4b6f      	ldr	r3, [pc, #444]	; (8001c4c <inputseria+0x910>)
 8001a90:	4a70      	ldr	r2, [pc, #448]	; (8001c54 <inputseria+0x918>)
 8001a92:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
	seria[108].waittime = 224;
 8001a96:	4b6d      	ldr	r3, [pc, #436]	; (8001c4c <inputseria+0x910>)
 8001a98:	22e0      	movs	r2, #224	; 0xe0
 8001a9a:	f8a3 2364 	strh.w	r2, [r3, #868]	; 0x364
	seria[109].interval = 880;
 8001a9e:	4b6b      	ldr	r3, [pc, #428]	; (8001c4c <inputseria+0x910>)
 8001aa0:	4a6d      	ldr	r2, [pc, #436]	; (8001c58 <inputseria+0x91c>)
 8001aa2:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
	seria[109].waittime = 224;
 8001aa6:	4b69      	ldr	r3, [pc, #420]	; (8001c4c <inputseria+0x910>)
 8001aa8:	22e0      	movs	r2, #224	; 0xe0
 8001aaa:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
	seria[110].interval = 988;
 8001aae:	4b67      	ldr	r3, [pc, #412]	; (8001c4c <inputseria+0x910>)
 8001ab0:	4a67      	ldr	r2, [pc, #412]	; (8001c50 <inputseria+0x914>)
 8001ab2:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
	seria[110].waittime = 462;
 8001ab6:	4b65      	ldr	r3, [pc, #404]	; (8001c4c <inputseria+0x910>)
 8001ab8:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001abc:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
	seria[111].interval = 698;
 8001ac0:	4b62      	ldr	r3, [pc, #392]	; (8001c4c <inputseria+0x910>)
 8001ac2:	4a64      	ldr	r2, [pc, #400]	; (8001c54 <inputseria+0x918>)
 8001ac4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
	seria[111].waittime = 224;
 8001ac8:	4b60      	ldr	r3, [pc, #384]	; (8001c4c <inputseria+0x910>)
 8001aca:	22e0      	movs	r2, #224	; 0xe0
 8001acc:	f8a3 237c 	strh.w	r2, [r3, #892]	; 0x37c
	seria[112].interval = 880;
 8001ad0:	4b5e      	ldr	r3, [pc, #376]	; (8001c4c <inputseria+0x910>)
 8001ad2:	4a61      	ldr	r2, [pc, #388]	; (8001c58 <inputseria+0x91c>)
 8001ad4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
	seria[112].waittime = 224;
 8001ad8:	4b5c      	ldr	r3, [pc, #368]	; (8001c4c <inputseria+0x910>)
 8001ada:	22e0      	movs	r2, #224	; 0xe0
 8001adc:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
	seria[113].interval = 988;
 8001ae0:	4b5a      	ldr	r3, [pc, #360]	; (8001c4c <inputseria+0x910>)
 8001ae2:	4a5b      	ldr	r2, [pc, #364]	; (8001c50 <inputseria+0x914>)
 8001ae4:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	seria[113].waittime = 224;
 8001ae8:	4b58      	ldr	r3, [pc, #352]	; (8001c4c <inputseria+0x910>)
 8001aea:	22e0      	movs	r2, #224	; 0xe0
 8001aec:	f8a3 238c 	strh.w	r2, [r3, #908]	; 0x38c
	seria[114].interval = 1319;
 8001af0:	4b56      	ldr	r3, [pc, #344]	; (8001c4c <inputseria+0x910>)
 8001af2:	4a5a      	ldr	r2, [pc, #360]	; (8001c5c <inputseria+0x920>)
 8001af4:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
	seria[114].waittime = 224;
 8001af8:	4b54      	ldr	r3, [pc, #336]	; (8001c4c <inputseria+0x910>)
 8001afa:	22e0      	movs	r2, #224	; 0xe0
 8001afc:	f8a3 2394 	strh.w	r2, [r3, #916]	; 0x394
	seria[115].interval = 1175;
 8001b00:	4b52      	ldr	r3, [pc, #328]	; (8001c4c <inputseria+0x910>)
 8001b02:	4a57      	ldr	r2, [pc, #348]	; (8001c60 <inputseria+0x924>)
 8001b04:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
	seria[115].waittime = 462;
 8001b08:	4b50      	ldr	r3, [pc, #320]	; (8001c4c <inputseria+0x910>)
 8001b0a:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001b0e:	f8a3 239c 	strh.w	r2, [r3, #924]	; 0x39c
	seria[116].interval = 988;
 8001b12:	4b4e      	ldr	r3, [pc, #312]	; (8001c4c <inputseria+0x910>)
 8001b14:	4a4e      	ldr	r2, [pc, #312]	; (8001c50 <inputseria+0x914>)
 8001b16:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	seria[116].waittime = 224;
 8001b1a:	4b4c      	ldr	r3, [pc, #304]	; (8001c4c <inputseria+0x910>)
 8001b1c:	22e0      	movs	r2, #224	; 0xe0
 8001b1e:	f8a3 23a4 	strh.w	r2, [r3, #932]	; 0x3a4
	seria[117].interval = 1047;
 8001b22:	4b4a      	ldr	r3, [pc, #296]	; (8001c4c <inputseria+0x910>)
 8001b24:	4a4f      	ldr	r2, [pc, #316]	; (8001c64 <inputseria+0x928>)
 8001b26:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
	seria[117].waittime = 224;
 8001b2a:	4b48      	ldr	r3, [pc, #288]	; (8001c4c <inputseria+0x910>)
 8001b2c:	22e0      	movs	r2, #224	; 0xe0
 8001b2e:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
	seria[118].interval = 1319;
 8001b32:	4b46      	ldr	r3, [pc, #280]	; (8001c4c <inputseria+0x910>)
 8001b34:	4a49      	ldr	r2, [pc, #292]	; (8001c5c <inputseria+0x920>)
 8001b36:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
	seria[118].waittime = 224;
 8001b3a:	4b44      	ldr	r3, [pc, #272]	; (8001c4c <inputseria+0x910>)
 8001b3c:	22e0      	movs	r2, #224	; 0xe0
 8001b3e:	f8a3 23b4 	strh.w	r2, [r3, #948]	; 0x3b4
	seria[119].interval = 988;
 8001b42:	4b42      	ldr	r3, [pc, #264]	; (8001c4c <inputseria+0x910>)
 8001b44:	4a42      	ldr	r2, [pc, #264]	; (8001c50 <inputseria+0x914>)
 8001b46:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
	seria[119].waittime = 224;
 8001b4a:	4b40      	ldr	r3, [pc, #256]	; (8001c4c <inputseria+0x910>)
 8001b4c:	22e0      	movs	r2, #224	; 0xe0
 8001b4e:	f8a3 23bc 	strh.w	r2, [r3, #956]	; 0x3bc
	seria[120].interval = 784;
 8001b52:	4b3e      	ldr	r3, [pc, #248]	; (8001c4c <inputseria+0x910>)
 8001b54:	4a44      	ldr	r2, [pc, #272]	; (8001c68 <inputseria+0x92c>)
 8001b56:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
	seria[120].waittime = 1169;
 8001b5a:	4b3c      	ldr	r3, [pc, #240]	; (8001c4c <inputseria+0x910>)
 8001b5c:	f240 4291 	movw	r2, #1169	; 0x491
 8001b60:	f8a3 23c4 	strh.w	r2, [r3, #964]	; 0x3c4
	seria[121].interval = 988;
 8001b64:	4b39      	ldr	r3, [pc, #228]	; (8001c4c <inputseria+0x910>)
 8001b66:	4a3a      	ldr	r2, [pc, #232]	; (8001c50 <inputseria+0x914>)
 8001b68:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
	seria[121].waittime = 224;
 8001b6c:	4b37      	ldr	r3, [pc, #220]	; (8001c4c <inputseria+0x910>)
 8001b6e:	22e0      	movs	r2, #224	; 0xe0
 8001b70:	f8a3 23cc 	strh.w	r2, [r3, #972]	; 0x3cc
	seria[122].interval = 784;
 8001b74:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <inputseria+0x910>)
 8001b76:	4a3c      	ldr	r2, [pc, #240]	; (8001c68 <inputseria+0x92c>)
 8001b78:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
	seria[122].waittime = 224;
 8001b7c:	4b33      	ldr	r3, [pc, #204]	; (8001c4c <inputseria+0x910>)
 8001b7e:	22e0      	movs	r2, #224	; 0xe0
 8001b80:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4
	seria[123].interval = 587;
 8001b84:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <inputseria+0x910>)
 8001b86:	4a3a      	ldr	r2, [pc, #232]	; (8001c70 <inputseria+0x934>)
 8001b88:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
	seria[123].waittime = 224;
 8001b8c:	4b2f      	ldr	r3, [pc, #188]	; (8001c4c <inputseria+0x910>)
 8001b8e:	22e0      	movs	r2, #224	; 0xe0
 8001b90:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
	seria[124].interval = 659;
 8001b94:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <inputseria+0x910>)
 8001b96:	4a35      	ldr	r2, [pc, #212]	; (8001c6c <inputseria+0x930>)
 8001b98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
	seria[124].waittime = 1400;
 8001b9c:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <inputseria+0x910>)
 8001b9e:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8001ba2:	f8a3 23e4 	strh.w	r2, [r3, #996]	; 0x3e4
	seria[125].interval = 294;
 8001ba6:	4b29      	ldr	r3, [pc, #164]	; (8001c4c <inputseria+0x910>)
 8001ba8:	4a32      	ldr	r2, [pc, #200]	; (8001c74 <inputseria+0x938>)
 8001baa:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
	seria[125].waittime = 224;
 8001bae:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <inputseria+0x910>)
 8001bb0:	22e0      	movs	r2, #224	; 0xe0
 8001bb2:	f8a3 23ec 	strh.w	r2, [r3, #1004]	; 0x3ec
	seria[126].interval = 330;
 8001bb6:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <inputseria+0x910>)
 8001bb8:	4a2f      	ldr	r2, [pc, #188]	; (8001c78 <inputseria+0x93c>)
 8001bba:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
	seria[126].waittime = 224;
 8001bbe:	4b23      	ldr	r3, [pc, #140]	; (8001c4c <inputseria+0x910>)
 8001bc0:	22e0      	movs	r2, #224	; 0xe0
 8001bc2:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4
	seria[127].interval = 349;
 8001bc6:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <inputseria+0x910>)
 8001bc8:	4a2c      	ldr	r2, [pc, #176]	; (8001c7c <inputseria+0x940>)
 8001bca:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
	seria[127].waittime = 462;
 8001bce:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <inputseria+0x910>)
 8001bd0:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001bd4:	f8a3 23fc 	strh.w	r2, [r3, #1020]	; 0x3fc
	seria[128].interval = 392;
 8001bd8:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <inputseria+0x910>)
 8001bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bde:	4a28      	ldr	r2, [pc, #160]	; (8001c80 <inputseria+0x944>)
 8001be0:	601a      	str	r2, [r3, #0]
	seria[128].waittime = 224;
 8001be2:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <inputseria+0x910>)
 8001be4:	22e0      	movs	r2, #224	; 0xe0
 8001be6:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	seria[129].interval = 440;
 8001bea:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <inputseria+0x910>)
 8001bec:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001bf0:	4a24      	ldr	r2, [pc, #144]	; (8001c84 <inputseria+0x948>)
 8001bf2:	601a      	str	r2, [r3, #0]
	seria[129].waittime = 224;
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <inputseria+0x910>)
 8001bf6:	22e0      	movs	r2, #224	; 0xe0
 8001bf8:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
	seria[130].interval = 494;
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <inputseria+0x910>)
 8001bfe:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8001c02:	4a21      	ldr	r2, [pc, #132]	; (8001c88 <inputseria+0x94c>)
 8001c04:	601a      	str	r2, [r3, #0]
	seria[130].waittime = 462;
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <inputseria+0x910>)
 8001c08:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001c0c:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
	seria[131].interval = 523;
 8001c10:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <inputseria+0x910>)
 8001c12:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8001c16:	4a1d      	ldr	r2, [pc, #116]	; (8001c8c <inputseria+0x950>)
 8001c18:	601a      	str	r2, [r3, #0]
	seria[131].waittime = 224;
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <inputseria+0x910>)
 8001c1c:	22e0      	movs	r2, #224	; 0xe0
 8001c1e:	f8a3 241c 	strh.w	r2, [r3, #1052]	; 0x41c
	seria[132].interval = 494;
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <inputseria+0x910>)
 8001c24:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8001c28:	4a17      	ldr	r2, [pc, #92]	; (8001c88 <inputseria+0x94c>)
 8001c2a:	601a      	str	r2, [r3, #0]
	seria[132].waittime = 224;
 8001c2c:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <inputseria+0x910>)
 8001c2e:	22e0      	movs	r2, #224	; 0xe0
 8001c30:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
	seria[133].interval = 330;
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <inputseria+0x910>)
 8001c36:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001c3a:	4a0f      	ldr	r2, [pc, #60]	; (8001c78 <inputseria+0x93c>)
 8001c3c:	601a      	str	r2, [r3, #0]
	seria[133].waittime = 1400;
 8001c3e:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <inputseria+0x910>)
 8001c40:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8001c44:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
 8001c48:	e022      	b.n	8001c90 <inputseria+0x954>
 8001c4a:	bf00      	nop
 8001c4c:	20000218 	.word	0x20000218
 8001c50:	44770000 	.word	0x44770000
 8001c54:	442e8000 	.word	0x442e8000
 8001c58:	445c0000 	.word	0x445c0000
 8001c5c:	44a4e000 	.word	0x44a4e000
 8001c60:	4492e000 	.word	0x4492e000
 8001c64:	4482e000 	.word	0x4482e000
 8001c68:	44440000 	.word	0x44440000
 8001c6c:	4424c000 	.word	0x4424c000
 8001c70:	4412c000 	.word	0x4412c000
 8001c74:	43930000 	.word	0x43930000
 8001c78:	43a50000 	.word	0x43a50000
 8001c7c:	43ae8000 	.word	0x43ae8000
 8001c80:	43c40000 	.word	0x43c40000
 8001c84:	43dc0000 	.word	0x43dc0000
 8001c88:	43f70000 	.word	0x43f70000
 8001c8c:	4402c000 	.word	0x4402c000
	seria[134].interval = 698;
 8001c90:	4ba7      	ldr	r3, [pc, #668]	; (8001f30 <inputseria+0xbf4>)
 8001c92:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8001c96:	4aa7      	ldr	r2, [pc, #668]	; (8001f34 <inputseria+0xbf8>)
 8001c98:	601a      	str	r2, [r3, #0]
	seria[134].waittime = 224;
 8001c9a:	4ba5      	ldr	r3, [pc, #660]	; (8001f30 <inputseria+0xbf4>)
 8001c9c:	22e0      	movs	r2, #224	; 0xe0
 8001c9e:	f8a3 2434 	strh.w	r2, [r3, #1076]	; 0x434
	seria[135].interval = 784;
 8001ca2:	4ba3      	ldr	r3, [pc, #652]	; (8001f30 <inputseria+0xbf4>)
 8001ca4:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8001ca8:	4aa3      	ldr	r2, [pc, #652]	; (8001f38 <inputseria+0xbfc>)
 8001caa:	601a      	str	r2, [r3, #0]
	seria[135].waittime = 224;
 8001cac:	4ba0      	ldr	r3, [pc, #640]	; (8001f30 <inputseria+0xbf4>)
 8001cae:	22e0      	movs	r2, #224	; 0xe0
 8001cb0:	f8a3 243c 	strh.w	r2, [r3, #1084]	; 0x43c
	seria[136].interval = 880;
 8001cb4:	4b9e      	ldr	r3, [pc, #632]	; (8001f30 <inputseria+0xbf4>)
 8001cb6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001cba:	4aa0      	ldr	r2, [pc, #640]	; (8001f3c <inputseria+0xc00>)
 8001cbc:	601a      	str	r2, [r3, #0]
	seria[136].waittime = 462;
 8001cbe:	4b9c      	ldr	r3, [pc, #624]	; (8001f30 <inputseria+0xbf4>)
 8001cc0:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001cc4:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444
	seria[137].interval = 988;
 8001cc8:	4b99      	ldr	r3, [pc, #612]	; (8001f30 <inputseria+0xbf4>)
 8001cca:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8001cce:	4a9c      	ldr	r2, [pc, #624]	; (8001f40 <inputseria+0xc04>)
 8001cd0:	601a      	str	r2, [r3, #0]
	seria[137].waittime = 224;
 8001cd2:	4b97      	ldr	r3, [pc, #604]	; (8001f30 <inputseria+0xbf4>)
 8001cd4:	22e0      	movs	r2, #224	; 0xe0
 8001cd6:	f8a3 244c 	strh.w	r2, [r3, #1100]	; 0x44c
	seria[138].interval = 1047;
 8001cda:	4b95      	ldr	r3, [pc, #596]	; (8001f30 <inputseria+0xbf4>)
 8001cdc:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8001ce0:	4a98      	ldr	r2, [pc, #608]	; (8001f44 <inputseria+0xc08>)
 8001ce2:	601a      	str	r2, [r3, #0]
	seria[138].waittime = 224;
 8001ce4:	4b92      	ldr	r3, [pc, #584]	; (8001f30 <inputseria+0xbf4>)
 8001ce6:	22e0      	movs	r2, #224	; 0xe0
 8001ce8:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
	seria[139].interval = 1175;
 8001cec:	4b90      	ldr	r3, [pc, #576]	; (8001f30 <inputseria+0xbf4>)
 8001cee:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 8001cf2:	4a95      	ldr	r2, [pc, #596]	; (8001f48 <inputseria+0xc0c>)
 8001cf4:	601a      	str	r2, [r3, #0]
	seria[139].waittime = 462;
 8001cf6:	4b8e      	ldr	r3, [pc, #568]	; (8001f30 <inputseria+0xbf4>)
 8001cf8:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001cfc:	f8a3 245c 	strh.w	r2, [r3, #1116]	; 0x45c
	seria[140].interval = 1319;
 8001d00:	4b8b      	ldr	r3, [pc, #556]	; (8001f30 <inputseria+0xbf4>)
 8001d02:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8001d06:	4a91      	ldr	r2, [pc, #580]	; (8001f4c <inputseria+0xc10>)
 8001d08:	601a      	str	r2, [r3, #0]
	seria[140].waittime = 224;
 8001d0a:	4b89      	ldr	r3, [pc, #548]	; (8001f30 <inputseria+0xbf4>)
 8001d0c:	22e0      	movs	r2, #224	; 0xe0
 8001d0e:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464
	seria[141].interval = 1397;
 8001d12:	4b87      	ldr	r3, [pc, #540]	; (8001f30 <inputseria+0xbf4>)
 8001d14:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 8001d18:	4a8d      	ldr	r2, [pc, #564]	; (8001f50 <inputseria+0xc14>)
 8001d1a:	601a      	str	r2, [r3, #0]
	seria[141].waittime = 224;
 8001d1c:	4b84      	ldr	r3, [pc, #528]	; (8001f30 <inputseria+0xbf4>)
 8001d1e:	22e0      	movs	r2, #224	; 0xe0
 8001d20:	f8a3 246c 	strh.w	r2, [r3, #1132]	; 0x46c
	seria[142].interval = 1568;
 8001d24:	4b82      	ldr	r3, [pc, #520]	; (8001f30 <inputseria+0xbf4>)
 8001d26:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8001d2a:	4a8a      	ldr	r2, [pc, #552]	; (8001f54 <inputseria+0xc18>)
 8001d2c:	601a      	str	r2, [r3, #0]
	seria[142].waittime = 1400;
 8001d2e:	4b80      	ldr	r3, [pc, #512]	; (8001f30 <inputseria+0xbf4>)
 8001d30:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8001d34:	f8a3 2474 	strh.w	r2, [r3, #1140]	; 0x474
	seria[143].interval = 294;
 8001d38:	4b7d      	ldr	r3, [pc, #500]	; (8001f30 <inputseria+0xbf4>)
 8001d3a:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8001d3e:	4a86      	ldr	r2, [pc, #536]	; (8001f58 <inputseria+0xc1c>)
 8001d40:	601a      	str	r2, [r3, #0]
	seria[143].waittime = 224;
 8001d42:	4b7b      	ldr	r3, [pc, #492]	; (8001f30 <inputseria+0xbf4>)
 8001d44:	22e0      	movs	r2, #224	; 0xe0
 8001d46:	f8a3 247c 	strh.w	r2, [r3, #1148]	; 0x47c
	seria[144].interval = 330;
 8001d4a:	4b79      	ldr	r3, [pc, #484]	; (8001f30 <inputseria+0xbf4>)
 8001d4c:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8001d50:	4a82      	ldr	r2, [pc, #520]	; (8001f5c <inputseria+0xc20>)
 8001d52:	601a      	str	r2, [r3, #0]
	seria[144].waittime = 224;
 8001d54:	4b76      	ldr	r3, [pc, #472]	; (8001f30 <inputseria+0xbf4>)
 8001d56:	22e0      	movs	r2, #224	; 0xe0
 8001d58:	f8a3 2484 	strh.w	r2, [r3, #1156]	; 0x484
	seria[145].interval = 349;
 8001d5c:	4b74      	ldr	r3, [pc, #464]	; (8001f30 <inputseria+0xbf4>)
 8001d5e:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8001d62:	4a7f      	ldr	r2, [pc, #508]	; (8001f60 <inputseria+0xc24>)
 8001d64:	601a      	str	r2, [r3, #0]
	seria[145].waittime = 462;
 8001d66:	4b72      	ldr	r3, [pc, #456]	; (8001f30 <inputseria+0xbf4>)
 8001d68:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001d6c:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
	seria[146].interval = 392;
 8001d70:	4b6f      	ldr	r3, [pc, #444]	; (8001f30 <inputseria+0xbf4>)
 8001d72:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8001d76:	4a7b      	ldr	r2, [pc, #492]	; (8001f64 <inputseria+0xc28>)
 8001d78:	601a      	str	r2, [r3, #0]
	seria[146].waittime = 224;
 8001d7a:	4b6d      	ldr	r3, [pc, #436]	; (8001f30 <inputseria+0xbf4>)
 8001d7c:	22e0      	movs	r2, #224	; 0xe0
 8001d7e:	f8a3 2494 	strh.w	r2, [r3, #1172]	; 0x494
	seria[147].interval = 440;
 8001d82:	4b6b      	ldr	r3, [pc, #428]	; (8001f30 <inputseria+0xbf4>)
 8001d84:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8001d88:	4a77      	ldr	r2, [pc, #476]	; (8001f68 <inputseria+0xc2c>)
 8001d8a:	601a      	str	r2, [r3, #0]
	seria[147].waittime = 224;
 8001d8c:	4b68      	ldr	r3, [pc, #416]	; (8001f30 <inputseria+0xbf4>)
 8001d8e:	22e0      	movs	r2, #224	; 0xe0
 8001d90:	f8a3 249c 	strh.w	r2, [r3, #1180]	; 0x49c
	seria[148].interval = 494;
 8001d94:	4b66      	ldr	r3, [pc, #408]	; (8001f30 <inputseria+0xbf4>)
 8001d96:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8001d9a:	4a74      	ldr	r2, [pc, #464]	; (8001f6c <inputseria+0xc30>)
 8001d9c:	601a      	str	r2, [r3, #0]
	seria[148].waittime = 462;
 8001d9e:	4b64      	ldr	r3, [pc, #400]	; (8001f30 <inputseria+0xbf4>)
 8001da0:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001da4:	f8a3 24a4 	strh.w	r2, [r3, #1188]	; 0x4a4
	seria[149].interval = 523;
 8001da8:	4b61      	ldr	r3, [pc, #388]	; (8001f30 <inputseria+0xbf4>)
 8001daa:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 8001dae:	4a70      	ldr	r2, [pc, #448]	; (8001f70 <inputseria+0xc34>)
 8001db0:	601a      	str	r2, [r3, #0]
	seria[149].waittime = 224;
 8001db2:	4b5f      	ldr	r3, [pc, #380]	; (8001f30 <inputseria+0xbf4>)
 8001db4:	22e0      	movs	r2, #224	; 0xe0
 8001db6:	f8a3 24ac 	strh.w	r2, [r3, #1196]	; 0x4ac
	seria[150].interval = 494;
 8001dba:	4b5d      	ldr	r3, [pc, #372]	; (8001f30 <inputseria+0xbf4>)
 8001dbc:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8001dc0:	4a6a      	ldr	r2, [pc, #424]	; (8001f6c <inputseria+0xc30>)
 8001dc2:	601a      	str	r2, [r3, #0]
	seria[150].waittime = 224;
 8001dc4:	4b5a      	ldr	r3, [pc, #360]	; (8001f30 <inputseria+0xbf4>)
 8001dc6:	22e0      	movs	r2, #224	; 0xe0
 8001dc8:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
	seria[151].interval = 330;
 8001dcc:	4b58      	ldr	r3, [pc, #352]	; (8001f30 <inputseria+0xbf4>)
 8001dce:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8001dd2:	4a62      	ldr	r2, [pc, #392]	; (8001f5c <inputseria+0xc20>)
 8001dd4:	601a      	str	r2, [r3, #0]
	seria[151].waittime = 1400;
 8001dd6:	4b56      	ldr	r3, [pc, #344]	; (8001f30 <inputseria+0xbf4>)
 8001dd8:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8001ddc:	f8a3 24bc 	strh.w	r2, [r3, #1212]	; 0x4bc
	seria[152].interval = 698;
 8001de0:	4b53      	ldr	r3, [pc, #332]	; (8001f30 <inputseria+0xbf4>)
 8001de2:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8001de6:	4a53      	ldr	r2, [pc, #332]	; (8001f34 <inputseria+0xbf8>)
 8001de8:	601a      	str	r2, [r3, #0]
	seria[152].waittime = 224;
 8001dea:	4b51      	ldr	r3, [pc, #324]	; (8001f30 <inputseria+0xbf4>)
 8001dec:	22e0      	movs	r2, #224	; 0xe0
 8001dee:	f8a3 24c4 	strh.w	r2, [r3, #1220]	; 0x4c4
	seria[153].interval = 659;
 8001df2:	4b4f      	ldr	r3, [pc, #316]	; (8001f30 <inputseria+0xbf4>)
 8001df4:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8001df8:	4a5e      	ldr	r2, [pc, #376]	; (8001f74 <inputseria+0xc38>)
 8001dfa:	601a      	str	r2, [r3, #0]
	seria[153].waittime = 105;
 8001dfc:	4b4c      	ldr	r3, [pc, #304]	; (8001f30 <inputseria+0xbf4>)
 8001dfe:	2269      	movs	r2, #105	; 0x69
 8001e00:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
	seria[154].interval = 880;
 8001e04:	4b4a      	ldr	r3, [pc, #296]	; (8001f30 <inputseria+0xbf4>)
 8001e06:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8001e0a:	4a4c      	ldr	r2, [pc, #304]	; (8001f3c <inputseria+0xc00>)
 8001e0c:	601a      	str	r2, [r3, #0]
	seria[154].waittime = 224;
 8001e0e:	4b48      	ldr	r3, [pc, #288]	; (8001f30 <inputseria+0xbf4>)
 8001e10:	22e0      	movs	r2, #224	; 0xe0
 8001e12:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4
	seria[155].interval = 784;
 8001e16:	4b46      	ldr	r3, [pc, #280]	; (8001f30 <inputseria+0xbf4>)
 8001e18:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8001e1c:	4a46      	ldr	r2, [pc, #280]	; (8001f38 <inputseria+0xbfc>)
 8001e1e:	601a      	str	r2, [r3, #0]
	seria[155].waittime = 105;
 8001e20:	4b43      	ldr	r3, [pc, #268]	; (8001f30 <inputseria+0xbf4>)
 8001e22:	2269      	movs	r2, #105	; 0x69
 8001e24:	f8a3 24dc 	strh.w	r2, [r3, #1244]	; 0x4dc
	seria[156].interval = 988;
 8001e28:	4b41      	ldr	r3, [pc, #260]	; (8001f30 <inputseria+0xbf4>)
 8001e2a:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8001e2e:	4a44      	ldr	r2, [pc, #272]	; (8001f40 <inputseria+0xc04>)
 8001e30:	601a      	str	r2, [r3, #0]
	seria[156].waittime = 224;
 8001e32:	4b3f      	ldr	r3, [pc, #252]	; (8001f30 <inputseria+0xbf4>)
 8001e34:	22e0      	movs	r2, #224	; 0xe0
 8001e36:	f8a3 24e4 	strh.w	r2, [r3, #1252]	; 0x4e4
	seria[157].interval = 880;
 8001e3a:	4b3d      	ldr	r3, [pc, #244]	; (8001f30 <inputseria+0xbf4>)
 8001e3c:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 8001e40:	4a3e      	ldr	r2, [pc, #248]	; (8001f3c <inputseria+0xc00>)
 8001e42:	601a      	str	r2, [r3, #0]
	seria[157].waittime = 105;
 8001e44:	4b3a      	ldr	r3, [pc, #232]	; (8001f30 <inputseria+0xbf4>)
 8001e46:	2269      	movs	r2, #105	; 0x69
 8001e48:	f8a3 24ec 	strh.w	r2, [r3, #1260]	; 0x4ec
	seria[158].interval = 1047;
 8001e4c:	4b38      	ldr	r3, [pc, #224]	; (8001f30 <inputseria+0xbf4>)
 8001e4e:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8001e52:	4a3c      	ldr	r2, [pc, #240]	; (8001f44 <inputseria+0xc08>)
 8001e54:	601a      	str	r2, [r3, #0]
	seria[158].waittime = 224;
 8001e56:	4b36      	ldr	r3, [pc, #216]	; (8001f30 <inputseria+0xbf4>)
 8001e58:	22e0      	movs	r2, #224	; 0xe0
 8001e5a:	f8a3 24f4 	strh.w	r2, [r3, #1268]	; 0x4f4
	seria[159].interval = 988;
 8001e5e:	4b34      	ldr	r3, [pc, #208]	; (8001f30 <inputseria+0xbf4>)
 8001e60:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
 8001e64:	4a36      	ldr	r2, [pc, #216]	; (8001f40 <inputseria+0xc04>)
 8001e66:	601a      	str	r2, [r3, #0]
	seria[159].waittime = 105;
 8001e68:	4b31      	ldr	r3, [pc, #196]	; (8001f30 <inputseria+0xbf4>)
 8001e6a:	2269      	movs	r2, #105	; 0x69
 8001e6c:	f8a3 24fc 	strh.w	r2, [r3, #1276]	; 0x4fc
	seria[160].interval = 1175;
 8001e70:	4b2f      	ldr	r3, [pc, #188]	; (8001f30 <inputseria+0xbf4>)
 8001e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e76:	4a34      	ldr	r2, [pc, #208]	; (8001f48 <inputseria+0xc0c>)
 8001e78:	601a      	str	r2, [r3, #0]
	seria[160].waittime = 224;
 8001e7a:	4b2d      	ldr	r3, [pc, #180]	; (8001f30 <inputseria+0xbf4>)
 8001e7c:	22e0      	movs	r2, #224	; 0xe0
 8001e7e:	f8a3 2504 	strh.w	r2, [r3, #1284]	; 0x504
	seria[161].interval = 1047;
 8001e82:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <inputseria+0xbf4>)
 8001e84:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8001e88:	4a2e      	ldr	r2, [pc, #184]	; (8001f44 <inputseria+0xc08>)
 8001e8a:	601a      	str	r2, [r3, #0]
	seria[161].waittime = 105;
 8001e8c:	4b28      	ldr	r3, [pc, #160]	; (8001f30 <inputseria+0xbf4>)
 8001e8e:	2269      	movs	r2, #105	; 0x69
 8001e90:	f8a3 250c 	strh.w	r2, [r3, #1292]	; 0x50c
	seria[162].interval = 1319;
 8001e94:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <inputseria+0xbf4>)
 8001e96:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8001e9a:	4a2c      	ldr	r2, [pc, #176]	; (8001f4c <inputseria+0xc10>)
 8001e9c:	601a      	str	r2, [r3, #0]
	seria[162].waittime = 224;
 8001e9e:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <inputseria+0xbf4>)
 8001ea0:	22e0      	movs	r2, #224	; 0xe0
 8001ea2:	f8a3 2514 	strh.w	r2, [r3, #1300]	; 0x514
	seria[163].interval = 1175;
 8001ea6:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <inputseria+0xbf4>)
 8001ea8:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8001eac:	4a26      	ldr	r2, [pc, #152]	; (8001f48 <inputseria+0xc0c>)
 8001eae:	601a      	str	r2, [r3, #0]
	seria[163].waittime = 105;
 8001eb0:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <inputseria+0xbf4>)
 8001eb2:	2269      	movs	r2, #105	; 0x69
 8001eb4:	f8a3 251c 	strh.w	r2, [r3, #1308]	; 0x51c
	seria[164].interval = 1397;
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <inputseria+0xbf4>)
 8001eba:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8001ebe:	4a24      	ldr	r2, [pc, #144]	; (8001f50 <inputseria+0xc14>)
 8001ec0:	601a      	str	r2, [r3, #0]
	seria[164].waittime = 224;
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <inputseria+0xbf4>)
 8001ec4:	22e0      	movs	r2, #224	; 0xe0
 8001ec6:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
	seria[165].interval = 1319;
 8001eca:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <inputseria+0xbf4>)
 8001ecc:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8001ed0:	4a1e      	ldr	r2, [pc, #120]	; (8001f4c <inputseria+0xc10>)
 8001ed2:	601a      	str	r2, [r3, #0]
	seria[165].waittime = 105;
 8001ed4:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <inputseria+0xbf4>)
 8001ed6:	2269      	movs	r2, #105	; 0x69
 8001ed8:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
	seria[166].interval = 988;
 8001edc:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <inputseria+0xbf4>)
 8001ede:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8001ee2:	4a17      	ldr	r2, [pc, #92]	; (8001f40 <inputseria+0xc04>)
 8001ee4:	601a      	str	r2, [r3, #0]
	seria[166].waittime = 105;
 8001ee6:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <inputseria+0xbf4>)
 8001ee8:	2269      	movs	r2, #105	; 0x69
 8001eea:	f8a3 2534 	strh.w	r2, [r3, #1332]	; 0x534
	seria[167].interval = 1047;
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <inputseria+0xbf4>)
 8001ef0:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8001ef4:	4a13      	ldr	r2, [pc, #76]	; (8001f44 <inputseria+0xc08>)
 8001ef6:	601a      	str	r2, [r3, #0]
	seria[167].waittime = 105;
 8001ef8:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <inputseria+0xbf4>)
 8001efa:	2269      	movs	r2, #105	; 0x69
 8001efc:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
	seria[168].interval = 880;
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <inputseria+0xbf4>)
 8001f02:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 8001f06:	4a0d      	ldr	r2, [pc, #52]	; (8001f3c <inputseria+0xc00>)
 8001f08:	601a      	str	r2, [r3, #0]
	seria[168].waittime = 105;
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <inputseria+0xbf4>)
 8001f0c:	2269      	movs	r2, #105	; 0x69
 8001f0e:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
	seria[169].interval = 988;
 8001f12:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <inputseria+0xbf4>)
 8001f14:	f503 63a9 	add.w	r3, r3, #1352	; 0x548
 8001f18:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <inputseria+0xc04>)
 8001f1a:	601a      	str	r2, [r3, #0]
	seria[169].waittime = 2576;
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <inputseria+0xbf4>)
 8001f1e:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 8001f22:	f8a3 254c 	strh.w	r2, [r3, #1356]	; 0x54c

}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	20000218 	.word	0x20000218
 8001f34:	442e8000 	.word	0x442e8000
 8001f38:	44440000 	.word	0x44440000
 8001f3c:	445c0000 	.word	0x445c0000
 8001f40:	44770000 	.word	0x44770000
 8001f44:	4482e000 	.word	0x4482e000
 8001f48:	4492e000 	.word	0x4492e000
 8001f4c:	44a4e000 	.word	0x44a4e000
 8001f50:	44aea000 	.word	0x44aea000
 8001f54:	44c40000 	.word	0x44c40000
 8001f58:	43930000 	.word	0x43930000
 8001f5c:	43a50000 	.word	0x43a50000
 8001f60:	43ae8000 	.word	0x43ae8000
 8001f64:	43c40000 	.word	0x43c40000
 8001f68:	43dc0000 	.word	0x43dc0000
 8001f6c:	43f70000 	.word	0x43f70000
 8001f70:	4402c000 	.word	0x4402c000
 8001f74:	4424c000 	.word	0x4424c000

08001f78 <pl_timer_init>:
#include "tim.h"

volatile uint32_t g_timCount;


void pl_timer_init(void){
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <pl_timer_init+0x10>)
 8001f7e:	f004 fd4b 	bl	8006a18 <HAL_TIM_Base_Start_IT>
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000940 	.word	0x20000940

08001f8c <pl_timer_count>:

void pl_timer_count(void){
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
	 g_timCount++;
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <pl_timer_count+0x18>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	3301      	adds	r3, #1
 8001f96:	4a03      	ldr	r2, [pc, #12]	; (8001fa4 <pl_timer_count+0x18>)
 8001f98:	6013      	str	r3, [r2, #0]
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	200007a8 	.word	0x200007a8

08001fa8 <wait_ms>:


void wait_ms(uint32_t wait_time) {
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <wait_ms+0x30>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <wait_ms+0x34>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	625a      	str	r2, [r3, #36]	; 0x24
        while (g_timCount < wait_time) {
 8001fbe:	bf00      	nop
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <wait_ms+0x30>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d8fa      	bhi.n	8001fc0 <wait_ms+0x18>
        }

}
 8001fca:	bf00      	nop
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	200007a8 	.word	0x200007a8
 8001fdc:	20000940 	.word	0x20000940

08001fe0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fe6:	463b      	mov	r3, r7
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
 8001ff4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ff6:	4b46      	ldr	r3, [pc, #280]	; (8002110 <MX_ADC1_Init+0x130>)
 8001ff8:	4a46      	ldr	r2, [pc, #280]	; (8002114 <MX_ADC1_Init+0x134>)
 8001ffa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8001ffc:	4b44      	ldr	r3, [pc, #272]	; (8002110 <MX_ADC1_Init+0x130>)
 8001ffe:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8002002:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8002004:	4b42      	ldr	r3, [pc, #264]	; (8002110 <MX_ADC1_Init+0x130>)
 8002006:	2208      	movs	r2, #8
 8002008:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800200a:	4b41      	ldr	r3, [pc, #260]	; (8002110 <MX_ADC1_Init+0x130>)
 800200c:	2200      	movs	r2, #0
 800200e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002010:	4b3f      	ldr	r3, [pc, #252]	; (8002110 <MX_ADC1_Init+0x130>)
 8002012:	2201      	movs	r2, #1
 8002014:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002016:	4b3e      	ldr	r3, [pc, #248]	; (8002110 <MX_ADC1_Init+0x130>)
 8002018:	2204      	movs	r2, #4
 800201a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800201c:	4b3c      	ldr	r3, [pc, #240]	; (8002110 <MX_ADC1_Init+0x130>)
 800201e:	2200      	movs	r2, #0
 8002020:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002022:	4b3b      	ldr	r3, [pc, #236]	; (8002110 <MX_ADC1_Init+0x130>)
 8002024:	2201      	movs	r2, #1
 8002026:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8002028:	4b39      	ldr	r3, [pc, #228]	; (8002110 <MX_ADC1_Init+0x130>)
 800202a:	2205      	movs	r2, #5
 800202c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800202e:	4b38      	ldr	r3, [pc, #224]	; (8002110 <MX_ADC1_Init+0x130>)
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002036:	4b36      	ldr	r3, [pc, #216]	; (8002110 <MX_ADC1_Init+0x130>)
 8002038:	2200      	movs	r2, #0
 800203a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800203c:	4b34      	ldr	r3, [pc, #208]	; (8002110 <MX_ADC1_Init+0x130>)
 800203e:	2200      	movs	r2, #0
 8002040:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002042:	4b33      	ldr	r3, [pc, #204]	; (8002110 <MX_ADC1_Init+0x130>)
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800204a:	4b31      	ldr	r3, [pc, #196]	; (8002110 <MX_ADC1_Init+0x130>)
 800204c:	2200      	movs	r2, #0
 800204e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002050:	4b2f      	ldr	r3, [pc, #188]	; (8002110 <MX_ADC1_Init+0x130>)
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002058:	482d      	ldr	r0, [pc, #180]	; (8002110 <MX_ADC1_Init+0x130>)
 800205a:	f001 fa79 	bl	8003550 <HAL_ADC_Init>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8002064:	f000 fb29 	bl	80026ba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8002068:	4b2b      	ldr	r3, [pc, #172]	; (8002118 <MX_ADC1_Init+0x138>)
 800206a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800206c:	2306      	movs	r3, #6
 800206e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8002070:	2302      	movs	r3, #2
 8002072:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002074:	237f      	movs	r3, #127	; 0x7f
 8002076:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002078:	2304      	movs	r3, #4
 800207a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002080:	463b      	mov	r3, r7
 8002082:	4619      	mov	r1, r3
 8002084:	4822      	ldr	r0, [pc, #136]	; (8002110 <MX_ADC1_Init+0x130>)
 8002086:	f001 fca5 	bl	80039d4 <HAL_ADC_ConfigChannel>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8002090:	f000 fb13 	bl	80026ba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002094:	4b21      	ldr	r3, [pc, #132]	; (800211c <MX_ADC1_Init+0x13c>)
 8002096:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002098:	230c      	movs	r3, #12
 800209a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800209c:	463b      	mov	r3, r7
 800209e:	4619      	mov	r1, r3
 80020a0:	481b      	ldr	r0, [pc, #108]	; (8002110 <MX_ADC1_Init+0x130>)
 80020a2:	f001 fc97 	bl	80039d4 <HAL_ADC_ConfigChannel>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80020ac:	f000 fb05 	bl	80026ba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <MX_ADC1_Init+0x140>)
 80020b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80020b4:	2312      	movs	r3, #18
 80020b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020b8:	463b      	mov	r3, r7
 80020ba:	4619      	mov	r1, r3
 80020bc:	4814      	ldr	r0, [pc, #80]	; (8002110 <MX_ADC1_Init+0x130>)
 80020be:	f001 fc89 	bl	80039d4 <HAL_ADC_ConfigChannel>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80020c8:	f000 faf7 	bl	80026ba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80020cc:	4b15      	ldr	r3, [pc, #84]	; (8002124 <MX_ADC1_Init+0x144>)
 80020ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80020d0:	2318      	movs	r3, #24
 80020d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020d4:	463b      	mov	r3, r7
 80020d6:	4619      	mov	r1, r3
 80020d8:	480d      	ldr	r0, [pc, #52]	; (8002110 <MX_ADC1_Init+0x130>)
 80020da:	f001 fc7b 	bl	80039d4 <HAL_ADC_ConfigChannel>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80020e4:	f000 fae9 	bl	80026ba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <MX_ADC1_Init+0x148>)
 80020ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80020ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020f2:	463b      	mov	r3, r7
 80020f4:	4619      	mov	r1, r3
 80020f6:	4806      	ldr	r0, [pc, #24]	; (8002110 <MX_ADC1_Init+0x130>)
 80020f8:	f001 fc6c 	bl	80039d4 <HAL_ADC_ConfigChannel>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8002102:	f000 fada 	bl	80026ba <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002106:	bf00      	nop
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200007ac 	.word	0x200007ac
 8002114:	50040000 	.word	0x50040000
 8002118:	43210000 	.word	0x43210000
 800211c:	3ef08000 	.word	0x3ef08000
 8002120:	32601000 	.word	0x32601000
 8002124:	2e300800 	.word	0x2e300800
 8002128:	2a000400 	.word	0x2a000400

0800212c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b0a0      	sub	sp, #128	; 0x80
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002144:	f107 0318 	add.w	r3, r7, #24
 8002148:	2254      	movs	r2, #84	; 0x54
 800214a:	2100      	movs	r1, #0
 800214c:	4618      	mov	r0, r3
 800214e:	f005 ffef 	bl	8008130 <memset>
  if(adcHandle->Instance==ADC1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a47      	ldr	r2, [pc, #284]	; (8002274 <HAL_ADC_MspInit+0x148>)
 8002158:	4293      	cmp	r3, r2
 800215a:	f040 8087 	bne.w	800226c <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800215e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002162:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002164:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002168:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800216a:	2303      	movs	r3, #3
 800216c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 3;
 800216e:	2303      	movs	r3, #3
 8002170:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002172:	2310      	movs	r3, #16
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002176:	2307      	movs	r3, #7
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800217a:	2302      	movs	r3, #2
 800217c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800217e:	2302      	movs	r3, #2
 8002180:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002182:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002186:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002188:	f107 0318 	add.w	r3, r7, #24
 800218c:	4618      	mov	r0, r3
 800218e:	f004 f903 	bl	8006398 <HAL_RCCEx_PeriphCLKConfig>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002198:	f000 fa8f 	bl	80026ba <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800219c:	4b36      	ldr	r3, [pc, #216]	; (8002278 <HAL_ADC_MspInit+0x14c>)
 800219e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a0:	4a35      	ldr	r2, [pc, #212]	; (8002278 <HAL_ADC_MspInit+0x14c>)
 80021a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a8:	4b33      	ldr	r3, [pc, #204]	; (8002278 <HAL_ADC_MspInit+0x14c>)
 80021aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b4:	4b30      	ldr	r3, [pc, #192]	; (8002278 <HAL_ADC_MspInit+0x14c>)
 80021b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b8:	4a2f      	ldr	r2, [pc, #188]	; (8002278 <HAL_ADC_MspInit+0x14c>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021c0:	4b2d      	ldr	r3, [pc, #180]	; (8002278 <HAL_ADC_MspInit+0x14c>)
 80021c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021cc:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <HAL_ADC_MspInit+0x14c>)
 80021ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d0:	4a29      	ldr	r2, [pc, #164]	; (8002278 <HAL_ADC_MspInit+0x14c>)
 80021d2:	f043 0302 	orr.w	r3, r3, #2
 80021d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d8:	4b27      	ldr	r3, [pc, #156]	; (8002278 <HAL_ADC_MspInit+0x14c>)
 80021da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = SENSOR_4_Pin|SENSOR_3_Pin|SENSOR_2_Pin;
 80021e4:	23e0      	movs	r3, #224	; 0xe0
 80021e6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80021e8:	230b      	movs	r3, #11
 80021ea:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021f4:	4619      	mov	r1, r3
 80021f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021fa:	f002 fd25 	bl	8004c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR_1_Pin|BATTERY_Pin;
 80021fe:	2303      	movs	r3, #3
 8002200:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002202:	230b      	movs	r3, #11
 8002204:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800220e:	4619      	mov	r1, r3
 8002210:	481a      	ldr	r0, [pc, #104]	; (800227c <HAL_ADC_MspInit+0x150>)
 8002212:	f002 fd19 	bl	8004c48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002216:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <HAL_ADC_MspInit+0x154>)
 8002218:	4a1a      	ldr	r2, [pc, #104]	; (8002284 <HAL_ADC_MspInit+0x158>)
 800221a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800221c:	4b18      	ldr	r3, [pc, #96]	; (8002280 <HAL_ADC_MspInit+0x154>)
 800221e:	2200      	movs	r2, #0
 8002220:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002222:	4b17      	ldr	r3, [pc, #92]	; (8002280 <HAL_ADC_MspInit+0x154>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002228:	4b15      	ldr	r3, [pc, #84]	; (8002280 <HAL_ADC_MspInit+0x154>)
 800222a:	2200      	movs	r2, #0
 800222c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800222e:	4b14      	ldr	r3, [pc, #80]	; (8002280 <HAL_ADC_MspInit+0x154>)
 8002230:	2280      	movs	r2, #128	; 0x80
 8002232:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002234:	4b12      	ldr	r3, [pc, #72]	; (8002280 <HAL_ADC_MspInit+0x154>)
 8002236:	f44f 7280 	mov.w	r2, #256	; 0x100
 800223a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800223c:	4b10      	ldr	r3, [pc, #64]	; (8002280 <HAL_ADC_MspInit+0x154>)
 800223e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002242:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002244:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <HAL_ADC_MspInit+0x154>)
 8002246:	2200      	movs	r2, #0
 8002248:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800224a:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <HAL_ADC_MspInit+0x154>)
 800224c:	2200      	movs	r2, #0
 800224e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002250:	480b      	ldr	r0, [pc, #44]	; (8002280 <HAL_ADC_MspInit+0x154>)
 8002252:	f002 fac3 	bl	80047dc <HAL_DMA_Init>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 800225c:	f000 fa2d 	bl	80026ba <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a07      	ldr	r2, [pc, #28]	; (8002280 <HAL_ADC_MspInit+0x154>)
 8002264:	64da      	str	r2, [r3, #76]	; 0x4c
 8002266:	4a06      	ldr	r2, [pc, #24]	; (8002280 <HAL_ADC_MspInit+0x154>)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800226c:	bf00      	nop
 800226e:	3780      	adds	r7, #128	; 0x80
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	50040000 	.word	0x50040000
 8002278:	40021000 	.word	0x40021000
 800227c:	48000400 	.word	0x48000400
 8002280:	20000810 	.word	0x20000810
 8002284:	40020008 	.word	0x40020008

08002288 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 8002290:	f7fe ff06 	bl	80010a0 <pl_callback_getSensor>

}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022a2:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <MX_DMA_Init+0x38>)
 80022a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a6:	4a0b      	ldr	r2, [pc, #44]	; (80022d4 <MX_DMA_Init+0x38>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6493      	str	r3, [r2, #72]	; 0x48
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <MX_DMA_Init+0x38>)
 80022b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	607b      	str	r3, [r7, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	200b      	movs	r0, #11
 80022c0:	f002 fa55 	bl	800476e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80022c4:	200b      	movs	r0, #11
 80022c6:	f002 fa6e 	bl	80047a6 <HAL_NVIC_EnableIRQ>

}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000

080022d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022de:	f107 030c 	add.w	r3, r7, #12
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	60da      	str	r2, [r3, #12]
 80022ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ee:	4b39      	ldr	r3, [pc, #228]	; (80023d4 <MX_GPIO_Init+0xfc>)
 80022f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f2:	4a38      	ldr	r2, [pc, #224]	; (80023d4 <MX_GPIO_Init+0xfc>)
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022fa:	4b36      	ldr	r3, [pc, #216]	; (80023d4 <MX_GPIO_Init+0xfc>)
 80022fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002306:	4b33      	ldr	r3, [pc, #204]	; (80023d4 <MX_GPIO_Init+0xfc>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	4a32      	ldr	r2, [pc, #200]	; (80023d4 <MX_GPIO_Init+0xfc>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002312:	4b30      	ldr	r3, [pc, #192]	; (80023d4 <MX_GPIO_Init+0xfc>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	607b      	str	r3, [r7, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800231e:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <MX_GPIO_Init+0xfc>)
 8002320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002322:	4a2c      	ldr	r2, [pc, #176]	; (80023d4 <MX_GPIO_Init+0xfc>)
 8002324:	f043 0302 	orr.w	r3, r3, #2
 8002328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800232a:	4b2a      	ldr	r3, [pc, #168]	; (80023d4 <MX_GPIO_Init+0xfc>)
 800232c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSORLED_1_Pin|SENSORLED_2_Pin, GPIO_PIN_RESET);
 8002336:	2200      	movs	r2, #0
 8002338:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800233c:	4826      	ldr	r0, [pc, #152]	; (80023d8 <MX_GPIO_Init+0x100>)
 800233e:	f002 fded 	bl	8004f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_ENABLE_Pin|MOTOR_CW_CCW_L_Pin, GPIO_PIN_RESET);
 8002342:	2200      	movs	r2, #0
 8002344:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800234c:	f002 fde6 	bl	8004f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INTERFACELED_Pin|MOTOR_CW_CCW_R_Pin|MD_RESET_Pin, GPIO_PIN_RESET);
 8002350:	2200      	movs	r2, #0
 8002352:	2138      	movs	r1, #56	; 0x38
 8002354:	4821      	ldr	r0, [pc, #132]	; (80023dc <MX_GPIO_Init+0x104>)
 8002356:	f002 fde1 	bl	8004f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SENSORLED_1_Pin|SENSORLED_2_Pin;
 800235a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800235e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002360:	2301      	movs	r3, #1
 8002362:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002368:	2300      	movs	r3, #0
 800236a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	4619      	mov	r1, r3
 8002372:	4819      	ldr	r0, [pc, #100]	; (80023d8 <MX_GPIO_Init+0x100>)
 8002374:	f002 fc68 	bl	8004c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_ENABLE_Pin|MOTOR_CW_CCW_L_Pin;
 8002378:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800237c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237e:	2301      	movs	r3, #1
 8002380:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238a:	f107 030c 	add.w	r3, r7, #12
 800238e:	4619      	mov	r1, r3
 8002390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002394:	f002 fc58 	bl	8004c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = INTERFACELED_Pin|MOTOR_CW_CCW_R_Pin|MD_RESET_Pin;
 8002398:	2338      	movs	r3, #56	; 0x38
 800239a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239c:	2301      	movs	r3, #1
 800239e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a8:	f107 030c 	add.w	r3, r7, #12
 80023ac:	4619      	mov	r1, r3
 80023ae:	480b      	ldr	r0, [pc, #44]	; (80023dc <MX_GPIO_Init+0x104>)
 80023b0:	f002 fc4a 	bl	8004c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SWITCH_1_Pin|SWITCH_2_Pin;
 80023b4:	23c0      	movs	r3, #192	; 0xc0
 80023b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b8:	2300      	movs	r3, #0
 80023ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	4619      	mov	r1, r3
 80023c6:	4805      	ldr	r0, [pc, #20]	; (80023dc <MX_GPIO_Init+0x104>)
 80023c8:	f002 fc3e 	bl	8004c48 <HAL_GPIO_Init>

}
 80023cc:	bf00      	nop
 80023ce:	3720      	adds	r7, #32
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40021000 	.word	0x40021000
 80023d8:	48000800 	.word	0x48000800
 80023dc:	48000400 	.word	0x48000400

080023e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023e4:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <MX_I2C1_Init+0x74>)
 80023e6:	4a1c      	ldr	r2, [pc, #112]	; (8002458 <MX_I2C1_Init+0x78>)
 80023e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80023ea:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <MX_I2C1_Init+0x74>)
 80023ec:	4a1b      	ldr	r2, [pc, #108]	; (800245c <MX_I2C1_Init+0x7c>)
 80023ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80023f0:	4b18      	ldr	r3, [pc, #96]	; (8002454 <MX_I2C1_Init+0x74>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023f6:	4b17      	ldr	r3, [pc, #92]	; (8002454 <MX_I2C1_Init+0x74>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023fc:	4b15      	ldr	r3, [pc, #84]	; (8002454 <MX_I2C1_Init+0x74>)
 80023fe:	2200      	movs	r2, #0
 8002400:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002402:	4b14      	ldr	r3, [pc, #80]	; (8002454 <MX_I2C1_Init+0x74>)
 8002404:	2200      	movs	r2, #0
 8002406:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002408:	4b12      	ldr	r3, [pc, #72]	; (8002454 <MX_I2C1_Init+0x74>)
 800240a:	2200      	movs	r2, #0
 800240c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <MX_I2C1_Init+0x74>)
 8002410:	2200      	movs	r2, #0
 8002412:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002414:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <MX_I2C1_Init+0x74>)
 8002416:	2200      	movs	r2, #0
 8002418:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800241a:	480e      	ldr	r0, [pc, #56]	; (8002454 <MX_I2C1_Init+0x74>)
 800241c:	f002 fd96 	bl	8004f4c <HAL_I2C_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002426:	f000 f948 	bl	80026ba <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800242a:	2100      	movs	r1, #0
 800242c:	4809      	ldr	r0, [pc, #36]	; (8002454 <MX_I2C1_Init+0x74>)
 800242e:	f003 f891 	bl	8005554 <HAL_I2CEx_ConfigAnalogFilter>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002438:	f000 f93f 	bl	80026ba <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800243c:	2100      	movs	r1, #0
 800243e:	4805      	ldr	r0, [pc, #20]	; (8002454 <MX_I2C1_Init+0x74>)
 8002440:	f003 f8d3 	bl	80055ea <HAL_I2CEx_ConfigDigitalFilter>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800244a:	f000 f936 	bl	80026ba <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000858 	.word	0x20000858
 8002458:	40005400 	.word	0x40005400
 800245c:	10909cec 	.word	0x10909cec

08002460 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b09e      	sub	sp, #120	; 0x78
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002478:	f107 0310 	add.w	r3, r7, #16
 800247c:	2254      	movs	r2, #84	; 0x54
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f005 fe55 	bl	8008130 <memset>
  if(i2cHandle->Instance==I2C1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a1f      	ldr	r2, [pc, #124]	; (8002508 <HAL_I2C_MspInit+0xa8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d137      	bne.n	8002500 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002490:	2340      	movs	r3, #64	; 0x40
 8002492:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002494:	2300      	movs	r3, #0
 8002496:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002498:	f107 0310 	add.w	r3, r7, #16
 800249c:	4618      	mov	r0, r3
 800249e:	f003 ff7b 	bl	8006398 <HAL_RCCEx_PeriphCLKConfig>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80024a8:	f000 f907 	bl	80026ba <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ac:	4b17      	ldr	r3, [pc, #92]	; (800250c <HAL_I2C_MspInit+0xac>)
 80024ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b0:	4a16      	ldr	r2, [pc, #88]	; (800250c <HAL_I2C_MspInit+0xac>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <HAL_I2C_MspInit+0xac>)
 80024ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024c4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024c8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024ca:	2312      	movs	r3, #18
 80024cc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024ce:	2301      	movs	r3, #1
 80024d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d2:	2303      	movs	r3, #3
 80024d4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024d6:	2304      	movs	r3, #4
 80024d8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024de:	4619      	mov	r1, r3
 80024e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e4:	f002 fbb0 	bl	8004c48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <HAL_I2C_MspInit+0xac>)
 80024ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ec:	4a07      	ldr	r2, [pc, #28]	; (800250c <HAL_I2C_MspInit+0xac>)
 80024ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024f2:	6593      	str	r3, [r2, #88]	; 0x58
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_I2C_MspInit+0xac>)
 80024f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002500:	bf00      	nop
 8002502:	3778      	adds	r7, #120	; 0x78
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40005400 	.word	0x40005400
 800250c:	40021000 	.word	0x40021000

08002510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002516:	f000 fd6c 	bl	8002ff2 <HAL_Init>
  /* USER CODE BEGIN Init */
 // setbuf(stdout, NULL);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800251a:	f000 f87f 	bl	800261c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800251e:	f7ff fedb 	bl	80022d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002522:	f000 fca3 	bl	8002e6c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8002526:	f000 faf9 	bl	8002b1c <MX_TIM6_Init>
  MX_I2C1_Init();
 800252a:	f7ff ff59 	bl	80023e0 <MX_I2C1_Init>
  MX_DMA_Init();
 800252e:	f7ff feb5 	bl	800229c <MX_DMA_Init>
  MX_ADC1_Init();
 8002532:	f7ff fd55 	bl	8001fe0 <MX_ADC1_Init>
  MX_TIM15_Init();
 8002536:	f000 fb27 	bl	8002b88 <MX_TIM15_Init>
  MX_TIM1_Init();
 800253a:	f000 fa05 	bl	8002948 <MX_TIM1_Init>
  MX_TIM2_Init();
 800253e:	f000 fa93 	bl	8002a68 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);//motor
 8002542:	482b      	ldr	r0, [pc, #172]	; (80025f0 <main+0xe0>)
 8002544:	f004 fa68 	bl	8006a18 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_MspInit(&htim1);//motor
 8002548:	4829      	ldr	r0, [pc, #164]	; (80025f0 <main+0xe0>)
 800254a:	f000 fba3 	bl	8002c94 <HAL_TIM_PWM_MspInit>
  HAL_TIM_Base_Start_IT(&htim2);//motor
 800254e:	4829      	ldr	r0, [pc, #164]	; (80025f4 <main+0xe4>)
 8002550:	f004 fa62 	bl	8006a18 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_MspInit(&htim2);//motor
 8002554:	4827      	ldr	r0, [pc, #156]	; (80025f4 <main+0xe4>)
 8002556:	f000 fb9d 	bl	8002c94 <HAL_TIM_PWM_MspInit>
  pl_speaker_init();
 800255a:	f7fe fe95 	bl	8001288 <pl_speaker_init>
  pl_timer_init();
 800255e:	f7ff fd0b 	bl	8001f78 <pl_timer_init>
  pl_lcd_init();
 8002562:	f7fe fd54 	bl	800100e <pl_lcd_init>

  pl_lcd_puts("Hello");
 8002566:	4824      	ldr	r0, [pc, #144]	; (80025f8 <main+0xe8>)
 8002568:	f7fe fd3c 	bl	8000fe4 <pl_lcd_puts>
  pl_lcd_pos(1, 0);
 800256c:	2100      	movs	r1, #0
 800256e:	2001      	movs	r0, #1
 8002570:	f7fe fd73 	bl	800105a <pl_lcd_pos>
  pl_lcd_puts("   STM32");
 8002574:	4821      	ldr	r0, [pc, #132]	; (80025fc <main+0xec>)
 8002576:	f7fe fd35 	bl	8000fe4 <pl_lcd_puts>
  HAL_Delay(500);
 800257a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800257e:	f000 fdad 	bl	80030dc <HAL_Delay>
  pl_lcd_clear();
 8002582:	f7fe fd85 	bl	8001090 <pl_lcd_clear>
  pl_lcd_pos(0, 0);
 8002586:	2100      	movs	r1, #0
 8002588:	2000      	movs	r0, #0
 800258a:	f7fe fd66 	bl	800105a <pl_lcd_pos>
  pl_lcd_puts("Mice");
 800258e:	481c      	ldr	r0, [pc, #112]	; (8002600 <main+0xf0>)
 8002590:	f7fe fd28 	bl	8000fe4 <pl_lcd_puts>
  pl_lcd_pos(1, 0);
 8002594:	2100      	movs	r1, #0
 8002596:	2001      	movs	r0, #1
 8002598:	f7fe fd5f 	bl	800105a <pl_lcd_pos>
  pl_lcd_puts("aaa");
 800259c:	4819      	ldr	r0, [pc, #100]	; (8002604 <main+0xf4>)
 800259e:	f7fe fd21 	bl	8000fe4 <pl_lcd_puts>
  HAL_Delay(100);
 80025a2:	2064      	movs	r0, #100	; 0x64
 80025a4:	f000 fd9a 	bl	80030dc <HAL_Delay>

  uint16_t cnt = 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	80fb      	strh	r3, [r7, #6]
  sensor_mode=1;
 80025ac:	4b16      	ldr	r3, [pc, #88]	; (8002608 <main+0xf8>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]
//     HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer) / sizeof(uint16_t));
//     int Batt1,Batt2;
//     Batt1=(int)g_V_batt;
//	 Batt2=(int)((g_V_batt-(float)Batt1)*100);
//	 printf("BATT=%d.%d\n",Batt1,Batt2);
	 printf("BATT=%f\n",g_V_batt);
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <main+0xfc>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fd ffc6 	bl	8000548 <__aeabi_f2d>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4813      	ldr	r0, [pc, #76]	; (8002610 <main+0x100>)
 80025c2:	f006 fa27 	bl	8008a14 <iprintf>
     printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d\n", g_sensor_on[0],g_sensor_on[1],g_sensor_on[2],g_sensor_on[3]);
 80025c6:	4b13      	ldr	r3, [pc, #76]	; (8002614 <main+0x104>)
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	4619      	mov	r1, r3
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <main+0x104>)
 80025ce:	885b      	ldrh	r3, [r3, #2]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <main+0x104>)
 80025d4:	889b      	ldrh	r3, [r3, #4]
 80025d6:	4618      	mov	r0, r3
 80025d8:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <main+0x104>)
 80025da:	88db      	ldrh	r3, [r3, #6]
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	4603      	mov	r3, r0
 80025e0:	480d      	ldr	r0, [pc, #52]	; (8002618 <main+0x108>)
 80025e2:	f006 fa17 	bl	8008a14 <iprintf>
     wait_ms(1000);
 80025e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025ea:	f7ff fcdd 	bl	8001fa8 <wait_ms>
	 printf("BATT=%f\n",g_V_batt);
 80025ee:	e7e0      	b.n	80025b2 <main+0xa2>
 80025f0:	200008a8 	.word	0x200008a8
 80025f4:	200008f4 	.word	0x200008f4
 80025f8:	0800abb8 	.word	0x0800abb8
 80025fc:	0800abc0 	.word	0x0800abc0
 8002600:	0800abcc 	.word	0x0800abcc
 8002604:	0800abd4 	.word	0x0800abd4
 8002608:	20000203 	.word	0x20000203
 800260c:	20000214 	.word	0x20000214
 8002610:	0800abd8 	.word	0x0800abd8
 8002614:	20000204 	.word	0x20000204
 8002618:	0800abe4 	.word	0x0800abe4

0800261c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b096      	sub	sp, #88	; 0x58
 8002620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002622:	f107 0314 	add.w	r3, r7, #20
 8002626:	2244      	movs	r2, #68	; 0x44
 8002628:	2100      	movs	r1, #0
 800262a:	4618      	mov	r0, r3
 800262c:	f005 fd80 	bl	8008130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002630:	463b      	mov	r3, r7
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	60da      	str	r2, [r3, #12]
 800263c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800263e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002642:	f003 f82d 	bl	80056a0 <HAL_PWREx_ControlVoltageScaling>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800264c:	f000 f835 	bl	80026ba <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002650:	2301      	movs	r3, #1
 8002652:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002654:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002658:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800265a:	2302      	movs	r3, #2
 800265c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800265e:	2303      	movs	r3, #3
 8002660:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 3;
 8002662:	2303      	movs	r3, #3
 8002664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002666:	2328      	movs	r3, #40	; 0x28
 8002668:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800266a:	2307      	movs	r3, #7
 800266c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800266e:	2302      	movs	r3, #2
 8002670:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002672:	2302      	movs	r3, #2
 8002674:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002676:	f107 0314 	add.w	r3, r7, #20
 800267a:	4618      	mov	r0, r3
 800267c:	f003 f866 	bl	800574c <HAL_RCC_OscConfig>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002686:	f000 f818 	bl	80026ba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800268a:	230f      	movs	r3, #15
 800268c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800268e:	2303      	movs	r3, #3
 8002690:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800269e:	463b      	mov	r3, r7
 80026a0:	2104      	movs	r1, #4
 80026a2:	4618      	mov	r0, r3
 80026a4:	f003 fc72 	bl	8005f8c <HAL_RCC_ClockConfig>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80026ae:	f000 f804 	bl	80026ba <Error_Handler>
  }
}
 80026b2:	bf00      	nop
 80026b4:	3758      	adds	r7, #88	; 0x58
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026be:	b672      	cpsid	i
}
 80026c0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026c2:	e7fe      	b.n	80026c2 <Error_Handler+0x8>

080026c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ca:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <HAL_MspInit+0x44>)
 80026cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ce:	4a0e      	ldr	r2, [pc, #56]	; (8002708 <HAL_MspInit+0x44>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	6613      	str	r3, [r2, #96]	; 0x60
 80026d6:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <HAL_MspInit+0x44>)
 80026d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	607b      	str	r3, [r7, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_MspInit+0x44>)
 80026e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e6:	4a08      	ldr	r2, [pc, #32]	; (8002708 <HAL_MspInit+0x44>)
 80026e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ec:	6593      	str	r3, [r2, #88]	; 0x58
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_MspInit+0x44>)
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000

0800270c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002710:	e7fe      	b.n	8002710 <NMI_Handler+0x4>

08002712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002716:	e7fe      	b.n	8002716 <HardFault_Handler+0x4>

08002718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800271c:	e7fe      	b.n	800271c <MemManage_Handler+0x4>

0800271e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800271e:	b480      	push	{r7}
 8002720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002722:	e7fe      	b.n	8002722 <BusFault_Handler+0x4>

08002724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002728:	e7fe      	b.n	8002728 <UsageFault_Handler+0x4>

0800272a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002746:	b480      	push	{r7}
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002758:	f000 fca0 	bl	800309c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800275c:	bf00      	nop
 800275e:	bd80      	pop	{r7, pc}

08002760 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002764:	4802      	ldr	r0, [pc, #8]	; (8002770 <DMA1_Channel1_IRQHandler+0x10>)
 8002766:	f002 f98f 	bl	8004a88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000810 	.word	0x20000810

08002774 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002778:	4804      	ldr	r0, [pc, #16]	; (800278c <TIM6_DAC_IRQHandler+0x18>)
 800277a:	f004 f9f8 	bl	8006b6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  pl_timer_count();
 800277e:	f7ff fc05 	bl	8001f8c <pl_timer_count>
  pl_interupt_getSensor();
 8002782:	f7fe fd6d 	bl	8001260 <pl_interupt_getSensor>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000940 	.word	0x20000940

08002790 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
	return 1;
 8002794:	2301      	movs	r3, #1
}
 8002796:	4618      	mov	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <_kill>:

int _kill(int pid, int sig)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027aa:	f005 fc97 	bl	80080dc <__errno>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2216      	movs	r2, #22
 80027b2:	601a      	str	r2, [r3, #0]
	return -1;
 80027b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <_exit>:

void _exit (int status)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027c8:	f04f 31ff 	mov.w	r1, #4294967295
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff ffe7 	bl	80027a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80027d2:	e7fe      	b.n	80027d2 <_exit+0x12>

080027d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	e00a      	b.n	80027fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027e6:	f3af 8000 	nop.w
 80027ea:	4601      	mov	r1, r0
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	60ba      	str	r2, [r7, #8]
 80027f2:	b2ca      	uxtb	r2, r1
 80027f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	3301      	adds	r3, #1
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	429a      	cmp	r2, r3
 8002802:	dbf0      	blt.n	80027e6 <_read+0x12>
	}

return len;
 8002804:	687b      	ldr	r3, [r7, #4]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	e00a      	b.n	8002838 <_write+0x28>
	{
		HAL_UART_Transmit(&huart2, ptr++, 1, 1);
 8002822:	68b9      	ldr	r1, [r7, #8]
 8002824:	1c4b      	adds	r3, r1, #1
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	2301      	movs	r3, #1
 800282a:	2201      	movs	r2, #1
 800282c:	4807      	ldr	r0, [pc, #28]	; (800284c <_write+0x3c>)
 800282e:	f005 f82b 	bl	8007888 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	3301      	adds	r3, #1
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	429a      	cmp	r2, r3
 800283e:	dbf0      	blt.n	8002822 <_write+0x12>
	}
	return len;
 8002840:	687b      	ldr	r3, [r7, #4]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	200009d8 	.word	0x200009d8

08002850 <_close>:

int _close(int file)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
	return -1;
 8002858:	f04f 33ff 	mov.w	r3, #4294967295
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002878:	605a      	str	r2, [r3, #4]
	return 0;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <_isatty>:

int _isatty(int file)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	return 1;
 8002890:	2301      	movs	r3, #1
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800289e:	b480      	push	{r7}
 80028a0:	b085      	sub	sp, #20
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
	return 0;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028c0:	4a14      	ldr	r2, [pc, #80]	; (8002914 <_sbrk+0x5c>)
 80028c2:	4b15      	ldr	r3, [pc, #84]	; (8002918 <_sbrk+0x60>)
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028cc:	4b13      	ldr	r3, [pc, #76]	; (800291c <_sbrk+0x64>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d102      	bne.n	80028da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028d4:	4b11      	ldr	r3, [pc, #68]	; (800291c <_sbrk+0x64>)
 80028d6:	4a12      	ldr	r2, [pc, #72]	; (8002920 <_sbrk+0x68>)
 80028d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028da:	4b10      	ldr	r3, [pc, #64]	; (800291c <_sbrk+0x64>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d207      	bcs.n	80028f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028e8:	f005 fbf8 	bl	80080dc <__errno>
 80028ec:	4603      	mov	r3, r0
 80028ee:	220c      	movs	r2, #12
 80028f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028f2:	f04f 33ff 	mov.w	r3, #4294967295
 80028f6:	e009      	b.n	800290c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028f8:	4b08      	ldr	r3, [pc, #32]	; (800291c <_sbrk+0x64>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028fe:	4b07      	ldr	r3, [pc, #28]	; (800291c <_sbrk+0x64>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	4a05      	ldr	r2, [pc, #20]	; (800291c <_sbrk+0x64>)
 8002908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800290a:	68fb      	ldr	r3, [r7, #12]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20010000 	.word	0x20010000
 8002918:	00000400 	.word	0x00000400
 800291c:	200008a4 	.word	0x200008a4
 8002920:	20000a70 	.word	0x20000a70

08002924 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <SystemInit+0x20>)
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292e:	4a05      	ldr	r2, [pc, #20]	; (8002944 <SystemInit+0x20>)
 8002930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b096      	sub	sp, #88	; 0x58
 800294c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800294e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	605a      	str	r2, [r3, #4]
 8002958:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800295a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	605a      	str	r2, [r3, #4]
 8002964:	609a      	str	r2, [r3, #8]
 8002966:	60da      	str	r2, [r3, #12]
 8002968:	611a      	str	r2, [r3, #16]
 800296a:	615a      	str	r2, [r3, #20]
 800296c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800296e:	1d3b      	adds	r3, r7, #4
 8002970:	222c      	movs	r2, #44	; 0x2c
 8002972:	2100      	movs	r1, #0
 8002974:	4618      	mov	r0, r3
 8002976:	f005 fbdb 	bl	8008130 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800297a:	4b39      	ldr	r3, [pc, #228]	; (8002a60 <MX_TIM1_Init+0x118>)
 800297c:	4a39      	ldr	r2, [pc, #228]	; (8002a64 <MX_TIM1_Init+0x11c>)
 800297e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8002980:	4b37      	ldr	r3, [pc, #220]	; (8002a60 <MX_TIM1_Init+0x118>)
 8002982:	220f      	movs	r2, #15
 8002984:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002986:	4b36      	ldr	r3, [pc, #216]	; (8002a60 <MX_TIM1_Init+0x118>)
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 800298c:	4b34      	ldr	r3, [pc, #208]	; (8002a60 <MX_TIM1_Init+0x118>)
 800298e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002992:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002994:	4b32      	ldr	r3, [pc, #200]	; (8002a60 <MX_TIM1_Init+0x118>)
 8002996:	2200      	movs	r2, #0
 8002998:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800299a:	4b31      	ldr	r3, [pc, #196]	; (8002a60 <MX_TIM1_Init+0x118>)
 800299c:	2200      	movs	r2, #0
 800299e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029a0:	4b2f      	ldr	r3, [pc, #188]	; (8002a60 <MX_TIM1_Init+0x118>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80029a6:	482e      	ldr	r0, [pc, #184]	; (8002a60 <MX_TIM1_Init+0x118>)
 80029a8:	f004 f88a 	bl	8006ac0 <HAL_TIM_PWM_Init>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80029b2:	f7ff fe82 	bl	80026ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029b6:	2300      	movs	r3, #0
 80029b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80029ba:	2300      	movs	r3, #0
 80029bc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029be:	2300      	movs	r3, #0
 80029c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029c6:	4619      	mov	r1, r3
 80029c8:	4825      	ldr	r0, [pc, #148]	; (8002a60 <MX_TIM1_Init+0x118>)
 80029ca:	f004 fe13 	bl	80075f4 <HAL_TIMEx_MasterConfigSynchronization>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80029d4:	f7ff fe71 	bl	80026ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029d8:	2360      	movs	r3, #96	; 0x60
 80029da:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 5000-1;
 80029dc:	f241 3387 	movw	r3, #4999	; 0x1387
 80029e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029e2:	2300      	movs	r3, #0
 80029e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80029e6:	2300      	movs	r3, #0
 80029e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80029ee:	2300      	movs	r3, #0
 80029f0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80029f2:	2300      	movs	r3, #0
 80029f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029fa:	2200      	movs	r2, #0
 80029fc:	4619      	mov	r1, r3
 80029fe:	4818      	ldr	r0, [pc, #96]	; (8002a60 <MX_TIM1_Init+0x118>)
 8002a00:	f004 f9d4 	bl	8006dac <HAL_TIM_PWM_ConfigChannel>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8002a0a:	f7ff fe56 	bl	80026ba <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a26:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002a30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a3e:	1d3b      	adds	r3, r7, #4
 8002a40:	4619      	mov	r1, r3
 8002a42:	4807      	ldr	r0, [pc, #28]	; (8002a60 <MX_TIM1_Init+0x118>)
 8002a44:	f004 fe3c 	bl	80076c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8002a4e:	f7ff fe34 	bl	80026ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002a52:	4803      	ldr	r0, [pc, #12]	; (8002a60 <MX_TIM1_Init+0x118>)
 8002a54:	f000 f98a 	bl	8002d6c <HAL_TIM_MspPostInit>

}
 8002a58:	bf00      	nop
 8002a5a:	3758      	adds	r7, #88	; 0x58
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	200008a8 	.word	0x200008a8
 8002a64:	40012c00 	.word	0x40012c00

08002a68 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08a      	sub	sp, #40	; 0x28
 8002a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a6e:	f107 031c 	add.w	r3, r7, #28
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	605a      	str	r2, [r3, #4]
 8002a78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a7a:	463b      	mov	r3, r7
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
 8002a88:	615a      	str	r2, [r3, #20]
 8002a8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a8c:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <MX_TIM2_Init+0xb0>)
 8002a8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8002a94:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <MX_TIM2_Init+0xb0>)
 8002a96:	220f      	movs	r2, #15
 8002a98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a9a:	4b1f      	ldr	r3, [pc, #124]	; (8002b18 <MX_TIM2_Init+0xb0>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <MX_TIM2_Init+0xb0>)
 8002aa2:	f242 720f 	movw	r2, #9999	; 0x270f
 8002aa6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <MX_TIM2_Init+0xb0>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aae:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <MX_TIM2_Init+0xb0>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002ab4:	4818      	ldr	r0, [pc, #96]	; (8002b18 <MX_TIM2_Init+0xb0>)
 8002ab6:	f004 f803 	bl	8006ac0 <HAL_TIM_PWM_Init>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002ac0:	f7ff fdfb 	bl	80026ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002acc:	f107 031c 	add.w	r3, r7, #28
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4811      	ldr	r0, [pc, #68]	; (8002b18 <MX_TIM2_Init+0xb0>)
 8002ad4:	f004 fd8e 	bl	80075f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002ade:	f7ff fdec 	bl	80026ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ae2:	2360      	movs	r3, #96	; 0x60
 8002ae4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000-1;
 8002ae6:	f241 3387 	movw	r3, #4999	; 0x1387
 8002aea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002af4:	463b      	mov	r3, r7
 8002af6:	2204      	movs	r2, #4
 8002af8:	4619      	mov	r1, r3
 8002afa:	4807      	ldr	r0, [pc, #28]	; (8002b18 <MX_TIM2_Init+0xb0>)
 8002afc:	f004 f956 	bl	8006dac <HAL_TIM_PWM_ConfigChannel>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002b06:	f7ff fdd8 	bl	80026ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002b0a:	4803      	ldr	r0, [pc, #12]	; (8002b18 <MX_TIM2_Init+0xb0>)
 8002b0c:	f000 f92e 	bl	8002d6c <HAL_TIM_MspPostInit>

}
 8002b10:	bf00      	nop
 8002b12:	3728      	adds	r7, #40	; 0x28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	200008f4 	.word	0x200008f4

08002b1c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b22:	1d3b      	adds	r3, r7, #4
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002b2c:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <MX_TIM6_Init+0x64>)
 8002b2e:	4a15      	ldr	r2, [pc, #84]	; (8002b84 <MX_TIM6_Init+0x68>)
 8002b30:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 8002b32:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <MX_TIM6_Init+0x64>)
 8002b34:	224f      	movs	r2, #79	; 0x4f
 8002b36:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b38:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <MX_TIM6_Init+0x64>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002b3e:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <MX_TIM6_Init+0x64>)
 8002b40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b44:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b46:	4b0e      	ldr	r3, [pc, #56]	; (8002b80 <MX_TIM6_Init+0x64>)
 8002b48:	2280      	movs	r2, #128	; 0x80
 8002b4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002b4c:	480c      	ldr	r0, [pc, #48]	; (8002b80 <MX_TIM6_Init+0x64>)
 8002b4e:	f003 ff0b 	bl	8006968 <HAL_TIM_Base_Init>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002b58:	f7ff fdaf 	bl	80026ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002b64:	1d3b      	adds	r3, r7, #4
 8002b66:	4619      	mov	r1, r3
 8002b68:	4805      	ldr	r0, [pc, #20]	; (8002b80 <MX_TIM6_Init+0x64>)
 8002b6a:	f004 fd43 	bl	80075f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002b74:	f7ff fda1 	bl	80026ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002b78:	bf00      	nop
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20000940 	.word	0x20000940
 8002b84:	40001000 	.word	0x40001000

08002b88 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b096      	sub	sp, #88	; 0x58
 8002b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	605a      	str	r2, [r3, #4]
 8002ba4:	609a      	str	r2, [r3, #8]
 8002ba6:	60da      	str	r2, [r3, #12]
 8002ba8:	611a      	str	r2, [r3, #16]
 8002baa:	615a      	str	r2, [r3, #20]
 8002bac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	222c      	movs	r2, #44	; 0x2c
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f005 fabb 	bl	8008130 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002bba:	4b34      	ldr	r3, [pc, #208]	; (8002c8c <MX_TIM15_Init+0x104>)
 8002bbc:	4a34      	ldr	r2, [pc, #208]	; (8002c90 <MX_TIM15_Init+0x108>)
 8002bbe:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 16-1;
 8002bc0:	4b32      	ldr	r3, [pc, #200]	; (8002c8c <MX_TIM15_Init+0x104>)
 8002bc2:	220f      	movs	r2, #15
 8002bc4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc6:	4b31      	ldr	r3, [pc, #196]	; (8002c8c <MX_TIM15_Init+0x104>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 5000-1;
 8002bcc:	4b2f      	ldr	r3, [pc, #188]	; (8002c8c <MX_TIM15_Init+0x104>)
 8002bce:	f241 3287 	movw	r2, #4999	; 0x1387
 8002bd2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd4:	4b2d      	ldr	r3, [pc, #180]	; (8002c8c <MX_TIM15_Init+0x104>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002bda:	4b2c      	ldr	r3, [pc, #176]	; (8002c8c <MX_TIM15_Init+0x104>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002be0:	4b2a      	ldr	r3, [pc, #168]	; (8002c8c <MX_TIM15_Init+0x104>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002be6:	4829      	ldr	r0, [pc, #164]	; (8002c8c <MX_TIM15_Init+0x104>)
 8002be8:	f003 ff6a 	bl	8006ac0 <HAL_TIM_PWM_Init>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8002bf2:	f7ff fd62 	bl	80026ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002bfe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c02:	4619      	mov	r1, r3
 8002c04:	4821      	ldr	r0, [pc, #132]	; (8002c8c <MX_TIM15_Init+0x104>)
 8002c06:	f004 fcf5 	bl	80075f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002c10:	f7ff fd53 	bl	80026ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c14:	2360      	movs	r3, #96	; 0x60
 8002c16:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 2500-1;
 8002c18:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8002c1c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c22:	2300      	movs	r3, #0
 8002c24:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c36:	2204      	movs	r2, #4
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4814      	ldr	r0, [pc, #80]	; (8002c8c <MX_TIM15_Init+0x104>)
 8002c3c:	f004 f8b6 	bl	8006dac <HAL_TIM_PWM_ConfigChannel>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 8002c46:	f7ff fd38 	bl	80026ba <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c64:	2300      	movs	r3, #0
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002c68:	1d3b      	adds	r3, r7, #4
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4807      	ldr	r0, [pc, #28]	; (8002c8c <MX_TIM15_Init+0x104>)
 8002c6e:	f004 fd27 	bl	80076c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <MX_TIM15_Init+0xf4>
  {
    Error_Handler();
 8002c78:	f7ff fd1f 	bl	80026ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002c7c:	4803      	ldr	r0, [pc, #12]	; (8002c8c <MX_TIM15_Init+0x104>)
 8002c7e:	f000 f875 	bl	8002d6c <HAL_TIM_MspPostInit>

}
 8002c82:	bf00      	nop
 8002c84:	3758      	adds	r7, #88	; 0x58
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	2000098c 	.word	0x2000098c
 8002c90:	40014000 	.word	0x40014000

08002c94 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a1c      	ldr	r2, [pc, #112]	; (8002d14 <HAL_TIM_PWM_MspInit+0x80>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ca6:	4b1c      	ldr	r3, [pc, #112]	; (8002d18 <HAL_TIM_PWM_MspInit+0x84>)
 8002ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002caa:	4a1b      	ldr	r2, [pc, #108]	; (8002d18 <HAL_TIM_PWM_MspInit+0x84>)
 8002cac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002cb0:	6613      	str	r3, [r2, #96]	; 0x60
 8002cb2:	4b19      	ldr	r3, [pc, #100]	; (8002d18 <HAL_TIM_PWM_MspInit+0x84>)
 8002cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002cbe:	e022      	b.n	8002d06 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM2)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cca:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <HAL_TIM_PWM_MspInit+0x84>)
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cce:	4a12      	ldr	r2, [pc, #72]	; (8002d18 <HAL_TIM_PWM_MspInit+0x84>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6593      	str	r3, [r2, #88]	; 0x58
 8002cd6:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <HAL_TIM_PWM_MspInit+0x84>)
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]
}
 8002ce2:	e010      	b.n	8002d06 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM15)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a0c      	ldr	r2, [pc, #48]	; (8002d1c <HAL_TIM_PWM_MspInit+0x88>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d10b      	bne.n	8002d06 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002cee:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <HAL_TIM_PWM_MspInit+0x84>)
 8002cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf2:	4a09      	ldr	r2, [pc, #36]	; (8002d18 <HAL_TIM_PWM_MspInit+0x84>)
 8002cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf8:	6613      	str	r3, [r2, #96]	; 0x60
 8002cfa:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <HAL_TIM_PWM_MspInit+0x84>)
 8002cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]
}
 8002d06:	bf00      	nop
 8002d08:	371c      	adds	r7, #28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40012c00 	.word	0x40012c00
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40014000 	.word	0x40014000

08002d20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a0d      	ldr	r2, [pc, #52]	; (8002d64 <HAL_TIM_Base_MspInit+0x44>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d113      	bne.n	8002d5a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d32:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <HAL_TIM_Base_MspInit+0x48>)
 8002d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d36:	4a0c      	ldr	r2, [pc, #48]	; (8002d68 <HAL_TIM_Base_MspInit+0x48>)
 8002d38:	f043 0310 	orr.w	r3, r3, #16
 8002d3c:	6593      	str	r3, [r2, #88]	; 0x58
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <HAL_TIM_Base_MspInit+0x48>)
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d42:	f003 0310 	and.w	r3, r3, #16
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	2036      	movs	r0, #54	; 0x36
 8002d50:	f001 fd0d 	bl	800476e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d54:	2036      	movs	r0, #54	; 0x36
 8002d56:	f001 fd26 	bl	80047a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40001000 	.word	0x40001000
 8002d68:	40021000 	.word	0x40021000

08002d6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	; 0x28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d74:	f107 0314 	add.w	r3, r7, #20
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a35      	ldr	r2, [pc, #212]	; (8002e60 <HAL_TIM_MspPostInit+0xf4>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d11e      	bne.n	8002dcc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8e:	4b35      	ldr	r3, [pc, #212]	; (8002e64 <HAL_TIM_MspPostInit+0xf8>)
 8002d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d92:	4a34      	ldr	r2, [pc, #208]	; (8002e64 <HAL_TIM_MspPostInit+0xf8>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d9a:	4b32      	ldr	r3, [pc, #200]	; (8002e64 <HAL_TIM_MspPostInit+0xf8>)
 8002d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_CLOCK_L_Pin;
 8002da6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dac:	2302      	movs	r3, #2
 8002dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db4:	2300      	movs	r3, #0
 8002db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002db8:	2301      	movs	r3, #1
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_CLOCK_L_GPIO_Port, &GPIO_InitStruct);
 8002dbc:	f107 0314 	add.w	r3, r7, #20
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dc6:	f001 ff3f 	bl	8004c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002dca:	e044      	b.n	8002e56 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM2)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd4:	d11d      	bne.n	8002e12 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd6:	4b23      	ldr	r3, [pc, #140]	; (8002e64 <HAL_TIM_MspPostInit+0xf8>)
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dda:	4a22      	ldr	r2, [pc, #136]	; (8002e64 <HAL_TIM_MspPostInit+0xf8>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002de2:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <HAL_TIM_MspPostInit+0xf8>)
 8002de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_CLOCK_R_Pin;
 8002dee:	2302      	movs	r3, #2
 8002df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df2:	2302      	movs	r3, #2
 8002df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_CLOCK_R_GPIO_Port, &GPIO_InitStruct);
 8002e02:	f107 0314 	add.w	r3, r7, #20
 8002e06:	4619      	mov	r1, r3
 8002e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e0c:	f001 ff1c 	bl	8004c48 <HAL_GPIO_Init>
}
 8002e10:	e021      	b.n	8002e56 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM15)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a14      	ldr	r2, [pc, #80]	; (8002e68 <HAL_TIM_MspPostInit+0xfc>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d11c      	bne.n	8002e56 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <HAL_TIM_MspPostInit+0xf8>)
 8002e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e20:	4a10      	ldr	r2, [pc, #64]	; (8002e64 <HAL_TIM_MspPostInit+0xf8>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e28:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <HAL_TIM_MspPostInit+0xf8>)
 8002e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPEAKER_Pin;
 8002e34:	2308      	movs	r3, #8
 8002e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e40:	2300      	movs	r3, #0
 8002e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002e44:	230e      	movs	r3, #14
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPEAKER_GPIO_Port, &GPIO_InitStruct);
 8002e48:	f107 0314 	add.w	r3, r7, #20
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e52:	f001 fef9 	bl	8004c48 <HAL_GPIO_Init>
}
 8002e56:	bf00      	nop
 8002e58:	3728      	adds	r7, #40	; 0x28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40012c00 	.word	0x40012c00
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40014000 	.word	0x40014000

08002e6c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e70:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <MX_USART2_UART_Init+0x58>)
 8002e72:	4a15      	ldr	r2, [pc, #84]	; (8002ec8 <MX_USART2_UART_Init+0x5c>)
 8002e74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e76:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <MX_USART2_UART_Init+0x58>)
 8002e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e7e:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <MX_USART2_UART_Init+0x58>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e84:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <MX_USART2_UART_Init+0x58>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <MX_USART2_UART_Init+0x58>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e90:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <MX_USART2_UART_Init+0x58>)
 8002e92:	220c      	movs	r2, #12
 8002e94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e96:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <MX_USART2_UART_Init+0x58>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e9c:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <MX_USART2_UART_Init+0x58>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ea2:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <MX_USART2_UART_Init+0x58>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <MX_USART2_UART_Init+0x58>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002eae:	4805      	ldr	r0, [pc, #20]	; (8002ec4 <MX_USART2_UART_Init+0x58>)
 8002eb0:	f004 fc9c 	bl	80077ec <HAL_UART_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002eba:	f7ff fbfe 	bl	80026ba <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	200009d8 	.word	0x200009d8
 8002ec8:	40004400 	.word	0x40004400

08002ecc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b09e      	sub	sp, #120	; 0x78
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ee4:	f107 0310 	add.w	r3, r7, #16
 8002ee8:	2254      	movs	r2, #84	; 0x54
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f005 f91f 	bl	8008130 <memset>
  if(uartHandle->Instance==USART2)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a28      	ldr	r2, [pc, #160]	; (8002f98 <HAL_UART_MspInit+0xcc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d148      	bne.n	8002f8e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002efc:	2302      	movs	r3, #2
 8002efe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f00:	2300      	movs	r3, #0
 8002f02:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f04:	f107 0310 	add.w	r3, r7, #16
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f003 fa45 	bl	8006398 <HAL_RCCEx_PeriphCLKConfig>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f14:	f7ff fbd1 	bl	80026ba <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f18:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <HAL_UART_MspInit+0xd0>)
 8002f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1c:	4a1f      	ldr	r2, [pc, #124]	; (8002f9c <HAL_UART_MspInit+0xd0>)
 8002f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f22:	6593      	str	r3, [r2, #88]	; 0x58
 8002f24:	4b1d      	ldr	r3, [pc, #116]	; (8002f9c <HAL_UART_MspInit+0xd0>)
 8002f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f30:	4b1a      	ldr	r3, [pc, #104]	; (8002f9c <HAL_UART_MspInit+0xd0>)
 8002f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f34:	4a19      	ldr	r2, [pc, #100]	; (8002f9c <HAL_UART_MspInit+0xd0>)
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f3c:	4b17      	ldr	r3, [pc, #92]	; (8002f9c <HAL_UART_MspInit+0xd0>)
 8002f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002f48:	2304      	movs	r3, #4
 8002f4a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f54:	2303      	movs	r3, #3
 8002f56:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f58:	2307      	movs	r3, #7
 8002f5a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002f5c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f60:	4619      	mov	r1, r3
 8002f62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f66:	f001 fe6f 	bl	8004c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f6e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f70:	2302      	movs	r3, #2
 8002f72:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002f80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f84:	4619      	mov	r1, r3
 8002f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f8a:	f001 fe5d 	bl	8004c48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002f8e:	bf00      	nop
 8002f90:	3778      	adds	r7, #120	; 0x78
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40004400 	.word	0x40004400
 8002f9c:	40021000 	.word	0x40021000

08002fa0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fa4:	f7ff fcbe 	bl	8002924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fa8:	480c      	ldr	r0, [pc, #48]	; (8002fdc <LoopForever+0x6>)
  ldr r1, =_edata
 8002faa:	490d      	ldr	r1, [pc, #52]	; (8002fe0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fac:	4a0d      	ldr	r2, [pc, #52]	; (8002fe4 <LoopForever+0xe>)
  movs r3, #0
 8002fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fb0:	e002      	b.n	8002fb8 <LoopCopyDataInit>

08002fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fb6:	3304      	adds	r3, #4

08002fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fbc:	d3f9      	bcc.n	8002fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fc0:	4c0a      	ldr	r4, [pc, #40]	; (8002fec <LoopForever+0x16>)
  movs r3, #0
 8002fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fc4:	e001      	b.n	8002fca <LoopFillZerobss>

08002fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fc8:	3204      	adds	r2, #4

08002fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fcc:	d3fb      	bcc.n	8002fc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fce:	f005 f88b 	bl	80080e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002fd2:	f7ff fa9d 	bl	8002510 <main>

08002fd6 <LoopForever>:

LoopForever:
    b LoopForever
 8002fd6:	e7fe      	b.n	8002fd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002fd8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fe0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002fe4:	0800b03c 	.word	0x0800b03c
  ldr r2, =_sbss
 8002fe8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002fec:	20000a70 	.word	0x20000a70

08002ff0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ff0:	e7fe      	b.n	8002ff0 <ADC1_IRQHandler>

08002ff2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ffc:	2003      	movs	r0, #3
 8002ffe:	f001 fbab 	bl	8004758 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003002:	2000      	movs	r0, #0
 8003004:	f000 f80e 	bl	8003024 <HAL_InitTick>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	71fb      	strb	r3, [r7, #7]
 8003012:	e001      	b.n	8003018 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003014:	f7ff fb56 	bl	80026c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003018:	79fb      	ldrb	r3, [r7, #7]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003030:	4b17      	ldr	r3, [pc, #92]	; (8003090 <HAL_InitTick+0x6c>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d023      	beq.n	8003080 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003038:	4b16      	ldr	r3, [pc, #88]	; (8003094 <HAL_InitTick+0x70>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4b14      	ldr	r3, [pc, #80]	; (8003090 <HAL_InitTick+0x6c>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	4619      	mov	r1, r3
 8003042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003046:	fbb3 f3f1 	udiv	r3, r3, r1
 800304a:	fbb2 f3f3 	udiv	r3, r2, r3
 800304e:	4618      	mov	r0, r3
 8003050:	f001 fbb7 	bl	80047c2 <HAL_SYSTICK_Config>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10f      	bne.n	800307a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b0f      	cmp	r3, #15
 800305e:	d809      	bhi.n	8003074 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003060:	2200      	movs	r2, #0
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	f04f 30ff 	mov.w	r0, #4294967295
 8003068:	f001 fb81 	bl	800476e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800306c:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <HAL_InitTick+0x74>)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e007      	b.n	8003084 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]
 8003078:	e004      	b.n	8003084 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	73fb      	strb	r3, [r7, #15]
 800307e:	e001      	b.n	8003084 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003084:	7bfb      	ldrb	r3, [r7, #15]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000008 	.word	0x20000008
 8003094:	20000000 	.word	0x20000000
 8003098:	20000004 	.word	0x20000004

0800309c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030a0:	4b06      	ldr	r3, [pc, #24]	; (80030bc <HAL_IncTick+0x20>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	461a      	mov	r2, r3
 80030a6:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <HAL_IncTick+0x24>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4413      	add	r3, r2
 80030ac:	4a04      	ldr	r2, [pc, #16]	; (80030c0 <HAL_IncTick+0x24>)
 80030ae:	6013      	str	r3, [r2, #0]
}
 80030b0:	bf00      	nop
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20000008 	.word	0x20000008
 80030c0:	20000a5c 	.word	0x20000a5c

080030c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return uwTick;
 80030c8:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <HAL_GetTick+0x14>)
 80030ca:	681b      	ldr	r3, [r3, #0]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000a5c 	.word	0x20000a5c

080030dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030e4:	f7ff ffee 	bl	80030c4 <HAL_GetTick>
 80030e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f4:	d005      	beq.n	8003102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80030f6:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <HAL_Delay+0x44>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4413      	add	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003102:	bf00      	nop
 8003104:	f7ff ffde 	bl	80030c4 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	429a      	cmp	r2, r3
 8003112:	d8f7      	bhi.n	8003104 <HAL_Delay+0x28>
  {
  }
}
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20000008 	.word	0x20000008

08003124 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	609a      	str	r2, [r3, #8]
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	609a      	str	r2, [r3, #8]
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	3360      	adds	r3, #96	; 0x60
 800319e:	461a      	mov	r2, r3
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <LL_ADC_SetOffset+0x44>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80031c4:	bf00      	nop
 80031c6:	371c      	adds	r7, #28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	03fff000 	.word	0x03fff000

080031d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3360      	adds	r3, #96	; 0x60
 80031e2:	461a      	mov	r2, r3
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	3360      	adds	r3, #96	; 0x60
 8003210:	461a      	mov	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	431a      	orrs	r2, r3
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800322a:	bf00      	nop
 800322c:	371c      	adds	r7, #28
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	3330      	adds	r3, #48	; 0x30
 800326c:	461a      	mov	r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	0a1b      	lsrs	r3, r3, #8
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	f003 030c 	and.w	r3, r3, #12
 8003278:	4413      	add	r3, r2
 800327a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	211f      	movs	r1, #31
 8003288:	fa01 f303 	lsl.w	r3, r1, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	401a      	ands	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	0e9b      	lsrs	r3, r3, #26
 8003294:	f003 011f 	and.w	r1, r3, #31
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f003 031f 	and.w	r3, r3, #31
 800329e:	fa01 f303 	lsl.w	r3, r1, r3
 80032a2:	431a      	orrs	r2, r3
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80032a8:	bf00      	nop
 80032aa:	371c      	adds	r7, #28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	3314      	adds	r3, #20
 80032c4:	461a      	mov	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	0e5b      	lsrs	r3, r3, #25
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	4413      	add	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	0d1b      	lsrs	r3, r3, #20
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	2107      	movs	r1, #7
 80032e2:	fa01 f303 	lsl.w	r3, r1, r3
 80032e6:	43db      	mvns	r3, r3
 80032e8:	401a      	ands	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	0d1b      	lsrs	r3, r3, #20
 80032ee:	f003 031f 	and.w	r3, r3, #31
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	fa01 f303 	lsl.w	r3, r1, r3
 80032f8:	431a      	orrs	r2, r3
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80032fe:	bf00      	nop
 8003300:	371c      	adds	r7, #28
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003324:	43db      	mvns	r3, r3
 8003326:	401a      	ands	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f003 0318 	and.w	r3, r3, #24
 800332e:	4908      	ldr	r1, [pc, #32]	; (8003350 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003330:	40d9      	lsrs	r1, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	400b      	ands	r3, r1
 8003336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800333a:	431a      	orrs	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003342:	bf00      	nop
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	0007ffff 	.word	0x0007ffff

08003354 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003364:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6093      	str	r3, [r2, #8]
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800338c:	d101      	bne.n	8003392 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80033b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033dc:	d101      	bne.n	80033e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003400:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003404:	f043 0201 	orr.w	r2, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003428:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800342c:	f043 0202 	orr.w	r2, r3, #2
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <LL_ADC_IsEnabled+0x18>
 8003454:	2301      	movs	r3, #1
 8003456:	e000      	b.n	800345a <LL_ADC_IsEnabled+0x1a>
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b02      	cmp	r3, #2
 8003478:	d101      	bne.n	800347e <LL_ADC_IsDisableOngoing+0x18>
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <LL_ADC_IsDisableOngoing+0x1a>
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800349c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034a0:	f043 0204 	orr.w	r2, r3, #4
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034c8:	f043 0210 	orr.w	r2, r3, #16
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d101      	bne.n	80034f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034f0:	2301      	movs	r3, #1
 80034f2:	e000      	b.n	80034f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003512:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003516:	f043 0220 	orr.w	r2, r3, #32
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b08      	cmp	r3, #8
 800353c:	d101      	bne.n	8003542 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800355c:	2300      	movs	r3, #0
 800355e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e12c      	b.n	80037c4 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003574:	2b00      	cmp	r3, #0
 8003576:	d109      	bne.n	800358c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7fe fdd7 	bl	800212c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff fef1 	bl	8003378 <LL_ADC_IsDeepPowerDownEnabled>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d004      	beq.n	80035a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fed7 	bl	8003354 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff ff0c 	bl	80033c8 <LL_ADC_IsInternalRegulatorEnabled>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d115      	bne.n	80035e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fef0 	bl	80033a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035c0:	4b82      	ldr	r3, [pc, #520]	; (80037cc <HAL_ADC_Init+0x27c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	099b      	lsrs	r3, r3, #6
 80035c6:	4a82      	ldr	r2, [pc, #520]	; (80037d0 <HAL_ADC_Init+0x280>)
 80035c8:	fba2 2303 	umull	r2, r3, r2, r3
 80035cc:	099b      	lsrs	r3, r3, #6
 80035ce:	3301      	adds	r3, #1
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80035d4:	e002      	b.n	80035dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	3b01      	subs	r3, #1
 80035da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f9      	bne.n	80035d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff feee 	bl	80033c8 <LL_ADC_IsInternalRegulatorEnabled>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10d      	bne.n	800360e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f6:	f043 0210 	orr.w	r2, r3, #16
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003602:	f043 0201 	orr.w	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff ff62 	bl	80034dc <LL_ADC_REG_IsConversionOngoing>
 8003618:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b00      	cmp	r3, #0
 8003624:	f040 80c5 	bne.w	80037b2 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	2b00      	cmp	r3, #0
 800362c:	f040 80c1 	bne.w	80037b2 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003634:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003638:	f043 0202 	orr.w	r2, r3, #2
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff fefb 	bl	8003440 <LL_ADC_IsEnabled>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10b      	bne.n	8003668 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003650:	4860      	ldr	r0, [pc, #384]	; (80037d4 <HAL_ADC_Init+0x284>)
 8003652:	f7ff fef5 	bl	8003440 <LL_ADC_IsEnabled>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d105      	bne.n	8003668 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	4619      	mov	r1, r3
 8003662:	485d      	ldr	r0, [pc, #372]	; (80037d8 <HAL_ADC_Init+0x288>)
 8003664:	f7ff fd5e 	bl	8003124 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	7e5b      	ldrb	r3, [r3, #25]
 800366c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003672:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003678:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800367e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003686:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003688:	4313      	orrs	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d106      	bne.n	80036a4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	3b01      	subs	r3, #1
 800369c:	045b      	lsls	r3, r3, #17
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d009      	beq.n	80036c0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	4b45      	ldr	r3, [pc, #276]	; (80037dc <HAL_ADC_Init+0x28c>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6812      	ldr	r2, [r2, #0]
 80036ce:	69b9      	ldr	r1, [r7, #24]
 80036d0:	430b      	orrs	r3, r1
 80036d2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff feff 	bl	80034dc <LL_ADC_REG_IsConversionOngoing>
 80036de:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ff20 	bl	800352a <LL_ADC_INJ_IsConversionOngoing>
 80036ea:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d13d      	bne.n	800376e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d13a      	bne.n	800376e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80036fc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003704:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003706:	4313      	orrs	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003714:	f023 0302 	bic.w	r3, r3, #2
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	69b9      	ldr	r1, [r7, #24]
 800371e:	430b      	orrs	r3, r1
 8003720:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003728:	2b01      	cmp	r3, #1
 800372a:	d118      	bne.n	800375e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003736:	f023 0304 	bic.w	r3, r3, #4
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003742:	4311      	orrs	r1, r2
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003748:	4311      	orrs	r1, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800374e:	430a      	orrs	r2, r1
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	611a      	str	r2, [r3, #16]
 800375c:	e007      	b.n	800376e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0201 	bic.w	r2, r2, #1
 800376c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d10c      	bne.n	8003790 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	f023 010f 	bic.w	r1, r3, #15
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	1e5a      	subs	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	631a      	str	r2, [r3, #48]	; 0x30
 800378e:	e007      	b.n	80037a0 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 020f 	bic.w	r2, r2, #15
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a4:	f023 0303 	bic.w	r3, r3, #3
 80037a8:	f043 0201 	orr.w	r2, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	655a      	str	r2, [r3, #84]	; 0x54
 80037b0:	e007      	b.n	80037c2 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b6:	f043 0210 	orr.w	r2, r3, #16
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80037c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3720      	adds	r7, #32
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000000 	.word	0x20000000
 80037d0:	053e2d63 	.word	0x053e2d63
 80037d4:	50040000 	.word	0x50040000
 80037d8:	50040300 	.word	0x50040300
 80037dc:	fff0c007 	.word	0xfff0c007

080037e0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff fe73 	bl	80034dc <LL_ADC_REG_IsConversionOngoing>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d167      	bne.n	80038cc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_ADC_Start_DMA+0x2a>
 8003806:	2302      	movs	r3, #2
 8003808:	e063      	b.n	80038d2 <HAL_ADC_Start_DMA+0xf2>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 fd7a 	bl	800430c <ADC_Enable>
 8003818:	4603      	mov	r3, r0
 800381a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800381c:	7dfb      	ldrb	r3, [r7, #23]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d14f      	bne.n	80038c2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800382a:	f023 0301 	bic.w	r3, r3, #1
 800382e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d006      	beq.n	8003850 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003846:	f023 0206 	bic.w	r2, r3, #6
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	659a      	str	r2, [r3, #88]	; 0x58
 800384e:	e002      	b.n	8003856 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385a:	4a20      	ldr	r2, [pc, #128]	; (80038dc <HAL_ADC_Start_DMA+0xfc>)
 800385c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003862:	4a1f      	ldr	r2, [pc, #124]	; (80038e0 <HAL_ADC_Start_DMA+0x100>)
 8003864:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386a:	4a1e      	ldr	r2, [pc, #120]	; (80038e4 <HAL_ADC_Start_DMA+0x104>)
 800386c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	221c      	movs	r2, #28
 8003874:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0210 	orr.w	r2, r2, #16
 800388c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0201 	orr.w	r2, r2, #1
 800389c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3340      	adds	r3, #64	; 0x40
 80038a8:	4619      	mov	r1, r3
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f001 f84d 	bl	800494c <HAL_DMA_Start_IT>
 80038b2:	4603      	mov	r3, r0
 80038b4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff fde6 	bl	800348c <LL_ADC_REG_StartConversion>
 80038c0:	e006      	b.n	80038d0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80038ca:	e001      	b.n	80038d0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038cc:	2302      	movs	r3, #2
 80038ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80038d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	0800448f 	.word	0x0800448f
 80038e0:	08004567 	.word	0x08004567
 80038e4:	08004583 	.word	0x08004583

080038e8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_ADC_Stop_DMA+0x16>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e051      	b.n	80039a2 <HAL_ADC_Stop_DMA+0xba>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003906:	2103      	movs	r1, #3
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 fc43 	bl	8004194 <ADC_ConversionStop>
 800390e:	4603      	mov	r3, r0
 8003910:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d13f      	bne.n	8003998 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0201 	bic.w	r2, r2, #1
 8003926:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d10f      	bne.n	8003956 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393a:	4618      	mov	r0, r3
 800393c:	f001 f866 	bl	8004a0c <HAL_DMA_Abort>
 8003940:	4603      	mov	r3, r0
 8003942:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d005      	beq.n	8003956 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0210 	bic.w	r2, r2, #16
 8003964:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003966:	7bfb      	ldrb	r3, [r7, #15]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d105      	bne.n	8003978 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fd2f 	bl	80043d0 <ADC_Disable>
 8003972:	4603      	mov	r3, r0
 8003974:	73fb      	strb	r3, [r7, #15]
 8003976:	e002      	b.n	800397e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 fd29 	bl	80043d0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d109      	bne.n	8003998 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003988:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800398c:	f023 0301 	bic.w	r3, r3, #1
 8003990:	f043 0201 	orr.w	r2, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
	...

080039d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b0b6      	sub	sp, #216	; 0xd8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_ADC_ConfigChannel+0x22>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e3b9      	b.n	800416a <HAL_ADC_ConfigChannel+0x796>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff fd6a 	bl	80034dc <LL_ADC_REG_IsConversionOngoing>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f040 839e 	bne.w	800414c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b05      	cmp	r3, #5
 8003a16:	d824      	bhi.n	8003a62 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	3b02      	subs	r3, #2
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d81b      	bhi.n	8003a5a <HAL_ADC_ConfigChannel+0x86>
 8003a22:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <HAL_ADC_ConfigChannel+0x54>)
 8003a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a28:	08003a39 	.word	0x08003a39
 8003a2c:	08003a41 	.word	0x08003a41
 8003a30:	08003a49 	.word	0x08003a49
 8003a34:	08003a51 	.word	0x08003a51
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	220c      	movs	r2, #12
 8003a3c:	605a      	str	r2, [r3, #4]
          break;
 8003a3e:	e011      	b.n	8003a64 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2212      	movs	r2, #18
 8003a44:	605a      	str	r2, [r3, #4]
          break;
 8003a46:	e00d      	b.n	8003a64 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	2218      	movs	r2, #24
 8003a4c:	605a      	str	r2, [r3, #4]
          break;
 8003a4e:	e009      	b.n	8003a64 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a56:	605a      	str	r2, [r3, #4]
          break;
 8003a58:	e004      	b.n	8003a64 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2206      	movs	r2, #6
 8003a5e:	605a      	str	r2, [r3, #4]
          break;
 8003a60:	e000      	b.n	8003a64 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003a62:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	461a      	mov	r2, r3
 8003a72:	f7ff fbf3 	bl	800325c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff fd2e 	bl	80034dc <LL_ADC_REG_IsConversionOngoing>
 8003a80:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff fd4e 	bl	800352a <LL_ADC_INJ_IsConversionOngoing>
 8003a8e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f040 81a6 	bne.w	8003de8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f040 81a1 	bne.w	8003de8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	6819      	ldr	r1, [r3, #0]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f7ff fbfe 	bl	80032b4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	695a      	ldr	r2, [r3, #20]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	08db      	lsrs	r3, r3, #3
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d00a      	beq.n	8003af0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	6919      	ldr	r1, [r3, #16]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003aea:	f7ff fb4f 	bl	800318c <LL_ADC_SetOffset>
 8003aee:	e17b      	b.n	8003de8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2100      	movs	r1, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff fb6c 	bl	80031d4 <LL_ADC_GetOffsetChannel>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10a      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x148>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff fb61 	bl	80031d4 <LL_ADC_GetOffsetChannel>
 8003b12:	4603      	mov	r3, r0
 8003b14:	0e9b      	lsrs	r3, r3, #26
 8003b16:	f003 021f 	and.w	r2, r3, #31
 8003b1a:	e01e      	b.n	8003b5a <HAL_ADC_ConfigChannel+0x186>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2100      	movs	r1, #0
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff fb56 	bl	80031d4 <LL_ADC_GetOffsetChannel>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003b4a:	2320      	movs	r3, #32
 8003b4c:	e004      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003b4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b52:	fab3 f383 	clz	r3, r3
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d105      	bne.n	8003b72 <HAL_ADC_ConfigChannel+0x19e>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	0e9b      	lsrs	r3, r3, #26
 8003b6c:	f003 031f 	and.w	r3, r3, #31
 8003b70:	e018      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x1d0>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003b7e:	fa93 f3a3 	rbit	r3, r3
 8003b82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003b86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003b8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003b96:	2320      	movs	r3, #32
 8003b98:	e004      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003b9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b9e:	fab3 f383 	clz	r3, r3
 8003ba2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d106      	bne.n	8003bb6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2200      	movs	r2, #0
 8003bae:	2100      	movs	r1, #0
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff fb25 	bl	8003200 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2101      	movs	r1, #1
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff fb09 	bl	80031d4 <LL_ADC_GetOffsetChannel>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10a      	bne.n	8003be2 <HAL_ADC_ConfigChannel+0x20e>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff fafe 	bl	80031d4 <LL_ADC_GetOffsetChannel>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	0e9b      	lsrs	r3, r3, #26
 8003bdc:	f003 021f 	and.w	r2, r3, #31
 8003be0:	e01e      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x24c>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2101      	movs	r1, #1
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff faf3 	bl	80031d4 <LL_ADC_GetOffsetChannel>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003bf8:	fa93 f3a3 	rbit	r3, r3
 8003bfc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003c00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003c08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003c10:	2320      	movs	r3, #32
 8003c12:	e004      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003c14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c18:	fab3 f383 	clz	r3, r3
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d105      	bne.n	8003c38 <HAL_ADC_ConfigChannel+0x264>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	0e9b      	lsrs	r3, r3, #26
 8003c32:	f003 031f 	and.w	r3, r3, #31
 8003c36:	e018      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x296>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c44:	fa93 f3a3 	rbit	r3, r3
 8003c48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003c4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003c54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	e004      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c64:	fab3 f383 	clz	r3, r3
 8003c68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d106      	bne.n	8003c7c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2200      	movs	r2, #0
 8003c74:	2101      	movs	r1, #1
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff fac2 	bl	8003200 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2102      	movs	r1, #2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff faa6 	bl	80031d4 <LL_ADC_GetOffsetChannel>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x2d4>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2102      	movs	r1, #2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff fa9b 	bl	80031d4 <LL_ADC_GetOffsetChannel>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	0e9b      	lsrs	r3, r3, #26
 8003ca2:	f003 021f 	and.w	r2, r3, #31
 8003ca6:	e01e      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x312>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2102      	movs	r1, #2
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff fa90 	bl	80031d4 <LL_ADC_GetOffsetChannel>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cbe:	fa93 f3a3 	rbit	r3, r3
 8003cc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003cc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003cce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003cd6:	2320      	movs	r3, #32
 8003cd8:	e004      	b.n	8003ce4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003cda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cde:	fab3 f383 	clz	r3, r3
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d105      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x32a>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	0e9b      	lsrs	r3, r3, #26
 8003cf8:	f003 031f 	and.w	r3, r3, #31
 8003cfc:	e016      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x358>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d0a:	fa93 f3a3 	rbit	r3, r3
 8003d0e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003d10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003d16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003d1e:	2320      	movs	r3, #32
 8003d20:	e004      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003d22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d26:	fab3 f383 	clz	r3, r3
 8003d2a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d106      	bne.n	8003d3e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2200      	movs	r2, #0
 8003d36:	2102      	movs	r1, #2
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff fa61 	bl	8003200 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2103      	movs	r1, #3
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff fa45 	bl	80031d4 <LL_ADC_GetOffsetChannel>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0x396>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2103      	movs	r1, #3
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff fa3a 	bl	80031d4 <LL_ADC_GetOffsetChannel>
 8003d60:	4603      	mov	r3, r0
 8003d62:	0e9b      	lsrs	r3, r3, #26
 8003d64:	f003 021f 	and.w	r2, r3, #31
 8003d68:	e017      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x3c6>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2103      	movs	r1, #3
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff fa2f 	bl	80031d4 <LL_ADC_GetOffsetChannel>
 8003d76:	4603      	mov	r3, r0
 8003d78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d7c:	fa93 f3a3 	rbit	r3, r3
 8003d80:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003d82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d84:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003d86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003d8c:	2320      	movs	r3, #32
 8003d8e:	e003      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003d90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d92:	fab3 f383 	clz	r3, r3
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d105      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x3de>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	0e9b      	lsrs	r3, r3, #26
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	e011      	b.n	8003dd6 <HAL_ADC_ConfigChannel+0x402>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dba:	fa93 f3a3 	rbit	r3, r3
 8003dbe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003dca:	2320      	movs	r3, #32
 8003dcc:	e003      	b.n	8003dd6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd0:	fab3 f383 	clz	r3, r3
 8003dd4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d106      	bne.n	8003de8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2200      	movs	r2, #0
 8003de0:	2103      	movs	r1, #3
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff fa0c 	bl	8003200 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff fb27 	bl	8003440 <LL_ADC_IsEnabled>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f040 813f 	bne.w	8004078 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6818      	ldr	r0, [r3, #0]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	6819      	ldr	r1, [r3, #0]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	461a      	mov	r2, r3
 8003e08:	f7ff fa80 	bl	800330c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4a8e      	ldr	r2, [pc, #568]	; (800404c <HAL_ADC_ConfigChannel+0x678>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	f040 8130 	bne.w	8004078 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10b      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x46c>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	0e9b      	lsrs	r3, r3, #26
 8003e2e:	3301      	adds	r3, #1
 8003e30:	f003 031f 	and.w	r3, r3, #31
 8003e34:	2b09      	cmp	r3, #9
 8003e36:	bf94      	ite	ls
 8003e38:	2301      	movls	r3, #1
 8003e3a:	2300      	movhi	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	e019      	b.n	8003e74 <HAL_ADC_ConfigChannel+0x4a0>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e48:	fa93 f3a3 	rbit	r3, r3
 8003e4c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003e4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e50:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003e52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003e58:	2320      	movs	r3, #32
 8003e5a:	e003      	b.n	8003e64 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003e5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e5e:	fab3 f383 	clz	r3, r3
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	3301      	adds	r3, #1
 8003e66:	f003 031f 	and.w	r3, r3, #31
 8003e6a:	2b09      	cmp	r3, #9
 8003e6c:	bf94      	ite	ls
 8003e6e:	2301      	movls	r3, #1
 8003e70:	2300      	movhi	r3, #0
 8003e72:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d079      	beq.n	8003f6c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d107      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x4c0>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	0e9b      	lsrs	r3, r3, #26
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	069b      	lsls	r3, r3, #26
 8003e8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e92:	e015      	b.n	8003ec0 <HAL_ADC_ConfigChannel+0x4ec>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e9c:	fa93 f3a3 	rbit	r3, r3
 8003ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ea4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003eac:	2320      	movs	r3, #32
 8003eae:	e003      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eb2:	fab3 f383 	clz	r3, r3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	3301      	adds	r3, #1
 8003eba:	069b      	lsls	r3, r3, #26
 8003ebc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d109      	bne.n	8003ee0 <HAL_ADC_ConfigChannel+0x50c>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	0e9b      	lsrs	r3, r3, #26
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	2101      	movs	r1, #1
 8003eda:	fa01 f303 	lsl.w	r3, r1, r3
 8003ede:	e017      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x53c>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ee8:	fa93 f3a3 	rbit	r3, r3
 8003eec:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ef0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003ef8:	2320      	movs	r3, #32
 8003efa:	e003      	b.n	8003f04 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003efe:	fab3 f383 	clz	r3, r3
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	3301      	adds	r3, #1
 8003f06:	f003 031f 	and.w	r3, r3, #31
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f10:	ea42 0103 	orr.w	r1, r2, r3
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10a      	bne.n	8003f36 <HAL_ADC_ConfigChannel+0x562>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	0e9b      	lsrs	r3, r3, #26
 8003f26:	3301      	adds	r3, #1
 8003f28:	f003 021f 	and.w	r2, r3, #31
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	4413      	add	r3, r2
 8003f32:	051b      	lsls	r3, r3, #20
 8003f34:	e018      	b.n	8003f68 <HAL_ADC_ConfigChannel+0x594>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3e:	fa93 f3a3 	rbit	r3, r3
 8003f42:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003f4e:	2320      	movs	r3, #32
 8003f50:	e003      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f54:	fab3 f383 	clz	r3, r3
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	f003 021f 	and.w	r2, r3, #31
 8003f60:	4613      	mov	r3, r2
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	4413      	add	r3, r2
 8003f66:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	e080      	b.n	800406e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d107      	bne.n	8003f88 <HAL_ADC_ConfigChannel+0x5b4>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	0e9b      	lsrs	r3, r3, #26
 8003f7e:	3301      	adds	r3, #1
 8003f80:	069b      	lsls	r3, r3, #26
 8003f82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f86:	e015      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0x5e0>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f90:	fa93 f3a3 	rbit	r3, r3
 8003f94:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f98:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003fa0:	2320      	movs	r3, #32
 8003fa2:	e003      	b.n	8003fac <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa6:	fab3 f383 	clz	r3, r3
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	3301      	adds	r3, #1
 8003fae:	069b      	lsls	r3, r3, #26
 8003fb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d109      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x600>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	0e9b      	lsrs	r3, r3, #26
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	f003 031f 	and.w	r3, r3, #31
 8003fcc:	2101      	movs	r1, #1
 8003fce:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd2:	e017      	b.n	8004004 <HAL_ADC_ConfigChannel+0x630>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	fa93 f3a3 	rbit	r3, r3
 8003fe0:	61fb      	str	r3, [r7, #28]
  return result;
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003fec:	2320      	movs	r3, #32
 8003fee:	e003      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	fab3 f383 	clz	r3, r3
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	2101      	movs	r1, #1
 8004000:	fa01 f303 	lsl.w	r3, r1, r3
 8004004:	ea42 0103 	orr.w	r1, r2, r3
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10d      	bne.n	8004030 <HAL_ADC_ConfigChannel+0x65c>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	0e9b      	lsrs	r3, r3, #26
 800401a:	3301      	adds	r3, #1
 800401c:	f003 021f 	and.w	r2, r3, #31
 8004020:	4613      	mov	r3, r2
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	4413      	add	r3, r2
 8004026:	3b1e      	subs	r3, #30
 8004028:	051b      	lsls	r3, r3, #20
 800402a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800402e:	e01d      	b.n	800406c <HAL_ADC_ConfigChannel+0x698>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	fa93 f3a3 	rbit	r3, r3
 800403c:	613b      	str	r3, [r7, #16]
  return result;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d103      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004048:	2320      	movs	r3, #32
 800404a:	e005      	b.n	8004058 <HAL_ADC_ConfigChannel+0x684>
 800404c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	fab3 f383 	clz	r3, r3
 8004056:	b2db      	uxtb	r3, r3
 8004058:	3301      	adds	r3, #1
 800405a:	f003 021f 	and.w	r2, r3, #31
 800405e:	4613      	mov	r3, r2
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	4413      	add	r3, r2
 8004064:	3b1e      	subs	r3, #30
 8004066:	051b      	lsls	r3, r3, #20
 8004068:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800406c:	430b      	orrs	r3, r1
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	6892      	ldr	r2, [r2, #8]
 8004072:	4619      	mov	r1, r3
 8004074:	f7ff f91e 	bl	80032b4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	4b3d      	ldr	r3, [pc, #244]	; (8004174 <HAL_ADC_ConfigChannel+0x7a0>)
 800407e:	4013      	ands	r3, r2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d06c      	beq.n	800415e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004084:	483c      	ldr	r0, [pc, #240]	; (8004178 <HAL_ADC_ConfigChannel+0x7a4>)
 8004086:	f7ff f873 	bl	8003170 <LL_ADC_GetCommonPathInternalCh>
 800408a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a3a      	ldr	r2, [pc, #232]	; (800417c <HAL_ADC_ConfigChannel+0x7a8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d127      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004098:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800409c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d121      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a35      	ldr	r2, [pc, #212]	; (8004180 <HAL_ADC_ConfigChannel+0x7ac>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d157      	bne.n	800415e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040b6:	4619      	mov	r1, r3
 80040b8:	482f      	ldr	r0, [pc, #188]	; (8004178 <HAL_ADC_ConfigChannel+0x7a4>)
 80040ba:	f7ff f846 	bl	800314a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040be:	4b31      	ldr	r3, [pc, #196]	; (8004184 <HAL_ADC_ConfigChannel+0x7b0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	099b      	lsrs	r3, r3, #6
 80040c4:	4a30      	ldr	r2, [pc, #192]	; (8004188 <HAL_ADC_ConfigChannel+0x7b4>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	099b      	lsrs	r3, r3, #6
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	4613      	mov	r3, r2
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80040d8:	e002      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	3b01      	subs	r3, #1
 80040de:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f9      	bne.n	80040da <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040e6:	e03a      	b.n	800415e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a27      	ldr	r2, [pc, #156]	; (800418c <HAL_ADC_ConfigChannel+0x7b8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d113      	bne.n	800411a <HAL_ADC_ConfigChannel+0x746>
 80040f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10d      	bne.n	800411a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a1f      	ldr	r2, [pc, #124]	; (8004180 <HAL_ADC_ConfigChannel+0x7ac>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d12a      	bne.n	800415e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004108:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800410c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004110:	4619      	mov	r1, r3
 8004112:	4819      	ldr	r0, [pc, #100]	; (8004178 <HAL_ADC_ConfigChannel+0x7a4>)
 8004114:	f7ff f819 	bl	800314a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004118:	e021      	b.n	800415e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a1c      	ldr	r2, [pc, #112]	; (8004190 <HAL_ADC_ConfigChannel+0x7bc>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d11c      	bne.n	800415e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004124:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004128:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d116      	bne.n	800415e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a12      	ldr	r2, [pc, #72]	; (8004180 <HAL_ADC_ConfigChannel+0x7ac>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d111      	bne.n	800415e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800413a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800413e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004142:	4619      	mov	r1, r3
 8004144:	480c      	ldr	r0, [pc, #48]	; (8004178 <HAL_ADC_ConfigChannel+0x7a4>)
 8004146:	f7ff f800 	bl	800314a <LL_ADC_SetCommonPathInternalCh>
 800414a:	e008      	b.n	800415e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004150:	f043 0220 	orr.w	r2, r3, #32
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004166:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800416a:	4618      	mov	r0, r3
 800416c:	37d8      	adds	r7, #216	; 0xd8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	80080000 	.word	0x80080000
 8004178:	50040300 	.word	0x50040300
 800417c:	c7520000 	.word	0xc7520000
 8004180:	50040000 	.word	0x50040000
 8004184:	20000000 	.word	0x20000000
 8004188:	053e2d63 	.word	0x053e2d63
 800418c:	cb840000 	.word	0xcb840000
 8004190:	80000001 	.word	0x80000001

08004194 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800419e:	2300      	movs	r3, #0
 80041a0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff f996 	bl	80034dc <LL_ADC_REG_IsConversionOngoing>
 80041b0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff f9b7 	bl	800352a <LL_ADC_INJ_IsConversionOngoing>
 80041bc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d103      	bne.n	80041cc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 8098 	beq.w	80042fc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d02a      	beq.n	8004230 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	7e5b      	ldrb	r3, [r3, #25]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d126      	bne.n	8004230 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	7e1b      	ldrb	r3, [r3, #24]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d122      	bne.n	8004230 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80041ea:	2301      	movs	r3, #1
 80041ec:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80041ee:	e014      	b.n	800421a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	4a45      	ldr	r2, [pc, #276]	; (8004308 <ADC_ConversionStop+0x174>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d90d      	bls.n	8004214 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fc:	f043 0210 	orr.w	r2, r3, #16
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004208:	f043 0201 	orr.w	r2, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e074      	b.n	80042fe <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	3301      	adds	r3, #1
 8004218:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004224:	2b40      	cmp	r3, #64	; 0x40
 8004226:	d1e3      	bne.n	80041f0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2240      	movs	r2, #64	; 0x40
 800422e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	2b02      	cmp	r3, #2
 8004234:	d014      	beq.n	8004260 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff f94e 	bl	80034dc <LL_ADC_REG_IsConversionOngoing>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00c      	beq.n	8004260 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff f90b 	bl	8003466 <LL_ADC_IsDisableOngoing>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d104      	bne.n	8004260 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff f92a 	bl	80034b4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d014      	beq.n	8004290 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff f95d 	bl	800352a <LL_ADC_INJ_IsConversionOngoing>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00c      	beq.n	8004290 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff f8f3 	bl	8003466 <LL_ADC_IsDisableOngoing>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d104      	bne.n	8004290 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff f939 	bl	8003502 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d005      	beq.n	80042a2 <ADC_ConversionStop+0x10e>
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	2b03      	cmp	r3, #3
 800429a:	d105      	bne.n	80042a8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800429c:	230c      	movs	r3, #12
 800429e:	617b      	str	r3, [r7, #20]
        break;
 80042a0:	e005      	b.n	80042ae <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80042a2:	2308      	movs	r3, #8
 80042a4:	617b      	str	r3, [r7, #20]
        break;
 80042a6:	e002      	b.n	80042ae <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80042a8:	2304      	movs	r3, #4
 80042aa:	617b      	str	r3, [r7, #20]
        break;
 80042ac:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80042ae:	f7fe ff09 	bl	80030c4 <HAL_GetTick>
 80042b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80042b4:	e01b      	b.n	80042ee <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80042b6:	f7fe ff05 	bl	80030c4 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b05      	cmp	r3, #5
 80042c2:	d914      	bls.n	80042ee <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	4013      	ands	r3, r2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00d      	beq.n	80042ee <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d6:	f043 0210 	orr.w	r2, r3, #16
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e2:	f043 0201 	orr.w	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e007      	b.n	80042fe <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1dc      	bne.n	80042b6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3720      	adds	r7, #32
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	a33fffff 	.word	0xa33fffff

0800430c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff f891 	bl	8003440 <LL_ADC_IsEnabled>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d14d      	bne.n	80043c0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689a      	ldr	r2, [r3, #8]
 800432a:	4b28      	ldr	r3, [pc, #160]	; (80043cc <ADC_Enable+0xc0>)
 800432c:	4013      	ands	r3, r2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00d      	beq.n	800434e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004336:	f043 0210 	orr.w	r2, r3, #16
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004342:	f043 0201 	orr.w	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e039      	b.n	80043c2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f7ff f84c 	bl	80033f0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004358:	f7fe feb4 	bl	80030c4 <HAL_GetTick>
 800435c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800435e:	e028      	b.n	80043b2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff f86b 	bl	8003440 <LL_ADC_IsEnabled>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d104      	bne.n	800437a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff f83b 	bl	80033f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800437a:	f7fe fea3 	bl	80030c4 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d914      	bls.n	80043b2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b01      	cmp	r3, #1
 8004394:	d00d      	beq.n	80043b2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439a:	f043 0210 	orr.w	r2, r3, #16
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a6:	f043 0201 	orr.w	r2, r3, #1
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e007      	b.n	80043c2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d1cf      	bne.n	8004360 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	8000003f 	.word	0x8000003f

080043d0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4618      	mov	r0, r3
 80043de:	f7ff f842 	bl	8003466 <LL_ADC_IsDisableOngoing>
 80043e2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff f829 	bl	8003440 <LL_ADC_IsEnabled>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d047      	beq.n	8004484 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d144      	bne.n	8004484 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 030d 	and.w	r3, r3, #13
 8004404:	2b01      	cmp	r3, #1
 8004406:	d10c      	bne.n	8004422 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff f803 	bl	8003418 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2203      	movs	r2, #3
 8004418:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800441a:	f7fe fe53 	bl	80030c4 <HAL_GetTick>
 800441e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004420:	e029      	b.n	8004476 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004426:	f043 0210 	orr.w	r2, r3, #16
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004432:	f043 0201 	orr.w	r2, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e023      	b.n	8004486 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800443e:	f7fe fe41 	bl	80030c4 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d914      	bls.n	8004476 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00d      	beq.n	8004476 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445e:	f043 0210 	orr.w	r2, r3, #16
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446a:	f043 0201 	orr.w	r2, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e007      	b.n	8004486 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1dc      	bne.n	800443e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b084      	sub	sp, #16
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d14b      	bne.n	8004540 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d021      	beq.n	8004506 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fe feb5 	bl	8003236 <LL_ADC_REG_IsTriggerSourceSWStart>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d032      	beq.n	8004538 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d12b      	bne.n	8004538 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d11f      	bne.n	8004538 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fc:	f043 0201 	orr.w	r2, r3, #1
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	655a      	str	r2, [r3, #84]	; 0x54
 8004504:	e018      	b.n	8004538 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d111      	bne.n	8004538 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004518:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d105      	bne.n	8004538 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004530:	f043 0201 	orr.w	r2, r3, #1
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f7fd fea5 	bl	8002288 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800453e:	e00e      	b.n	800455e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f7ff fa36 	bl	80039be <HAL_ADC_ErrorCallback>
}
 8004552:	e004      	b.n	800455e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	4798      	blx	r3
}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004572:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f7ff fa18 	bl	80039aa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800457a:	bf00      	nop
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b084      	sub	sp, #16
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004594:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a0:	f043 0204 	orr.w	r2, r3, #4
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f7ff fa08 	bl	80039be <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045ae:	bf00      	nop
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045c8:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <__NVIC_SetPriorityGrouping+0x44>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045d4:	4013      	ands	r3, r2
 80045d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045ea:	4a04      	ldr	r2, [pc, #16]	; (80045fc <__NVIC_SetPriorityGrouping+0x44>)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	60d3      	str	r3, [r2, #12]
}
 80045f0:	bf00      	nop
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	e000ed00 	.word	0xe000ed00

08004600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004604:	4b04      	ldr	r3, [pc, #16]	; (8004618 <__NVIC_GetPriorityGrouping+0x18>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	0a1b      	lsrs	r3, r3, #8
 800460a:	f003 0307 	and.w	r3, r3, #7
}
 800460e:	4618      	mov	r0, r3
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	e000ed00 	.word	0xe000ed00

0800461c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	4603      	mov	r3, r0
 8004624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462a:	2b00      	cmp	r3, #0
 800462c:	db0b      	blt.n	8004646 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	f003 021f 	and.w	r2, r3, #31
 8004634:	4907      	ldr	r1, [pc, #28]	; (8004654 <__NVIC_EnableIRQ+0x38>)
 8004636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	2001      	movs	r0, #1
 800463e:	fa00 f202 	lsl.w	r2, r0, r2
 8004642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	e000e100 	.word	0xe000e100

08004658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	6039      	str	r1, [r7, #0]
 8004662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004668:	2b00      	cmp	r3, #0
 800466a:	db0a      	blt.n	8004682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	b2da      	uxtb	r2, r3
 8004670:	490c      	ldr	r1, [pc, #48]	; (80046a4 <__NVIC_SetPriority+0x4c>)
 8004672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004676:	0112      	lsls	r2, r2, #4
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	440b      	add	r3, r1
 800467c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004680:	e00a      	b.n	8004698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	b2da      	uxtb	r2, r3
 8004686:	4908      	ldr	r1, [pc, #32]	; (80046a8 <__NVIC_SetPriority+0x50>)
 8004688:	79fb      	ldrb	r3, [r7, #7]
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	3b04      	subs	r3, #4
 8004690:	0112      	lsls	r2, r2, #4
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	440b      	add	r3, r1
 8004696:	761a      	strb	r2, [r3, #24]
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	e000e100 	.word	0xe000e100
 80046a8:	e000ed00 	.word	0xe000ed00

080046ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b089      	sub	sp, #36	; 0x24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f1c3 0307 	rsb	r3, r3, #7
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	bf28      	it	cs
 80046ca:	2304      	movcs	r3, #4
 80046cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	3304      	adds	r3, #4
 80046d2:	2b06      	cmp	r3, #6
 80046d4:	d902      	bls.n	80046dc <NVIC_EncodePriority+0x30>
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	3b03      	subs	r3, #3
 80046da:	e000      	b.n	80046de <NVIC_EncodePriority+0x32>
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046e0:	f04f 32ff 	mov.w	r2, #4294967295
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	43da      	mvns	r2, r3
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	401a      	ands	r2, r3
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046f4:	f04f 31ff 	mov.w	r1, #4294967295
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	fa01 f303 	lsl.w	r3, r1, r3
 80046fe:	43d9      	mvns	r1, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004704:	4313      	orrs	r3, r2
         );
}
 8004706:	4618      	mov	r0, r3
 8004708:	3724      	adds	r7, #36	; 0x24
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
	...

08004714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3b01      	subs	r3, #1
 8004720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004724:	d301      	bcc.n	800472a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004726:	2301      	movs	r3, #1
 8004728:	e00f      	b.n	800474a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800472a:	4a0a      	ldr	r2, [pc, #40]	; (8004754 <SysTick_Config+0x40>)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3b01      	subs	r3, #1
 8004730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004732:	210f      	movs	r1, #15
 8004734:	f04f 30ff 	mov.w	r0, #4294967295
 8004738:	f7ff ff8e 	bl	8004658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800473c:	4b05      	ldr	r3, [pc, #20]	; (8004754 <SysTick_Config+0x40>)
 800473e:	2200      	movs	r2, #0
 8004740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004742:	4b04      	ldr	r3, [pc, #16]	; (8004754 <SysTick_Config+0x40>)
 8004744:	2207      	movs	r2, #7
 8004746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	e000e010 	.word	0xe000e010

08004758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7ff ff29 	bl	80045b8 <__NVIC_SetPriorityGrouping>
}
 8004766:	bf00      	nop
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b086      	sub	sp, #24
 8004772:	af00      	add	r7, sp, #0
 8004774:	4603      	mov	r3, r0
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
 800477a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800477c:	2300      	movs	r3, #0
 800477e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004780:	f7ff ff3e 	bl	8004600 <__NVIC_GetPriorityGrouping>
 8004784:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	68b9      	ldr	r1, [r7, #8]
 800478a:	6978      	ldr	r0, [r7, #20]
 800478c:	f7ff ff8e 	bl	80046ac <NVIC_EncodePriority>
 8004790:	4602      	mov	r2, r0
 8004792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004796:	4611      	mov	r1, r2
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff ff5d 	bl	8004658 <__NVIC_SetPriority>
}
 800479e:	bf00      	nop
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b082      	sub	sp, #8
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	4603      	mov	r3, r0
 80047ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff ff31 	bl	800461c <__NVIC_EnableIRQ>
}
 80047ba:	bf00      	nop
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7ff ffa2 	bl	8004714 <SysTick_Config>
 80047d0:	4603      	mov	r3, r0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e098      	b.n	8004920 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	461a      	mov	r2, r3
 80047f4:	4b4d      	ldr	r3, [pc, #308]	; (800492c <HAL_DMA_Init+0x150>)
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d80f      	bhi.n	800481a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	461a      	mov	r2, r3
 8004800:	4b4b      	ldr	r3, [pc, #300]	; (8004930 <HAL_DMA_Init+0x154>)
 8004802:	4413      	add	r3, r2
 8004804:	4a4b      	ldr	r2, [pc, #300]	; (8004934 <HAL_DMA_Init+0x158>)
 8004806:	fba2 2303 	umull	r2, r3, r2, r3
 800480a:	091b      	lsrs	r3, r3, #4
 800480c:	009a      	lsls	r2, r3, #2
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a48      	ldr	r2, [pc, #288]	; (8004938 <HAL_DMA_Init+0x15c>)
 8004816:	641a      	str	r2, [r3, #64]	; 0x40
 8004818:	e00e      	b.n	8004838 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	4b46      	ldr	r3, [pc, #280]	; (800493c <HAL_DMA_Init+0x160>)
 8004822:	4413      	add	r3, r2
 8004824:	4a43      	ldr	r2, [pc, #268]	; (8004934 <HAL_DMA_Init+0x158>)
 8004826:	fba2 2303 	umull	r2, r3, r2, r3
 800482a:	091b      	lsrs	r3, r3, #4
 800482c:	009a      	lsls	r2, r3, #2
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a42      	ldr	r2, [pc, #264]	; (8004940 <HAL_DMA_Init+0x164>)
 8004836:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800484e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004852:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800485c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004868:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004874:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004892:	d039      	beq.n	8004908 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	4a27      	ldr	r2, [pc, #156]	; (8004938 <HAL_DMA_Init+0x15c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d11a      	bne.n	80048d4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800489e:	4b29      	ldr	r3, [pc, #164]	; (8004944 <HAL_DMA_Init+0x168>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a6:	f003 031c 	and.w	r3, r3, #28
 80048aa:	210f      	movs	r1, #15
 80048ac:	fa01 f303 	lsl.w	r3, r1, r3
 80048b0:	43db      	mvns	r3, r3
 80048b2:	4924      	ldr	r1, [pc, #144]	; (8004944 <HAL_DMA_Init+0x168>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80048b8:	4b22      	ldr	r3, [pc, #136]	; (8004944 <HAL_DMA_Init+0x168>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6859      	ldr	r1, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c4:	f003 031c 	and.w	r3, r3, #28
 80048c8:	fa01 f303 	lsl.w	r3, r1, r3
 80048cc:	491d      	ldr	r1, [pc, #116]	; (8004944 <HAL_DMA_Init+0x168>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	600b      	str	r3, [r1, #0]
 80048d2:	e019      	b.n	8004908 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80048d4:	4b1c      	ldr	r3, [pc, #112]	; (8004948 <HAL_DMA_Init+0x16c>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048dc:	f003 031c 	and.w	r3, r3, #28
 80048e0:	210f      	movs	r1, #15
 80048e2:	fa01 f303 	lsl.w	r3, r1, r3
 80048e6:	43db      	mvns	r3, r3
 80048e8:	4917      	ldr	r1, [pc, #92]	; (8004948 <HAL_DMA_Init+0x16c>)
 80048ea:	4013      	ands	r3, r2
 80048ec:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80048ee:	4b16      	ldr	r3, [pc, #88]	; (8004948 <HAL_DMA_Init+0x16c>)
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6859      	ldr	r1, [r3, #4]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fa:	f003 031c 	and.w	r3, r3, #28
 80048fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004902:	4911      	ldr	r1, [pc, #68]	; (8004948 <HAL_DMA_Init+0x16c>)
 8004904:	4313      	orrs	r3, r2
 8004906:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	40020407 	.word	0x40020407
 8004930:	bffdfff8 	.word	0xbffdfff8
 8004934:	cccccccd 	.word	0xcccccccd
 8004938:	40020000 	.word	0x40020000
 800493c:	bffdfbf8 	.word	0xbffdfbf8
 8004940:	40020400 	.word	0x40020400
 8004944:	400200a8 	.word	0x400200a8
 8004948:	400204a8 	.word	0x400204a8

0800494c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
 8004958:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800495a:	2300      	movs	r3, #0
 800495c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_DMA_Start_IT+0x20>
 8004968:	2302      	movs	r3, #2
 800496a:	e04b      	b.n	8004a04 <HAL_DMA_Start_IT+0xb8>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b01      	cmp	r3, #1
 800497e:	d13a      	bne.n	80049f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2202      	movs	r2, #2
 8004984:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0201 	bic.w	r2, r2, #1
 800499c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	68b9      	ldr	r1, [r7, #8]
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 f91e 	bl	8004be6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d008      	beq.n	80049c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 020e 	orr.w	r2, r2, #14
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	e00f      	b.n	80049e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0204 	bic.w	r2, r2, #4
 80049d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 020a 	orr.w	r2, r2, #10
 80049e2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	e005      	b.n	8004a02 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80049fe:	2302      	movs	r3, #2
 8004a00:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d008      	beq.n	8004a36 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2204      	movs	r2, #4
 8004a28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e022      	b.n	8004a7c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 020e 	bic.w	r2, r2, #14
 8004a44:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0201 	bic.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5a:	f003 021c 	and.w	r2, r3, #28
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	2101      	movs	r1, #1
 8004a64:	fa01 f202 	lsl.w	r2, r1, r2
 8004a68:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa4:	f003 031c 	and.w	r3, r3, #28
 8004aa8:	2204      	movs	r2, #4
 8004aaa:	409a      	lsls	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d026      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x7a>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d021      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d107      	bne.n	8004adc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0204 	bic.w	r2, r2, #4
 8004ada:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae0:	f003 021c 	and.w	r2, r3, #28
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae8:	2104      	movs	r1, #4
 8004aea:	fa01 f202 	lsl.w	r2, r1, r2
 8004aee:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d071      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004b00:	e06c      	b.n	8004bdc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	f003 031c 	and.w	r3, r3, #28
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	409a      	lsls	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4013      	ands	r3, r2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d02e      	beq.n	8004b74 <HAL_DMA_IRQHandler+0xec>
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d029      	beq.n	8004b74 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0320 	and.w	r3, r3, #32
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10b      	bne.n	8004b46 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 020a 	bic.w	r2, r2, #10
 8004b3c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4a:	f003 021c 	and.w	r2, r3, #28
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	2102      	movs	r1, #2
 8004b54:	fa01 f202 	lsl.w	r2, r1, r2
 8004b58:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d038      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004b72:	e033      	b.n	8004bdc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b78:	f003 031c 	and.w	r3, r3, #28
 8004b7c:	2208      	movs	r2, #8
 8004b7e:	409a      	lsls	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4013      	ands	r3, r2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d02a      	beq.n	8004bde <HAL_DMA_IRQHandler+0x156>
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f003 0308 	and.w	r3, r3, #8
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d025      	beq.n	8004bde <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 020e 	bic.w	r2, r2, #14
 8004ba0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba6:	f003 021c 	and.w	r2, r3, #28
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	2101      	movs	r1, #1
 8004bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d004      	beq.n	8004bde <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004bdc:	bf00      	nop
 8004bde:	bf00      	nop
}
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b085      	sub	sp, #20
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	607a      	str	r2, [r7, #4]
 8004bf2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf8:	f003 021c 	and.w	r2, r3, #28
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	2101      	movs	r1, #1
 8004c02:	fa01 f202 	lsl.w	r2, r1, r2
 8004c06:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	2b10      	cmp	r3, #16
 8004c16:	d108      	bne.n	8004c2a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c28:	e007      	b.n	8004c3a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	60da      	str	r2, [r3, #12]
}
 8004c3a:	bf00      	nop
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
	...

08004c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c52:	2300      	movs	r3, #0
 8004c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c56:	e148      	b.n	8004eea <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	fa01 f303 	lsl.w	r3, r1, r3
 8004c64:	4013      	ands	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 813a 	beq.w	8004ee4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d00b      	beq.n	8004c90 <HAL_GPIO_Init+0x48>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d007      	beq.n	8004c90 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c84:	2b11      	cmp	r3, #17
 8004c86:	d003      	beq.n	8004c90 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b12      	cmp	r3, #18
 8004c8e:	d130      	bne.n	8004cf2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	2203      	movs	r2, #3
 8004c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca0:	43db      	mvns	r3, r3
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	fa02 f303 	lsl.w	r3, r2, r3
 8004cce:	43db      	mvns	r3, r3
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	091b      	lsrs	r3, r3, #4
 8004cdc:	f003 0201 	and.w	r2, r3, #1
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43db      	mvns	r3, r3
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4013      	ands	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d003      	beq.n	8004d32 <HAL_GPIO_Init+0xea>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2b12      	cmp	r3, #18
 8004d30:	d123      	bne.n	8004d7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	08da      	lsrs	r2, r3, #3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	3208      	adds	r2, #8
 8004d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	220f      	movs	r2, #15
 8004d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4e:	43db      	mvns	r3, r3
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4013      	ands	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	691a      	ldr	r2, [r3, #16]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	08da      	lsrs	r2, r3, #3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3208      	adds	r2, #8
 8004d74:	6939      	ldr	r1, [r7, #16]
 8004d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	2203      	movs	r2, #3
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	43db      	mvns	r3, r3
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f003 0203 	and.w	r2, r3, #3
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 8094 	beq.w	8004ee4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dbc:	4b52      	ldr	r3, [pc, #328]	; (8004f08 <HAL_GPIO_Init+0x2c0>)
 8004dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc0:	4a51      	ldr	r2, [pc, #324]	; (8004f08 <HAL_GPIO_Init+0x2c0>)
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	6613      	str	r3, [r2, #96]	; 0x60
 8004dc8:	4b4f      	ldr	r3, [pc, #316]	; (8004f08 <HAL_GPIO_Init+0x2c0>)
 8004dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	60bb      	str	r3, [r7, #8]
 8004dd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004dd4:	4a4d      	ldr	r2, [pc, #308]	; (8004f0c <HAL_GPIO_Init+0x2c4>)
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	089b      	lsrs	r3, r3, #2
 8004dda:	3302      	adds	r3, #2
 8004ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004de0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f003 0303 	and.w	r3, r3, #3
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	220f      	movs	r2, #15
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	43db      	mvns	r3, r3
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	4013      	ands	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004dfe:	d00d      	beq.n	8004e1c <HAL_GPIO_Init+0x1d4>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a43      	ldr	r2, [pc, #268]	; (8004f10 <HAL_GPIO_Init+0x2c8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d007      	beq.n	8004e18 <HAL_GPIO_Init+0x1d0>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a42      	ldr	r2, [pc, #264]	; (8004f14 <HAL_GPIO_Init+0x2cc>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d101      	bne.n	8004e14 <HAL_GPIO_Init+0x1cc>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e004      	b.n	8004e1e <HAL_GPIO_Init+0x1d6>
 8004e14:	2307      	movs	r3, #7
 8004e16:	e002      	b.n	8004e1e <HAL_GPIO_Init+0x1d6>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <HAL_GPIO_Init+0x1d6>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	f002 0203 	and.w	r2, r2, #3
 8004e24:	0092      	lsls	r2, r2, #2
 8004e26:	4093      	lsls	r3, r2
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e2e:	4937      	ldr	r1, [pc, #220]	; (8004f0c <HAL_GPIO_Init+0x2c4>)
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	089b      	lsrs	r3, r3, #2
 8004e34:	3302      	adds	r3, #2
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e3c:	4b36      	ldr	r3, [pc, #216]	; (8004f18 <HAL_GPIO_Init+0x2d0>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	43db      	mvns	r3, r3
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e60:	4a2d      	ldr	r2, [pc, #180]	; (8004f18 <HAL_GPIO_Init+0x2d0>)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004e66:	4b2c      	ldr	r3, [pc, #176]	; (8004f18 <HAL_GPIO_Init+0x2d0>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	43db      	mvns	r3, r3
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4013      	ands	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e8a:	4a23      	ldr	r2, [pc, #140]	; (8004f18 <HAL_GPIO_Init+0x2d0>)
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e90:	4b21      	ldr	r3, [pc, #132]	; (8004f18 <HAL_GPIO_Init+0x2d0>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004eb4:	4a18      	ldr	r2, [pc, #96]	; (8004f18 <HAL_GPIO_Init+0x2d0>)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004eba:	4b17      	ldr	r3, [pc, #92]	; (8004f18 <HAL_GPIO_Init+0x2d0>)
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ede:	4a0e      	ldr	r2, [pc, #56]	; (8004f18 <HAL_GPIO_Init+0x2d0>)
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f47f aeaf 	bne.w	8004c58 <HAL_GPIO_Init+0x10>
  }
}
 8004efa:	bf00      	nop
 8004efc:	bf00      	nop
 8004efe:	371c      	adds	r7, #28
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	48000400 	.word	0x48000400
 8004f14:	48000800 	.word	0x48000800
 8004f18:	40010400 	.word	0x40010400

08004f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	807b      	strh	r3, [r7, #2]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f2c:	787b      	ldrb	r3, [r7, #1]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f32:	887a      	ldrh	r2, [r7, #2]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f38:	e002      	b.n	8004f40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f3a:	887a      	ldrh	r2, [r7, #2]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e081      	b.n	8005062 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7fd fa74 	bl	8002460 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2224      	movs	r2, #36	; 0x24
 8004f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0201 	bic.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d107      	bne.n	8004fc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fc2:	609a      	str	r2, [r3, #8]
 8004fc4:	e006      	b.n	8004fd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689a      	ldr	r2, [r3, #8]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004fd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d104      	bne.n	8004fe6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fe4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6812      	ldr	r2, [r2, #0]
 8004ff0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ff8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005008:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691a      	ldr	r2, [r3, #16]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	ea42 0103 	orr.w	r1, r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	021a      	lsls	r2, r3, #8
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	69d9      	ldr	r1, [r3, #28]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a1a      	ldr	r2, [r3, #32]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0201 	orr.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2220      	movs	r2, #32
 800504e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af02      	add	r7, sp, #8
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	607a      	str	r2, [r7, #4]
 8005076:	461a      	mov	r2, r3
 8005078:	460b      	mov	r3, r1
 800507a:	817b      	strh	r3, [r7, #10]
 800507c:	4613      	mov	r3, r2
 800507e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b20      	cmp	r3, #32
 800508a:	f040 80da 	bne.w	8005242 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <HAL_I2C_Master_Transmit+0x30>
 8005098:	2302      	movs	r3, #2
 800509a:	e0d3      	b.n	8005244 <HAL_I2C_Master_Transmit+0x1d8>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050a4:	f7fe f80e 	bl	80030c4 <HAL_GetTick>
 80050a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	2319      	movs	r3, #25
 80050b0:	2201      	movs	r2, #1
 80050b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 f8fc 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e0be      	b.n	8005244 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2221      	movs	r2, #33	; 0x21
 80050ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2210      	movs	r2, #16
 80050d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	893a      	ldrh	r2, [r7, #8]
 80050e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	2bff      	cmp	r3, #255	; 0xff
 80050f6:	d90e      	bls.n	8005116 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	22ff      	movs	r2, #255	; 0xff
 80050fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005102:	b2da      	uxtb	r2, r3
 8005104:	8979      	ldrh	r1, [r7, #10]
 8005106:	4b51      	ldr	r3, [pc, #324]	; (800524c <HAL_I2C_Master_Transmit+0x1e0>)
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 f9f2 	bl	80054f8 <I2C_TransferConfig>
 8005114:	e06c      	b.n	80051f0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005124:	b2da      	uxtb	r2, r3
 8005126:	8979      	ldrh	r1, [r7, #10]
 8005128:	4b48      	ldr	r3, [pc, #288]	; (800524c <HAL_I2C_Master_Transmit+0x1e0>)
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 f9e1 	bl	80054f8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005136:	e05b      	b.n	80051f0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	6a39      	ldr	r1, [r7, #32]
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 f8f9 	bl	8005334 <I2C_WaitOnTXISFlagUntilTimeout>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e07b      	b.n	8005244 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	781a      	ldrb	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005166:	b29b      	uxth	r3, r3
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d034      	beq.n	80051f0 <HAL_I2C_Master_Transmit+0x184>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518a:	2b00      	cmp	r3, #0
 800518c:	d130      	bne.n	80051f0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	2200      	movs	r2, #0
 8005196:	2180      	movs	r1, #128	; 0x80
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 f88b 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e04d      	b.n	8005244 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2bff      	cmp	r3, #255	; 0xff
 80051b0:	d90e      	bls.n	80051d0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	22ff      	movs	r2, #255	; 0xff
 80051b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	8979      	ldrh	r1, [r7, #10]
 80051c0:	2300      	movs	r3, #0
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 f995 	bl	80054f8 <I2C_TransferConfig>
 80051ce:	e00f      	b.n	80051f0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	8979      	ldrh	r1, [r7, #10]
 80051e2:	2300      	movs	r3, #0
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 f984 	bl	80054f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d19e      	bne.n	8005138 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	6a39      	ldr	r1, [r7, #32]
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 f8d8 	bl	80053b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e01a      	b.n	8005244 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2220      	movs	r2, #32
 8005214:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6859      	ldr	r1, [r3, #4]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <HAL_I2C_Master_Transmit+0x1e4>)
 8005222:	400b      	ands	r3, r1
 8005224:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800523e:	2300      	movs	r3, #0
 8005240:	e000      	b.n	8005244 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005242:	2302      	movs	r3, #2
  }
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	80002000 	.word	0x80002000
 8005250:	fe00e800 	.word	0xfe00e800

08005254 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8005260:	4618      	mov	r0, r3
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b02      	cmp	r3, #2
 8005280:	d103      	bne.n	800528a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2200      	movs	r2, #0
 8005288:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b01      	cmp	r3, #1
 8005296:	d007      	beq.n	80052a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699a      	ldr	r2, [r3, #24]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0201 	orr.w	r2, r2, #1
 80052a6:	619a      	str	r2, [r3, #24]
  }
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	603b      	str	r3, [r7, #0]
 80052c0:	4613      	mov	r3, r2
 80052c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052c4:	e022      	b.n	800530c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052cc:	d01e      	beq.n	800530c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ce:	f7fd fef9 	bl	80030c4 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d302      	bcc.n	80052e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d113      	bne.n	800530c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e8:	f043 0220 	orr.w	r2, r3, #32
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e00f      	b.n	800532c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	699a      	ldr	r2, [r3, #24]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4013      	ands	r3, r2
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	429a      	cmp	r2, r3
 800531a:	bf0c      	ite	eq
 800531c:	2301      	moveq	r3, #1
 800531e:	2300      	movne	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	79fb      	ldrb	r3, [r7, #7]
 8005326:	429a      	cmp	r2, r3
 8005328:	d0cd      	beq.n	80052c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005340:	e02c      	b.n	800539c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 f870 	bl	800542c <I2C_IsAcknowledgeFailed>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e02a      	b.n	80053ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535c:	d01e      	beq.n	800539c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800535e:	f7fd feb1 	bl	80030c4 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	429a      	cmp	r2, r3
 800536c:	d302      	bcc.n	8005374 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d113      	bne.n	800539c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005378:	f043 0220 	orr.w	r2, r3, #32
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e007      	b.n	80053ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d1cb      	bne.n	8005342 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053c0:	e028      	b.n	8005414 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	68b9      	ldr	r1, [r7, #8]
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 f830 	bl	800542c <I2C_IsAcknowledgeFailed>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e026      	b.n	8005424 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d6:	f7fd fe75 	bl	80030c4 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d302      	bcc.n	80053ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d113      	bne.n	8005414 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f0:	f043 0220 	orr.w	r2, r3, #32
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e007      	b.n	8005424 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	2b20      	cmp	r3, #32
 8005420:	d1cf      	bne.n	80053c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	2b10      	cmp	r3, #16
 8005444:	d151      	bne.n	80054ea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005446:	e022      	b.n	800548e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544e:	d01e      	beq.n	800548e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005450:	f7fd fe38 	bl	80030c4 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	429a      	cmp	r2, r3
 800545e:	d302      	bcc.n	8005466 <I2C_IsAcknowledgeFailed+0x3a>
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d113      	bne.n	800548e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546a:	f043 0220 	orr.w	r2, r3, #32
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2220      	movs	r2, #32
 8005476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e02e      	b.n	80054ec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b20      	cmp	r3, #32
 800549a:	d1d5      	bne.n	8005448 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2210      	movs	r2, #16
 80054a2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2220      	movs	r2, #32
 80054aa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f7ff fedd 	bl	800526c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6859      	ldr	r1, [r3, #4]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	4b0d      	ldr	r3, [pc, #52]	; (80054f4 <I2C_IsAcknowledgeFailed+0xc8>)
 80054be:	400b      	ands	r3, r1
 80054c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c6:	f043 0204 	orr.w	r2, r3, #4
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	fe00e800 	.word	0xfe00e800

080054f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	607b      	str	r3, [r7, #4]
 8005502:	460b      	mov	r3, r1
 8005504:	817b      	strh	r3, [r7, #10]
 8005506:	4613      	mov	r3, r2
 8005508:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	0d5b      	lsrs	r3, r3, #21
 8005514:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005518:	4b0d      	ldr	r3, [pc, #52]	; (8005550 <I2C_TransferConfig+0x58>)
 800551a:	430b      	orrs	r3, r1
 800551c:	43db      	mvns	r3, r3
 800551e:	ea02 0103 	and.w	r1, r2, r3
 8005522:	897b      	ldrh	r3, [r7, #10]
 8005524:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005528:	7a7b      	ldrb	r3, [r7, #9]
 800552a:	041b      	lsls	r3, r3, #16
 800552c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005530:	431a      	orrs	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	431a      	orrs	r2, r3
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	431a      	orrs	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005542:	bf00      	nop
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	03ff63ff 	.word	0x03ff63ff

08005554 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b20      	cmp	r3, #32
 8005568:	d138      	bne.n	80055dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005570:	2b01      	cmp	r3, #1
 8005572:	d101      	bne.n	8005578 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005574:	2302      	movs	r3, #2
 8005576:	e032      	b.n	80055de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2224      	movs	r2, #36	; 0x24
 8005584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0201 	bic.w	r2, r2, #1
 8005596:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6819      	ldr	r1, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f042 0201 	orr.w	r2, r2, #1
 80055c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80055d8:	2300      	movs	r3, #0
 80055da:	e000      	b.n	80055de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80055dc:	2302      	movs	r3, #2
  }
}
 80055de:	4618      	mov	r0, r3
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b085      	sub	sp, #20
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
 80055f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b20      	cmp	r3, #32
 80055fe:	d139      	bne.n	8005674 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005606:	2b01      	cmp	r3, #1
 8005608:	d101      	bne.n	800560e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800560a:	2302      	movs	r3, #2
 800560c:	e033      	b.n	8005676 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2224      	movs	r2, #36	; 0x24
 800561a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0201 	bic.w	r2, r2, #1
 800562c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800563c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	021b      	lsls	r3, r3, #8
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	4313      	orrs	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	e000      	b.n	8005676 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005674:	2302      	movs	r3, #2
  }
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
	...

08005684 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005688:	4b04      	ldr	r3, [pc, #16]	; (800569c <HAL_PWREx_GetVoltageRange+0x18>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005690:	4618      	mov	r0, r3
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40007000 	.word	0x40007000

080056a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ae:	d130      	bne.n	8005712 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80056b0:	4b23      	ldr	r3, [pc, #140]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056bc:	d038      	beq.n	8005730 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056be:	4b20      	ldr	r3, [pc, #128]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80056c6:	4a1e      	ldr	r2, [pc, #120]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056ce:	4b1d      	ldr	r3, [pc, #116]	; (8005744 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2232      	movs	r2, #50	; 0x32
 80056d4:	fb02 f303 	mul.w	r3, r2, r3
 80056d8:	4a1b      	ldr	r2, [pc, #108]	; (8005748 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80056da:	fba2 2303 	umull	r2, r3, r2, r3
 80056de:	0c9b      	lsrs	r3, r3, #18
 80056e0:	3301      	adds	r3, #1
 80056e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056e4:	e002      	b.n	80056ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056ec:	4b14      	ldr	r3, [pc, #80]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f8:	d102      	bne.n	8005700 <HAL_PWREx_ControlVoltageScaling+0x60>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1f2      	bne.n	80056e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005700:	4b0f      	ldr	r3, [pc, #60]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800570c:	d110      	bne.n	8005730 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e00f      	b.n	8005732 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005712:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800571a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800571e:	d007      	beq.n	8005730 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005720:	4b07      	ldr	r3, [pc, #28]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005728:	4a05      	ldr	r2, [pc, #20]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800572a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800572e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	40007000 	.word	0x40007000
 8005744:	20000000 	.word	0x20000000
 8005748:	431bde83 	.word	0x431bde83

0800574c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d102      	bne.n	8005760 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	f000 bc10 	b.w	8005f80 <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005760:	4b96      	ldr	r3, [pc, #600]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 030c 	and.w	r3, r3, #12
 8005768:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800576a:	4b94      	ldr	r3, [pc, #592]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f003 0303 	and.w	r3, r3, #3
 8005772:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0310 	and.w	r3, r3, #16
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 80e4 	beq.w	800594a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d007      	beq.n	8005798 <HAL_RCC_OscConfig+0x4c>
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	2b0c      	cmp	r3, #12
 800578c:	f040 808b 	bne.w	80058a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	2b01      	cmp	r3, #1
 8005794:	f040 8087 	bne.w	80058a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005798:	4b88      	ldr	r3, [pc, #544]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d005      	beq.n	80057b0 <HAL_RCC_OscConfig+0x64>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e3e7      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a1a      	ldr	r2, [r3, #32]
 80057b4:	4b81      	ldr	r3, [pc, #516]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d004      	beq.n	80057ca <HAL_RCC_OscConfig+0x7e>
 80057c0:	4b7e      	ldr	r3, [pc, #504]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057c8:	e005      	b.n	80057d6 <HAL_RCC_OscConfig+0x8a>
 80057ca:	4b7c      	ldr	r3, [pc, #496]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 80057cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057d0:	091b      	lsrs	r3, r3, #4
 80057d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d223      	bcs.n	8005822 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fd7a 	bl	80062d8 <RCC_SetFlashLatencyFromMSIRange>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e3c8      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057ee:	4b73      	ldr	r3, [pc, #460]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a72      	ldr	r2, [pc, #456]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 80057f4:	f043 0308 	orr.w	r3, r3, #8
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	4b70      	ldr	r3, [pc, #448]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	496d      	ldr	r1, [pc, #436]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 8005808:	4313      	orrs	r3, r2
 800580a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800580c:	4b6b      	ldr	r3, [pc, #428]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	021b      	lsls	r3, r3, #8
 800581a:	4968      	ldr	r1, [pc, #416]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 800581c:	4313      	orrs	r3, r2
 800581e:	604b      	str	r3, [r1, #4]
 8005820:	e025      	b.n	800586e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005822:	4b66      	ldr	r3, [pc, #408]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a65      	ldr	r2, [pc, #404]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 8005828:	f043 0308 	orr.w	r3, r3, #8
 800582c:	6013      	str	r3, [r2, #0]
 800582e:	4b63      	ldr	r3, [pc, #396]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	4960      	ldr	r1, [pc, #384]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 800583c:	4313      	orrs	r3, r2
 800583e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005840:	4b5e      	ldr	r3, [pc, #376]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	021b      	lsls	r3, r3, #8
 800584e:	495b      	ldr	r1, [pc, #364]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 8005850:	4313      	orrs	r3, r2
 8005852:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d109      	bne.n	800586e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fd3a 	bl	80062d8 <RCC_SetFlashLatencyFromMSIRange>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e388      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800586e:	f000 fc6f 	bl	8006150 <HAL_RCC_GetSysClockFreq>
 8005872:	4602      	mov	r2, r0
 8005874:	4b51      	ldr	r3, [pc, #324]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	091b      	lsrs	r3, r3, #4
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	4950      	ldr	r1, [pc, #320]	; (80059c0 <HAL_RCC_OscConfig+0x274>)
 8005880:	5ccb      	ldrb	r3, [r1, r3]
 8005882:	f003 031f 	and.w	r3, r3, #31
 8005886:	fa22 f303 	lsr.w	r3, r2, r3
 800588a:	4a4e      	ldr	r2, [pc, #312]	; (80059c4 <HAL_RCC_OscConfig+0x278>)
 800588c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800588e:	4b4e      	ldr	r3, [pc, #312]	; (80059c8 <HAL_RCC_OscConfig+0x27c>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f7fd fbc6 	bl	8003024 <HAL_InitTick>
 8005898:	4603      	mov	r3, r0
 800589a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d052      	beq.n	8005948 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
 80058a4:	e36c      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d032      	beq.n	8005914 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80058ae:	4b43      	ldr	r3, [pc, #268]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a42      	ldr	r2, [pc, #264]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 80058b4:	f043 0301 	orr.w	r3, r3, #1
 80058b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80058ba:	f7fd fc03 	bl	80030c4 <HAL_GetTick>
 80058be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058c0:	e008      	b.n	80058d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058c2:	f7fd fbff 	bl	80030c4 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e355      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058d4:	4b39      	ldr	r3, [pc, #228]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d0f0      	beq.n	80058c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058e0:	4b36      	ldr	r3, [pc, #216]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a35      	ldr	r2, [pc, #212]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 80058e6:	f043 0308 	orr.w	r3, r3, #8
 80058ea:	6013      	str	r3, [r2, #0]
 80058ec:	4b33      	ldr	r3, [pc, #204]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	4930      	ldr	r1, [pc, #192]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058fe:	4b2f      	ldr	r3, [pc, #188]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	021b      	lsls	r3, r3, #8
 800590c:	492b      	ldr	r1, [pc, #172]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 800590e:	4313      	orrs	r3, r2
 8005910:	604b      	str	r3, [r1, #4]
 8005912:	e01a      	b.n	800594a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005914:	4b29      	ldr	r3, [pc, #164]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a28      	ldr	r2, [pc, #160]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 800591a:	f023 0301 	bic.w	r3, r3, #1
 800591e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005920:	f7fd fbd0 	bl	80030c4 <HAL_GetTick>
 8005924:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005926:	e008      	b.n	800593a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005928:	f7fd fbcc 	bl	80030c4 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e322      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800593a:	4b20      	ldr	r3, [pc, #128]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1f0      	bne.n	8005928 <HAL_RCC_OscConfig+0x1dc>
 8005946:	e000      	b.n	800594a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005948:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d073      	beq.n	8005a3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	2b08      	cmp	r3, #8
 800595a:	d005      	beq.n	8005968 <HAL_RCC_OscConfig+0x21c>
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	2b0c      	cmp	r3, #12
 8005960:	d10e      	bne.n	8005980 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2b03      	cmp	r3, #3
 8005966:	d10b      	bne.n	8005980 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005968:	4b14      	ldr	r3, [pc, #80]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d063      	beq.n	8005a3c <HAL_RCC_OscConfig+0x2f0>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d15f      	bne.n	8005a3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e2ff      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005988:	d106      	bne.n	8005998 <HAL_RCC_OscConfig+0x24c>
 800598a:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a0b      	ldr	r2, [pc, #44]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 8005990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	e025      	b.n	80059e4 <HAL_RCC_OscConfig+0x298>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059a0:	d114      	bne.n	80059cc <HAL_RCC_OscConfig+0x280>
 80059a2:	4b06      	ldr	r3, [pc, #24]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a05      	ldr	r2, [pc, #20]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 80059a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	4b03      	ldr	r3, [pc, #12]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a02      	ldr	r2, [pc, #8]	; (80059bc <HAL_RCC_OscConfig+0x270>)
 80059b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	e013      	b.n	80059e4 <HAL_RCC_OscConfig+0x298>
 80059bc:	40021000 	.word	0x40021000
 80059c0:	0800ac08 	.word	0x0800ac08
 80059c4:	20000000 	.word	0x20000000
 80059c8:	20000004 	.word	0x20000004
 80059cc:	4ba0      	ldr	r3, [pc, #640]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a9f      	ldr	r2, [pc, #636]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 80059d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059d6:	6013      	str	r3, [r2, #0]
 80059d8:	4b9d      	ldr	r3, [pc, #628]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a9c      	ldr	r2, [pc, #624]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 80059de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d013      	beq.n	8005a14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ec:	f7fd fb6a 	bl	80030c4 <HAL_GetTick>
 80059f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059f2:	e008      	b.n	8005a06 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059f4:	f7fd fb66 	bl	80030c4 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b64      	cmp	r3, #100	; 0x64
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e2bc      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a06:	4b92      	ldr	r3, [pc, #584]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0f0      	beq.n	80059f4 <HAL_RCC_OscConfig+0x2a8>
 8005a12:	e014      	b.n	8005a3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a14:	f7fd fb56 	bl	80030c4 <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a1c:	f7fd fb52 	bl	80030c4 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b64      	cmp	r3, #100	; 0x64
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e2a8      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a2e:	4b88      	ldr	r3, [pc, #544]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1f0      	bne.n	8005a1c <HAL_RCC_OscConfig+0x2d0>
 8005a3a:	e000      	b.n	8005a3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d060      	beq.n	8005b0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d005      	beq.n	8005a5c <HAL_RCC_OscConfig+0x310>
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2b0c      	cmp	r3, #12
 8005a54:	d119      	bne.n	8005a8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d116      	bne.n	8005a8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a5c:	4b7c      	ldr	r3, [pc, #496]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d005      	beq.n	8005a74 <HAL_RCC_OscConfig+0x328>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e285      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a74:	4b76      	ldr	r3, [pc, #472]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	061b      	lsls	r3, r3, #24
 8005a82:	4973      	ldr	r1, [pc, #460]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a88:	e040      	b.n	8005b0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d023      	beq.n	8005ada <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a92:	4b6f      	ldr	r3, [pc, #444]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a6e      	ldr	r2, [pc, #440]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a9e:	f7fd fb11 	bl	80030c4 <HAL_GetTick>
 8005aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aa6:	f7fd fb0d 	bl	80030c4 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e263      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ab8:	4b65      	ldr	r3, [pc, #404]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0f0      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ac4:	4b62      	ldr	r3, [pc, #392]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	061b      	lsls	r3, r3, #24
 8005ad2:	495f      	ldr	r1, [pc, #380]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	604b      	str	r3, [r1, #4]
 8005ad8:	e018      	b.n	8005b0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ada:	4b5d      	ldr	r3, [pc, #372]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a5c      	ldr	r2, [pc, #368]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae6:	f7fd faed 	bl	80030c4 <HAL_GetTick>
 8005aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aee:	f7fd fae9 	bl	80030c4 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e23f      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b00:	4b53      	ldr	r3, [pc, #332]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1f0      	bne.n	8005aee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0308 	and.w	r3, r3, #8
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d03c      	beq.n	8005b92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d01c      	beq.n	8005b5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b20:	4b4b      	ldr	r3, [pc, #300]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b26:	4a4a      	ldr	r2, [pc, #296]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005b28:	f043 0301 	orr.w	r3, r3, #1
 8005b2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b30:	f7fd fac8 	bl	80030c4 <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b38:	f7fd fac4 	bl	80030c4 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e21a      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b4a:	4b41      	ldr	r3, [pc, #260]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d0ef      	beq.n	8005b38 <HAL_RCC_OscConfig+0x3ec>
 8005b58:	e01b      	b.n	8005b92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b5a:	4b3d      	ldr	r3, [pc, #244]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b60:	4a3b      	ldr	r2, [pc, #236]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005b62:	f023 0301 	bic.w	r3, r3, #1
 8005b66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b6a:	f7fd faab 	bl	80030c4 <HAL_GetTick>
 8005b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b70:	e008      	b.n	8005b84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b72:	f7fd faa7 	bl	80030c4 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e1fd      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b84:	4b32      	ldr	r3, [pc, #200]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1ef      	bne.n	8005b72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0304 	and.w	r3, r3, #4
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 80a6 	beq.w	8005cec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005ba4:	4b2a      	ldr	r3, [pc, #168]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10d      	bne.n	8005bcc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bb0:	4b27      	ldr	r3, [pc, #156]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb4:	4a26      	ldr	r2, [pc, #152]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bba:	6593      	str	r3, [r2, #88]	; 0x58
 8005bbc:	4b24      	ldr	r3, [pc, #144]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bc4:	60bb      	str	r3, [r7, #8]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bcc:	4b21      	ldr	r3, [pc, #132]	; (8005c54 <HAL_RCC_OscConfig+0x508>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d118      	bne.n	8005c0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bd8:	4b1e      	ldr	r3, [pc, #120]	; (8005c54 <HAL_RCC_OscConfig+0x508>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a1d      	ldr	r2, [pc, #116]	; (8005c54 <HAL_RCC_OscConfig+0x508>)
 8005bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005be4:	f7fd fa6e 	bl	80030c4 <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bec:	f7fd fa6a 	bl	80030c4 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e1c0      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bfe:	4b15      	ldr	r3, [pc, #84]	; (8005c54 <HAL_RCC_OscConfig+0x508>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0f0      	beq.n	8005bec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d108      	bne.n	8005c24 <HAL_RCC_OscConfig+0x4d8>
 8005c12:	4b0f      	ldr	r3, [pc, #60]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c18:	4a0d      	ldr	r2, [pc, #52]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005c1a:	f043 0301 	orr.w	r3, r3, #1
 8005c1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c22:	e029      	b.n	8005c78 <HAL_RCC_OscConfig+0x52c>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	2b05      	cmp	r3, #5
 8005c2a:	d115      	bne.n	8005c58 <HAL_RCC_OscConfig+0x50c>
 8005c2c:	4b08      	ldr	r3, [pc, #32]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c32:	4a07      	ldr	r2, [pc, #28]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005c34:	f043 0304 	orr.w	r3, r3, #4
 8005c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c3c:	4b04      	ldr	r3, [pc, #16]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c42:	4a03      	ldr	r2, [pc, #12]	; (8005c50 <HAL_RCC_OscConfig+0x504>)
 8005c44:	f043 0301 	orr.w	r3, r3, #1
 8005c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c4c:	e014      	b.n	8005c78 <HAL_RCC_OscConfig+0x52c>
 8005c4e:	bf00      	nop
 8005c50:	40021000 	.word	0x40021000
 8005c54:	40007000 	.word	0x40007000
 8005c58:	4b9a      	ldr	r3, [pc, #616]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c5e:	4a99      	ldr	r2, [pc, #612]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005c60:	f023 0301 	bic.w	r3, r3, #1
 8005c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c68:	4b96      	ldr	r3, [pc, #600]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6e:	4a95      	ldr	r2, [pc, #596]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005c70:	f023 0304 	bic.w	r3, r3, #4
 8005c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d016      	beq.n	8005cae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c80:	f7fd fa20 	bl	80030c4 <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c86:	e00a      	b.n	8005c9e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c88:	f7fd fa1c 	bl	80030c4 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e170      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c9e:	4b89      	ldr	r3, [pc, #548]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0ed      	beq.n	8005c88 <HAL_RCC_OscConfig+0x53c>
 8005cac:	e015      	b.n	8005cda <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cae:	f7fd fa09 	bl	80030c4 <HAL_GetTick>
 8005cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cb4:	e00a      	b.n	8005ccc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb6:	f7fd fa05 	bl	80030c4 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e159      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ccc:	4b7d      	ldr	r3, [pc, #500]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1ed      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cda:	7ffb      	ldrb	r3, [r7, #31]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d105      	bne.n	8005cec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ce0:	4b78      	ldr	r3, [pc, #480]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce4:	4a77      	ldr	r2, [pc, #476]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005ce6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0320 	and.w	r3, r3, #32
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d03c      	beq.n	8005d72 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d01c      	beq.n	8005d3a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d00:	4b70      	ldr	r3, [pc, #448]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005d02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d06:	4a6f      	ldr	r2, [pc, #444]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005d08:	f043 0301 	orr.w	r3, r3, #1
 8005d0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d10:	f7fd f9d8 	bl	80030c4 <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d16:	e008      	b.n	8005d2a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d18:	f7fd f9d4 	bl	80030c4 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e12a      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d2a:	4b66      	ldr	r3, [pc, #408]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005d2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d30:	f003 0302 	and.w	r3, r3, #2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0ef      	beq.n	8005d18 <HAL_RCC_OscConfig+0x5cc>
 8005d38:	e01b      	b.n	8005d72 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d3a:	4b62      	ldr	r3, [pc, #392]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005d3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d40:	4a60      	ldr	r2, [pc, #384]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005d42:	f023 0301 	bic.w	r3, r3, #1
 8005d46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d4a:	f7fd f9bb 	bl	80030c4 <HAL_GetTick>
 8005d4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d50:	e008      	b.n	8005d64 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d52:	f7fd f9b7 	bl	80030c4 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d901      	bls.n	8005d64 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e10d      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d64:	4b57      	ldr	r3, [pc, #348]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005d66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1ef      	bne.n	8005d52 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 8101 	beq.w	8005f7e <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	f040 80c9 	bne.w	8005f18 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005d86:	4b4f      	ldr	r3, [pc, #316]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f003 0203 	and.w	r2, r3, #3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d12c      	bne.n	8005df4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da4:	3b01      	subs	r3, #1
 8005da6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d123      	bne.n	8005df4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d11b      	bne.n	8005df4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d113      	bne.n	8005df4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd6:	085b      	lsrs	r3, r3, #1
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d109      	bne.n	8005df4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	085b      	lsrs	r3, r3, #1
 8005dec:	3b01      	subs	r3, #1
 8005dee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d06b      	beq.n	8005ecc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2b0c      	cmp	r3, #12
 8005df8:	d062      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005dfa:	4b32      	ldr	r3, [pc, #200]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e0ba      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e0a:	4b2e      	ldr	r3, [pc, #184]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a2d      	ldr	r2, [pc, #180]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005e10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e14:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e16:	f7fd f955 	bl	80030c4 <HAL_GetTick>
 8005e1a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e1c:	e008      	b.n	8005e30 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e1e:	f7fd f951 	bl	80030c4 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e0a7      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e30:	4b24      	ldr	r3, [pc, #144]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1f0      	bne.n	8005e1e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e3c:	4b21      	ldr	r3, [pc, #132]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005e3e:	68da      	ldr	r2, [r3, #12]
 8005e40:	4b21      	ldr	r3, [pc, #132]	; (8005ec8 <HAL_RCC_OscConfig+0x77c>)
 8005e42:	4013      	ands	r3, r2
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e4c:	3a01      	subs	r2, #1
 8005e4e:	0112      	lsls	r2, r2, #4
 8005e50:	4311      	orrs	r1, r2
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e56:	0212      	lsls	r2, r2, #8
 8005e58:	4311      	orrs	r1, r2
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e5e:	0852      	lsrs	r2, r2, #1
 8005e60:	3a01      	subs	r2, #1
 8005e62:	0552      	lsls	r2, r2, #21
 8005e64:	4311      	orrs	r1, r2
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005e6a:	0852      	lsrs	r2, r2, #1
 8005e6c:	3a01      	subs	r2, #1
 8005e6e:	0652      	lsls	r2, r2, #25
 8005e70:	4311      	orrs	r1, r2
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e76:	06d2      	lsls	r2, r2, #27
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	4912      	ldr	r1, [pc, #72]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005e80:	4b10      	ldr	r3, [pc, #64]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a0f      	ldr	r2, [pc, #60]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e8c:	4b0d      	ldr	r3, [pc, #52]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	4a0c      	ldr	r2, [pc, #48]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e98:	f7fd f914 	bl	80030c4 <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ea0:	f7fd f910 	bl	80030c4 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e066      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eb2:	4b04      	ldr	r3, [pc, #16]	; (8005ec4 <HAL_RCC_OscConfig+0x778>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d0f0      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ebe:	e05e      	b.n	8005f7e <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e05d      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
 8005ec4:	40021000 	.word	0x40021000
 8005ec8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ecc:	4b2e      	ldr	r3, [pc, #184]	; (8005f88 <HAL_RCC_OscConfig+0x83c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d152      	bne.n	8005f7e <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005ed8:	4b2b      	ldr	r3, [pc, #172]	; (8005f88 <HAL_RCC_OscConfig+0x83c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a2a      	ldr	r2, [pc, #168]	; (8005f88 <HAL_RCC_OscConfig+0x83c>)
 8005ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ee2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ee4:	4b28      	ldr	r3, [pc, #160]	; (8005f88 <HAL_RCC_OscConfig+0x83c>)
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	4a27      	ldr	r2, [pc, #156]	; (8005f88 <HAL_RCC_OscConfig+0x83c>)
 8005eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ef0:	f7fd f8e8 	bl	80030c4 <HAL_GetTick>
 8005ef4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ef6:	e008      	b.n	8005f0a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ef8:	f7fd f8e4 	bl	80030c4 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d901      	bls.n	8005f0a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e03a      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f0a:	4b1f      	ldr	r3, [pc, #124]	; (8005f88 <HAL_RCC_OscConfig+0x83c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d0f0      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x7ac>
 8005f16:	e032      	b.n	8005f7e <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	2b0c      	cmp	r3, #12
 8005f1c:	d02d      	beq.n	8005f7a <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f1e:	4b1a      	ldr	r3, [pc, #104]	; (8005f88 <HAL_RCC_OscConfig+0x83c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a19      	ldr	r2, [pc, #100]	; (8005f88 <HAL_RCC_OscConfig+0x83c>)
 8005f24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f28:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f2a:	4b17      	ldr	r3, [pc, #92]	; (8005f88 <HAL_RCC_OscConfig+0x83c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d105      	bne.n	8005f42 <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005f36:	4b14      	ldr	r3, [pc, #80]	; (8005f88 <HAL_RCC_OscConfig+0x83c>)
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	4a13      	ldr	r2, [pc, #76]	; (8005f88 <HAL_RCC_OscConfig+0x83c>)
 8005f3c:	f023 0303 	bic.w	r3, r3, #3
 8005f40:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005f42:	4b11      	ldr	r3, [pc, #68]	; (8005f88 <HAL_RCC_OscConfig+0x83c>)
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	4a10      	ldr	r2, [pc, #64]	; (8005f88 <HAL_RCC_OscConfig+0x83c>)
 8005f48:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f50:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f52:	f7fd f8b7 	bl	80030c4 <HAL_GetTick>
 8005f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f58:	e008      	b.n	8005f6c <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f5a:	f7fd f8b3 	bl	80030c4 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d901      	bls.n	8005f6c <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e009      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f6c:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <HAL_RCC_OscConfig+0x83c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1f0      	bne.n	8005f5a <HAL_RCC_OscConfig+0x80e>
 8005f78:	e001      	b.n	8005f7e <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e000      	b.n	8005f80 <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3720      	adds	r7, #32
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	40021000 	.word	0x40021000

08005f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e0c8      	b.n	8006132 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fa0:	4b66      	ldr	r3, [pc, #408]	; (800613c <HAL_RCC_ClockConfig+0x1b0>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d910      	bls.n	8005fd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fae:	4b63      	ldr	r3, [pc, #396]	; (800613c <HAL_RCC_ClockConfig+0x1b0>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f023 0207 	bic.w	r2, r3, #7
 8005fb6:	4961      	ldr	r1, [pc, #388]	; (800613c <HAL_RCC_ClockConfig+0x1b0>)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fbe:	4b5f      	ldr	r3, [pc, #380]	; (800613c <HAL_RCC_ClockConfig+0x1b0>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d001      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e0b0      	b.n	8006132 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d04c      	beq.n	8006076 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	2b03      	cmp	r3, #3
 8005fe2:	d107      	bne.n	8005ff4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fe4:	4b56      	ldr	r3, [pc, #344]	; (8006140 <HAL_RCC_ClockConfig+0x1b4>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d121      	bne.n	8006034 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e09e      	b.n	8006132 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d107      	bne.n	800600c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ffc:	4b50      	ldr	r3, [pc, #320]	; (8006140 <HAL_RCC_ClockConfig+0x1b4>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d115      	bne.n	8006034 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e092      	b.n	8006132 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d107      	bne.n	8006024 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006014:	4b4a      	ldr	r3, [pc, #296]	; (8006140 <HAL_RCC_ClockConfig+0x1b4>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d109      	bne.n	8006034 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e086      	b.n	8006132 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006024:	4b46      	ldr	r3, [pc, #280]	; (8006140 <HAL_RCC_ClockConfig+0x1b4>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e07e      	b.n	8006132 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006034:	4b42      	ldr	r3, [pc, #264]	; (8006140 <HAL_RCC_ClockConfig+0x1b4>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f023 0203 	bic.w	r2, r3, #3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	493f      	ldr	r1, [pc, #252]	; (8006140 <HAL_RCC_ClockConfig+0x1b4>)
 8006042:	4313      	orrs	r3, r2
 8006044:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006046:	f7fd f83d 	bl	80030c4 <HAL_GetTick>
 800604a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800604c:	e00a      	b.n	8006064 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800604e:	f7fd f839 	bl	80030c4 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	f241 3288 	movw	r2, #5000	; 0x1388
 800605c:	4293      	cmp	r3, r2
 800605e:	d901      	bls.n	8006064 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e066      	b.n	8006132 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006064:	4b36      	ldr	r3, [pc, #216]	; (8006140 <HAL_RCC_ClockConfig+0x1b4>)
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f003 020c 	and.w	r2, r3, #12
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	429a      	cmp	r2, r3
 8006074:	d1eb      	bne.n	800604e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b00      	cmp	r3, #0
 8006080:	d008      	beq.n	8006094 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006082:	4b2f      	ldr	r3, [pc, #188]	; (8006140 <HAL_RCC_ClockConfig+0x1b4>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	492c      	ldr	r1, [pc, #176]	; (8006140 <HAL_RCC_ClockConfig+0x1b4>)
 8006090:	4313      	orrs	r3, r2
 8006092:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006094:	4b29      	ldr	r3, [pc, #164]	; (800613c <HAL_RCC_ClockConfig+0x1b0>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d210      	bcs.n	80060c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060a2:	4b26      	ldr	r3, [pc, #152]	; (800613c <HAL_RCC_ClockConfig+0x1b0>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f023 0207 	bic.w	r2, r3, #7
 80060aa:	4924      	ldr	r1, [pc, #144]	; (800613c <HAL_RCC_ClockConfig+0x1b0>)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060b2:	4b22      	ldr	r3, [pc, #136]	; (800613c <HAL_RCC_ClockConfig+0x1b0>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d001      	beq.n	80060c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e036      	b.n	8006132 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d008      	beq.n	80060e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060d0:	4b1b      	ldr	r3, [pc, #108]	; (8006140 <HAL_RCC_ClockConfig+0x1b4>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	4918      	ldr	r1, [pc, #96]	; (8006140 <HAL_RCC_ClockConfig+0x1b4>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0308 	and.w	r3, r3, #8
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d009      	beq.n	8006102 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060ee:	4b14      	ldr	r3, [pc, #80]	; (8006140 <HAL_RCC_ClockConfig+0x1b4>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	4910      	ldr	r1, [pc, #64]	; (8006140 <HAL_RCC_ClockConfig+0x1b4>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006102:	f000 f825 	bl	8006150 <HAL_RCC_GetSysClockFreq>
 8006106:	4602      	mov	r2, r0
 8006108:	4b0d      	ldr	r3, [pc, #52]	; (8006140 <HAL_RCC_ClockConfig+0x1b4>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	091b      	lsrs	r3, r3, #4
 800610e:	f003 030f 	and.w	r3, r3, #15
 8006112:	490c      	ldr	r1, [pc, #48]	; (8006144 <HAL_RCC_ClockConfig+0x1b8>)
 8006114:	5ccb      	ldrb	r3, [r1, r3]
 8006116:	f003 031f 	and.w	r3, r3, #31
 800611a:	fa22 f303 	lsr.w	r3, r2, r3
 800611e:	4a0a      	ldr	r2, [pc, #40]	; (8006148 <HAL_RCC_ClockConfig+0x1bc>)
 8006120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006122:	4b0a      	ldr	r3, [pc, #40]	; (800614c <HAL_RCC_ClockConfig+0x1c0>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4618      	mov	r0, r3
 8006128:	f7fc ff7c 	bl	8003024 <HAL_InitTick>
 800612c:	4603      	mov	r3, r0
 800612e:	72fb      	strb	r3, [r7, #11]

  return status;
 8006130:	7afb      	ldrb	r3, [r7, #11]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	40022000 	.word	0x40022000
 8006140:	40021000 	.word	0x40021000
 8006144:	0800ac08 	.word	0x0800ac08
 8006148:	20000000 	.word	0x20000000
 800614c:	20000004 	.word	0x20000004

08006150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006150:	b480      	push	{r7}
 8006152:	b089      	sub	sp, #36	; 0x24
 8006154:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	61fb      	str	r3, [r7, #28]
 800615a:	2300      	movs	r3, #0
 800615c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800615e:	4b3e      	ldr	r3, [pc, #248]	; (8006258 <HAL_RCC_GetSysClockFreq+0x108>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f003 030c 	and.w	r3, r3, #12
 8006166:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006168:	4b3b      	ldr	r3, [pc, #236]	; (8006258 <HAL_RCC_GetSysClockFreq+0x108>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f003 0303 	and.w	r3, r3, #3
 8006170:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d005      	beq.n	8006184 <HAL_RCC_GetSysClockFreq+0x34>
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	2b0c      	cmp	r3, #12
 800617c:	d121      	bne.n	80061c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d11e      	bne.n	80061c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006184:	4b34      	ldr	r3, [pc, #208]	; (8006258 <HAL_RCC_GetSysClockFreq+0x108>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0308 	and.w	r3, r3, #8
 800618c:	2b00      	cmp	r3, #0
 800618e:	d107      	bne.n	80061a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006190:	4b31      	ldr	r3, [pc, #196]	; (8006258 <HAL_RCC_GetSysClockFreq+0x108>)
 8006192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006196:	0a1b      	lsrs	r3, r3, #8
 8006198:	f003 030f 	and.w	r3, r3, #15
 800619c:	61fb      	str	r3, [r7, #28]
 800619e:	e005      	b.n	80061ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80061a0:	4b2d      	ldr	r3, [pc, #180]	; (8006258 <HAL_RCC_GetSysClockFreq+0x108>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	091b      	lsrs	r3, r3, #4
 80061a6:	f003 030f 	and.w	r3, r3, #15
 80061aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80061ac:	4a2b      	ldr	r2, [pc, #172]	; (800625c <HAL_RCC_GetSysClockFreq+0x10c>)
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10d      	bne.n	80061d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061c0:	e00a      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d102      	bne.n	80061ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80061c8:	4b25      	ldr	r3, [pc, #148]	; (8006260 <HAL_RCC_GetSysClockFreq+0x110>)
 80061ca:	61bb      	str	r3, [r7, #24]
 80061cc:	e004      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	2b08      	cmp	r3, #8
 80061d2:	d101      	bne.n	80061d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061d4:	4b23      	ldr	r3, [pc, #140]	; (8006264 <HAL_RCC_GetSysClockFreq+0x114>)
 80061d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	2b0c      	cmp	r3, #12
 80061dc:	d134      	bne.n	8006248 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061de:	4b1e      	ldr	r3, [pc, #120]	; (8006258 <HAL_RCC_GetSysClockFreq+0x108>)
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f003 0303 	and.w	r3, r3, #3
 80061e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d003      	beq.n	80061f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2b03      	cmp	r3, #3
 80061f2:	d003      	beq.n	80061fc <HAL_RCC_GetSysClockFreq+0xac>
 80061f4:	e005      	b.n	8006202 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80061f6:	4b1a      	ldr	r3, [pc, #104]	; (8006260 <HAL_RCC_GetSysClockFreq+0x110>)
 80061f8:	617b      	str	r3, [r7, #20]
      break;
 80061fa:	e005      	b.n	8006208 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80061fc:	4b19      	ldr	r3, [pc, #100]	; (8006264 <HAL_RCC_GetSysClockFreq+0x114>)
 80061fe:	617b      	str	r3, [r7, #20]
      break;
 8006200:	e002      	b.n	8006208 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	617b      	str	r3, [r7, #20]
      break;
 8006206:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006208:	4b13      	ldr	r3, [pc, #76]	; (8006258 <HAL_RCC_GetSysClockFreq+0x108>)
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	091b      	lsrs	r3, r3, #4
 800620e:	f003 0307 	and.w	r3, r3, #7
 8006212:	3301      	adds	r3, #1
 8006214:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006216:	4b10      	ldr	r3, [pc, #64]	; (8006258 <HAL_RCC_GetSysClockFreq+0x108>)
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	0a1b      	lsrs	r3, r3, #8
 800621c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	fb03 f202 	mul.w	r2, r3, r2
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	fbb2 f3f3 	udiv	r3, r2, r3
 800622c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800622e:	4b0a      	ldr	r3, [pc, #40]	; (8006258 <HAL_RCC_GetSysClockFreq+0x108>)
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	0e5b      	lsrs	r3, r3, #25
 8006234:	f003 0303 	and.w	r3, r3, #3
 8006238:	3301      	adds	r3, #1
 800623a:	005b      	lsls	r3, r3, #1
 800623c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	fbb2 f3f3 	udiv	r3, r2, r3
 8006246:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006248:	69bb      	ldr	r3, [r7, #24]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3724      	adds	r7, #36	; 0x24
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	40021000 	.word	0x40021000
 800625c:	0800ac20 	.word	0x0800ac20
 8006260:	00f42400 	.word	0x00f42400
 8006264:	00b71b00 	.word	0x00b71b00

08006268 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006268:	b480      	push	{r7}
 800626a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800626c:	4b03      	ldr	r3, [pc, #12]	; (800627c <HAL_RCC_GetHCLKFreq+0x14>)
 800626e:	681b      	ldr	r3, [r3, #0]
}
 8006270:	4618      	mov	r0, r3
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	20000000 	.word	0x20000000

08006280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006284:	f7ff fff0 	bl	8006268 <HAL_RCC_GetHCLKFreq>
 8006288:	4602      	mov	r2, r0
 800628a:	4b06      	ldr	r3, [pc, #24]	; (80062a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	0a1b      	lsrs	r3, r3, #8
 8006290:	f003 0307 	and.w	r3, r3, #7
 8006294:	4904      	ldr	r1, [pc, #16]	; (80062a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006296:	5ccb      	ldrb	r3, [r1, r3]
 8006298:	f003 031f 	and.w	r3, r3, #31
 800629c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	40021000 	.word	0x40021000
 80062a8:	0800ac18 	.word	0x0800ac18

080062ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80062b0:	f7ff ffda 	bl	8006268 <HAL_RCC_GetHCLKFreq>
 80062b4:	4602      	mov	r2, r0
 80062b6:	4b06      	ldr	r3, [pc, #24]	; (80062d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	0adb      	lsrs	r3, r3, #11
 80062bc:	f003 0307 	and.w	r3, r3, #7
 80062c0:	4904      	ldr	r1, [pc, #16]	; (80062d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80062c2:	5ccb      	ldrb	r3, [r1, r3]
 80062c4:	f003 031f 	and.w	r3, r3, #31
 80062c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	40021000 	.word	0x40021000
 80062d4:	0800ac18 	.word	0x0800ac18

080062d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80062e0:	2300      	movs	r3, #0
 80062e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80062e4:	4b2a      	ldr	r3, [pc, #168]	; (8006390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80062f0:	f7ff f9c8 	bl	8005684 <HAL_PWREx_GetVoltageRange>
 80062f4:	6178      	str	r0, [r7, #20]
 80062f6:	e014      	b.n	8006322 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80062f8:	4b25      	ldr	r3, [pc, #148]	; (8006390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062fc:	4a24      	ldr	r2, [pc, #144]	; (8006390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006302:	6593      	str	r3, [r2, #88]	; 0x58
 8006304:	4b22      	ldr	r3, [pc, #136]	; (8006390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800630c:	60fb      	str	r3, [r7, #12]
 800630e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006310:	f7ff f9b8 	bl	8005684 <HAL_PWREx_GetVoltageRange>
 8006314:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006316:	4b1e      	ldr	r3, [pc, #120]	; (8006390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800631a:	4a1d      	ldr	r2, [pc, #116]	; (8006390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800631c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006320:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006328:	d10b      	bne.n	8006342 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b80      	cmp	r3, #128	; 0x80
 800632e:	d919      	bls.n	8006364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2ba0      	cmp	r3, #160	; 0xa0
 8006334:	d902      	bls.n	800633c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006336:	2302      	movs	r3, #2
 8006338:	613b      	str	r3, [r7, #16]
 800633a:	e013      	b.n	8006364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800633c:	2301      	movs	r3, #1
 800633e:	613b      	str	r3, [r7, #16]
 8006340:	e010      	b.n	8006364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b80      	cmp	r3, #128	; 0x80
 8006346:	d902      	bls.n	800634e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006348:	2303      	movs	r3, #3
 800634a:	613b      	str	r3, [r7, #16]
 800634c:	e00a      	b.n	8006364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b80      	cmp	r3, #128	; 0x80
 8006352:	d102      	bne.n	800635a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006354:	2302      	movs	r3, #2
 8006356:	613b      	str	r3, [r7, #16]
 8006358:	e004      	b.n	8006364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b70      	cmp	r3, #112	; 0x70
 800635e:	d101      	bne.n	8006364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006360:	2301      	movs	r3, #1
 8006362:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006364:	4b0b      	ldr	r3, [pc, #44]	; (8006394 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f023 0207 	bic.w	r2, r3, #7
 800636c:	4909      	ldr	r1, [pc, #36]	; (8006394 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	4313      	orrs	r3, r2
 8006372:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006374:	4b07      	ldr	r3, [pc, #28]	; (8006394 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0307 	and.w	r3, r3, #7
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	429a      	cmp	r2, r3
 8006380:	d001      	beq.n	8006386 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e000      	b.n	8006388 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3718      	adds	r7, #24
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	40021000 	.word	0x40021000
 8006394:	40022000 	.word	0x40022000

08006398 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80063a0:	2300      	movs	r3, #0
 80063a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80063a4:	2300      	movs	r3, #0
 80063a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d031      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80063bc:	d01a      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80063be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80063c2:	d814      	bhi.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d009      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80063c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063cc:	d10f      	bne.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80063ce:	4b5d      	ldr	r3, [pc, #372]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	4a5c      	ldr	r2, [pc, #368]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80063da:	e00c      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	3304      	adds	r3, #4
 80063e0:	2100      	movs	r1, #0
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 f9ce 	bl	8006784 <RCCEx_PLLSAI1_Config>
 80063e8:	4603      	mov	r3, r0
 80063ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80063ec:	e003      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	74fb      	strb	r3, [r7, #19]
      break;
 80063f2:	e000      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80063f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063f6:	7cfb      	ldrb	r3, [r7, #19]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10b      	bne.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063fc:	4b51      	ldr	r3, [pc, #324]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006402:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640a:	494e      	ldr	r1, [pc, #312]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800640c:	4313      	orrs	r3, r2
 800640e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006412:	e001      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006414:	7cfb      	ldrb	r3, [r7, #19]
 8006416:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 809e 	beq.w	8006562 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006426:	2300      	movs	r3, #0
 8006428:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800642a:	4b46      	ldr	r3, [pc, #280]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800642c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800642e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006436:	2301      	movs	r3, #1
 8006438:	e000      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800643a:	2300      	movs	r3, #0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00d      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006440:	4b40      	ldr	r3, [pc, #256]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006444:	4a3f      	ldr	r2, [pc, #252]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800644a:	6593      	str	r3, [r2, #88]	; 0x58
 800644c:	4b3d      	ldr	r3, [pc, #244]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800644e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006454:	60bb      	str	r3, [r7, #8]
 8006456:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006458:	2301      	movs	r3, #1
 800645a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800645c:	4b3a      	ldr	r3, [pc, #232]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a39      	ldr	r2, [pc, #228]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006466:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006468:	f7fc fe2c 	bl	80030c4 <HAL_GetTick>
 800646c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800646e:	e009      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006470:	f7fc fe28 	bl	80030c4 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	2b02      	cmp	r3, #2
 800647c:	d902      	bls.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	74fb      	strb	r3, [r7, #19]
        break;
 8006482:	e005      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006484:	4b30      	ldr	r3, [pc, #192]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0ef      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006490:	7cfb      	ldrb	r3, [r7, #19]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d15a      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006496:	4b2b      	ldr	r3, [pc, #172]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800649c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d01e      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d019      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80064b2:	4b24      	ldr	r3, [pc, #144]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064be:	4b21      	ldr	r3, [pc, #132]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c4:	4a1f      	ldr	r2, [pc, #124]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80064ce:	4b1d      	ldr	r3, [pc, #116]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d4:	4a1b      	ldr	r2, [pc, #108]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80064de:	4a19      	ldr	r2, [pc, #100]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d016      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f0:	f7fc fde8 	bl	80030c4 <HAL_GetTick>
 80064f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064f6:	e00b      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064f8:	f7fc fde4 	bl	80030c4 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	f241 3288 	movw	r2, #5000	; 0x1388
 8006506:	4293      	cmp	r3, r2
 8006508:	d902      	bls.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	74fb      	strb	r3, [r7, #19]
            break;
 800650e:	e006      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006510:	4b0c      	ldr	r3, [pc, #48]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d0ec      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800651e:	7cfb      	ldrb	r3, [r7, #19]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10b      	bne.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006524:	4b07      	ldr	r3, [pc, #28]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800652a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006532:	4904      	ldr	r1, [pc, #16]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006534:	4313      	orrs	r3, r2
 8006536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800653a:	e009      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800653c:	7cfb      	ldrb	r3, [r7, #19]
 800653e:	74bb      	strb	r3, [r7, #18]
 8006540:	e006      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006542:	bf00      	nop
 8006544:	40021000 	.word	0x40021000
 8006548:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800654c:	7cfb      	ldrb	r3, [r7, #19]
 800654e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006550:	7c7b      	ldrb	r3, [r7, #17]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d105      	bne.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006556:	4b8a      	ldr	r3, [pc, #552]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800655a:	4a89      	ldr	r2, [pc, #548]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800655c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006560:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00a      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800656e:	4b84      	ldr	r3, [pc, #528]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006574:	f023 0203 	bic.w	r2, r3, #3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	4980      	ldr	r1, [pc, #512]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800657e:	4313      	orrs	r3, r2
 8006580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0302 	and.w	r3, r3, #2
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00a      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006590:	4b7b      	ldr	r3, [pc, #492]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006596:	f023 020c 	bic.w	r2, r3, #12
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659e:	4978      	ldr	r1, [pc, #480]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0320 	and.w	r3, r3, #32
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00a      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065b2:	4b73      	ldr	r3, [pc, #460]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c0:	496f      	ldr	r1, [pc, #444]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00a      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065d4:	4b6a      	ldr	r3, [pc, #424]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065da:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e2:	4967      	ldr	r1, [pc, #412]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065f6:	4b62      	ldr	r3, [pc, #392]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006604:	495e      	ldr	r1, [pc, #376]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006606:	4313      	orrs	r3, r2
 8006608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00a      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006618:	4b59      	ldr	r3, [pc, #356]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800661a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800661e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006626:	4956      	ldr	r1, [pc, #344]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006628:	4313      	orrs	r3, r2
 800662a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00a      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800663a:	4b51      	ldr	r3, [pc, #324]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800663c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006640:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006648:	494d      	ldr	r1, [pc, #308]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800664a:	4313      	orrs	r3, r2
 800664c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d028      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800665c:	4b48      	ldr	r3, [pc, #288]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800665e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006662:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666a:	4945      	ldr	r1, [pc, #276]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800666c:	4313      	orrs	r3, r2
 800666e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800667a:	d106      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800667c:	4b40      	ldr	r3, [pc, #256]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	4a3f      	ldr	r2, [pc, #252]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006686:	60d3      	str	r3, [r2, #12]
 8006688:	e011      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006692:	d10c      	bne.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3304      	adds	r3, #4
 8006698:	2101      	movs	r1, #1
 800669a:	4618      	mov	r0, r3
 800669c:	f000 f872 	bl	8006784 <RCCEx_PLLSAI1_Config>
 80066a0:	4603      	mov	r3, r0
 80066a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80066a4:	7cfb      	ldrb	r3, [r7, #19]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80066aa:	7cfb      	ldrb	r3, [r7, #19]
 80066ac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d028      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066ba:	4b31      	ldr	r3, [pc, #196]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c8:	492d      	ldr	r1, [pc, #180]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066d8:	d106      	bne.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066da:	4b29      	ldr	r3, [pc, #164]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	4a28      	ldr	r2, [pc, #160]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066e4:	60d3      	str	r3, [r2, #12]
 80066e6:	e011      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066f0:	d10c      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	3304      	adds	r3, #4
 80066f6:	2101      	movs	r1, #1
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 f843 	bl	8006784 <RCCEx_PLLSAI1_Config>
 80066fe:	4603      	mov	r3, r0
 8006700:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006702:	7cfb      	ldrb	r3, [r7, #19]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006708:	7cfb      	ldrb	r3, [r7, #19]
 800670a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d01c      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006718:	4b19      	ldr	r3, [pc, #100]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800671a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800671e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006726:	4916      	ldr	r1, [pc, #88]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006728:	4313      	orrs	r3, r2
 800672a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006732:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006736:	d10c      	bne.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	3304      	adds	r3, #4
 800673c:	2102      	movs	r1, #2
 800673e:	4618      	mov	r0, r3
 8006740:	f000 f820 	bl	8006784 <RCCEx_PLLSAI1_Config>
 8006744:	4603      	mov	r3, r0
 8006746:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006748:	7cfb      	ldrb	r3, [r7, #19]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800674e:	7cfb      	ldrb	r3, [r7, #19]
 8006750:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00a      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800675e:	4b08      	ldr	r3, [pc, #32]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006764:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800676c:	4904      	ldr	r1, [pc, #16]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800676e:	4313      	orrs	r3, r2
 8006770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006774:	7cbb      	ldrb	r3, [r7, #18]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	40021000 	.word	0x40021000

08006784 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006792:	4b74      	ldr	r3, [pc, #464]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	f003 0303 	and.w	r3, r3, #3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d018      	beq.n	80067d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800679e:	4b71      	ldr	r3, [pc, #452]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	f003 0203 	and.w	r2, r3, #3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d10d      	bne.n	80067ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
       ||
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d009      	beq.n	80067ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80067b6:	4b6b      	ldr	r3, [pc, #428]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	091b      	lsrs	r3, r3, #4
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
       ||
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d047      	beq.n	800685a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	73fb      	strb	r3, [r7, #15]
 80067ce:	e044      	b.n	800685a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b03      	cmp	r3, #3
 80067d6:	d018      	beq.n	800680a <RCCEx_PLLSAI1_Config+0x86>
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d825      	bhi.n	8006828 <RCCEx_PLLSAI1_Config+0xa4>
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d002      	beq.n	80067e6 <RCCEx_PLLSAI1_Config+0x62>
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d009      	beq.n	80067f8 <RCCEx_PLLSAI1_Config+0x74>
 80067e4:	e020      	b.n	8006828 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80067e6:	4b5f      	ldr	r3, [pc, #380]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d11d      	bne.n	800682e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067f6:	e01a      	b.n	800682e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80067f8:	4b5a      	ldr	r3, [pc, #360]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006800:	2b00      	cmp	r3, #0
 8006802:	d116      	bne.n	8006832 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006808:	e013      	b.n	8006832 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800680a:	4b56      	ldr	r3, [pc, #344]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e0>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10f      	bne.n	8006836 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006816:	4b53      	ldr	r3, [pc, #332]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d109      	bne.n	8006836 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006826:	e006      	b.n	8006836 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	73fb      	strb	r3, [r7, #15]
      break;
 800682c:	e004      	b.n	8006838 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800682e:	bf00      	nop
 8006830:	e002      	b.n	8006838 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006832:	bf00      	nop
 8006834:	e000      	b.n	8006838 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006836:	bf00      	nop
    }

    if(status == HAL_OK)
 8006838:	7bfb      	ldrb	r3, [r7, #15]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10d      	bne.n	800685a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800683e:	4b49      	ldr	r3, [pc, #292]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6819      	ldr	r1, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	3b01      	subs	r3, #1
 8006850:	011b      	lsls	r3, r3, #4
 8006852:	430b      	orrs	r3, r1
 8006854:	4943      	ldr	r1, [pc, #268]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006856:	4313      	orrs	r3, r2
 8006858:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800685a:	7bfb      	ldrb	r3, [r7, #15]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d17c      	bne.n	800695a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006860:	4b40      	ldr	r3, [pc, #256]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a3f      	ldr	r2, [pc, #252]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006866:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800686a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800686c:	f7fc fc2a 	bl	80030c4 <HAL_GetTick>
 8006870:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006872:	e009      	b.n	8006888 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006874:	f7fc fc26 	bl	80030c4 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b02      	cmp	r3, #2
 8006880:	d902      	bls.n	8006888 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	73fb      	strb	r3, [r7, #15]
        break;
 8006886:	e005      	b.n	8006894 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006888:	4b36      	ldr	r3, [pc, #216]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e0>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1ef      	bne.n	8006874 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006894:	7bfb      	ldrb	r3, [r7, #15]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d15f      	bne.n	800695a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d110      	bne.n	80068c2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068a0:	4b30      	ldr	r3, [pc, #192]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80068a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	6892      	ldr	r2, [r2, #8]
 80068b0:	0211      	lsls	r1, r2, #8
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	68d2      	ldr	r2, [r2, #12]
 80068b6:	06d2      	lsls	r2, r2, #27
 80068b8:	430a      	orrs	r2, r1
 80068ba:	492a      	ldr	r1, [pc, #168]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	610b      	str	r3, [r1, #16]
 80068c0:	e027      	b.n	8006912 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d112      	bne.n	80068ee <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068c8:	4b26      	ldr	r3, [pc, #152]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80068d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	6892      	ldr	r2, [r2, #8]
 80068d8:	0211      	lsls	r1, r2, #8
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	6912      	ldr	r2, [r2, #16]
 80068de:	0852      	lsrs	r2, r2, #1
 80068e0:	3a01      	subs	r2, #1
 80068e2:	0552      	lsls	r2, r2, #21
 80068e4:	430a      	orrs	r2, r1
 80068e6:	491f      	ldr	r1, [pc, #124]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	610b      	str	r3, [r1, #16]
 80068ec:	e011      	b.n	8006912 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068ee:	4b1d      	ldr	r3, [pc, #116]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80068f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	6892      	ldr	r2, [r2, #8]
 80068fe:	0211      	lsls	r1, r2, #8
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	6952      	ldr	r2, [r2, #20]
 8006904:	0852      	lsrs	r2, r2, #1
 8006906:	3a01      	subs	r2, #1
 8006908:	0652      	lsls	r2, r2, #25
 800690a:	430a      	orrs	r2, r1
 800690c:	4915      	ldr	r1, [pc, #84]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e0>)
 800690e:	4313      	orrs	r3, r2
 8006910:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006912:	4b14      	ldr	r3, [pc, #80]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a13      	ldr	r2, [pc, #76]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006918:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800691c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800691e:	f7fc fbd1 	bl	80030c4 <HAL_GetTick>
 8006922:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006924:	e009      	b.n	800693a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006926:	f7fc fbcd 	bl	80030c4 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	2b02      	cmp	r3, #2
 8006932:	d902      	bls.n	800693a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	73fb      	strb	r3, [r7, #15]
          break;
 8006938:	e005      	b.n	8006946 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800693a:	4b0a      	ldr	r3, [pc, #40]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e0>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0ef      	beq.n	8006926 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006946:	7bfb      	ldrb	r3, [r7, #15]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d106      	bne.n	800695a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800694c:	4b05      	ldr	r3, [pc, #20]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e0>)
 800694e:	691a      	ldr	r2, [r3, #16]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	4903      	ldr	r1, [pc, #12]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006956:	4313      	orrs	r3, r2
 8006958:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800695a:	7bfb      	ldrb	r3, [r7, #15]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	40021000 	.word	0x40021000

08006968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e049      	b.n	8006a0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d106      	bne.n	8006994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7fc f9c6 	bl	8002d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3304      	adds	r3, #4
 80069a4:	4619      	mov	r1, r3
 80069a6:	4610      	mov	r0, r2
 80069a8:	f000 fb42 	bl	8007030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
	...

08006a18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d001      	beq.n	8006a30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e03b      	b.n	8006aa8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2202      	movs	r2, #2
 8006a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 0201 	orr.w	r2, r2, #1
 8006a46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a19      	ldr	r2, [pc, #100]	; (8006ab4 <HAL_TIM_Base_Start_IT+0x9c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d009      	beq.n	8006a66 <HAL_TIM_Base_Start_IT+0x4e>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a5a:	d004      	beq.n	8006a66 <HAL_TIM_Base_Start_IT+0x4e>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a15      	ldr	r2, [pc, #84]	; (8006ab8 <HAL_TIM_Base_Start_IT+0xa0>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d115      	bne.n	8006a92 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689a      	ldr	r2, [r3, #8]
 8006a6c:	4b13      	ldr	r3, [pc, #76]	; (8006abc <HAL_TIM_Base_Start_IT+0xa4>)
 8006a6e:	4013      	ands	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2b06      	cmp	r3, #6
 8006a76:	d015      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0x8c>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a7e:	d011      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f042 0201 	orr.w	r2, r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a90:	e008      	b.n	8006aa4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f042 0201 	orr.w	r2, r2, #1
 8006aa0:	601a      	str	r2, [r3, #0]
 8006aa2:	e000      	b.n	8006aa6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aa4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	40012c00 	.word	0x40012c00
 8006ab8:	40014000 	.word	0x40014000
 8006abc:	00010007 	.word	0x00010007

08006ac0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d101      	bne.n	8006ad2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e049      	b.n	8006b66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d106      	bne.n	8006aec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7fc f8d4 	bl	8002c94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2202      	movs	r2, #2
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	3304      	adds	r3, #4
 8006afc:	4619      	mov	r1, r3
 8006afe:	4610      	mov	r0, r2
 8006b00:	f000 fa96 	bl	8007030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b082      	sub	sp, #8
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	f003 0302 	and.w	r3, r3, #2
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d122      	bne.n	8006bca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d11b      	bne.n	8006bca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f06f 0202 	mvn.w	r2, #2
 8006b9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	f003 0303 	and.w	r3, r3, #3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d003      	beq.n	8006bb8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fa1f 	bl	8006ff4 <HAL_TIM_IC_CaptureCallback>
 8006bb6:	e005      	b.n	8006bc4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fa11 	bl	8006fe0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fa22 	bl	8007008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b04      	cmp	r3, #4
 8006bd6:	d122      	bne.n	8006c1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f003 0304 	and.w	r3, r3, #4
 8006be2:	2b04      	cmp	r3, #4
 8006be4:	d11b      	bne.n	8006c1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f06f 0204 	mvn.w	r2, #4
 8006bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d003      	beq.n	8006c0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f9f5 	bl	8006ff4 <HAL_TIM_IC_CaptureCallback>
 8006c0a:	e005      	b.n	8006c18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f9e7 	bl	8006fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f9f8 	bl	8007008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	f003 0308 	and.w	r3, r3, #8
 8006c28:	2b08      	cmp	r3, #8
 8006c2a:	d122      	bne.n	8006c72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	2b08      	cmp	r3, #8
 8006c38:	d11b      	bne.n	8006c72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f06f 0208 	mvn.w	r2, #8
 8006c42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2204      	movs	r2, #4
 8006c48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	f003 0303 	and.w	r3, r3, #3
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f9cb 	bl	8006ff4 <HAL_TIM_IC_CaptureCallback>
 8006c5e:	e005      	b.n	8006c6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f9bd 	bl	8006fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f9ce 	bl	8007008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	f003 0310 	and.w	r3, r3, #16
 8006c7c:	2b10      	cmp	r3, #16
 8006c7e:	d122      	bne.n	8006cc6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	f003 0310 	and.w	r3, r3, #16
 8006c8a:	2b10      	cmp	r3, #16
 8006c8c:	d11b      	bne.n	8006cc6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f06f 0210 	mvn.w	r2, #16
 8006c96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2208      	movs	r2, #8
 8006c9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f9a1 	bl	8006ff4 <HAL_TIM_IC_CaptureCallback>
 8006cb2:	e005      	b.n	8006cc0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f993 	bl	8006fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f9a4 	bl	8007008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d10e      	bne.n	8006cf2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d107      	bne.n	8006cf2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f06f 0201 	mvn.w	r2, #1
 8006cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f96d 	bl	8006fcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfc:	2b80      	cmp	r3, #128	; 0x80
 8006cfe:	d10e      	bne.n	8006d1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d0a:	2b80      	cmp	r3, #128	; 0x80
 8006d0c:	d107      	bne.n	8006d1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fd53 	bl	80077c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d2c:	d10e      	bne.n	8006d4c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d38:	2b80      	cmp	r3, #128	; 0x80
 8006d3a:	d107      	bne.n	8006d4c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fd46 	bl	80077d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d56:	2b40      	cmp	r3, #64	; 0x40
 8006d58:	d10e      	bne.n	8006d78 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d64:	2b40      	cmp	r3, #64	; 0x40
 8006d66:	d107      	bne.n	8006d78 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f952 	bl	800701c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	f003 0320 	and.w	r3, r3, #32
 8006d82:	2b20      	cmp	r3, #32
 8006d84:	d10e      	bne.n	8006da4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f003 0320 	and.w	r3, r3, #32
 8006d90:	2b20      	cmp	r3, #32
 8006d92:	d107      	bne.n	8006da4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f06f 0220 	mvn.w	r2, #32
 8006d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fd06 	bl	80077b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006da4:	bf00      	nop
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d101      	bne.n	8006dc6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	e0fd      	b.n	8006fc2 <HAL_TIM_PWM_ConfigChannel+0x216>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2b14      	cmp	r3, #20
 8006dd2:	f200 80f0 	bhi.w	8006fb6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006dd6:	a201      	add	r2, pc, #4	; (adr r2, 8006ddc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ddc:	08006e31 	.word	0x08006e31
 8006de0:	08006fb7 	.word	0x08006fb7
 8006de4:	08006fb7 	.word	0x08006fb7
 8006de8:	08006fb7 	.word	0x08006fb7
 8006dec:	08006e71 	.word	0x08006e71
 8006df0:	08006fb7 	.word	0x08006fb7
 8006df4:	08006fb7 	.word	0x08006fb7
 8006df8:	08006fb7 	.word	0x08006fb7
 8006dfc:	08006eb3 	.word	0x08006eb3
 8006e00:	08006fb7 	.word	0x08006fb7
 8006e04:	08006fb7 	.word	0x08006fb7
 8006e08:	08006fb7 	.word	0x08006fb7
 8006e0c:	08006ef3 	.word	0x08006ef3
 8006e10:	08006fb7 	.word	0x08006fb7
 8006e14:	08006fb7 	.word	0x08006fb7
 8006e18:	08006fb7 	.word	0x08006fb7
 8006e1c:	08006f35 	.word	0x08006f35
 8006e20:	08006fb7 	.word	0x08006fb7
 8006e24:	08006fb7 	.word	0x08006fb7
 8006e28:	08006fb7 	.word	0x08006fb7
 8006e2c:	08006f75 	.word	0x08006f75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68b9      	ldr	r1, [r7, #8]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 f95e 	bl	80070f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	699a      	ldr	r2, [r3, #24]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f042 0208 	orr.w	r2, r2, #8
 8006e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	699a      	ldr	r2, [r3, #24]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f022 0204 	bic.w	r2, r2, #4
 8006e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6999      	ldr	r1, [r3, #24]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	691a      	ldr	r2, [r3, #16]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	619a      	str	r2, [r3, #24]
      break;
 8006e6e:	e0a3      	b.n	8006fb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68b9      	ldr	r1, [r7, #8]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 f9ba 	bl	80071f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	699a      	ldr	r2, [r3, #24]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	699a      	ldr	r2, [r3, #24]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6999      	ldr	r1, [r3, #24]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	021a      	lsls	r2, r3, #8
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	619a      	str	r2, [r3, #24]
      break;
 8006eb0:	e082      	b.n	8006fb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68b9      	ldr	r1, [r7, #8]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fa13 	bl	80072e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	69da      	ldr	r2, [r3, #28]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f042 0208 	orr.w	r2, r2, #8
 8006ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	69da      	ldr	r2, [r3, #28]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 0204 	bic.w	r2, r2, #4
 8006edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	69d9      	ldr	r1, [r3, #28]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	691a      	ldr	r2, [r3, #16]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	430a      	orrs	r2, r1
 8006eee:	61da      	str	r2, [r3, #28]
      break;
 8006ef0:	e062      	b.n	8006fb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68b9      	ldr	r1, [r7, #8]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 fa6b 	bl	80073d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	69da      	ldr	r2, [r3, #28]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	69da      	ldr	r2, [r3, #28]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	69d9      	ldr	r1, [r3, #28]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	021a      	lsls	r2, r3, #8
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	61da      	str	r2, [r3, #28]
      break;
 8006f32:	e041      	b.n	8006fb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68b9      	ldr	r1, [r7, #8]
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 faa8 	bl	8007490 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f042 0208 	orr.w	r2, r2, #8
 8006f4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f022 0204 	bic.w	r2, r2, #4
 8006f5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	691a      	ldr	r2, [r3, #16]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006f72:	e021      	b.n	8006fb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68b9      	ldr	r1, [r7, #8]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 fae0 	bl	8007540 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	021a      	lsls	r2, r3, #8
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006fb4:	e000      	b.n	8006fb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006fb6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop

08006fcc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a2a      	ldr	r2, [pc, #168]	; (80070ec <TIM_Base_SetConfig+0xbc>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d003      	beq.n	8007050 <TIM_Base_SetConfig+0x20>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800704e:	d108      	bne.n	8007062 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	4313      	orrs	r3, r2
 8007060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a21      	ldr	r2, [pc, #132]	; (80070ec <TIM_Base_SetConfig+0xbc>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d00b      	beq.n	8007082 <TIM_Base_SetConfig+0x52>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007070:	d007      	beq.n	8007082 <TIM_Base_SetConfig+0x52>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a1e      	ldr	r2, [pc, #120]	; (80070f0 <TIM_Base_SetConfig+0xc0>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d003      	beq.n	8007082 <TIM_Base_SetConfig+0x52>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a1d      	ldr	r2, [pc, #116]	; (80070f4 <TIM_Base_SetConfig+0xc4>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d108      	bne.n	8007094 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	4313      	orrs	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	689a      	ldr	r2, [r3, #8]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a0c      	ldr	r2, [pc, #48]	; (80070ec <TIM_Base_SetConfig+0xbc>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d007      	beq.n	80070d0 <TIM_Base_SetConfig+0xa0>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a0b      	ldr	r2, [pc, #44]	; (80070f0 <TIM_Base_SetConfig+0xc0>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d003      	beq.n	80070d0 <TIM_Base_SetConfig+0xa0>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a0a      	ldr	r2, [pc, #40]	; (80070f4 <TIM_Base_SetConfig+0xc4>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d103      	bne.n	80070d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	691a      	ldr	r2, [r3, #16]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	615a      	str	r2, [r3, #20]
}
 80070de:	bf00      	nop
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	40012c00 	.word	0x40012c00
 80070f0:	40014000 	.word	0x40014000
 80070f4:	40014400 	.word	0x40014400

080070f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	f023 0201 	bic.w	r2, r3, #1
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800712a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 0303 	bic.w	r3, r3, #3
 8007132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	f023 0302 	bic.w	r3, r3, #2
 8007144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	4313      	orrs	r3, r2
 800714e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a24      	ldr	r2, [pc, #144]	; (80071e4 <TIM_OC1_SetConfig+0xec>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d007      	beq.n	8007168 <TIM_OC1_SetConfig+0x70>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a23      	ldr	r2, [pc, #140]	; (80071e8 <TIM_OC1_SetConfig+0xf0>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d003      	beq.n	8007168 <TIM_OC1_SetConfig+0x70>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a22      	ldr	r2, [pc, #136]	; (80071ec <TIM_OC1_SetConfig+0xf4>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d10c      	bne.n	8007182 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	f023 0308 	bic.w	r3, r3, #8
 800716e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	4313      	orrs	r3, r2
 8007178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f023 0304 	bic.w	r3, r3, #4
 8007180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a17      	ldr	r2, [pc, #92]	; (80071e4 <TIM_OC1_SetConfig+0xec>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d007      	beq.n	800719a <TIM_OC1_SetConfig+0xa2>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a16      	ldr	r2, [pc, #88]	; (80071e8 <TIM_OC1_SetConfig+0xf0>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d003      	beq.n	800719a <TIM_OC1_SetConfig+0xa2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a15      	ldr	r2, [pc, #84]	; (80071ec <TIM_OC1_SetConfig+0xf4>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d111      	bne.n	80071be <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	621a      	str	r2, [r3, #32]
}
 80071d8:	bf00      	nop
 80071da:	371c      	adds	r7, #28
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	40012c00 	.word	0x40012c00
 80071e8:	40014000 	.word	0x40014000
 80071ec:	40014400 	.word	0x40014400

080071f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	f023 0210 	bic.w	r2, r3, #16
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800721e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800722a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	021b      	lsls	r3, r3, #8
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	4313      	orrs	r3, r2
 8007236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f023 0320 	bic.w	r3, r3, #32
 800723e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	011b      	lsls	r3, r3, #4
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	4313      	orrs	r3, r2
 800724a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a22      	ldr	r2, [pc, #136]	; (80072d8 <TIM_OC2_SetConfig+0xe8>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d10d      	bne.n	8007270 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800725a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	011b      	lsls	r3, r3, #4
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	4313      	orrs	r3, r2
 8007266:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800726e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a19      	ldr	r2, [pc, #100]	; (80072d8 <TIM_OC2_SetConfig+0xe8>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d007      	beq.n	8007288 <TIM_OC2_SetConfig+0x98>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a18      	ldr	r2, [pc, #96]	; (80072dc <TIM_OC2_SetConfig+0xec>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d003      	beq.n	8007288 <TIM_OC2_SetConfig+0x98>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a17      	ldr	r2, [pc, #92]	; (80072e0 <TIM_OC2_SetConfig+0xf0>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d113      	bne.n	80072b0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800728e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007296:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	685a      	ldr	r2, [r3, #4]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	621a      	str	r2, [r3, #32]
}
 80072ca:	bf00      	nop
 80072cc:	371c      	adds	r7, #28
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	40012c00 	.word	0x40012c00
 80072dc:	40014000 	.word	0x40014000
 80072e0:	40014400 	.word	0x40014400

080072e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f023 0303 	bic.w	r3, r3, #3
 800731e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	4313      	orrs	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	021b      	lsls	r3, r3, #8
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	4313      	orrs	r3, r2
 800733c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a21      	ldr	r2, [pc, #132]	; (80073c8 <TIM_OC3_SetConfig+0xe4>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d10d      	bne.n	8007362 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800734c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	021b      	lsls	r3, r3, #8
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	4313      	orrs	r3, r2
 8007358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a18      	ldr	r2, [pc, #96]	; (80073c8 <TIM_OC3_SetConfig+0xe4>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d007      	beq.n	800737a <TIM_OC3_SetConfig+0x96>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a17      	ldr	r2, [pc, #92]	; (80073cc <TIM_OC3_SetConfig+0xe8>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d003      	beq.n	800737a <TIM_OC3_SetConfig+0x96>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a16      	ldr	r2, [pc, #88]	; (80073d0 <TIM_OC3_SetConfig+0xec>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d113      	bne.n	80073a2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	011b      	lsls	r3, r3, #4
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	4313      	orrs	r3, r2
 8007394:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	011b      	lsls	r3, r3, #4
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	4313      	orrs	r3, r2
 80073a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	697a      	ldr	r2, [r7, #20]
 80073ba:	621a      	str	r2, [r3, #32]
}
 80073bc:	bf00      	nop
 80073be:	371c      	adds	r7, #28
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	40012c00 	.word	0x40012c00
 80073cc:	40014000 	.word	0x40014000
 80073d0:	40014400 	.word	0x40014400

080073d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b087      	sub	sp, #28
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800740e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	021b      	lsls	r3, r3, #8
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	4313      	orrs	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007422:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	031b      	lsls	r3, r3, #12
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	4313      	orrs	r3, r2
 800742e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a14      	ldr	r2, [pc, #80]	; (8007484 <TIM_OC4_SetConfig+0xb0>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d007      	beq.n	8007448 <TIM_OC4_SetConfig+0x74>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a13      	ldr	r2, [pc, #76]	; (8007488 <TIM_OC4_SetConfig+0xb4>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d003      	beq.n	8007448 <TIM_OC4_SetConfig+0x74>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a12      	ldr	r2, [pc, #72]	; (800748c <TIM_OC4_SetConfig+0xb8>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d109      	bne.n	800745c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800744e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	019b      	lsls	r3, r3, #6
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	4313      	orrs	r3, r2
 800745a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	621a      	str	r2, [r3, #32]
}
 8007476:	bf00      	nop
 8007478:	371c      	adds	r7, #28
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	40012c00 	.word	0x40012c00
 8007488:	40014000 	.word	0x40014000
 800748c:	40014400 	.word	0x40014400

08007490 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80074d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	041b      	lsls	r3, r3, #16
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	4313      	orrs	r3, r2
 80074e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a13      	ldr	r2, [pc, #76]	; (8007534 <TIM_OC5_SetConfig+0xa4>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d007      	beq.n	80074fa <TIM_OC5_SetConfig+0x6a>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a12      	ldr	r2, [pc, #72]	; (8007538 <TIM_OC5_SetConfig+0xa8>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d003      	beq.n	80074fa <TIM_OC5_SetConfig+0x6a>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a11      	ldr	r2, [pc, #68]	; (800753c <TIM_OC5_SetConfig+0xac>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d109      	bne.n	800750e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007500:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	021b      	lsls	r3, r3, #8
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	4313      	orrs	r3, r2
 800750c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	621a      	str	r2, [r3, #32]
}
 8007528:	bf00      	nop
 800752a:	371c      	adds	r7, #28
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr
 8007534:	40012c00 	.word	0x40012c00
 8007538:	40014000 	.word	0x40014000
 800753c:	40014400 	.word	0x40014400

08007540 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800756e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	021b      	lsls	r3, r3, #8
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	4313      	orrs	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007586:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	051b      	lsls	r3, r3, #20
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	4313      	orrs	r3, r2
 8007592:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a14      	ldr	r2, [pc, #80]	; (80075e8 <TIM_OC6_SetConfig+0xa8>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d007      	beq.n	80075ac <TIM_OC6_SetConfig+0x6c>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a13      	ldr	r2, [pc, #76]	; (80075ec <TIM_OC6_SetConfig+0xac>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d003      	beq.n	80075ac <TIM_OC6_SetConfig+0x6c>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a12      	ldr	r2, [pc, #72]	; (80075f0 <TIM_OC6_SetConfig+0xb0>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d109      	bne.n	80075c0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	695b      	ldr	r3, [r3, #20]
 80075b8:	029b      	lsls	r3, r3, #10
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	4313      	orrs	r3, r2
 80075be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	621a      	str	r2, [r3, #32]
}
 80075da:	bf00      	nop
 80075dc:	371c      	adds	r7, #28
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	40012c00 	.word	0x40012c00
 80075ec:	40014000 	.word	0x40014000
 80075f0:	40014400 	.word	0x40014400

080075f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007604:	2b01      	cmp	r3, #1
 8007606:	d101      	bne.n	800760c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007608:	2302      	movs	r3, #2
 800760a:	e04f      	b.n	80076ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2202      	movs	r2, #2
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a21      	ldr	r2, [pc, #132]	; (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d108      	bne.n	8007648 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800763c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	4313      	orrs	r3, r2
 8007646:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800764e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4313      	orrs	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a14      	ldr	r2, [pc, #80]	; (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d009      	beq.n	8007680 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007674:	d004      	beq.n	8007680 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a10      	ldr	r2, [pc, #64]	; (80076bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d10c      	bne.n	800769a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007686:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	4313      	orrs	r3, r2
 8007690:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr
 80076b8:	40012c00 	.word	0x40012c00
 80076bc:	40014000 	.word	0x40014000

080076c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d101      	bne.n	80076dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80076d8:	2302      	movs	r3, #2
 80076da:	e060      	b.n	800779e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	4313      	orrs	r3, r2
 800770c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4313      	orrs	r3, r2
 800771a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	4313      	orrs	r3, r2
 8007728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	4313      	orrs	r3, r2
 8007736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007742:	4313      	orrs	r3, r2
 8007744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	699b      	ldr	r3, [r3, #24]
 8007750:	041b      	lsls	r3, r3, #16
 8007752:	4313      	orrs	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a14      	ldr	r2, [pc, #80]	; (80077ac <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d115      	bne.n	800778c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776a:	051b      	lsls	r3, r3, #20
 800776c:	4313      	orrs	r3, r2
 800776e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	4313      	orrs	r3, r2
 800777c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	6a1b      	ldr	r3, [r3, #32]
 8007788:	4313      	orrs	r3, r2
 800778a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	40012c00 	.word	0x40012c00

080077b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e040      	b.n	8007880 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007802:	2b00      	cmp	r3, #0
 8007804:	d106      	bne.n	8007814 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7fb fb5c 	bl	8002ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2224      	movs	r2, #36	; 0x24
 8007818:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f022 0201 	bic.w	r2, r2, #1
 8007828:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f8c0 	bl	80079b0 <UART_SetConfig>
 8007830:	4603      	mov	r3, r0
 8007832:	2b01      	cmp	r3, #1
 8007834:	d101      	bne.n	800783a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e022      	b.n	8007880 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	2b00      	cmp	r3, #0
 8007840:	d002      	beq.n	8007848 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fae2 	bl	8007e0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007856:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689a      	ldr	r2, [r3, #8]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007866:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f042 0201 	orr.w	r2, r2, #1
 8007876:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fb69 	bl	8007f50 <UART_CheckIdleState>
 800787e:	4603      	mov	r3, r0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b08a      	sub	sp, #40	; 0x28
 800788c:	af02      	add	r7, sp, #8
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	603b      	str	r3, [r7, #0]
 8007894:	4613      	mov	r3, r2
 8007896:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800789c:	2b20      	cmp	r3, #32
 800789e:	f040 8082 	bne.w	80079a6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d002      	beq.n	80078ae <HAL_UART_Transmit+0x26>
 80078a8:	88fb      	ldrh	r3, [r7, #6]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e07a      	b.n	80079a8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d101      	bne.n	80078c0 <HAL_UART_Transmit+0x38>
 80078bc:	2302      	movs	r3, #2
 80078be:	e073      	b.n	80079a8 <HAL_UART_Transmit+0x120>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2221      	movs	r2, #33	; 0x21
 80078d4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078d6:	f7fb fbf5 	bl	80030c4 <HAL_GetTick>
 80078da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	88fa      	ldrh	r2, [r7, #6]
 80078e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	88fa      	ldrh	r2, [r7, #6]
 80078e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078f4:	d108      	bne.n	8007908 <HAL_UART_Transmit+0x80>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d104      	bne.n	8007908 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80078fe:	2300      	movs	r3, #0
 8007900:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	61bb      	str	r3, [r7, #24]
 8007906:	e003      	b.n	8007910 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800790c:	2300      	movs	r3, #0
 800790e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007918:	e02d      	b.n	8007976 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	2200      	movs	r2, #0
 8007922:	2180      	movs	r1, #128	; 0x80
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f000 fb5c 	bl	8007fe2 <UART_WaitOnFlagUntilTimeout>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	e039      	b.n	80079a8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10b      	bne.n	8007952 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	881a      	ldrh	r2, [r3, #0]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007946:	b292      	uxth	r2, r2
 8007948:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	3302      	adds	r3, #2
 800794e:	61bb      	str	r3, [r7, #24]
 8007950:	e008      	b.n	8007964 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	781a      	ldrb	r2, [r3, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	b292      	uxth	r2, r2
 800795c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	3301      	adds	r3, #1
 8007962:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800796a:	b29b      	uxth	r3, r3
 800796c:	3b01      	subs	r3, #1
 800796e:	b29a      	uxth	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800797c:	b29b      	uxth	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1cb      	bne.n	800791a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2200      	movs	r2, #0
 800798a:	2140      	movs	r1, #64	; 0x40
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 fb28 	bl	8007fe2 <UART_WaitOnFlagUntilTimeout>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007998:	2303      	movs	r3, #3
 800799a:	e005      	b.n	80079a8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2220      	movs	r2, #32
 80079a0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	e000      	b.n	80079a8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80079a6:	2302      	movs	r3, #2
  }
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3720      	adds	r7, #32
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079b4:	b08a      	sub	sp, #40	; 0x28
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	689a      	ldr	r2, [r3, #8]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	431a      	orrs	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	431a      	orrs	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	69db      	ldr	r3, [r3, #28]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	4bb4      	ldr	r3, [pc, #720]	; (8007cb0 <UART_SetConfig+0x300>)
 80079e0:	4013      	ands	r3, r2
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	6812      	ldr	r2, [r2, #0]
 80079e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079e8:	430b      	orrs	r3, r1
 80079ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	68da      	ldr	r2, [r3, #12]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4aa9      	ldr	r2, [pc, #676]	; (8007cb4 <UART_SetConfig+0x304>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d004      	beq.n	8007a1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4aa0      	ldr	r2, [pc, #640]	; (8007cb8 <UART_SetConfig+0x308>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d126      	bne.n	8007a88 <UART_SetConfig+0xd8>
 8007a3a:	4ba0      	ldr	r3, [pc, #640]	; (8007cbc <UART_SetConfig+0x30c>)
 8007a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a40:	f003 0303 	and.w	r3, r3, #3
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d81b      	bhi.n	8007a80 <UART_SetConfig+0xd0>
 8007a48:	a201      	add	r2, pc, #4	; (adr r2, 8007a50 <UART_SetConfig+0xa0>)
 8007a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4e:	bf00      	nop
 8007a50:	08007a61 	.word	0x08007a61
 8007a54:	08007a71 	.word	0x08007a71
 8007a58:	08007a69 	.word	0x08007a69
 8007a5c:	08007a79 	.word	0x08007a79
 8007a60:	2301      	movs	r3, #1
 8007a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a66:	e080      	b.n	8007b6a <UART_SetConfig+0x1ba>
 8007a68:	2302      	movs	r3, #2
 8007a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a6e:	e07c      	b.n	8007b6a <UART_SetConfig+0x1ba>
 8007a70:	2304      	movs	r3, #4
 8007a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a76:	e078      	b.n	8007b6a <UART_SetConfig+0x1ba>
 8007a78:	2308      	movs	r3, #8
 8007a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a7e:	e074      	b.n	8007b6a <UART_SetConfig+0x1ba>
 8007a80:	2310      	movs	r3, #16
 8007a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a86:	e070      	b.n	8007b6a <UART_SetConfig+0x1ba>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a8c      	ldr	r2, [pc, #560]	; (8007cc0 <UART_SetConfig+0x310>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d138      	bne.n	8007b04 <UART_SetConfig+0x154>
 8007a92:	4b8a      	ldr	r3, [pc, #552]	; (8007cbc <UART_SetConfig+0x30c>)
 8007a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a98:	f003 030c 	and.w	r3, r3, #12
 8007a9c:	2b0c      	cmp	r3, #12
 8007a9e:	d82d      	bhi.n	8007afc <UART_SetConfig+0x14c>
 8007aa0:	a201      	add	r2, pc, #4	; (adr r2, 8007aa8 <UART_SetConfig+0xf8>)
 8007aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa6:	bf00      	nop
 8007aa8:	08007add 	.word	0x08007add
 8007aac:	08007afd 	.word	0x08007afd
 8007ab0:	08007afd 	.word	0x08007afd
 8007ab4:	08007afd 	.word	0x08007afd
 8007ab8:	08007aed 	.word	0x08007aed
 8007abc:	08007afd 	.word	0x08007afd
 8007ac0:	08007afd 	.word	0x08007afd
 8007ac4:	08007afd 	.word	0x08007afd
 8007ac8:	08007ae5 	.word	0x08007ae5
 8007acc:	08007afd 	.word	0x08007afd
 8007ad0:	08007afd 	.word	0x08007afd
 8007ad4:	08007afd 	.word	0x08007afd
 8007ad8:	08007af5 	.word	0x08007af5
 8007adc:	2300      	movs	r3, #0
 8007ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ae2:	e042      	b.n	8007b6a <UART_SetConfig+0x1ba>
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007aea:	e03e      	b.n	8007b6a <UART_SetConfig+0x1ba>
 8007aec:	2304      	movs	r3, #4
 8007aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007af2:	e03a      	b.n	8007b6a <UART_SetConfig+0x1ba>
 8007af4:	2308      	movs	r3, #8
 8007af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007afa:	e036      	b.n	8007b6a <UART_SetConfig+0x1ba>
 8007afc:	2310      	movs	r3, #16
 8007afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b02:	e032      	b.n	8007b6a <UART_SetConfig+0x1ba>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a6a      	ldr	r2, [pc, #424]	; (8007cb4 <UART_SetConfig+0x304>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d12a      	bne.n	8007b64 <UART_SetConfig+0x1b4>
 8007b0e:	4b6b      	ldr	r3, [pc, #428]	; (8007cbc <UART_SetConfig+0x30c>)
 8007b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007b18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b1c:	d01a      	beq.n	8007b54 <UART_SetConfig+0x1a4>
 8007b1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b22:	d81b      	bhi.n	8007b5c <UART_SetConfig+0x1ac>
 8007b24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b28:	d00c      	beq.n	8007b44 <UART_SetConfig+0x194>
 8007b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b2e:	d815      	bhi.n	8007b5c <UART_SetConfig+0x1ac>
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d003      	beq.n	8007b3c <UART_SetConfig+0x18c>
 8007b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b38:	d008      	beq.n	8007b4c <UART_SetConfig+0x19c>
 8007b3a:	e00f      	b.n	8007b5c <UART_SetConfig+0x1ac>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b42:	e012      	b.n	8007b6a <UART_SetConfig+0x1ba>
 8007b44:	2302      	movs	r3, #2
 8007b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b4a:	e00e      	b.n	8007b6a <UART_SetConfig+0x1ba>
 8007b4c:	2304      	movs	r3, #4
 8007b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b52:	e00a      	b.n	8007b6a <UART_SetConfig+0x1ba>
 8007b54:	2308      	movs	r3, #8
 8007b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b5a:	e006      	b.n	8007b6a <UART_SetConfig+0x1ba>
 8007b5c:	2310      	movs	r3, #16
 8007b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b62:	e002      	b.n	8007b6a <UART_SetConfig+0x1ba>
 8007b64:	2310      	movs	r3, #16
 8007b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a51      	ldr	r2, [pc, #324]	; (8007cb4 <UART_SetConfig+0x304>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d17a      	bne.n	8007c6a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b78:	2b08      	cmp	r3, #8
 8007b7a:	d824      	bhi.n	8007bc6 <UART_SetConfig+0x216>
 8007b7c:	a201      	add	r2, pc, #4	; (adr r2, 8007b84 <UART_SetConfig+0x1d4>)
 8007b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b82:	bf00      	nop
 8007b84:	08007ba9 	.word	0x08007ba9
 8007b88:	08007bc7 	.word	0x08007bc7
 8007b8c:	08007bb1 	.word	0x08007bb1
 8007b90:	08007bc7 	.word	0x08007bc7
 8007b94:	08007bb7 	.word	0x08007bb7
 8007b98:	08007bc7 	.word	0x08007bc7
 8007b9c:	08007bc7 	.word	0x08007bc7
 8007ba0:	08007bc7 	.word	0x08007bc7
 8007ba4:	08007bbf 	.word	0x08007bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ba8:	f7fe fb6a 	bl	8006280 <HAL_RCC_GetPCLK1Freq>
 8007bac:	61f8      	str	r0, [r7, #28]
        break;
 8007bae:	e010      	b.n	8007bd2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bb0:	4b44      	ldr	r3, [pc, #272]	; (8007cc4 <UART_SetConfig+0x314>)
 8007bb2:	61fb      	str	r3, [r7, #28]
        break;
 8007bb4:	e00d      	b.n	8007bd2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bb6:	f7fe facb 	bl	8006150 <HAL_RCC_GetSysClockFreq>
 8007bba:	61f8      	str	r0, [r7, #28]
        break;
 8007bbc:	e009      	b.n	8007bd2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bc2:	61fb      	str	r3, [r7, #28]
        break;
 8007bc4:	e005      	b.n	8007bd2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007bd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f000 8109 	beq.w	8007dec <UART_SetConfig+0x43c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	685a      	ldr	r2, [r3, #4]
 8007bde:	4613      	mov	r3, r2
 8007be0:	005b      	lsls	r3, r3, #1
 8007be2:	4413      	add	r3, r2
 8007be4:	69fa      	ldr	r2, [r7, #28]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d305      	bcc.n	8007bf6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007bf0:	69fa      	ldr	r2, [r7, #28]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d903      	bls.n	8007bfe <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007bfc:	e0f6      	b.n	8007dec <UART_SetConfig+0x43c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	2200      	movs	r2, #0
 8007c02:	461c      	mov	r4, r3
 8007c04:	4615      	mov	r5, r2
 8007c06:	f04f 0200 	mov.w	r2, #0
 8007c0a:	f04f 0300 	mov.w	r3, #0
 8007c0e:	022b      	lsls	r3, r5, #8
 8007c10:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007c14:	0222      	lsls	r2, r4, #8
 8007c16:	68f9      	ldr	r1, [r7, #12]
 8007c18:	6849      	ldr	r1, [r1, #4]
 8007c1a:	0849      	lsrs	r1, r1, #1
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	4688      	mov	r8, r1
 8007c20:	4681      	mov	r9, r0
 8007c22:	eb12 0a08 	adds.w	sl, r2, r8
 8007c26:	eb43 0b09 	adc.w	fp, r3, r9
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	603b      	str	r3, [r7, #0]
 8007c32:	607a      	str	r2, [r7, #4]
 8007c34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c38:	4650      	mov	r0, sl
 8007c3a:	4659      	mov	r1, fp
 8007c3c:	f7f9 f804 	bl	8000c48 <__aeabi_uldivmod>
 8007c40:	4602      	mov	r2, r0
 8007c42:	460b      	mov	r3, r1
 8007c44:	4613      	mov	r3, r2
 8007c46:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c4e:	d308      	bcc.n	8007c62 <UART_SetConfig+0x2b2>
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c56:	d204      	bcs.n	8007c62 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	60da      	str	r2, [r3, #12]
 8007c60:	e0c4      	b.n	8007dec <UART_SetConfig+0x43c>
        }
        else
        {
          ret = HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007c68:	e0c0      	b.n	8007dec <UART_SetConfig+0x43c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	69db      	ldr	r3, [r3, #28]
 8007c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c72:	d16b      	bne.n	8007d4c <UART_SetConfig+0x39c>
  {
    switch (clocksource)
 8007c74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c78:	2b08      	cmp	r3, #8
 8007c7a:	d834      	bhi.n	8007ce6 <UART_SetConfig+0x336>
 8007c7c:	a201      	add	r2, pc, #4	; (adr r2, 8007c84 <UART_SetConfig+0x2d4>)
 8007c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c82:	bf00      	nop
 8007c84:	08007ca9 	.word	0x08007ca9
 8007c88:	08007cc9 	.word	0x08007cc9
 8007c8c:	08007cd1 	.word	0x08007cd1
 8007c90:	08007ce7 	.word	0x08007ce7
 8007c94:	08007cd7 	.word	0x08007cd7
 8007c98:	08007ce7 	.word	0x08007ce7
 8007c9c:	08007ce7 	.word	0x08007ce7
 8007ca0:	08007ce7 	.word	0x08007ce7
 8007ca4:	08007cdf 	.word	0x08007cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ca8:	f7fe faea 	bl	8006280 <HAL_RCC_GetPCLK1Freq>
 8007cac:	61f8      	str	r0, [r7, #28]
        break;
 8007cae:	e020      	b.n	8007cf2 <UART_SetConfig+0x342>
 8007cb0:	efff69f3 	.word	0xefff69f3
 8007cb4:	40008000 	.word	0x40008000
 8007cb8:	40013800 	.word	0x40013800
 8007cbc:	40021000 	.word	0x40021000
 8007cc0:	40004400 	.word	0x40004400
 8007cc4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cc8:	f7fe faf0 	bl	80062ac <HAL_RCC_GetPCLK2Freq>
 8007ccc:	61f8      	str	r0, [r7, #28]
        break;
 8007cce:	e010      	b.n	8007cf2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cd0:	4b4d      	ldr	r3, [pc, #308]	; (8007e08 <UART_SetConfig+0x458>)
 8007cd2:	61fb      	str	r3, [r7, #28]
        break;
 8007cd4:	e00d      	b.n	8007cf2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cd6:	f7fe fa3b 	bl	8006150 <HAL_RCC_GetSysClockFreq>
 8007cda:	61f8      	str	r0, [r7, #28]
        break;
 8007cdc:	e009      	b.n	8007cf2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ce2:	61fb      	str	r3, [r7, #28]
        break;
 8007ce4:	e005      	b.n	8007cf2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007cf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d079      	beq.n	8007dec <UART_SetConfig+0x43c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	005a      	lsls	r2, r3, #1
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	085b      	lsrs	r3, r3, #1
 8007d02:	441a      	add	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	2b0f      	cmp	r3, #15
 8007d14:	d916      	bls.n	8007d44 <UART_SetConfig+0x394>
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d1c:	d212      	bcs.n	8007d44 <UART_SetConfig+0x394>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	f023 030f 	bic.w	r3, r3, #15
 8007d26:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	085b      	lsrs	r3, r3, #1
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	f003 0307 	and.w	r3, r3, #7
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	8afb      	ldrh	r3, [r7, #22]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	8afa      	ldrh	r2, [r7, #22]
 8007d40:	60da      	str	r2, [r3, #12]
 8007d42:	e053      	b.n	8007dec <UART_SetConfig+0x43c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007d4a:	e04f      	b.n	8007dec <UART_SetConfig+0x43c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d50:	2b08      	cmp	r3, #8
 8007d52:	d828      	bhi.n	8007da6 <UART_SetConfig+0x3f6>
 8007d54:	a201      	add	r2, pc, #4	; (adr r2, 8007d5c <UART_SetConfig+0x3ac>)
 8007d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5a:	bf00      	nop
 8007d5c:	08007d81 	.word	0x08007d81
 8007d60:	08007d89 	.word	0x08007d89
 8007d64:	08007d91 	.word	0x08007d91
 8007d68:	08007da7 	.word	0x08007da7
 8007d6c:	08007d97 	.word	0x08007d97
 8007d70:	08007da7 	.word	0x08007da7
 8007d74:	08007da7 	.word	0x08007da7
 8007d78:	08007da7 	.word	0x08007da7
 8007d7c:	08007d9f 	.word	0x08007d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d80:	f7fe fa7e 	bl	8006280 <HAL_RCC_GetPCLK1Freq>
 8007d84:	61f8      	str	r0, [r7, #28]
        break;
 8007d86:	e014      	b.n	8007db2 <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d88:	f7fe fa90 	bl	80062ac <HAL_RCC_GetPCLK2Freq>
 8007d8c:	61f8      	str	r0, [r7, #28]
        break;
 8007d8e:	e010      	b.n	8007db2 <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d90:	4b1d      	ldr	r3, [pc, #116]	; (8007e08 <UART_SetConfig+0x458>)
 8007d92:	61fb      	str	r3, [r7, #28]
        break;
 8007d94:	e00d      	b.n	8007db2 <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d96:	f7fe f9db 	bl	8006150 <HAL_RCC_GetSysClockFreq>
 8007d9a:	61f8      	str	r0, [r7, #28]
        break;
 8007d9c:	e009      	b.n	8007db2 <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007da2:	61fb      	str	r3, [r7, #28]
        break;
 8007da4:	e005      	b.n	8007db2 <UART_SetConfig+0x402>
      default:
        pclk = 0U;
 8007da6:	2300      	movs	r3, #0
 8007da8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007db0:	bf00      	nop
    }

    if (pclk != 0U)
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d019      	beq.n	8007dec <UART_SetConfig+0x43c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	085a      	lsrs	r2, r3, #1
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	441a      	add	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	2b0f      	cmp	r3, #15
 8007dd2:	d908      	bls.n	8007de6 <UART_SetConfig+0x436>
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dda:	d204      	bcs.n	8007de6 <UART_SetConfig+0x436>
      {
        huart->Instance->BRR = usartdiv;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	60da      	str	r2, [r3, #12]
 8007de4:	e002      	b.n	8007dec <UART_SetConfig+0x43c>
      }
      else
      {
        ret = HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007df8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3728      	adds	r7, #40	; 0x28
 8007e00:	46bd      	mov	sp, r7
 8007e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e06:	bf00      	nop
 8007e08:	00f42400 	.word	0x00f42400

08007e0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00a      	beq.n	8007e36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	430a      	orrs	r2, r1
 8007e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	f003 0302 	and.w	r3, r3, #2
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00a      	beq.n	8007e58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	430a      	orrs	r2, r1
 8007e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5c:	f003 0304 	and.w	r3, r3, #4
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00a      	beq.n	8007e7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7e:	f003 0308 	and.w	r3, r3, #8
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00a      	beq.n	8007e9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea0:	f003 0310 	and.w	r3, r3, #16
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00a      	beq.n	8007ebe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec2:	f003 0320 	and.w	r3, r3, #32
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00a      	beq.n	8007ee0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	430a      	orrs	r2, r1
 8007ede:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d01a      	beq.n	8007f22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	430a      	orrs	r2, r1
 8007f00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f0a:	d10a      	bne.n	8007f22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00a      	beq.n	8007f44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	430a      	orrs	r2, r1
 8007f42:	605a      	str	r2, [r3, #4]
  }
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af02      	add	r7, sp, #8
 8007f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f60:	f7fb f8b0 	bl	80030c4 <HAL_GetTick>
 8007f64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0308 	and.w	r3, r3, #8
 8007f70:	2b08      	cmp	r3, #8
 8007f72:	d10e      	bne.n	8007f92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f78:	9300      	str	r3, [sp, #0]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f82d 	bl	8007fe2 <UART_WaitOnFlagUntilTimeout>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d001      	beq.n	8007f92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e023      	b.n	8007fda <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 0304 	and.w	r3, r3, #4
 8007f9c:	2b04      	cmp	r3, #4
 8007f9e:	d10e      	bne.n	8007fbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f817 	bl	8007fe2 <UART_WaitOnFlagUntilTimeout>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e00d      	b.n	8007fda <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b084      	sub	sp, #16
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	60f8      	str	r0, [r7, #12]
 8007fea:	60b9      	str	r1, [r7, #8]
 8007fec:	603b      	str	r3, [r7, #0]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ff2:	e05e      	b.n	80080b2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffa:	d05a      	beq.n	80080b2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ffc:	f7fb f862 	bl	80030c4 <HAL_GetTick>
 8008000:	4602      	mov	r2, r0
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	69ba      	ldr	r2, [r7, #24]
 8008008:	429a      	cmp	r2, r3
 800800a:	d302      	bcc.n	8008012 <UART_WaitOnFlagUntilTimeout+0x30>
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d11b      	bne.n	800804a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008020:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 0201 	bic.w	r2, r2, #1
 8008030:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2220      	movs	r2, #32
 8008036:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2220      	movs	r2, #32
 800803c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e043      	b.n	80080d2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0304 	and.w	r3, r3, #4
 8008054:	2b00      	cmp	r3, #0
 8008056:	d02c      	beq.n	80080b2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008066:	d124      	bne.n	80080b2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008070:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008080:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	689a      	ldr	r2, [r3, #8]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f022 0201 	bic.w	r2, r2, #1
 8008090:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2220      	movs	r2, #32
 8008096:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2220      	movs	r2, #32
 800809c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2220      	movs	r2, #32
 80080a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e00f      	b.n	80080d2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	69da      	ldr	r2, [r3, #28]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	4013      	ands	r3, r2
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	429a      	cmp	r2, r3
 80080c0:	bf0c      	ite	eq
 80080c2:	2301      	moveq	r3, #1
 80080c4:	2300      	movne	r3, #0
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	461a      	mov	r2, r3
 80080ca:	79fb      	ldrb	r3, [r7, #7]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d091      	beq.n	8007ff4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
	...

080080dc <__errno>:
 80080dc:	4b01      	ldr	r3, [pc, #4]	; (80080e4 <__errno+0x8>)
 80080de:	6818      	ldr	r0, [r3, #0]
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	2000000c 	.word	0x2000000c

080080e8 <__libc_init_array>:
 80080e8:	b570      	push	{r4, r5, r6, lr}
 80080ea:	4d0d      	ldr	r5, [pc, #52]	; (8008120 <__libc_init_array+0x38>)
 80080ec:	4c0d      	ldr	r4, [pc, #52]	; (8008124 <__libc_init_array+0x3c>)
 80080ee:	1b64      	subs	r4, r4, r5
 80080f0:	10a4      	asrs	r4, r4, #2
 80080f2:	2600      	movs	r6, #0
 80080f4:	42a6      	cmp	r6, r4
 80080f6:	d109      	bne.n	800810c <__libc_init_array+0x24>
 80080f8:	4d0b      	ldr	r5, [pc, #44]	; (8008128 <__libc_init_array+0x40>)
 80080fa:	4c0c      	ldr	r4, [pc, #48]	; (800812c <__libc_init_array+0x44>)
 80080fc:	f002 fd50 	bl	800aba0 <_init>
 8008100:	1b64      	subs	r4, r4, r5
 8008102:	10a4      	asrs	r4, r4, #2
 8008104:	2600      	movs	r6, #0
 8008106:	42a6      	cmp	r6, r4
 8008108:	d105      	bne.n	8008116 <__libc_init_array+0x2e>
 800810a:	bd70      	pop	{r4, r5, r6, pc}
 800810c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008110:	4798      	blx	r3
 8008112:	3601      	adds	r6, #1
 8008114:	e7ee      	b.n	80080f4 <__libc_init_array+0xc>
 8008116:	f855 3b04 	ldr.w	r3, [r5], #4
 800811a:	4798      	blx	r3
 800811c:	3601      	adds	r6, #1
 800811e:	e7f2      	b.n	8008106 <__libc_init_array+0x1e>
 8008120:	0800b034 	.word	0x0800b034
 8008124:	0800b034 	.word	0x0800b034
 8008128:	0800b034 	.word	0x0800b034
 800812c:	0800b038 	.word	0x0800b038

08008130 <memset>:
 8008130:	4402      	add	r2, r0
 8008132:	4603      	mov	r3, r0
 8008134:	4293      	cmp	r3, r2
 8008136:	d100      	bne.n	800813a <memset+0xa>
 8008138:	4770      	bx	lr
 800813a:	f803 1b01 	strb.w	r1, [r3], #1
 800813e:	e7f9      	b.n	8008134 <memset+0x4>

08008140 <__cvt>:
 8008140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008144:	ec55 4b10 	vmov	r4, r5, d0
 8008148:	2d00      	cmp	r5, #0
 800814a:	460e      	mov	r6, r1
 800814c:	4619      	mov	r1, r3
 800814e:	462b      	mov	r3, r5
 8008150:	bfbb      	ittet	lt
 8008152:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008156:	461d      	movlt	r5, r3
 8008158:	2300      	movge	r3, #0
 800815a:	232d      	movlt	r3, #45	; 0x2d
 800815c:	700b      	strb	r3, [r1, #0]
 800815e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008160:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008164:	4691      	mov	r9, r2
 8008166:	f023 0820 	bic.w	r8, r3, #32
 800816a:	bfbc      	itt	lt
 800816c:	4622      	movlt	r2, r4
 800816e:	4614      	movlt	r4, r2
 8008170:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008174:	d005      	beq.n	8008182 <__cvt+0x42>
 8008176:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800817a:	d100      	bne.n	800817e <__cvt+0x3e>
 800817c:	3601      	adds	r6, #1
 800817e:	2102      	movs	r1, #2
 8008180:	e000      	b.n	8008184 <__cvt+0x44>
 8008182:	2103      	movs	r1, #3
 8008184:	ab03      	add	r3, sp, #12
 8008186:	9301      	str	r3, [sp, #4]
 8008188:	ab02      	add	r3, sp, #8
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	ec45 4b10 	vmov	d0, r4, r5
 8008190:	4653      	mov	r3, sl
 8008192:	4632      	mov	r2, r6
 8008194:	f000 fce4 	bl	8008b60 <_dtoa_r>
 8008198:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800819c:	4607      	mov	r7, r0
 800819e:	d102      	bne.n	80081a6 <__cvt+0x66>
 80081a0:	f019 0f01 	tst.w	r9, #1
 80081a4:	d022      	beq.n	80081ec <__cvt+0xac>
 80081a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80081aa:	eb07 0906 	add.w	r9, r7, r6
 80081ae:	d110      	bne.n	80081d2 <__cvt+0x92>
 80081b0:	783b      	ldrb	r3, [r7, #0]
 80081b2:	2b30      	cmp	r3, #48	; 0x30
 80081b4:	d10a      	bne.n	80081cc <__cvt+0x8c>
 80081b6:	2200      	movs	r2, #0
 80081b8:	2300      	movs	r3, #0
 80081ba:	4620      	mov	r0, r4
 80081bc:	4629      	mov	r1, r5
 80081be:	f7f8 fc83 	bl	8000ac8 <__aeabi_dcmpeq>
 80081c2:	b918      	cbnz	r0, 80081cc <__cvt+0x8c>
 80081c4:	f1c6 0601 	rsb	r6, r6, #1
 80081c8:	f8ca 6000 	str.w	r6, [sl]
 80081cc:	f8da 3000 	ldr.w	r3, [sl]
 80081d0:	4499      	add	r9, r3
 80081d2:	2200      	movs	r2, #0
 80081d4:	2300      	movs	r3, #0
 80081d6:	4620      	mov	r0, r4
 80081d8:	4629      	mov	r1, r5
 80081da:	f7f8 fc75 	bl	8000ac8 <__aeabi_dcmpeq>
 80081de:	b108      	cbz	r0, 80081e4 <__cvt+0xa4>
 80081e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80081e4:	2230      	movs	r2, #48	; 0x30
 80081e6:	9b03      	ldr	r3, [sp, #12]
 80081e8:	454b      	cmp	r3, r9
 80081ea:	d307      	bcc.n	80081fc <__cvt+0xbc>
 80081ec:	9b03      	ldr	r3, [sp, #12]
 80081ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081f0:	1bdb      	subs	r3, r3, r7
 80081f2:	4638      	mov	r0, r7
 80081f4:	6013      	str	r3, [r2, #0]
 80081f6:	b004      	add	sp, #16
 80081f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081fc:	1c59      	adds	r1, r3, #1
 80081fe:	9103      	str	r1, [sp, #12]
 8008200:	701a      	strb	r2, [r3, #0]
 8008202:	e7f0      	b.n	80081e6 <__cvt+0xa6>

08008204 <__exponent>:
 8008204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008206:	4603      	mov	r3, r0
 8008208:	2900      	cmp	r1, #0
 800820a:	bfb8      	it	lt
 800820c:	4249      	neglt	r1, r1
 800820e:	f803 2b02 	strb.w	r2, [r3], #2
 8008212:	bfb4      	ite	lt
 8008214:	222d      	movlt	r2, #45	; 0x2d
 8008216:	222b      	movge	r2, #43	; 0x2b
 8008218:	2909      	cmp	r1, #9
 800821a:	7042      	strb	r2, [r0, #1]
 800821c:	dd2a      	ble.n	8008274 <__exponent+0x70>
 800821e:	f10d 0407 	add.w	r4, sp, #7
 8008222:	46a4      	mov	ip, r4
 8008224:	270a      	movs	r7, #10
 8008226:	46a6      	mov	lr, r4
 8008228:	460a      	mov	r2, r1
 800822a:	fb91 f6f7 	sdiv	r6, r1, r7
 800822e:	fb07 1516 	mls	r5, r7, r6, r1
 8008232:	3530      	adds	r5, #48	; 0x30
 8008234:	2a63      	cmp	r2, #99	; 0x63
 8008236:	f104 34ff 	add.w	r4, r4, #4294967295
 800823a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800823e:	4631      	mov	r1, r6
 8008240:	dcf1      	bgt.n	8008226 <__exponent+0x22>
 8008242:	3130      	adds	r1, #48	; 0x30
 8008244:	f1ae 0502 	sub.w	r5, lr, #2
 8008248:	f804 1c01 	strb.w	r1, [r4, #-1]
 800824c:	1c44      	adds	r4, r0, #1
 800824e:	4629      	mov	r1, r5
 8008250:	4561      	cmp	r1, ip
 8008252:	d30a      	bcc.n	800826a <__exponent+0x66>
 8008254:	f10d 0209 	add.w	r2, sp, #9
 8008258:	eba2 020e 	sub.w	r2, r2, lr
 800825c:	4565      	cmp	r5, ip
 800825e:	bf88      	it	hi
 8008260:	2200      	movhi	r2, #0
 8008262:	4413      	add	r3, r2
 8008264:	1a18      	subs	r0, r3, r0
 8008266:	b003      	add	sp, #12
 8008268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800826a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800826e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008272:	e7ed      	b.n	8008250 <__exponent+0x4c>
 8008274:	2330      	movs	r3, #48	; 0x30
 8008276:	3130      	adds	r1, #48	; 0x30
 8008278:	7083      	strb	r3, [r0, #2]
 800827a:	70c1      	strb	r1, [r0, #3]
 800827c:	1d03      	adds	r3, r0, #4
 800827e:	e7f1      	b.n	8008264 <__exponent+0x60>

08008280 <_printf_float>:
 8008280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	ed2d 8b02 	vpush	{d8}
 8008288:	b08d      	sub	sp, #52	; 0x34
 800828a:	460c      	mov	r4, r1
 800828c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008290:	4616      	mov	r6, r2
 8008292:	461f      	mov	r7, r3
 8008294:	4605      	mov	r5, r0
 8008296:	f001 fb47 	bl	8009928 <_localeconv_r>
 800829a:	f8d0 a000 	ldr.w	sl, [r0]
 800829e:	4650      	mov	r0, sl
 80082a0:	f7f7 ff96 	bl	80001d0 <strlen>
 80082a4:	2300      	movs	r3, #0
 80082a6:	930a      	str	r3, [sp, #40]	; 0x28
 80082a8:	6823      	ldr	r3, [r4, #0]
 80082aa:	9305      	str	r3, [sp, #20]
 80082ac:	f8d8 3000 	ldr.w	r3, [r8]
 80082b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80082b4:	3307      	adds	r3, #7
 80082b6:	f023 0307 	bic.w	r3, r3, #7
 80082ba:	f103 0208 	add.w	r2, r3, #8
 80082be:	f8c8 2000 	str.w	r2, [r8]
 80082c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80082ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80082ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80082d2:	9307      	str	r3, [sp, #28]
 80082d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80082d8:	ee08 0a10 	vmov	s16, r0
 80082dc:	4b9f      	ldr	r3, [pc, #636]	; (800855c <_printf_float+0x2dc>)
 80082de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082e2:	f04f 32ff 	mov.w	r2, #4294967295
 80082e6:	f7f8 fc21 	bl	8000b2c <__aeabi_dcmpun>
 80082ea:	bb88      	cbnz	r0, 8008350 <_printf_float+0xd0>
 80082ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082f0:	4b9a      	ldr	r3, [pc, #616]	; (800855c <_printf_float+0x2dc>)
 80082f2:	f04f 32ff 	mov.w	r2, #4294967295
 80082f6:	f7f8 fbfb 	bl	8000af0 <__aeabi_dcmple>
 80082fa:	bb48      	cbnz	r0, 8008350 <_printf_float+0xd0>
 80082fc:	2200      	movs	r2, #0
 80082fe:	2300      	movs	r3, #0
 8008300:	4640      	mov	r0, r8
 8008302:	4649      	mov	r1, r9
 8008304:	f7f8 fbea 	bl	8000adc <__aeabi_dcmplt>
 8008308:	b110      	cbz	r0, 8008310 <_printf_float+0x90>
 800830a:	232d      	movs	r3, #45	; 0x2d
 800830c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008310:	4b93      	ldr	r3, [pc, #588]	; (8008560 <_printf_float+0x2e0>)
 8008312:	4894      	ldr	r0, [pc, #592]	; (8008564 <_printf_float+0x2e4>)
 8008314:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008318:	bf94      	ite	ls
 800831a:	4698      	movls	r8, r3
 800831c:	4680      	movhi	r8, r0
 800831e:	2303      	movs	r3, #3
 8008320:	6123      	str	r3, [r4, #16]
 8008322:	9b05      	ldr	r3, [sp, #20]
 8008324:	f023 0204 	bic.w	r2, r3, #4
 8008328:	6022      	str	r2, [r4, #0]
 800832a:	f04f 0900 	mov.w	r9, #0
 800832e:	9700      	str	r7, [sp, #0]
 8008330:	4633      	mov	r3, r6
 8008332:	aa0b      	add	r2, sp, #44	; 0x2c
 8008334:	4621      	mov	r1, r4
 8008336:	4628      	mov	r0, r5
 8008338:	f000 f9d8 	bl	80086ec <_printf_common>
 800833c:	3001      	adds	r0, #1
 800833e:	f040 8090 	bne.w	8008462 <_printf_float+0x1e2>
 8008342:	f04f 30ff 	mov.w	r0, #4294967295
 8008346:	b00d      	add	sp, #52	; 0x34
 8008348:	ecbd 8b02 	vpop	{d8}
 800834c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008350:	4642      	mov	r2, r8
 8008352:	464b      	mov	r3, r9
 8008354:	4640      	mov	r0, r8
 8008356:	4649      	mov	r1, r9
 8008358:	f7f8 fbe8 	bl	8000b2c <__aeabi_dcmpun>
 800835c:	b140      	cbz	r0, 8008370 <_printf_float+0xf0>
 800835e:	464b      	mov	r3, r9
 8008360:	2b00      	cmp	r3, #0
 8008362:	bfbc      	itt	lt
 8008364:	232d      	movlt	r3, #45	; 0x2d
 8008366:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800836a:	487f      	ldr	r0, [pc, #508]	; (8008568 <_printf_float+0x2e8>)
 800836c:	4b7f      	ldr	r3, [pc, #508]	; (800856c <_printf_float+0x2ec>)
 800836e:	e7d1      	b.n	8008314 <_printf_float+0x94>
 8008370:	6863      	ldr	r3, [r4, #4]
 8008372:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008376:	9206      	str	r2, [sp, #24]
 8008378:	1c5a      	adds	r2, r3, #1
 800837a:	d13f      	bne.n	80083fc <_printf_float+0x17c>
 800837c:	2306      	movs	r3, #6
 800837e:	6063      	str	r3, [r4, #4]
 8008380:	9b05      	ldr	r3, [sp, #20]
 8008382:	6861      	ldr	r1, [r4, #4]
 8008384:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008388:	2300      	movs	r3, #0
 800838a:	9303      	str	r3, [sp, #12]
 800838c:	ab0a      	add	r3, sp, #40	; 0x28
 800838e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008392:	ab09      	add	r3, sp, #36	; 0x24
 8008394:	ec49 8b10 	vmov	d0, r8, r9
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	6022      	str	r2, [r4, #0]
 800839c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80083a0:	4628      	mov	r0, r5
 80083a2:	f7ff fecd 	bl	8008140 <__cvt>
 80083a6:	9b06      	ldr	r3, [sp, #24]
 80083a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083aa:	2b47      	cmp	r3, #71	; 0x47
 80083ac:	4680      	mov	r8, r0
 80083ae:	d108      	bne.n	80083c2 <_printf_float+0x142>
 80083b0:	1cc8      	adds	r0, r1, #3
 80083b2:	db02      	blt.n	80083ba <_printf_float+0x13a>
 80083b4:	6863      	ldr	r3, [r4, #4]
 80083b6:	4299      	cmp	r1, r3
 80083b8:	dd41      	ble.n	800843e <_printf_float+0x1be>
 80083ba:	f1ab 0b02 	sub.w	fp, fp, #2
 80083be:	fa5f fb8b 	uxtb.w	fp, fp
 80083c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083c6:	d820      	bhi.n	800840a <_printf_float+0x18a>
 80083c8:	3901      	subs	r1, #1
 80083ca:	465a      	mov	r2, fp
 80083cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80083d0:	9109      	str	r1, [sp, #36]	; 0x24
 80083d2:	f7ff ff17 	bl	8008204 <__exponent>
 80083d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083d8:	1813      	adds	r3, r2, r0
 80083da:	2a01      	cmp	r2, #1
 80083dc:	4681      	mov	r9, r0
 80083de:	6123      	str	r3, [r4, #16]
 80083e0:	dc02      	bgt.n	80083e8 <_printf_float+0x168>
 80083e2:	6822      	ldr	r2, [r4, #0]
 80083e4:	07d2      	lsls	r2, r2, #31
 80083e6:	d501      	bpl.n	80083ec <_printf_float+0x16c>
 80083e8:	3301      	adds	r3, #1
 80083ea:	6123      	str	r3, [r4, #16]
 80083ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d09c      	beq.n	800832e <_printf_float+0xae>
 80083f4:	232d      	movs	r3, #45	; 0x2d
 80083f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083fa:	e798      	b.n	800832e <_printf_float+0xae>
 80083fc:	9a06      	ldr	r2, [sp, #24]
 80083fe:	2a47      	cmp	r2, #71	; 0x47
 8008400:	d1be      	bne.n	8008380 <_printf_float+0x100>
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1bc      	bne.n	8008380 <_printf_float+0x100>
 8008406:	2301      	movs	r3, #1
 8008408:	e7b9      	b.n	800837e <_printf_float+0xfe>
 800840a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800840e:	d118      	bne.n	8008442 <_printf_float+0x1c2>
 8008410:	2900      	cmp	r1, #0
 8008412:	6863      	ldr	r3, [r4, #4]
 8008414:	dd0b      	ble.n	800842e <_printf_float+0x1ae>
 8008416:	6121      	str	r1, [r4, #16]
 8008418:	b913      	cbnz	r3, 8008420 <_printf_float+0x1a0>
 800841a:	6822      	ldr	r2, [r4, #0]
 800841c:	07d0      	lsls	r0, r2, #31
 800841e:	d502      	bpl.n	8008426 <_printf_float+0x1a6>
 8008420:	3301      	adds	r3, #1
 8008422:	440b      	add	r3, r1
 8008424:	6123      	str	r3, [r4, #16]
 8008426:	65a1      	str	r1, [r4, #88]	; 0x58
 8008428:	f04f 0900 	mov.w	r9, #0
 800842c:	e7de      	b.n	80083ec <_printf_float+0x16c>
 800842e:	b913      	cbnz	r3, 8008436 <_printf_float+0x1b6>
 8008430:	6822      	ldr	r2, [r4, #0]
 8008432:	07d2      	lsls	r2, r2, #31
 8008434:	d501      	bpl.n	800843a <_printf_float+0x1ba>
 8008436:	3302      	adds	r3, #2
 8008438:	e7f4      	b.n	8008424 <_printf_float+0x1a4>
 800843a:	2301      	movs	r3, #1
 800843c:	e7f2      	b.n	8008424 <_printf_float+0x1a4>
 800843e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008444:	4299      	cmp	r1, r3
 8008446:	db05      	blt.n	8008454 <_printf_float+0x1d4>
 8008448:	6823      	ldr	r3, [r4, #0]
 800844a:	6121      	str	r1, [r4, #16]
 800844c:	07d8      	lsls	r0, r3, #31
 800844e:	d5ea      	bpl.n	8008426 <_printf_float+0x1a6>
 8008450:	1c4b      	adds	r3, r1, #1
 8008452:	e7e7      	b.n	8008424 <_printf_float+0x1a4>
 8008454:	2900      	cmp	r1, #0
 8008456:	bfd4      	ite	le
 8008458:	f1c1 0202 	rsble	r2, r1, #2
 800845c:	2201      	movgt	r2, #1
 800845e:	4413      	add	r3, r2
 8008460:	e7e0      	b.n	8008424 <_printf_float+0x1a4>
 8008462:	6823      	ldr	r3, [r4, #0]
 8008464:	055a      	lsls	r2, r3, #21
 8008466:	d407      	bmi.n	8008478 <_printf_float+0x1f8>
 8008468:	6923      	ldr	r3, [r4, #16]
 800846a:	4642      	mov	r2, r8
 800846c:	4631      	mov	r1, r6
 800846e:	4628      	mov	r0, r5
 8008470:	47b8      	blx	r7
 8008472:	3001      	adds	r0, #1
 8008474:	d12c      	bne.n	80084d0 <_printf_float+0x250>
 8008476:	e764      	b.n	8008342 <_printf_float+0xc2>
 8008478:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800847c:	f240 80e0 	bls.w	8008640 <_printf_float+0x3c0>
 8008480:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008484:	2200      	movs	r2, #0
 8008486:	2300      	movs	r3, #0
 8008488:	f7f8 fb1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800848c:	2800      	cmp	r0, #0
 800848e:	d034      	beq.n	80084fa <_printf_float+0x27a>
 8008490:	4a37      	ldr	r2, [pc, #220]	; (8008570 <_printf_float+0x2f0>)
 8008492:	2301      	movs	r3, #1
 8008494:	4631      	mov	r1, r6
 8008496:	4628      	mov	r0, r5
 8008498:	47b8      	blx	r7
 800849a:	3001      	adds	r0, #1
 800849c:	f43f af51 	beq.w	8008342 <_printf_float+0xc2>
 80084a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084a4:	429a      	cmp	r2, r3
 80084a6:	db02      	blt.n	80084ae <_printf_float+0x22e>
 80084a8:	6823      	ldr	r3, [r4, #0]
 80084aa:	07d8      	lsls	r0, r3, #31
 80084ac:	d510      	bpl.n	80084d0 <_printf_float+0x250>
 80084ae:	ee18 3a10 	vmov	r3, s16
 80084b2:	4652      	mov	r2, sl
 80084b4:	4631      	mov	r1, r6
 80084b6:	4628      	mov	r0, r5
 80084b8:	47b8      	blx	r7
 80084ba:	3001      	adds	r0, #1
 80084bc:	f43f af41 	beq.w	8008342 <_printf_float+0xc2>
 80084c0:	f04f 0800 	mov.w	r8, #0
 80084c4:	f104 091a 	add.w	r9, r4, #26
 80084c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ca:	3b01      	subs	r3, #1
 80084cc:	4543      	cmp	r3, r8
 80084ce:	dc09      	bgt.n	80084e4 <_printf_float+0x264>
 80084d0:	6823      	ldr	r3, [r4, #0]
 80084d2:	079b      	lsls	r3, r3, #30
 80084d4:	f100 8105 	bmi.w	80086e2 <_printf_float+0x462>
 80084d8:	68e0      	ldr	r0, [r4, #12]
 80084da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084dc:	4298      	cmp	r0, r3
 80084de:	bfb8      	it	lt
 80084e0:	4618      	movlt	r0, r3
 80084e2:	e730      	b.n	8008346 <_printf_float+0xc6>
 80084e4:	2301      	movs	r3, #1
 80084e6:	464a      	mov	r2, r9
 80084e8:	4631      	mov	r1, r6
 80084ea:	4628      	mov	r0, r5
 80084ec:	47b8      	blx	r7
 80084ee:	3001      	adds	r0, #1
 80084f0:	f43f af27 	beq.w	8008342 <_printf_float+0xc2>
 80084f4:	f108 0801 	add.w	r8, r8, #1
 80084f8:	e7e6      	b.n	80084c8 <_printf_float+0x248>
 80084fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	dc39      	bgt.n	8008574 <_printf_float+0x2f4>
 8008500:	4a1b      	ldr	r2, [pc, #108]	; (8008570 <_printf_float+0x2f0>)
 8008502:	2301      	movs	r3, #1
 8008504:	4631      	mov	r1, r6
 8008506:	4628      	mov	r0, r5
 8008508:	47b8      	blx	r7
 800850a:	3001      	adds	r0, #1
 800850c:	f43f af19 	beq.w	8008342 <_printf_float+0xc2>
 8008510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008514:	4313      	orrs	r3, r2
 8008516:	d102      	bne.n	800851e <_printf_float+0x29e>
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	07d9      	lsls	r1, r3, #31
 800851c:	d5d8      	bpl.n	80084d0 <_printf_float+0x250>
 800851e:	ee18 3a10 	vmov	r3, s16
 8008522:	4652      	mov	r2, sl
 8008524:	4631      	mov	r1, r6
 8008526:	4628      	mov	r0, r5
 8008528:	47b8      	blx	r7
 800852a:	3001      	adds	r0, #1
 800852c:	f43f af09 	beq.w	8008342 <_printf_float+0xc2>
 8008530:	f04f 0900 	mov.w	r9, #0
 8008534:	f104 0a1a 	add.w	sl, r4, #26
 8008538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800853a:	425b      	negs	r3, r3
 800853c:	454b      	cmp	r3, r9
 800853e:	dc01      	bgt.n	8008544 <_printf_float+0x2c4>
 8008540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008542:	e792      	b.n	800846a <_printf_float+0x1ea>
 8008544:	2301      	movs	r3, #1
 8008546:	4652      	mov	r2, sl
 8008548:	4631      	mov	r1, r6
 800854a:	4628      	mov	r0, r5
 800854c:	47b8      	blx	r7
 800854e:	3001      	adds	r0, #1
 8008550:	f43f aef7 	beq.w	8008342 <_printf_float+0xc2>
 8008554:	f109 0901 	add.w	r9, r9, #1
 8008558:	e7ee      	b.n	8008538 <_printf_float+0x2b8>
 800855a:	bf00      	nop
 800855c:	7fefffff 	.word	0x7fefffff
 8008560:	0800ac54 	.word	0x0800ac54
 8008564:	0800ac58 	.word	0x0800ac58
 8008568:	0800ac60 	.word	0x0800ac60
 800856c:	0800ac5c 	.word	0x0800ac5c
 8008570:	0800ac64 	.word	0x0800ac64
 8008574:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008576:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008578:	429a      	cmp	r2, r3
 800857a:	bfa8      	it	ge
 800857c:	461a      	movge	r2, r3
 800857e:	2a00      	cmp	r2, #0
 8008580:	4691      	mov	r9, r2
 8008582:	dc37      	bgt.n	80085f4 <_printf_float+0x374>
 8008584:	f04f 0b00 	mov.w	fp, #0
 8008588:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800858c:	f104 021a 	add.w	r2, r4, #26
 8008590:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008592:	9305      	str	r3, [sp, #20]
 8008594:	eba3 0309 	sub.w	r3, r3, r9
 8008598:	455b      	cmp	r3, fp
 800859a:	dc33      	bgt.n	8008604 <_printf_float+0x384>
 800859c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085a0:	429a      	cmp	r2, r3
 80085a2:	db3b      	blt.n	800861c <_printf_float+0x39c>
 80085a4:	6823      	ldr	r3, [r4, #0]
 80085a6:	07da      	lsls	r2, r3, #31
 80085a8:	d438      	bmi.n	800861c <_printf_float+0x39c>
 80085aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ac:	9a05      	ldr	r2, [sp, #20]
 80085ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085b0:	1a9a      	subs	r2, r3, r2
 80085b2:	eba3 0901 	sub.w	r9, r3, r1
 80085b6:	4591      	cmp	r9, r2
 80085b8:	bfa8      	it	ge
 80085ba:	4691      	movge	r9, r2
 80085bc:	f1b9 0f00 	cmp.w	r9, #0
 80085c0:	dc35      	bgt.n	800862e <_printf_float+0x3ae>
 80085c2:	f04f 0800 	mov.w	r8, #0
 80085c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085ca:	f104 0a1a 	add.w	sl, r4, #26
 80085ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085d2:	1a9b      	subs	r3, r3, r2
 80085d4:	eba3 0309 	sub.w	r3, r3, r9
 80085d8:	4543      	cmp	r3, r8
 80085da:	f77f af79 	ble.w	80084d0 <_printf_float+0x250>
 80085de:	2301      	movs	r3, #1
 80085e0:	4652      	mov	r2, sl
 80085e2:	4631      	mov	r1, r6
 80085e4:	4628      	mov	r0, r5
 80085e6:	47b8      	blx	r7
 80085e8:	3001      	adds	r0, #1
 80085ea:	f43f aeaa 	beq.w	8008342 <_printf_float+0xc2>
 80085ee:	f108 0801 	add.w	r8, r8, #1
 80085f2:	e7ec      	b.n	80085ce <_printf_float+0x34e>
 80085f4:	4613      	mov	r3, r2
 80085f6:	4631      	mov	r1, r6
 80085f8:	4642      	mov	r2, r8
 80085fa:	4628      	mov	r0, r5
 80085fc:	47b8      	blx	r7
 80085fe:	3001      	adds	r0, #1
 8008600:	d1c0      	bne.n	8008584 <_printf_float+0x304>
 8008602:	e69e      	b.n	8008342 <_printf_float+0xc2>
 8008604:	2301      	movs	r3, #1
 8008606:	4631      	mov	r1, r6
 8008608:	4628      	mov	r0, r5
 800860a:	9205      	str	r2, [sp, #20]
 800860c:	47b8      	blx	r7
 800860e:	3001      	adds	r0, #1
 8008610:	f43f ae97 	beq.w	8008342 <_printf_float+0xc2>
 8008614:	9a05      	ldr	r2, [sp, #20]
 8008616:	f10b 0b01 	add.w	fp, fp, #1
 800861a:	e7b9      	b.n	8008590 <_printf_float+0x310>
 800861c:	ee18 3a10 	vmov	r3, s16
 8008620:	4652      	mov	r2, sl
 8008622:	4631      	mov	r1, r6
 8008624:	4628      	mov	r0, r5
 8008626:	47b8      	blx	r7
 8008628:	3001      	adds	r0, #1
 800862a:	d1be      	bne.n	80085aa <_printf_float+0x32a>
 800862c:	e689      	b.n	8008342 <_printf_float+0xc2>
 800862e:	9a05      	ldr	r2, [sp, #20]
 8008630:	464b      	mov	r3, r9
 8008632:	4442      	add	r2, r8
 8008634:	4631      	mov	r1, r6
 8008636:	4628      	mov	r0, r5
 8008638:	47b8      	blx	r7
 800863a:	3001      	adds	r0, #1
 800863c:	d1c1      	bne.n	80085c2 <_printf_float+0x342>
 800863e:	e680      	b.n	8008342 <_printf_float+0xc2>
 8008640:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008642:	2a01      	cmp	r2, #1
 8008644:	dc01      	bgt.n	800864a <_printf_float+0x3ca>
 8008646:	07db      	lsls	r3, r3, #31
 8008648:	d538      	bpl.n	80086bc <_printf_float+0x43c>
 800864a:	2301      	movs	r3, #1
 800864c:	4642      	mov	r2, r8
 800864e:	4631      	mov	r1, r6
 8008650:	4628      	mov	r0, r5
 8008652:	47b8      	blx	r7
 8008654:	3001      	adds	r0, #1
 8008656:	f43f ae74 	beq.w	8008342 <_printf_float+0xc2>
 800865a:	ee18 3a10 	vmov	r3, s16
 800865e:	4652      	mov	r2, sl
 8008660:	4631      	mov	r1, r6
 8008662:	4628      	mov	r0, r5
 8008664:	47b8      	blx	r7
 8008666:	3001      	adds	r0, #1
 8008668:	f43f ae6b 	beq.w	8008342 <_printf_float+0xc2>
 800866c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008670:	2200      	movs	r2, #0
 8008672:	2300      	movs	r3, #0
 8008674:	f7f8 fa28 	bl	8000ac8 <__aeabi_dcmpeq>
 8008678:	b9d8      	cbnz	r0, 80086b2 <_printf_float+0x432>
 800867a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800867c:	f108 0201 	add.w	r2, r8, #1
 8008680:	3b01      	subs	r3, #1
 8008682:	4631      	mov	r1, r6
 8008684:	4628      	mov	r0, r5
 8008686:	47b8      	blx	r7
 8008688:	3001      	adds	r0, #1
 800868a:	d10e      	bne.n	80086aa <_printf_float+0x42a>
 800868c:	e659      	b.n	8008342 <_printf_float+0xc2>
 800868e:	2301      	movs	r3, #1
 8008690:	4652      	mov	r2, sl
 8008692:	4631      	mov	r1, r6
 8008694:	4628      	mov	r0, r5
 8008696:	47b8      	blx	r7
 8008698:	3001      	adds	r0, #1
 800869a:	f43f ae52 	beq.w	8008342 <_printf_float+0xc2>
 800869e:	f108 0801 	add.w	r8, r8, #1
 80086a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086a4:	3b01      	subs	r3, #1
 80086a6:	4543      	cmp	r3, r8
 80086a8:	dcf1      	bgt.n	800868e <_printf_float+0x40e>
 80086aa:	464b      	mov	r3, r9
 80086ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80086b0:	e6dc      	b.n	800846c <_printf_float+0x1ec>
 80086b2:	f04f 0800 	mov.w	r8, #0
 80086b6:	f104 0a1a 	add.w	sl, r4, #26
 80086ba:	e7f2      	b.n	80086a2 <_printf_float+0x422>
 80086bc:	2301      	movs	r3, #1
 80086be:	4642      	mov	r2, r8
 80086c0:	e7df      	b.n	8008682 <_printf_float+0x402>
 80086c2:	2301      	movs	r3, #1
 80086c4:	464a      	mov	r2, r9
 80086c6:	4631      	mov	r1, r6
 80086c8:	4628      	mov	r0, r5
 80086ca:	47b8      	blx	r7
 80086cc:	3001      	adds	r0, #1
 80086ce:	f43f ae38 	beq.w	8008342 <_printf_float+0xc2>
 80086d2:	f108 0801 	add.w	r8, r8, #1
 80086d6:	68e3      	ldr	r3, [r4, #12]
 80086d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086da:	1a5b      	subs	r3, r3, r1
 80086dc:	4543      	cmp	r3, r8
 80086de:	dcf0      	bgt.n	80086c2 <_printf_float+0x442>
 80086e0:	e6fa      	b.n	80084d8 <_printf_float+0x258>
 80086e2:	f04f 0800 	mov.w	r8, #0
 80086e6:	f104 0919 	add.w	r9, r4, #25
 80086ea:	e7f4      	b.n	80086d6 <_printf_float+0x456>

080086ec <_printf_common>:
 80086ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086f0:	4616      	mov	r6, r2
 80086f2:	4699      	mov	r9, r3
 80086f4:	688a      	ldr	r2, [r1, #8]
 80086f6:	690b      	ldr	r3, [r1, #16]
 80086f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086fc:	4293      	cmp	r3, r2
 80086fe:	bfb8      	it	lt
 8008700:	4613      	movlt	r3, r2
 8008702:	6033      	str	r3, [r6, #0]
 8008704:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008708:	4607      	mov	r7, r0
 800870a:	460c      	mov	r4, r1
 800870c:	b10a      	cbz	r2, 8008712 <_printf_common+0x26>
 800870e:	3301      	adds	r3, #1
 8008710:	6033      	str	r3, [r6, #0]
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	0699      	lsls	r1, r3, #26
 8008716:	bf42      	ittt	mi
 8008718:	6833      	ldrmi	r3, [r6, #0]
 800871a:	3302      	addmi	r3, #2
 800871c:	6033      	strmi	r3, [r6, #0]
 800871e:	6825      	ldr	r5, [r4, #0]
 8008720:	f015 0506 	ands.w	r5, r5, #6
 8008724:	d106      	bne.n	8008734 <_printf_common+0x48>
 8008726:	f104 0a19 	add.w	sl, r4, #25
 800872a:	68e3      	ldr	r3, [r4, #12]
 800872c:	6832      	ldr	r2, [r6, #0]
 800872e:	1a9b      	subs	r3, r3, r2
 8008730:	42ab      	cmp	r3, r5
 8008732:	dc26      	bgt.n	8008782 <_printf_common+0x96>
 8008734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008738:	1e13      	subs	r3, r2, #0
 800873a:	6822      	ldr	r2, [r4, #0]
 800873c:	bf18      	it	ne
 800873e:	2301      	movne	r3, #1
 8008740:	0692      	lsls	r2, r2, #26
 8008742:	d42b      	bmi.n	800879c <_printf_common+0xb0>
 8008744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008748:	4649      	mov	r1, r9
 800874a:	4638      	mov	r0, r7
 800874c:	47c0      	blx	r8
 800874e:	3001      	adds	r0, #1
 8008750:	d01e      	beq.n	8008790 <_printf_common+0xa4>
 8008752:	6823      	ldr	r3, [r4, #0]
 8008754:	68e5      	ldr	r5, [r4, #12]
 8008756:	6832      	ldr	r2, [r6, #0]
 8008758:	f003 0306 	and.w	r3, r3, #6
 800875c:	2b04      	cmp	r3, #4
 800875e:	bf08      	it	eq
 8008760:	1aad      	subeq	r5, r5, r2
 8008762:	68a3      	ldr	r3, [r4, #8]
 8008764:	6922      	ldr	r2, [r4, #16]
 8008766:	bf0c      	ite	eq
 8008768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800876c:	2500      	movne	r5, #0
 800876e:	4293      	cmp	r3, r2
 8008770:	bfc4      	itt	gt
 8008772:	1a9b      	subgt	r3, r3, r2
 8008774:	18ed      	addgt	r5, r5, r3
 8008776:	2600      	movs	r6, #0
 8008778:	341a      	adds	r4, #26
 800877a:	42b5      	cmp	r5, r6
 800877c:	d11a      	bne.n	80087b4 <_printf_common+0xc8>
 800877e:	2000      	movs	r0, #0
 8008780:	e008      	b.n	8008794 <_printf_common+0xa8>
 8008782:	2301      	movs	r3, #1
 8008784:	4652      	mov	r2, sl
 8008786:	4649      	mov	r1, r9
 8008788:	4638      	mov	r0, r7
 800878a:	47c0      	blx	r8
 800878c:	3001      	adds	r0, #1
 800878e:	d103      	bne.n	8008798 <_printf_common+0xac>
 8008790:	f04f 30ff 	mov.w	r0, #4294967295
 8008794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008798:	3501      	adds	r5, #1
 800879a:	e7c6      	b.n	800872a <_printf_common+0x3e>
 800879c:	18e1      	adds	r1, r4, r3
 800879e:	1c5a      	adds	r2, r3, #1
 80087a0:	2030      	movs	r0, #48	; 0x30
 80087a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087a6:	4422      	add	r2, r4
 80087a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087b0:	3302      	adds	r3, #2
 80087b2:	e7c7      	b.n	8008744 <_printf_common+0x58>
 80087b4:	2301      	movs	r3, #1
 80087b6:	4622      	mov	r2, r4
 80087b8:	4649      	mov	r1, r9
 80087ba:	4638      	mov	r0, r7
 80087bc:	47c0      	blx	r8
 80087be:	3001      	adds	r0, #1
 80087c0:	d0e6      	beq.n	8008790 <_printf_common+0xa4>
 80087c2:	3601      	adds	r6, #1
 80087c4:	e7d9      	b.n	800877a <_printf_common+0x8e>
	...

080087c8 <_printf_i>:
 80087c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087cc:	7e0f      	ldrb	r7, [r1, #24]
 80087ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087d0:	2f78      	cmp	r7, #120	; 0x78
 80087d2:	4691      	mov	r9, r2
 80087d4:	4680      	mov	r8, r0
 80087d6:	460c      	mov	r4, r1
 80087d8:	469a      	mov	sl, r3
 80087da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087de:	d807      	bhi.n	80087f0 <_printf_i+0x28>
 80087e0:	2f62      	cmp	r7, #98	; 0x62
 80087e2:	d80a      	bhi.n	80087fa <_printf_i+0x32>
 80087e4:	2f00      	cmp	r7, #0
 80087e6:	f000 80d8 	beq.w	800899a <_printf_i+0x1d2>
 80087ea:	2f58      	cmp	r7, #88	; 0x58
 80087ec:	f000 80a3 	beq.w	8008936 <_printf_i+0x16e>
 80087f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087f8:	e03a      	b.n	8008870 <_printf_i+0xa8>
 80087fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087fe:	2b15      	cmp	r3, #21
 8008800:	d8f6      	bhi.n	80087f0 <_printf_i+0x28>
 8008802:	a101      	add	r1, pc, #4	; (adr r1, 8008808 <_printf_i+0x40>)
 8008804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008808:	08008861 	.word	0x08008861
 800880c:	08008875 	.word	0x08008875
 8008810:	080087f1 	.word	0x080087f1
 8008814:	080087f1 	.word	0x080087f1
 8008818:	080087f1 	.word	0x080087f1
 800881c:	080087f1 	.word	0x080087f1
 8008820:	08008875 	.word	0x08008875
 8008824:	080087f1 	.word	0x080087f1
 8008828:	080087f1 	.word	0x080087f1
 800882c:	080087f1 	.word	0x080087f1
 8008830:	080087f1 	.word	0x080087f1
 8008834:	08008981 	.word	0x08008981
 8008838:	080088a5 	.word	0x080088a5
 800883c:	08008963 	.word	0x08008963
 8008840:	080087f1 	.word	0x080087f1
 8008844:	080087f1 	.word	0x080087f1
 8008848:	080089a3 	.word	0x080089a3
 800884c:	080087f1 	.word	0x080087f1
 8008850:	080088a5 	.word	0x080088a5
 8008854:	080087f1 	.word	0x080087f1
 8008858:	080087f1 	.word	0x080087f1
 800885c:	0800896b 	.word	0x0800896b
 8008860:	682b      	ldr	r3, [r5, #0]
 8008862:	1d1a      	adds	r2, r3, #4
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	602a      	str	r2, [r5, #0]
 8008868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800886c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008870:	2301      	movs	r3, #1
 8008872:	e0a3      	b.n	80089bc <_printf_i+0x1f4>
 8008874:	6820      	ldr	r0, [r4, #0]
 8008876:	6829      	ldr	r1, [r5, #0]
 8008878:	0606      	lsls	r6, r0, #24
 800887a:	f101 0304 	add.w	r3, r1, #4
 800887e:	d50a      	bpl.n	8008896 <_printf_i+0xce>
 8008880:	680e      	ldr	r6, [r1, #0]
 8008882:	602b      	str	r3, [r5, #0]
 8008884:	2e00      	cmp	r6, #0
 8008886:	da03      	bge.n	8008890 <_printf_i+0xc8>
 8008888:	232d      	movs	r3, #45	; 0x2d
 800888a:	4276      	negs	r6, r6
 800888c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008890:	485e      	ldr	r0, [pc, #376]	; (8008a0c <_printf_i+0x244>)
 8008892:	230a      	movs	r3, #10
 8008894:	e019      	b.n	80088ca <_printf_i+0x102>
 8008896:	680e      	ldr	r6, [r1, #0]
 8008898:	602b      	str	r3, [r5, #0]
 800889a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800889e:	bf18      	it	ne
 80088a0:	b236      	sxthne	r6, r6
 80088a2:	e7ef      	b.n	8008884 <_printf_i+0xbc>
 80088a4:	682b      	ldr	r3, [r5, #0]
 80088a6:	6820      	ldr	r0, [r4, #0]
 80088a8:	1d19      	adds	r1, r3, #4
 80088aa:	6029      	str	r1, [r5, #0]
 80088ac:	0601      	lsls	r1, r0, #24
 80088ae:	d501      	bpl.n	80088b4 <_printf_i+0xec>
 80088b0:	681e      	ldr	r6, [r3, #0]
 80088b2:	e002      	b.n	80088ba <_printf_i+0xf2>
 80088b4:	0646      	lsls	r6, r0, #25
 80088b6:	d5fb      	bpl.n	80088b0 <_printf_i+0xe8>
 80088b8:	881e      	ldrh	r6, [r3, #0]
 80088ba:	4854      	ldr	r0, [pc, #336]	; (8008a0c <_printf_i+0x244>)
 80088bc:	2f6f      	cmp	r7, #111	; 0x6f
 80088be:	bf0c      	ite	eq
 80088c0:	2308      	moveq	r3, #8
 80088c2:	230a      	movne	r3, #10
 80088c4:	2100      	movs	r1, #0
 80088c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088ca:	6865      	ldr	r5, [r4, #4]
 80088cc:	60a5      	str	r5, [r4, #8]
 80088ce:	2d00      	cmp	r5, #0
 80088d0:	bfa2      	ittt	ge
 80088d2:	6821      	ldrge	r1, [r4, #0]
 80088d4:	f021 0104 	bicge.w	r1, r1, #4
 80088d8:	6021      	strge	r1, [r4, #0]
 80088da:	b90e      	cbnz	r6, 80088e0 <_printf_i+0x118>
 80088dc:	2d00      	cmp	r5, #0
 80088de:	d04d      	beq.n	800897c <_printf_i+0x1b4>
 80088e0:	4615      	mov	r5, r2
 80088e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80088e6:	fb03 6711 	mls	r7, r3, r1, r6
 80088ea:	5dc7      	ldrb	r7, [r0, r7]
 80088ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088f0:	4637      	mov	r7, r6
 80088f2:	42bb      	cmp	r3, r7
 80088f4:	460e      	mov	r6, r1
 80088f6:	d9f4      	bls.n	80088e2 <_printf_i+0x11a>
 80088f8:	2b08      	cmp	r3, #8
 80088fa:	d10b      	bne.n	8008914 <_printf_i+0x14c>
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	07de      	lsls	r6, r3, #31
 8008900:	d508      	bpl.n	8008914 <_printf_i+0x14c>
 8008902:	6923      	ldr	r3, [r4, #16]
 8008904:	6861      	ldr	r1, [r4, #4]
 8008906:	4299      	cmp	r1, r3
 8008908:	bfde      	ittt	le
 800890a:	2330      	movle	r3, #48	; 0x30
 800890c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008910:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008914:	1b52      	subs	r2, r2, r5
 8008916:	6122      	str	r2, [r4, #16]
 8008918:	f8cd a000 	str.w	sl, [sp]
 800891c:	464b      	mov	r3, r9
 800891e:	aa03      	add	r2, sp, #12
 8008920:	4621      	mov	r1, r4
 8008922:	4640      	mov	r0, r8
 8008924:	f7ff fee2 	bl	80086ec <_printf_common>
 8008928:	3001      	adds	r0, #1
 800892a:	d14c      	bne.n	80089c6 <_printf_i+0x1fe>
 800892c:	f04f 30ff 	mov.w	r0, #4294967295
 8008930:	b004      	add	sp, #16
 8008932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008936:	4835      	ldr	r0, [pc, #212]	; (8008a0c <_printf_i+0x244>)
 8008938:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800893c:	6829      	ldr	r1, [r5, #0]
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	f851 6b04 	ldr.w	r6, [r1], #4
 8008944:	6029      	str	r1, [r5, #0]
 8008946:	061d      	lsls	r5, r3, #24
 8008948:	d514      	bpl.n	8008974 <_printf_i+0x1ac>
 800894a:	07df      	lsls	r7, r3, #31
 800894c:	bf44      	itt	mi
 800894e:	f043 0320 	orrmi.w	r3, r3, #32
 8008952:	6023      	strmi	r3, [r4, #0]
 8008954:	b91e      	cbnz	r6, 800895e <_printf_i+0x196>
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	f023 0320 	bic.w	r3, r3, #32
 800895c:	6023      	str	r3, [r4, #0]
 800895e:	2310      	movs	r3, #16
 8008960:	e7b0      	b.n	80088c4 <_printf_i+0xfc>
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	f043 0320 	orr.w	r3, r3, #32
 8008968:	6023      	str	r3, [r4, #0]
 800896a:	2378      	movs	r3, #120	; 0x78
 800896c:	4828      	ldr	r0, [pc, #160]	; (8008a10 <_printf_i+0x248>)
 800896e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008972:	e7e3      	b.n	800893c <_printf_i+0x174>
 8008974:	0659      	lsls	r1, r3, #25
 8008976:	bf48      	it	mi
 8008978:	b2b6      	uxthmi	r6, r6
 800897a:	e7e6      	b.n	800894a <_printf_i+0x182>
 800897c:	4615      	mov	r5, r2
 800897e:	e7bb      	b.n	80088f8 <_printf_i+0x130>
 8008980:	682b      	ldr	r3, [r5, #0]
 8008982:	6826      	ldr	r6, [r4, #0]
 8008984:	6961      	ldr	r1, [r4, #20]
 8008986:	1d18      	adds	r0, r3, #4
 8008988:	6028      	str	r0, [r5, #0]
 800898a:	0635      	lsls	r5, r6, #24
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	d501      	bpl.n	8008994 <_printf_i+0x1cc>
 8008990:	6019      	str	r1, [r3, #0]
 8008992:	e002      	b.n	800899a <_printf_i+0x1d2>
 8008994:	0670      	lsls	r0, r6, #25
 8008996:	d5fb      	bpl.n	8008990 <_printf_i+0x1c8>
 8008998:	8019      	strh	r1, [r3, #0]
 800899a:	2300      	movs	r3, #0
 800899c:	6123      	str	r3, [r4, #16]
 800899e:	4615      	mov	r5, r2
 80089a0:	e7ba      	b.n	8008918 <_printf_i+0x150>
 80089a2:	682b      	ldr	r3, [r5, #0]
 80089a4:	1d1a      	adds	r2, r3, #4
 80089a6:	602a      	str	r2, [r5, #0]
 80089a8:	681d      	ldr	r5, [r3, #0]
 80089aa:	6862      	ldr	r2, [r4, #4]
 80089ac:	2100      	movs	r1, #0
 80089ae:	4628      	mov	r0, r5
 80089b0:	f7f7 fc16 	bl	80001e0 <memchr>
 80089b4:	b108      	cbz	r0, 80089ba <_printf_i+0x1f2>
 80089b6:	1b40      	subs	r0, r0, r5
 80089b8:	6060      	str	r0, [r4, #4]
 80089ba:	6863      	ldr	r3, [r4, #4]
 80089bc:	6123      	str	r3, [r4, #16]
 80089be:	2300      	movs	r3, #0
 80089c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089c4:	e7a8      	b.n	8008918 <_printf_i+0x150>
 80089c6:	6923      	ldr	r3, [r4, #16]
 80089c8:	462a      	mov	r2, r5
 80089ca:	4649      	mov	r1, r9
 80089cc:	4640      	mov	r0, r8
 80089ce:	47d0      	blx	sl
 80089d0:	3001      	adds	r0, #1
 80089d2:	d0ab      	beq.n	800892c <_printf_i+0x164>
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	079b      	lsls	r3, r3, #30
 80089d8:	d413      	bmi.n	8008a02 <_printf_i+0x23a>
 80089da:	68e0      	ldr	r0, [r4, #12]
 80089dc:	9b03      	ldr	r3, [sp, #12]
 80089de:	4298      	cmp	r0, r3
 80089e0:	bfb8      	it	lt
 80089e2:	4618      	movlt	r0, r3
 80089e4:	e7a4      	b.n	8008930 <_printf_i+0x168>
 80089e6:	2301      	movs	r3, #1
 80089e8:	4632      	mov	r2, r6
 80089ea:	4649      	mov	r1, r9
 80089ec:	4640      	mov	r0, r8
 80089ee:	47d0      	blx	sl
 80089f0:	3001      	adds	r0, #1
 80089f2:	d09b      	beq.n	800892c <_printf_i+0x164>
 80089f4:	3501      	adds	r5, #1
 80089f6:	68e3      	ldr	r3, [r4, #12]
 80089f8:	9903      	ldr	r1, [sp, #12]
 80089fa:	1a5b      	subs	r3, r3, r1
 80089fc:	42ab      	cmp	r3, r5
 80089fe:	dcf2      	bgt.n	80089e6 <_printf_i+0x21e>
 8008a00:	e7eb      	b.n	80089da <_printf_i+0x212>
 8008a02:	2500      	movs	r5, #0
 8008a04:	f104 0619 	add.w	r6, r4, #25
 8008a08:	e7f5      	b.n	80089f6 <_printf_i+0x22e>
 8008a0a:	bf00      	nop
 8008a0c:	0800ac66 	.word	0x0800ac66
 8008a10:	0800ac77 	.word	0x0800ac77

08008a14 <iprintf>:
 8008a14:	b40f      	push	{r0, r1, r2, r3}
 8008a16:	4b0a      	ldr	r3, [pc, #40]	; (8008a40 <iprintf+0x2c>)
 8008a18:	b513      	push	{r0, r1, r4, lr}
 8008a1a:	681c      	ldr	r4, [r3, #0]
 8008a1c:	b124      	cbz	r4, 8008a28 <iprintf+0x14>
 8008a1e:	69a3      	ldr	r3, [r4, #24]
 8008a20:	b913      	cbnz	r3, 8008a28 <iprintf+0x14>
 8008a22:	4620      	mov	r0, r4
 8008a24:	f000 fee2 	bl	80097ec <__sinit>
 8008a28:	ab05      	add	r3, sp, #20
 8008a2a:	9a04      	ldr	r2, [sp, #16]
 8008a2c:	68a1      	ldr	r1, [r4, #8]
 8008a2e:	9301      	str	r3, [sp, #4]
 8008a30:	4620      	mov	r0, r4
 8008a32:	f001 fc3b 	bl	800a2ac <_vfiprintf_r>
 8008a36:	b002      	add	sp, #8
 8008a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a3c:	b004      	add	sp, #16
 8008a3e:	4770      	bx	lr
 8008a40:	2000000c 	.word	0x2000000c

08008a44 <quorem>:
 8008a44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	6903      	ldr	r3, [r0, #16]
 8008a4a:	690c      	ldr	r4, [r1, #16]
 8008a4c:	42a3      	cmp	r3, r4
 8008a4e:	4607      	mov	r7, r0
 8008a50:	f2c0 8081 	blt.w	8008b56 <quorem+0x112>
 8008a54:	3c01      	subs	r4, #1
 8008a56:	f101 0814 	add.w	r8, r1, #20
 8008a5a:	f100 0514 	add.w	r5, r0, #20
 8008a5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a62:	9301      	str	r3, [sp, #4]
 8008a64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a78:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a7c:	d331      	bcc.n	8008ae2 <quorem+0x9e>
 8008a7e:	f04f 0e00 	mov.w	lr, #0
 8008a82:	4640      	mov	r0, r8
 8008a84:	46ac      	mov	ip, r5
 8008a86:	46f2      	mov	sl, lr
 8008a88:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a8c:	b293      	uxth	r3, r2
 8008a8e:	fb06 e303 	mla	r3, r6, r3, lr
 8008a92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	ebaa 0303 	sub.w	r3, sl, r3
 8008a9c:	f8dc a000 	ldr.w	sl, [ip]
 8008aa0:	0c12      	lsrs	r2, r2, #16
 8008aa2:	fa13 f38a 	uxtah	r3, r3, sl
 8008aa6:	fb06 e202 	mla	r2, r6, r2, lr
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	9b00      	ldr	r3, [sp, #0]
 8008aae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ab2:	b292      	uxth	r2, r2
 8008ab4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008ab8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008abc:	f8bd 3000 	ldrh.w	r3, [sp]
 8008ac0:	4581      	cmp	r9, r0
 8008ac2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ac6:	f84c 3b04 	str.w	r3, [ip], #4
 8008aca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008ace:	d2db      	bcs.n	8008a88 <quorem+0x44>
 8008ad0:	f855 300b 	ldr.w	r3, [r5, fp]
 8008ad4:	b92b      	cbnz	r3, 8008ae2 <quorem+0x9e>
 8008ad6:	9b01      	ldr	r3, [sp, #4]
 8008ad8:	3b04      	subs	r3, #4
 8008ada:	429d      	cmp	r5, r3
 8008adc:	461a      	mov	r2, r3
 8008ade:	d32e      	bcc.n	8008b3e <quorem+0xfa>
 8008ae0:	613c      	str	r4, [r7, #16]
 8008ae2:	4638      	mov	r0, r7
 8008ae4:	f001 f9c0 	bl	8009e68 <__mcmp>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	db24      	blt.n	8008b36 <quorem+0xf2>
 8008aec:	3601      	adds	r6, #1
 8008aee:	4628      	mov	r0, r5
 8008af0:	f04f 0c00 	mov.w	ip, #0
 8008af4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008af8:	f8d0 e000 	ldr.w	lr, [r0]
 8008afc:	b293      	uxth	r3, r2
 8008afe:	ebac 0303 	sub.w	r3, ip, r3
 8008b02:	0c12      	lsrs	r2, r2, #16
 8008b04:	fa13 f38e 	uxtah	r3, r3, lr
 8008b08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b16:	45c1      	cmp	r9, r8
 8008b18:	f840 3b04 	str.w	r3, [r0], #4
 8008b1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008b20:	d2e8      	bcs.n	8008af4 <quorem+0xb0>
 8008b22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b2a:	b922      	cbnz	r2, 8008b36 <quorem+0xf2>
 8008b2c:	3b04      	subs	r3, #4
 8008b2e:	429d      	cmp	r5, r3
 8008b30:	461a      	mov	r2, r3
 8008b32:	d30a      	bcc.n	8008b4a <quorem+0x106>
 8008b34:	613c      	str	r4, [r7, #16]
 8008b36:	4630      	mov	r0, r6
 8008b38:	b003      	add	sp, #12
 8008b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b3e:	6812      	ldr	r2, [r2, #0]
 8008b40:	3b04      	subs	r3, #4
 8008b42:	2a00      	cmp	r2, #0
 8008b44:	d1cc      	bne.n	8008ae0 <quorem+0x9c>
 8008b46:	3c01      	subs	r4, #1
 8008b48:	e7c7      	b.n	8008ada <quorem+0x96>
 8008b4a:	6812      	ldr	r2, [r2, #0]
 8008b4c:	3b04      	subs	r3, #4
 8008b4e:	2a00      	cmp	r2, #0
 8008b50:	d1f0      	bne.n	8008b34 <quorem+0xf0>
 8008b52:	3c01      	subs	r4, #1
 8008b54:	e7eb      	b.n	8008b2e <quorem+0xea>
 8008b56:	2000      	movs	r0, #0
 8008b58:	e7ee      	b.n	8008b38 <quorem+0xf4>
 8008b5a:	0000      	movs	r0, r0
 8008b5c:	0000      	movs	r0, r0
	...

08008b60 <_dtoa_r>:
 8008b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b64:	ed2d 8b04 	vpush	{d8-d9}
 8008b68:	ec57 6b10 	vmov	r6, r7, d0
 8008b6c:	b093      	sub	sp, #76	; 0x4c
 8008b6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b74:	9106      	str	r1, [sp, #24]
 8008b76:	ee10 aa10 	vmov	sl, s0
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b7e:	930c      	str	r3, [sp, #48]	; 0x30
 8008b80:	46bb      	mov	fp, r7
 8008b82:	b975      	cbnz	r5, 8008ba2 <_dtoa_r+0x42>
 8008b84:	2010      	movs	r0, #16
 8008b86:	f000 fed7 	bl	8009938 <malloc>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	6260      	str	r0, [r4, #36]	; 0x24
 8008b8e:	b920      	cbnz	r0, 8008b9a <_dtoa_r+0x3a>
 8008b90:	4ba7      	ldr	r3, [pc, #668]	; (8008e30 <_dtoa_r+0x2d0>)
 8008b92:	21ea      	movs	r1, #234	; 0xea
 8008b94:	48a7      	ldr	r0, [pc, #668]	; (8008e34 <_dtoa_r+0x2d4>)
 8008b96:	f001 fddf 	bl	800a758 <__assert_func>
 8008b9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b9e:	6005      	str	r5, [r0, #0]
 8008ba0:	60c5      	str	r5, [r0, #12]
 8008ba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ba4:	6819      	ldr	r1, [r3, #0]
 8008ba6:	b151      	cbz	r1, 8008bbe <_dtoa_r+0x5e>
 8008ba8:	685a      	ldr	r2, [r3, #4]
 8008baa:	604a      	str	r2, [r1, #4]
 8008bac:	2301      	movs	r3, #1
 8008bae:	4093      	lsls	r3, r2
 8008bb0:	608b      	str	r3, [r1, #8]
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f000 ff16 	bl	80099e4 <_Bfree>
 8008bb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bba:	2200      	movs	r2, #0
 8008bbc:	601a      	str	r2, [r3, #0]
 8008bbe:	1e3b      	subs	r3, r7, #0
 8008bc0:	bfaa      	itet	ge
 8008bc2:	2300      	movge	r3, #0
 8008bc4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008bc8:	f8c8 3000 	strge.w	r3, [r8]
 8008bcc:	4b9a      	ldr	r3, [pc, #616]	; (8008e38 <_dtoa_r+0x2d8>)
 8008bce:	bfbc      	itt	lt
 8008bd0:	2201      	movlt	r2, #1
 8008bd2:	f8c8 2000 	strlt.w	r2, [r8]
 8008bd6:	ea33 030b 	bics.w	r3, r3, fp
 8008bda:	d11b      	bne.n	8008c14 <_dtoa_r+0xb4>
 8008bdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bde:	f242 730f 	movw	r3, #9999	; 0x270f
 8008be2:	6013      	str	r3, [r2, #0]
 8008be4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008be8:	4333      	orrs	r3, r6
 8008bea:	f000 8592 	beq.w	8009712 <_dtoa_r+0xbb2>
 8008bee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bf0:	b963      	cbnz	r3, 8008c0c <_dtoa_r+0xac>
 8008bf2:	4b92      	ldr	r3, [pc, #584]	; (8008e3c <_dtoa_r+0x2dc>)
 8008bf4:	e022      	b.n	8008c3c <_dtoa_r+0xdc>
 8008bf6:	4b92      	ldr	r3, [pc, #584]	; (8008e40 <_dtoa_r+0x2e0>)
 8008bf8:	9301      	str	r3, [sp, #4]
 8008bfa:	3308      	adds	r3, #8
 8008bfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008bfe:	6013      	str	r3, [r2, #0]
 8008c00:	9801      	ldr	r0, [sp, #4]
 8008c02:	b013      	add	sp, #76	; 0x4c
 8008c04:	ecbd 8b04 	vpop	{d8-d9}
 8008c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c0c:	4b8b      	ldr	r3, [pc, #556]	; (8008e3c <_dtoa_r+0x2dc>)
 8008c0e:	9301      	str	r3, [sp, #4]
 8008c10:	3303      	adds	r3, #3
 8008c12:	e7f3      	b.n	8008bfc <_dtoa_r+0x9c>
 8008c14:	2200      	movs	r2, #0
 8008c16:	2300      	movs	r3, #0
 8008c18:	4650      	mov	r0, sl
 8008c1a:	4659      	mov	r1, fp
 8008c1c:	f7f7 ff54 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c20:	ec4b ab19 	vmov	d9, sl, fp
 8008c24:	4680      	mov	r8, r0
 8008c26:	b158      	cbz	r0, 8008c40 <_dtoa_r+0xe0>
 8008c28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	6013      	str	r3, [r2, #0]
 8008c2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f000 856b 	beq.w	800970c <_dtoa_r+0xbac>
 8008c36:	4883      	ldr	r0, [pc, #524]	; (8008e44 <_dtoa_r+0x2e4>)
 8008c38:	6018      	str	r0, [r3, #0]
 8008c3a:	1e43      	subs	r3, r0, #1
 8008c3c:	9301      	str	r3, [sp, #4]
 8008c3e:	e7df      	b.n	8008c00 <_dtoa_r+0xa0>
 8008c40:	ec4b ab10 	vmov	d0, sl, fp
 8008c44:	aa10      	add	r2, sp, #64	; 0x40
 8008c46:	a911      	add	r1, sp, #68	; 0x44
 8008c48:	4620      	mov	r0, r4
 8008c4a:	f001 f9b3 	bl	8009fb4 <__d2b>
 8008c4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008c52:	ee08 0a10 	vmov	s16, r0
 8008c56:	2d00      	cmp	r5, #0
 8008c58:	f000 8084 	beq.w	8008d64 <_dtoa_r+0x204>
 8008c5c:	ee19 3a90 	vmov	r3, s19
 8008c60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008c68:	4656      	mov	r6, sl
 8008c6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008c6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008c76:	4b74      	ldr	r3, [pc, #464]	; (8008e48 <_dtoa_r+0x2e8>)
 8008c78:	2200      	movs	r2, #0
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	4639      	mov	r1, r7
 8008c7e:	f7f7 fb03 	bl	8000288 <__aeabi_dsub>
 8008c82:	a365      	add	r3, pc, #404	; (adr r3, 8008e18 <_dtoa_r+0x2b8>)
 8008c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c88:	f7f7 fcb6 	bl	80005f8 <__aeabi_dmul>
 8008c8c:	a364      	add	r3, pc, #400	; (adr r3, 8008e20 <_dtoa_r+0x2c0>)
 8008c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c92:	f7f7 fafb 	bl	800028c <__adddf3>
 8008c96:	4606      	mov	r6, r0
 8008c98:	4628      	mov	r0, r5
 8008c9a:	460f      	mov	r7, r1
 8008c9c:	f7f7 fc42 	bl	8000524 <__aeabi_i2d>
 8008ca0:	a361      	add	r3, pc, #388	; (adr r3, 8008e28 <_dtoa_r+0x2c8>)
 8008ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca6:	f7f7 fca7 	bl	80005f8 <__aeabi_dmul>
 8008caa:	4602      	mov	r2, r0
 8008cac:	460b      	mov	r3, r1
 8008cae:	4630      	mov	r0, r6
 8008cb0:	4639      	mov	r1, r7
 8008cb2:	f7f7 faeb 	bl	800028c <__adddf3>
 8008cb6:	4606      	mov	r6, r0
 8008cb8:	460f      	mov	r7, r1
 8008cba:	f7f7 ff4d 	bl	8000b58 <__aeabi_d2iz>
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	9000      	str	r0, [sp, #0]
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	4639      	mov	r1, r7
 8008cc8:	f7f7 ff08 	bl	8000adc <__aeabi_dcmplt>
 8008ccc:	b150      	cbz	r0, 8008ce4 <_dtoa_r+0x184>
 8008cce:	9800      	ldr	r0, [sp, #0]
 8008cd0:	f7f7 fc28 	bl	8000524 <__aeabi_i2d>
 8008cd4:	4632      	mov	r2, r6
 8008cd6:	463b      	mov	r3, r7
 8008cd8:	f7f7 fef6 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cdc:	b910      	cbnz	r0, 8008ce4 <_dtoa_r+0x184>
 8008cde:	9b00      	ldr	r3, [sp, #0]
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	9b00      	ldr	r3, [sp, #0]
 8008ce6:	2b16      	cmp	r3, #22
 8008ce8:	d85a      	bhi.n	8008da0 <_dtoa_r+0x240>
 8008cea:	9a00      	ldr	r2, [sp, #0]
 8008cec:	4b57      	ldr	r3, [pc, #348]	; (8008e4c <_dtoa_r+0x2ec>)
 8008cee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf6:	ec51 0b19 	vmov	r0, r1, d9
 8008cfa:	f7f7 feef 	bl	8000adc <__aeabi_dcmplt>
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	d050      	beq.n	8008da4 <_dtoa_r+0x244>
 8008d02:	9b00      	ldr	r3, [sp, #0]
 8008d04:	3b01      	subs	r3, #1
 8008d06:	9300      	str	r3, [sp, #0]
 8008d08:	2300      	movs	r3, #0
 8008d0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d0e:	1b5d      	subs	r5, r3, r5
 8008d10:	1e6b      	subs	r3, r5, #1
 8008d12:	9305      	str	r3, [sp, #20]
 8008d14:	bf45      	ittet	mi
 8008d16:	f1c5 0301 	rsbmi	r3, r5, #1
 8008d1a:	9304      	strmi	r3, [sp, #16]
 8008d1c:	2300      	movpl	r3, #0
 8008d1e:	2300      	movmi	r3, #0
 8008d20:	bf4c      	ite	mi
 8008d22:	9305      	strmi	r3, [sp, #20]
 8008d24:	9304      	strpl	r3, [sp, #16]
 8008d26:	9b00      	ldr	r3, [sp, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	db3d      	blt.n	8008da8 <_dtoa_r+0x248>
 8008d2c:	9b05      	ldr	r3, [sp, #20]
 8008d2e:	9a00      	ldr	r2, [sp, #0]
 8008d30:	920a      	str	r2, [sp, #40]	; 0x28
 8008d32:	4413      	add	r3, r2
 8008d34:	9305      	str	r3, [sp, #20]
 8008d36:	2300      	movs	r3, #0
 8008d38:	9307      	str	r3, [sp, #28]
 8008d3a:	9b06      	ldr	r3, [sp, #24]
 8008d3c:	2b09      	cmp	r3, #9
 8008d3e:	f200 8089 	bhi.w	8008e54 <_dtoa_r+0x2f4>
 8008d42:	2b05      	cmp	r3, #5
 8008d44:	bfc4      	itt	gt
 8008d46:	3b04      	subgt	r3, #4
 8008d48:	9306      	strgt	r3, [sp, #24]
 8008d4a:	9b06      	ldr	r3, [sp, #24]
 8008d4c:	f1a3 0302 	sub.w	r3, r3, #2
 8008d50:	bfcc      	ite	gt
 8008d52:	2500      	movgt	r5, #0
 8008d54:	2501      	movle	r5, #1
 8008d56:	2b03      	cmp	r3, #3
 8008d58:	f200 8087 	bhi.w	8008e6a <_dtoa_r+0x30a>
 8008d5c:	e8df f003 	tbb	[pc, r3]
 8008d60:	59383a2d 	.word	0x59383a2d
 8008d64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008d68:	441d      	add	r5, r3
 8008d6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d6e:	2b20      	cmp	r3, #32
 8008d70:	bfc1      	itttt	gt
 8008d72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008d7a:	fa0b f303 	lslgt.w	r3, fp, r3
 8008d7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008d82:	bfda      	itte	le
 8008d84:	f1c3 0320 	rsble	r3, r3, #32
 8008d88:	fa06 f003 	lslle.w	r0, r6, r3
 8008d8c:	4318      	orrgt	r0, r3
 8008d8e:	f7f7 fbb9 	bl	8000504 <__aeabi_ui2d>
 8008d92:	2301      	movs	r3, #1
 8008d94:	4606      	mov	r6, r0
 8008d96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008d9a:	3d01      	subs	r5, #1
 8008d9c:	930e      	str	r3, [sp, #56]	; 0x38
 8008d9e:	e76a      	b.n	8008c76 <_dtoa_r+0x116>
 8008da0:	2301      	movs	r3, #1
 8008da2:	e7b2      	b.n	8008d0a <_dtoa_r+0x1aa>
 8008da4:	900b      	str	r0, [sp, #44]	; 0x2c
 8008da6:	e7b1      	b.n	8008d0c <_dtoa_r+0x1ac>
 8008da8:	9b04      	ldr	r3, [sp, #16]
 8008daa:	9a00      	ldr	r2, [sp, #0]
 8008dac:	1a9b      	subs	r3, r3, r2
 8008dae:	9304      	str	r3, [sp, #16]
 8008db0:	4253      	negs	r3, r2
 8008db2:	9307      	str	r3, [sp, #28]
 8008db4:	2300      	movs	r3, #0
 8008db6:	930a      	str	r3, [sp, #40]	; 0x28
 8008db8:	e7bf      	b.n	8008d3a <_dtoa_r+0x1da>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	9308      	str	r3, [sp, #32]
 8008dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	dc55      	bgt.n	8008e70 <_dtoa_r+0x310>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	9209      	str	r2, [sp, #36]	; 0x24
 8008dce:	e00c      	b.n	8008dea <_dtoa_r+0x28a>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e7f3      	b.n	8008dbc <_dtoa_r+0x25c>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dd8:	9308      	str	r3, [sp, #32]
 8008dda:	9b00      	ldr	r3, [sp, #0]
 8008ddc:	4413      	add	r3, r2
 8008dde:	9302      	str	r3, [sp, #8]
 8008de0:	3301      	adds	r3, #1
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	9303      	str	r3, [sp, #12]
 8008de6:	bfb8      	it	lt
 8008de8:	2301      	movlt	r3, #1
 8008dea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008dec:	2200      	movs	r2, #0
 8008dee:	6042      	str	r2, [r0, #4]
 8008df0:	2204      	movs	r2, #4
 8008df2:	f102 0614 	add.w	r6, r2, #20
 8008df6:	429e      	cmp	r6, r3
 8008df8:	6841      	ldr	r1, [r0, #4]
 8008dfa:	d93d      	bls.n	8008e78 <_dtoa_r+0x318>
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	f000 fdb1 	bl	8009964 <_Balloc>
 8008e02:	9001      	str	r0, [sp, #4]
 8008e04:	2800      	cmp	r0, #0
 8008e06:	d13b      	bne.n	8008e80 <_dtoa_r+0x320>
 8008e08:	4b11      	ldr	r3, [pc, #68]	; (8008e50 <_dtoa_r+0x2f0>)
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e10:	e6c0      	b.n	8008b94 <_dtoa_r+0x34>
 8008e12:	2301      	movs	r3, #1
 8008e14:	e7df      	b.n	8008dd6 <_dtoa_r+0x276>
 8008e16:	bf00      	nop
 8008e18:	636f4361 	.word	0x636f4361
 8008e1c:	3fd287a7 	.word	0x3fd287a7
 8008e20:	8b60c8b3 	.word	0x8b60c8b3
 8008e24:	3fc68a28 	.word	0x3fc68a28
 8008e28:	509f79fb 	.word	0x509f79fb
 8008e2c:	3fd34413 	.word	0x3fd34413
 8008e30:	0800ac95 	.word	0x0800ac95
 8008e34:	0800acac 	.word	0x0800acac
 8008e38:	7ff00000 	.word	0x7ff00000
 8008e3c:	0800ac91 	.word	0x0800ac91
 8008e40:	0800ac88 	.word	0x0800ac88
 8008e44:	0800ac65 	.word	0x0800ac65
 8008e48:	3ff80000 	.word	0x3ff80000
 8008e4c:	0800ae00 	.word	0x0800ae00
 8008e50:	0800ad07 	.word	0x0800ad07
 8008e54:	2501      	movs	r5, #1
 8008e56:	2300      	movs	r3, #0
 8008e58:	9306      	str	r3, [sp, #24]
 8008e5a:	9508      	str	r5, [sp, #32]
 8008e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e64:	2200      	movs	r2, #0
 8008e66:	2312      	movs	r3, #18
 8008e68:	e7b0      	b.n	8008dcc <_dtoa_r+0x26c>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	9308      	str	r3, [sp, #32]
 8008e6e:	e7f5      	b.n	8008e5c <_dtoa_r+0x2fc>
 8008e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e76:	e7b8      	b.n	8008dea <_dtoa_r+0x28a>
 8008e78:	3101      	adds	r1, #1
 8008e7a:	6041      	str	r1, [r0, #4]
 8008e7c:	0052      	lsls	r2, r2, #1
 8008e7e:	e7b8      	b.n	8008df2 <_dtoa_r+0x292>
 8008e80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e82:	9a01      	ldr	r2, [sp, #4]
 8008e84:	601a      	str	r2, [r3, #0]
 8008e86:	9b03      	ldr	r3, [sp, #12]
 8008e88:	2b0e      	cmp	r3, #14
 8008e8a:	f200 809d 	bhi.w	8008fc8 <_dtoa_r+0x468>
 8008e8e:	2d00      	cmp	r5, #0
 8008e90:	f000 809a 	beq.w	8008fc8 <_dtoa_r+0x468>
 8008e94:	9b00      	ldr	r3, [sp, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	dd32      	ble.n	8008f00 <_dtoa_r+0x3a0>
 8008e9a:	4ab7      	ldr	r2, [pc, #732]	; (8009178 <_dtoa_r+0x618>)
 8008e9c:	f003 030f 	and.w	r3, r3, #15
 8008ea0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008ea4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ea8:	9b00      	ldr	r3, [sp, #0]
 8008eaa:	05d8      	lsls	r0, r3, #23
 8008eac:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008eb0:	d516      	bpl.n	8008ee0 <_dtoa_r+0x380>
 8008eb2:	4bb2      	ldr	r3, [pc, #712]	; (800917c <_dtoa_r+0x61c>)
 8008eb4:	ec51 0b19 	vmov	r0, r1, d9
 8008eb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ebc:	f7f7 fcc6 	bl	800084c <__aeabi_ddiv>
 8008ec0:	f007 070f 	and.w	r7, r7, #15
 8008ec4:	4682      	mov	sl, r0
 8008ec6:	468b      	mov	fp, r1
 8008ec8:	2503      	movs	r5, #3
 8008eca:	4eac      	ldr	r6, [pc, #688]	; (800917c <_dtoa_r+0x61c>)
 8008ecc:	b957      	cbnz	r7, 8008ee4 <_dtoa_r+0x384>
 8008ece:	4642      	mov	r2, r8
 8008ed0:	464b      	mov	r3, r9
 8008ed2:	4650      	mov	r0, sl
 8008ed4:	4659      	mov	r1, fp
 8008ed6:	f7f7 fcb9 	bl	800084c <__aeabi_ddiv>
 8008eda:	4682      	mov	sl, r0
 8008edc:	468b      	mov	fp, r1
 8008ede:	e028      	b.n	8008f32 <_dtoa_r+0x3d2>
 8008ee0:	2502      	movs	r5, #2
 8008ee2:	e7f2      	b.n	8008eca <_dtoa_r+0x36a>
 8008ee4:	07f9      	lsls	r1, r7, #31
 8008ee6:	d508      	bpl.n	8008efa <_dtoa_r+0x39a>
 8008ee8:	4640      	mov	r0, r8
 8008eea:	4649      	mov	r1, r9
 8008eec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ef0:	f7f7 fb82 	bl	80005f8 <__aeabi_dmul>
 8008ef4:	3501      	adds	r5, #1
 8008ef6:	4680      	mov	r8, r0
 8008ef8:	4689      	mov	r9, r1
 8008efa:	107f      	asrs	r7, r7, #1
 8008efc:	3608      	adds	r6, #8
 8008efe:	e7e5      	b.n	8008ecc <_dtoa_r+0x36c>
 8008f00:	f000 809b 	beq.w	800903a <_dtoa_r+0x4da>
 8008f04:	9b00      	ldr	r3, [sp, #0]
 8008f06:	4f9d      	ldr	r7, [pc, #628]	; (800917c <_dtoa_r+0x61c>)
 8008f08:	425e      	negs	r6, r3
 8008f0a:	4b9b      	ldr	r3, [pc, #620]	; (8009178 <_dtoa_r+0x618>)
 8008f0c:	f006 020f 	and.w	r2, r6, #15
 8008f10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f18:	ec51 0b19 	vmov	r0, r1, d9
 8008f1c:	f7f7 fb6c 	bl	80005f8 <__aeabi_dmul>
 8008f20:	1136      	asrs	r6, r6, #4
 8008f22:	4682      	mov	sl, r0
 8008f24:	468b      	mov	fp, r1
 8008f26:	2300      	movs	r3, #0
 8008f28:	2502      	movs	r5, #2
 8008f2a:	2e00      	cmp	r6, #0
 8008f2c:	d17a      	bne.n	8009024 <_dtoa_r+0x4c4>
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1d3      	bne.n	8008eda <_dtoa_r+0x37a>
 8008f32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f000 8082 	beq.w	800903e <_dtoa_r+0x4de>
 8008f3a:	4b91      	ldr	r3, [pc, #580]	; (8009180 <_dtoa_r+0x620>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	4650      	mov	r0, sl
 8008f40:	4659      	mov	r1, fp
 8008f42:	f7f7 fdcb 	bl	8000adc <__aeabi_dcmplt>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d079      	beq.n	800903e <_dtoa_r+0x4de>
 8008f4a:	9b03      	ldr	r3, [sp, #12]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d076      	beq.n	800903e <_dtoa_r+0x4de>
 8008f50:	9b02      	ldr	r3, [sp, #8]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	dd36      	ble.n	8008fc4 <_dtoa_r+0x464>
 8008f56:	9b00      	ldr	r3, [sp, #0]
 8008f58:	4650      	mov	r0, sl
 8008f5a:	4659      	mov	r1, fp
 8008f5c:	1e5f      	subs	r7, r3, #1
 8008f5e:	2200      	movs	r2, #0
 8008f60:	4b88      	ldr	r3, [pc, #544]	; (8009184 <_dtoa_r+0x624>)
 8008f62:	f7f7 fb49 	bl	80005f8 <__aeabi_dmul>
 8008f66:	9e02      	ldr	r6, [sp, #8]
 8008f68:	4682      	mov	sl, r0
 8008f6a:	468b      	mov	fp, r1
 8008f6c:	3501      	adds	r5, #1
 8008f6e:	4628      	mov	r0, r5
 8008f70:	f7f7 fad8 	bl	8000524 <__aeabi_i2d>
 8008f74:	4652      	mov	r2, sl
 8008f76:	465b      	mov	r3, fp
 8008f78:	f7f7 fb3e 	bl	80005f8 <__aeabi_dmul>
 8008f7c:	4b82      	ldr	r3, [pc, #520]	; (8009188 <_dtoa_r+0x628>)
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f7f7 f984 	bl	800028c <__adddf3>
 8008f84:	46d0      	mov	r8, sl
 8008f86:	46d9      	mov	r9, fp
 8008f88:	4682      	mov	sl, r0
 8008f8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008f8e:	2e00      	cmp	r6, #0
 8008f90:	d158      	bne.n	8009044 <_dtoa_r+0x4e4>
 8008f92:	4b7e      	ldr	r3, [pc, #504]	; (800918c <_dtoa_r+0x62c>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	4640      	mov	r0, r8
 8008f98:	4649      	mov	r1, r9
 8008f9a:	f7f7 f975 	bl	8000288 <__aeabi_dsub>
 8008f9e:	4652      	mov	r2, sl
 8008fa0:	465b      	mov	r3, fp
 8008fa2:	4680      	mov	r8, r0
 8008fa4:	4689      	mov	r9, r1
 8008fa6:	f7f7 fdb7 	bl	8000b18 <__aeabi_dcmpgt>
 8008faa:	2800      	cmp	r0, #0
 8008fac:	f040 8295 	bne.w	80094da <_dtoa_r+0x97a>
 8008fb0:	4652      	mov	r2, sl
 8008fb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008fb6:	4640      	mov	r0, r8
 8008fb8:	4649      	mov	r1, r9
 8008fba:	f7f7 fd8f 	bl	8000adc <__aeabi_dcmplt>
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	f040 8289 	bne.w	80094d6 <_dtoa_r+0x976>
 8008fc4:	ec5b ab19 	vmov	sl, fp, d9
 8008fc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f2c0 8148 	blt.w	8009260 <_dtoa_r+0x700>
 8008fd0:	9a00      	ldr	r2, [sp, #0]
 8008fd2:	2a0e      	cmp	r2, #14
 8008fd4:	f300 8144 	bgt.w	8009260 <_dtoa_r+0x700>
 8008fd8:	4b67      	ldr	r3, [pc, #412]	; (8009178 <_dtoa_r+0x618>)
 8008fda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fde:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f280 80d5 	bge.w	8009194 <_dtoa_r+0x634>
 8008fea:	9b03      	ldr	r3, [sp, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f300 80d1 	bgt.w	8009194 <_dtoa_r+0x634>
 8008ff2:	f040 826f 	bne.w	80094d4 <_dtoa_r+0x974>
 8008ff6:	4b65      	ldr	r3, [pc, #404]	; (800918c <_dtoa_r+0x62c>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	4640      	mov	r0, r8
 8008ffc:	4649      	mov	r1, r9
 8008ffe:	f7f7 fafb 	bl	80005f8 <__aeabi_dmul>
 8009002:	4652      	mov	r2, sl
 8009004:	465b      	mov	r3, fp
 8009006:	f7f7 fd7d 	bl	8000b04 <__aeabi_dcmpge>
 800900a:	9e03      	ldr	r6, [sp, #12]
 800900c:	4637      	mov	r7, r6
 800900e:	2800      	cmp	r0, #0
 8009010:	f040 8245 	bne.w	800949e <_dtoa_r+0x93e>
 8009014:	9d01      	ldr	r5, [sp, #4]
 8009016:	2331      	movs	r3, #49	; 0x31
 8009018:	f805 3b01 	strb.w	r3, [r5], #1
 800901c:	9b00      	ldr	r3, [sp, #0]
 800901e:	3301      	adds	r3, #1
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	e240      	b.n	80094a6 <_dtoa_r+0x946>
 8009024:	07f2      	lsls	r2, r6, #31
 8009026:	d505      	bpl.n	8009034 <_dtoa_r+0x4d4>
 8009028:	e9d7 2300 	ldrd	r2, r3, [r7]
 800902c:	f7f7 fae4 	bl	80005f8 <__aeabi_dmul>
 8009030:	3501      	adds	r5, #1
 8009032:	2301      	movs	r3, #1
 8009034:	1076      	asrs	r6, r6, #1
 8009036:	3708      	adds	r7, #8
 8009038:	e777      	b.n	8008f2a <_dtoa_r+0x3ca>
 800903a:	2502      	movs	r5, #2
 800903c:	e779      	b.n	8008f32 <_dtoa_r+0x3d2>
 800903e:	9f00      	ldr	r7, [sp, #0]
 8009040:	9e03      	ldr	r6, [sp, #12]
 8009042:	e794      	b.n	8008f6e <_dtoa_r+0x40e>
 8009044:	9901      	ldr	r1, [sp, #4]
 8009046:	4b4c      	ldr	r3, [pc, #304]	; (8009178 <_dtoa_r+0x618>)
 8009048:	4431      	add	r1, r6
 800904a:	910d      	str	r1, [sp, #52]	; 0x34
 800904c:	9908      	ldr	r1, [sp, #32]
 800904e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009052:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009056:	2900      	cmp	r1, #0
 8009058:	d043      	beq.n	80090e2 <_dtoa_r+0x582>
 800905a:	494d      	ldr	r1, [pc, #308]	; (8009190 <_dtoa_r+0x630>)
 800905c:	2000      	movs	r0, #0
 800905e:	f7f7 fbf5 	bl	800084c <__aeabi_ddiv>
 8009062:	4652      	mov	r2, sl
 8009064:	465b      	mov	r3, fp
 8009066:	f7f7 f90f 	bl	8000288 <__aeabi_dsub>
 800906a:	9d01      	ldr	r5, [sp, #4]
 800906c:	4682      	mov	sl, r0
 800906e:	468b      	mov	fp, r1
 8009070:	4649      	mov	r1, r9
 8009072:	4640      	mov	r0, r8
 8009074:	f7f7 fd70 	bl	8000b58 <__aeabi_d2iz>
 8009078:	4606      	mov	r6, r0
 800907a:	f7f7 fa53 	bl	8000524 <__aeabi_i2d>
 800907e:	4602      	mov	r2, r0
 8009080:	460b      	mov	r3, r1
 8009082:	4640      	mov	r0, r8
 8009084:	4649      	mov	r1, r9
 8009086:	f7f7 f8ff 	bl	8000288 <__aeabi_dsub>
 800908a:	3630      	adds	r6, #48	; 0x30
 800908c:	f805 6b01 	strb.w	r6, [r5], #1
 8009090:	4652      	mov	r2, sl
 8009092:	465b      	mov	r3, fp
 8009094:	4680      	mov	r8, r0
 8009096:	4689      	mov	r9, r1
 8009098:	f7f7 fd20 	bl	8000adc <__aeabi_dcmplt>
 800909c:	2800      	cmp	r0, #0
 800909e:	d163      	bne.n	8009168 <_dtoa_r+0x608>
 80090a0:	4642      	mov	r2, r8
 80090a2:	464b      	mov	r3, r9
 80090a4:	4936      	ldr	r1, [pc, #216]	; (8009180 <_dtoa_r+0x620>)
 80090a6:	2000      	movs	r0, #0
 80090a8:	f7f7 f8ee 	bl	8000288 <__aeabi_dsub>
 80090ac:	4652      	mov	r2, sl
 80090ae:	465b      	mov	r3, fp
 80090b0:	f7f7 fd14 	bl	8000adc <__aeabi_dcmplt>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	f040 80b5 	bne.w	8009224 <_dtoa_r+0x6c4>
 80090ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090bc:	429d      	cmp	r5, r3
 80090be:	d081      	beq.n	8008fc4 <_dtoa_r+0x464>
 80090c0:	4b30      	ldr	r3, [pc, #192]	; (8009184 <_dtoa_r+0x624>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	4650      	mov	r0, sl
 80090c6:	4659      	mov	r1, fp
 80090c8:	f7f7 fa96 	bl	80005f8 <__aeabi_dmul>
 80090cc:	4b2d      	ldr	r3, [pc, #180]	; (8009184 <_dtoa_r+0x624>)
 80090ce:	4682      	mov	sl, r0
 80090d0:	468b      	mov	fp, r1
 80090d2:	4640      	mov	r0, r8
 80090d4:	4649      	mov	r1, r9
 80090d6:	2200      	movs	r2, #0
 80090d8:	f7f7 fa8e 	bl	80005f8 <__aeabi_dmul>
 80090dc:	4680      	mov	r8, r0
 80090de:	4689      	mov	r9, r1
 80090e0:	e7c6      	b.n	8009070 <_dtoa_r+0x510>
 80090e2:	4650      	mov	r0, sl
 80090e4:	4659      	mov	r1, fp
 80090e6:	f7f7 fa87 	bl	80005f8 <__aeabi_dmul>
 80090ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090ec:	9d01      	ldr	r5, [sp, #4]
 80090ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80090f0:	4682      	mov	sl, r0
 80090f2:	468b      	mov	fp, r1
 80090f4:	4649      	mov	r1, r9
 80090f6:	4640      	mov	r0, r8
 80090f8:	f7f7 fd2e 	bl	8000b58 <__aeabi_d2iz>
 80090fc:	4606      	mov	r6, r0
 80090fe:	f7f7 fa11 	bl	8000524 <__aeabi_i2d>
 8009102:	3630      	adds	r6, #48	; 0x30
 8009104:	4602      	mov	r2, r0
 8009106:	460b      	mov	r3, r1
 8009108:	4640      	mov	r0, r8
 800910a:	4649      	mov	r1, r9
 800910c:	f7f7 f8bc 	bl	8000288 <__aeabi_dsub>
 8009110:	f805 6b01 	strb.w	r6, [r5], #1
 8009114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009116:	429d      	cmp	r5, r3
 8009118:	4680      	mov	r8, r0
 800911a:	4689      	mov	r9, r1
 800911c:	f04f 0200 	mov.w	r2, #0
 8009120:	d124      	bne.n	800916c <_dtoa_r+0x60c>
 8009122:	4b1b      	ldr	r3, [pc, #108]	; (8009190 <_dtoa_r+0x630>)
 8009124:	4650      	mov	r0, sl
 8009126:	4659      	mov	r1, fp
 8009128:	f7f7 f8b0 	bl	800028c <__adddf3>
 800912c:	4602      	mov	r2, r0
 800912e:	460b      	mov	r3, r1
 8009130:	4640      	mov	r0, r8
 8009132:	4649      	mov	r1, r9
 8009134:	f7f7 fcf0 	bl	8000b18 <__aeabi_dcmpgt>
 8009138:	2800      	cmp	r0, #0
 800913a:	d173      	bne.n	8009224 <_dtoa_r+0x6c4>
 800913c:	4652      	mov	r2, sl
 800913e:	465b      	mov	r3, fp
 8009140:	4913      	ldr	r1, [pc, #76]	; (8009190 <_dtoa_r+0x630>)
 8009142:	2000      	movs	r0, #0
 8009144:	f7f7 f8a0 	bl	8000288 <__aeabi_dsub>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	4640      	mov	r0, r8
 800914e:	4649      	mov	r1, r9
 8009150:	f7f7 fcc4 	bl	8000adc <__aeabi_dcmplt>
 8009154:	2800      	cmp	r0, #0
 8009156:	f43f af35 	beq.w	8008fc4 <_dtoa_r+0x464>
 800915a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800915c:	1e6b      	subs	r3, r5, #1
 800915e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009160:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009164:	2b30      	cmp	r3, #48	; 0x30
 8009166:	d0f8      	beq.n	800915a <_dtoa_r+0x5fa>
 8009168:	9700      	str	r7, [sp, #0]
 800916a:	e049      	b.n	8009200 <_dtoa_r+0x6a0>
 800916c:	4b05      	ldr	r3, [pc, #20]	; (8009184 <_dtoa_r+0x624>)
 800916e:	f7f7 fa43 	bl	80005f8 <__aeabi_dmul>
 8009172:	4680      	mov	r8, r0
 8009174:	4689      	mov	r9, r1
 8009176:	e7bd      	b.n	80090f4 <_dtoa_r+0x594>
 8009178:	0800ae00 	.word	0x0800ae00
 800917c:	0800add8 	.word	0x0800add8
 8009180:	3ff00000 	.word	0x3ff00000
 8009184:	40240000 	.word	0x40240000
 8009188:	401c0000 	.word	0x401c0000
 800918c:	40140000 	.word	0x40140000
 8009190:	3fe00000 	.word	0x3fe00000
 8009194:	9d01      	ldr	r5, [sp, #4]
 8009196:	4656      	mov	r6, sl
 8009198:	465f      	mov	r7, fp
 800919a:	4642      	mov	r2, r8
 800919c:	464b      	mov	r3, r9
 800919e:	4630      	mov	r0, r6
 80091a0:	4639      	mov	r1, r7
 80091a2:	f7f7 fb53 	bl	800084c <__aeabi_ddiv>
 80091a6:	f7f7 fcd7 	bl	8000b58 <__aeabi_d2iz>
 80091aa:	4682      	mov	sl, r0
 80091ac:	f7f7 f9ba 	bl	8000524 <__aeabi_i2d>
 80091b0:	4642      	mov	r2, r8
 80091b2:	464b      	mov	r3, r9
 80091b4:	f7f7 fa20 	bl	80005f8 <__aeabi_dmul>
 80091b8:	4602      	mov	r2, r0
 80091ba:	460b      	mov	r3, r1
 80091bc:	4630      	mov	r0, r6
 80091be:	4639      	mov	r1, r7
 80091c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80091c4:	f7f7 f860 	bl	8000288 <__aeabi_dsub>
 80091c8:	f805 6b01 	strb.w	r6, [r5], #1
 80091cc:	9e01      	ldr	r6, [sp, #4]
 80091ce:	9f03      	ldr	r7, [sp, #12]
 80091d0:	1bae      	subs	r6, r5, r6
 80091d2:	42b7      	cmp	r7, r6
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	d135      	bne.n	8009246 <_dtoa_r+0x6e6>
 80091da:	f7f7 f857 	bl	800028c <__adddf3>
 80091de:	4642      	mov	r2, r8
 80091e0:	464b      	mov	r3, r9
 80091e2:	4606      	mov	r6, r0
 80091e4:	460f      	mov	r7, r1
 80091e6:	f7f7 fc97 	bl	8000b18 <__aeabi_dcmpgt>
 80091ea:	b9d0      	cbnz	r0, 8009222 <_dtoa_r+0x6c2>
 80091ec:	4642      	mov	r2, r8
 80091ee:	464b      	mov	r3, r9
 80091f0:	4630      	mov	r0, r6
 80091f2:	4639      	mov	r1, r7
 80091f4:	f7f7 fc68 	bl	8000ac8 <__aeabi_dcmpeq>
 80091f8:	b110      	cbz	r0, 8009200 <_dtoa_r+0x6a0>
 80091fa:	f01a 0f01 	tst.w	sl, #1
 80091fe:	d110      	bne.n	8009222 <_dtoa_r+0x6c2>
 8009200:	4620      	mov	r0, r4
 8009202:	ee18 1a10 	vmov	r1, s16
 8009206:	f000 fbed 	bl	80099e4 <_Bfree>
 800920a:	2300      	movs	r3, #0
 800920c:	9800      	ldr	r0, [sp, #0]
 800920e:	702b      	strb	r3, [r5, #0]
 8009210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009212:	3001      	adds	r0, #1
 8009214:	6018      	str	r0, [r3, #0]
 8009216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009218:	2b00      	cmp	r3, #0
 800921a:	f43f acf1 	beq.w	8008c00 <_dtoa_r+0xa0>
 800921e:	601d      	str	r5, [r3, #0]
 8009220:	e4ee      	b.n	8008c00 <_dtoa_r+0xa0>
 8009222:	9f00      	ldr	r7, [sp, #0]
 8009224:	462b      	mov	r3, r5
 8009226:	461d      	mov	r5, r3
 8009228:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800922c:	2a39      	cmp	r2, #57	; 0x39
 800922e:	d106      	bne.n	800923e <_dtoa_r+0x6de>
 8009230:	9a01      	ldr	r2, [sp, #4]
 8009232:	429a      	cmp	r2, r3
 8009234:	d1f7      	bne.n	8009226 <_dtoa_r+0x6c6>
 8009236:	9901      	ldr	r1, [sp, #4]
 8009238:	2230      	movs	r2, #48	; 0x30
 800923a:	3701      	adds	r7, #1
 800923c:	700a      	strb	r2, [r1, #0]
 800923e:	781a      	ldrb	r2, [r3, #0]
 8009240:	3201      	adds	r2, #1
 8009242:	701a      	strb	r2, [r3, #0]
 8009244:	e790      	b.n	8009168 <_dtoa_r+0x608>
 8009246:	4ba6      	ldr	r3, [pc, #664]	; (80094e0 <_dtoa_r+0x980>)
 8009248:	2200      	movs	r2, #0
 800924a:	f7f7 f9d5 	bl	80005f8 <__aeabi_dmul>
 800924e:	2200      	movs	r2, #0
 8009250:	2300      	movs	r3, #0
 8009252:	4606      	mov	r6, r0
 8009254:	460f      	mov	r7, r1
 8009256:	f7f7 fc37 	bl	8000ac8 <__aeabi_dcmpeq>
 800925a:	2800      	cmp	r0, #0
 800925c:	d09d      	beq.n	800919a <_dtoa_r+0x63a>
 800925e:	e7cf      	b.n	8009200 <_dtoa_r+0x6a0>
 8009260:	9a08      	ldr	r2, [sp, #32]
 8009262:	2a00      	cmp	r2, #0
 8009264:	f000 80d7 	beq.w	8009416 <_dtoa_r+0x8b6>
 8009268:	9a06      	ldr	r2, [sp, #24]
 800926a:	2a01      	cmp	r2, #1
 800926c:	f300 80ba 	bgt.w	80093e4 <_dtoa_r+0x884>
 8009270:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009272:	2a00      	cmp	r2, #0
 8009274:	f000 80b2 	beq.w	80093dc <_dtoa_r+0x87c>
 8009278:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800927c:	9e07      	ldr	r6, [sp, #28]
 800927e:	9d04      	ldr	r5, [sp, #16]
 8009280:	9a04      	ldr	r2, [sp, #16]
 8009282:	441a      	add	r2, r3
 8009284:	9204      	str	r2, [sp, #16]
 8009286:	9a05      	ldr	r2, [sp, #20]
 8009288:	2101      	movs	r1, #1
 800928a:	441a      	add	r2, r3
 800928c:	4620      	mov	r0, r4
 800928e:	9205      	str	r2, [sp, #20]
 8009290:	f000 fc60 	bl	8009b54 <__i2b>
 8009294:	4607      	mov	r7, r0
 8009296:	2d00      	cmp	r5, #0
 8009298:	dd0c      	ble.n	80092b4 <_dtoa_r+0x754>
 800929a:	9b05      	ldr	r3, [sp, #20]
 800929c:	2b00      	cmp	r3, #0
 800929e:	dd09      	ble.n	80092b4 <_dtoa_r+0x754>
 80092a0:	42ab      	cmp	r3, r5
 80092a2:	9a04      	ldr	r2, [sp, #16]
 80092a4:	bfa8      	it	ge
 80092a6:	462b      	movge	r3, r5
 80092a8:	1ad2      	subs	r2, r2, r3
 80092aa:	9204      	str	r2, [sp, #16]
 80092ac:	9a05      	ldr	r2, [sp, #20]
 80092ae:	1aed      	subs	r5, r5, r3
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	9305      	str	r3, [sp, #20]
 80092b4:	9b07      	ldr	r3, [sp, #28]
 80092b6:	b31b      	cbz	r3, 8009300 <_dtoa_r+0x7a0>
 80092b8:	9b08      	ldr	r3, [sp, #32]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f000 80af 	beq.w	800941e <_dtoa_r+0x8be>
 80092c0:	2e00      	cmp	r6, #0
 80092c2:	dd13      	ble.n	80092ec <_dtoa_r+0x78c>
 80092c4:	4639      	mov	r1, r7
 80092c6:	4632      	mov	r2, r6
 80092c8:	4620      	mov	r0, r4
 80092ca:	f000 fd03 	bl	8009cd4 <__pow5mult>
 80092ce:	ee18 2a10 	vmov	r2, s16
 80092d2:	4601      	mov	r1, r0
 80092d4:	4607      	mov	r7, r0
 80092d6:	4620      	mov	r0, r4
 80092d8:	f000 fc52 	bl	8009b80 <__multiply>
 80092dc:	ee18 1a10 	vmov	r1, s16
 80092e0:	4680      	mov	r8, r0
 80092e2:	4620      	mov	r0, r4
 80092e4:	f000 fb7e 	bl	80099e4 <_Bfree>
 80092e8:	ee08 8a10 	vmov	s16, r8
 80092ec:	9b07      	ldr	r3, [sp, #28]
 80092ee:	1b9a      	subs	r2, r3, r6
 80092f0:	d006      	beq.n	8009300 <_dtoa_r+0x7a0>
 80092f2:	ee18 1a10 	vmov	r1, s16
 80092f6:	4620      	mov	r0, r4
 80092f8:	f000 fcec 	bl	8009cd4 <__pow5mult>
 80092fc:	ee08 0a10 	vmov	s16, r0
 8009300:	2101      	movs	r1, #1
 8009302:	4620      	mov	r0, r4
 8009304:	f000 fc26 	bl	8009b54 <__i2b>
 8009308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800930a:	2b00      	cmp	r3, #0
 800930c:	4606      	mov	r6, r0
 800930e:	f340 8088 	ble.w	8009422 <_dtoa_r+0x8c2>
 8009312:	461a      	mov	r2, r3
 8009314:	4601      	mov	r1, r0
 8009316:	4620      	mov	r0, r4
 8009318:	f000 fcdc 	bl	8009cd4 <__pow5mult>
 800931c:	9b06      	ldr	r3, [sp, #24]
 800931e:	2b01      	cmp	r3, #1
 8009320:	4606      	mov	r6, r0
 8009322:	f340 8081 	ble.w	8009428 <_dtoa_r+0x8c8>
 8009326:	f04f 0800 	mov.w	r8, #0
 800932a:	6933      	ldr	r3, [r6, #16]
 800932c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009330:	6918      	ldr	r0, [r3, #16]
 8009332:	f000 fbbf 	bl	8009ab4 <__hi0bits>
 8009336:	f1c0 0020 	rsb	r0, r0, #32
 800933a:	9b05      	ldr	r3, [sp, #20]
 800933c:	4418      	add	r0, r3
 800933e:	f010 001f 	ands.w	r0, r0, #31
 8009342:	f000 8092 	beq.w	800946a <_dtoa_r+0x90a>
 8009346:	f1c0 0320 	rsb	r3, r0, #32
 800934a:	2b04      	cmp	r3, #4
 800934c:	f340 808a 	ble.w	8009464 <_dtoa_r+0x904>
 8009350:	f1c0 001c 	rsb	r0, r0, #28
 8009354:	9b04      	ldr	r3, [sp, #16]
 8009356:	4403      	add	r3, r0
 8009358:	9304      	str	r3, [sp, #16]
 800935a:	9b05      	ldr	r3, [sp, #20]
 800935c:	4403      	add	r3, r0
 800935e:	4405      	add	r5, r0
 8009360:	9305      	str	r3, [sp, #20]
 8009362:	9b04      	ldr	r3, [sp, #16]
 8009364:	2b00      	cmp	r3, #0
 8009366:	dd07      	ble.n	8009378 <_dtoa_r+0x818>
 8009368:	ee18 1a10 	vmov	r1, s16
 800936c:	461a      	mov	r2, r3
 800936e:	4620      	mov	r0, r4
 8009370:	f000 fd0a 	bl	8009d88 <__lshift>
 8009374:	ee08 0a10 	vmov	s16, r0
 8009378:	9b05      	ldr	r3, [sp, #20]
 800937a:	2b00      	cmp	r3, #0
 800937c:	dd05      	ble.n	800938a <_dtoa_r+0x82a>
 800937e:	4631      	mov	r1, r6
 8009380:	461a      	mov	r2, r3
 8009382:	4620      	mov	r0, r4
 8009384:	f000 fd00 	bl	8009d88 <__lshift>
 8009388:	4606      	mov	r6, r0
 800938a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800938c:	2b00      	cmp	r3, #0
 800938e:	d06e      	beq.n	800946e <_dtoa_r+0x90e>
 8009390:	ee18 0a10 	vmov	r0, s16
 8009394:	4631      	mov	r1, r6
 8009396:	f000 fd67 	bl	8009e68 <__mcmp>
 800939a:	2800      	cmp	r0, #0
 800939c:	da67      	bge.n	800946e <_dtoa_r+0x90e>
 800939e:	9b00      	ldr	r3, [sp, #0]
 80093a0:	3b01      	subs	r3, #1
 80093a2:	ee18 1a10 	vmov	r1, s16
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	220a      	movs	r2, #10
 80093aa:	2300      	movs	r3, #0
 80093ac:	4620      	mov	r0, r4
 80093ae:	f000 fb3b 	bl	8009a28 <__multadd>
 80093b2:	9b08      	ldr	r3, [sp, #32]
 80093b4:	ee08 0a10 	vmov	s16, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 81b1 	beq.w	8009720 <_dtoa_r+0xbc0>
 80093be:	2300      	movs	r3, #0
 80093c0:	4639      	mov	r1, r7
 80093c2:	220a      	movs	r2, #10
 80093c4:	4620      	mov	r0, r4
 80093c6:	f000 fb2f 	bl	8009a28 <__multadd>
 80093ca:	9b02      	ldr	r3, [sp, #8]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	4607      	mov	r7, r0
 80093d0:	f300 808e 	bgt.w	80094f0 <_dtoa_r+0x990>
 80093d4:	9b06      	ldr	r3, [sp, #24]
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	dc51      	bgt.n	800947e <_dtoa_r+0x91e>
 80093da:	e089      	b.n	80094f0 <_dtoa_r+0x990>
 80093dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80093e2:	e74b      	b.n	800927c <_dtoa_r+0x71c>
 80093e4:	9b03      	ldr	r3, [sp, #12]
 80093e6:	1e5e      	subs	r6, r3, #1
 80093e8:	9b07      	ldr	r3, [sp, #28]
 80093ea:	42b3      	cmp	r3, r6
 80093ec:	bfbf      	itttt	lt
 80093ee:	9b07      	ldrlt	r3, [sp, #28]
 80093f0:	9607      	strlt	r6, [sp, #28]
 80093f2:	1af2      	sublt	r2, r6, r3
 80093f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80093f6:	bfb6      	itet	lt
 80093f8:	189b      	addlt	r3, r3, r2
 80093fa:	1b9e      	subge	r6, r3, r6
 80093fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80093fe:	9b03      	ldr	r3, [sp, #12]
 8009400:	bfb8      	it	lt
 8009402:	2600      	movlt	r6, #0
 8009404:	2b00      	cmp	r3, #0
 8009406:	bfb7      	itett	lt
 8009408:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800940c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009410:	1a9d      	sublt	r5, r3, r2
 8009412:	2300      	movlt	r3, #0
 8009414:	e734      	b.n	8009280 <_dtoa_r+0x720>
 8009416:	9e07      	ldr	r6, [sp, #28]
 8009418:	9d04      	ldr	r5, [sp, #16]
 800941a:	9f08      	ldr	r7, [sp, #32]
 800941c:	e73b      	b.n	8009296 <_dtoa_r+0x736>
 800941e:	9a07      	ldr	r2, [sp, #28]
 8009420:	e767      	b.n	80092f2 <_dtoa_r+0x792>
 8009422:	9b06      	ldr	r3, [sp, #24]
 8009424:	2b01      	cmp	r3, #1
 8009426:	dc18      	bgt.n	800945a <_dtoa_r+0x8fa>
 8009428:	f1ba 0f00 	cmp.w	sl, #0
 800942c:	d115      	bne.n	800945a <_dtoa_r+0x8fa>
 800942e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009432:	b993      	cbnz	r3, 800945a <_dtoa_r+0x8fa>
 8009434:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009438:	0d1b      	lsrs	r3, r3, #20
 800943a:	051b      	lsls	r3, r3, #20
 800943c:	b183      	cbz	r3, 8009460 <_dtoa_r+0x900>
 800943e:	9b04      	ldr	r3, [sp, #16]
 8009440:	3301      	adds	r3, #1
 8009442:	9304      	str	r3, [sp, #16]
 8009444:	9b05      	ldr	r3, [sp, #20]
 8009446:	3301      	adds	r3, #1
 8009448:	9305      	str	r3, [sp, #20]
 800944a:	f04f 0801 	mov.w	r8, #1
 800944e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009450:	2b00      	cmp	r3, #0
 8009452:	f47f af6a 	bne.w	800932a <_dtoa_r+0x7ca>
 8009456:	2001      	movs	r0, #1
 8009458:	e76f      	b.n	800933a <_dtoa_r+0x7da>
 800945a:	f04f 0800 	mov.w	r8, #0
 800945e:	e7f6      	b.n	800944e <_dtoa_r+0x8ee>
 8009460:	4698      	mov	r8, r3
 8009462:	e7f4      	b.n	800944e <_dtoa_r+0x8ee>
 8009464:	f43f af7d 	beq.w	8009362 <_dtoa_r+0x802>
 8009468:	4618      	mov	r0, r3
 800946a:	301c      	adds	r0, #28
 800946c:	e772      	b.n	8009354 <_dtoa_r+0x7f4>
 800946e:	9b03      	ldr	r3, [sp, #12]
 8009470:	2b00      	cmp	r3, #0
 8009472:	dc37      	bgt.n	80094e4 <_dtoa_r+0x984>
 8009474:	9b06      	ldr	r3, [sp, #24]
 8009476:	2b02      	cmp	r3, #2
 8009478:	dd34      	ble.n	80094e4 <_dtoa_r+0x984>
 800947a:	9b03      	ldr	r3, [sp, #12]
 800947c:	9302      	str	r3, [sp, #8]
 800947e:	9b02      	ldr	r3, [sp, #8]
 8009480:	b96b      	cbnz	r3, 800949e <_dtoa_r+0x93e>
 8009482:	4631      	mov	r1, r6
 8009484:	2205      	movs	r2, #5
 8009486:	4620      	mov	r0, r4
 8009488:	f000 face 	bl	8009a28 <__multadd>
 800948c:	4601      	mov	r1, r0
 800948e:	4606      	mov	r6, r0
 8009490:	ee18 0a10 	vmov	r0, s16
 8009494:	f000 fce8 	bl	8009e68 <__mcmp>
 8009498:	2800      	cmp	r0, #0
 800949a:	f73f adbb 	bgt.w	8009014 <_dtoa_r+0x4b4>
 800949e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094a0:	9d01      	ldr	r5, [sp, #4]
 80094a2:	43db      	mvns	r3, r3
 80094a4:	9300      	str	r3, [sp, #0]
 80094a6:	f04f 0800 	mov.w	r8, #0
 80094aa:	4631      	mov	r1, r6
 80094ac:	4620      	mov	r0, r4
 80094ae:	f000 fa99 	bl	80099e4 <_Bfree>
 80094b2:	2f00      	cmp	r7, #0
 80094b4:	f43f aea4 	beq.w	8009200 <_dtoa_r+0x6a0>
 80094b8:	f1b8 0f00 	cmp.w	r8, #0
 80094bc:	d005      	beq.n	80094ca <_dtoa_r+0x96a>
 80094be:	45b8      	cmp	r8, r7
 80094c0:	d003      	beq.n	80094ca <_dtoa_r+0x96a>
 80094c2:	4641      	mov	r1, r8
 80094c4:	4620      	mov	r0, r4
 80094c6:	f000 fa8d 	bl	80099e4 <_Bfree>
 80094ca:	4639      	mov	r1, r7
 80094cc:	4620      	mov	r0, r4
 80094ce:	f000 fa89 	bl	80099e4 <_Bfree>
 80094d2:	e695      	b.n	8009200 <_dtoa_r+0x6a0>
 80094d4:	2600      	movs	r6, #0
 80094d6:	4637      	mov	r7, r6
 80094d8:	e7e1      	b.n	800949e <_dtoa_r+0x93e>
 80094da:	9700      	str	r7, [sp, #0]
 80094dc:	4637      	mov	r7, r6
 80094de:	e599      	b.n	8009014 <_dtoa_r+0x4b4>
 80094e0:	40240000 	.word	0x40240000
 80094e4:	9b08      	ldr	r3, [sp, #32]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	f000 80ca 	beq.w	8009680 <_dtoa_r+0xb20>
 80094ec:	9b03      	ldr	r3, [sp, #12]
 80094ee:	9302      	str	r3, [sp, #8]
 80094f0:	2d00      	cmp	r5, #0
 80094f2:	dd05      	ble.n	8009500 <_dtoa_r+0x9a0>
 80094f4:	4639      	mov	r1, r7
 80094f6:	462a      	mov	r2, r5
 80094f8:	4620      	mov	r0, r4
 80094fa:	f000 fc45 	bl	8009d88 <__lshift>
 80094fe:	4607      	mov	r7, r0
 8009500:	f1b8 0f00 	cmp.w	r8, #0
 8009504:	d05b      	beq.n	80095be <_dtoa_r+0xa5e>
 8009506:	6879      	ldr	r1, [r7, #4]
 8009508:	4620      	mov	r0, r4
 800950a:	f000 fa2b 	bl	8009964 <_Balloc>
 800950e:	4605      	mov	r5, r0
 8009510:	b928      	cbnz	r0, 800951e <_dtoa_r+0x9be>
 8009512:	4b87      	ldr	r3, [pc, #540]	; (8009730 <_dtoa_r+0xbd0>)
 8009514:	4602      	mov	r2, r0
 8009516:	f240 21ea 	movw	r1, #746	; 0x2ea
 800951a:	f7ff bb3b 	b.w	8008b94 <_dtoa_r+0x34>
 800951e:	693a      	ldr	r2, [r7, #16]
 8009520:	3202      	adds	r2, #2
 8009522:	0092      	lsls	r2, r2, #2
 8009524:	f107 010c 	add.w	r1, r7, #12
 8009528:	300c      	adds	r0, #12
 800952a:	f000 fa0d 	bl	8009948 <memcpy>
 800952e:	2201      	movs	r2, #1
 8009530:	4629      	mov	r1, r5
 8009532:	4620      	mov	r0, r4
 8009534:	f000 fc28 	bl	8009d88 <__lshift>
 8009538:	9b01      	ldr	r3, [sp, #4]
 800953a:	f103 0901 	add.w	r9, r3, #1
 800953e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009542:	4413      	add	r3, r2
 8009544:	9305      	str	r3, [sp, #20]
 8009546:	f00a 0301 	and.w	r3, sl, #1
 800954a:	46b8      	mov	r8, r7
 800954c:	9304      	str	r3, [sp, #16]
 800954e:	4607      	mov	r7, r0
 8009550:	4631      	mov	r1, r6
 8009552:	ee18 0a10 	vmov	r0, s16
 8009556:	f7ff fa75 	bl	8008a44 <quorem>
 800955a:	4641      	mov	r1, r8
 800955c:	9002      	str	r0, [sp, #8]
 800955e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009562:	ee18 0a10 	vmov	r0, s16
 8009566:	f000 fc7f 	bl	8009e68 <__mcmp>
 800956a:	463a      	mov	r2, r7
 800956c:	9003      	str	r0, [sp, #12]
 800956e:	4631      	mov	r1, r6
 8009570:	4620      	mov	r0, r4
 8009572:	f000 fc95 	bl	8009ea0 <__mdiff>
 8009576:	68c2      	ldr	r2, [r0, #12]
 8009578:	f109 3bff 	add.w	fp, r9, #4294967295
 800957c:	4605      	mov	r5, r0
 800957e:	bb02      	cbnz	r2, 80095c2 <_dtoa_r+0xa62>
 8009580:	4601      	mov	r1, r0
 8009582:	ee18 0a10 	vmov	r0, s16
 8009586:	f000 fc6f 	bl	8009e68 <__mcmp>
 800958a:	4602      	mov	r2, r0
 800958c:	4629      	mov	r1, r5
 800958e:	4620      	mov	r0, r4
 8009590:	9207      	str	r2, [sp, #28]
 8009592:	f000 fa27 	bl	80099e4 <_Bfree>
 8009596:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800959a:	ea43 0102 	orr.w	r1, r3, r2
 800959e:	9b04      	ldr	r3, [sp, #16]
 80095a0:	430b      	orrs	r3, r1
 80095a2:	464d      	mov	r5, r9
 80095a4:	d10f      	bne.n	80095c6 <_dtoa_r+0xa66>
 80095a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095aa:	d02a      	beq.n	8009602 <_dtoa_r+0xaa2>
 80095ac:	9b03      	ldr	r3, [sp, #12]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	dd02      	ble.n	80095b8 <_dtoa_r+0xa58>
 80095b2:	9b02      	ldr	r3, [sp, #8]
 80095b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80095b8:	f88b a000 	strb.w	sl, [fp]
 80095bc:	e775      	b.n	80094aa <_dtoa_r+0x94a>
 80095be:	4638      	mov	r0, r7
 80095c0:	e7ba      	b.n	8009538 <_dtoa_r+0x9d8>
 80095c2:	2201      	movs	r2, #1
 80095c4:	e7e2      	b.n	800958c <_dtoa_r+0xa2c>
 80095c6:	9b03      	ldr	r3, [sp, #12]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	db04      	blt.n	80095d6 <_dtoa_r+0xa76>
 80095cc:	9906      	ldr	r1, [sp, #24]
 80095ce:	430b      	orrs	r3, r1
 80095d0:	9904      	ldr	r1, [sp, #16]
 80095d2:	430b      	orrs	r3, r1
 80095d4:	d122      	bne.n	800961c <_dtoa_r+0xabc>
 80095d6:	2a00      	cmp	r2, #0
 80095d8:	ddee      	ble.n	80095b8 <_dtoa_r+0xa58>
 80095da:	ee18 1a10 	vmov	r1, s16
 80095de:	2201      	movs	r2, #1
 80095e0:	4620      	mov	r0, r4
 80095e2:	f000 fbd1 	bl	8009d88 <__lshift>
 80095e6:	4631      	mov	r1, r6
 80095e8:	ee08 0a10 	vmov	s16, r0
 80095ec:	f000 fc3c 	bl	8009e68 <__mcmp>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	dc03      	bgt.n	80095fc <_dtoa_r+0xa9c>
 80095f4:	d1e0      	bne.n	80095b8 <_dtoa_r+0xa58>
 80095f6:	f01a 0f01 	tst.w	sl, #1
 80095fa:	d0dd      	beq.n	80095b8 <_dtoa_r+0xa58>
 80095fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009600:	d1d7      	bne.n	80095b2 <_dtoa_r+0xa52>
 8009602:	2339      	movs	r3, #57	; 0x39
 8009604:	f88b 3000 	strb.w	r3, [fp]
 8009608:	462b      	mov	r3, r5
 800960a:	461d      	mov	r5, r3
 800960c:	3b01      	subs	r3, #1
 800960e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009612:	2a39      	cmp	r2, #57	; 0x39
 8009614:	d071      	beq.n	80096fa <_dtoa_r+0xb9a>
 8009616:	3201      	adds	r2, #1
 8009618:	701a      	strb	r2, [r3, #0]
 800961a:	e746      	b.n	80094aa <_dtoa_r+0x94a>
 800961c:	2a00      	cmp	r2, #0
 800961e:	dd07      	ble.n	8009630 <_dtoa_r+0xad0>
 8009620:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009624:	d0ed      	beq.n	8009602 <_dtoa_r+0xaa2>
 8009626:	f10a 0301 	add.w	r3, sl, #1
 800962a:	f88b 3000 	strb.w	r3, [fp]
 800962e:	e73c      	b.n	80094aa <_dtoa_r+0x94a>
 8009630:	9b05      	ldr	r3, [sp, #20]
 8009632:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009636:	4599      	cmp	r9, r3
 8009638:	d047      	beq.n	80096ca <_dtoa_r+0xb6a>
 800963a:	ee18 1a10 	vmov	r1, s16
 800963e:	2300      	movs	r3, #0
 8009640:	220a      	movs	r2, #10
 8009642:	4620      	mov	r0, r4
 8009644:	f000 f9f0 	bl	8009a28 <__multadd>
 8009648:	45b8      	cmp	r8, r7
 800964a:	ee08 0a10 	vmov	s16, r0
 800964e:	f04f 0300 	mov.w	r3, #0
 8009652:	f04f 020a 	mov.w	r2, #10
 8009656:	4641      	mov	r1, r8
 8009658:	4620      	mov	r0, r4
 800965a:	d106      	bne.n	800966a <_dtoa_r+0xb0a>
 800965c:	f000 f9e4 	bl	8009a28 <__multadd>
 8009660:	4680      	mov	r8, r0
 8009662:	4607      	mov	r7, r0
 8009664:	f109 0901 	add.w	r9, r9, #1
 8009668:	e772      	b.n	8009550 <_dtoa_r+0x9f0>
 800966a:	f000 f9dd 	bl	8009a28 <__multadd>
 800966e:	4639      	mov	r1, r7
 8009670:	4680      	mov	r8, r0
 8009672:	2300      	movs	r3, #0
 8009674:	220a      	movs	r2, #10
 8009676:	4620      	mov	r0, r4
 8009678:	f000 f9d6 	bl	8009a28 <__multadd>
 800967c:	4607      	mov	r7, r0
 800967e:	e7f1      	b.n	8009664 <_dtoa_r+0xb04>
 8009680:	9b03      	ldr	r3, [sp, #12]
 8009682:	9302      	str	r3, [sp, #8]
 8009684:	9d01      	ldr	r5, [sp, #4]
 8009686:	ee18 0a10 	vmov	r0, s16
 800968a:	4631      	mov	r1, r6
 800968c:	f7ff f9da 	bl	8008a44 <quorem>
 8009690:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009694:	9b01      	ldr	r3, [sp, #4]
 8009696:	f805 ab01 	strb.w	sl, [r5], #1
 800969a:	1aea      	subs	r2, r5, r3
 800969c:	9b02      	ldr	r3, [sp, #8]
 800969e:	4293      	cmp	r3, r2
 80096a0:	dd09      	ble.n	80096b6 <_dtoa_r+0xb56>
 80096a2:	ee18 1a10 	vmov	r1, s16
 80096a6:	2300      	movs	r3, #0
 80096a8:	220a      	movs	r2, #10
 80096aa:	4620      	mov	r0, r4
 80096ac:	f000 f9bc 	bl	8009a28 <__multadd>
 80096b0:	ee08 0a10 	vmov	s16, r0
 80096b4:	e7e7      	b.n	8009686 <_dtoa_r+0xb26>
 80096b6:	9b02      	ldr	r3, [sp, #8]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	bfc8      	it	gt
 80096bc:	461d      	movgt	r5, r3
 80096be:	9b01      	ldr	r3, [sp, #4]
 80096c0:	bfd8      	it	le
 80096c2:	2501      	movle	r5, #1
 80096c4:	441d      	add	r5, r3
 80096c6:	f04f 0800 	mov.w	r8, #0
 80096ca:	ee18 1a10 	vmov	r1, s16
 80096ce:	2201      	movs	r2, #1
 80096d0:	4620      	mov	r0, r4
 80096d2:	f000 fb59 	bl	8009d88 <__lshift>
 80096d6:	4631      	mov	r1, r6
 80096d8:	ee08 0a10 	vmov	s16, r0
 80096dc:	f000 fbc4 	bl	8009e68 <__mcmp>
 80096e0:	2800      	cmp	r0, #0
 80096e2:	dc91      	bgt.n	8009608 <_dtoa_r+0xaa8>
 80096e4:	d102      	bne.n	80096ec <_dtoa_r+0xb8c>
 80096e6:	f01a 0f01 	tst.w	sl, #1
 80096ea:	d18d      	bne.n	8009608 <_dtoa_r+0xaa8>
 80096ec:	462b      	mov	r3, r5
 80096ee:	461d      	mov	r5, r3
 80096f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096f4:	2a30      	cmp	r2, #48	; 0x30
 80096f6:	d0fa      	beq.n	80096ee <_dtoa_r+0xb8e>
 80096f8:	e6d7      	b.n	80094aa <_dtoa_r+0x94a>
 80096fa:	9a01      	ldr	r2, [sp, #4]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d184      	bne.n	800960a <_dtoa_r+0xaaa>
 8009700:	9b00      	ldr	r3, [sp, #0]
 8009702:	3301      	adds	r3, #1
 8009704:	9300      	str	r3, [sp, #0]
 8009706:	2331      	movs	r3, #49	; 0x31
 8009708:	7013      	strb	r3, [r2, #0]
 800970a:	e6ce      	b.n	80094aa <_dtoa_r+0x94a>
 800970c:	4b09      	ldr	r3, [pc, #36]	; (8009734 <_dtoa_r+0xbd4>)
 800970e:	f7ff ba95 	b.w	8008c3c <_dtoa_r+0xdc>
 8009712:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009714:	2b00      	cmp	r3, #0
 8009716:	f47f aa6e 	bne.w	8008bf6 <_dtoa_r+0x96>
 800971a:	4b07      	ldr	r3, [pc, #28]	; (8009738 <_dtoa_r+0xbd8>)
 800971c:	f7ff ba8e 	b.w	8008c3c <_dtoa_r+0xdc>
 8009720:	9b02      	ldr	r3, [sp, #8]
 8009722:	2b00      	cmp	r3, #0
 8009724:	dcae      	bgt.n	8009684 <_dtoa_r+0xb24>
 8009726:	9b06      	ldr	r3, [sp, #24]
 8009728:	2b02      	cmp	r3, #2
 800972a:	f73f aea8 	bgt.w	800947e <_dtoa_r+0x91e>
 800972e:	e7a9      	b.n	8009684 <_dtoa_r+0xb24>
 8009730:	0800ad07 	.word	0x0800ad07
 8009734:	0800ac64 	.word	0x0800ac64
 8009738:	0800ac88 	.word	0x0800ac88

0800973c <std>:
 800973c:	2300      	movs	r3, #0
 800973e:	b510      	push	{r4, lr}
 8009740:	4604      	mov	r4, r0
 8009742:	e9c0 3300 	strd	r3, r3, [r0]
 8009746:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800974a:	6083      	str	r3, [r0, #8]
 800974c:	8181      	strh	r1, [r0, #12]
 800974e:	6643      	str	r3, [r0, #100]	; 0x64
 8009750:	81c2      	strh	r2, [r0, #14]
 8009752:	6183      	str	r3, [r0, #24]
 8009754:	4619      	mov	r1, r3
 8009756:	2208      	movs	r2, #8
 8009758:	305c      	adds	r0, #92	; 0x5c
 800975a:	f7fe fce9 	bl	8008130 <memset>
 800975e:	4b05      	ldr	r3, [pc, #20]	; (8009774 <std+0x38>)
 8009760:	6263      	str	r3, [r4, #36]	; 0x24
 8009762:	4b05      	ldr	r3, [pc, #20]	; (8009778 <std+0x3c>)
 8009764:	62a3      	str	r3, [r4, #40]	; 0x28
 8009766:	4b05      	ldr	r3, [pc, #20]	; (800977c <std+0x40>)
 8009768:	62e3      	str	r3, [r4, #44]	; 0x2c
 800976a:	4b05      	ldr	r3, [pc, #20]	; (8009780 <std+0x44>)
 800976c:	6224      	str	r4, [r4, #32]
 800976e:	6323      	str	r3, [r4, #48]	; 0x30
 8009770:	bd10      	pop	{r4, pc}
 8009772:	bf00      	nop
 8009774:	0800a52d 	.word	0x0800a52d
 8009778:	0800a54f 	.word	0x0800a54f
 800977c:	0800a587 	.word	0x0800a587
 8009780:	0800a5ab 	.word	0x0800a5ab

08009784 <_cleanup_r>:
 8009784:	4901      	ldr	r1, [pc, #4]	; (800978c <_cleanup_r+0x8>)
 8009786:	f000 b8af 	b.w	80098e8 <_fwalk_reent>
 800978a:	bf00      	nop
 800978c:	0800a8c1 	.word	0x0800a8c1

08009790 <__sfmoreglue>:
 8009790:	b570      	push	{r4, r5, r6, lr}
 8009792:	2268      	movs	r2, #104	; 0x68
 8009794:	1e4d      	subs	r5, r1, #1
 8009796:	4355      	muls	r5, r2
 8009798:	460e      	mov	r6, r1
 800979a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800979e:	f000 fce7 	bl	800a170 <_malloc_r>
 80097a2:	4604      	mov	r4, r0
 80097a4:	b140      	cbz	r0, 80097b8 <__sfmoreglue+0x28>
 80097a6:	2100      	movs	r1, #0
 80097a8:	e9c0 1600 	strd	r1, r6, [r0]
 80097ac:	300c      	adds	r0, #12
 80097ae:	60a0      	str	r0, [r4, #8]
 80097b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80097b4:	f7fe fcbc 	bl	8008130 <memset>
 80097b8:	4620      	mov	r0, r4
 80097ba:	bd70      	pop	{r4, r5, r6, pc}

080097bc <__sfp_lock_acquire>:
 80097bc:	4801      	ldr	r0, [pc, #4]	; (80097c4 <__sfp_lock_acquire+0x8>)
 80097be:	f000 b8b8 	b.w	8009932 <__retarget_lock_acquire_recursive>
 80097c2:	bf00      	nop
 80097c4:	20000a61 	.word	0x20000a61

080097c8 <__sfp_lock_release>:
 80097c8:	4801      	ldr	r0, [pc, #4]	; (80097d0 <__sfp_lock_release+0x8>)
 80097ca:	f000 b8b3 	b.w	8009934 <__retarget_lock_release_recursive>
 80097ce:	bf00      	nop
 80097d0:	20000a61 	.word	0x20000a61

080097d4 <__sinit_lock_acquire>:
 80097d4:	4801      	ldr	r0, [pc, #4]	; (80097dc <__sinit_lock_acquire+0x8>)
 80097d6:	f000 b8ac 	b.w	8009932 <__retarget_lock_acquire_recursive>
 80097da:	bf00      	nop
 80097dc:	20000a62 	.word	0x20000a62

080097e0 <__sinit_lock_release>:
 80097e0:	4801      	ldr	r0, [pc, #4]	; (80097e8 <__sinit_lock_release+0x8>)
 80097e2:	f000 b8a7 	b.w	8009934 <__retarget_lock_release_recursive>
 80097e6:	bf00      	nop
 80097e8:	20000a62 	.word	0x20000a62

080097ec <__sinit>:
 80097ec:	b510      	push	{r4, lr}
 80097ee:	4604      	mov	r4, r0
 80097f0:	f7ff fff0 	bl	80097d4 <__sinit_lock_acquire>
 80097f4:	69a3      	ldr	r3, [r4, #24]
 80097f6:	b11b      	cbz	r3, 8009800 <__sinit+0x14>
 80097f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097fc:	f7ff bff0 	b.w	80097e0 <__sinit_lock_release>
 8009800:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009804:	6523      	str	r3, [r4, #80]	; 0x50
 8009806:	4b13      	ldr	r3, [pc, #76]	; (8009854 <__sinit+0x68>)
 8009808:	4a13      	ldr	r2, [pc, #76]	; (8009858 <__sinit+0x6c>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	62a2      	str	r2, [r4, #40]	; 0x28
 800980e:	42a3      	cmp	r3, r4
 8009810:	bf04      	itt	eq
 8009812:	2301      	moveq	r3, #1
 8009814:	61a3      	streq	r3, [r4, #24]
 8009816:	4620      	mov	r0, r4
 8009818:	f000 f820 	bl	800985c <__sfp>
 800981c:	6060      	str	r0, [r4, #4]
 800981e:	4620      	mov	r0, r4
 8009820:	f000 f81c 	bl	800985c <__sfp>
 8009824:	60a0      	str	r0, [r4, #8]
 8009826:	4620      	mov	r0, r4
 8009828:	f000 f818 	bl	800985c <__sfp>
 800982c:	2200      	movs	r2, #0
 800982e:	60e0      	str	r0, [r4, #12]
 8009830:	2104      	movs	r1, #4
 8009832:	6860      	ldr	r0, [r4, #4]
 8009834:	f7ff ff82 	bl	800973c <std>
 8009838:	68a0      	ldr	r0, [r4, #8]
 800983a:	2201      	movs	r2, #1
 800983c:	2109      	movs	r1, #9
 800983e:	f7ff ff7d 	bl	800973c <std>
 8009842:	68e0      	ldr	r0, [r4, #12]
 8009844:	2202      	movs	r2, #2
 8009846:	2112      	movs	r1, #18
 8009848:	f7ff ff78 	bl	800973c <std>
 800984c:	2301      	movs	r3, #1
 800984e:	61a3      	str	r3, [r4, #24]
 8009850:	e7d2      	b.n	80097f8 <__sinit+0xc>
 8009852:	bf00      	nop
 8009854:	0800ac50 	.word	0x0800ac50
 8009858:	08009785 	.word	0x08009785

0800985c <__sfp>:
 800985c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985e:	4607      	mov	r7, r0
 8009860:	f7ff ffac 	bl	80097bc <__sfp_lock_acquire>
 8009864:	4b1e      	ldr	r3, [pc, #120]	; (80098e0 <__sfp+0x84>)
 8009866:	681e      	ldr	r6, [r3, #0]
 8009868:	69b3      	ldr	r3, [r6, #24]
 800986a:	b913      	cbnz	r3, 8009872 <__sfp+0x16>
 800986c:	4630      	mov	r0, r6
 800986e:	f7ff ffbd 	bl	80097ec <__sinit>
 8009872:	3648      	adds	r6, #72	; 0x48
 8009874:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009878:	3b01      	subs	r3, #1
 800987a:	d503      	bpl.n	8009884 <__sfp+0x28>
 800987c:	6833      	ldr	r3, [r6, #0]
 800987e:	b30b      	cbz	r3, 80098c4 <__sfp+0x68>
 8009880:	6836      	ldr	r6, [r6, #0]
 8009882:	e7f7      	b.n	8009874 <__sfp+0x18>
 8009884:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009888:	b9d5      	cbnz	r5, 80098c0 <__sfp+0x64>
 800988a:	4b16      	ldr	r3, [pc, #88]	; (80098e4 <__sfp+0x88>)
 800988c:	60e3      	str	r3, [r4, #12]
 800988e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009892:	6665      	str	r5, [r4, #100]	; 0x64
 8009894:	f000 f84c 	bl	8009930 <__retarget_lock_init_recursive>
 8009898:	f7ff ff96 	bl	80097c8 <__sfp_lock_release>
 800989c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80098a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80098a4:	6025      	str	r5, [r4, #0]
 80098a6:	61a5      	str	r5, [r4, #24]
 80098a8:	2208      	movs	r2, #8
 80098aa:	4629      	mov	r1, r5
 80098ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80098b0:	f7fe fc3e 	bl	8008130 <memset>
 80098b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80098b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80098bc:	4620      	mov	r0, r4
 80098be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098c0:	3468      	adds	r4, #104	; 0x68
 80098c2:	e7d9      	b.n	8009878 <__sfp+0x1c>
 80098c4:	2104      	movs	r1, #4
 80098c6:	4638      	mov	r0, r7
 80098c8:	f7ff ff62 	bl	8009790 <__sfmoreglue>
 80098cc:	4604      	mov	r4, r0
 80098ce:	6030      	str	r0, [r6, #0]
 80098d0:	2800      	cmp	r0, #0
 80098d2:	d1d5      	bne.n	8009880 <__sfp+0x24>
 80098d4:	f7ff ff78 	bl	80097c8 <__sfp_lock_release>
 80098d8:	230c      	movs	r3, #12
 80098da:	603b      	str	r3, [r7, #0]
 80098dc:	e7ee      	b.n	80098bc <__sfp+0x60>
 80098de:	bf00      	nop
 80098e0:	0800ac50 	.word	0x0800ac50
 80098e4:	ffff0001 	.word	0xffff0001

080098e8 <_fwalk_reent>:
 80098e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098ec:	4606      	mov	r6, r0
 80098ee:	4688      	mov	r8, r1
 80098f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80098f4:	2700      	movs	r7, #0
 80098f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098fa:	f1b9 0901 	subs.w	r9, r9, #1
 80098fe:	d505      	bpl.n	800990c <_fwalk_reent+0x24>
 8009900:	6824      	ldr	r4, [r4, #0]
 8009902:	2c00      	cmp	r4, #0
 8009904:	d1f7      	bne.n	80098f6 <_fwalk_reent+0xe>
 8009906:	4638      	mov	r0, r7
 8009908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800990c:	89ab      	ldrh	r3, [r5, #12]
 800990e:	2b01      	cmp	r3, #1
 8009910:	d907      	bls.n	8009922 <_fwalk_reent+0x3a>
 8009912:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009916:	3301      	adds	r3, #1
 8009918:	d003      	beq.n	8009922 <_fwalk_reent+0x3a>
 800991a:	4629      	mov	r1, r5
 800991c:	4630      	mov	r0, r6
 800991e:	47c0      	blx	r8
 8009920:	4307      	orrs	r7, r0
 8009922:	3568      	adds	r5, #104	; 0x68
 8009924:	e7e9      	b.n	80098fa <_fwalk_reent+0x12>
	...

08009928 <_localeconv_r>:
 8009928:	4800      	ldr	r0, [pc, #0]	; (800992c <_localeconv_r+0x4>)
 800992a:	4770      	bx	lr
 800992c:	20000160 	.word	0x20000160

08009930 <__retarget_lock_init_recursive>:
 8009930:	4770      	bx	lr

08009932 <__retarget_lock_acquire_recursive>:
 8009932:	4770      	bx	lr

08009934 <__retarget_lock_release_recursive>:
 8009934:	4770      	bx	lr
	...

08009938 <malloc>:
 8009938:	4b02      	ldr	r3, [pc, #8]	; (8009944 <malloc+0xc>)
 800993a:	4601      	mov	r1, r0
 800993c:	6818      	ldr	r0, [r3, #0]
 800993e:	f000 bc17 	b.w	800a170 <_malloc_r>
 8009942:	bf00      	nop
 8009944:	2000000c 	.word	0x2000000c

08009948 <memcpy>:
 8009948:	440a      	add	r2, r1
 800994a:	4291      	cmp	r1, r2
 800994c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009950:	d100      	bne.n	8009954 <memcpy+0xc>
 8009952:	4770      	bx	lr
 8009954:	b510      	push	{r4, lr}
 8009956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800995a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800995e:	4291      	cmp	r1, r2
 8009960:	d1f9      	bne.n	8009956 <memcpy+0xe>
 8009962:	bd10      	pop	{r4, pc}

08009964 <_Balloc>:
 8009964:	b570      	push	{r4, r5, r6, lr}
 8009966:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009968:	4604      	mov	r4, r0
 800996a:	460d      	mov	r5, r1
 800996c:	b976      	cbnz	r6, 800998c <_Balloc+0x28>
 800996e:	2010      	movs	r0, #16
 8009970:	f7ff ffe2 	bl	8009938 <malloc>
 8009974:	4602      	mov	r2, r0
 8009976:	6260      	str	r0, [r4, #36]	; 0x24
 8009978:	b920      	cbnz	r0, 8009984 <_Balloc+0x20>
 800997a:	4b18      	ldr	r3, [pc, #96]	; (80099dc <_Balloc+0x78>)
 800997c:	4818      	ldr	r0, [pc, #96]	; (80099e0 <_Balloc+0x7c>)
 800997e:	2166      	movs	r1, #102	; 0x66
 8009980:	f000 feea 	bl	800a758 <__assert_func>
 8009984:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009988:	6006      	str	r6, [r0, #0]
 800998a:	60c6      	str	r6, [r0, #12]
 800998c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800998e:	68f3      	ldr	r3, [r6, #12]
 8009990:	b183      	cbz	r3, 80099b4 <_Balloc+0x50>
 8009992:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009994:	68db      	ldr	r3, [r3, #12]
 8009996:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800999a:	b9b8      	cbnz	r0, 80099cc <_Balloc+0x68>
 800999c:	2101      	movs	r1, #1
 800999e:	fa01 f605 	lsl.w	r6, r1, r5
 80099a2:	1d72      	adds	r2, r6, #5
 80099a4:	0092      	lsls	r2, r2, #2
 80099a6:	4620      	mov	r0, r4
 80099a8:	f000 fb60 	bl	800a06c <_calloc_r>
 80099ac:	b160      	cbz	r0, 80099c8 <_Balloc+0x64>
 80099ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80099b2:	e00e      	b.n	80099d2 <_Balloc+0x6e>
 80099b4:	2221      	movs	r2, #33	; 0x21
 80099b6:	2104      	movs	r1, #4
 80099b8:	4620      	mov	r0, r4
 80099ba:	f000 fb57 	bl	800a06c <_calloc_r>
 80099be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099c0:	60f0      	str	r0, [r6, #12]
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d1e4      	bne.n	8009992 <_Balloc+0x2e>
 80099c8:	2000      	movs	r0, #0
 80099ca:	bd70      	pop	{r4, r5, r6, pc}
 80099cc:	6802      	ldr	r2, [r0, #0]
 80099ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80099d2:	2300      	movs	r3, #0
 80099d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80099d8:	e7f7      	b.n	80099ca <_Balloc+0x66>
 80099da:	bf00      	nop
 80099dc:	0800ac95 	.word	0x0800ac95
 80099e0:	0800ad78 	.word	0x0800ad78

080099e4 <_Bfree>:
 80099e4:	b570      	push	{r4, r5, r6, lr}
 80099e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099e8:	4605      	mov	r5, r0
 80099ea:	460c      	mov	r4, r1
 80099ec:	b976      	cbnz	r6, 8009a0c <_Bfree+0x28>
 80099ee:	2010      	movs	r0, #16
 80099f0:	f7ff ffa2 	bl	8009938 <malloc>
 80099f4:	4602      	mov	r2, r0
 80099f6:	6268      	str	r0, [r5, #36]	; 0x24
 80099f8:	b920      	cbnz	r0, 8009a04 <_Bfree+0x20>
 80099fa:	4b09      	ldr	r3, [pc, #36]	; (8009a20 <_Bfree+0x3c>)
 80099fc:	4809      	ldr	r0, [pc, #36]	; (8009a24 <_Bfree+0x40>)
 80099fe:	218a      	movs	r1, #138	; 0x8a
 8009a00:	f000 feaa 	bl	800a758 <__assert_func>
 8009a04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a08:	6006      	str	r6, [r0, #0]
 8009a0a:	60c6      	str	r6, [r0, #12]
 8009a0c:	b13c      	cbz	r4, 8009a1e <_Bfree+0x3a>
 8009a0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a10:	6862      	ldr	r2, [r4, #4]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a18:	6021      	str	r1, [r4, #0]
 8009a1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a1e:	bd70      	pop	{r4, r5, r6, pc}
 8009a20:	0800ac95 	.word	0x0800ac95
 8009a24:	0800ad78 	.word	0x0800ad78

08009a28 <__multadd>:
 8009a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a2c:	690d      	ldr	r5, [r1, #16]
 8009a2e:	4607      	mov	r7, r0
 8009a30:	460c      	mov	r4, r1
 8009a32:	461e      	mov	r6, r3
 8009a34:	f101 0c14 	add.w	ip, r1, #20
 8009a38:	2000      	movs	r0, #0
 8009a3a:	f8dc 3000 	ldr.w	r3, [ip]
 8009a3e:	b299      	uxth	r1, r3
 8009a40:	fb02 6101 	mla	r1, r2, r1, r6
 8009a44:	0c1e      	lsrs	r6, r3, #16
 8009a46:	0c0b      	lsrs	r3, r1, #16
 8009a48:	fb02 3306 	mla	r3, r2, r6, r3
 8009a4c:	b289      	uxth	r1, r1
 8009a4e:	3001      	adds	r0, #1
 8009a50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a54:	4285      	cmp	r5, r0
 8009a56:	f84c 1b04 	str.w	r1, [ip], #4
 8009a5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a5e:	dcec      	bgt.n	8009a3a <__multadd+0x12>
 8009a60:	b30e      	cbz	r6, 8009aa6 <__multadd+0x7e>
 8009a62:	68a3      	ldr	r3, [r4, #8]
 8009a64:	42ab      	cmp	r3, r5
 8009a66:	dc19      	bgt.n	8009a9c <__multadd+0x74>
 8009a68:	6861      	ldr	r1, [r4, #4]
 8009a6a:	4638      	mov	r0, r7
 8009a6c:	3101      	adds	r1, #1
 8009a6e:	f7ff ff79 	bl	8009964 <_Balloc>
 8009a72:	4680      	mov	r8, r0
 8009a74:	b928      	cbnz	r0, 8009a82 <__multadd+0x5a>
 8009a76:	4602      	mov	r2, r0
 8009a78:	4b0c      	ldr	r3, [pc, #48]	; (8009aac <__multadd+0x84>)
 8009a7a:	480d      	ldr	r0, [pc, #52]	; (8009ab0 <__multadd+0x88>)
 8009a7c:	21b5      	movs	r1, #181	; 0xb5
 8009a7e:	f000 fe6b 	bl	800a758 <__assert_func>
 8009a82:	6922      	ldr	r2, [r4, #16]
 8009a84:	3202      	adds	r2, #2
 8009a86:	f104 010c 	add.w	r1, r4, #12
 8009a8a:	0092      	lsls	r2, r2, #2
 8009a8c:	300c      	adds	r0, #12
 8009a8e:	f7ff ff5b 	bl	8009948 <memcpy>
 8009a92:	4621      	mov	r1, r4
 8009a94:	4638      	mov	r0, r7
 8009a96:	f7ff ffa5 	bl	80099e4 <_Bfree>
 8009a9a:	4644      	mov	r4, r8
 8009a9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009aa0:	3501      	adds	r5, #1
 8009aa2:	615e      	str	r6, [r3, #20]
 8009aa4:	6125      	str	r5, [r4, #16]
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aac:	0800ad07 	.word	0x0800ad07
 8009ab0:	0800ad78 	.word	0x0800ad78

08009ab4 <__hi0bits>:
 8009ab4:	0c03      	lsrs	r3, r0, #16
 8009ab6:	041b      	lsls	r3, r3, #16
 8009ab8:	b9d3      	cbnz	r3, 8009af0 <__hi0bits+0x3c>
 8009aba:	0400      	lsls	r0, r0, #16
 8009abc:	2310      	movs	r3, #16
 8009abe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009ac2:	bf04      	itt	eq
 8009ac4:	0200      	lsleq	r0, r0, #8
 8009ac6:	3308      	addeq	r3, #8
 8009ac8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009acc:	bf04      	itt	eq
 8009ace:	0100      	lsleq	r0, r0, #4
 8009ad0:	3304      	addeq	r3, #4
 8009ad2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009ad6:	bf04      	itt	eq
 8009ad8:	0080      	lsleq	r0, r0, #2
 8009ada:	3302      	addeq	r3, #2
 8009adc:	2800      	cmp	r0, #0
 8009ade:	db05      	blt.n	8009aec <__hi0bits+0x38>
 8009ae0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ae4:	f103 0301 	add.w	r3, r3, #1
 8009ae8:	bf08      	it	eq
 8009aea:	2320      	moveq	r3, #32
 8009aec:	4618      	mov	r0, r3
 8009aee:	4770      	bx	lr
 8009af0:	2300      	movs	r3, #0
 8009af2:	e7e4      	b.n	8009abe <__hi0bits+0xa>

08009af4 <__lo0bits>:
 8009af4:	6803      	ldr	r3, [r0, #0]
 8009af6:	f013 0207 	ands.w	r2, r3, #7
 8009afa:	4601      	mov	r1, r0
 8009afc:	d00b      	beq.n	8009b16 <__lo0bits+0x22>
 8009afe:	07da      	lsls	r2, r3, #31
 8009b00:	d423      	bmi.n	8009b4a <__lo0bits+0x56>
 8009b02:	0798      	lsls	r0, r3, #30
 8009b04:	bf49      	itett	mi
 8009b06:	085b      	lsrmi	r3, r3, #1
 8009b08:	089b      	lsrpl	r3, r3, #2
 8009b0a:	2001      	movmi	r0, #1
 8009b0c:	600b      	strmi	r3, [r1, #0]
 8009b0e:	bf5c      	itt	pl
 8009b10:	600b      	strpl	r3, [r1, #0]
 8009b12:	2002      	movpl	r0, #2
 8009b14:	4770      	bx	lr
 8009b16:	b298      	uxth	r0, r3
 8009b18:	b9a8      	cbnz	r0, 8009b46 <__lo0bits+0x52>
 8009b1a:	0c1b      	lsrs	r3, r3, #16
 8009b1c:	2010      	movs	r0, #16
 8009b1e:	b2da      	uxtb	r2, r3
 8009b20:	b90a      	cbnz	r2, 8009b26 <__lo0bits+0x32>
 8009b22:	3008      	adds	r0, #8
 8009b24:	0a1b      	lsrs	r3, r3, #8
 8009b26:	071a      	lsls	r2, r3, #28
 8009b28:	bf04      	itt	eq
 8009b2a:	091b      	lsreq	r3, r3, #4
 8009b2c:	3004      	addeq	r0, #4
 8009b2e:	079a      	lsls	r2, r3, #30
 8009b30:	bf04      	itt	eq
 8009b32:	089b      	lsreq	r3, r3, #2
 8009b34:	3002      	addeq	r0, #2
 8009b36:	07da      	lsls	r2, r3, #31
 8009b38:	d403      	bmi.n	8009b42 <__lo0bits+0x4e>
 8009b3a:	085b      	lsrs	r3, r3, #1
 8009b3c:	f100 0001 	add.w	r0, r0, #1
 8009b40:	d005      	beq.n	8009b4e <__lo0bits+0x5a>
 8009b42:	600b      	str	r3, [r1, #0]
 8009b44:	4770      	bx	lr
 8009b46:	4610      	mov	r0, r2
 8009b48:	e7e9      	b.n	8009b1e <__lo0bits+0x2a>
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	4770      	bx	lr
 8009b4e:	2020      	movs	r0, #32
 8009b50:	4770      	bx	lr
	...

08009b54 <__i2b>:
 8009b54:	b510      	push	{r4, lr}
 8009b56:	460c      	mov	r4, r1
 8009b58:	2101      	movs	r1, #1
 8009b5a:	f7ff ff03 	bl	8009964 <_Balloc>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	b928      	cbnz	r0, 8009b6e <__i2b+0x1a>
 8009b62:	4b05      	ldr	r3, [pc, #20]	; (8009b78 <__i2b+0x24>)
 8009b64:	4805      	ldr	r0, [pc, #20]	; (8009b7c <__i2b+0x28>)
 8009b66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009b6a:	f000 fdf5 	bl	800a758 <__assert_func>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	6144      	str	r4, [r0, #20]
 8009b72:	6103      	str	r3, [r0, #16]
 8009b74:	bd10      	pop	{r4, pc}
 8009b76:	bf00      	nop
 8009b78:	0800ad07 	.word	0x0800ad07
 8009b7c:	0800ad78 	.word	0x0800ad78

08009b80 <__multiply>:
 8009b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b84:	4691      	mov	r9, r2
 8009b86:	690a      	ldr	r2, [r1, #16]
 8009b88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	bfb8      	it	lt
 8009b90:	460b      	movlt	r3, r1
 8009b92:	460c      	mov	r4, r1
 8009b94:	bfbc      	itt	lt
 8009b96:	464c      	movlt	r4, r9
 8009b98:	4699      	movlt	r9, r3
 8009b9a:	6927      	ldr	r7, [r4, #16]
 8009b9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ba0:	68a3      	ldr	r3, [r4, #8]
 8009ba2:	6861      	ldr	r1, [r4, #4]
 8009ba4:	eb07 060a 	add.w	r6, r7, sl
 8009ba8:	42b3      	cmp	r3, r6
 8009baa:	b085      	sub	sp, #20
 8009bac:	bfb8      	it	lt
 8009bae:	3101      	addlt	r1, #1
 8009bb0:	f7ff fed8 	bl	8009964 <_Balloc>
 8009bb4:	b930      	cbnz	r0, 8009bc4 <__multiply+0x44>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	4b44      	ldr	r3, [pc, #272]	; (8009ccc <__multiply+0x14c>)
 8009bba:	4845      	ldr	r0, [pc, #276]	; (8009cd0 <__multiply+0x150>)
 8009bbc:	f240 115d 	movw	r1, #349	; 0x15d
 8009bc0:	f000 fdca 	bl	800a758 <__assert_func>
 8009bc4:	f100 0514 	add.w	r5, r0, #20
 8009bc8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009bcc:	462b      	mov	r3, r5
 8009bce:	2200      	movs	r2, #0
 8009bd0:	4543      	cmp	r3, r8
 8009bd2:	d321      	bcc.n	8009c18 <__multiply+0x98>
 8009bd4:	f104 0314 	add.w	r3, r4, #20
 8009bd8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009bdc:	f109 0314 	add.w	r3, r9, #20
 8009be0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009be4:	9202      	str	r2, [sp, #8]
 8009be6:	1b3a      	subs	r2, r7, r4
 8009be8:	3a15      	subs	r2, #21
 8009bea:	f022 0203 	bic.w	r2, r2, #3
 8009bee:	3204      	adds	r2, #4
 8009bf0:	f104 0115 	add.w	r1, r4, #21
 8009bf4:	428f      	cmp	r7, r1
 8009bf6:	bf38      	it	cc
 8009bf8:	2204      	movcc	r2, #4
 8009bfa:	9201      	str	r2, [sp, #4]
 8009bfc:	9a02      	ldr	r2, [sp, #8]
 8009bfe:	9303      	str	r3, [sp, #12]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d80c      	bhi.n	8009c1e <__multiply+0x9e>
 8009c04:	2e00      	cmp	r6, #0
 8009c06:	dd03      	ble.n	8009c10 <__multiply+0x90>
 8009c08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d05a      	beq.n	8009cc6 <__multiply+0x146>
 8009c10:	6106      	str	r6, [r0, #16]
 8009c12:	b005      	add	sp, #20
 8009c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c18:	f843 2b04 	str.w	r2, [r3], #4
 8009c1c:	e7d8      	b.n	8009bd0 <__multiply+0x50>
 8009c1e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c22:	f1ba 0f00 	cmp.w	sl, #0
 8009c26:	d024      	beq.n	8009c72 <__multiply+0xf2>
 8009c28:	f104 0e14 	add.w	lr, r4, #20
 8009c2c:	46a9      	mov	r9, r5
 8009c2e:	f04f 0c00 	mov.w	ip, #0
 8009c32:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009c36:	f8d9 1000 	ldr.w	r1, [r9]
 8009c3a:	fa1f fb82 	uxth.w	fp, r2
 8009c3e:	b289      	uxth	r1, r1
 8009c40:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c44:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009c48:	f8d9 2000 	ldr.w	r2, [r9]
 8009c4c:	4461      	add	r1, ip
 8009c4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c52:	fb0a c20b 	mla	r2, sl, fp, ip
 8009c56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c5a:	b289      	uxth	r1, r1
 8009c5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c60:	4577      	cmp	r7, lr
 8009c62:	f849 1b04 	str.w	r1, [r9], #4
 8009c66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c6a:	d8e2      	bhi.n	8009c32 <__multiply+0xb2>
 8009c6c:	9a01      	ldr	r2, [sp, #4]
 8009c6e:	f845 c002 	str.w	ip, [r5, r2]
 8009c72:	9a03      	ldr	r2, [sp, #12]
 8009c74:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c78:	3304      	adds	r3, #4
 8009c7a:	f1b9 0f00 	cmp.w	r9, #0
 8009c7e:	d020      	beq.n	8009cc2 <__multiply+0x142>
 8009c80:	6829      	ldr	r1, [r5, #0]
 8009c82:	f104 0c14 	add.w	ip, r4, #20
 8009c86:	46ae      	mov	lr, r5
 8009c88:	f04f 0a00 	mov.w	sl, #0
 8009c8c:	f8bc b000 	ldrh.w	fp, [ip]
 8009c90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009c94:	fb09 220b 	mla	r2, r9, fp, r2
 8009c98:	4492      	add	sl, r2
 8009c9a:	b289      	uxth	r1, r1
 8009c9c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009ca0:	f84e 1b04 	str.w	r1, [lr], #4
 8009ca4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009ca8:	f8be 1000 	ldrh.w	r1, [lr]
 8009cac:	0c12      	lsrs	r2, r2, #16
 8009cae:	fb09 1102 	mla	r1, r9, r2, r1
 8009cb2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009cb6:	4567      	cmp	r7, ip
 8009cb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009cbc:	d8e6      	bhi.n	8009c8c <__multiply+0x10c>
 8009cbe:	9a01      	ldr	r2, [sp, #4]
 8009cc0:	50a9      	str	r1, [r5, r2]
 8009cc2:	3504      	adds	r5, #4
 8009cc4:	e79a      	b.n	8009bfc <__multiply+0x7c>
 8009cc6:	3e01      	subs	r6, #1
 8009cc8:	e79c      	b.n	8009c04 <__multiply+0x84>
 8009cca:	bf00      	nop
 8009ccc:	0800ad07 	.word	0x0800ad07
 8009cd0:	0800ad78 	.word	0x0800ad78

08009cd4 <__pow5mult>:
 8009cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cd8:	4615      	mov	r5, r2
 8009cda:	f012 0203 	ands.w	r2, r2, #3
 8009cde:	4606      	mov	r6, r0
 8009ce0:	460f      	mov	r7, r1
 8009ce2:	d007      	beq.n	8009cf4 <__pow5mult+0x20>
 8009ce4:	4c25      	ldr	r4, [pc, #148]	; (8009d7c <__pow5mult+0xa8>)
 8009ce6:	3a01      	subs	r2, #1
 8009ce8:	2300      	movs	r3, #0
 8009cea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009cee:	f7ff fe9b 	bl	8009a28 <__multadd>
 8009cf2:	4607      	mov	r7, r0
 8009cf4:	10ad      	asrs	r5, r5, #2
 8009cf6:	d03d      	beq.n	8009d74 <__pow5mult+0xa0>
 8009cf8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009cfa:	b97c      	cbnz	r4, 8009d1c <__pow5mult+0x48>
 8009cfc:	2010      	movs	r0, #16
 8009cfe:	f7ff fe1b 	bl	8009938 <malloc>
 8009d02:	4602      	mov	r2, r0
 8009d04:	6270      	str	r0, [r6, #36]	; 0x24
 8009d06:	b928      	cbnz	r0, 8009d14 <__pow5mult+0x40>
 8009d08:	4b1d      	ldr	r3, [pc, #116]	; (8009d80 <__pow5mult+0xac>)
 8009d0a:	481e      	ldr	r0, [pc, #120]	; (8009d84 <__pow5mult+0xb0>)
 8009d0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d10:	f000 fd22 	bl	800a758 <__assert_func>
 8009d14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d18:	6004      	str	r4, [r0, #0]
 8009d1a:	60c4      	str	r4, [r0, #12]
 8009d1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d24:	b94c      	cbnz	r4, 8009d3a <__pow5mult+0x66>
 8009d26:	f240 2171 	movw	r1, #625	; 0x271
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	f7ff ff12 	bl	8009b54 <__i2b>
 8009d30:	2300      	movs	r3, #0
 8009d32:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d36:	4604      	mov	r4, r0
 8009d38:	6003      	str	r3, [r0, #0]
 8009d3a:	f04f 0900 	mov.w	r9, #0
 8009d3e:	07eb      	lsls	r3, r5, #31
 8009d40:	d50a      	bpl.n	8009d58 <__pow5mult+0x84>
 8009d42:	4639      	mov	r1, r7
 8009d44:	4622      	mov	r2, r4
 8009d46:	4630      	mov	r0, r6
 8009d48:	f7ff ff1a 	bl	8009b80 <__multiply>
 8009d4c:	4639      	mov	r1, r7
 8009d4e:	4680      	mov	r8, r0
 8009d50:	4630      	mov	r0, r6
 8009d52:	f7ff fe47 	bl	80099e4 <_Bfree>
 8009d56:	4647      	mov	r7, r8
 8009d58:	106d      	asrs	r5, r5, #1
 8009d5a:	d00b      	beq.n	8009d74 <__pow5mult+0xa0>
 8009d5c:	6820      	ldr	r0, [r4, #0]
 8009d5e:	b938      	cbnz	r0, 8009d70 <__pow5mult+0x9c>
 8009d60:	4622      	mov	r2, r4
 8009d62:	4621      	mov	r1, r4
 8009d64:	4630      	mov	r0, r6
 8009d66:	f7ff ff0b 	bl	8009b80 <__multiply>
 8009d6a:	6020      	str	r0, [r4, #0]
 8009d6c:	f8c0 9000 	str.w	r9, [r0]
 8009d70:	4604      	mov	r4, r0
 8009d72:	e7e4      	b.n	8009d3e <__pow5mult+0x6a>
 8009d74:	4638      	mov	r0, r7
 8009d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d7a:	bf00      	nop
 8009d7c:	0800aec8 	.word	0x0800aec8
 8009d80:	0800ac95 	.word	0x0800ac95
 8009d84:	0800ad78 	.word	0x0800ad78

08009d88 <__lshift>:
 8009d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d8c:	460c      	mov	r4, r1
 8009d8e:	6849      	ldr	r1, [r1, #4]
 8009d90:	6923      	ldr	r3, [r4, #16]
 8009d92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d96:	68a3      	ldr	r3, [r4, #8]
 8009d98:	4607      	mov	r7, r0
 8009d9a:	4691      	mov	r9, r2
 8009d9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009da0:	f108 0601 	add.w	r6, r8, #1
 8009da4:	42b3      	cmp	r3, r6
 8009da6:	db0b      	blt.n	8009dc0 <__lshift+0x38>
 8009da8:	4638      	mov	r0, r7
 8009daa:	f7ff fddb 	bl	8009964 <_Balloc>
 8009dae:	4605      	mov	r5, r0
 8009db0:	b948      	cbnz	r0, 8009dc6 <__lshift+0x3e>
 8009db2:	4602      	mov	r2, r0
 8009db4:	4b2a      	ldr	r3, [pc, #168]	; (8009e60 <__lshift+0xd8>)
 8009db6:	482b      	ldr	r0, [pc, #172]	; (8009e64 <__lshift+0xdc>)
 8009db8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009dbc:	f000 fccc 	bl	800a758 <__assert_func>
 8009dc0:	3101      	adds	r1, #1
 8009dc2:	005b      	lsls	r3, r3, #1
 8009dc4:	e7ee      	b.n	8009da4 <__lshift+0x1c>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	f100 0114 	add.w	r1, r0, #20
 8009dcc:	f100 0210 	add.w	r2, r0, #16
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	4553      	cmp	r3, sl
 8009dd4:	db37      	blt.n	8009e46 <__lshift+0xbe>
 8009dd6:	6920      	ldr	r0, [r4, #16]
 8009dd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ddc:	f104 0314 	add.w	r3, r4, #20
 8009de0:	f019 091f 	ands.w	r9, r9, #31
 8009de4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009de8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009dec:	d02f      	beq.n	8009e4e <__lshift+0xc6>
 8009dee:	f1c9 0e20 	rsb	lr, r9, #32
 8009df2:	468a      	mov	sl, r1
 8009df4:	f04f 0c00 	mov.w	ip, #0
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	fa02 f209 	lsl.w	r2, r2, r9
 8009dfe:	ea42 020c 	orr.w	r2, r2, ip
 8009e02:	f84a 2b04 	str.w	r2, [sl], #4
 8009e06:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e0a:	4298      	cmp	r0, r3
 8009e0c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009e10:	d8f2      	bhi.n	8009df8 <__lshift+0x70>
 8009e12:	1b03      	subs	r3, r0, r4
 8009e14:	3b15      	subs	r3, #21
 8009e16:	f023 0303 	bic.w	r3, r3, #3
 8009e1a:	3304      	adds	r3, #4
 8009e1c:	f104 0215 	add.w	r2, r4, #21
 8009e20:	4290      	cmp	r0, r2
 8009e22:	bf38      	it	cc
 8009e24:	2304      	movcc	r3, #4
 8009e26:	f841 c003 	str.w	ip, [r1, r3]
 8009e2a:	f1bc 0f00 	cmp.w	ip, #0
 8009e2e:	d001      	beq.n	8009e34 <__lshift+0xac>
 8009e30:	f108 0602 	add.w	r6, r8, #2
 8009e34:	3e01      	subs	r6, #1
 8009e36:	4638      	mov	r0, r7
 8009e38:	612e      	str	r6, [r5, #16]
 8009e3a:	4621      	mov	r1, r4
 8009e3c:	f7ff fdd2 	bl	80099e4 <_Bfree>
 8009e40:	4628      	mov	r0, r5
 8009e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e46:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	e7c1      	b.n	8009dd2 <__lshift+0x4a>
 8009e4e:	3904      	subs	r1, #4
 8009e50:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e54:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e58:	4298      	cmp	r0, r3
 8009e5a:	d8f9      	bhi.n	8009e50 <__lshift+0xc8>
 8009e5c:	e7ea      	b.n	8009e34 <__lshift+0xac>
 8009e5e:	bf00      	nop
 8009e60:	0800ad07 	.word	0x0800ad07
 8009e64:	0800ad78 	.word	0x0800ad78

08009e68 <__mcmp>:
 8009e68:	b530      	push	{r4, r5, lr}
 8009e6a:	6902      	ldr	r2, [r0, #16]
 8009e6c:	690c      	ldr	r4, [r1, #16]
 8009e6e:	1b12      	subs	r2, r2, r4
 8009e70:	d10e      	bne.n	8009e90 <__mcmp+0x28>
 8009e72:	f100 0314 	add.w	r3, r0, #20
 8009e76:	3114      	adds	r1, #20
 8009e78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009e7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e88:	42a5      	cmp	r5, r4
 8009e8a:	d003      	beq.n	8009e94 <__mcmp+0x2c>
 8009e8c:	d305      	bcc.n	8009e9a <__mcmp+0x32>
 8009e8e:	2201      	movs	r2, #1
 8009e90:	4610      	mov	r0, r2
 8009e92:	bd30      	pop	{r4, r5, pc}
 8009e94:	4283      	cmp	r3, r0
 8009e96:	d3f3      	bcc.n	8009e80 <__mcmp+0x18>
 8009e98:	e7fa      	b.n	8009e90 <__mcmp+0x28>
 8009e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e9e:	e7f7      	b.n	8009e90 <__mcmp+0x28>

08009ea0 <__mdiff>:
 8009ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea4:	460c      	mov	r4, r1
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	4611      	mov	r1, r2
 8009eaa:	4620      	mov	r0, r4
 8009eac:	4690      	mov	r8, r2
 8009eae:	f7ff ffdb 	bl	8009e68 <__mcmp>
 8009eb2:	1e05      	subs	r5, r0, #0
 8009eb4:	d110      	bne.n	8009ed8 <__mdiff+0x38>
 8009eb6:	4629      	mov	r1, r5
 8009eb8:	4630      	mov	r0, r6
 8009eba:	f7ff fd53 	bl	8009964 <_Balloc>
 8009ebe:	b930      	cbnz	r0, 8009ece <__mdiff+0x2e>
 8009ec0:	4b3a      	ldr	r3, [pc, #232]	; (8009fac <__mdiff+0x10c>)
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	f240 2132 	movw	r1, #562	; 0x232
 8009ec8:	4839      	ldr	r0, [pc, #228]	; (8009fb0 <__mdiff+0x110>)
 8009eca:	f000 fc45 	bl	800a758 <__assert_func>
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ed4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed8:	bfa4      	itt	ge
 8009eda:	4643      	movge	r3, r8
 8009edc:	46a0      	movge	r8, r4
 8009ede:	4630      	mov	r0, r6
 8009ee0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009ee4:	bfa6      	itte	ge
 8009ee6:	461c      	movge	r4, r3
 8009ee8:	2500      	movge	r5, #0
 8009eea:	2501      	movlt	r5, #1
 8009eec:	f7ff fd3a 	bl	8009964 <_Balloc>
 8009ef0:	b920      	cbnz	r0, 8009efc <__mdiff+0x5c>
 8009ef2:	4b2e      	ldr	r3, [pc, #184]	; (8009fac <__mdiff+0x10c>)
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009efa:	e7e5      	b.n	8009ec8 <__mdiff+0x28>
 8009efc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f00:	6926      	ldr	r6, [r4, #16]
 8009f02:	60c5      	str	r5, [r0, #12]
 8009f04:	f104 0914 	add.w	r9, r4, #20
 8009f08:	f108 0514 	add.w	r5, r8, #20
 8009f0c:	f100 0e14 	add.w	lr, r0, #20
 8009f10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f18:	f108 0210 	add.w	r2, r8, #16
 8009f1c:	46f2      	mov	sl, lr
 8009f1e:	2100      	movs	r1, #0
 8009f20:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f28:	fa1f f883 	uxth.w	r8, r3
 8009f2c:	fa11 f18b 	uxtah	r1, r1, fp
 8009f30:	0c1b      	lsrs	r3, r3, #16
 8009f32:	eba1 0808 	sub.w	r8, r1, r8
 8009f36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f3a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f3e:	fa1f f888 	uxth.w	r8, r8
 8009f42:	1419      	asrs	r1, r3, #16
 8009f44:	454e      	cmp	r6, r9
 8009f46:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f4a:	f84a 3b04 	str.w	r3, [sl], #4
 8009f4e:	d8e7      	bhi.n	8009f20 <__mdiff+0x80>
 8009f50:	1b33      	subs	r3, r6, r4
 8009f52:	3b15      	subs	r3, #21
 8009f54:	f023 0303 	bic.w	r3, r3, #3
 8009f58:	3304      	adds	r3, #4
 8009f5a:	3415      	adds	r4, #21
 8009f5c:	42a6      	cmp	r6, r4
 8009f5e:	bf38      	it	cc
 8009f60:	2304      	movcc	r3, #4
 8009f62:	441d      	add	r5, r3
 8009f64:	4473      	add	r3, lr
 8009f66:	469e      	mov	lr, r3
 8009f68:	462e      	mov	r6, r5
 8009f6a:	4566      	cmp	r6, ip
 8009f6c:	d30e      	bcc.n	8009f8c <__mdiff+0xec>
 8009f6e:	f10c 0203 	add.w	r2, ip, #3
 8009f72:	1b52      	subs	r2, r2, r5
 8009f74:	f022 0203 	bic.w	r2, r2, #3
 8009f78:	3d03      	subs	r5, #3
 8009f7a:	45ac      	cmp	ip, r5
 8009f7c:	bf38      	it	cc
 8009f7e:	2200      	movcc	r2, #0
 8009f80:	441a      	add	r2, r3
 8009f82:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009f86:	b17b      	cbz	r3, 8009fa8 <__mdiff+0x108>
 8009f88:	6107      	str	r7, [r0, #16]
 8009f8a:	e7a3      	b.n	8009ed4 <__mdiff+0x34>
 8009f8c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009f90:	fa11 f288 	uxtah	r2, r1, r8
 8009f94:	1414      	asrs	r4, r2, #16
 8009f96:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009f9a:	b292      	uxth	r2, r2
 8009f9c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009fa0:	f84e 2b04 	str.w	r2, [lr], #4
 8009fa4:	1421      	asrs	r1, r4, #16
 8009fa6:	e7e0      	b.n	8009f6a <__mdiff+0xca>
 8009fa8:	3f01      	subs	r7, #1
 8009faa:	e7ea      	b.n	8009f82 <__mdiff+0xe2>
 8009fac:	0800ad07 	.word	0x0800ad07
 8009fb0:	0800ad78 	.word	0x0800ad78

08009fb4 <__d2b>:
 8009fb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009fb8:	4689      	mov	r9, r1
 8009fba:	2101      	movs	r1, #1
 8009fbc:	ec57 6b10 	vmov	r6, r7, d0
 8009fc0:	4690      	mov	r8, r2
 8009fc2:	f7ff fccf 	bl	8009964 <_Balloc>
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	b930      	cbnz	r0, 8009fd8 <__d2b+0x24>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	4b25      	ldr	r3, [pc, #148]	; (800a064 <__d2b+0xb0>)
 8009fce:	4826      	ldr	r0, [pc, #152]	; (800a068 <__d2b+0xb4>)
 8009fd0:	f240 310a 	movw	r1, #778	; 0x30a
 8009fd4:	f000 fbc0 	bl	800a758 <__assert_func>
 8009fd8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009fdc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009fe0:	bb35      	cbnz	r5, 800a030 <__d2b+0x7c>
 8009fe2:	2e00      	cmp	r6, #0
 8009fe4:	9301      	str	r3, [sp, #4]
 8009fe6:	d028      	beq.n	800a03a <__d2b+0x86>
 8009fe8:	4668      	mov	r0, sp
 8009fea:	9600      	str	r6, [sp, #0]
 8009fec:	f7ff fd82 	bl	8009af4 <__lo0bits>
 8009ff0:	9900      	ldr	r1, [sp, #0]
 8009ff2:	b300      	cbz	r0, 800a036 <__d2b+0x82>
 8009ff4:	9a01      	ldr	r2, [sp, #4]
 8009ff6:	f1c0 0320 	rsb	r3, r0, #32
 8009ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8009ffe:	430b      	orrs	r3, r1
 800a000:	40c2      	lsrs	r2, r0
 800a002:	6163      	str	r3, [r4, #20]
 800a004:	9201      	str	r2, [sp, #4]
 800a006:	9b01      	ldr	r3, [sp, #4]
 800a008:	61a3      	str	r3, [r4, #24]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	bf14      	ite	ne
 800a00e:	2202      	movne	r2, #2
 800a010:	2201      	moveq	r2, #1
 800a012:	6122      	str	r2, [r4, #16]
 800a014:	b1d5      	cbz	r5, 800a04c <__d2b+0x98>
 800a016:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a01a:	4405      	add	r5, r0
 800a01c:	f8c9 5000 	str.w	r5, [r9]
 800a020:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a024:	f8c8 0000 	str.w	r0, [r8]
 800a028:	4620      	mov	r0, r4
 800a02a:	b003      	add	sp, #12
 800a02c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a030:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a034:	e7d5      	b.n	8009fe2 <__d2b+0x2e>
 800a036:	6161      	str	r1, [r4, #20]
 800a038:	e7e5      	b.n	800a006 <__d2b+0x52>
 800a03a:	a801      	add	r0, sp, #4
 800a03c:	f7ff fd5a 	bl	8009af4 <__lo0bits>
 800a040:	9b01      	ldr	r3, [sp, #4]
 800a042:	6163      	str	r3, [r4, #20]
 800a044:	2201      	movs	r2, #1
 800a046:	6122      	str	r2, [r4, #16]
 800a048:	3020      	adds	r0, #32
 800a04a:	e7e3      	b.n	800a014 <__d2b+0x60>
 800a04c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a050:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a054:	f8c9 0000 	str.w	r0, [r9]
 800a058:	6918      	ldr	r0, [r3, #16]
 800a05a:	f7ff fd2b 	bl	8009ab4 <__hi0bits>
 800a05e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a062:	e7df      	b.n	800a024 <__d2b+0x70>
 800a064:	0800ad07 	.word	0x0800ad07
 800a068:	0800ad78 	.word	0x0800ad78

0800a06c <_calloc_r>:
 800a06c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a06e:	fba1 2402 	umull	r2, r4, r1, r2
 800a072:	b94c      	cbnz	r4, 800a088 <_calloc_r+0x1c>
 800a074:	4611      	mov	r1, r2
 800a076:	9201      	str	r2, [sp, #4]
 800a078:	f000 f87a 	bl	800a170 <_malloc_r>
 800a07c:	9a01      	ldr	r2, [sp, #4]
 800a07e:	4605      	mov	r5, r0
 800a080:	b930      	cbnz	r0, 800a090 <_calloc_r+0x24>
 800a082:	4628      	mov	r0, r5
 800a084:	b003      	add	sp, #12
 800a086:	bd30      	pop	{r4, r5, pc}
 800a088:	220c      	movs	r2, #12
 800a08a:	6002      	str	r2, [r0, #0]
 800a08c:	2500      	movs	r5, #0
 800a08e:	e7f8      	b.n	800a082 <_calloc_r+0x16>
 800a090:	4621      	mov	r1, r4
 800a092:	f7fe f84d 	bl	8008130 <memset>
 800a096:	e7f4      	b.n	800a082 <_calloc_r+0x16>

0800a098 <_free_r>:
 800a098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a09a:	2900      	cmp	r1, #0
 800a09c:	d044      	beq.n	800a128 <_free_r+0x90>
 800a09e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0a2:	9001      	str	r0, [sp, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f1a1 0404 	sub.w	r4, r1, #4
 800a0aa:	bfb8      	it	lt
 800a0ac:	18e4      	addlt	r4, r4, r3
 800a0ae:	f000 fcdf 	bl	800aa70 <__malloc_lock>
 800a0b2:	4a1e      	ldr	r2, [pc, #120]	; (800a12c <_free_r+0x94>)
 800a0b4:	9801      	ldr	r0, [sp, #4]
 800a0b6:	6813      	ldr	r3, [r2, #0]
 800a0b8:	b933      	cbnz	r3, 800a0c8 <_free_r+0x30>
 800a0ba:	6063      	str	r3, [r4, #4]
 800a0bc:	6014      	str	r4, [r2, #0]
 800a0be:	b003      	add	sp, #12
 800a0c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0c4:	f000 bcda 	b.w	800aa7c <__malloc_unlock>
 800a0c8:	42a3      	cmp	r3, r4
 800a0ca:	d908      	bls.n	800a0de <_free_r+0x46>
 800a0cc:	6825      	ldr	r5, [r4, #0]
 800a0ce:	1961      	adds	r1, r4, r5
 800a0d0:	428b      	cmp	r3, r1
 800a0d2:	bf01      	itttt	eq
 800a0d4:	6819      	ldreq	r1, [r3, #0]
 800a0d6:	685b      	ldreq	r3, [r3, #4]
 800a0d8:	1949      	addeq	r1, r1, r5
 800a0da:	6021      	streq	r1, [r4, #0]
 800a0dc:	e7ed      	b.n	800a0ba <_free_r+0x22>
 800a0de:	461a      	mov	r2, r3
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	b10b      	cbz	r3, 800a0e8 <_free_r+0x50>
 800a0e4:	42a3      	cmp	r3, r4
 800a0e6:	d9fa      	bls.n	800a0de <_free_r+0x46>
 800a0e8:	6811      	ldr	r1, [r2, #0]
 800a0ea:	1855      	adds	r5, r2, r1
 800a0ec:	42a5      	cmp	r5, r4
 800a0ee:	d10b      	bne.n	800a108 <_free_r+0x70>
 800a0f0:	6824      	ldr	r4, [r4, #0]
 800a0f2:	4421      	add	r1, r4
 800a0f4:	1854      	adds	r4, r2, r1
 800a0f6:	42a3      	cmp	r3, r4
 800a0f8:	6011      	str	r1, [r2, #0]
 800a0fa:	d1e0      	bne.n	800a0be <_free_r+0x26>
 800a0fc:	681c      	ldr	r4, [r3, #0]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	6053      	str	r3, [r2, #4]
 800a102:	4421      	add	r1, r4
 800a104:	6011      	str	r1, [r2, #0]
 800a106:	e7da      	b.n	800a0be <_free_r+0x26>
 800a108:	d902      	bls.n	800a110 <_free_r+0x78>
 800a10a:	230c      	movs	r3, #12
 800a10c:	6003      	str	r3, [r0, #0]
 800a10e:	e7d6      	b.n	800a0be <_free_r+0x26>
 800a110:	6825      	ldr	r5, [r4, #0]
 800a112:	1961      	adds	r1, r4, r5
 800a114:	428b      	cmp	r3, r1
 800a116:	bf04      	itt	eq
 800a118:	6819      	ldreq	r1, [r3, #0]
 800a11a:	685b      	ldreq	r3, [r3, #4]
 800a11c:	6063      	str	r3, [r4, #4]
 800a11e:	bf04      	itt	eq
 800a120:	1949      	addeq	r1, r1, r5
 800a122:	6021      	streq	r1, [r4, #0]
 800a124:	6054      	str	r4, [r2, #4]
 800a126:	e7ca      	b.n	800a0be <_free_r+0x26>
 800a128:	b003      	add	sp, #12
 800a12a:	bd30      	pop	{r4, r5, pc}
 800a12c:	20000a64 	.word	0x20000a64

0800a130 <sbrk_aligned>:
 800a130:	b570      	push	{r4, r5, r6, lr}
 800a132:	4e0e      	ldr	r6, [pc, #56]	; (800a16c <sbrk_aligned+0x3c>)
 800a134:	460c      	mov	r4, r1
 800a136:	6831      	ldr	r1, [r6, #0]
 800a138:	4605      	mov	r5, r0
 800a13a:	b911      	cbnz	r1, 800a142 <sbrk_aligned+0x12>
 800a13c:	f000 f9e6 	bl	800a50c <_sbrk_r>
 800a140:	6030      	str	r0, [r6, #0]
 800a142:	4621      	mov	r1, r4
 800a144:	4628      	mov	r0, r5
 800a146:	f000 f9e1 	bl	800a50c <_sbrk_r>
 800a14a:	1c43      	adds	r3, r0, #1
 800a14c:	d00a      	beq.n	800a164 <sbrk_aligned+0x34>
 800a14e:	1cc4      	adds	r4, r0, #3
 800a150:	f024 0403 	bic.w	r4, r4, #3
 800a154:	42a0      	cmp	r0, r4
 800a156:	d007      	beq.n	800a168 <sbrk_aligned+0x38>
 800a158:	1a21      	subs	r1, r4, r0
 800a15a:	4628      	mov	r0, r5
 800a15c:	f000 f9d6 	bl	800a50c <_sbrk_r>
 800a160:	3001      	adds	r0, #1
 800a162:	d101      	bne.n	800a168 <sbrk_aligned+0x38>
 800a164:	f04f 34ff 	mov.w	r4, #4294967295
 800a168:	4620      	mov	r0, r4
 800a16a:	bd70      	pop	{r4, r5, r6, pc}
 800a16c:	20000a68 	.word	0x20000a68

0800a170 <_malloc_r>:
 800a170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a174:	1ccd      	adds	r5, r1, #3
 800a176:	f025 0503 	bic.w	r5, r5, #3
 800a17a:	3508      	adds	r5, #8
 800a17c:	2d0c      	cmp	r5, #12
 800a17e:	bf38      	it	cc
 800a180:	250c      	movcc	r5, #12
 800a182:	2d00      	cmp	r5, #0
 800a184:	4607      	mov	r7, r0
 800a186:	db01      	blt.n	800a18c <_malloc_r+0x1c>
 800a188:	42a9      	cmp	r1, r5
 800a18a:	d905      	bls.n	800a198 <_malloc_r+0x28>
 800a18c:	230c      	movs	r3, #12
 800a18e:	603b      	str	r3, [r7, #0]
 800a190:	2600      	movs	r6, #0
 800a192:	4630      	mov	r0, r6
 800a194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a198:	4e2e      	ldr	r6, [pc, #184]	; (800a254 <_malloc_r+0xe4>)
 800a19a:	f000 fc69 	bl	800aa70 <__malloc_lock>
 800a19e:	6833      	ldr	r3, [r6, #0]
 800a1a0:	461c      	mov	r4, r3
 800a1a2:	bb34      	cbnz	r4, 800a1f2 <_malloc_r+0x82>
 800a1a4:	4629      	mov	r1, r5
 800a1a6:	4638      	mov	r0, r7
 800a1a8:	f7ff ffc2 	bl	800a130 <sbrk_aligned>
 800a1ac:	1c43      	adds	r3, r0, #1
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	d14d      	bne.n	800a24e <_malloc_r+0xde>
 800a1b2:	6834      	ldr	r4, [r6, #0]
 800a1b4:	4626      	mov	r6, r4
 800a1b6:	2e00      	cmp	r6, #0
 800a1b8:	d140      	bne.n	800a23c <_malloc_r+0xcc>
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	4631      	mov	r1, r6
 800a1be:	4638      	mov	r0, r7
 800a1c0:	eb04 0803 	add.w	r8, r4, r3
 800a1c4:	f000 f9a2 	bl	800a50c <_sbrk_r>
 800a1c8:	4580      	cmp	r8, r0
 800a1ca:	d13a      	bne.n	800a242 <_malloc_r+0xd2>
 800a1cc:	6821      	ldr	r1, [r4, #0]
 800a1ce:	3503      	adds	r5, #3
 800a1d0:	1a6d      	subs	r5, r5, r1
 800a1d2:	f025 0503 	bic.w	r5, r5, #3
 800a1d6:	3508      	adds	r5, #8
 800a1d8:	2d0c      	cmp	r5, #12
 800a1da:	bf38      	it	cc
 800a1dc:	250c      	movcc	r5, #12
 800a1de:	4629      	mov	r1, r5
 800a1e0:	4638      	mov	r0, r7
 800a1e2:	f7ff ffa5 	bl	800a130 <sbrk_aligned>
 800a1e6:	3001      	adds	r0, #1
 800a1e8:	d02b      	beq.n	800a242 <_malloc_r+0xd2>
 800a1ea:	6823      	ldr	r3, [r4, #0]
 800a1ec:	442b      	add	r3, r5
 800a1ee:	6023      	str	r3, [r4, #0]
 800a1f0:	e00e      	b.n	800a210 <_malloc_r+0xa0>
 800a1f2:	6822      	ldr	r2, [r4, #0]
 800a1f4:	1b52      	subs	r2, r2, r5
 800a1f6:	d41e      	bmi.n	800a236 <_malloc_r+0xc6>
 800a1f8:	2a0b      	cmp	r2, #11
 800a1fa:	d916      	bls.n	800a22a <_malloc_r+0xba>
 800a1fc:	1961      	adds	r1, r4, r5
 800a1fe:	42a3      	cmp	r3, r4
 800a200:	6025      	str	r5, [r4, #0]
 800a202:	bf18      	it	ne
 800a204:	6059      	strne	r1, [r3, #4]
 800a206:	6863      	ldr	r3, [r4, #4]
 800a208:	bf08      	it	eq
 800a20a:	6031      	streq	r1, [r6, #0]
 800a20c:	5162      	str	r2, [r4, r5]
 800a20e:	604b      	str	r3, [r1, #4]
 800a210:	4638      	mov	r0, r7
 800a212:	f104 060b 	add.w	r6, r4, #11
 800a216:	f000 fc31 	bl	800aa7c <__malloc_unlock>
 800a21a:	f026 0607 	bic.w	r6, r6, #7
 800a21e:	1d23      	adds	r3, r4, #4
 800a220:	1af2      	subs	r2, r6, r3
 800a222:	d0b6      	beq.n	800a192 <_malloc_r+0x22>
 800a224:	1b9b      	subs	r3, r3, r6
 800a226:	50a3      	str	r3, [r4, r2]
 800a228:	e7b3      	b.n	800a192 <_malloc_r+0x22>
 800a22a:	6862      	ldr	r2, [r4, #4]
 800a22c:	42a3      	cmp	r3, r4
 800a22e:	bf0c      	ite	eq
 800a230:	6032      	streq	r2, [r6, #0]
 800a232:	605a      	strne	r2, [r3, #4]
 800a234:	e7ec      	b.n	800a210 <_malloc_r+0xa0>
 800a236:	4623      	mov	r3, r4
 800a238:	6864      	ldr	r4, [r4, #4]
 800a23a:	e7b2      	b.n	800a1a2 <_malloc_r+0x32>
 800a23c:	4634      	mov	r4, r6
 800a23e:	6876      	ldr	r6, [r6, #4]
 800a240:	e7b9      	b.n	800a1b6 <_malloc_r+0x46>
 800a242:	230c      	movs	r3, #12
 800a244:	603b      	str	r3, [r7, #0]
 800a246:	4638      	mov	r0, r7
 800a248:	f000 fc18 	bl	800aa7c <__malloc_unlock>
 800a24c:	e7a1      	b.n	800a192 <_malloc_r+0x22>
 800a24e:	6025      	str	r5, [r4, #0]
 800a250:	e7de      	b.n	800a210 <_malloc_r+0xa0>
 800a252:	bf00      	nop
 800a254:	20000a64 	.word	0x20000a64

0800a258 <__sfputc_r>:
 800a258:	6893      	ldr	r3, [r2, #8]
 800a25a:	3b01      	subs	r3, #1
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	b410      	push	{r4}
 800a260:	6093      	str	r3, [r2, #8]
 800a262:	da08      	bge.n	800a276 <__sfputc_r+0x1e>
 800a264:	6994      	ldr	r4, [r2, #24]
 800a266:	42a3      	cmp	r3, r4
 800a268:	db01      	blt.n	800a26e <__sfputc_r+0x16>
 800a26a:	290a      	cmp	r1, #10
 800a26c:	d103      	bne.n	800a276 <__sfputc_r+0x1e>
 800a26e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a272:	f000 b99f 	b.w	800a5b4 <__swbuf_r>
 800a276:	6813      	ldr	r3, [r2, #0]
 800a278:	1c58      	adds	r0, r3, #1
 800a27a:	6010      	str	r0, [r2, #0]
 800a27c:	7019      	strb	r1, [r3, #0]
 800a27e:	4608      	mov	r0, r1
 800a280:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a284:	4770      	bx	lr

0800a286 <__sfputs_r>:
 800a286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a288:	4606      	mov	r6, r0
 800a28a:	460f      	mov	r7, r1
 800a28c:	4614      	mov	r4, r2
 800a28e:	18d5      	adds	r5, r2, r3
 800a290:	42ac      	cmp	r4, r5
 800a292:	d101      	bne.n	800a298 <__sfputs_r+0x12>
 800a294:	2000      	movs	r0, #0
 800a296:	e007      	b.n	800a2a8 <__sfputs_r+0x22>
 800a298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a29c:	463a      	mov	r2, r7
 800a29e:	4630      	mov	r0, r6
 800a2a0:	f7ff ffda 	bl	800a258 <__sfputc_r>
 800a2a4:	1c43      	adds	r3, r0, #1
 800a2a6:	d1f3      	bne.n	800a290 <__sfputs_r+0xa>
 800a2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2ac <_vfiprintf_r>:
 800a2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b0:	460d      	mov	r5, r1
 800a2b2:	b09d      	sub	sp, #116	; 0x74
 800a2b4:	4614      	mov	r4, r2
 800a2b6:	4698      	mov	r8, r3
 800a2b8:	4606      	mov	r6, r0
 800a2ba:	b118      	cbz	r0, 800a2c4 <_vfiprintf_r+0x18>
 800a2bc:	6983      	ldr	r3, [r0, #24]
 800a2be:	b90b      	cbnz	r3, 800a2c4 <_vfiprintf_r+0x18>
 800a2c0:	f7ff fa94 	bl	80097ec <__sinit>
 800a2c4:	4b89      	ldr	r3, [pc, #548]	; (800a4ec <_vfiprintf_r+0x240>)
 800a2c6:	429d      	cmp	r5, r3
 800a2c8:	d11b      	bne.n	800a302 <_vfiprintf_r+0x56>
 800a2ca:	6875      	ldr	r5, [r6, #4]
 800a2cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2ce:	07d9      	lsls	r1, r3, #31
 800a2d0:	d405      	bmi.n	800a2de <_vfiprintf_r+0x32>
 800a2d2:	89ab      	ldrh	r3, [r5, #12]
 800a2d4:	059a      	lsls	r2, r3, #22
 800a2d6:	d402      	bmi.n	800a2de <_vfiprintf_r+0x32>
 800a2d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2da:	f7ff fb2a 	bl	8009932 <__retarget_lock_acquire_recursive>
 800a2de:	89ab      	ldrh	r3, [r5, #12]
 800a2e0:	071b      	lsls	r3, r3, #28
 800a2e2:	d501      	bpl.n	800a2e8 <_vfiprintf_r+0x3c>
 800a2e4:	692b      	ldr	r3, [r5, #16]
 800a2e6:	b9eb      	cbnz	r3, 800a324 <_vfiprintf_r+0x78>
 800a2e8:	4629      	mov	r1, r5
 800a2ea:	4630      	mov	r0, r6
 800a2ec:	f000 f9c6 	bl	800a67c <__swsetup_r>
 800a2f0:	b1c0      	cbz	r0, 800a324 <_vfiprintf_r+0x78>
 800a2f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2f4:	07dc      	lsls	r4, r3, #31
 800a2f6:	d50e      	bpl.n	800a316 <_vfiprintf_r+0x6a>
 800a2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2fc:	b01d      	add	sp, #116	; 0x74
 800a2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a302:	4b7b      	ldr	r3, [pc, #492]	; (800a4f0 <_vfiprintf_r+0x244>)
 800a304:	429d      	cmp	r5, r3
 800a306:	d101      	bne.n	800a30c <_vfiprintf_r+0x60>
 800a308:	68b5      	ldr	r5, [r6, #8]
 800a30a:	e7df      	b.n	800a2cc <_vfiprintf_r+0x20>
 800a30c:	4b79      	ldr	r3, [pc, #484]	; (800a4f4 <_vfiprintf_r+0x248>)
 800a30e:	429d      	cmp	r5, r3
 800a310:	bf08      	it	eq
 800a312:	68f5      	ldreq	r5, [r6, #12]
 800a314:	e7da      	b.n	800a2cc <_vfiprintf_r+0x20>
 800a316:	89ab      	ldrh	r3, [r5, #12]
 800a318:	0598      	lsls	r0, r3, #22
 800a31a:	d4ed      	bmi.n	800a2f8 <_vfiprintf_r+0x4c>
 800a31c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a31e:	f7ff fb09 	bl	8009934 <__retarget_lock_release_recursive>
 800a322:	e7e9      	b.n	800a2f8 <_vfiprintf_r+0x4c>
 800a324:	2300      	movs	r3, #0
 800a326:	9309      	str	r3, [sp, #36]	; 0x24
 800a328:	2320      	movs	r3, #32
 800a32a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a32e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a332:	2330      	movs	r3, #48	; 0x30
 800a334:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a4f8 <_vfiprintf_r+0x24c>
 800a338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a33c:	f04f 0901 	mov.w	r9, #1
 800a340:	4623      	mov	r3, r4
 800a342:	469a      	mov	sl, r3
 800a344:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a348:	b10a      	cbz	r2, 800a34e <_vfiprintf_r+0xa2>
 800a34a:	2a25      	cmp	r2, #37	; 0x25
 800a34c:	d1f9      	bne.n	800a342 <_vfiprintf_r+0x96>
 800a34e:	ebba 0b04 	subs.w	fp, sl, r4
 800a352:	d00b      	beq.n	800a36c <_vfiprintf_r+0xc0>
 800a354:	465b      	mov	r3, fp
 800a356:	4622      	mov	r2, r4
 800a358:	4629      	mov	r1, r5
 800a35a:	4630      	mov	r0, r6
 800a35c:	f7ff ff93 	bl	800a286 <__sfputs_r>
 800a360:	3001      	adds	r0, #1
 800a362:	f000 80aa 	beq.w	800a4ba <_vfiprintf_r+0x20e>
 800a366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a368:	445a      	add	r2, fp
 800a36a:	9209      	str	r2, [sp, #36]	; 0x24
 800a36c:	f89a 3000 	ldrb.w	r3, [sl]
 800a370:	2b00      	cmp	r3, #0
 800a372:	f000 80a2 	beq.w	800a4ba <_vfiprintf_r+0x20e>
 800a376:	2300      	movs	r3, #0
 800a378:	f04f 32ff 	mov.w	r2, #4294967295
 800a37c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a380:	f10a 0a01 	add.w	sl, sl, #1
 800a384:	9304      	str	r3, [sp, #16]
 800a386:	9307      	str	r3, [sp, #28]
 800a388:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a38c:	931a      	str	r3, [sp, #104]	; 0x68
 800a38e:	4654      	mov	r4, sl
 800a390:	2205      	movs	r2, #5
 800a392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a396:	4858      	ldr	r0, [pc, #352]	; (800a4f8 <_vfiprintf_r+0x24c>)
 800a398:	f7f5 ff22 	bl	80001e0 <memchr>
 800a39c:	9a04      	ldr	r2, [sp, #16]
 800a39e:	b9d8      	cbnz	r0, 800a3d8 <_vfiprintf_r+0x12c>
 800a3a0:	06d1      	lsls	r1, r2, #27
 800a3a2:	bf44      	itt	mi
 800a3a4:	2320      	movmi	r3, #32
 800a3a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3aa:	0713      	lsls	r3, r2, #28
 800a3ac:	bf44      	itt	mi
 800a3ae:	232b      	movmi	r3, #43	; 0x2b
 800a3b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3b8:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ba:	d015      	beq.n	800a3e8 <_vfiprintf_r+0x13c>
 800a3bc:	9a07      	ldr	r2, [sp, #28]
 800a3be:	4654      	mov	r4, sl
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	f04f 0c0a 	mov.w	ip, #10
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3cc:	3b30      	subs	r3, #48	; 0x30
 800a3ce:	2b09      	cmp	r3, #9
 800a3d0:	d94e      	bls.n	800a470 <_vfiprintf_r+0x1c4>
 800a3d2:	b1b0      	cbz	r0, 800a402 <_vfiprintf_r+0x156>
 800a3d4:	9207      	str	r2, [sp, #28]
 800a3d6:	e014      	b.n	800a402 <_vfiprintf_r+0x156>
 800a3d8:	eba0 0308 	sub.w	r3, r0, r8
 800a3dc:	fa09 f303 	lsl.w	r3, r9, r3
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	9304      	str	r3, [sp, #16]
 800a3e4:	46a2      	mov	sl, r4
 800a3e6:	e7d2      	b.n	800a38e <_vfiprintf_r+0xe2>
 800a3e8:	9b03      	ldr	r3, [sp, #12]
 800a3ea:	1d19      	adds	r1, r3, #4
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	9103      	str	r1, [sp, #12]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	bfbb      	ittet	lt
 800a3f4:	425b      	neglt	r3, r3
 800a3f6:	f042 0202 	orrlt.w	r2, r2, #2
 800a3fa:	9307      	strge	r3, [sp, #28]
 800a3fc:	9307      	strlt	r3, [sp, #28]
 800a3fe:	bfb8      	it	lt
 800a400:	9204      	strlt	r2, [sp, #16]
 800a402:	7823      	ldrb	r3, [r4, #0]
 800a404:	2b2e      	cmp	r3, #46	; 0x2e
 800a406:	d10c      	bne.n	800a422 <_vfiprintf_r+0x176>
 800a408:	7863      	ldrb	r3, [r4, #1]
 800a40a:	2b2a      	cmp	r3, #42	; 0x2a
 800a40c:	d135      	bne.n	800a47a <_vfiprintf_r+0x1ce>
 800a40e:	9b03      	ldr	r3, [sp, #12]
 800a410:	1d1a      	adds	r2, r3, #4
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	9203      	str	r2, [sp, #12]
 800a416:	2b00      	cmp	r3, #0
 800a418:	bfb8      	it	lt
 800a41a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a41e:	3402      	adds	r4, #2
 800a420:	9305      	str	r3, [sp, #20]
 800a422:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a508 <_vfiprintf_r+0x25c>
 800a426:	7821      	ldrb	r1, [r4, #0]
 800a428:	2203      	movs	r2, #3
 800a42a:	4650      	mov	r0, sl
 800a42c:	f7f5 fed8 	bl	80001e0 <memchr>
 800a430:	b140      	cbz	r0, 800a444 <_vfiprintf_r+0x198>
 800a432:	2340      	movs	r3, #64	; 0x40
 800a434:	eba0 000a 	sub.w	r0, r0, sl
 800a438:	fa03 f000 	lsl.w	r0, r3, r0
 800a43c:	9b04      	ldr	r3, [sp, #16]
 800a43e:	4303      	orrs	r3, r0
 800a440:	3401      	adds	r4, #1
 800a442:	9304      	str	r3, [sp, #16]
 800a444:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a448:	482c      	ldr	r0, [pc, #176]	; (800a4fc <_vfiprintf_r+0x250>)
 800a44a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a44e:	2206      	movs	r2, #6
 800a450:	f7f5 fec6 	bl	80001e0 <memchr>
 800a454:	2800      	cmp	r0, #0
 800a456:	d03f      	beq.n	800a4d8 <_vfiprintf_r+0x22c>
 800a458:	4b29      	ldr	r3, [pc, #164]	; (800a500 <_vfiprintf_r+0x254>)
 800a45a:	bb1b      	cbnz	r3, 800a4a4 <_vfiprintf_r+0x1f8>
 800a45c:	9b03      	ldr	r3, [sp, #12]
 800a45e:	3307      	adds	r3, #7
 800a460:	f023 0307 	bic.w	r3, r3, #7
 800a464:	3308      	adds	r3, #8
 800a466:	9303      	str	r3, [sp, #12]
 800a468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a46a:	443b      	add	r3, r7
 800a46c:	9309      	str	r3, [sp, #36]	; 0x24
 800a46e:	e767      	b.n	800a340 <_vfiprintf_r+0x94>
 800a470:	fb0c 3202 	mla	r2, ip, r2, r3
 800a474:	460c      	mov	r4, r1
 800a476:	2001      	movs	r0, #1
 800a478:	e7a5      	b.n	800a3c6 <_vfiprintf_r+0x11a>
 800a47a:	2300      	movs	r3, #0
 800a47c:	3401      	adds	r4, #1
 800a47e:	9305      	str	r3, [sp, #20]
 800a480:	4619      	mov	r1, r3
 800a482:	f04f 0c0a 	mov.w	ip, #10
 800a486:	4620      	mov	r0, r4
 800a488:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a48c:	3a30      	subs	r2, #48	; 0x30
 800a48e:	2a09      	cmp	r2, #9
 800a490:	d903      	bls.n	800a49a <_vfiprintf_r+0x1ee>
 800a492:	2b00      	cmp	r3, #0
 800a494:	d0c5      	beq.n	800a422 <_vfiprintf_r+0x176>
 800a496:	9105      	str	r1, [sp, #20]
 800a498:	e7c3      	b.n	800a422 <_vfiprintf_r+0x176>
 800a49a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a49e:	4604      	mov	r4, r0
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e7f0      	b.n	800a486 <_vfiprintf_r+0x1da>
 800a4a4:	ab03      	add	r3, sp, #12
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	462a      	mov	r2, r5
 800a4aa:	4b16      	ldr	r3, [pc, #88]	; (800a504 <_vfiprintf_r+0x258>)
 800a4ac:	a904      	add	r1, sp, #16
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	f7fd fee6 	bl	8008280 <_printf_float>
 800a4b4:	4607      	mov	r7, r0
 800a4b6:	1c78      	adds	r0, r7, #1
 800a4b8:	d1d6      	bne.n	800a468 <_vfiprintf_r+0x1bc>
 800a4ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4bc:	07d9      	lsls	r1, r3, #31
 800a4be:	d405      	bmi.n	800a4cc <_vfiprintf_r+0x220>
 800a4c0:	89ab      	ldrh	r3, [r5, #12]
 800a4c2:	059a      	lsls	r2, r3, #22
 800a4c4:	d402      	bmi.n	800a4cc <_vfiprintf_r+0x220>
 800a4c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4c8:	f7ff fa34 	bl	8009934 <__retarget_lock_release_recursive>
 800a4cc:	89ab      	ldrh	r3, [r5, #12]
 800a4ce:	065b      	lsls	r3, r3, #25
 800a4d0:	f53f af12 	bmi.w	800a2f8 <_vfiprintf_r+0x4c>
 800a4d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4d6:	e711      	b.n	800a2fc <_vfiprintf_r+0x50>
 800a4d8:	ab03      	add	r3, sp, #12
 800a4da:	9300      	str	r3, [sp, #0]
 800a4dc:	462a      	mov	r2, r5
 800a4de:	4b09      	ldr	r3, [pc, #36]	; (800a504 <_vfiprintf_r+0x258>)
 800a4e0:	a904      	add	r1, sp, #16
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f7fe f970 	bl	80087c8 <_printf_i>
 800a4e8:	e7e4      	b.n	800a4b4 <_vfiprintf_r+0x208>
 800a4ea:	bf00      	nop
 800a4ec:	0800ad38 	.word	0x0800ad38
 800a4f0:	0800ad58 	.word	0x0800ad58
 800a4f4:	0800ad18 	.word	0x0800ad18
 800a4f8:	0800aed4 	.word	0x0800aed4
 800a4fc:	0800aede 	.word	0x0800aede
 800a500:	08008281 	.word	0x08008281
 800a504:	0800a287 	.word	0x0800a287
 800a508:	0800aeda 	.word	0x0800aeda

0800a50c <_sbrk_r>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	4d06      	ldr	r5, [pc, #24]	; (800a528 <_sbrk_r+0x1c>)
 800a510:	2300      	movs	r3, #0
 800a512:	4604      	mov	r4, r0
 800a514:	4608      	mov	r0, r1
 800a516:	602b      	str	r3, [r5, #0]
 800a518:	f7f8 f9ce 	bl	80028b8 <_sbrk>
 800a51c:	1c43      	adds	r3, r0, #1
 800a51e:	d102      	bne.n	800a526 <_sbrk_r+0x1a>
 800a520:	682b      	ldr	r3, [r5, #0]
 800a522:	b103      	cbz	r3, 800a526 <_sbrk_r+0x1a>
 800a524:	6023      	str	r3, [r4, #0]
 800a526:	bd38      	pop	{r3, r4, r5, pc}
 800a528:	20000a6c 	.word	0x20000a6c

0800a52c <__sread>:
 800a52c:	b510      	push	{r4, lr}
 800a52e:	460c      	mov	r4, r1
 800a530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a534:	f000 faa8 	bl	800aa88 <_read_r>
 800a538:	2800      	cmp	r0, #0
 800a53a:	bfab      	itete	ge
 800a53c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a53e:	89a3      	ldrhlt	r3, [r4, #12]
 800a540:	181b      	addge	r3, r3, r0
 800a542:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a546:	bfac      	ite	ge
 800a548:	6563      	strge	r3, [r4, #84]	; 0x54
 800a54a:	81a3      	strhlt	r3, [r4, #12]
 800a54c:	bd10      	pop	{r4, pc}

0800a54e <__swrite>:
 800a54e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a552:	461f      	mov	r7, r3
 800a554:	898b      	ldrh	r3, [r1, #12]
 800a556:	05db      	lsls	r3, r3, #23
 800a558:	4605      	mov	r5, r0
 800a55a:	460c      	mov	r4, r1
 800a55c:	4616      	mov	r6, r2
 800a55e:	d505      	bpl.n	800a56c <__swrite+0x1e>
 800a560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a564:	2302      	movs	r3, #2
 800a566:	2200      	movs	r2, #0
 800a568:	f000 f9f8 	bl	800a95c <_lseek_r>
 800a56c:	89a3      	ldrh	r3, [r4, #12]
 800a56e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a572:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a576:	81a3      	strh	r3, [r4, #12]
 800a578:	4632      	mov	r2, r6
 800a57a:	463b      	mov	r3, r7
 800a57c:	4628      	mov	r0, r5
 800a57e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a582:	f000 b869 	b.w	800a658 <_write_r>

0800a586 <__sseek>:
 800a586:	b510      	push	{r4, lr}
 800a588:	460c      	mov	r4, r1
 800a58a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a58e:	f000 f9e5 	bl	800a95c <_lseek_r>
 800a592:	1c43      	adds	r3, r0, #1
 800a594:	89a3      	ldrh	r3, [r4, #12]
 800a596:	bf15      	itete	ne
 800a598:	6560      	strne	r0, [r4, #84]	; 0x54
 800a59a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a59e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5a2:	81a3      	strheq	r3, [r4, #12]
 800a5a4:	bf18      	it	ne
 800a5a6:	81a3      	strhne	r3, [r4, #12]
 800a5a8:	bd10      	pop	{r4, pc}

0800a5aa <__sclose>:
 800a5aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ae:	f000 b8f1 	b.w	800a794 <_close_r>
	...

0800a5b4 <__swbuf_r>:
 800a5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b6:	460e      	mov	r6, r1
 800a5b8:	4614      	mov	r4, r2
 800a5ba:	4605      	mov	r5, r0
 800a5bc:	b118      	cbz	r0, 800a5c6 <__swbuf_r+0x12>
 800a5be:	6983      	ldr	r3, [r0, #24]
 800a5c0:	b90b      	cbnz	r3, 800a5c6 <__swbuf_r+0x12>
 800a5c2:	f7ff f913 	bl	80097ec <__sinit>
 800a5c6:	4b21      	ldr	r3, [pc, #132]	; (800a64c <__swbuf_r+0x98>)
 800a5c8:	429c      	cmp	r4, r3
 800a5ca:	d12b      	bne.n	800a624 <__swbuf_r+0x70>
 800a5cc:	686c      	ldr	r4, [r5, #4]
 800a5ce:	69a3      	ldr	r3, [r4, #24]
 800a5d0:	60a3      	str	r3, [r4, #8]
 800a5d2:	89a3      	ldrh	r3, [r4, #12]
 800a5d4:	071a      	lsls	r2, r3, #28
 800a5d6:	d52f      	bpl.n	800a638 <__swbuf_r+0x84>
 800a5d8:	6923      	ldr	r3, [r4, #16]
 800a5da:	b36b      	cbz	r3, 800a638 <__swbuf_r+0x84>
 800a5dc:	6923      	ldr	r3, [r4, #16]
 800a5de:	6820      	ldr	r0, [r4, #0]
 800a5e0:	1ac0      	subs	r0, r0, r3
 800a5e2:	6963      	ldr	r3, [r4, #20]
 800a5e4:	b2f6      	uxtb	r6, r6
 800a5e6:	4283      	cmp	r3, r0
 800a5e8:	4637      	mov	r7, r6
 800a5ea:	dc04      	bgt.n	800a5f6 <__swbuf_r+0x42>
 800a5ec:	4621      	mov	r1, r4
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	f000 f966 	bl	800a8c0 <_fflush_r>
 800a5f4:	bb30      	cbnz	r0, 800a644 <__swbuf_r+0x90>
 800a5f6:	68a3      	ldr	r3, [r4, #8]
 800a5f8:	3b01      	subs	r3, #1
 800a5fa:	60a3      	str	r3, [r4, #8]
 800a5fc:	6823      	ldr	r3, [r4, #0]
 800a5fe:	1c5a      	adds	r2, r3, #1
 800a600:	6022      	str	r2, [r4, #0]
 800a602:	701e      	strb	r6, [r3, #0]
 800a604:	6963      	ldr	r3, [r4, #20]
 800a606:	3001      	adds	r0, #1
 800a608:	4283      	cmp	r3, r0
 800a60a:	d004      	beq.n	800a616 <__swbuf_r+0x62>
 800a60c:	89a3      	ldrh	r3, [r4, #12]
 800a60e:	07db      	lsls	r3, r3, #31
 800a610:	d506      	bpl.n	800a620 <__swbuf_r+0x6c>
 800a612:	2e0a      	cmp	r6, #10
 800a614:	d104      	bne.n	800a620 <__swbuf_r+0x6c>
 800a616:	4621      	mov	r1, r4
 800a618:	4628      	mov	r0, r5
 800a61a:	f000 f951 	bl	800a8c0 <_fflush_r>
 800a61e:	b988      	cbnz	r0, 800a644 <__swbuf_r+0x90>
 800a620:	4638      	mov	r0, r7
 800a622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a624:	4b0a      	ldr	r3, [pc, #40]	; (800a650 <__swbuf_r+0x9c>)
 800a626:	429c      	cmp	r4, r3
 800a628:	d101      	bne.n	800a62e <__swbuf_r+0x7a>
 800a62a:	68ac      	ldr	r4, [r5, #8]
 800a62c:	e7cf      	b.n	800a5ce <__swbuf_r+0x1a>
 800a62e:	4b09      	ldr	r3, [pc, #36]	; (800a654 <__swbuf_r+0xa0>)
 800a630:	429c      	cmp	r4, r3
 800a632:	bf08      	it	eq
 800a634:	68ec      	ldreq	r4, [r5, #12]
 800a636:	e7ca      	b.n	800a5ce <__swbuf_r+0x1a>
 800a638:	4621      	mov	r1, r4
 800a63a:	4628      	mov	r0, r5
 800a63c:	f000 f81e 	bl	800a67c <__swsetup_r>
 800a640:	2800      	cmp	r0, #0
 800a642:	d0cb      	beq.n	800a5dc <__swbuf_r+0x28>
 800a644:	f04f 37ff 	mov.w	r7, #4294967295
 800a648:	e7ea      	b.n	800a620 <__swbuf_r+0x6c>
 800a64a:	bf00      	nop
 800a64c:	0800ad38 	.word	0x0800ad38
 800a650:	0800ad58 	.word	0x0800ad58
 800a654:	0800ad18 	.word	0x0800ad18

0800a658 <_write_r>:
 800a658:	b538      	push	{r3, r4, r5, lr}
 800a65a:	4d07      	ldr	r5, [pc, #28]	; (800a678 <_write_r+0x20>)
 800a65c:	4604      	mov	r4, r0
 800a65e:	4608      	mov	r0, r1
 800a660:	4611      	mov	r1, r2
 800a662:	2200      	movs	r2, #0
 800a664:	602a      	str	r2, [r5, #0]
 800a666:	461a      	mov	r2, r3
 800a668:	f7f8 f8d2 	bl	8002810 <_write>
 800a66c:	1c43      	adds	r3, r0, #1
 800a66e:	d102      	bne.n	800a676 <_write_r+0x1e>
 800a670:	682b      	ldr	r3, [r5, #0]
 800a672:	b103      	cbz	r3, 800a676 <_write_r+0x1e>
 800a674:	6023      	str	r3, [r4, #0]
 800a676:	bd38      	pop	{r3, r4, r5, pc}
 800a678:	20000a6c 	.word	0x20000a6c

0800a67c <__swsetup_r>:
 800a67c:	4b32      	ldr	r3, [pc, #200]	; (800a748 <__swsetup_r+0xcc>)
 800a67e:	b570      	push	{r4, r5, r6, lr}
 800a680:	681d      	ldr	r5, [r3, #0]
 800a682:	4606      	mov	r6, r0
 800a684:	460c      	mov	r4, r1
 800a686:	b125      	cbz	r5, 800a692 <__swsetup_r+0x16>
 800a688:	69ab      	ldr	r3, [r5, #24]
 800a68a:	b913      	cbnz	r3, 800a692 <__swsetup_r+0x16>
 800a68c:	4628      	mov	r0, r5
 800a68e:	f7ff f8ad 	bl	80097ec <__sinit>
 800a692:	4b2e      	ldr	r3, [pc, #184]	; (800a74c <__swsetup_r+0xd0>)
 800a694:	429c      	cmp	r4, r3
 800a696:	d10f      	bne.n	800a6b8 <__swsetup_r+0x3c>
 800a698:	686c      	ldr	r4, [r5, #4]
 800a69a:	89a3      	ldrh	r3, [r4, #12]
 800a69c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6a0:	0719      	lsls	r1, r3, #28
 800a6a2:	d42c      	bmi.n	800a6fe <__swsetup_r+0x82>
 800a6a4:	06dd      	lsls	r5, r3, #27
 800a6a6:	d411      	bmi.n	800a6cc <__swsetup_r+0x50>
 800a6a8:	2309      	movs	r3, #9
 800a6aa:	6033      	str	r3, [r6, #0]
 800a6ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6b0:	81a3      	strh	r3, [r4, #12]
 800a6b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b6:	e03e      	b.n	800a736 <__swsetup_r+0xba>
 800a6b8:	4b25      	ldr	r3, [pc, #148]	; (800a750 <__swsetup_r+0xd4>)
 800a6ba:	429c      	cmp	r4, r3
 800a6bc:	d101      	bne.n	800a6c2 <__swsetup_r+0x46>
 800a6be:	68ac      	ldr	r4, [r5, #8]
 800a6c0:	e7eb      	b.n	800a69a <__swsetup_r+0x1e>
 800a6c2:	4b24      	ldr	r3, [pc, #144]	; (800a754 <__swsetup_r+0xd8>)
 800a6c4:	429c      	cmp	r4, r3
 800a6c6:	bf08      	it	eq
 800a6c8:	68ec      	ldreq	r4, [r5, #12]
 800a6ca:	e7e6      	b.n	800a69a <__swsetup_r+0x1e>
 800a6cc:	0758      	lsls	r0, r3, #29
 800a6ce:	d512      	bpl.n	800a6f6 <__swsetup_r+0x7a>
 800a6d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6d2:	b141      	cbz	r1, 800a6e6 <__swsetup_r+0x6a>
 800a6d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6d8:	4299      	cmp	r1, r3
 800a6da:	d002      	beq.n	800a6e2 <__swsetup_r+0x66>
 800a6dc:	4630      	mov	r0, r6
 800a6de:	f7ff fcdb 	bl	800a098 <_free_r>
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	6363      	str	r3, [r4, #52]	; 0x34
 800a6e6:	89a3      	ldrh	r3, [r4, #12]
 800a6e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6ec:	81a3      	strh	r3, [r4, #12]
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	6063      	str	r3, [r4, #4]
 800a6f2:	6923      	ldr	r3, [r4, #16]
 800a6f4:	6023      	str	r3, [r4, #0]
 800a6f6:	89a3      	ldrh	r3, [r4, #12]
 800a6f8:	f043 0308 	orr.w	r3, r3, #8
 800a6fc:	81a3      	strh	r3, [r4, #12]
 800a6fe:	6923      	ldr	r3, [r4, #16]
 800a700:	b94b      	cbnz	r3, 800a716 <__swsetup_r+0x9a>
 800a702:	89a3      	ldrh	r3, [r4, #12]
 800a704:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a70c:	d003      	beq.n	800a716 <__swsetup_r+0x9a>
 800a70e:	4621      	mov	r1, r4
 800a710:	4630      	mov	r0, r6
 800a712:	f000 f95b 	bl	800a9cc <__smakebuf_r>
 800a716:	89a0      	ldrh	r0, [r4, #12]
 800a718:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a71c:	f010 0301 	ands.w	r3, r0, #1
 800a720:	d00a      	beq.n	800a738 <__swsetup_r+0xbc>
 800a722:	2300      	movs	r3, #0
 800a724:	60a3      	str	r3, [r4, #8]
 800a726:	6963      	ldr	r3, [r4, #20]
 800a728:	425b      	negs	r3, r3
 800a72a:	61a3      	str	r3, [r4, #24]
 800a72c:	6923      	ldr	r3, [r4, #16]
 800a72e:	b943      	cbnz	r3, 800a742 <__swsetup_r+0xc6>
 800a730:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a734:	d1ba      	bne.n	800a6ac <__swsetup_r+0x30>
 800a736:	bd70      	pop	{r4, r5, r6, pc}
 800a738:	0781      	lsls	r1, r0, #30
 800a73a:	bf58      	it	pl
 800a73c:	6963      	ldrpl	r3, [r4, #20]
 800a73e:	60a3      	str	r3, [r4, #8]
 800a740:	e7f4      	b.n	800a72c <__swsetup_r+0xb0>
 800a742:	2000      	movs	r0, #0
 800a744:	e7f7      	b.n	800a736 <__swsetup_r+0xba>
 800a746:	bf00      	nop
 800a748:	2000000c 	.word	0x2000000c
 800a74c:	0800ad38 	.word	0x0800ad38
 800a750:	0800ad58 	.word	0x0800ad58
 800a754:	0800ad18 	.word	0x0800ad18

0800a758 <__assert_func>:
 800a758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a75a:	4614      	mov	r4, r2
 800a75c:	461a      	mov	r2, r3
 800a75e:	4b09      	ldr	r3, [pc, #36]	; (800a784 <__assert_func+0x2c>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4605      	mov	r5, r0
 800a764:	68d8      	ldr	r0, [r3, #12]
 800a766:	b14c      	cbz	r4, 800a77c <__assert_func+0x24>
 800a768:	4b07      	ldr	r3, [pc, #28]	; (800a788 <__assert_func+0x30>)
 800a76a:	9100      	str	r1, [sp, #0]
 800a76c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a770:	4906      	ldr	r1, [pc, #24]	; (800a78c <__assert_func+0x34>)
 800a772:	462b      	mov	r3, r5
 800a774:	f000 f8e0 	bl	800a938 <fiprintf>
 800a778:	f000 f9a5 	bl	800aac6 <abort>
 800a77c:	4b04      	ldr	r3, [pc, #16]	; (800a790 <__assert_func+0x38>)
 800a77e:	461c      	mov	r4, r3
 800a780:	e7f3      	b.n	800a76a <__assert_func+0x12>
 800a782:	bf00      	nop
 800a784:	2000000c 	.word	0x2000000c
 800a788:	0800aee5 	.word	0x0800aee5
 800a78c:	0800aef2 	.word	0x0800aef2
 800a790:	0800af20 	.word	0x0800af20

0800a794 <_close_r>:
 800a794:	b538      	push	{r3, r4, r5, lr}
 800a796:	4d06      	ldr	r5, [pc, #24]	; (800a7b0 <_close_r+0x1c>)
 800a798:	2300      	movs	r3, #0
 800a79a:	4604      	mov	r4, r0
 800a79c:	4608      	mov	r0, r1
 800a79e:	602b      	str	r3, [r5, #0]
 800a7a0:	f7f8 f856 	bl	8002850 <_close>
 800a7a4:	1c43      	adds	r3, r0, #1
 800a7a6:	d102      	bne.n	800a7ae <_close_r+0x1a>
 800a7a8:	682b      	ldr	r3, [r5, #0]
 800a7aa:	b103      	cbz	r3, 800a7ae <_close_r+0x1a>
 800a7ac:	6023      	str	r3, [r4, #0]
 800a7ae:	bd38      	pop	{r3, r4, r5, pc}
 800a7b0:	20000a6c 	.word	0x20000a6c

0800a7b4 <__sflush_r>:
 800a7b4:	898a      	ldrh	r2, [r1, #12]
 800a7b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ba:	4605      	mov	r5, r0
 800a7bc:	0710      	lsls	r0, r2, #28
 800a7be:	460c      	mov	r4, r1
 800a7c0:	d458      	bmi.n	800a874 <__sflush_r+0xc0>
 800a7c2:	684b      	ldr	r3, [r1, #4]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	dc05      	bgt.n	800a7d4 <__sflush_r+0x20>
 800a7c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	dc02      	bgt.n	800a7d4 <__sflush_r+0x20>
 800a7ce:	2000      	movs	r0, #0
 800a7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7d6:	2e00      	cmp	r6, #0
 800a7d8:	d0f9      	beq.n	800a7ce <__sflush_r+0x1a>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7e0:	682f      	ldr	r7, [r5, #0]
 800a7e2:	602b      	str	r3, [r5, #0]
 800a7e4:	d032      	beq.n	800a84c <__sflush_r+0x98>
 800a7e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7e8:	89a3      	ldrh	r3, [r4, #12]
 800a7ea:	075a      	lsls	r2, r3, #29
 800a7ec:	d505      	bpl.n	800a7fa <__sflush_r+0x46>
 800a7ee:	6863      	ldr	r3, [r4, #4]
 800a7f0:	1ac0      	subs	r0, r0, r3
 800a7f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7f4:	b10b      	cbz	r3, 800a7fa <__sflush_r+0x46>
 800a7f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7f8:	1ac0      	subs	r0, r0, r3
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a800:	6a21      	ldr	r1, [r4, #32]
 800a802:	4628      	mov	r0, r5
 800a804:	47b0      	blx	r6
 800a806:	1c43      	adds	r3, r0, #1
 800a808:	89a3      	ldrh	r3, [r4, #12]
 800a80a:	d106      	bne.n	800a81a <__sflush_r+0x66>
 800a80c:	6829      	ldr	r1, [r5, #0]
 800a80e:	291d      	cmp	r1, #29
 800a810:	d82c      	bhi.n	800a86c <__sflush_r+0xb8>
 800a812:	4a2a      	ldr	r2, [pc, #168]	; (800a8bc <__sflush_r+0x108>)
 800a814:	40ca      	lsrs	r2, r1
 800a816:	07d6      	lsls	r6, r2, #31
 800a818:	d528      	bpl.n	800a86c <__sflush_r+0xb8>
 800a81a:	2200      	movs	r2, #0
 800a81c:	6062      	str	r2, [r4, #4]
 800a81e:	04d9      	lsls	r1, r3, #19
 800a820:	6922      	ldr	r2, [r4, #16]
 800a822:	6022      	str	r2, [r4, #0]
 800a824:	d504      	bpl.n	800a830 <__sflush_r+0x7c>
 800a826:	1c42      	adds	r2, r0, #1
 800a828:	d101      	bne.n	800a82e <__sflush_r+0x7a>
 800a82a:	682b      	ldr	r3, [r5, #0]
 800a82c:	b903      	cbnz	r3, 800a830 <__sflush_r+0x7c>
 800a82e:	6560      	str	r0, [r4, #84]	; 0x54
 800a830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a832:	602f      	str	r7, [r5, #0]
 800a834:	2900      	cmp	r1, #0
 800a836:	d0ca      	beq.n	800a7ce <__sflush_r+0x1a>
 800a838:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a83c:	4299      	cmp	r1, r3
 800a83e:	d002      	beq.n	800a846 <__sflush_r+0x92>
 800a840:	4628      	mov	r0, r5
 800a842:	f7ff fc29 	bl	800a098 <_free_r>
 800a846:	2000      	movs	r0, #0
 800a848:	6360      	str	r0, [r4, #52]	; 0x34
 800a84a:	e7c1      	b.n	800a7d0 <__sflush_r+0x1c>
 800a84c:	6a21      	ldr	r1, [r4, #32]
 800a84e:	2301      	movs	r3, #1
 800a850:	4628      	mov	r0, r5
 800a852:	47b0      	blx	r6
 800a854:	1c41      	adds	r1, r0, #1
 800a856:	d1c7      	bne.n	800a7e8 <__sflush_r+0x34>
 800a858:	682b      	ldr	r3, [r5, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d0c4      	beq.n	800a7e8 <__sflush_r+0x34>
 800a85e:	2b1d      	cmp	r3, #29
 800a860:	d001      	beq.n	800a866 <__sflush_r+0xb2>
 800a862:	2b16      	cmp	r3, #22
 800a864:	d101      	bne.n	800a86a <__sflush_r+0xb6>
 800a866:	602f      	str	r7, [r5, #0]
 800a868:	e7b1      	b.n	800a7ce <__sflush_r+0x1a>
 800a86a:	89a3      	ldrh	r3, [r4, #12]
 800a86c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a870:	81a3      	strh	r3, [r4, #12]
 800a872:	e7ad      	b.n	800a7d0 <__sflush_r+0x1c>
 800a874:	690f      	ldr	r7, [r1, #16]
 800a876:	2f00      	cmp	r7, #0
 800a878:	d0a9      	beq.n	800a7ce <__sflush_r+0x1a>
 800a87a:	0793      	lsls	r3, r2, #30
 800a87c:	680e      	ldr	r6, [r1, #0]
 800a87e:	bf08      	it	eq
 800a880:	694b      	ldreq	r3, [r1, #20]
 800a882:	600f      	str	r7, [r1, #0]
 800a884:	bf18      	it	ne
 800a886:	2300      	movne	r3, #0
 800a888:	eba6 0807 	sub.w	r8, r6, r7
 800a88c:	608b      	str	r3, [r1, #8]
 800a88e:	f1b8 0f00 	cmp.w	r8, #0
 800a892:	dd9c      	ble.n	800a7ce <__sflush_r+0x1a>
 800a894:	6a21      	ldr	r1, [r4, #32]
 800a896:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a898:	4643      	mov	r3, r8
 800a89a:	463a      	mov	r2, r7
 800a89c:	4628      	mov	r0, r5
 800a89e:	47b0      	blx	r6
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	dc06      	bgt.n	800a8b2 <__sflush_r+0xfe>
 800a8a4:	89a3      	ldrh	r3, [r4, #12]
 800a8a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8aa:	81a3      	strh	r3, [r4, #12]
 800a8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b0:	e78e      	b.n	800a7d0 <__sflush_r+0x1c>
 800a8b2:	4407      	add	r7, r0
 800a8b4:	eba8 0800 	sub.w	r8, r8, r0
 800a8b8:	e7e9      	b.n	800a88e <__sflush_r+0xda>
 800a8ba:	bf00      	nop
 800a8bc:	20400001 	.word	0x20400001

0800a8c0 <_fflush_r>:
 800a8c0:	b538      	push	{r3, r4, r5, lr}
 800a8c2:	690b      	ldr	r3, [r1, #16]
 800a8c4:	4605      	mov	r5, r0
 800a8c6:	460c      	mov	r4, r1
 800a8c8:	b913      	cbnz	r3, 800a8d0 <_fflush_r+0x10>
 800a8ca:	2500      	movs	r5, #0
 800a8cc:	4628      	mov	r0, r5
 800a8ce:	bd38      	pop	{r3, r4, r5, pc}
 800a8d0:	b118      	cbz	r0, 800a8da <_fflush_r+0x1a>
 800a8d2:	6983      	ldr	r3, [r0, #24]
 800a8d4:	b90b      	cbnz	r3, 800a8da <_fflush_r+0x1a>
 800a8d6:	f7fe ff89 	bl	80097ec <__sinit>
 800a8da:	4b14      	ldr	r3, [pc, #80]	; (800a92c <_fflush_r+0x6c>)
 800a8dc:	429c      	cmp	r4, r3
 800a8de:	d11b      	bne.n	800a918 <_fflush_r+0x58>
 800a8e0:	686c      	ldr	r4, [r5, #4]
 800a8e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d0ef      	beq.n	800a8ca <_fflush_r+0xa>
 800a8ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8ec:	07d0      	lsls	r0, r2, #31
 800a8ee:	d404      	bmi.n	800a8fa <_fflush_r+0x3a>
 800a8f0:	0599      	lsls	r1, r3, #22
 800a8f2:	d402      	bmi.n	800a8fa <_fflush_r+0x3a>
 800a8f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8f6:	f7ff f81c 	bl	8009932 <__retarget_lock_acquire_recursive>
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	f7ff ff59 	bl	800a7b4 <__sflush_r>
 800a902:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a904:	07da      	lsls	r2, r3, #31
 800a906:	4605      	mov	r5, r0
 800a908:	d4e0      	bmi.n	800a8cc <_fflush_r+0xc>
 800a90a:	89a3      	ldrh	r3, [r4, #12]
 800a90c:	059b      	lsls	r3, r3, #22
 800a90e:	d4dd      	bmi.n	800a8cc <_fflush_r+0xc>
 800a910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a912:	f7ff f80f 	bl	8009934 <__retarget_lock_release_recursive>
 800a916:	e7d9      	b.n	800a8cc <_fflush_r+0xc>
 800a918:	4b05      	ldr	r3, [pc, #20]	; (800a930 <_fflush_r+0x70>)
 800a91a:	429c      	cmp	r4, r3
 800a91c:	d101      	bne.n	800a922 <_fflush_r+0x62>
 800a91e:	68ac      	ldr	r4, [r5, #8]
 800a920:	e7df      	b.n	800a8e2 <_fflush_r+0x22>
 800a922:	4b04      	ldr	r3, [pc, #16]	; (800a934 <_fflush_r+0x74>)
 800a924:	429c      	cmp	r4, r3
 800a926:	bf08      	it	eq
 800a928:	68ec      	ldreq	r4, [r5, #12]
 800a92a:	e7da      	b.n	800a8e2 <_fflush_r+0x22>
 800a92c:	0800ad38 	.word	0x0800ad38
 800a930:	0800ad58 	.word	0x0800ad58
 800a934:	0800ad18 	.word	0x0800ad18

0800a938 <fiprintf>:
 800a938:	b40e      	push	{r1, r2, r3}
 800a93a:	b503      	push	{r0, r1, lr}
 800a93c:	4601      	mov	r1, r0
 800a93e:	ab03      	add	r3, sp, #12
 800a940:	4805      	ldr	r0, [pc, #20]	; (800a958 <fiprintf+0x20>)
 800a942:	f853 2b04 	ldr.w	r2, [r3], #4
 800a946:	6800      	ldr	r0, [r0, #0]
 800a948:	9301      	str	r3, [sp, #4]
 800a94a:	f7ff fcaf 	bl	800a2ac <_vfiprintf_r>
 800a94e:	b002      	add	sp, #8
 800a950:	f85d eb04 	ldr.w	lr, [sp], #4
 800a954:	b003      	add	sp, #12
 800a956:	4770      	bx	lr
 800a958:	2000000c 	.word	0x2000000c

0800a95c <_lseek_r>:
 800a95c:	b538      	push	{r3, r4, r5, lr}
 800a95e:	4d07      	ldr	r5, [pc, #28]	; (800a97c <_lseek_r+0x20>)
 800a960:	4604      	mov	r4, r0
 800a962:	4608      	mov	r0, r1
 800a964:	4611      	mov	r1, r2
 800a966:	2200      	movs	r2, #0
 800a968:	602a      	str	r2, [r5, #0]
 800a96a:	461a      	mov	r2, r3
 800a96c:	f7f7 ff97 	bl	800289e <_lseek>
 800a970:	1c43      	adds	r3, r0, #1
 800a972:	d102      	bne.n	800a97a <_lseek_r+0x1e>
 800a974:	682b      	ldr	r3, [r5, #0]
 800a976:	b103      	cbz	r3, 800a97a <_lseek_r+0x1e>
 800a978:	6023      	str	r3, [r4, #0]
 800a97a:	bd38      	pop	{r3, r4, r5, pc}
 800a97c:	20000a6c 	.word	0x20000a6c

0800a980 <__swhatbuf_r>:
 800a980:	b570      	push	{r4, r5, r6, lr}
 800a982:	460e      	mov	r6, r1
 800a984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a988:	2900      	cmp	r1, #0
 800a98a:	b096      	sub	sp, #88	; 0x58
 800a98c:	4614      	mov	r4, r2
 800a98e:	461d      	mov	r5, r3
 800a990:	da08      	bge.n	800a9a4 <__swhatbuf_r+0x24>
 800a992:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a996:	2200      	movs	r2, #0
 800a998:	602a      	str	r2, [r5, #0]
 800a99a:	061a      	lsls	r2, r3, #24
 800a99c:	d410      	bmi.n	800a9c0 <__swhatbuf_r+0x40>
 800a99e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9a2:	e00e      	b.n	800a9c2 <__swhatbuf_r+0x42>
 800a9a4:	466a      	mov	r2, sp
 800a9a6:	f000 f895 	bl	800aad4 <_fstat_r>
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	dbf1      	blt.n	800a992 <__swhatbuf_r+0x12>
 800a9ae:	9a01      	ldr	r2, [sp, #4]
 800a9b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a9b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a9b8:	425a      	negs	r2, r3
 800a9ba:	415a      	adcs	r2, r3
 800a9bc:	602a      	str	r2, [r5, #0]
 800a9be:	e7ee      	b.n	800a99e <__swhatbuf_r+0x1e>
 800a9c0:	2340      	movs	r3, #64	; 0x40
 800a9c2:	2000      	movs	r0, #0
 800a9c4:	6023      	str	r3, [r4, #0]
 800a9c6:	b016      	add	sp, #88	; 0x58
 800a9c8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a9cc <__smakebuf_r>:
 800a9cc:	898b      	ldrh	r3, [r1, #12]
 800a9ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9d0:	079d      	lsls	r5, r3, #30
 800a9d2:	4606      	mov	r6, r0
 800a9d4:	460c      	mov	r4, r1
 800a9d6:	d507      	bpl.n	800a9e8 <__smakebuf_r+0x1c>
 800a9d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9dc:	6023      	str	r3, [r4, #0]
 800a9de:	6123      	str	r3, [r4, #16]
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	6163      	str	r3, [r4, #20]
 800a9e4:	b002      	add	sp, #8
 800a9e6:	bd70      	pop	{r4, r5, r6, pc}
 800a9e8:	ab01      	add	r3, sp, #4
 800a9ea:	466a      	mov	r2, sp
 800a9ec:	f7ff ffc8 	bl	800a980 <__swhatbuf_r>
 800a9f0:	9900      	ldr	r1, [sp, #0]
 800a9f2:	4605      	mov	r5, r0
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	f7ff fbbb 	bl	800a170 <_malloc_r>
 800a9fa:	b948      	cbnz	r0, 800aa10 <__smakebuf_r+0x44>
 800a9fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa00:	059a      	lsls	r2, r3, #22
 800aa02:	d4ef      	bmi.n	800a9e4 <__smakebuf_r+0x18>
 800aa04:	f023 0303 	bic.w	r3, r3, #3
 800aa08:	f043 0302 	orr.w	r3, r3, #2
 800aa0c:	81a3      	strh	r3, [r4, #12]
 800aa0e:	e7e3      	b.n	800a9d8 <__smakebuf_r+0xc>
 800aa10:	4b0d      	ldr	r3, [pc, #52]	; (800aa48 <__smakebuf_r+0x7c>)
 800aa12:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa14:	89a3      	ldrh	r3, [r4, #12]
 800aa16:	6020      	str	r0, [r4, #0]
 800aa18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa1c:	81a3      	strh	r3, [r4, #12]
 800aa1e:	9b00      	ldr	r3, [sp, #0]
 800aa20:	6163      	str	r3, [r4, #20]
 800aa22:	9b01      	ldr	r3, [sp, #4]
 800aa24:	6120      	str	r0, [r4, #16]
 800aa26:	b15b      	cbz	r3, 800aa40 <__smakebuf_r+0x74>
 800aa28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	f000 f863 	bl	800aaf8 <_isatty_r>
 800aa32:	b128      	cbz	r0, 800aa40 <__smakebuf_r+0x74>
 800aa34:	89a3      	ldrh	r3, [r4, #12]
 800aa36:	f023 0303 	bic.w	r3, r3, #3
 800aa3a:	f043 0301 	orr.w	r3, r3, #1
 800aa3e:	81a3      	strh	r3, [r4, #12]
 800aa40:	89a0      	ldrh	r0, [r4, #12]
 800aa42:	4305      	orrs	r5, r0
 800aa44:	81a5      	strh	r5, [r4, #12]
 800aa46:	e7cd      	b.n	800a9e4 <__smakebuf_r+0x18>
 800aa48:	08009785 	.word	0x08009785

0800aa4c <__ascii_mbtowc>:
 800aa4c:	b082      	sub	sp, #8
 800aa4e:	b901      	cbnz	r1, 800aa52 <__ascii_mbtowc+0x6>
 800aa50:	a901      	add	r1, sp, #4
 800aa52:	b142      	cbz	r2, 800aa66 <__ascii_mbtowc+0x1a>
 800aa54:	b14b      	cbz	r3, 800aa6a <__ascii_mbtowc+0x1e>
 800aa56:	7813      	ldrb	r3, [r2, #0]
 800aa58:	600b      	str	r3, [r1, #0]
 800aa5a:	7812      	ldrb	r2, [r2, #0]
 800aa5c:	1e10      	subs	r0, r2, #0
 800aa5e:	bf18      	it	ne
 800aa60:	2001      	movne	r0, #1
 800aa62:	b002      	add	sp, #8
 800aa64:	4770      	bx	lr
 800aa66:	4610      	mov	r0, r2
 800aa68:	e7fb      	b.n	800aa62 <__ascii_mbtowc+0x16>
 800aa6a:	f06f 0001 	mvn.w	r0, #1
 800aa6e:	e7f8      	b.n	800aa62 <__ascii_mbtowc+0x16>

0800aa70 <__malloc_lock>:
 800aa70:	4801      	ldr	r0, [pc, #4]	; (800aa78 <__malloc_lock+0x8>)
 800aa72:	f7fe bf5e 	b.w	8009932 <__retarget_lock_acquire_recursive>
 800aa76:	bf00      	nop
 800aa78:	20000a60 	.word	0x20000a60

0800aa7c <__malloc_unlock>:
 800aa7c:	4801      	ldr	r0, [pc, #4]	; (800aa84 <__malloc_unlock+0x8>)
 800aa7e:	f7fe bf59 	b.w	8009934 <__retarget_lock_release_recursive>
 800aa82:	bf00      	nop
 800aa84:	20000a60 	.word	0x20000a60

0800aa88 <_read_r>:
 800aa88:	b538      	push	{r3, r4, r5, lr}
 800aa8a:	4d07      	ldr	r5, [pc, #28]	; (800aaa8 <_read_r+0x20>)
 800aa8c:	4604      	mov	r4, r0
 800aa8e:	4608      	mov	r0, r1
 800aa90:	4611      	mov	r1, r2
 800aa92:	2200      	movs	r2, #0
 800aa94:	602a      	str	r2, [r5, #0]
 800aa96:	461a      	mov	r2, r3
 800aa98:	f7f7 fe9c 	bl	80027d4 <_read>
 800aa9c:	1c43      	adds	r3, r0, #1
 800aa9e:	d102      	bne.n	800aaa6 <_read_r+0x1e>
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	b103      	cbz	r3, 800aaa6 <_read_r+0x1e>
 800aaa4:	6023      	str	r3, [r4, #0]
 800aaa6:	bd38      	pop	{r3, r4, r5, pc}
 800aaa8:	20000a6c 	.word	0x20000a6c

0800aaac <__ascii_wctomb>:
 800aaac:	b149      	cbz	r1, 800aac2 <__ascii_wctomb+0x16>
 800aaae:	2aff      	cmp	r2, #255	; 0xff
 800aab0:	bf85      	ittet	hi
 800aab2:	238a      	movhi	r3, #138	; 0x8a
 800aab4:	6003      	strhi	r3, [r0, #0]
 800aab6:	700a      	strbls	r2, [r1, #0]
 800aab8:	f04f 30ff 	movhi.w	r0, #4294967295
 800aabc:	bf98      	it	ls
 800aabe:	2001      	movls	r0, #1
 800aac0:	4770      	bx	lr
 800aac2:	4608      	mov	r0, r1
 800aac4:	4770      	bx	lr

0800aac6 <abort>:
 800aac6:	b508      	push	{r3, lr}
 800aac8:	2006      	movs	r0, #6
 800aaca:	f000 f84d 	bl	800ab68 <raise>
 800aace:	2001      	movs	r0, #1
 800aad0:	f7f7 fe76 	bl	80027c0 <_exit>

0800aad4 <_fstat_r>:
 800aad4:	b538      	push	{r3, r4, r5, lr}
 800aad6:	4d07      	ldr	r5, [pc, #28]	; (800aaf4 <_fstat_r+0x20>)
 800aad8:	2300      	movs	r3, #0
 800aada:	4604      	mov	r4, r0
 800aadc:	4608      	mov	r0, r1
 800aade:	4611      	mov	r1, r2
 800aae0:	602b      	str	r3, [r5, #0]
 800aae2:	f7f7 fec1 	bl	8002868 <_fstat>
 800aae6:	1c43      	adds	r3, r0, #1
 800aae8:	d102      	bne.n	800aaf0 <_fstat_r+0x1c>
 800aaea:	682b      	ldr	r3, [r5, #0]
 800aaec:	b103      	cbz	r3, 800aaf0 <_fstat_r+0x1c>
 800aaee:	6023      	str	r3, [r4, #0]
 800aaf0:	bd38      	pop	{r3, r4, r5, pc}
 800aaf2:	bf00      	nop
 800aaf4:	20000a6c 	.word	0x20000a6c

0800aaf8 <_isatty_r>:
 800aaf8:	b538      	push	{r3, r4, r5, lr}
 800aafa:	4d06      	ldr	r5, [pc, #24]	; (800ab14 <_isatty_r+0x1c>)
 800aafc:	2300      	movs	r3, #0
 800aafe:	4604      	mov	r4, r0
 800ab00:	4608      	mov	r0, r1
 800ab02:	602b      	str	r3, [r5, #0]
 800ab04:	f7f7 fec0 	bl	8002888 <_isatty>
 800ab08:	1c43      	adds	r3, r0, #1
 800ab0a:	d102      	bne.n	800ab12 <_isatty_r+0x1a>
 800ab0c:	682b      	ldr	r3, [r5, #0]
 800ab0e:	b103      	cbz	r3, 800ab12 <_isatty_r+0x1a>
 800ab10:	6023      	str	r3, [r4, #0]
 800ab12:	bd38      	pop	{r3, r4, r5, pc}
 800ab14:	20000a6c 	.word	0x20000a6c

0800ab18 <_raise_r>:
 800ab18:	291f      	cmp	r1, #31
 800ab1a:	b538      	push	{r3, r4, r5, lr}
 800ab1c:	4604      	mov	r4, r0
 800ab1e:	460d      	mov	r5, r1
 800ab20:	d904      	bls.n	800ab2c <_raise_r+0x14>
 800ab22:	2316      	movs	r3, #22
 800ab24:	6003      	str	r3, [r0, #0]
 800ab26:	f04f 30ff 	mov.w	r0, #4294967295
 800ab2a:	bd38      	pop	{r3, r4, r5, pc}
 800ab2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab2e:	b112      	cbz	r2, 800ab36 <_raise_r+0x1e>
 800ab30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab34:	b94b      	cbnz	r3, 800ab4a <_raise_r+0x32>
 800ab36:	4620      	mov	r0, r4
 800ab38:	f000 f830 	bl	800ab9c <_getpid_r>
 800ab3c:	462a      	mov	r2, r5
 800ab3e:	4601      	mov	r1, r0
 800ab40:	4620      	mov	r0, r4
 800ab42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab46:	f000 b817 	b.w	800ab78 <_kill_r>
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d00a      	beq.n	800ab64 <_raise_r+0x4c>
 800ab4e:	1c59      	adds	r1, r3, #1
 800ab50:	d103      	bne.n	800ab5a <_raise_r+0x42>
 800ab52:	2316      	movs	r3, #22
 800ab54:	6003      	str	r3, [r0, #0]
 800ab56:	2001      	movs	r0, #1
 800ab58:	e7e7      	b.n	800ab2a <_raise_r+0x12>
 800ab5a:	2400      	movs	r4, #0
 800ab5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab60:	4628      	mov	r0, r5
 800ab62:	4798      	blx	r3
 800ab64:	2000      	movs	r0, #0
 800ab66:	e7e0      	b.n	800ab2a <_raise_r+0x12>

0800ab68 <raise>:
 800ab68:	4b02      	ldr	r3, [pc, #8]	; (800ab74 <raise+0xc>)
 800ab6a:	4601      	mov	r1, r0
 800ab6c:	6818      	ldr	r0, [r3, #0]
 800ab6e:	f7ff bfd3 	b.w	800ab18 <_raise_r>
 800ab72:	bf00      	nop
 800ab74:	2000000c 	.word	0x2000000c

0800ab78 <_kill_r>:
 800ab78:	b538      	push	{r3, r4, r5, lr}
 800ab7a:	4d07      	ldr	r5, [pc, #28]	; (800ab98 <_kill_r+0x20>)
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	4604      	mov	r4, r0
 800ab80:	4608      	mov	r0, r1
 800ab82:	4611      	mov	r1, r2
 800ab84:	602b      	str	r3, [r5, #0]
 800ab86:	f7f7 fe0b 	bl	80027a0 <_kill>
 800ab8a:	1c43      	adds	r3, r0, #1
 800ab8c:	d102      	bne.n	800ab94 <_kill_r+0x1c>
 800ab8e:	682b      	ldr	r3, [r5, #0]
 800ab90:	b103      	cbz	r3, 800ab94 <_kill_r+0x1c>
 800ab92:	6023      	str	r3, [r4, #0]
 800ab94:	bd38      	pop	{r3, r4, r5, pc}
 800ab96:	bf00      	nop
 800ab98:	20000a6c 	.word	0x20000a6c

0800ab9c <_getpid_r>:
 800ab9c:	f7f7 bdf8 	b.w	8002790 <_getpid>

0800aba0 <_init>:
 800aba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aba2:	bf00      	nop
 800aba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aba6:	bc08      	pop	{r3}
 800aba8:	469e      	mov	lr, r3
 800abaa:	4770      	bx	lr

0800abac <_fini>:
 800abac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abae:	bf00      	nop
 800abb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abb2:	bc08      	pop	{r3}
 800abb4:	469e      	mov	lr, r3
 800abb6:	4770      	bx	lr
