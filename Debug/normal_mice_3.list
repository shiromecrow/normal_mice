
normal_mice_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800ac10  0800ac10  0001ac10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b084  0800b084  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b084  0800b084  0001b084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b08c  0800b08c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b08c  0800b08c  0001b08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b090  0800b090  0001b090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000894  200001dc  0800b270  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a70  0800b270  00020a70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018365  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b09  00000000  00000000  00038571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  0003c080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c8  00000000  00000000  0003d700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000257cc  00000000  00000000  0003ebc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b811  00000000  00000000  00064394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de974  00000000  00000000  0007fba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e519  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dc8  00000000  00000000  0015e56c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800abf8 	.word	0x0800abf8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800abf8 	.word	0x0800abf8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <lcd_cmd>:
#include "PL_lcd.h"
#include "i2c.h"


void lcd_cmd(uint8_t x)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  uint8_t aTxBuffer[2] = { 0x00, x };
 8000f56:	2300      	movs	r3, #0
 8000f58:	733b      	strb	r3, [r7, #12]
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 8000f5e:	e007      	b.n	8000f70 <lcd_cmd+0x24>
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <lcd_cmd+0x48>)
 8000f62:	f004 f9a3 	bl	80052ac <HAL_I2C_GetError>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b04      	cmp	r3, #4
 8000f6a:	d001      	beq.n	8000f70 <lcd_cmd+0x24>
    {
      Error_Handler();
 8000f6c:	f001 fbd1 	bl	8002712 <Error_Handler>
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 8000f70:	f107 020c 	add.w	r2, r7, #12
 8000f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	217c      	movs	r1, #124	; 0x7c
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <lcd_cmd+0x48>)
 8000f80:	f004 f8a0 	bl	80050c4 <HAL_I2C_Master_Transmit>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1ea      	bne.n	8000f60 <lcd_cmd+0x14>
    }
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000858 	.word	0x20000858

08000f98 <lcd_data>:

void lcd_data(uint8_t x)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  uint8_t aTxBuffer[2] = { 0x40, x };
 8000fa2:	2340      	movs	r3, #64	; 0x40
 8000fa4:	733b      	strb	r3, [r7, #12]
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 8000faa:	e007      	b.n	8000fbc <lcd_data+0x24>
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000fac:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <lcd_data+0x48>)
 8000fae:	f004 f97d 	bl	80052ac <HAL_I2C_GetError>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	d001      	beq.n	8000fbc <lcd_data+0x24>
    {
      Error_Handler();
 8000fb8:	f001 fbab 	bl	8002712 <Error_Handler>
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 8000fbc:	f107 020c 	add.w	r2, r7, #12
 8000fc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	217c      	movs	r1, #124	; 0x7c
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <lcd_data+0x48>)
 8000fcc:	f004 f87a 	bl	80050c4 <HAL_I2C_Master_Transmit>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1ea      	bne.n	8000fac <lcd_data+0x14>
    }
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000858 	.word	0x20000858

08000fe4 <pl_lcd_puts>:

void pl_lcd_puts(const char *s)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  while(*s) lcd_data(*s++);
 8000fec:	e006      	b.n	8000ffc <pl_lcd_puts+0x18>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	607a      	str	r2, [r7, #4]
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ffce 	bl	8000f98 <lcd_data>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1f4      	bne.n	8000fee <pl_lcd_puts+0xa>
}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <pl_lcd_init>:

// param:
//  contrast: 0 ~ 63 (最初は大きくして調整)
void pl_lcd_init(void)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	af00      	add	r7, sp, #0
  // LCD initialize(裏面に記載)
  lcd_cmd(0x38); // function set
 8001012:	2038      	movs	r0, #56	; 0x38
 8001014:	f7ff ff9a 	bl	8000f4c <lcd_cmd>
  lcd_cmd(0x39); // function set
 8001018:	2039      	movs	r0, #57	; 0x39
 800101a:	f7ff ff97 	bl	8000f4c <lcd_cmd>
  lcd_cmd(0x14); // interval osc
 800101e:	2014      	movs	r0, #20
 8001020:	f7ff ff94 	bl	8000f4c <lcd_cmd>
  lcd_cmd(0x70); // contrast low
 8001024:	2070      	movs	r0, #112	; 0x70
 8001026:	f7ff ff91 	bl	8000f4c <lcd_cmd>
  lcd_cmd(0x56); // contrast high / icon / power
 800102a:	2056      	movs	r0, #86	; 0x56
 800102c:	f7ff ff8e 	bl	8000f4c <lcd_cmd>
  lcd_cmd(0x6c); // follower control
 8001030:	206c      	movs	r0, #108	; 0x6c
 8001032:	f7ff ff8b 	bl	8000f4c <lcd_cmd>
  HAL_Delay(300);
 8001036:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800103a:	f002 f87b 	bl	8003134 <HAL_Delay>
  lcd_cmd(0x38); // function set
 800103e:	2038      	movs	r0, #56	; 0x38
 8001040:	f7ff ff84 	bl	8000f4c <lcd_cmd>
  lcd_cmd(0x0c); // display on
 8001044:	200c      	movs	r0, #12
 8001046:	f7ff ff81 	bl	8000f4c <lcd_cmd>
  lcd_cmd(0x01); // clear display
 800104a:	2001      	movs	r0, #1
 800104c:	f7ff ff7e 	bl	8000f4c <lcd_cmd>
  HAL_Delay(2);
 8001050:	2002      	movs	r0, #2
 8001052:	f002 f86f 	bl	8003134 <HAL_Delay>
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}

0800105a <pl_lcd_pos>:

void pl_lcd_move(uint8_t pos){
  lcd_cmd(0x80 | pos);
}

void pl_lcd_pos(uint8_t raw, uint8_t col) {
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	460a      	mov	r2, r1
 8001064:	71fb      	strb	r3, [r7, #7]
 8001066:	4613      	mov	r3, r2
 8001068:	71bb      	strb	r3, [r7, #6]
  lcd_cmd(0x80 | ((raw & 0x01) << 6) | col);
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	019b      	lsls	r3, r3, #6
 800106e:	b2db      	uxtb	r3, r3
 8001070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001074:	b2da      	uxtb	r2, r3
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	4313      	orrs	r3, r2
 800107a:	b2db      	uxtb	r3, r3
 800107c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001080:	b2db      	uxtb	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff62 	bl	8000f4c <lcd_cmd>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <pl_lcd_clear>:

void pl_lcd_clear() {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  lcd_cmd(0x01);
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff ff59 	bl	8000f4c <lcd_cmd>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <pl_motor_init>:
/*	モータの初期化					(pl_speaker_init)	*/
/*******************************************************************/
/*	モータの初期化する。						*/
/*******************************************************************/
void pl_motor_init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0

	  HAL_TIM_Base_Start_IT(&htim1);//motor
 80010a4:	4809      	ldr	r0, [pc, #36]	; (80010cc <pl_motor_init+0x2c>)
 80010a6:	f005 fce3 	bl	8006a70 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim1);//motor
 80010aa:	4808      	ldr	r0, [pc, #32]	; (80010cc <pl_motor_init+0x2c>)
 80010ac:	f001 fe1e 	bl	8002cec <HAL_TIM_PWM_MspInit>

	  HAL_TIM_Base_Start_IT(&htim2);//motor
 80010b0:	4807      	ldr	r0, [pc, #28]	; (80010d0 <pl_motor_init+0x30>)
 80010b2:	f005 fcdd 	bl	8006a70 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim2);//motor
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <pl_motor_init+0x30>)
 80010b8:	f001 fe18 	bl	8002cec <HAL_TIM_PWM_MspInit>

	  pl_L_motor_mode(L_MOTOR_FRONT);
 80010bc:	2001      	movs	r0, #1
 80010be:	f000 f809 	bl	80010d4 <pl_L_motor_mode>
	  pl_R_motor_mode(R_MOTOR_FRONT);
 80010c2:	2001      	movs	r0, #1
 80010c4:	f000 f817 	bl	80010f6 <pl_R_motor_mode>


}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200008a8 	.word	0x200008a8
 80010d0:	200008f4 	.word	0x200008f4

080010d4 <pl_L_motor_mode>:
	HAL_GPIO_WritePin(MD_RESET_GPIO_Port,MD_RESET_Pin,GPIO_PIN_SET);
	HAL_Delay(3);
	HAL_GPIO_WritePin(MD_RESET_GPIO_Port,MD_RESET_Pin,GPIO_PIN_RESET);
}

void pl_L_motor_mode(int l_motor_mode){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MOTOR_CLOCK_L_GPIO_Port,MOTOR_CLOCK_L_Pin,l_motor_mode);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ea:	f003 ff43 	bl	8004f74 <HAL_GPIO_WritePin>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <pl_R_motor_mode>:

void pl_R_motor_mode(int r_motor_mode){
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MOTOR_CLOCK_R_GPIO_Port,MOTOR_CLOCK_R_Pin,r_motor_mode);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	461a      	mov	r2, r3
 8001104:	2102      	movs	r1, #2
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f003 ff33 	bl	8004f74 <HAL_GPIO_WritePin>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 800111e:	4864      	ldr	r0, [pc, #400]	; (80012b0 <pl_callback_getSensor+0x198>)
 8001120:	f002 fc0e 	bl	8003940 <HAL_ADC_Stop_DMA>
	switch (AD_step) {
 8001124:	4b63      	ldr	r3, [pc, #396]	; (80012b4 <pl_callback_getSensor+0x19c>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b02      	cmp	r3, #2
 800112a:	d044      	beq.n	80011b6 <pl_callback_getSensor+0x9e>
 800112c:	2b02      	cmp	r3, #2
 800112e:	dc68      	bgt.n	8001202 <pl_callback_getSensor+0xea>
 8001130:	2b00      	cmp	r3, #0
 8001132:	d002      	beq.n	800113a <pl_callback_getSensor+0x22>
 8001134:	2b01      	cmp	r3, #1
 8001136:	d017      	beq.n	8001168 <pl_callback_getSensor+0x50>
 8001138:	e063      	b.n	8001202 <pl_callback_getSensor+0xea>
		case 0:
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_SET);
 800113a:	2201      	movs	r2, #1
 800113c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001140:	485d      	ldr	r0, [pc, #372]	; (80012b8 <pl_callback_getSensor+0x1a0>)
 8001142:	f003 ff17 	bl	8004f74 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800114c:	485a      	ldr	r0, [pc, #360]	; (80012b8 <pl_callback_getSensor+0x1a0>)
 800114e:	f003 ff11 	bl	8004f74 <HAL_GPIO_WritePin>
					for (j = 0; j <= 500; j++) {
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	e002      	b.n	800115e <pl_callback_getSensor+0x46>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3301      	adds	r3, #1
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001164:	ddf8      	ble.n	8001158 <pl_callback_getSensor+0x40>
					}
			break;
 8001166:	e04c      	b.n	8001202 <pl_callback_getSensor+0xea>
		case 1:
			g_sensor_on[0] = g_ADCBuffer[1];
 8001168:	4b54      	ldr	r3, [pc, #336]	; (80012bc <pl_callback_getSensor+0x1a4>)
 800116a:	885a      	ldrh	r2, [r3, #2]
 800116c:	4b54      	ldr	r3, [pc, #336]	; (80012c0 <pl_callback_getSensor+0x1a8>)
 800116e:	801a      	strh	r2, [r3, #0]
			g_sensor_on[1] = g_ADCBuffer[2];
 8001170:	4b52      	ldr	r3, [pc, #328]	; (80012bc <pl_callback_getSensor+0x1a4>)
 8001172:	889a      	ldrh	r2, [r3, #4]
 8001174:	4b52      	ldr	r3, [pc, #328]	; (80012c0 <pl_callback_getSensor+0x1a8>)
 8001176:	805a      	strh	r2, [r3, #2]
			g_sensor_off[2] = g_ADCBuffer[3];
 8001178:	4b50      	ldr	r3, [pc, #320]	; (80012bc <pl_callback_getSensor+0x1a4>)
 800117a:	88da      	ldrh	r2, [r3, #6]
 800117c:	4b51      	ldr	r3, [pc, #324]	; (80012c4 <pl_callback_getSensor+0x1ac>)
 800117e:	809a      	strh	r2, [r3, #4]
			g_sensor_off[3] = g_ADCBuffer[4];
 8001180:	4b4e      	ldr	r3, [pc, #312]	; (80012bc <pl_callback_getSensor+0x1a4>)
 8001182:	891a      	ldrh	r2, [r3, #8]
 8001184:	4b4f      	ldr	r3, [pc, #316]	; (80012c4 <pl_callback_getSensor+0x1ac>)
 8001186:	80da      	strh	r2, [r3, #6]
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800118e:	484a      	ldr	r0, [pc, #296]	; (80012b8 <pl_callback_getSensor+0x1a0>)
 8001190:	f003 fef0 	bl	8004f74 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_SET);
 8001194:	2201      	movs	r2, #1
 8001196:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800119a:	4847      	ldr	r0, [pc, #284]	; (80012b8 <pl_callback_getSensor+0x1a0>)
 800119c:	f003 feea 	bl	8004f74 <HAL_GPIO_WritePin>
					for (j = 0; j <= 500; j++) {
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	e002      	b.n	80011ac <pl_callback_getSensor+0x94>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3301      	adds	r3, #1
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011b2:	ddf8      	ble.n	80011a6 <pl_callback_getSensor+0x8e>
					}
			break;
 80011b4:	e025      	b.n	8001202 <pl_callback_getSensor+0xea>
		case 2:
			g_sensor_off[0] = g_ADCBuffer[1];
 80011b6:	4b41      	ldr	r3, [pc, #260]	; (80012bc <pl_callback_getSensor+0x1a4>)
 80011b8:	885a      	ldrh	r2, [r3, #2]
 80011ba:	4b42      	ldr	r3, [pc, #264]	; (80012c4 <pl_callback_getSensor+0x1ac>)
 80011bc:	801a      	strh	r2, [r3, #0]
			g_sensor_off[1] = g_ADCBuffer[2];
 80011be:	4b3f      	ldr	r3, [pc, #252]	; (80012bc <pl_callback_getSensor+0x1a4>)
 80011c0:	889a      	ldrh	r2, [r3, #4]
 80011c2:	4b40      	ldr	r3, [pc, #256]	; (80012c4 <pl_callback_getSensor+0x1ac>)
 80011c4:	805a      	strh	r2, [r3, #2]
			g_sensor_on[2] = g_ADCBuffer[3];
 80011c6:	4b3d      	ldr	r3, [pc, #244]	; (80012bc <pl_callback_getSensor+0x1a4>)
 80011c8:	88da      	ldrh	r2, [r3, #6]
 80011ca:	4b3d      	ldr	r3, [pc, #244]	; (80012c0 <pl_callback_getSensor+0x1a8>)
 80011cc:	809a      	strh	r2, [r3, #4]
			g_sensor_on[3] = g_ADCBuffer[4];
 80011ce:	4b3b      	ldr	r3, [pc, #236]	; (80012bc <pl_callback_getSensor+0x1a4>)
 80011d0:	891a      	ldrh	r2, [r3, #8]
 80011d2:	4b3b      	ldr	r3, [pc, #236]	; (80012c0 <pl_callback_getSensor+0x1a8>)
 80011d4:	80da      	strh	r2, [r3, #6]
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011dc:	4836      	ldr	r0, [pc, #216]	; (80012b8 <pl_callback_getSensor+0x1a0>)
 80011de:	f003 fec9 	bl	8004f74 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e8:	4833      	ldr	r0, [pc, #204]	; (80012b8 <pl_callback_getSensor+0x1a0>)
 80011ea:	f003 fec3 	bl	8004f74 <HAL_GPIO_WritePin>
					for (j = 0; j <= 10; j++) {
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	e002      	b.n	80011fa <pl_callback_getSensor+0xe2>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3301      	adds	r3, #1
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b0a      	cmp	r3, #10
 80011fe:	ddf9      	ble.n	80011f4 <pl_callback_getSensor+0xdc>
					}
			break;
 8001200:	bf00      	nop
	}
	V_battAD = g_ADCBuffer[0];
 8001202:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <pl_callback_getSensor+0x1a4>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 1023 * (100.0 + 22.0) / 22.0;
 8001208:	887b      	ldrh	r3, [r7, #2]
 800120a:	ee07 3a90 	vmov	s15, r3
 800120e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001212:	ee17 0a90 	vmov	r0, s15
 8001216:	f7ff f997 	bl	8000548 <__aeabi_f2d>
 800121a:	a321      	add	r3, pc, #132	; (adr r3, 80012a0 <pl_callback_getSensor+0x188>)
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	f7ff f9ea 	bl	80005f8 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	a31e      	add	r3, pc, #120	; (adr r3, 80012a8 <pl_callback_getSensor+0x190>)
 800122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001232:	f7ff fb0b 	bl	800084c <__aeabi_ddiv>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <pl_callback_getSensor+0x1b0>)
 8001244:	f7ff f9d8 	bl	80005f8 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <pl_callback_getSensor+0x1b4>)
 8001256:	f7ff faf9 	bl	800084c <__aeabi_ddiv>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f7ff fca1 	bl	8000ba8 <__aeabi_d2f>
 8001266:	4603      	mov	r3, r0
 8001268:	4a19      	ldr	r2, [pc, #100]	; (80012d0 <pl_callback_getSensor+0x1b8>)
 800126a:	6013      	str	r3, [r2, #0]
		AD_step++;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <pl_callback_getSensor+0x19c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <pl_callback_getSensor+0x19c>)
 8001276:	701a      	strb	r2, [r3, #0]

		if (AD_step != 3) {
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <pl_callback_getSensor+0x19c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b03      	cmp	r3, #3
 800127e:	d005      	beq.n	800128c <pl_callback_getSensor+0x174>
			HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
 8001280:	2205      	movs	r2, #5
 8001282:	490e      	ldr	r1, [pc, #56]	; (80012bc <pl_callback_getSensor+0x1a4>)
 8001284:	480a      	ldr	r0, [pc, #40]	; (80012b0 <pl_callback_getSensor+0x198>)
 8001286:	f002 fad7 	bl	8003838 <HAL_ADC_Start_DMA>
		} else {
			AD_step = 0;

		}

}
 800128a:	e002      	b.n	8001292 <pl_callback_getSensor+0x17a>
			AD_step = 0;
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <pl_callback_getSensor+0x19c>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	f3af 8000 	nop.w
 80012a0:	66666666 	.word	0x66666666
 80012a4:	400a6666 	.word	0x400a6666
 80012a8:	00000000 	.word	0x00000000
 80012ac:	408ff800 	.word	0x408ff800
 80012b0:	200007ac 	.word	0x200007ac
 80012b4:	20000202 	.word	0x20000202
 80012b8:	48000800 	.word	0x48000800
 80012bc:	200001f8 	.word	0x200001f8
 80012c0:	20000204 	.word	0x20000204
 80012c4:	2000020c 	.word	0x2000020c
 80012c8:	405e8000 	.word	0x405e8000
 80012cc:	40360000 	.word	0x40360000
 80012d0:	20000214 	.word	0x20000214

080012d4 <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	if (sensor_mode == 1) {
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <pl_interupt_getSensor+0x1c>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d104      	bne.n	80012ea <pl_interupt_getSensor+0x16>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
 80012e0:	2205      	movs	r2, #5
 80012e2:	4904      	ldr	r1, [pc, #16]	; (80012f4 <pl_interupt_getSensor+0x20>)
 80012e4:	4804      	ldr	r0, [pc, #16]	; (80012f8 <pl_interupt_getSensor+0x24>)
 80012e6:	f002 faa7 	bl	8003838 <HAL_ADC_Start_DMA>
				sizeof(g_ADCBuffer) / sizeof(uint16_t));
	}

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000203 	.word	0x20000203
 80012f4:	200001f8 	.word	0x200001f8
 80012f8:	200007ac 	.word	0x200007ac

080012fc <pl_speaker_init>:
/*	スピーカーの初期化					(pl_speaker_init)	*/
/*******************************************************************/
/*	スピーカーの初期化する。						*/
/*******************************************************************/
void pl_speaker_init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0

	  HAL_TIM_Base_Start_IT(&htim15);//speaker
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <pl_speaker_init+0x1c>)
 8001302:	f005 fbb5 	bl	8006a70 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim15);//speaker
 8001306:	4804      	ldr	r0, [pc, #16]	; (8001318 <pl_speaker_init+0x1c>)
 8001308:	f001 fcf0 	bl	8002cec <HAL_TIM_PWM_MspInit>

	  inputseria();
 800130c:	f000 f850 	bl	80013b0 <inputseria>
	  inputZelda_nazo();
 8001310:	f000 f804 	bl	800131c <inputZelda_nazo>


}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2000098c 	.word	0x2000098c

0800131c <inputZelda_nazo>:
/*******************************************************************/
/*	音楽用構造体配列の入力					(input)	*/
/*******************************************************************/
/*	音楽用の構造体を定義してる．						*/
/*******************************************************************/
void inputZelda_nazo(void) {
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
	Zelda_nazo[0].interval = 1480;
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <inputZelda_nazo+0x70>)
 8001322:	4a1b      	ldr	r2, [pc, #108]	; (8001390 <inputZelda_nazo+0x74>)
 8001324:	601a      	str	r2, [r3, #0]
	Zelda_nazo[0].waittime = 19 * 7;
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <inputZelda_nazo+0x70>)
 8001328:	2285      	movs	r2, #133	; 0x85
 800132a:	809a      	strh	r2, [r3, #4]
	Zelda_nazo[1].interval = 1397;
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <inputZelda_nazo+0x70>)
 800132e:	4a19      	ldr	r2, [pc, #100]	; (8001394 <inputZelda_nazo+0x78>)
 8001330:	609a      	str	r2, [r3, #8]
	Zelda_nazo[1].waittime = 19 * 7;
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <inputZelda_nazo+0x70>)
 8001334:	2285      	movs	r2, #133	; 0x85
 8001336:	819a      	strh	r2, [r3, #12]
	Zelda_nazo[2].interval = 1175;
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <inputZelda_nazo+0x70>)
 800133a:	4a17      	ldr	r2, [pc, #92]	; (8001398 <inputZelda_nazo+0x7c>)
 800133c:	611a      	str	r2, [r3, #16]
	Zelda_nazo[2].waittime = 19 * 7;
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <inputZelda_nazo+0x70>)
 8001340:	2285      	movs	r2, #133	; 0x85
 8001342:	829a      	strh	r2, [r3, #20]
	Zelda_nazo[3].interval = 831;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <inputZelda_nazo+0x70>)
 8001346:	4a15      	ldr	r2, [pc, #84]	; (800139c <inputZelda_nazo+0x80>)
 8001348:	619a      	str	r2, [r3, #24]
	Zelda_nazo[3].waittime = 19 * 7;
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <inputZelda_nazo+0x70>)
 800134c:	2285      	movs	r2, #133	; 0x85
 800134e:	839a      	strh	r2, [r3, #28]
	Zelda_nazo[4].interval = 784;
 8001350:	4b0e      	ldr	r3, [pc, #56]	; (800138c <inputZelda_nazo+0x70>)
 8001352:	4a13      	ldr	r2, [pc, #76]	; (80013a0 <inputZelda_nazo+0x84>)
 8001354:	621a      	str	r2, [r3, #32]
	Zelda_nazo[4].waittime = 19 * 7;
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <inputZelda_nazo+0x70>)
 8001358:	2285      	movs	r2, #133	; 0x85
 800135a:	849a      	strh	r2, [r3, #36]	; 0x24
	Zelda_nazo[5].interval = 1245;
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <inputZelda_nazo+0x70>)
 800135e:	4a11      	ldr	r2, [pc, #68]	; (80013a4 <inputZelda_nazo+0x88>)
 8001360:	629a      	str	r2, [r3, #40]	; 0x28
	Zelda_nazo[5].waittime = 19 * 7;
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <inputZelda_nazo+0x70>)
 8001364:	2285      	movs	r2, #133	; 0x85
 8001366:	859a      	strh	r2, [r3, #44]	; 0x2c
	Zelda_nazo[6].interval = 1568;
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <inputZelda_nazo+0x70>)
 800136a:	4a0f      	ldr	r2, [pc, #60]	; (80013a8 <inputZelda_nazo+0x8c>)
 800136c:	631a      	str	r2, [r3, #48]	; 0x30
	Zelda_nazo[6].waittime = 19 * 7;
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <inputZelda_nazo+0x70>)
 8001370:	2285      	movs	r2, #133	; 0x85
 8001372:	869a      	strh	r2, [r3, #52]	; 0x34
	Zelda_nazo[7].interval = 1976;
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <inputZelda_nazo+0x70>)
 8001376:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <inputZelda_nazo+0x90>)
 8001378:	639a      	str	r2, [r3, #56]	; 0x38
	Zelda_nazo[7].waittime = 99 * 7;
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <inputZelda_nazo+0x70>)
 800137c:	f240 22b5 	movw	r2, #693	; 0x2b5
 8001380:	879a      	strh	r2, [r3, #60]	; 0x3c

}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	20000768 	.word	0x20000768
 8001390:	44b90000 	.word	0x44b90000
 8001394:	44aea000 	.word	0x44aea000
 8001398:	4492e000 	.word	0x4492e000
 800139c:	444fc000 	.word	0x444fc000
 80013a0:	44440000 	.word	0x44440000
 80013a4:	449ba000 	.word	0x449ba000
 80013a8:	44c40000 	.word	0x44c40000
 80013ac:	44f70000 	.word	0x44f70000

080013b0 <inputseria>:


void inputseria(void) {
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
	seria[0].interval = 698;
 80013b4:	4bad      	ldr	r3, [pc, #692]	; (800166c <inputseria+0x2bc>)
 80013b6:	4aae      	ldr	r2, [pc, #696]	; (8001670 <inputseria+0x2c0>)
 80013b8:	601a      	str	r2, [r3, #0]
	seria[0].waittime = 224;
 80013ba:	4bac      	ldr	r3, [pc, #688]	; (800166c <inputseria+0x2bc>)
 80013bc:	22e0      	movs	r2, #224	; 0xe0
 80013be:	809a      	strh	r2, [r3, #4]
	seria[1].interval = 880;
 80013c0:	4baa      	ldr	r3, [pc, #680]	; (800166c <inputseria+0x2bc>)
 80013c2:	4aac      	ldr	r2, [pc, #688]	; (8001674 <inputseria+0x2c4>)
 80013c4:	609a      	str	r2, [r3, #8]
	seria[1].waittime = 224;
 80013c6:	4ba9      	ldr	r3, [pc, #676]	; (800166c <inputseria+0x2bc>)
 80013c8:	22e0      	movs	r2, #224	; 0xe0
 80013ca:	819a      	strh	r2, [r3, #12]
	seria[2].interval = 988;
 80013cc:	4ba7      	ldr	r3, [pc, #668]	; (800166c <inputseria+0x2bc>)
 80013ce:	4aaa      	ldr	r2, [pc, #680]	; (8001678 <inputseria+0x2c8>)
 80013d0:	611a      	str	r2, [r3, #16]
	seria[2].waittime = 462;
 80013d2:	4ba6      	ldr	r3, [pc, #664]	; (800166c <inputseria+0x2bc>)
 80013d4:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80013d8:	829a      	strh	r2, [r3, #20]
	seria[3].interval = 698;
 80013da:	4ba4      	ldr	r3, [pc, #656]	; (800166c <inputseria+0x2bc>)
 80013dc:	4aa4      	ldr	r2, [pc, #656]	; (8001670 <inputseria+0x2c0>)
 80013de:	619a      	str	r2, [r3, #24]
	seria[3].waittime = 224;
 80013e0:	4ba2      	ldr	r3, [pc, #648]	; (800166c <inputseria+0x2bc>)
 80013e2:	22e0      	movs	r2, #224	; 0xe0
 80013e4:	839a      	strh	r2, [r3, #28]
	seria[4].interval = 880;
 80013e6:	4ba1      	ldr	r3, [pc, #644]	; (800166c <inputseria+0x2bc>)
 80013e8:	4aa2      	ldr	r2, [pc, #648]	; (8001674 <inputseria+0x2c4>)
 80013ea:	621a      	str	r2, [r3, #32]
	seria[4].waittime = 224;
 80013ec:	4b9f      	ldr	r3, [pc, #636]	; (800166c <inputseria+0x2bc>)
 80013ee:	22e0      	movs	r2, #224	; 0xe0
 80013f0:	849a      	strh	r2, [r3, #36]	; 0x24
	seria[5].interval = 988;
 80013f2:	4b9e      	ldr	r3, [pc, #632]	; (800166c <inputseria+0x2bc>)
 80013f4:	4aa0      	ldr	r2, [pc, #640]	; (8001678 <inputseria+0x2c8>)
 80013f6:	629a      	str	r2, [r3, #40]	; 0x28
	seria[5].waittime = 462;
 80013f8:	4b9c      	ldr	r3, [pc, #624]	; (800166c <inputseria+0x2bc>)
 80013fa:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80013fe:	859a      	strh	r2, [r3, #44]	; 0x2c
	seria[6].interval = 698;
 8001400:	4b9a      	ldr	r3, [pc, #616]	; (800166c <inputseria+0x2bc>)
 8001402:	4a9b      	ldr	r2, [pc, #620]	; (8001670 <inputseria+0x2c0>)
 8001404:	631a      	str	r2, [r3, #48]	; 0x30
	seria[6].waittime = 224;
 8001406:	4b99      	ldr	r3, [pc, #612]	; (800166c <inputseria+0x2bc>)
 8001408:	22e0      	movs	r2, #224	; 0xe0
 800140a:	869a      	strh	r2, [r3, #52]	; 0x34
	seria[7].interval = 880;
 800140c:	4b97      	ldr	r3, [pc, #604]	; (800166c <inputseria+0x2bc>)
 800140e:	4a99      	ldr	r2, [pc, #612]	; (8001674 <inputseria+0x2c4>)
 8001410:	639a      	str	r2, [r3, #56]	; 0x38
	seria[7].waittime = 224;
 8001412:	4b96      	ldr	r3, [pc, #600]	; (800166c <inputseria+0x2bc>)
 8001414:	22e0      	movs	r2, #224	; 0xe0
 8001416:	879a      	strh	r2, [r3, #60]	; 0x3c
	seria[8].interval = 988;
 8001418:	4b94      	ldr	r3, [pc, #592]	; (800166c <inputseria+0x2bc>)
 800141a:	4a97      	ldr	r2, [pc, #604]	; (8001678 <inputseria+0x2c8>)
 800141c:	641a      	str	r2, [r3, #64]	; 0x40
	seria[8].waittime = 224;
 800141e:	4b93      	ldr	r3, [pc, #588]	; (800166c <inputseria+0x2bc>)
 8001420:	22e0      	movs	r2, #224	; 0xe0
 8001422:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	seria[9].interval = 1319;
 8001426:	4b91      	ldr	r3, [pc, #580]	; (800166c <inputseria+0x2bc>)
 8001428:	4a94      	ldr	r2, [pc, #592]	; (800167c <inputseria+0x2cc>)
 800142a:	649a      	str	r2, [r3, #72]	; 0x48
	seria[9].waittime = 224;
 800142c:	4b8f      	ldr	r3, [pc, #572]	; (800166c <inputseria+0x2bc>)
 800142e:	22e0      	movs	r2, #224	; 0xe0
 8001430:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	seria[10].interval = 1175;
 8001434:	4b8d      	ldr	r3, [pc, #564]	; (800166c <inputseria+0x2bc>)
 8001436:	4a92      	ldr	r2, [pc, #584]	; (8001680 <inputseria+0x2d0>)
 8001438:	651a      	str	r2, [r3, #80]	; 0x50
	seria[10].waittime = 462;
 800143a:	4b8c      	ldr	r3, [pc, #560]	; (800166c <inputseria+0x2bc>)
 800143c:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001440:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	seria[11].interval = 988;
 8001444:	4b89      	ldr	r3, [pc, #548]	; (800166c <inputseria+0x2bc>)
 8001446:	4a8c      	ldr	r2, [pc, #560]	; (8001678 <inputseria+0x2c8>)
 8001448:	659a      	str	r2, [r3, #88]	; 0x58
	seria[11].waittime = 224;
 800144a:	4b88      	ldr	r3, [pc, #544]	; (800166c <inputseria+0x2bc>)
 800144c:	22e0      	movs	r2, #224	; 0xe0
 800144e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	seria[12].interval = 1047;
 8001452:	4b86      	ldr	r3, [pc, #536]	; (800166c <inputseria+0x2bc>)
 8001454:	4a8b      	ldr	r2, [pc, #556]	; (8001684 <inputseria+0x2d4>)
 8001456:	661a      	str	r2, [r3, #96]	; 0x60
	seria[12].waittime = 224;
 8001458:	4b84      	ldr	r3, [pc, #528]	; (800166c <inputseria+0x2bc>)
 800145a:	22e0      	movs	r2, #224	; 0xe0
 800145c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	seria[13].interval = 988;
 8001460:	4b82      	ldr	r3, [pc, #520]	; (800166c <inputseria+0x2bc>)
 8001462:	4a85      	ldr	r2, [pc, #532]	; (8001678 <inputseria+0x2c8>)
 8001464:	669a      	str	r2, [r3, #104]	; 0x68
	seria[13].waittime = 224;
 8001466:	4b81      	ldr	r3, [pc, #516]	; (800166c <inputseria+0x2bc>)
 8001468:	22e0      	movs	r2, #224	; 0xe0
 800146a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	seria[14].interval = 784;
 800146e:	4b7f      	ldr	r3, [pc, #508]	; (800166c <inputseria+0x2bc>)
 8001470:	4a85      	ldr	r2, [pc, #532]	; (8001688 <inputseria+0x2d8>)
 8001472:	671a      	str	r2, [r3, #112]	; 0x70
	seria[14].waittime = 224;
 8001474:	4b7d      	ldr	r3, [pc, #500]	; (800166c <inputseria+0x2bc>)
 8001476:	22e0      	movs	r2, #224	; 0xe0
 8001478:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	seria[15].interval = 659;
 800147c:	4b7b      	ldr	r3, [pc, #492]	; (800166c <inputseria+0x2bc>)
 800147e:	4a83      	ldr	r2, [pc, #524]	; (800168c <inputseria+0x2dc>)
 8001480:	679a      	str	r2, [r3, #120]	; 0x78
	seria[15].waittime = 1169;
 8001482:	4b7a      	ldr	r3, [pc, #488]	; (800166c <inputseria+0x2bc>)
 8001484:	f240 4291 	movw	r2, #1169	; 0x491
 8001488:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	seria[16].interval = 587;
 800148c:	4b77      	ldr	r3, [pc, #476]	; (800166c <inputseria+0x2bc>)
 800148e:	4a80      	ldr	r2, [pc, #512]	; (8001690 <inputseria+0x2e0>)
 8001490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	seria[16].waittime = 224;
 8001494:	4b75      	ldr	r3, [pc, #468]	; (800166c <inputseria+0x2bc>)
 8001496:	22e0      	movs	r2, #224	; 0xe0
 8001498:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	seria[17].interval = 659;
 800149c:	4b73      	ldr	r3, [pc, #460]	; (800166c <inputseria+0x2bc>)
 800149e:	4a7b      	ldr	r2, [pc, #492]	; (800168c <inputseria+0x2dc>)
 80014a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	seria[17].waittime = 224;
 80014a4:	4b71      	ldr	r3, [pc, #452]	; (800166c <inputseria+0x2bc>)
 80014a6:	22e0      	movs	r2, #224	; 0xe0
 80014a8:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	seria[18].interval = 784;
 80014ac:	4b6f      	ldr	r3, [pc, #444]	; (800166c <inputseria+0x2bc>)
 80014ae:	4a76      	ldr	r2, [pc, #472]	; (8001688 <inputseria+0x2d8>)
 80014b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	seria[18].waittime = 224;
 80014b4:	4b6d      	ldr	r3, [pc, #436]	; (800166c <inputseria+0x2bc>)
 80014b6:	22e0      	movs	r2, #224	; 0xe0
 80014b8:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	seria[19].interval = 659;
 80014bc:	4b6b      	ldr	r3, [pc, #428]	; (800166c <inputseria+0x2bc>)
 80014be:	4a73      	ldr	r2, [pc, #460]	; (800168c <inputseria+0x2dc>)
 80014c0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	seria[19].waittime = 1400;
 80014c4:	4b69      	ldr	r3, [pc, #420]	; (800166c <inputseria+0x2bc>)
 80014c6:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80014ca:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	seria[20].interval = 698;
 80014ce:	4b67      	ldr	r3, [pc, #412]	; (800166c <inputseria+0x2bc>)
 80014d0:	4a67      	ldr	r2, [pc, #412]	; (8001670 <inputseria+0x2c0>)
 80014d2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	seria[20].waittime = 224;
 80014d6:	4b65      	ldr	r3, [pc, #404]	; (800166c <inputseria+0x2bc>)
 80014d8:	22e0      	movs	r2, #224	; 0xe0
 80014da:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	seria[21].interval = 880;
 80014de:	4b63      	ldr	r3, [pc, #396]	; (800166c <inputseria+0x2bc>)
 80014e0:	4a64      	ldr	r2, [pc, #400]	; (8001674 <inputseria+0x2c4>)
 80014e2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	seria[21].waittime = 224;
 80014e6:	4b61      	ldr	r3, [pc, #388]	; (800166c <inputseria+0x2bc>)
 80014e8:	22e0      	movs	r2, #224	; 0xe0
 80014ea:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	seria[22].interval = 988;
 80014ee:	4b5f      	ldr	r3, [pc, #380]	; (800166c <inputseria+0x2bc>)
 80014f0:	4a61      	ldr	r2, [pc, #388]	; (8001678 <inputseria+0x2c8>)
 80014f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	seria[22].waittime = 462;
 80014f6:	4b5d      	ldr	r3, [pc, #372]	; (800166c <inputseria+0x2bc>)
 80014f8:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80014fc:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	seria[23].interval = 698;
 8001500:	4b5a      	ldr	r3, [pc, #360]	; (800166c <inputseria+0x2bc>)
 8001502:	4a5b      	ldr	r2, [pc, #364]	; (8001670 <inputseria+0x2c0>)
 8001504:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	seria[23].waittime = 224;
 8001508:	4b58      	ldr	r3, [pc, #352]	; (800166c <inputseria+0x2bc>)
 800150a:	22e0      	movs	r2, #224	; 0xe0
 800150c:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
	seria[24].interval = 880;
 8001510:	4b56      	ldr	r3, [pc, #344]	; (800166c <inputseria+0x2bc>)
 8001512:	4a58      	ldr	r2, [pc, #352]	; (8001674 <inputseria+0x2c4>)
 8001514:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	seria[24].waittime = 224;
 8001518:	4b54      	ldr	r3, [pc, #336]	; (800166c <inputseria+0x2bc>)
 800151a:	22e0      	movs	r2, #224	; 0xe0
 800151c:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	seria[25].interval = 988;
 8001520:	4b52      	ldr	r3, [pc, #328]	; (800166c <inputseria+0x2bc>)
 8001522:	4a55      	ldr	r2, [pc, #340]	; (8001678 <inputseria+0x2c8>)
 8001524:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	seria[25].waittime = 462;
 8001528:	4b50      	ldr	r3, [pc, #320]	; (800166c <inputseria+0x2bc>)
 800152a:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800152e:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
	seria[26].interval = 698;
 8001532:	4b4e      	ldr	r3, [pc, #312]	; (800166c <inputseria+0x2bc>)
 8001534:	4a4e      	ldr	r2, [pc, #312]	; (8001670 <inputseria+0x2c0>)
 8001536:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	seria[26].waittime = 224;
 800153a:	4b4c      	ldr	r3, [pc, #304]	; (800166c <inputseria+0x2bc>)
 800153c:	22e0      	movs	r2, #224	; 0xe0
 800153e:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
	seria[27].interval = 880;
 8001542:	4b4a      	ldr	r3, [pc, #296]	; (800166c <inputseria+0x2bc>)
 8001544:	4a4b      	ldr	r2, [pc, #300]	; (8001674 <inputseria+0x2c4>)
 8001546:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	seria[27].waittime = 224;
 800154a:	4b48      	ldr	r3, [pc, #288]	; (800166c <inputseria+0x2bc>)
 800154c:	22e0      	movs	r2, #224	; 0xe0
 800154e:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	seria[28].interval = 988;
 8001552:	4b46      	ldr	r3, [pc, #280]	; (800166c <inputseria+0x2bc>)
 8001554:	4a48      	ldr	r2, [pc, #288]	; (8001678 <inputseria+0x2c8>)
 8001556:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	seria[28].waittime = 224;
 800155a:	4b44      	ldr	r3, [pc, #272]	; (800166c <inputseria+0x2bc>)
 800155c:	22e0      	movs	r2, #224	; 0xe0
 800155e:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	seria[29].interval = 1319;
 8001562:	4b42      	ldr	r3, [pc, #264]	; (800166c <inputseria+0x2bc>)
 8001564:	4a45      	ldr	r2, [pc, #276]	; (800167c <inputseria+0x2cc>)
 8001566:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	seria[29].waittime = 224;
 800156a:	4b40      	ldr	r3, [pc, #256]	; (800166c <inputseria+0x2bc>)
 800156c:	22e0      	movs	r2, #224	; 0xe0
 800156e:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
	seria[30].interval = 1175;
 8001572:	4b3e      	ldr	r3, [pc, #248]	; (800166c <inputseria+0x2bc>)
 8001574:	4a42      	ldr	r2, [pc, #264]	; (8001680 <inputseria+0x2d0>)
 8001576:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	seria[30].waittime = 462;
 800157a:	4b3c      	ldr	r3, [pc, #240]	; (800166c <inputseria+0x2bc>)
 800157c:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001580:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
	seria[31].interval = 988;
 8001584:	4b39      	ldr	r3, [pc, #228]	; (800166c <inputseria+0x2bc>)
 8001586:	4a3c      	ldr	r2, [pc, #240]	; (8001678 <inputseria+0x2c8>)
 8001588:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	seria[31].waittime = 224;
 800158c:	4b37      	ldr	r3, [pc, #220]	; (800166c <inputseria+0x2bc>)
 800158e:	22e0      	movs	r2, #224	; 0xe0
 8001590:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
	seria[32].interval = 1047;
 8001594:	4b35      	ldr	r3, [pc, #212]	; (800166c <inputseria+0x2bc>)
 8001596:	4a3b      	ldr	r2, [pc, #236]	; (8001684 <inputseria+0x2d4>)
 8001598:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	seria[32].waittime = 224;
 800159c:	4b33      	ldr	r3, [pc, #204]	; (800166c <inputseria+0x2bc>)
 800159e:	22e0      	movs	r2, #224	; 0xe0
 80015a0:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	seria[33].interval = 1319;
 80015a4:	4b31      	ldr	r3, [pc, #196]	; (800166c <inputseria+0x2bc>)
 80015a6:	4a35      	ldr	r2, [pc, #212]	; (800167c <inputseria+0x2cc>)
 80015a8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	seria[33].waittime = 224;
 80015ac:	4b2f      	ldr	r3, [pc, #188]	; (800166c <inputseria+0x2bc>)
 80015ae:	22e0      	movs	r2, #224	; 0xe0
 80015b0:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	seria[34].interval = 988;
 80015b4:	4b2d      	ldr	r3, [pc, #180]	; (800166c <inputseria+0x2bc>)
 80015b6:	4a30      	ldr	r2, [pc, #192]	; (8001678 <inputseria+0x2c8>)
 80015b8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	seria[34].waittime = 224;
 80015bc:	4b2b      	ldr	r3, [pc, #172]	; (800166c <inputseria+0x2bc>)
 80015be:	22e0      	movs	r2, #224	; 0xe0
 80015c0:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
	seria[35].interval = 784;
 80015c4:	4b29      	ldr	r3, [pc, #164]	; (800166c <inputseria+0x2bc>)
 80015c6:	4a30      	ldr	r2, [pc, #192]	; (8001688 <inputseria+0x2d8>)
 80015c8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	seria[35].waittime = 1169;
 80015cc:	4b27      	ldr	r3, [pc, #156]	; (800166c <inputseria+0x2bc>)
 80015ce:	f240 4291 	movw	r2, #1169	; 0x491
 80015d2:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
	seria[36].interval = 988;
 80015d6:	4b25      	ldr	r3, [pc, #148]	; (800166c <inputseria+0x2bc>)
 80015d8:	4a27      	ldr	r2, [pc, #156]	; (8001678 <inputseria+0x2c8>)
 80015da:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	seria[36].waittime = 224;
 80015de:	4b23      	ldr	r3, [pc, #140]	; (800166c <inputseria+0x2bc>)
 80015e0:	22e0      	movs	r2, #224	; 0xe0
 80015e2:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
	seria[37].interval = 784;
 80015e6:	4b21      	ldr	r3, [pc, #132]	; (800166c <inputseria+0x2bc>)
 80015e8:	4a27      	ldr	r2, [pc, #156]	; (8001688 <inputseria+0x2d8>)
 80015ea:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	seria[37].waittime = 224;
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <inputseria+0x2bc>)
 80015f0:	22e0      	movs	r2, #224	; 0xe0
 80015f2:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
	seria[38].interval = 587;
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <inputseria+0x2bc>)
 80015f8:	4a25      	ldr	r2, [pc, #148]	; (8001690 <inputseria+0x2e0>)
 80015fa:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	seria[38].waittime = 224;
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <inputseria+0x2bc>)
 8001600:	22e0      	movs	r2, #224	; 0xe0
 8001602:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	seria[39].interval = 659;
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <inputseria+0x2bc>)
 8001608:	4a20      	ldr	r2, [pc, #128]	; (800168c <inputseria+0x2dc>)
 800160a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	seria[39].waittime = 1400;
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <inputseria+0x2bc>)
 8001610:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8001614:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
	seria[40].interval = 294;
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <inputseria+0x2bc>)
 800161a:	4a1e      	ldr	r2, [pc, #120]	; (8001694 <inputseria+0x2e4>)
 800161c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	seria[40].waittime = 224;
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <inputseria+0x2bc>)
 8001622:	22e0      	movs	r2, #224	; 0xe0
 8001624:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
	seria[41].interval = 330;
 8001628:	4b10      	ldr	r3, [pc, #64]	; (800166c <inputseria+0x2bc>)
 800162a:	4a1b      	ldr	r2, [pc, #108]	; (8001698 <inputseria+0x2e8>)
 800162c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	seria[41].waittime = 224;
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <inputseria+0x2bc>)
 8001632:	22e0      	movs	r2, #224	; 0xe0
 8001634:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
	seria[42].interval = 349;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <inputseria+0x2bc>)
 800163a:	4a18      	ldr	r2, [pc, #96]	; (800169c <inputseria+0x2ec>)
 800163c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	seria[42].waittime = 462;
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <inputseria+0x2bc>)
 8001642:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001646:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	seria[43].interval = 392;
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <inputseria+0x2bc>)
 800164c:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <inputseria+0x2f0>)
 800164e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	seria[43].waittime = 224;
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <inputseria+0x2bc>)
 8001654:	22e0      	movs	r2, #224	; 0xe0
 8001656:	f8a3 215c 	strh.w	r2, [r3, #348]	; 0x15c
	seria[44].interval = 440;
 800165a:	4b04      	ldr	r3, [pc, #16]	; (800166c <inputseria+0x2bc>)
 800165c:	4a11      	ldr	r2, [pc, #68]	; (80016a4 <inputseria+0x2f4>)
 800165e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	seria[44].waittime = 224;
 8001662:	4b02      	ldr	r3, [pc, #8]	; (800166c <inputseria+0x2bc>)
 8001664:	22e0      	movs	r2, #224	; 0xe0
 8001666:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 800166a:	e01d      	b.n	80016a8 <inputseria+0x2f8>
 800166c:	20000218 	.word	0x20000218
 8001670:	442e8000 	.word	0x442e8000
 8001674:	445c0000 	.word	0x445c0000
 8001678:	44770000 	.word	0x44770000
 800167c:	44a4e000 	.word	0x44a4e000
 8001680:	4492e000 	.word	0x4492e000
 8001684:	4482e000 	.word	0x4482e000
 8001688:	44440000 	.word	0x44440000
 800168c:	4424c000 	.word	0x4424c000
 8001690:	4412c000 	.word	0x4412c000
 8001694:	43930000 	.word	0x43930000
 8001698:	43a50000 	.word	0x43a50000
 800169c:	43ae8000 	.word	0x43ae8000
 80016a0:	43c40000 	.word	0x43c40000
 80016a4:	43dc0000 	.word	0x43dc0000
	seria[45].interval = 494;
 80016a8:	4bb9      	ldr	r3, [pc, #740]	; (8001990 <inputseria+0x5e0>)
 80016aa:	4aba      	ldr	r2, [pc, #744]	; (8001994 <inputseria+0x5e4>)
 80016ac:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	seria[45].waittime = 462;
 80016b0:	4bb7      	ldr	r3, [pc, #732]	; (8001990 <inputseria+0x5e0>)
 80016b2:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80016b6:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
	seria[46].interval = 523;
 80016ba:	4bb5      	ldr	r3, [pc, #724]	; (8001990 <inputseria+0x5e0>)
 80016bc:	4ab6      	ldr	r2, [pc, #728]	; (8001998 <inputseria+0x5e8>)
 80016be:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	seria[46].waittime = 224;
 80016c2:	4bb3      	ldr	r3, [pc, #716]	; (8001990 <inputseria+0x5e0>)
 80016c4:	22e0      	movs	r2, #224	; 0xe0
 80016c6:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	seria[47].interval = 494;
 80016ca:	4bb1      	ldr	r3, [pc, #708]	; (8001990 <inputseria+0x5e0>)
 80016cc:	4ab1      	ldr	r2, [pc, #708]	; (8001994 <inputseria+0x5e4>)
 80016ce:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	seria[47].waittime = 224;
 80016d2:	4baf      	ldr	r3, [pc, #700]	; (8001990 <inputseria+0x5e0>)
 80016d4:	22e0      	movs	r2, #224	; 0xe0
 80016d6:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	seria[48].interval = 330;
 80016da:	4bad      	ldr	r3, [pc, #692]	; (8001990 <inputseria+0x5e0>)
 80016dc:	4aaf      	ldr	r2, [pc, #700]	; (800199c <inputseria+0x5ec>)
 80016de:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	seria[48].waittime = 1400;
 80016e2:	4bab      	ldr	r3, [pc, #684]	; (8001990 <inputseria+0x5e0>)
 80016e4:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80016e8:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184
	seria[49].interval = 698;
 80016ec:	4ba8      	ldr	r3, [pc, #672]	; (8001990 <inputseria+0x5e0>)
 80016ee:	4aac      	ldr	r2, [pc, #688]	; (80019a0 <inputseria+0x5f0>)
 80016f0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	seria[49].waittime = 224;
 80016f4:	4ba6      	ldr	r3, [pc, #664]	; (8001990 <inputseria+0x5e0>)
 80016f6:	22e0      	movs	r2, #224	; 0xe0
 80016f8:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
	seria[50].interval = 784;
 80016fc:	4ba4      	ldr	r3, [pc, #656]	; (8001990 <inputseria+0x5e0>)
 80016fe:	4aa9      	ldr	r2, [pc, #676]	; (80019a4 <inputseria+0x5f4>)
 8001700:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	seria[50].waittime = 224;
 8001704:	4ba2      	ldr	r3, [pc, #648]	; (8001990 <inputseria+0x5e0>)
 8001706:	22e0      	movs	r2, #224	; 0xe0
 8001708:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
	seria[51].interval = 880;
 800170c:	4ba0      	ldr	r3, [pc, #640]	; (8001990 <inputseria+0x5e0>)
 800170e:	4aa6      	ldr	r2, [pc, #664]	; (80019a8 <inputseria+0x5f8>)
 8001710:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	seria[51].waittime = 462;
 8001714:	4b9e      	ldr	r3, [pc, #632]	; (8001990 <inputseria+0x5e0>)
 8001716:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800171a:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
	seria[52].interval = 988;
 800171e:	4b9c      	ldr	r3, [pc, #624]	; (8001990 <inputseria+0x5e0>)
 8001720:	4aa2      	ldr	r2, [pc, #648]	; (80019ac <inputseria+0x5fc>)
 8001722:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	seria[52].waittime = 224;
 8001726:	4b9a      	ldr	r3, [pc, #616]	; (8001990 <inputseria+0x5e0>)
 8001728:	22e0      	movs	r2, #224	; 0xe0
 800172a:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
	seria[53].interval = 1047;
 800172e:	4b98      	ldr	r3, [pc, #608]	; (8001990 <inputseria+0x5e0>)
 8001730:	4a9f      	ldr	r2, [pc, #636]	; (80019b0 <inputseria+0x600>)
 8001732:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	seria[53].waittime = 224;
 8001736:	4b96      	ldr	r3, [pc, #600]	; (8001990 <inputseria+0x5e0>)
 8001738:	22e0      	movs	r2, #224	; 0xe0
 800173a:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
	seria[54].interval = 1175;
 800173e:	4b94      	ldr	r3, [pc, #592]	; (8001990 <inputseria+0x5e0>)
 8001740:	4a9c      	ldr	r2, [pc, #624]	; (80019b4 <inputseria+0x604>)
 8001742:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	seria[54].waittime = 462;
 8001746:	4b92      	ldr	r3, [pc, #584]	; (8001990 <inputseria+0x5e0>)
 8001748:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800174c:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
	seria[55].interval = 1319;
 8001750:	4b8f      	ldr	r3, [pc, #572]	; (8001990 <inputseria+0x5e0>)
 8001752:	4a99      	ldr	r2, [pc, #612]	; (80019b8 <inputseria+0x608>)
 8001754:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	seria[55].waittime = 224;
 8001758:	4b8d      	ldr	r3, [pc, #564]	; (8001990 <inputseria+0x5e0>)
 800175a:	22e0      	movs	r2, #224	; 0xe0
 800175c:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
	seria[56].interval = 1397;
 8001760:	4b8b      	ldr	r3, [pc, #556]	; (8001990 <inputseria+0x5e0>)
 8001762:	4a96      	ldr	r2, [pc, #600]	; (80019bc <inputseria+0x60c>)
 8001764:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
	seria[56].waittime = 224;
 8001768:	4b89      	ldr	r3, [pc, #548]	; (8001990 <inputseria+0x5e0>)
 800176a:	22e0      	movs	r2, #224	; 0xe0
 800176c:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
	seria[57].interval = 1568;
 8001770:	4b87      	ldr	r3, [pc, #540]	; (8001990 <inputseria+0x5e0>)
 8001772:	4a93      	ldr	r2, [pc, #588]	; (80019c0 <inputseria+0x610>)
 8001774:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
	seria[57].waittime = 1400;
 8001778:	4b85      	ldr	r3, [pc, #532]	; (8001990 <inputseria+0x5e0>)
 800177a:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800177e:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
	seria[58].interval = 294;
 8001782:	4b83      	ldr	r3, [pc, #524]	; (8001990 <inputseria+0x5e0>)
 8001784:	4a8f      	ldr	r2, [pc, #572]	; (80019c4 <inputseria+0x614>)
 8001786:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	seria[58].waittime = 224;
 800178a:	4b81      	ldr	r3, [pc, #516]	; (8001990 <inputseria+0x5e0>)
 800178c:	22e0      	movs	r2, #224	; 0xe0
 800178e:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
	seria[59].interval = 330;
 8001792:	4b7f      	ldr	r3, [pc, #508]	; (8001990 <inputseria+0x5e0>)
 8001794:	4a81      	ldr	r2, [pc, #516]	; (800199c <inputseria+0x5ec>)
 8001796:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	seria[59].waittime = 224;
 800179a:	4b7d      	ldr	r3, [pc, #500]	; (8001990 <inputseria+0x5e0>)
 800179c:	22e0      	movs	r2, #224	; 0xe0
 800179e:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
	seria[60].interval = 349;
 80017a2:	4b7b      	ldr	r3, [pc, #492]	; (8001990 <inputseria+0x5e0>)
 80017a4:	4a88      	ldr	r2, [pc, #544]	; (80019c8 <inputseria+0x618>)
 80017a6:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	seria[60].waittime = 462;
 80017aa:	4b79      	ldr	r3, [pc, #484]	; (8001990 <inputseria+0x5e0>)
 80017ac:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80017b0:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
	seria[61].interval = 392;
 80017b4:	4b76      	ldr	r3, [pc, #472]	; (8001990 <inputseria+0x5e0>)
 80017b6:	4a85      	ldr	r2, [pc, #532]	; (80019cc <inputseria+0x61c>)
 80017b8:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	seria[61].waittime = 224;
 80017bc:	4b74      	ldr	r3, [pc, #464]	; (8001990 <inputseria+0x5e0>)
 80017be:	22e0      	movs	r2, #224	; 0xe0
 80017c0:	f8a3 21ec 	strh.w	r2, [r3, #492]	; 0x1ec
	seria[62].interval = 440;
 80017c4:	4b72      	ldr	r3, [pc, #456]	; (8001990 <inputseria+0x5e0>)
 80017c6:	4a82      	ldr	r2, [pc, #520]	; (80019d0 <inputseria+0x620>)
 80017c8:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	seria[62].waittime = 224;
 80017cc:	4b70      	ldr	r3, [pc, #448]	; (8001990 <inputseria+0x5e0>)
 80017ce:	22e0      	movs	r2, #224	; 0xe0
 80017d0:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
	seria[63].interval = 494;
 80017d4:	4b6e      	ldr	r3, [pc, #440]	; (8001990 <inputseria+0x5e0>)
 80017d6:	4a6f      	ldr	r2, [pc, #444]	; (8001994 <inputseria+0x5e4>)
 80017d8:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	seria[63].waittime = 462;
 80017dc:	4b6c      	ldr	r3, [pc, #432]	; (8001990 <inputseria+0x5e0>)
 80017de:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80017e2:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	seria[64].interval = 523;
 80017e6:	4b6a      	ldr	r3, [pc, #424]	; (8001990 <inputseria+0x5e0>)
 80017e8:	4a6b      	ldr	r2, [pc, #428]	; (8001998 <inputseria+0x5e8>)
 80017ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	seria[64].waittime = 224;
 80017ee:	4b68      	ldr	r3, [pc, #416]	; (8001990 <inputseria+0x5e0>)
 80017f0:	22e0      	movs	r2, #224	; 0xe0
 80017f2:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	seria[65].interval = 494;
 80017f6:	4b66      	ldr	r3, [pc, #408]	; (8001990 <inputseria+0x5e0>)
 80017f8:	4a66      	ldr	r2, [pc, #408]	; (8001994 <inputseria+0x5e4>)
 80017fa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	seria[65].waittime = 224;
 80017fe:	4b64      	ldr	r3, [pc, #400]	; (8001990 <inputseria+0x5e0>)
 8001800:	22e0      	movs	r2, #224	; 0xe0
 8001802:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
	seria[66].interval = 330;
 8001806:	4b62      	ldr	r3, [pc, #392]	; (8001990 <inputseria+0x5e0>)
 8001808:	4a64      	ldr	r2, [pc, #400]	; (800199c <inputseria+0x5ec>)
 800180a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	seria[66].waittime = 1400;
 800180e:	4b60      	ldr	r3, [pc, #384]	; (8001990 <inputseria+0x5e0>)
 8001810:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8001814:	f8a3 2214 	strh.w	r2, [r3, #532]	; 0x214
	seria[67].interval = 698;
 8001818:	4b5d      	ldr	r3, [pc, #372]	; (8001990 <inputseria+0x5e0>)
 800181a:	4a61      	ldr	r2, [pc, #388]	; (80019a0 <inputseria+0x5f0>)
 800181c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	seria[67].waittime = 224;
 8001820:	4b5b      	ldr	r3, [pc, #364]	; (8001990 <inputseria+0x5e0>)
 8001822:	22e0      	movs	r2, #224	; 0xe0
 8001824:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
	seria[68].interval = 659;
 8001828:	4b59      	ldr	r3, [pc, #356]	; (8001990 <inputseria+0x5e0>)
 800182a:	4a6a      	ldr	r2, [pc, #424]	; (80019d4 <inputseria+0x624>)
 800182c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	seria[68].waittime = 105;
 8001830:	4b57      	ldr	r3, [pc, #348]	; (8001990 <inputseria+0x5e0>)
 8001832:	2269      	movs	r2, #105	; 0x69
 8001834:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
	seria[69].interval = 880;
 8001838:	4b55      	ldr	r3, [pc, #340]	; (8001990 <inputseria+0x5e0>)
 800183a:	4a5b      	ldr	r2, [pc, #364]	; (80019a8 <inputseria+0x5f8>)
 800183c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	seria[69].waittime = 224;
 8001840:	4b53      	ldr	r3, [pc, #332]	; (8001990 <inputseria+0x5e0>)
 8001842:	22e0      	movs	r2, #224	; 0xe0
 8001844:	f8a3 222c 	strh.w	r2, [r3, #556]	; 0x22c
	seria[70].interval = 784;
 8001848:	4b51      	ldr	r3, [pc, #324]	; (8001990 <inputseria+0x5e0>)
 800184a:	4a56      	ldr	r2, [pc, #344]	; (80019a4 <inputseria+0x5f4>)
 800184c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	seria[70].waittime = 105;
 8001850:	4b4f      	ldr	r3, [pc, #316]	; (8001990 <inputseria+0x5e0>)
 8001852:	2269      	movs	r2, #105	; 0x69
 8001854:	f8a3 2234 	strh.w	r2, [r3, #564]	; 0x234
	seria[71].interval = 988;
 8001858:	4b4d      	ldr	r3, [pc, #308]	; (8001990 <inputseria+0x5e0>)
 800185a:	4a54      	ldr	r2, [pc, #336]	; (80019ac <inputseria+0x5fc>)
 800185c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	seria[71].waittime = 224;
 8001860:	4b4b      	ldr	r3, [pc, #300]	; (8001990 <inputseria+0x5e0>)
 8001862:	22e0      	movs	r2, #224	; 0xe0
 8001864:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
	seria[72].interval = 880;
 8001868:	4b49      	ldr	r3, [pc, #292]	; (8001990 <inputseria+0x5e0>)
 800186a:	4a4f      	ldr	r2, [pc, #316]	; (80019a8 <inputseria+0x5f8>)
 800186c:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	seria[72].waittime = 105;
 8001870:	4b47      	ldr	r3, [pc, #284]	; (8001990 <inputseria+0x5e0>)
 8001872:	2269      	movs	r2, #105	; 0x69
 8001874:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
	seria[73].interval = 1047;
 8001878:	4b45      	ldr	r3, [pc, #276]	; (8001990 <inputseria+0x5e0>)
 800187a:	4a4d      	ldr	r2, [pc, #308]	; (80019b0 <inputseria+0x600>)
 800187c:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	seria[73].waittime = 224;
 8001880:	4b43      	ldr	r3, [pc, #268]	; (8001990 <inputseria+0x5e0>)
 8001882:	22e0      	movs	r2, #224	; 0xe0
 8001884:	f8a3 224c 	strh.w	r2, [r3, #588]	; 0x24c
	seria[74].interval = 988;
 8001888:	4b41      	ldr	r3, [pc, #260]	; (8001990 <inputseria+0x5e0>)
 800188a:	4a48      	ldr	r2, [pc, #288]	; (80019ac <inputseria+0x5fc>)
 800188c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	seria[74].waittime = 105;
 8001890:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <inputseria+0x5e0>)
 8001892:	2269      	movs	r2, #105	; 0x69
 8001894:	f8a3 2254 	strh.w	r2, [r3, #596]	; 0x254
	seria[75].interval = 1175;
 8001898:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <inputseria+0x5e0>)
 800189a:	4a46      	ldr	r2, [pc, #280]	; (80019b4 <inputseria+0x604>)
 800189c:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	seria[75].waittime = 224;
 80018a0:	4b3b      	ldr	r3, [pc, #236]	; (8001990 <inputseria+0x5e0>)
 80018a2:	22e0      	movs	r2, #224	; 0xe0
 80018a4:	f8a3 225c 	strh.w	r2, [r3, #604]	; 0x25c
	seria[76].interval = 1047;
 80018a8:	4b39      	ldr	r3, [pc, #228]	; (8001990 <inputseria+0x5e0>)
 80018aa:	4a41      	ldr	r2, [pc, #260]	; (80019b0 <inputseria+0x600>)
 80018ac:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	seria[76].waittime = 105;
 80018b0:	4b37      	ldr	r3, [pc, #220]	; (8001990 <inputseria+0x5e0>)
 80018b2:	2269      	movs	r2, #105	; 0x69
 80018b4:	f8a3 2264 	strh.w	r2, [r3, #612]	; 0x264
	seria[77].interval = 1319;
 80018b8:	4b35      	ldr	r3, [pc, #212]	; (8001990 <inputseria+0x5e0>)
 80018ba:	4a3f      	ldr	r2, [pc, #252]	; (80019b8 <inputseria+0x608>)
 80018bc:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	seria[77].waittime = 224;
 80018c0:	4b33      	ldr	r3, [pc, #204]	; (8001990 <inputseria+0x5e0>)
 80018c2:	22e0      	movs	r2, #224	; 0xe0
 80018c4:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
	seria[78].interval = 1175;
 80018c8:	4b31      	ldr	r3, [pc, #196]	; (8001990 <inputseria+0x5e0>)
 80018ca:	4a3a      	ldr	r2, [pc, #232]	; (80019b4 <inputseria+0x604>)
 80018cc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	seria[78].waittime = 105;
 80018d0:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <inputseria+0x5e0>)
 80018d2:	2269      	movs	r2, #105	; 0x69
 80018d4:	f8a3 2274 	strh.w	r2, [r3, #628]	; 0x274
	seria[79].interval = 1397;
 80018d8:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <inputseria+0x5e0>)
 80018da:	4a38      	ldr	r2, [pc, #224]	; (80019bc <inputseria+0x60c>)
 80018dc:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	seria[79].waittime = 224;
 80018e0:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <inputseria+0x5e0>)
 80018e2:	22e0      	movs	r2, #224	; 0xe0
 80018e4:	f8a3 227c 	strh.w	r2, [r3, #636]	; 0x27c
	seria[80].interval = 1319;
 80018e8:	4b29      	ldr	r3, [pc, #164]	; (8001990 <inputseria+0x5e0>)
 80018ea:	4a33      	ldr	r2, [pc, #204]	; (80019b8 <inputseria+0x608>)
 80018ec:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	seria[80].waittime = 105;
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <inputseria+0x5e0>)
 80018f2:	2269      	movs	r2, #105	; 0x69
 80018f4:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	seria[81].interval = 988;
 80018f8:	4b25      	ldr	r3, [pc, #148]	; (8001990 <inputseria+0x5e0>)
 80018fa:	4a2c      	ldr	r2, [pc, #176]	; (80019ac <inputseria+0x5fc>)
 80018fc:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	seria[81].waittime = 105;
 8001900:	4b23      	ldr	r3, [pc, #140]	; (8001990 <inputseria+0x5e0>)
 8001902:	2269      	movs	r2, #105	; 0x69
 8001904:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
	seria[82].interval = 1047;
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <inputseria+0x5e0>)
 800190a:	4a29      	ldr	r2, [pc, #164]	; (80019b0 <inputseria+0x600>)
 800190c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	seria[82].waittime = 105;
 8001910:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <inputseria+0x5e0>)
 8001912:	2269      	movs	r2, #105	; 0x69
 8001914:	f8a3 2294 	strh.w	r2, [r3, #660]	; 0x294
	seria[83].interval = 880;
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <inputseria+0x5e0>)
 800191a:	4a23      	ldr	r2, [pc, #140]	; (80019a8 <inputseria+0x5f8>)
 800191c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	seria[83].waittime = 105;
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <inputseria+0x5e0>)
 8001922:	2269      	movs	r2, #105	; 0x69
 8001924:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
	seria[84].interval = 988;
 8001928:	4b19      	ldr	r3, [pc, #100]	; (8001990 <inputseria+0x5e0>)
 800192a:	4a20      	ldr	r2, [pc, #128]	; (80019ac <inputseria+0x5fc>)
 800192c:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	seria[84].waittime = 2576;
 8001930:	4b17      	ldr	r3, [pc, #92]	; (8001990 <inputseria+0x5e0>)
 8001932:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 8001936:	f8a3 22a4 	strh.w	r2, [r3, #676]	; 0x2a4
	seria[85].interval = 698;
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <inputseria+0x5e0>)
 800193c:	4a18      	ldr	r2, [pc, #96]	; (80019a0 <inputseria+0x5f0>)
 800193e:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	seria[85].waittime = 224;
 8001942:	4b13      	ldr	r3, [pc, #76]	; (8001990 <inputseria+0x5e0>)
 8001944:	22e0      	movs	r2, #224	; 0xe0
 8001946:	f8a3 22ac 	strh.w	r2, [r3, #684]	; 0x2ac
	seria[86].interval = 880;
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <inputseria+0x5e0>)
 800194c:	4a16      	ldr	r2, [pc, #88]	; (80019a8 <inputseria+0x5f8>)
 800194e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
	seria[86].waittime = 224;
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <inputseria+0x5e0>)
 8001954:	22e0      	movs	r2, #224	; 0xe0
 8001956:	f8a3 22b4 	strh.w	r2, [r3, #692]	; 0x2b4
	seria[87].interval = 988;
 800195a:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <inputseria+0x5e0>)
 800195c:	4a13      	ldr	r2, [pc, #76]	; (80019ac <inputseria+0x5fc>)
 800195e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
	seria[87].waittime = 462;
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <inputseria+0x5e0>)
 8001964:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001968:	f8a3 22bc 	strh.w	r2, [r3, #700]	; 0x2bc
	seria[88].interval = 698;
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <inputseria+0x5e0>)
 800196e:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <inputseria+0x5f0>)
 8001970:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
	seria[88].waittime = 224;
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <inputseria+0x5e0>)
 8001976:	22e0      	movs	r2, #224	; 0xe0
 8001978:	f8a3 22c4 	strh.w	r2, [r3, #708]	; 0x2c4
	seria[89].interval = 880;
 800197c:	4b04      	ldr	r3, [pc, #16]	; (8001990 <inputseria+0x5e0>)
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <inputseria+0x5f8>)
 8001980:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
	seria[89].waittime = 224;
 8001984:	4b02      	ldr	r3, [pc, #8]	; (8001990 <inputseria+0x5e0>)
 8001986:	22e0      	movs	r2, #224	; 0xe0
 8001988:	f8a3 22cc 	strh.w	r2, [r3, #716]	; 0x2cc
 800198c:	e024      	b.n	80019d8 <inputseria+0x628>
 800198e:	bf00      	nop
 8001990:	20000218 	.word	0x20000218
 8001994:	43f70000 	.word	0x43f70000
 8001998:	4402c000 	.word	0x4402c000
 800199c:	43a50000 	.word	0x43a50000
 80019a0:	442e8000 	.word	0x442e8000
 80019a4:	44440000 	.word	0x44440000
 80019a8:	445c0000 	.word	0x445c0000
 80019ac:	44770000 	.word	0x44770000
 80019b0:	4482e000 	.word	0x4482e000
 80019b4:	4492e000 	.word	0x4492e000
 80019b8:	44a4e000 	.word	0x44a4e000
 80019bc:	44aea000 	.word	0x44aea000
 80019c0:	44c40000 	.word	0x44c40000
 80019c4:	43930000 	.word	0x43930000
 80019c8:	43ae8000 	.word	0x43ae8000
 80019cc:	43c40000 	.word	0x43c40000
 80019d0:	43dc0000 	.word	0x43dc0000
 80019d4:	4424c000 	.word	0x4424c000
	seria[90].interval = 988;
 80019d8:	4bb9      	ldr	r3, [pc, #740]	; (8001cc0 <inputseria+0x910>)
 80019da:	4aba      	ldr	r2, [pc, #744]	; (8001cc4 <inputseria+0x914>)
 80019dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
	seria[90].waittime = 462;
 80019e0:	4bb7      	ldr	r3, [pc, #732]	; (8001cc0 <inputseria+0x910>)
 80019e2:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80019e6:	f8a3 22d4 	strh.w	r2, [r3, #724]	; 0x2d4
	seria[91].interval = 698;
 80019ea:	4bb5      	ldr	r3, [pc, #724]	; (8001cc0 <inputseria+0x910>)
 80019ec:	4ab6      	ldr	r2, [pc, #728]	; (8001cc8 <inputseria+0x918>)
 80019ee:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
	seria[91].waittime = 224;
 80019f2:	4bb3      	ldr	r3, [pc, #716]	; (8001cc0 <inputseria+0x910>)
 80019f4:	22e0      	movs	r2, #224	; 0xe0
 80019f6:	f8a3 22dc 	strh.w	r2, [r3, #732]	; 0x2dc
	seria[92].interval = 880;
 80019fa:	4bb1      	ldr	r3, [pc, #708]	; (8001cc0 <inputseria+0x910>)
 80019fc:	4ab3      	ldr	r2, [pc, #716]	; (8001ccc <inputseria+0x91c>)
 80019fe:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
	seria[92].waittime = 224;
 8001a02:	4baf      	ldr	r3, [pc, #700]	; (8001cc0 <inputseria+0x910>)
 8001a04:	22e0      	movs	r2, #224	; 0xe0
 8001a06:	f8a3 22e4 	strh.w	r2, [r3, #740]	; 0x2e4
	seria[93].interval = 988;
 8001a0a:	4bad      	ldr	r3, [pc, #692]	; (8001cc0 <inputseria+0x910>)
 8001a0c:	4aad      	ldr	r2, [pc, #692]	; (8001cc4 <inputseria+0x914>)
 8001a0e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
	seria[93].waittime = 224;
 8001a12:	4bab      	ldr	r3, [pc, #684]	; (8001cc0 <inputseria+0x910>)
 8001a14:	22e0      	movs	r2, #224	; 0xe0
 8001a16:	f8a3 22ec 	strh.w	r2, [r3, #748]	; 0x2ec
	seria[94].interval = 1319;
 8001a1a:	4ba9      	ldr	r3, [pc, #676]	; (8001cc0 <inputseria+0x910>)
 8001a1c:	4aac      	ldr	r2, [pc, #688]	; (8001cd0 <inputseria+0x920>)
 8001a1e:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
	seria[94].waittime = 224;
 8001a22:	4ba7      	ldr	r3, [pc, #668]	; (8001cc0 <inputseria+0x910>)
 8001a24:	22e0      	movs	r2, #224	; 0xe0
 8001a26:	f8a3 22f4 	strh.w	r2, [r3, #756]	; 0x2f4
	seria[95].interval = 1175;
 8001a2a:	4ba5      	ldr	r3, [pc, #660]	; (8001cc0 <inputseria+0x910>)
 8001a2c:	4aa9      	ldr	r2, [pc, #676]	; (8001cd4 <inputseria+0x924>)
 8001a2e:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	seria[95].waittime = 462;
 8001a32:	4ba3      	ldr	r3, [pc, #652]	; (8001cc0 <inputseria+0x910>)
 8001a34:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001a38:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
	seria[96].interval = 988;
 8001a3c:	4ba0      	ldr	r3, [pc, #640]	; (8001cc0 <inputseria+0x910>)
 8001a3e:	4aa1      	ldr	r2, [pc, #644]	; (8001cc4 <inputseria+0x914>)
 8001a40:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
	seria[96].waittime = 224;
 8001a44:	4b9e      	ldr	r3, [pc, #632]	; (8001cc0 <inputseria+0x910>)
 8001a46:	22e0      	movs	r2, #224	; 0xe0
 8001a48:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
	seria[97].interval = 1047;
 8001a4c:	4b9c      	ldr	r3, [pc, #624]	; (8001cc0 <inputseria+0x910>)
 8001a4e:	4aa2      	ldr	r2, [pc, #648]	; (8001cd8 <inputseria+0x928>)
 8001a50:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	seria[97].waittime = 224;
 8001a54:	4b9a      	ldr	r3, [pc, #616]	; (8001cc0 <inputseria+0x910>)
 8001a56:	22e0      	movs	r2, #224	; 0xe0
 8001a58:	f8a3 230c 	strh.w	r2, [r3, #780]	; 0x30c
	seria[98].interval = 988;
 8001a5c:	4b98      	ldr	r3, [pc, #608]	; (8001cc0 <inputseria+0x910>)
 8001a5e:	4a99      	ldr	r2, [pc, #612]	; (8001cc4 <inputseria+0x914>)
 8001a60:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
	seria[98].waittime = 224;
 8001a64:	4b96      	ldr	r3, [pc, #600]	; (8001cc0 <inputseria+0x910>)
 8001a66:	22e0      	movs	r2, #224	; 0xe0
 8001a68:	f8a3 2314 	strh.w	r2, [r3, #788]	; 0x314
	seria[99].interval = 784;
 8001a6c:	4b94      	ldr	r3, [pc, #592]	; (8001cc0 <inputseria+0x910>)
 8001a6e:	4a9b      	ldr	r2, [pc, #620]	; (8001cdc <inputseria+0x92c>)
 8001a70:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
	seria[99].waittime = 224;
 8001a74:	4b92      	ldr	r3, [pc, #584]	; (8001cc0 <inputseria+0x910>)
 8001a76:	22e0      	movs	r2, #224	; 0xe0
 8001a78:	f8a3 231c 	strh.w	r2, [r3, #796]	; 0x31c
	seria[100].interval = 659;
 8001a7c:	4b90      	ldr	r3, [pc, #576]	; (8001cc0 <inputseria+0x910>)
 8001a7e:	4a98      	ldr	r2, [pc, #608]	; (8001ce0 <inputseria+0x930>)
 8001a80:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
	seria[100].waittime = 1169;
 8001a84:	4b8e      	ldr	r3, [pc, #568]	; (8001cc0 <inputseria+0x910>)
 8001a86:	f240 4291 	movw	r2, #1169	; 0x491
 8001a8a:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324
	seria[101].interval = 587;
 8001a8e:	4b8c      	ldr	r3, [pc, #560]	; (8001cc0 <inputseria+0x910>)
 8001a90:	4a94      	ldr	r2, [pc, #592]	; (8001ce4 <inputseria+0x934>)
 8001a92:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	seria[101].waittime = 224;
 8001a96:	4b8a      	ldr	r3, [pc, #552]	; (8001cc0 <inputseria+0x910>)
 8001a98:	22e0      	movs	r2, #224	; 0xe0
 8001a9a:	f8a3 232c 	strh.w	r2, [r3, #812]	; 0x32c
	seria[102].interval = 659;
 8001a9e:	4b88      	ldr	r3, [pc, #544]	; (8001cc0 <inputseria+0x910>)
 8001aa0:	4a8f      	ldr	r2, [pc, #572]	; (8001ce0 <inputseria+0x930>)
 8001aa2:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
	seria[102].waittime = 224;
 8001aa6:	4b86      	ldr	r3, [pc, #536]	; (8001cc0 <inputseria+0x910>)
 8001aa8:	22e0      	movs	r2, #224	; 0xe0
 8001aaa:	f8a3 2334 	strh.w	r2, [r3, #820]	; 0x334
	seria[103].interval = 784;
 8001aae:	4b84      	ldr	r3, [pc, #528]	; (8001cc0 <inputseria+0x910>)
 8001ab0:	4a8a      	ldr	r2, [pc, #552]	; (8001cdc <inputseria+0x92c>)
 8001ab2:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
	seria[103].waittime = 224;
 8001ab6:	4b82      	ldr	r3, [pc, #520]	; (8001cc0 <inputseria+0x910>)
 8001ab8:	22e0      	movs	r2, #224	; 0xe0
 8001aba:	f8a3 233c 	strh.w	r2, [r3, #828]	; 0x33c
	seria[104].interval = 659;
 8001abe:	4b80      	ldr	r3, [pc, #512]	; (8001cc0 <inputseria+0x910>)
 8001ac0:	4a87      	ldr	r2, [pc, #540]	; (8001ce0 <inputseria+0x930>)
 8001ac2:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
	seria[104].waittime = 1400;
 8001ac6:	4b7e      	ldr	r3, [pc, #504]	; (8001cc0 <inputseria+0x910>)
 8001ac8:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8001acc:	f8a3 2344 	strh.w	r2, [r3, #836]	; 0x344
	seria[105].interval = 698;
 8001ad0:	4b7b      	ldr	r3, [pc, #492]	; (8001cc0 <inputseria+0x910>)
 8001ad2:	4a7d      	ldr	r2, [pc, #500]	; (8001cc8 <inputseria+0x918>)
 8001ad4:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	seria[105].waittime = 224;
 8001ad8:	4b79      	ldr	r3, [pc, #484]	; (8001cc0 <inputseria+0x910>)
 8001ada:	22e0      	movs	r2, #224	; 0xe0
 8001adc:	f8a3 234c 	strh.w	r2, [r3, #844]	; 0x34c
	seria[106].interval = 880;
 8001ae0:	4b77      	ldr	r3, [pc, #476]	; (8001cc0 <inputseria+0x910>)
 8001ae2:	4a7a      	ldr	r2, [pc, #488]	; (8001ccc <inputseria+0x91c>)
 8001ae4:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
	seria[106].waittime = 224;
 8001ae8:	4b75      	ldr	r3, [pc, #468]	; (8001cc0 <inputseria+0x910>)
 8001aea:	22e0      	movs	r2, #224	; 0xe0
 8001aec:	f8a3 2354 	strh.w	r2, [r3, #852]	; 0x354
	seria[107].interval = 988;
 8001af0:	4b73      	ldr	r3, [pc, #460]	; (8001cc0 <inputseria+0x910>)
 8001af2:	4a74      	ldr	r2, [pc, #464]	; (8001cc4 <inputseria+0x914>)
 8001af4:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
	seria[107].waittime = 462;
 8001af8:	4b71      	ldr	r3, [pc, #452]	; (8001cc0 <inputseria+0x910>)
 8001afa:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001afe:	f8a3 235c 	strh.w	r2, [r3, #860]	; 0x35c
	seria[108].interval = 698;
 8001b02:	4b6f      	ldr	r3, [pc, #444]	; (8001cc0 <inputseria+0x910>)
 8001b04:	4a70      	ldr	r2, [pc, #448]	; (8001cc8 <inputseria+0x918>)
 8001b06:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
	seria[108].waittime = 224;
 8001b0a:	4b6d      	ldr	r3, [pc, #436]	; (8001cc0 <inputseria+0x910>)
 8001b0c:	22e0      	movs	r2, #224	; 0xe0
 8001b0e:	f8a3 2364 	strh.w	r2, [r3, #868]	; 0x364
	seria[109].interval = 880;
 8001b12:	4b6b      	ldr	r3, [pc, #428]	; (8001cc0 <inputseria+0x910>)
 8001b14:	4a6d      	ldr	r2, [pc, #436]	; (8001ccc <inputseria+0x91c>)
 8001b16:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
	seria[109].waittime = 224;
 8001b1a:	4b69      	ldr	r3, [pc, #420]	; (8001cc0 <inputseria+0x910>)
 8001b1c:	22e0      	movs	r2, #224	; 0xe0
 8001b1e:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
	seria[110].interval = 988;
 8001b22:	4b67      	ldr	r3, [pc, #412]	; (8001cc0 <inputseria+0x910>)
 8001b24:	4a67      	ldr	r2, [pc, #412]	; (8001cc4 <inputseria+0x914>)
 8001b26:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
	seria[110].waittime = 462;
 8001b2a:	4b65      	ldr	r3, [pc, #404]	; (8001cc0 <inputseria+0x910>)
 8001b2c:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001b30:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
	seria[111].interval = 698;
 8001b34:	4b62      	ldr	r3, [pc, #392]	; (8001cc0 <inputseria+0x910>)
 8001b36:	4a64      	ldr	r2, [pc, #400]	; (8001cc8 <inputseria+0x918>)
 8001b38:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
	seria[111].waittime = 224;
 8001b3c:	4b60      	ldr	r3, [pc, #384]	; (8001cc0 <inputseria+0x910>)
 8001b3e:	22e0      	movs	r2, #224	; 0xe0
 8001b40:	f8a3 237c 	strh.w	r2, [r3, #892]	; 0x37c
	seria[112].interval = 880;
 8001b44:	4b5e      	ldr	r3, [pc, #376]	; (8001cc0 <inputseria+0x910>)
 8001b46:	4a61      	ldr	r2, [pc, #388]	; (8001ccc <inputseria+0x91c>)
 8001b48:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
	seria[112].waittime = 224;
 8001b4c:	4b5c      	ldr	r3, [pc, #368]	; (8001cc0 <inputseria+0x910>)
 8001b4e:	22e0      	movs	r2, #224	; 0xe0
 8001b50:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
	seria[113].interval = 988;
 8001b54:	4b5a      	ldr	r3, [pc, #360]	; (8001cc0 <inputseria+0x910>)
 8001b56:	4a5b      	ldr	r2, [pc, #364]	; (8001cc4 <inputseria+0x914>)
 8001b58:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	seria[113].waittime = 224;
 8001b5c:	4b58      	ldr	r3, [pc, #352]	; (8001cc0 <inputseria+0x910>)
 8001b5e:	22e0      	movs	r2, #224	; 0xe0
 8001b60:	f8a3 238c 	strh.w	r2, [r3, #908]	; 0x38c
	seria[114].interval = 1319;
 8001b64:	4b56      	ldr	r3, [pc, #344]	; (8001cc0 <inputseria+0x910>)
 8001b66:	4a5a      	ldr	r2, [pc, #360]	; (8001cd0 <inputseria+0x920>)
 8001b68:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
	seria[114].waittime = 224;
 8001b6c:	4b54      	ldr	r3, [pc, #336]	; (8001cc0 <inputseria+0x910>)
 8001b6e:	22e0      	movs	r2, #224	; 0xe0
 8001b70:	f8a3 2394 	strh.w	r2, [r3, #916]	; 0x394
	seria[115].interval = 1175;
 8001b74:	4b52      	ldr	r3, [pc, #328]	; (8001cc0 <inputseria+0x910>)
 8001b76:	4a57      	ldr	r2, [pc, #348]	; (8001cd4 <inputseria+0x924>)
 8001b78:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
	seria[115].waittime = 462;
 8001b7c:	4b50      	ldr	r3, [pc, #320]	; (8001cc0 <inputseria+0x910>)
 8001b7e:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001b82:	f8a3 239c 	strh.w	r2, [r3, #924]	; 0x39c
	seria[116].interval = 988;
 8001b86:	4b4e      	ldr	r3, [pc, #312]	; (8001cc0 <inputseria+0x910>)
 8001b88:	4a4e      	ldr	r2, [pc, #312]	; (8001cc4 <inputseria+0x914>)
 8001b8a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	seria[116].waittime = 224;
 8001b8e:	4b4c      	ldr	r3, [pc, #304]	; (8001cc0 <inputseria+0x910>)
 8001b90:	22e0      	movs	r2, #224	; 0xe0
 8001b92:	f8a3 23a4 	strh.w	r2, [r3, #932]	; 0x3a4
	seria[117].interval = 1047;
 8001b96:	4b4a      	ldr	r3, [pc, #296]	; (8001cc0 <inputseria+0x910>)
 8001b98:	4a4f      	ldr	r2, [pc, #316]	; (8001cd8 <inputseria+0x928>)
 8001b9a:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
	seria[117].waittime = 224;
 8001b9e:	4b48      	ldr	r3, [pc, #288]	; (8001cc0 <inputseria+0x910>)
 8001ba0:	22e0      	movs	r2, #224	; 0xe0
 8001ba2:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
	seria[118].interval = 1319;
 8001ba6:	4b46      	ldr	r3, [pc, #280]	; (8001cc0 <inputseria+0x910>)
 8001ba8:	4a49      	ldr	r2, [pc, #292]	; (8001cd0 <inputseria+0x920>)
 8001baa:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
	seria[118].waittime = 224;
 8001bae:	4b44      	ldr	r3, [pc, #272]	; (8001cc0 <inputseria+0x910>)
 8001bb0:	22e0      	movs	r2, #224	; 0xe0
 8001bb2:	f8a3 23b4 	strh.w	r2, [r3, #948]	; 0x3b4
	seria[119].interval = 988;
 8001bb6:	4b42      	ldr	r3, [pc, #264]	; (8001cc0 <inputseria+0x910>)
 8001bb8:	4a42      	ldr	r2, [pc, #264]	; (8001cc4 <inputseria+0x914>)
 8001bba:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
	seria[119].waittime = 224;
 8001bbe:	4b40      	ldr	r3, [pc, #256]	; (8001cc0 <inputseria+0x910>)
 8001bc0:	22e0      	movs	r2, #224	; 0xe0
 8001bc2:	f8a3 23bc 	strh.w	r2, [r3, #956]	; 0x3bc
	seria[120].interval = 784;
 8001bc6:	4b3e      	ldr	r3, [pc, #248]	; (8001cc0 <inputseria+0x910>)
 8001bc8:	4a44      	ldr	r2, [pc, #272]	; (8001cdc <inputseria+0x92c>)
 8001bca:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
	seria[120].waittime = 1169;
 8001bce:	4b3c      	ldr	r3, [pc, #240]	; (8001cc0 <inputseria+0x910>)
 8001bd0:	f240 4291 	movw	r2, #1169	; 0x491
 8001bd4:	f8a3 23c4 	strh.w	r2, [r3, #964]	; 0x3c4
	seria[121].interval = 988;
 8001bd8:	4b39      	ldr	r3, [pc, #228]	; (8001cc0 <inputseria+0x910>)
 8001bda:	4a3a      	ldr	r2, [pc, #232]	; (8001cc4 <inputseria+0x914>)
 8001bdc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
	seria[121].waittime = 224;
 8001be0:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <inputseria+0x910>)
 8001be2:	22e0      	movs	r2, #224	; 0xe0
 8001be4:	f8a3 23cc 	strh.w	r2, [r3, #972]	; 0x3cc
	seria[122].interval = 784;
 8001be8:	4b35      	ldr	r3, [pc, #212]	; (8001cc0 <inputseria+0x910>)
 8001bea:	4a3c      	ldr	r2, [pc, #240]	; (8001cdc <inputseria+0x92c>)
 8001bec:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
	seria[122].waittime = 224;
 8001bf0:	4b33      	ldr	r3, [pc, #204]	; (8001cc0 <inputseria+0x910>)
 8001bf2:	22e0      	movs	r2, #224	; 0xe0
 8001bf4:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4
	seria[123].interval = 587;
 8001bf8:	4b31      	ldr	r3, [pc, #196]	; (8001cc0 <inputseria+0x910>)
 8001bfa:	4a3a      	ldr	r2, [pc, #232]	; (8001ce4 <inputseria+0x934>)
 8001bfc:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
	seria[123].waittime = 224;
 8001c00:	4b2f      	ldr	r3, [pc, #188]	; (8001cc0 <inputseria+0x910>)
 8001c02:	22e0      	movs	r2, #224	; 0xe0
 8001c04:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
	seria[124].interval = 659;
 8001c08:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <inputseria+0x910>)
 8001c0a:	4a35      	ldr	r2, [pc, #212]	; (8001ce0 <inputseria+0x930>)
 8001c0c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
	seria[124].waittime = 1400;
 8001c10:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <inputseria+0x910>)
 8001c12:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8001c16:	f8a3 23e4 	strh.w	r2, [r3, #996]	; 0x3e4
	seria[125].interval = 294;
 8001c1a:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <inputseria+0x910>)
 8001c1c:	4a32      	ldr	r2, [pc, #200]	; (8001ce8 <inputseria+0x938>)
 8001c1e:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
	seria[125].waittime = 224;
 8001c22:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <inputseria+0x910>)
 8001c24:	22e0      	movs	r2, #224	; 0xe0
 8001c26:	f8a3 23ec 	strh.w	r2, [r3, #1004]	; 0x3ec
	seria[126].interval = 330;
 8001c2a:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <inputseria+0x910>)
 8001c2c:	4a2f      	ldr	r2, [pc, #188]	; (8001cec <inputseria+0x93c>)
 8001c2e:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
	seria[126].waittime = 224;
 8001c32:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <inputseria+0x910>)
 8001c34:	22e0      	movs	r2, #224	; 0xe0
 8001c36:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4
	seria[127].interval = 349;
 8001c3a:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <inputseria+0x910>)
 8001c3c:	4a2c      	ldr	r2, [pc, #176]	; (8001cf0 <inputseria+0x940>)
 8001c3e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
	seria[127].waittime = 462;
 8001c42:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <inputseria+0x910>)
 8001c44:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001c48:	f8a3 23fc 	strh.w	r2, [r3, #1020]	; 0x3fc
	seria[128].interval = 392;
 8001c4c:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <inputseria+0x910>)
 8001c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c52:	4a28      	ldr	r2, [pc, #160]	; (8001cf4 <inputseria+0x944>)
 8001c54:	601a      	str	r2, [r3, #0]
	seria[128].waittime = 224;
 8001c56:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <inputseria+0x910>)
 8001c58:	22e0      	movs	r2, #224	; 0xe0
 8001c5a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	seria[129].interval = 440;
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <inputseria+0x910>)
 8001c60:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001c64:	4a24      	ldr	r2, [pc, #144]	; (8001cf8 <inputseria+0x948>)
 8001c66:	601a      	str	r2, [r3, #0]
	seria[129].waittime = 224;
 8001c68:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <inputseria+0x910>)
 8001c6a:	22e0      	movs	r2, #224	; 0xe0
 8001c6c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
	seria[130].interval = 494;
 8001c70:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <inputseria+0x910>)
 8001c72:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8001c76:	4a21      	ldr	r2, [pc, #132]	; (8001cfc <inputseria+0x94c>)
 8001c78:	601a      	str	r2, [r3, #0]
	seria[130].waittime = 462;
 8001c7a:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <inputseria+0x910>)
 8001c7c:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001c80:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
	seria[131].interval = 523;
 8001c84:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <inputseria+0x910>)
 8001c86:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8001c8a:	4a1d      	ldr	r2, [pc, #116]	; (8001d00 <inputseria+0x950>)
 8001c8c:	601a      	str	r2, [r3, #0]
	seria[131].waittime = 224;
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <inputseria+0x910>)
 8001c90:	22e0      	movs	r2, #224	; 0xe0
 8001c92:	f8a3 241c 	strh.w	r2, [r3, #1052]	; 0x41c
	seria[132].interval = 494;
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <inputseria+0x910>)
 8001c98:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8001c9c:	4a17      	ldr	r2, [pc, #92]	; (8001cfc <inputseria+0x94c>)
 8001c9e:	601a      	str	r2, [r3, #0]
	seria[132].waittime = 224;
 8001ca0:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <inputseria+0x910>)
 8001ca2:	22e0      	movs	r2, #224	; 0xe0
 8001ca4:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
	seria[133].interval = 330;
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <inputseria+0x910>)
 8001caa:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001cae:	4a0f      	ldr	r2, [pc, #60]	; (8001cec <inputseria+0x93c>)
 8001cb0:	601a      	str	r2, [r3, #0]
	seria[133].waittime = 1400;
 8001cb2:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <inputseria+0x910>)
 8001cb4:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8001cb8:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
 8001cbc:	e022      	b.n	8001d04 <inputseria+0x954>
 8001cbe:	bf00      	nop
 8001cc0:	20000218 	.word	0x20000218
 8001cc4:	44770000 	.word	0x44770000
 8001cc8:	442e8000 	.word	0x442e8000
 8001ccc:	445c0000 	.word	0x445c0000
 8001cd0:	44a4e000 	.word	0x44a4e000
 8001cd4:	4492e000 	.word	0x4492e000
 8001cd8:	4482e000 	.word	0x4482e000
 8001cdc:	44440000 	.word	0x44440000
 8001ce0:	4424c000 	.word	0x4424c000
 8001ce4:	4412c000 	.word	0x4412c000
 8001ce8:	43930000 	.word	0x43930000
 8001cec:	43a50000 	.word	0x43a50000
 8001cf0:	43ae8000 	.word	0x43ae8000
 8001cf4:	43c40000 	.word	0x43c40000
 8001cf8:	43dc0000 	.word	0x43dc0000
 8001cfc:	43f70000 	.word	0x43f70000
 8001d00:	4402c000 	.word	0x4402c000
	seria[134].interval = 698;
 8001d04:	4ba7      	ldr	r3, [pc, #668]	; (8001fa4 <inputseria+0xbf4>)
 8001d06:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8001d0a:	4aa7      	ldr	r2, [pc, #668]	; (8001fa8 <inputseria+0xbf8>)
 8001d0c:	601a      	str	r2, [r3, #0]
	seria[134].waittime = 224;
 8001d0e:	4ba5      	ldr	r3, [pc, #660]	; (8001fa4 <inputseria+0xbf4>)
 8001d10:	22e0      	movs	r2, #224	; 0xe0
 8001d12:	f8a3 2434 	strh.w	r2, [r3, #1076]	; 0x434
	seria[135].interval = 784;
 8001d16:	4ba3      	ldr	r3, [pc, #652]	; (8001fa4 <inputseria+0xbf4>)
 8001d18:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8001d1c:	4aa3      	ldr	r2, [pc, #652]	; (8001fac <inputseria+0xbfc>)
 8001d1e:	601a      	str	r2, [r3, #0]
	seria[135].waittime = 224;
 8001d20:	4ba0      	ldr	r3, [pc, #640]	; (8001fa4 <inputseria+0xbf4>)
 8001d22:	22e0      	movs	r2, #224	; 0xe0
 8001d24:	f8a3 243c 	strh.w	r2, [r3, #1084]	; 0x43c
	seria[136].interval = 880;
 8001d28:	4b9e      	ldr	r3, [pc, #632]	; (8001fa4 <inputseria+0xbf4>)
 8001d2a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d2e:	4aa0      	ldr	r2, [pc, #640]	; (8001fb0 <inputseria+0xc00>)
 8001d30:	601a      	str	r2, [r3, #0]
	seria[136].waittime = 462;
 8001d32:	4b9c      	ldr	r3, [pc, #624]	; (8001fa4 <inputseria+0xbf4>)
 8001d34:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001d38:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444
	seria[137].interval = 988;
 8001d3c:	4b99      	ldr	r3, [pc, #612]	; (8001fa4 <inputseria+0xbf4>)
 8001d3e:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8001d42:	4a9c      	ldr	r2, [pc, #624]	; (8001fb4 <inputseria+0xc04>)
 8001d44:	601a      	str	r2, [r3, #0]
	seria[137].waittime = 224;
 8001d46:	4b97      	ldr	r3, [pc, #604]	; (8001fa4 <inputseria+0xbf4>)
 8001d48:	22e0      	movs	r2, #224	; 0xe0
 8001d4a:	f8a3 244c 	strh.w	r2, [r3, #1100]	; 0x44c
	seria[138].interval = 1047;
 8001d4e:	4b95      	ldr	r3, [pc, #596]	; (8001fa4 <inputseria+0xbf4>)
 8001d50:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8001d54:	4a98      	ldr	r2, [pc, #608]	; (8001fb8 <inputseria+0xc08>)
 8001d56:	601a      	str	r2, [r3, #0]
	seria[138].waittime = 224;
 8001d58:	4b92      	ldr	r3, [pc, #584]	; (8001fa4 <inputseria+0xbf4>)
 8001d5a:	22e0      	movs	r2, #224	; 0xe0
 8001d5c:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
	seria[139].interval = 1175;
 8001d60:	4b90      	ldr	r3, [pc, #576]	; (8001fa4 <inputseria+0xbf4>)
 8001d62:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 8001d66:	4a95      	ldr	r2, [pc, #596]	; (8001fbc <inputseria+0xc0c>)
 8001d68:	601a      	str	r2, [r3, #0]
	seria[139].waittime = 462;
 8001d6a:	4b8e      	ldr	r3, [pc, #568]	; (8001fa4 <inputseria+0xbf4>)
 8001d6c:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001d70:	f8a3 245c 	strh.w	r2, [r3, #1116]	; 0x45c
	seria[140].interval = 1319;
 8001d74:	4b8b      	ldr	r3, [pc, #556]	; (8001fa4 <inputseria+0xbf4>)
 8001d76:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8001d7a:	4a91      	ldr	r2, [pc, #580]	; (8001fc0 <inputseria+0xc10>)
 8001d7c:	601a      	str	r2, [r3, #0]
	seria[140].waittime = 224;
 8001d7e:	4b89      	ldr	r3, [pc, #548]	; (8001fa4 <inputseria+0xbf4>)
 8001d80:	22e0      	movs	r2, #224	; 0xe0
 8001d82:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464
	seria[141].interval = 1397;
 8001d86:	4b87      	ldr	r3, [pc, #540]	; (8001fa4 <inputseria+0xbf4>)
 8001d88:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 8001d8c:	4a8d      	ldr	r2, [pc, #564]	; (8001fc4 <inputseria+0xc14>)
 8001d8e:	601a      	str	r2, [r3, #0]
	seria[141].waittime = 224;
 8001d90:	4b84      	ldr	r3, [pc, #528]	; (8001fa4 <inputseria+0xbf4>)
 8001d92:	22e0      	movs	r2, #224	; 0xe0
 8001d94:	f8a3 246c 	strh.w	r2, [r3, #1132]	; 0x46c
	seria[142].interval = 1568;
 8001d98:	4b82      	ldr	r3, [pc, #520]	; (8001fa4 <inputseria+0xbf4>)
 8001d9a:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8001d9e:	4a8a      	ldr	r2, [pc, #552]	; (8001fc8 <inputseria+0xc18>)
 8001da0:	601a      	str	r2, [r3, #0]
	seria[142].waittime = 1400;
 8001da2:	4b80      	ldr	r3, [pc, #512]	; (8001fa4 <inputseria+0xbf4>)
 8001da4:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8001da8:	f8a3 2474 	strh.w	r2, [r3, #1140]	; 0x474
	seria[143].interval = 294;
 8001dac:	4b7d      	ldr	r3, [pc, #500]	; (8001fa4 <inputseria+0xbf4>)
 8001dae:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8001db2:	4a86      	ldr	r2, [pc, #536]	; (8001fcc <inputseria+0xc1c>)
 8001db4:	601a      	str	r2, [r3, #0]
	seria[143].waittime = 224;
 8001db6:	4b7b      	ldr	r3, [pc, #492]	; (8001fa4 <inputseria+0xbf4>)
 8001db8:	22e0      	movs	r2, #224	; 0xe0
 8001dba:	f8a3 247c 	strh.w	r2, [r3, #1148]	; 0x47c
	seria[144].interval = 330;
 8001dbe:	4b79      	ldr	r3, [pc, #484]	; (8001fa4 <inputseria+0xbf4>)
 8001dc0:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8001dc4:	4a82      	ldr	r2, [pc, #520]	; (8001fd0 <inputseria+0xc20>)
 8001dc6:	601a      	str	r2, [r3, #0]
	seria[144].waittime = 224;
 8001dc8:	4b76      	ldr	r3, [pc, #472]	; (8001fa4 <inputseria+0xbf4>)
 8001dca:	22e0      	movs	r2, #224	; 0xe0
 8001dcc:	f8a3 2484 	strh.w	r2, [r3, #1156]	; 0x484
	seria[145].interval = 349;
 8001dd0:	4b74      	ldr	r3, [pc, #464]	; (8001fa4 <inputseria+0xbf4>)
 8001dd2:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8001dd6:	4a7f      	ldr	r2, [pc, #508]	; (8001fd4 <inputseria+0xc24>)
 8001dd8:	601a      	str	r2, [r3, #0]
	seria[145].waittime = 462;
 8001dda:	4b72      	ldr	r3, [pc, #456]	; (8001fa4 <inputseria+0xbf4>)
 8001ddc:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001de0:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
	seria[146].interval = 392;
 8001de4:	4b6f      	ldr	r3, [pc, #444]	; (8001fa4 <inputseria+0xbf4>)
 8001de6:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8001dea:	4a7b      	ldr	r2, [pc, #492]	; (8001fd8 <inputseria+0xc28>)
 8001dec:	601a      	str	r2, [r3, #0]
	seria[146].waittime = 224;
 8001dee:	4b6d      	ldr	r3, [pc, #436]	; (8001fa4 <inputseria+0xbf4>)
 8001df0:	22e0      	movs	r2, #224	; 0xe0
 8001df2:	f8a3 2494 	strh.w	r2, [r3, #1172]	; 0x494
	seria[147].interval = 440;
 8001df6:	4b6b      	ldr	r3, [pc, #428]	; (8001fa4 <inputseria+0xbf4>)
 8001df8:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8001dfc:	4a77      	ldr	r2, [pc, #476]	; (8001fdc <inputseria+0xc2c>)
 8001dfe:	601a      	str	r2, [r3, #0]
	seria[147].waittime = 224;
 8001e00:	4b68      	ldr	r3, [pc, #416]	; (8001fa4 <inputseria+0xbf4>)
 8001e02:	22e0      	movs	r2, #224	; 0xe0
 8001e04:	f8a3 249c 	strh.w	r2, [r3, #1180]	; 0x49c
	seria[148].interval = 494;
 8001e08:	4b66      	ldr	r3, [pc, #408]	; (8001fa4 <inputseria+0xbf4>)
 8001e0a:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8001e0e:	4a74      	ldr	r2, [pc, #464]	; (8001fe0 <inputseria+0xc30>)
 8001e10:	601a      	str	r2, [r3, #0]
	seria[148].waittime = 462;
 8001e12:	4b64      	ldr	r3, [pc, #400]	; (8001fa4 <inputseria+0xbf4>)
 8001e14:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8001e18:	f8a3 24a4 	strh.w	r2, [r3, #1188]	; 0x4a4
	seria[149].interval = 523;
 8001e1c:	4b61      	ldr	r3, [pc, #388]	; (8001fa4 <inputseria+0xbf4>)
 8001e1e:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 8001e22:	4a70      	ldr	r2, [pc, #448]	; (8001fe4 <inputseria+0xc34>)
 8001e24:	601a      	str	r2, [r3, #0]
	seria[149].waittime = 224;
 8001e26:	4b5f      	ldr	r3, [pc, #380]	; (8001fa4 <inputseria+0xbf4>)
 8001e28:	22e0      	movs	r2, #224	; 0xe0
 8001e2a:	f8a3 24ac 	strh.w	r2, [r3, #1196]	; 0x4ac
	seria[150].interval = 494;
 8001e2e:	4b5d      	ldr	r3, [pc, #372]	; (8001fa4 <inputseria+0xbf4>)
 8001e30:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8001e34:	4a6a      	ldr	r2, [pc, #424]	; (8001fe0 <inputseria+0xc30>)
 8001e36:	601a      	str	r2, [r3, #0]
	seria[150].waittime = 224;
 8001e38:	4b5a      	ldr	r3, [pc, #360]	; (8001fa4 <inputseria+0xbf4>)
 8001e3a:	22e0      	movs	r2, #224	; 0xe0
 8001e3c:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
	seria[151].interval = 330;
 8001e40:	4b58      	ldr	r3, [pc, #352]	; (8001fa4 <inputseria+0xbf4>)
 8001e42:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8001e46:	4a62      	ldr	r2, [pc, #392]	; (8001fd0 <inputseria+0xc20>)
 8001e48:	601a      	str	r2, [r3, #0]
	seria[151].waittime = 1400;
 8001e4a:	4b56      	ldr	r3, [pc, #344]	; (8001fa4 <inputseria+0xbf4>)
 8001e4c:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8001e50:	f8a3 24bc 	strh.w	r2, [r3, #1212]	; 0x4bc
	seria[152].interval = 698;
 8001e54:	4b53      	ldr	r3, [pc, #332]	; (8001fa4 <inputseria+0xbf4>)
 8001e56:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8001e5a:	4a53      	ldr	r2, [pc, #332]	; (8001fa8 <inputseria+0xbf8>)
 8001e5c:	601a      	str	r2, [r3, #0]
	seria[152].waittime = 224;
 8001e5e:	4b51      	ldr	r3, [pc, #324]	; (8001fa4 <inputseria+0xbf4>)
 8001e60:	22e0      	movs	r2, #224	; 0xe0
 8001e62:	f8a3 24c4 	strh.w	r2, [r3, #1220]	; 0x4c4
	seria[153].interval = 659;
 8001e66:	4b4f      	ldr	r3, [pc, #316]	; (8001fa4 <inputseria+0xbf4>)
 8001e68:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8001e6c:	4a5e      	ldr	r2, [pc, #376]	; (8001fe8 <inputseria+0xc38>)
 8001e6e:	601a      	str	r2, [r3, #0]
	seria[153].waittime = 105;
 8001e70:	4b4c      	ldr	r3, [pc, #304]	; (8001fa4 <inputseria+0xbf4>)
 8001e72:	2269      	movs	r2, #105	; 0x69
 8001e74:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
	seria[154].interval = 880;
 8001e78:	4b4a      	ldr	r3, [pc, #296]	; (8001fa4 <inputseria+0xbf4>)
 8001e7a:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8001e7e:	4a4c      	ldr	r2, [pc, #304]	; (8001fb0 <inputseria+0xc00>)
 8001e80:	601a      	str	r2, [r3, #0]
	seria[154].waittime = 224;
 8001e82:	4b48      	ldr	r3, [pc, #288]	; (8001fa4 <inputseria+0xbf4>)
 8001e84:	22e0      	movs	r2, #224	; 0xe0
 8001e86:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4
	seria[155].interval = 784;
 8001e8a:	4b46      	ldr	r3, [pc, #280]	; (8001fa4 <inputseria+0xbf4>)
 8001e8c:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8001e90:	4a46      	ldr	r2, [pc, #280]	; (8001fac <inputseria+0xbfc>)
 8001e92:	601a      	str	r2, [r3, #0]
	seria[155].waittime = 105;
 8001e94:	4b43      	ldr	r3, [pc, #268]	; (8001fa4 <inputseria+0xbf4>)
 8001e96:	2269      	movs	r2, #105	; 0x69
 8001e98:	f8a3 24dc 	strh.w	r2, [r3, #1244]	; 0x4dc
	seria[156].interval = 988;
 8001e9c:	4b41      	ldr	r3, [pc, #260]	; (8001fa4 <inputseria+0xbf4>)
 8001e9e:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8001ea2:	4a44      	ldr	r2, [pc, #272]	; (8001fb4 <inputseria+0xc04>)
 8001ea4:	601a      	str	r2, [r3, #0]
	seria[156].waittime = 224;
 8001ea6:	4b3f      	ldr	r3, [pc, #252]	; (8001fa4 <inputseria+0xbf4>)
 8001ea8:	22e0      	movs	r2, #224	; 0xe0
 8001eaa:	f8a3 24e4 	strh.w	r2, [r3, #1252]	; 0x4e4
	seria[157].interval = 880;
 8001eae:	4b3d      	ldr	r3, [pc, #244]	; (8001fa4 <inputseria+0xbf4>)
 8001eb0:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 8001eb4:	4a3e      	ldr	r2, [pc, #248]	; (8001fb0 <inputseria+0xc00>)
 8001eb6:	601a      	str	r2, [r3, #0]
	seria[157].waittime = 105;
 8001eb8:	4b3a      	ldr	r3, [pc, #232]	; (8001fa4 <inputseria+0xbf4>)
 8001eba:	2269      	movs	r2, #105	; 0x69
 8001ebc:	f8a3 24ec 	strh.w	r2, [r3, #1260]	; 0x4ec
	seria[158].interval = 1047;
 8001ec0:	4b38      	ldr	r3, [pc, #224]	; (8001fa4 <inputseria+0xbf4>)
 8001ec2:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8001ec6:	4a3c      	ldr	r2, [pc, #240]	; (8001fb8 <inputseria+0xc08>)
 8001ec8:	601a      	str	r2, [r3, #0]
	seria[158].waittime = 224;
 8001eca:	4b36      	ldr	r3, [pc, #216]	; (8001fa4 <inputseria+0xbf4>)
 8001ecc:	22e0      	movs	r2, #224	; 0xe0
 8001ece:	f8a3 24f4 	strh.w	r2, [r3, #1268]	; 0x4f4
	seria[159].interval = 988;
 8001ed2:	4b34      	ldr	r3, [pc, #208]	; (8001fa4 <inputseria+0xbf4>)
 8001ed4:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
 8001ed8:	4a36      	ldr	r2, [pc, #216]	; (8001fb4 <inputseria+0xc04>)
 8001eda:	601a      	str	r2, [r3, #0]
	seria[159].waittime = 105;
 8001edc:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <inputseria+0xbf4>)
 8001ede:	2269      	movs	r2, #105	; 0x69
 8001ee0:	f8a3 24fc 	strh.w	r2, [r3, #1276]	; 0x4fc
	seria[160].interval = 1175;
 8001ee4:	4b2f      	ldr	r3, [pc, #188]	; (8001fa4 <inputseria+0xbf4>)
 8001ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eea:	4a34      	ldr	r2, [pc, #208]	; (8001fbc <inputseria+0xc0c>)
 8001eec:	601a      	str	r2, [r3, #0]
	seria[160].waittime = 224;
 8001eee:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <inputseria+0xbf4>)
 8001ef0:	22e0      	movs	r2, #224	; 0xe0
 8001ef2:	f8a3 2504 	strh.w	r2, [r3, #1284]	; 0x504
	seria[161].interval = 1047;
 8001ef6:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <inputseria+0xbf4>)
 8001ef8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8001efc:	4a2e      	ldr	r2, [pc, #184]	; (8001fb8 <inputseria+0xc08>)
 8001efe:	601a      	str	r2, [r3, #0]
	seria[161].waittime = 105;
 8001f00:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <inputseria+0xbf4>)
 8001f02:	2269      	movs	r2, #105	; 0x69
 8001f04:	f8a3 250c 	strh.w	r2, [r3, #1292]	; 0x50c
	seria[162].interval = 1319;
 8001f08:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <inputseria+0xbf4>)
 8001f0a:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8001f0e:	4a2c      	ldr	r2, [pc, #176]	; (8001fc0 <inputseria+0xc10>)
 8001f10:	601a      	str	r2, [r3, #0]
	seria[162].waittime = 224;
 8001f12:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <inputseria+0xbf4>)
 8001f14:	22e0      	movs	r2, #224	; 0xe0
 8001f16:	f8a3 2514 	strh.w	r2, [r3, #1300]	; 0x514
	seria[163].interval = 1175;
 8001f1a:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <inputseria+0xbf4>)
 8001f1c:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8001f20:	4a26      	ldr	r2, [pc, #152]	; (8001fbc <inputseria+0xc0c>)
 8001f22:	601a      	str	r2, [r3, #0]
	seria[163].waittime = 105;
 8001f24:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <inputseria+0xbf4>)
 8001f26:	2269      	movs	r2, #105	; 0x69
 8001f28:	f8a3 251c 	strh.w	r2, [r3, #1308]	; 0x51c
	seria[164].interval = 1397;
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <inputseria+0xbf4>)
 8001f2e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8001f32:	4a24      	ldr	r2, [pc, #144]	; (8001fc4 <inputseria+0xc14>)
 8001f34:	601a      	str	r2, [r3, #0]
	seria[164].waittime = 224;
 8001f36:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <inputseria+0xbf4>)
 8001f38:	22e0      	movs	r2, #224	; 0xe0
 8001f3a:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
	seria[165].interval = 1319;
 8001f3e:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <inputseria+0xbf4>)
 8001f40:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8001f44:	4a1e      	ldr	r2, [pc, #120]	; (8001fc0 <inputseria+0xc10>)
 8001f46:	601a      	str	r2, [r3, #0]
	seria[165].waittime = 105;
 8001f48:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <inputseria+0xbf4>)
 8001f4a:	2269      	movs	r2, #105	; 0x69
 8001f4c:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
	seria[166].interval = 988;
 8001f50:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <inputseria+0xbf4>)
 8001f52:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8001f56:	4a17      	ldr	r2, [pc, #92]	; (8001fb4 <inputseria+0xc04>)
 8001f58:	601a      	str	r2, [r3, #0]
	seria[166].waittime = 105;
 8001f5a:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <inputseria+0xbf4>)
 8001f5c:	2269      	movs	r2, #105	; 0x69
 8001f5e:	f8a3 2534 	strh.w	r2, [r3, #1332]	; 0x534
	seria[167].interval = 1047;
 8001f62:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <inputseria+0xbf4>)
 8001f64:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8001f68:	4a13      	ldr	r2, [pc, #76]	; (8001fb8 <inputseria+0xc08>)
 8001f6a:	601a      	str	r2, [r3, #0]
	seria[167].waittime = 105;
 8001f6c:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <inputseria+0xbf4>)
 8001f6e:	2269      	movs	r2, #105	; 0x69
 8001f70:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
	seria[168].interval = 880;
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <inputseria+0xbf4>)
 8001f76:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 8001f7a:	4a0d      	ldr	r2, [pc, #52]	; (8001fb0 <inputseria+0xc00>)
 8001f7c:	601a      	str	r2, [r3, #0]
	seria[168].waittime = 105;
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <inputseria+0xbf4>)
 8001f80:	2269      	movs	r2, #105	; 0x69
 8001f82:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
	seria[169].interval = 988;
 8001f86:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <inputseria+0xbf4>)
 8001f88:	f503 63a9 	add.w	r3, r3, #1352	; 0x548
 8001f8c:	4a09      	ldr	r2, [pc, #36]	; (8001fb4 <inputseria+0xc04>)
 8001f8e:	601a      	str	r2, [r3, #0]
	seria[169].waittime = 2576;
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <inputseria+0xbf4>)
 8001f92:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 8001f96:	f8a3 254c 	strh.w	r2, [r3, #1356]	; 0x54c

}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	20000218 	.word	0x20000218
 8001fa8:	442e8000 	.word	0x442e8000
 8001fac:	44440000 	.word	0x44440000
 8001fb0:	445c0000 	.word	0x445c0000
 8001fb4:	44770000 	.word	0x44770000
 8001fb8:	4482e000 	.word	0x4482e000
 8001fbc:	4492e000 	.word	0x4492e000
 8001fc0:	44a4e000 	.word	0x44a4e000
 8001fc4:	44aea000 	.word	0x44aea000
 8001fc8:	44c40000 	.word	0x44c40000
 8001fcc:	43930000 	.word	0x43930000
 8001fd0:	43a50000 	.word	0x43a50000
 8001fd4:	43ae8000 	.word	0x43ae8000
 8001fd8:	43c40000 	.word	0x43c40000
 8001fdc:	43dc0000 	.word	0x43dc0000
 8001fe0:	43f70000 	.word	0x43f70000
 8001fe4:	4402c000 	.word	0x4402c000
 8001fe8:	4424c000 	.word	0x4424c000

08001fec <pl_timer_init>:
#include "tim.h"

volatile uint32_t g_timCount;


void pl_timer_init(void){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8001ff0:	4802      	ldr	r0, [pc, #8]	; (8001ffc <pl_timer_init+0x10>)
 8001ff2:	f004 fd3d 	bl	8006a70 <HAL_TIM_Base_Start_IT>
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000940 	.word	0x20000940

08002000 <pl_timer_count>:

void pl_timer_count(void){
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
	 g_timCount++;
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <pl_timer_count+0x18>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	4a03      	ldr	r2, [pc, #12]	; (8002018 <pl_timer_count+0x18>)
 800200c:	6013      	str	r3, [r2, #0]
}
 800200e:	bf00      	nop
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	200007a8 	.word	0x200007a8

0800201c <wait_ms>:


void wait_ms(uint32_t wait_time) {
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <wait_ms+0x30>)
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <wait_ms+0x34>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2200      	movs	r2, #0
 8002030:	625a      	str	r2, [r3, #36]	; 0x24
        while (g_timCount < wait_time) {
 8002032:	bf00      	nop
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <wait_ms+0x30>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	429a      	cmp	r2, r3
 800203c:	d8fa      	bhi.n	8002034 <wait_ms+0x18>
        }

}
 800203e:	bf00      	nop
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	200007a8 	.word	0x200007a8
 8002050:	20000940 	.word	0x20000940

08002054 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800205a:	463b      	mov	r3, r7
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
 8002068:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800206a:	4b46      	ldr	r3, [pc, #280]	; (8002184 <MX_ADC1_Init+0x130>)
 800206c:	4a46      	ldr	r2, [pc, #280]	; (8002188 <MX_ADC1_Init+0x134>)
 800206e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8002070:	4b44      	ldr	r3, [pc, #272]	; (8002184 <MX_ADC1_Init+0x130>)
 8002072:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8002076:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8002078:	4b42      	ldr	r3, [pc, #264]	; (8002184 <MX_ADC1_Init+0x130>)
 800207a:	2208      	movs	r2, #8
 800207c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800207e:	4b41      	ldr	r3, [pc, #260]	; (8002184 <MX_ADC1_Init+0x130>)
 8002080:	2200      	movs	r2, #0
 8002082:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002084:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <MX_ADC1_Init+0x130>)
 8002086:	2201      	movs	r2, #1
 8002088:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800208a:	4b3e      	ldr	r3, [pc, #248]	; (8002184 <MX_ADC1_Init+0x130>)
 800208c:	2204      	movs	r2, #4
 800208e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002090:	4b3c      	ldr	r3, [pc, #240]	; (8002184 <MX_ADC1_Init+0x130>)
 8002092:	2200      	movs	r2, #0
 8002094:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002096:	4b3b      	ldr	r3, [pc, #236]	; (8002184 <MX_ADC1_Init+0x130>)
 8002098:	2201      	movs	r2, #1
 800209a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 800209c:	4b39      	ldr	r3, [pc, #228]	; (8002184 <MX_ADC1_Init+0x130>)
 800209e:	2205      	movs	r2, #5
 80020a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020a2:	4b38      	ldr	r3, [pc, #224]	; (8002184 <MX_ADC1_Init+0x130>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020aa:	4b36      	ldr	r3, [pc, #216]	; (8002184 <MX_ADC1_Init+0x130>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020b0:	4b34      	ldr	r3, [pc, #208]	; (8002184 <MX_ADC1_Init+0x130>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80020b6:	4b33      	ldr	r3, [pc, #204]	; (8002184 <MX_ADC1_Init+0x130>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80020be:	4b31      	ldr	r3, [pc, #196]	; (8002184 <MX_ADC1_Init+0x130>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80020c4:	4b2f      	ldr	r3, [pc, #188]	; (8002184 <MX_ADC1_Init+0x130>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020cc:	482d      	ldr	r0, [pc, #180]	; (8002184 <MX_ADC1_Init+0x130>)
 80020ce:	f001 fa6b 	bl	80035a8 <HAL_ADC_Init>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80020d8:	f000 fb1b 	bl	8002712 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80020dc:	4b2b      	ldr	r3, [pc, #172]	; (800218c <MX_ADC1_Init+0x138>)
 80020de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020e0:	2306      	movs	r3, #6
 80020e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80020e4:	2302      	movs	r3, #2
 80020e6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80020e8:	237f      	movs	r3, #127	; 0x7f
 80020ea:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80020ec:	2304      	movs	r3, #4
 80020ee:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020f4:	463b      	mov	r3, r7
 80020f6:	4619      	mov	r1, r3
 80020f8:	4822      	ldr	r0, [pc, #136]	; (8002184 <MX_ADC1_Init+0x130>)
 80020fa:	f001 fc97 	bl	8003a2c <HAL_ADC_ConfigChannel>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8002104:	f000 fb05 	bl	8002712 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002108:	4b21      	ldr	r3, [pc, #132]	; (8002190 <MX_ADC1_Init+0x13c>)
 800210a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800210c:	230c      	movs	r3, #12
 800210e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002110:	463b      	mov	r3, r7
 8002112:	4619      	mov	r1, r3
 8002114:	481b      	ldr	r0, [pc, #108]	; (8002184 <MX_ADC1_Init+0x130>)
 8002116:	f001 fc89 	bl	8003a2c <HAL_ADC_ConfigChannel>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8002120:	f000 faf7 	bl	8002712 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002124:	4b1b      	ldr	r3, [pc, #108]	; (8002194 <MX_ADC1_Init+0x140>)
 8002126:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002128:	2312      	movs	r3, #18
 800212a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800212c:	463b      	mov	r3, r7
 800212e:	4619      	mov	r1, r3
 8002130:	4814      	ldr	r0, [pc, #80]	; (8002184 <MX_ADC1_Init+0x130>)
 8002132:	f001 fc7b 	bl	8003a2c <HAL_ADC_ConfigChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 800213c:	f000 fae9 	bl	8002712 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002140:	4b15      	ldr	r3, [pc, #84]	; (8002198 <MX_ADC1_Init+0x144>)
 8002142:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002144:	2318      	movs	r3, #24
 8002146:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002148:	463b      	mov	r3, r7
 800214a:	4619      	mov	r1, r3
 800214c:	480d      	ldr	r0, [pc, #52]	; (8002184 <MX_ADC1_Init+0x130>)
 800214e:	f001 fc6d 	bl	8003a2c <HAL_ADC_ConfigChannel>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8002158:	f000 fadb 	bl	8002712 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800215c:	4b0f      	ldr	r3, [pc, #60]	; (800219c <MX_ADC1_Init+0x148>)
 800215e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002160:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002164:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002166:	463b      	mov	r3, r7
 8002168:	4619      	mov	r1, r3
 800216a:	4806      	ldr	r0, [pc, #24]	; (8002184 <MX_ADC1_Init+0x130>)
 800216c:	f001 fc5e 	bl	8003a2c <HAL_ADC_ConfigChannel>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8002176:	f000 facc 	bl	8002712 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800217a:	bf00      	nop
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200007ac 	.word	0x200007ac
 8002188:	50040000 	.word	0x50040000
 800218c:	43210000 	.word	0x43210000
 8002190:	3ef08000 	.word	0x3ef08000
 8002194:	32601000 	.word	0x32601000
 8002198:	2e300800 	.word	0x2e300800
 800219c:	2a000400 	.word	0x2a000400

080021a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b0a0      	sub	sp, #128	; 0x80
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021b8:	f107 0318 	add.w	r3, r7, #24
 80021bc:	2254      	movs	r2, #84	; 0x54
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f005 ffe1 	bl	8008188 <memset>
  if(adcHandle->Instance==ADC1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a47      	ldr	r2, [pc, #284]	; (80022e8 <HAL_ADC_MspInit+0x148>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	f040 8087 	bne.w	80022e0 <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80021d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80021d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80021dc:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80021de:	2303      	movs	r3, #3
 80021e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 3;
 80021e2:	2303      	movs	r3, #3
 80021e4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80021e6:	2310      	movs	r3, #16
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80021ea:	2307      	movs	r3, #7
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80021ee:	2302      	movs	r3, #2
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80021f2:	2302      	movs	r3, #2
 80021f4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80021f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021fa:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021fc:	f107 0318 	add.w	r3, r7, #24
 8002200:	4618      	mov	r0, r3
 8002202:	f004 f8f5 	bl	80063f0 <HAL_RCCEx_PeriphCLKConfig>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800220c:	f000 fa81 	bl	8002712 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002210:	4b36      	ldr	r3, [pc, #216]	; (80022ec <HAL_ADC_MspInit+0x14c>)
 8002212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002214:	4a35      	ldr	r2, [pc, #212]	; (80022ec <HAL_ADC_MspInit+0x14c>)
 8002216:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800221a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800221c:	4b33      	ldr	r3, [pc, #204]	; (80022ec <HAL_ADC_MspInit+0x14c>)
 800221e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002220:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002228:	4b30      	ldr	r3, [pc, #192]	; (80022ec <HAL_ADC_MspInit+0x14c>)
 800222a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222c:	4a2f      	ldr	r2, [pc, #188]	; (80022ec <HAL_ADC_MspInit+0x14c>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002234:	4b2d      	ldr	r3, [pc, #180]	; (80022ec <HAL_ADC_MspInit+0x14c>)
 8002236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002240:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <HAL_ADC_MspInit+0x14c>)
 8002242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002244:	4a29      	ldr	r2, [pc, #164]	; (80022ec <HAL_ADC_MspInit+0x14c>)
 8002246:	f043 0302 	orr.w	r3, r3, #2
 800224a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800224c:	4b27      	ldr	r3, [pc, #156]	; (80022ec <HAL_ADC_MspInit+0x14c>)
 800224e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = SENSOR_4_Pin|SENSOR_3_Pin|SENSOR_2_Pin;
 8002258:	23e0      	movs	r3, #224	; 0xe0
 800225a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800225c:	230b      	movs	r3, #11
 800225e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002264:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002268:	4619      	mov	r1, r3
 800226a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800226e:	f002 fd17 	bl	8004ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR_1_Pin|BATTERY_Pin;
 8002272:	2303      	movs	r3, #3
 8002274:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002276:	230b      	movs	r3, #11
 8002278:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002282:	4619      	mov	r1, r3
 8002284:	481a      	ldr	r0, [pc, #104]	; (80022f0 <HAL_ADC_MspInit+0x150>)
 8002286:	f002 fd0b 	bl	8004ca0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800228a:	4b1a      	ldr	r3, [pc, #104]	; (80022f4 <HAL_ADC_MspInit+0x154>)
 800228c:	4a1a      	ldr	r2, [pc, #104]	; (80022f8 <HAL_ADC_MspInit+0x158>)
 800228e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002290:	4b18      	ldr	r3, [pc, #96]	; (80022f4 <HAL_ADC_MspInit+0x154>)
 8002292:	2200      	movs	r2, #0
 8002294:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002296:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <HAL_ADC_MspInit+0x154>)
 8002298:	2200      	movs	r2, #0
 800229a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800229c:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <HAL_ADC_MspInit+0x154>)
 800229e:	2200      	movs	r2, #0
 80022a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022a2:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <HAL_ADC_MspInit+0x154>)
 80022a4:	2280      	movs	r2, #128	; 0x80
 80022a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022a8:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_ADC_MspInit+0x154>)
 80022aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022b0:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <HAL_ADC_MspInit+0x154>)
 80022b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022b6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80022b8:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <HAL_ADC_MspInit+0x154>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022be:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <HAL_ADC_MspInit+0x154>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022c4:	480b      	ldr	r0, [pc, #44]	; (80022f4 <HAL_ADC_MspInit+0x154>)
 80022c6:	f002 fab5 	bl	8004834 <HAL_DMA_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80022d0:	f000 fa1f 	bl	8002712 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a07      	ldr	r2, [pc, #28]	; (80022f4 <HAL_ADC_MspInit+0x154>)
 80022d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80022da:	4a06      	ldr	r2, [pc, #24]	; (80022f4 <HAL_ADC_MspInit+0x154>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80022e0:	bf00      	nop
 80022e2:	3780      	adds	r7, #128	; 0x80
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	50040000 	.word	0x50040000
 80022ec:	40021000 	.word	0x40021000
 80022f0:	48000400 	.word	0x48000400
 80022f4:	20000810 	.word	0x20000810
 80022f8:	40020008 	.word	0x40020008

080022fc <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 8002304:	f7fe ff08 	bl	8001118 <pl_callback_getSensor>

}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002316:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <MX_DMA_Init+0x38>)
 8002318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800231a:	4a0b      	ldr	r2, [pc, #44]	; (8002348 <MX_DMA_Init+0x38>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6493      	str	r3, [r2, #72]	; 0x48
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <MX_DMA_Init+0x38>)
 8002324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800232e:	2200      	movs	r2, #0
 8002330:	2100      	movs	r1, #0
 8002332:	200b      	movs	r0, #11
 8002334:	f002 fa47 	bl	80047c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002338:	200b      	movs	r0, #11
 800233a:	f002 fa60 	bl	80047fe <HAL_NVIC_EnableIRQ>

}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40021000 	.word	0x40021000

0800234c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002352:	f107 030c 	add.w	r3, r7, #12
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	60da      	str	r2, [r3, #12]
 8002360:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002362:	4b39      	ldr	r3, [pc, #228]	; (8002448 <MX_GPIO_Init+0xfc>)
 8002364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002366:	4a38      	ldr	r2, [pc, #224]	; (8002448 <MX_GPIO_Init+0xfc>)
 8002368:	f043 0304 	orr.w	r3, r3, #4
 800236c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800236e:	4b36      	ldr	r3, [pc, #216]	; (8002448 <MX_GPIO_Init+0xfc>)
 8002370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	4b33      	ldr	r3, [pc, #204]	; (8002448 <MX_GPIO_Init+0xfc>)
 800237c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237e:	4a32      	ldr	r2, [pc, #200]	; (8002448 <MX_GPIO_Init+0xfc>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002386:	4b30      	ldr	r3, [pc, #192]	; (8002448 <MX_GPIO_Init+0xfc>)
 8002388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	607b      	str	r3, [r7, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002392:	4b2d      	ldr	r3, [pc, #180]	; (8002448 <MX_GPIO_Init+0xfc>)
 8002394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002396:	4a2c      	ldr	r2, [pc, #176]	; (8002448 <MX_GPIO_Init+0xfc>)
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800239e:	4b2a      	ldr	r3, [pc, #168]	; (8002448 <MX_GPIO_Init+0xfc>)
 80023a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSORLED_1_Pin|SENSORLED_2_Pin, GPIO_PIN_RESET);
 80023aa:	2200      	movs	r2, #0
 80023ac:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80023b0:	4826      	ldr	r0, [pc, #152]	; (800244c <MX_GPIO_Init+0x100>)
 80023b2:	f002 fddf 	bl	8004f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_ENABLE_Pin|MOTOR_CW_CCW_L_Pin, GPIO_PIN_RESET);
 80023b6:	2200      	movs	r2, #0
 80023b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80023bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c0:	f002 fdd8 	bl	8004f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INTERFACELED_Pin|MOTOR_CW_CCW_R_Pin|MD_RESET_Pin, GPIO_PIN_RESET);
 80023c4:	2200      	movs	r2, #0
 80023c6:	2138      	movs	r1, #56	; 0x38
 80023c8:	4821      	ldr	r0, [pc, #132]	; (8002450 <MX_GPIO_Init+0x104>)
 80023ca:	f002 fdd3 	bl	8004f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SENSORLED_1_Pin|SENSORLED_2_Pin;
 80023ce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80023d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d4:	2301      	movs	r3, #1
 80023d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023dc:	2300      	movs	r3, #0
 80023de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023e0:	f107 030c 	add.w	r3, r7, #12
 80023e4:	4619      	mov	r1, r3
 80023e6:	4819      	ldr	r0, [pc, #100]	; (800244c <MX_GPIO_Init+0x100>)
 80023e8:	f002 fc5a 	bl	8004ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_ENABLE_Pin|MOTOR_CW_CCW_L_Pin;
 80023ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80023f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f2:	2301      	movs	r3, #1
 80023f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fe:	f107 030c 	add.w	r3, r7, #12
 8002402:	4619      	mov	r1, r3
 8002404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002408:	f002 fc4a 	bl	8004ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = INTERFACELED_Pin|MOTOR_CW_CCW_R_Pin|MD_RESET_Pin;
 800240c:	2338      	movs	r3, #56	; 0x38
 800240e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002410:	2301      	movs	r3, #1
 8002412:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2300      	movs	r3, #0
 800241a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241c:	f107 030c 	add.w	r3, r7, #12
 8002420:	4619      	mov	r1, r3
 8002422:	480b      	ldr	r0, [pc, #44]	; (8002450 <MX_GPIO_Init+0x104>)
 8002424:	f002 fc3c 	bl	8004ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SWITCH_1_Pin|SWITCH_2_Pin;
 8002428:	23c0      	movs	r3, #192	; 0xc0
 800242a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800242c:	2300      	movs	r3, #0
 800242e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002430:	2301      	movs	r3, #1
 8002432:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002434:	f107 030c 	add.w	r3, r7, #12
 8002438:	4619      	mov	r1, r3
 800243a:	4805      	ldr	r0, [pc, #20]	; (8002450 <MX_GPIO_Init+0x104>)
 800243c:	f002 fc30 	bl	8004ca0 <HAL_GPIO_Init>

}
 8002440:	bf00      	nop
 8002442:	3720      	adds	r7, #32
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40021000 	.word	0x40021000
 800244c:	48000800 	.word	0x48000800
 8002450:	48000400 	.word	0x48000400

08002454 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002458:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <MX_I2C1_Init+0x74>)
 800245a:	4a1c      	ldr	r2, [pc, #112]	; (80024cc <MX_I2C1_Init+0x78>)
 800245c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800245e:	4b1a      	ldr	r3, [pc, #104]	; (80024c8 <MX_I2C1_Init+0x74>)
 8002460:	4a1b      	ldr	r2, [pc, #108]	; (80024d0 <MX_I2C1_Init+0x7c>)
 8002462:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002464:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <MX_I2C1_Init+0x74>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800246a:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <MX_I2C1_Init+0x74>)
 800246c:	2201      	movs	r2, #1
 800246e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002470:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <MX_I2C1_Init+0x74>)
 8002472:	2200      	movs	r2, #0
 8002474:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002476:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <MX_I2C1_Init+0x74>)
 8002478:	2200      	movs	r2, #0
 800247a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <MX_I2C1_Init+0x74>)
 800247e:	2200      	movs	r2, #0
 8002480:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002482:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <MX_I2C1_Init+0x74>)
 8002484:	2200      	movs	r2, #0
 8002486:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <MX_I2C1_Init+0x74>)
 800248a:	2200      	movs	r2, #0
 800248c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800248e:	480e      	ldr	r0, [pc, #56]	; (80024c8 <MX_I2C1_Init+0x74>)
 8002490:	f002 fd88 	bl	8004fa4 <HAL_I2C_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800249a:	f000 f93a 	bl	8002712 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800249e:	2100      	movs	r1, #0
 80024a0:	4809      	ldr	r0, [pc, #36]	; (80024c8 <MX_I2C1_Init+0x74>)
 80024a2:	f003 f883 	bl	80055ac <HAL_I2CEx_ConfigAnalogFilter>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80024ac:	f000 f931 	bl	8002712 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80024b0:	2100      	movs	r1, #0
 80024b2:	4805      	ldr	r0, [pc, #20]	; (80024c8 <MX_I2C1_Init+0x74>)
 80024b4:	f003 f8c5 	bl	8005642 <HAL_I2CEx_ConfigDigitalFilter>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80024be:	f000 f928 	bl	8002712 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000858 	.word	0x20000858
 80024cc:	40005400 	.word	0x40005400
 80024d0:	10909cec 	.word	0x10909cec

080024d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b09e      	sub	sp, #120	; 0x78
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024ec:	f107 0310 	add.w	r3, r7, #16
 80024f0:	2254      	movs	r2, #84	; 0x54
 80024f2:	2100      	movs	r1, #0
 80024f4:	4618      	mov	r0, r3
 80024f6:	f005 fe47 	bl	8008188 <memset>
  if(i2cHandle->Instance==I2C1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a1f      	ldr	r2, [pc, #124]	; (800257c <HAL_I2C_MspInit+0xa8>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d137      	bne.n	8002574 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002504:	2340      	movs	r3, #64	; 0x40
 8002506:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002508:	2300      	movs	r3, #0
 800250a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800250c:	f107 0310 	add.w	r3, r7, #16
 8002510:	4618      	mov	r0, r3
 8002512:	f003 ff6d 	bl	80063f0 <HAL_RCCEx_PeriphCLKConfig>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800251c:	f000 f8f9 	bl	8002712 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002520:	4b17      	ldr	r3, [pc, #92]	; (8002580 <HAL_I2C_MspInit+0xac>)
 8002522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002524:	4a16      	ldr	r2, [pc, #88]	; (8002580 <HAL_I2C_MspInit+0xac>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800252c:	4b14      	ldr	r3, [pc, #80]	; (8002580 <HAL_I2C_MspInit+0xac>)
 800252e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002538:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800253c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800253e:	2312      	movs	r3, #18
 8002540:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002542:	2301      	movs	r3, #1
 8002544:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002546:	2303      	movs	r3, #3
 8002548:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800254a:	2304      	movs	r3, #4
 800254c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002552:	4619      	mov	r1, r3
 8002554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002558:	f002 fba2 	bl	8004ca0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <HAL_I2C_MspInit+0xac>)
 800255e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002560:	4a07      	ldr	r2, [pc, #28]	; (8002580 <HAL_I2C_MspInit+0xac>)
 8002562:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002566:	6593      	str	r3, [r2, #88]	; 0x58
 8002568:	4b05      	ldr	r3, [pc, #20]	; (8002580 <HAL_I2C_MspInit+0xac>)
 800256a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002574:	bf00      	nop
 8002576:	3778      	adds	r7, #120	; 0x78
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40005400 	.word	0x40005400
 8002580:	40021000 	.word	0x40021000

08002584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800258a:	f000 fd5e 	bl	800304a <HAL_Init>
  /* USER CODE BEGIN Init */
 // setbuf(stdout, NULL);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800258e:	f000 f871 	bl	8002674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002592:	f7ff fedb 	bl	800234c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002596:	f000 fc95 	bl	8002ec4 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800259a:	f000 faeb 	bl	8002b74 <MX_TIM6_Init>
  MX_I2C1_Init();
 800259e:	f7ff ff59 	bl	8002454 <MX_I2C1_Init>
  MX_DMA_Init();
 80025a2:	f7ff feb5 	bl	8002310 <MX_DMA_Init>
  MX_ADC1_Init();
 80025a6:	f7ff fd55 	bl	8002054 <MX_ADC1_Init>
  MX_TIM15_Init();
 80025aa:	f000 fb19 	bl	8002be0 <MX_TIM15_Init>
  MX_TIM1_Init();
 80025ae:	f000 f9f7 	bl	80029a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80025b2:	f000 fa85 	bl	8002ac0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  pl_motor_init();
 80025b6:	f7fe fd73 	bl	80010a0 <pl_motor_init>
  pl_speaker_init();
 80025ba:	f7fe fe9f 	bl	80012fc <pl_speaker_init>
  pl_timer_init();
 80025be:	f7ff fd15 	bl	8001fec <pl_timer_init>
  pl_lcd_init();
 80025c2:	f7fe fd24 	bl	800100e <pl_lcd_init>

  pl_lcd_puts("Hello");
 80025c6:	4822      	ldr	r0, [pc, #136]	; (8002650 <main+0xcc>)
 80025c8:	f7fe fd0c 	bl	8000fe4 <pl_lcd_puts>
  pl_lcd_pos(1, 0);
 80025cc:	2100      	movs	r1, #0
 80025ce:	2001      	movs	r0, #1
 80025d0:	f7fe fd43 	bl	800105a <pl_lcd_pos>
  pl_lcd_puts("   STM32");
 80025d4:	481f      	ldr	r0, [pc, #124]	; (8002654 <main+0xd0>)
 80025d6:	f7fe fd05 	bl	8000fe4 <pl_lcd_puts>
  HAL_Delay(500);
 80025da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025de:	f000 fda9 	bl	8003134 <HAL_Delay>
  pl_lcd_clear();
 80025e2:	f7fe fd55 	bl	8001090 <pl_lcd_clear>
  pl_lcd_pos(0, 0);
 80025e6:	2100      	movs	r1, #0
 80025e8:	2000      	movs	r0, #0
 80025ea:	f7fe fd36 	bl	800105a <pl_lcd_pos>
  pl_lcd_puts("Mice");
 80025ee:	481a      	ldr	r0, [pc, #104]	; (8002658 <main+0xd4>)
 80025f0:	f7fe fcf8 	bl	8000fe4 <pl_lcd_puts>
  pl_lcd_pos(1, 0);
 80025f4:	2100      	movs	r1, #0
 80025f6:	2001      	movs	r0, #1
 80025f8:	f7fe fd2f 	bl	800105a <pl_lcd_pos>
  pl_lcd_puts("aaa");
 80025fc:	4817      	ldr	r0, [pc, #92]	; (800265c <main+0xd8>)
 80025fe:	f7fe fcf1 	bl	8000fe4 <pl_lcd_puts>
  HAL_Delay(100);
 8002602:	2064      	movs	r0, #100	; 0x64
 8002604:	f000 fd96 	bl	8003134 <HAL_Delay>

  uint16_t cnt = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	80fb      	strh	r3, [r7, #6]
  sensor_mode=1;
 800260c:	4b14      	ldr	r3, [pc, #80]	; (8002660 <main+0xdc>)
 800260e:	2201      	movs	r2, #1
 8002610:	701a      	strb	r2, [r3, #0]
//	 cnt++;
//	 lcd_pos(1, 0);
//	 lcd_puts(strBuffer);
// sensor test
//     HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer) / sizeof(uint16_t));
	 printf("BATT=%f\n",g_V_batt);
 8002612:	4b14      	ldr	r3, [pc, #80]	; (8002664 <main+0xe0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7fd ff96 	bl	8000548 <__aeabi_f2d>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4811      	ldr	r0, [pc, #68]	; (8002668 <main+0xe4>)
 8002622:	f006 fa23 	bl	8008a6c <iprintf>
     printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d\n", g_sensor_on[0],g_sensor_on[1],g_sensor_on[2],g_sensor_on[3]);
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <main+0xe8>)
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	4619      	mov	r1, r3
 800262c:	4b0f      	ldr	r3, [pc, #60]	; (800266c <main+0xe8>)
 800262e:	885b      	ldrh	r3, [r3, #2]
 8002630:	461a      	mov	r2, r3
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <main+0xe8>)
 8002634:	889b      	ldrh	r3, [r3, #4]
 8002636:	4618      	mov	r0, r3
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <main+0xe8>)
 800263a:	88db      	ldrh	r3, [r3, #6]
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	4603      	mov	r3, r0
 8002640:	480b      	ldr	r0, [pc, #44]	; (8002670 <main+0xec>)
 8002642:	f006 fa13 	bl	8008a6c <iprintf>
     wait_ms(1000);
 8002646:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800264a:	f7ff fce7 	bl	800201c <wait_ms>
	 printf("BATT=%f\n",g_V_batt);
 800264e:	e7e0      	b.n	8002612 <main+0x8e>
 8002650:	0800ac10 	.word	0x0800ac10
 8002654:	0800ac18 	.word	0x0800ac18
 8002658:	0800ac24 	.word	0x0800ac24
 800265c:	0800ac2c 	.word	0x0800ac2c
 8002660:	20000203 	.word	0x20000203
 8002664:	20000214 	.word	0x20000214
 8002668:	0800ac30 	.word	0x0800ac30
 800266c:	20000204 	.word	0x20000204
 8002670:	0800ac3c 	.word	0x0800ac3c

08002674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b096      	sub	sp, #88	; 0x58
 8002678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800267a:	f107 0314 	add.w	r3, r7, #20
 800267e:	2244      	movs	r2, #68	; 0x44
 8002680:	2100      	movs	r1, #0
 8002682:	4618      	mov	r0, r3
 8002684:	f005 fd80 	bl	8008188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002688:	463b      	mov	r3, r7
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	609a      	str	r2, [r3, #8]
 8002692:	60da      	str	r2, [r3, #12]
 8002694:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002696:	f44f 7000 	mov.w	r0, #512	; 0x200
 800269a:	f003 f82d 	bl	80056f8 <HAL_PWREx_ControlVoltageScaling>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80026a4:	f000 f835 	bl	8002712 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026a8:	2301      	movs	r3, #1
 80026aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80026ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80026b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026b2:	2302      	movs	r3, #2
 80026b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026b6:	2303      	movs	r3, #3
 80026b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 3;
 80026ba:	2303      	movs	r3, #3
 80026bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80026be:	2328      	movs	r3, #40	; 0x28
 80026c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80026c2:	2307      	movs	r3, #7
 80026c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80026c6:	2302      	movs	r3, #2
 80026c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80026ca:	2302      	movs	r3, #2
 80026cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ce:	f107 0314 	add.w	r3, r7, #20
 80026d2:	4618      	mov	r0, r3
 80026d4:	f003 f866 	bl	80057a4 <HAL_RCC_OscConfig>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80026de:	f000 f818 	bl	8002712 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026e2:	230f      	movs	r3, #15
 80026e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026e6:	2303      	movs	r3, #3
 80026e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80026f6:	463b      	mov	r3, r7
 80026f8:	2104      	movs	r1, #4
 80026fa:	4618      	mov	r0, r3
 80026fc:	f003 fc72 	bl	8005fe4 <HAL_RCC_ClockConfig>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002706:	f000 f804 	bl	8002712 <Error_Handler>
  }
}
 800270a:	bf00      	nop
 800270c:	3758      	adds	r7, #88	; 0x58
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002716:	b672      	cpsid	i
}
 8002718:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800271a:	e7fe      	b.n	800271a <Error_Handler+0x8>

0800271c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002722:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <HAL_MspInit+0x44>)
 8002724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002726:	4a0e      	ldr	r2, [pc, #56]	; (8002760 <HAL_MspInit+0x44>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6613      	str	r3, [r2, #96]	; 0x60
 800272e:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <HAL_MspInit+0x44>)
 8002730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800273a:	4b09      	ldr	r3, [pc, #36]	; (8002760 <HAL_MspInit+0x44>)
 800273c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273e:	4a08      	ldr	r2, [pc, #32]	; (8002760 <HAL_MspInit+0x44>)
 8002740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002744:	6593      	str	r3, [r2, #88]	; 0x58
 8002746:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_MspInit+0x44>)
 8002748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000

08002764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002768:	e7fe      	b.n	8002768 <NMI_Handler+0x4>

0800276a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800276e:	e7fe      	b.n	800276e <HardFault_Handler+0x4>

08002770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002774:	e7fe      	b.n	8002774 <MemManage_Handler+0x4>

08002776 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800277a:	e7fe      	b.n	800277a <BusFault_Handler+0x4>

0800277c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002780:	e7fe      	b.n	8002780 <UsageFault_Handler+0x4>

08002782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027b0:	f000 fca0 	bl	80030f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80027bc:	4802      	ldr	r0, [pc, #8]	; (80027c8 <DMA1_Channel1_IRQHandler+0x10>)
 80027be:	f002 f98f 	bl	8004ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000810 	.word	0x20000810

080027cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027d0:	4804      	ldr	r0, [pc, #16]	; (80027e4 <TIM6_DAC_IRQHandler+0x18>)
 80027d2:	f004 f9f8 	bl	8006bc6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  pl_timer_count();
 80027d6:	f7ff fc13 	bl	8002000 <pl_timer_count>
  pl_interupt_getSensor();
 80027da:	f7fe fd7b 	bl	80012d4 <pl_interupt_getSensor>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000940 	.word	0x20000940

080027e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
	return 1;
 80027ec:	2301      	movs	r3, #1
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <_kill>:

int _kill(int pid, int sig)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002802:	f005 fc97 	bl	8008134 <__errno>
 8002806:	4603      	mov	r3, r0
 8002808:	2216      	movs	r2, #22
 800280a:	601a      	str	r2, [r3, #0]
	return -1;
 800280c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002810:	4618      	mov	r0, r3
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <_exit>:

void _exit (int status)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002820:	f04f 31ff 	mov.w	r1, #4294967295
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7ff ffe7 	bl	80027f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800282a:	e7fe      	b.n	800282a <_exit+0x12>

0800282c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	e00a      	b.n	8002854 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800283e:	f3af 8000 	nop.w
 8002842:	4601      	mov	r1, r0
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	60ba      	str	r2, [r7, #8]
 800284a:	b2ca      	uxtb	r2, r1
 800284c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	3301      	adds	r3, #1
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	429a      	cmp	r2, r3
 800285a:	dbf0      	blt.n	800283e <_read+0x12>
	}

return len;
 800285c:	687b      	ldr	r3, [r7, #4]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	e00a      	b.n	8002890 <_write+0x28>
	{
		HAL_UART_Transmit(&huart2, ptr++, 1, 1);
 800287a:	68b9      	ldr	r1, [r7, #8]
 800287c:	1c4b      	adds	r3, r1, #1
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	2301      	movs	r3, #1
 8002882:	2201      	movs	r2, #1
 8002884:	4807      	ldr	r0, [pc, #28]	; (80028a4 <_write+0x3c>)
 8002886:	f005 f82b 	bl	80078e0 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	3301      	adds	r3, #1
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	429a      	cmp	r2, r3
 8002896:	dbf0      	blt.n	800287a <_write+0x12>
	}
	return len;
 8002898:	687b      	ldr	r3, [r7, #4]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	200009d8 	.word	0x200009d8

080028a8 <_close>:

int _close(int file)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
	return -1;
 80028b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028d0:	605a      	str	r2, [r3, #4]
	return 0;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <_isatty>:

int _isatty(int file)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	return 1;
 80028e8:	2301      	movs	r3, #1
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b085      	sub	sp, #20
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
	return 0;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002918:	4a14      	ldr	r2, [pc, #80]	; (800296c <_sbrk+0x5c>)
 800291a:	4b15      	ldr	r3, [pc, #84]	; (8002970 <_sbrk+0x60>)
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002924:	4b13      	ldr	r3, [pc, #76]	; (8002974 <_sbrk+0x64>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d102      	bne.n	8002932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800292c:	4b11      	ldr	r3, [pc, #68]	; (8002974 <_sbrk+0x64>)
 800292e:	4a12      	ldr	r2, [pc, #72]	; (8002978 <_sbrk+0x68>)
 8002930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <_sbrk+0x64>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	429a      	cmp	r2, r3
 800293e:	d207      	bcs.n	8002950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002940:	f005 fbf8 	bl	8008134 <__errno>
 8002944:	4603      	mov	r3, r0
 8002946:	220c      	movs	r2, #12
 8002948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800294a:	f04f 33ff 	mov.w	r3, #4294967295
 800294e:	e009      	b.n	8002964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <_sbrk+0x64>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002956:	4b07      	ldr	r3, [pc, #28]	; (8002974 <_sbrk+0x64>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4413      	add	r3, r2
 800295e:	4a05      	ldr	r2, [pc, #20]	; (8002974 <_sbrk+0x64>)
 8002960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002962:	68fb      	ldr	r3, [r7, #12]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20010000 	.word	0x20010000
 8002970:	00000400 	.word	0x00000400
 8002974:	200008a4 	.word	0x200008a4
 8002978:	20000a70 	.word	0x20000a70

0800297c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <SystemInit+0x20>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	4a05      	ldr	r2, [pc, #20]	; (800299c <SystemInit+0x20>)
 8002988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800298c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b096      	sub	sp, #88	; 0x58
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]
 80029b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	60da      	str	r2, [r3, #12]
 80029c0:	611a      	str	r2, [r3, #16]
 80029c2:	615a      	str	r2, [r3, #20]
 80029c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029c6:	1d3b      	adds	r3, r7, #4
 80029c8:	222c      	movs	r2, #44	; 0x2c
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f005 fbdb 	bl	8008188 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029d2:	4b39      	ldr	r3, [pc, #228]	; (8002ab8 <MX_TIM1_Init+0x118>)
 80029d4:	4a39      	ldr	r2, [pc, #228]	; (8002abc <MX_TIM1_Init+0x11c>)
 80029d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 80029d8:	4b37      	ldr	r3, [pc, #220]	; (8002ab8 <MX_TIM1_Init+0x118>)
 80029da:	2207      	movs	r2, #7
 80029dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029de:	4b36      	ldr	r3, [pc, #216]	; (8002ab8 <MX_TIM1_Init+0x118>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80029e4:	4b34      	ldr	r3, [pc, #208]	; (8002ab8 <MX_TIM1_Init+0x118>)
 80029e6:	f242 720f 	movw	r2, #9999	; 0x270f
 80029ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ec:	4b32      	ldr	r3, [pc, #200]	; (8002ab8 <MX_TIM1_Init+0x118>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029f2:	4b31      	ldr	r3, [pc, #196]	; (8002ab8 <MX_TIM1_Init+0x118>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f8:	4b2f      	ldr	r3, [pc, #188]	; (8002ab8 <MX_TIM1_Init+0x118>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80029fe:	482e      	ldr	r0, [pc, #184]	; (8002ab8 <MX_TIM1_Init+0x118>)
 8002a00:	f004 f88a 	bl	8006b18 <HAL_TIM_PWM_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002a0a:	f7ff fe82 	bl	8002712 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a12:	2300      	movs	r3, #0
 8002a14:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4825      	ldr	r0, [pc, #148]	; (8002ab8 <MX_TIM1_Init+0x118>)
 8002a22:	f004 fe13 	bl	800764c <HAL_TIMEx_MasterConfigSynchronization>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002a2c:	f7ff fe71 	bl	8002712 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a30:	2360      	movs	r3, #96	; 0x60
 8002a32:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 5000-1;
 8002a34:	f241 3387 	movw	r3, #4999	; 0x1387
 8002a38:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a42:	2300      	movs	r3, #0
 8002a44:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a46:	2300      	movs	r3, #0
 8002a48:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a52:	2200      	movs	r2, #0
 8002a54:	4619      	mov	r1, r3
 8002a56:	4818      	ldr	r0, [pc, #96]	; (8002ab8 <MX_TIM1_Init+0x118>)
 8002a58:	f004 f9d4 	bl	8006e04 <HAL_TIM_PWM_ConfigChannel>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8002a62:	f7ff fe56 	bl	8002712 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a72:	2300      	movs	r3, #0
 8002a74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002a88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4807      	ldr	r0, [pc, #28]	; (8002ab8 <MX_TIM1_Init+0x118>)
 8002a9c:	f004 fe3c 	bl	8007718 <HAL_TIMEx_ConfigBreakDeadTime>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8002aa6:	f7ff fe34 	bl	8002712 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002aaa:	4803      	ldr	r0, [pc, #12]	; (8002ab8 <MX_TIM1_Init+0x118>)
 8002aac:	f000 f98a 	bl	8002dc4 <HAL_TIM_MspPostInit>

}
 8002ab0:	bf00      	nop
 8002ab2:	3758      	adds	r7, #88	; 0x58
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	200008a8 	.word	0x200008a8
 8002abc:	40012c00 	.word	0x40012c00

08002ac0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08a      	sub	sp, #40	; 0x28
 8002ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ac6:	f107 031c 	add.w	r3, r7, #28
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	605a      	str	r2, [r3, #4]
 8002ad0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ad2:	463b      	mov	r3, r7
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	60da      	str	r2, [r3, #12]
 8002ade:	611a      	str	r2, [r3, #16]
 8002ae0:	615a      	str	r2, [r3, #20]
 8002ae2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ae4:	4b22      	ldr	r3, [pc, #136]	; (8002b70 <MX_TIM2_Init+0xb0>)
 8002ae6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002aea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8002aec:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <MX_TIM2_Init+0xb0>)
 8002aee:	2207      	movs	r2, #7
 8002af0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af2:	4b1f      	ldr	r3, [pc, #124]	; (8002b70 <MX_TIM2_Init+0xb0>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8002af8:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <MX_TIM2_Init+0xb0>)
 8002afa:	f242 720f 	movw	r2, #9999	; 0x270f
 8002afe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b00:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <MX_TIM2_Init+0xb0>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b06:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <MX_TIM2_Init+0xb0>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002b0c:	4818      	ldr	r0, [pc, #96]	; (8002b70 <MX_TIM2_Init+0xb0>)
 8002b0e:	f004 f803 	bl	8006b18 <HAL_TIM_PWM_Init>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002b18:	f7ff fdfb 	bl	8002712 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b24:	f107 031c 	add.w	r3, r7, #28
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4811      	ldr	r0, [pc, #68]	; (8002b70 <MX_TIM2_Init+0xb0>)
 8002b2c:	f004 fd8e 	bl	800764c <HAL_TIMEx_MasterConfigSynchronization>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002b36:	f7ff fdec 	bl	8002712 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b3a:	2360      	movs	r3, #96	; 0x60
 8002b3c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000-1;
 8002b3e:	f241 3387 	movw	r3, #4999	; 0x1387
 8002b42:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b4c:	463b      	mov	r3, r7
 8002b4e:	2204      	movs	r2, #4
 8002b50:	4619      	mov	r1, r3
 8002b52:	4807      	ldr	r0, [pc, #28]	; (8002b70 <MX_TIM2_Init+0xb0>)
 8002b54:	f004 f956 	bl	8006e04 <HAL_TIM_PWM_ConfigChannel>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002b5e:	f7ff fdd8 	bl	8002712 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002b62:	4803      	ldr	r0, [pc, #12]	; (8002b70 <MX_TIM2_Init+0xb0>)
 8002b64:	f000 f92e 	bl	8002dc4 <HAL_TIM_MspPostInit>

}
 8002b68:	bf00      	nop
 8002b6a:	3728      	adds	r7, #40	; 0x28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	200008f4 	.word	0x200008f4

08002b74 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b7a:	1d3b      	adds	r3, r7, #4
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002b84:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <MX_TIM6_Init+0x64>)
 8002b86:	4a15      	ldr	r2, [pc, #84]	; (8002bdc <MX_TIM6_Init+0x68>)
 8002b88:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 8002b8a:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <MX_TIM6_Init+0x64>)
 8002b8c:	224f      	movs	r2, #79	; 0x4f
 8002b8e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b90:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <MX_TIM6_Init+0x64>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002b96:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <MX_TIM6_Init+0x64>)
 8002b98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b9c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b9e:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <MX_TIM6_Init+0x64>)
 8002ba0:	2280      	movs	r2, #128	; 0x80
 8002ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002ba4:	480c      	ldr	r0, [pc, #48]	; (8002bd8 <MX_TIM6_Init+0x64>)
 8002ba6:	f003 ff0b 	bl	80069c0 <HAL_TIM_Base_Init>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002bb0:	f7ff fdaf 	bl	8002712 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002bbc:	1d3b      	adds	r3, r7, #4
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4805      	ldr	r0, [pc, #20]	; (8002bd8 <MX_TIM6_Init+0x64>)
 8002bc2:	f004 fd43 	bl	800764c <HAL_TIMEx_MasterConfigSynchronization>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002bcc:	f7ff fda1 	bl	8002712 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002bd0:	bf00      	nop
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	20000940 	.word	0x20000940
 8002bdc:	40001000 	.word	0x40001000

08002be0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b096      	sub	sp, #88	; 0x58
 8002be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002be6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	605a      	str	r2, [r3, #4]
 8002bf0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bf2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	605a      	str	r2, [r3, #4]
 8002bfc:	609a      	str	r2, [r3, #8]
 8002bfe:	60da      	str	r2, [r3, #12]
 8002c00:	611a      	str	r2, [r3, #16]
 8002c02:	615a      	str	r2, [r3, #20]
 8002c04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c06:	1d3b      	adds	r3, r7, #4
 8002c08:	222c      	movs	r2, #44	; 0x2c
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f005 fabb 	bl	8008188 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002c12:	4b34      	ldr	r3, [pc, #208]	; (8002ce4 <MX_TIM15_Init+0x104>)
 8002c14:	4a34      	ldr	r2, [pc, #208]	; (8002ce8 <MX_TIM15_Init+0x108>)
 8002c16:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 16-1;
 8002c18:	4b32      	ldr	r3, [pc, #200]	; (8002ce4 <MX_TIM15_Init+0x104>)
 8002c1a:	220f      	movs	r2, #15
 8002c1c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c1e:	4b31      	ldr	r3, [pc, #196]	; (8002ce4 <MX_TIM15_Init+0x104>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 5000-1;
 8002c24:	4b2f      	ldr	r3, [pc, #188]	; (8002ce4 <MX_TIM15_Init+0x104>)
 8002c26:	f241 3287 	movw	r2, #4999	; 0x1387
 8002c2a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c2c:	4b2d      	ldr	r3, [pc, #180]	; (8002ce4 <MX_TIM15_Init+0x104>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002c32:	4b2c      	ldr	r3, [pc, #176]	; (8002ce4 <MX_TIM15_Init+0x104>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c38:	4b2a      	ldr	r3, [pc, #168]	; (8002ce4 <MX_TIM15_Init+0x104>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002c3e:	4829      	ldr	r0, [pc, #164]	; (8002ce4 <MX_TIM15_Init+0x104>)
 8002c40:	f003 ff6a 	bl	8006b18 <HAL_TIM_PWM_Init>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8002c4a:	f7ff fd62 	bl	8002712 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c52:	2300      	movs	r3, #0
 8002c54:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002c56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4821      	ldr	r0, [pc, #132]	; (8002ce4 <MX_TIM15_Init+0x104>)
 8002c5e:	f004 fcf5 	bl	800764c <HAL_TIMEx_MasterConfigSynchronization>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002c68:	f7ff fd53 	bl	8002712 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c6c:	2360      	movs	r3, #96	; 0x60
 8002c6e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 2500-1;
 8002c70:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8002c74:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c76:	2300      	movs	r3, #0
 8002c78:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c82:	2300      	movs	r3, #0
 8002c84:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c86:	2300      	movs	r3, #0
 8002c88:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c8e:	2204      	movs	r2, #4
 8002c90:	4619      	mov	r1, r3
 8002c92:	4814      	ldr	r0, [pc, #80]	; (8002ce4 <MX_TIM15_Init+0x104>)
 8002c94:	f004 f8b6 	bl	8006e04 <HAL_TIM_PWM_ConfigChannel>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 8002c9e:	f7ff fd38 	bl	8002712 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002cb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002cc0:	1d3b      	adds	r3, r7, #4
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4807      	ldr	r0, [pc, #28]	; (8002ce4 <MX_TIM15_Init+0x104>)
 8002cc6:	f004 fd27 	bl	8007718 <HAL_TIMEx_ConfigBreakDeadTime>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_TIM15_Init+0xf4>
  {
    Error_Handler();
 8002cd0:	f7ff fd1f 	bl	8002712 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002cd4:	4803      	ldr	r0, [pc, #12]	; (8002ce4 <MX_TIM15_Init+0x104>)
 8002cd6:	f000 f875 	bl	8002dc4 <HAL_TIM_MspPostInit>

}
 8002cda:	bf00      	nop
 8002cdc:	3758      	adds	r7, #88	; 0x58
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	2000098c 	.word	0x2000098c
 8002ce8:	40014000 	.word	0x40014000

08002cec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a1c      	ldr	r2, [pc, #112]	; (8002d6c <HAL_TIM_PWM_MspInit+0x80>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d10c      	bne.n	8002d18 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cfe:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <HAL_TIM_PWM_MspInit+0x84>)
 8002d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d02:	4a1b      	ldr	r2, [pc, #108]	; (8002d70 <HAL_TIM_PWM_MspInit+0x84>)
 8002d04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d08:	6613      	str	r3, [r2, #96]	; 0x60
 8002d0a:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <HAL_TIM_PWM_MspInit+0x84>)
 8002d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002d16:	e022      	b.n	8002d5e <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM2)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d20:	d10c      	bne.n	8002d3c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d22:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <HAL_TIM_PWM_MspInit+0x84>)
 8002d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d26:	4a12      	ldr	r2, [pc, #72]	; (8002d70 <HAL_TIM_PWM_MspInit+0x84>)
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	6593      	str	r3, [r2, #88]	; 0x58
 8002d2e:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <HAL_TIM_PWM_MspInit+0x84>)
 8002d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	693b      	ldr	r3, [r7, #16]
}
 8002d3a:	e010      	b.n	8002d5e <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM15)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a0c      	ldr	r2, [pc, #48]	; (8002d74 <HAL_TIM_PWM_MspInit+0x88>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d10b      	bne.n	8002d5e <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002d46:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <HAL_TIM_PWM_MspInit+0x84>)
 8002d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4a:	4a09      	ldr	r2, [pc, #36]	; (8002d70 <HAL_TIM_PWM_MspInit+0x84>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d50:	6613      	str	r3, [r2, #96]	; 0x60
 8002d52:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <HAL_TIM_PWM_MspInit+0x84>)
 8002d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
}
 8002d5e:	bf00      	nop
 8002d60:	371c      	adds	r7, #28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40012c00 	.word	0x40012c00
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40014000 	.word	0x40014000

08002d78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a0d      	ldr	r2, [pc, #52]	; (8002dbc <HAL_TIM_Base_MspInit+0x44>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d113      	bne.n	8002db2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <HAL_TIM_Base_MspInit+0x48>)
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8e:	4a0c      	ldr	r2, [pc, #48]	; (8002dc0 <HAL_TIM_Base_MspInit+0x48>)
 8002d90:	f043 0310 	orr.w	r3, r3, #16
 8002d94:	6593      	str	r3, [r2, #88]	; 0x58
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <HAL_TIM_Base_MspInit+0x48>)
 8002d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002da2:	2200      	movs	r2, #0
 8002da4:	2100      	movs	r1, #0
 8002da6:	2036      	movs	r0, #54	; 0x36
 8002da8:	f001 fd0d 	bl	80047c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002dac:	2036      	movs	r0, #54	; 0x36
 8002dae:	f001 fd26 	bl	80047fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002db2:	bf00      	nop
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40001000 	.word	0x40001000
 8002dc0:	40021000 	.word	0x40021000

08002dc4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	; 0x28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dcc:	f107 0314 	add.w	r3, r7, #20
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	60da      	str	r2, [r3, #12]
 8002dda:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a35      	ldr	r2, [pc, #212]	; (8002eb8 <HAL_TIM_MspPostInit+0xf4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d11e      	bne.n	8002e24 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de6:	4b35      	ldr	r3, [pc, #212]	; (8002ebc <HAL_TIM_MspPostInit+0xf8>)
 8002de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dea:	4a34      	ldr	r2, [pc, #208]	; (8002ebc <HAL_TIM_MspPostInit+0xf8>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002df2:	4b32      	ldr	r3, [pc, #200]	; (8002ebc <HAL_TIM_MspPostInit+0xf8>)
 8002df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_CLOCK_L_Pin;
 8002dfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e04:	2302      	movs	r3, #2
 8002e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e10:	2301      	movs	r3, #1
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_CLOCK_L_GPIO_Port, &GPIO_InitStruct);
 8002e14:	f107 0314 	add.w	r3, r7, #20
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e1e:	f001 ff3f 	bl	8004ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002e22:	e044      	b.n	8002eae <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM2)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2c:	d11d      	bne.n	8002e6a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2e:	4b23      	ldr	r3, [pc, #140]	; (8002ebc <HAL_TIM_MspPostInit+0xf8>)
 8002e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e32:	4a22      	ldr	r2, [pc, #136]	; (8002ebc <HAL_TIM_MspPostInit+0xf8>)
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e3a:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <HAL_TIM_MspPostInit+0xf8>)
 8002e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_CLOCK_R_Pin;
 8002e46:	2302      	movs	r3, #2
 8002e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e52:	2300      	movs	r3, #0
 8002e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e56:	2301      	movs	r3, #1
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_CLOCK_R_GPIO_Port, &GPIO_InitStruct);
 8002e5a:	f107 0314 	add.w	r3, r7, #20
 8002e5e:	4619      	mov	r1, r3
 8002e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e64:	f001 ff1c 	bl	8004ca0 <HAL_GPIO_Init>
}
 8002e68:	e021      	b.n	8002eae <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM15)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a14      	ldr	r2, [pc, #80]	; (8002ec0 <HAL_TIM_MspPostInit+0xfc>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d11c      	bne.n	8002eae <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e74:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <HAL_TIM_MspPostInit+0xf8>)
 8002e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e78:	4a10      	ldr	r2, [pc, #64]	; (8002ebc <HAL_TIM_MspPostInit+0xf8>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e80:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <HAL_TIM_MspPostInit+0xf8>)
 8002e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPEAKER_Pin;
 8002e8c:	2308      	movs	r3, #8
 8002e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e90:	2302      	movs	r3, #2
 8002e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002e9c:	230e      	movs	r3, #14
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPEAKER_GPIO_Port, &GPIO_InitStruct);
 8002ea0:	f107 0314 	add.w	r3, r7, #20
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eaa:	f001 fef9 	bl	8004ca0 <HAL_GPIO_Init>
}
 8002eae:	bf00      	nop
 8002eb0:	3728      	adds	r7, #40	; 0x28
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40012c00 	.word	0x40012c00
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	40014000 	.word	0x40014000

08002ec4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ec8:	4b14      	ldr	r3, [pc, #80]	; (8002f1c <MX_USART2_UART_Init+0x58>)
 8002eca:	4a15      	ldr	r2, [pc, #84]	; (8002f20 <MX_USART2_UART_Init+0x5c>)
 8002ecc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ece:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <MX_USART2_UART_Init+0x58>)
 8002ed0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ed4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ed6:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <MX_USART2_UART_Init+0x58>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002edc:	4b0f      	ldr	r3, [pc, #60]	; (8002f1c <MX_USART2_UART_Init+0x58>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <MX_USART2_UART_Init+0x58>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <MX_USART2_UART_Init+0x58>)
 8002eea:	220c      	movs	r2, #12
 8002eec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eee:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <MX_USART2_UART_Init+0x58>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef4:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <MX_USART2_UART_Init+0x58>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002efa:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <MX_USART2_UART_Init+0x58>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <MX_USART2_UART_Init+0x58>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f06:	4805      	ldr	r0, [pc, #20]	; (8002f1c <MX_USART2_UART_Init+0x58>)
 8002f08:	f004 fc9c 	bl	8007844 <HAL_UART_Init>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002f12:	f7ff fbfe 	bl	8002712 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	200009d8 	.word	0x200009d8
 8002f20:	40004400 	.word	0x40004400

08002f24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b09e      	sub	sp, #120	; 0x78
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	60da      	str	r2, [r3, #12]
 8002f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f3c:	f107 0310 	add.w	r3, r7, #16
 8002f40:	2254      	movs	r2, #84	; 0x54
 8002f42:	2100      	movs	r1, #0
 8002f44:	4618      	mov	r0, r3
 8002f46:	f005 f91f 	bl	8008188 <memset>
  if(uartHandle->Instance==USART2)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a28      	ldr	r2, [pc, #160]	; (8002ff0 <HAL_UART_MspInit+0xcc>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d148      	bne.n	8002fe6 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002f54:	2302      	movs	r3, #2
 8002f56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f5c:	f107 0310 	add.w	r3, r7, #16
 8002f60:	4618      	mov	r0, r3
 8002f62:	f003 fa45 	bl	80063f0 <HAL_RCCEx_PeriphCLKConfig>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f6c:	f7ff fbd1 	bl	8002712 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f70:	4b20      	ldr	r3, [pc, #128]	; (8002ff4 <HAL_UART_MspInit+0xd0>)
 8002f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f74:	4a1f      	ldr	r2, [pc, #124]	; (8002ff4 <HAL_UART_MspInit+0xd0>)
 8002f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <HAL_UART_MspInit+0xd0>)
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f88:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <HAL_UART_MspInit+0xd0>)
 8002f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8c:	4a19      	ldr	r2, [pc, #100]	; (8002ff4 <HAL_UART_MspInit+0xd0>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f94:	4b17      	ldr	r3, [pc, #92]	; (8002ff4 <HAL_UART_MspInit+0xd0>)
 8002f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fac:	2303      	movs	r3, #3
 8002fae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fb0:	2307      	movs	r3, #7
 8002fb2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002fb4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002fb8:	4619      	mov	r1, r3
 8002fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fbe:	f001 fe6f 	bl	8004ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fc6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002fd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002fdc:	4619      	mov	r1, r3
 8002fde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fe2:	f001 fe5d 	bl	8004ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	3778      	adds	r7, #120	; 0x78
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40004400 	.word	0x40004400
 8002ff4:	40021000 	.word	0x40021000

08002ff8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003030 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ffc:	f7ff fcbe 	bl	800297c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003000:	480c      	ldr	r0, [pc, #48]	; (8003034 <LoopForever+0x6>)
  ldr r1, =_edata
 8003002:	490d      	ldr	r1, [pc, #52]	; (8003038 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003004:	4a0d      	ldr	r2, [pc, #52]	; (800303c <LoopForever+0xe>)
  movs r3, #0
 8003006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003008:	e002      	b.n	8003010 <LoopCopyDataInit>

0800300a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800300a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800300c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800300e:	3304      	adds	r3, #4

08003010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003014:	d3f9      	bcc.n	800300a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003016:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003018:	4c0a      	ldr	r4, [pc, #40]	; (8003044 <LoopForever+0x16>)
  movs r3, #0
 800301a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800301c:	e001      	b.n	8003022 <LoopFillZerobss>

0800301e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800301e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003020:	3204      	adds	r2, #4

08003022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003024:	d3fb      	bcc.n	800301e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003026:	f005 f88b 	bl	8008140 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800302a:	f7ff faab 	bl	8002584 <main>

0800302e <LoopForever>:

LoopForever:
    b LoopForever
 800302e:	e7fe      	b.n	800302e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003030:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003038:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800303c:	0800b094 	.word	0x0800b094
  ldr r2, =_sbss
 8003040:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003044:	20000a70 	.word	0x20000a70

08003048 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003048:	e7fe      	b.n	8003048 <ADC1_IRQHandler>

0800304a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b082      	sub	sp, #8
 800304e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003054:	2003      	movs	r0, #3
 8003056:	f001 fbab 	bl	80047b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800305a:	2000      	movs	r0, #0
 800305c:	f000 f80e 	bl	800307c <HAL_InitTick>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	71fb      	strb	r3, [r7, #7]
 800306a:	e001      	b.n	8003070 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800306c:	f7ff fb56 	bl	800271c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003070:	79fb      	ldrb	r3, [r7, #7]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003088:	4b17      	ldr	r3, [pc, #92]	; (80030e8 <HAL_InitTick+0x6c>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d023      	beq.n	80030d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003090:	4b16      	ldr	r3, [pc, #88]	; (80030ec <HAL_InitTick+0x70>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <HAL_InitTick+0x6c>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	4619      	mov	r1, r3
 800309a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800309e:	fbb3 f3f1 	udiv	r3, r3, r1
 80030a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a6:	4618      	mov	r0, r3
 80030a8:	f001 fbb7 	bl	800481a <HAL_SYSTICK_Config>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10f      	bne.n	80030d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b0f      	cmp	r3, #15
 80030b6:	d809      	bhi.n	80030cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030b8:	2200      	movs	r2, #0
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	f04f 30ff 	mov.w	r0, #4294967295
 80030c0:	f001 fb81 	bl	80047c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030c4:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <HAL_InitTick+0x74>)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e007      	b.n	80030dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	73fb      	strb	r3, [r7, #15]
 80030d0:	e004      	b.n	80030dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	73fb      	strb	r3, [r7, #15]
 80030d6:	e001      	b.n	80030dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000008 	.word	0x20000008
 80030ec:	20000000 	.word	0x20000000
 80030f0:	20000004 	.word	0x20000004

080030f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030f8:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_IncTick+0x20>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_IncTick+0x24>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4413      	add	r3, r2
 8003104:	4a04      	ldr	r2, [pc, #16]	; (8003118 <HAL_IncTick+0x24>)
 8003106:	6013      	str	r3, [r2, #0]
}
 8003108:	bf00      	nop
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	20000008 	.word	0x20000008
 8003118:	20000a5c 	.word	0x20000a5c

0800311c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return uwTick;
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <HAL_GetTick+0x14>)
 8003122:	681b      	ldr	r3, [r3, #0]
}
 8003124:	4618      	mov	r0, r3
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	20000a5c 	.word	0x20000a5c

08003134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800313c:	f7ff ffee 	bl	800311c <HAL_GetTick>
 8003140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314c:	d005      	beq.n	800315a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HAL_Delay+0x44>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4413      	add	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800315a:	bf00      	nop
 800315c:	f7ff ffde 	bl	800311c <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	429a      	cmp	r2, r3
 800316a:	d8f7      	bhi.n	800315c <HAL_Delay+0x28>
  {
  }
}
 800316c:	bf00      	nop
 800316e:	bf00      	nop
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	20000008 	.word	0x20000008

0800317c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	609a      	str	r2, [r3, #8]
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	609a      	str	r2, [r3, #8]
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80031d8:	4618      	mov	r0, r3
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	3360      	adds	r3, #96	; 0x60
 80031f6:	461a      	mov	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	4b08      	ldr	r3, [pc, #32]	; (8003228 <LL_ADC_SetOffset+0x44>)
 8003206:	4013      	ands	r3, r2
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	4313      	orrs	r3, r2
 8003214:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800321c:	bf00      	nop
 800321e:	371c      	adds	r7, #28
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	03fff000 	.word	0x03fff000

0800322c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3360      	adds	r3, #96	; 0x60
 800323a:	461a      	mov	r2, r3
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	3360      	adds	r3, #96	; 0x60
 8003268:	461a      	mov	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	431a      	orrs	r2, r3
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003282:	bf00      	nop
 8003284:	371c      	adds	r7, #28
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80032a2:	2301      	movs	r3, #1
 80032a4:	e000      	b.n	80032a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	3330      	adds	r3, #48	; 0x30
 80032c4:	461a      	mov	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	0a1b      	lsrs	r3, r3, #8
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	f003 030c 	and.w	r3, r3, #12
 80032d0:	4413      	add	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f003 031f 	and.w	r3, r3, #31
 80032de:	211f      	movs	r1, #31
 80032e0:	fa01 f303 	lsl.w	r3, r1, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	401a      	ands	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	0e9b      	lsrs	r3, r3, #26
 80032ec:	f003 011f 	and.w	r1, r3, #31
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	fa01 f303 	lsl.w	r3, r1, r3
 80032fa:	431a      	orrs	r2, r3
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003300:	bf00      	nop
 8003302:	371c      	adds	r7, #28
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	3314      	adds	r3, #20
 800331c:	461a      	mov	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	0e5b      	lsrs	r3, r3, #25
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	4413      	add	r3, r2
 800332a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	0d1b      	lsrs	r3, r3, #20
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	2107      	movs	r1, #7
 800333a:	fa01 f303 	lsl.w	r3, r1, r3
 800333e:	43db      	mvns	r3, r3
 8003340:	401a      	ands	r2, r3
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	0d1b      	lsrs	r3, r3, #20
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	fa01 f303 	lsl.w	r3, r1, r3
 8003350:	431a      	orrs	r2, r3
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003356:	bf00      	nop
 8003358:	371c      	adds	r7, #28
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800337c:	43db      	mvns	r3, r3
 800337e:	401a      	ands	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f003 0318 	and.w	r3, r3, #24
 8003386:	4908      	ldr	r1, [pc, #32]	; (80033a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003388:	40d9      	lsrs	r1, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	400b      	ands	r3, r1
 800338e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003392:	431a      	orrs	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800339a:	bf00      	nop
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	0007ffff 	.word	0x0007ffff

080033ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80033bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6093      	str	r3, [r2, #8]
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033e4:	d101      	bne.n	80033ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003408:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800340c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003430:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003434:	d101      	bne.n	800343a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003458:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800345c:	f043 0201 	orr.w	r2, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003480:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003484:	f043 0202 	orr.w	r2, r3, #2
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <LL_ADC_IsEnabled+0x18>
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <LL_ADC_IsEnabled+0x1a>
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d101      	bne.n	80034d6 <LL_ADC_IsDisableOngoing+0x18>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <LL_ADC_IsDisableOngoing+0x1a>
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034f8:	f043 0204 	orr.w	r2, r3, #4
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800351c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003520:	f043 0210 	orr.w	r2, r3, #16
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b04      	cmp	r3, #4
 8003546:	d101      	bne.n	800354c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800356a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800356e:	f043 0220 	orr.w	r2, r3, #32
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b08      	cmp	r3, #8
 8003594:	d101      	bne.n	800359a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e12c      	b.n	800381c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d109      	bne.n	80035e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7fe fde5 	bl	80021a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff fef1 	bl	80033d0 <LL_ADC_IsDeepPowerDownEnabled>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d004      	beq.n	80035fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff fed7 	bl	80033ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff ff0c 	bl	8003420 <LL_ADC_IsInternalRegulatorEnabled>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d115      	bne.n	800363a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fef0 	bl	80033f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003618:	4b82      	ldr	r3, [pc, #520]	; (8003824 <HAL_ADC_Init+0x27c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	099b      	lsrs	r3, r3, #6
 800361e:	4a82      	ldr	r2, [pc, #520]	; (8003828 <HAL_ADC_Init+0x280>)
 8003620:	fba2 2303 	umull	r2, r3, r2, r3
 8003624:	099b      	lsrs	r3, r3, #6
 8003626:	3301      	adds	r3, #1
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800362c:	e002      	b.n	8003634 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	3b01      	subs	r3, #1
 8003632:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f9      	bne.n	800362e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff feee 	bl	8003420 <LL_ADC_IsInternalRegulatorEnabled>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10d      	bne.n	8003666 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364e:	f043 0210 	orr.w	r2, r3, #16
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365a:	f043 0201 	orr.w	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff ff62 	bl	8003534 <LL_ADC_REG_IsConversionOngoing>
 8003670:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	2b00      	cmp	r3, #0
 800367c:	f040 80c5 	bne.w	800380a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	2b00      	cmp	r3, #0
 8003684:	f040 80c1 	bne.w	800380a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003690:	f043 0202 	orr.w	r2, r3, #2
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff fefb 	bl	8003498 <LL_ADC_IsEnabled>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10b      	bne.n	80036c0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036a8:	4860      	ldr	r0, [pc, #384]	; (800382c <HAL_ADC_Init+0x284>)
 80036aa:	f7ff fef5 	bl	8003498 <LL_ADC_IsEnabled>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d105      	bne.n	80036c0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	4619      	mov	r1, r3
 80036ba:	485d      	ldr	r0, [pc, #372]	; (8003830 <HAL_ADC_Init+0x288>)
 80036bc:	f7ff fd5e 	bl	800317c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	7e5b      	ldrb	r3, [r3, #25]
 80036c4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036ca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80036d0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80036d6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036de:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d106      	bne.n	80036fc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	3b01      	subs	r3, #1
 80036f4:	045b      	lsls	r3, r3, #17
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003700:	2b00      	cmp	r3, #0
 8003702:	d009      	beq.n	8003718 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4313      	orrs	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	4b45      	ldr	r3, [pc, #276]	; (8003834 <HAL_ADC_Init+0x28c>)
 8003720:	4013      	ands	r3, r2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6812      	ldr	r2, [r2, #0]
 8003726:	69b9      	ldr	r1, [r7, #24]
 8003728:	430b      	orrs	r3, r1
 800372a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff feff 	bl	8003534 <LL_ADC_REG_IsConversionOngoing>
 8003736:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff ff20 	bl	8003582 <LL_ADC_INJ_IsConversionOngoing>
 8003742:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d13d      	bne.n	80037c6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d13a      	bne.n	80037c6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003754:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800375c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800375e:	4313      	orrs	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800376c:	f023 0302 	bic.w	r3, r3, #2
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	69b9      	ldr	r1, [r7, #24]
 8003776:	430b      	orrs	r3, r1
 8003778:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003780:	2b01      	cmp	r3, #1
 8003782:	d118      	bne.n	80037b6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800378e:	f023 0304 	bic.w	r3, r3, #4
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800379a:	4311      	orrs	r1, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80037a0:	4311      	orrs	r1, r2
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037a6:	430a      	orrs	r2, r1
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	611a      	str	r2, [r3, #16]
 80037b4:	e007      	b.n	80037c6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0201 	bic.w	r2, r2, #1
 80037c4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d10c      	bne.n	80037e8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	f023 010f 	bic.w	r1, r3, #15
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	1e5a      	subs	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	631a      	str	r2, [r3, #48]	; 0x30
 80037e6:	e007      	b.n	80037f8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 020f 	bic.w	r2, r2, #15
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fc:	f023 0303 	bic.w	r3, r3, #3
 8003800:	f043 0201 	orr.w	r2, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	655a      	str	r2, [r3, #84]	; 0x54
 8003808:	e007      	b.n	800381a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380e:	f043 0210 	orr.w	r2, r3, #16
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800381a:	7ffb      	ldrb	r3, [r7, #31]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3720      	adds	r7, #32
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20000000 	.word	0x20000000
 8003828:	053e2d63 	.word	0x053e2d63
 800382c:	50040000 	.word	0x50040000
 8003830:	50040300 	.word	0x50040300
 8003834:	fff0c007 	.word	0xfff0c007

08003838 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff fe73 	bl	8003534 <LL_ADC_REG_IsConversionOngoing>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d167      	bne.n	8003924 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_ADC_Start_DMA+0x2a>
 800385e:	2302      	movs	r3, #2
 8003860:	e063      	b.n	800392a <HAL_ADC_Start_DMA+0xf2>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 fd7a 	bl	8004364 <ADC_Enable>
 8003870:	4603      	mov	r3, r0
 8003872:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003874:	7dfb      	ldrb	r3, [r7, #23]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d14f      	bne.n	800391a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003882:	f023 0301 	bic.w	r3, r3, #1
 8003886:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003892:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d006      	beq.n	80038a8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389e:	f023 0206 	bic.w	r2, r3, #6
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	659a      	str	r2, [r3, #88]	; 0x58
 80038a6:	e002      	b.n	80038ae <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b2:	4a20      	ldr	r2, [pc, #128]	; (8003934 <HAL_ADC_Start_DMA+0xfc>)
 80038b4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ba:	4a1f      	ldr	r2, [pc, #124]	; (8003938 <HAL_ADC_Start_DMA+0x100>)
 80038bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c2:	4a1e      	ldr	r2, [pc, #120]	; (800393c <HAL_ADC_Start_DMA+0x104>)
 80038c4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	221c      	movs	r2, #28
 80038cc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0210 	orr.w	r2, r2, #16
 80038e4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f042 0201 	orr.w	r2, r2, #1
 80038f4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3340      	adds	r3, #64	; 0x40
 8003900:	4619      	mov	r1, r3
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f001 f84d 	bl	80049a4 <HAL_DMA_Start_IT>
 800390a:	4603      	mov	r3, r0
 800390c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff fde6 	bl	80034e4 <LL_ADC_REG_StartConversion>
 8003918:	e006      	b.n	8003928 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003922:	e001      	b.n	8003928 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003924:	2302      	movs	r3, #2
 8003926:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003928:	7dfb      	ldrb	r3, [r7, #23]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	080044e7 	.word	0x080044e7
 8003938:	080045bf 	.word	0x080045bf
 800393c:	080045db 	.word	0x080045db

08003940 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <HAL_ADC_Stop_DMA+0x16>
 8003952:	2302      	movs	r3, #2
 8003954:	e051      	b.n	80039fa <HAL_ADC_Stop_DMA+0xba>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800395e:	2103      	movs	r1, #3
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fc43 	bl	80041ec <ADC_ConversionStop>
 8003966:	4603      	mov	r3, r0
 8003968:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800396a:	7bfb      	ldrb	r3, [r7, #15]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d13f      	bne.n	80039f0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0201 	bic.w	r2, r2, #1
 800397e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003984:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d10f      	bne.n	80039ae <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003992:	4618      	mov	r0, r3
 8003994:	f001 f866 	bl	8004a64 <HAL_DMA_Abort>
 8003998:	4603      	mov	r3, r0
 800399a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800399c:	7bfb      	ldrb	r3, [r7, #15]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d005      	beq.n	80039ae <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0210 	bic.w	r2, r2, #16
 80039bc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80039be:	7bfb      	ldrb	r3, [r7, #15]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d105      	bne.n	80039d0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 fd2f 	bl	8004428 <ADC_Disable>
 80039ca:	4603      	mov	r3, r0
 80039cc:	73fb      	strb	r3, [r7, #15]
 80039ce:	e002      	b.n	80039d6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 fd29 	bl	8004428 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d109      	bne.n	80039f0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039e4:	f023 0301 	bic.w	r3, r3, #1
 80039e8:	f043 0201 	orr.w	r2, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b0b6      	sub	sp, #216	; 0xd8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <HAL_ADC_ConfigChannel+0x22>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e3b9      	b.n	80041c2 <HAL_ADC_ConfigChannel+0x796>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff fd6a 	bl	8003534 <LL_ADC_REG_IsConversionOngoing>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f040 839e 	bne.w	80041a4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b05      	cmp	r3, #5
 8003a6e:	d824      	bhi.n	8003aba <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	3b02      	subs	r3, #2
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d81b      	bhi.n	8003ab2 <HAL_ADC_ConfigChannel+0x86>
 8003a7a:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <HAL_ADC_ConfigChannel+0x54>)
 8003a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a80:	08003a91 	.word	0x08003a91
 8003a84:	08003a99 	.word	0x08003a99
 8003a88:	08003aa1 	.word	0x08003aa1
 8003a8c:	08003aa9 	.word	0x08003aa9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	220c      	movs	r2, #12
 8003a94:	605a      	str	r2, [r3, #4]
          break;
 8003a96:	e011      	b.n	8003abc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2212      	movs	r2, #18
 8003a9c:	605a      	str	r2, [r3, #4]
          break;
 8003a9e:	e00d      	b.n	8003abc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2218      	movs	r2, #24
 8003aa4:	605a      	str	r2, [r3, #4]
          break;
 8003aa6:	e009      	b.n	8003abc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003aae:	605a      	str	r2, [r3, #4]
          break;
 8003ab0:	e004      	b.n	8003abc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2206      	movs	r2, #6
 8003ab6:	605a      	str	r2, [r3, #4]
          break;
 8003ab8:	e000      	b.n	8003abc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003aba:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6818      	ldr	r0, [r3, #0]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	6859      	ldr	r1, [r3, #4]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f7ff fbf3 	bl	80032b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff fd2e 	bl	8003534 <LL_ADC_REG_IsConversionOngoing>
 8003ad8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff fd4e 	bl	8003582 <LL_ADC_INJ_IsConversionOngoing>
 8003ae6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003aea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f040 81a6 	bne.w	8003e40 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003af4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f040 81a1 	bne.w	8003e40 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	6819      	ldr	r1, [r3, #0]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f7ff fbfe 	bl	800330c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	08db      	lsrs	r3, r3, #3
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d00a      	beq.n	8003b48 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6919      	ldr	r1, [r3, #16]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b42:	f7ff fb4f 	bl	80031e4 <LL_ADC_SetOffset>
 8003b46:	e17b      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff fb6c 	bl	800322c <LL_ADC_GetOffsetChannel>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10a      	bne.n	8003b74 <HAL_ADC_ConfigChannel+0x148>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2100      	movs	r1, #0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff fb61 	bl	800322c <LL_ADC_GetOffsetChannel>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	0e9b      	lsrs	r3, r3, #26
 8003b6e:	f003 021f 	and.w	r2, r3, #31
 8003b72:	e01e      	b.n	8003bb2 <HAL_ADC_ConfigChannel+0x186>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff fb56 	bl	800322c <LL_ADC_GetOffsetChannel>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b8a:	fa93 f3a3 	rbit	r3, r3
 8003b8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003ba2:	2320      	movs	r3, #32
 8003ba4:	e004      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003ba6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003baa:	fab3 f383 	clz	r3, r3
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d105      	bne.n	8003bca <HAL_ADC_ConfigChannel+0x19e>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	0e9b      	lsrs	r3, r3, #26
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	e018      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x1d0>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003bd6:	fa93 f3a3 	rbit	r3, r3
 8003bda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003bde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003be2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003be6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003bee:	2320      	movs	r3, #32
 8003bf0:	e004      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003bf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bf6:	fab3 f383 	clz	r3, r3
 8003bfa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d106      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2200      	movs	r2, #0
 8003c06:	2100      	movs	r1, #0
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff fb25 	bl	8003258 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2101      	movs	r1, #1
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff fb09 	bl	800322c <LL_ADC_GetOffsetChannel>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x20e>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2101      	movs	r1, #1
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fafe 	bl	800322c <LL_ADC_GetOffsetChannel>
 8003c30:	4603      	mov	r3, r0
 8003c32:	0e9b      	lsrs	r3, r3, #26
 8003c34:	f003 021f 	and.w	r2, r3, #31
 8003c38:	e01e      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x24c>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2101      	movs	r1, #1
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff faf3 	bl	800322c <LL_ADC_GetOffsetChannel>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c50:	fa93 f3a3 	rbit	r3, r3
 8003c54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003c58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003c60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003c68:	2320      	movs	r3, #32
 8003c6a:	e004      	b.n	8003c76 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003c6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c70:	fab3 f383 	clz	r3, r3
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d105      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x264>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	0e9b      	lsrs	r3, r3, #26
 8003c8a:	f003 031f 	and.w	r3, r3, #31
 8003c8e:	e018      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x296>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c9c:	fa93 f3a3 	rbit	r3, r3
 8003ca0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003ca4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ca8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003cb4:	2320      	movs	r3, #32
 8003cb6:	e004      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003cb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cbc:	fab3 f383 	clz	r3, r3
 8003cc0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d106      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	2101      	movs	r1, #1
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff fac2 	bl	8003258 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2102      	movs	r1, #2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff faa6 	bl	800322c <LL_ADC_GetOffsetChannel>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10a      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x2d4>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2102      	movs	r1, #2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fa9b 	bl	800322c <LL_ADC_GetOffsetChannel>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	0e9b      	lsrs	r3, r3, #26
 8003cfa:	f003 021f 	and.w	r2, r3, #31
 8003cfe:	e01e      	b.n	8003d3e <HAL_ADC_ConfigChannel+0x312>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2102      	movs	r1, #2
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff fa90 	bl	800322c <LL_ADC_GetOffsetChannel>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d16:	fa93 f3a3 	rbit	r3, r3
 8003d1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003d1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003d26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003d2e:	2320      	movs	r3, #32
 8003d30:	e004      	b.n	8003d3c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003d32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d36:	fab3 f383 	clz	r3, r3
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d105      	bne.n	8003d56 <HAL_ADC_ConfigChannel+0x32a>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	0e9b      	lsrs	r3, r3, #26
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	e016      	b.n	8003d84 <HAL_ADC_ConfigChannel+0x358>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d62:	fa93 f3a3 	rbit	r3, r3
 8003d66:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003d68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003d6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003d76:	2320      	movs	r3, #32
 8003d78:	e004      	b.n	8003d84 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003d7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d7e:	fab3 f383 	clz	r3, r3
 8003d82:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d106      	bne.n	8003d96 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2102      	movs	r1, #2
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff fa61 	bl	8003258 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2103      	movs	r1, #3
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff fa45 	bl	800322c <LL_ADC_GetOffsetChannel>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10a      	bne.n	8003dc2 <HAL_ADC_ConfigChannel+0x396>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2103      	movs	r1, #3
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fa3a 	bl	800322c <LL_ADC_GetOffsetChannel>
 8003db8:	4603      	mov	r3, r0
 8003dba:	0e9b      	lsrs	r3, r3, #26
 8003dbc:	f003 021f 	and.w	r2, r3, #31
 8003dc0:	e017      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x3c6>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2103      	movs	r1, #3
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff fa2f 	bl	800322c <LL_ADC_GetOffsetChannel>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dd4:	fa93 f3a3 	rbit	r3, r3
 8003dd8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ddc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003dde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003de4:	2320      	movs	r3, #32
 8003de6:	e003      	b.n	8003df0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dea:	fab3 f383 	clz	r3, r3
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d105      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x3de>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	0e9b      	lsrs	r3, r3, #26
 8003e04:	f003 031f 	and.w	r3, r3, #31
 8003e08:	e011      	b.n	8003e2e <HAL_ADC_ConfigChannel+0x402>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e12:	fa93 f3a3 	rbit	r3, r3
 8003e16:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003e18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003e22:	2320      	movs	r3, #32
 8003e24:	e003      	b.n	8003e2e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e28:	fab3 f383 	clz	r3, r3
 8003e2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d106      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2200      	movs	r2, #0
 8003e38:	2103      	movs	r1, #3
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff fa0c 	bl	8003258 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff fb27 	bl	8003498 <LL_ADC_IsEnabled>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f040 813f 	bne.w	80040d0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6818      	ldr	r0, [r3, #0]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	6819      	ldr	r1, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	f7ff fa80 	bl	8003364 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	4a8e      	ldr	r2, [pc, #568]	; (80040a4 <HAL_ADC_ConfigChannel+0x678>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	f040 8130 	bne.w	80040d0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10b      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x46c>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	0e9b      	lsrs	r3, r3, #26
 8003e86:	3301      	adds	r3, #1
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	2b09      	cmp	r3, #9
 8003e8e:	bf94      	ite	ls
 8003e90:	2301      	movls	r3, #1
 8003e92:	2300      	movhi	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	e019      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x4a0>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ea0:	fa93 f3a3 	rbit	r3, r3
 8003ea4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003ea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ea8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003eaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003eb0:	2320      	movs	r3, #32
 8003eb2:	e003      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003eb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eb6:	fab3 f383 	clz	r3, r3
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	f003 031f 	and.w	r3, r3, #31
 8003ec2:	2b09      	cmp	r3, #9
 8003ec4:	bf94      	ite	ls
 8003ec6:	2301      	movls	r3, #1
 8003ec8:	2300      	movhi	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d079      	beq.n	8003fc4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d107      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x4c0>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	0e9b      	lsrs	r3, r3, #26
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	069b      	lsls	r3, r3, #26
 8003ee6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003eea:	e015      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x4ec>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ef4:	fa93 f3a3 	rbit	r3, r3
 8003ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003efc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003f04:	2320      	movs	r3, #32
 8003f06:	e003      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f0a:	fab3 f383 	clz	r3, r3
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	3301      	adds	r3, #1
 8003f12:	069b      	lsls	r3, r3, #26
 8003f14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d109      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x50c>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	0e9b      	lsrs	r3, r3, #26
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	f003 031f 	and.w	r3, r3, #31
 8003f30:	2101      	movs	r1, #1
 8003f32:	fa01 f303 	lsl.w	r3, r1, r3
 8003f36:	e017      	b.n	8003f68 <HAL_ADC_ConfigChannel+0x53c>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f40:	fa93 f3a3 	rbit	r3, r3
 8003f44:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f48:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003f50:	2320      	movs	r3, #32
 8003f52:	e003      	b.n	8003f5c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f56:	fab3 f383 	clz	r3, r3
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	f003 031f 	and.w	r3, r3, #31
 8003f62:	2101      	movs	r1, #1
 8003f64:	fa01 f303 	lsl.w	r3, r1, r3
 8003f68:	ea42 0103 	orr.w	r1, r2, r3
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10a      	bne.n	8003f8e <HAL_ADC_ConfigChannel+0x562>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	0e9b      	lsrs	r3, r3, #26
 8003f7e:	3301      	adds	r3, #1
 8003f80:	f003 021f 	and.w	r2, r3, #31
 8003f84:	4613      	mov	r3, r2
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	4413      	add	r3, r2
 8003f8a:	051b      	lsls	r3, r3, #20
 8003f8c:	e018      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0x594>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f96:	fa93 f3a3 	rbit	r3, r3
 8003f9a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003fa6:	2320      	movs	r3, #32
 8003fa8:	e003      	b.n	8003fb2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fac:	fab3 f383 	clz	r3, r3
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	f003 021f 	and.w	r2, r3, #31
 8003fb8:	4613      	mov	r3, r2
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	4413      	add	r3, r2
 8003fbe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	e080      	b.n	80040c6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d107      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x5b4>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	0e9b      	lsrs	r3, r3, #26
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	069b      	lsls	r3, r3, #26
 8003fda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fde:	e015      	b.n	800400c <HAL_ADC_ConfigChannel+0x5e0>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe8:	fa93 f3a3 	rbit	r3, r3
 8003fec:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003ff8:	2320      	movs	r3, #32
 8003ffa:	e003      	b.n	8004004 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffe:	fab3 f383 	clz	r3, r3
 8004002:	b2db      	uxtb	r3, r3
 8004004:	3301      	adds	r3, #1
 8004006:	069b      	lsls	r3, r3, #26
 8004008:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004014:	2b00      	cmp	r3, #0
 8004016:	d109      	bne.n	800402c <HAL_ADC_ConfigChannel+0x600>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	0e9b      	lsrs	r3, r3, #26
 800401e:	3301      	adds	r3, #1
 8004020:	f003 031f 	and.w	r3, r3, #31
 8004024:	2101      	movs	r1, #1
 8004026:	fa01 f303 	lsl.w	r3, r1, r3
 800402a:	e017      	b.n	800405c <HAL_ADC_ConfigChannel+0x630>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	fa93 f3a3 	rbit	r3, r3
 8004038:	61fb      	str	r3, [r7, #28]
  return result;
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004044:	2320      	movs	r3, #32
 8004046:	e003      	b.n	8004050 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	fab3 f383 	clz	r3, r3
 800404e:	b2db      	uxtb	r3, r3
 8004050:	3301      	adds	r3, #1
 8004052:	f003 031f 	and.w	r3, r3, #31
 8004056:	2101      	movs	r1, #1
 8004058:	fa01 f303 	lsl.w	r3, r1, r3
 800405c:	ea42 0103 	orr.w	r1, r2, r3
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10d      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x65c>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	0e9b      	lsrs	r3, r3, #26
 8004072:	3301      	adds	r3, #1
 8004074:	f003 021f 	and.w	r2, r3, #31
 8004078:	4613      	mov	r3, r2
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	4413      	add	r3, r2
 800407e:	3b1e      	subs	r3, #30
 8004080:	051b      	lsls	r3, r3, #20
 8004082:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004086:	e01d      	b.n	80040c4 <HAL_ADC_ConfigChannel+0x698>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	fa93 f3a3 	rbit	r3, r3
 8004094:	613b      	str	r3, [r7, #16]
  return result;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d103      	bne.n	80040a8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80040a0:	2320      	movs	r3, #32
 80040a2:	e005      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x684>
 80040a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	fab3 f383 	clz	r3, r3
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	3301      	adds	r3, #1
 80040b2:	f003 021f 	and.w	r2, r3, #31
 80040b6:	4613      	mov	r3, r2
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	4413      	add	r3, r2
 80040bc:	3b1e      	subs	r3, #30
 80040be:	051b      	lsls	r3, r3, #20
 80040c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040c4:	430b      	orrs	r3, r1
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	6892      	ldr	r2, [r2, #8]
 80040ca:	4619      	mov	r1, r3
 80040cc:	f7ff f91e 	bl	800330c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	4b3d      	ldr	r3, [pc, #244]	; (80041cc <HAL_ADC_ConfigChannel+0x7a0>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d06c      	beq.n	80041b6 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040dc:	483c      	ldr	r0, [pc, #240]	; (80041d0 <HAL_ADC_ConfigChannel+0x7a4>)
 80040de:	f7ff f873 	bl	80031c8 <LL_ADC_GetCommonPathInternalCh>
 80040e2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a3a      	ldr	r2, [pc, #232]	; (80041d4 <HAL_ADC_ConfigChannel+0x7a8>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d127      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80040f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d121      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a35      	ldr	r2, [pc, #212]	; (80041d8 <HAL_ADC_ConfigChannel+0x7ac>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d157      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004106:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800410a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800410e:	4619      	mov	r1, r3
 8004110:	482f      	ldr	r0, [pc, #188]	; (80041d0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004112:	f7ff f846 	bl	80031a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004116:	4b31      	ldr	r3, [pc, #196]	; (80041dc <HAL_ADC_ConfigChannel+0x7b0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	099b      	lsrs	r3, r3, #6
 800411c:	4a30      	ldr	r2, [pc, #192]	; (80041e0 <HAL_ADC_ConfigChannel+0x7b4>)
 800411e:	fba2 2303 	umull	r2, r3, r2, r3
 8004122:	099b      	lsrs	r3, r3, #6
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	4613      	mov	r3, r2
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004130:	e002      	b.n	8004138 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3b01      	subs	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f9      	bne.n	8004132 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800413e:	e03a      	b.n	80041b6 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a27      	ldr	r2, [pc, #156]	; (80041e4 <HAL_ADC_ConfigChannel+0x7b8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d113      	bne.n	8004172 <HAL_ADC_ConfigChannel+0x746>
 800414a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800414e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10d      	bne.n	8004172 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a1f      	ldr	r2, [pc, #124]	; (80041d8 <HAL_ADC_ConfigChannel+0x7ac>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d12a      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004160:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004164:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004168:	4619      	mov	r1, r3
 800416a:	4819      	ldr	r0, [pc, #100]	; (80041d0 <HAL_ADC_ConfigChannel+0x7a4>)
 800416c:	f7ff f819 	bl	80031a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004170:	e021      	b.n	80041b6 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a1c      	ldr	r2, [pc, #112]	; (80041e8 <HAL_ADC_ConfigChannel+0x7bc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d11c      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800417c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d116      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a12      	ldr	r2, [pc, #72]	; (80041d8 <HAL_ADC_ConfigChannel+0x7ac>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d111      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004192:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004196:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800419a:	4619      	mov	r1, r3
 800419c:	480c      	ldr	r0, [pc, #48]	; (80041d0 <HAL_ADC_ConfigChannel+0x7a4>)
 800419e:	f7ff f800 	bl	80031a2 <LL_ADC_SetCommonPathInternalCh>
 80041a2:	e008      	b.n	80041b6 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a8:	f043 0220 	orr.w	r2, r3, #32
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80041be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	37d8      	adds	r7, #216	; 0xd8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	80080000 	.word	0x80080000
 80041d0:	50040300 	.word	0x50040300
 80041d4:	c7520000 	.word	0xc7520000
 80041d8:	50040000 	.word	0x50040000
 80041dc:	20000000 	.word	0x20000000
 80041e0:	053e2d63 	.word	0x053e2d63
 80041e4:	cb840000 	.word	0xcb840000
 80041e8:	80000001 	.word	0x80000001

080041ec <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80041f6:	2300      	movs	r3, #0
 80041f8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff f996 	bl	8003534 <LL_ADC_REG_IsConversionOngoing>
 8004208:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff f9b7 	bl	8003582 <LL_ADC_INJ_IsConversionOngoing>
 8004214:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d103      	bne.n	8004224 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 8098 	beq.w	8004354 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d02a      	beq.n	8004288 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	7e5b      	ldrb	r3, [r3, #25]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d126      	bne.n	8004288 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	7e1b      	ldrb	r3, [r3, #24]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d122      	bne.n	8004288 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004242:	2301      	movs	r3, #1
 8004244:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004246:	e014      	b.n	8004272 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	4a45      	ldr	r2, [pc, #276]	; (8004360 <ADC_ConversionStop+0x174>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d90d      	bls.n	800426c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004254:	f043 0210 	orr.w	r2, r3, #16
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004260:	f043 0201 	orr.w	r2, r3, #1
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e074      	b.n	8004356 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	3301      	adds	r3, #1
 8004270:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427c:	2b40      	cmp	r3, #64	; 0x40
 800427e:	d1e3      	bne.n	8004248 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2240      	movs	r2, #64	; 0x40
 8004286:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d014      	beq.n	80042b8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff f94e 	bl	8003534 <LL_ADC_REG_IsConversionOngoing>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00c      	beq.n	80042b8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff f90b 	bl	80034be <LL_ADC_IsDisableOngoing>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d104      	bne.n	80042b8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff f92a 	bl	800350c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d014      	beq.n	80042e8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff f95d 	bl	8003582 <LL_ADC_INJ_IsConversionOngoing>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00c      	beq.n	80042e8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff f8f3 	bl	80034be <LL_ADC_IsDisableOngoing>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d104      	bne.n	80042e8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff f939 	bl	800355a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d005      	beq.n	80042fa <ADC_ConversionStop+0x10e>
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d105      	bne.n	8004300 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80042f4:	230c      	movs	r3, #12
 80042f6:	617b      	str	r3, [r7, #20]
        break;
 80042f8:	e005      	b.n	8004306 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80042fa:	2308      	movs	r3, #8
 80042fc:	617b      	str	r3, [r7, #20]
        break;
 80042fe:	e002      	b.n	8004306 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004300:	2304      	movs	r3, #4
 8004302:	617b      	str	r3, [r7, #20]
        break;
 8004304:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004306:	f7fe ff09 	bl	800311c <HAL_GetTick>
 800430a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800430c:	e01b      	b.n	8004346 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800430e:	f7fe ff05 	bl	800311c <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b05      	cmp	r3, #5
 800431a:	d914      	bls.n	8004346 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	4013      	ands	r3, r2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00d      	beq.n	8004346 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432e:	f043 0210 	orr.w	r2, r3, #16
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433a:	f043 0201 	orr.w	r2, r3, #1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e007      	b.n	8004356 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	4013      	ands	r3, r2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1dc      	bne.n	800430e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3720      	adds	r7, #32
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	a33fffff 	.word	0xa33fffff

08004364 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff f891 	bl	8003498 <LL_ADC_IsEnabled>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d14d      	bne.n	8004418 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	4b28      	ldr	r3, [pc, #160]	; (8004424 <ADC_Enable+0xc0>)
 8004384:	4013      	ands	r3, r2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00d      	beq.n	80043a6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438e:	f043 0210 	orr.w	r2, r3, #16
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439a:	f043 0201 	orr.w	r2, r3, #1
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e039      	b.n	800441a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff f84c 	bl	8003448 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80043b0:	f7fe feb4 	bl	800311c <HAL_GetTick>
 80043b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043b6:	e028      	b.n	800440a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff f86b 	bl	8003498 <LL_ADC_IsEnabled>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d104      	bne.n	80043d2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff f83b 	bl	8003448 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80043d2:	f7fe fea3 	bl	800311c <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d914      	bls.n	800440a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d00d      	beq.n	800440a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f2:	f043 0210 	orr.w	r2, r3, #16
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fe:	f043 0201 	orr.w	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e007      	b.n	800441a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b01      	cmp	r3, #1
 8004416:	d1cf      	bne.n	80043b8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	8000003f 	.word	0x8000003f

08004428 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff f842 	bl	80034be <LL_ADC_IsDisableOngoing>
 800443a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff f829 	bl	8003498 <LL_ADC_IsEnabled>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d047      	beq.n	80044dc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d144      	bne.n	80044dc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f003 030d 	and.w	r3, r3, #13
 800445c:	2b01      	cmp	r3, #1
 800445e:	d10c      	bne.n	800447a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff f803 	bl	8003470 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2203      	movs	r2, #3
 8004470:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004472:	f7fe fe53 	bl	800311c <HAL_GetTick>
 8004476:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004478:	e029      	b.n	80044ce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447e:	f043 0210 	orr.w	r2, r3, #16
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448a:	f043 0201 	orr.w	r2, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e023      	b.n	80044de <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004496:	f7fe fe41 	bl	800311c <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d914      	bls.n	80044ce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00d      	beq.n	80044ce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b6:	f043 0210 	orr.w	r2, r3, #16
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c2:	f043 0201 	orr.w	r2, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e007      	b.n	80044de <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1dc      	bne.n	8004496 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d14b      	bne.n	8004598 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004504:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d021      	beq.n	800455e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f7fe feb5 	bl	800328e <LL_ADC_REG_IsTriggerSourceSWStart>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d032      	beq.n	8004590 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d12b      	bne.n	8004590 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d11f      	bne.n	8004590 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004554:	f043 0201 	orr.w	r2, r3, #1
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	655a      	str	r2, [r3, #84]	; 0x54
 800455c:	e018      	b.n	8004590 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d111      	bne.n	8004590 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004570:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d105      	bne.n	8004590 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004588:	f043 0201 	orr.w	r2, r3, #1
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f7fd feb3 	bl	80022fc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004596:	e00e      	b.n	80045b6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f7ff fa36 	bl	8003a16 <HAL_ADC_ErrorCallback>
}
 80045aa:	e004      	b.n	80045b6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	4798      	blx	r3
}
 80045b6:	bf00      	nop
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f7ff fa18 	bl	8003a02 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045d2:	bf00      	nop
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b084      	sub	sp, #16
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f8:	f043 0204 	orr.w	r2, r3, #4
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f7ff fa08 	bl	8003a16 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004606:	bf00      	nop
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
	...

08004610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004620:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <__NVIC_SetPriorityGrouping+0x44>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800462c:	4013      	ands	r3, r2
 800462e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800463c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004642:	4a04      	ldr	r2, [pc, #16]	; (8004654 <__NVIC_SetPriorityGrouping+0x44>)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	60d3      	str	r3, [r2, #12]
}
 8004648:	bf00      	nop
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	e000ed00 	.word	0xe000ed00

08004658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800465c:	4b04      	ldr	r3, [pc, #16]	; (8004670 <__NVIC_GetPriorityGrouping+0x18>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	0a1b      	lsrs	r3, r3, #8
 8004662:	f003 0307 	and.w	r3, r3, #7
}
 8004666:	4618      	mov	r0, r3
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	e000ed00 	.word	0xe000ed00

08004674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	4603      	mov	r3, r0
 800467c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800467e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004682:	2b00      	cmp	r3, #0
 8004684:	db0b      	blt.n	800469e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	f003 021f 	and.w	r2, r3, #31
 800468c:	4907      	ldr	r1, [pc, #28]	; (80046ac <__NVIC_EnableIRQ+0x38>)
 800468e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004692:	095b      	lsrs	r3, r3, #5
 8004694:	2001      	movs	r0, #1
 8004696:	fa00 f202 	lsl.w	r2, r0, r2
 800469a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	e000e100 	.word	0xe000e100

080046b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	4603      	mov	r3, r0
 80046b8:	6039      	str	r1, [r7, #0]
 80046ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	db0a      	blt.n	80046da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	490c      	ldr	r1, [pc, #48]	; (80046fc <__NVIC_SetPriority+0x4c>)
 80046ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ce:	0112      	lsls	r2, r2, #4
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	440b      	add	r3, r1
 80046d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046d8:	e00a      	b.n	80046f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	4908      	ldr	r1, [pc, #32]	; (8004700 <__NVIC_SetPriority+0x50>)
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	3b04      	subs	r3, #4
 80046e8:	0112      	lsls	r2, r2, #4
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	440b      	add	r3, r1
 80046ee:	761a      	strb	r2, [r3, #24]
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	e000e100 	.word	0xe000e100
 8004700:	e000ed00 	.word	0xe000ed00

08004704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004704:	b480      	push	{r7}
 8004706:	b089      	sub	sp, #36	; 0x24
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f1c3 0307 	rsb	r3, r3, #7
 800471e:	2b04      	cmp	r3, #4
 8004720:	bf28      	it	cs
 8004722:	2304      	movcs	r3, #4
 8004724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	3304      	adds	r3, #4
 800472a:	2b06      	cmp	r3, #6
 800472c:	d902      	bls.n	8004734 <NVIC_EncodePriority+0x30>
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	3b03      	subs	r3, #3
 8004732:	e000      	b.n	8004736 <NVIC_EncodePriority+0x32>
 8004734:	2300      	movs	r3, #0
 8004736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004738:	f04f 32ff 	mov.w	r2, #4294967295
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43da      	mvns	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	401a      	ands	r2, r3
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800474c:	f04f 31ff 	mov.w	r1, #4294967295
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	fa01 f303 	lsl.w	r3, r1, r3
 8004756:	43d9      	mvns	r1, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800475c:	4313      	orrs	r3, r2
         );
}
 800475e:	4618      	mov	r0, r3
 8004760:	3724      	adds	r7, #36	; 0x24
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
	...

0800476c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3b01      	subs	r3, #1
 8004778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800477c:	d301      	bcc.n	8004782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800477e:	2301      	movs	r3, #1
 8004780:	e00f      	b.n	80047a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004782:	4a0a      	ldr	r2, [pc, #40]	; (80047ac <SysTick_Config+0x40>)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3b01      	subs	r3, #1
 8004788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800478a:	210f      	movs	r1, #15
 800478c:	f04f 30ff 	mov.w	r0, #4294967295
 8004790:	f7ff ff8e 	bl	80046b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <SysTick_Config+0x40>)
 8004796:	2200      	movs	r2, #0
 8004798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800479a:	4b04      	ldr	r3, [pc, #16]	; (80047ac <SysTick_Config+0x40>)
 800479c:	2207      	movs	r2, #7
 800479e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	e000e010 	.word	0xe000e010

080047b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff ff29 	bl	8004610 <__NVIC_SetPriorityGrouping>
}
 80047be:	bf00      	nop
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b086      	sub	sp, #24
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	4603      	mov	r3, r0
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
 80047d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047d8:	f7ff ff3e 	bl	8004658 <__NVIC_GetPriorityGrouping>
 80047dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	6978      	ldr	r0, [r7, #20]
 80047e4:	f7ff ff8e 	bl	8004704 <NVIC_EncodePriority>
 80047e8:	4602      	mov	r2, r0
 80047ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ee:	4611      	mov	r1, r2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff ff5d 	bl	80046b0 <__NVIC_SetPriority>
}
 80047f6:	bf00      	nop
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	4603      	mov	r3, r0
 8004806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff ff31 	bl	8004674 <__NVIC_EnableIRQ>
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff ffa2 	bl	800476c <SysTick_Config>
 8004828:	4603      	mov	r3, r0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e098      	b.n	8004978 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	4b4d      	ldr	r3, [pc, #308]	; (8004984 <HAL_DMA_Init+0x150>)
 800484e:	429a      	cmp	r2, r3
 8004850:	d80f      	bhi.n	8004872 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	461a      	mov	r2, r3
 8004858:	4b4b      	ldr	r3, [pc, #300]	; (8004988 <HAL_DMA_Init+0x154>)
 800485a:	4413      	add	r3, r2
 800485c:	4a4b      	ldr	r2, [pc, #300]	; (800498c <HAL_DMA_Init+0x158>)
 800485e:	fba2 2303 	umull	r2, r3, r2, r3
 8004862:	091b      	lsrs	r3, r3, #4
 8004864:	009a      	lsls	r2, r3, #2
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a48      	ldr	r2, [pc, #288]	; (8004990 <HAL_DMA_Init+0x15c>)
 800486e:	641a      	str	r2, [r3, #64]	; 0x40
 8004870:	e00e      	b.n	8004890 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	4b46      	ldr	r3, [pc, #280]	; (8004994 <HAL_DMA_Init+0x160>)
 800487a:	4413      	add	r3, r2
 800487c:	4a43      	ldr	r2, [pc, #268]	; (800498c <HAL_DMA_Init+0x158>)
 800487e:	fba2 2303 	umull	r2, r3, r2, r3
 8004882:	091b      	lsrs	r3, r3, #4
 8004884:	009a      	lsls	r2, r3, #2
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a42      	ldr	r2, [pc, #264]	; (8004998 <HAL_DMA_Init+0x164>)
 800488e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80048a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80048b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048ea:	d039      	beq.n	8004960 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	4a27      	ldr	r2, [pc, #156]	; (8004990 <HAL_DMA_Init+0x15c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d11a      	bne.n	800492c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80048f6:	4b29      	ldr	r3, [pc, #164]	; (800499c <HAL_DMA_Init+0x168>)
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fe:	f003 031c 	and.w	r3, r3, #28
 8004902:	210f      	movs	r1, #15
 8004904:	fa01 f303 	lsl.w	r3, r1, r3
 8004908:	43db      	mvns	r3, r3
 800490a:	4924      	ldr	r1, [pc, #144]	; (800499c <HAL_DMA_Init+0x168>)
 800490c:	4013      	ands	r3, r2
 800490e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004910:	4b22      	ldr	r3, [pc, #136]	; (800499c <HAL_DMA_Init+0x168>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6859      	ldr	r1, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491c:	f003 031c 	and.w	r3, r3, #28
 8004920:	fa01 f303 	lsl.w	r3, r1, r3
 8004924:	491d      	ldr	r1, [pc, #116]	; (800499c <HAL_DMA_Init+0x168>)
 8004926:	4313      	orrs	r3, r2
 8004928:	600b      	str	r3, [r1, #0]
 800492a:	e019      	b.n	8004960 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800492c:	4b1c      	ldr	r3, [pc, #112]	; (80049a0 <HAL_DMA_Init+0x16c>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004934:	f003 031c 	and.w	r3, r3, #28
 8004938:	210f      	movs	r1, #15
 800493a:	fa01 f303 	lsl.w	r3, r1, r3
 800493e:	43db      	mvns	r3, r3
 8004940:	4917      	ldr	r1, [pc, #92]	; (80049a0 <HAL_DMA_Init+0x16c>)
 8004942:	4013      	ands	r3, r2
 8004944:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004946:	4b16      	ldr	r3, [pc, #88]	; (80049a0 <HAL_DMA_Init+0x16c>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6859      	ldr	r1, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004952:	f003 031c 	and.w	r3, r3, #28
 8004956:	fa01 f303 	lsl.w	r3, r1, r3
 800495a:	4911      	ldr	r1, [pc, #68]	; (80049a0 <HAL_DMA_Init+0x16c>)
 800495c:	4313      	orrs	r3, r2
 800495e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	40020407 	.word	0x40020407
 8004988:	bffdfff8 	.word	0xbffdfff8
 800498c:	cccccccd 	.word	0xcccccccd
 8004990:	40020000 	.word	0x40020000
 8004994:	bffdfbf8 	.word	0xbffdfbf8
 8004998:	40020400 	.word	0x40020400
 800499c:	400200a8 	.word	0x400200a8
 80049a0:	400204a8 	.word	0x400204a8

080049a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
 80049b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_DMA_Start_IT+0x20>
 80049c0:	2302      	movs	r3, #2
 80049c2:	e04b      	b.n	8004a5c <HAL_DMA_Start_IT+0xb8>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d13a      	bne.n	8004a4e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0201 	bic.w	r2, r2, #1
 80049f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	68b9      	ldr	r1, [r7, #8]
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 f91e 	bl	8004c3e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d008      	beq.n	8004a1c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 020e 	orr.w	r2, r2, #14
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e00f      	b.n	8004a3c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0204 	bic.w	r2, r2, #4
 8004a2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 020a 	orr.w	r2, r2, #10
 8004a3a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	e005      	b.n	8004a5a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004a56:	2302      	movs	r3, #2
 8004a58:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d008      	beq.n	8004a8e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2204      	movs	r2, #4
 8004a80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e022      	b.n	8004ad4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 020e 	bic.w	r2, r2, #14
 8004a9c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0201 	bic.w	r2, r2, #1
 8004aac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab2:	f003 021c 	and.w	r2, r3, #28
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	2101      	movs	r1, #1
 8004abc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ac0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afc:	f003 031c 	and.w	r3, r3, #28
 8004b00:	2204      	movs	r2, #4
 8004b02:	409a      	lsls	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4013      	ands	r3, r2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d026      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x7a>
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d021      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d107      	bne.n	8004b34 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0204 	bic.w	r2, r2, #4
 8004b32:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b38:	f003 021c 	and.w	r2, r3, #28
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	2104      	movs	r1, #4
 8004b42:	fa01 f202 	lsl.w	r2, r1, r2
 8004b46:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d071      	beq.n	8004c34 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004b58:	e06c      	b.n	8004c34 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5e:	f003 031c 	and.w	r3, r3, #28
 8004b62:	2202      	movs	r2, #2
 8004b64:	409a      	lsls	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d02e      	beq.n	8004bcc <HAL_DMA_IRQHandler+0xec>
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d029      	beq.n	8004bcc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0320 	and.w	r3, r3, #32
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10b      	bne.n	8004b9e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 020a 	bic.w	r2, r2, #10
 8004b94:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba2:	f003 021c 	and.w	r2, r3, #28
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	2102      	movs	r1, #2
 8004bac:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d038      	beq.n	8004c34 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004bca:	e033      	b.n	8004c34 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd0:	f003 031c 	and.w	r3, r3, #28
 8004bd4:	2208      	movs	r2, #8
 8004bd6:	409a      	lsls	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d02a      	beq.n	8004c36 <HAL_DMA_IRQHandler+0x156>
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d025      	beq.n	8004c36 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 020e 	bic.w	r2, r2, #14
 8004bf8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	f003 021c 	and.w	r2, r3, #28
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	2101      	movs	r1, #1
 8004c08:	fa01 f202 	lsl.w	r2, r1, r2
 8004c0c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d004      	beq.n	8004c36 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop
}
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b085      	sub	sp, #20
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	60b9      	str	r1, [r7, #8]
 8004c48:	607a      	str	r2, [r7, #4]
 8004c4a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c50:	f003 021c 	and.w	r2, r3, #28
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	2101      	movs	r1, #1
 8004c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c5e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2b10      	cmp	r3, #16
 8004c6e:	d108      	bne.n	8004c82 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c80:	e007      	b.n	8004c92 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	60da      	str	r2, [r3, #12]
}
 8004c92:	bf00      	nop
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
	...

08004ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004caa:	2300      	movs	r3, #0
 8004cac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cae:	e148      	b.n	8004f42 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 813a 	beq.w	8004f3c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d00b      	beq.n	8004ce8 <HAL_GPIO_Init+0x48>
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d007      	beq.n	8004ce8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cdc:	2b11      	cmp	r3, #17
 8004cde:	d003      	beq.n	8004ce8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b12      	cmp	r3, #18
 8004ce6:	d130      	bne.n	8004d4a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	2203      	movs	r2, #3
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	68da      	ldr	r2, [r3, #12]
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d1e:	2201      	movs	r2, #1
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	43db      	mvns	r3, r3
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	091b      	lsrs	r3, r3, #4
 8004d34:	f003 0201 	and.w	r2, r3, #1
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	2203      	movs	r2, #3
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	43db      	mvns	r3, r3
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d003      	beq.n	8004d8a <HAL_GPIO_Init+0xea>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b12      	cmp	r3, #18
 8004d88:	d123      	bne.n	8004dd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	08da      	lsrs	r2, r3, #3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3208      	adds	r2, #8
 8004d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	220f      	movs	r2, #15
 8004da2:	fa02 f303 	lsl.w	r3, r2, r3
 8004da6:	43db      	mvns	r3, r3
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4013      	ands	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	691a      	ldr	r2, [r3, #16]
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	08da      	lsrs	r2, r3, #3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3208      	adds	r2, #8
 8004dcc:	6939      	ldr	r1, [r7, #16]
 8004dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	2203      	movs	r2, #3
 8004dde:	fa02 f303 	lsl.w	r3, r2, r3
 8004de2:	43db      	mvns	r3, r3
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	4013      	ands	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f003 0203 	and.w	r2, r3, #3
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 8094 	beq.w	8004f3c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e14:	4b52      	ldr	r3, [pc, #328]	; (8004f60 <HAL_GPIO_Init+0x2c0>)
 8004e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e18:	4a51      	ldr	r2, [pc, #324]	; (8004f60 <HAL_GPIO_Init+0x2c0>)
 8004e1a:	f043 0301 	orr.w	r3, r3, #1
 8004e1e:	6613      	str	r3, [r2, #96]	; 0x60
 8004e20:	4b4f      	ldr	r3, [pc, #316]	; (8004f60 <HAL_GPIO_Init+0x2c0>)
 8004e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e2c:	4a4d      	ldr	r2, [pc, #308]	; (8004f64 <HAL_GPIO_Init+0x2c4>)
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	089b      	lsrs	r3, r3, #2
 8004e32:	3302      	adds	r3, #2
 8004e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f003 0303 	and.w	r3, r3, #3
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	220f      	movs	r2, #15
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e56:	d00d      	beq.n	8004e74 <HAL_GPIO_Init+0x1d4>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a43      	ldr	r2, [pc, #268]	; (8004f68 <HAL_GPIO_Init+0x2c8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d007      	beq.n	8004e70 <HAL_GPIO_Init+0x1d0>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a42      	ldr	r2, [pc, #264]	; (8004f6c <HAL_GPIO_Init+0x2cc>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d101      	bne.n	8004e6c <HAL_GPIO_Init+0x1cc>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e004      	b.n	8004e76 <HAL_GPIO_Init+0x1d6>
 8004e6c:	2307      	movs	r3, #7
 8004e6e:	e002      	b.n	8004e76 <HAL_GPIO_Init+0x1d6>
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <HAL_GPIO_Init+0x1d6>
 8004e74:	2300      	movs	r3, #0
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	f002 0203 	and.w	r2, r2, #3
 8004e7c:	0092      	lsls	r2, r2, #2
 8004e7e:	4093      	lsls	r3, r2
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e86:	4937      	ldr	r1, [pc, #220]	; (8004f64 <HAL_GPIO_Init+0x2c4>)
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	089b      	lsrs	r3, r3, #2
 8004e8c:	3302      	adds	r3, #2
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e94:	4b36      	ldr	r3, [pc, #216]	; (8004f70 <HAL_GPIO_Init+0x2d0>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004eb8:	4a2d      	ldr	r2, [pc, #180]	; (8004f70 <HAL_GPIO_Init+0x2d0>)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004ebe:	4b2c      	ldr	r3, [pc, #176]	; (8004f70 <HAL_GPIO_Init+0x2d0>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	43db      	mvns	r3, r3
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ee2:	4a23      	ldr	r2, [pc, #140]	; (8004f70 <HAL_GPIO_Init+0x2d0>)
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ee8:	4b21      	ldr	r3, [pc, #132]	; (8004f70 <HAL_GPIO_Init+0x2d0>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	43db      	mvns	r3, r3
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f0c:	4a18      	ldr	r2, [pc, #96]	; (8004f70 <HAL_GPIO_Init+0x2d0>)
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f12:	4b17      	ldr	r3, [pc, #92]	; (8004f70 <HAL_GPIO_Init+0x2d0>)
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f36:	4a0e      	ldr	r2, [pc, #56]	; (8004f70 <HAL_GPIO_Init+0x2d0>)
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f47f aeaf 	bne.w	8004cb0 <HAL_GPIO_Init+0x10>
  }
}
 8004f52:	bf00      	nop
 8004f54:	bf00      	nop
 8004f56:	371c      	adds	r7, #28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	40021000 	.word	0x40021000
 8004f64:	40010000 	.word	0x40010000
 8004f68:	48000400 	.word	0x48000400
 8004f6c:	48000800 	.word	0x48000800
 8004f70:	40010400 	.word	0x40010400

08004f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	807b      	strh	r3, [r7, #2]
 8004f80:	4613      	mov	r3, r2
 8004f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f84:	787b      	ldrb	r3, [r7, #1]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f8a:	887a      	ldrh	r2, [r7, #2]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f90:	e002      	b.n	8004f98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f92:	887a      	ldrh	r2, [r7, #2]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e081      	b.n	80050ba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fd fa82 	bl	80024d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2224      	movs	r2, #36	; 0x24
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0201 	bic.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ff4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005004:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d107      	bne.n	800501e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800501a:	609a      	str	r2, [r3, #8]
 800501c:	e006      	b.n	800502c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800502a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d104      	bne.n	800503e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800503c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6812      	ldr	r2, [r2, #0]
 8005048:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800504c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005050:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005060:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	ea42 0103 	orr.w	r1, r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	021a      	lsls	r2, r3, #8
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	69d9      	ldr	r1, [r3, #28]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a1a      	ldr	r2, [r3, #32]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0201 	orr.w	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
	...

080050c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af02      	add	r7, sp, #8
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	607a      	str	r2, [r7, #4]
 80050ce:	461a      	mov	r2, r3
 80050d0:	460b      	mov	r3, r1
 80050d2:	817b      	strh	r3, [r7, #10]
 80050d4:	4613      	mov	r3, r2
 80050d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b20      	cmp	r3, #32
 80050e2:	f040 80da 	bne.w	800529a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_I2C_Master_Transmit+0x30>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e0d3      	b.n	800529c <HAL_I2C_Master_Transmit+0x1d8>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050fc:	f7fe f80e 	bl	800311c <HAL_GetTick>
 8005100:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	2319      	movs	r3, #25
 8005108:	2201      	movs	r2, #1
 800510a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 f8fc 	bl	800530c <I2C_WaitOnFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e0be      	b.n	800529c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2221      	movs	r2, #33	; 0x21
 8005122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2210      	movs	r2, #16
 800512a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	893a      	ldrh	r2, [r7, #8]
 800513e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514a:	b29b      	uxth	r3, r3
 800514c:	2bff      	cmp	r3, #255	; 0xff
 800514e:	d90e      	bls.n	800516e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	22ff      	movs	r2, #255	; 0xff
 8005154:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800515a:	b2da      	uxtb	r2, r3
 800515c:	8979      	ldrh	r1, [r7, #10]
 800515e:	4b51      	ldr	r3, [pc, #324]	; (80052a4 <HAL_I2C_Master_Transmit+0x1e0>)
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 f9f2 	bl	8005550 <I2C_TransferConfig>
 800516c:	e06c      	b.n	8005248 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005172:	b29a      	uxth	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517c:	b2da      	uxtb	r2, r3
 800517e:	8979      	ldrh	r1, [r7, #10]
 8005180:	4b48      	ldr	r3, [pc, #288]	; (80052a4 <HAL_I2C_Master_Transmit+0x1e0>)
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 f9e1 	bl	8005550 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800518e:	e05b      	b.n	8005248 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	6a39      	ldr	r1, [r7, #32]
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 f8f9 	bl	800538c <I2C_WaitOnTXISFlagUntilTimeout>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e07b      	b.n	800529c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	781a      	ldrb	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051be:	b29b      	uxth	r3, r3
 80051c0:	3b01      	subs	r3, #1
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d034      	beq.n	8005248 <HAL_I2C_Master_Transmit+0x184>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d130      	bne.n	8005248 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	2200      	movs	r2, #0
 80051ee:	2180      	movs	r1, #128	; 0x80
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 f88b 	bl	800530c <I2C_WaitOnFlagUntilTimeout>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e04d      	b.n	800529c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005204:	b29b      	uxth	r3, r3
 8005206:	2bff      	cmp	r3, #255	; 0xff
 8005208:	d90e      	bls.n	8005228 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	22ff      	movs	r2, #255	; 0xff
 800520e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005214:	b2da      	uxtb	r2, r3
 8005216:	8979      	ldrh	r1, [r7, #10]
 8005218:	2300      	movs	r3, #0
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 f995 	bl	8005550 <I2C_TransferConfig>
 8005226:	e00f      	b.n	8005248 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522c:	b29a      	uxth	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005236:	b2da      	uxtb	r2, r3
 8005238:	8979      	ldrh	r1, [r7, #10]
 800523a:	2300      	movs	r3, #0
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 f984 	bl	8005550 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d19e      	bne.n	8005190 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	6a39      	ldr	r1, [r7, #32]
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 f8d8 	bl	800540c <I2C_WaitOnSTOPFlagUntilTimeout>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e01a      	b.n	800529c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2220      	movs	r2, #32
 800526c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6859      	ldr	r1, [r3, #4]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	4b0b      	ldr	r3, [pc, #44]	; (80052a8 <HAL_I2C_Master_Transmit+0x1e4>)
 800527a:	400b      	ands	r3, r1
 800527c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	e000      	b.n	800529c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800529a:	2302      	movs	r3, #2
  }
}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	80002000 	.word	0x80002000
 80052a8:	fe00e800 	.word	0xfe00e800

080052ac <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d103      	bne.n	80052e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2200      	movs	r2, #0
 80052e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d007      	beq.n	8005300 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699a      	ldr	r2, [r3, #24]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f042 0201 	orr.w	r2, r2, #1
 80052fe:	619a      	str	r2, [r3, #24]
  }
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	4613      	mov	r3, r2
 800531a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800531c:	e022      	b.n	8005364 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005324:	d01e      	beq.n	8005364 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005326:	f7fd fef9 	bl	800311c <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d302      	bcc.n	800533c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d113      	bne.n	8005364 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005340:	f043 0220 	orr.w	r2, r3, #32
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2220      	movs	r2, #32
 800534c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e00f      	b.n	8005384 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699a      	ldr	r2, [r3, #24]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	4013      	ands	r3, r2
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	429a      	cmp	r2, r3
 8005372:	bf0c      	ite	eq
 8005374:	2301      	moveq	r3, #1
 8005376:	2300      	movne	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	461a      	mov	r2, r3
 800537c:	79fb      	ldrb	r3, [r7, #7]
 800537e:	429a      	cmp	r2, r3
 8005380:	d0cd      	beq.n	800531e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005398:	e02c      	b.n	80053f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 f870 	bl	8005484 <I2C_IsAcknowledgeFailed>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e02a      	b.n	8005404 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b4:	d01e      	beq.n	80053f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b6:	f7fd feb1 	bl	800311c <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d302      	bcc.n	80053cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d113      	bne.n	80053f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d0:	f043 0220 	orr.w	r2, r3, #32
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2220      	movs	r2, #32
 80053dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e007      	b.n	8005404 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d1cb      	bne.n	800539a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005418:	e028      	b.n	800546c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	68b9      	ldr	r1, [r7, #8]
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 f830 	bl	8005484 <I2C_IsAcknowledgeFailed>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e026      	b.n	800547c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800542e:	f7fd fe75 	bl	800311c <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	429a      	cmp	r2, r3
 800543c:	d302      	bcc.n	8005444 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d113      	bne.n	800546c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005448:	f043 0220 	orr.w	r2, r3, #32
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e007      	b.n	800547c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	f003 0320 	and.w	r3, r3, #32
 8005476:	2b20      	cmp	r3, #32
 8005478:	d1cf      	bne.n	800541a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	f003 0310 	and.w	r3, r3, #16
 800549a:	2b10      	cmp	r3, #16
 800549c:	d151      	bne.n	8005542 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800549e:	e022      	b.n	80054e6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a6:	d01e      	beq.n	80054e6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a8:	f7fd fe38 	bl	800311c <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d302      	bcc.n	80054be <I2C_IsAcknowledgeFailed+0x3a>
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d113      	bne.n	80054e6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c2:	f043 0220 	orr.w	r2, r3, #32
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e02e      	b.n	8005544 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	f003 0320 	and.w	r3, r3, #32
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	d1d5      	bne.n	80054a0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2210      	movs	r2, #16
 80054fa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2220      	movs	r2, #32
 8005502:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f7ff fedd 	bl	80052c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6859      	ldr	r1, [r3, #4]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	4b0d      	ldr	r3, [pc, #52]	; (800554c <I2C_IsAcknowledgeFailed+0xc8>)
 8005516:	400b      	ands	r3, r1
 8005518:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800551e:	f043 0204 	orr.w	r2, r3, #4
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2220      	movs	r2, #32
 800552a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e000      	b.n	8005544 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	fe00e800 	.word	0xfe00e800

08005550 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	607b      	str	r3, [r7, #4]
 800555a:	460b      	mov	r3, r1
 800555c:	817b      	strh	r3, [r7, #10]
 800555e:	4613      	mov	r3, r2
 8005560:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	0d5b      	lsrs	r3, r3, #21
 800556c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005570:	4b0d      	ldr	r3, [pc, #52]	; (80055a8 <I2C_TransferConfig+0x58>)
 8005572:	430b      	orrs	r3, r1
 8005574:	43db      	mvns	r3, r3
 8005576:	ea02 0103 	and.w	r1, r2, r3
 800557a:	897b      	ldrh	r3, [r7, #10]
 800557c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005580:	7a7b      	ldrb	r3, [r7, #9]
 8005582:	041b      	lsls	r3, r3, #16
 8005584:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	431a      	orrs	r2, r3
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	431a      	orrs	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800559a:	bf00      	nop
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	03ff63ff 	.word	0x03ff63ff

080055ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d138      	bne.n	8005634 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055cc:	2302      	movs	r3, #2
 80055ce:	e032      	b.n	8005636 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2224      	movs	r2, #36	; 0x24
 80055dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0201 	bic.w	r2, r2, #1
 80055ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6819      	ldr	r1, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	e000      	b.n	8005636 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005634:	2302      	movs	r3, #2
  }
}
 8005636:	4618      	mov	r0, r3
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005642:	b480      	push	{r7}
 8005644:	b085      	sub	sp, #20
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b20      	cmp	r3, #32
 8005656:	d139      	bne.n	80056cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800565e:	2b01      	cmp	r3, #1
 8005660:	d101      	bne.n	8005666 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005662:	2302      	movs	r3, #2
 8005664:	e033      	b.n	80056ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2224      	movs	r2, #36	; 0x24
 8005672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0201 	bic.w	r2, r2, #1
 8005684:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005694:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	021b      	lsls	r3, r3, #8
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	4313      	orrs	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f042 0201 	orr.w	r2, r2, #1
 80056b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	e000      	b.n	80056ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056cc:	2302      	movs	r3, #2
  }
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
	...

080056dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80056e0:	4b04      	ldr	r3, [pc, #16]	; (80056f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	40007000 	.word	0x40007000

080056f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005706:	d130      	bne.n	800576a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005708:	4b23      	ldr	r3, [pc, #140]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005714:	d038      	beq.n	8005788 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005716:	4b20      	ldr	r3, [pc, #128]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800571e:	4a1e      	ldr	r2, [pc, #120]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005720:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005724:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005726:	4b1d      	ldr	r3, [pc, #116]	; (800579c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2232      	movs	r2, #50	; 0x32
 800572c:	fb02 f303 	mul.w	r3, r2, r3
 8005730:	4a1b      	ldr	r2, [pc, #108]	; (80057a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005732:	fba2 2303 	umull	r2, r3, r2, r3
 8005736:	0c9b      	lsrs	r3, r3, #18
 8005738:	3301      	adds	r3, #1
 800573a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800573c:	e002      	b.n	8005744 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3b01      	subs	r3, #1
 8005742:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005744:	4b14      	ldr	r3, [pc, #80]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800574c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005750:	d102      	bne.n	8005758 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1f2      	bne.n	800573e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005758:	4b0f      	ldr	r3, [pc, #60]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005764:	d110      	bne.n	8005788 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e00f      	b.n	800578a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800576a:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005776:	d007      	beq.n	8005788 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005778:	4b07      	ldr	r3, [pc, #28]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005780:	4a05      	ldr	r2, [pc, #20]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005782:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005786:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	40007000 	.word	0x40007000
 800579c:	20000000 	.word	0x20000000
 80057a0:	431bde83 	.word	0x431bde83

080057a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b088      	sub	sp, #32
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d102      	bne.n	80057b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	f000 bc10 	b.w	8005fd8 <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057b8:	4b96      	ldr	r3, [pc, #600]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f003 030c 	and.w	r3, r3, #12
 80057c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057c2:	4b94      	ldr	r3, [pc, #592]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0310 	and.w	r3, r3, #16
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80e4 	beq.w	80059a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d007      	beq.n	80057f0 <HAL_RCC_OscConfig+0x4c>
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	2b0c      	cmp	r3, #12
 80057e4:	f040 808b 	bne.w	80058fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	f040 8087 	bne.w	80058fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80057f0:	4b88      	ldr	r3, [pc, #544]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d005      	beq.n	8005808 <HAL_RCC_OscConfig+0x64>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e3e7      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1a      	ldr	r2, [r3, #32]
 800580c:	4b81      	ldr	r3, [pc, #516]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0308 	and.w	r3, r3, #8
 8005814:	2b00      	cmp	r3, #0
 8005816:	d004      	beq.n	8005822 <HAL_RCC_OscConfig+0x7e>
 8005818:	4b7e      	ldr	r3, [pc, #504]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005820:	e005      	b.n	800582e <HAL_RCC_OscConfig+0x8a>
 8005822:	4b7c      	ldr	r3, [pc, #496]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 8005824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005828:	091b      	lsrs	r3, r3, #4
 800582a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800582e:	4293      	cmp	r3, r2
 8005830:	d223      	bcs.n	800587a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fd7a 	bl	8006330 <RCC_SetFlashLatencyFromMSIRange>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e3c8      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005846:	4b73      	ldr	r3, [pc, #460]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a72      	ldr	r2, [pc, #456]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 800584c:	f043 0308 	orr.w	r3, r3, #8
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	4b70      	ldr	r3, [pc, #448]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	496d      	ldr	r1, [pc, #436]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 8005860:	4313      	orrs	r3, r2
 8005862:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005864:	4b6b      	ldr	r3, [pc, #428]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	021b      	lsls	r3, r3, #8
 8005872:	4968      	ldr	r1, [pc, #416]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 8005874:	4313      	orrs	r3, r2
 8005876:	604b      	str	r3, [r1, #4]
 8005878:	e025      	b.n	80058c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800587a:	4b66      	ldr	r3, [pc, #408]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a65      	ldr	r2, [pc, #404]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 8005880:	f043 0308 	orr.w	r3, r3, #8
 8005884:	6013      	str	r3, [r2, #0]
 8005886:	4b63      	ldr	r3, [pc, #396]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	4960      	ldr	r1, [pc, #384]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 8005894:	4313      	orrs	r3, r2
 8005896:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005898:	4b5e      	ldr	r3, [pc, #376]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	021b      	lsls	r3, r3, #8
 80058a6:	495b      	ldr	r1, [pc, #364]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d109      	bne.n	80058c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fd3a 	bl	8006330 <RCC_SetFlashLatencyFromMSIRange>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e388      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80058c6:	f000 fc6f 	bl	80061a8 <HAL_RCC_GetSysClockFreq>
 80058ca:	4602      	mov	r2, r0
 80058cc:	4b51      	ldr	r3, [pc, #324]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	091b      	lsrs	r3, r3, #4
 80058d2:	f003 030f 	and.w	r3, r3, #15
 80058d6:	4950      	ldr	r1, [pc, #320]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 80058d8:	5ccb      	ldrb	r3, [r1, r3]
 80058da:	f003 031f 	and.w	r3, r3, #31
 80058de:	fa22 f303 	lsr.w	r3, r2, r3
 80058e2:	4a4e      	ldr	r2, [pc, #312]	; (8005a1c <HAL_RCC_OscConfig+0x278>)
 80058e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80058e6:	4b4e      	ldr	r3, [pc, #312]	; (8005a20 <HAL_RCC_OscConfig+0x27c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fd fbc6 	bl	800307c <HAL_InitTick>
 80058f0:	4603      	mov	r3, r0
 80058f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d052      	beq.n	80059a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80058fa:	7bfb      	ldrb	r3, [r7, #15]
 80058fc:	e36c      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d032      	beq.n	800596c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005906:	4b43      	ldr	r3, [pc, #268]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a42      	ldr	r2, [pc, #264]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 800590c:	f043 0301 	orr.w	r3, r3, #1
 8005910:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005912:	f7fd fc03 	bl	800311c <HAL_GetTick>
 8005916:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800591a:	f7fd fbff 	bl	800311c <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e355      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800592c:	4b39      	ldr	r3, [pc, #228]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0f0      	beq.n	800591a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005938:	4b36      	ldr	r3, [pc, #216]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a35      	ldr	r2, [pc, #212]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 800593e:	f043 0308 	orr.w	r3, r3, #8
 8005942:	6013      	str	r3, [r2, #0]
 8005944:	4b33      	ldr	r3, [pc, #204]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	4930      	ldr	r1, [pc, #192]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 8005952:	4313      	orrs	r3, r2
 8005954:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005956:	4b2f      	ldr	r3, [pc, #188]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	021b      	lsls	r3, r3, #8
 8005964:	492b      	ldr	r1, [pc, #172]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 8005966:	4313      	orrs	r3, r2
 8005968:	604b      	str	r3, [r1, #4]
 800596a:	e01a      	b.n	80059a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800596c:	4b29      	ldr	r3, [pc, #164]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a28      	ldr	r2, [pc, #160]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 8005972:	f023 0301 	bic.w	r3, r3, #1
 8005976:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005978:	f7fd fbd0 	bl	800311c <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005980:	f7fd fbcc 	bl	800311c <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e322      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005992:	4b20      	ldr	r3, [pc, #128]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1f0      	bne.n	8005980 <HAL_RCC_OscConfig+0x1dc>
 800599e:	e000      	b.n	80059a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d073      	beq.n	8005a96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d005      	beq.n	80059c0 <HAL_RCC_OscConfig+0x21c>
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	2b0c      	cmp	r3, #12
 80059b8:	d10e      	bne.n	80059d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2b03      	cmp	r3, #3
 80059be:	d10b      	bne.n	80059d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059c0:	4b14      	ldr	r3, [pc, #80]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d063      	beq.n	8005a94 <HAL_RCC_OscConfig+0x2f0>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d15f      	bne.n	8005a94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e2ff      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059e0:	d106      	bne.n	80059f0 <HAL_RCC_OscConfig+0x24c>
 80059e2:	4b0c      	ldr	r3, [pc, #48]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a0b      	ldr	r2, [pc, #44]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 80059e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	e025      	b.n	8005a3c <HAL_RCC_OscConfig+0x298>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059f8:	d114      	bne.n	8005a24 <HAL_RCC_OscConfig+0x280>
 80059fa:	4b06      	ldr	r3, [pc, #24]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a05      	ldr	r2, [pc, #20]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 8005a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	4b03      	ldr	r3, [pc, #12]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a02      	ldr	r2, [pc, #8]	; (8005a14 <HAL_RCC_OscConfig+0x270>)
 8005a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	e013      	b.n	8005a3c <HAL_RCC_OscConfig+0x298>
 8005a14:	40021000 	.word	0x40021000
 8005a18:	0800ac60 	.word	0x0800ac60
 8005a1c:	20000000 	.word	0x20000000
 8005a20:	20000004 	.word	0x20000004
 8005a24:	4ba0      	ldr	r3, [pc, #640]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a9f      	ldr	r2, [pc, #636]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	4b9d      	ldr	r3, [pc, #628]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a9c      	ldr	r2, [pc, #624]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d013      	beq.n	8005a6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a44:	f7fd fb6a 	bl	800311c <HAL_GetTick>
 8005a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a4a:	e008      	b.n	8005a5e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a4c:	f7fd fb66 	bl	800311c <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b64      	cmp	r3, #100	; 0x64
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e2bc      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a5e:	4b92      	ldr	r3, [pc, #584]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0f0      	beq.n	8005a4c <HAL_RCC_OscConfig+0x2a8>
 8005a6a:	e014      	b.n	8005a96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6c:	f7fd fb56 	bl	800311c <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a74:	f7fd fb52 	bl	800311c <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b64      	cmp	r3, #100	; 0x64
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e2a8      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a86:	4b88      	ldr	r3, [pc, #544]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1f0      	bne.n	8005a74 <HAL_RCC_OscConfig+0x2d0>
 8005a92:	e000      	b.n	8005a96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d060      	beq.n	8005b64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d005      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x310>
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	2b0c      	cmp	r3, #12
 8005aac:	d119      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d116      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ab4:	4b7c      	ldr	r3, [pc, #496]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d005      	beq.n	8005acc <HAL_RCC_OscConfig+0x328>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e285      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005acc:	4b76      	ldr	r3, [pc, #472]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	061b      	lsls	r3, r3, #24
 8005ada:	4973      	ldr	r1, [pc, #460]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ae0:	e040      	b.n	8005b64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d023      	beq.n	8005b32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005aea:	4b6f      	ldr	r3, [pc, #444]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a6e      	ldr	r2, [pc, #440]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af6:	f7fd fb11 	bl	800311c <HAL_GetTick>
 8005afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005afc:	e008      	b.n	8005b10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005afe:	f7fd fb0d 	bl	800311c <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e263      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b10:	4b65      	ldr	r3, [pc, #404]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0f0      	beq.n	8005afe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b1c:	4b62      	ldr	r3, [pc, #392]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	061b      	lsls	r3, r3, #24
 8005b2a:	495f      	ldr	r1, [pc, #380]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	604b      	str	r3, [r1, #4]
 8005b30:	e018      	b.n	8005b64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b32:	4b5d      	ldr	r3, [pc, #372]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a5c      	ldr	r2, [pc, #368]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3e:	f7fd faed 	bl	800311c <HAL_GetTick>
 8005b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b44:	e008      	b.n	8005b58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b46:	f7fd fae9 	bl	800311c <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d901      	bls.n	8005b58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e23f      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b58:	4b53      	ldr	r3, [pc, #332]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1f0      	bne.n	8005b46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0308 	and.w	r3, r3, #8
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d03c      	beq.n	8005bea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d01c      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b78:	4b4b      	ldr	r3, [pc, #300]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b7e:	4a4a      	ldr	r2, [pc, #296]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005b80:	f043 0301 	orr.w	r3, r3, #1
 8005b84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b88:	f7fd fac8 	bl	800311c <HAL_GetTick>
 8005b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b90:	f7fd fac4 	bl	800311c <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e21a      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ba2:	4b41      	ldr	r3, [pc, #260]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d0ef      	beq.n	8005b90 <HAL_RCC_OscConfig+0x3ec>
 8005bb0:	e01b      	b.n	8005bea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bb2:	4b3d      	ldr	r3, [pc, #244]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bb8:	4a3b      	ldr	r2, [pc, #236]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005bba:	f023 0301 	bic.w	r3, r3, #1
 8005bbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc2:	f7fd faab 	bl	800311c <HAL_GetTick>
 8005bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bc8:	e008      	b.n	8005bdc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bca:	f7fd faa7 	bl	800311c <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d901      	bls.n	8005bdc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e1fd      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bdc:	4b32      	ldr	r3, [pc, #200]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1ef      	bne.n	8005bca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0304 	and.w	r3, r3, #4
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 80a6 	beq.w	8005d44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005bfc:	4b2a      	ldr	r3, [pc, #168]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10d      	bne.n	8005c24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c08:	4b27      	ldr	r3, [pc, #156]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c0c:	4a26      	ldr	r2, [pc, #152]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c12:	6593      	str	r3, [r2, #88]	; 0x58
 8005c14:	4b24      	ldr	r3, [pc, #144]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c1c:	60bb      	str	r3, [r7, #8]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c20:	2301      	movs	r3, #1
 8005c22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c24:	4b21      	ldr	r3, [pc, #132]	; (8005cac <HAL_RCC_OscConfig+0x508>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d118      	bne.n	8005c62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c30:	4b1e      	ldr	r3, [pc, #120]	; (8005cac <HAL_RCC_OscConfig+0x508>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a1d      	ldr	r2, [pc, #116]	; (8005cac <HAL_RCC_OscConfig+0x508>)
 8005c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c3c:	f7fd fa6e 	bl	800311c <HAL_GetTick>
 8005c40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c42:	e008      	b.n	8005c56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c44:	f7fd fa6a 	bl	800311c <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e1c0      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c56:	4b15      	ldr	r3, [pc, #84]	; (8005cac <HAL_RCC_OscConfig+0x508>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d0f0      	beq.n	8005c44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d108      	bne.n	8005c7c <HAL_RCC_OscConfig+0x4d8>
 8005c6a:	4b0f      	ldr	r3, [pc, #60]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c70:	4a0d      	ldr	r2, [pc, #52]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005c72:	f043 0301 	orr.w	r3, r3, #1
 8005c76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c7a:	e029      	b.n	8005cd0 <HAL_RCC_OscConfig+0x52c>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	2b05      	cmp	r3, #5
 8005c82:	d115      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x50c>
 8005c84:	4b08      	ldr	r3, [pc, #32]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8a:	4a07      	ldr	r2, [pc, #28]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005c8c:	f043 0304 	orr.w	r3, r3, #4
 8005c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c94:	4b04      	ldr	r3, [pc, #16]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9a:	4a03      	ldr	r2, [pc, #12]	; (8005ca8 <HAL_RCC_OscConfig+0x504>)
 8005c9c:	f043 0301 	orr.w	r3, r3, #1
 8005ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ca4:	e014      	b.n	8005cd0 <HAL_RCC_OscConfig+0x52c>
 8005ca6:	bf00      	nop
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	40007000 	.word	0x40007000
 8005cb0:	4b9a      	ldr	r3, [pc, #616]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb6:	4a99      	ldr	r2, [pc, #612]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005cb8:	f023 0301 	bic.w	r3, r3, #1
 8005cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cc0:	4b96      	ldr	r3, [pc, #600]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc6:	4a95      	ldr	r2, [pc, #596]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005cc8:	f023 0304 	bic.w	r3, r3, #4
 8005ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d016      	beq.n	8005d06 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cd8:	f7fd fa20 	bl	800311c <HAL_GetTick>
 8005cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cde:	e00a      	b.n	8005cf6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ce0:	f7fd fa1c 	bl	800311c <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e170      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cf6:	4b89      	ldr	r3, [pc, #548]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d0ed      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x53c>
 8005d04:	e015      	b.n	8005d32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d06:	f7fd fa09 	bl	800311c <HAL_GetTick>
 8005d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d0c:	e00a      	b.n	8005d24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d0e:	f7fd fa05 	bl	800311c <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d901      	bls.n	8005d24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e159      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d24:	4b7d      	ldr	r3, [pc, #500]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1ed      	bne.n	8005d0e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d32:	7ffb      	ldrb	r3, [r7, #31]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d105      	bne.n	8005d44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d38:	4b78      	ldr	r3, [pc, #480]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3c:	4a77      	ldr	r2, [pc, #476]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d42:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0320 	and.w	r3, r3, #32
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d03c      	beq.n	8005dca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d01c      	beq.n	8005d92 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d58:	4b70      	ldr	r3, [pc, #448]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005d5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d5e:	4a6f      	ldr	r2, [pc, #444]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005d60:	f043 0301 	orr.w	r3, r3, #1
 8005d64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d68:	f7fd f9d8 	bl	800311c <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d70:	f7fd f9d4 	bl	800311c <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e12a      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d82:	4b66      	ldr	r3, [pc, #408]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005d84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0ef      	beq.n	8005d70 <HAL_RCC_OscConfig+0x5cc>
 8005d90:	e01b      	b.n	8005dca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d92:	4b62      	ldr	r3, [pc, #392]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005d94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d98:	4a60      	ldr	r2, [pc, #384]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005d9a:	f023 0301 	bic.w	r3, r3, #1
 8005d9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da2:	f7fd f9bb 	bl	800311c <HAL_GetTick>
 8005da6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005da8:	e008      	b.n	8005dbc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005daa:	f7fd f9b7 	bl	800311c <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d901      	bls.n	8005dbc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e10d      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005dbc:	4b57      	ldr	r3, [pc, #348]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005dbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1ef      	bne.n	8005daa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f000 8101 	beq.w	8005fd6 <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	f040 80c9 	bne.w	8005f70 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005dde:	4b4f      	ldr	r3, [pc, #316]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f003 0203 	and.w	r2, r3, #3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d12c      	bne.n	8005e4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d123      	bne.n	8005e4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d11b      	bne.n	8005e4c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d113      	bne.n	8005e4c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e2e:	085b      	lsrs	r3, r3, #1
 8005e30:	3b01      	subs	r3, #1
 8005e32:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d109      	bne.n	8005e4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	085b      	lsrs	r3, r3, #1
 8005e44:	3b01      	subs	r3, #1
 8005e46:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d06b      	beq.n	8005f24 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	2b0c      	cmp	r3, #12
 8005e50:	d062      	beq.n	8005f18 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005e52:	4b32      	ldr	r3, [pc, #200]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e0ba      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e62:	4b2e      	ldr	r3, [pc, #184]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a2d      	ldr	r2, [pc, #180]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005e68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e6c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e6e:	f7fd f955 	bl	800311c <HAL_GetTick>
 8005e72:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e74:	e008      	b.n	8005e88 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e76:	f7fd f951 	bl	800311c <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d901      	bls.n	8005e88 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e0a7      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e88:	4b24      	ldr	r3, [pc, #144]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1f0      	bne.n	8005e76 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e94:	4b21      	ldr	r3, [pc, #132]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	4b21      	ldr	r3, [pc, #132]	; (8005f20 <HAL_RCC_OscConfig+0x77c>)
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ea4:	3a01      	subs	r2, #1
 8005ea6:	0112      	lsls	r2, r2, #4
 8005ea8:	4311      	orrs	r1, r2
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005eae:	0212      	lsls	r2, r2, #8
 8005eb0:	4311      	orrs	r1, r2
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005eb6:	0852      	lsrs	r2, r2, #1
 8005eb8:	3a01      	subs	r2, #1
 8005eba:	0552      	lsls	r2, r2, #21
 8005ebc:	4311      	orrs	r1, r2
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005ec2:	0852      	lsrs	r2, r2, #1
 8005ec4:	3a01      	subs	r2, #1
 8005ec6:	0652      	lsls	r2, r2, #25
 8005ec8:	4311      	orrs	r1, r2
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ece:	06d2      	lsls	r2, r2, #27
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	4912      	ldr	r1, [pc, #72]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ed8:	4b10      	ldr	r3, [pc, #64]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a0f      	ldr	r2, [pc, #60]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ee2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ee4:	4b0d      	ldr	r3, [pc, #52]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	4a0c      	ldr	r2, [pc, #48]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ef0:	f7fd f914 	bl	800311c <HAL_GetTick>
 8005ef4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ef6:	e008      	b.n	8005f0a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ef8:	f7fd f910 	bl	800311c <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d901      	bls.n	8005f0a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e066      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f0a:	4b04      	ldr	r3, [pc, #16]	; (8005f1c <HAL_RCC_OscConfig+0x778>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d0f0      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f16:	e05e      	b.n	8005fd6 <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e05d      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f24:	4b2e      	ldr	r3, [pc, #184]	; (8005fe0 <HAL_RCC_OscConfig+0x83c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d152      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005f30:	4b2b      	ldr	r3, [pc, #172]	; (8005fe0 <HAL_RCC_OscConfig+0x83c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a2a      	ldr	r2, [pc, #168]	; (8005fe0 <HAL_RCC_OscConfig+0x83c>)
 8005f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f3c:	4b28      	ldr	r3, [pc, #160]	; (8005fe0 <HAL_RCC_OscConfig+0x83c>)
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	4a27      	ldr	r2, [pc, #156]	; (8005fe0 <HAL_RCC_OscConfig+0x83c>)
 8005f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f48:	f7fd f8e8 	bl	800311c <HAL_GetTick>
 8005f4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f50:	f7fd f8e4 	bl	800311c <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e03a      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f62:	4b1f      	ldr	r3, [pc, #124]	; (8005fe0 <HAL_RCC_OscConfig+0x83c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d0f0      	beq.n	8005f50 <HAL_RCC_OscConfig+0x7ac>
 8005f6e:	e032      	b.n	8005fd6 <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	2b0c      	cmp	r3, #12
 8005f74:	d02d      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f76:	4b1a      	ldr	r3, [pc, #104]	; (8005fe0 <HAL_RCC_OscConfig+0x83c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a19      	ldr	r2, [pc, #100]	; (8005fe0 <HAL_RCC_OscConfig+0x83c>)
 8005f7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f80:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f82:	4b17      	ldr	r3, [pc, #92]	; (8005fe0 <HAL_RCC_OscConfig+0x83c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d105      	bne.n	8005f9a <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005f8e:	4b14      	ldr	r3, [pc, #80]	; (8005fe0 <HAL_RCC_OscConfig+0x83c>)
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	4a13      	ldr	r2, [pc, #76]	; (8005fe0 <HAL_RCC_OscConfig+0x83c>)
 8005f94:	f023 0303 	bic.w	r3, r3, #3
 8005f98:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005f9a:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <HAL_RCC_OscConfig+0x83c>)
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	4a10      	ldr	r2, [pc, #64]	; (8005fe0 <HAL_RCC_OscConfig+0x83c>)
 8005fa0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fa8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005faa:	f7fd f8b7 	bl	800311c <HAL_GetTick>
 8005fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fb0:	e008      	b.n	8005fc4 <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fb2:	f7fd f8b3 	bl	800311c <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d901      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e009      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fc4:	4b06      	ldr	r3, [pc, #24]	; (8005fe0 <HAL_RCC_OscConfig+0x83c>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1f0      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x80e>
 8005fd0:	e001      	b.n	8005fd6 <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e000      	b.n	8005fd8 <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3720      	adds	r7, #32
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	40021000 	.word	0x40021000

08005fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e0c8      	b.n	800618a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ff8:	4b66      	ldr	r3, [pc, #408]	; (8006194 <HAL_RCC_ClockConfig+0x1b0>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0307 	and.w	r3, r3, #7
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	429a      	cmp	r2, r3
 8006004:	d910      	bls.n	8006028 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006006:	4b63      	ldr	r3, [pc, #396]	; (8006194 <HAL_RCC_ClockConfig+0x1b0>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f023 0207 	bic.w	r2, r3, #7
 800600e:	4961      	ldr	r1, [pc, #388]	; (8006194 <HAL_RCC_ClockConfig+0x1b0>)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	4313      	orrs	r3, r2
 8006014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006016:	4b5f      	ldr	r3, [pc, #380]	; (8006194 <HAL_RCC_ClockConfig+0x1b0>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0307 	and.w	r3, r3, #7
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	429a      	cmp	r2, r3
 8006022:	d001      	beq.n	8006028 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e0b0      	b.n	800618a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b00      	cmp	r3, #0
 8006032:	d04c      	beq.n	80060ce <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2b03      	cmp	r3, #3
 800603a:	d107      	bne.n	800604c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800603c:	4b56      	ldr	r3, [pc, #344]	; (8006198 <HAL_RCC_ClockConfig+0x1b4>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d121      	bne.n	800608c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e09e      	b.n	800618a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	2b02      	cmp	r3, #2
 8006052:	d107      	bne.n	8006064 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006054:	4b50      	ldr	r3, [pc, #320]	; (8006198 <HAL_RCC_ClockConfig+0x1b4>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d115      	bne.n	800608c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e092      	b.n	800618a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d107      	bne.n	800607c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800606c:	4b4a      	ldr	r3, [pc, #296]	; (8006198 <HAL_RCC_ClockConfig+0x1b4>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d109      	bne.n	800608c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e086      	b.n	800618a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800607c:	4b46      	ldr	r3, [pc, #280]	; (8006198 <HAL_RCC_ClockConfig+0x1b4>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e07e      	b.n	800618a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800608c:	4b42      	ldr	r3, [pc, #264]	; (8006198 <HAL_RCC_ClockConfig+0x1b4>)
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f023 0203 	bic.w	r2, r3, #3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	493f      	ldr	r1, [pc, #252]	; (8006198 <HAL_RCC_ClockConfig+0x1b4>)
 800609a:	4313      	orrs	r3, r2
 800609c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800609e:	f7fd f83d 	bl	800311c <HAL_GetTick>
 80060a2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060a4:	e00a      	b.n	80060bc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060a6:	f7fd f839 	bl	800311c <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d901      	bls.n	80060bc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e066      	b.n	800618a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060bc:	4b36      	ldr	r3, [pc, #216]	; (8006198 <HAL_RCC_ClockConfig+0x1b4>)
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f003 020c 	and.w	r2, r3, #12
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d1eb      	bne.n	80060a6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d008      	beq.n	80060ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060da:	4b2f      	ldr	r3, [pc, #188]	; (8006198 <HAL_RCC_ClockConfig+0x1b4>)
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	492c      	ldr	r1, [pc, #176]	; (8006198 <HAL_RCC_ClockConfig+0x1b4>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060ec:	4b29      	ldr	r3, [pc, #164]	; (8006194 <HAL_RCC_ClockConfig+0x1b0>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d210      	bcs.n	800611c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060fa:	4b26      	ldr	r3, [pc, #152]	; (8006194 <HAL_RCC_ClockConfig+0x1b0>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f023 0207 	bic.w	r2, r3, #7
 8006102:	4924      	ldr	r1, [pc, #144]	; (8006194 <HAL_RCC_ClockConfig+0x1b0>)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	4313      	orrs	r3, r2
 8006108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800610a:	4b22      	ldr	r3, [pc, #136]	; (8006194 <HAL_RCC_ClockConfig+0x1b0>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0307 	and.w	r3, r3, #7
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	429a      	cmp	r2, r3
 8006116:	d001      	beq.n	800611c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e036      	b.n	800618a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b00      	cmp	r3, #0
 8006126:	d008      	beq.n	800613a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006128:	4b1b      	ldr	r3, [pc, #108]	; (8006198 <HAL_RCC_ClockConfig+0x1b4>)
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	4918      	ldr	r1, [pc, #96]	; (8006198 <HAL_RCC_ClockConfig+0x1b4>)
 8006136:	4313      	orrs	r3, r2
 8006138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0308 	and.w	r3, r3, #8
 8006142:	2b00      	cmp	r3, #0
 8006144:	d009      	beq.n	800615a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006146:	4b14      	ldr	r3, [pc, #80]	; (8006198 <HAL_RCC_ClockConfig+0x1b4>)
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	4910      	ldr	r1, [pc, #64]	; (8006198 <HAL_RCC_ClockConfig+0x1b4>)
 8006156:	4313      	orrs	r3, r2
 8006158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800615a:	f000 f825 	bl	80061a8 <HAL_RCC_GetSysClockFreq>
 800615e:	4602      	mov	r2, r0
 8006160:	4b0d      	ldr	r3, [pc, #52]	; (8006198 <HAL_RCC_ClockConfig+0x1b4>)
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	091b      	lsrs	r3, r3, #4
 8006166:	f003 030f 	and.w	r3, r3, #15
 800616a:	490c      	ldr	r1, [pc, #48]	; (800619c <HAL_RCC_ClockConfig+0x1b8>)
 800616c:	5ccb      	ldrb	r3, [r1, r3]
 800616e:	f003 031f 	and.w	r3, r3, #31
 8006172:	fa22 f303 	lsr.w	r3, r2, r3
 8006176:	4a0a      	ldr	r2, [pc, #40]	; (80061a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800617a:	4b0a      	ldr	r3, [pc, #40]	; (80061a4 <HAL_RCC_ClockConfig+0x1c0>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4618      	mov	r0, r3
 8006180:	f7fc ff7c 	bl	800307c <HAL_InitTick>
 8006184:	4603      	mov	r3, r0
 8006186:	72fb      	strb	r3, [r7, #11]

  return status;
 8006188:	7afb      	ldrb	r3, [r7, #11]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	40022000 	.word	0x40022000
 8006198:	40021000 	.word	0x40021000
 800619c:	0800ac60 	.word	0x0800ac60
 80061a0:	20000000 	.word	0x20000000
 80061a4:	20000004 	.word	0x20000004

080061a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b089      	sub	sp, #36	; 0x24
 80061ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	61fb      	str	r3, [r7, #28]
 80061b2:	2300      	movs	r3, #0
 80061b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061b6:	4b3e      	ldr	r3, [pc, #248]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f003 030c 	and.w	r3, r3, #12
 80061be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061c0:	4b3b      	ldr	r3, [pc, #236]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f003 0303 	and.w	r3, r3, #3
 80061c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d005      	beq.n	80061dc <HAL_RCC_GetSysClockFreq+0x34>
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	2b0c      	cmp	r3, #12
 80061d4:	d121      	bne.n	800621a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d11e      	bne.n	800621a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80061dc:	4b34      	ldr	r3, [pc, #208]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0308 	and.w	r3, r3, #8
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d107      	bne.n	80061f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80061e8:	4b31      	ldr	r3, [pc, #196]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80061ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061ee:	0a1b      	lsrs	r3, r3, #8
 80061f0:	f003 030f 	and.w	r3, r3, #15
 80061f4:	61fb      	str	r3, [r7, #28]
 80061f6:	e005      	b.n	8006204 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80061f8:	4b2d      	ldr	r3, [pc, #180]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	091b      	lsrs	r3, r3, #4
 80061fe:	f003 030f 	and.w	r3, r3, #15
 8006202:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006204:	4a2b      	ldr	r2, [pc, #172]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800620c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10d      	bne.n	8006230 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006218:	e00a      	b.n	8006230 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	2b04      	cmp	r3, #4
 800621e:	d102      	bne.n	8006226 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006220:	4b25      	ldr	r3, [pc, #148]	; (80062b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006222:	61bb      	str	r3, [r7, #24]
 8006224:	e004      	b.n	8006230 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	2b08      	cmp	r3, #8
 800622a:	d101      	bne.n	8006230 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800622c:	4b23      	ldr	r3, [pc, #140]	; (80062bc <HAL_RCC_GetSysClockFreq+0x114>)
 800622e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	2b0c      	cmp	r3, #12
 8006234:	d134      	bne.n	80062a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006236:	4b1e      	ldr	r3, [pc, #120]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	f003 0303 	and.w	r3, r3, #3
 800623e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2b02      	cmp	r3, #2
 8006244:	d003      	beq.n	800624e <HAL_RCC_GetSysClockFreq+0xa6>
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	2b03      	cmp	r3, #3
 800624a:	d003      	beq.n	8006254 <HAL_RCC_GetSysClockFreq+0xac>
 800624c:	e005      	b.n	800625a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800624e:	4b1a      	ldr	r3, [pc, #104]	; (80062b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006250:	617b      	str	r3, [r7, #20]
      break;
 8006252:	e005      	b.n	8006260 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006254:	4b19      	ldr	r3, [pc, #100]	; (80062bc <HAL_RCC_GetSysClockFreq+0x114>)
 8006256:	617b      	str	r3, [r7, #20]
      break;
 8006258:	e002      	b.n	8006260 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	617b      	str	r3, [r7, #20]
      break;
 800625e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006260:	4b13      	ldr	r3, [pc, #76]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	091b      	lsrs	r3, r3, #4
 8006266:	f003 0307 	and.w	r3, r3, #7
 800626a:	3301      	adds	r3, #1
 800626c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800626e:	4b10      	ldr	r3, [pc, #64]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	0a1b      	lsrs	r3, r3, #8
 8006274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	fb03 f202 	mul.w	r2, r3, r2
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	fbb2 f3f3 	udiv	r3, r2, r3
 8006284:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006286:	4b0a      	ldr	r3, [pc, #40]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	0e5b      	lsrs	r3, r3, #25
 800628c:	f003 0303 	and.w	r3, r3, #3
 8006290:	3301      	adds	r3, #1
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	fbb2 f3f3 	udiv	r3, r2, r3
 800629e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80062a0:	69bb      	ldr	r3, [r7, #24]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3724      	adds	r7, #36	; 0x24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	40021000 	.word	0x40021000
 80062b4:	0800ac78 	.word	0x0800ac78
 80062b8:	00f42400 	.word	0x00f42400
 80062bc:	00b71b00 	.word	0x00b71b00

080062c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062c0:	b480      	push	{r7}
 80062c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062c4:	4b03      	ldr	r3, [pc, #12]	; (80062d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80062c6:	681b      	ldr	r3, [r3, #0]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	20000000 	.word	0x20000000

080062d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80062dc:	f7ff fff0 	bl	80062c0 <HAL_RCC_GetHCLKFreq>
 80062e0:	4602      	mov	r2, r0
 80062e2:	4b06      	ldr	r3, [pc, #24]	; (80062fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	0a1b      	lsrs	r3, r3, #8
 80062e8:	f003 0307 	and.w	r3, r3, #7
 80062ec:	4904      	ldr	r1, [pc, #16]	; (8006300 <HAL_RCC_GetPCLK1Freq+0x28>)
 80062ee:	5ccb      	ldrb	r3, [r1, r3]
 80062f0:	f003 031f 	and.w	r3, r3, #31
 80062f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	40021000 	.word	0x40021000
 8006300:	0800ac70 	.word	0x0800ac70

08006304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006308:	f7ff ffda 	bl	80062c0 <HAL_RCC_GetHCLKFreq>
 800630c:	4602      	mov	r2, r0
 800630e:	4b06      	ldr	r3, [pc, #24]	; (8006328 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	0adb      	lsrs	r3, r3, #11
 8006314:	f003 0307 	and.w	r3, r3, #7
 8006318:	4904      	ldr	r1, [pc, #16]	; (800632c <HAL_RCC_GetPCLK2Freq+0x28>)
 800631a:	5ccb      	ldrb	r3, [r1, r3]
 800631c:	f003 031f 	and.w	r3, r3, #31
 8006320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006324:	4618      	mov	r0, r3
 8006326:	bd80      	pop	{r7, pc}
 8006328:	40021000 	.word	0x40021000
 800632c:	0800ac70 	.word	0x0800ac70

08006330 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006338:	2300      	movs	r3, #0
 800633a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800633c:	4b2a      	ldr	r3, [pc, #168]	; (80063e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800633e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006348:	f7ff f9c8 	bl	80056dc <HAL_PWREx_GetVoltageRange>
 800634c:	6178      	str	r0, [r7, #20]
 800634e:	e014      	b.n	800637a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006350:	4b25      	ldr	r3, [pc, #148]	; (80063e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006354:	4a24      	ldr	r2, [pc, #144]	; (80063e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800635a:	6593      	str	r3, [r2, #88]	; 0x58
 800635c:	4b22      	ldr	r3, [pc, #136]	; (80063e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800635e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006364:	60fb      	str	r3, [r7, #12]
 8006366:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006368:	f7ff f9b8 	bl	80056dc <HAL_PWREx_GetVoltageRange>
 800636c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800636e:	4b1e      	ldr	r3, [pc, #120]	; (80063e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006372:	4a1d      	ldr	r2, [pc, #116]	; (80063e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006378:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006380:	d10b      	bne.n	800639a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b80      	cmp	r3, #128	; 0x80
 8006386:	d919      	bls.n	80063bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2ba0      	cmp	r3, #160	; 0xa0
 800638c:	d902      	bls.n	8006394 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800638e:	2302      	movs	r3, #2
 8006390:	613b      	str	r3, [r7, #16]
 8006392:	e013      	b.n	80063bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006394:	2301      	movs	r3, #1
 8006396:	613b      	str	r3, [r7, #16]
 8006398:	e010      	b.n	80063bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b80      	cmp	r3, #128	; 0x80
 800639e:	d902      	bls.n	80063a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80063a0:	2303      	movs	r3, #3
 80063a2:	613b      	str	r3, [r7, #16]
 80063a4:	e00a      	b.n	80063bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b80      	cmp	r3, #128	; 0x80
 80063aa:	d102      	bne.n	80063b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80063ac:	2302      	movs	r3, #2
 80063ae:	613b      	str	r3, [r7, #16]
 80063b0:	e004      	b.n	80063bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b70      	cmp	r3, #112	; 0x70
 80063b6:	d101      	bne.n	80063bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80063b8:	2301      	movs	r3, #1
 80063ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80063bc:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f023 0207 	bic.w	r2, r3, #7
 80063c4:	4909      	ldr	r1, [pc, #36]	; (80063ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80063cc:	4b07      	ldr	r3, [pc, #28]	; (80063ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0307 	and.w	r3, r3, #7
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d001      	beq.n	80063de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e000      	b.n	80063e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	40021000 	.word	0x40021000
 80063ec:	40022000 	.word	0x40022000

080063f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80063f8:	2300      	movs	r3, #0
 80063fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80063fc:	2300      	movs	r3, #0
 80063fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006408:	2b00      	cmp	r3, #0
 800640a:	d031      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006410:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006414:	d01a      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006416:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800641a:	d814      	bhi.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800641c:	2b00      	cmp	r3, #0
 800641e:	d009      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006420:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006424:	d10f      	bne.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006426:	4b5d      	ldr	r3, [pc, #372]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	4a5c      	ldr	r2, [pc, #368]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800642c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006430:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006432:	e00c      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3304      	adds	r3, #4
 8006438:	2100      	movs	r1, #0
 800643a:	4618      	mov	r0, r3
 800643c:	f000 f9ce 	bl	80067dc <RCCEx_PLLSAI1_Config>
 8006440:	4603      	mov	r3, r0
 8006442:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006444:	e003      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	74fb      	strb	r3, [r7, #19]
      break;
 800644a:	e000      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800644c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800644e:	7cfb      	ldrb	r3, [r7, #19]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10b      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006454:	4b51      	ldr	r3, [pc, #324]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800645a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006462:	494e      	ldr	r1, [pc, #312]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006464:	4313      	orrs	r3, r2
 8006466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800646a:	e001      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800646c:	7cfb      	ldrb	r3, [r7, #19]
 800646e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 809e 	beq.w	80065ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800647e:	2300      	movs	r3, #0
 8006480:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006482:	4b46      	ldr	r3, [pc, #280]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800648e:	2301      	movs	r3, #1
 8006490:	e000      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006492:	2300      	movs	r3, #0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00d      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006498:	4b40      	ldr	r3, [pc, #256]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800649a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800649c:	4a3f      	ldr	r2, [pc, #252]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800649e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064a2:	6593      	str	r3, [r2, #88]	; 0x58
 80064a4:	4b3d      	ldr	r3, [pc, #244]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ac:	60bb      	str	r3, [r7, #8]
 80064ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064b0:	2301      	movs	r3, #1
 80064b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064b4:	4b3a      	ldr	r3, [pc, #232]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a39      	ldr	r2, [pc, #228]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80064ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064c0:	f7fc fe2c 	bl	800311c <HAL_GetTick>
 80064c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80064c6:	e009      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064c8:	f7fc fe28 	bl	800311c <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d902      	bls.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	74fb      	strb	r3, [r7, #19]
        break;
 80064da:	e005      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80064dc:	4b30      	ldr	r3, [pc, #192]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d0ef      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80064e8:	7cfb      	ldrb	r3, [r7, #19]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d15a      	bne.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80064ee:	4b2b      	ldr	r3, [pc, #172]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01e      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	429a      	cmp	r2, r3
 8006508:	d019      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800650a:	4b24      	ldr	r3, [pc, #144]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800650c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006514:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006516:	4b21      	ldr	r3, [pc, #132]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651c:	4a1f      	ldr	r2, [pc, #124]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800651e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006526:	4b1d      	ldr	r3, [pc, #116]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800652c:	4a1b      	ldr	r2, [pc, #108]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800652e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006536:	4a19      	ldr	r2, [pc, #100]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d016      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006548:	f7fc fde8 	bl	800311c <HAL_GetTick>
 800654c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800654e:	e00b      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006550:	f7fc fde4 	bl	800311c <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	f241 3288 	movw	r2, #5000	; 0x1388
 800655e:	4293      	cmp	r3, r2
 8006560:	d902      	bls.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	74fb      	strb	r3, [r7, #19]
            break;
 8006566:	e006      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006568:	4b0c      	ldr	r3, [pc, #48]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800656a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0ec      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006576:	7cfb      	ldrb	r3, [r7, #19]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10b      	bne.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800657c:	4b07      	ldr	r3, [pc, #28]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800657e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006582:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800658a:	4904      	ldr	r1, [pc, #16]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800658c:	4313      	orrs	r3, r2
 800658e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006592:	e009      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006594:	7cfb      	ldrb	r3, [r7, #19]
 8006596:	74bb      	strb	r3, [r7, #18]
 8006598:	e006      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800659a:	bf00      	nop
 800659c:	40021000 	.word	0x40021000
 80065a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a4:	7cfb      	ldrb	r3, [r7, #19]
 80065a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065a8:	7c7b      	ldrb	r3, [r7, #17]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d105      	bne.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065ae:	4b8a      	ldr	r3, [pc, #552]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b2:	4a89      	ldr	r2, [pc, #548]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80065c6:	4b84      	ldr	r3, [pc, #528]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065cc:	f023 0203 	bic.w	r2, r3, #3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	4980      	ldr	r1, [pc, #512]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00a      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80065e8:	4b7b      	ldr	r3, [pc, #492]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ee:	f023 020c 	bic.w	r2, r3, #12
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	4978      	ldr	r1, [pc, #480]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800660a:	4b73      	ldr	r3, [pc, #460]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800660c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006610:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006618:	496f      	ldr	r1, [pc, #444]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800661a:	4313      	orrs	r3, r2
 800661c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00a      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800662c:	4b6a      	ldr	r3, [pc, #424]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800662e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006632:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663a:	4967      	ldr	r1, [pc, #412]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800663c:	4313      	orrs	r3, r2
 800663e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00a      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800664e:	4b62      	ldr	r3, [pc, #392]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006654:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665c:	495e      	ldr	r1, [pc, #376]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800665e:	4313      	orrs	r3, r2
 8006660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00a      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006670:	4b59      	ldr	r3, [pc, #356]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006676:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667e:	4956      	ldr	r1, [pc, #344]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006680:	4313      	orrs	r3, r2
 8006682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00a      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006692:	4b51      	ldr	r3, [pc, #324]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006698:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a0:	494d      	ldr	r1, [pc, #308]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d028      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066b4:	4b48      	ldr	r3, [pc, #288]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c2:	4945      	ldr	r1, [pc, #276]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066d2:	d106      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066d4:	4b40      	ldr	r3, [pc, #256]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	4a3f      	ldr	r2, [pc, #252]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066de:	60d3      	str	r3, [r2, #12]
 80066e0:	e011      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066ea:	d10c      	bne.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3304      	adds	r3, #4
 80066f0:	2101      	movs	r1, #1
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 f872 	bl	80067dc <RCCEx_PLLSAI1_Config>
 80066f8:	4603      	mov	r3, r0
 80066fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80066fc:	7cfb      	ldrb	r3, [r7, #19]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006702:	7cfb      	ldrb	r3, [r7, #19]
 8006704:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d028      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006712:	4b31      	ldr	r3, [pc, #196]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006718:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006720:	492d      	ldr	r1, [pc, #180]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006722:	4313      	orrs	r3, r2
 8006724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006730:	d106      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006732:	4b29      	ldr	r3, [pc, #164]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	4a28      	ldr	r2, [pc, #160]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006738:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800673c:	60d3      	str	r3, [r2, #12]
 800673e:	e011      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006744:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006748:	d10c      	bne.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	3304      	adds	r3, #4
 800674e:	2101      	movs	r1, #1
 8006750:	4618      	mov	r0, r3
 8006752:	f000 f843 	bl	80067dc <RCCEx_PLLSAI1_Config>
 8006756:	4603      	mov	r3, r0
 8006758:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800675a:	7cfb      	ldrb	r3, [r7, #19]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d001      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006760:	7cfb      	ldrb	r3, [r7, #19]
 8006762:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d01c      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006770:	4b19      	ldr	r3, [pc, #100]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006776:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800677e:	4916      	ldr	r1, [pc, #88]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006780:	4313      	orrs	r3, r2
 8006782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800678a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800678e:	d10c      	bne.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3304      	adds	r3, #4
 8006794:	2102      	movs	r1, #2
 8006796:	4618      	mov	r0, r3
 8006798:	f000 f820 	bl	80067dc <RCCEx_PLLSAI1_Config>
 800679c:	4603      	mov	r3, r0
 800679e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80067a0:	7cfb      	ldrb	r3, [r7, #19]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80067a6:	7cfb      	ldrb	r3, [r7, #19]
 80067a8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80067b6:	4b08      	ldr	r3, [pc, #32]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067bc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c4:	4904      	ldr	r1, [pc, #16]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80067cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	40021000 	.word	0x40021000

080067dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80067ea:	4b74      	ldr	r3, [pc, #464]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f003 0303 	and.w	r3, r3, #3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d018      	beq.n	8006828 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80067f6:	4b71      	ldr	r3, [pc, #452]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f003 0203 	and.w	r2, r3, #3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	429a      	cmp	r2, r3
 8006804:	d10d      	bne.n	8006822 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
       ||
 800680a:	2b00      	cmp	r3, #0
 800680c:	d009      	beq.n	8006822 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800680e:	4b6b      	ldr	r3, [pc, #428]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	091b      	lsrs	r3, r3, #4
 8006814:	f003 0307 	and.w	r3, r3, #7
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
       ||
 800681e:	429a      	cmp	r2, r3
 8006820:	d047      	beq.n	80068b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	73fb      	strb	r3, [r7, #15]
 8006826:	e044      	b.n	80068b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b03      	cmp	r3, #3
 800682e:	d018      	beq.n	8006862 <RCCEx_PLLSAI1_Config+0x86>
 8006830:	2b03      	cmp	r3, #3
 8006832:	d825      	bhi.n	8006880 <RCCEx_PLLSAI1_Config+0xa4>
 8006834:	2b01      	cmp	r3, #1
 8006836:	d002      	beq.n	800683e <RCCEx_PLLSAI1_Config+0x62>
 8006838:	2b02      	cmp	r3, #2
 800683a:	d009      	beq.n	8006850 <RCCEx_PLLSAI1_Config+0x74>
 800683c:	e020      	b.n	8006880 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800683e:	4b5f      	ldr	r3, [pc, #380]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d11d      	bne.n	8006886 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800684e:	e01a      	b.n	8006886 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006850:	4b5a      	ldr	r3, [pc, #360]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006858:	2b00      	cmp	r3, #0
 800685a:	d116      	bne.n	800688a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006860:	e013      	b.n	800688a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006862:	4b56      	ldr	r3, [pc, #344]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10f      	bne.n	800688e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800686e:	4b53      	ldr	r3, [pc, #332]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d109      	bne.n	800688e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800687e:	e006      	b.n	800688e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	73fb      	strb	r3, [r7, #15]
      break;
 8006884:	e004      	b.n	8006890 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006886:	bf00      	nop
 8006888:	e002      	b.n	8006890 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800688a:	bf00      	nop
 800688c:	e000      	b.n	8006890 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800688e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10d      	bne.n	80068b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006896:	4b49      	ldr	r3, [pc, #292]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6819      	ldr	r1, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	011b      	lsls	r3, r3, #4
 80068aa:	430b      	orrs	r3, r1
 80068ac:	4943      	ldr	r1, [pc, #268]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d17c      	bne.n	80069b2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80068b8:	4b40      	ldr	r3, [pc, #256]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a3f      	ldr	r2, [pc, #252]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80068be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068c4:	f7fc fc2a 	bl	800311c <HAL_GetTick>
 80068c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068ca:	e009      	b.n	80068e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068cc:	f7fc fc26 	bl	800311c <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d902      	bls.n	80068e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	73fb      	strb	r3, [r7, #15]
        break;
 80068de:	e005      	b.n	80068ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068e0:	4b36      	ldr	r3, [pc, #216]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1ef      	bne.n	80068cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d15f      	bne.n	80069b2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d110      	bne.n	800691a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068f8:	4b30      	ldr	r3, [pc, #192]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006900:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	6892      	ldr	r2, [r2, #8]
 8006908:	0211      	lsls	r1, r2, #8
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	68d2      	ldr	r2, [r2, #12]
 800690e:	06d2      	lsls	r2, r2, #27
 8006910:	430a      	orrs	r2, r1
 8006912:	492a      	ldr	r1, [pc, #168]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006914:	4313      	orrs	r3, r2
 8006916:	610b      	str	r3, [r1, #16]
 8006918:	e027      	b.n	800696a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d112      	bne.n	8006946 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006920:	4b26      	ldr	r3, [pc, #152]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006928:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	6892      	ldr	r2, [r2, #8]
 8006930:	0211      	lsls	r1, r2, #8
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	6912      	ldr	r2, [r2, #16]
 8006936:	0852      	lsrs	r2, r2, #1
 8006938:	3a01      	subs	r2, #1
 800693a:	0552      	lsls	r2, r2, #21
 800693c:	430a      	orrs	r2, r1
 800693e:	491f      	ldr	r1, [pc, #124]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006940:	4313      	orrs	r3, r2
 8006942:	610b      	str	r3, [r1, #16]
 8006944:	e011      	b.n	800696a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006946:	4b1d      	ldr	r3, [pc, #116]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800694e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	6892      	ldr	r2, [r2, #8]
 8006956:	0211      	lsls	r1, r2, #8
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	6952      	ldr	r2, [r2, #20]
 800695c:	0852      	lsrs	r2, r2, #1
 800695e:	3a01      	subs	r2, #1
 8006960:	0652      	lsls	r2, r2, #25
 8006962:	430a      	orrs	r2, r1
 8006964:	4915      	ldr	r1, [pc, #84]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006966:	4313      	orrs	r3, r2
 8006968:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800696a:	4b14      	ldr	r3, [pc, #80]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a13      	ldr	r2, [pc, #76]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006970:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006974:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006976:	f7fc fbd1 	bl	800311c <HAL_GetTick>
 800697a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800697c:	e009      	b.n	8006992 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800697e:	f7fc fbcd 	bl	800311c <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d902      	bls.n	8006992 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	73fb      	strb	r3, [r7, #15]
          break;
 8006990:	e005      	b.n	800699e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006992:	4b0a      	ldr	r3, [pc, #40]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d0ef      	beq.n	800697e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d106      	bne.n	80069b2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80069a4:	4b05      	ldr	r3, [pc, #20]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80069a6:	691a      	ldr	r2, [r3, #16]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	4903      	ldr	r1, [pc, #12]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	40021000 	.word	0x40021000

080069c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e049      	b.n	8006a66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d106      	bne.n	80069ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7fc f9c6 	bl	8002d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	3304      	adds	r3, #4
 80069fc:	4619      	mov	r1, r3
 80069fe:	4610      	mov	r0, r2
 8006a00:	f000 fb42 	bl	8007088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3708      	adds	r7, #8
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
	...

08006a70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d001      	beq.n	8006a88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e03b      	b.n	8006b00 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68da      	ldr	r2, [r3, #12]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f042 0201 	orr.w	r2, r2, #1
 8006a9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a19      	ldr	r2, [pc, #100]	; (8006b0c <HAL_TIM_Base_Start_IT+0x9c>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d009      	beq.n	8006abe <HAL_TIM_Base_Start_IT+0x4e>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ab2:	d004      	beq.n	8006abe <HAL_TIM_Base_Start_IT+0x4e>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a15      	ldr	r2, [pc, #84]	; (8006b10 <HAL_TIM_Base_Start_IT+0xa0>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d115      	bne.n	8006aea <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689a      	ldr	r2, [r3, #8]
 8006ac4:	4b13      	ldr	r3, [pc, #76]	; (8006b14 <HAL_TIM_Base_Start_IT+0xa4>)
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2b06      	cmp	r3, #6
 8006ace:	d015      	beq.n	8006afc <HAL_TIM_Base_Start_IT+0x8c>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad6:	d011      	beq.n	8006afc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0201 	orr.w	r2, r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae8:	e008      	b.n	8006afc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f042 0201 	orr.w	r2, r2, #1
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	e000      	b.n	8006afe <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006afc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	40012c00 	.word	0x40012c00
 8006b10:	40014000 	.word	0x40014000
 8006b14:	00010007 	.word	0x00010007

08006b18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e049      	b.n	8006bbe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d106      	bne.n	8006b44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7fc f8d4 	bl	8002cec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3304      	adds	r3, #4
 8006b54:	4619      	mov	r1, r3
 8006b56:	4610      	mov	r0, r2
 8006b58:	f000 fa96 	bl	8007088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b082      	sub	sp, #8
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d122      	bne.n	8006c22 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d11b      	bne.n	8006c22 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f06f 0202 	mvn.w	r2, #2
 8006bf2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	f003 0303 	and.w	r3, r3, #3
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fa1f 	bl	800704c <HAL_TIM_IC_CaptureCallback>
 8006c0e:	e005      	b.n	8006c1c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fa11 	bl	8007038 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fa22 	bl	8007060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b04      	cmp	r3, #4
 8006c2e:	d122      	bne.n	8006c76 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f003 0304 	and.w	r3, r3, #4
 8006c3a:	2b04      	cmp	r3, #4
 8006c3c:	d11b      	bne.n	8006c76 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f06f 0204 	mvn.w	r2, #4
 8006c46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d003      	beq.n	8006c64 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f9f5 	bl	800704c <HAL_TIM_IC_CaptureCallback>
 8006c62:	e005      	b.n	8006c70 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f9e7 	bl	8007038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f9f8 	bl	8007060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	f003 0308 	and.w	r3, r3, #8
 8006c80:	2b08      	cmp	r3, #8
 8006c82:	d122      	bne.n	8006cca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	f003 0308 	and.w	r3, r3, #8
 8006c8e:	2b08      	cmp	r3, #8
 8006c90:	d11b      	bne.n	8006cca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f06f 0208 	mvn.w	r2, #8
 8006c9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2204      	movs	r2, #4
 8006ca0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	f003 0303 	and.w	r3, r3, #3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f9cb 	bl	800704c <HAL_TIM_IC_CaptureCallback>
 8006cb6:	e005      	b.n	8006cc4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f9bd 	bl	8007038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f9ce 	bl	8007060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	f003 0310 	and.w	r3, r3, #16
 8006cd4:	2b10      	cmp	r3, #16
 8006cd6:	d122      	bne.n	8006d1e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f003 0310 	and.w	r3, r3, #16
 8006ce2:	2b10      	cmp	r3, #16
 8006ce4:	d11b      	bne.n	8006d1e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f06f 0210 	mvn.w	r2, #16
 8006cee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2208      	movs	r2, #8
 8006cf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	69db      	ldr	r3, [r3, #28]
 8006cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f9a1 	bl	800704c <HAL_TIM_IC_CaptureCallback>
 8006d0a:	e005      	b.n	8006d18 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f993 	bl	8007038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f9a4 	bl	8007060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d10e      	bne.n	8006d4a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d107      	bne.n	8006d4a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f06f 0201 	mvn.w	r2, #1
 8006d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f96d 	bl	8007024 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d54:	2b80      	cmp	r3, #128	; 0x80
 8006d56:	d10e      	bne.n	8006d76 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d62:	2b80      	cmp	r3, #128	; 0x80
 8006d64:	d107      	bne.n	8006d76 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fd53 	bl	800781c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d84:	d10e      	bne.n	8006da4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d90:	2b80      	cmp	r3, #128	; 0x80
 8006d92:	d107      	bne.n	8006da4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fd46 	bl	8007830 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dae:	2b40      	cmp	r3, #64	; 0x40
 8006db0:	d10e      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dbc:	2b40      	cmp	r3, #64	; 0x40
 8006dbe:	d107      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f952 	bl	8007074 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	f003 0320 	and.w	r3, r3, #32
 8006dda:	2b20      	cmp	r3, #32
 8006ddc:	d10e      	bne.n	8006dfc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f003 0320 	and.w	r3, r3, #32
 8006de8:	2b20      	cmp	r3, #32
 8006dea:	d107      	bne.n	8006dfc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f06f 0220 	mvn.w	r2, #32
 8006df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fd06 	bl	8007808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dfc:	bf00      	nop
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d101      	bne.n	8006e1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	e0fd      	b.n	800701a <HAL_TIM_PWM_ConfigChannel+0x216>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b14      	cmp	r3, #20
 8006e2a:	f200 80f0 	bhi.w	800700e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006e2e:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e34:	08006e89 	.word	0x08006e89
 8006e38:	0800700f 	.word	0x0800700f
 8006e3c:	0800700f 	.word	0x0800700f
 8006e40:	0800700f 	.word	0x0800700f
 8006e44:	08006ec9 	.word	0x08006ec9
 8006e48:	0800700f 	.word	0x0800700f
 8006e4c:	0800700f 	.word	0x0800700f
 8006e50:	0800700f 	.word	0x0800700f
 8006e54:	08006f0b 	.word	0x08006f0b
 8006e58:	0800700f 	.word	0x0800700f
 8006e5c:	0800700f 	.word	0x0800700f
 8006e60:	0800700f 	.word	0x0800700f
 8006e64:	08006f4b 	.word	0x08006f4b
 8006e68:	0800700f 	.word	0x0800700f
 8006e6c:	0800700f 	.word	0x0800700f
 8006e70:	0800700f 	.word	0x0800700f
 8006e74:	08006f8d 	.word	0x08006f8d
 8006e78:	0800700f 	.word	0x0800700f
 8006e7c:	0800700f 	.word	0x0800700f
 8006e80:	0800700f 	.word	0x0800700f
 8006e84:	08006fcd 	.word	0x08006fcd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68b9      	ldr	r1, [r7, #8]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 f95e 	bl	8007150 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	699a      	ldr	r2, [r3, #24]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f042 0208 	orr.w	r2, r2, #8
 8006ea2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	699a      	ldr	r2, [r3, #24]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f022 0204 	bic.w	r2, r2, #4
 8006eb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6999      	ldr	r1, [r3, #24]
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	691a      	ldr	r2, [r3, #16]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	619a      	str	r2, [r3, #24]
      break;
 8006ec6:	e0a3      	b.n	8007010 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68b9      	ldr	r1, [r7, #8]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 f9ba 	bl	8007248 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	699a      	ldr	r2, [r3, #24]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	699a      	ldr	r2, [r3, #24]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6999      	ldr	r1, [r3, #24]
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	021a      	lsls	r2, r3, #8
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	430a      	orrs	r2, r1
 8006f06:	619a      	str	r2, [r3, #24]
      break;
 8006f08:	e082      	b.n	8007010 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68b9      	ldr	r1, [r7, #8]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f000 fa13 	bl	800733c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	69da      	ldr	r2, [r3, #28]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f042 0208 	orr.w	r2, r2, #8
 8006f24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	69da      	ldr	r2, [r3, #28]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 0204 	bic.w	r2, r2, #4
 8006f34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	69d9      	ldr	r1, [r3, #28]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	691a      	ldr	r2, [r3, #16]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	430a      	orrs	r2, r1
 8006f46:	61da      	str	r2, [r3, #28]
      break;
 8006f48:	e062      	b.n	8007010 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68b9      	ldr	r1, [r7, #8]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 fa6b 	bl	800742c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	69da      	ldr	r2, [r3, #28]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	69da      	ldr	r2, [r3, #28]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	69d9      	ldr	r1, [r3, #28]
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	021a      	lsls	r2, r3, #8
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	61da      	str	r2, [r3, #28]
      break;
 8006f8a:	e041      	b.n	8007010 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68b9      	ldr	r1, [r7, #8]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 faa8 	bl	80074e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f042 0208 	orr.w	r2, r2, #8
 8006fa6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 0204 	bic.w	r2, r2, #4
 8006fb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	691a      	ldr	r2, [r3, #16]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006fca:	e021      	b.n	8007010 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68b9      	ldr	r1, [r7, #8]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 fae0 	bl	8007598 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fe6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ff6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	021a      	lsls	r2, r3, #8
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	430a      	orrs	r2, r1
 800700a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800700c:	e000      	b.n	8007010 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800700e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop

08007024 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a2a      	ldr	r2, [pc, #168]	; (8007144 <TIM_Base_SetConfig+0xbc>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d003      	beq.n	80070a8 <TIM_Base_SetConfig+0x20>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a6:	d108      	bne.n	80070ba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a21      	ldr	r2, [pc, #132]	; (8007144 <TIM_Base_SetConfig+0xbc>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d00b      	beq.n	80070da <TIM_Base_SetConfig+0x52>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c8:	d007      	beq.n	80070da <TIM_Base_SetConfig+0x52>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a1e      	ldr	r2, [pc, #120]	; (8007148 <TIM_Base_SetConfig+0xc0>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d003      	beq.n	80070da <TIM_Base_SetConfig+0x52>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a1d      	ldr	r2, [pc, #116]	; (800714c <TIM_Base_SetConfig+0xc4>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d108      	bne.n	80070ec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a0c      	ldr	r2, [pc, #48]	; (8007144 <TIM_Base_SetConfig+0xbc>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d007      	beq.n	8007128 <TIM_Base_SetConfig+0xa0>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a0b      	ldr	r2, [pc, #44]	; (8007148 <TIM_Base_SetConfig+0xc0>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d003      	beq.n	8007128 <TIM_Base_SetConfig+0xa0>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a0a      	ldr	r2, [pc, #40]	; (800714c <TIM_Base_SetConfig+0xc4>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d103      	bne.n	8007130 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	691a      	ldr	r2, [r3, #16]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	615a      	str	r2, [r3, #20]
}
 8007136:	bf00      	nop
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	40012c00 	.word	0x40012c00
 8007148:	40014000 	.word	0x40014000
 800714c:	40014400 	.word	0x40014400

08007150 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	f023 0201 	bic.w	r2, r3, #1
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800717e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f023 0303 	bic.w	r3, r3, #3
 800718a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	4313      	orrs	r3, r2
 8007194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f023 0302 	bic.w	r3, r3, #2
 800719c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a24      	ldr	r2, [pc, #144]	; (800723c <TIM_OC1_SetConfig+0xec>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d007      	beq.n	80071c0 <TIM_OC1_SetConfig+0x70>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a23      	ldr	r2, [pc, #140]	; (8007240 <TIM_OC1_SetConfig+0xf0>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d003      	beq.n	80071c0 <TIM_OC1_SetConfig+0x70>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a22      	ldr	r2, [pc, #136]	; (8007244 <TIM_OC1_SetConfig+0xf4>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d10c      	bne.n	80071da <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f023 0308 	bic.w	r3, r3, #8
 80071c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f023 0304 	bic.w	r3, r3, #4
 80071d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a17      	ldr	r2, [pc, #92]	; (800723c <TIM_OC1_SetConfig+0xec>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d007      	beq.n	80071f2 <TIM_OC1_SetConfig+0xa2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a16      	ldr	r2, [pc, #88]	; (8007240 <TIM_OC1_SetConfig+0xf0>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d003      	beq.n	80071f2 <TIM_OC1_SetConfig+0xa2>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a15      	ldr	r2, [pc, #84]	; (8007244 <TIM_OC1_SetConfig+0xf4>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d111      	bne.n	8007216 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	4313      	orrs	r3, r2
 800720a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	4313      	orrs	r3, r2
 8007214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	621a      	str	r2, [r3, #32]
}
 8007230:	bf00      	nop
 8007232:	371c      	adds	r7, #28
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	40012c00 	.word	0x40012c00
 8007240:	40014000 	.word	0x40014000
 8007244:	40014400 	.word	0x40014400

08007248 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	f023 0210 	bic.w	r2, r3, #16
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800727a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	021b      	lsls	r3, r3, #8
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	4313      	orrs	r3, r2
 800728e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f023 0320 	bic.w	r3, r3, #32
 8007296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	011b      	lsls	r3, r3, #4
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a22      	ldr	r2, [pc, #136]	; (8007330 <TIM_OC2_SetConfig+0xe8>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d10d      	bne.n	80072c8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	011b      	lsls	r3, r3, #4
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	4313      	orrs	r3, r2
 80072be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a19      	ldr	r2, [pc, #100]	; (8007330 <TIM_OC2_SetConfig+0xe8>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d007      	beq.n	80072e0 <TIM_OC2_SetConfig+0x98>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a18      	ldr	r2, [pc, #96]	; (8007334 <TIM_OC2_SetConfig+0xec>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d003      	beq.n	80072e0 <TIM_OC2_SetConfig+0x98>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a17      	ldr	r2, [pc, #92]	; (8007338 <TIM_OC2_SetConfig+0xf0>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d113      	bne.n	8007308 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	4313      	orrs	r3, r2
 8007306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	621a      	str	r2, [r3, #32]
}
 8007322:	bf00      	nop
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	40012c00 	.word	0x40012c00
 8007334:	40014000 	.word	0x40014000
 8007338:	40014400 	.word	0x40014400

0800733c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800733c:	b480      	push	{r7}
 800733e:	b087      	sub	sp, #28
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	69db      	ldr	r3, [r3, #28]
 8007362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800736a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800736e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f023 0303 	bic.w	r3, r3, #3
 8007376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	4313      	orrs	r3, r2
 8007380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	021b      	lsls	r3, r3, #8
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	4313      	orrs	r3, r2
 8007394:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a21      	ldr	r2, [pc, #132]	; (8007420 <TIM_OC3_SetConfig+0xe4>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d10d      	bne.n	80073ba <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	021b      	lsls	r3, r3, #8
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a18      	ldr	r2, [pc, #96]	; (8007420 <TIM_OC3_SetConfig+0xe4>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d007      	beq.n	80073d2 <TIM_OC3_SetConfig+0x96>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a17      	ldr	r2, [pc, #92]	; (8007424 <TIM_OC3_SetConfig+0xe8>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d003      	beq.n	80073d2 <TIM_OC3_SetConfig+0x96>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a16      	ldr	r2, [pc, #88]	; (8007428 <TIM_OC3_SetConfig+0xec>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d113      	bne.n	80073fa <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	011b      	lsls	r3, r3, #4
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	011b      	lsls	r3, r3, #4
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	621a      	str	r2, [r3, #32]
}
 8007414:	bf00      	nop
 8007416:	371c      	adds	r7, #28
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	40012c00 	.word	0x40012c00
 8007424:	40014000 	.word	0x40014000
 8007428:	40014400 	.word	0x40014400

0800742c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800745a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800745e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007466:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	021b      	lsls	r3, r3, #8
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	4313      	orrs	r3, r2
 8007472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800747a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	031b      	lsls	r3, r3, #12
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	4313      	orrs	r3, r2
 8007486:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a14      	ldr	r2, [pc, #80]	; (80074dc <TIM_OC4_SetConfig+0xb0>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d007      	beq.n	80074a0 <TIM_OC4_SetConfig+0x74>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a13      	ldr	r2, [pc, #76]	; (80074e0 <TIM_OC4_SetConfig+0xb4>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d003      	beq.n	80074a0 <TIM_OC4_SetConfig+0x74>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a12      	ldr	r2, [pc, #72]	; (80074e4 <TIM_OC4_SetConfig+0xb8>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d109      	bne.n	80074b4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	695b      	ldr	r3, [r3, #20]
 80074ac:	019b      	lsls	r3, r3, #6
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	621a      	str	r2, [r3, #32]
}
 80074ce:	bf00      	nop
 80074d0:	371c      	adds	r7, #28
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	40012c00 	.word	0x40012c00
 80074e0:	40014000 	.word	0x40014000
 80074e4:	40014400 	.word	0x40014400

080074e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b087      	sub	sp, #28
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800750e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800751a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800752c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	041b      	lsls	r3, r3, #16
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	4313      	orrs	r3, r2
 8007538:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a13      	ldr	r2, [pc, #76]	; (800758c <TIM_OC5_SetConfig+0xa4>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d007      	beq.n	8007552 <TIM_OC5_SetConfig+0x6a>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a12      	ldr	r2, [pc, #72]	; (8007590 <TIM_OC5_SetConfig+0xa8>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d003      	beq.n	8007552 <TIM_OC5_SetConfig+0x6a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a11      	ldr	r2, [pc, #68]	; (8007594 <TIM_OC5_SetConfig+0xac>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d109      	bne.n	8007566 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007558:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	021b      	lsls	r3, r3, #8
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	4313      	orrs	r3, r2
 8007564:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	621a      	str	r2, [r3, #32]
}
 8007580:	bf00      	nop
 8007582:	371c      	adds	r7, #28
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	40012c00 	.word	0x40012c00
 8007590:	40014000 	.word	0x40014000
 8007594:	40014400 	.word	0x40014400

08007598 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	021b      	lsls	r3, r3, #8
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	051b      	lsls	r3, r3, #20
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a14      	ldr	r2, [pc, #80]	; (8007640 <TIM_OC6_SetConfig+0xa8>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d007      	beq.n	8007604 <TIM_OC6_SetConfig+0x6c>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a13      	ldr	r2, [pc, #76]	; (8007644 <TIM_OC6_SetConfig+0xac>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d003      	beq.n	8007604 <TIM_OC6_SetConfig+0x6c>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a12      	ldr	r2, [pc, #72]	; (8007648 <TIM_OC6_SetConfig+0xb0>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d109      	bne.n	8007618 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800760a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	029b      	lsls	r3, r3, #10
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	4313      	orrs	r3, r2
 8007616:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	621a      	str	r2, [r3, #32]
}
 8007632:	bf00      	nop
 8007634:	371c      	adds	r7, #28
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	40012c00 	.word	0x40012c00
 8007644:	40014000 	.word	0x40014000
 8007648:	40014400 	.word	0x40014400

0800764c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800765c:	2b01      	cmp	r3, #1
 800765e:	d101      	bne.n	8007664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007660:	2302      	movs	r3, #2
 8007662:	e04f      	b.n	8007704 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a21      	ldr	r2, [pc, #132]	; (8007710 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d108      	bne.n	80076a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007694:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	4313      	orrs	r3, r2
 800769e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a14      	ldr	r2, [pc, #80]	; (8007710 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d009      	beq.n	80076d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076cc:	d004      	beq.n	80076d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a10      	ldr	r2, [pc, #64]	; (8007714 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d10c      	bne.n	80076f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3714      	adds	r7, #20
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	40012c00 	.word	0x40012c00
 8007714:	40014000 	.word	0x40014000

08007718 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007722:	2300      	movs	r3, #0
 8007724:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800772c:	2b01      	cmp	r3, #1
 800772e:	d101      	bne.n	8007734 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007730:	2302      	movs	r3, #2
 8007732:	e060      	b.n	80077f6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	4313      	orrs	r3, r2
 8007748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	4313      	orrs	r3, r2
 8007756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	4313      	orrs	r3, r2
 8007764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4313      	orrs	r3, r2
 8007772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	4313      	orrs	r3, r2
 8007780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	4313      	orrs	r3, r2
 800778e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779a:	4313      	orrs	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	041b      	lsls	r3, r3, #16
 80077aa:	4313      	orrs	r3, r2
 80077ac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a14      	ldr	r2, [pc, #80]	; (8007804 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d115      	bne.n	80077e4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c2:	051b      	lsls	r3, r3, #20
 80077c4:	4313      	orrs	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	6a1b      	ldr	r3, [r3, #32]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	40012c00 	.word	0x40012c00

08007808 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e040      	b.n	80078d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800785a:	2b00      	cmp	r3, #0
 800785c:	d106      	bne.n	800786c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7fb fb5c 	bl	8002f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2224      	movs	r2, #36	; 0x24
 8007870:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0201 	bic.w	r2, r2, #1
 8007880:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f8c0 	bl	8007a08 <UART_SetConfig>
 8007888:	4603      	mov	r3, r0
 800788a:	2b01      	cmp	r3, #1
 800788c:	d101      	bne.n	8007892 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e022      	b.n	80078d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fae2 	bl	8007e64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689a      	ldr	r2, [r3, #8]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0201 	orr.w	r2, r2, #1
 80078ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fb69 	bl	8007fa8 <UART_CheckIdleState>
 80078d6:	4603      	mov	r3, r0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08a      	sub	sp, #40	; 0x28
 80078e4:	af02      	add	r7, sp, #8
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	4613      	mov	r3, r2
 80078ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078f4:	2b20      	cmp	r3, #32
 80078f6:	f040 8082 	bne.w	80079fe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <HAL_UART_Transmit+0x26>
 8007900:	88fb      	ldrh	r3, [r7, #6]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e07a      	b.n	8007a00 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <HAL_UART_Transmit+0x38>
 8007914:	2302      	movs	r3, #2
 8007916:	e073      	b.n	8007a00 <HAL_UART_Transmit+0x120>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2221      	movs	r2, #33	; 0x21
 800792c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800792e:	f7fb fbf5 	bl	800311c <HAL_GetTick>
 8007932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	88fa      	ldrh	r2, [r7, #6]
 8007938:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	88fa      	ldrh	r2, [r7, #6]
 8007940:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800794c:	d108      	bne.n	8007960 <HAL_UART_Transmit+0x80>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d104      	bne.n	8007960 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007956:	2300      	movs	r3, #0
 8007958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	61bb      	str	r3, [r7, #24]
 800795e:	e003      	b.n	8007968 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007964:	2300      	movs	r3, #0
 8007966:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007970:	e02d      	b.n	80079ce <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	2200      	movs	r2, #0
 800797a:	2180      	movs	r1, #128	; 0x80
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f000 fb5c 	bl	800803a <UART_WaitOnFlagUntilTimeout>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d001      	beq.n	800798c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	e039      	b.n	8007a00 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10b      	bne.n	80079aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	881a      	ldrh	r2, [r3, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800799e:	b292      	uxth	r2, r2
 80079a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	3302      	adds	r3, #2
 80079a6:	61bb      	str	r3, [r7, #24]
 80079a8:	e008      	b.n	80079bc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	781a      	ldrb	r2, [r3, #0]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	b292      	uxth	r2, r2
 80079b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	3301      	adds	r3, #1
 80079ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	3b01      	subs	r3, #1
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1cb      	bne.n	8007972 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	2200      	movs	r2, #0
 80079e2:	2140      	movs	r1, #64	; 0x40
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	f000 fb28 	bl	800803a <UART_WaitOnFlagUntilTimeout>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d001      	beq.n	80079f4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e005      	b.n	8007a00 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2220      	movs	r2, #32
 80079f8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	e000      	b.n	8007a00 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80079fe:	2302      	movs	r3, #2
  }
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3720      	adds	r7, #32
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a0c:	b08a      	sub	sp, #40	; 0x28
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	689a      	ldr	r2, [r3, #8]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	431a      	orrs	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	431a      	orrs	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	69db      	ldr	r3, [r3, #28]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	4bb4      	ldr	r3, [pc, #720]	; (8007d08 <UART_SetConfig+0x300>)
 8007a38:	4013      	ands	r3, r2
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	6812      	ldr	r2, [r2, #0]
 8007a3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a40:	430b      	orrs	r3, r1
 8007a42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	68da      	ldr	r2, [r3, #12]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4aa9      	ldr	r2, [pc, #676]	; (8007d0c <UART_SetConfig+0x304>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d004      	beq.n	8007a74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a70:	4313      	orrs	r3, r2
 8007a72:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a84:	430a      	orrs	r2, r1
 8007a86:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4aa0      	ldr	r2, [pc, #640]	; (8007d10 <UART_SetConfig+0x308>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d126      	bne.n	8007ae0 <UART_SetConfig+0xd8>
 8007a92:	4ba0      	ldr	r3, [pc, #640]	; (8007d14 <UART_SetConfig+0x30c>)
 8007a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a98:	f003 0303 	and.w	r3, r3, #3
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d81b      	bhi.n	8007ad8 <UART_SetConfig+0xd0>
 8007aa0:	a201      	add	r2, pc, #4	; (adr r2, 8007aa8 <UART_SetConfig+0xa0>)
 8007aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa6:	bf00      	nop
 8007aa8:	08007ab9 	.word	0x08007ab9
 8007aac:	08007ac9 	.word	0x08007ac9
 8007ab0:	08007ac1 	.word	0x08007ac1
 8007ab4:	08007ad1 	.word	0x08007ad1
 8007ab8:	2301      	movs	r3, #1
 8007aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007abe:	e080      	b.n	8007bc2 <UART_SetConfig+0x1ba>
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ac6:	e07c      	b.n	8007bc2 <UART_SetConfig+0x1ba>
 8007ac8:	2304      	movs	r3, #4
 8007aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ace:	e078      	b.n	8007bc2 <UART_SetConfig+0x1ba>
 8007ad0:	2308      	movs	r3, #8
 8007ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ad6:	e074      	b.n	8007bc2 <UART_SetConfig+0x1ba>
 8007ad8:	2310      	movs	r3, #16
 8007ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ade:	e070      	b.n	8007bc2 <UART_SetConfig+0x1ba>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a8c      	ldr	r2, [pc, #560]	; (8007d18 <UART_SetConfig+0x310>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d138      	bne.n	8007b5c <UART_SetConfig+0x154>
 8007aea:	4b8a      	ldr	r3, [pc, #552]	; (8007d14 <UART_SetConfig+0x30c>)
 8007aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007af0:	f003 030c 	and.w	r3, r3, #12
 8007af4:	2b0c      	cmp	r3, #12
 8007af6:	d82d      	bhi.n	8007b54 <UART_SetConfig+0x14c>
 8007af8:	a201      	add	r2, pc, #4	; (adr r2, 8007b00 <UART_SetConfig+0xf8>)
 8007afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afe:	bf00      	nop
 8007b00:	08007b35 	.word	0x08007b35
 8007b04:	08007b55 	.word	0x08007b55
 8007b08:	08007b55 	.word	0x08007b55
 8007b0c:	08007b55 	.word	0x08007b55
 8007b10:	08007b45 	.word	0x08007b45
 8007b14:	08007b55 	.word	0x08007b55
 8007b18:	08007b55 	.word	0x08007b55
 8007b1c:	08007b55 	.word	0x08007b55
 8007b20:	08007b3d 	.word	0x08007b3d
 8007b24:	08007b55 	.word	0x08007b55
 8007b28:	08007b55 	.word	0x08007b55
 8007b2c:	08007b55 	.word	0x08007b55
 8007b30:	08007b4d 	.word	0x08007b4d
 8007b34:	2300      	movs	r3, #0
 8007b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b3a:	e042      	b.n	8007bc2 <UART_SetConfig+0x1ba>
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b42:	e03e      	b.n	8007bc2 <UART_SetConfig+0x1ba>
 8007b44:	2304      	movs	r3, #4
 8007b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b4a:	e03a      	b.n	8007bc2 <UART_SetConfig+0x1ba>
 8007b4c:	2308      	movs	r3, #8
 8007b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b52:	e036      	b.n	8007bc2 <UART_SetConfig+0x1ba>
 8007b54:	2310      	movs	r3, #16
 8007b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b5a:	e032      	b.n	8007bc2 <UART_SetConfig+0x1ba>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a6a      	ldr	r2, [pc, #424]	; (8007d0c <UART_SetConfig+0x304>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d12a      	bne.n	8007bbc <UART_SetConfig+0x1b4>
 8007b66:	4b6b      	ldr	r3, [pc, #428]	; (8007d14 <UART_SetConfig+0x30c>)
 8007b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007b70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b74:	d01a      	beq.n	8007bac <UART_SetConfig+0x1a4>
 8007b76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b7a:	d81b      	bhi.n	8007bb4 <UART_SetConfig+0x1ac>
 8007b7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b80:	d00c      	beq.n	8007b9c <UART_SetConfig+0x194>
 8007b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b86:	d815      	bhi.n	8007bb4 <UART_SetConfig+0x1ac>
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d003      	beq.n	8007b94 <UART_SetConfig+0x18c>
 8007b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b90:	d008      	beq.n	8007ba4 <UART_SetConfig+0x19c>
 8007b92:	e00f      	b.n	8007bb4 <UART_SetConfig+0x1ac>
 8007b94:	2300      	movs	r3, #0
 8007b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b9a:	e012      	b.n	8007bc2 <UART_SetConfig+0x1ba>
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ba2:	e00e      	b.n	8007bc2 <UART_SetConfig+0x1ba>
 8007ba4:	2304      	movs	r3, #4
 8007ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007baa:	e00a      	b.n	8007bc2 <UART_SetConfig+0x1ba>
 8007bac:	2308      	movs	r3, #8
 8007bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bb2:	e006      	b.n	8007bc2 <UART_SetConfig+0x1ba>
 8007bb4:	2310      	movs	r3, #16
 8007bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bba:	e002      	b.n	8007bc2 <UART_SetConfig+0x1ba>
 8007bbc:	2310      	movs	r3, #16
 8007bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a51      	ldr	r2, [pc, #324]	; (8007d0c <UART_SetConfig+0x304>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d17a      	bne.n	8007cc2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bd0:	2b08      	cmp	r3, #8
 8007bd2:	d824      	bhi.n	8007c1e <UART_SetConfig+0x216>
 8007bd4:	a201      	add	r2, pc, #4	; (adr r2, 8007bdc <UART_SetConfig+0x1d4>)
 8007bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bda:	bf00      	nop
 8007bdc:	08007c01 	.word	0x08007c01
 8007be0:	08007c1f 	.word	0x08007c1f
 8007be4:	08007c09 	.word	0x08007c09
 8007be8:	08007c1f 	.word	0x08007c1f
 8007bec:	08007c0f 	.word	0x08007c0f
 8007bf0:	08007c1f 	.word	0x08007c1f
 8007bf4:	08007c1f 	.word	0x08007c1f
 8007bf8:	08007c1f 	.word	0x08007c1f
 8007bfc:	08007c17 	.word	0x08007c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c00:	f7fe fb6a 	bl	80062d8 <HAL_RCC_GetPCLK1Freq>
 8007c04:	61f8      	str	r0, [r7, #28]
        break;
 8007c06:	e010      	b.n	8007c2a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c08:	4b44      	ldr	r3, [pc, #272]	; (8007d1c <UART_SetConfig+0x314>)
 8007c0a:	61fb      	str	r3, [r7, #28]
        break;
 8007c0c:	e00d      	b.n	8007c2a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c0e:	f7fe facb 	bl	80061a8 <HAL_RCC_GetSysClockFreq>
 8007c12:	61f8      	str	r0, [r7, #28]
        break;
 8007c14:	e009      	b.n	8007c2a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c1a:	61fb      	str	r3, [r7, #28]
        break;
 8007c1c:	e005      	b.n	8007c2a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007c28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 8109 	beq.w	8007e44 <UART_SetConfig+0x43c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	4613      	mov	r3, r2
 8007c38:	005b      	lsls	r3, r3, #1
 8007c3a:	4413      	add	r3, r2
 8007c3c:	69fa      	ldr	r2, [r7, #28]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d305      	bcc.n	8007c4e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c48:	69fa      	ldr	r2, [r7, #28]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d903      	bls.n	8007c56 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007c54:	e0f6      	b.n	8007e44 <UART_SetConfig+0x43c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	461c      	mov	r4, r3
 8007c5c:	4615      	mov	r5, r2
 8007c5e:	f04f 0200 	mov.w	r2, #0
 8007c62:	f04f 0300 	mov.w	r3, #0
 8007c66:	022b      	lsls	r3, r5, #8
 8007c68:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007c6c:	0222      	lsls	r2, r4, #8
 8007c6e:	68f9      	ldr	r1, [r7, #12]
 8007c70:	6849      	ldr	r1, [r1, #4]
 8007c72:	0849      	lsrs	r1, r1, #1
 8007c74:	2000      	movs	r0, #0
 8007c76:	4688      	mov	r8, r1
 8007c78:	4681      	mov	r9, r0
 8007c7a:	eb12 0a08 	adds.w	sl, r2, r8
 8007c7e:	eb43 0b09 	adc.w	fp, r3, r9
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	603b      	str	r3, [r7, #0]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c90:	4650      	mov	r0, sl
 8007c92:	4659      	mov	r1, fp
 8007c94:	f7f8 ffd8 	bl	8000c48 <__aeabi_uldivmod>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ca6:	d308      	bcc.n	8007cba <UART_SetConfig+0x2b2>
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cae:	d204      	bcs.n	8007cba <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	69ba      	ldr	r2, [r7, #24]
 8007cb6:	60da      	str	r2, [r3, #12]
 8007cb8:	e0c4      	b.n	8007e44 <UART_SetConfig+0x43c>
        }
        else
        {
          ret = HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007cc0:	e0c0      	b.n	8007e44 <UART_SetConfig+0x43c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cca:	d16b      	bne.n	8007da4 <UART_SetConfig+0x39c>
  {
    switch (clocksource)
 8007ccc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cd0:	2b08      	cmp	r3, #8
 8007cd2:	d834      	bhi.n	8007d3e <UART_SetConfig+0x336>
 8007cd4:	a201      	add	r2, pc, #4	; (adr r2, 8007cdc <UART_SetConfig+0x2d4>)
 8007cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cda:	bf00      	nop
 8007cdc:	08007d01 	.word	0x08007d01
 8007ce0:	08007d21 	.word	0x08007d21
 8007ce4:	08007d29 	.word	0x08007d29
 8007ce8:	08007d3f 	.word	0x08007d3f
 8007cec:	08007d2f 	.word	0x08007d2f
 8007cf0:	08007d3f 	.word	0x08007d3f
 8007cf4:	08007d3f 	.word	0x08007d3f
 8007cf8:	08007d3f 	.word	0x08007d3f
 8007cfc:	08007d37 	.word	0x08007d37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d00:	f7fe faea 	bl	80062d8 <HAL_RCC_GetPCLK1Freq>
 8007d04:	61f8      	str	r0, [r7, #28]
        break;
 8007d06:	e020      	b.n	8007d4a <UART_SetConfig+0x342>
 8007d08:	efff69f3 	.word	0xefff69f3
 8007d0c:	40008000 	.word	0x40008000
 8007d10:	40013800 	.word	0x40013800
 8007d14:	40021000 	.word	0x40021000
 8007d18:	40004400 	.word	0x40004400
 8007d1c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d20:	f7fe faf0 	bl	8006304 <HAL_RCC_GetPCLK2Freq>
 8007d24:	61f8      	str	r0, [r7, #28]
        break;
 8007d26:	e010      	b.n	8007d4a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d28:	4b4d      	ldr	r3, [pc, #308]	; (8007e60 <UART_SetConfig+0x458>)
 8007d2a:	61fb      	str	r3, [r7, #28]
        break;
 8007d2c:	e00d      	b.n	8007d4a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d2e:	f7fe fa3b 	bl	80061a8 <HAL_RCC_GetSysClockFreq>
 8007d32:	61f8      	str	r0, [r7, #28]
        break;
 8007d34:	e009      	b.n	8007d4a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d3a:	61fb      	str	r3, [r7, #28]
        break;
 8007d3c:	e005      	b.n	8007d4a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007d48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d079      	beq.n	8007e44 <UART_SetConfig+0x43c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	005a      	lsls	r2, r3, #1
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	085b      	lsrs	r3, r3, #1
 8007d5a:	441a      	add	r2, r3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	2b0f      	cmp	r3, #15
 8007d6c:	d916      	bls.n	8007d9c <UART_SetConfig+0x394>
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d74:	d212      	bcs.n	8007d9c <UART_SetConfig+0x394>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	f023 030f 	bic.w	r3, r3, #15
 8007d7e:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	085b      	lsrs	r3, r3, #1
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	f003 0307 	and.w	r3, r3, #7
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	8afb      	ldrh	r3, [r7, #22]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	8afa      	ldrh	r2, [r7, #22]
 8007d98:	60da      	str	r2, [r3, #12]
 8007d9a:	e053      	b.n	8007e44 <UART_SetConfig+0x43c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007da2:	e04f      	b.n	8007e44 <UART_SetConfig+0x43c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007da4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007da8:	2b08      	cmp	r3, #8
 8007daa:	d828      	bhi.n	8007dfe <UART_SetConfig+0x3f6>
 8007dac:	a201      	add	r2, pc, #4	; (adr r2, 8007db4 <UART_SetConfig+0x3ac>)
 8007dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db2:	bf00      	nop
 8007db4:	08007dd9 	.word	0x08007dd9
 8007db8:	08007de1 	.word	0x08007de1
 8007dbc:	08007de9 	.word	0x08007de9
 8007dc0:	08007dff 	.word	0x08007dff
 8007dc4:	08007def 	.word	0x08007def
 8007dc8:	08007dff 	.word	0x08007dff
 8007dcc:	08007dff 	.word	0x08007dff
 8007dd0:	08007dff 	.word	0x08007dff
 8007dd4:	08007df7 	.word	0x08007df7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dd8:	f7fe fa7e 	bl	80062d8 <HAL_RCC_GetPCLK1Freq>
 8007ddc:	61f8      	str	r0, [r7, #28]
        break;
 8007dde:	e014      	b.n	8007e0a <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007de0:	f7fe fa90 	bl	8006304 <HAL_RCC_GetPCLK2Freq>
 8007de4:	61f8      	str	r0, [r7, #28]
        break;
 8007de6:	e010      	b.n	8007e0a <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007de8:	4b1d      	ldr	r3, [pc, #116]	; (8007e60 <UART_SetConfig+0x458>)
 8007dea:	61fb      	str	r3, [r7, #28]
        break;
 8007dec:	e00d      	b.n	8007e0a <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dee:	f7fe f9db 	bl	80061a8 <HAL_RCC_GetSysClockFreq>
 8007df2:	61f8      	str	r0, [r7, #28]
        break;
 8007df4:	e009      	b.n	8007e0a <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dfa:	61fb      	str	r3, [r7, #28]
        break;
 8007dfc:	e005      	b.n	8007e0a <UART_SetConfig+0x402>
      default:
        pclk = 0U;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007e08:	bf00      	nop
    }

    if (pclk != 0U)
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d019      	beq.n	8007e44 <UART_SetConfig+0x43c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	085a      	lsrs	r2, r3, #1
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	441a      	add	r2, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	2b0f      	cmp	r3, #15
 8007e2a:	d908      	bls.n	8007e3e <UART_SetConfig+0x436>
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e32:	d204      	bcs.n	8007e3e <UART_SetConfig+0x436>
      {
        huart->Instance->BRR = usartdiv;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	69ba      	ldr	r2, [r7, #24]
 8007e3a:	60da      	str	r2, [r3, #12]
 8007e3c:	e002      	b.n	8007e44 <UART_SetConfig+0x43c>
      }
      else
      {
        ret = HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007e50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3728      	adds	r7, #40	; 0x28
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e5e:	bf00      	nop
 8007e60:	00f42400 	.word	0x00f42400

08007e64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00a      	beq.n	8007e8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e92:	f003 0302 	and.w	r3, r3, #2
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00a      	beq.n	8007eb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	430a      	orrs	r2, r1
 8007eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb4:	f003 0304 	and.w	r3, r3, #4
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00a      	beq.n	8007ed2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed6:	f003 0308 	and.w	r3, r3, #8
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00a      	beq.n	8007ef4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef8:	f003 0310 	and.w	r3, r3, #16
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00a      	beq.n	8007f16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1a:	f003 0320 	and.w	r3, r3, #32
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00a      	beq.n	8007f38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	430a      	orrs	r2, r1
 8007f36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d01a      	beq.n	8007f7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	430a      	orrs	r2, r1
 8007f58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f62:	d10a      	bne.n	8007f7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	430a      	orrs	r2, r1
 8007f78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00a      	beq.n	8007f9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	605a      	str	r2, [r3, #4]
  }
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af02      	add	r7, sp, #8
 8007fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fb8:	f7fb f8b0 	bl	800311c <HAL_GetTick>
 8007fbc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0308 	and.w	r3, r3, #8
 8007fc8:	2b08      	cmp	r3, #8
 8007fca:	d10e      	bne.n	8007fea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f82d 	bl	800803a <UART_WaitOnFlagUntilTimeout>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d001      	beq.n	8007fea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e023      	b.n	8008032 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0304 	and.w	r3, r3, #4
 8007ff4:	2b04      	cmp	r3, #4
 8007ff6:	d10e      	bne.n	8008016 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ff8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2200      	movs	r2, #0
 8008002:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f817 	bl	800803a <UART_WaitOnFlagUntilTimeout>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e00d      	b.n	8008032 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2220      	movs	r2, #32
 800801a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2220      	movs	r2, #32
 8008020:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b084      	sub	sp, #16
 800803e:	af00      	add	r7, sp, #0
 8008040:	60f8      	str	r0, [r7, #12]
 8008042:	60b9      	str	r1, [r7, #8]
 8008044:	603b      	str	r3, [r7, #0]
 8008046:	4613      	mov	r3, r2
 8008048:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800804a:	e05e      	b.n	800810a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008052:	d05a      	beq.n	800810a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008054:	f7fb f862 	bl	800311c <HAL_GetTick>
 8008058:	4602      	mov	r2, r0
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	69ba      	ldr	r2, [r7, #24]
 8008060:	429a      	cmp	r2, r3
 8008062:	d302      	bcc.n	800806a <UART_WaitOnFlagUntilTimeout+0x30>
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d11b      	bne.n	80080a2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008078:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	689a      	ldr	r2, [r3, #8]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f022 0201 	bic.w	r2, r2, #1
 8008088:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2220      	movs	r2, #32
 800808e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2220      	movs	r2, #32
 8008094:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	e043      	b.n	800812a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0304 	and.w	r3, r3, #4
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d02c      	beq.n	800810a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	69db      	ldr	r3, [r3, #28]
 80080b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080be:	d124      	bne.n	800810a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080c8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80080d8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	689a      	ldr	r2, [r3, #8]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f022 0201 	bic.w	r2, r2, #1
 80080e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2220      	movs	r2, #32
 80080ee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2220      	movs	r2, #32
 80080f4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2220      	movs	r2, #32
 80080fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e00f      	b.n	800812a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	69da      	ldr	r2, [r3, #28]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	4013      	ands	r3, r2
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	429a      	cmp	r2, r3
 8008118:	bf0c      	ite	eq
 800811a:	2301      	moveq	r3, #1
 800811c:	2300      	movne	r3, #0
 800811e:	b2db      	uxtb	r3, r3
 8008120:	461a      	mov	r2, r3
 8008122:	79fb      	ldrb	r3, [r7, #7]
 8008124:	429a      	cmp	r2, r3
 8008126:	d091      	beq.n	800804c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
	...

08008134 <__errno>:
 8008134:	4b01      	ldr	r3, [pc, #4]	; (800813c <__errno+0x8>)
 8008136:	6818      	ldr	r0, [r3, #0]
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	2000000c 	.word	0x2000000c

08008140 <__libc_init_array>:
 8008140:	b570      	push	{r4, r5, r6, lr}
 8008142:	4d0d      	ldr	r5, [pc, #52]	; (8008178 <__libc_init_array+0x38>)
 8008144:	4c0d      	ldr	r4, [pc, #52]	; (800817c <__libc_init_array+0x3c>)
 8008146:	1b64      	subs	r4, r4, r5
 8008148:	10a4      	asrs	r4, r4, #2
 800814a:	2600      	movs	r6, #0
 800814c:	42a6      	cmp	r6, r4
 800814e:	d109      	bne.n	8008164 <__libc_init_array+0x24>
 8008150:	4d0b      	ldr	r5, [pc, #44]	; (8008180 <__libc_init_array+0x40>)
 8008152:	4c0c      	ldr	r4, [pc, #48]	; (8008184 <__libc_init_array+0x44>)
 8008154:	f002 fd50 	bl	800abf8 <_init>
 8008158:	1b64      	subs	r4, r4, r5
 800815a:	10a4      	asrs	r4, r4, #2
 800815c:	2600      	movs	r6, #0
 800815e:	42a6      	cmp	r6, r4
 8008160:	d105      	bne.n	800816e <__libc_init_array+0x2e>
 8008162:	bd70      	pop	{r4, r5, r6, pc}
 8008164:	f855 3b04 	ldr.w	r3, [r5], #4
 8008168:	4798      	blx	r3
 800816a:	3601      	adds	r6, #1
 800816c:	e7ee      	b.n	800814c <__libc_init_array+0xc>
 800816e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008172:	4798      	blx	r3
 8008174:	3601      	adds	r6, #1
 8008176:	e7f2      	b.n	800815e <__libc_init_array+0x1e>
 8008178:	0800b08c 	.word	0x0800b08c
 800817c:	0800b08c 	.word	0x0800b08c
 8008180:	0800b08c 	.word	0x0800b08c
 8008184:	0800b090 	.word	0x0800b090

08008188 <memset>:
 8008188:	4402      	add	r2, r0
 800818a:	4603      	mov	r3, r0
 800818c:	4293      	cmp	r3, r2
 800818e:	d100      	bne.n	8008192 <memset+0xa>
 8008190:	4770      	bx	lr
 8008192:	f803 1b01 	strb.w	r1, [r3], #1
 8008196:	e7f9      	b.n	800818c <memset+0x4>

08008198 <__cvt>:
 8008198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800819c:	ec55 4b10 	vmov	r4, r5, d0
 80081a0:	2d00      	cmp	r5, #0
 80081a2:	460e      	mov	r6, r1
 80081a4:	4619      	mov	r1, r3
 80081a6:	462b      	mov	r3, r5
 80081a8:	bfbb      	ittet	lt
 80081aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80081ae:	461d      	movlt	r5, r3
 80081b0:	2300      	movge	r3, #0
 80081b2:	232d      	movlt	r3, #45	; 0x2d
 80081b4:	700b      	strb	r3, [r1, #0]
 80081b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80081bc:	4691      	mov	r9, r2
 80081be:	f023 0820 	bic.w	r8, r3, #32
 80081c2:	bfbc      	itt	lt
 80081c4:	4622      	movlt	r2, r4
 80081c6:	4614      	movlt	r4, r2
 80081c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80081cc:	d005      	beq.n	80081da <__cvt+0x42>
 80081ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80081d2:	d100      	bne.n	80081d6 <__cvt+0x3e>
 80081d4:	3601      	adds	r6, #1
 80081d6:	2102      	movs	r1, #2
 80081d8:	e000      	b.n	80081dc <__cvt+0x44>
 80081da:	2103      	movs	r1, #3
 80081dc:	ab03      	add	r3, sp, #12
 80081de:	9301      	str	r3, [sp, #4]
 80081e0:	ab02      	add	r3, sp, #8
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	ec45 4b10 	vmov	d0, r4, r5
 80081e8:	4653      	mov	r3, sl
 80081ea:	4632      	mov	r2, r6
 80081ec:	f000 fce4 	bl	8008bb8 <_dtoa_r>
 80081f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80081f4:	4607      	mov	r7, r0
 80081f6:	d102      	bne.n	80081fe <__cvt+0x66>
 80081f8:	f019 0f01 	tst.w	r9, #1
 80081fc:	d022      	beq.n	8008244 <__cvt+0xac>
 80081fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008202:	eb07 0906 	add.w	r9, r7, r6
 8008206:	d110      	bne.n	800822a <__cvt+0x92>
 8008208:	783b      	ldrb	r3, [r7, #0]
 800820a:	2b30      	cmp	r3, #48	; 0x30
 800820c:	d10a      	bne.n	8008224 <__cvt+0x8c>
 800820e:	2200      	movs	r2, #0
 8008210:	2300      	movs	r3, #0
 8008212:	4620      	mov	r0, r4
 8008214:	4629      	mov	r1, r5
 8008216:	f7f8 fc57 	bl	8000ac8 <__aeabi_dcmpeq>
 800821a:	b918      	cbnz	r0, 8008224 <__cvt+0x8c>
 800821c:	f1c6 0601 	rsb	r6, r6, #1
 8008220:	f8ca 6000 	str.w	r6, [sl]
 8008224:	f8da 3000 	ldr.w	r3, [sl]
 8008228:	4499      	add	r9, r3
 800822a:	2200      	movs	r2, #0
 800822c:	2300      	movs	r3, #0
 800822e:	4620      	mov	r0, r4
 8008230:	4629      	mov	r1, r5
 8008232:	f7f8 fc49 	bl	8000ac8 <__aeabi_dcmpeq>
 8008236:	b108      	cbz	r0, 800823c <__cvt+0xa4>
 8008238:	f8cd 900c 	str.w	r9, [sp, #12]
 800823c:	2230      	movs	r2, #48	; 0x30
 800823e:	9b03      	ldr	r3, [sp, #12]
 8008240:	454b      	cmp	r3, r9
 8008242:	d307      	bcc.n	8008254 <__cvt+0xbc>
 8008244:	9b03      	ldr	r3, [sp, #12]
 8008246:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008248:	1bdb      	subs	r3, r3, r7
 800824a:	4638      	mov	r0, r7
 800824c:	6013      	str	r3, [r2, #0]
 800824e:	b004      	add	sp, #16
 8008250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008254:	1c59      	adds	r1, r3, #1
 8008256:	9103      	str	r1, [sp, #12]
 8008258:	701a      	strb	r2, [r3, #0]
 800825a:	e7f0      	b.n	800823e <__cvt+0xa6>

0800825c <__exponent>:
 800825c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800825e:	4603      	mov	r3, r0
 8008260:	2900      	cmp	r1, #0
 8008262:	bfb8      	it	lt
 8008264:	4249      	neglt	r1, r1
 8008266:	f803 2b02 	strb.w	r2, [r3], #2
 800826a:	bfb4      	ite	lt
 800826c:	222d      	movlt	r2, #45	; 0x2d
 800826e:	222b      	movge	r2, #43	; 0x2b
 8008270:	2909      	cmp	r1, #9
 8008272:	7042      	strb	r2, [r0, #1]
 8008274:	dd2a      	ble.n	80082cc <__exponent+0x70>
 8008276:	f10d 0407 	add.w	r4, sp, #7
 800827a:	46a4      	mov	ip, r4
 800827c:	270a      	movs	r7, #10
 800827e:	46a6      	mov	lr, r4
 8008280:	460a      	mov	r2, r1
 8008282:	fb91 f6f7 	sdiv	r6, r1, r7
 8008286:	fb07 1516 	mls	r5, r7, r6, r1
 800828a:	3530      	adds	r5, #48	; 0x30
 800828c:	2a63      	cmp	r2, #99	; 0x63
 800828e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008292:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008296:	4631      	mov	r1, r6
 8008298:	dcf1      	bgt.n	800827e <__exponent+0x22>
 800829a:	3130      	adds	r1, #48	; 0x30
 800829c:	f1ae 0502 	sub.w	r5, lr, #2
 80082a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80082a4:	1c44      	adds	r4, r0, #1
 80082a6:	4629      	mov	r1, r5
 80082a8:	4561      	cmp	r1, ip
 80082aa:	d30a      	bcc.n	80082c2 <__exponent+0x66>
 80082ac:	f10d 0209 	add.w	r2, sp, #9
 80082b0:	eba2 020e 	sub.w	r2, r2, lr
 80082b4:	4565      	cmp	r5, ip
 80082b6:	bf88      	it	hi
 80082b8:	2200      	movhi	r2, #0
 80082ba:	4413      	add	r3, r2
 80082bc:	1a18      	subs	r0, r3, r0
 80082be:	b003      	add	sp, #12
 80082c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80082ca:	e7ed      	b.n	80082a8 <__exponent+0x4c>
 80082cc:	2330      	movs	r3, #48	; 0x30
 80082ce:	3130      	adds	r1, #48	; 0x30
 80082d0:	7083      	strb	r3, [r0, #2]
 80082d2:	70c1      	strb	r1, [r0, #3]
 80082d4:	1d03      	adds	r3, r0, #4
 80082d6:	e7f1      	b.n	80082bc <__exponent+0x60>

080082d8 <_printf_float>:
 80082d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082dc:	ed2d 8b02 	vpush	{d8}
 80082e0:	b08d      	sub	sp, #52	; 0x34
 80082e2:	460c      	mov	r4, r1
 80082e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80082e8:	4616      	mov	r6, r2
 80082ea:	461f      	mov	r7, r3
 80082ec:	4605      	mov	r5, r0
 80082ee:	f001 fb47 	bl	8009980 <_localeconv_r>
 80082f2:	f8d0 a000 	ldr.w	sl, [r0]
 80082f6:	4650      	mov	r0, sl
 80082f8:	f7f7 ff6a 	bl	80001d0 <strlen>
 80082fc:	2300      	movs	r3, #0
 80082fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008300:	6823      	ldr	r3, [r4, #0]
 8008302:	9305      	str	r3, [sp, #20]
 8008304:	f8d8 3000 	ldr.w	r3, [r8]
 8008308:	f894 b018 	ldrb.w	fp, [r4, #24]
 800830c:	3307      	adds	r3, #7
 800830e:	f023 0307 	bic.w	r3, r3, #7
 8008312:	f103 0208 	add.w	r2, r3, #8
 8008316:	f8c8 2000 	str.w	r2, [r8]
 800831a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008322:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008326:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800832a:	9307      	str	r3, [sp, #28]
 800832c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008330:	ee08 0a10 	vmov	s16, r0
 8008334:	4b9f      	ldr	r3, [pc, #636]	; (80085b4 <_printf_float+0x2dc>)
 8008336:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800833a:	f04f 32ff 	mov.w	r2, #4294967295
 800833e:	f7f8 fbf5 	bl	8000b2c <__aeabi_dcmpun>
 8008342:	bb88      	cbnz	r0, 80083a8 <_printf_float+0xd0>
 8008344:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008348:	4b9a      	ldr	r3, [pc, #616]	; (80085b4 <_printf_float+0x2dc>)
 800834a:	f04f 32ff 	mov.w	r2, #4294967295
 800834e:	f7f8 fbcf 	bl	8000af0 <__aeabi_dcmple>
 8008352:	bb48      	cbnz	r0, 80083a8 <_printf_float+0xd0>
 8008354:	2200      	movs	r2, #0
 8008356:	2300      	movs	r3, #0
 8008358:	4640      	mov	r0, r8
 800835a:	4649      	mov	r1, r9
 800835c:	f7f8 fbbe 	bl	8000adc <__aeabi_dcmplt>
 8008360:	b110      	cbz	r0, 8008368 <_printf_float+0x90>
 8008362:	232d      	movs	r3, #45	; 0x2d
 8008364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008368:	4b93      	ldr	r3, [pc, #588]	; (80085b8 <_printf_float+0x2e0>)
 800836a:	4894      	ldr	r0, [pc, #592]	; (80085bc <_printf_float+0x2e4>)
 800836c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008370:	bf94      	ite	ls
 8008372:	4698      	movls	r8, r3
 8008374:	4680      	movhi	r8, r0
 8008376:	2303      	movs	r3, #3
 8008378:	6123      	str	r3, [r4, #16]
 800837a:	9b05      	ldr	r3, [sp, #20]
 800837c:	f023 0204 	bic.w	r2, r3, #4
 8008380:	6022      	str	r2, [r4, #0]
 8008382:	f04f 0900 	mov.w	r9, #0
 8008386:	9700      	str	r7, [sp, #0]
 8008388:	4633      	mov	r3, r6
 800838a:	aa0b      	add	r2, sp, #44	; 0x2c
 800838c:	4621      	mov	r1, r4
 800838e:	4628      	mov	r0, r5
 8008390:	f000 f9d8 	bl	8008744 <_printf_common>
 8008394:	3001      	adds	r0, #1
 8008396:	f040 8090 	bne.w	80084ba <_printf_float+0x1e2>
 800839a:	f04f 30ff 	mov.w	r0, #4294967295
 800839e:	b00d      	add	sp, #52	; 0x34
 80083a0:	ecbd 8b02 	vpop	{d8}
 80083a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a8:	4642      	mov	r2, r8
 80083aa:	464b      	mov	r3, r9
 80083ac:	4640      	mov	r0, r8
 80083ae:	4649      	mov	r1, r9
 80083b0:	f7f8 fbbc 	bl	8000b2c <__aeabi_dcmpun>
 80083b4:	b140      	cbz	r0, 80083c8 <_printf_float+0xf0>
 80083b6:	464b      	mov	r3, r9
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	bfbc      	itt	lt
 80083bc:	232d      	movlt	r3, #45	; 0x2d
 80083be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80083c2:	487f      	ldr	r0, [pc, #508]	; (80085c0 <_printf_float+0x2e8>)
 80083c4:	4b7f      	ldr	r3, [pc, #508]	; (80085c4 <_printf_float+0x2ec>)
 80083c6:	e7d1      	b.n	800836c <_printf_float+0x94>
 80083c8:	6863      	ldr	r3, [r4, #4]
 80083ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80083ce:	9206      	str	r2, [sp, #24]
 80083d0:	1c5a      	adds	r2, r3, #1
 80083d2:	d13f      	bne.n	8008454 <_printf_float+0x17c>
 80083d4:	2306      	movs	r3, #6
 80083d6:	6063      	str	r3, [r4, #4]
 80083d8:	9b05      	ldr	r3, [sp, #20]
 80083da:	6861      	ldr	r1, [r4, #4]
 80083dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80083e0:	2300      	movs	r3, #0
 80083e2:	9303      	str	r3, [sp, #12]
 80083e4:	ab0a      	add	r3, sp, #40	; 0x28
 80083e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80083ea:	ab09      	add	r3, sp, #36	; 0x24
 80083ec:	ec49 8b10 	vmov	d0, r8, r9
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	6022      	str	r2, [r4, #0]
 80083f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80083f8:	4628      	mov	r0, r5
 80083fa:	f7ff fecd 	bl	8008198 <__cvt>
 80083fe:	9b06      	ldr	r3, [sp, #24]
 8008400:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008402:	2b47      	cmp	r3, #71	; 0x47
 8008404:	4680      	mov	r8, r0
 8008406:	d108      	bne.n	800841a <_printf_float+0x142>
 8008408:	1cc8      	adds	r0, r1, #3
 800840a:	db02      	blt.n	8008412 <_printf_float+0x13a>
 800840c:	6863      	ldr	r3, [r4, #4]
 800840e:	4299      	cmp	r1, r3
 8008410:	dd41      	ble.n	8008496 <_printf_float+0x1be>
 8008412:	f1ab 0b02 	sub.w	fp, fp, #2
 8008416:	fa5f fb8b 	uxtb.w	fp, fp
 800841a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800841e:	d820      	bhi.n	8008462 <_printf_float+0x18a>
 8008420:	3901      	subs	r1, #1
 8008422:	465a      	mov	r2, fp
 8008424:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008428:	9109      	str	r1, [sp, #36]	; 0x24
 800842a:	f7ff ff17 	bl	800825c <__exponent>
 800842e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008430:	1813      	adds	r3, r2, r0
 8008432:	2a01      	cmp	r2, #1
 8008434:	4681      	mov	r9, r0
 8008436:	6123      	str	r3, [r4, #16]
 8008438:	dc02      	bgt.n	8008440 <_printf_float+0x168>
 800843a:	6822      	ldr	r2, [r4, #0]
 800843c:	07d2      	lsls	r2, r2, #31
 800843e:	d501      	bpl.n	8008444 <_printf_float+0x16c>
 8008440:	3301      	adds	r3, #1
 8008442:	6123      	str	r3, [r4, #16]
 8008444:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008448:	2b00      	cmp	r3, #0
 800844a:	d09c      	beq.n	8008386 <_printf_float+0xae>
 800844c:	232d      	movs	r3, #45	; 0x2d
 800844e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008452:	e798      	b.n	8008386 <_printf_float+0xae>
 8008454:	9a06      	ldr	r2, [sp, #24]
 8008456:	2a47      	cmp	r2, #71	; 0x47
 8008458:	d1be      	bne.n	80083d8 <_printf_float+0x100>
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1bc      	bne.n	80083d8 <_printf_float+0x100>
 800845e:	2301      	movs	r3, #1
 8008460:	e7b9      	b.n	80083d6 <_printf_float+0xfe>
 8008462:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008466:	d118      	bne.n	800849a <_printf_float+0x1c2>
 8008468:	2900      	cmp	r1, #0
 800846a:	6863      	ldr	r3, [r4, #4]
 800846c:	dd0b      	ble.n	8008486 <_printf_float+0x1ae>
 800846e:	6121      	str	r1, [r4, #16]
 8008470:	b913      	cbnz	r3, 8008478 <_printf_float+0x1a0>
 8008472:	6822      	ldr	r2, [r4, #0]
 8008474:	07d0      	lsls	r0, r2, #31
 8008476:	d502      	bpl.n	800847e <_printf_float+0x1a6>
 8008478:	3301      	adds	r3, #1
 800847a:	440b      	add	r3, r1
 800847c:	6123      	str	r3, [r4, #16]
 800847e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008480:	f04f 0900 	mov.w	r9, #0
 8008484:	e7de      	b.n	8008444 <_printf_float+0x16c>
 8008486:	b913      	cbnz	r3, 800848e <_printf_float+0x1b6>
 8008488:	6822      	ldr	r2, [r4, #0]
 800848a:	07d2      	lsls	r2, r2, #31
 800848c:	d501      	bpl.n	8008492 <_printf_float+0x1ba>
 800848e:	3302      	adds	r3, #2
 8008490:	e7f4      	b.n	800847c <_printf_float+0x1a4>
 8008492:	2301      	movs	r3, #1
 8008494:	e7f2      	b.n	800847c <_printf_float+0x1a4>
 8008496:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800849a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800849c:	4299      	cmp	r1, r3
 800849e:	db05      	blt.n	80084ac <_printf_float+0x1d4>
 80084a0:	6823      	ldr	r3, [r4, #0]
 80084a2:	6121      	str	r1, [r4, #16]
 80084a4:	07d8      	lsls	r0, r3, #31
 80084a6:	d5ea      	bpl.n	800847e <_printf_float+0x1a6>
 80084a8:	1c4b      	adds	r3, r1, #1
 80084aa:	e7e7      	b.n	800847c <_printf_float+0x1a4>
 80084ac:	2900      	cmp	r1, #0
 80084ae:	bfd4      	ite	le
 80084b0:	f1c1 0202 	rsble	r2, r1, #2
 80084b4:	2201      	movgt	r2, #1
 80084b6:	4413      	add	r3, r2
 80084b8:	e7e0      	b.n	800847c <_printf_float+0x1a4>
 80084ba:	6823      	ldr	r3, [r4, #0]
 80084bc:	055a      	lsls	r2, r3, #21
 80084be:	d407      	bmi.n	80084d0 <_printf_float+0x1f8>
 80084c0:	6923      	ldr	r3, [r4, #16]
 80084c2:	4642      	mov	r2, r8
 80084c4:	4631      	mov	r1, r6
 80084c6:	4628      	mov	r0, r5
 80084c8:	47b8      	blx	r7
 80084ca:	3001      	adds	r0, #1
 80084cc:	d12c      	bne.n	8008528 <_printf_float+0x250>
 80084ce:	e764      	b.n	800839a <_printf_float+0xc2>
 80084d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80084d4:	f240 80e0 	bls.w	8008698 <_printf_float+0x3c0>
 80084d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084dc:	2200      	movs	r2, #0
 80084de:	2300      	movs	r3, #0
 80084e0:	f7f8 faf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d034      	beq.n	8008552 <_printf_float+0x27a>
 80084e8:	4a37      	ldr	r2, [pc, #220]	; (80085c8 <_printf_float+0x2f0>)
 80084ea:	2301      	movs	r3, #1
 80084ec:	4631      	mov	r1, r6
 80084ee:	4628      	mov	r0, r5
 80084f0:	47b8      	blx	r7
 80084f2:	3001      	adds	r0, #1
 80084f4:	f43f af51 	beq.w	800839a <_printf_float+0xc2>
 80084f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084fc:	429a      	cmp	r2, r3
 80084fe:	db02      	blt.n	8008506 <_printf_float+0x22e>
 8008500:	6823      	ldr	r3, [r4, #0]
 8008502:	07d8      	lsls	r0, r3, #31
 8008504:	d510      	bpl.n	8008528 <_printf_float+0x250>
 8008506:	ee18 3a10 	vmov	r3, s16
 800850a:	4652      	mov	r2, sl
 800850c:	4631      	mov	r1, r6
 800850e:	4628      	mov	r0, r5
 8008510:	47b8      	blx	r7
 8008512:	3001      	adds	r0, #1
 8008514:	f43f af41 	beq.w	800839a <_printf_float+0xc2>
 8008518:	f04f 0800 	mov.w	r8, #0
 800851c:	f104 091a 	add.w	r9, r4, #26
 8008520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008522:	3b01      	subs	r3, #1
 8008524:	4543      	cmp	r3, r8
 8008526:	dc09      	bgt.n	800853c <_printf_float+0x264>
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	079b      	lsls	r3, r3, #30
 800852c:	f100 8105 	bmi.w	800873a <_printf_float+0x462>
 8008530:	68e0      	ldr	r0, [r4, #12]
 8008532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008534:	4298      	cmp	r0, r3
 8008536:	bfb8      	it	lt
 8008538:	4618      	movlt	r0, r3
 800853a:	e730      	b.n	800839e <_printf_float+0xc6>
 800853c:	2301      	movs	r3, #1
 800853e:	464a      	mov	r2, r9
 8008540:	4631      	mov	r1, r6
 8008542:	4628      	mov	r0, r5
 8008544:	47b8      	blx	r7
 8008546:	3001      	adds	r0, #1
 8008548:	f43f af27 	beq.w	800839a <_printf_float+0xc2>
 800854c:	f108 0801 	add.w	r8, r8, #1
 8008550:	e7e6      	b.n	8008520 <_printf_float+0x248>
 8008552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008554:	2b00      	cmp	r3, #0
 8008556:	dc39      	bgt.n	80085cc <_printf_float+0x2f4>
 8008558:	4a1b      	ldr	r2, [pc, #108]	; (80085c8 <_printf_float+0x2f0>)
 800855a:	2301      	movs	r3, #1
 800855c:	4631      	mov	r1, r6
 800855e:	4628      	mov	r0, r5
 8008560:	47b8      	blx	r7
 8008562:	3001      	adds	r0, #1
 8008564:	f43f af19 	beq.w	800839a <_printf_float+0xc2>
 8008568:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800856c:	4313      	orrs	r3, r2
 800856e:	d102      	bne.n	8008576 <_printf_float+0x29e>
 8008570:	6823      	ldr	r3, [r4, #0]
 8008572:	07d9      	lsls	r1, r3, #31
 8008574:	d5d8      	bpl.n	8008528 <_printf_float+0x250>
 8008576:	ee18 3a10 	vmov	r3, s16
 800857a:	4652      	mov	r2, sl
 800857c:	4631      	mov	r1, r6
 800857e:	4628      	mov	r0, r5
 8008580:	47b8      	blx	r7
 8008582:	3001      	adds	r0, #1
 8008584:	f43f af09 	beq.w	800839a <_printf_float+0xc2>
 8008588:	f04f 0900 	mov.w	r9, #0
 800858c:	f104 0a1a 	add.w	sl, r4, #26
 8008590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008592:	425b      	negs	r3, r3
 8008594:	454b      	cmp	r3, r9
 8008596:	dc01      	bgt.n	800859c <_printf_float+0x2c4>
 8008598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800859a:	e792      	b.n	80084c2 <_printf_float+0x1ea>
 800859c:	2301      	movs	r3, #1
 800859e:	4652      	mov	r2, sl
 80085a0:	4631      	mov	r1, r6
 80085a2:	4628      	mov	r0, r5
 80085a4:	47b8      	blx	r7
 80085a6:	3001      	adds	r0, #1
 80085a8:	f43f aef7 	beq.w	800839a <_printf_float+0xc2>
 80085ac:	f109 0901 	add.w	r9, r9, #1
 80085b0:	e7ee      	b.n	8008590 <_printf_float+0x2b8>
 80085b2:	bf00      	nop
 80085b4:	7fefffff 	.word	0x7fefffff
 80085b8:	0800acac 	.word	0x0800acac
 80085bc:	0800acb0 	.word	0x0800acb0
 80085c0:	0800acb8 	.word	0x0800acb8
 80085c4:	0800acb4 	.word	0x0800acb4
 80085c8:	0800acbc 	.word	0x0800acbc
 80085cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085d0:	429a      	cmp	r2, r3
 80085d2:	bfa8      	it	ge
 80085d4:	461a      	movge	r2, r3
 80085d6:	2a00      	cmp	r2, #0
 80085d8:	4691      	mov	r9, r2
 80085da:	dc37      	bgt.n	800864c <_printf_float+0x374>
 80085dc:	f04f 0b00 	mov.w	fp, #0
 80085e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085e4:	f104 021a 	add.w	r2, r4, #26
 80085e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085ea:	9305      	str	r3, [sp, #20]
 80085ec:	eba3 0309 	sub.w	r3, r3, r9
 80085f0:	455b      	cmp	r3, fp
 80085f2:	dc33      	bgt.n	800865c <_printf_float+0x384>
 80085f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085f8:	429a      	cmp	r2, r3
 80085fa:	db3b      	blt.n	8008674 <_printf_float+0x39c>
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	07da      	lsls	r2, r3, #31
 8008600:	d438      	bmi.n	8008674 <_printf_float+0x39c>
 8008602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008604:	9a05      	ldr	r2, [sp, #20]
 8008606:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008608:	1a9a      	subs	r2, r3, r2
 800860a:	eba3 0901 	sub.w	r9, r3, r1
 800860e:	4591      	cmp	r9, r2
 8008610:	bfa8      	it	ge
 8008612:	4691      	movge	r9, r2
 8008614:	f1b9 0f00 	cmp.w	r9, #0
 8008618:	dc35      	bgt.n	8008686 <_printf_float+0x3ae>
 800861a:	f04f 0800 	mov.w	r8, #0
 800861e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008622:	f104 0a1a 	add.w	sl, r4, #26
 8008626:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800862a:	1a9b      	subs	r3, r3, r2
 800862c:	eba3 0309 	sub.w	r3, r3, r9
 8008630:	4543      	cmp	r3, r8
 8008632:	f77f af79 	ble.w	8008528 <_printf_float+0x250>
 8008636:	2301      	movs	r3, #1
 8008638:	4652      	mov	r2, sl
 800863a:	4631      	mov	r1, r6
 800863c:	4628      	mov	r0, r5
 800863e:	47b8      	blx	r7
 8008640:	3001      	adds	r0, #1
 8008642:	f43f aeaa 	beq.w	800839a <_printf_float+0xc2>
 8008646:	f108 0801 	add.w	r8, r8, #1
 800864a:	e7ec      	b.n	8008626 <_printf_float+0x34e>
 800864c:	4613      	mov	r3, r2
 800864e:	4631      	mov	r1, r6
 8008650:	4642      	mov	r2, r8
 8008652:	4628      	mov	r0, r5
 8008654:	47b8      	blx	r7
 8008656:	3001      	adds	r0, #1
 8008658:	d1c0      	bne.n	80085dc <_printf_float+0x304>
 800865a:	e69e      	b.n	800839a <_printf_float+0xc2>
 800865c:	2301      	movs	r3, #1
 800865e:	4631      	mov	r1, r6
 8008660:	4628      	mov	r0, r5
 8008662:	9205      	str	r2, [sp, #20]
 8008664:	47b8      	blx	r7
 8008666:	3001      	adds	r0, #1
 8008668:	f43f ae97 	beq.w	800839a <_printf_float+0xc2>
 800866c:	9a05      	ldr	r2, [sp, #20]
 800866e:	f10b 0b01 	add.w	fp, fp, #1
 8008672:	e7b9      	b.n	80085e8 <_printf_float+0x310>
 8008674:	ee18 3a10 	vmov	r3, s16
 8008678:	4652      	mov	r2, sl
 800867a:	4631      	mov	r1, r6
 800867c:	4628      	mov	r0, r5
 800867e:	47b8      	blx	r7
 8008680:	3001      	adds	r0, #1
 8008682:	d1be      	bne.n	8008602 <_printf_float+0x32a>
 8008684:	e689      	b.n	800839a <_printf_float+0xc2>
 8008686:	9a05      	ldr	r2, [sp, #20]
 8008688:	464b      	mov	r3, r9
 800868a:	4442      	add	r2, r8
 800868c:	4631      	mov	r1, r6
 800868e:	4628      	mov	r0, r5
 8008690:	47b8      	blx	r7
 8008692:	3001      	adds	r0, #1
 8008694:	d1c1      	bne.n	800861a <_printf_float+0x342>
 8008696:	e680      	b.n	800839a <_printf_float+0xc2>
 8008698:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800869a:	2a01      	cmp	r2, #1
 800869c:	dc01      	bgt.n	80086a2 <_printf_float+0x3ca>
 800869e:	07db      	lsls	r3, r3, #31
 80086a0:	d538      	bpl.n	8008714 <_printf_float+0x43c>
 80086a2:	2301      	movs	r3, #1
 80086a4:	4642      	mov	r2, r8
 80086a6:	4631      	mov	r1, r6
 80086a8:	4628      	mov	r0, r5
 80086aa:	47b8      	blx	r7
 80086ac:	3001      	adds	r0, #1
 80086ae:	f43f ae74 	beq.w	800839a <_printf_float+0xc2>
 80086b2:	ee18 3a10 	vmov	r3, s16
 80086b6:	4652      	mov	r2, sl
 80086b8:	4631      	mov	r1, r6
 80086ba:	4628      	mov	r0, r5
 80086bc:	47b8      	blx	r7
 80086be:	3001      	adds	r0, #1
 80086c0:	f43f ae6b 	beq.w	800839a <_printf_float+0xc2>
 80086c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086c8:	2200      	movs	r2, #0
 80086ca:	2300      	movs	r3, #0
 80086cc:	f7f8 f9fc 	bl	8000ac8 <__aeabi_dcmpeq>
 80086d0:	b9d8      	cbnz	r0, 800870a <_printf_float+0x432>
 80086d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086d4:	f108 0201 	add.w	r2, r8, #1
 80086d8:	3b01      	subs	r3, #1
 80086da:	4631      	mov	r1, r6
 80086dc:	4628      	mov	r0, r5
 80086de:	47b8      	blx	r7
 80086e0:	3001      	adds	r0, #1
 80086e2:	d10e      	bne.n	8008702 <_printf_float+0x42a>
 80086e4:	e659      	b.n	800839a <_printf_float+0xc2>
 80086e6:	2301      	movs	r3, #1
 80086e8:	4652      	mov	r2, sl
 80086ea:	4631      	mov	r1, r6
 80086ec:	4628      	mov	r0, r5
 80086ee:	47b8      	blx	r7
 80086f0:	3001      	adds	r0, #1
 80086f2:	f43f ae52 	beq.w	800839a <_printf_float+0xc2>
 80086f6:	f108 0801 	add.w	r8, r8, #1
 80086fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086fc:	3b01      	subs	r3, #1
 80086fe:	4543      	cmp	r3, r8
 8008700:	dcf1      	bgt.n	80086e6 <_printf_float+0x40e>
 8008702:	464b      	mov	r3, r9
 8008704:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008708:	e6dc      	b.n	80084c4 <_printf_float+0x1ec>
 800870a:	f04f 0800 	mov.w	r8, #0
 800870e:	f104 0a1a 	add.w	sl, r4, #26
 8008712:	e7f2      	b.n	80086fa <_printf_float+0x422>
 8008714:	2301      	movs	r3, #1
 8008716:	4642      	mov	r2, r8
 8008718:	e7df      	b.n	80086da <_printf_float+0x402>
 800871a:	2301      	movs	r3, #1
 800871c:	464a      	mov	r2, r9
 800871e:	4631      	mov	r1, r6
 8008720:	4628      	mov	r0, r5
 8008722:	47b8      	blx	r7
 8008724:	3001      	adds	r0, #1
 8008726:	f43f ae38 	beq.w	800839a <_printf_float+0xc2>
 800872a:	f108 0801 	add.w	r8, r8, #1
 800872e:	68e3      	ldr	r3, [r4, #12]
 8008730:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008732:	1a5b      	subs	r3, r3, r1
 8008734:	4543      	cmp	r3, r8
 8008736:	dcf0      	bgt.n	800871a <_printf_float+0x442>
 8008738:	e6fa      	b.n	8008530 <_printf_float+0x258>
 800873a:	f04f 0800 	mov.w	r8, #0
 800873e:	f104 0919 	add.w	r9, r4, #25
 8008742:	e7f4      	b.n	800872e <_printf_float+0x456>

08008744 <_printf_common>:
 8008744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008748:	4616      	mov	r6, r2
 800874a:	4699      	mov	r9, r3
 800874c:	688a      	ldr	r2, [r1, #8]
 800874e:	690b      	ldr	r3, [r1, #16]
 8008750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008754:	4293      	cmp	r3, r2
 8008756:	bfb8      	it	lt
 8008758:	4613      	movlt	r3, r2
 800875a:	6033      	str	r3, [r6, #0]
 800875c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008760:	4607      	mov	r7, r0
 8008762:	460c      	mov	r4, r1
 8008764:	b10a      	cbz	r2, 800876a <_printf_common+0x26>
 8008766:	3301      	adds	r3, #1
 8008768:	6033      	str	r3, [r6, #0]
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	0699      	lsls	r1, r3, #26
 800876e:	bf42      	ittt	mi
 8008770:	6833      	ldrmi	r3, [r6, #0]
 8008772:	3302      	addmi	r3, #2
 8008774:	6033      	strmi	r3, [r6, #0]
 8008776:	6825      	ldr	r5, [r4, #0]
 8008778:	f015 0506 	ands.w	r5, r5, #6
 800877c:	d106      	bne.n	800878c <_printf_common+0x48>
 800877e:	f104 0a19 	add.w	sl, r4, #25
 8008782:	68e3      	ldr	r3, [r4, #12]
 8008784:	6832      	ldr	r2, [r6, #0]
 8008786:	1a9b      	subs	r3, r3, r2
 8008788:	42ab      	cmp	r3, r5
 800878a:	dc26      	bgt.n	80087da <_printf_common+0x96>
 800878c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008790:	1e13      	subs	r3, r2, #0
 8008792:	6822      	ldr	r2, [r4, #0]
 8008794:	bf18      	it	ne
 8008796:	2301      	movne	r3, #1
 8008798:	0692      	lsls	r2, r2, #26
 800879a:	d42b      	bmi.n	80087f4 <_printf_common+0xb0>
 800879c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087a0:	4649      	mov	r1, r9
 80087a2:	4638      	mov	r0, r7
 80087a4:	47c0      	blx	r8
 80087a6:	3001      	adds	r0, #1
 80087a8:	d01e      	beq.n	80087e8 <_printf_common+0xa4>
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	68e5      	ldr	r5, [r4, #12]
 80087ae:	6832      	ldr	r2, [r6, #0]
 80087b0:	f003 0306 	and.w	r3, r3, #6
 80087b4:	2b04      	cmp	r3, #4
 80087b6:	bf08      	it	eq
 80087b8:	1aad      	subeq	r5, r5, r2
 80087ba:	68a3      	ldr	r3, [r4, #8]
 80087bc:	6922      	ldr	r2, [r4, #16]
 80087be:	bf0c      	ite	eq
 80087c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087c4:	2500      	movne	r5, #0
 80087c6:	4293      	cmp	r3, r2
 80087c8:	bfc4      	itt	gt
 80087ca:	1a9b      	subgt	r3, r3, r2
 80087cc:	18ed      	addgt	r5, r5, r3
 80087ce:	2600      	movs	r6, #0
 80087d0:	341a      	adds	r4, #26
 80087d2:	42b5      	cmp	r5, r6
 80087d4:	d11a      	bne.n	800880c <_printf_common+0xc8>
 80087d6:	2000      	movs	r0, #0
 80087d8:	e008      	b.n	80087ec <_printf_common+0xa8>
 80087da:	2301      	movs	r3, #1
 80087dc:	4652      	mov	r2, sl
 80087de:	4649      	mov	r1, r9
 80087e0:	4638      	mov	r0, r7
 80087e2:	47c0      	blx	r8
 80087e4:	3001      	adds	r0, #1
 80087e6:	d103      	bne.n	80087f0 <_printf_common+0xac>
 80087e8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f0:	3501      	adds	r5, #1
 80087f2:	e7c6      	b.n	8008782 <_printf_common+0x3e>
 80087f4:	18e1      	adds	r1, r4, r3
 80087f6:	1c5a      	adds	r2, r3, #1
 80087f8:	2030      	movs	r0, #48	; 0x30
 80087fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087fe:	4422      	add	r2, r4
 8008800:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008804:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008808:	3302      	adds	r3, #2
 800880a:	e7c7      	b.n	800879c <_printf_common+0x58>
 800880c:	2301      	movs	r3, #1
 800880e:	4622      	mov	r2, r4
 8008810:	4649      	mov	r1, r9
 8008812:	4638      	mov	r0, r7
 8008814:	47c0      	blx	r8
 8008816:	3001      	adds	r0, #1
 8008818:	d0e6      	beq.n	80087e8 <_printf_common+0xa4>
 800881a:	3601      	adds	r6, #1
 800881c:	e7d9      	b.n	80087d2 <_printf_common+0x8e>
	...

08008820 <_printf_i>:
 8008820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008824:	7e0f      	ldrb	r7, [r1, #24]
 8008826:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008828:	2f78      	cmp	r7, #120	; 0x78
 800882a:	4691      	mov	r9, r2
 800882c:	4680      	mov	r8, r0
 800882e:	460c      	mov	r4, r1
 8008830:	469a      	mov	sl, r3
 8008832:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008836:	d807      	bhi.n	8008848 <_printf_i+0x28>
 8008838:	2f62      	cmp	r7, #98	; 0x62
 800883a:	d80a      	bhi.n	8008852 <_printf_i+0x32>
 800883c:	2f00      	cmp	r7, #0
 800883e:	f000 80d8 	beq.w	80089f2 <_printf_i+0x1d2>
 8008842:	2f58      	cmp	r7, #88	; 0x58
 8008844:	f000 80a3 	beq.w	800898e <_printf_i+0x16e>
 8008848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800884c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008850:	e03a      	b.n	80088c8 <_printf_i+0xa8>
 8008852:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008856:	2b15      	cmp	r3, #21
 8008858:	d8f6      	bhi.n	8008848 <_printf_i+0x28>
 800885a:	a101      	add	r1, pc, #4	; (adr r1, 8008860 <_printf_i+0x40>)
 800885c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008860:	080088b9 	.word	0x080088b9
 8008864:	080088cd 	.word	0x080088cd
 8008868:	08008849 	.word	0x08008849
 800886c:	08008849 	.word	0x08008849
 8008870:	08008849 	.word	0x08008849
 8008874:	08008849 	.word	0x08008849
 8008878:	080088cd 	.word	0x080088cd
 800887c:	08008849 	.word	0x08008849
 8008880:	08008849 	.word	0x08008849
 8008884:	08008849 	.word	0x08008849
 8008888:	08008849 	.word	0x08008849
 800888c:	080089d9 	.word	0x080089d9
 8008890:	080088fd 	.word	0x080088fd
 8008894:	080089bb 	.word	0x080089bb
 8008898:	08008849 	.word	0x08008849
 800889c:	08008849 	.word	0x08008849
 80088a0:	080089fb 	.word	0x080089fb
 80088a4:	08008849 	.word	0x08008849
 80088a8:	080088fd 	.word	0x080088fd
 80088ac:	08008849 	.word	0x08008849
 80088b0:	08008849 	.word	0x08008849
 80088b4:	080089c3 	.word	0x080089c3
 80088b8:	682b      	ldr	r3, [r5, #0]
 80088ba:	1d1a      	adds	r2, r3, #4
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	602a      	str	r2, [r5, #0]
 80088c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088c8:	2301      	movs	r3, #1
 80088ca:	e0a3      	b.n	8008a14 <_printf_i+0x1f4>
 80088cc:	6820      	ldr	r0, [r4, #0]
 80088ce:	6829      	ldr	r1, [r5, #0]
 80088d0:	0606      	lsls	r6, r0, #24
 80088d2:	f101 0304 	add.w	r3, r1, #4
 80088d6:	d50a      	bpl.n	80088ee <_printf_i+0xce>
 80088d8:	680e      	ldr	r6, [r1, #0]
 80088da:	602b      	str	r3, [r5, #0]
 80088dc:	2e00      	cmp	r6, #0
 80088de:	da03      	bge.n	80088e8 <_printf_i+0xc8>
 80088e0:	232d      	movs	r3, #45	; 0x2d
 80088e2:	4276      	negs	r6, r6
 80088e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088e8:	485e      	ldr	r0, [pc, #376]	; (8008a64 <_printf_i+0x244>)
 80088ea:	230a      	movs	r3, #10
 80088ec:	e019      	b.n	8008922 <_printf_i+0x102>
 80088ee:	680e      	ldr	r6, [r1, #0]
 80088f0:	602b      	str	r3, [r5, #0]
 80088f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088f6:	bf18      	it	ne
 80088f8:	b236      	sxthne	r6, r6
 80088fa:	e7ef      	b.n	80088dc <_printf_i+0xbc>
 80088fc:	682b      	ldr	r3, [r5, #0]
 80088fe:	6820      	ldr	r0, [r4, #0]
 8008900:	1d19      	adds	r1, r3, #4
 8008902:	6029      	str	r1, [r5, #0]
 8008904:	0601      	lsls	r1, r0, #24
 8008906:	d501      	bpl.n	800890c <_printf_i+0xec>
 8008908:	681e      	ldr	r6, [r3, #0]
 800890a:	e002      	b.n	8008912 <_printf_i+0xf2>
 800890c:	0646      	lsls	r6, r0, #25
 800890e:	d5fb      	bpl.n	8008908 <_printf_i+0xe8>
 8008910:	881e      	ldrh	r6, [r3, #0]
 8008912:	4854      	ldr	r0, [pc, #336]	; (8008a64 <_printf_i+0x244>)
 8008914:	2f6f      	cmp	r7, #111	; 0x6f
 8008916:	bf0c      	ite	eq
 8008918:	2308      	moveq	r3, #8
 800891a:	230a      	movne	r3, #10
 800891c:	2100      	movs	r1, #0
 800891e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008922:	6865      	ldr	r5, [r4, #4]
 8008924:	60a5      	str	r5, [r4, #8]
 8008926:	2d00      	cmp	r5, #0
 8008928:	bfa2      	ittt	ge
 800892a:	6821      	ldrge	r1, [r4, #0]
 800892c:	f021 0104 	bicge.w	r1, r1, #4
 8008930:	6021      	strge	r1, [r4, #0]
 8008932:	b90e      	cbnz	r6, 8008938 <_printf_i+0x118>
 8008934:	2d00      	cmp	r5, #0
 8008936:	d04d      	beq.n	80089d4 <_printf_i+0x1b4>
 8008938:	4615      	mov	r5, r2
 800893a:	fbb6 f1f3 	udiv	r1, r6, r3
 800893e:	fb03 6711 	mls	r7, r3, r1, r6
 8008942:	5dc7      	ldrb	r7, [r0, r7]
 8008944:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008948:	4637      	mov	r7, r6
 800894a:	42bb      	cmp	r3, r7
 800894c:	460e      	mov	r6, r1
 800894e:	d9f4      	bls.n	800893a <_printf_i+0x11a>
 8008950:	2b08      	cmp	r3, #8
 8008952:	d10b      	bne.n	800896c <_printf_i+0x14c>
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	07de      	lsls	r6, r3, #31
 8008958:	d508      	bpl.n	800896c <_printf_i+0x14c>
 800895a:	6923      	ldr	r3, [r4, #16]
 800895c:	6861      	ldr	r1, [r4, #4]
 800895e:	4299      	cmp	r1, r3
 8008960:	bfde      	ittt	le
 8008962:	2330      	movle	r3, #48	; 0x30
 8008964:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008968:	f105 35ff 	addle.w	r5, r5, #4294967295
 800896c:	1b52      	subs	r2, r2, r5
 800896e:	6122      	str	r2, [r4, #16]
 8008970:	f8cd a000 	str.w	sl, [sp]
 8008974:	464b      	mov	r3, r9
 8008976:	aa03      	add	r2, sp, #12
 8008978:	4621      	mov	r1, r4
 800897a:	4640      	mov	r0, r8
 800897c:	f7ff fee2 	bl	8008744 <_printf_common>
 8008980:	3001      	adds	r0, #1
 8008982:	d14c      	bne.n	8008a1e <_printf_i+0x1fe>
 8008984:	f04f 30ff 	mov.w	r0, #4294967295
 8008988:	b004      	add	sp, #16
 800898a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800898e:	4835      	ldr	r0, [pc, #212]	; (8008a64 <_printf_i+0x244>)
 8008990:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008994:	6829      	ldr	r1, [r5, #0]
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	f851 6b04 	ldr.w	r6, [r1], #4
 800899c:	6029      	str	r1, [r5, #0]
 800899e:	061d      	lsls	r5, r3, #24
 80089a0:	d514      	bpl.n	80089cc <_printf_i+0x1ac>
 80089a2:	07df      	lsls	r7, r3, #31
 80089a4:	bf44      	itt	mi
 80089a6:	f043 0320 	orrmi.w	r3, r3, #32
 80089aa:	6023      	strmi	r3, [r4, #0]
 80089ac:	b91e      	cbnz	r6, 80089b6 <_printf_i+0x196>
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	f023 0320 	bic.w	r3, r3, #32
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	2310      	movs	r3, #16
 80089b8:	e7b0      	b.n	800891c <_printf_i+0xfc>
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	f043 0320 	orr.w	r3, r3, #32
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	2378      	movs	r3, #120	; 0x78
 80089c4:	4828      	ldr	r0, [pc, #160]	; (8008a68 <_printf_i+0x248>)
 80089c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089ca:	e7e3      	b.n	8008994 <_printf_i+0x174>
 80089cc:	0659      	lsls	r1, r3, #25
 80089ce:	bf48      	it	mi
 80089d0:	b2b6      	uxthmi	r6, r6
 80089d2:	e7e6      	b.n	80089a2 <_printf_i+0x182>
 80089d4:	4615      	mov	r5, r2
 80089d6:	e7bb      	b.n	8008950 <_printf_i+0x130>
 80089d8:	682b      	ldr	r3, [r5, #0]
 80089da:	6826      	ldr	r6, [r4, #0]
 80089dc:	6961      	ldr	r1, [r4, #20]
 80089de:	1d18      	adds	r0, r3, #4
 80089e0:	6028      	str	r0, [r5, #0]
 80089e2:	0635      	lsls	r5, r6, #24
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	d501      	bpl.n	80089ec <_printf_i+0x1cc>
 80089e8:	6019      	str	r1, [r3, #0]
 80089ea:	e002      	b.n	80089f2 <_printf_i+0x1d2>
 80089ec:	0670      	lsls	r0, r6, #25
 80089ee:	d5fb      	bpl.n	80089e8 <_printf_i+0x1c8>
 80089f0:	8019      	strh	r1, [r3, #0]
 80089f2:	2300      	movs	r3, #0
 80089f4:	6123      	str	r3, [r4, #16]
 80089f6:	4615      	mov	r5, r2
 80089f8:	e7ba      	b.n	8008970 <_printf_i+0x150>
 80089fa:	682b      	ldr	r3, [r5, #0]
 80089fc:	1d1a      	adds	r2, r3, #4
 80089fe:	602a      	str	r2, [r5, #0]
 8008a00:	681d      	ldr	r5, [r3, #0]
 8008a02:	6862      	ldr	r2, [r4, #4]
 8008a04:	2100      	movs	r1, #0
 8008a06:	4628      	mov	r0, r5
 8008a08:	f7f7 fbea 	bl	80001e0 <memchr>
 8008a0c:	b108      	cbz	r0, 8008a12 <_printf_i+0x1f2>
 8008a0e:	1b40      	subs	r0, r0, r5
 8008a10:	6060      	str	r0, [r4, #4]
 8008a12:	6863      	ldr	r3, [r4, #4]
 8008a14:	6123      	str	r3, [r4, #16]
 8008a16:	2300      	movs	r3, #0
 8008a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a1c:	e7a8      	b.n	8008970 <_printf_i+0x150>
 8008a1e:	6923      	ldr	r3, [r4, #16]
 8008a20:	462a      	mov	r2, r5
 8008a22:	4649      	mov	r1, r9
 8008a24:	4640      	mov	r0, r8
 8008a26:	47d0      	blx	sl
 8008a28:	3001      	adds	r0, #1
 8008a2a:	d0ab      	beq.n	8008984 <_printf_i+0x164>
 8008a2c:	6823      	ldr	r3, [r4, #0]
 8008a2e:	079b      	lsls	r3, r3, #30
 8008a30:	d413      	bmi.n	8008a5a <_printf_i+0x23a>
 8008a32:	68e0      	ldr	r0, [r4, #12]
 8008a34:	9b03      	ldr	r3, [sp, #12]
 8008a36:	4298      	cmp	r0, r3
 8008a38:	bfb8      	it	lt
 8008a3a:	4618      	movlt	r0, r3
 8008a3c:	e7a4      	b.n	8008988 <_printf_i+0x168>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	4632      	mov	r2, r6
 8008a42:	4649      	mov	r1, r9
 8008a44:	4640      	mov	r0, r8
 8008a46:	47d0      	blx	sl
 8008a48:	3001      	adds	r0, #1
 8008a4a:	d09b      	beq.n	8008984 <_printf_i+0x164>
 8008a4c:	3501      	adds	r5, #1
 8008a4e:	68e3      	ldr	r3, [r4, #12]
 8008a50:	9903      	ldr	r1, [sp, #12]
 8008a52:	1a5b      	subs	r3, r3, r1
 8008a54:	42ab      	cmp	r3, r5
 8008a56:	dcf2      	bgt.n	8008a3e <_printf_i+0x21e>
 8008a58:	e7eb      	b.n	8008a32 <_printf_i+0x212>
 8008a5a:	2500      	movs	r5, #0
 8008a5c:	f104 0619 	add.w	r6, r4, #25
 8008a60:	e7f5      	b.n	8008a4e <_printf_i+0x22e>
 8008a62:	bf00      	nop
 8008a64:	0800acbe 	.word	0x0800acbe
 8008a68:	0800accf 	.word	0x0800accf

08008a6c <iprintf>:
 8008a6c:	b40f      	push	{r0, r1, r2, r3}
 8008a6e:	4b0a      	ldr	r3, [pc, #40]	; (8008a98 <iprintf+0x2c>)
 8008a70:	b513      	push	{r0, r1, r4, lr}
 8008a72:	681c      	ldr	r4, [r3, #0]
 8008a74:	b124      	cbz	r4, 8008a80 <iprintf+0x14>
 8008a76:	69a3      	ldr	r3, [r4, #24]
 8008a78:	b913      	cbnz	r3, 8008a80 <iprintf+0x14>
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f000 fee2 	bl	8009844 <__sinit>
 8008a80:	ab05      	add	r3, sp, #20
 8008a82:	9a04      	ldr	r2, [sp, #16]
 8008a84:	68a1      	ldr	r1, [r4, #8]
 8008a86:	9301      	str	r3, [sp, #4]
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f001 fc3b 	bl	800a304 <_vfiprintf_r>
 8008a8e:	b002      	add	sp, #8
 8008a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a94:	b004      	add	sp, #16
 8008a96:	4770      	bx	lr
 8008a98:	2000000c 	.word	0x2000000c

08008a9c <quorem>:
 8008a9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa0:	6903      	ldr	r3, [r0, #16]
 8008aa2:	690c      	ldr	r4, [r1, #16]
 8008aa4:	42a3      	cmp	r3, r4
 8008aa6:	4607      	mov	r7, r0
 8008aa8:	f2c0 8081 	blt.w	8008bae <quorem+0x112>
 8008aac:	3c01      	subs	r4, #1
 8008aae:	f101 0814 	add.w	r8, r1, #20
 8008ab2:	f100 0514 	add.w	r5, r0, #20
 8008ab6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008aba:	9301      	str	r3, [sp, #4]
 8008abc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ac0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008acc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ad0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ad4:	d331      	bcc.n	8008b3a <quorem+0x9e>
 8008ad6:	f04f 0e00 	mov.w	lr, #0
 8008ada:	4640      	mov	r0, r8
 8008adc:	46ac      	mov	ip, r5
 8008ade:	46f2      	mov	sl, lr
 8008ae0:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ae4:	b293      	uxth	r3, r2
 8008ae6:	fb06 e303 	mla	r3, r6, r3, lr
 8008aea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	ebaa 0303 	sub.w	r3, sl, r3
 8008af4:	f8dc a000 	ldr.w	sl, [ip]
 8008af8:	0c12      	lsrs	r2, r2, #16
 8008afa:	fa13 f38a 	uxtah	r3, r3, sl
 8008afe:	fb06 e202 	mla	r2, r6, r2, lr
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	9b00      	ldr	r3, [sp, #0]
 8008b06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b0a:	b292      	uxth	r2, r2
 8008b0c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b14:	f8bd 3000 	ldrh.w	r3, [sp]
 8008b18:	4581      	cmp	r9, r0
 8008b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b1e:	f84c 3b04 	str.w	r3, [ip], #4
 8008b22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b26:	d2db      	bcs.n	8008ae0 <quorem+0x44>
 8008b28:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b2c:	b92b      	cbnz	r3, 8008b3a <quorem+0x9e>
 8008b2e:	9b01      	ldr	r3, [sp, #4]
 8008b30:	3b04      	subs	r3, #4
 8008b32:	429d      	cmp	r5, r3
 8008b34:	461a      	mov	r2, r3
 8008b36:	d32e      	bcc.n	8008b96 <quorem+0xfa>
 8008b38:	613c      	str	r4, [r7, #16]
 8008b3a:	4638      	mov	r0, r7
 8008b3c:	f001 f9c0 	bl	8009ec0 <__mcmp>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	db24      	blt.n	8008b8e <quorem+0xf2>
 8008b44:	3601      	adds	r6, #1
 8008b46:	4628      	mov	r0, r5
 8008b48:	f04f 0c00 	mov.w	ip, #0
 8008b4c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b50:	f8d0 e000 	ldr.w	lr, [r0]
 8008b54:	b293      	uxth	r3, r2
 8008b56:	ebac 0303 	sub.w	r3, ip, r3
 8008b5a:	0c12      	lsrs	r2, r2, #16
 8008b5c:	fa13 f38e 	uxtah	r3, r3, lr
 8008b60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b6e:	45c1      	cmp	r9, r8
 8008b70:	f840 3b04 	str.w	r3, [r0], #4
 8008b74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008b78:	d2e8      	bcs.n	8008b4c <quorem+0xb0>
 8008b7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b82:	b922      	cbnz	r2, 8008b8e <quorem+0xf2>
 8008b84:	3b04      	subs	r3, #4
 8008b86:	429d      	cmp	r5, r3
 8008b88:	461a      	mov	r2, r3
 8008b8a:	d30a      	bcc.n	8008ba2 <quorem+0x106>
 8008b8c:	613c      	str	r4, [r7, #16]
 8008b8e:	4630      	mov	r0, r6
 8008b90:	b003      	add	sp, #12
 8008b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b96:	6812      	ldr	r2, [r2, #0]
 8008b98:	3b04      	subs	r3, #4
 8008b9a:	2a00      	cmp	r2, #0
 8008b9c:	d1cc      	bne.n	8008b38 <quorem+0x9c>
 8008b9e:	3c01      	subs	r4, #1
 8008ba0:	e7c7      	b.n	8008b32 <quorem+0x96>
 8008ba2:	6812      	ldr	r2, [r2, #0]
 8008ba4:	3b04      	subs	r3, #4
 8008ba6:	2a00      	cmp	r2, #0
 8008ba8:	d1f0      	bne.n	8008b8c <quorem+0xf0>
 8008baa:	3c01      	subs	r4, #1
 8008bac:	e7eb      	b.n	8008b86 <quorem+0xea>
 8008bae:	2000      	movs	r0, #0
 8008bb0:	e7ee      	b.n	8008b90 <quorem+0xf4>
 8008bb2:	0000      	movs	r0, r0
 8008bb4:	0000      	movs	r0, r0
	...

08008bb8 <_dtoa_r>:
 8008bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bbc:	ed2d 8b04 	vpush	{d8-d9}
 8008bc0:	ec57 6b10 	vmov	r6, r7, d0
 8008bc4:	b093      	sub	sp, #76	; 0x4c
 8008bc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008bc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008bcc:	9106      	str	r1, [sp, #24]
 8008bce:	ee10 aa10 	vmov	sl, s0
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8008bd6:	930c      	str	r3, [sp, #48]	; 0x30
 8008bd8:	46bb      	mov	fp, r7
 8008bda:	b975      	cbnz	r5, 8008bfa <_dtoa_r+0x42>
 8008bdc:	2010      	movs	r0, #16
 8008bde:	f000 fed7 	bl	8009990 <malloc>
 8008be2:	4602      	mov	r2, r0
 8008be4:	6260      	str	r0, [r4, #36]	; 0x24
 8008be6:	b920      	cbnz	r0, 8008bf2 <_dtoa_r+0x3a>
 8008be8:	4ba7      	ldr	r3, [pc, #668]	; (8008e88 <_dtoa_r+0x2d0>)
 8008bea:	21ea      	movs	r1, #234	; 0xea
 8008bec:	48a7      	ldr	r0, [pc, #668]	; (8008e8c <_dtoa_r+0x2d4>)
 8008bee:	f001 fddf 	bl	800a7b0 <__assert_func>
 8008bf2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008bf6:	6005      	str	r5, [r0, #0]
 8008bf8:	60c5      	str	r5, [r0, #12]
 8008bfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bfc:	6819      	ldr	r1, [r3, #0]
 8008bfe:	b151      	cbz	r1, 8008c16 <_dtoa_r+0x5e>
 8008c00:	685a      	ldr	r2, [r3, #4]
 8008c02:	604a      	str	r2, [r1, #4]
 8008c04:	2301      	movs	r3, #1
 8008c06:	4093      	lsls	r3, r2
 8008c08:	608b      	str	r3, [r1, #8]
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f000 ff16 	bl	8009a3c <_Bfree>
 8008c10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c12:	2200      	movs	r2, #0
 8008c14:	601a      	str	r2, [r3, #0]
 8008c16:	1e3b      	subs	r3, r7, #0
 8008c18:	bfaa      	itet	ge
 8008c1a:	2300      	movge	r3, #0
 8008c1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008c20:	f8c8 3000 	strge.w	r3, [r8]
 8008c24:	4b9a      	ldr	r3, [pc, #616]	; (8008e90 <_dtoa_r+0x2d8>)
 8008c26:	bfbc      	itt	lt
 8008c28:	2201      	movlt	r2, #1
 8008c2a:	f8c8 2000 	strlt.w	r2, [r8]
 8008c2e:	ea33 030b 	bics.w	r3, r3, fp
 8008c32:	d11b      	bne.n	8008c6c <_dtoa_r+0xb4>
 8008c34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c36:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c3a:	6013      	str	r3, [r2, #0]
 8008c3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c40:	4333      	orrs	r3, r6
 8008c42:	f000 8592 	beq.w	800976a <_dtoa_r+0xbb2>
 8008c46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c48:	b963      	cbnz	r3, 8008c64 <_dtoa_r+0xac>
 8008c4a:	4b92      	ldr	r3, [pc, #584]	; (8008e94 <_dtoa_r+0x2dc>)
 8008c4c:	e022      	b.n	8008c94 <_dtoa_r+0xdc>
 8008c4e:	4b92      	ldr	r3, [pc, #584]	; (8008e98 <_dtoa_r+0x2e0>)
 8008c50:	9301      	str	r3, [sp, #4]
 8008c52:	3308      	adds	r3, #8
 8008c54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c56:	6013      	str	r3, [r2, #0]
 8008c58:	9801      	ldr	r0, [sp, #4]
 8008c5a:	b013      	add	sp, #76	; 0x4c
 8008c5c:	ecbd 8b04 	vpop	{d8-d9}
 8008c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c64:	4b8b      	ldr	r3, [pc, #556]	; (8008e94 <_dtoa_r+0x2dc>)
 8008c66:	9301      	str	r3, [sp, #4]
 8008c68:	3303      	adds	r3, #3
 8008c6a:	e7f3      	b.n	8008c54 <_dtoa_r+0x9c>
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	2300      	movs	r3, #0
 8008c70:	4650      	mov	r0, sl
 8008c72:	4659      	mov	r1, fp
 8008c74:	f7f7 ff28 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c78:	ec4b ab19 	vmov	d9, sl, fp
 8008c7c:	4680      	mov	r8, r0
 8008c7e:	b158      	cbz	r0, 8008c98 <_dtoa_r+0xe0>
 8008c80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c82:	2301      	movs	r3, #1
 8008c84:	6013      	str	r3, [r2, #0]
 8008c86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f000 856b 	beq.w	8009764 <_dtoa_r+0xbac>
 8008c8e:	4883      	ldr	r0, [pc, #524]	; (8008e9c <_dtoa_r+0x2e4>)
 8008c90:	6018      	str	r0, [r3, #0]
 8008c92:	1e43      	subs	r3, r0, #1
 8008c94:	9301      	str	r3, [sp, #4]
 8008c96:	e7df      	b.n	8008c58 <_dtoa_r+0xa0>
 8008c98:	ec4b ab10 	vmov	d0, sl, fp
 8008c9c:	aa10      	add	r2, sp, #64	; 0x40
 8008c9e:	a911      	add	r1, sp, #68	; 0x44
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	f001 f9b3 	bl	800a00c <__d2b>
 8008ca6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008caa:	ee08 0a10 	vmov	s16, r0
 8008cae:	2d00      	cmp	r5, #0
 8008cb0:	f000 8084 	beq.w	8008dbc <_dtoa_r+0x204>
 8008cb4:	ee19 3a90 	vmov	r3, s19
 8008cb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008cc0:	4656      	mov	r6, sl
 8008cc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008cc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008cca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008cce:	4b74      	ldr	r3, [pc, #464]	; (8008ea0 <_dtoa_r+0x2e8>)
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	4639      	mov	r1, r7
 8008cd6:	f7f7 fad7 	bl	8000288 <__aeabi_dsub>
 8008cda:	a365      	add	r3, pc, #404	; (adr r3, 8008e70 <_dtoa_r+0x2b8>)
 8008cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce0:	f7f7 fc8a 	bl	80005f8 <__aeabi_dmul>
 8008ce4:	a364      	add	r3, pc, #400	; (adr r3, 8008e78 <_dtoa_r+0x2c0>)
 8008ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cea:	f7f7 facf 	bl	800028c <__adddf3>
 8008cee:	4606      	mov	r6, r0
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	460f      	mov	r7, r1
 8008cf4:	f7f7 fc16 	bl	8000524 <__aeabi_i2d>
 8008cf8:	a361      	add	r3, pc, #388	; (adr r3, 8008e80 <_dtoa_r+0x2c8>)
 8008cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfe:	f7f7 fc7b 	bl	80005f8 <__aeabi_dmul>
 8008d02:	4602      	mov	r2, r0
 8008d04:	460b      	mov	r3, r1
 8008d06:	4630      	mov	r0, r6
 8008d08:	4639      	mov	r1, r7
 8008d0a:	f7f7 fabf 	bl	800028c <__adddf3>
 8008d0e:	4606      	mov	r6, r0
 8008d10:	460f      	mov	r7, r1
 8008d12:	f7f7 ff21 	bl	8000b58 <__aeabi_d2iz>
 8008d16:	2200      	movs	r2, #0
 8008d18:	9000      	str	r0, [sp, #0]
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	4639      	mov	r1, r7
 8008d20:	f7f7 fedc 	bl	8000adc <__aeabi_dcmplt>
 8008d24:	b150      	cbz	r0, 8008d3c <_dtoa_r+0x184>
 8008d26:	9800      	ldr	r0, [sp, #0]
 8008d28:	f7f7 fbfc 	bl	8000524 <__aeabi_i2d>
 8008d2c:	4632      	mov	r2, r6
 8008d2e:	463b      	mov	r3, r7
 8008d30:	f7f7 feca 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d34:	b910      	cbnz	r0, 8008d3c <_dtoa_r+0x184>
 8008d36:	9b00      	ldr	r3, [sp, #0]
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	9b00      	ldr	r3, [sp, #0]
 8008d3e:	2b16      	cmp	r3, #22
 8008d40:	d85a      	bhi.n	8008df8 <_dtoa_r+0x240>
 8008d42:	9a00      	ldr	r2, [sp, #0]
 8008d44:	4b57      	ldr	r3, [pc, #348]	; (8008ea4 <_dtoa_r+0x2ec>)
 8008d46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4e:	ec51 0b19 	vmov	r0, r1, d9
 8008d52:	f7f7 fec3 	bl	8000adc <__aeabi_dcmplt>
 8008d56:	2800      	cmp	r0, #0
 8008d58:	d050      	beq.n	8008dfc <_dtoa_r+0x244>
 8008d5a:	9b00      	ldr	r3, [sp, #0]
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	9300      	str	r3, [sp, #0]
 8008d60:	2300      	movs	r3, #0
 8008d62:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d66:	1b5d      	subs	r5, r3, r5
 8008d68:	1e6b      	subs	r3, r5, #1
 8008d6a:	9305      	str	r3, [sp, #20]
 8008d6c:	bf45      	ittet	mi
 8008d6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008d72:	9304      	strmi	r3, [sp, #16]
 8008d74:	2300      	movpl	r3, #0
 8008d76:	2300      	movmi	r3, #0
 8008d78:	bf4c      	ite	mi
 8008d7a:	9305      	strmi	r3, [sp, #20]
 8008d7c:	9304      	strpl	r3, [sp, #16]
 8008d7e:	9b00      	ldr	r3, [sp, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	db3d      	blt.n	8008e00 <_dtoa_r+0x248>
 8008d84:	9b05      	ldr	r3, [sp, #20]
 8008d86:	9a00      	ldr	r2, [sp, #0]
 8008d88:	920a      	str	r2, [sp, #40]	; 0x28
 8008d8a:	4413      	add	r3, r2
 8008d8c:	9305      	str	r3, [sp, #20]
 8008d8e:	2300      	movs	r3, #0
 8008d90:	9307      	str	r3, [sp, #28]
 8008d92:	9b06      	ldr	r3, [sp, #24]
 8008d94:	2b09      	cmp	r3, #9
 8008d96:	f200 8089 	bhi.w	8008eac <_dtoa_r+0x2f4>
 8008d9a:	2b05      	cmp	r3, #5
 8008d9c:	bfc4      	itt	gt
 8008d9e:	3b04      	subgt	r3, #4
 8008da0:	9306      	strgt	r3, [sp, #24]
 8008da2:	9b06      	ldr	r3, [sp, #24]
 8008da4:	f1a3 0302 	sub.w	r3, r3, #2
 8008da8:	bfcc      	ite	gt
 8008daa:	2500      	movgt	r5, #0
 8008dac:	2501      	movle	r5, #1
 8008dae:	2b03      	cmp	r3, #3
 8008db0:	f200 8087 	bhi.w	8008ec2 <_dtoa_r+0x30a>
 8008db4:	e8df f003 	tbb	[pc, r3]
 8008db8:	59383a2d 	.word	0x59383a2d
 8008dbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008dc0:	441d      	add	r5, r3
 8008dc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008dc6:	2b20      	cmp	r3, #32
 8008dc8:	bfc1      	itttt	gt
 8008dca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008dce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008dd2:	fa0b f303 	lslgt.w	r3, fp, r3
 8008dd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008dda:	bfda      	itte	le
 8008ddc:	f1c3 0320 	rsble	r3, r3, #32
 8008de0:	fa06 f003 	lslle.w	r0, r6, r3
 8008de4:	4318      	orrgt	r0, r3
 8008de6:	f7f7 fb8d 	bl	8000504 <__aeabi_ui2d>
 8008dea:	2301      	movs	r3, #1
 8008dec:	4606      	mov	r6, r0
 8008dee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008df2:	3d01      	subs	r5, #1
 8008df4:	930e      	str	r3, [sp, #56]	; 0x38
 8008df6:	e76a      	b.n	8008cce <_dtoa_r+0x116>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e7b2      	b.n	8008d62 <_dtoa_r+0x1aa>
 8008dfc:	900b      	str	r0, [sp, #44]	; 0x2c
 8008dfe:	e7b1      	b.n	8008d64 <_dtoa_r+0x1ac>
 8008e00:	9b04      	ldr	r3, [sp, #16]
 8008e02:	9a00      	ldr	r2, [sp, #0]
 8008e04:	1a9b      	subs	r3, r3, r2
 8008e06:	9304      	str	r3, [sp, #16]
 8008e08:	4253      	negs	r3, r2
 8008e0a:	9307      	str	r3, [sp, #28]
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e10:	e7bf      	b.n	8008d92 <_dtoa_r+0x1da>
 8008e12:	2300      	movs	r3, #0
 8008e14:	9308      	str	r3, [sp, #32]
 8008e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	dc55      	bgt.n	8008ec8 <_dtoa_r+0x310>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e22:	461a      	mov	r2, r3
 8008e24:	9209      	str	r2, [sp, #36]	; 0x24
 8008e26:	e00c      	b.n	8008e42 <_dtoa_r+0x28a>
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e7f3      	b.n	8008e14 <_dtoa_r+0x25c>
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e30:	9308      	str	r3, [sp, #32]
 8008e32:	9b00      	ldr	r3, [sp, #0]
 8008e34:	4413      	add	r3, r2
 8008e36:	9302      	str	r3, [sp, #8]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	9303      	str	r3, [sp, #12]
 8008e3e:	bfb8      	it	lt
 8008e40:	2301      	movlt	r3, #1
 8008e42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e44:	2200      	movs	r2, #0
 8008e46:	6042      	str	r2, [r0, #4]
 8008e48:	2204      	movs	r2, #4
 8008e4a:	f102 0614 	add.w	r6, r2, #20
 8008e4e:	429e      	cmp	r6, r3
 8008e50:	6841      	ldr	r1, [r0, #4]
 8008e52:	d93d      	bls.n	8008ed0 <_dtoa_r+0x318>
 8008e54:	4620      	mov	r0, r4
 8008e56:	f000 fdb1 	bl	80099bc <_Balloc>
 8008e5a:	9001      	str	r0, [sp, #4]
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	d13b      	bne.n	8008ed8 <_dtoa_r+0x320>
 8008e60:	4b11      	ldr	r3, [pc, #68]	; (8008ea8 <_dtoa_r+0x2f0>)
 8008e62:	4602      	mov	r2, r0
 8008e64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e68:	e6c0      	b.n	8008bec <_dtoa_r+0x34>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e7df      	b.n	8008e2e <_dtoa_r+0x276>
 8008e6e:	bf00      	nop
 8008e70:	636f4361 	.word	0x636f4361
 8008e74:	3fd287a7 	.word	0x3fd287a7
 8008e78:	8b60c8b3 	.word	0x8b60c8b3
 8008e7c:	3fc68a28 	.word	0x3fc68a28
 8008e80:	509f79fb 	.word	0x509f79fb
 8008e84:	3fd34413 	.word	0x3fd34413
 8008e88:	0800aced 	.word	0x0800aced
 8008e8c:	0800ad04 	.word	0x0800ad04
 8008e90:	7ff00000 	.word	0x7ff00000
 8008e94:	0800ace9 	.word	0x0800ace9
 8008e98:	0800ace0 	.word	0x0800ace0
 8008e9c:	0800acbd 	.word	0x0800acbd
 8008ea0:	3ff80000 	.word	0x3ff80000
 8008ea4:	0800ae58 	.word	0x0800ae58
 8008ea8:	0800ad5f 	.word	0x0800ad5f
 8008eac:	2501      	movs	r5, #1
 8008eae:	2300      	movs	r3, #0
 8008eb0:	9306      	str	r3, [sp, #24]
 8008eb2:	9508      	str	r5, [sp, #32]
 8008eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8008eb8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	2312      	movs	r3, #18
 8008ec0:	e7b0      	b.n	8008e24 <_dtoa_r+0x26c>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	9308      	str	r3, [sp, #32]
 8008ec6:	e7f5      	b.n	8008eb4 <_dtoa_r+0x2fc>
 8008ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ece:	e7b8      	b.n	8008e42 <_dtoa_r+0x28a>
 8008ed0:	3101      	adds	r1, #1
 8008ed2:	6041      	str	r1, [r0, #4]
 8008ed4:	0052      	lsls	r2, r2, #1
 8008ed6:	e7b8      	b.n	8008e4a <_dtoa_r+0x292>
 8008ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eda:	9a01      	ldr	r2, [sp, #4]
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	9b03      	ldr	r3, [sp, #12]
 8008ee0:	2b0e      	cmp	r3, #14
 8008ee2:	f200 809d 	bhi.w	8009020 <_dtoa_r+0x468>
 8008ee6:	2d00      	cmp	r5, #0
 8008ee8:	f000 809a 	beq.w	8009020 <_dtoa_r+0x468>
 8008eec:	9b00      	ldr	r3, [sp, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	dd32      	ble.n	8008f58 <_dtoa_r+0x3a0>
 8008ef2:	4ab7      	ldr	r2, [pc, #732]	; (80091d0 <_dtoa_r+0x618>)
 8008ef4:	f003 030f 	and.w	r3, r3, #15
 8008ef8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008efc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f00:	9b00      	ldr	r3, [sp, #0]
 8008f02:	05d8      	lsls	r0, r3, #23
 8008f04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008f08:	d516      	bpl.n	8008f38 <_dtoa_r+0x380>
 8008f0a:	4bb2      	ldr	r3, [pc, #712]	; (80091d4 <_dtoa_r+0x61c>)
 8008f0c:	ec51 0b19 	vmov	r0, r1, d9
 8008f10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f14:	f7f7 fc9a 	bl	800084c <__aeabi_ddiv>
 8008f18:	f007 070f 	and.w	r7, r7, #15
 8008f1c:	4682      	mov	sl, r0
 8008f1e:	468b      	mov	fp, r1
 8008f20:	2503      	movs	r5, #3
 8008f22:	4eac      	ldr	r6, [pc, #688]	; (80091d4 <_dtoa_r+0x61c>)
 8008f24:	b957      	cbnz	r7, 8008f3c <_dtoa_r+0x384>
 8008f26:	4642      	mov	r2, r8
 8008f28:	464b      	mov	r3, r9
 8008f2a:	4650      	mov	r0, sl
 8008f2c:	4659      	mov	r1, fp
 8008f2e:	f7f7 fc8d 	bl	800084c <__aeabi_ddiv>
 8008f32:	4682      	mov	sl, r0
 8008f34:	468b      	mov	fp, r1
 8008f36:	e028      	b.n	8008f8a <_dtoa_r+0x3d2>
 8008f38:	2502      	movs	r5, #2
 8008f3a:	e7f2      	b.n	8008f22 <_dtoa_r+0x36a>
 8008f3c:	07f9      	lsls	r1, r7, #31
 8008f3e:	d508      	bpl.n	8008f52 <_dtoa_r+0x39a>
 8008f40:	4640      	mov	r0, r8
 8008f42:	4649      	mov	r1, r9
 8008f44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f48:	f7f7 fb56 	bl	80005f8 <__aeabi_dmul>
 8008f4c:	3501      	adds	r5, #1
 8008f4e:	4680      	mov	r8, r0
 8008f50:	4689      	mov	r9, r1
 8008f52:	107f      	asrs	r7, r7, #1
 8008f54:	3608      	adds	r6, #8
 8008f56:	e7e5      	b.n	8008f24 <_dtoa_r+0x36c>
 8008f58:	f000 809b 	beq.w	8009092 <_dtoa_r+0x4da>
 8008f5c:	9b00      	ldr	r3, [sp, #0]
 8008f5e:	4f9d      	ldr	r7, [pc, #628]	; (80091d4 <_dtoa_r+0x61c>)
 8008f60:	425e      	negs	r6, r3
 8008f62:	4b9b      	ldr	r3, [pc, #620]	; (80091d0 <_dtoa_r+0x618>)
 8008f64:	f006 020f 	and.w	r2, r6, #15
 8008f68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f70:	ec51 0b19 	vmov	r0, r1, d9
 8008f74:	f7f7 fb40 	bl	80005f8 <__aeabi_dmul>
 8008f78:	1136      	asrs	r6, r6, #4
 8008f7a:	4682      	mov	sl, r0
 8008f7c:	468b      	mov	fp, r1
 8008f7e:	2300      	movs	r3, #0
 8008f80:	2502      	movs	r5, #2
 8008f82:	2e00      	cmp	r6, #0
 8008f84:	d17a      	bne.n	800907c <_dtoa_r+0x4c4>
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1d3      	bne.n	8008f32 <_dtoa_r+0x37a>
 8008f8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 8082 	beq.w	8009096 <_dtoa_r+0x4de>
 8008f92:	4b91      	ldr	r3, [pc, #580]	; (80091d8 <_dtoa_r+0x620>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	4650      	mov	r0, sl
 8008f98:	4659      	mov	r1, fp
 8008f9a:	f7f7 fd9f 	bl	8000adc <__aeabi_dcmplt>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d079      	beq.n	8009096 <_dtoa_r+0x4de>
 8008fa2:	9b03      	ldr	r3, [sp, #12]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d076      	beq.n	8009096 <_dtoa_r+0x4de>
 8008fa8:	9b02      	ldr	r3, [sp, #8]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	dd36      	ble.n	800901c <_dtoa_r+0x464>
 8008fae:	9b00      	ldr	r3, [sp, #0]
 8008fb0:	4650      	mov	r0, sl
 8008fb2:	4659      	mov	r1, fp
 8008fb4:	1e5f      	subs	r7, r3, #1
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	4b88      	ldr	r3, [pc, #544]	; (80091dc <_dtoa_r+0x624>)
 8008fba:	f7f7 fb1d 	bl	80005f8 <__aeabi_dmul>
 8008fbe:	9e02      	ldr	r6, [sp, #8]
 8008fc0:	4682      	mov	sl, r0
 8008fc2:	468b      	mov	fp, r1
 8008fc4:	3501      	adds	r5, #1
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	f7f7 faac 	bl	8000524 <__aeabi_i2d>
 8008fcc:	4652      	mov	r2, sl
 8008fce:	465b      	mov	r3, fp
 8008fd0:	f7f7 fb12 	bl	80005f8 <__aeabi_dmul>
 8008fd4:	4b82      	ldr	r3, [pc, #520]	; (80091e0 <_dtoa_r+0x628>)
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f7f7 f958 	bl	800028c <__adddf3>
 8008fdc:	46d0      	mov	r8, sl
 8008fde:	46d9      	mov	r9, fp
 8008fe0:	4682      	mov	sl, r0
 8008fe2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008fe6:	2e00      	cmp	r6, #0
 8008fe8:	d158      	bne.n	800909c <_dtoa_r+0x4e4>
 8008fea:	4b7e      	ldr	r3, [pc, #504]	; (80091e4 <_dtoa_r+0x62c>)
 8008fec:	2200      	movs	r2, #0
 8008fee:	4640      	mov	r0, r8
 8008ff0:	4649      	mov	r1, r9
 8008ff2:	f7f7 f949 	bl	8000288 <__aeabi_dsub>
 8008ff6:	4652      	mov	r2, sl
 8008ff8:	465b      	mov	r3, fp
 8008ffa:	4680      	mov	r8, r0
 8008ffc:	4689      	mov	r9, r1
 8008ffe:	f7f7 fd8b 	bl	8000b18 <__aeabi_dcmpgt>
 8009002:	2800      	cmp	r0, #0
 8009004:	f040 8295 	bne.w	8009532 <_dtoa_r+0x97a>
 8009008:	4652      	mov	r2, sl
 800900a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800900e:	4640      	mov	r0, r8
 8009010:	4649      	mov	r1, r9
 8009012:	f7f7 fd63 	bl	8000adc <__aeabi_dcmplt>
 8009016:	2800      	cmp	r0, #0
 8009018:	f040 8289 	bne.w	800952e <_dtoa_r+0x976>
 800901c:	ec5b ab19 	vmov	sl, fp, d9
 8009020:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009022:	2b00      	cmp	r3, #0
 8009024:	f2c0 8148 	blt.w	80092b8 <_dtoa_r+0x700>
 8009028:	9a00      	ldr	r2, [sp, #0]
 800902a:	2a0e      	cmp	r2, #14
 800902c:	f300 8144 	bgt.w	80092b8 <_dtoa_r+0x700>
 8009030:	4b67      	ldr	r3, [pc, #412]	; (80091d0 <_dtoa_r+0x618>)
 8009032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009036:	e9d3 8900 	ldrd	r8, r9, [r3]
 800903a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800903c:	2b00      	cmp	r3, #0
 800903e:	f280 80d5 	bge.w	80091ec <_dtoa_r+0x634>
 8009042:	9b03      	ldr	r3, [sp, #12]
 8009044:	2b00      	cmp	r3, #0
 8009046:	f300 80d1 	bgt.w	80091ec <_dtoa_r+0x634>
 800904a:	f040 826f 	bne.w	800952c <_dtoa_r+0x974>
 800904e:	4b65      	ldr	r3, [pc, #404]	; (80091e4 <_dtoa_r+0x62c>)
 8009050:	2200      	movs	r2, #0
 8009052:	4640      	mov	r0, r8
 8009054:	4649      	mov	r1, r9
 8009056:	f7f7 facf 	bl	80005f8 <__aeabi_dmul>
 800905a:	4652      	mov	r2, sl
 800905c:	465b      	mov	r3, fp
 800905e:	f7f7 fd51 	bl	8000b04 <__aeabi_dcmpge>
 8009062:	9e03      	ldr	r6, [sp, #12]
 8009064:	4637      	mov	r7, r6
 8009066:	2800      	cmp	r0, #0
 8009068:	f040 8245 	bne.w	80094f6 <_dtoa_r+0x93e>
 800906c:	9d01      	ldr	r5, [sp, #4]
 800906e:	2331      	movs	r3, #49	; 0x31
 8009070:	f805 3b01 	strb.w	r3, [r5], #1
 8009074:	9b00      	ldr	r3, [sp, #0]
 8009076:	3301      	adds	r3, #1
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	e240      	b.n	80094fe <_dtoa_r+0x946>
 800907c:	07f2      	lsls	r2, r6, #31
 800907e:	d505      	bpl.n	800908c <_dtoa_r+0x4d4>
 8009080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009084:	f7f7 fab8 	bl	80005f8 <__aeabi_dmul>
 8009088:	3501      	adds	r5, #1
 800908a:	2301      	movs	r3, #1
 800908c:	1076      	asrs	r6, r6, #1
 800908e:	3708      	adds	r7, #8
 8009090:	e777      	b.n	8008f82 <_dtoa_r+0x3ca>
 8009092:	2502      	movs	r5, #2
 8009094:	e779      	b.n	8008f8a <_dtoa_r+0x3d2>
 8009096:	9f00      	ldr	r7, [sp, #0]
 8009098:	9e03      	ldr	r6, [sp, #12]
 800909a:	e794      	b.n	8008fc6 <_dtoa_r+0x40e>
 800909c:	9901      	ldr	r1, [sp, #4]
 800909e:	4b4c      	ldr	r3, [pc, #304]	; (80091d0 <_dtoa_r+0x618>)
 80090a0:	4431      	add	r1, r6
 80090a2:	910d      	str	r1, [sp, #52]	; 0x34
 80090a4:	9908      	ldr	r1, [sp, #32]
 80090a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80090aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090ae:	2900      	cmp	r1, #0
 80090b0:	d043      	beq.n	800913a <_dtoa_r+0x582>
 80090b2:	494d      	ldr	r1, [pc, #308]	; (80091e8 <_dtoa_r+0x630>)
 80090b4:	2000      	movs	r0, #0
 80090b6:	f7f7 fbc9 	bl	800084c <__aeabi_ddiv>
 80090ba:	4652      	mov	r2, sl
 80090bc:	465b      	mov	r3, fp
 80090be:	f7f7 f8e3 	bl	8000288 <__aeabi_dsub>
 80090c2:	9d01      	ldr	r5, [sp, #4]
 80090c4:	4682      	mov	sl, r0
 80090c6:	468b      	mov	fp, r1
 80090c8:	4649      	mov	r1, r9
 80090ca:	4640      	mov	r0, r8
 80090cc:	f7f7 fd44 	bl	8000b58 <__aeabi_d2iz>
 80090d0:	4606      	mov	r6, r0
 80090d2:	f7f7 fa27 	bl	8000524 <__aeabi_i2d>
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	4640      	mov	r0, r8
 80090dc:	4649      	mov	r1, r9
 80090de:	f7f7 f8d3 	bl	8000288 <__aeabi_dsub>
 80090e2:	3630      	adds	r6, #48	; 0x30
 80090e4:	f805 6b01 	strb.w	r6, [r5], #1
 80090e8:	4652      	mov	r2, sl
 80090ea:	465b      	mov	r3, fp
 80090ec:	4680      	mov	r8, r0
 80090ee:	4689      	mov	r9, r1
 80090f0:	f7f7 fcf4 	bl	8000adc <__aeabi_dcmplt>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	d163      	bne.n	80091c0 <_dtoa_r+0x608>
 80090f8:	4642      	mov	r2, r8
 80090fa:	464b      	mov	r3, r9
 80090fc:	4936      	ldr	r1, [pc, #216]	; (80091d8 <_dtoa_r+0x620>)
 80090fe:	2000      	movs	r0, #0
 8009100:	f7f7 f8c2 	bl	8000288 <__aeabi_dsub>
 8009104:	4652      	mov	r2, sl
 8009106:	465b      	mov	r3, fp
 8009108:	f7f7 fce8 	bl	8000adc <__aeabi_dcmplt>
 800910c:	2800      	cmp	r0, #0
 800910e:	f040 80b5 	bne.w	800927c <_dtoa_r+0x6c4>
 8009112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009114:	429d      	cmp	r5, r3
 8009116:	d081      	beq.n	800901c <_dtoa_r+0x464>
 8009118:	4b30      	ldr	r3, [pc, #192]	; (80091dc <_dtoa_r+0x624>)
 800911a:	2200      	movs	r2, #0
 800911c:	4650      	mov	r0, sl
 800911e:	4659      	mov	r1, fp
 8009120:	f7f7 fa6a 	bl	80005f8 <__aeabi_dmul>
 8009124:	4b2d      	ldr	r3, [pc, #180]	; (80091dc <_dtoa_r+0x624>)
 8009126:	4682      	mov	sl, r0
 8009128:	468b      	mov	fp, r1
 800912a:	4640      	mov	r0, r8
 800912c:	4649      	mov	r1, r9
 800912e:	2200      	movs	r2, #0
 8009130:	f7f7 fa62 	bl	80005f8 <__aeabi_dmul>
 8009134:	4680      	mov	r8, r0
 8009136:	4689      	mov	r9, r1
 8009138:	e7c6      	b.n	80090c8 <_dtoa_r+0x510>
 800913a:	4650      	mov	r0, sl
 800913c:	4659      	mov	r1, fp
 800913e:	f7f7 fa5b 	bl	80005f8 <__aeabi_dmul>
 8009142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009144:	9d01      	ldr	r5, [sp, #4]
 8009146:	930f      	str	r3, [sp, #60]	; 0x3c
 8009148:	4682      	mov	sl, r0
 800914a:	468b      	mov	fp, r1
 800914c:	4649      	mov	r1, r9
 800914e:	4640      	mov	r0, r8
 8009150:	f7f7 fd02 	bl	8000b58 <__aeabi_d2iz>
 8009154:	4606      	mov	r6, r0
 8009156:	f7f7 f9e5 	bl	8000524 <__aeabi_i2d>
 800915a:	3630      	adds	r6, #48	; 0x30
 800915c:	4602      	mov	r2, r0
 800915e:	460b      	mov	r3, r1
 8009160:	4640      	mov	r0, r8
 8009162:	4649      	mov	r1, r9
 8009164:	f7f7 f890 	bl	8000288 <__aeabi_dsub>
 8009168:	f805 6b01 	strb.w	r6, [r5], #1
 800916c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800916e:	429d      	cmp	r5, r3
 8009170:	4680      	mov	r8, r0
 8009172:	4689      	mov	r9, r1
 8009174:	f04f 0200 	mov.w	r2, #0
 8009178:	d124      	bne.n	80091c4 <_dtoa_r+0x60c>
 800917a:	4b1b      	ldr	r3, [pc, #108]	; (80091e8 <_dtoa_r+0x630>)
 800917c:	4650      	mov	r0, sl
 800917e:	4659      	mov	r1, fp
 8009180:	f7f7 f884 	bl	800028c <__adddf3>
 8009184:	4602      	mov	r2, r0
 8009186:	460b      	mov	r3, r1
 8009188:	4640      	mov	r0, r8
 800918a:	4649      	mov	r1, r9
 800918c:	f7f7 fcc4 	bl	8000b18 <__aeabi_dcmpgt>
 8009190:	2800      	cmp	r0, #0
 8009192:	d173      	bne.n	800927c <_dtoa_r+0x6c4>
 8009194:	4652      	mov	r2, sl
 8009196:	465b      	mov	r3, fp
 8009198:	4913      	ldr	r1, [pc, #76]	; (80091e8 <_dtoa_r+0x630>)
 800919a:	2000      	movs	r0, #0
 800919c:	f7f7 f874 	bl	8000288 <__aeabi_dsub>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4640      	mov	r0, r8
 80091a6:	4649      	mov	r1, r9
 80091a8:	f7f7 fc98 	bl	8000adc <__aeabi_dcmplt>
 80091ac:	2800      	cmp	r0, #0
 80091ae:	f43f af35 	beq.w	800901c <_dtoa_r+0x464>
 80091b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80091b4:	1e6b      	subs	r3, r5, #1
 80091b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80091b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091bc:	2b30      	cmp	r3, #48	; 0x30
 80091be:	d0f8      	beq.n	80091b2 <_dtoa_r+0x5fa>
 80091c0:	9700      	str	r7, [sp, #0]
 80091c2:	e049      	b.n	8009258 <_dtoa_r+0x6a0>
 80091c4:	4b05      	ldr	r3, [pc, #20]	; (80091dc <_dtoa_r+0x624>)
 80091c6:	f7f7 fa17 	bl	80005f8 <__aeabi_dmul>
 80091ca:	4680      	mov	r8, r0
 80091cc:	4689      	mov	r9, r1
 80091ce:	e7bd      	b.n	800914c <_dtoa_r+0x594>
 80091d0:	0800ae58 	.word	0x0800ae58
 80091d4:	0800ae30 	.word	0x0800ae30
 80091d8:	3ff00000 	.word	0x3ff00000
 80091dc:	40240000 	.word	0x40240000
 80091e0:	401c0000 	.word	0x401c0000
 80091e4:	40140000 	.word	0x40140000
 80091e8:	3fe00000 	.word	0x3fe00000
 80091ec:	9d01      	ldr	r5, [sp, #4]
 80091ee:	4656      	mov	r6, sl
 80091f0:	465f      	mov	r7, fp
 80091f2:	4642      	mov	r2, r8
 80091f4:	464b      	mov	r3, r9
 80091f6:	4630      	mov	r0, r6
 80091f8:	4639      	mov	r1, r7
 80091fa:	f7f7 fb27 	bl	800084c <__aeabi_ddiv>
 80091fe:	f7f7 fcab 	bl	8000b58 <__aeabi_d2iz>
 8009202:	4682      	mov	sl, r0
 8009204:	f7f7 f98e 	bl	8000524 <__aeabi_i2d>
 8009208:	4642      	mov	r2, r8
 800920a:	464b      	mov	r3, r9
 800920c:	f7f7 f9f4 	bl	80005f8 <__aeabi_dmul>
 8009210:	4602      	mov	r2, r0
 8009212:	460b      	mov	r3, r1
 8009214:	4630      	mov	r0, r6
 8009216:	4639      	mov	r1, r7
 8009218:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800921c:	f7f7 f834 	bl	8000288 <__aeabi_dsub>
 8009220:	f805 6b01 	strb.w	r6, [r5], #1
 8009224:	9e01      	ldr	r6, [sp, #4]
 8009226:	9f03      	ldr	r7, [sp, #12]
 8009228:	1bae      	subs	r6, r5, r6
 800922a:	42b7      	cmp	r7, r6
 800922c:	4602      	mov	r2, r0
 800922e:	460b      	mov	r3, r1
 8009230:	d135      	bne.n	800929e <_dtoa_r+0x6e6>
 8009232:	f7f7 f82b 	bl	800028c <__adddf3>
 8009236:	4642      	mov	r2, r8
 8009238:	464b      	mov	r3, r9
 800923a:	4606      	mov	r6, r0
 800923c:	460f      	mov	r7, r1
 800923e:	f7f7 fc6b 	bl	8000b18 <__aeabi_dcmpgt>
 8009242:	b9d0      	cbnz	r0, 800927a <_dtoa_r+0x6c2>
 8009244:	4642      	mov	r2, r8
 8009246:	464b      	mov	r3, r9
 8009248:	4630      	mov	r0, r6
 800924a:	4639      	mov	r1, r7
 800924c:	f7f7 fc3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009250:	b110      	cbz	r0, 8009258 <_dtoa_r+0x6a0>
 8009252:	f01a 0f01 	tst.w	sl, #1
 8009256:	d110      	bne.n	800927a <_dtoa_r+0x6c2>
 8009258:	4620      	mov	r0, r4
 800925a:	ee18 1a10 	vmov	r1, s16
 800925e:	f000 fbed 	bl	8009a3c <_Bfree>
 8009262:	2300      	movs	r3, #0
 8009264:	9800      	ldr	r0, [sp, #0]
 8009266:	702b      	strb	r3, [r5, #0]
 8009268:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800926a:	3001      	adds	r0, #1
 800926c:	6018      	str	r0, [r3, #0]
 800926e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009270:	2b00      	cmp	r3, #0
 8009272:	f43f acf1 	beq.w	8008c58 <_dtoa_r+0xa0>
 8009276:	601d      	str	r5, [r3, #0]
 8009278:	e4ee      	b.n	8008c58 <_dtoa_r+0xa0>
 800927a:	9f00      	ldr	r7, [sp, #0]
 800927c:	462b      	mov	r3, r5
 800927e:	461d      	mov	r5, r3
 8009280:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009284:	2a39      	cmp	r2, #57	; 0x39
 8009286:	d106      	bne.n	8009296 <_dtoa_r+0x6de>
 8009288:	9a01      	ldr	r2, [sp, #4]
 800928a:	429a      	cmp	r2, r3
 800928c:	d1f7      	bne.n	800927e <_dtoa_r+0x6c6>
 800928e:	9901      	ldr	r1, [sp, #4]
 8009290:	2230      	movs	r2, #48	; 0x30
 8009292:	3701      	adds	r7, #1
 8009294:	700a      	strb	r2, [r1, #0]
 8009296:	781a      	ldrb	r2, [r3, #0]
 8009298:	3201      	adds	r2, #1
 800929a:	701a      	strb	r2, [r3, #0]
 800929c:	e790      	b.n	80091c0 <_dtoa_r+0x608>
 800929e:	4ba6      	ldr	r3, [pc, #664]	; (8009538 <_dtoa_r+0x980>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	f7f7 f9a9 	bl	80005f8 <__aeabi_dmul>
 80092a6:	2200      	movs	r2, #0
 80092a8:	2300      	movs	r3, #0
 80092aa:	4606      	mov	r6, r0
 80092ac:	460f      	mov	r7, r1
 80092ae:	f7f7 fc0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	d09d      	beq.n	80091f2 <_dtoa_r+0x63a>
 80092b6:	e7cf      	b.n	8009258 <_dtoa_r+0x6a0>
 80092b8:	9a08      	ldr	r2, [sp, #32]
 80092ba:	2a00      	cmp	r2, #0
 80092bc:	f000 80d7 	beq.w	800946e <_dtoa_r+0x8b6>
 80092c0:	9a06      	ldr	r2, [sp, #24]
 80092c2:	2a01      	cmp	r2, #1
 80092c4:	f300 80ba 	bgt.w	800943c <_dtoa_r+0x884>
 80092c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092ca:	2a00      	cmp	r2, #0
 80092cc:	f000 80b2 	beq.w	8009434 <_dtoa_r+0x87c>
 80092d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80092d4:	9e07      	ldr	r6, [sp, #28]
 80092d6:	9d04      	ldr	r5, [sp, #16]
 80092d8:	9a04      	ldr	r2, [sp, #16]
 80092da:	441a      	add	r2, r3
 80092dc:	9204      	str	r2, [sp, #16]
 80092de:	9a05      	ldr	r2, [sp, #20]
 80092e0:	2101      	movs	r1, #1
 80092e2:	441a      	add	r2, r3
 80092e4:	4620      	mov	r0, r4
 80092e6:	9205      	str	r2, [sp, #20]
 80092e8:	f000 fc60 	bl	8009bac <__i2b>
 80092ec:	4607      	mov	r7, r0
 80092ee:	2d00      	cmp	r5, #0
 80092f0:	dd0c      	ble.n	800930c <_dtoa_r+0x754>
 80092f2:	9b05      	ldr	r3, [sp, #20]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	dd09      	ble.n	800930c <_dtoa_r+0x754>
 80092f8:	42ab      	cmp	r3, r5
 80092fa:	9a04      	ldr	r2, [sp, #16]
 80092fc:	bfa8      	it	ge
 80092fe:	462b      	movge	r3, r5
 8009300:	1ad2      	subs	r2, r2, r3
 8009302:	9204      	str	r2, [sp, #16]
 8009304:	9a05      	ldr	r2, [sp, #20]
 8009306:	1aed      	subs	r5, r5, r3
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	9305      	str	r3, [sp, #20]
 800930c:	9b07      	ldr	r3, [sp, #28]
 800930e:	b31b      	cbz	r3, 8009358 <_dtoa_r+0x7a0>
 8009310:	9b08      	ldr	r3, [sp, #32]
 8009312:	2b00      	cmp	r3, #0
 8009314:	f000 80af 	beq.w	8009476 <_dtoa_r+0x8be>
 8009318:	2e00      	cmp	r6, #0
 800931a:	dd13      	ble.n	8009344 <_dtoa_r+0x78c>
 800931c:	4639      	mov	r1, r7
 800931e:	4632      	mov	r2, r6
 8009320:	4620      	mov	r0, r4
 8009322:	f000 fd03 	bl	8009d2c <__pow5mult>
 8009326:	ee18 2a10 	vmov	r2, s16
 800932a:	4601      	mov	r1, r0
 800932c:	4607      	mov	r7, r0
 800932e:	4620      	mov	r0, r4
 8009330:	f000 fc52 	bl	8009bd8 <__multiply>
 8009334:	ee18 1a10 	vmov	r1, s16
 8009338:	4680      	mov	r8, r0
 800933a:	4620      	mov	r0, r4
 800933c:	f000 fb7e 	bl	8009a3c <_Bfree>
 8009340:	ee08 8a10 	vmov	s16, r8
 8009344:	9b07      	ldr	r3, [sp, #28]
 8009346:	1b9a      	subs	r2, r3, r6
 8009348:	d006      	beq.n	8009358 <_dtoa_r+0x7a0>
 800934a:	ee18 1a10 	vmov	r1, s16
 800934e:	4620      	mov	r0, r4
 8009350:	f000 fcec 	bl	8009d2c <__pow5mult>
 8009354:	ee08 0a10 	vmov	s16, r0
 8009358:	2101      	movs	r1, #1
 800935a:	4620      	mov	r0, r4
 800935c:	f000 fc26 	bl	8009bac <__i2b>
 8009360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009362:	2b00      	cmp	r3, #0
 8009364:	4606      	mov	r6, r0
 8009366:	f340 8088 	ble.w	800947a <_dtoa_r+0x8c2>
 800936a:	461a      	mov	r2, r3
 800936c:	4601      	mov	r1, r0
 800936e:	4620      	mov	r0, r4
 8009370:	f000 fcdc 	bl	8009d2c <__pow5mult>
 8009374:	9b06      	ldr	r3, [sp, #24]
 8009376:	2b01      	cmp	r3, #1
 8009378:	4606      	mov	r6, r0
 800937a:	f340 8081 	ble.w	8009480 <_dtoa_r+0x8c8>
 800937e:	f04f 0800 	mov.w	r8, #0
 8009382:	6933      	ldr	r3, [r6, #16]
 8009384:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009388:	6918      	ldr	r0, [r3, #16]
 800938a:	f000 fbbf 	bl	8009b0c <__hi0bits>
 800938e:	f1c0 0020 	rsb	r0, r0, #32
 8009392:	9b05      	ldr	r3, [sp, #20]
 8009394:	4418      	add	r0, r3
 8009396:	f010 001f 	ands.w	r0, r0, #31
 800939a:	f000 8092 	beq.w	80094c2 <_dtoa_r+0x90a>
 800939e:	f1c0 0320 	rsb	r3, r0, #32
 80093a2:	2b04      	cmp	r3, #4
 80093a4:	f340 808a 	ble.w	80094bc <_dtoa_r+0x904>
 80093a8:	f1c0 001c 	rsb	r0, r0, #28
 80093ac:	9b04      	ldr	r3, [sp, #16]
 80093ae:	4403      	add	r3, r0
 80093b0:	9304      	str	r3, [sp, #16]
 80093b2:	9b05      	ldr	r3, [sp, #20]
 80093b4:	4403      	add	r3, r0
 80093b6:	4405      	add	r5, r0
 80093b8:	9305      	str	r3, [sp, #20]
 80093ba:	9b04      	ldr	r3, [sp, #16]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	dd07      	ble.n	80093d0 <_dtoa_r+0x818>
 80093c0:	ee18 1a10 	vmov	r1, s16
 80093c4:	461a      	mov	r2, r3
 80093c6:	4620      	mov	r0, r4
 80093c8:	f000 fd0a 	bl	8009de0 <__lshift>
 80093cc:	ee08 0a10 	vmov	s16, r0
 80093d0:	9b05      	ldr	r3, [sp, #20]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	dd05      	ble.n	80093e2 <_dtoa_r+0x82a>
 80093d6:	4631      	mov	r1, r6
 80093d8:	461a      	mov	r2, r3
 80093da:	4620      	mov	r0, r4
 80093dc:	f000 fd00 	bl	8009de0 <__lshift>
 80093e0:	4606      	mov	r6, r0
 80093e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d06e      	beq.n	80094c6 <_dtoa_r+0x90e>
 80093e8:	ee18 0a10 	vmov	r0, s16
 80093ec:	4631      	mov	r1, r6
 80093ee:	f000 fd67 	bl	8009ec0 <__mcmp>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	da67      	bge.n	80094c6 <_dtoa_r+0x90e>
 80093f6:	9b00      	ldr	r3, [sp, #0]
 80093f8:	3b01      	subs	r3, #1
 80093fa:	ee18 1a10 	vmov	r1, s16
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	220a      	movs	r2, #10
 8009402:	2300      	movs	r3, #0
 8009404:	4620      	mov	r0, r4
 8009406:	f000 fb3b 	bl	8009a80 <__multadd>
 800940a:	9b08      	ldr	r3, [sp, #32]
 800940c:	ee08 0a10 	vmov	s16, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	f000 81b1 	beq.w	8009778 <_dtoa_r+0xbc0>
 8009416:	2300      	movs	r3, #0
 8009418:	4639      	mov	r1, r7
 800941a:	220a      	movs	r2, #10
 800941c:	4620      	mov	r0, r4
 800941e:	f000 fb2f 	bl	8009a80 <__multadd>
 8009422:	9b02      	ldr	r3, [sp, #8]
 8009424:	2b00      	cmp	r3, #0
 8009426:	4607      	mov	r7, r0
 8009428:	f300 808e 	bgt.w	8009548 <_dtoa_r+0x990>
 800942c:	9b06      	ldr	r3, [sp, #24]
 800942e:	2b02      	cmp	r3, #2
 8009430:	dc51      	bgt.n	80094d6 <_dtoa_r+0x91e>
 8009432:	e089      	b.n	8009548 <_dtoa_r+0x990>
 8009434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009436:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800943a:	e74b      	b.n	80092d4 <_dtoa_r+0x71c>
 800943c:	9b03      	ldr	r3, [sp, #12]
 800943e:	1e5e      	subs	r6, r3, #1
 8009440:	9b07      	ldr	r3, [sp, #28]
 8009442:	42b3      	cmp	r3, r6
 8009444:	bfbf      	itttt	lt
 8009446:	9b07      	ldrlt	r3, [sp, #28]
 8009448:	9607      	strlt	r6, [sp, #28]
 800944a:	1af2      	sublt	r2, r6, r3
 800944c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800944e:	bfb6      	itet	lt
 8009450:	189b      	addlt	r3, r3, r2
 8009452:	1b9e      	subge	r6, r3, r6
 8009454:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009456:	9b03      	ldr	r3, [sp, #12]
 8009458:	bfb8      	it	lt
 800945a:	2600      	movlt	r6, #0
 800945c:	2b00      	cmp	r3, #0
 800945e:	bfb7      	itett	lt
 8009460:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009464:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009468:	1a9d      	sublt	r5, r3, r2
 800946a:	2300      	movlt	r3, #0
 800946c:	e734      	b.n	80092d8 <_dtoa_r+0x720>
 800946e:	9e07      	ldr	r6, [sp, #28]
 8009470:	9d04      	ldr	r5, [sp, #16]
 8009472:	9f08      	ldr	r7, [sp, #32]
 8009474:	e73b      	b.n	80092ee <_dtoa_r+0x736>
 8009476:	9a07      	ldr	r2, [sp, #28]
 8009478:	e767      	b.n	800934a <_dtoa_r+0x792>
 800947a:	9b06      	ldr	r3, [sp, #24]
 800947c:	2b01      	cmp	r3, #1
 800947e:	dc18      	bgt.n	80094b2 <_dtoa_r+0x8fa>
 8009480:	f1ba 0f00 	cmp.w	sl, #0
 8009484:	d115      	bne.n	80094b2 <_dtoa_r+0x8fa>
 8009486:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800948a:	b993      	cbnz	r3, 80094b2 <_dtoa_r+0x8fa>
 800948c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009490:	0d1b      	lsrs	r3, r3, #20
 8009492:	051b      	lsls	r3, r3, #20
 8009494:	b183      	cbz	r3, 80094b8 <_dtoa_r+0x900>
 8009496:	9b04      	ldr	r3, [sp, #16]
 8009498:	3301      	adds	r3, #1
 800949a:	9304      	str	r3, [sp, #16]
 800949c:	9b05      	ldr	r3, [sp, #20]
 800949e:	3301      	adds	r3, #1
 80094a0:	9305      	str	r3, [sp, #20]
 80094a2:	f04f 0801 	mov.w	r8, #1
 80094a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f47f af6a 	bne.w	8009382 <_dtoa_r+0x7ca>
 80094ae:	2001      	movs	r0, #1
 80094b0:	e76f      	b.n	8009392 <_dtoa_r+0x7da>
 80094b2:	f04f 0800 	mov.w	r8, #0
 80094b6:	e7f6      	b.n	80094a6 <_dtoa_r+0x8ee>
 80094b8:	4698      	mov	r8, r3
 80094ba:	e7f4      	b.n	80094a6 <_dtoa_r+0x8ee>
 80094bc:	f43f af7d 	beq.w	80093ba <_dtoa_r+0x802>
 80094c0:	4618      	mov	r0, r3
 80094c2:	301c      	adds	r0, #28
 80094c4:	e772      	b.n	80093ac <_dtoa_r+0x7f4>
 80094c6:	9b03      	ldr	r3, [sp, #12]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	dc37      	bgt.n	800953c <_dtoa_r+0x984>
 80094cc:	9b06      	ldr	r3, [sp, #24]
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	dd34      	ble.n	800953c <_dtoa_r+0x984>
 80094d2:	9b03      	ldr	r3, [sp, #12]
 80094d4:	9302      	str	r3, [sp, #8]
 80094d6:	9b02      	ldr	r3, [sp, #8]
 80094d8:	b96b      	cbnz	r3, 80094f6 <_dtoa_r+0x93e>
 80094da:	4631      	mov	r1, r6
 80094dc:	2205      	movs	r2, #5
 80094de:	4620      	mov	r0, r4
 80094e0:	f000 face 	bl	8009a80 <__multadd>
 80094e4:	4601      	mov	r1, r0
 80094e6:	4606      	mov	r6, r0
 80094e8:	ee18 0a10 	vmov	r0, s16
 80094ec:	f000 fce8 	bl	8009ec0 <__mcmp>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	f73f adbb 	bgt.w	800906c <_dtoa_r+0x4b4>
 80094f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094f8:	9d01      	ldr	r5, [sp, #4]
 80094fa:	43db      	mvns	r3, r3
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	f04f 0800 	mov.w	r8, #0
 8009502:	4631      	mov	r1, r6
 8009504:	4620      	mov	r0, r4
 8009506:	f000 fa99 	bl	8009a3c <_Bfree>
 800950a:	2f00      	cmp	r7, #0
 800950c:	f43f aea4 	beq.w	8009258 <_dtoa_r+0x6a0>
 8009510:	f1b8 0f00 	cmp.w	r8, #0
 8009514:	d005      	beq.n	8009522 <_dtoa_r+0x96a>
 8009516:	45b8      	cmp	r8, r7
 8009518:	d003      	beq.n	8009522 <_dtoa_r+0x96a>
 800951a:	4641      	mov	r1, r8
 800951c:	4620      	mov	r0, r4
 800951e:	f000 fa8d 	bl	8009a3c <_Bfree>
 8009522:	4639      	mov	r1, r7
 8009524:	4620      	mov	r0, r4
 8009526:	f000 fa89 	bl	8009a3c <_Bfree>
 800952a:	e695      	b.n	8009258 <_dtoa_r+0x6a0>
 800952c:	2600      	movs	r6, #0
 800952e:	4637      	mov	r7, r6
 8009530:	e7e1      	b.n	80094f6 <_dtoa_r+0x93e>
 8009532:	9700      	str	r7, [sp, #0]
 8009534:	4637      	mov	r7, r6
 8009536:	e599      	b.n	800906c <_dtoa_r+0x4b4>
 8009538:	40240000 	.word	0x40240000
 800953c:	9b08      	ldr	r3, [sp, #32]
 800953e:	2b00      	cmp	r3, #0
 8009540:	f000 80ca 	beq.w	80096d8 <_dtoa_r+0xb20>
 8009544:	9b03      	ldr	r3, [sp, #12]
 8009546:	9302      	str	r3, [sp, #8]
 8009548:	2d00      	cmp	r5, #0
 800954a:	dd05      	ble.n	8009558 <_dtoa_r+0x9a0>
 800954c:	4639      	mov	r1, r7
 800954e:	462a      	mov	r2, r5
 8009550:	4620      	mov	r0, r4
 8009552:	f000 fc45 	bl	8009de0 <__lshift>
 8009556:	4607      	mov	r7, r0
 8009558:	f1b8 0f00 	cmp.w	r8, #0
 800955c:	d05b      	beq.n	8009616 <_dtoa_r+0xa5e>
 800955e:	6879      	ldr	r1, [r7, #4]
 8009560:	4620      	mov	r0, r4
 8009562:	f000 fa2b 	bl	80099bc <_Balloc>
 8009566:	4605      	mov	r5, r0
 8009568:	b928      	cbnz	r0, 8009576 <_dtoa_r+0x9be>
 800956a:	4b87      	ldr	r3, [pc, #540]	; (8009788 <_dtoa_r+0xbd0>)
 800956c:	4602      	mov	r2, r0
 800956e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009572:	f7ff bb3b 	b.w	8008bec <_dtoa_r+0x34>
 8009576:	693a      	ldr	r2, [r7, #16]
 8009578:	3202      	adds	r2, #2
 800957a:	0092      	lsls	r2, r2, #2
 800957c:	f107 010c 	add.w	r1, r7, #12
 8009580:	300c      	adds	r0, #12
 8009582:	f000 fa0d 	bl	80099a0 <memcpy>
 8009586:	2201      	movs	r2, #1
 8009588:	4629      	mov	r1, r5
 800958a:	4620      	mov	r0, r4
 800958c:	f000 fc28 	bl	8009de0 <__lshift>
 8009590:	9b01      	ldr	r3, [sp, #4]
 8009592:	f103 0901 	add.w	r9, r3, #1
 8009596:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800959a:	4413      	add	r3, r2
 800959c:	9305      	str	r3, [sp, #20]
 800959e:	f00a 0301 	and.w	r3, sl, #1
 80095a2:	46b8      	mov	r8, r7
 80095a4:	9304      	str	r3, [sp, #16]
 80095a6:	4607      	mov	r7, r0
 80095a8:	4631      	mov	r1, r6
 80095aa:	ee18 0a10 	vmov	r0, s16
 80095ae:	f7ff fa75 	bl	8008a9c <quorem>
 80095b2:	4641      	mov	r1, r8
 80095b4:	9002      	str	r0, [sp, #8]
 80095b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80095ba:	ee18 0a10 	vmov	r0, s16
 80095be:	f000 fc7f 	bl	8009ec0 <__mcmp>
 80095c2:	463a      	mov	r2, r7
 80095c4:	9003      	str	r0, [sp, #12]
 80095c6:	4631      	mov	r1, r6
 80095c8:	4620      	mov	r0, r4
 80095ca:	f000 fc95 	bl	8009ef8 <__mdiff>
 80095ce:	68c2      	ldr	r2, [r0, #12]
 80095d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80095d4:	4605      	mov	r5, r0
 80095d6:	bb02      	cbnz	r2, 800961a <_dtoa_r+0xa62>
 80095d8:	4601      	mov	r1, r0
 80095da:	ee18 0a10 	vmov	r0, s16
 80095de:	f000 fc6f 	bl	8009ec0 <__mcmp>
 80095e2:	4602      	mov	r2, r0
 80095e4:	4629      	mov	r1, r5
 80095e6:	4620      	mov	r0, r4
 80095e8:	9207      	str	r2, [sp, #28]
 80095ea:	f000 fa27 	bl	8009a3c <_Bfree>
 80095ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80095f2:	ea43 0102 	orr.w	r1, r3, r2
 80095f6:	9b04      	ldr	r3, [sp, #16]
 80095f8:	430b      	orrs	r3, r1
 80095fa:	464d      	mov	r5, r9
 80095fc:	d10f      	bne.n	800961e <_dtoa_r+0xa66>
 80095fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009602:	d02a      	beq.n	800965a <_dtoa_r+0xaa2>
 8009604:	9b03      	ldr	r3, [sp, #12]
 8009606:	2b00      	cmp	r3, #0
 8009608:	dd02      	ble.n	8009610 <_dtoa_r+0xa58>
 800960a:	9b02      	ldr	r3, [sp, #8]
 800960c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009610:	f88b a000 	strb.w	sl, [fp]
 8009614:	e775      	b.n	8009502 <_dtoa_r+0x94a>
 8009616:	4638      	mov	r0, r7
 8009618:	e7ba      	b.n	8009590 <_dtoa_r+0x9d8>
 800961a:	2201      	movs	r2, #1
 800961c:	e7e2      	b.n	80095e4 <_dtoa_r+0xa2c>
 800961e:	9b03      	ldr	r3, [sp, #12]
 8009620:	2b00      	cmp	r3, #0
 8009622:	db04      	blt.n	800962e <_dtoa_r+0xa76>
 8009624:	9906      	ldr	r1, [sp, #24]
 8009626:	430b      	orrs	r3, r1
 8009628:	9904      	ldr	r1, [sp, #16]
 800962a:	430b      	orrs	r3, r1
 800962c:	d122      	bne.n	8009674 <_dtoa_r+0xabc>
 800962e:	2a00      	cmp	r2, #0
 8009630:	ddee      	ble.n	8009610 <_dtoa_r+0xa58>
 8009632:	ee18 1a10 	vmov	r1, s16
 8009636:	2201      	movs	r2, #1
 8009638:	4620      	mov	r0, r4
 800963a:	f000 fbd1 	bl	8009de0 <__lshift>
 800963e:	4631      	mov	r1, r6
 8009640:	ee08 0a10 	vmov	s16, r0
 8009644:	f000 fc3c 	bl	8009ec0 <__mcmp>
 8009648:	2800      	cmp	r0, #0
 800964a:	dc03      	bgt.n	8009654 <_dtoa_r+0xa9c>
 800964c:	d1e0      	bne.n	8009610 <_dtoa_r+0xa58>
 800964e:	f01a 0f01 	tst.w	sl, #1
 8009652:	d0dd      	beq.n	8009610 <_dtoa_r+0xa58>
 8009654:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009658:	d1d7      	bne.n	800960a <_dtoa_r+0xa52>
 800965a:	2339      	movs	r3, #57	; 0x39
 800965c:	f88b 3000 	strb.w	r3, [fp]
 8009660:	462b      	mov	r3, r5
 8009662:	461d      	mov	r5, r3
 8009664:	3b01      	subs	r3, #1
 8009666:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800966a:	2a39      	cmp	r2, #57	; 0x39
 800966c:	d071      	beq.n	8009752 <_dtoa_r+0xb9a>
 800966e:	3201      	adds	r2, #1
 8009670:	701a      	strb	r2, [r3, #0]
 8009672:	e746      	b.n	8009502 <_dtoa_r+0x94a>
 8009674:	2a00      	cmp	r2, #0
 8009676:	dd07      	ble.n	8009688 <_dtoa_r+0xad0>
 8009678:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800967c:	d0ed      	beq.n	800965a <_dtoa_r+0xaa2>
 800967e:	f10a 0301 	add.w	r3, sl, #1
 8009682:	f88b 3000 	strb.w	r3, [fp]
 8009686:	e73c      	b.n	8009502 <_dtoa_r+0x94a>
 8009688:	9b05      	ldr	r3, [sp, #20]
 800968a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800968e:	4599      	cmp	r9, r3
 8009690:	d047      	beq.n	8009722 <_dtoa_r+0xb6a>
 8009692:	ee18 1a10 	vmov	r1, s16
 8009696:	2300      	movs	r3, #0
 8009698:	220a      	movs	r2, #10
 800969a:	4620      	mov	r0, r4
 800969c:	f000 f9f0 	bl	8009a80 <__multadd>
 80096a0:	45b8      	cmp	r8, r7
 80096a2:	ee08 0a10 	vmov	s16, r0
 80096a6:	f04f 0300 	mov.w	r3, #0
 80096aa:	f04f 020a 	mov.w	r2, #10
 80096ae:	4641      	mov	r1, r8
 80096b0:	4620      	mov	r0, r4
 80096b2:	d106      	bne.n	80096c2 <_dtoa_r+0xb0a>
 80096b4:	f000 f9e4 	bl	8009a80 <__multadd>
 80096b8:	4680      	mov	r8, r0
 80096ba:	4607      	mov	r7, r0
 80096bc:	f109 0901 	add.w	r9, r9, #1
 80096c0:	e772      	b.n	80095a8 <_dtoa_r+0x9f0>
 80096c2:	f000 f9dd 	bl	8009a80 <__multadd>
 80096c6:	4639      	mov	r1, r7
 80096c8:	4680      	mov	r8, r0
 80096ca:	2300      	movs	r3, #0
 80096cc:	220a      	movs	r2, #10
 80096ce:	4620      	mov	r0, r4
 80096d0:	f000 f9d6 	bl	8009a80 <__multadd>
 80096d4:	4607      	mov	r7, r0
 80096d6:	e7f1      	b.n	80096bc <_dtoa_r+0xb04>
 80096d8:	9b03      	ldr	r3, [sp, #12]
 80096da:	9302      	str	r3, [sp, #8]
 80096dc:	9d01      	ldr	r5, [sp, #4]
 80096de:	ee18 0a10 	vmov	r0, s16
 80096e2:	4631      	mov	r1, r6
 80096e4:	f7ff f9da 	bl	8008a9c <quorem>
 80096e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80096ec:	9b01      	ldr	r3, [sp, #4]
 80096ee:	f805 ab01 	strb.w	sl, [r5], #1
 80096f2:	1aea      	subs	r2, r5, r3
 80096f4:	9b02      	ldr	r3, [sp, #8]
 80096f6:	4293      	cmp	r3, r2
 80096f8:	dd09      	ble.n	800970e <_dtoa_r+0xb56>
 80096fa:	ee18 1a10 	vmov	r1, s16
 80096fe:	2300      	movs	r3, #0
 8009700:	220a      	movs	r2, #10
 8009702:	4620      	mov	r0, r4
 8009704:	f000 f9bc 	bl	8009a80 <__multadd>
 8009708:	ee08 0a10 	vmov	s16, r0
 800970c:	e7e7      	b.n	80096de <_dtoa_r+0xb26>
 800970e:	9b02      	ldr	r3, [sp, #8]
 8009710:	2b00      	cmp	r3, #0
 8009712:	bfc8      	it	gt
 8009714:	461d      	movgt	r5, r3
 8009716:	9b01      	ldr	r3, [sp, #4]
 8009718:	bfd8      	it	le
 800971a:	2501      	movle	r5, #1
 800971c:	441d      	add	r5, r3
 800971e:	f04f 0800 	mov.w	r8, #0
 8009722:	ee18 1a10 	vmov	r1, s16
 8009726:	2201      	movs	r2, #1
 8009728:	4620      	mov	r0, r4
 800972a:	f000 fb59 	bl	8009de0 <__lshift>
 800972e:	4631      	mov	r1, r6
 8009730:	ee08 0a10 	vmov	s16, r0
 8009734:	f000 fbc4 	bl	8009ec0 <__mcmp>
 8009738:	2800      	cmp	r0, #0
 800973a:	dc91      	bgt.n	8009660 <_dtoa_r+0xaa8>
 800973c:	d102      	bne.n	8009744 <_dtoa_r+0xb8c>
 800973e:	f01a 0f01 	tst.w	sl, #1
 8009742:	d18d      	bne.n	8009660 <_dtoa_r+0xaa8>
 8009744:	462b      	mov	r3, r5
 8009746:	461d      	mov	r5, r3
 8009748:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800974c:	2a30      	cmp	r2, #48	; 0x30
 800974e:	d0fa      	beq.n	8009746 <_dtoa_r+0xb8e>
 8009750:	e6d7      	b.n	8009502 <_dtoa_r+0x94a>
 8009752:	9a01      	ldr	r2, [sp, #4]
 8009754:	429a      	cmp	r2, r3
 8009756:	d184      	bne.n	8009662 <_dtoa_r+0xaaa>
 8009758:	9b00      	ldr	r3, [sp, #0]
 800975a:	3301      	adds	r3, #1
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	2331      	movs	r3, #49	; 0x31
 8009760:	7013      	strb	r3, [r2, #0]
 8009762:	e6ce      	b.n	8009502 <_dtoa_r+0x94a>
 8009764:	4b09      	ldr	r3, [pc, #36]	; (800978c <_dtoa_r+0xbd4>)
 8009766:	f7ff ba95 	b.w	8008c94 <_dtoa_r+0xdc>
 800976a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800976c:	2b00      	cmp	r3, #0
 800976e:	f47f aa6e 	bne.w	8008c4e <_dtoa_r+0x96>
 8009772:	4b07      	ldr	r3, [pc, #28]	; (8009790 <_dtoa_r+0xbd8>)
 8009774:	f7ff ba8e 	b.w	8008c94 <_dtoa_r+0xdc>
 8009778:	9b02      	ldr	r3, [sp, #8]
 800977a:	2b00      	cmp	r3, #0
 800977c:	dcae      	bgt.n	80096dc <_dtoa_r+0xb24>
 800977e:	9b06      	ldr	r3, [sp, #24]
 8009780:	2b02      	cmp	r3, #2
 8009782:	f73f aea8 	bgt.w	80094d6 <_dtoa_r+0x91e>
 8009786:	e7a9      	b.n	80096dc <_dtoa_r+0xb24>
 8009788:	0800ad5f 	.word	0x0800ad5f
 800978c:	0800acbc 	.word	0x0800acbc
 8009790:	0800ace0 	.word	0x0800ace0

08009794 <std>:
 8009794:	2300      	movs	r3, #0
 8009796:	b510      	push	{r4, lr}
 8009798:	4604      	mov	r4, r0
 800979a:	e9c0 3300 	strd	r3, r3, [r0]
 800979e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097a2:	6083      	str	r3, [r0, #8]
 80097a4:	8181      	strh	r1, [r0, #12]
 80097a6:	6643      	str	r3, [r0, #100]	; 0x64
 80097a8:	81c2      	strh	r2, [r0, #14]
 80097aa:	6183      	str	r3, [r0, #24]
 80097ac:	4619      	mov	r1, r3
 80097ae:	2208      	movs	r2, #8
 80097b0:	305c      	adds	r0, #92	; 0x5c
 80097b2:	f7fe fce9 	bl	8008188 <memset>
 80097b6:	4b05      	ldr	r3, [pc, #20]	; (80097cc <std+0x38>)
 80097b8:	6263      	str	r3, [r4, #36]	; 0x24
 80097ba:	4b05      	ldr	r3, [pc, #20]	; (80097d0 <std+0x3c>)
 80097bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80097be:	4b05      	ldr	r3, [pc, #20]	; (80097d4 <std+0x40>)
 80097c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097c2:	4b05      	ldr	r3, [pc, #20]	; (80097d8 <std+0x44>)
 80097c4:	6224      	str	r4, [r4, #32]
 80097c6:	6323      	str	r3, [r4, #48]	; 0x30
 80097c8:	bd10      	pop	{r4, pc}
 80097ca:	bf00      	nop
 80097cc:	0800a585 	.word	0x0800a585
 80097d0:	0800a5a7 	.word	0x0800a5a7
 80097d4:	0800a5df 	.word	0x0800a5df
 80097d8:	0800a603 	.word	0x0800a603

080097dc <_cleanup_r>:
 80097dc:	4901      	ldr	r1, [pc, #4]	; (80097e4 <_cleanup_r+0x8>)
 80097de:	f000 b8af 	b.w	8009940 <_fwalk_reent>
 80097e2:	bf00      	nop
 80097e4:	0800a919 	.word	0x0800a919

080097e8 <__sfmoreglue>:
 80097e8:	b570      	push	{r4, r5, r6, lr}
 80097ea:	2268      	movs	r2, #104	; 0x68
 80097ec:	1e4d      	subs	r5, r1, #1
 80097ee:	4355      	muls	r5, r2
 80097f0:	460e      	mov	r6, r1
 80097f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80097f6:	f000 fce7 	bl	800a1c8 <_malloc_r>
 80097fa:	4604      	mov	r4, r0
 80097fc:	b140      	cbz	r0, 8009810 <__sfmoreglue+0x28>
 80097fe:	2100      	movs	r1, #0
 8009800:	e9c0 1600 	strd	r1, r6, [r0]
 8009804:	300c      	adds	r0, #12
 8009806:	60a0      	str	r0, [r4, #8]
 8009808:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800980c:	f7fe fcbc 	bl	8008188 <memset>
 8009810:	4620      	mov	r0, r4
 8009812:	bd70      	pop	{r4, r5, r6, pc}

08009814 <__sfp_lock_acquire>:
 8009814:	4801      	ldr	r0, [pc, #4]	; (800981c <__sfp_lock_acquire+0x8>)
 8009816:	f000 b8b8 	b.w	800998a <__retarget_lock_acquire_recursive>
 800981a:	bf00      	nop
 800981c:	20000a61 	.word	0x20000a61

08009820 <__sfp_lock_release>:
 8009820:	4801      	ldr	r0, [pc, #4]	; (8009828 <__sfp_lock_release+0x8>)
 8009822:	f000 b8b3 	b.w	800998c <__retarget_lock_release_recursive>
 8009826:	bf00      	nop
 8009828:	20000a61 	.word	0x20000a61

0800982c <__sinit_lock_acquire>:
 800982c:	4801      	ldr	r0, [pc, #4]	; (8009834 <__sinit_lock_acquire+0x8>)
 800982e:	f000 b8ac 	b.w	800998a <__retarget_lock_acquire_recursive>
 8009832:	bf00      	nop
 8009834:	20000a62 	.word	0x20000a62

08009838 <__sinit_lock_release>:
 8009838:	4801      	ldr	r0, [pc, #4]	; (8009840 <__sinit_lock_release+0x8>)
 800983a:	f000 b8a7 	b.w	800998c <__retarget_lock_release_recursive>
 800983e:	bf00      	nop
 8009840:	20000a62 	.word	0x20000a62

08009844 <__sinit>:
 8009844:	b510      	push	{r4, lr}
 8009846:	4604      	mov	r4, r0
 8009848:	f7ff fff0 	bl	800982c <__sinit_lock_acquire>
 800984c:	69a3      	ldr	r3, [r4, #24]
 800984e:	b11b      	cbz	r3, 8009858 <__sinit+0x14>
 8009850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009854:	f7ff bff0 	b.w	8009838 <__sinit_lock_release>
 8009858:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800985c:	6523      	str	r3, [r4, #80]	; 0x50
 800985e:	4b13      	ldr	r3, [pc, #76]	; (80098ac <__sinit+0x68>)
 8009860:	4a13      	ldr	r2, [pc, #76]	; (80098b0 <__sinit+0x6c>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	62a2      	str	r2, [r4, #40]	; 0x28
 8009866:	42a3      	cmp	r3, r4
 8009868:	bf04      	itt	eq
 800986a:	2301      	moveq	r3, #1
 800986c:	61a3      	streq	r3, [r4, #24]
 800986e:	4620      	mov	r0, r4
 8009870:	f000 f820 	bl	80098b4 <__sfp>
 8009874:	6060      	str	r0, [r4, #4]
 8009876:	4620      	mov	r0, r4
 8009878:	f000 f81c 	bl	80098b4 <__sfp>
 800987c:	60a0      	str	r0, [r4, #8]
 800987e:	4620      	mov	r0, r4
 8009880:	f000 f818 	bl	80098b4 <__sfp>
 8009884:	2200      	movs	r2, #0
 8009886:	60e0      	str	r0, [r4, #12]
 8009888:	2104      	movs	r1, #4
 800988a:	6860      	ldr	r0, [r4, #4]
 800988c:	f7ff ff82 	bl	8009794 <std>
 8009890:	68a0      	ldr	r0, [r4, #8]
 8009892:	2201      	movs	r2, #1
 8009894:	2109      	movs	r1, #9
 8009896:	f7ff ff7d 	bl	8009794 <std>
 800989a:	68e0      	ldr	r0, [r4, #12]
 800989c:	2202      	movs	r2, #2
 800989e:	2112      	movs	r1, #18
 80098a0:	f7ff ff78 	bl	8009794 <std>
 80098a4:	2301      	movs	r3, #1
 80098a6:	61a3      	str	r3, [r4, #24]
 80098a8:	e7d2      	b.n	8009850 <__sinit+0xc>
 80098aa:	bf00      	nop
 80098ac:	0800aca8 	.word	0x0800aca8
 80098b0:	080097dd 	.word	0x080097dd

080098b4 <__sfp>:
 80098b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b6:	4607      	mov	r7, r0
 80098b8:	f7ff ffac 	bl	8009814 <__sfp_lock_acquire>
 80098bc:	4b1e      	ldr	r3, [pc, #120]	; (8009938 <__sfp+0x84>)
 80098be:	681e      	ldr	r6, [r3, #0]
 80098c0:	69b3      	ldr	r3, [r6, #24]
 80098c2:	b913      	cbnz	r3, 80098ca <__sfp+0x16>
 80098c4:	4630      	mov	r0, r6
 80098c6:	f7ff ffbd 	bl	8009844 <__sinit>
 80098ca:	3648      	adds	r6, #72	; 0x48
 80098cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80098d0:	3b01      	subs	r3, #1
 80098d2:	d503      	bpl.n	80098dc <__sfp+0x28>
 80098d4:	6833      	ldr	r3, [r6, #0]
 80098d6:	b30b      	cbz	r3, 800991c <__sfp+0x68>
 80098d8:	6836      	ldr	r6, [r6, #0]
 80098da:	e7f7      	b.n	80098cc <__sfp+0x18>
 80098dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80098e0:	b9d5      	cbnz	r5, 8009918 <__sfp+0x64>
 80098e2:	4b16      	ldr	r3, [pc, #88]	; (800993c <__sfp+0x88>)
 80098e4:	60e3      	str	r3, [r4, #12]
 80098e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80098ea:	6665      	str	r5, [r4, #100]	; 0x64
 80098ec:	f000 f84c 	bl	8009988 <__retarget_lock_init_recursive>
 80098f0:	f7ff ff96 	bl	8009820 <__sfp_lock_release>
 80098f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80098f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80098fc:	6025      	str	r5, [r4, #0]
 80098fe:	61a5      	str	r5, [r4, #24]
 8009900:	2208      	movs	r2, #8
 8009902:	4629      	mov	r1, r5
 8009904:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009908:	f7fe fc3e 	bl	8008188 <memset>
 800990c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009910:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009914:	4620      	mov	r0, r4
 8009916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009918:	3468      	adds	r4, #104	; 0x68
 800991a:	e7d9      	b.n	80098d0 <__sfp+0x1c>
 800991c:	2104      	movs	r1, #4
 800991e:	4638      	mov	r0, r7
 8009920:	f7ff ff62 	bl	80097e8 <__sfmoreglue>
 8009924:	4604      	mov	r4, r0
 8009926:	6030      	str	r0, [r6, #0]
 8009928:	2800      	cmp	r0, #0
 800992a:	d1d5      	bne.n	80098d8 <__sfp+0x24>
 800992c:	f7ff ff78 	bl	8009820 <__sfp_lock_release>
 8009930:	230c      	movs	r3, #12
 8009932:	603b      	str	r3, [r7, #0]
 8009934:	e7ee      	b.n	8009914 <__sfp+0x60>
 8009936:	bf00      	nop
 8009938:	0800aca8 	.word	0x0800aca8
 800993c:	ffff0001 	.word	0xffff0001

08009940 <_fwalk_reent>:
 8009940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009944:	4606      	mov	r6, r0
 8009946:	4688      	mov	r8, r1
 8009948:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800994c:	2700      	movs	r7, #0
 800994e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009952:	f1b9 0901 	subs.w	r9, r9, #1
 8009956:	d505      	bpl.n	8009964 <_fwalk_reent+0x24>
 8009958:	6824      	ldr	r4, [r4, #0]
 800995a:	2c00      	cmp	r4, #0
 800995c:	d1f7      	bne.n	800994e <_fwalk_reent+0xe>
 800995e:	4638      	mov	r0, r7
 8009960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009964:	89ab      	ldrh	r3, [r5, #12]
 8009966:	2b01      	cmp	r3, #1
 8009968:	d907      	bls.n	800997a <_fwalk_reent+0x3a>
 800996a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800996e:	3301      	adds	r3, #1
 8009970:	d003      	beq.n	800997a <_fwalk_reent+0x3a>
 8009972:	4629      	mov	r1, r5
 8009974:	4630      	mov	r0, r6
 8009976:	47c0      	blx	r8
 8009978:	4307      	orrs	r7, r0
 800997a:	3568      	adds	r5, #104	; 0x68
 800997c:	e7e9      	b.n	8009952 <_fwalk_reent+0x12>
	...

08009980 <_localeconv_r>:
 8009980:	4800      	ldr	r0, [pc, #0]	; (8009984 <_localeconv_r+0x4>)
 8009982:	4770      	bx	lr
 8009984:	20000160 	.word	0x20000160

08009988 <__retarget_lock_init_recursive>:
 8009988:	4770      	bx	lr

0800998a <__retarget_lock_acquire_recursive>:
 800998a:	4770      	bx	lr

0800998c <__retarget_lock_release_recursive>:
 800998c:	4770      	bx	lr
	...

08009990 <malloc>:
 8009990:	4b02      	ldr	r3, [pc, #8]	; (800999c <malloc+0xc>)
 8009992:	4601      	mov	r1, r0
 8009994:	6818      	ldr	r0, [r3, #0]
 8009996:	f000 bc17 	b.w	800a1c8 <_malloc_r>
 800999a:	bf00      	nop
 800999c:	2000000c 	.word	0x2000000c

080099a0 <memcpy>:
 80099a0:	440a      	add	r2, r1
 80099a2:	4291      	cmp	r1, r2
 80099a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80099a8:	d100      	bne.n	80099ac <memcpy+0xc>
 80099aa:	4770      	bx	lr
 80099ac:	b510      	push	{r4, lr}
 80099ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099b6:	4291      	cmp	r1, r2
 80099b8:	d1f9      	bne.n	80099ae <memcpy+0xe>
 80099ba:	bd10      	pop	{r4, pc}

080099bc <_Balloc>:
 80099bc:	b570      	push	{r4, r5, r6, lr}
 80099be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099c0:	4604      	mov	r4, r0
 80099c2:	460d      	mov	r5, r1
 80099c4:	b976      	cbnz	r6, 80099e4 <_Balloc+0x28>
 80099c6:	2010      	movs	r0, #16
 80099c8:	f7ff ffe2 	bl	8009990 <malloc>
 80099cc:	4602      	mov	r2, r0
 80099ce:	6260      	str	r0, [r4, #36]	; 0x24
 80099d0:	b920      	cbnz	r0, 80099dc <_Balloc+0x20>
 80099d2:	4b18      	ldr	r3, [pc, #96]	; (8009a34 <_Balloc+0x78>)
 80099d4:	4818      	ldr	r0, [pc, #96]	; (8009a38 <_Balloc+0x7c>)
 80099d6:	2166      	movs	r1, #102	; 0x66
 80099d8:	f000 feea 	bl	800a7b0 <__assert_func>
 80099dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099e0:	6006      	str	r6, [r0, #0]
 80099e2:	60c6      	str	r6, [r0, #12]
 80099e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80099e6:	68f3      	ldr	r3, [r6, #12]
 80099e8:	b183      	cbz	r3, 8009a0c <_Balloc+0x50>
 80099ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099f2:	b9b8      	cbnz	r0, 8009a24 <_Balloc+0x68>
 80099f4:	2101      	movs	r1, #1
 80099f6:	fa01 f605 	lsl.w	r6, r1, r5
 80099fa:	1d72      	adds	r2, r6, #5
 80099fc:	0092      	lsls	r2, r2, #2
 80099fe:	4620      	mov	r0, r4
 8009a00:	f000 fb60 	bl	800a0c4 <_calloc_r>
 8009a04:	b160      	cbz	r0, 8009a20 <_Balloc+0x64>
 8009a06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a0a:	e00e      	b.n	8009a2a <_Balloc+0x6e>
 8009a0c:	2221      	movs	r2, #33	; 0x21
 8009a0e:	2104      	movs	r1, #4
 8009a10:	4620      	mov	r0, r4
 8009a12:	f000 fb57 	bl	800a0c4 <_calloc_r>
 8009a16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a18:	60f0      	str	r0, [r6, #12]
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1e4      	bne.n	80099ea <_Balloc+0x2e>
 8009a20:	2000      	movs	r0, #0
 8009a22:	bd70      	pop	{r4, r5, r6, pc}
 8009a24:	6802      	ldr	r2, [r0, #0]
 8009a26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a30:	e7f7      	b.n	8009a22 <_Balloc+0x66>
 8009a32:	bf00      	nop
 8009a34:	0800aced 	.word	0x0800aced
 8009a38:	0800add0 	.word	0x0800add0

08009a3c <_Bfree>:
 8009a3c:	b570      	push	{r4, r5, r6, lr}
 8009a3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a40:	4605      	mov	r5, r0
 8009a42:	460c      	mov	r4, r1
 8009a44:	b976      	cbnz	r6, 8009a64 <_Bfree+0x28>
 8009a46:	2010      	movs	r0, #16
 8009a48:	f7ff ffa2 	bl	8009990 <malloc>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	6268      	str	r0, [r5, #36]	; 0x24
 8009a50:	b920      	cbnz	r0, 8009a5c <_Bfree+0x20>
 8009a52:	4b09      	ldr	r3, [pc, #36]	; (8009a78 <_Bfree+0x3c>)
 8009a54:	4809      	ldr	r0, [pc, #36]	; (8009a7c <_Bfree+0x40>)
 8009a56:	218a      	movs	r1, #138	; 0x8a
 8009a58:	f000 feaa 	bl	800a7b0 <__assert_func>
 8009a5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a60:	6006      	str	r6, [r0, #0]
 8009a62:	60c6      	str	r6, [r0, #12]
 8009a64:	b13c      	cbz	r4, 8009a76 <_Bfree+0x3a>
 8009a66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a68:	6862      	ldr	r2, [r4, #4]
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a70:	6021      	str	r1, [r4, #0]
 8009a72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a76:	bd70      	pop	{r4, r5, r6, pc}
 8009a78:	0800aced 	.word	0x0800aced
 8009a7c:	0800add0 	.word	0x0800add0

08009a80 <__multadd>:
 8009a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a84:	690d      	ldr	r5, [r1, #16]
 8009a86:	4607      	mov	r7, r0
 8009a88:	460c      	mov	r4, r1
 8009a8a:	461e      	mov	r6, r3
 8009a8c:	f101 0c14 	add.w	ip, r1, #20
 8009a90:	2000      	movs	r0, #0
 8009a92:	f8dc 3000 	ldr.w	r3, [ip]
 8009a96:	b299      	uxth	r1, r3
 8009a98:	fb02 6101 	mla	r1, r2, r1, r6
 8009a9c:	0c1e      	lsrs	r6, r3, #16
 8009a9e:	0c0b      	lsrs	r3, r1, #16
 8009aa0:	fb02 3306 	mla	r3, r2, r6, r3
 8009aa4:	b289      	uxth	r1, r1
 8009aa6:	3001      	adds	r0, #1
 8009aa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009aac:	4285      	cmp	r5, r0
 8009aae:	f84c 1b04 	str.w	r1, [ip], #4
 8009ab2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ab6:	dcec      	bgt.n	8009a92 <__multadd+0x12>
 8009ab8:	b30e      	cbz	r6, 8009afe <__multadd+0x7e>
 8009aba:	68a3      	ldr	r3, [r4, #8]
 8009abc:	42ab      	cmp	r3, r5
 8009abe:	dc19      	bgt.n	8009af4 <__multadd+0x74>
 8009ac0:	6861      	ldr	r1, [r4, #4]
 8009ac2:	4638      	mov	r0, r7
 8009ac4:	3101      	adds	r1, #1
 8009ac6:	f7ff ff79 	bl	80099bc <_Balloc>
 8009aca:	4680      	mov	r8, r0
 8009acc:	b928      	cbnz	r0, 8009ada <__multadd+0x5a>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	4b0c      	ldr	r3, [pc, #48]	; (8009b04 <__multadd+0x84>)
 8009ad2:	480d      	ldr	r0, [pc, #52]	; (8009b08 <__multadd+0x88>)
 8009ad4:	21b5      	movs	r1, #181	; 0xb5
 8009ad6:	f000 fe6b 	bl	800a7b0 <__assert_func>
 8009ada:	6922      	ldr	r2, [r4, #16]
 8009adc:	3202      	adds	r2, #2
 8009ade:	f104 010c 	add.w	r1, r4, #12
 8009ae2:	0092      	lsls	r2, r2, #2
 8009ae4:	300c      	adds	r0, #12
 8009ae6:	f7ff ff5b 	bl	80099a0 <memcpy>
 8009aea:	4621      	mov	r1, r4
 8009aec:	4638      	mov	r0, r7
 8009aee:	f7ff ffa5 	bl	8009a3c <_Bfree>
 8009af2:	4644      	mov	r4, r8
 8009af4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009af8:	3501      	adds	r5, #1
 8009afa:	615e      	str	r6, [r3, #20]
 8009afc:	6125      	str	r5, [r4, #16]
 8009afe:	4620      	mov	r0, r4
 8009b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b04:	0800ad5f 	.word	0x0800ad5f
 8009b08:	0800add0 	.word	0x0800add0

08009b0c <__hi0bits>:
 8009b0c:	0c03      	lsrs	r3, r0, #16
 8009b0e:	041b      	lsls	r3, r3, #16
 8009b10:	b9d3      	cbnz	r3, 8009b48 <__hi0bits+0x3c>
 8009b12:	0400      	lsls	r0, r0, #16
 8009b14:	2310      	movs	r3, #16
 8009b16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b1a:	bf04      	itt	eq
 8009b1c:	0200      	lsleq	r0, r0, #8
 8009b1e:	3308      	addeq	r3, #8
 8009b20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b24:	bf04      	itt	eq
 8009b26:	0100      	lsleq	r0, r0, #4
 8009b28:	3304      	addeq	r3, #4
 8009b2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b2e:	bf04      	itt	eq
 8009b30:	0080      	lsleq	r0, r0, #2
 8009b32:	3302      	addeq	r3, #2
 8009b34:	2800      	cmp	r0, #0
 8009b36:	db05      	blt.n	8009b44 <__hi0bits+0x38>
 8009b38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b3c:	f103 0301 	add.w	r3, r3, #1
 8009b40:	bf08      	it	eq
 8009b42:	2320      	moveq	r3, #32
 8009b44:	4618      	mov	r0, r3
 8009b46:	4770      	bx	lr
 8009b48:	2300      	movs	r3, #0
 8009b4a:	e7e4      	b.n	8009b16 <__hi0bits+0xa>

08009b4c <__lo0bits>:
 8009b4c:	6803      	ldr	r3, [r0, #0]
 8009b4e:	f013 0207 	ands.w	r2, r3, #7
 8009b52:	4601      	mov	r1, r0
 8009b54:	d00b      	beq.n	8009b6e <__lo0bits+0x22>
 8009b56:	07da      	lsls	r2, r3, #31
 8009b58:	d423      	bmi.n	8009ba2 <__lo0bits+0x56>
 8009b5a:	0798      	lsls	r0, r3, #30
 8009b5c:	bf49      	itett	mi
 8009b5e:	085b      	lsrmi	r3, r3, #1
 8009b60:	089b      	lsrpl	r3, r3, #2
 8009b62:	2001      	movmi	r0, #1
 8009b64:	600b      	strmi	r3, [r1, #0]
 8009b66:	bf5c      	itt	pl
 8009b68:	600b      	strpl	r3, [r1, #0]
 8009b6a:	2002      	movpl	r0, #2
 8009b6c:	4770      	bx	lr
 8009b6e:	b298      	uxth	r0, r3
 8009b70:	b9a8      	cbnz	r0, 8009b9e <__lo0bits+0x52>
 8009b72:	0c1b      	lsrs	r3, r3, #16
 8009b74:	2010      	movs	r0, #16
 8009b76:	b2da      	uxtb	r2, r3
 8009b78:	b90a      	cbnz	r2, 8009b7e <__lo0bits+0x32>
 8009b7a:	3008      	adds	r0, #8
 8009b7c:	0a1b      	lsrs	r3, r3, #8
 8009b7e:	071a      	lsls	r2, r3, #28
 8009b80:	bf04      	itt	eq
 8009b82:	091b      	lsreq	r3, r3, #4
 8009b84:	3004      	addeq	r0, #4
 8009b86:	079a      	lsls	r2, r3, #30
 8009b88:	bf04      	itt	eq
 8009b8a:	089b      	lsreq	r3, r3, #2
 8009b8c:	3002      	addeq	r0, #2
 8009b8e:	07da      	lsls	r2, r3, #31
 8009b90:	d403      	bmi.n	8009b9a <__lo0bits+0x4e>
 8009b92:	085b      	lsrs	r3, r3, #1
 8009b94:	f100 0001 	add.w	r0, r0, #1
 8009b98:	d005      	beq.n	8009ba6 <__lo0bits+0x5a>
 8009b9a:	600b      	str	r3, [r1, #0]
 8009b9c:	4770      	bx	lr
 8009b9e:	4610      	mov	r0, r2
 8009ba0:	e7e9      	b.n	8009b76 <__lo0bits+0x2a>
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	4770      	bx	lr
 8009ba6:	2020      	movs	r0, #32
 8009ba8:	4770      	bx	lr
	...

08009bac <__i2b>:
 8009bac:	b510      	push	{r4, lr}
 8009bae:	460c      	mov	r4, r1
 8009bb0:	2101      	movs	r1, #1
 8009bb2:	f7ff ff03 	bl	80099bc <_Balloc>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	b928      	cbnz	r0, 8009bc6 <__i2b+0x1a>
 8009bba:	4b05      	ldr	r3, [pc, #20]	; (8009bd0 <__i2b+0x24>)
 8009bbc:	4805      	ldr	r0, [pc, #20]	; (8009bd4 <__i2b+0x28>)
 8009bbe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009bc2:	f000 fdf5 	bl	800a7b0 <__assert_func>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	6144      	str	r4, [r0, #20]
 8009bca:	6103      	str	r3, [r0, #16]
 8009bcc:	bd10      	pop	{r4, pc}
 8009bce:	bf00      	nop
 8009bd0:	0800ad5f 	.word	0x0800ad5f
 8009bd4:	0800add0 	.word	0x0800add0

08009bd8 <__multiply>:
 8009bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bdc:	4691      	mov	r9, r2
 8009bde:	690a      	ldr	r2, [r1, #16]
 8009be0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	bfb8      	it	lt
 8009be8:	460b      	movlt	r3, r1
 8009bea:	460c      	mov	r4, r1
 8009bec:	bfbc      	itt	lt
 8009bee:	464c      	movlt	r4, r9
 8009bf0:	4699      	movlt	r9, r3
 8009bf2:	6927      	ldr	r7, [r4, #16]
 8009bf4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009bf8:	68a3      	ldr	r3, [r4, #8]
 8009bfa:	6861      	ldr	r1, [r4, #4]
 8009bfc:	eb07 060a 	add.w	r6, r7, sl
 8009c00:	42b3      	cmp	r3, r6
 8009c02:	b085      	sub	sp, #20
 8009c04:	bfb8      	it	lt
 8009c06:	3101      	addlt	r1, #1
 8009c08:	f7ff fed8 	bl	80099bc <_Balloc>
 8009c0c:	b930      	cbnz	r0, 8009c1c <__multiply+0x44>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	4b44      	ldr	r3, [pc, #272]	; (8009d24 <__multiply+0x14c>)
 8009c12:	4845      	ldr	r0, [pc, #276]	; (8009d28 <__multiply+0x150>)
 8009c14:	f240 115d 	movw	r1, #349	; 0x15d
 8009c18:	f000 fdca 	bl	800a7b0 <__assert_func>
 8009c1c:	f100 0514 	add.w	r5, r0, #20
 8009c20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c24:	462b      	mov	r3, r5
 8009c26:	2200      	movs	r2, #0
 8009c28:	4543      	cmp	r3, r8
 8009c2a:	d321      	bcc.n	8009c70 <__multiply+0x98>
 8009c2c:	f104 0314 	add.w	r3, r4, #20
 8009c30:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c34:	f109 0314 	add.w	r3, r9, #20
 8009c38:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c3c:	9202      	str	r2, [sp, #8]
 8009c3e:	1b3a      	subs	r2, r7, r4
 8009c40:	3a15      	subs	r2, #21
 8009c42:	f022 0203 	bic.w	r2, r2, #3
 8009c46:	3204      	adds	r2, #4
 8009c48:	f104 0115 	add.w	r1, r4, #21
 8009c4c:	428f      	cmp	r7, r1
 8009c4e:	bf38      	it	cc
 8009c50:	2204      	movcc	r2, #4
 8009c52:	9201      	str	r2, [sp, #4]
 8009c54:	9a02      	ldr	r2, [sp, #8]
 8009c56:	9303      	str	r3, [sp, #12]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d80c      	bhi.n	8009c76 <__multiply+0x9e>
 8009c5c:	2e00      	cmp	r6, #0
 8009c5e:	dd03      	ble.n	8009c68 <__multiply+0x90>
 8009c60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d05a      	beq.n	8009d1e <__multiply+0x146>
 8009c68:	6106      	str	r6, [r0, #16]
 8009c6a:	b005      	add	sp, #20
 8009c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c70:	f843 2b04 	str.w	r2, [r3], #4
 8009c74:	e7d8      	b.n	8009c28 <__multiply+0x50>
 8009c76:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c7a:	f1ba 0f00 	cmp.w	sl, #0
 8009c7e:	d024      	beq.n	8009cca <__multiply+0xf2>
 8009c80:	f104 0e14 	add.w	lr, r4, #20
 8009c84:	46a9      	mov	r9, r5
 8009c86:	f04f 0c00 	mov.w	ip, #0
 8009c8a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009c8e:	f8d9 1000 	ldr.w	r1, [r9]
 8009c92:	fa1f fb82 	uxth.w	fp, r2
 8009c96:	b289      	uxth	r1, r1
 8009c98:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c9c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009ca0:	f8d9 2000 	ldr.w	r2, [r9]
 8009ca4:	4461      	add	r1, ip
 8009ca6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009caa:	fb0a c20b 	mla	r2, sl, fp, ip
 8009cae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009cb2:	b289      	uxth	r1, r1
 8009cb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009cb8:	4577      	cmp	r7, lr
 8009cba:	f849 1b04 	str.w	r1, [r9], #4
 8009cbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cc2:	d8e2      	bhi.n	8009c8a <__multiply+0xb2>
 8009cc4:	9a01      	ldr	r2, [sp, #4]
 8009cc6:	f845 c002 	str.w	ip, [r5, r2]
 8009cca:	9a03      	ldr	r2, [sp, #12]
 8009ccc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009cd0:	3304      	adds	r3, #4
 8009cd2:	f1b9 0f00 	cmp.w	r9, #0
 8009cd6:	d020      	beq.n	8009d1a <__multiply+0x142>
 8009cd8:	6829      	ldr	r1, [r5, #0]
 8009cda:	f104 0c14 	add.w	ip, r4, #20
 8009cde:	46ae      	mov	lr, r5
 8009ce0:	f04f 0a00 	mov.w	sl, #0
 8009ce4:	f8bc b000 	ldrh.w	fp, [ip]
 8009ce8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009cec:	fb09 220b 	mla	r2, r9, fp, r2
 8009cf0:	4492      	add	sl, r2
 8009cf2:	b289      	uxth	r1, r1
 8009cf4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009cf8:	f84e 1b04 	str.w	r1, [lr], #4
 8009cfc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009d00:	f8be 1000 	ldrh.w	r1, [lr]
 8009d04:	0c12      	lsrs	r2, r2, #16
 8009d06:	fb09 1102 	mla	r1, r9, r2, r1
 8009d0a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009d0e:	4567      	cmp	r7, ip
 8009d10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d14:	d8e6      	bhi.n	8009ce4 <__multiply+0x10c>
 8009d16:	9a01      	ldr	r2, [sp, #4]
 8009d18:	50a9      	str	r1, [r5, r2]
 8009d1a:	3504      	adds	r5, #4
 8009d1c:	e79a      	b.n	8009c54 <__multiply+0x7c>
 8009d1e:	3e01      	subs	r6, #1
 8009d20:	e79c      	b.n	8009c5c <__multiply+0x84>
 8009d22:	bf00      	nop
 8009d24:	0800ad5f 	.word	0x0800ad5f
 8009d28:	0800add0 	.word	0x0800add0

08009d2c <__pow5mult>:
 8009d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d30:	4615      	mov	r5, r2
 8009d32:	f012 0203 	ands.w	r2, r2, #3
 8009d36:	4606      	mov	r6, r0
 8009d38:	460f      	mov	r7, r1
 8009d3a:	d007      	beq.n	8009d4c <__pow5mult+0x20>
 8009d3c:	4c25      	ldr	r4, [pc, #148]	; (8009dd4 <__pow5mult+0xa8>)
 8009d3e:	3a01      	subs	r2, #1
 8009d40:	2300      	movs	r3, #0
 8009d42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d46:	f7ff fe9b 	bl	8009a80 <__multadd>
 8009d4a:	4607      	mov	r7, r0
 8009d4c:	10ad      	asrs	r5, r5, #2
 8009d4e:	d03d      	beq.n	8009dcc <__pow5mult+0xa0>
 8009d50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d52:	b97c      	cbnz	r4, 8009d74 <__pow5mult+0x48>
 8009d54:	2010      	movs	r0, #16
 8009d56:	f7ff fe1b 	bl	8009990 <malloc>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	6270      	str	r0, [r6, #36]	; 0x24
 8009d5e:	b928      	cbnz	r0, 8009d6c <__pow5mult+0x40>
 8009d60:	4b1d      	ldr	r3, [pc, #116]	; (8009dd8 <__pow5mult+0xac>)
 8009d62:	481e      	ldr	r0, [pc, #120]	; (8009ddc <__pow5mult+0xb0>)
 8009d64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d68:	f000 fd22 	bl	800a7b0 <__assert_func>
 8009d6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d70:	6004      	str	r4, [r0, #0]
 8009d72:	60c4      	str	r4, [r0, #12]
 8009d74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d7c:	b94c      	cbnz	r4, 8009d92 <__pow5mult+0x66>
 8009d7e:	f240 2171 	movw	r1, #625	; 0x271
 8009d82:	4630      	mov	r0, r6
 8009d84:	f7ff ff12 	bl	8009bac <__i2b>
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d8e:	4604      	mov	r4, r0
 8009d90:	6003      	str	r3, [r0, #0]
 8009d92:	f04f 0900 	mov.w	r9, #0
 8009d96:	07eb      	lsls	r3, r5, #31
 8009d98:	d50a      	bpl.n	8009db0 <__pow5mult+0x84>
 8009d9a:	4639      	mov	r1, r7
 8009d9c:	4622      	mov	r2, r4
 8009d9e:	4630      	mov	r0, r6
 8009da0:	f7ff ff1a 	bl	8009bd8 <__multiply>
 8009da4:	4639      	mov	r1, r7
 8009da6:	4680      	mov	r8, r0
 8009da8:	4630      	mov	r0, r6
 8009daa:	f7ff fe47 	bl	8009a3c <_Bfree>
 8009dae:	4647      	mov	r7, r8
 8009db0:	106d      	asrs	r5, r5, #1
 8009db2:	d00b      	beq.n	8009dcc <__pow5mult+0xa0>
 8009db4:	6820      	ldr	r0, [r4, #0]
 8009db6:	b938      	cbnz	r0, 8009dc8 <__pow5mult+0x9c>
 8009db8:	4622      	mov	r2, r4
 8009dba:	4621      	mov	r1, r4
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	f7ff ff0b 	bl	8009bd8 <__multiply>
 8009dc2:	6020      	str	r0, [r4, #0]
 8009dc4:	f8c0 9000 	str.w	r9, [r0]
 8009dc8:	4604      	mov	r4, r0
 8009dca:	e7e4      	b.n	8009d96 <__pow5mult+0x6a>
 8009dcc:	4638      	mov	r0, r7
 8009dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dd2:	bf00      	nop
 8009dd4:	0800af20 	.word	0x0800af20
 8009dd8:	0800aced 	.word	0x0800aced
 8009ddc:	0800add0 	.word	0x0800add0

08009de0 <__lshift>:
 8009de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009de4:	460c      	mov	r4, r1
 8009de6:	6849      	ldr	r1, [r1, #4]
 8009de8:	6923      	ldr	r3, [r4, #16]
 8009dea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009dee:	68a3      	ldr	r3, [r4, #8]
 8009df0:	4607      	mov	r7, r0
 8009df2:	4691      	mov	r9, r2
 8009df4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009df8:	f108 0601 	add.w	r6, r8, #1
 8009dfc:	42b3      	cmp	r3, r6
 8009dfe:	db0b      	blt.n	8009e18 <__lshift+0x38>
 8009e00:	4638      	mov	r0, r7
 8009e02:	f7ff fddb 	bl	80099bc <_Balloc>
 8009e06:	4605      	mov	r5, r0
 8009e08:	b948      	cbnz	r0, 8009e1e <__lshift+0x3e>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	4b2a      	ldr	r3, [pc, #168]	; (8009eb8 <__lshift+0xd8>)
 8009e0e:	482b      	ldr	r0, [pc, #172]	; (8009ebc <__lshift+0xdc>)
 8009e10:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e14:	f000 fccc 	bl	800a7b0 <__assert_func>
 8009e18:	3101      	adds	r1, #1
 8009e1a:	005b      	lsls	r3, r3, #1
 8009e1c:	e7ee      	b.n	8009dfc <__lshift+0x1c>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	f100 0114 	add.w	r1, r0, #20
 8009e24:	f100 0210 	add.w	r2, r0, #16
 8009e28:	4618      	mov	r0, r3
 8009e2a:	4553      	cmp	r3, sl
 8009e2c:	db37      	blt.n	8009e9e <__lshift+0xbe>
 8009e2e:	6920      	ldr	r0, [r4, #16]
 8009e30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e34:	f104 0314 	add.w	r3, r4, #20
 8009e38:	f019 091f 	ands.w	r9, r9, #31
 8009e3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e44:	d02f      	beq.n	8009ea6 <__lshift+0xc6>
 8009e46:	f1c9 0e20 	rsb	lr, r9, #32
 8009e4a:	468a      	mov	sl, r1
 8009e4c:	f04f 0c00 	mov.w	ip, #0
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	fa02 f209 	lsl.w	r2, r2, r9
 8009e56:	ea42 020c 	orr.w	r2, r2, ip
 8009e5a:	f84a 2b04 	str.w	r2, [sl], #4
 8009e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e62:	4298      	cmp	r0, r3
 8009e64:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009e68:	d8f2      	bhi.n	8009e50 <__lshift+0x70>
 8009e6a:	1b03      	subs	r3, r0, r4
 8009e6c:	3b15      	subs	r3, #21
 8009e6e:	f023 0303 	bic.w	r3, r3, #3
 8009e72:	3304      	adds	r3, #4
 8009e74:	f104 0215 	add.w	r2, r4, #21
 8009e78:	4290      	cmp	r0, r2
 8009e7a:	bf38      	it	cc
 8009e7c:	2304      	movcc	r3, #4
 8009e7e:	f841 c003 	str.w	ip, [r1, r3]
 8009e82:	f1bc 0f00 	cmp.w	ip, #0
 8009e86:	d001      	beq.n	8009e8c <__lshift+0xac>
 8009e88:	f108 0602 	add.w	r6, r8, #2
 8009e8c:	3e01      	subs	r6, #1
 8009e8e:	4638      	mov	r0, r7
 8009e90:	612e      	str	r6, [r5, #16]
 8009e92:	4621      	mov	r1, r4
 8009e94:	f7ff fdd2 	bl	8009a3c <_Bfree>
 8009e98:	4628      	mov	r0, r5
 8009e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	e7c1      	b.n	8009e2a <__lshift+0x4a>
 8009ea6:	3904      	subs	r1, #4
 8009ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eac:	f841 2f04 	str.w	r2, [r1, #4]!
 8009eb0:	4298      	cmp	r0, r3
 8009eb2:	d8f9      	bhi.n	8009ea8 <__lshift+0xc8>
 8009eb4:	e7ea      	b.n	8009e8c <__lshift+0xac>
 8009eb6:	bf00      	nop
 8009eb8:	0800ad5f 	.word	0x0800ad5f
 8009ebc:	0800add0 	.word	0x0800add0

08009ec0 <__mcmp>:
 8009ec0:	b530      	push	{r4, r5, lr}
 8009ec2:	6902      	ldr	r2, [r0, #16]
 8009ec4:	690c      	ldr	r4, [r1, #16]
 8009ec6:	1b12      	subs	r2, r2, r4
 8009ec8:	d10e      	bne.n	8009ee8 <__mcmp+0x28>
 8009eca:	f100 0314 	add.w	r3, r0, #20
 8009ece:	3114      	adds	r1, #20
 8009ed0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ed4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ed8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009edc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ee0:	42a5      	cmp	r5, r4
 8009ee2:	d003      	beq.n	8009eec <__mcmp+0x2c>
 8009ee4:	d305      	bcc.n	8009ef2 <__mcmp+0x32>
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	4610      	mov	r0, r2
 8009eea:	bd30      	pop	{r4, r5, pc}
 8009eec:	4283      	cmp	r3, r0
 8009eee:	d3f3      	bcc.n	8009ed8 <__mcmp+0x18>
 8009ef0:	e7fa      	b.n	8009ee8 <__mcmp+0x28>
 8009ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ef6:	e7f7      	b.n	8009ee8 <__mcmp+0x28>

08009ef8 <__mdiff>:
 8009ef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efc:	460c      	mov	r4, r1
 8009efe:	4606      	mov	r6, r0
 8009f00:	4611      	mov	r1, r2
 8009f02:	4620      	mov	r0, r4
 8009f04:	4690      	mov	r8, r2
 8009f06:	f7ff ffdb 	bl	8009ec0 <__mcmp>
 8009f0a:	1e05      	subs	r5, r0, #0
 8009f0c:	d110      	bne.n	8009f30 <__mdiff+0x38>
 8009f0e:	4629      	mov	r1, r5
 8009f10:	4630      	mov	r0, r6
 8009f12:	f7ff fd53 	bl	80099bc <_Balloc>
 8009f16:	b930      	cbnz	r0, 8009f26 <__mdiff+0x2e>
 8009f18:	4b3a      	ldr	r3, [pc, #232]	; (800a004 <__mdiff+0x10c>)
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	f240 2132 	movw	r1, #562	; 0x232
 8009f20:	4839      	ldr	r0, [pc, #228]	; (800a008 <__mdiff+0x110>)
 8009f22:	f000 fc45 	bl	800a7b0 <__assert_func>
 8009f26:	2301      	movs	r3, #1
 8009f28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f30:	bfa4      	itt	ge
 8009f32:	4643      	movge	r3, r8
 8009f34:	46a0      	movge	r8, r4
 8009f36:	4630      	mov	r0, r6
 8009f38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f3c:	bfa6      	itte	ge
 8009f3e:	461c      	movge	r4, r3
 8009f40:	2500      	movge	r5, #0
 8009f42:	2501      	movlt	r5, #1
 8009f44:	f7ff fd3a 	bl	80099bc <_Balloc>
 8009f48:	b920      	cbnz	r0, 8009f54 <__mdiff+0x5c>
 8009f4a:	4b2e      	ldr	r3, [pc, #184]	; (800a004 <__mdiff+0x10c>)
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f52:	e7e5      	b.n	8009f20 <__mdiff+0x28>
 8009f54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f58:	6926      	ldr	r6, [r4, #16]
 8009f5a:	60c5      	str	r5, [r0, #12]
 8009f5c:	f104 0914 	add.w	r9, r4, #20
 8009f60:	f108 0514 	add.w	r5, r8, #20
 8009f64:	f100 0e14 	add.w	lr, r0, #20
 8009f68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f70:	f108 0210 	add.w	r2, r8, #16
 8009f74:	46f2      	mov	sl, lr
 8009f76:	2100      	movs	r1, #0
 8009f78:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f80:	fa1f f883 	uxth.w	r8, r3
 8009f84:	fa11 f18b 	uxtah	r1, r1, fp
 8009f88:	0c1b      	lsrs	r3, r3, #16
 8009f8a:	eba1 0808 	sub.w	r8, r1, r8
 8009f8e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f92:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f96:	fa1f f888 	uxth.w	r8, r8
 8009f9a:	1419      	asrs	r1, r3, #16
 8009f9c:	454e      	cmp	r6, r9
 8009f9e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009fa2:	f84a 3b04 	str.w	r3, [sl], #4
 8009fa6:	d8e7      	bhi.n	8009f78 <__mdiff+0x80>
 8009fa8:	1b33      	subs	r3, r6, r4
 8009faa:	3b15      	subs	r3, #21
 8009fac:	f023 0303 	bic.w	r3, r3, #3
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	3415      	adds	r4, #21
 8009fb4:	42a6      	cmp	r6, r4
 8009fb6:	bf38      	it	cc
 8009fb8:	2304      	movcc	r3, #4
 8009fba:	441d      	add	r5, r3
 8009fbc:	4473      	add	r3, lr
 8009fbe:	469e      	mov	lr, r3
 8009fc0:	462e      	mov	r6, r5
 8009fc2:	4566      	cmp	r6, ip
 8009fc4:	d30e      	bcc.n	8009fe4 <__mdiff+0xec>
 8009fc6:	f10c 0203 	add.w	r2, ip, #3
 8009fca:	1b52      	subs	r2, r2, r5
 8009fcc:	f022 0203 	bic.w	r2, r2, #3
 8009fd0:	3d03      	subs	r5, #3
 8009fd2:	45ac      	cmp	ip, r5
 8009fd4:	bf38      	it	cc
 8009fd6:	2200      	movcc	r2, #0
 8009fd8:	441a      	add	r2, r3
 8009fda:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009fde:	b17b      	cbz	r3, 800a000 <__mdiff+0x108>
 8009fe0:	6107      	str	r7, [r0, #16]
 8009fe2:	e7a3      	b.n	8009f2c <__mdiff+0x34>
 8009fe4:	f856 8b04 	ldr.w	r8, [r6], #4
 8009fe8:	fa11 f288 	uxtah	r2, r1, r8
 8009fec:	1414      	asrs	r4, r2, #16
 8009fee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009ff2:	b292      	uxth	r2, r2
 8009ff4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009ff8:	f84e 2b04 	str.w	r2, [lr], #4
 8009ffc:	1421      	asrs	r1, r4, #16
 8009ffe:	e7e0      	b.n	8009fc2 <__mdiff+0xca>
 800a000:	3f01      	subs	r7, #1
 800a002:	e7ea      	b.n	8009fda <__mdiff+0xe2>
 800a004:	0800ad5f 	.word	0x0800ad5f
 800a008:	0800add0 	.word	0x0800add0

0800a00c <__d2b>:
 800a00c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a010:	4689      	mov	r9, r1
 800a012:	2101      	movs	r1, #1
 800a014:	ec57 6b10 	vmov	r6, r7, d0
 800a018:	4690      	mov	r8, r2
 800a01a:	f7ff fccf 	bl	80099bc <_Balloc>
 800a01e:	4604      	mov	r4, r0
 800a020:	b930      	cbnz	r0, 800a030 <__d2b+0x24>
 800a022:	4602      	mov	r2, r0
 800a024:	4b25      	ldr	r3, [pc, #148]	; (800a0bc <__d2b+0xb0>)
 800a026:	4826      	ldr	r0, [pc, #152]	; (800a0c0 <__d2b+0xb4>)
 800a028:	f240 310a 	movw	r1, #778	; 0x30a
 800a02c:	f000 fbc0 	bl	800a7b0 <__assert_func>
 800a030:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a034:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a038:	bb35      	cbnz	r5, 800a088 <__d2b+0x7c>
 800a03a:	2e00      	cmp	r6, #0
 800a03c:	9301      	str	r3, [sp, #4]
 800a03e:	d028      	beq.n	800a092 <__d2b+0x86>
 800a040:	4668      	mov	r0, sp
 800a042:	9600      	str	r6, [sp, #0]
 800a044:	f7ff fd82 	bl	8009b4c <__lo0bits>
 800a048:	9900      	ldr	r1, [sp, #0]
 800a04a:	b300      	cbz	r0, 800a08e <__d2b+0x82>
 800a04c:	9a01      	ldr	r2, [sp, #4]
 800a04e:	f1c0 0320 	rsb	r3, r0, #32
 800a052:	fa02 f303 	lsl.w	r3, r2, r3
 800a056:	430b      	orrs	r3, r1
 800a058:	40c2      	lsrs	r2, r0
 800a05a:	6163      	str	r3, [r4, #20]
 800a05c:	9201      	str	r2, [sp, #4]
 800a05e:	9b01      	ldr	r3, [sp, #4]
 800a060:	61a3      	str	r3, [r4, #24]
 800a062:	2b00      	cmp	r3, #0
 800a064:	bf14      	ite	ne
 800a066:	2202      	movne	r2, #2
 800a068:	2201      	moveq	r2, #1
 800a06a:	6122      	str	r2, [r4, #16]
 800a06c:	b1d5      	cbz	r5, 800a0a4 <__d2b+0x98>
 800a06e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a072:	4405      	add	r5, r0
 800a074:	f8c9 5000 	str.w	r5, [r9]
 800a078:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a07c:	f8c8 0000 	str.w	r0, [r8]
 800a080:	4620      	mov	r0, r4
 800a082:	b003      	add	sp, #12
 800a084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a088:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a08c:	e7d5      	b.n	800a03a <__d2b+0x2e>
 800a08e:	6161      	str	r1, [r4, #20]
 800a090:	e7e5      	b.n	800a05e <__d2b+0x52>
 800a092:	a801      	add	r0, sp, #4
 800a094:	f7ff fd5a 	bl	8009b4c <__lo0bits>
 800a098:	9b01      	ldr	r3, [sp, #4]
 800a09a:	6163      	str	r3, [r4, #20]
 800a09c:	2201      	movs	r2, #1
 800a09e:	6122      	str	r2, [r4, #16]
 800a0a0:	3020      	adds	r0, #32
 800a0a2:	e7e3      	b.n	800a06c <__d2b+0x60>
 800a0a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0ac:	f8c9 0000 	str.w	r0, [r9]
 800a0b0:	6918      	ldr	r0, [r3, #16]
 800a0b2:	f7ff fd2b 	bl	8009b0c <__hi0bits>
 800a0b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0ba:	e7df      	b.n	800a07c <__d2b+0x70>
 800a0bc:	0800ad5f 	.word	0x0800ad5f
 800a0c0:	0800add0 	.word	0x0800add0

0800a0c4 <_calloc_r>:
 800a0c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0c6:	fba1 2402 	umull	r2, r4, r1, r2
 800a0ca:	b94c      	cbnz	r4, 800a0e0 <_calloc_r+0x1c>
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	9201      	str	r2, [sp, #4]
 800a0d0:	f000 f87a 	bl	800a1c8 <_malloc_r>
 800a0d4:	9a01      	ldr	r2, [sp, #4]
 800a0d6:	4605      	mov	r5, r0
 800a0d8:	b930      	cbnz	r0, 800a0e8 <_calloc_r+0x24>
 800a0da:	4628      	mov	r0, r5
 800a0dc:	b003      	add	sp, #12
 800a0de:	bd30      	pop	{r4, r5, pc}
 800a0e0:	220c      	movs	r2, #12
 800a0e2:	6002      	str	r2, [r0, #0]
 800a0e4:	2500      	movs	r5, #0
 800a0e6:	e7f8      	b.n	800a0da <_calloc_r+0x16>
 800a0e8:	4621      	mov	r1, r4
 800a0ea:	f7fe f84d 	bl	8008188 <memset>
 800a0ee:	e7f4      	b.n	800a0da <_calloc_r+0x16>

0800a0f0 <_free_r>:
 800a0f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0f2:	2900      	cmp	r1, #0
 800a0f4:	d044      	beq.n	800a180 <_free_r+0x90>
 800a0f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0fa:	9001      	str	r0, [sp, #4]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f1a1 0404 	sub.w	r4, r1, #4
 800a102:	bfb8      	it	lt
 800a104:	18e4      	addlt	r4, r4, r3
 800a106:	f000 fcdf 	bl	800aac8 <__malloc_lock>
 800a10a:	4a1e      	ldr	r2, [pc, #120]	; (800a184 <_free_r+0x94>)
 800a10c:	9801      	ldr	r0, [sp, #4]
 800a10e:	6813      	ldr	r3, [r2, #0]
 800a110:	b933      	cbnz	r3, 800a120 <_free_r+0x30>
 800a112:	6063      	str	r3, [r4, #4]
 800a114:	6014      	str	r4, [r2, #0]
 800a116:	b003      	add	sp, #12
 800a118:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a11c:	f000 bcda 	b.w	800aad4 <__malloc_unlock>
 800a120:	42a3      	cmp	r3, r4
 800a122:	d908      	bls.n	800a136 <_free_r+0x46>
 800a124:	6825      	ldr	r5, [r4, #0]
 800a126:	1961      	adds	r1, r4, r5
 800a128:	428b      	cmp	r3, r1
 800a12a:	bf01      	itttt	eq
 800a12c:	6819      	ldreq	r1, [r3, #0]
 800a12e:	685b      	ldreq	r3, [r3, #4]
 800a130:	1949      	addeq	r1, r1, r5
 800a132:	6021      	streq	r1, [r4, #0]
 800a134:	e7ed      	b.n	800a112 <_free_r+0x22>
 800a136:	461a      	mov	r2, r3
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	b10b      	cbz	r3, 800a140 <_free_r+0x50>
 800a13c:	42a3      	cmp	r3, r4
 800a13e:	d9fa      	bls.n	800a136 <_free_r+0x46>
 800a140:	6811      	ldr	r1, [r2, #0]
 800a142:	1855      	adds	r5, r2, r1
 800a144:	42a5      	cmp	r5, r4
 800a146:	d10b      	bne.n	800a160 <_free_r+0x70>
 800a148:	6824      	ldr	r4, [r4, #0]
 800a14a:	4421      	add	r1, r4
 800a14c:	1854      	adds	r4, r2, r1
 800a14e:	42a3      	cmp	r3, r4
 800a150:	6011      	str	r1, [r2, #0]
 800a152:	d1e0      	bne.n	800a116 <_free_r+0x26>
 800a154:	681c      	ldr	r4, [r3, #0]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	6053      	str	r3, [r2, #4]
 800a15a:	4421      	add	r1, r4
 800a15c:	6011      	str	r1, [r2, #0]
 800a15e:	e7da      	b.n	800a116 <_free_r+0x26>
 800a160:	d902      	bls.n	800a168 <_free_r+0x78>
 800a162:	230c      	movs	r3, #12
 800a164:	6003      	str	r3, [r0, #0]
 800a166:	e7d6      	b.n	800a116 <_free_r+0x26>
 800a168:	6825      	ldr	r5, [r4, #0]
 800a16a:	1961      	adds	r1, r4, r5
 800a16c:	428b      	cmp	r3, r1
 800a16e:	bf04      	itt	eq
 800a170:	6819      	ldreq	r1, [r3, #0]
 800a172:	685b      	ldreq	r3, [r3, #4]
 800a174:	6063      	str	r3, [r4, #4]
 800a176:	bf04      	itt	eq
 800a178:	1949      	addeq	r1, r1, r5
 800a17a:	6021      	streq	r1, [r4, #0]
 800a17c:	6054      	str	r4, [r2, #4]
 800a17e:	e7ca      	b.n	800a116 <_free_r+0x26>
 800a180:	b003      	add	sp, #12
 800a182:	bd30      	pop	{r4, r5, pc}
 800a184:	20000a64 	.word	0x20000a64

0800a188 <sbrk_aligned>:
 800a188:	b570      	push	{r4, r5, r6, lr}
 800a18a:	4e0e      	ldr	r6, [pc, #56]	; (800a1c4 <sbrk_aligned+0x3c>)
 800a18c:	460c      	mov	r4, r1
 800a18e:	6831      	ldr	r1, [r6, #0]
 800a190:	4605      	mov	r5, r0
 800a192:	b911      	cbnz	r1, 800a19a <sbrk_aligned+0x12>
 800a194:	f000 f9e6 	bl	800a564 <_sbrk_r>
 800a198:	6030      	str	r0, [r6, #0]
 800a19a:	4621      	mov	r1, r4
 800a19c:	4628      	mov	r0, r5
 800a19e:	f000 f9e1 	bl	800a564 <_sbrk_r>
 800a1a2:	1c43      	adds	r3, r0, #1
 800a1a4:	d00a      	beq.n	800a1bc <sbrk_aligned+0x34>
 800a1a6:	1cc4      	adds	r4, r0, #3
 800a1a8:	f024 0403 	bic.w	r4, r4, #3
 800a1ac:	42a0      	cmp	r0, r4
 800a1ae:	d007      	beq.n	800a1c0 <sbrk_aligned+0x38>
 800a1b0:	1a21      	subs	r1, r4, r0
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	f000 f9d6 	bl	800a564 <_sbrk_r>
 800a1b8:	3001      	adds	r0, #1
 800a1ba:	d101      	bne.n	800a1c0 <sbrk_aligned+0x38>
 800a1bc:	f04f 34ff 	mov.w	r4, #4294967295
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	bd70      	pop	{r4, r5, r6, pc}
 800a1c4:	20000a68 	.word	0x20000a68

0800a1c8 <_malloc_r>:
 800a1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1cc:	1ccd      	adds	r5, r1, #3
 800a1ce:	f025 0503 	bic.w	r5, r5, #3
 800a1d2:	3508      	adds	r5, #8
 800a1d4:	2d0c      	cmp	r5, #12
 800a1d6:	bf38      	it	cc
 800a1d8:	250c      	movcc	r5, #12
 800a1da:	2d00      	cmp	r5, #0
 800a1dc:	4607      	mov	r7, r0
 800a1de:	db01      	blt.n	800a1e4 <_malloc_r+0x1c>
 800a1e0:	42a9      	cmp	r1, r5
 800a1e2:	d905      	bls.n	800a1f0 <_malloc_r+0x28>
 800a1e4:	230c      	movs	r3, #12
 800a1e6:	603b      	str	r3, [r7, #0]
 800a1e8:	2600      	movs	r6, #0
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1f0:	4e2e      	ldr	r6, [pc, #184]	; (800a2ac <_malloc_r+0xe4>)
 800a1f2:	f000 fc69 	bl	800aac8 <__malloc_lock>
 800a1f6:	6833      	ldr	r3, [r6, #0]
 800a1f8:	461c      	mov	r4, r3
 800a1fa:	bb34      	cbnz	r4, 800a24a <_malloc_r+0x82>
 800a1fc:	4629      	mov	r1, r5
 800a1fe:	4638      	mov	r0, r7
 800a200:	f7ff ffc2 	bl	800a188 <sbrk_aligned>
 800a204:	1c43      	adds	r3, r0, #1
 800a206:	4604      	mov	r4, r0
 800a208:	d14d      	bne.n	800a2a6 <_malloc_r+0xde>
 800a20a:	6834      	ldr	r4, [r6, #0]
 800a20c:	4626      	mov	r6, r4
 800a20e:	2e00      	cmp	r6, #0
 800a210:	d140      	bne.n	800a294 <_malloc_r+0xcc>
 800a212:	6823      	ldr	r3, [r4, #0]
 800a214:	4631      	mov	r1, r6
 800a216:	4638      	mov	r0, r7
 800a218:	eb04 0803 	add.w	r8, r4, r3
 800a21c:	f000 f9a2 	bl	800a564 <_sbrk_r>
 800a220:	4580      	cmp	r8, r0
 800a222:	d13a      	bne.n	800a29a <_malloc_r+0xd2>
 800a224:	6821      	ldr	r1, [r4, #0]
 800a226:	3503      	adds	r5, #3
 800a228:	1a6d      	subs	r5, r5, r1
 800a22a:	f025 0503 	bic.w	r5, r5, #3
 800a22e:	3508      	adds	r5, #8
 800a230:	2d0c      	cmp	r5, #12
 800a232:	bf38      	it	cc
 800a234:	250c      	movcc	r5, #12
 800a236:	4629      	mov	r1, r5
 800a238:	4638      	mov	r0, r7
 800a23a:	f7ff ffa5 	bl	800a188 <sbrk_aligned>
 800a23e:	3001      	adds	r0, #1
 800a240:	d02b      	beq.n	800a29a <_malloc_r+0xd2>
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	442b      	add	r3, r5
 800a246:	6023      	str	r3, [r4, #0]
 800a248:	e00e      	b.n	800a268 <_malloc_r+0xa0>
 800a24a:	6822      	ldr	r2, [r4, #0]
 800a24c:	1b52      	subs	r2, r2, r5
 800a24e:	d41e      	bmi.n	800a28e <_malloc_r+0xc6>
 800a250:	2a0b      	cmp	r2, #11
 800a252:	d916      	bls.n	800a282 <_malloc_r+0xba>
 800a254:	1961      	adds	r1, r4, r5
 800a256:	42a3      	cmp	r3, r4
 800a258:	6025      	str	r5, [r4, #0]
 800a25a:	bf18      	it	ne
 800a25c:	6059      	strne	r1, [r3, #4]
 800a25e:	6863      	ldr	r3, [r4, #4]
 800a260:	bf08      	it	eq
 800a262:	6031      	streq	r1, [r6, #0]
 800a264:	5162      	str	r2, [r4, r5]
 800a266:	604b      	str	r3, [r1, #4]
 800a268:	4638      	mov	r0, r7
 800a26a:	f104 060b 	add.w	r6, r4, #11
 800a26e:	f000 fc31 	bl	800aad4 <__malloc_unlock>
 800a272:	f026 0607 	bic.w	r6, r6, #7
 800a276:	1d23      	adds	r3, r4, #4
 800a278:	1af2      	subs	r2, r6, r3
 800a27a:	d0b6      	beq.n	800a1ea <_malloc_r+0x22>
 800a27c:	1b9b      	subs	r3, r3, r6
 800a27e:	50a3      	str	r3, [r4, r2]
 800a280:	e7b3      	b.n	800a1ea <_malloc_r+0x22>
 800a282:	6862      	ldr	r2, [r4, #4]
 800a284:	42a3      	cmp	r3, r4
 800a286:	bf0c      	ite	eq
 800a288:	6032      	streq	r2, [r6, #0]
 800a28a:	605a      	strne	r2, [r3, #4]
 800a28c:	e7ec      	b.n	800a268 <_malloc_r+0xa0>
 800a28e:	4623      	mov	r3, r4
 800a290:	6864      	ldr	r4, [r4, #4]
 800a292:	e7b2      	b.n	800a1fa <_malloc_r+0x32>
 800a294:	4634      	mov	r4, r6
 800a296:	6876      	ldr	r6, [r6, #4]
 800a298:	e7b9      	b.n	800a20e <_malloc_r+0x46>
 800a29a:	230c      	movs	r3, #12
 800a29c:	603b      	str	r3, [r7, #0]
 800a29e:	4638      	mov	r0, r7
 800a2a0:	f000 fc18 	bl	800aad4 <__malloc_unlock>
 800a2a4:	e7a1      	b.n	800a1ea <_malloc_r+0x22>
 800a2a6:	6025      	str	r5, [r4, #0]
 800a2a8:	e7de      	b.n	800a268 <_malloc_r+0xa0>
 800a2aa:	bf00      	nop
 800a2ac:	20000a64 	.word	0x20000a64

0800a2b0 <__sfputc_r>:
 800a2b0:	6893      	ldr	r3, [r2, #8]
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	b410      	push	{r4}
 800a2b8:	6093      	str	r3, [r2, #8]
 800a2ba:	da08      	bge.n	800a2ce <__sfputc_r+0x1e>
 800a2bc:	6994      	ldr	r4, [r2, #24]
 800a2be:	42a3      	cmp	r3, r4
 800a2c0:	db01      	blt.n	800a2c6 <__sfputc_r+0x16>
 800a2c2:	290a      	cmp	r1, #10
 800a2c4:	d103      	bne.n	800a2ce <__sfputc_r+0x1e>
 800a2c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2ca:	f000 b99f 	b.w	800a60c <__swbuf_r>
 800a2ce:	6813      	ldr	r3, [r2, #0]
 800a2d0:	1c58      	adds	r0, r3, #1
 800a2d2:	6010      	str	r0, [r2, #0]
 800a2d4:	7019      	strb	r1, [r3, #0]
 800a2d6:	4608      	mov	r0, r1
 800a2d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2dc:	4770      	bx	lr

0800a2de <__sfputs_r>:
 800a2de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2e0:	4606      	mov	r6, r0
 800a2e2:	460f      	mov	r7, r1
 800a2e4:	4614      	mov	r4, r2
 800a2e6:	18d5      	adds	r5, r2, r3
 800a2e8:	42ac      	cmp	r4, r5
 800a2ea:	d101      	bne.n	800a2f0 <__sfputs_r+0x12>
 800a2ec:	2000      	movs	r0, #0
 800a2ee:	e007      	b.n	800a300 <__sfputs_r+0x22>
 800a2f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f4:	463a      	mov	r2, r7
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	f7ff ffda 	bl	800a2b0 <__sfputc_r>
 800a2fc:	1c43      	adds	r3, r0, #1
 800a2fe:	d1f3      	bne.n	800a2e8 <__sfputs_r+0xa>
 800a300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a304 <_vfiprintf_r>:
 800a304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a308:	460d      	mov	r5, r1
 800a30a:	b09d      	sub	sp, #116	; 0x74
 800a30c:	4614      	mov	r4, r2
 800a30e:	4698      	mov	r8, r3
 800a310:	4606      	mov	r6, r0
 800a312:	b118      	cbz	r0, 800a31c <_vfiprintf_r+0x18>
 800a314:	6983      	ldr	r3, [r0, #24]
 800a316:	b90b      	cbnz	r3, 800a31c <_vfiprintf_r+0x18>
 800a318:	f7ff fa94 	bl	8009844 <__sinit>
 800a31c:	4b89      	ldr	r3, [pc, #548]	; (800a544 <_vfiprintf_r+0x240>)
 800a31e:	429d      	cmp	r5, r3
 800a320:	d11b      	bne.n	800a35a <_vfiprintf_r+0x56>
 800a322:	6875      	ldr	r5, [r6, #4]
 800a324:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a326:	07d9      	lsls	r1, r3, #31
 800a328:	d405      	bmi.n	800a336 <_vfiprintf_r+0x32>
 800a32a:	89ab      	ldrh	r3, [r5, #12]
 800a32c:	059a      	lsls	r2, r3, #22
 800a32e:	d402      	bmi.n	800a336 <_vfiprintf_r+0x32>
 800a330:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a332:	f7ff fb2a 	bl	800998a <__retarget_lock_acquire_recursive>
 800a336:	89ab      	ldrh	r3, [r5, #12]
 800a338:	071b      	lsls	r3, r3, #28
 800a33a:	d501      	bpl.n	800a340 <_vfiprintf_r+0x3c>
 800a33c:	692b      	ldr	r3, [r5, #16]
 800a33e:	b9eb      	cbnz	r3, 800a37c <_vfiprintf_r+0x78>
 800a340:	4629      	mov	r1, r5
 800a342:	4630      	mov	r0, r6
 800a344:	f000 f9c6 	bl	800a6d4 <__swsetup_r>
 800a348:	b1c0      	cbz	r0, 800a37c <_vfiprintf_r+0x78>
 800a34a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a34c:	07dc      	lsls	r4, r3, #31
 800a34e:	d50e      	bpl.n	800a36e <_vfiprintf_r+0x6a>
 800a350:	f04f 30ff 	mov.w	r0, #4294967295
 800a354:	b01d      	add	sp, #116	; 0x74
 800a356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a35a:	4b7b      	ldr	r3, [pc, #492]	; (800a548 <_vfiprintf_r+0x244>)
 800a35c:	429d      	cmp	r5, r3
 800a35e:	d101      	bne.n	800a364 <_vfiprintf_r+0x60>
 800a360:	68b5      	ldr	r5, [r6, #8]
 800a362:	e7df      	b.n	800a324 <_vfiprintf_r+0x20>
 800a364:	4b79      	ldr	r3, [pc, #484]	; (800a54c <_vfiprintf_r+0x248>)
 800a366:	429d      	cmp	r5, r3
 800a368:	bf08      	it	eq
 800a36a:	68f5      	ldreq	r5, [r6, #12]
 800a36c:	e7da      	b.n	800a324 <_vfiprintf_r+0x20>
 800a36e:	89ab      	ldrh	r3, [r5, #12]
 800a370:	0598      	lsls	r0, r3, #22
 800a372:	d4ed      	bmi.n	800a350 <_vfiprintf_r+0x4c>
 800a374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a376:	f7ff fb09 	bl	800998c <__retarget_lock_release_recursive>
 800a37a:	e7e9      	b.n	800a350 <_vfiprintf_r+0x4c>
 800a37c:	2300      	movs	r3, #0
 800a37e:	9309      	str	r3, [sp, #36]	; 0x24
 800a380:	2320      	movs	r3, #32
 800a382:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a386:	f8cd 800c 	str.w	r8, [sp, #12]
 800a38a:	2330      	movs	r3, #48	; 0x30
 800a38c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a550 <_vfiprintf_r+0x24c>
 800a390:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a394:	f04f 0901 	mov.w	r9, #1
 800a398:	4623      	mov	r3, r4
 800a39a:	469a      	mov	sl, r3
 800a39c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3a0:	b10a      	cbz	r2, 800a3a6 <_vfiprintf_r+0xa2>
 800a3a2:	2a25      	cmp	r2, #37	; 0x25
 800a3a4:	d1f9      	bne.n	800a39a <_vfiprintf_r+0x96>
 800a3a6:	ebba 0b04 	subs.w	fp, sl, r4
 800a3aa:	d00b      	beq.n	800a3c4 <_vfiprintf_r+0xc0>
 800a3ac:	465b      	mov	r3, fp
 800a3ae:	4622      	mov	r2, r4
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	f7ff ff93 	bl	800a2de <__sfputs_r>
 800a3b8:	3001      	adds	r0, #1
 800a3ba:	f000 80aa 	beq.w	800a512 <_vfiprintf_r+0x20e>
 800a3be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3c0:	445a      	add	r2, fp
 800a3c2:	9209      	str	r2, [sp, #36]	; 0x24
 800a3c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f000 80a2 	beq.w	800a512 <_vfiprintf_r+0x20e>
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3d8:	f10a 0a01 	add.w	sl, sl, #1
 800a3dc:	9304      	str	r3, [sp, #16]
 800a3de:	9307      	str	r3, [sp, #28]
 800a3e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3e4:	931a      	str	r3, [sp, #104]	; 0x68
 800a3e6:	4654      	mov	r4, sl
 800a3e8:	2205      	movs	r2, #5
 800a3ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ee:	4858      	ldr	r0, [pc, #352]	; (800a550 <_vfiprintf_r+0x24c>)
 800a3f0:	f7f5 fef6 	bl	80001e0 <memchr>
 800a3f4:	9a04      	ldr	r2, [sp, #16]
 800a3f6:	b9d8      	cbnz	r0, 800a430 <_vfiprintf_r+0x12c>
 800a3f8:	06d1      	lsls	r1, r2, #27
 800a3fa:	bf44      	itt	mi
 800a3fc:	2320      	movmi	r3, #32
 800a3fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a402:	0713      	lsls	r3, r2, #28
 800a404:	bf44      	itt	mi
 800a406:	232b      	movmi	r3, #43	; 0x2b
 800a408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a40c:	f89a 3000 	ldrb.w	r3, [sl]
 800a410:	2b2a      	cmp	r3, #42	; 0x2a
 800a412:	d015      	beq.n	800a440 <_vfiprintf_r+0x13c>
 800a414:	9a07      	ldr	r2, [sp, #28]
 800a416:	4654      	mov	r4, sl
 800a418:	2000      	movs	r0, #0
 800a41a:	f04f 0c0a 	mov.w	ip, #10
 800a41e:	4621      	mov	r1, r4
 800a420:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a424:	3b30      	subs	r3, #48	; 0x30
 800a426:	2b09      	cmp	r3, #9
 800a428:	d94e      	bls.n	800a4c8 <_vfiprintf_r+0x1c4>
 800a42a:	b1b0      	cbz	r0, 800a45a <_vfiprintf_r+0x156>
 800a42c:	9207      	str	r2, [sp, #28]
 800a42e:	e014      	b.n	800a45a <_vfiprintf_r+0x156>
 800a430:	eba0 0308 	sub.w	r3, r0, r8
 800a434:	fa09 f303 	lsl.w	r3, r9, r3
 800a438:	4313      	orrs	r3, r2
 800a43a:	9304      	str	r3, [sp, #16]
 800a43c:	46a2      	mov	sl, r4
 800a43e:	e7d2      	b.n	800a3e6 <_vfiprintf_r+0xe2>
 800a440:	9b03      	ldr	r3, [sp, #12]
 800a442:	1d19      	adds	r1, r3, #4
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	9103      	str	r1, [sp, #12]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	bfbb      	ittet	lt
 800a44c:	425b      	neglt	r3, r3
 800a44e:	f042 0202 	orrlt.w	r2, r2, #2
 800a452:	9307      	strge	r3, [sp, #28]
 800a454:	9307      	strlt	r3, [sp, #28]
 800a456:	bfb8      	it	lt
 800a458:	9204      	strlt	r2, [sp, #16]
 800a45a:	7823      	ldrb	r3, [r4, #0]
 800a45c:	2b2e      	cmp	r3, #46	; 0x2e
 800a45e:	d10c      	bne.n	800a47a <_vfiprintf_r+0x176>
 800a460:	7863      	ldrb	r3, [r4, #1]
 800a462:	2b2a      	cmp	r3, #42	; 0x2a
 800a464:	d135      	bne.n	800a4d2 <_vfiprintf_r+0x1ce>
 800a466:	9b03      	ldr	r3, [sp, #12]
 800a468:	1d1a      	adds	r2, r3, #4
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	9203      	str	r2, [sp, #12]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	bfb8      	it	lt
 800a472:	f04f 33ff 	movlt.w	r3, #4294967295
 800a476:	3402      	adds	r4, #2
 800a478:	9305      	str	r3, [sp, #20]
 800a47a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a560 <_vfiprintf_r+0x25c>
 800a47e:	7821      	ldrb	r1, [r4, #0]
 800a480:	2203      	movs	r2, #3
 800a482:	4650      	mov	r0, sl
 800a484:	f7f5 feac 	bl	80001e0 <memchr>
 800a488:	b140      	cbz	r0, 800a49c <_vfiprintf_r+0x198>
 800a48a:	2340      	movs	r3, #64	; 0x40
 800a48c:	eba0 000a 	sub.w	r0, r0, sl
 800a490:	fa03 f000 	lsl.w	r0, r3, r0
 800a494:	9b04      	ldr	r3, [sp, #16]
 800a496:	4303      	orrs	r3, r0
 800a498:	3401      	adds	r4, #1
 800a49a:	9304      	str	r3, [sp, #16]
 800a49c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4a0:	482c      	ldr	r0, [pc, #176]	; (800a554 <_vfiprintf_r+0x250>)
 800a4a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4a6:	2206      	movs	r2, #6
 800a4a8:	f7f5 fe9a 	bl	80001e0 <memchr>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d03f      	beq.n	800a530 <_vfiprintf_r+0x22c>
 800a4b0:	4b29      	ldr	r3, [pc, #164]	; (800a558 <_vfiprintf_r+0x254>)
 800a4b2:	bb1b      	cbnz	r3, 800a4fc <_vfiprintf_r+0x1f8>
 800a4b4:	9b03      	ldr	r3, [sp, #12]
 800a4b6:	3307      	adds	r3, #7
 800a4b8:	f023 0307 	bic.w	r3, r3, #7
 800a4bc:	3308      	adds	r3, #8
 800a4be:	9303      	str	r3, [sp, #12]
 800a4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c2:	443b      	add	r3, r7
 800a4c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a4c6:	e767      	b.n	800a398 <_vfiprintf_r+0x94>
 800a4c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4cc:	460c      	mov	r4, r1
 800a4ce:	2001      	movs	r0, #1
 800a4d0:	e7a5      	b.n	800a41e <_vfiprintf_r+0x11a>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	3401      	adds	r4, #1
 800a4d6:	9305      	str	r3, [sp, #20]
 800a4d8:	4619      	mov	r1, r3
 800a4da:	f04f 0c0a 	mov.w	ip, #10
 800a4de:	4620      	mov	r0, r4
 800a4e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4e4:	3a30      	subs	r2, #48	; 0x30
 800a4e6:	2a09      	cmp	r2, #9
 800a4e8:	d903      	bls.n	800a4f2 <_vfiprintf_r+0x1ee>
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d0c5      	beq.n	800a47a <_vfiprintf_r+0x176>
 800a4ee:	9105      	str	r1, [sp, #20]
 800a4f0:	e7c3      	b.n	800a47a <_vfiprintf_r+0x176>
 800a4f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e7f0      	b.n	800a4de <_vfiprintf_r+0x1da>
 800a4fc:	ab03      	add	r3, sp, #12
 800a4fe:	9300      	str	r3, [sp, #0]
 800a500:	462a      	mov	r2, r5
 800a502:	4b16      	ldr	r3, [pc, #88]	; (800a55c <_vfiprintf_r+0x258>)
 800a504:	a904      	add	r1, sp, #16
 800a506:	4630      	mov	r0, r6
 800a508:	f7fd fee6 	bl	80082d8 <_printf_float>
 800a50c:	4607      	mov	r7, r0
 800a50e:	1c78      	adds	r0, r7, #1
 800a510:	d1d6      	bne.n	800a4c0 <_vfiprintf_r+0x1bc>
 800a512:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a514:	07d9      	lsls	r1, r3, #31
 800a516:	d405      	bmi.n	800a524 <_vfiprintf_r+0x220>
 800a518:	89ab      	ldrh	r3, [r5, #12]
 800a51a:	059a      	lsls	r2, r3, #22
 800a51c:	d402      	bmi.n	800a524 <_vfiprintf_r+0x220>
 800a51e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a520:	f7ff fa34 	bl	800998c <__retarget_lock_release_recursive>
 800a524:	89ab      	ldrh	r3, [r5, #12]
 800a526:	065b      	lsls	r3, r3, #25
 800a528:	f53f af12 	bmi.w	800a350 <_vfiprintf_r+0x4c>
 800a52c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a52e:	e711      	b.n	800a354 <_vfiprintf_r+0x50>
 800a530:	ab03      	add	r3, sp, #12
 800a532:	9300      	str	r3, [sp, #0]
 800a534:	462a      	mov	r2, r5
 800a536:	4b09      	ldr	r3, [pc, #36]	; (800a55c <_vfiprintf_r+0x258>)
 800a538:	a904      	add	r1, sp, #16
 800a53a:	4630      	mov	r0, r6
 800a53c:	f7fe f970 	bl	8008820 <_printf_i>
 800a540:	e7e4      	b.n	800a50c <_vfiprintf_r+0x208>
 800a542:	bf00      	nop
 800a544:	0800ad90 	.word	0x0800ad90
 800a548:	0800adb0 	.word	0x0800adb0
 800a54c:	0800ad70 	.word	0x0800ad70
 800a550:	0800af2c 	.word	0x0800af2c
 800a554:	0800af36 	.word	0x0800af36
 800a558:	080082d9 	.word	0x080082d9
 800a55c:	0800a2df 	.word	0x0800a2df
 800a560:	0800af32 	.word	0x0800af32

0800a564 <_sbrk_r>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	4d06      	ldr	r5, [pc, #24]	; (800a580 <_sbrk_r+0x1c>)
 800a568:	2300      	movs	r3, #0
 800a56a:	4604      	mov	r4, r0
 800a56c:	4608      	mov	r0, r1
 800a56e:	602b      	str	r3, [r5, #0]
 800a570:	f7f8 f9ce 	bl	8002910 <_sbrk>
 800a574:	1c43      	adds	r3, r0, #1
 800a576:	d102      	bne.n	800a57e <_sbrk_r+0x1a>
 800a578:	682b      	ldr	r3, [r5, #0]
 800a57a:	b103      	cbz	r3, 800a57e <_sbrk_r+0x1a>
 800a57c:	6023      	str	r3, [r4, #0]
 800a57e:	bd38      	pop	{r3, r4, r5, pc}
 800a580:	20000a6c 	.word	0x20000a6c

0800a584 <__sread>:
 800a584:	b510      	push	{r4, lr}
 800a586:	460c      	mov	r4, r1
 800a588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a58c:	f000 faa8 	bl	800aae0 <_read_r>
 800a590:	2800      	cmp	r0, #0
 800a592:	bfab      	itete	ge
 800a594:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a596:	89a3      	ldrhlt	r3, [r4, #12]
 800a598:	181b      	addge	r3, r3, r0
 800a59a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a59e:	bfac      	ite	ge
 800a5a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5a2:	81a3      	strhlt	r3, [r4, #12]
 800a5a4:	bd10      	pop	{r4, pc}

0800a5a6 <__swrite>:
 800a5a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5aa:	461f      	mov	r7, r3
 800a5ac:	898b      	ldrh	r3, [r1, #12]
 800a5ae:	05db      	lsls	r3, r3, #23
 800a5b0:	4605      	mov	r5, r0
 800a5b2:	460c      	mov	r4, r1
 800a5b4:	4616      	mov	r6, r2
 800a5b6:	d505      	bpl.n	800a5c4 <__swrite+0x1e>
 800a5b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5bc:	2302      	movs	r3, #2
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f000 f9f8 	bl	800a9b4 <_lseek_r>
 800a5c4:	89a3      	ldrh	r3, [r4, #12]
 800a5c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5ce:	81a3      	strh	r3, [r4, #12]
 800a5d0:	4632      	mov	r2, r6
 800a5d2:	463b      	mov	r3, r7
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5da:	f000 b869 	b.w	800a6b0 <_write_r>

0800a5de <__sseek>:
 800a5de:	b510      	push	{r4, lr}
 800a5e0:	460c      	mov	r4, r1
 800a5e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5e6:	f000 f9e5 	bl	800a9b4 <_lseek_r>
 800a5ea:	1c43      	adds	r3, r0, #1
 800a5ec:	89a3      	ldrh	r3, [r4, #12]
 800a5ee:	bf15      	itete	ne
 800a5f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5fa:	81a3      	strheq	r3, [r4, #12]
 800a5fc:	bf18      	it	ne
 800a5fe:	81a3      	strhne	r3, [r4, #12]
 800a600:	bd10      	pop	{r4, pc}

0800a602 <__sclose>:
 800a602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a606:	f000 b8f1 	b.w	800a7ec <_close_r>
	...

0800a60c <__swbuf_r>:
 800a60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a60e:	460e      	mov	r6, r1
 800a610:	4614      	mov	r4, r2
 800a612:	4605      	mov	r5, r0
 800a614:	b118      	cbz	r0, 800a61e <__swbuf_r+0x12>
 800a616:	6983      	ldr	r3, [r0, #24]
 800a618:	b90b      	cbnz	r3, 800a61e <__swbuf_r+0x12>
 800a61a:	f7ff f913 	bl	8009844 <__sinit>
 800a61e:	4b21      	ldr	r3, [pc, #132]	; (800a6a4 <__swbuf_r+0x98>)
 800a620:	429c      	cmp	r4, r3
 800a622:	d12b      	bne.n	800a67c <__swbuf_r+0x70>
 800a624:	686c      	ldr	r4, [r5, #4]
 800a626:	69a3      	ldr	r3, [r4, #24]
 800a628:	60a3      	str	r3, [r4, #8]
 800a62a:	89a3      	ldrh	r3, [r4, #12]
 800a62c:	071a      	lsls	r2, r3, #28
 800a62e:	d52f      	bpl.n	800a690 <__swbuf_r+0x84>
 800a630:	6923      	ldr	r3, [r4, #16]
 800a632:	b36b      	cbz	r3, 800a690 <__swbuf_r+0x84>
 800a634:	6923      	ldr	r3, [r4, #16]
 800a636:	6820      	ldr	r0, [r4, #0]
 800a638:	1ac0      	subs	r0, r0, r3
 800a63a:	6963      	ldr	r3, [r4, #20]
 800a63c:	b2f6      	uxtb	r6, r6
 800a63e:	4283      	cmp	r3, r0
 800a640:	4637      	mov	r7, r6
 800a642:	dc04      	bgt.n	800a64e <__swbuf_r+0x42>
 800a644:	4621      	mov	r1, r4
 800a646:	4628      	mov	r0, r5
 800a648:	f000 f966 	bl	800a918 <_fflush_r>
 800a64c:	bb30      	cbnz	r0, 800a69c <__swbuf_r+0x90>
 800a64e:	68a3      	ldr	r3, [r4, #8]
 800a650:	3b01      	subs	r3, #1
 800a652:	60a3      	str	r3, [r4, #8]
 800a654:	6823      	ldr	r3, [r4, #0]
 800a656:	1c5a      	adds	r2, r3, #1
 800a658:	6022      	str	r2, [r4, #0]
 800a65a:	701e      	strb	r6, [r3, #0]
 800a65c:	6963      	ldr	r3, [r4, #20]
 800a65e:	3001      	adds	r0, #1
 800a660:	4283      	cmp	r3, r0
 800a662:	d004      	beq.n	800a66e <__swbuf_r+0x62>
 800a664:	89a3      	ldrh	r3, [r4, #12]
 800a666:	07db      	lsls	r3, r3, #31
 800a668:	d506      	bpl.n	800a678 <__swbuf_r+0x6c>
 800a66a:	2e0a      	cmp	r6, #10
 800a66c:	d104      	bne.n	800a678 <__swbuf_r+0x6c>
 800a66e:	4621      	mov	r1, r4
 800a670:	4628      	mov	r0, r5
 800a672:	f000 f951 	bl	800a918 <_fflush_r>
 800a676:	b988      	cbnz	r0, 800a69c <__swbuf_r+0x90>
 800a678:	4638      	mov	r0, r7
 800a67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a67c:	4b0a      	ldr	r3, [pc, #40]	; (800a6a8 <__swbuf_r+0x9c>)
 800a67e:	429c      	cmp	r4, r3
 800a680:	d101      	bne.n	800a686 <__swbuf_r+0x7a>
 800a682:	68ac      	ldr	r4, [r5, #8]
 800a684:	e7cf      	b.n	800a626 <__swbuf_r+0x1a>
 800a686:	4b09      	ldr	r3, [pc, #36]	; (800a6ac <__swbuf_r+0xa0>)
 800a688:	429c      	cmp	r4, r3
 800a68a:	bf08      	it	eq
 800a68c:	68ec      	ldreq	r4, [r5, #12]
 800a68e:	e7ca      	b.n	800a626 <__swbuf_r+0x1a>
 800a690:	4621      	mov	r1, r4
 800a692:	4628      	mov	r0, r5
 800a694:	f000 f81e 	bl	800a6d4 <__swsetup_r>
 800a698:	2800      	cmp	r0, #0
 800a69a:	d0cb      	beq.n	800a634 <__swbuf_r+0x28>
 800a69c:	f04f 37ff 	mov.w	r7, #4294967295
 800a6a0:	e7ea      	b.n	800a678 <__swbuf_r+0x6c>
 800a6a2:	bf00      	nop
 800a6a4:	0800ad90 	.word	0x0800ad90
 800a6a8:	0800adb0 	.word	0x0800adb0
 800a6ac:	0800ad70 	.word	0x0800ad70

0800a6b0 <_write_r>:
 800a6b0:	b538      	push	{r3, r4, r5, lr}
 800a6b2:	4d07      	ldr	r5, [pc, #28]	; (800a6d0 <_write_r+0x20>)
 800a6b4:	4604      	mov	r4, r0
 800a6b6:	4608      	mov	r0, r1
 800a6b8:	4611      	mov	r1, r2
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	602a      	str	r2, [r5, #0]
 800a6be:	461a      	mov	r2, r3
 800a6c0:	f7f8 f8d2 	bl	8002868 <_write>
 800a6c4:	1c43      	adds	r3, r0, #1
 800a6c6:	d102      	bne.n	800a6ce <_write_r+0x1e>
 800a6c8:	682b      	ldr	r3, [r5, #0]
 800a6ca:	b103      	cbz	r3, 800a6ce <_write_r+0x1e>
 800a6cc:	6023      	str	r3, [r4, #0]
 800a6ce:	bd38      	pop	{r3, r4, r5, pc}
 800a6d0:	20000a6c 	.word	0x20000a6c

0800a6d4 <__swsetup_r>:
 800a6d4:	4b32      	ldr	r3, [pc, #200]	; (800a7a0 <__swsetup_r+0xcc>)
 800a6d6:	b570      	push	{r4, r5, r6, lr}
 800a6d8:	681d      	ldr	r5, [r3, #0]
 800a6da:	4606      	mov	r6, r0
 800a6dc:	460c      	mov	r4, r1
 800a6de:	b125      	cbz	r5, 800a6ea <__swsetup_r+0x16>
 800a6e0:	69ab      	ldr	r3, [r5, #24]
 800a6e2:	b913      	cbnz	r3, 800a6ea <__swsetup_r+0x16>
 800a6e4:	4628      	mov	r0, r5
 800a6e6:	f7ff f8ad 	bl	8009844 <__sinit>
 800a6ea:	4b2e      	ldr	r3, [pc, #184]	; (800a7a4 <__swsetup_r+0xd0>)
 800a6ec:	429c      	cmp	r4, r3
 800a6ee:	d10f      	bne.n	800a710 <__swsetup_r+0x3c>
 800a6f0:	686c      	ldr	r4, [r5, #4]
 800a6f2:	89a3      	ldrh	r3, [r4, #12]
 800a6f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6f8:	0719      	lsls	r1, r3, #28
 800a6fa:	d42c      	bmi.n	800a756 <__swsetup_r+0x82>
 800a6fc:	06dd      	lsls	r5, r3, #27
 800a6fe:	d411      	bmi.n	800a724 <__swsetup_r+0x50>
 800a700:	2309      	movs	r3, #9
 800a702:	6033      	str	r3, [r6, #0]
 800a704:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a708:	81a3      	strh	r3, [r4, #12]
 800a70a:	f04f 30ff 	mov.w	r0, #4294967295
 800a70e:	e03e      	b.n	800a78e <__swsetup_r+0xba>
 800a710:	4b25      	ldr	r3, [pc, #148]	; (800a7a8 <__swsetup_r+0xd4>)
 800a712:	429c      	cmp	r4, r3
 800a714:	d101      	bne.n	800a71a <__swsetup_r+0x46>
 800a716:	68ac      	ldr	r4, [r5, #8]
 800a718:	e7eb      	b.n	800a6f2 <__swsetup_r+0x1e>
 800a71a:	4b24      	ldr	r3, [pc, #144]	; (800a7ac <__swsetup_r+0xd8>)
 800a71c:	429c      	cmp	r4, r3
 800a71e:	bf08      	it	eq
 800a720:	68ec      	ldreq	r4, [r5, #12]
 800a722:	e7e6      	b.n	800a6f2 <__swsetup_r+0x1e>
 800a724:	0758      	lsls	r0, r3, #29
 800a726:	d512      	bpl.n	800a74e <__swsetup_r+0x7a>
 800a728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a72a:	b141      	cbz	r1, 800a73e <__swsetup_r+0x6a>
 800a72c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a730:	4299      	cmp	r1, r3
 800a732:	d002      	beq.n	800a73a <__swsetup_r+0x66>
 800a734:	4630      	mov	r0, r6
 800a736:	f7ff fcdb 	bl	800a0f0 <_free_r>
 800a73a:	2300      	movs	r3, #0
 800a73c:	6363      	str	r3, [r4, #52]	; 0x34
 800a73e:	89a3      	ldrh	r3, [r4, #12]
 800a740:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a744:	81a3      	strh	r3, [r4, #12]
 800a746:	2300      	movs	r3, #0
 800a748:	6063      	str	r3, [r4, #4]
 800a74a:	6923      	ldr	r3, [r4, #16]
 800a74c:	6023      	str	r3, [r4, #0]
 800a74e:	89a3      	ldrh	r3, [r4, #12]
 800a750:	f043 0308 	orr.w	r3, r3, #8
 800a754:	81a3      	strh	r3, [r4, #12]
 800a756:	6923      	ldr	r3, [r4, #16]
 800a758:	b94b      	cbnz	r3, 800a76e <__swsetup_r+0x9a>
 800a75a:	89a3      	ldrh	r3, [r4, #12]
 800a75c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a764:	d003      	beq.n	800a76e <__swsetup_r+0x9a>
 800a766:	4621      	mov	r1, r4
 800a768:	4630      	mov	r0, r6
 800a76a:	f000 f95b 	bl	800aa24 <__smakebuf_r>
 800a76e:	89a0      	ldrh	r0, [r4, #12]
 800a770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a774:	f010 0301 	ands.w	r3, r0, #1
 800a778:	d00a      	beq.n	800a790 <__swsetup_r+0xbc>
 800a77a:	2300      	movs	r3, #0
 800a77c:	60a3      	str	r3, [r4, #8]
 800a77e:	6963      	ldr	r3, [r4, #20]
 800a780:	425b      	negs	r3, r3
 800a782:	61a3      	str	r3, [r4, #24]
 800a784:	6923      	ldr	r3, [r4, #16]
 800a786:	b943      	cbnz	r3, 800a79a <__swsetup_r+0xc6>
 800a788:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a78c:	d1ba      	bne.n	800a704 <__swsetup_r+0x30>
 800a78e:	bd70      	pop	{r4, r5, r6, pc}
 800a790:	0781      	lsls	r1, r0, #30
 800a792:	bf58      	it	pl
 800a794:	6963      	ldrpl	r3, [r4, #20]
 800a796:	60a3      	str	r3, [r4, #8]
 800a798:	e7f4      	b.n	800a784 <__swsetup_r+0xb0>
 800a79a:	2000      	movs	r0, #0
 800a79c:	e7f7      	b.n	800a78e <__swsetup_r+0xba>
 800a79e:	bf00      	nop
 800a7a0:	2000000c 	.word	0x2000000c
 800a7a4:	0800ad90 	.word	0x0800ad90
 800a7a8:	0800adb0 	.word	0x0800adb0
 800a7ac:	0800ad70 	.word	0x0800ad70

0800a7b0 <__assert_func>:
 800a7b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7b2:	4614      	mov	r4, r2
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	4b09      	ldr	r3, [pc, #36]	; (800a7dc <__assert_func+0x2c>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4605      	mov	r5, r0
 800a7bc:	68d8      	ldr	r0, [r3, #12]
 800a7be:	b14c      	cbz	r4, 800a7d4 <__assert_func+0x24>
 800a7c0:	4b07      	ldr	r3, [pc, #28]	; (800a7e0 <__assert_func+0x30>)
 800a7c2:	9100      	str	r1, [sp, #0]
 800a7c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7c8:	4906      	ldr	r1, [pc, #24]	; (800a7e4 <__assert_func+0x34>)
 800a7ca:	462b      	mov	r3, r5
 800a7cc:	f000 f8e0 	bl	800a990 <fiprintf>
 800a7d0:	f000 f9a5 	bl	800ab1e <abort>
 800a7d4:	4b04      	ldr	r3, [pc, #16]	; (800a7e8 <__assert_func+0x38>)
 800a7d6:	461c      	mov	r4, r3
 800a7d8:	e7f3      	b.n	800a7c2 <__assert_func+0x12>
 800a7da:	bf00      	nop
 800a7dc:	2000000c 	.word	0x2000000c
 800a7e0:	0800af3d 	.word	0x0800af3d
 800a7e4:	0800af4a 	.word	0x0800af4a
 800a7e8:	0800af78 	.word	0x0800af78

0800a7ec <_close_r>:
 800a7ec:	b538      	push	{r3, r4, r5, lr}
 800a7ee:	4d06      	ldr	r5, [pc, #24]	; (800a808 <_close_r+0x1c>)
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	4608      	mov	r0, r1
 800a7f6:	602b      	str	r3, [r5, #0]
 800a7f8:	f7f8 f856 	bl	80028a8 <_close>
 800a7fc:	1c43      	adds	r3, r0, #1
 800a7fe:	d102      	bne.n	800a806 <_close_r+0x1a>
 800a800:	682b      	ldr	r3, [r5, #0]
 800a802:	b103      	cbz	r3, 800a806 <_close_r+0x1a>
 800a804:	6023      	str	r3, [r4, #0]
 800a806:	bd38      	pop	{r3, r4, r5, pc}
 800a808:	20000a6c 	.word	0x20000a6c

0800a80c <__sflush_r>:
 800a80c:	898a      	ldrh	r2, [r1, #12]
 800a80e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a812:	4605      	mov	r5, r0
 800a814:	0710      	lsls	r0, r2, #28
 800a816:	460c      	mov	r4, r1
 800a818:	d458      	bmi.n	800a8cc <__sflush_r+0xc0>
 800a81a:	684b      	ldr	r3, [r1, #4]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	dc05      	bgt.n	800a82c <__sflush_r+0x20>
 800a820:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a822:	2b00      	cmp	r3, #0
 800a824:	dc02      	bgt.n	800a82c <__sflush_r+0x20>
 800a826:	2000      	movs	r0, #0
 800a828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a82c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a82e:	2e00      	cmp	r6, #0
 800a830:	d0f9      	beq.n	800a826 <__sflush_r+0x1a>
 800a832:	2300      	movs	r3, #0
 800a834:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a838:	682f      	ldr	r7, [r5, #0]
 800a83a:	602b      	str	r3, [r5, #0]
 800a83c:	d032      	beq.n	800a8a4 <__sflush_r+0x98>
 800a83e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a840:	89a3      	ldrh	r3, [r4, #12]
 800a842:	075a      	lsls	r2, r3, #29
 800a844:	d505      	bpl.n	800a852 <__sflush_r+0x46>
 800a846:	6863      	ldr	r3, [r4, #4]
 800a848:	1ac0      	subs	r0, r0, r3
 800a84a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a84c:	b10b      	cbz	r3, 800a852 <__sflush_r+0x46>
 800a84e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a850:	1ac0      	subs	r0, r0, r3
 800a852:	2300      	movs	r3, #0
 800a854:	4602      	mov	r2, r0
 800a856:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a858:	6a21      	ldr	r1, [r4, #32]
 800a85a:	4628      	mov	r0, r5
 800a85c:	47b0      	blx	r6
 800a85e:	1c43      	adds	r3, r0, #1
 800a860:	89a3      	ldrh	r3, [r4, #12]
 800a862:	d106      	bne.n	800a872 <__sflush_r+0x66>
 800a864:	6829      	ldr	r1, [r5, #0]
 800a866:	291d      	cmp	r1, #29
 800a868:	d82c      	bhi.n	800a8c4 <__sflush_r+0xb8>
 800a86a:	4a2a      	ldr	r2, [pc, #168]	; (800a914 <__sflush_r+0x108>)
 800a86c:	40ca      	lsrs	r2, r1
 800a86e:	07d6      	lsls	r6, r2, #31
 800a870:	d528      	bpl.n	800a8c4 <__sflush_r+0xb8>
 800a872:	2200      	movs	r2, #0
 800a874:	6062      	str	r2, [r4, #4]
 800a876:	04d9      	lsls	r1, r3, #19
 800a878:	6922      	ldr	r2, [r4, #16]
 800a87a:	6022      	str	r2, [r4, #0]
 800a87c:	d504      	bpl.n	800a888 <__sflush_r+0x7c>
 800a87e:	1c42      	adds	r2, r0, #1
 800a880:	d101      	bne.n	800a886 <__sflush_r+0x7a>
 800a882:	682b      	ldr	r3, [r5, #0]
 800a884:	b903      	cbnz	r3, 800a888 <__sflush_r+0x7c>
 800a886:	6560      	str	r0, [r4, #84]	; 0x54
 800a888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a88a:	602f      	str	r7, [r5, #0]
 800a88c:	2900      	cmp	r1, #0
 800a88e:	d0ca      	beq.n	800a826 <__sflush_r+0x1a>
 800a890:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a894:	4299      	cmp	r1, r3
 800a896:	d002      	beq.n	800a89e <__sflush_r+0x92>
 800a898:	4628      	mov	r0, r5
 800a89a:	f7ff fc29 	bl	800a0f0 <_free_r>
 800a89e:	2000      	movs	r0, #0
 800a8a0:	6360      	str	r0, [r4, #52]	; 0x34
 800a8a2:	e7c1      	b.n	800a828 <__sflush_r+0x1c>
 800a8a4:	6a21      	ldr	r1, [r4, #32]
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	47b0      	blx	r6
 800a8ac:	1c41      	adds	r1, r0, #1
 800a8ae:	d1c7      	bne.n	800a840 <__sflush_r+0x34>
 800a8b0:	682b      	ldr	r3, [r5, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d0c4      	beq.n	800a840 <__sflush_r+0x34>
 800a8b6:	2b1d      	cmp	r3, #29
 800a8b8:	d001      	beq.n	800a8be <__sflush_r+0xb2>
 800a8ba:	2b16      	cmp	r3, #22
 800a8bc:	d101      	bne.n	800a8c2 <__sflush_r+0xb6>
 800a8be:	602f      	str	r7, [r5, #0]
 800a8c0:	e7b1      	b.n	800a826 <__sflush_r+0x1a>
 800a8c2:	89a3      	ldrh	r3, [r4, #12]
 800a8c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8c8:	81a3      	strh	r3, [r4, #12]
 800a8ca:	e7ad      	b.n	800a828 <__sflush_r+0x1c>
 800a8cc:	690f      	ldr	r7, [r1, #16]
 800a8ce:	2f00      	cmp	r7, #0
 800a8d0:	d0a9      	beq.n	800a826 <__sflush_r+0x1a>
 800a8d2:	0793      	lsls	r3, r2, #30
 800a8d4:	680e      	ldr	r6, [r1, #0]
 800a8d6:	bf08      	it	eq
 800a8d8:	694b      	ldreq	r3, [r1, #20]
 800a8da:	600f      	str	r7, [r1, #0]
 800a8dc:	bf18      	it	ne
 800a8de:	2300      	movne	r3, #0
 800a8e0:	eba6 0807 	sub.w	r8, r6, r7
 800a8e4:	608b      	str	r3, [r1, #8]
 800a8e6:	f1b8 0f00 	cmp.w	r8, #0
 800a8ea:	dd9c      	ble.n	800a826 <__sflush_r+0x1a>
 800a8ec:	6a21      	ldr	r1, [r4, #32]
 800a8ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8f0:	4643      	mov	r3, r8
 800a8f2:	463a      	mov	r2, r7
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	47b0      	blx	r6
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	dc06      	bgt.n	800a90a <__sflush_r+0xfe>
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a902:	81a3      	strh	r3, [r4, #12]
 800a904:	f04f 30ff 	mov.w	r0, #4294967295
 800a908:	e78e      	b.n	800a828 <__sflush_r+0x1c>
 800a90a:	4407      	add	r7, r0
 800a90c:	eba8 0800 	sub.w	r8, r8, r0
 800a910:	e7e9      	b.n	800a8e6 <__sflush_r+0xda>
 800a912:	bf00      	nop
 800a914:	20400001 	.word	0x20400001

0800a918 <_fflush_r>:
 800a918:	b538      	push	{r3, r4, r5, lr}
 800a91a:	690b      	ldr	r3, [r1, #16]
 800a91c:	4605      	mov	r5, r0
 800a91e:	460c      	mov	r4, r1
 800a920:	b913      	cbnz	r3, 800a928 <_fflush_r+0x10>
 800a922:	2500      	movs	r5, #0
 800a924:	4628      	mov	r0, r5
 800a926:	bd38      	pop	{r3, r4, r5, pc}
 800a928:	b118      	cbz	r0, 800a932 <_fflush_r+0x1a>
 800a92a:	6983      	ldr	r3, [r0, #24]
 800a92c:	b90b      	cbnz	r3, 800a932 <_fflush_r+0x1a>
 800a92e:	f7fe ff89 	bl	8009844 <__sinit>
 800a932:	4b14      	ldr	r3, [pc, #80]	; (800a984 <_fflush_r+0x6c>)
 800a934:	429c      	cmp	r4, r3
 800a936:	d11b      	bne.n	800a970 <_fflush_r+0x58>
 800a938:	686c      	ldr	r4, [r5, #4]
 800a93a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d0ef      	beq.n	800a922 <_fflush_r+0xa>
 800a942:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a944:	07d0      	lsls	r0, r2, #31
 800a946:	d404      	bmi.n	800a952 <_fflush_r+0x3a>
 800a948:	0599      	lsls	r1, r3, #22
 800a94a:	d402      	bmi.n	800a952 <_fflush_r+0x3a>
 800a94c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a94e:	f7ff f81c 	bl	800998a <__retarget_lock_acquire_recursive>
 800a952:	4628      	mov	r0, r5
 800a954:	4621      	mov	r1, r4
 800a956:	f7ff ff59 	bl	800a80c <__sflush_r>
 800a95a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a95c:	07da      	lsls	r2, r3, #31
 800a95e:	4605      	mov	r5, r0
 800a960:	d4e0      	bmi.n	800a924 <_fflush_r+0xc>
 800a962:	89a3      	ldrh	r3, [r4, #12]
 800a964:	059b      	lsls	r3, r3, #22
 800a966:	d4dd      	bmi.n	800a924 <_fflush_r+0xc>
 800a968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a96a:	f7ff f80f 	bl	800998c <__retarget_lock_release_recursive>
 800a96e:	e7d9      	b.n	800a924 <_fflush_r+0xc>
 800a970:	4b05      	ldr	r3, [pc, #20]	; (800a988 <_fflush_r+0x70>)
 800a972:	429c      	cmp	r4, r3
 800a974:	d101      	bne.n	800a97a <_fflush_r+0x62>
 800a976:	68ac      	ldr	r4, [r5, #8]
 800a978:	e7df      	b.n	800a93a <_fflush_r+0x22>
 800a97a:	4b04      	ldr	r3, [pc, #16]	; (800a98c <_fflush_r+0x74>)
 800a97c:	429c      	cmp	r4, r3
 800a97e:	bf08      	it	eq
 800a980:	68ec      	ldreq	r4, [r5, #12]
 800a982:	e7da      	b.n	800a93a <_fflush_r+0x22>
 800a984:	0800ad90 	.word	0x0800ad90
 800a988:	0800adb0 	.word	0x0800adb0
 800a98c:	0800ad70 	.word	0x0800ad70

0800a990 <fiprintf>:
 800a990:	b40e      	push	{r1, r2, r3}
 800a992:	b503      	push	{r0, r1, lr}
 800a994:	4601      	mov	r1, r0
 800a996:	ab03      	add	r3, sp, #12
 800a998:	4805      	ldr	r0, [pc, #20]	; (800a9b0 <fiprintf+0x20>)
 800a99a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a99e:	6800      	ldr	r0, [r0, #0]
 800a9a0:	9301      	str	r3, [sp, #4]
 800a9a2:	f7ff fcaf 	bl	800a304 <_vfiprintf_r>
 800a9a6:	b002      	add	sp, #8
 800a9a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9ac:	b003      	add	sp, #12
 800a9ae:	4770      	bx	lr
 800a9b0:	2000000c 	.word	0x2000000c

0800a9b4 <_lseek_r>:
 800a9b4:	b538      	push	{r3, r4, r5, lr}
 800a9b6:	4d07      	ldr	r5, [pc, #28]	; (800a9d4 <_lseek_r+0x20>)
 800a9b8:	4604      	mov	r4, r0
 800a9ba:	4608      	mov	r0, r1
 800a9bc:	4611      	mov	r1, r2
 800a9be:	2200      	movs	r2, #0
 800a9c0:	602a      	str	r2, [r5, #0]
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	f7f7 ff97 	bl	80028f6 <_lseek>
 800a9c8:	1c43      	adds	r3, r0, #1
 800a9ca:	d102      	bne.n	800a9d2 <_lseek_r+0x1e>
 800a9cc:	682b      	ldr	r3, [r5, #0]
 800a9ce:	b103      	cbz	r3, 800a9d2 <_lseek_r+0x1e>
 800a9d0:	6023      	str	r3, [r4, #0]
 800a9d2:	bd38      	pop	{r3, r4, r5, pc}
 800a9d4:	20000a6c 	.word	0x20000a6c

0800a9d8 <__swhatbuf_r>:
 800a9d8:	b570      	push	{r4, r5, r6, lr}
 800a9da:	460e      	mov	r6, r1
 800a9dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9e0:	2900      	cmp	r1, #0
 800a9e2:	b096      	sub	sp, #88	; 0x58
 800a9e4:	4614      	mov	r4, r2
 800a9e6:	461d      	mov	r5, r3
 800a9e8:	da08      	bge.n	800a9fc <__swhatbuf_r+0x24>
 800a9ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	602a      	str	r2, [r5, #0]
 800a9f2:	061a      	lsls	r2, r3, #24
 800a9f4:	d410      	bmi.n	800aa18 <__swhatbuf_r+0x40>
 800a9f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9fa:	e00e      	b.n	800aa1a <__swhatbuf_r+0x42>
 800a9fc:	466a      	mov	r2, sp
 800a9fe:	f000 f895 	bl	800ab2c <_fstat_r>
 800aa02:	2800      	cmp	r0, #0
 800aa04:	dbf1      	blt.n	800a9ea <__swhatbuf_r+0x12>
 800aa06:	9a01      	ldr	r2, [sp, #4]
 800aa08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa10:	425a      	negs	r2, r3
 800aa12:	415a      	adcs	r2, r3
 800aa14:	602a      	str	r2, [r5, #0]
 800aa16:	e7ee      	b.n	800a9f6 <__swhatbuf_r+0x1e>
 800aa18:	2340      	movs	r3, #64	; 0x40
 800aa1a:	2000      	movs	r0, #0
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	b016      	add	sp, #88	; 0x58
 800aa20:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aa24 <__smakebuf_r>:
 800aa24:	898b      	ldrh	r3, [r1, #12]
 800aa26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa28:	079d      	lsls	r5, r3, #30
 800aa2a:	4606      	mov	r6, r0
 800aa2c:	460c      	mov	r4, r1
 800aa2e:	d507      	bpl.n	800aa40 <__smakebuf_r+0x1c>
 800aa30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa34:	6023      	str	r3, [r4, #0]
 800aa36:	6123      	str	r3, [r4, #16]
 800aa38:	2301      	movs	r3, #1
 800aa3a:	6163      	str	r3, [r4, #20]
 800aa3c:	b002      	add	sp, #8
 800aa3e:	bd70      	pop	{r4, r5, r6, pc}
 800aa40:	ab01      	add	r3, sp, #4
 800aa42:	466a      	mov	r2, sp
 800aa44:	f7ff ffc8 	bl	800a9d8 <__swhatbuf_r>
 800aa48:	9900      	ldr	r1, [sp, #0]
 800aa4a:	4605      	mov	r5, r0
 800aa4c:	4630      	mov	r0, r6
 800aa4e:	f7ff fbbb 	bl	800a1c8 <_malloc_r>
 800aa52:	b948      	cbnz	r0, 800aa68 <__smakebuf_r+0x44>
 800aa54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa58:	059a      	lsls	r2, r3, #22
 800aa5a:	d4ef      	bmi.n	800aa3c <__smakebuf_r+0x18>
 800aa5c:	f023 0303 	bic.w	r3, r3, #3
 800aa60:	f043 0302 	orr.w	r3, r3, #2
 800aa64:	81a3      	strh	r3, [r4, #12]
 800aa66:	e7e3      	b.n	800aa30 <__smakebuf_r+0xc>
 800aa68:	4b0d      	ldr	r3, [pc, #52]	; (800aaa0 <__smakebuf_r+0x7c>)
 800aa6a:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa6c:	89a3      	ldrh	r3, [r4, #12]
 800aa6e:	6020      	str	r0, [r4, #0]
 800aa70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa74:	81a3      	strh	r3, [r4, #12]
 800aa76:	9b00      	ldr	r3, [sp, #0]
 800aa78:	6163      	str	r3, [r4, #20]
 800aa7a:	9b01      	ldr	r3, [sp, #4]
 800aa7c:	6120      	str	r0, [r4, #16]
 800aa7e:	b15b      	cbz	r3, 800aa98 <__smakebuf_r+0x74>
 800aa80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa84:	4630      	mov	r0, r6
 800aa86:	f000 f863 	bl	800ab50 <_isatty_r>
 800aa8a:	b128      	cbz	r0, 800aa98 <__smakebuf_r+0x74>
 800aa8c:	89a3      	ldrh	r3, [r4, #12]
 800aa8e:	f023 0303 	bic.w	r3, r3, #3
 800aa92:	f043 0301 	orr.w	r3, r3, #1
 800aa96:	81a3      	strh	r3, [r4, #12]
 800aa98:	89a0      	ldrh	r0, [r4, #12]
 800aa9a:	4305      	orrs	r5, r0
 800aa9c:	81a5      	strh	r5, [r4, #12]
 800aa9e:	e7cd      	b.n	800aa3c <__smakebuf_r+0x18>
 800aaa0:	080097dd 	.word	0x080097dd

0800aaa4 <__ascii_mbtowc>:
 800aaa4:	b082      	sub	sp, #8
 800aaa6:	b901      	cbnz	r1, 800aaaa <__ascii_mbtowc+0x6>
 800aaa8:	a901      	add	r1, sp, #4
 800aaaa:	b142      	cbz	r2, 800aabe <__ascii_mbtowc+0x1a>
 800aaac:	b14b      	cbz	r3, 800aac2 <__ascii_mbtowc+0x1e>
 800aaae:	7813      	ldrb	r3, [r2, #0]
 800aab0:	600b      	str	r3, [r1, #0]
 800aab2:	7812      	ldrb	r2, [r2, #0]
 800aab4:	1e10      	subs	r0, r2, #0
 800aab6:	bf18      	it	ne
 800aab8:	2001      	movne	r0, #1
 800aaba:	b002      	add	sp, #8
 800aabc:	4770      	bx	lr
 800aabe:	4610      	mov	r0, r2
 800aac0:	e7fb      	b.n	800aaba <__ascii_mbtowc+0x16>
 800aac2:	f06f 0001 	mvn.w	r0, #1
 800aac6:	e7f8      	b.n	800aaba <__ascii_mbtowc+0x16>

0800aac8 <__malloc_lock>:
 800aac8:	4801      	ldr	r0, [pc, #4]	; (800aad0 <__malloc_lock+0x8>)
 800aaca:	f7fe bf5e 	b.w	800998a <__retarget_lock_acquire_recursive>
 800aace:	bf00      	nop
 800aad0:	20000a60 	.word	0x20000a60

0800aad4 <__malloc_unlock>:
 800aad4:	4801      	ldr	r0, [pc, #4]	; (800aadc <__malloc_unlock+0x8>)
 800aad6:	f7fe bf59 	b.w	800998c <__retarget_lock_release_recursive>
 800aada:	bf00      	nop
 800aadc:	20000a60 	.word	0x20000a60

0800aae0 <_read_r>:
 800aae0:	b538      	push	{r3, r4, r5, lr}
 800aae2:	4d07      	ldr	r5, [pc, #28]	; (800ab00 <_read_r+0x20>)
 800aae4:	4604      	mov	r4, r0
 800aae6:	4608      	mov	r0, r1
 800aae8:	4611      	mov	r1, r2
 800aaea:	2200      	movs	r2, #0
 800aaec:	602a      	str	r2, [r5, #0]
 800aaee:	461a      	mov	r2, r3
 800aaf0:	f7f7 fe9c 	bl	800282c <_read>
 800aaf4:	1c43      	adds	r3, r0, #1
 800aaf6:	d102      	bne.n	800aafe <_read_r+0x1e>
 800aaf8:	682b      	ldr	r3, [r5, #0]
 800aafa:	b103      	cbz	r3, 800aafe <_read_r+0x1e>
 800aafc:	6023      	str	r3, [r4, #0]
 800aafe:	bd38      	pop	{r3, r4, r5, pc}
 800ab00:	20000a6c 	.word	0x20000a6c

0800ab04 <__ascii_wctomb>:
 800ab04:	b149      	cbz	r1, 800ab1a <__ascii_wctomb+0x16>
 800ab06:	2aff      	cmp	r2, #255	; 0xff
 800ab08:	bf85      	ittet	hi
 800ab0a:	238a      	movhi	r3, #138	; 0x8a
 800ab0c:	6003      	strhi	r3, [r0, #0]
 800ab0e:	700a      	strbls	r2, [r1, #0]
 800ab10:	f04f 30ff 	movhi.w	r0, #4294967295
 800ab14:	bf98      	it	ls
 800ab16:	2001      	movls	r0, #1
 800ab18:	4770      	bx	lr
 800ab1a:	4608      	mov	r0, r1
 800ab1c:	4770      	bx	lr

0800ab1e <abort>:
 800ab1e:	b508      	push	{r3, lr}
 800ab20:	2006      	movs	r0, #6
 800ab22:	f000 f84d 	bl	800abc0 <raise>
 800ab26:	2001      	movs	r0, #1
 800ab28:	f7f7 fe76 	bl	8002818 <_exit>

0800ab2c <_fstat_r>:
 800ab2c:	b538      	push	{r3, r4, r5, lr}
 800ab2e:	4d07      	ldr	r5, [pc, #28]	; (800ab4c <_fstat_r+0x20>)
 800ab30:	2300      	movs	r3, #0
 800ab32:	4604      	mov	r4, r0
 800ab34:	4608      	mov	r0, r1
 800ab36:	4611      	mov	r1, r2
 800ab38:	602b      	str	r3, [r5, #0]
 800ab3a:	f7f7 fec1 	bl	80028c0 <_fstat>
 800ab3e:	1c43      	adds	r3, r0, #1
 800ab40:	d102      	bne.n	800ab48 <_fstat_r+0x1c>
 800ab42:	682b      	ldr	r3, [r5, #0]
 800ab44:	b103      	cbz	r3, 800ab48 <_fstat_r+0x1c>
 800ab46:	6023      	str	r3, [r4, #0]
 800ab48:	bd38      	pop	{r3, r4, r5, pc}
 800ab4a:	bf00      	nop
 800ab4c:	20000a6c 	.word	0x20000a6c

0800ab50 <_isatty_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	4d06      	ldr	r5, [pc, #24]	; (800ab6c <_isatty_r+0x1c>)
 800ab54:	2300      	movs	r3, #0
 800ab56:	4604      	mov	r4, r0
 800ab58:	4608      	mov	r0, r1
 800ab5a:	602b      	str	r3, [r5, #0]
 800ab5c:	f7f7 fec0 	bl	80028e0 <_isatty>
 800ab60:	1c43      	adds	r3, r0, #1
 800ab62:	d102      	bne.n	800ab6a <_isatty_r+0x1a>
 800ab64:	682b      	ldr	r3, [r5, #0]
 800ab66:	b103      	cbz	r3, 800ab6a <_isatty_r+0x1a>
 800ab68:	6023      	str	r3, [r4, #0]
 800ab6a:	bd38      	pop	{r3, r4, r5, pc}
 800ab6c:	20000a6c 	.word	0x20000a6c

0800ab70 <_raise_r>:
 800ab70:	291f      	cmp	r1, #31
 800ab72:	b538      	push	{r3, r4, r5, lr}
 800ab74:	4604      	mov	r4, r0
 800ab76:	460d      	mov	r5, r1
 800ab78:	d904      	bls.n	800ab84 <_raise_r+0x14>
 800ab7a:	2316      	movs	r3, #22
 800ab7c:	6003      	str	r3, [r0, #0]
 800ab7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab82:	bd38      	pop	{r3, r4, r5, pc}
 800ab84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab86:	b112      	cbz	r2, 800ab8e <_raise_r+0x1e>
 800ab88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab8c:	b94b      	cbnz	r3, 800aba2 <_raise_r+0x32>
 800ab8e:	4620      	mov	r0, r4
 800ab90:	f000 f830 	bl	800abf4 <_getpid_r>
 800ab94:	462a      	mov	r2, r5
 800ab96:	4601      	mov	r1, r0
 800ab98:	4620      	mov	r0, r4
 800ab9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab9e:	f000 b817 	b.w	800abd0 <_kill_r>
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d00a      	beq.n	800abbc <_raise_r+0x4c>
 800aba6:	1c59      	adds	r1, r3, #1
 800aba8:	d103      	bne.n	800abb2 <_raise_r+0x42>
 800abaa:	2316      	movs	r3, #22
 800abac:	6003      	str	r3, [r0, #0]
 800abae:	2001      	movs	r0, #1
 800abb0:	e7e7      	b.n	800ab82 <_raise_r+0x12>
 800abb2:	2400      	movs	r4, #0
 800abb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800abb8:	4628      	mov	r0, r5
 800abba:	4798      	blx	r3
 800abbc:	2000      	movs	r0, #0
 800abbe:	e7e0      	b.n	800ab82 <_raise_r+0x12>

0800abc0 <raise>:
 800abc0:	4b02      	ldr	r3, [pc, #8]	; (800abcc <raise+0xc>)
 800abc2:	4601      	mov	r1, r0
 800abc4:	6818      	ldr	r0, [r3, #0]
 800abc6:	f7ff bfd3 	b.w	800ab70 <_raise_r>
 800abca:	bf00      	nop
 800abcc:	2000000c 	.word	0x2000000c

0800abd0 <_kill_r>:
 800abd0:	b538      	push	{r3, r4, r5, lr}
 800abd2:	4d07      	ldr	r5, [pc, #28]	; (800abf0 <_kill_r+0x20>)
 800abd4:	2300      	movs	r3, #0
 800abd6:	4604      	mov	r4, r0
 800abd8:	4608      	mov	r0, r1
 800abda:	4611      	mov	r1, r2
 800abdc:	602b      	str	r3, [r5, #0]
 800abde:	f7f7 fe0b 	bl	80027f8 <_kill>
 800abe2:	1c43      	adds	r3, r0, #1
 800abe4:	d102      	bne.n	800abec <_kill_r+0x1c>
 800abe6:	682b      	ldr	r3, [r5, #0]
 800abe8:	b103      	cbz	r3, 800abec <_kill_r+0x1c>
 800abea:	6023      	str	r3, [r4, #0]
 800abec:	bd38      	pop	{r3, r4, r5, pc}
 800abee:	bf00      	nop
 800abf0:	20000a6c 	.word	0x20000a6c

0800abf4 <_getpid_r>:
 800abf4:	f7f7 bdf8 	b.w	80027e8 <_getpid>

0800abf8 <_init>:
 800abf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfa:	bf00      	nop
 800abfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abfe:	bc08      	pop	{r3}
 800ac00:	469e      	mov	lr, r3
 800ac02:	4770      	bx	lr

0800ac04 <_fini>:
 800ac04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac06:	bf00      	nop
 800ac08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac0a:	bc08      	pop	{r3}
 800ac0c:	469e      	mov	lr, r3
 800ac0e:	4770      	bx	lr
